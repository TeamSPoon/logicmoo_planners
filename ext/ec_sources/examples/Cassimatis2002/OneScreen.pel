:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/BrewkaDixKonolige1997/Wine.e',47).
:- call_pel_directive(translate(unskipped,
                                '/pack/logicmoo_ec/ext/ec_sources/examples/Cassimatis2002/OneScreen.pel')).
:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(ecalc).
:- call_pel_directive(translate(begining,
                                '/pack/logicmoo_ec/ext/ec_sources/examples/Cassimatis2002/OneScreen.pel')).
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @phdthesis{Cassimatis:2002,
%;   author = "Nicholas L. Cassimatis",
%;   year = "2002",
%;   title = "Polyscheme: A Cognitive Architecture for Integrating Multiple Representation and Inference Schemes",
%;   address = "Cambridge, MA",
%;   school = "Program in Media Arts and Sciences, School of Architecture and Planning, Massachusetts Institute of Technology",
%; }
%;

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Cassimatis2002/OneScreen.e',20).
% load foundations/Root.e
:- call_pel_directive(load('foundations/Root.e')).

% load foundations/EC.e
:- call_pel_directive(load('foundations/EC.e')).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Cassimatis2002/OneScreen.e',22).
% load examples/Cassimatis2002/PolySpace.e
:- call_pel_directive(load('examples/Cassimatis2002/PolySpace.e')).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Cassimatis2002/OneScreen.e',24).
% grid G1
t(grid,g1).

% object X,Y,Screen
t(object,x).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Cassimatis2002/OneScreen.e',24).
t(object,y).
t(object,screen).
%; perceptions:


% Shape(X,Round).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Cassimatis2002/OneScreen.e',27).
shape(x,round).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Cassimatis2002/OneScreen.e',29).
% Color(X,Red).
color(x,red).


% Shape(Y,Round).
shape(y,round).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Cassimatis2002/OneScreen.e',31).
% Color(Y,Red).
color(y,red).


% Shape(Screen,Square).
shape(screen,square).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Cassimatis2002/OneScreen.e',33).
% Color(Screen,Green).
color(screen,green).


% [time]
 % HoldsAt(Location(G1,Screen,2,0),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Cassimatis2002/OneScreen.e',33).
holds_at(location(g1,screen,2,0),Time).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Cassimatis2002/OneScreen.e',35).
% HoldsAt(Location(G1,X,1,1),0).
holds_at(location(g1,x,1,1),0).


% HoldsAt(Location(G1,Y,3,1),2).
holds_at(location(g1,y,3,1),2).


% [xcoord,ycoord,time]
% xcoord!=% 2 & !(xcoord=1 & ycoord=1 & time=0) ->
% !HoldsAt(Location(G1,X,xcoord,ycoord),time) |
% xcoord=3 & ycoord=1 & time=2 & Equal(X,Y).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Cassimatis2002/OneScreen.e',39).
Xcoord\=2, not((Xcoord=1, Ycoord=1, Time=0)) ->
    (   holds_at(not(location(g1, x, Xcoord, Ycoord)), Time)
    ;   Xcoord=3,
        Ycoord=1,
        Time=2,
        equal(x, y)
    ).


% [xcoord,ycoord,time]
% xcoord!=% 2 & !(xcoord=3 & ycoord=1 & time=2) ->
% !HoldsAt(Location(G1,Y,xcoord,ycoord),time) |
% xcoord=1 & ycoord=1 & time=0 & Equal(X,Y).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Cassimatis2002/OneScreen.e',44).
Xcoord\=2, not((Xcoord=3, Ycoord=1, Time=2)) ->
    (   holds_at(not(location(g1, y, Xcoord, Ycoord)), Time)
    ;   Xcoord=1,
        Ycoord=1,
        Time=0,
        equal(x, y)
    ).

% range time 0 2
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Cassimatis2002/OneScreen.e',47).
:- call_pel_directive(range(time, 0, 2)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Cassimatis2002/OneScreen.e',49).
% range xcoord 0 4
:- call_pel_directive(range(xcoord, 0, 4)).

% range ycoord 0 2
:- call_pel_directive(range(ycoord, 0, 2)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Cassimatis2002/OneScreen.e',51).
% range offset 0 0
:- call_pel_directive(range(offset, 0, 0)).
%; End of file.
:- call_pel_directive(translate(ending,
                                '/pack/logicmoo_ec/ext/ec_sources/examples/Cassimatis2002/OneScreen.pel')).
