:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Cassimatis2002/PolySpace.e',116).
% From E: 
% 
% :-call_pel_directive(translate(unskipped,'/pack/logicmoo_ec/ext/ec_sources/examples/Cassimatis2002/TwoScreens.e.lps')).
:- call_pel_directive(translate(unskipped,
                                '/pack/logicmoo_ec/ext/ec_sources/examples/Cassimatis2002/TwoScreens.e.lps')).
:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(lps).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Cassimatis2002/PolySpace.e',116).
% From E: 
% 
% :-call_pel_directive(translate(begining,'/pack/logicmoo_ec/ext/ec_sources/examples/Cassimatis2002/TwoScreens.e.lps')).
:- call_pel_directive(translate(begining,
                                '/pack/logicmoo_ec/ext/ec_sources/examples/Cassimatis2002/TwoScreens.e.lps')).
% Sat, 10 Oct 2020 15:31:50 GMT File: <stream>(0x559e4af66300)%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @phdthesis{Cassimatis:2002,
%;   author = "Nicholas L. Cassimatis",
%;   year = "2002",
%;   title = "Polyscheme: A Cognitive Architecture for Integrating Multiple Representation and Inference Schemes",
%;   address = "Cambridge, MA",
%;   school = "Program in Media Arts and Sciences, School of Architecture and Planning, Massachusetts Institute of Technology",
%; }
%;

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Cassimatis2002/TwoScreens.e',20).
% load foundations/Root.e
% From E: 
% 
% :-call_pel_directive(load('foundations/Root.e')).
:- call_pel_directive(load('foundations/Root.e')).

% load foundations/EC.e
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Cassimatis2002/TwoScreens.e',20).
% From E: 
% 
% :-call_pel_directive(load('foundations/EC.e')).
:- call_pel_directive(load('foundations/EC.e')).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Cassimatis2002/TwoScreens.e',22).
% load examples/Cassimatis2002/PolySpace.e
% From E: 
% 
% :-call_pel_directive(load('examples/Cassimatis2002/PolySpace.e')).
:- call_pel_directive(load('examples/Cassimatis2002/PolySpace.e')).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Cassimatis2002/TwoScreens.e',24).
% grid G1
% From E: 
% 
% t(grid,g1).
grid(g1).

% object X,Y,Screen1,Screen2
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Cassimatis2002/TwoScreens.e',24).
% From E: 
% 
% t(object,x).
object(x).
% From E: 
% 
% t(object,y).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Cassimatis2002/TwoScreens.e',24).
object(y).
% From E: 
% 
% t(object,screen1).
object(screen1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Cassimatis2002/TwoScreens.e',24).
% From E: 
% 
% t(object,screen2).
object(screen2).
%; perceptions:


% Shape(X,Round).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Cassimatis2002/TwoScreens.e',27).
% From E: 
% 
% shape(x,round).
shape(x,round).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Cassimatis2002/TwoScreens.e',29).
% Color(X,Red).
% From E: 
% 
% color(x,red).
color(x,red).


% Shape(Y,Round).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Cassimatis2002/TwoScreens.e',29).
% From E: 
% 
% shape(y,round).
shape(y,round).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Cassimatis2002/TwoScreens.e',31).
% Color(Y,Red).
% From E: 
% 
% color(y,red).
color(y,red).


% Shape(Screen1,Square).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Cassimatis2002/TwoScreens.e',31).
% From E: 
% 
% shape(screen1,square).
shape(screen1,square).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Cassimatis2002/TwoScreens.e',33).
% Color(Screen1,Green).
% From E: 
% 
% color(screen1,green).
color(screen1,green).


% Shape(Screen2,Square).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Cassimatis2002/TwoScreens.e',33).
% From E: 
% 
% shape(screen2,square).
shape(screen2,square).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Cassimatis2002/TwoScreens.e',35).
% Color(Screen2,Green).
% From E: 
% 
% color(screen2,green).
color(screen2,green).


% [time]
 % HoldsAt(Location(G1,Screen1,2,0),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Cassimatis2002/TwoScreens.e',35).
% From E: 
% 
% holds_at(location(g1,screen1,2,0),Time).
 %   [Time].
location(g1, screen1, 2, 0).
 %  l_int(holds(location(g1,screen1,2,0),Time_At),[]).
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Cassimatis2002/TwoScreens.e',37).
% [time]
 % HoldsAt(Location(G1,Screen2,4,0),time).
% From E: 
% 
% holds_at(location(g1,screen2,4,0),Time).
 %   [Time].
location(g1, screen2, 4, 0).
 %  l_int(holds(location(g1,screen2,4,0),Time_At),[]).
 %  "% =================================".


% HoldsAt(Location(G1,X,1,1),0).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Cassimatis2002/TwoScreens.e',37).
% From E: 
% 
% holds_at(location(g1,x,1,1),0).
initially location(g1, x, 1, 1).
 %  initial_state([location(g1,x,1,1)]).
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Cassimatis2002/TwoScreens.e',39).
% HoldsAt(Location(G1,Y,5,1),4).
% From E: 
% 
% holds_at(location(g1,y,5,1),4).
holds_at(location(g1,y,5,1),4).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Cassimatis2002/TwoScreens.e',41).
% [xcoord,ycoord,time]
% xcoord!=% 2 & xcoord!=4 & !(xcoord=1 & ycoord=1 & time=0) ->
% !HoldsAt(Location(G1,X,xcoord,ycoord),time) |
% xcoord=5 & ycoord=1 & time=4 & Equal(X,Y).
% From E: 
% 
% '->'(
%    (Xcoord\=2 , 
%      Xcoord\=4 , 
%     not(
%        (Xcoord=1 , 
%          Ycoord=1 , 
%         Time=0))), 
%    (holds_at(not(location(g1,x,Xcoord,Ycoord)),Time) ; 
%     (Xcoord=5 , 
%       Ycoord=1 , 
%       Time=4 , 
%      equal(x,y)))).
 %   [Time].
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Cassimatis2002/TwoScreens.e',41).
Xcoord\=2, Xcoord\=4, false((equals(Xcoord, 1), equals(Ycoord, 1), equals(Time, 0))) ->
    (   holds_at(not(location(g1, x, Xcoord, Ycoord)), Time)
    ;   Xcoord=5,
        Ycoord=1,
        Time=4,
        equal(x, y)
    ).


% [xcoord,ycoord,time]
% xcoord!=% 2 & xcoord!=4 & !(xcoord=5 & ycoord=1 & time=4) ->
% !HoldsAt(Location(G1,Y,xcoord,ycoord),time) |
% xcoord=1 & ycoord=1 & time=0 & Equal(X,Y).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Cassimatis2002/TwoScreens.e',47).
% From E: 
% 
% '->'(
%    (Xcoord\=2 , 
%      Xcoord\=4 , 
%     not(
%        (Xcoord=5 , 
%          Ycoord=1 , 
%         Time=4))), 
%    (holds_at(not(location(g1,y,Xcoord,Ycoord)),Time) ; 
%     (Xcoord=1 , 
%       Ycoord=1 , 
%       Time=0 , 
%      equal(x,y)))).
 %   [Time].
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Cassimatis2002/TwoScreens.e',47).
Xcoord\=2, Xcoord\=4, false((equals(Xcoord, 5), equals(Ycoord, 1), equals(Time, 4))) ->
    (   holds_at(not(location(g1, y, Xcoord, Ycoord)), Time)
    ;   Xcoord=1,
        Ycoord=1,
        Time=0,
        equal(x, y)
    ).

% range time 0 4
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Cassimatis2002/TwoScreens.e',50).
% From E: 
% 
% :-call_pel_directive(range(time,0,4)).
:- call_pel_directive(range(time, 0, 4)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Cassimatis2002/TwoScreens.e',52).
% range xcoord 0 5
% From E: 
% 
% :-call_pel_directive(range(xcoord,0,5)).
:- call_pel_directive(range(xcoord, 0, 5)).

% range ycoord 0 1
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Cassimatis2002/TwoScreens.e',52).
% From E: 
% 
% :-call_pel_directive(range(ycoord,0,1)).
:- call_pel_directive(range(ycoord, 0, 1)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Cassimatis2002/TwoScreens.e',54).
% range offset 0 0
% From E: 
% 
% :-call_pel_directive(range(offset,0,0)).
:- call_pel_directive(range(offset, 0, 0)).
%; End of file.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Cassimatis2002/TwoScreens.e',56).
% From E: 
% 
% :-call_pel_directive(translate(ending,'/pack/logicmoo_ec/ext/ec_sources/examples/Cassimatis2002/TwoScreens.e.lps')).
:- call_pel_directive(translate(ending,
                                '/pack/logicmoo_ec/ext/ec_sources/examples/Cassimatis2002/TwoScreens.e.lps')).
