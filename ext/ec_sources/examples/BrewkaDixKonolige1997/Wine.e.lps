:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Antoniou1997/Student.e',49).
% From E: 
% 
% :-call_pel_directive(translate(unskipped,'/pack/logicmoo_ec/ext/ec_sources/examples/BrewkaDixKonolige1997/Wine.e.lps')).
:- call_pel_directive(translate(unskipped,
                                '/pack/logicmoo_ec/ext/ec_sources/examples/BrewkaDixKonolige1997/Wine.e.lps')).
:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(lps).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Antoniou1997/Student.e',49).
% From E: 
% 
% :-call_pel_directive(translate(begining,'/pack/logicmoo_ec/ext/ec_sources/examples/BrewkaDixKonolige1997/Wine.e.lps')).
:- call_pel_directive(translate(begining,
                                '/pack/logicmoo_ec/ext/ec_sources/examples/BrewkaDixKonolige1997/Wine.e.lps')).
% Sat, 10 Oct 2020 14:56:22 GMT File: <stream>(0x5597f2b71400)%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; reasoning by cases
%; \fullciteA[p. 45]{BrewkaDixKonolige:1997}
%;
%; @book{BrewkaDixKonolige:1997,
%;   author = "Gerhard Brewka and J{\"{u}}rgen Dix and Kurt Konolige",
%;   year = "1997",
%;   title = "Nonmonotonic Reasoning: An Overview",
%;   address = "Stanford, CA",
%;   publisher = "CSLI",
%; }
%;

% load foundations/Root.e
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/BrewkaDixKonolige1997/Wine.e',23).
% From E: 
% 
% :-call_pel_directive(load('foundations/Root.e')).
:- call_pel_directive(load('foundations/Root.e')).

% load foundations/EC.e
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/BrewkaDixKonolige1997/Wine.e',23).
% From E: 
% 
% :-call_pel_directive(load('foundations/EC.e')).
:- call_pel_directive(load('foundations/EC.e')).

% sort x
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/BrewkaDixKonolige1997/Wine.e',26).
% From E: 
% 
% sort(x).
sort(x).

% x Person
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/BrewkaDixKonolige1997/Wine.e',26).
% From E: 
% 
% t(x,person).
x(person).

% predicate LikesWine(x)
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/BrewkaDixKonolige1997/Wine.e',29).
% From E: 
% 
% predicate(likesWine(x)).
mpred_prop(likesWine(x),predicate).
predicates([likesWine/1]).

% predicate Italian(x)
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/BrewkaDixKonolige1997/Wine.e',29).
% From E: 
% 
% predicate(italian(x)).
mpred_prop(italian(x),predicate).
predicates([italian/1]).

% predicate French(x)
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/BrewkaDixKonolige1997/Wine.e',31).
% From E: 
% 
% predicate(french(x)).
mpred_prop(french(x),predicate).
predicates([french/1]).

% predicate Ab1(x)
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/BrewkaDixKonolige1997/Wine.e',31).
% From E: 
% 
% predicate(ab1(x)).
mpred_prop(ab1(x),predicate).
predicates([ab1/1]).

% predicate Ab2(x)
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/BrewkaDixKonolige1997/Wine.e',33).
% From E: 
% 
% predicate(ab2(x)).
mpred_prop(ab2(x),predicate).
predicates([ab2/1]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/BrewkaDixKonolige1997/Wine.e',35).
% [x]
 % Italian(x) & !Ab1(x) -> LikesWine(x).
% From E: 
% 
% '->'(
%    (italian(X) , 
%     not(ab1(X))), 
%    likesWine(X)).
if italian(X), not ab1(X)then likesWine(X).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/BrewkaDixKonolige1997/Wine.e',35).

 /*  reactive_rule([italian(X),not(ab1(X))],
   	      [likesWine(X)]).
 */
 %  "% =================================".


% [x]
 % French(x) & !Ab2(x) -> LikesWine(x).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/BrewkaDixKonolige1997/Wine.e',35).
% From E: 
% 
% '->'(
%    (french(X) , 
%     not(ab2(X))), 
%    likesWine(X)).
if french(X), not ab2(X)then likesWine(X).
 %  reactive_rule([french(X),not(ab2(X))],[likesWine(X)]).
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/BrewkaDixKonolige1997/Wine.e',37).
% [x]
 % Italian(x) -> !French(x).
% From E: 
% 
% '->'(
%    italian(X), 
%    not(french(X))).
if italian(X)then not french(X).
 %  reactive_rule([italian(X)],[not(french(X))]).
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/BrewkaDixKonolige1997/Wine.e',39).
% Italian(Person) | French(Person).
% From E: 
% 
% (italian(person) ; 
%  french(person)).
false not italian(person), not french(person).
 %  d_pre([not(italian(person)),not(french(person))]).
 %  "% =================================".

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/BrewkaDixKonolige1997/Wine.e',41).
% range time 0 0
% From E: 
% 
% :-call_pel_directive(range(time,0,0)).
:- call_pel_directive(range(time, 0, 0)).

% range offset 1 1
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/BrewkaDixKonolige1997/Wine.e',41).
% From E: 
% 
% :-call_pel_directive(range(offset,1,1)).
:- call_pel_directive(range(offset, 1, 1)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/BrewkaDixKonolige1997/Wine.e',44).
% completion Theta Ab1
% From E: 
% 
% :-call_pel_directive(completion(theta)).
:- call_pel_directive(completion(theta)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/BrewkaDixKonolige1997/Wine.e',44).
% From E: 
% 
% :-call_pel_directive(completion(ab1)).
:- call_pel_directive(completion(ab1)).

% completion Theta Ab2
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/BrewkaDixKonolige1997/Wine.e',44).
% From E: 
% 
% :-call_pel_directive(completion(theta)).
:- call_pel_directive(completion(theta)).
% From E: 
% 
% :-call_pel_directive(completion(ab2)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/BrewkaDixKonolige1997/Wine.e',44).
:- call_pel_directive(completion(ab2)).
%; End of file.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/BrewkaDixKonolige1997/Wine.e',47).
% From E: 
% 
% :-call_pel_directive(translate(ending,'/pack/logicmoo_ec/ext/ec_sources/examples/BrewkaDixKonolige1997/Wine.e.lps')).
:- call_pel_directive(translate(ending,
                                '/pack/logicmoo_ec/ext/ec_sources/examples/BrewkaDixKonolige1997/Wine.e.lps')).
