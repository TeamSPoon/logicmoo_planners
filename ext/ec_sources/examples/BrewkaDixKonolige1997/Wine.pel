:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Antoniou1997/Student.e',49).
:- call_pel_directive(translate(unskipped,
                                '/pack/logicmoo_ec/ext/ec_sources/examples/BrewkaDixKonolige1997/Wine.pel')).
:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(ecalc).
:- call_pel_directive(translate(begining,
                                '/pack/logicmoo_ec/ext/ec_sources/examples/BrewkaDixKonolige1997/Wine.pel')).
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; reasoning by cases
%; \fullciteA[p. 45]{BrewkaDixKonolige:1997}
%;
%; @book{BrewkaDixKonolige:1997,
%;   author = "Gerhard Brewka and J{\"{u}}rgen Dix and Kurt Konolige",
%;   year = "1997",
%;   title = "Nonmonotonic Reasoning: An Overview",
%;   address = "Stanford, CA",
%;   publisher = "CSLI",
%; }
%;

% load foundations/Root.e
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/BrewkaDixKonolige1997/Wine.e',23).
:- call_pel_directive(load('foundations/Root.e')).

% load foundations/EC.e
:- call_pel_directive(load('foundations/EC.e')).

% sort x
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/BrewkaDixKonolige1997/Wine.e',26).
sort(x).

% x Person
t(x,person).

% predicate LikesWine(x)
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/BrewkaDixKonolige1997/Wine.e',29).
predicate(likesWine(x)).

% predicate Italian(x)
predicate(italian(x)).

% predicate French(x)
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/BrewkaDixKonolige1997/Wine.e',31).
predicate(french(x)).

% predicate Ab1(x)
predicate(ab1(x)).

% predicate Ab2(x)
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/BrewkaDixKonolige1997/Wine.e',33).
predicate(ab2(x)).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/BrewkaDixKonolige1997/Wine.e',35).
% [x]
 % Italian(x) & !Ab1(x) -> LikesWine(x).
italian(X), not(ab1(X)) ->
    likesWine(X).


% [x]
 % French(x) & !Ab2(x) -> LikesWine(x).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/BrewkaDixKonolige1997/Wine.e',35).
french(X), not(ab2(X)) ->
    likesWine(X).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/BrewkaDixKonolige1997/Wine.e',37).
% [x]
 % Italian(x) -> !French(x).
italian(X) ->
    not(french(X)).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/BrewkaDixKonolige1997/Wine.e',39).
% Italian(Person) | French(Person).
 (   italian(person)
   ;   french(person)
   ).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/BrewkaDixKonolige1997/Wine.e',41).
% range time 0 0
:- call_pel_directive(range(time, 0, 0)).

% range offset 1 1
:- call_pel_directive(range(offset, 1, 1)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/BrewkaDixKonolige1997/Wine.e',44).
% completion Theta Ab1
:- call_pel_directive(completion(theta)).
:- call_pel_directive(completion(ab1)).

% completion Theta Ab2
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/BrewkaDixKonolige1997/Wine.e',44).
:- call_pel_directive(completion(theta)).
:- call_pel_directive(completion(ab2)).
%; End of file.
:- call_pel_directive(translate(ending,
                                '/pack/logicmoo_ec/ext/ec_sources/examples/BrewkaDixKonolige1997/Wine.pel')).
