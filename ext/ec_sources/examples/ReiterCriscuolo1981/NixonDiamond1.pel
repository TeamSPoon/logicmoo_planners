:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/TV2.e',56).
:- call_pel_directive(translate(unskipped,
                                '/pack/logicmoo_ec/ext/ec_sources/examples/ReiterCriscuolo1981/NixonDiamond1.pel')).
:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(ecalc).
:- call_pel_directive(translate(begining,
                                '/pack/logicmoo_ec/ext/ec_sources/examples/ReiterCriscuolo1981/NixonDiamond1.pel')).
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; conflicting defaults: showing that inconsistency results
%; without a cancellation rule
%; \fullciteA[p. 274]{ReiterCriscuolo:1981}
%; \fullciteA[pp. 98--99]{McCarthy:1986}
%;
%; @inproceedings{ReiterCriscuolo:1981,
%;   author = "Raymond Reiter and Giovanni Criscuolo",
%;   year = "1981",
%;   title = "On interacting defaults",
%;   booktitle = "\uppercase{P}roceedings of the \uppercase{S}eventh \uppercase{I}nternational \uppercase{J}oint \uppercase{C}onference on \uppercase{A}rtificial \uppercase{I}ntelligence",
%;   volume = "1",
%;   pages = "270--276",
%;   address = "Los Altos, CA",
%;   publisher = "William Kaufmann",
%; }
%;
%; @article{McCarthy:1986,
%;   author = "John McCarthy",
%;   year = "1986",
%;   title = "Applications of circumscription to formalizing common-sense knowledge",
%;   journal = "Artificial Intelligence",
%;   volume = "28",
%;   pages = "89--116".
%; }
%;

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ReiterCriscuolo1981/NixonDiamond1.e',37).
% load foundations/Root.e
:- call_pel_directive(load('foundations/Root.e')).

% load foundations/EC.e
:- call_pel_directive(load('foundations/EC.e')).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ReiterCriscuolo1981/NixonDiamond1.e',40).
% sort x
sort(x).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ReiterCriscuolo1981/NixonDiamond1.e',42).
% predicate Republican(x)
predicate(republican(x)).

% predicate Quaker(x)
predicate(quaker(x)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ReiterCriscuolo1981/NixonDiamond1.e',44).
% predicate Pacifist(x)
predicate(pacifist(x)).

% predicate Ab1(x)
predicate(ab1(x)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ReiterCriscuolo1981/NixonDiamond1.e',46).
% predicate Ab2(x)
predicate(ab2(x)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ReiterCriscuolo1981/NixonDiamond1.e',48).
% x John
t(x,john).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ReiterCriscuolo1981/NixonDiamond1.e',50).
% Republican(John).
republican(john).


% Quaker(John).
quaker(john).


% [x]
 % Republican(x) & !Ab1(x) -> !Pacifist(x).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ReiterCriscuolo1981/NixonDiamond1.e',52).
republican(X), not(ab1(X)) ->
    not(pacifist(X)).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ReiterCriscuolo1981/NixonDiamond1.e',54).
% [x]
 % Quaker(x) & !Ab2(x) -> Pacifist(x).
quaker(X), not(ab2(X)) ->
    pacifist(X).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ReiterCriscuolo1981/NixonDiamond1.e',56).
% range time 0 0
:- call_pel_directive(range(time, 0, 0)).

% range offset 1 1
:- call_pel_directive(range(offset, 1, 1)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ReiterCriscuolo1981/NixonDiamond1.e',59).
% completion Theta Ab1
:- call_pel_directive(completion(theta)).
:- call_pel_directive(completion(ab1)).

% completion Theta Ab2
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ReiterCriscuolo1981/NixonDiamond1.e',59).
:- call_pel_directive(completion(theta)).
:- call_pel_directive(completion(ab2)).
%; End of file.
:- call_pel_directive(translate(ending,
                                '/pack/logicmoo_ec/ext/ec_sources/examples/ReiterCriscuolo1981/NixonDiamond1.pel')).
