:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter10/TwoScreens.e',115).
% translate: unskipped  File: /pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e.lps 
:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(lps).
% translate: begining  File: /pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e.lps 
% Fri, 09 Oct 2020 15:13:46 GMT File: <stream>(0x5625a9784400)%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @inproceedings{WinikoffEtAl:2002,
%;   author = "Michael Winikoff and Lin Padgham and James Harland and John Thangarajah",
%;   year = "2002",
%;   title = "Declarative \& procedural goals in intelligent agent systems",
%;   editor = "Dieter Fensel and Fausto Giunchiglia and Deborah McGuinness and Mary-Anne Williams",
%;   booktitle = "\uppercase{P}roceedings of the \uppercase{E}ighth \uppercase{I}nternational \uppercase{C}onference on \uppercase{P}rinciples of \uppercase{K}nowledge \uppercase{R}epresentation and \uppercase{R}easoning",
%;   pages = "470--481",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann",
%; }
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',31).
% load foundations/Root.e
:- if(is_e_toplevel).
:- load_e_cond('foundations/Root.e', changed).
 %  load('/pack/logicmoo_ec/ext/ec_sources/foundations/Root.e',changed).
:- endif.

% load foundations/EC.e
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',31).
:- if(is_e_toplevel).
:- load_e_cond('foundations/EC.e', changed).
 %  load('/pack/logicmoo_ec/ext/ec_sources/foundations/EC.e',changed).
:- endif.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',34).
% sort object
% From E: 
% 
% sort(object).
sort(object).

% sort agent: object
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',34).
% From E: 
% 
% subsort(agent,object).
subsort(agent,object).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',36).
% sort food: object
% From E: 
% 
% subsort(food,object).
subsort(food,object).

% sort surface
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',36).
% From E: 
% 
% sort(surface).
sort(surface).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',38).
% sort plan
% From E: 
% 
% sort(plan).
sort(plan).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',40).
% reified sort belief
% From E: 
% 
% reified_sort(belief).
reified_sorts([belief/0]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',40).
% From E: 
% 
% mpred_prop(belief,reified_sort).
mpred_prop(belief,reified_sort).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',42).
% agent Cat
% From E: 
% 
% t(agent,cat).
agent(cat).

% surface Floor, Chair, Shelf, Table
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',42).
% From E: 
% 
% t(surface,floor).
surface(floor).
 %  l_events(happens(surface(floor),Time_From,Time_Until),[]).
 %  "% =================================".
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',42).
% From E: 
% 
% t(surface,chair).
surface(chair).
 %  l_events(happens(surface(chair),Time_From2,Time_Until3),[]).
 %  "% =================================".
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',42).
% From E: 
% 
% t(surface,shelf).
surface(shelf).
 %  l_events(happens(surface(shelf),Time_From4,Time_Until5),[]).
 %  "% =================================".
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',42).
% From E: 
% 
% t(surface,table).
surface(table).
 %  l_events(happens(surface(table),Time_From6,Time_Until7),[]).
 %  "% =================================".

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',44).
% food Food1, Food2
% From E: 
% 
% t(food,food1).
food(food1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',44).
% From E: 
% 
% t(food,food2).
food(food2).

% plan P1, P1a, P1b, P2, P2a
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',44).
% From E: 
% 
% t(plan,p1).
plan(p1).
% From E: 
% 
% t(plan,p1a).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',44).
plan(p1a).
% From E: 
% 
% t(plan,p1b).
plan(p1b).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',44).
% From E: 
% 
% t(plan,p2).
plan(p2).
% From E: 
% 
% t(plan,p2a).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',44).
plan(p2a).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',47).
% predicate SelectedPlan(agent,belief,plan,time)
% From E: 
% 
% predicate(
%    selectedPlan(agent,belief,plan,time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',47).
predicates([selectedPlan/4]).
% From E: 
% 
% mpred_prop(
%    selectedPlan(agent,belief,plan,time), 
%    predicate).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',47).
mpred_prop(selectedPlan(agent,belief,plan,time),predicate).

% predicate SoundPlan(agent,belief,plan,time)
% From E: 
% 
% predicate(
%    soundPlan(agent,belief,plan,time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',47).
predicates([soundPlan/4]).
% From E: 
% 
% mpred_prop(
%    soundPlan(agent,belief,plan,time), 
%    predicate).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',47).
mpred_prop(soundPlan(agent,belief,plan,time),predicate).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',50).
% fluent On(object,surface)
% From E: 
% 
% fluent(
%    on(object,surface)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',50).
fluents([on/2]).
% From E: 
% 
% mpred_prop(
%    on(object,surface), 
%    fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',50).
mpred_prop(on(object,surface),fluent).

% fluent Goal(agent,belief)
% From E: 
% 
% fluent(
%    goal(agent,belief)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',50).
fluents([goal/2]).
% From E: 
% 
% mpred_prop(
%    goal(agent,belief), 
%    fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',50).
mpred_prop(goal(agent,belief),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',52).
% fluent CanJump(surface,surface)
% From E: 
% 
% fluent(
%    canJump(surface,surface)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',52).
fluents([canJump/2]).
% From E: 
% 
% mpred_prop(
%    canJump(surface,surface), 
%    fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',52).
mpred_prop(canJump(surface,surface),fluent).

% fluent Plan(agent,belief,plan)
% From E: 
% 
% fluent(
%    plan(agent,belief,plan)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',52).
fluents([plan/3]).
% From E: 
% 
% mpred_prop(
%    plan(agent,belief,plan), 
%    fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',52).
mpred_prop(plan(agent,belief,plan),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',54).
% fluent Satiated(agent)
% From E: 
% 
% fluent(
%    satiated(agent)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',54).
fluents([satiated/1]).
% From E: 
% 
% mpred_prop(
%    satiated(agent), 
%    fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',54).
mpred_prop(satiated(agent),fluent).

% fluent Believe(agent,belief)
% From E: 
% 
% fluent(
%    believe(agent,belief)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',54).
fluents([believe/2]).
% From E: 
% 
% mpred_prop(
%    believe(agent,belief), 
%    fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',54).
mpred_prop(believe(agent,belief),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',57).
% event AddPlan(agent,belief,plan)
% From E: 
% 
% event(
%    addPlan(agent,belief,plan)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',57).
events([addPlan/3]).
% From E: 
% 
% mpred_prop(
%    addPlan(agent,belief,plan), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',57).
mpred_prop(addPlan(agent,belief,plan),event).

% event DropPlan(agent,belief,plan)
% From E: 
% 
% event(
%    dropPlan(agent,belief,plan)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',57).
events([dropPlan/3]).
% From E: 
% 
% mpred_prop(
%    dropPlan(agent,belief,plan), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',57).
mpred_prop(dropPlan(agent,belief,plan),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',59).
% event Jump(agent,surface,surface)
% From E: 
% 
% event(
%    jump(agent,surface,surface)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',59).
events([jump/3]).
% From E: 
% 
% mpred_prop(
%    jump(agent,surface,surface), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',59).
mpred_prop(jump(agent,surface,surface),event).

% event Move(surface,surface,surface)
% From E: 
% 
% event(
%    move(surface,surface,surface)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',59).
events([move/3]).
% From E: 
% 
% mpred_prop(
%    move(surface,surface,surface), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',59).
mpred_prop(move(surface,surface,surface),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',61).
% event Eat(agent,food)
% From E: 
% 
% event(
%    eat(agent,food)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',61).
events([eat/2]).
% From E: 
% 
% mpred_prop(
%    eat(agent,food), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',61).
mpred_prop(eat(agent,food),event).

% event Wait(agent)
% From E: 
% 
% event(
%    wait(agent)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',61).
events([wait/1]).
% From E: 
% 
% mpred_prop(
%    wait(agent), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',61).
mpred_prop(wait(agent),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',64).
% belief BSatiated(agent)
% From E: 
% 
% belief(
%    bSatiated(agent)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',64).
belief(bSatiated(agent)).

% belief BCanJump(surface,surface)
% From E: 
% 
% belief(
%    bCanJump(surface,surface)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',64).
belief(bCanJump(surface,surface)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',66).
% belief BOn(object,surface)
% From E: 
% 
% belief(
%    bOn(object,surface)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',66).
belief(bOn(object,surface)).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',68).
%; Sigma
%; A5
% [agent,belief,plan,time]
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',72).
% Initiates(AddPlan(agent,belief,plan),Plan(agent,belief,plan),time).
% From E: 
% 
% initiates(
%    addPlan(Agent,Belief,Plan), 
%    plan(Agent,Belief,Plan), 
%    Time).
addPlan(Agent, Belief, Plan)initiates plan(Agent, Belief, Plan).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',72).

 /*  initiated(happens(addPlan(Agent,Belief,Plan),
   		  Time_From,
   		  Time_Until),
   	  plan(Agent,Belief,Plan),
   	  []).
 */
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',74).
%; A6
% [agent,belief,plan,time]
% Terminates(DropPlan(agent,belief,plan),Plan(agent,belief,plan),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',76).
% From E: 
% 
% terminates(
%    dropPlan(Agent,Belief,Plan), 
%    plan(Agent,Belief,Plan), 
%    Time).
dropPlan(Agent, Belief, Plan)terminates plan(Agent, Belief, Plan).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',76).

 /*  terminated(happens(dropPlan(Agent,Belief,Plan),
   		   Time_From,
   		   Time_Until),
   	   plan(Agent,Belief,Plan),
   	   []).
 */
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',78).
% [agent,surface1,surface2,time]
% HoldsAt(On(agent,surface1),time) &
% HoldsAt(CanJump(surface1,surface2),time) ->
% Initiates(Jump(agent,surface1,surface2),On(agent,surface2),time).
% From E: 
% 
% '->'(
%    ','(
%       holds_at(
%          on(Agent,Surface1), 
%          Time), 
%       holds_at(
%          canJump(Surface1,Surface2), 
%          Time)), 
%    initiates(
%       jump(Agent,Surface1,Surface2), 
%       on(Agent,Surface2), 
%       Time)).
jump(Agent, Surface1, Surface2)initiates on(Agent, Surface2)at Time if on(Agent, Surface1)at Time, canJump(Surface1, Surface2)at Time.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',78).

 /*  initiated(happens(jump(Agent,Surface1,Surface2),
   		  Time_From,
   		  Time_Until),
   	  at(on(Agent,Surface2),Time),
   	  [ holds(on(Agent,Surface1),Time),
   	    holds(canJump(Surface1,Surface2),Time)
   	  ]).
 */
 %  "% =================================".


% [agent,surface1,surface2,time]
% HoldsAt(On(agent,surface1),time) &
% HoldsAt(CanJump(surface1,surface2),time) ->
% Terminates(Jump(agent,surface1,surface2),On(agent,surface1),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',84).
% From E: 
% 
% '->'(
%    ','(
%       holds_at(
%          on(Agent,Surface1), 
%          Time), 
%       holds_at(
%          canJump(Surface1,Surface2), 
%          Time)), 
%    terminates(
%       jump(Agent,Surface1,Surface2), 
%       on(Agent,Surface1), 
%       Time)).
jump(Agent, Surface1, Surface2)terminates on(Agent, Surface1)at Time if on(Agent, Surface1)at Time, canJump(Surface1, Surface2)at Time.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',84).

 /*  terminated(happens(jump(Agent,Surface1,Surface2),
   		   Time_From,
   		   Time_Until),
   	   at(on(Agent,Surface1),Time),
   	   [ holds(on(Agent,Surface1),Time),
   	     holds(canJump(Surface1,Surface2),Time)
   	   ]).
 */
 %  "% =================================".


% [surface1,surface2,surface3,time]
% Initiates(Move(surface1,surface2,surface3),CanJump(surface1,surface3),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',89).
% From E: 
% 
% initiates(
%    move(Surface1,Surface2,Surface3), 
%    canJump(Surface1,Surface3), 
%    Time).
move(Surface1, Surface2, Surface3)initiates canJump(Surface1, Surface3).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',89).

 /*  initiated(happens(move(Surface1,Surface2,Surface3),
   		  Time_From,
   		  Time_Until),
   	  canJump(Surface1,Surface3),
   	  []).
 */
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',91).
% [surface1,surface2,surface3,time]
% Terminates(Move(surface1,surface2,surface3),CanJump(surface1,surface2),time).
% From E: 
% 
% terminates(
%    move(Surface1,Surface2,Surface3), 
%    canJump(Surface1,Surface2), 
%    Time).
move(Surface1, Surface2, Surface3)terminates canJump(Surface1, Surface2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',91).

 /*  terminated(happens(move(Surface1,Surface2,Surface3),
   		   Time_From,
   		   Time_Until),
   	   canJump(Surface1,Surface2),
   	   []).
 */
 %  "% =================================".


% [agent,food,surface,time]
% HoldsAt(On(agent,surface),time) &
% HoldsAt(On(food,surface),time) ->
% Initiates(Eat(agent,food),Satiated(agent),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',95).
% From E: 
% 
% '->'(
%    ','(
%       holds_at(
%          on(Agent,Surface), 
%          Time), 
%       holds_at(
%          on(Food,Surface), 
%          Time)), 
%    initiates(
%       eat(Agent,Food), 
%       satiated(Agent), 
%       Time)).
eat(Agent, Food)initiates satiated(Agent)at Time if on(Agent, Surface)at Time, on(Food, Surface)at Time.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',95).

 /*  initiated(happens(eat(Agent,Food),
   		  Time_From,
   		  Time_Until),
   	  at(satiated(Agent),Time),
   	  [ holds(on(Agent,Surface),Time),
   	    holds(on(Food,Surface),Time)
   	  ]).
 */
 %  "% =================================".


% [agent,food,surface,time]
% HoldsAt(On(agent,surface),time) &
% HoldsAt(On(food,surface),time) ->
% Terminates(Eat(agent,food),On(food,surface),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',100).
% From E: 
% 
% '->'(
%    ','(
%       holds_at(
%          on(Agent,Surface), 
%          Time), 
%       holds_at(
%          on(Food,Surface), 
%          Time)), 
%    terminates(
%       eat(Agent,Food), 
%       on(Food,Surface), 
%       Time)).
eat(Agent, Food)terminates on(Food, Surface)at Time if on(Agent, Surface)at Time, on(Food, Surface)at Time.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',100).

 /*  terminated(happens(eat(Agent,Food),
   		   Time_From,
   		   Time_Until),
   	   at(on(Food,Surface),Time),
   	   [ holds(on(Agent,Surface),Time),
   	     holds(on(Food,Surface),Time)
   	   ]).
 */
 %  "% =================================".


% [agent,surface1,surface2,belief,time]
% HoldsAt(Believe(agent,BOn(agent,surface1)),time) &
% HoldsAt(Believe(agent,BCanJump(surface1,surface2)),time) &
% (belief = BOn(agent,surface2)) ->
% Initiates(Jump(agent,surface1,surface2),
%           Believe(agent,belief),
%           time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',105).
% From E: 
% 
% '->'(
%    ','(
%       holds_at(
%          believe(
%             Agent, 
%             bOn(Agent,Surface1)), 
%          Time), 
%       ','(
%          holds_at(
%             believe(
%                Agent, 
%                bCanJump(Surface1,Surface2)), 
%             Time), 
%          bOnPred(Agent,Surface2,Belief))), 
%    initiates(
%       jump(Agent,Surface1,Surface2), 
%       believe(Agent,Belief), 
%       Time)).
jump(Agent, Surface1, Surface2)initiates believe(Agent, Belief)at Time if believe(Agent, bOn(Agent, Surface1))at Time, believe(Agent, bCanJump(Surface1, Surface2))at Time, bOnPred(Agent, Surface2, Belief).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',105).

 /*  initiated(happens(jump(Agent,Surface1,Surface2),
   		  Time_From,
   		  Time_Until),
   	  at(believe(Agent,Belief),Time),
   	  [ holds(believe(Agent,bOn(Agent,Surface1)),
   		  Time),
   	    holds(believe(Agent,
   			  bCanJump(Surface1,Surface2)),
   		  Time),
   	    bOnPred(Agent,Surface2,Belief)
   	  ]).
 */
 %  "% =================================".


% [agent,surface1,surface2,belief,time]
% HoldsAt(Believe(agent,BOn(agent,surface1)),time) &
% HoldsAt(Believe(agent,BCanJump(surface1,surface2)),time) &
% (belief = BOn(agent,surface1)) ->
% Terminates(Jump(agent,surface1,surface2),
%            Believe(agent,belief),
%            time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',113).
% From E: 
% 
% '->'(
%    ','(
%       holds_at(
%          believe(
%             Agent, 
%             bOn(Agent,Surface1)), 
%          Time), 
%       ','(
%          holds_at(
%             believe(
%                Agent, 
%                bCanJump(Surface1,Surface2)), 
%             Time), 
%          bOnPred(Agent,Surface1,Belief))), 
%    terminates(
%       jump(Agent,Surface1,Surface2), 
%       believe(Agent,Belief), 
%       Time)).
jump(Agent, Surface1, Surface2)terminates believe(Agent, Belief)at Time if believe(Agent, bOn(Agent, Surface1))at Time, believe(Agent, bCanJump(Surface1, Surface2))at Time, bOnPred(Agent, Surface1, Belief).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',113).

 /*  terminated(happens(jump(Agent,Surface1,Surface2),
   		   Time_From,
   		   Time_Until),
   	   at(believe(Agent,Belief),Time),
   	   [ holds(believe(Agent,bOn(Agent,Surface1)),
   		   Time),
   	     holds(believe(Agent,
   			   bCanJump(Surface1,Surface2)),
   		   Time),
   	     bOnPred(Agent,Surface1,Belief)
   	   ]).
 */
 %  "% =================================".


% [agent,surface1,surface2,surface3,belief,time]
% (belief = BCanJump(surface1,surface3)) ->
% Initiates(Move(surface1,surface2,surface3),
%           Believe(agent,belief),
%           time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',121).
% From E: 
% 
% '->'(
%    bCanJumpPred(Surface1,Surface3,Belief), 
%    initiates(
%       move(Surface1,Surface2,Surface3), 
%       believe(Agent,Belief), 
%       Time)).
move(Surface1, Surface2, Surface3)initiates believe(Agent, Belief)at Time if bCanJumpPred(Surface1, Surface3, Belief).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',121).

 /*  initiated(happens(move(Surface1,Surface2,Surface3),
   		  Time_From,
   		  Time_Until),
   	  at(believe(Agent,Belief),Time),
   	  [bCanJumpPred(Surface1,Surface3,Belief)]).
 */
 %  "% =================================".


% [agent,surface1,surface2,surface3,belief,time]
% (belief = BCanJump(surface1,surface2)) ->
% Terminates(Move(surface1,surface2,surface3),
%            Believe(agent,belief),
%            time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',127).
% From E: 
% 
% '->'(
%    bCanJumpPred(Surface1,Surface2,Belief), 
%    terminates(
%       move(Surface1,Surface2,Surface3), 
%       believe(Agent,Belief), 
%       Time)).
move(Surface1, Surface2, Surface3)terminates believe(Agent, Belief)at Time if bCanJumpPred(Surface1, Surface2, Belief).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',127).

 /*  terminated(happens(move(Surface1,Surface2,Surface3),
   		   Time_From,
   		   Time_Until),
   	   at(believe(Agent,Belief),Time),
   	   [bCanJumpPred(Surface1,Surface2,Belief)]).
 */
 %  "% =================================".


% [agent,food,surface,belief,time]
% HoldsAt(Believe(agent,BOn(agent,surface)),time) &
% HoldsAt(Believe(agent,BOn(food,surface)),time) &
% (belief = BSatiated(agent)) ->
% Initiates(Eat(agent,food),Believe(agent,belief),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',133).
% From E: 
% 
% '->'(
%    ','(
%       holds_at(
%          believe(
%             Agent, 
%             bOn(Agent,Surface)), 
%          Time), 
%       ','(
%          holds_at(
%             believe(
%                Agent, 
%                bOn(Food,Surface)), 
%             Time), 
%          bSatiatedPred(Agent,Belief))), 
%    initiates(
%       eat(Agent,Food), 
%       believe(Agent,Belief), 
%       Time)).
eat(Agent, Food)initiates believe(Agent, Belief)at Time if believe(Agent, bOn(Agent, Surface))at Time, believe(Agent, bOn(Food, Surface))at Time, bSatiatedPred(Agent, Belief).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',133).

 /*  initiated(happens(eat(Agent,Food),
   		  Time_From,
   		  Time_Until),
   	  at(believe(Agent,Belief),Time),
   	  [ holds(believe(Agent,bOn(Agent,Surface)),
   		  Time),
   	    holds(believe(Agent,bOn(Food,Surface)),
   		  Time),
   	    bSatiatedPred(Agent,Belief)
   	  ]).
 */
 %  "% =================================".


% [agent,food,surface,belief,time]
% HoldsAt(Believe(agent,BOn(agent,surface)),time) &
% HoldsAt(Believe(agent,BOn(food,surface)),time) &
% (belief = BOn(food,surface)) ->
% Terminates(Eat(agent,food),Believe(agent,belief),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',139).
% From E: 
% 
% '->'(
%    ','(
%       holds_at(
%          believe(
%             Agent, 
%             bOn(Agent,Surface)), 
%          Time), 
%       ','(
%          holds_at(
%             believe(
%                Agent, 
%                bOn(Food,Surface)), 
%             Time), 
%          bOnPred(Food,Surface,Belief))), 
%    terminates(
%       eat(Agent,Food), 
%       believe(Agent,Belief), 
%       Time)).
eat(Agent, Food)terminates believe(Agent, Belief)at Time if believe(Agent, bOn(Agent, Surface))at Time, believe(Agent, bOn(Food, Surface))at Time, bOnPred(Food, Surface, Belief).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',139).

 /*  terminated(happens(eat(Agent,Food),
   		   Time_From,
   		   Time_Until),
   	   at(believe(Agent,Belief),Time),
   	   [ holds(believe(Agent,bOn(Agent,Surface)),
   		   Time),
   	     holds(believe(Agent,bOn(Food,Surface)),
   		   Time),
   	     bOnPred(Food,Surface,Belief)
   	   ]).
 */
 %  "% =================================".


%; Delta
%; A7
% [agent,belief,plan,time]
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',148).
% HoldsAt(Goal(agent,belief),time) &
% !HoldsAt(Believe(agent,belief),time) &
% SelectedPlan(agent,belief,plan,time) &
% (!{plan1} HoldsAt(Plan(agent,belief,plan1),time)) ->
% Happens(AddPlan(agent,belief,plan),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',148).
% From E: 
% 
% '->'(
%    ','(
%       holds_at(
%          goal(Agent,Belief), 
%          Time), 
%       ','(
%          holds_at(
%             not(
%                believe(Agent,Belief)), 
%             Time), 
%          ','(
%             selectedPlan(Agent,Belief,Plan,Time), 
%             not(
%                ','(
%                   ex(
%                      [Plan1]), 
%                   holds_at(
%                      plan(Agent,Belief,Plan1), 
%                      Time)))))), 
%    addPlan(Agent,Belief,Plan)).
addPlan(Agent, Belief, Plan)if goal(Agent, Belief)at Time, not believe(Agent, Belief)at Time, selectedPlan(Agent, Belief, Plan, Time), not (ex([Plan1]), plan(Agent, Belief, Plan1)at Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',148).

 /*  l_events(happens(addPlan(Agent,Belief,Plan),
   		 Time,
   		 Time),
   	 [ holds(goal(Agent,Belief),Time),
   	   holds(not(believe(Agent,Belief)),Time),
   	   selectedPlan(Agent,Belief,Plan,Time),
   	   holds(not([ ex([Plan1]),
   		       holds(plan(Agent,Belief,Plan1),
   			     Time)
   		     ]),
   		 Time)
   	 ]).
 */
 %  "% =================================".


%; A8
% [agent,belief,time]
% HoldsAt(Plan(agent,belief,P1),time) &
% !HoldsAt(Believe(agent,belief),time) &
% SoundPlan(agent,belief,P1,time) ->
% Happens(Jump(Cat,Floor,Chair),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',155).
% From E: 
% 
% '->'(
%    ','(
%       holds_at(
%          plan(Agent,Belief,p1), 
%          Time), 
%       ','(
%          holds_at(
%             not(
%                believe(Agent,Belief)), 
%             Time), 
%          soundPlan(Agent,Belief,p1,Time))), 
%    jump(cat,floor,chair)).
jump(cat, floor, chair)if plan(Agent, Belief, p1)at Time, not believe(Agent, Belief)at Time, soundPlan(Agent, Belief, p1, Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',155).

 /*  l_events(happens(jump(cat,floor,chair),Time,Time_Until),
   	 [ holds(plan(Agent,Belief,p1),Time),
   	   holds(not(believe(Agent,Belief)),Time),
   	   soundPlan(Agent,Belief,p1,Time)
   	 ]).
 */
 %  "% =================================".


% [agent,belief,time]
% HoldsAt(Plan(agent,belief,P1a),time) &
% !HoldsAt(Believe(agent,belief),time) &
% SoundPlan(agent,belief,P1a,time) ->
% Happens(Wait(Cat),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',162).
% From E: 
% 
% '->'(
%    ','(
%       holds_at(
%          plan(Agent,Belief,p1a), 
%          Time), 
%       ','(
%          holds_at(
%             not(
%                believe(Agent,Belief)), 
%             Time), 
%          soundPlan(Agent,Belief,p1a,Time))), 
%    wait(cat)).
if plan(Agent, Belief, p1a)at Time, not believe(Agent, Belief)at Time, soundPlan(Agent, Belief, p1a, Time)then wait(cat).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',162).

 /*  reactive_rule([ holds(plan(Agent,Belief,p1a),Time),
   		holds(not(believe(Agent,Belief)),
   		      Time),
   		soundPlan(Agent,Belief,p1a,Time)
   	      ],
   	      [wait(cat)]).
 */
 %  "% =================================".


% [agent,belief,time]
% HoldsAt(Plan(agent,belief,P2),time) &
% !HoldsAt(Believe(agent,belief),time) &
% SoundPlan(agent,belief,P2,time) ->
% Happens(Jump(Cat,Chair,Shelf),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',168).
% From E: 
% 
% '->'(
%    ','(
%       holds_at(
%          plan(Agent,Belief,p2), 
%          Time), 
%       ','(
%          holds_at(
%             not(
%                believe(Agent,Belief)), 
%             Time), 
%          soundPlan(Agent,Belief,p2,Time))), 
%    jump(cat,chair,shelf)).
jump(cat, chair, shelf)if plan(Agent, Belief, p2)at Time, not believe(Agent, Belief)at Time, soundPlan(Agent, Belief, p2, Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',168).

 /*  l_events(happens(jump(cat,chair,shelf),Time,Time_Until),
   	 [ holds(plan(Agent,Belief,p2),Time),
   	   holds(not(believe(Agent,Belief)),Time),
   	   soundPlan(Agent,Belief,p2,Time)
   	 ]).
 */
 %  "% =================================".


%; A9
% [agent,belief,plan,time]
% HoldsAt(Plan(agent,belief,plan),time) ->
% Happens(DropPlan(agent,belief,plan),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',174).
% From E: 
% 
% '->'(
%    holds_at(
%       plan(Agent,Belief,Plan), 
%       Time), 
%    dropPlan(Agent,Belief,Plan)).
dropPlan(Agent, Belief, Plan)if plan(Agent, Belief, Plan)at Time.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',174).

 /*  l_events(happens(dropPlan(Agent,Belief,Plan),
   		 Time,
   		 Time),
   	 [holds(plan(Agent,Belief,Plan),Time)]).
 */
 %  "% =================================".


%; A10
% [agent,belief,time]
% HoldsAt(Plan(agent,belief,P1),time) &
% !HoldsAt(Believe(agent,belief),time) &
% SoundPlan(agent,belief,P1,time) ->
% Happens(AddPlan(agent,belief,P1a),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',179).
% From E: 
% 
% '->'(
%    ','(
%       holds_at(
%          plan(Agent,Belief,p1), 
%          Time), 
%       ','(
%          holds_at(
%             not(
%                believe(Agent,Belief)), 
%             Time), 
%          soundPlan(Agent,Belief,p1,Time))), 
%    addPlan(Agent,Belief,p1a)).
addPlan(Agent, Belief, p1a)if plan(Agent, Belief, p1)at Time, not believe(Agent, Belief)at Time, soundPlan(Agent, Belief, p1, Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',179).

 /*  l_events(happens(addPlan(Agent,Belief,p1a),
   		 Time,
   		 Time_Until),
   	 [ holds(plan(Agent,Belief,p1),Time),
   	   holds(not(believe(Agent,Belief)),Time),
   	   soundPlan(Agent,Belief,p1,Time)
   	 ]).
 */
 %  "% =================================".


% [agent,belief,time]
% HoldsAt(Plan(agent,belief,P1a),time) &
% !HoldsAt(Believe(agent,belief),time) &
% SoundPlan(agent,belief,P1a,time) ->
% Happens(AddPlan(agent,belief,P1b),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',186).
% From E: 
% 
% '->'(
%    ','(
%       holds_at(
%          plan(Agent,Belief,p1a), 
%          Time), 
%       ','(
%          holds_at(
%             not(
%                believe(Agent,Belief)), 
%             Time), 
%          soundPlan(Agent,Belief,p1a,Time))), 
%    addPlan(Agent,Belief,p1b)).
addPlan(Agent, Belief, p1b)if plan(Agent, Belief, p1a)at Time, not believe(Agent, Belief)at Time, soundPlan(Agent, Belief, p1a, Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',186).

 /*  l_events(happens(addPlan(Agent,Belief,p1b),
   		 Time,
   		 Time_Until),
   	 [ holds(plan(Agent,Belief,p1a),Time),
   	   holds(not(believe(Agent,Belief)),Time),
   	   soundPlan(Agent,Belief,p1a,Time)
   	 ]).
 */
 %  "% =================================".


% [agent,belief,time]
% HoldsAt(Plan(agent,belief,P2),time) &
% !HoldsAt(Believe(agent,belief),time) &
% SoundPlan(agent,belief,P2,time) ->
% Happens(AddPlan(agent,belief,P2a),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',192).
% From E: 
% 
% '->'(
%    ','(
%       holds_at(
%          plan(Agent,Belief,p2), 
%          Time), 
%       ','(
%          holds_at(
%             not(
%                believe(Agent,Belief)), 
%             Time), 
%          soundPlan(Agent,Belief,p2,Time))), 
%    addPlan(Agent,Belief,p2a)).
addPlan(Agent, Belief, p2a)if plan(Agent, Belief, p2)at Time, not believe(Agent, Belief)at Time, soundPlan(Agent, Belief, p2, Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',192).

 /*  l_events(happens(addPlan(Agent,Belief,p2a),
   		 Time,
   		 Time_Until),
   	 [ holds(plan(Agent,Belief,p2),Time),
   	   holds(not(believe(Agent,Belief)),Time),
   	   soundPlan(Agent,Belief,p2,Time)
   	 ]).
 */
 %  "% =================================".


%; reactive behavior
% [agent,food,surface,time]
% !HoldsAt(Satiated(agent),time) &
% HoldsAt(On(agent,surface),time) &
% HoldsAt(On(food,surface),time) ->
% Happens(Eat(agent,food),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',198).
% From E: 
% 
% '->'(
%    ','(
%       holds_at(
%          not(
%             satiated(Agent)), 
%          Time), 
%       ','(
%          holds_at(
%             on(Agent,Surface), 
%             Time), 
%          holds_at(
%             on(Food,Surface), 
%             Time))), 
%    eat(Agent,Food)).
eat(Agent, Food)if not satiated(Agent)at Time, on(Agent, Surface)at Time, on(Food, Surface)at Time.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',198).

 /*  l_events(happens(eat(Agent,Food),Time,Time),
   	 [ holds(not(satiated(Agent)),Time),
   	   holds(on(Agent,Surface),Time),
   	   holds(on(Food,Surface),Time)
   	 ]).
 */
 %  "% =================================".


%; narrative


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',206).
% Happens(Move(Chair,Table,Shelf),2).
% From E: 
% 
% happens(
%    move(chair,table,shelf), 
%    t+2).
observe move(chair, table, shelf)at t+2.
 %  observe([move(chair,table,shelf)],t+2).
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',208).
%; SelectedPlan - plan library
%;[agent,belief,plan,time]
%;SelectedPlan(agent,belief,plan,time) <->
%;(agent=Cat & belief=BSatiated(Cat) & plan=P1 & time=0) |
%;(agent=Cat & belief=BSatiated(Cat) & plan=P2 & time=4).
% [agent,belief,plan,time]
% SelectedPlan(agent,belief,plan,time) <->
% ({surface1,surface2,surface3,food}
%  HoldsAt(Believe(agent,BOn(agent,surface1)),time) &
%  HoldsAt(Believe(agent,BCanJump(surface1,surface2)),time) &
%  HoldsAt(Believe(agent,BCanJump(surface2,surface3)),time) &
%  HoldsAt(Believe(agent,BOn(food,surface3)),time) &
%  belief=BSatiated(agent) &
%  plan=P1 &
%  time=0) |
% ({surface1,surface2,surface3,food}
%  HoldsAt(Believe(agent,BOn(agent,surface1)),time) &
%  HoldsAt(Believe(agent,BCanJump(surface1,surface2)),time) &
%  HoldsAt(Believe(agent,BCanJump(surface2,surface3)),time) &
%  HoldsAt(Believe(agent,BOn(food,surface3)),time) &
%  belief=BSatiated(agent) &
%  plan=P2 &
%  time=4).
 %  <->(selectedPlan(Agent, Belief, Plan, Time),  (exists([Surface1, Surface2, Surface3, Food],  (holds_at(believe(Agent, bOn(Agent, Surface1)), Time), holds_at(believe(Agent, bCanJump(Surface1, Surface2)), Time), holds_at(believe(Agent, bCanJump(Surface2, Surface3)), Time), holds_at(believe(Agent, bOn(Food, Surface3)), Time), Belief=bSatiated(Agent), Plan=p1, Time=0));exists([Surface18, Surface29, Surface310, Food11],  (holds_at(believe(Agent, bOn(Agent, Surface18)), Time), holds_at(believe(Agent, bCanJump(Surface18, Surface29)), Time), holds_at(believe(Agent, bCanJump(Surface29, Surface310)), Time), holds_at(believe(Agent, bOn(Food11, Surface310)), Time), Belief=bSatiated(Agent), Plan=p2, Time=4)))).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',215).
% From E: 
% 
% '->'(
%    selectedPlan(Agent,Belief,Plan,Time), 
%    ';'(
%       ','(
%          ex(
%             [ Surface1, 
%               Surface2, 
%               Surface3, 
%               Food ]), 
%          ','(
%             holds_at(
%                believe(
%                   Agent, 
%                   bOn(Agent,Surface1)), 
%                Time), 
%             ','(
%                holds_at(
%                   believe(
%                      Agent, 
%                      bCanJump(Surface1,Surface2)), 
%                   Time), 
%                ','(
%                   holds_at(
%                      believe(
%                         Agent, 
%                         bCanJump(Surface2,Surface3)), 
%                      Time), 
%                   ','(
%                      holds_at(
%                         believe(
%                            Agent, 
%                            bOn(Food,Surface3)), 
%                         Time), 
%                      ','(
%                         bSatiatedPred(Agent,Belief), 
%                         ','(
%                            equals(p1,Plan), 
%                            equals(0,Time)))))))), 
%       ','(
%          ex(
%             [ Surface18, 
%               Surface29, 
%               Surface310, 
%               Food11 ]), 
%          ','(
%             holds_at(
%                believe(
%                   Agent, 
%                   bOn(Agent,Surface18)), 
%                Time), 
%             ','(
%                holds_at(
%                   believe(
%                      Agent, 
%                      bCanJump(Surface18,Surface29)), 
%                   Time), 
%                ','(
%                   holds_at(
%                      believe(
%                         Agent, 
%                         bCanJump(Surface29,Surface310)), 
%                      Time), 
%                   ','(
%                      holds_at(
%                         believe(
%                            Agent, 
%                            bOn(Food11,Surface310)), 
%                         Time), 
%                      ','(
%                         bSatiatedPred(Agent,Belief), 
%                         ','(
%                            equals(p2,Plan), 
%                            equals(4,Time)))))))))).
if selectedPlan(Agent, Belief, Plan, Time)then ex([Surface1, Surface2, Surface3, Food]), believe(Agent, bOn(Agent, Surface1))at Time, believe(Agent, bCanJump(Surface1, Surface2))at Time, believe(Agent, bCanJump(Surface2, Surface3))at Time, believe(Agent, bOn(Food, Surface3))at Time, bSatiatedPred(Agent, Belief), equals(p1, Plan), equals(0, Time);ex([Surface18, Surface29, Surface310, Food11]), believe(Agent, bOn(Agent, Surface18))at Time, believe(Agent, bCanJump(Surface18, Surface29))at Time, believe(Agent, bCanJump(Surface29, Surface310))at Time, believe(Agent, bOn(Food11, Surface310))at Time, bSatiatedPred(Agent, Belief), equals(p2, Plan), equals(4, Time).
 %  reactive_rule([selectedPlan(Agent, Belief, Plan, Time)], [(ex([Surface1, Surface2, Surface3, Food]), at(believe(Agent, bOn(Agent, Surface1)), Time), at(believe(Agent, bCanJump(Surface1, Surface2)), Time), at(believe(Agent, bCanJump(Surface2, Surface3)), Time), at(believe(Agent, bOn(Food, Surface3)), Time), bSatiatedPred(Agent, Belief), equals(p1, Plan), equals(0, Time);ex([Surface18, Surface29, Surface310, Food11]), at(believe(Agent, bOn(Agent, Surface18)), Time), at(believe(Agent, bCanJump(Surface18, Surface29)), Time), at(believe(Agent, bCanJump(Surface29, Surface310)), Time), at(believe(Agent, bOn(Food11, Surface310)), Time), bSatiatedPred(Agent, Belief), equals(p2, Plan), equals(4, Time))]).
 %  "% =================================".
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',215).
% From E: 
% 
% '->'(
%    ';'(
%       ','(
%          ex(
%             [ Surface1, 
%               Surface2, 
%               Surface3, 
%               Food ]), 
%          ','(
%             holds_at(
%                believe(
%                   Agent, 
%                   bOn(Agent,Surface1)), 
%                Time), 
%             ','(
%                holds_at(
%                   believe(
%                      Agent, 
%                      bCanJump(Surface1,Surface2)), 
%                   Time), 
%                ','(
%                   holds_at(
%                      believe(
%                         Agent, 
%                         bCanJump(Surface2,Surface3)), 
%                      Time), 
%                   ','(
%                      holds_at(
%                         believe(
%                            Agent, 
%                            bOn(Food,Surface3)), 
%                         Time), 
%                      ','(
%                         bSatiatedPred(Agent,Belief), 
%                         ','(
%                            equals(p1,Plan), 
%                            equals(0,Time)))))))), 
%       ','(
%          ex(
%             [ Surface18, 
%               Surface29, 
%               Surface310, 
%               Food11 ]), 
%          ','(
%             holds_at(
%                believe(
%                   Agent, 
%                   bOn(Agent,Surface18)), 
%                Time), 
%             ','(
%                holds_at(
%                   believe(
%                      Agent, 
%                      bCanJump(Surface18,Surface29)), 
%                   Time), 
%                ','(
%                   holds_at(
%                      believe(
%                         Agent, 
%                         bCanJump(Surface29,Surface310)), 
%                      Time), 
%                   ','(
%                      holds_at(
%                         believe(
%                            Agent, 
%                            bOn(Food11,Surface310)), 
%                         Time), 
%                      ','(
%                         bSatiatedPred(Agent,Belief), 
%                         ','(
%                            equals(p2,Plan), 
%                            equals(4,Time))))))))), 
%    selectedPlan(Agent,Belief,Plan,Time)).
if ex([Surface1, Surface2, Surface3, Food]), believe(Agent, bOn(Agent, Surface1))at Time, believe(Agent, bCanJump(Surface1, Surface2))at Time, believe(Agent, bCanJump(Surface2, Surface3))at Time, believe(Agent, bOn(Food, Surface3))at Time, bSatiatedPred(Agent, Belief), equals(p1, Plan), equals(0, Time);ex([Surface18, Surface29, Surface310, Food11]), believe(Agent, bOn(Agent, Surface18))at Time, believe(Agent, bCanJump(Surface18, Surface29))at Time, believe(Agent, bCanJump(Surface29, Surface310))at Time, believe(Agent, bOn(Food11, Surface310))at Time, bSatiatedPred(Agent, Belief), equals(p2, Plan), equals(4, Time)then selectedPlan(Agent, Belief, Plan, Time).
 %  reactive_rule([(ex([Surface1, Surface2, Surface3, Food]), at(believe(Agent, bOn(Agent, Surface1)), Time), at(believe(Agent, bCanJump(Surface1, Surface2)), Time), at(believe(Agent, bCanJump(Surface2, Surface3)), Time), at(believe(Agent, bOn(Food, Surface3)), Time), bSatiatedPred(Agent, Belief), equals(p1, Plan), equals(0, Time);ex([Surface18, Surface29, Surface310, Food11]), at(believe(Agent, bOn(Agent, Surface18)), Time), at(believe(Agent, bCanJump(Surface18, Surface29)), Time), at(believe(Agent, bCanJump(Surface29, Surface310)), Time), at(believe(Agent, bOn(Food11, Surface310)), Time), bSatiatedPred(Agent, Belief), equals(p2, Plan), equals(4, Time))], [selectedPlan(Agent, Belief, Plan, Time)]).
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',235).
%; SoundPlan
% [agent,belief,plan,time]
% SoundPlan(agent,belief,plan,time) <->
% (plan=P1 ->
%  HoldsAt(Believe(agent,BCanJump(Floor,Chair)),time) &
%  HoldsAt(Believe(agent,BCanJump(Chair,Table)),time)) &
% ((plan=P1a | plan=P1b) ->
%   HoldsAt(Believe(agent,BCanJump(Chair,Table)),time)).
 %  <->(soundPlan(Agent, Belief, Plan, Time),  ((Plan=p1->holds_at(believe(Agent, bCanJump(floor, chair)), Time), holds_at(believe(Agent, bCanJump(chair, table)), Time)), ((Plan=p1a;Plan=p1b)->holds_at(believe(Agent, bCanJump(chair, table)), Time)))).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',237).
% From E: 
% 
% '->'(
%    soundPlan(Agent,Belief,Plan,Time), 
%    ','(
%       '->'(
%          equals(p1,Plan), 
%          ','(
%             holds_at(
%                believe(
%                   Agent, 
%                   bCanJump(floor,chair)), 
%                Time), 
%             holds_at(
%                believe(
%                   Agent, 
%                   bCanJump(chair,table)), 
%                Time))), 
%       '->'(
%          ';'(
%             equals(p1a,Plan), 
%             equals(p1b,Plan)), 
%          holds_at(
%             believe(
%                Agent, 
%                bCanJump(chair,table)), 
%             Time)))).
if soundPlan(Agent, Belief, Plan, Time)then(believe(Agent, bCanJump(floor, chair))at Time, believe(Agent, bCanJump(chair, table))at Time if equals(p1, Plan)), (believe(Agent, bCanJump(chair, table))at Time if equals(p1a, Plan);equals(p1b, Plan)).
 %  reactive_rule([soundPlan(Agent, Belief, Plan, Time)], [if((at(believe(Agent, bCanJump(floor, chair)), Time), at(believe(Agent, bCanJump(chair, table)), Time)), equals(p1, Plan)), if(at(believe(Agent, bCanJump(chair, table)), Time),  (equals(p1a, Plan);equals(p1b, Plan)))]).
 %  "% =================================".
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',237).
% From E: 
% 
% '->'(
%    ','(
%       '->'(
%          equals(p1,Plan), 
%          ','(
%             holds_at(
%                believe(
%                   Agent, 
%                   bCanJump(floor,chair)), 
%                Time), 
%             holds_at(
%                believe(
%                   Agent, 
%                   bCanJump(chair,table)), 
%                Time))), 
%       '->'(
%          ';'(
%             equals(p1a,Plan), 
%             equals(p1b,Plan)), 
%          holds_at(
%             believe(
%                Agent, 
%                bCanJump(chair,table)), 
%             Time))), 
%    soundPlan(Agent,Belief,Plan,Time)).
if (believe(Agent, bCanJump(floor, chair))at Time, believe(Agent, bCanJump(chair, table))at Time if equals(p1, Plan)), (believe(Agent, bCanJump(chair, table))at Time if equals(p1a, Plan);equals(p1b, Plan))then soundPlan(Agent, Belief, Plan, Time).
 %  reactive_rule([if((at(believe(Agent, bCanJump(floor, chair)), Time), at(believe(Agent, bCanJump(chair, table)), Time)), equals(p1, Plan)), if(at(believe(Agent, bCanJump(chair, table)), Time),  (equals(p1a, Plan);equals(p1b, Plan)))], [soundPlan(Agent, Belief, Plan, Time)]).
 %  "% =================================".


%; Gamma
% [agent,belief]
% HoldsAt(Goal(agent,belief),0) <->
% (agent=Cat & belief=BSatiated(Cat)).
 %  <->(holds_at(goal(Agent, Belief), 0),  (Agent=cat, Belief=bSatiated(cat))).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',247).
% From E: 
% 
% '->'(
%    initially(
%       goal(Agent,Belief)), 
%    ','(
%       equals(cat,Agent), 
%       bSatiatedPred(cat,Belief))).
if initially goal(Agent, Belief)then equals(cat, Agent), bSatiatedPred(cat, Belief).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',247).

 /*  reactive_rule([initially(goal(Agent,Belief))],
   	      [equals(cat,Agent),bSatiatedPred(cat,Belief)]).
 */
 %  "% =================================".
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',247).
% From E: 
% 
% '->'(
%    ','(
%       equals(cat,Agent), 
%       bSatiatedPred(cat,Belief)), 
%    initially(
%       goal(Agent,Belief))).
if equals(cat, Agent), bSatiatedPred(cat, Belief)then initially goal(Agent, Belief).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',247).

 /*  reactive_rule([equals(cat,Agent),bSatiatedPred(cat,Belief)],
   	      [initially(goal(Agent,Belief))]).
 */
 %  "% =================================".


% [agent,belief,plan]
 % !HoldsAt(Plan(agent,belief,plan),0).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',250).
% From E: 
% 
% initially(
%    neg(
%       plan(Agent,Belief,Plan))).
initially not plan(Agent, Belief, Plan).
 %  initial_state([not(plan(Agent,Belief,Plan))]).
 %  "% =================================".


% [object,surface]
 % HoldsAt(On(object,surface),0) <->
% (object=Cat & surface=Floor) |
% (object=Food1 & surface=Table) |
% (object=Food2 & surface=Shelf).
 %  <->(holds_at(on(Object, Surface), 0),  (Object=cat, Surface=floor;Object=food1, Surface=(table);Object=food2, Surface=shelf)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',252).
% From E: 
% 
% '->'(
%    initially(
%       on(Object,Surface)), 
%    ';'(
%       ','(
%          equals(cat,Object), 
%          equals(floor,Surface)), 
%       ';'(
%          ','(
%             equals(food1,Object), 
%             equals(table,Surface)), 
%          ','(
%             equals(food2,Object), 
%             equals(shelf,Surface))))).
if initially on(Object, Surface)then equals(cat, Object), equals(floor, Surface);equals(food1, Object), equals(table, Surface);equals(food2, Object), equals(shelf, Surface).
 %  reactive_rule([initially(on(Object, Surface))], [(equals(cat, Object), equals(floor, Surface);equals(food1, Object), equals(table, Surface);equals(food2, Object), equals(shelf, Surface))]).
 %  "% =================================".
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',252).
% From E: 
% 
% '->'(
%    ';'(
%       ','(
%          equals(cat,Object), 
%          equals(floor,Surface)), 
%       ';'(
%          ','(
%             equals(food1,Object), 
%             equals(table,Surface)), 
%          ','(
%             equals(food2,Object), 
%             equals(shelf,Surface)))), 
%    initially(
%       on(Object,Surface))).
if equals(cat, Object), equals(floor, Surface);equals(food1, Object), equals(table, Surface);equals(food2, Object), equals(shelf, Surface)then initially on(Object, Surface).
 %  reactive_rule([(equals(cat, Object), equals(floor, Surface);equals(food1, Object), equals(table, Surface);equals(food2, Object), equals(shelf, Surface))], [initially(on(Object, Surface))]).
 %  "% =================================".


% [surface1,surface2]
 % HoldsAt(CanJump(surface1,surface2),0) <->
% (surface1=Floor & surface2=Chair) |
% (surface1=Chair & surface2=Table) |
% (surface1=Shelf & surface2=Table).
 %  <->(holds_at(canJump(Surface1, Surface2), 0),  (Surface1=floor, Surface2=chair;Surface1=chair, Surface2=(table);Surface1=shelf, Surface2=(table))).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',257).
% From E: 
% 
% '->'(
%    initially(
%       canJump(Surface1,Surface2)), 
%    ';'(
%       ','(
%          equals(floor,Surface1), 
%          equals(chair,Surface2)), 
%       ';'(
%          ','(
%             equals(chair,Surface1), 
%             equals(table,Surface2)), 
%          ','(
%             equals(shelf,Surface1), 
%             equals(table,Surface2))))).
if initially canJump(Surface1, Surface2)then equals(floor, Surface1), equals(chair, Surface2);equals(chair, Surface1), equals(table, Surface2);equals(shelf, Surface1), equals(table, Surface2).
 %  reactive_rule([initially(canJump(Surface1, Surface2))], [(equals(floor, Surface1), equals(chair, Surface2);equals(chair, Surface1), equals(table, Surface2);equals(shelf, Surface1), equals(table, Surface2))]).
 %  "% =================================".
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',257).
% From E: 
% 
% '->'(
%    ';'(
%       ','(
%          equals(floor,Surface1), 
%          equals(chair,Surface2)), 
%       ';'(
%          ','(
%             equals(chair,Surface1), 
%             equals(table,Surface2)), 
%          ','(
%             equals(shelf,Surface1), 
%             equals(table,Surface2)))), 
%    initially(
%       canJump(Surface1,Surface2))).
if equals(floor, Surface1), equals(chair, Surface2);equals(chair, Surface1), equals(table, Surface2);equals(shelf, Surface1), equals(table, Surface2)then initially canJump(Surface1, Surface2).
 %  reactive_rule([(equals(floor, Surface1), equals(chair, Surface2);equals(chair, Surface1), equals(table, Surface2);equals(shelf, Surface1), equals(table, Surface2))], [initially(canJump(Surface1, Surface2))]).
 %  "% =================================".


% [agent,object,surface]
% HoldsAt(Believe(agent,BOn(object,surface)),0) <->
% (agent=Cat & object=Cat & surface=Floor) |
% (agent=Cat & object=Food1 & surface=Table).
 %  <->(holds_at(believe(Agent, bOn(Object, Surface)), 0),  (Agent=cat, Object=cat, Surface=floor;Agent=cat, Object=food1, Surface=(table))).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',264).
% From E: 
% 
% '->'(
%    initially(
%       believe(
%          Agent, 
%          bOn(Object,Surface))), 
%    ';'(
%       ','(
%          equals(cat,Agent), 
%          ','(
%             equals(cat,Object), 
%             equals(floor,Surface))), 
%       ','(
%          equals(cat,Agent), 
%          ','(
%             equals(food1,Object), 
%             equals(table,Surface))))).
if initially believe(Agent, bOn(Object, Surface))then equals(cat, Agent), equals(cat, Object), equals(floor, Surface);equals(cat, Agent), equals(food1, Object), equals(table, Surface).
 %  reactive_rule([initially(believe(Agent, bOn(Object, Surface)))], [(equals(cat, Agent), equals(cat, Object), equals(floor, Surface);equals(cat, Agent), equals(food1, Object), equals(table, Surface))]).
 %  "% =================================".
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',264).
% From E: 
% 
% '->'(
%    ';'(
%       ','(
%          equals(cat,Agent), 
%          ','(
%             equals(cat,Object), 
%             equals(floor,Surface))), 
%       ','(
%          equals(cat,Agent), 
%          ','(
%             equals(food1,Object), 
%             equals(table,Surface)))), 
%    initially(
%       believe(
%          Agent, 
%          bOn(Object,Surface)))).
if equals(cat, Agent), equals(cat, Object), equals(floor, Surface);equals(cat, Agent), equals(food1, Object), equals(table, Surface)then initially believe(Agent, bOn(Object, Surface)).
 %  reactive_rule([(equals(cat, Agent), equals(cat, Object), equals(floor, Surface);equals(cat, Agent), equals(food1, Object), equals(table, Surface))], [initially(believe(Agent, bOn(Object, Surface)))]).
 %  "% =================================".


% [agent,surface1,surface2]
% HoldsAt(Believe(agent,BCanJump(surface1,surface2)),0) <->
% (agent=Cat & surface1=Floor & surface2=Chair) |
% (agent=Cat & surface1=Chair & surface2=Table) |
% (agent=Cat & surface1=Shelf & surface2=Table).
 %  <->(holds_at(believe(Agent, bCanJump(Surface1, Surface2)), 0),  (Agent=cat, Surface1=floor, Surface2=chair;Agent=cat, Surface1=chair, Surface2=(table);Agent=cat, Surface1=shelf, Surface2=(table))).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',269).
% From E: 
% 
% '->'(
%    initially(
%       believe(
%          Agent, 
%          bCanJump(Surface1,Surface2))), 
%    ';'(
%       ','(
%          equals(cat,Agent), 
%          ','(
%             equals(floor,Surface1), 
%             equals(chair,Surface2))), 
%       ';'(
%          ','(
%             equals(cat,Agent), 
%             ','(
%                equals(chair,Surface1), 
%                equals(table,Surface2))), 
%          ','(
%             equals(cat,Agent), 
%             ','(
%                equals(shelf,Surface1), 
%                equals(table,Surface2)))))).
if initially believe(Agent, bCanJump(Surface1, Surface2))then equals(cat, Agent), equals(floor, Surface1), equals(chair, Surface2);equals(cat, Agent), equals(chair, Surface1), equals(table, Surface2);equals(cat, Agent), equals(shelf, Surface1), equals(table, Surface2).
 %  reactive_rule([initially(believe(Agent, bCanJump(Surface1, Surface2)))], [(equals(cat, Agent), equals(floor, Surface1), equals(chair, Surface2);equals(cat, Agent), equals(chair, Surface1), equals(table, Surface2);equals(cat, Agent), equals(shelf, Surface1), equals(table, Surface2))]).
 %  "% =================================".
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',269).
% From E: 
% 
% '->'(
%    ';'(
%       ','(
%          equals(cat,Agent), 
%          ','(
%             equals(floor,Surface1), 
%             equals(chair,Surface2))), 
%       ';'(
%          ','(
%             equals(cat,Agent), 
%             ','(
%                equals(chair,Surface1), 
%                equals(table,Surface2))), 
%          ','(
%             equals(cat,Agent), 
%             ','(
%                equals(shelf,Surface1), 
%                equals(table,Surface2))))), 
%    initially(
%       believe(
%          Agent, 
%          bCanJump(Surface1,Surface2)))).
if equals(cat, Agent), equals(floor, Surface1), equals(chair, Surface2);equals(cat, Agent), equals(chair, Surface1), equals(table, Surface2);equals(cat, Agent), equals(shelf, Surface1), equals(table, Surface2)then initially believe(Agent, bCanJump(Surface1, Surface2)).
 %  reactive_rule([(equals(cat, Agent), equals(floor, Surface1), equals(chair, Surface2);equals(cat, Agent), equals(chair, Surface1), equals(table, Surface2);equals(cat, Agent), equals(shelf, Surface1), equals(table, Surface2))], [initially(believe(Agent, bCanJump(Surface1, Surface2)))]).
 %  "% =================================".


% !HoldsAt(Believe(Cat,BSatiated(Cat)),0).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',273).
% From E: 
% 
% initially(
%    neg(
%       believe(
%          cat, 
%          bSatiated(cat)))).
initially not believe(cat, bSatiated(cat)).
 %  initial_state([not(believe(cat,bSatiated(cat)))]).
 %  "% =================================".


%; ADDED:


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',277).
% !HoldsAt(Satiated(Cat),0).
% From E: 
% 
% initially(
%    neg(
%       satiated(cat))).
initially not satiated(cat).
 %  initial_state([not(satiated(cat))]).
 %  "% =================================".

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',279).
% completion Happens
% From E: 
% 
% completion(happens).
completion(happens).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',281).
% range time 0 7
% From E: 
% 
% range(time,0,7).
range(time,0,7).

% range offset 1 1
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e',281).
% From E: 
% 
% range(offset,1,1).
range(offset,1,1).
%; End of file.
% translate: ending  File: /pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter11/HungryCat.e.lps 
