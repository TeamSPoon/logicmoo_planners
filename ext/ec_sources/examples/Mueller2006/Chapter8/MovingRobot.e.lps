:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter8/CameraWithFlash.e',58).
% translate: unskipped  File: /pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter8/MovingRobot.e.lps 
:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(lps).
% translate: begining  File: /pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter8/MovingRobot.e.lps 
% Fri, 09 Oct 2020 15:14:35 GMT File: <stream>(0x5625a977dc00)%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @inproceedings{Shanahan:1996,
%;   author = "Murray Shanahan",
%;   year = "1996",
%;   title = "Robotics and the common sense informatic situation",
%;   editor = "Wolfgang Wahlster",
%;   booktitle = "\uppercase{P}roceedings of the \uppercase{T}welfth \uppercase{E}uropean \uppercase{C}onference on \uppercase{A}rtificial \uppercase{I}ntelligence",
%;   pages = "684--688",
%;   address = "Chichester, UK",
%;   publisher = "John Wiley",
%; }
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter8/MovingRobot.e',31).
% option renaming off
:- if(is_e_toplevel).
:- set_ec_option(renaming, off).
:- endif.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter8/MovingRobot.e',33).
% load foundations/Root.e
:- if(is_e_toplevel).
:- load_e_cond('foundations/Root.e', changed).
 %  load('/pack/logicmoo_ec/ext/ec_sources/foundations/Root.e',changed).
:- endif.

% load foundations/EC.e
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter8/MovingRobot.e',33).
:- if(is_e_toplevel).
:- load_e_cond('foundations/EC.e', changed).
 %  load('/pack/logicmoo_ec/ext/ec_sources/foundations/EC.e',changed).
:- endif.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter8/MovingRobot.e',36).
% sort coord: integer
% From E: 
% 
% subsort(coord,integer).
subsort(coord,integer).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter8/MovingRobot.e',38).
% sort direction: integer
% From E: 
% 
% subsort(direction,integer).
subsort(direction,integer).
%; 0 -> 0, 1 -> 90, 2 -> 180, 3 -> 370

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter8/MovingRobot.e',41).
% sort robot
% From E: 
% 
% sort(robot).
sort(robot).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter8/MovingRobot.e',43).
% robot Robot1
% From E: 
% 
% t(robot,robot1).
robot(robot1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter8/MovingRobot.e',45).
% function Sin(direction): coord
% From E: 
% 
% function(
%    sin(direction)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter8/MovingRobot.e',45).
functions([sin/1]).
% From E: 
% 
% mpred_prop(
%    sin(direction), 
%    function).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter8/MovingRobot.e',45).
mpred_prop(sin(direction),function).
% From E: 
% 
% predicate(
%    sinPred(direction,coord)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter8/MovingRobot.e',45).
predicates([sinPred/2]).
% From E: 
% 
% mpred_prop(
%    sinPred(direction,coord), 
%    predicate).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter8/MovingRobot.e',45).
mpred_prop(sinPred(direction,coord),predicate).
% From E: 
% 
% functional_predicate(sin,sinPred).
functional_predicate(sin,sinPred).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter8/MovingRobot.e',45).
% From E: 
% 
% function_argtypes(
%    sinPred, 
%    sin(direction), 
%    coord).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter8/MovingRobot.e',45).
function_argtypes(sinPred,sin(direction),coord).
% From E: 
% 
% resultIsa(sin,coord).
resultIsa(sin,coord).

% function Cos(direction): coord
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter8/MovingRobot.e',45).
% From E: 
% 
% function(
%    cos(direction)).
functions([cos/1]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter8/MovingRobot.e',45).
% From E: 
% 
% mpred_prop(
%    cos(direction), 
%    function).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter8/MovingRobot.e',45).
mpred_prop(cos(direction),function).
% From E: 
% 
% predicate(
%    cosPred(direction,coord)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter8/MovingRobot.e',45).
predicates([cosPred/2]).
% From E: 
% 
% mpred_prop(
%    cosPred(direction,coord), 
%    predicate).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter8/MovingRobot.e',45).
mpred_prop(cosPred(direction,coord),predicate).
% From E: 
% 
% functional_predicate(cos,cosPred).
functional_predicate(cos,cosPred).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter8/MovingRobot.e',45).
% From E: 
% 
% function_argtypes(
%    cosPred, 
%    cos(direction), 
%    coord).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter8/MovingRobot.e',45).
function_argtypes(cosPred,cos(direction),coord).
% From E: 
% 
% resultIsa(cos,coord).
resultIsa(cos,coord).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter8/MovingRobot.e',48).
% Sin(0)=0.
% From E: 
% 
% sinPred(0,0).
sinPred(0,0).


% Sin(1)=1.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter8/MovingRobot.e',48).
% From E: 
% 
% sinPred(1,1).
sinPred(1,1).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter8/MovingRobot.e',50).
% Sin(2)=2.
% From E: 
% 
% sinPred(2,2).
sinPred(2,2).


% Sin(3)=3.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter8/MovingRobot.e',50).
% From E: 
% 
% sinPred(3,3).
sinPred(3,3).


% Cos(0)=1.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter8/MovingRobot.e',52).
% From E: 
% 
% cosPred(0,1).
cosPred(0,1).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter8/MovingRobot.e',54).
% Cos(1)=2.
% From E: 
% 
% cosPred(1,2).
cosPred(1,2).


% Cos(2)=3.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter8/MovingRobot.e',54).
% From E: 
% 
% cosPred(2,3).
cosPred(2,3).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter8/MovingRobot.e',56).
% Cos(3)=4.
% From E: 
% 
% cosPred(3,4).
cosPred(3,4).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter8/MovingRobot.e',58).
% fluent Direction(robot,direction)
% From E: 
% 
% fluent(
%    direction(robot,direction)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter8/MovingRobot.e',58).
fluents([direction/2]).
% From E: 
% 
% mpred_prop(
%    direction(robot,direction), 
%    fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter8/MovingRobot.e',58).
mpred_prop(direction(robot,direction),fluent).

% fluent Location(robot,coord,coord)
% From E: 
% 
% fluent(
%    location(robot,coord,coord)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter8/MovingRobot.e',58).
fluents([location/3]).
% From E: 
% 
% mpred_prop(
%    location(robot,coord,coord), 
%    fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter8/MovingRobot.e',58).
mpred_prop(location(robot,coord,coord),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter8/MovingRobot.e',61).
% event MoveLeftWheel(robot)
% From E: 
% 
% event(
%    moveLeftWheel(robot)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter8/MovingRobot.e',61).
events([moveLeftWheel/1]).
% From E: 
% 
% mpred_prop(
%    moveLeftWheel(robot), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter8/MovingRobot.e',61).
mpred_prop(moveLeftWheel(robot),event).

% event MoveRightWheel(robot)
% From E: 
% 
% event(
%    moveRightWheel(robot)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter8/MovingRobot.e',61).
events([moveRightWheel/1]).
% From E: 
% 
% mpred_prop(
%    moveRightWheel(robot), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter8/MovingRobot.e',61).
mpred_prop(moveRightWheel(robot),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter8/MovingRobot.e',64).
%; Sigma
% [robot,direction1,direction2,time]
% !Happens(MoveRightWheel(robot),time) &
% HoldsAt(Direction(robot,direction1),time) &
% direction2 = (direction1-1)->
% Initiates(MoveLeftWheel(robot),Direction(robot,direction2),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter8/MovingRobot.e',66).
% From E: 
% 
% '->'(
%    ','(
%       not(
%          moveRightWheel(Robot)), 
%       ','(
%          holds_at(
%             direction(Robot,Direction1), 
%             Time), 
%          '-Pred'(Direction1,1,Direction2))), 
%    initiates(
%       moveLeftWheel(Robot), 
%       direction(Robot,Direction2), 
%       Time)).
moveLeftWheel(Robot)initiates direction(Robot, Direction2)at Time if not moveRightWheel(Robot), direction(Robot, Direction1)at Time, '-Pred'(Direction1, 1, Direction2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter8/MovingRobot.e',66).

 /*  initiated(happens(moveLeftWheel(Robot),
   		  Time_From,
   		  Time_Until),
   	  at(direction(Robot,Direction2),Time),
   	  [ not(moveRightWheel(Robot)),
   	    holds(direction(Robot,Direction1),Time),
   	    '-Pred'(Direction1,1,Direction2)
   	  ]).
 */
 %  "% =================================".


% [robot,direction,time]
% !Happens(MoveRightWheel(robot),time) &
% HoldsAt(Direction(robot,direction),time) ->
% Terminates(MoveLeftWheel(robot),Direction(robot,direction),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter8/MovingRobot.e',73).
% From E: 
% 
% '->'(
%    ','(
%       not(
%          moveRightWheel(Robot)), 
%       holds_at(
%          direction(Robot,Direction), 
%          Time)), 
%    terminates(
%       moveLeftWheel(Robot), 
%       direction(Robot,Direction), 
%       Time)).
moveLeftWheel(Robot)terminates direction(Robot, Direction)at Time if not moveRightWheel(Robot), direction(Robot, Direction)at Time.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter8/MovingRobot.e',73).

 /*  terminated(happens(moveLeftWheel(Robot),
   		   Time,
   		   Time_Until),
   	   at(direction(Robot,Direction),Time),
   	   [ not(moveRightWheel(Robot)),
   	     holds(direction(Robot,Direction),Time)
   	   ]).
 */
 %  "% =================================".


% [robot,direction1,direction2,time]
% !Happens(MoveLeftWheel(robot),time) &
% HoldsAt(Direction(robot,direction1),time) &
% direction2 = (direction1+1)->
% Initiates(MoveRightWheel(robot),Direction(robot,direction2),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter8/MovingRobot.e',78).
% From E: 
% 
% '->'(
%    ','(
%       not(
%          moveLeftWheel(Robot)), 
%       ','(
%          holds_at(
%             direction(Robot,Direction1), 
%             Time), 
%          '+Pred'(Direction1,1,Direction2))), 
%    initiates(
%       moveRightWheel(Robot), 
%       direction(Robot,Direction2), 
%       Time)).
moveRightWheel(Robot)initiates direction(Robot, Direction2)at Time if not moveLeftWheel(Robot), direction(Robot, Direction1)at Time, '+Pred'(Direction1, 1, Direction2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter8/MovingRobot.e',78).

 /*  initiated(happens(moveRightWheel(Robot),
   		  Time_From,
   		  Time_Until),
   	  at(direction(Robot,Direction2),Time),
   	  [ not(moveLeftWheel(Robot)),
   	    holds(direction(Robot,Direction1),Time),
   	    '+Pred'(Direction1,1,Direction2)
   	  ]).
 */
 %  "% =================================".


% [robot,direction,time]
% !Happens(MoveLeftWheel(robot),time) &
% HoldsAt(Direction(robot,direction),time) ->
% Terminates(MoveRightWheel(robot),Direction(robot,direction),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter8/MovingRobot.e',84).
% From E: 
% 
% '->'(
%    ','(
%       not(
%          moveLeftWheel(Robot)), 
%       holds_at(
%          direction(Robot,Direction), 
%          Time)), 
%    terminates(
%       moveRightWheel(Robot), 
%       direction(Robot,Direction), 
%       Time)).
moveRightWheel(Robot)terminates direction(Robot, Direction)at Time if not moveLeftWheel(Robot), direction(Robot, Direction)at Time.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter8/MovingRobot.e',84).

 /*  terminated(happens(moveRightWheel(Robot),
   		   Time,
   		   Time_Until),
   	   at(direction(Robot,Direction),Time),
   	   [ not(moveLeftWheel(Robot)),
   	     holds(direction(Robot,Direction),Time)
   	   ]).
 */
 %  "% =================================".


% [robot,direction,coord1,coord2,coord3,coord4,time]
% Happens(MoveLeftWheel(robot),time) &
% HoldsAt(Location(robot,coord1,coord2),time) &
% HoldsAt(Direction(robot,direction),time) &
% coord3 = coord1+Cos(direction) &
% coord4 = coord2+Sin(direction) ->
% Initiates(MoveRightWheel(robot),
%           Location(robot,coord3,coord4),
%           time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter8/MovingRobot.e',89).
% From E: 
% 
% '->'(
%    ','(
%       moveLeftWheel(Robot), 
%       ','(
%          holds_at(
%             location(Robot,Coord1,Coord2), 
%             Time), 
%          ','(
%             holds_at(
%                direction(Robot,Direction), 
%                Time), 
%             ','(
%                '+Pred'(
%                   Coord1, 
%                   cos(Direction), 
%                   Coord3), 
%                '+Pred'(
%                   Coord2, 
%                   sin(Direction), 
%                   Coord4))))), 
%    initiates(
%       moveRightWheel(Robot), 
%       location(Robot,Coord3,Coord4), 
%       Time)).
moveRightWheel(Robot)initiates location(Robot, Coord3, Coord4)at Time if moveLeftWheel(Robot), location(Robot, Coord1, Coord2)at Time, direction(Robot, Direction)at Time, '+Pred'(Coord1, cos(Direction), Coord3), '+Pred'(Coord2, sin(Direction), Coord4).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter8/MovingRobot.e',89).

 /*  initiated(happens(moveRightWheel(Robot),
   		  Time_From,
   		  Time_Until),
   	  at(location(Robot,Coord3,Coord4),
   	     Time),
   	  [ happens(moveLeftWheel(Robot),
   		    Time_From,
   		    Time_Until),
   	    holds(location(Robot,Coord1,Coord2),
   		  Time),
   	    holds(direction(Robot,Direction),Time),
   	    '+Pred'(Coord1,cos(Direction),Coord3),
   	    '+Pred'(Coord2,sin(Direction),Coord4)
   	  ]).
 */
 %  "% =================================".


% [robot,coord1,coord2,time]
% Happens(MoveLeftWheel(robot),time) &
% HoldsAt(Location(robot,coord1,coord2),time) ->
%; FIX: Direction not needed!!
%; HoldsAt(Direction(robot,direction),time) ->
% Terminates(MoveRightWheel(robot),Location(robot,coord1,coord2),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter8/MovingRobot.e',99).
% From E: 
% 
% '->'(
%    ','(
%       moveLeftWheel(Robot), 
%       holds_at(
%          location(Robot,Coord1,Coord2), 
%          Time)), 
%    terminates(
%       moveRightWheel(Robot), 
%       location(Robot,Coord1,Coord2), 
%       Time)).
moveRightWheel(Robot)terminates location(Robot, Coord1, Coord2)at Time if moveLeftWheel(Robot), location(Robot, Coord1, Coord2)at Time.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter8/MovingRobot.e',99).

 /*  terminated(happens(moveRightWheel(Robot),
   		   Time,
   		   Time_Until),
   	   at(location(Robot,Coord1,Coord2),
   	      Time),
   	   [ happens(moveLeftWheel(Robot),
   		     Time,
   		     Time_Until),
   	     holds(location(Robot,Coord1,Coord2),
   		   Time)
   	   ]).
 */
 %  "% =================================".


%; Delta


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter8/MovingRobot.e',107).
% Happens(MoveRightWheel(Robot1),0).
% From E: 
% 
% happens(
%    moveRightWheel(robot1), 
%    t+0).
observe moveRightWheel(robot1)at t+0.
 %  observe([moveRightWheel(robot1)],t+0).
 %  "% =================================".


% Happens(MoveLeftWheel(Robot1),1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter8/MovingRobot.e',107).
% From E: 
% 
% happens(
%    moveLeftWheel(robot1), 
%    t+1).
observe moveLeftWheel(robot1)at t+1.
 %  observe([moveLeftWheel(robot1)],t+1).
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter8/MovingRobot.e',109).
% Happens(MoveRightWheel(Robot1),1).
% From E: 
% 
% happens(
%    moveRightWheel(robot1), 
%    t+1).
observe moveRightWheel(robot1)at t+1.
 %  observe([moveRightWheel(robot1)],t+1).
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter8/MovingRobot.e',111).
%; Psi
% [robot,coord1,coord2,coord3,coord4,time]
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter8/MovingRobot.e',115).
% HoldsAt(Location(robot,coord1,coord2),time) &
% HoldsAt(Location(robot,coord3,coord4),time) ->
% coord1=coord3 &
% coord2=coord4.
% From E: 
% 
% '->'(
%    ','(
%       holds_at(
%          location(Robot,Coord1,Coord2), 
%          Time), 
%       holds_at(
%          location(Robot,Coord3,Coord4), 
%          Time)), 
%    ','(
%       equals(Coord1,Coord3), 
%       equals(Coord2,Coord4))).
if location(Robot, Coord1, Coord2)at Time, location(Robot, Coord3, Coord4)at Time then equals(Coord1, Coord3), equals(Coord2, Coord4).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter8/MovingRobot.e',115).

 /*  reactive_rule([ holds(location(Robot,Coord1,Coord2),
   		      Time),
   		holds(location(Robot,Coord3,Coord4),
   		      Time)
   	      ],
   	      [ equals(Coord1,Coord3),
   		equals(Coord2,Coord4)
   	      ]).
 */
 %  "% =================================".


% [robot,direction1,direction2,time]
% HoldsAt(Direction(robot,direction1),time) &
% HoldsAt(Direction(robot,direction2),time) ->
% direction1=direction2.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter8/MovingRobot.e',121).
% From E: 
% 
% '->'(
%    ','(
%       holds_at(
%          direction(Robot,Direction1), 
%          Time), 
%       holds_at(
%          direction(Robot,Direction2), 
%          Time)), 
%    equals(Direction1,Direction2)).
if direction(Robot, Direction1)at Time, direction(Robot, Direction2)at Time then equals(Direction1, Direction2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter8/MovingRobot.e',121).

 /*  reactive_rule([ holds(direction(Robot,Direction1),
   		      Time),
   		holds(direction(Robot,Direction2),
   		      Time)
   	      ],
   	      [equals(Direction1,Direction2)]).
 */
 %  "% =================================".


%; Gamma


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter8/MovingRobot.e',127).
% HoldsAt(Location(Robot1,0,0),0).
% From E: 
% 
% initially(
%    location(robot1,0,0)).
initially location(robot1, 0, 0).
 %  initial_state([location(robot1,0,0)]).
 %  "% =================================".


% HoldsAt(Direction(Robot1,0),0).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter8/MovingRobot.e',127).
% From E: 
% 
% initially(
%    direction(robot1,0)).
initially direction(robot1, 0).
 %  initial_state([direction(robot1,0)]).
 %  "% =================================".

% completion Happens
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter8/MovingRobot.e',129).
% From E: 
% 
% completion(happens).
completion(happens).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter8/MovingRobot.e',132).
% range time 0 3
% From E: 
% 
% range(time,0,3).
range(time,0,3).

% range coord 0 3
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter8/MovingRobot.e',132).
% From E: 
% 
% range(coord,0,3).
range(coord,0,3).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter8/MovingRobot.e',134).
% range direction 0 3
% From E: 
% 
% range(direction,0,3).
range(direction,0,3).

% range offset 1 1
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter8/MovingRobot.e',134).
% From E: 
% 
% range(offset,1,1).
range(offset,1,1).
%; End of file.
% translate: ending  File: /pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter8/MovingRobot.e.lps 
