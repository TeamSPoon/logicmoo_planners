:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter4/AlarmClock.e',90).
% translate: unskipped  File: /pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter4/BankAccountServiceFee.e.lps 
:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(lps).
% translate: begining  File: /pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter4/BankAccountServiceFee.e.lps 
% Fri, 09 Oct 2020 15:14:24 GMT File: <stream>(0x5625a97f9600)%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter4/BankAccountServiceFee.e',20).
% option modeldiff on
:- if(is_e_toplevel).
:- set_ec_option(modeldiff, on).
:- endif.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter4/BankAccountServiceFee.e',22).
% load foundations/Root.e
:- if(is_e_toplevel).
:- load_e_cond('foundations/Root.e', changed).
 %  load('/pack/logicmoo_ec/ext/ec_sources/foundations/Root.e',changed).
:- endif.

% load foundations/EC.e
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter4/BankAccountServiceFee.e',22).
:- if(is_e_toplevel).
:- load_e_cond('foundations/EC.e', changed).
 %  load('/pack/logicmoo_ec/ext/ec_sources/foundations/EC.e',changed).
:- endif.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter4/BankAccountServiceFee.e',25).
% sort account
% From E: 
% 
% sort(account).
sort(account).

% sort value: integer
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter4/BankAccountServiceFee.e',25).
% From E: 
% 
% subsort(value,integer).
subsort(value,integer).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter4/BankAccountServiceFee.e',28).
% account Account1, Account2
% From E: 
% 
% t(account,account1).
account(account1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter4/BankAccountServiceFee.e',28).
% From E: 
% 
% t(account,account2).
account(account2).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter4/BankAccountServiceFee.e',30).
% predicate EndOfMonth(time)
% From E: 
% 
% predicate(
%    endOfMonth(time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter4/BankAccountServiceFee.e',30).
predicates([endOfMonth/1]).
% From E: 
% 
% mpred_prop(
%    endOfMonth(time), 
%    predicate).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter4/BankAccountServiceFee.e',30).
mpred_prop(endOfMonth(time),predicate).

% function ServiceFee(account): value
% From E: 
% 
% function(
%    serviceFee(account)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter4/BankAccountServiceFee.e',30).
functions([serviceFee/1]).
% From E: 
% 
% mpred_prop(
%    serviceFee(account), 
%    function).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter4/BankAccountServiceFee.e',30).
mpred_prop(serviceFee(account),function).
% From E: 
% 
% predicate(
%    serviceFeePred(account,value)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter4/BankAccountServiceFee.e',30).
predicates([serviceFeePred/2]).
% From E: 
% 
% mpred_prop(
%    serviceFeePred(account,value), 
%    predicate).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter4/BankAccountServiceFee.e',30).
mpred_prop(serviceFeePred(account,value),predicate).
% From E: 
% 
% functional_predicate(serviceFee,serviceFeePred).
functional_predicate(serviceFee,serviceFeePred).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter4/BankAccountServiceFee.e',30).
% From E: 
% 
% function_argtypes(
%    serviceFeePred, 
%    serviceFee(account), 
%    value).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter4/BankAccountServiceFee.e',30).
function_argtypes(serviceFeePred,serviceFee(account),value).
% From E: 
% 
% resultIsa(serviceFee,value).
resultIsa(serviceFee,value).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter4/BankAccountServiceFee.e',32).
% function MinimumBalance(account): value
% From E: 
% 
% function(
%    minimumBalance(account)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter4/BankAccountServiceFee.e',32).
functions([minimumBalance/1]).
% From E: 
% 
% mpred_prop(
%    minimumBalance(account), 
%    function).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter4/BankAccountServiceFee.e',32).
mpred_prop(minimumBalance(account),function).
% From E: 
% 
% predicate(
%    minimumBalancePred(account,value)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter4/BankAccountServiceFee.e',32).
predicates([minimumBalancePred/2]).
% From E: 
% 
% mpred_prop(
%    minimumBalancePred(account,value), 
%    predicate).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter4/BankAccountServiceFee.e',32).
mpred_prop(minimumBalancePred(account,value),predicate).
% From E: 
% 
% functional_predicate(minimumBalance,minimumBalancePred).
functional_predicate(minimumBalance,minimumBalancePred).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter4/BankAccountServiceFee.e',32).
% From E: 
% 
% function_argtypes(
%    minimumBalancePred, 
%    minimumBalance(account), 
%    value).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter4/BankAccountServiceFee.e',32).
function_argtypes(minimumBalancePred,minimumBalance(account),value).
% From E: 
% 
% resultIsa(minimumBalance,value).
resultIsa(minimumBalance,value).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter4/BankAccountServiceFee.e',34).
% fluent ServiceFeeCharged(account)
% From E: 
% 
% fluent(
%    serviceFeeCharged(account)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter4/BankAccountServiceFee.e',34).
fluents([serviceFeeCharged/1]).
% From E: 
% 
% mpred_prop(
%    serviceFeeCharged(account), 
%    fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter4/BankAccountServiceFee.e',34).
mpred_prop(serviceFeeCharged(account),fluent).

% fluent Balance(account,value)
% From E: 
% 
% fluent(
%    balance(account,value)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter4/BankAccountServiceFee.e',34).
fluents([balance/2]).
% From E: 
% 
% mpred_prop(
%    balance(account,value), 
%    fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter4/BankAccountServiceFee.e',34).
mpred_prop(balance(account,value),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter4/BankAccountServiceFee.e',37).
% event Transfer(account,account,value)
% From E: 
% 
% event(
%    transfer(account,account,value)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter4/BankAccountServiceFee.e',37).
events([transfer/3]).
% From E: 
% 
% mpred_prop(
%    transfer(account,account,value), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter4/BankAccountServiceFee.e',37).
mpred_prop(transfer(account,account,value),event).

% event MonthlyReset(account)
% From E: 
% 
% event(
%    monthlyReset(account)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter4/BankAccountServiceFee.e',37).
events([monthlyReset/1]).
% From E: 
% 
% mpred_prop(
%    monthlyReset(account), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter4/BankAccountServiceFee.e',37).
mpred_prop(monthlyReset(account),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter4/BankAccountServiceFee.e',39).
% event ChargeServiceFee(account)
% From E: 
% 
% event(
%    chargeServiceFee(account)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter4/BankAccountServiceFee.e',39).
events([chargeServiceFee/1]).
% From E: 
% 
% mpred_prop(
%    chargeServiceFee(account), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter4/BankAccountServiceFee.e',39).
mpred_prop(chargeServiceFee(account),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter4/BankAccountServiceFee.e',41).
%; Sigma
% [account1,account2,value1,value2,value3,value4,time]
% HoldsAt(Balance(account1,value1),time) &
% HoldsAt(Balance(account2,value2),time) &
% value3>0 &
% value1>=value3 &
% value4=(value2+value3) ->
% Initiates(Transfer(account1,account2,value3),Balance(account2,value4),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter4/BankAccountServiceFee.e',43).
% From E: 
% 
% '->'(
%    ','(
%       holds_at(
%          balance(Account1,Value1), 
%          Time), 
%       ','(
%          holds_at(
%             balance(Account2,Value2), 
%             Time), 
%          ','(
%             comparison(Value3,0,>), 
%             ','(
%                comparison(Value1,Value3,>=), 
%                '+Pred'(Value2,Value3,Value4))))), 
%    initiates(
%       transfer(Account1,Account2,Value3), 
%       balance(Account2,Value4), 
%       Time)).
transfer(Account1, Account2, Value3)initiates balance(Account2, Value4)at Time if balance(Account1, Value1)at Time, balance(Account2, Value2)at Time, comparison(Value3, 0, >), comparison(Value1, Value3, >=), '+Pred'(Value2, Value3, Value4).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter4/BankAccountServiceFee.e',43).

 /*  initiated(happens(transfer(Account1,Account2,Value3),
   		  Time_From,
   		  Time_Until),
   	  at(balance(Account2,Value4),Time),
   	  [ holds(balance(Account1,Value1),Time),
   	    holds(balance(Account2,Value2),Time),
   	    comparison(Value3,0,>),
   	    comparison(Value1,Value3,>=),
   	    '+Pred'(Value2,Value3,Value4)
   	  ]).
 */
 %  "% =================================".


% [account1,account2,value1,value2,value3,time]
% HoldsAt(Balance(account1,value1),time) &
% HoldsAt(Balance(account2,value2),time) &
% value3>0 &
% value1>=value3 ->
% Terminates(Transfer(account1,account2,value3),Balance(account2,value2),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter4/BankAccountServiceFee.e',52).
% From E: 
% 
% '->'(
%    ','(
%       holds_at(
%          balance(Account1,Value1), 
%          Time), 
%       ','(
%          holds_at(
%             balance(Account2,Value2), 
%             Time), 
%          ','(
%             comparison(Value3,0,>), 
%             comparison(Value1,Value3,>=)))), 
%    terminates(
%       transfer(Account1,Account2,Value3), 
%       balance(Account2,Value2), 
%       Time)).
transfer(Account1, Account2, Value3)terminates balance(Account2, Value2)at Time if balance(Account1, Value1)at Time, balance(Account2, Value2)at Time, comparison(Value3, 0, >), comparison(Value1, Value3, >=).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter4/BankAccountServiceFee.e',52).

 /*  terminated(happens(transfer(Account1,Account2,Value3),
   		   Time_From,
   		   Time_Until),
   	   at(balance(Account2,Value2),Time),
   	   [ holds(balance(Account1,Value1),Time),
   	     holds(balance(Account2,Value2),Time),
   	     comparison(Value3,0,>),
   	     comparison(Value1,Value3,>=)
   	   ]).
 */
 %  "% =================================".


% [account1,account2,value1,value2,value3,value4,time]
% HoldsAt(Balance(account1,value1),time) &
% HoldsAt(Balance(account2,value2),time) &
% value3>0 &
% value1>=value3 &
% value4=(value1-value3) ->
% Initiates(Transfer(account1,account2,value3),Balance(account1,value4),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter4/BankAccountServiceFee.e',59).
% From E: 
% 
% '->'(
%    ','(
%       holds_at(
%          balance(Account1,Value1), 
%          Time), 
%       ','(
%          holds_at(
%             balance(Account2,Value2), 
%             Time), 
%          ','(
%             comparison(Value3,0,>), 
%             ','(
%                comparison(Value1,Value3,>=), 
%                '-Pred'(Value1,Value3,Value4))))), 
%    initiates(
%       transfer(Account1,Account2,Value3), 
%       balance(Account1,Value4), 
%       Time)).
transfer(Account1, Account2, Value3)initiates balance(Account1, Value4)at Time if balance(Account1, Value1)at Time, balance(Account2, Value2)at Time, comparison(Value3, 0, >), comparison(Value1, Value3, >=), '-Pred'(Value1, Value3, Value4).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter4/BankAccountServiceFee.e',59).

 /*  initiated(happens(transfer(Account1,Account2,Value3),
   		  Time_From,
   		  Time_Until),
   	  at(balance(Account1,Value4),Time),
   	  [ holds(balance(Account1,Value1),Time),
   	    holds(balance(Account2,Value2),Time),
   	    comparison(Value3,0,>),
   	    comparison(Value1,Value3,>=),
   	    '-Pred'(Value1,Value3,Value4)
   	  ]).
 */
 %  "% =================================".


% [account1,account2,value1,value2,value3,time]
% HoldsAt(Balance(account1,value1),time) &
% HoldsAt(Balance(account2,value2),time) &
% value3>0 &
% value1>=value3 ->
% Terminates(Transfer(account1,account2,value3),Balance(account1,value1),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter4/BankAccountServiceFee.e',67).
% From E: 
% 
% '->'(
%    ','(
%       holds_at(
%          balance(Account1,Value1), 
%          Time), 
%       ','(
%          holds_at(
%             balance(Account2,Value2), 
%             Time), 
%          ','(
%             comparison(Value3,0,>), 
%             comparison(Value1,Value3,>=)))), 
%    terminates(
%       transfer(Account1,Account2,Value3), 
%       balance(Account1,Value1), 
%       Time)).
transfer(Account1, Account2, Value3)terminates balance(Account1, Value1)at Time if balance(Account1, Value1)at Time, balance(Account2, Value2)at Time, comparison(Value3, 0, >), comparison(Value1, Value3, >=).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter4/BankAccountServiceFee.e',67).

 /*  terminated(happens(transfer(Account1,Account2,Value3),
   		   Time_From,
   		   Time_Until),
   	   at(balance(Account1,Value1),Time),
   	   [ holds(balance(Account1,Value1),Time),
   	     holds(balance(Account2,Value2),Time),
   	     comparison(Value3,0,>),
   	     comparison(Value1,Value3,>=)
   	   ]).
 */
 %  "% =================================".


% [account,time]
% Initiates(ChargeServiceFee(account),ServiceFeeCharged(account),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter4/BankAccountServiceFee.e',74).
% From E: 
% 
% initiates(
%    chargeServiceFee(Account), 
%    serviceFeeCharged(Account), 
%    Time).
chargeServiceFee(Account)initiates serviceFeeCharged(Account).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter4/BankAccountServiceFee.e',74).

 /*  initiated(happens(chargeServiceFee(Account),
   		  Time_From,
   		  Time_Until),
   	  serviceFeeCharged(Account),
   	  []).
 */
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter4/BankAccountServiceFee.e',76).
% [account,time]
% Terminates(MonthlyReset(account),ServiceFeeCharged(account),time).
% From E: 
% 
% terminates(
%    monthlyReset(Account), 
%    serviceFeeCharged(Account), 
%    Time).
monthlyReset(Account)terminates serviceFeeCharged(Account).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter4/BankAccountServiceFee.e',76).

 /*  terminated(happens(monthlyReset(Account),
   		   Time_From,
   		   Time_Until),
   	   serviceFeeCharged(Account),
   	   []).
 */
 %  "% =================================".


% [account,value1,value2,time]
% HoldsAt(Balance(account,value1),time) &
% value2 = (value1-ServiceFee(account)) ->
% Initiates(ChargeServiceFee(account),
%           Balance(account,value2),
%           time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter4/BankAccountServiceFee.e',80).
% From E: 
% 
% '->'(
%    ','(
%       holds_at(
%          balance(Account,Value1), 
%          Time), 
%       '-Pred'(
%          Value1, 
%          serviceFee(Account), 
%          Value2)), 
%    initiates(
%       chargeServiceFee(Account), 
%       balance(Account,Value2), 
%       Time)).
chargeServiceFee(Account)initiates balance(Account, Value2)at Time if balance(Account, Value1)at Time, '-Pred'(Value1, serviceFee(Account), Value2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter4/BankAccountServiceFee.e',80).

 /*  initiated(happens(chargeServiceFee(Account),
   		  Time_From,
   		  Time_Until),
   	  at(balance(Account,Value2),Time),
   	  [ holds(balance(Account,Value1),Time),
   	    '-Pred'(Value1,serviceFee(Account),Value2)
   	  ]).
 */
 %  "% =================================".


% [account,value,time]
% HoldsAt(Balance(account,value),time) ->
% Terminates(ChargeServiceFee(account),Balance(account,value),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter4/BankAccountServiceFee.e',87).
% From E: 
% 
% '->'(
%    holds_at(
%       balance(Account,Value), 
%       Time), 
%    terminates(
%       chargeServiceFee(Account), 
%       balance(Account,Value), 
%       Time)).
chargeServiceFee(Account)terminates balance(Account, Value)at Time if balance(Account, Value)at Time.

 /*  terminated(happens(chargeServiceFee(Account),
   		   Time,
   		   Time_Until),
   	   at(balance(Account,Value),Time),
   	   [holds(balance(Account,Value),Time)]).
 */
 %  "% =================================".


%; Delta
% [account,value,time]
% HoldsAt(Balance(account,value),time) &
% value<MinimumBalance(account) &
% !HoldsAt(ServiceFeeCharged(account),time) ->
% Happens(ChargeServiceFee(account),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter4/BankAccountServiceFee.e',92).
% From E: 
% 
% '->'(
%    ','(
%       holds_at(
%          balance(Account,Value), 
%          Time), 
%       ','(
%          call(
%             '<'(
%                Value, 
%                minimumBalance(Account))), 
%          holds_at(
%             not(
%                serviceFeeCharged(Account)), 
%             Time))), 
%    chargeServiceFee(Account)).
chargeServiceFee(Account)if balance(Account, Value)at Time, call(Value<minimumBalance(Account)), not serviceFeeCharged(Account)at Time.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter4/BankAccountServiceFee.e',92).

 /*  l_events(happens(chargeServiceFee(Account),Time,Time),
   	 [ holds(balance(Account,Value),Time),
   	   call(Value<minimumBalance(Account)),
   	   holds(not(serviceFeeCharged(Account)),Time)
   	 ]).
 */
 %  "% =================================".


% [account,time]
% EndOfMonth(time) ->
% Happens(MonthlyReset(account),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter4/BankAccountServiceFee.e',99).
% From E: 
% 
% '->'(
%    endOfMonth(Time), 
%    monthlyReset(Account)).
monthlyReset(Account)if endOfMonth(Time).

 /*  l_events(happens(monthlyReset(Account),
   		 Time_From,
   		 Time_From),
   	 [endOfMonth(Time)]).
 */
 %  "% =================================".


% Happens(Transfer(Account1,Account2,1),0).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter4/BankAccountServiceFee.e',101).
% From E: 
% 
% happens(
%    transfer(account1,account2,1), 
%    t+0).
observe transfer(account1, account2, 1)at t+0.
 %  observe([transfer(account1,account2,1)],t+0).
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter4/BankAccountServiceFee.e',103).
% Happens(Transfer(Account1,Account2,1),0).
% From E: 
% 
% happens(
%    transfer(account1,account2,1), 
%    t+0).
observe transfer(account1, account2, 1)at t+0.
 %  observe([transfer(account1,account2,1)],t+0).
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter4/BankAccountServiceFee.e',105).
%; Psi
% [account,value1,value2,time]
% HoldsAt(Balance(account,value1),time) &
% HoldsAt(Balance(account,value2),time) ->
% value1=value2.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter4/BankAccountServiceFee.e',107).
% From E: 
% 
% '->'(
%    ','(
%       holds_at(
%          balance(Account,Value1), 
%          Time), 
%       holds_at(
%          balance(Account,Value2), 
%          Time)), 
%    equals(Value1,Value2)).
if balance(Account, Value1)at Time, balance(Account, Value2)at Time then equals(Value1, Value2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter4/BankAccountServiceFee.e',107).

 /*  reactive_rule([ holds(balance(Account,Value1),Time),
   		holds(balance(Account,Value2),Time)
   	      ],
   	      [equals(Value1,Value2)]).
 */
 %  "% =================================".


%; Gamma


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter4/BankAccountServiceFee.e',114).
% !HoldsAt(ServiceFeeCharged(Account1),0).
% From E: 
% 
% initially(
%    neg(
%       serviceFeeCharged(account1))).
initially not serviceFeeCharged(account1).
 %  initial_state([not(serviceFeeCharged(account1))]).
 %  "% =================================".


% !HoldsAt(ServiceFeeCharged(Account2),0).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter4/BankAccountServiceFee.e',114).
% From E: 
% 
% initially(
%    neg(
%       serviceFeeCharged(account2))).
initially not serviceFeeCharged(account2).
 %  initial_state([not(serviceFeeCharged(account2))]).
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter4/BankAccountServiceFee.e',116).
% HoldsAt(Balance(Account1,3),0).
% From E: 
% 
% initially(
%    balance(account1,3)).
initially balance(account1, 3).
 %  initial_state([balance(account1,3)]).
 %  "% =================================".


% HoldsAt(Balance(Account2,1),0).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter4/BankAccountServiceFee.e',116).
% From E: 
% 
% initially(
%    balance(account2,1)).
initially balance(account2, 1).
 %  initial_state([balance(account2,1)]).
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter4/BankAccountServiceFee.e',118).
% MinimumBalance(Account1)=3.
% From E: 
% 
% minimumBalancePred(account1,3).
minimumBalancePred(account1,3).


% MinimumBalance(Account2)=1.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter4/BankAccountServiceFee.e',118).
% From E: 
% 
% minimumBalancePred(account2,1).
minimumBalancePred(account2,1).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter4/BankAccountServiceFee.e',120).
% ServiceFee(Account1)=1.
% From E: 
% 
% serviceFeePred(account1,1).
serviceFeePred(account1,1).


% ServiceFee(Account2)=1.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter4/BankAccountServiceFee.e',120).
% From E: 
% 
% serviceFeePred(account2,1).
serviceFeePred(account2,1).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter4/BankAccountServiceFee.e',122).
% [time]
 % !EndOfMonth(time).
% From E: 
% 
% not(
%    endOfMonth(Time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter4/BankAccountServiceFee.e',122).
not(endOfMonth(Time)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter4/BankAccountServiceFee.e',124).
% completion Happens
% From E: 
% 
% completion(happens).
completion(happens).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter4/BankAccountServiceFee.e',126).
% range time 0 3
% From E: 
% 
% range(time,0,3).
range(time,0,3).

% range value 1 3
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter4/BankAccountServiceFee.e',126).
% From E: 
% 
% range(value,1,3).
range(value,1,3).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter4/BankAccountServiceFee.e',128).
% range offset 1 1
% From E: 
% 
% range(offset,1,1).
range(offset,1,1).
%; End of file.
% translate: ending  File: /pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter4/BankAccountServiceFee.e.lps 
