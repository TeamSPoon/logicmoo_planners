:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Exercises/SnoozeAlarm.e',112).
% translate: unskipped  File: /pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Exercises/TeacherTells.e.lps 
:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(lps).
% translate: begining  File: /pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Exercises/TeacherTells.e.lps 
% Fri, 09 Oct 2020 15:14:42 GMT File: <stream>(0x5625a9752b00)%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Exercises/TeacherTells.e',20).
% option modeldiff on
:- if(is_e_toplevel).
:- set_ec_option(modeldiff, on).
:- endif.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Exercises/TeacherTells.e',22).
% load foundations/Root.e
:- if(is_e_toplevel).
:- load_e_cond('foundations/Root.e', changed).
 %  load('/pack/logicmoo_ec/ext/ec_sources/foundations/Root.e',changed).
:- endif.

% load foundations/EC.e
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Exercises/TeacherTells.e',22).
:- if(is_e_toplevel).
:- load_e_cond('foundations/EC.e', changed).
 %  load('/pack/logicmoo_ec/ext/ec_sources/foundations/EC.e',changed).
:- endif.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Exercises/TeacherTells.e',25).
% sort agent
% From E: 
% 
% sort(agent).
sort(agent).

% sort room
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Exercises/TeacherTells.e',25).
% From E: 
% 
% sort(room).
sort(room).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Exercises/TeacherTells.e',27).
% sort fact
% From E: 
% 
% sort(fact).
sort(fact).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Exercises/TeacherTells.e',29).
% agent Teacher, Student
% From E: 
% 
% t(agent,teacher).
agent(teacher).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Exercises/TeacherTells.e',29).
% From E: 
% 
% t(agent,student).
agent(student).

% room Kitchen, Classroom
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Exercises/TeacherTells.e',29).
% From E: 
% 
% t(room,kitchen).
room(kitchen).
% From E: 
% 
% t(room,classroom).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Exercises/TeacherTells.e',29).
room(classroom).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Exercises/TeacherTells.e',31).
% fact Fact1, Fact2
% From E: 
% 
% t(fact,fact1).
fact(fact1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Exercises/TeacherTells.e',31).
% From E: 
% 
% t(fact,fact2).
fact(fact2).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Exercises/TeacherTells.e',33).
% fluent InRoom(agent,room)
% From E: 
% 
% fluent(
%    inRoom(agent,room)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Exercises/TeacherTells.e',33).
fluents([inRoom/2]).
% From E: 
% 
% mpred_prop(
%    inRoom(agent,room), 
%    fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Exercises/TeacherTells.e',33).
mpred_prop(inRoom(agent,room),fluent).

% fluent ListeningTo(agent,agent)
% From E: 
% 
% fluent(
%    listeningTo(agent,agent)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Exercises/TeacherTells.e',33).
fluents([listeningTo/2]).
% From E: 
% 
% mpred_prop(
%    listeningTo(agent,agent), 
%    fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Exercises/TeacherTells.e',33).
mpred_prop(listeningTo(agent,agent),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Exercises/TeacherTells.e',35).
% fluent Know(agent,fact)
% From E: 
% 
% fluent(
%    know(agent,fact)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Exercises/TeacherTells.e',35).
fluents([know/2]).
% From E: 
% 
% mpred_prop(
%    know(agent,fact), 
%    fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Exercises/TeacherTells.e',35).
mpred_prop(know(agent,fact),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Exercises/TeacherTells.e',37).
% event Tell(agent,agent,fact)
% From E: 
% 
% event(
%    tell(agent,agent,fact)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Exercises/TeacherTells.e',37).
events([tell/3]).
% From E: 
% 
% mpred_prop(
%    tell(agent,agent,fact), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Exercises/TeacherTells.e',37).
mpred_prop(tell(agent,agent,fact),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Exercises/TeacherTells.e',39).
%; Sigma
% [agent1,agent2,fact,time]
% (% {room} HoldsAt(InRoom(agent1,room),time) &
%         HoldsAt(InRoom(agent2,room),time)) &
% HoldsAt(ListeningTo(agent2,agent1),time) ->
% Initiates(Tell(agent1,agent2,fact),Know(agent2,fact),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Exercises/TeacherTells.e',41).
% From E: 
% 
% ','(
%    ex(
%       [Room]), 
%    '->'(
%       ','(
%          ','(
%             holds_at(
%                inRoom(Agent1,Room), 
%                Time), 
%             holds_at(
%                inRoom(Agent2,Room), 
%                Time)), 
%          holds_at(
%             listeningTo(Agent2,Agent1), 
%             Time)), 
%       initiates(
%          tell(Agent1,Agent2,Fact), 
%          know(Agent2,Fact), 
%          Time))).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Exercises/TeacherTells.e',41).
ex([Room]),
if(initiates(tell(Agent1, Agent2, Fact), at(know(Agent2, Fact), Time)),  ((at(inRoom(Agent1, Room), Time), at(inRoom(Agent2, Room), Time)), at(listeningTo(Agent2, Agent1), Time))).


%; Delta


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Exercises/TeacherTells.e',49).
% Happens(Tell(Teacher,Student,Fact1),0).
% From E: 
% 
% happens(
%    tell(teacher,student,fact1), 
%    t+0).
observe tell(teacher, student, fact1)at t+0.
 %  observe([tell(teacher,student,fact1)],t+0).
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Exercises/TeacherTells.e',51).
%; Psi
% [agent,room1,room2,time]
% HoldsAt(InRoom(agent,room1),time) &
% HoldsAt(InRoom(agent,room2),time) ->
% room1 = room2.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Exercises/TeacherTells.e',53).
% From E: 
% 
% '->'(
%    ','(
%       holds_at(
%          inRoom(Agent,Room1), 
%          Time), 
%       holds_at(
%          inRoom(Agent,Room2), 
%          Time)), 
%    equals(Room1,Room2)).
if inRoom(Agent, Room1)at Time, inRoom(Agent, Room2)at Time then equals(Room1, Room2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Exercises/TeacherTells.e',53).

 /*  reactive_rule([ holds(inRoom(Agent,Room1),Time),
   		holds(inRoom(Agent,Room2),Time)
   	      ],
   	      [equals(Room1,Room2)]).
 */
 %  "% =================================".


%; Gamma
% [agent,fact]
 % !HoldsAt(Know(agent,fact),0).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Exercises/TeacherTells.e',60).
% From E: 
% 
% initially(
%    neg(
%       know(Agent,Fact))).
initially not know(Agent, Fact).
 %  initial_state([not(know(Agent,Fact))]).
 %  "% =================================".


% [agent1,agent2]
 % HoldsAt(ListeningTo(agent1,agent2),0).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Exercises/TeacherTells.e',60).
% From E: 
% 
% initially(
%    listeningTo(Agent1,Agent2)).
initially listeningTo(Agent1, Agent2).
 %  initial_state([listeningTo(Agent1,Agent2)]).
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Exercises/TeacherTells.e',62).
% [agent]
 % HoldsAt(InRoom(agent,Classroom),0).
% From E: 
% 
% initially(
%    inRoom(Agent,classroom)).
initially inRoom(Agent, classroom).
 %  initial_state([inRoom(Agent,classroom)]).
 %  "% =================================".

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Exercises/TeacherTells.e',64).
% completion Happens
% From E: 
% 
% completion(happens).
completion(happens).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Exercises/TeacherTells.e',66).
% range time 0 1
% From E: 
% 
% range(time,0,1).
range(time,0,1).

% range offset 1 1
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Exercises/TeacherTells.e',66).
% From E: 
% 
% range(offset,1,1).
range(offset,1,1).
%; End of file.
% translate: ending  File: /pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Exercises/TeacherTells.e.lps 
