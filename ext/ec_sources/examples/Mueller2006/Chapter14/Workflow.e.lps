:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Vision.e',107).
% translate: unskipped  File: /pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Workflow.e.lps 
:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(lps).
% translate: begining  File: /pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Workflow.e.lps 
% Fri, 09 Oct 2020 15:14:12 GMT File: <stream>(0x5625a9735700)%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @incollection{CicekliYildirim:2000,
%;   author = "Nihan Kesim Cicekli and Yakup Yildirim",
%;   year = "2000",
%;   title = "Formalizing workflows using the event calculus",
%;   editor = "Mohamed T. Ibrahim and Josef K{\"{u}}ng and Norman Revell",
%;   booktitle = "Database and Expert Systems Applications",
%;   series = "Lecture Notes in Computer Science",
%;   volume = "1873",
%;   pages = "222--231",
%;   address = "Berlin",
%;   publisher = "Springer",
%; }
%;
%; @unpublished{WFMC:1999,
%;   author = "{Workflow Management Coalition}",
%;   year = "1999",
%;   title = "\uppercase{W}orkflow \uppercase{M}anagement \uppercase{C}oalition Terminology \& Glossary",
%;   howpublished = "Document Number WFMC-TC-1011, Document Status -- Issue 3.0, Workflow Management Coalition, Winchester, UK",
%; }
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Workflow.e',40).
% option modeldiff on
:- if(is_e_toplevel).
:- set_ec_option(modeldiff, on).
:- endif.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Workflow.e',42).
% load foundations/Root.e
:- if(is_e_toplevel).
:- load_e_cond('foundations/Root.e', changed).
 %  load('/pack/logicmoo_ec/ext/ec_sources/foundations/Root.e',changed).
:- endif.

% load foundations/EC.e
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Workflow.e',42).
:- if(is_e_toplevel).
:- load_e_cond('foundations/EC.e', changed).
 %  load('/pack/logicmoo_ec/ext/ec_sources/foundations/EC.e',changed).
:- endif.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Workflow.e',45).
% sort activity
% From E: 
% 
% sort(activity).
sort(activity).

% sort condition
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Workflow.e',45).
% From E: 
% 
% sort(condition).
sort(condition).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Workflow.e',47).
% activity A, B, C1, C2, C3, D, E1, E2, E3, F, G
% From E: 
% 
% t(activity,a).
activity(a).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Workflow.e',47).
% From E: 
% 
% t(activity,b).
activity(b).
% From E: 
% 
% t(activity,c1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Workflow.e',47).
activity(c1).
% From E: 
% 
% t(activity,c2).
activity(c2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Workflow.e',47).
% From E: 
% 
% t(activity,c3).
activity(c3).
% From E: 
% 
% t(activity,d).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Workflow.e',47).
activity(d).
% From E: 
% 
% t(activity,e1).
activity(e1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Workflow.e',47).
% From E: 
% 
% t(activity,e2).
activity(e2).
% From E: 
% 
% t(activity,e3).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Workflow.e',47).
activity(e3).
% From E: 
% 
% t(activity,f).
activity(f).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Workflow.e',47).
% From E: 
% 
% t(activity,g).
activity(g).

% condition E1C, E2C, E3C, FC
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Workflow.e',47).
% From E: 
% 
% t(condition,e1c).
condition(e1c).
 %  l_int(holds(condition(e1c),Time_At),[]).
 %  "% =================================".
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Workflow.e',47).
% From E: 
% 
% t(condition,e2c).
condition(e2c).
 %  l_int(holds(condition(e2c),Time_At1),[]).
 %  "% =================================".
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Workflow.e',47).
% From E: 
% 
% t(condition,e3c).
condition(e3c).
 %  l_int(holds(condition(e3c),Time_At2),[]).
 %  "% =================================".
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Workflow.e',47).
% From E: 
% 
% t(condition,fc).
condition(fc).
 %  l_int(holds(condition(fc),Time_At3),[]).
 %  "% =================================".

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Workflow.e',50).
% fluent Active(activity)
% From E: 
% 
% fluent(
%    active(activity)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Workflow.e',50).
fluents([active/1]).
% From E: 
% 
% mpred_prop(
%    active(activity), 
%    fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Workflow.e',50).
mpred_prop(active(activity),fluent).

% fluent Completed(activity)
% From E: 
% 
% fluent(
%    completed(activity)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Workflow.e',50).
fluents([completed/1]).
% From E: 
% 
% mpred_prop(
%    completed(activity), 
%    fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Workflow.e',50).
mpred_prop(completed(activity),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Workflow.e',52).
% fluent Condition(condition)
% From E: 
% 
% fluent(
%    condition(condition)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Workflow.e',52).
fluents([condition/1]).
% From E: 
% 
% mpred_prop(
%    condition(condition), 
%    fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Workflow.e',52).
mpred_prop(condition(condition),fluent).

% noninertial Condition
% From E: 
% 
% noninertial(condition).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Workflow.e',52).
noninertial(condition).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Workflow.e',55).
% event Start(activity)
% From E: 
% 
% event(
%    start(activity)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Workflow.e',55).
events([start/1]).
% From E: 
% 
% mpred_prop(
%    start(activity), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Workflow.e',55).
mpred_prop(start(activity),event).

% event End(activity)
% From E: 
% 
% event(
%    end(activity)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Workflow.e',55).
events([end/1]).
% From E: 
% 
% mpred_prop(
%    end(activity), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Workflow.e',55).
mpred_prop(end(activity),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Workflow.e',58).
%; Sigma
% [activity,time]
% Initiates(Start(activity),Active(activity),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Workflow.e',60).
% From E: 
% 
% initiates(
%    start(Activity), 
%    active(Activity), 
%    Time).
start(Activity)initiates active(Activity).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Workflow.e',60).

 /*  initiated(happens(start(Activity),
   		  Time_From,
   		  Time_Until),
   	  active(Activity),
   	  []).
 */
 %  "% =================================".


% [activity,time]
% Terminates(Start(activity),Completed(activity),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Workflow.e',64).
% From E: 
% 
% terminates(
%    start(Activity), 
%    completed(Activity), 
%    Time).
start(Activity)terminates completed(Activity).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Workflow.e',64).

 /*  terminated(happens(start(Activity),
   		   Time_From,
   		   Time_Until),
   	   completed(Activity),
   	   []).
 */
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Workflow.e',66).
% [activity,time]
% Initiates(End(activity),Completed(activity),time).
% From E: 
% 
% initiates(
%    end(Activity), 
%    completed(Activity), 
%    Time).
end(Activity)initiates completed(Activity).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Workflow.e',66).

 /*  initiated(happens(end(Activity),Time_From,Time_Until),
   	  completed(Activity),
   	  []).
 */
 %  "% =================================".


% [activity,time]
% Terminates(End(activity),Active(activity),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Workflow.e',70).
% From E: 
% 
% terminates(
%    end(Activity), 
%    active(Activity), 
%    Time).
end(Activity)terminates active(Activity).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Workflow.e',70).

 /*  terminated(happens(end(Activity),
   		   Time_From,
   		   Time_Until),
   	   active(Activity),
   	   []).
 */
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Workflow.e',72).
%; Delta
%; A; B

% Delta: 
 


% [time]
% !HoldsAt(Active(B),time) &
% !HoldsAt(Completed(A),time-1) &
% HoldsAt(Completed(A),time) ->
% Happens(Start(B),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Workflow.e',76).
% From E: 
% 
% '->'(
%    axiom_uses(delta,Time), 
%    '->'(
%       ','(
%          holds_at(
%             not(
%                active(b)), 
%             Time), 
%          ','(
%             holds_at(
%                not(
%                   completed(a)), 
%                Time-1), 
%             holds_at(
%                completed(a), 
%                Time))), 
%       start(b))).
if axiom_uses(delta, Time)then start(b)if not active(b)at Time, not completed(a)at Time-1, completed(a)at Time.
 %  reactive_rule([axiom_uses(delta, Time)], [if(start(b),  (at(not(active(b)), Time), at(not(completed(a)), Time-1), at(completed(a), Time)))]).
 %  "% =================================".


%; B; AND-split C1, C2, C3

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Workflow.e',82).
% Delta: 
 


% [time]
% !HoldsAt(Active(C1),time) &
% !HoldsAt(Completed(B),time-1) &
% HoldsAt(Completed(B),time) ->
% Happens(Start(C1),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Workflow.e',82).
% From E: 
% 
% '->'(
%    axiom_uses(delta,Time), 
%    '->'(
%       ','(
%          holds_at(
%             not(
%                active(c1)), 
%             Time), 
%          ','(
%             holds_at(
%                not(
%                   completed(b)), 
%                Time-1), 
%             holds_at(
%                completed(b), 
%                Time))), 
%       start(c1))).
if axiom_uses(delta, Time)then start(c1)if not active(c1)at Time, not completed(b)at Time-1, completed(b)at Time.
 %  reactive_rule([axiom_uses(delta, Time)], [if(start(c1),  (at(not(active(c1)), Time), at(not(completed(b)), Time-1), at(completed(b), Time)))]).
 %  "% =================================".

% Delta: 
 


% [time]
% !HoldsAt(Active(C2),time) &
% !HoldsAt(Completed(B),time-1) &
% HoldsAt(Completed(B),time) ->
% Happens(Start(C2),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Workflow.e',89).
% From E: 
% 
% '->'(
%    axiom_uses(delta,Time), 
%    '->'(
%       ','(
%          holds_at(
%             not(
%                active(c2)), 
%             Time), 
%          ','(
%             holds_at(
%                not(
%                   completed(b)), 
%                Time-1), 
%             holds_at(
%                completed(b), 
%                Time))), 
%       start(c2))).
if axiom_uses(delta, Time)then start(c2)if not active(c2)at Time, not completed(b)at Time-1, completed(b)at Time.
 %  reactive_rule([axiom_uses(delta, Time)], [if(start(c2),  (at(not(active(c2)), Time), at(not(completed(b)), Time-1), at(completed(b), Time)))]).
 %  "% =================================".

% Delta: 
 


% [time]
% !HoldsAt(Active(C3),time) &
% !HoldsAt(Completed(B),time-1) &
% HoldsAt(Completed(B),time) ->
% Happens(Start(C3),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Workflow.e',95).
% From E: 
% 
% '->'(
%    axiom_uses(delta,Time), 
%    '->'(
%       ','(
%          holds_at(
%             not(
%                active(c3)), 
%             Time), 
%          ','(
%             holds_at(
%                not(
%                   completed(b)), 
%                Time-1), 
%             holds_at(
%                completed(b), 
%                Time))), 
%       start(c3))).
if axiom_uses(delta, Time)then start(c3)if not active(c3)at Time, not completed(b)at Time-1, completed(b)at Time.
 %  reactive_rule([axiom_uses(delta, Time)], [if(start(c3),  (at(not(active(c3)), Time), at(not(completed(b)), Time-1), at(completed(b), Time)))]).
 %  "% =================================".


%; AND-join C1, C2, C3; D

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Workflow.e',101).
% Delta: 
 


% [time]
% !HoldsAt(Active(D),time) &
% ((!HoldsAt(Completed(C1),time-1) & HoldsAt(Completed(C1),time))|
%  (!HoldsAt(Completed(C2),time-1) & HoldsAt(Completed(C2),time))|
%  (!HoldsAt(Completed(C3),time-1) & HoldsAt(Completed(C3),time))) &
% HoldsAt(Completed(C1),time) &
% HoldsAt(Completed(C2),time) &
% HoldsAt(Completed(C3),time) ->
% Happens(Start(D),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Workflow.e',101).
% From E: 
% 
% '->'(
%    axiom_uses(delta,Time), 
%    '->'(
%       ','(
%          holds_at(
%             not(
%                active(d)), 
%             Time), 
%          ','(
%             ';'(
%                ','(
%                   holds_at(
%                      not(
%                         completed(c1)), 
%                      Time-1), 
%                   holds_at(
%                      completed(c1), 
%                      Time)), 
%                ';'(
%                   ','(
%                      holds_at(
%                         not(
%                            completed(c2)), 
%                         Time-1), 
%                      holds_at(
%                         completed(c2), 
%                         Time)), 
%                   ','(
%                      holds_at(
%                         not(
%                            completed(c3)), 
%                         Time-1), 
%                      holds_at(
%                         completed(c3), 
%                         Time)))), 
%             ','(
%                holds_at(
%                   completed(c1), 
%                   Time), 
%                ','(
%                   holds_at(
%                      completed(c2), 
%                      Time), 
%                   holds_at(
%                      completed(c3), 
%                      Time))))), 
%       start(d))).
if axiom_uses(delta, Time)then start(d)if not active(d)at Time, (not completed(c1)at Time-1, completed(c1)at Time;not completed(c2)at Time-1, completed(c2)at Time;not completed(c3)at Time-1, completed(c3)at Time), completed(c1)at Time, completed(c2)at Time, completed(c3)at Time.
 %  reactive_rule([axiom_uses(delta, Time)], [if(start(d),  (at(not(active(d)), Time), (at(not(completed(c1)), Time-1), at(completed(c1), Time);at(not(completed(c2)), Time-1), at(completed(c2), Time);at(not(completed(c3)), Time-1), at(completed(c3), Time)), at(completed(c1), Time), at(completed(c2), Time), at(completed(c3), Time)))]).
 %  "% =================================".


%; D; XOR-split E1, E2, E3

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Workflow.e',112).
% Delta: 
 


% [time]
% !HoldsAt(Active(E1),time) &
% !HoldsAt(Completed(D),time-1) &
% HoldsAt(Completed(D),time) &
% HoldsAt(Condition(E1C),time) ->
% Happens(Start(E1),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Workflow.e',112).
% From E: 
% 
% '->'(
%    axiom_uses(delta,Time), 
%    '->'(
%       ','(
%          holds_at(
%             not(
%                active(e1)), 
%             Time), 
%          ','(
%             holds_at(
%                not(
%                   completed(d)), 
%                Time-1), 
%             ','(
%                holds_at(
%                   completed(d), 
%                   Time), 
%                holds_at(
%                   condition(e1c), 
%                   Time)))), 
%       start(e1))).
if axiom_uses(delta, Time)then start(e1)if not active(e1)at Time, not completed(d)at Time-1, completed(d)at Time, condition(e1c)at Time.
 %  reactive_rule([axiom_uses(delta, Time)], [if(start(e1),  (at(not(active(e1)), Time), at(not(completed(d)), Time-1), at(completed(d), Time), at(condition(e1c), Time)))]).
 %  "% =================================".

% Delta: 
 


% [time]
% !HoldsAt(Active(E2),time) &
% !HoldsAt(Completed(D),time-1) &
% HoldsAt(Completed(D),time) &
% HoldsAt(Condition(E2C),time) ->
% Happens(Start(E2),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Workflow.e',120).
% From E: 
% 
% '->'(
%    axiom_uses(delta,Time), 
%    '->'(
%       ','(
%          holds_at(
%             not(
%                active(e2)), 
%             Time), 
%          ','(
%             holds_at(
%                not(
%                   completed(d)), 
%                Time-1), 
%             ','(
%                holds_at(
%                   completed(d), 
%                   Time), 
%                holds_at(
%                   condition(e2c), 
%                   Time)))), 
%       start(e2))).
if axiom_uses(delta, Time)then start(e2)if not active(e2)at Time, not completed(d)at Time-1, completed(d)at Time, condition(e2c)at Time.
 %  reactive_rule([axiom_uses(delta, Time)], [if(start(e2),  (at(not(active(e2)), Time), at(not(completed(d)), Time-1), at(completed(d), Time), at(condition(e2c), Time)))]).
 %  "% =================================".

% Delta: 
 


% [time]
% !HoldsAt(Active(E3),time) &
% !HoldsAt(Completed(D),time-1) &
% HoldsAt(Completed(D),time) &
% HoldsAt(Condition(E3C),time) ->
% Happens(Start(E3),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Workflow.e',127).
% From E: 
% 
% '->'(
%    axiom_uses(delta,Time), 
%    '->'(
%       ','(
%          holds_at(
%             not(
%                active(e3)), 
%             Time), 
%          ','(
%             holds_at(
%                not(
%                   completed(d)), 
%                Time-1), 
%             ','(
%                holds_at(
%                   completed(d), 
%                   Time), 
%                holds_at(
%                   condition(e3c), 
%                   Time)))), 
%       start(e3))).
if axiom_uses(delta, Time)then start(e3)if not active(e3)at Time, not completed(d)at Time-1, completed(d)at Time, condition(e3c)at Time.
 %  reactive_rule([axiom_uses(delta, Time)], [if(start(e3),  (at(not(active(e3)), Time), at(not(completed(d)), Time-1), at(completed(d), Time), at(condition(e3c), Time)))]).
 %  "% =================================".


%; XOR-join E1, E2, E3; F

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Workflow.e',134).
% Delta: 
 


% [time]
% !HoldsAt(Active(F),time) &
% ((!HoldsAt(Completed(E1),time-1) & HoldsAt(Completed(E1),time))|
%  (!HoldsAt(Completed(E2),time-1) & HoldsAt(Completed(E2),time))|
%  (!HoldsAt(Completed(E3),time-1) & HoldsAt(Completed(E3),time))) ->
% Happens(Start(F),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Workflow.e',134).
% From E: 
% 
% '->'(
%    axiom_uses(delta,Time), 
%    '->'(
%       ','(
%          holds_at(
%             not(
%                active(f)), 
%             Time), 
%          ';'(
%             ','(
%                holds_at(
%                   not(
%                      completed(e1)), 
%                   Time-1), 
%                holds_at(
%                   completed(e1), 
%                   Time)), 
%             ';'(
%                ','(
%                   holds_at(
%                      not(
%                         completed(e2)), 
%                      Time-1), 
%                   holds_at(
%                      completed(e2), 
%                      Time)), 
%                ','(
%                   holds_at(
%                      not(
%                         completed(e3)), 
%                      Time-1), 
%                   holds_at(
%                      completed(e3), 
%                      Time))))), 
%       start(f))).
if axiom_uses(delta, Time)then start(f)if not active(f)at Time, (not completed(e1)at Time-1, completed(e1)at Time;not completed(e2)at Time-1, completed(e2)at Time;not completed(e3)at Time-1, completed(e3)at Time).
 %  reactive_rule([axiom_uses(delta, Time)], [if(start(f),  (at(not(active(f)), Time), (at(not(completed(e1)), Time-1), at(completed(e1), Time);at(not(completed(e2)), Time-1), at(completed(e2), Time);at(not(completed(e3)), Time-1), at(completed(e3), Time))))]).
 %  "% =================================".


%; while (FC) F; G

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Workflow.e',142).
% Delta: 
 


% [time]
% !HoldsAt(Active(F),time) &
% !HoldsAt(Completed(F),time-1) &
% HoldsAt(Completed(F),time) &
% HoldsAt(Condition(FC),time) ->
% Happens(Start(F),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Workflow.e',142).
% From E: 
% 
% '->'(
%    axiom_uses(delta,Time), 
%    '->'(
%       ','(
%          holds_at(
%             not(
%                active(f)), 
%             Time), 
%          ','(
%             holds_at(
%                not(
%                   completed(f)), 
%                Time-1), 
%             ','(
%                holds_at(
%                   completed(f), 
%                   Time), 
%                holds_at(
%                   condition(fc), 
%                   Time)))), 
%       start(f))).
if axiom_uses(delta, Time)then start(f)if not active(f)at Time, not completed(f)at Time-1, completed(f)at Time, condition(fc)at Time.
 %  reactive_rule([axiom_uses(delta, Time)], [if(start(f),  (at(not(active(f)), Time), at(not(completed(f)), Time-1), at(completed(f), Time), at(condition(fc), Time)))]).
 %  "% =================================".

% Delta: 
 


% [time]
% !HoldsAt(Active(G),time) &
% !HoldsAt(Completed(F),time-1) &
% HoldsAt(Completed(F),time) &
% !HoldsAt(Condition(FC),time) ->
% Happens(Start(G),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Workflow.e',150).
% From E: 
% 
% '->'(
%    axiom_uses(delta,Time), 
%    '->'(
%       ','(
%          holds_at(
%             not(
%                active(g)), 
%             Time), 
%          ','(
%             holds_at(
%                not(
%                   completed(f)), 
%                Time-1), 
%             ','(
%                holds_at(
%                   completed(f), 
%                   Time), 
%                holds_at(
%                   not(
%                      condition(fc)), 
%                   Time)))), 
%       start(g))).
if axiom_uses(delta, Time)then start(g)if not active(g)at Time, not completed(f)at Time-1, completed(f)at Time, not condition(fc)at Time.
 %  reactive_rule([axiom_uses(delta, Time)], [if(start(g),  (at(not(active(g)), Time), at(not(completed(f)), Time-1), at(completed(f), Time), at(not(condition(fc)), Time)))]).
 %  "% =================================".

% Delta: 
 


% Happens(Start(A),0).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Workflow.e',155).
% From E: 
% 
% '->'(
%    axiom_uses(delta,Axiom_Uses), 
%    happens(
%       start(a), 
%       t+0)).
if axiom_uses(delta, _)then observe start(a)at t+0.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Workflow.e',155).

 /*  reactive_rule([axiom_uses(delta,Axiom_Uses)],
   	      [observe(at(start(a),t+0))]).
 */
 %  "% =================================".

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Workflow.e',157).
% Delta: 
 


% Happens(End(A),1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Workflow.e',157).
% From E: 
% 
% '->'(
%    axiom_uses(delta,Axiom_Uses), 
%    happens(
%       end(a), 
%       t+1)).
if axiom_uses(delta, _)then observe end(a)at t+1.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Workflow.e',157).

 /*  reactive_rule([axiom_uses(delta,Axiom_Uses)],
   	      [observe(at(end(a),t+1))]).
 */
 %  "% =================================".

% Delta: 
 


% Happens(End(B),3).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Workflow.e',157).
% From E: 
% 
% '->'(
%    axiom_uses(delta,Axiom_Uses), 
%    happens(
%       end(b), 
%       t+3)).
if axiom_uses(delta, _)then observe end(b)at t+3.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Workflow.e',157).

 /*  reactive_rule([axiom_uses(delta,Axiom_Uses)],
   	      [observe(at(end(b),t+3))]).
 */
 %  "% =================================".

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Workflow.e',159).
% Delta: 
 


% Happens(End(C1),5).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Workflow.e',159).
% From E: 
% 
% '->'(
%    axiom_uses(delta,Axiom_Uses), 
%    happens(
%       end(c1), 
%       t+5)).
if axiom_uses(delta, _)then observe end(c1)at t+5.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Workflow.e',159).

 /*  reactive_rule([axiom_uses(delta,Axiom_Uses)],
   	      [observe(at(end(c1),t+5))]).
 */
 %  "% =================================".

% Delta: 
 


% Happens(End(C2),6).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Workflow.e',159).
% From E: 
% 
% '->'(
%    axiom_uses(delta,Axiom_Uses), 
%    happens(
%       end(c2), 
%       t+6)).
if axiom_uses(delta, _)then observe end(c2)at t+6.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Workflow.e',159).

 /*  reactive_rule([axiom_uses(delta,Axiom_Uses)],
   	      [observe(at(end(c2),t+6))]).
 */
 %  "% =================================".

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Workflow.e',161).
% Delta: 
 


% Happens(End(C3),7).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Workflow.e',161).
% From E: 
% 
% '->'(
%    axiom_uses(delta,Axiom_Uses), 
%    happens(
%       end(c3), 
%       t+7)).
if axiom_uses(delta, _)then observe end(c3)at t+7.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Workflow.e',161).

 /*  reactive_rule([axiom_uses(delta,Axiom_Uses)],
   	      [observe(at(end(c3),t+7))]).
 */
 %  "% =================================".

% Delta: 
 


% Happens(End(D),9).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Workflow.e',161).
% From E: 
% 
% '->'(
%    axiom_uses(delta,Axiom_Uses), 
%    happens(
%       end(d), 
%       t+9)).
if axiom_uses(delta, _)then observe end(d)at t+9.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Workflow.e',161).

 /*  reactive_rule([axiom_uses(delta,Axiom_Uses)],
   	      [observe(at(end(d),t+9))]).
 */
 %  "% =================================".

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Workflow.e',163).
% Delta: 
 


% Happens(End(E2),11).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Workflow.e',163).
% From E: 
% 
% '->'(
%    axiom_uses(delta,Axiom_Uses), 
%    happens(
%       end(e2), 
%       t+11)).
if axiom_uses(delta, _)then observe end(e2)at t+11.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Workflow.e',163).

 /*  reactive_rule([axiom_uses(delta,Axiom_Uses)],
   	      [observe(at(end(e2),t+11))]).
 */
 %  "% =================================".

% Delta: 
 


% Happens(End(F),13).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Workflow.e',163).
% From E: 
% 
% '->'(
%    axiom_uses(delta,Axiom_Uses), 
%    happens(
%       end(f), 
%       t+13)).
if axiom_uses(delta, _)then observe end(f)at t+13.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Workflow.e',163).

 /*  reactive_rule([axiom_uses(delta,Axiom_Uses)],
   	      [observe(at(end(f),t+13))]).
 */
 %  "% =================================".

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Workflow.e',165).
% Delta: 
 


% Happens(End(F),15).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Workflow.e',165).
% From E: 
% 
% '->'(
%    axiom_uses(delta,Axiom_Uses), 
%    happens(
%       end(f), 
%       t+15)).
if axiom_uses(delta, _)then observe end(f)at t+15.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Workflow.e',165).

 /*  reactive_rule([axiom_uses(delta,Axiom_Uses)],
   	      [observe(at(end(f),t+15))]).
 */
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Workflow.e',167).
%; Gamma
% [activity]
 % !HoldsAt(Active(activity),0).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Workflow.e',169).
% From E: 
% 
% initially(
%    neg(
%       active(Activity))).
initially not active(Activity).
 %  initial_state([not(active(Activity))]).
 %  "% =================================".


% [activity]
 % !HoldsAt(Completed(activity),0).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Workflow.e',169).
% From E: 
% 
% initially(
%    neg(
%       completed(Activity))).
initially not completed(Activity).
 %  initial_state([not(completed(Activity))]).
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Workflow.e',171).
% [time]
 % time=% 14 <-> HoldsAt(Condition(FC),time).

 /*  Time=14 <->
       holds_at(condition(fc), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Workflow.e',171).
% From E: 
% 
% '->'(
%    equals(14,Time), 
%    holds_at(
%       condition(fc), 
%       Time)).
condition(fc)at Time if equals(14, Time).
 %  l_int(holds(condition(fc),Time),[equals(14,Time)]).
 %  "% =================================".
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Workflow.e',171).
% From E: 
% 
% '->'(
%    holds_at(
%       condition(fc), 
%       Time), 
%    equals(14,Time)).
if condition(fc)at Time then equals(14, Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Workflow.e',171).

 /*  reactive_rule([holds(condition(fc),Time)],
   	      [equals(14,Time)]).
 */
 %  "% =================================".


% [time]
 % !HoldsAt(Condition(E1C),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Workflow.e',171).
% From E: 
% 
% holds_at(
%    neg(
%       condition(e1c)), 
%    Time).
not condition(e1c)at Time.
 %  l_int(holds(not(condition(e1c)),Time),[]).
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Workflow.e',173).
% [time]
 % time=% 10 <-> HoldsAt(Condition(E2C),time).

 /*  Time=10 <->
       holds_at(condition(e2c), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Workflow.e',173).
% From E: 
% 
% '->'(
%    equals(10,Time), 
%    holds_at(
%       condition(e2c), 
%       Time)).
condition(e2c)at Time if equals(10, Time).
 %  l_int(holds(condition(e2c),Time),[equals(10,Time)]).
 %  "% =================================".
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Workflow.e',173).
% From E: 
% 
% '->'(
%    holds_at(
%       condition(e2c), 
%       Time), 
%    equals(10,Time)).
if condition(e2c)at Time then equals(10, Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Workflow.e',173).

 /*  reactive_rule([holds(condition(e2c),Time)],
   	      [equals(10,Time)]).
 */
 %  "% =================================".


% [time]
 % !HoldsAt(Condition(E3C),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Workflow.e',173).
% From E: 
% 
% holds_at(
%    neg(
%       condition(e3c)), 
%    Time).
not condition(e3c)at Time.
 %  l_int(holds(not(condition(e3c)),Time),[]).
 %  "% =================================".

% completion Delta Happens
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Workflow.e',175).
% From E: 
% 
% completion(delta).
completion(delta).
% From E: 
% 
% completion(happens).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Workflow.e',175).
completion(happens).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Workflow.e',178).
% range time 0 18
% From E: 
% 
% range(time,0,18).
range(time,0,18).

% range offset 1 1
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Workflow.e',178).
% From E: 
% 
% range(offset,1,1).
range(offset,1,1).
%; End of file.
% translate: ending  File: /pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Workflow.e.lps 
