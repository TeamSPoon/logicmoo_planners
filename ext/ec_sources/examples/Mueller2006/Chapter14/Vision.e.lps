:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/NetBill3.e',185).
% translate: unskipped  File: /pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Vision.e.lps 
:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(lps).
% translate: begining  File: /pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Vision.e.lps 
% Fri, 09 Oct 2020 15:14:11 GMT File: <stream>(0x5625a97d0f00)%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @inproceedings{ShanahanRandell:2004,
%;   author = "Murray Shanahan and David A. Randell",
%;   year = "2004",
%;   title = "A logic-based formulation of active visual perception",
%;   editor = "Didier Dubois and Christopher A. Welty and Mary-Anne Williams",
%;   booktitle = "\uppercase{P}roceedings of the \uppercase{N}inth \uppercase{I}nternational \uppercase{C}onference on \uppercase{P}rinciples of \uppercase{K}nowledge \uppercase{R}epresentation and \uppercase{R}easoning",
%;   pages = "64--72",
%;   address = "Menlo Park, CA",
%;   publisher = "AAAI Press",
%; }
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Vision.e',31).
% option modeldiff on
:- if(is_e_toplevel).
:- set_ec_option(modeldiff, on).
:- endif.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Vision.e',33).
% load foundations/Root.e
:- if(is_e_toplevel).
:- load_e_cond('foundations/Root.e', changed).
 %  load('/pack/logicmoo_ec/ext/ec_sources/foundations/Root.e',changed).
:- endif.

% load foundations/EC.e
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Vision.e',33).
:- if(is_e_toplevel).
:- load_e_cond('foundations/EC.e', changed).
 %  load('/pack/logicmoo_ec/ext/ec_sources/foundations/EC.e',changed).
:- endif.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Vision.e',36).
% sort object
% From E: 
% 
% sort(object).
sort(object).

% sort shape
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Vision.e',36).
% From E: 
% 
% sort(shape).
sort(shape).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Vision.e',38).
% sort aspect
% From E: 
% 
% sort(aspect).
sort(aspect).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Vision.e',40).
% object Object1
% From E: 
% 
% t(object,object1).
object(object1).

% aspect Aspect1, Aspect2, Aspect3
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Vision.e',40).
% From E: 
% 
% t(aspect,aspect1).
aspect(aspect1).
% From E: 
% 
% t(aspect,aspect2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Vision.e',40).
aspect(aspect2).
% From E: 
% 
% t(aspect,aspect3).
aspect(aspect3).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Vision.e',42).
% shape Shape1, Shape2
% From E: 
% 
% t(shape,shape1).
shape(shape1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Vision.e',42).
% From E: 
% 
% t(shape,shape2).
shape(shape2).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Vision.e',44).
% predicate Shape(object,shape)
% From E: 
% 
% predicate(
%    shape(object,shape)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Vision.e',44).
predicates([shape/2]).
% From E: 
% 
% mpred_prop(
%    shape(object,shape), 
%    predicate).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Vision.e',44).
mpred_prop(shape(object,shape),predicate).

% predicate Arc(shape,aspect,aspect)
% From E: 
% 
% predicate(
%    arc(shape,aspect,aspect)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Vision.e',44).
predicates([arc/3]).
% From E: 
% 
% mpred_prop(
%    arc(shape,aspect,aspect), 
%    predicate).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Vision.e',44).
mpred_prop(arc(shape,aspect,aspect),predicate).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Vision.e',46).
% fluent Aspect(object,aspect)
% From E: 
% 
% fluent(
%    aspect(object,aspect)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Vision.e',46).
fluents([aspect/2]).
% From E: 
% 
% mpred_prop(
%    aspect(object,aspect), 
%    fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Vision.e',46).
mpred_prop(aspect(object,aspect),fluent).

% event Change(object,aspect,aspect)
% From E: 
% 
% event(
%    change(object,aspect,aspect)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Vision.e',46).
events([change/3]).
% From E: 
% 
% mpred_prop(
%    change(object,aspect,aspect), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Vision.e',46).
mpred_prop(change(object,aspect,aspect),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Vision.e',49).
%; Sigma
% [object,aspect1,aspect2,shape,time]
% HoldsAt(Aspect(object,aspect1),time) &
% Shape(object,shape) &
% (Arc(shape,aspect1,aspect2) |
%  Arc(shape,aspect2,aspect1)) ->
% Initiates(Change(object,aspect1,aspect2),Aspect(object,aspect2),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Vision.e',51).
% From E: 
% 
% '->'(
%    ','(
%       holds_at(
%          aspect(Object,Aspect1), 
%          Time), 
%       ','(
%          shape(Object,Shape), 
%          ';'(
%             arc(Shape,Aspect1,Aspect2), 
%             arc(Shape,Aspect2,Aspect1)))), 
%    initiates(
%       change(Object,Aspect1,Aspect2), 
%       aspect(Object,Aspect2), 
%       Time)).
change(Object, Aspect1, Aspect2)initiates aspect(Object, Aspect2)at Time if aspect(Object, Aspect1)at Time, shape(Object, Shape), (arc(Shape, Aspect1, Aspect2);arc(Shape, Aspect2, Aspect1)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Vision.e',51).

 /*   initiated(happens(change(Object, Aspect1, Aspect2),
                        Time_From,
                        Time_Until),
                at(aspect(Object, Aspect2), Time),
                [ holds(aspect(Object, Aspect1), Time),
                  shape(Object, Shape),
                   (arc(Shape, Aspect1, Aspect2);arc(Shape, Aspect2, Aspect1))
                ]).
 */
 %  "% =================================".


% [object,aspect1,aspect2,shape,time]
% HoldsAt(Aspect(object,aspect1),time) &
% Shape(object,shape) &
% (Arc(shape,aspect1,aspect2) |
%  Arc(shape,aspect2,aspect1)) ->
% Terminates(Change(object,aspect1,aspect2),Aspect(object,aspect1),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Vision.e',59).
% From E: 
% 
% '->'(
%    ','(
%       holds_at(
%          aspect(Object,Aspect1), 
%          Time), 
%       ','(
%          shape(Object,Shape), 
%          ';'(
%             arc(Shape,Aspect1,Aspect2), 
%             arc(Shape,Aspect2,Aspect1)))), 
%    terminates(
%       change(Object,Aspect1,Aspect2), 
%       aspect(Object,Aspect1), 
%       Time)).
change(Object, Aspect1, Aspect2)terminates aspect(Object, Aspect1)at Time if aspect(Object, Aspect1)at Time, shape(Object, Shape), (arc(Shape, Aspect1, Aspect2);arc(Shape, Aspect2, Aspect1)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Vision.e',59).

 /*   terminated(happens(change(Object, Aspect1, Aspect2),
                         Time_From,
                         Time_Until),
                 at(aspect(Object, Aspect1), Time),
                 [ holds(aspect(Object, Aspect1), Time),
                   shape(Object, Shape),
                    (arc(Shape, Aspect1, Aspect2);arc(Shape, Aspect2, Aspect1))
                 ]).
 */
 %  "% =================================".


%; preconditions (added)
% [object,aspect1,aspect2,time]
% Happens(Change(object,aspect1,aspect2),time) ->
% HoldsAt(Aspect(object,aspect1),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Vision.e',67).
% From E: 
% 
% '->'(
%    change(Object,Aspect1,Aspect2), 
%    holds_at(
%       aspect(Object,Aspect1), 
%       Time)).
aspect(Object, Aspect1)at Time if change(Object, Aspect1, Aspect2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Vision.e',67).

 /*  l_int(holds(aspect(Object,Aspect1),Time),
         [ happens(change(Object,Aspect1,Aspect2),
   		Time,
   		Time)
         ]).
 */
 %  "% =================================".


% [object,aspect1,aspect2,aspect3,time]
% Happens(Change(object,aspect1,aspect2),time) &
% Happens(Change(object,aspect1,aspect3),time) ->
% aspect2=aspect3.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Vision.e',72).
% From E: 
% 
% '->'(
%    ','(
%       change(Object,Aspect1,Aspect2), 
%       change(Object,Aspect1,Aspect3)), 
%    equals(Aspect2,Aspect3)).
if change(Object, Aspect1, Aspect2), change(Object, Aspect1, Aspect3)then equals(Aspect2, Aspect3).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Vision.e',72).

 /*  reactive_rule([ happens(change(Object,
   			       Aspect1,
   			       Aspect2),
   			Time_From,
   			Time_Until),
   		happens(change(Object,
   			       Aspect1,
   			       Aspect3),
   			Time_Until,
   			Time_Until7)
   	      ],
   	      [equals(Aspect2,Aspect3)]).
 */
 %  "% =================================".


%; Psi
% [object,shape1,shape2]
% Shape(object,shape1) &
% Shape(object,shape2) ->
% shape1=shape2.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Vision.e',78).
% From E: 
% 
% '->'(
%    ','(
%       shape(Object,Shape1), 
%       shape(Object,Shape2)), 
%    equals(Shape1,Shape2)).
if shape(Object, Shape1), shape(Object, Shape2)then equals(Shape1, Shape2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Vision.e',78).

 /*  reactive_rule([ shape(Object,Shape1),
   		shape(Object,Shape2)
   	      ],
   	      [equals(Shape1,Shape2)]).
 */
 %  "% =================================".


% [object,aspect1,aspect2,time]
% HoldsAt(Aspect(object,aspect1),time) &
% HoldsAt(Aspect(object,aspect2),time) ->
% aspect1=aspect2.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Vision.e',84).
% From E: 
% 
% '->'(
%    ','(
%       holds_at(
%          aspect(Object,Aspect1), 
%          Time), 
%       holds_at(
%          aspect(Object,Aspect2), 
%          Time)), 
%    equals(Aspect1,Aspect2)).
if aspect(Object, Aspect1)at Time, aspect(Object, Aspect2)at Time then equals(Aspect1, Aspect2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Vision.e',84).

 /*  reactive_rule([ holds(aspect(Object,Aspect1),Time),
   		holds(aspect(Object,Aspect2),Time)
   	      ],
   	      [equals(Aspect1,Aspect2)]).
 */
 %  "% =================================".


% [aspect1,aspect2]
% Arc(Shape1,aspect1,aspect2) <->
% (aspect1=Aspect1 & aspect2=Aspect2).
 %  <->(arc(shape1, Aspect1, Aspect2),  (Aspect1=aspect1, Aspect2=aspect2)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Vision.e',89).
% From E: 
% 
% '->'(
%    arc(shape1,Aspect1,Aspect2), 
%    ','(
%       equals(aspect1,Aspect1), 
%       equals(aspect2,Aspect2))).
if arc(shape1, Aspect1, Aspect2)then equals(aspect1, Aspect1), equals(aspect2, Aspect2).

 /*  reactive_rule([arc(shape1,Aspect1,Aspect2)],
   	      [ equals(aspect1,Aspect1),
   		equals(aspect2,Aspect2)
   	      ]).
 */
 %  "% =================================".
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Vision.e',89).
% From E: 
% 
% '->'(
%    ','(
%       equals(aspect1,Aspect1), 
%       equals(aspect2,Aspect2)), 
%    arc(shape1,Aspect1,Aspect2)).
if equals(aspect1, Aspect1), equals(aspect2, Aspect2)then arc(shape1, Aspect1, Aspect2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Vision.e',89).

 /*  reactive_rule([ equals(aspect1,Aspect1),
   		equals(aspect2,Aspect2)
   	      ],
   	      [arc(shape1,Aspect1,Aspect2)]).
 */
 %  "% =================================".


% [aspect1,aspect2]
% Arc(Shape2,aspect1,aspect2) <->
% ((aspect1=Aspect1 & aspect2=Aspect3) |
%  (aspect1=Aspect3 & aspect2=Aspect2)).
 %  <->(arc(shape2, Aspect1, Aspect2),  (Aspect1=aspect1, Aspect2=aspect3;Aspect1=aspect3, Aspect2=aspect2)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Vision.e',93).
% From E: 
% 
% '->'(
%    arc(shape2,Aspect1,Aspect2), 
%    ';'(
%       ','(
%          equals(aspect1,Aspect1), 
%          equals(aspect3,Aspect2)), 
%       ','(
%          equals(aspect3,Aspect1), 
%          equals(aspect2,Aspect2)))).
if arc(shape2, Aspect1, Aspect2)then equals(aspect1, Aspect1), equals(aspect3, Aspect2);equals(aspect3, Aspect1), equals(aspect2, Aspect2).
 %  reactive_rule([arc(shape2, Aspect1, Aspect2)], [(equals(aspect1, Aspect1), equals(aspect3, Aspect2);equals(aspect3, Aspect1), equals(aspect2, Aspect2))]).
 %  "% =================================".
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Vision.e',93).
% From E: 
% 
% '->'(
%    ';'(
%       ','(
%          equals(aspect1,Aspect1), 
%          equals(aspect3,Aspect2)), 
%       ','(
%          equals(aspect3,Aspect1), 
%          equals(aspect2,Aspect2))), 
%    arc(shape2,Aspect1,Aspect2)).
if equals(aspect1, Aspect1), equals(aspect3, Aspect2);equals(aspect3, Aspect1), equals(aspect2, Aspect2)then arc(shape2, Aspect1, Aspect2).
 %  reactive_rule([(equals(aspect1, Aspect1), equals(aspect3, Aspect2);equals(aspect3, Aspect1), equals(aspect2, Aspect2))], [arc(shape2, Aspect1, Aspect2)]).
 %  "% =================================".


%; Gamma


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Vision.e',99).
% HoldsAt(Aspect(Object1,Aspect1),0).
% From E: 
% 
% initially(
%    aspect(object1,aspect1)).
initially aspect(object1, aspect1).
 %  initial_state([aspect(object1,aspect1)]).
 %  "% =================================".


% HoldsAt(Aspect(Object1,Aspect2),1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Vision.e',99).
% From E: 
% 
% holds_at(
%    aspect(object1,aspect2), 
%    start+1).
aspect(object1, aspect2)at start+1.
 %  l_int(holds(aspect(object1,aspect2),start+1),[]).
 %  "% =================================".


%;completion Delta Happens

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Vision.e',104).
% range time 0 1
% From E: 
% 
% range(time,0,1).
range(time,0,1).

% range offset 1 1
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Vision.e',104).
% From E: 
% 
% range(offset,1,1).
range(offset,1,1).
%; End of file.
% translate: ending  File: /pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter14/Vision.e.lps 
