:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter10/OneScreen.e',110).
% translate: unskipped  File: /pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter10/TwoScreens.e.lps 
:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(lps).
% translate: begining  File: /pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter10/TwoScreens.e.lps 
% Fri, 09 Oct 2020 15:13:45 GMT File: <stream>(0x5625a9753900)%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @phdthesis{Cassimatis:2002,
%;   author = "Nicholas L. Cassimatis",
%;   year = "2002",
%;   title = "Polyscheme: A Cognitive Architecture for Integrating Multiple Representation and Inference Schemes",
%;   address = "Cambridge, MA",
%;   school = "Program in Media Arts and Sciences, School of Architecture and Planning, Massachusetts Institute of Technology",
%; }
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter10/TwoScreens.e',28).
% load foundations/Root.e
:- if(is_e_toplevel).
:- load_e_cond('foundations/Root.e', changed).
 %  load('/pack/logicmoo_ec/ext/ec_sources/foundations/Root.e',changed).
:- endif.

% load foundations/EC.e
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter10/TwoScreens.e',28).
:- if(is_e_toplevel).
:- load_e_cond('foundations/EC.e', changed).
 %  load('/pack/logicmoo_ec/ext/ec_sources/foundations/EC.e',changed).
:- endif.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter10/TwoScreens.e',31).
% sort object
% From E: 
% 
% sort(object).
sort(object).

% sort location
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter10/TwoScreens.e',31).
% From E: 
% 
% sort(location).
sort(location).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter10/TwoScreens.e',34).
% object O1, O2
% From E: 
% 
% t(object,o1).
object(o1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter10/TwoScreens.e',34).
% From E: 
% 
% t(object,o2).
object(o2).

% location L1, L2, L3, L4, L5
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter10/TwoScreens.e',34).
% From E: 
% 
% t(location,l1).
location(l1).
% From E: 
% 
% t(location,l2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter10/TwoScreens.e',34).
location(l2).
% From E: 
% 
% t(location,l3).
location(l3).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter10/TwoScreens.e',34).
% From E: 
% 
% t(location,l4).
location(l4).
% From E: 
% 
% t(location,l5).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter10/TwoScreens.e',34).
location(l5).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter10/TwoScreens.e',37).
% predicate Adjacent(location,location)
% From E: 
% 
% predicate(
%    adjacent(location,location)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter10/TwoScreens.e',37).
predicates([adjacent/2]).
% From E: 
% 
% mpred_prop(
%    adjacent(location,location), 
%    predicate).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter10/TwoScreens.e',37).
mpred_prop(adjacent(location,location),predicate).

% predicate Equal(object,object)
% From E: 
% 
% predicate(
%    equal(object,object)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter10/TwoScreens.e',37).
predicates([equal/2]).
% From E: 
% 
% mpred_prop(
%    equal(object,object), 
%    predicate).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter10/TwoScreens.e',37).
mpred_prop(equal(object,object),predicate).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter10/TwoScreens.e',40).
% fluent At(object,location)
% From E: 
% 
% fluent(
%    at(object,location)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter10/TwoScreens.e',40).
fluents([loc_at/2]).
% From E: 
% 
% mpred_prop(
%    at(object,location), 
%    fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter10/TwoScreens.e',40).
mpred_prop(loc_at(object,location),fluent).

% event Move(object,location,location)
% From E: 
% 
% event(
%    move(object,location,location)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter10/TwoScreens.e',40).
events([move/3]).
% From E: 
% 
% mpred_prop(
%    move(object,location,location), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter10/TwoScreens.e',40).
mpred_prop(move(object,location,location),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter10/TwoScreens.e',43).
%; Sigma
% [object,location1,location2,time]
% HoldsAt(At(object,location1),time) &
% Adjacent(location1,location2) ->
% Initiates(Move(object,location1,location2),At(object,location2),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter10/TwoScreens.e',45).
% From E: 
% 
% '->'(
%    ','(
%       holds_at(
%          at(Object,Location1), 
%          Time), 
%       adjacent(Location1,Location2)), 
%    initiates(
%       move(Object,Location1,Location2), 
%       at(Object,Location2), 
%       Time)).
move(Object, Location1, Location2)initiates loc_at(Object, Location2)at Time if loc_at(Object, Location1)at Time, adjacent(Location1, Location2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter10/TwoScreens.e',45).

 /*  initiated(happens(move(Object,Location1,Location2),
   		  Time_From,
   		  Time_Until),
   	  at(loc_at(Object,Location2),Time),
   	  [ holds(loc_at(Object,Location1),Time),
   	    adjacent(Location1,Location2)
   	  ]).
 */
 %  "% =================================".


% [object,location1,location2,time]
% HoldsAt(At(object,location1),time) &
% Adjacent(location1,location2) ->
% Terminates(Move(object,location1,location2),At(object,location1),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter10/TwoScreens.e',51).
% From E: 
% 
% '->'(
%    ','(
%       holds_at(
%          at(Object,Location1), 
%          Time), 
%       adjacent(Location1,Location2)), 
%    terminates(
%       move(Object,Location1,Location2), 
%       at(Object,Location1), 
%       Time)).
move(Object, Location1, Location2)terminates loc_at(Object, Location1)at Time if loc_at(Object, Location1)at Time, adjacent(Location1, Location2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter10/TwoScreens.e',51).

 /*  terminated(happens(move(Object,Location1,Location2),
   		   Time_From,
   		   Time_Until),
   	   at(loc_at(Object,Location1),Time),
   	   [ holds(loc_at(Object,Location1),Time),
   	     adjacent(Location1,Location2)
   	   ]).
 */
 %  "% =================================".


%; Psi
% [object,location1,location2,time]
% HoldsAt(At(object,location1),time) &
% HoldsAt(At(object,location2),time) ->
% location1=location2.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter10/TwoScreens.e',57).
% From E: 
% 
% '->'(
%    ','(
%       holds_at(
%          at(Object,Location1), 
%          Time), 
%       holds_at(
%          at(Object,Location2), 
%          Time)), 
%    equals(Location1,Location2)).
if loc_at(Object, Location1)at Time, loc_at(Object, Location2)at Time then equals(Location1, Location2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter10/TwoScreens.e',57).

 /*  reactive_rule([ holds(loc_at(Object,Location1),Time),
   		holds(loc_at(Object,Location2),Time)
   	      ],
   	      [equals(Location1,Location2)]).
 */
 %  "% =================================".


% [object,time]
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter10/TwoScreens.e',63).
% {location} % HoldsAt(At(object,location),time).
% From E: 
% 
% ','(
%    ex(
%       [Location]), 
%    holds_at(
%       at(Object,Location), 
%       Time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter10/TwoScreens.e',63).
ex([Location]),
at(loc_at(Object, Location), Time).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter10/TwoScreens.e',65).
% [object1,object2,location,time]
% HoldsAt(At(object1,location),time) &
% HoldsAt(At(object2,location),time) ->
% Equal(object1,object2).
% From E: 
% 
% '->'(
%    ','(
%       holds_at(
%          at(Object1,Location), 
%          Time), 
%       holds_at(
%          at(Object2,Location), 
%          Time)), 
%    equal(Object1,Object2)).
if loc_at(Object1, Location)at Time, loc_at(Object2, Location)at Time then equal(Object1, Object2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter10/TwoScreens.e',65).

 /*  reactive_rule([ holds(loc_at(Object1,Location),Time),
   		holds(loc_at(Object2,Location),Time)
   	      ],
   	      [equal(Object1,Object2)]).
 */
 %  "% =================================".


% [location1, location2]
% Adjacent(location1,location2) <->
% Adjacent(location2,location1).

 /*  adjacent(Location1, Location2) <->
       adjacent(Location2, Location1).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter10/TwoScreens.e',71).
% From E: 
% 
% '->'(
%    adjacent(Location1,Location2), 
%    adjacent(Location2,Location1)).
if adjacent(Location1, Location2)then adjacent(Location2, Location1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter10/TwoScreens.e',71).

 /*  reactive_rule([adjacent(Location1,Location2)],
   	      [adjacent(Location2,Location1)]).
 */
 %  "% =================================".
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter10/TwoScreens.e',71).
% From E: 
% 
% '->'(
%    adjacent(Location2,Location1), 
%    adjacent(Location1,Location2)).
if adjacent(Location2, Location1)then adjacent(Location1, Location2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter10/TwoScreens.e',71).

 /*  reactive_rule([adjacent(Location2,Location1)],
   	      [adjacent(Location1,Location2)]).
 */
 %  "% =================================".


% [object1,object2]
% Equal(object1,object2) <->
% Equal(object2,object1).

 /*  equal(Object1, Object2) <->
       equal(Object2, Object1).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter10/TwoScreens.e',75).
% From E: 
% 
% '->'(
%    equal(Object1,Object2), 
%    equal(Object2,Object1)).
if equal(Object1, Object2)then equal(Object2, Object1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter10/TwoScreens.e',75).

 /*  reactive_rule([equal(Object1,Object2)],
   	      [equal(Object2,Object1)]).
 */
 %  "% =================================".
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter10/TwoScreens.e',75).
% From E: 
% 
% '->'(
%    equal(Object2,Object1), 
%    equal(Object1,Object2)).
if equal(Object2, Object1)then equal(Object1, Object2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter10/TwoScreens.e',75).

 /*  reactive_rule([equal(Object2,Object1)],
   	      [equal(Object1,Object2)]).
 */
 %  "% =================================".


%; Gamma
% [location1,location2]
% Adjacent(location1,location2) <->
% (location1=L1 & location2=L2) |
% (location1=L2 & location2=L1) |
% (location1=L2 & location2=L3) |
% (location1=L3 & location2=L2) |
% (location1=L3 & location2=L4) |
% (location1=L4 & location2=L3) |
% (location1=L4 & location2=L5) |
% (location1=L5 & location2=L4).
 %  <->(adjacent(Location1, Location2),  (Location1=l1, Location2=l2;Location1=l2, Location2=l1;Location1=l2, Location2=l3;Location1=l3, Location2=l2;Location1=l3, Location2=l4;Location1=l4, Location2=l3;Location1=l4, Location2=l5;Location1=l5, Location2=l4)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter10/TwoScreens.e',80).
% From E: 
% 
% '->'(
%    adjacent(Location1,Location2), 
%    ';'(
%       ','(
%          equals(l1,Location1), 
%          equals(l2,Location2)), 
%       ';'(
%          ','(
%             equals(l2,Location1), 
%             equals(l1,Location2)), 
%          ';'(
%             ','(
%                equals(l2,Location1), 
%                equals(l3,Location2)), 
%             ';'(
%                ','(
%                   equals(l3,Location1), 
%                   equals(l2,Location2)), 
%                ';'(
%                   ','(
%                      equals(l3,Location1), 
%                      equals(l4,Location2)), 
%                   ';'(
%                      ','(
%                         equals(l4,Location1), 
%                         equals(l3,Location2)), 
%                      ';'(
%                         ','(
%                            equals(l4,Location1), 
%                            equals(l5,Location2)), 
%                         ','(
%                            equals(l5,Location1), 
%                            equals(l4,Location2)))))))))).
if adjacent(Location1, Location2)then equals(l1, Location1), equals(l2, Location2);equals(l2, Location1), equals(l1, Location2);equals(l2, Location1), equals(l3, Location2);equals(l3, Location1), equals(l2, Location2);equals(l3, Location1), equals(l4, Location2);equals(l4, Location1), equals(l3, Location2);equals(l4, Location1), equals(l5, Location2);equals(l5, Location1), equals(l4, Location2).
 %  reactive_rule([adjacent(Location1, Location2)], [(equals(l1, Location1), equals(l2, Location2);equals(l2, Location1), equals(l1, Location2);equals(l2, Location1), equals(l3, Location2);equals(l3, Location1), equals(l2, Location2);equals(l3, Location1), equals(l4, Location2);equals(l4, Location1), equals(l3, Location2);equals(l4, Location1), equals(l5, Location2);equals(l5, Location1), equals(l4, Location2))]).
 %  "% =================================".
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter10/TwoScreens.e',80).
% From E: 
% 
% '->'(
%    ';'(
%       ','(
%          equals(l1,Location1), 
%          equals(l2,Location2)), 
%       ';'(
%          ','(
%             equals(l2,Location1), 
%             equals(l1,Location2)), 
%          ';'(
%             ','(
%                equals(l2,Location1), 
%                equals(l3,Location2)), 
%             ';'(
%                ','(
%                   equals(l3,Location1), 
%                   equals(l2,Location2)), 
%                ';'(
%                   ','(
%                      equals(l3,Location1), 
%                      equals(l4,Location2)), 
%                   ';'(
%                      ','(
%                         equals(l4,Location1), 
%                         equals(l3,Location2)), 
%                      ';'(
%                         ','(
%                            equals(l4,Location1), 
%                            equals(l5,Location2)), 
%                         ','(
%                            equals(l5,Location1), 
%                            equals(l4,Location2))))))))), 
%    adjacent(Location1,Location2)).
if equals(l1, Location1), equals(l2, Location2);equals(l2, Location1), equals(l1, Location2);equals(l2, Location1), equals(l3, Location2);equals(l3, Location1), equals(l2, Location2);equals(l3, Location1), equals(l4, Location2);equals(l4, Location1), equals(l3, Location2);equals(l4, Location1), equals(l5, Location2);equals(l5, Location1), equals(l4, Location2)then adjacent(Location1, Location2).
 %  reactive_rule([(equals(l1, Location1), equals(l2, Location2);equals(l2, Location1), equals(l1, Location2);equals(l2, Location1), equals(l3, Location2);equals(l3, Location1), equals(l2, Location2);equals(l3, Location1), equals(l4, Location2);equals(l4, Location1), equals(l3, Location2);equals(l4, Location1), equals(l5, Location2);equals(l5, Location1), equals(l4, Location2))], [adjacent(Location1, Location2)]).
 %  "% =================================".


% HoldsAt(At(O1,L1),0).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter10/TwoScreens.e',90).
% From E: 
% 
% initially(
%    at(o1,l1)).
initially loc_at(o1, l1).
 %  initial_state([loc_at(o1,l1)]).
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter10/TwoScreens.e',92).
% [object]
 % !HoldsAt(At(object,L5),0).
% From E: 
% 
% initially(
%    neg(
%       at(Object,l5))).
initially not loc_at(Object, l5).
 %  initial_state([not(loc_at(Object,l5))]).
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter10/TwoScreens.e',94).
% HoldsAt(At(O2,L5),4).
% From E: 
% 
% holds_at(
%    at(o2,l5), 
%    start+4).
loc_at(o2, l5)at start+4.
 %  l_int(holds(loc_at(o2,l5),start+4),[]).
 %  "% =================================".


% [object]
 % !HoldsAt(At(object,L1),4).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter10/TwoScreens.e',94).
% From E: 
% 
% holds_at(
%    neg(
%       at(Object,l1)), 
%    start+4).
not loc_at(Object, l1)at start+4.
 %  l_int(holds(not(loc_at(Object,l1)),start+4),[]).
 %  "% =================================".


% [object,time]
 % !HoldsAt(At(object,L3),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter10/TwoScreens.e',96).
% From E: 
% 
% holds_at(
%    neg(
%       at(Object,l3)), 
%    Time).
not loc_at(Object, l3)at Time.
 %  l_int(holds(not(loc_at(Object,l3)),Time),[]).
 %  "% =================================".


%; ADDED:
% [object,location1,location2,time]
% Happens(Move(object,location1,location2),time) ->
% HoldsAt(At(object,location1),time) &
% Adjacent(location1,location2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter10/TwoScreens.e',100).
% From E: 
% 
% '->'(
%    move(Object,Location1,Location2), 
%    ','(
%       holds_at(
%          at(Object,Location1), 
%          Time), 
%       adjacent(Location1,Location2))).
if move(Object, Location1, Location2)then loc_at(Object, Location1)at Time, adjacent(Location1, Location2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter10/TwoScreens.e',100).

 /*  reactive_rule([ happens(move(Object,
   			     Location1,
   			     Location2),
   			Time_From,
   			Time_Until)
   	      ],
   	      [ holds(loc_at(Object,Location1),Time),
   		adjacent(Location1,Location2)
   	      ]).
 */
 %  "% =================================".


% [object1,object2,location1,location2,time]
% Equal(object1,object2) &
% Happens(Move(object1,location1,location2),time) ->
% Happens(Move(object2,location1,location2),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter10/TwoScreens.e',106).
% From E: 
% 
% '->'(
%    ','(
%       equal(Object1,Object2), 
%       move(Object1,Location1,Location2)), 
%    move(Object2,Location1,Location2)).
move(Object2, Location1, Location2)if equal(Object1, Object2), move(Object1, Location1, Location2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter10/TwoScreens.e',106).

 /*  l_events(happens(move(Object2,Location1,Location2),
   		 Time_From,
   		 Time_Until),
   	 [ equal(Object1,Object2),
   	   happens(move(Object1,Location1,Location2),
   		   Time_From,
   		   Time_Until)
   	 ]).
 */
 %  "% =================================".


%; entailed: !Equal(O1,O2).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter10/TwoScreens.e',112).
% range time 0 4
% From E: 
% 
% range(time,0,4).
range(time,0,4).

% range offset 1 1
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter10/TwoScreens.e',112).
% From E: 
% 
% range(offset,1,1).
range(offset,1,1).
%; End of file.
% translate: ending  File: /pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Chapter10/TwoScreens.e.lps 
