:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/FrankEtAl2003/Story1.e',45).
:- call_pel_directive(translate(unskipped,
                                '/pack/logicmoo_ec/ext/ec_sources/examples/GiunchigliaEtAl2004/MonkeyBananas.pel')).
:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(ecalc).
:- call_pel_directive(translate(begining,
                                '/pack/logicmoo_ec/ext/ec_sources/examples/GiunchigliaEtAl2004/MonkeyBananas.pel')).
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{Giunchiglia:2004,
%;   author = "Enrico Giunchiglia and Joohyung Lee and Vladimir Lifschitz and Norman C. McCain and Hudson Turner",
%;   year = "2004",
%;   title = "Nonmonotonic causal theories",
%;   journal = "Artificial Intelligence",
%;   volume = "153",
%;   pages = "49--104",
%; }
%;

% sort object
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/GiunchigliaEtAl2004/MonkeyBananas.e',21).
sort(object).

% sort location
sort(location).

% object Monkey, Bananas, Box
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/GiunchigliaEtAl2004/MonkeyBananas.e',24).
t(object,monkey).
t(object,bananas).
t(object,box).

% location L1, L2, L3
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/GiunchigliaEtAl2004/MonkeyBananas.e',24).
t(location,l1).
t(location,l2).
t(location,l3).

% fluent At(object,location)
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/GiunchigliaEtAl2004/MonkeyBananas.e',27).
fluent(at_loc(object,location)).

% fluent OnBox()
fluent(onBox()).

% fluent HasBananas()
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/GiunchigliaEtAl2004/MonkeyBananas.e',29).
fluent(hasBananas()).

% event Walk(location)
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/GiunchigliaEtAl2004/MonkeyBananas.e',31).
event(walk(location)).

% event PushBox(location)
event(pushBox(location)).

% event ClimbOn()
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/GiunchigliaEtAl2004/MonkeyBananas.e',33).
event(climbOn()).

% event ClimbOff()
event(climbOff()).

% event GraspBananas()
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/GiunchigliaEtAl2004/MonkeyBananas.e',35).
event(graspBananas()).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/GiunchigliaEtAl2004/MonkeyBananas.e',37).
% [object,location1,location2,time]
% HoldsAt(At(object,location1),time) &
% HoldsAt(At(object,location2),time) ->
% location1=location2.
holds_at(at_loc(Object, Location1), Time), holds_at(at_loc(Object, Location2), Time) ->
    Location1=Location2.


% [object,location,time]
% object=% Monkey ->
% Initiates(Walk(location),At(object,location),time).
Object=monkey ->
    initiates_at(walk(Location),
                 at_loc(Object, Location),
                 Time).


% [object,location1,location2,time]
% object=% Monkey &
% HoldsAt(At(object,location1),time) ->
% Terminates(Walk(location2),At(object,location1),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/GiunchigliaEtAl2004/MonkeyBananas.e',47).
Object=monkey, holds_at(at_loc(Object, Location1), Time) ->
    terminates_at(walk(Location2),
                  at_loc(Object, Location1),
                  Time).


% [location,time]
% Happens(Walk(location),time) ->
% !HoldsAt(At(Monkey,location),time) &
% !HoldsAt(OnBox(),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/GiunchigliaEtAl2004/MonkeyBananas.e',52).
happens_at(walk(Location), Time) ->
    holds_at(not(at_loc(monkey, Location)), Time),
    holds_at(not(onBox()), Time).


% [location,time]
% HoldsAt(HasBananas(),time) &
% HoldsAt(At(Monkey,location),time) ->
% HoldsAt(At(Bananas,location),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/GiunchigliaEtAl2004/MonkeyBananas.e',57).
holds_at(hasBananas(), Time), holds_at(at_loc(monkey, Location), Time) ->
    holds_at(at_loc(bananas, Location), Time).


% [object,location,time]
% object=% Box | object=Monkey ->
% Initiates(PushBox(location),At(object,location),time).
Object=box;Object=monkey ->
    initiates_at(pushBox(Location),
                 at_loc(Object, Location),
                 Time).


% [object,location1,location2,time]
% (object=Box | object=Monkey) &
% HoldsAt(At(object,location1),time) ->
% Terminates(PushBox(location2),At(object,location1),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/GiunchigliaEtAl2004/MonkeyBananas.e',66).
(Object=box;Object=monkey), holds_at(at_loc(Object, Location1), Time) ->
    terminates_at(pushBox(Location2),
                  at_loc(Object, Location1),
                  Time).


% [location,time]
% Happens(PushBox(location),time) ->
% ({location1}
%   HoldsAt(At(Box,location1),time) &
%   HoldsAt(At(Monkey,location1),time)) &
% !HoldsAt(At(Monkey,location),time) &
% !HoldsAt(OnBox(),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/GiunchigliaEtAl2004/MonkeyBananas.e',71).
happens_at(pushBox(Location), Time) ->
    exists([Location1],
            (holds_at(at_loc(box, Location1), Time), holds_at(at_loc(monkey, Location1), Time))),
    holds_at(not(at_loc(monkey, Location)), Time),
    holds_at(not(onBox()), Time).


% [time]
 % Initiates(ClimbOn(),OnBox(),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/GiunchigliaEtAl2004/MonkeyBananas.e',77).
initiates_at(climbOn(),onBox(),Time).


% [time]
% Happens(ClimbOn(),time) ->
% !HoldsAt(OnBox(),time).
happens_at(climbOn(), Time) ->
    holds_at(not(onBox()), Time).


% [time]
 % Terminates(ClimbOff(),OnBox(),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/GiunchigliaEtAl2004/MonkeyBananas.e',83).
terminates_at(climbOff(),onBox(),Time).


% [time]
% Happens(ClimbOff(),time) ->
% HoldsAt(OnBox(),time).
happens_at(climbOff(), Time) ->
    holds_at(onBox(), Time).


% [time]
 % Initiates(GraspBananas(),HasBananas(),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/GiunchigliaEtAl2004/MonkeyBananas.e',89).
initiates_at(graspBananas(),hasBananas(),Time).


% [object,location,time]
% object=% Bananas ->
% Releases(GraspBananas(),At(object,location),time).
Object=bananas ->
    releases_at(graspBananas(), at_loc(Object, Location), Time).


% [time]
% Happens(GraspBananas(),time) ->
% ({location1}
%   HoldsAt(At(Bananas,location1),time) &
%   HoldsAt(At(Monkey,location1),time)) &
% HoldsAt(OnBox(),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/GiunchigliaEtAl2004/MonkeyBananas.e',97).
happens_at(graspBananas(), Time) ->
    exists([Location1],
            (holds_at(at_loc(bananas, Location1), Time), holds_at(at_loc(monkey, Location1), Time))),
    holds_at(onBox(), Time).


% [time]
% HoldsAt(OnBox(),time) ->
% {location1}%  HoldsAt(At(Box,location1),time) &
%             HoldsAt(At(Monkey,location1),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/GiunchigliaEtAl2004/MonkeyBananas.e',104).
exists([Location1],  (holds_at(onBox(), Time)->holds_at(at_loc(box, Location1), Time), holds_at(at_loc(monkey, Location1), Time))).


%; End of file.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/GiunchigliaEtAl2004/MonkeyBananas.e',107).
:- call_pel_directive(translate(ending,
                                '/pack/logicmoo_ec/ext/ec_sources/examples/GiunchigliaEtAl2004/MonkeyBananas.pel')).
