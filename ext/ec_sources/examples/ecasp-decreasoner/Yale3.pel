:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp-decreasoner/ThielscherCircuit40.e',94).
:- call_pel_directive(translate(unskipped,
                                '/pack/logicmoo_ec/ext/ec_sources/examples/ecasp-decreasoner/Yale3.pel')).
:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(ecalc).
:- call_pel_directive(translate(begining,
                                '/pack/logicmoo_ec/ext/ec_sources/examples/ecasp-decreasoner/Yale3.pel')).
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{HanksMcDermott:1987,
%;   author = "Steve Hanks and Drew V. McDermott",
%;   year = "1987",
%;   title = "Nonmonotonic logic and temporal projection",
%;   journal = "Artificial Intelligence",
%;   volume = "33",
%;   number = "3",
%;   pages = "379--412",
%; }
%;
%; \fullciteA[pp. 322--323]{Shanahan:1997}
%;
%; @book{Shanahan:1997,
%;   author = "Murray Shanahan",
%;   year = "1997",
%;   title = "Solving the Frame Problem",
%;   address = "Cambridge, MA",
%;   publisher = "MIT Press",
%; }
%;
%; deduction
%;
%; modifications from Shanahan's formulation:
%; InitiallyP -> HoldsAt
%; timestamps
%; added [time] Terminates(Shoot(),Loaded(),time).
%;

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp-decreasoner/Yale3.e',39).
% option showpred off
:- call_pel_directive(option(showpred, off)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp-decreasoner/Yale3.e',41).
% load foundations/Root.e
:- call_pel_directive(load('foundations/Root.e')).

% load foundations/EC.e
:- call_pel_directive(load('foundations/EC.e')).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp-decreasoner/Yale3.e',44).
% event Load()
event(load()).

% event Shoot()
event(shoot()).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp-decreasoner/Yale3.e',46).
% event Sneeze()
event(sneeze()).

% fluent Loaded()
fluent(loaded()).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp-decreasoner/Yale3.e',48).
% fluent Alive()
fluent(alive()).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp-decreasoner/Yale3.e',50).
% [time]
 % Initiates(Load(),Loaded(),time).
initiates_at(load(),loaded(),Time).


% [time]
 % HoldsAt(Loaded(),time) -> Terminates(Shoot(),Alive(),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp-decreasoner/Yale3.e',50).
holds_at(loaded(), Time) ->
    terminates_at(shoot(), alive(), Time).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp-decreasoner/Yale3.e',52).
% [time]
 % Terminates(Shoot(),Loaded(),time).
terminates_at(shoot(),loaded(),Time).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp-decreasoner/Yale3.e',54).
% HoldsAt(Alive(),0).
holds_at(alive(),0).


% !HoldsAt(Loaded(),0).
holds_at(not(loaded()),0).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp-decreasoner/Yale3.e',56).
% Happens(Load(),0).
happens_at(load(),0).


% Happens(Sneeze(),1).
happens_at(sneeze(),1).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp-decreasoner/Yale3.e',58).
% Happens(Shoot(),2).
happens_at(shoot(),2).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp-decreasoner/Yale3.e',60).
% completion Happens
:- call_pel_directive(completion(happens_at)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp-decreasoner/Yale3.e',62).
% range time 0 3
:- call_pel_directive(range(time, 0, 3)).

% range offset 1 1
:- call_pel_directive(range(offset, 1, 1)).
%; End of file.
:- call_pel_directive(translate(ending,
                                '/pack/logicmoo_ec/ext/ec_sources/examples/ecasp-decreasoner/Yale3.pel')).
