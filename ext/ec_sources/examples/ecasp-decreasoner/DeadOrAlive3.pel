:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(pfc).
% Wed, 01 Apr 2020 20:00:42 GMT
% From ../decreasoner/DeadOrAlive3.pel:4
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/decreasoner/CoinToss4.e',67).

 /*  loading(load_e_pl,
   	'/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/decreasoner/DeadOrAlive3.e').
 */
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; \fullciteA[p. 324]{Shanahan:1997}
%;
%; @book{Shanahan:1997,
%;   author = "Murray Shanahan",
%;   year = "1997",
%;   title = "Solving the Frame Problem",
%;   address = "Cambridge, MA",
%;   publisher = "MIT Press",
%; }
%;
%; deduction
%;
%; modifications from Shanahan's formulation:
%; InitiallyP -> HoldsAt
%; timestamps
%; added [time] Terminates(Shoot(),Loaded(),time).
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/decreasoner/DeadOrAlive3.e:29
% load foundations/Root.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/decreasoner/DeadOrAlive3.e',29).
:- load_e('foundations/Root.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/decreasoner/DeadOrAlive3.e:30
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/decreasoner/DeadOrAlive3.e',31).
% load foundations/EC.e
:- load_e('foundations/EC.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/decreasoner/DeadOrAlive3.e:32
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/decreasoner/DeadOrAlive3.e',33).
% event Load()
event(load).
==> mpred_prop(load,event).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/decreasoner/DeadOrAlive3.e:33
% event Shoot()
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/decreasoner/DeadOrAlive3.e',33).
event(shoot).
==> mpred_prop(shoot,event).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/decreasoner/DeadOrAlive3.e:34
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/decreasoner/DeadOrAlive3.e',35).
% event Sneeze()
event(sneeze).
==> mpred_prop(sneeze,event).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/decreasoner/DeadOrAlive3.e:35
% fluent Loaded()
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/decreasoner/DeadOrAlive3.e',35).
fluent(loaded).
==> mpred_prop(loaded,fluent).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/decreasoner/DeadOrAlive3.e:36
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/decreasoner/DeadOrAlive3.e',37).
% fluent Alive()
fluent(alive).
==> mpred_prop(alive,fluent).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/decreasoner/DeadOrAlive3.e:37
% fluent Dead()
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/decreasoner/DeadOrAlive3.e',37).
fluent(dead).
==> mpred_prop(dead,fluent).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/decreasoner/DeadOrAlive3.e:38
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/decreasoner/DeadOrAlive3.e',39).
% noninertial Dead
==> noninertial(dead).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/decreasoner/DeadOrAlive3.e:40
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/decreasoner/DeadOrAlive3.e',41).
% [time]
 % Initiates(Load(),Loaded(),time).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(load, loaded, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/decreasoner/DeadOrAlive3.e',41).
axiom(initiates(load, loaded, Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/decreasoner/DeadOrAlive3.e:41
% [time]
 % HoldsAt(Loaded(),time) -> Terminates(Shoot(),Alive(),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/decreasoner/DeadOrAlive3.e',41).

 /*  [holds_at(loaded, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(shoot, alive, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/decreasoner/DeadOrAlive3.e',41).
axiom(terminates(shoot, alive, Time),
    [holds_at(loaded, Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/decreasoner/DeadOrAlive3.e:42
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/decreasoner/DeadOrAlive3.e',43).
% [time]
 % Terminates(Shoot(),Loaded(),time).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(shoot, loaded, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/decreasoner/DeadOrAlive3.e',43).
axiom(terminates(shoot, loaded, Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/decreasoner/DeadOrAlive3.e:43
% [time]
 % HoldsAt(Dead(),time) <-> !HoldsAt(Alive(),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/decreasoner/DeadOrAlive3.e',43).

 /*  holds_at(dead, Time) <->
       holds_at(neg(alive), Time).
 */

 /*  [holds_at, dead] <->
       [holds_at, neg, alive].
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/decreasoner/DeadOrAlive3.e',43).

 /*  holds_at(dead, Time) ->
       holds_at(neg(alive), Time).
 */

 /*  holds_at(neg(alive), Time) :-
       holds_at(dead, Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/decreasoner/DeadOrAlive3.e',43).

 /*  [holds_at(dead, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(alive), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/decreasoner/DeadOrAlive3.e',43).
axiom(holds_at(neg(alive), Time),
    [holds_at(dead, Time)]).

 /*  not(holds_at(dead, Time)) :-
       not(holds_at(neg(alive), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/decreasoner/DeadOrAlive3.e',43).

 /*  [holds_at(alive, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(dead), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/decreasoner/DeadOrAlive3.e',43).
axiom(holds_at(neg(dead), Time),
    [holds_at(alive, Time)]).

 /*  holds_at(neg(alive), Time) ->
       holds_at(dead, Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/decreasoner/DeadOrAlive3.e',43).

 /*  holds_at(dead, Time) :-
       holds_at(neg(alive), Time).
 */

 /*  [holds_at(neg(alive), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(dead, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/decreasoner/DeadOrAlive3.e',43).
axiom(holds_at(dead, Time),
    [holds_at(neg(alive), Time)]).

 /*  not(holds_at(neg(alive), Time)) :-
       not(holds_at(dead, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/decreasoner/DeadOrAlive3.e',43).

 /*  [holds_at(neg(dead), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(alive, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/decreasoner/DeadOrAlive3.e',43).
axiom(holds_at(alive, Time),
    [holds_at(neg(dead), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/decreasoner/DeadOrAlive3.e:45
% HoldsAt(Alive(),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/decreasoner/DeadOrAlive3.e',45).

 /*  [] ->
       ta(Ta_Param, tvs1=[start], tvs2=[start], holds_at(alive, start)).
 */
axiom(holds_at(alive, start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/decreasoner/DeadOrAlive3.e:46
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/decreasoner/DeadOrAlive3.e',47).
% !HoldsAt(Loaded(),0).

 /*  [] ->
       ta(Ta_Param, tvs1=[start], tvs2=[start], holds_at(neg(loaded), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/decreasoner/DeadOrAlive3.e',47).
axiom(holds_at(neg(loaded), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/decreasoner/DeadOrAlive3.e:47
% Happens(Load(),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/decreasoner/DeadOrAlive3.e',47).

 /*  [] ->
       ta(Ta_Param, tvs1=[start], tvs2=[start], happens(load, start)).
 */
axiom(happens(load, start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/decreasoner/DeadOrAlive3.e:48
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/decreasoner/DeadOrAlive3.e',49).
% Happens(Sneeze(),1).

 /*  [b(start, Maptime), ignore(start+1==Maptime)] ->
       ta(Ta_Param,
          tvs1=[start+1],
          tvs2=[Maptime, start],
          happens(sneeze, Maptime)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/decreasoner/DeadOrAlive3.e',49).
axiom(happens(sneeze, Maptime),
    [b(start, Maptime)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/decreasoner/DeadOrAlive3.e:49
% Happens(Shoot(),2).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/decreasoner/DeadOrAlive3.e',49).

 /*  [b(start, Start2), toffset(start, 2, Start2), ignore(start+2==Start2)] ->
       ta(Ta_Param,
          tvs1=[start+2],
          tvs2=[Start2, start],
          happens(shoot, Start2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/decreasoner/DeadOrAlive3.e',49).
axiom(happens(shoot, Start2),
    [b(start, Start2), toffset(start, 2, Start2)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/decreasoner/DeadOrAlive3.e:51
% completion Happens
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/decreasoner/DeadOrAlive3.e',51).
==> completion(happens).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/decreasoner/DeadOrAlive3.e:53
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/decreasoner/DeadOrAlive3.e',54).
% range time 0 3
==> range(time,0,3).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/decreasoner/DeadOrAlive3.e:54
% range offset 1 1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/decreasoner/DeadOrAlive3.e',54).
==> range(offset,1,1).
%; End of file.
