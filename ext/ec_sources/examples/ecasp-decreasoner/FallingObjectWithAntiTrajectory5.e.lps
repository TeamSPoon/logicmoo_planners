:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp-decreasoner/FallingObjectWithAntiTrajectory15.e',86).
% From E: 
% 
% :-call_pel_directive(translate(unskipped,'/pack/logicmoo_ec/ext/ec_sources/examples/ecasp-decreasoner/FallingObjectWithAntiTrajectory5.e.lps')).
:- call_pel_directive(translate(unskipped,
                                '/pack/logicmoo_ec/ext/ec_sources/examples/ecasp-decreasoner/FallingObjectWithAntiTrajectory5.e.lps')).
:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(lps).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp-decreasoner/FallingObjectWithAntiTrajectory15.e',86).
% From E: 
% 
% :-call_pel_directive(translate(begining,'/pack/logicmoo_ec/ext/ec_sources/examples/ecasp-decreasoner/FallingObjectWithAntiTrajectory5.e.lps')).
:- call_pel_directive(translate(begining,
                                '/pack/logicmoo_ec/ext/ec_sources/examples/ecasp-decreasoner/FallingObjectWithAntiTrajectory5.e.lps')).
% Sat, 10 Oct 2020 15:31:52 GMT File: <stream>(0x559e4b402700)%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp-decreasoner/FallingObjectWithAntiTrajectory5.e',20).
% option encoding 3
% From E: 
% 
% :-call_pel_directive(option(encoding,3)).
:- call_pel_directive(option(encoding, 3)).

% option trajectory on
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp-decreasoner/FallingObjectWithAntiTrajectory5.e',20).
% From E: 
% 
% :-call_pel_directive(option(trajectory,on)).
:- call_pel_directive(option(trajectory, on)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp-decreasoner/FallingObjectWithAntiTrajectory5.e',23).
% load foundations/Root.e
% From E: 
% 
% :-call_pel_directive(load('foundations/Root.e')).
:- call_pel_directive(load('foundations/Root.e')).

% load foundations/EC.e
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp-decreasoner/FallingObjectWithAntiTrajectory5.e',23).
% From E: 
% 
% :-call_pel_directive(load('foundations/EC.e')).
:- call_pel_directive(load('foundations/EC.e')).

% sort object
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp-decreasoner/FallingObjectWithAntiTrajectory5.e',26).
% From E: 
% 
% sort(object).
sort(object).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp-decreasoner/FallingObjectWithAntiTrajectory5.e',28).
% sort agent
% From E: 
% 
% sort(agent).
sort(agent).

% sort height: integer
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp-decreasoner/FallingObjectWithAntiTrajectory5.e',28).
% From E: 
% 
% subsort(height,integer).
subsort(height,integer).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp-decreasoner/FallingObjectWithAntiTrajectory5.e',31).
% agent Nathan
% From E: 
% 
% t(agent,nathan).
agent(nathan).

% object Apple
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp-decreasoner/FallingObjectWithAntiTrajectory5.e',31).
% From E: 
% 
% t(object,apple).
object(apple).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp-decreasoner/FallingObjectWithAntiTrajectory5.e',34).
% fluent Falling(object)
% From E: 
% 
% fluent(falling(object)).
mpred_prop(falling(object),fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp-decreasoner/FallingObjectWithAntiTrajectory5.e',34).
fluents([falling/1]).

% fluent Height(object,height)
% From E: 
% 
% fluent(height(object,height)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp-decreasoner/FallingObjectWithAntiTrajectory5.e',34).
mpred_prop(height(object,height),fluent).
fluents([height/2]).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp-decreasoner/FallingObjectWithAntiTrajectory5.e',36).
% noninertial Height
% From E: 
% 
% :-call_pel_directive(noninertial(height)).
:- call_pel_directive(noninertial(height)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp-decreasoner/FallingObjectWithAntiTrajectory5.e',38).
% event Drop(agent,object)
% From E: 
% 
% event(drop(agent,object)).
events([drop/2]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp-decreasoner/FallingObjectWithAntiTrajectory5.e',38).
mpred_prop(drop(agent,object),action).
actions([drop/2]).

% event HitGround(object)
% From E: 
% 
% event(hitGround(object)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp-decreasoner/FallingObjectWithAntiTrajectory5.e',38).
mpred_prop(hitGround(object),event).
events([hitGround/1]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp-decreasoner/FallingObjectWithAntiTrajectory5.e',41).
%; Sigma
% [agent,object,time]
% Initiates(Drop(agent,object),Falling(object),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp-decreasoner/FallingObjectWithAntiTrajectory5.e',43).
% From E: 
% 
% initiates_at(
%    drop(Agent,Object), 
%    falling(Object), 
%    Time).
 %   [Time].
drop(Agent, Object)initiates falling(Object).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp-decreasoner/FallingObjectWithAntiTrajectory5.e',43).

 /*  initiated(happens(drop(Agent,Object),
   		  Time_From,
   		  Time_Until),
   	  falling(Object),
   	  []).
 */
 %  "% =================================".


% [object,time]
% Terminates(HitGround(object),Falling(object),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp-decreasoner/FallingObjectWithAntiTrajectory5.e',47).
% From E: 
% 
% terminates_at(
%    hitGround(Object), 
%    falling(Object), 
%    Time).
 %   [Time].
hitGround(Object)terminates falling(Object).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp-decreasoner/FallingObjectWithAntiTrajectory5.e',47).

 /*  terminated(happens(hitGround(Object),
   		   Time_From,
   		   Time_Until),
   	   falling(Object),
   	   []).
 */
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp-decreasoner/FallingObjectWithAntiTrajectory5.e',49).
%; Delta

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp-decreasoner/FallingObjectWithAntiTrajectory5.e',51).
% Delta: 
% From E: 
% 
% directive(delta).
directive(delta).
 


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp-decreasoner/FallingObjectWithAntiTrajectory5.e',51).
% [object,time]
% HoldsAt(Falling(object),time) &
% HoldsAt(Height(object,0),time) ->
% Happens(HitGround(object),time).
% From E: 
% 
% '->'(
%    (holds_at(falling(Object),Time) , 
%     holds_at(height(Object,0),Time)), 
%    happens_at(hitGround(Object),Time)).
 %   [Time].
hitGround(Object)if falling(Object), height(Object, 0).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp-decreasoner/FallingObjectWithAntiTrajectory5.e',51).

 /*  l_events(happens(hitGround(Object),
   		 Time_From,
   		 Time_From),
   	 [ holds(falling(Object),Time_From),
   	   holds(height(Object,0),Time_From)
   	 ]).
 */
 %  "% =================================".

% Delta: 
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp-decreasoner/FallingObjectWithAntiTrajectory5.e',55).
% From E: 
% 
% directive(delta).
directive(delta).
 


% Happens(Drop(Nathan,Apple),0).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp-decreasoner/FallingObjectWithAntiTrajectory5.e',55).
% From E: 
% 
% happens_at(drop(nathan,apple),0).
observe drop(nathan, apple)at 0.
 %  observe([drop(nathan,apple)],0).
 %  "% =================================".


%; Psi
% [object,height1,height2,time]
% HoldsAt(Height(object,height1),time) &
% HoldsAt(Height(object,height2),time) ->
% height1=height2.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp-decreasoner/FallingObjectWithAntiTrajectory5.e',60).
% From E: 
% 
% '->'(
%    (holds_at(height(Object,Height1),Time) , 
%     holds_at(height(Object,Height2),Time)), 
%    Height1=Height2).
 %   [Time].
false not equals(Height1, Height2), height(Object, Height1), height(Object, Height2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp-decreasoner/FallingObjectWithAntiTrajectory5.e',60).

 /*  d_pre([ not(equals(Height1,Height2)),
   	holds(height(Object,Height1),Time_At),
   	holds(height(Object,Height2),Time_At)
         ]).
 */
 %  "% =================================".


%; Pi
% [object,height1,height2,offset,time]
% HoldsAt(Height(object,height1),time) &
% height2 = (height1 - offset) ->
% Trajectory(Falling(object),time,Height(object,height2),offset).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp-decreasoner/FallingObjectWithAntiTrajectory5.e',67).
% From E: 
% 
% '->'(
%    (holds_at(height(Object,Height1),Time) , 
%     Height2=Height1-Offset), 
%    trajectory(
%       falling(Object), 
%       Time, Time, 
%                height(Object,Height2), 
%                Offset)).
 %   [Time].
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp-decreasoner/FallingObjectWithAntiTrajectory5.e',67).
holds_at(height(Object, Height1), Time), Height2=Height1-Offset ->
    trajectory(falling(Object),
               Time,
               height(Object, Height2),
               Offset).


% [object,height,offset,time]
% HoldsAt(Height(object,height),time) ->
% AntiTrajectory(Falling(object),time,Height(object,height),offset).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp-decreasoner/FallingObjectWithAntiTrajectory5.e',73).
% From E: 
% 
% '->'(
%    holds_at(height(Object,Height),Time), 
%    antiTrajectory(
%       falling(Object), 
%       Time, Time, 
%                height(Object,Height), 
%                Offset)).
 %   [Time].
if holds_at(height(Object, Height), Time)then antiTrajectory(falling(Object), Time, height(Object, Height), Offset).

 /*  reactive_rule([holds_at(height(Object,Height),Time)],
   	      [ antiTrajectory(falling(Object),
   			       Time,
   			       height(Object,Height),
   			       Offset)
   	      ]).
 */
 %  "% =================================".


%; Gamma


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp-decreasoner/FallingObjectWithAntiTrajectory5.e',78).
% !HoldsAt(Falling(Apple),0).
% From E: 
% 
% holds_at(not(falling(apple)),0).
initially not falling(apple).
 %  initial_state([not(falling(apple))]).
 %  "% =================================".


% HoldsAt(Height(Apple,3),0).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp-decreasoner/FallingObjectWithAntiTrajectory5.e',78).
% From E: 
% 
% holds_at(height(apple,3),0).
initially height(apple, 3).
 %  initial_state([height(apple,3)]).
 %  "% =================================".

% completion Delta Happens
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp-decreasoner/FallingObjectWithAntiTrajectory5.e',80).
% From E: 
% 
% :-call_pel_directive(completion(delta)).
:- call_pel_directive(completion(delta)).
% From E: 
% 
% :-call_pel_directive(completion(happens_at)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp-decreasoner/FallingObjectWithAntiTrajectory5.e',80).
:- call_pel_directive(completion(happens_at)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp-decreasoner/FallingObjectWithAntiTrajectory5.e',83).
% range time 0 5
% From E: 
% 
% :-call_pel_directive(range(time,0,5)).
:- call_pel_directive(range(time, 0, 5)).

% range height 0 3
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp-decreasoner/FallingObjectWithAntiTrajectory5.e',83).
% From E: 
% 
% :-call_pel_directive(range(height,0,3)).
:- call_pel_directive(range(height, 0, 3)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp-decreasoner/FallingObjectWithAntiTrajectory5.e',85).
% range offset 1 3
% From E: 
% 
% :-call_pel_directive(range(offset,1,3)).
:- call_pel_directive(range(offset, 1, 3)).
%; End of file.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp-decreasoner/FallingObjectWithAntiTrajectory5.e',87).
% From E: 
% 
% :-call_pel_directive(translate(ending,'/pack/logicmoo_ec/ext/ec_sources/examples/ecasp-decreasoner/FallingObjectWithAntiTrajectory5.e.lps')).
:- call_pel_directive(translate(ending,
                                '/pack/logicmoo_ec/ext/ec_sources/examples/ecasp-decreasoner/FallingObjectWithAntiTrajectory5.e.lps')).
