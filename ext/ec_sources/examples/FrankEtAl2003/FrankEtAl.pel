:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/Yale40-ea.e',32).
:- call_pel_directive(translate(unskipped,
                                '/pack/logicmoo_ec/ext/ec_sources/examples/FrankEtAl2003/FrankEtAl.pel')).
:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(ecalc).
:- call_pel_directive(translate(begining,
                                '/pack/logicmoo_ec/ext/ec_sources/examples/FrankEtAl2003/FrankEtAl.pel')).
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{FrankEtAl:2003,
%;   author = "Stefan L. Frank and Mathieu Koppen and Leo G. M. Noordman and Wietske Vonk",
%;   year = "2003",
%;   title = "Modeling knowledge-based inferences in story comprehension",
%;   journal = "Cognitive Science",
%;   volume = "27",
%;   pages = "875--910",
%; }
%;

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/FrankEtAl2003/FrankEtAl.e',21).
% fluent SunShining()
fluent(sunShining()).

% fluent Raining()
fluent(raining()).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/FrankEtAl2003/FrankEtAl.e',23).
% fluent Outside(agent)
fluent(outside(agent)).

% fluent PlaySoccer(agent)
fluent(playSoccer(agent)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/FrankEtAl2003/FrankEtAl.e',25).
% fluent PlayHideAndSeek(agent)
fluent(playHideAndSeek(agent)).

% fluent PlayComputerGame(agent)
fluent(playComputerGame(agent)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/FrankEtAl2003/FrankEtAl.e',27).
% fluent PlayWithDog(agent)
fluent(playWithDog(agent)).

% fluent Win(agent)
fluent(win(agent)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/FrankEtAl2003/FrankEtAl.e',30).
% noninertial Outside, PlaySoccer, PlayHideAndSeek, PlayComputerGame
:- call_pel_directive(noninertial(outside)).
:- call_pel_directive(noninertial(playSoccer)).
:- call_pel_directive(noninertial(playHideAndSeek)).
:- call_pel_directive(noninertial(playComputerGame)).

% noninertial PlayWithDog, Win
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/FrankEtAl2003/FrankEtAl.e',30).
:- call_pel_directive(noninertial(playWithDog)).
:- call_pel_directive(noninertial(win)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/FrankEtAl2003/FrankEtAl.e',33).
% xor PlaySoccer, PlayHideAndSeek, PlayComputerGame, PlayWithDog
xor([playSoccer,playHideAndSeek,playComputerGame,playWithDog]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/FrankEtAl2003/FrankEtAl.e',35).
% [agent,time]
% HoldsAt(PlaySoccer(agent),time) ->
% HoldsAt(Outside(agent),time).
holds_at(playSoccer(Agent), Time) ->
    holds_at(outside(Agent), Time).


% [agent,time]
% HoldsAt(PlaySoccer(agent),time) ->
% ({agent1} agent1!=agent & HoldsAt(PlaySoccer(agent1),time)).
holds_at(playSoccer(Agent), Time) ->
    exists([Agent1],
            (Agent1\=Agent, holds_at(playSoccer(Agent1), Time))).


% [agent,time]
% HoldsAt(PlayHideAndSeek(agent),time) ->
% ({agent1} agent1!=agent & HoldsAt(PlayHideAndSeek(agent1),time)).
holds_at(playHideAndSeek(Agent), Time) ->
    exists([Agent1],
            (Agent1\=Agent, holds_at(playHideAndSeek(Agent1), Time))).


% [agent,time]
% HoldsAt(PlayComputerGame(agent),time) ->
% !HoldsAt(Outside(agent),time).
holds_at(playComputerGame(Agent), Time) ->
    holds_at(not(outside(Agent)), Time).


% [agent,time]
% HoldsAt(Win(agent),time) ->
% (HoldsAt(PlaySoccer(agent),time) |
%  HoldsAt(PlayHideAndSeek(agent),time) |
%  (HoldsAt(PlayComputerGame(agent),time) &
%   ({agent1} agent1!=agent & HoldsAt(PlayComputerGame(agent1),time)))).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/FrankEtAl2003/FrankEtAl.e',52).
holds_at(win(Agent), Time) ->
    (   holds_at(playSoccer(Agent), Time)
    ;   holds_at(playHideAndSeek(Agent), Time)
    ;   holds_at(playComputerGame(Agent), Time),
        exists([Agent1],
                (Agent1\=Agent, holds_at(playComputerGame(Agent1), Time)))
    ).


% [agent,time]
% HoldsAt(PlaySoccer(agent),time) &
% HoldsAt(Win(agent),time) ->
% !HoldsAt(PlaySoccer(agent),time+1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/FrankEtAl2003/FrankEtAl.e',59).
holds_at(playSoccer(Agent), Time), holds_at(win(Agent), Time) ->
    holds_at(not(playSoccer(Agent)), Time+1).


% [agent,time]
% HoldsAt(PlayHideAndSeek(agent),time) &
% HoldsAt(Win(agent),time) ->
% !HoldsAt(PlayHideAndSeek(agent),time+1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/FrankEtAl2003/FrankEtAl.e',64).
holds_at(playHideAndSeek(Agent), Time), holds_at(win(Agent), Time) ->
    holds_at(not(playHideAndSeek(Agent)), Time+1).


% [agent,time]
% HoldsAt(PlayComputerGame(agent),time) &
% HoldsAt(Win(agent),time) ->
% !HoldsAt(PlayComputerGame(agent),time+1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/FrankEtAl2003/FrankEtAl.e',69).
holds_at(playComputerGame(Agent), Time), holds_at(win(Agent), Time) ->
    holds_at(not(playComputerGame(Agent)), Time+1).


% [agent,time]
% HoldsAt(Win(agent),time) ->
% HoldsAt(PlaySoccer(agent),time-1) |
% HoldsAt(PlayHideAndSeek(agent),time-1) |
% HoldsAt(PlayComputerGame(agent),time-1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/FrankEtAl2003/FrankEtAl.e',74).
holds_at(win(Agent), Time) ->
    (   holds_at(playSoccer(Agent), Time-1)
    ;   holds_at(playHideAndSeek(Agent), Time-1)
    ;   holds_at(playComputerGame(Agent), Time-1)
    ).


% [agent,time]
% HoldsAt(PlaySoccer(agent),time) ->
% !HoldsAt(Raining(),time).
holds_at(playSoccer(Agent), Time) ->
    holds_at(not(raining()), Time).


% [agent,time]
% HoldsAt(Win(agent),time) ->
% !({agent1} agent1!=agent & HoldsAt(Win(agent1),time)).
holds_at(win(Agent), Time) ->
    not(exists([Agent1],
                (Agent1\=Agent, holds_at(win(Agent1), Time)))).


% [agent1,agent2,time]
% HoldsAt(PlayHideAndSeek(agent1),time) &
% HoldsAt(PlayHideAndSeek(agent2),time) ->
% ((HoldsAt(Outside(agent1),time) & HoldsAt(Outside(agent2),time)) |
%  (!HoldsAt(Outside(agent1),time) & !HoldsAt(Outside(agent2),time))).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/FrankEtAl2003/FrankEtAl.e',88).
holds_at(playHideAndSeek(Agent1), Time), holds_at(playHideAndSeek(Agent2), Time) ->
    (   holds_at(outside(Agent1), Time),
        holds_at(outside(Agent2), Time)
    ;   holds_at(not(outside(Agent1)), Time),
        holds_at(not(outside(Agent2)), Time)
    ).


%; End of file.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/FrankEtAl2003/FrankEtAl.e',92).
:- call_pel_directive(translate(ending,
                                '/pack/logicmoo_ec/ext/ec_sources/examples/FrankEtAl2003/FrankEtAl.pel')).
