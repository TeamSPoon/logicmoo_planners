:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/Yale40-ea.e',32).
% From E: 
% 
% :-call_pel_directive(translate(unskipped,'/pack/logicmoo_ec/ext/ec_sources/examples/FrankEtAl2003/FrankEtAl.e.lps')).
:- call_pel_directive(translate(unskipped,
                                '/pack/logicmoo_ec/ext/ec_sources/examples/FrankEtAl2003/FrankEtAl.e.lps')).
:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(lps).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/Yale40-ea.e',32).
% From E: 
% 
% :-call_pel_directive(translate(begining,'/pack/logicmoo_ec/ext/ec_sources/examples/FrankEtAl2003/FrankEtAl.e.lps')).
:- call_pel_directive(translate(begining,
                                '/pack/logicmoo_ec/ext/ec_sources/examples/FrankEtAl2003/FrankEtAl.e.lps')).
% Sat, 10 Oct 2020 15:32:00 GMT File: <stream>(0x559e4b224f00)%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{FrankEtAl:2003,
%;   author = "Stefan L. Frank and Mathieu Koppen and Leo G. M. Noordman and Wietske Vonk",
%;   year = "2003",
%;   title = "Modeling knowledge-based inferences in story comprehension",
%;   journal = "Cognitive Science",
%;   volume = "27",
%;   pages = "875--910",
%; }
%;

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/FrankEtAl2003/FrankEtAl.e',21).
% fluent SunShining()
% From E: 
% 
% fluent(sunShining()).
fluents([sunShining/0]).

% fluent Raining()
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/FrankEtAl2003/FrankEtAl.e',21).
% From E: 
% 
% fluent(raining()).
fluents([raining/0]).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/FrankEtAl2003/FrankEtAl.e',23).
% fluent Outside(agent)
% From E: 
% 
% fluent(outside(agent)).
mpred_prop(outside(agent),fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/FrankEtAl2003/FrankEtAl.e',23).
fluents([outside/1]).

% fluent PlaySoccer(agent)
% From E: 
% 
% fluent(playSoccer(agent)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/FrankEtAl2003/FrankEtAl.e',23).
mpred_prop(playSoccer(agent),fluent).
fluents([playSoccer/1]).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/FrankEtAl2003/FrankEtAl.e',25).
% fluent PlayHideAndSeek(agent)
% From E: 
% 
% fluent(playHideAndSeek(agent)).
mpred_prop(playHideAndSeek(agent),fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/FrankEtAl2003/FrankEtAl.e',25).
fluents([playHideAndSeek/1]).

% fluent PlayComputerGame(agent)
% From E: 
% 
% fluent(playComputerGame(agent)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/FrankEtAl2003/FrankEtAl.e',25).
mpred_prop(playComputerGame(agent),fluent).
fluents([playComputerGame/1]).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/FrankEtAl2003/FrankEtAl.e',27).
% fluent PlayWithDog(agent)
% From E: 
% 
% fluent(playWithDog(agent)).
mpred_prop(playWithDog(agent),fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/FrankEtAl2003/FrankEtAl.e',27).
fluents([playWithDog/1]).

% fluent Win(agent)
% From E: 
% 
% fluent(win(agent)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/FrankEtAl2003/FrankEtAl.e',27).
mpred_prop(win(agent),fluent).
fluents([win/1]).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/FrankEtAl2003/FrankEtAl.e',30).
% noninertial Outside, PlaySoccer, PlayHideAndSeek, PlayComputerGame
% From E: 
% 
% :-call_pel_directive(noninertial(outside)).
:- call_pel_directive(noninertial(outside)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/FrankEtAl2003/FrankEtAl.e',30).
% From E: 
% 
% :-call_pel_directive(noninertial(playSoccer)).
:- call_pel_directive(noninertial(playSoccer)).
% From E: 
% 
% :-call_pel_directive(noninertial(playHideAndSeek)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/FrankEtAl2003/FrankEtAl.e',30).
:- call_pel_directive(noninertial(playHideAndSeek)).
% From E: 
% 
% :-call_pel_directive(noninertial(playComputerGame)).
:- call_pel_directive(noninertial(playComputerGame)).

% noninertial PlayWithDog, Win
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/FrankEtAl2003/FrankEtAl.e',30).
% From E: 
% 
% :-call_pel_directive(noninertial(playWithDog)).
:- call_pel_directive(noninertial(playWithDog)).
% From E: 
% 
% :-call_pel_directive(noninertial(win)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/FrankEtAl2003/FrankEtAl.e',30).
:- call_pel_directive(noninertial(win)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/FrankEtAl2003/FrankEtAl.e',33).
% xor PlaySoccer, PlayHideAndSeek, PlayComputerGame, PlayWithDog
% From E: 
% 
% xor([playSoccer,playHideAndSeek,playComputerGame,playWithDog]).
xor([playSoccer,playHideAndSeek,playComputerGame,playWithDog]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/FrankEtAl2003/FrankEtAl.e',35).
% [agent,time]
% HoldsAt(PlaySoccer(agent),time) ->
% HoldsAt(Outside(agent),time).
% From E: 
% 
% '->'(
%    holds_at(playSoccer(Agent),Time), 
%    holds_at(outside(Agent),Time)).
 %   [Time].
if playSoccer(Agent)then outside(Agent).
 %  reactive_rule([playSoccer(Agent)],[outside(Agent)]).
 %  "% =================================".


% [agent,time]
% HoldsAt(PlaySoccer(agent),time) ->
% ({agent1} agent1!=agent & HoldsAt(PlaySoccer(agent1),time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/FrankEtAl2003/FrankEtAl.e',40).
% From E: 
% 
% '->'(
%    holds_at(playSoccer(Agent),Time), 
%    exists(
%       [Agent1], 
%       (Agent1\=Agent , 
%        holds_at(playSoccer(Agent1),Time)))).
 %   [Time].
playSoccer(Agent) ->
    exists([Agent1],
            (Agent1\=Agent, playSoccer(Agent1))).


% [agent,time]
% HoldsAt(PlayHideAndSeek(agent),time) ->
% ({agent1} agent1!=agent & HoldsAt(PlayHideAndSeek(agent1),time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/FrankEtAl2003/FrankEtAl.e',44).
% From E: 
% 
% '->'(
%    holds_at(playHideAndSeek(Agent),Time), 
%    exists(
%       [Agent1], 
%       (Agent1\=Agent , 
%        holds_at(playHideAndSeek(Agent1),Time)))).
 %   [Time].
playHideAndSeek(Agent) ->
    exists([Agent1],
            (Agent1\=Agent, playHideAndSeek(Agent1))).


% [agent,time]
% HoldsAt(PlayComputerGame(agent),time) ->
% !HoldsAt(Outside(agent),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/FrankEtAl2003/FrankEtAl.e',48).
% From E: 
% 
% '->'(
%    holds_at(playComputerGame(Agent),Time), 
%    holds_at(not(outside(Agent)),Time)).
 %   [Time].
if playComputerGame(Agent)then not outside(Agent).

 /*  reactive_rule([playComputerGame(Agent)],
   	      [not(outside(Agent))]).
 */
 %  "% =================================".


% [agent,time]
% HoldsAt(Win(agent),time) ->
% (HoldsAt(PlaySoccer(agent),time) |
%  HoldsAt(PlayHideAndSeek(agent),time) |
%  (HoldsAt(PlayComputerGame(agent),time) &
%   ({agent1} agent1!=agent & HoldsAt(PlayComputerGame(agent1),time)))).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/FrankEtAl2003/FrankEtAl.e',52).
% From E: 
% 
% '->'(
%    holds_at(win(Agent),Time), 
%    (holds_at(playSoccer(Agent),Time) ; 
%      holds_at(playHideAndSeek(Agent),Time) ; 
%     (holds_at(playComputerGame(Agent),Time) , 
%      exists(
%         [Agent1], 
%         (Agent1\=Agent , 
%          holds_at(playComputerGame(Agent1),Time)))))).
 %   [Time].
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/FrankEtAl2003/FrankEtAl.e',52).
win(Agent) ->
    (   playSoccer(Agent)
    ;   playHideAndSeek(Agent)
    ;   playComputerGame(Agent),
        exists([Agent1],
                (Agent1\=Agent, playComputerGame(Agent1)))
    ).


% [agent,time]
% HoldsAt(PlaySoccer(agent),time) &
% HoldsAt(Win(agent),time) ->
% !HoldsAt(PlaySoccer(agent),time+1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/FrankEtAl2003/FrankEtAl.e',59).
% From E: 
% 
% '->'(
%    (holds_at(playSoccer(Agent),Time) , 
%     holds_at(win(Agent),Time)), 
%    holds_at(not(playSoccer(Agent)),Time+1)).
 %   [Time, Time+1].
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/FrankEtAl2003/FrankEtAl.e',59).
holds_at(playSoccer(Agent), Time), holds_at(win(Agent), Time) ->
    holds_at(not(playSoccer(Agent)), Time+1).


% [agent,time]
% HoldsAt(PlayHideAndSeek(agent),time) &
% HoldsAt(Win(agent),time) ->
% !HoldsAt(PlayHideAndSeek(agent),time+1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/FrankEtAl2003/FrankEtAl.e',64).
% From E: 
% 
% '->'(
%    (holds_at(playHideAndSeek(Agent),Time) , 
%     holds_at(win(Agent),Time)), 
%    holds_at(not(playHideAndSeek(Agent)),Time+1)).
 %   [Time, Time+1].
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/FrankEtAl2003/FrankEtAl.e',64).
holds_at(playHideAndSeek(Agent), Time), holds_at(win(Agent), Time) ->
    holds_at(not(playHideAndSeek(Agent)), Time+1).


% [agent,time]
% HoldsAt(PlayComputerGame(agent),time) &
% HoldsAt(Win(agent),time) ->
% !HoldsAt(PlayComputerGame(agent),time+1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/FrankEtAl2003/FrankEtAl.e',69).
% From E: 
% 
% '->'(
%    (holds_at(playComputerGame(Agent),Time) , 
%     holds_at(win(Agent),Time)), 
%    holds_at(not(playComputerGame(Agent)),Time+1)).
 %   [Time, Time+1].
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/FrankEtAl2003/FrankEtAl.e',69).
holds_at(playComputerGame(Agent), Time), holds_at(win(Agent), Time) ->
    holds_at(not(playComputerGame(Agent)), Time+1).


% [agent,time]
% HoldsAt(Win(agent),time) ->
% HoldsAt(PlaySoccer(agent),time-1) |
% HoldsAt(PlayHideAndSeek(agent),time-1) |
% HoldsAt(PlayComputerGame(agent),time-1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/FrankEtAl2003/FrankEtAl.e',74).
% From E: 
% 
% '->'(
%    holds_at(win(Agent),Time), 
%    (holds_at(playSoccer(Agent),Time-1) ; 
%      holds_at(playHideAndSeek(Agent),Time-1) ; 
%     holds_at(playComputerGame(Agent),Time-1))).
 %   [Time, Time-1].
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/FrankEtAl2003/FrankEtAl.e',74).
holds_at(win(Agent), Time) ->
    (   holds_at(playSoccer(Agent), Time-1)
    ;   holds_at(playHideAndSeek(Agent), Time-1)
    ;   holds_at(playComputerGame(Agent), Time-1)
    ).


% [agent,time]
% HoldsAt(PlaySoccer(agent),time) ->
% !HoldsAt(Raining(),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/FrankEtAl2003/FrankEtAl.e',80).
% From E: 
% 
% '->'(
%    holds_at(playSoccer(Agent),Time), 
%    holds_at(not(raining()),Time)).
 %   [Time].
if playSoccer(Agent)then not raining.
 %  reactive_rule([playSoccer(Agent)],[not(raining)]).
 %  "% =================================".


% [agent,time]
% HoldsAt(Win(agent),time) ->
% !({agent1} agent1!=agent & HoldsAt(Win(agent1),time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/FrankEtAl2003/FrankEtAl.e',84).
% From E: 
% 
% '->'(
%    holds_at(win(Agent),Time), 
%    not(
%       exists(
%          [Agent1], 
%          (Agent1\=Agent , 
%           holds_at(win(Agent1),Time))))).
 %   [Time].
win(Agent) ->
    not(( Agent1\=Agent,
          win(Agent1)
        )).


% [agent1,agent2,time]
% HoldsAt(PlayHideAndSeek(agent1),time) &
% HoldsAt(PlayHideAndSeek(agent2),time) ->
% ((HoldsAt(Outside(agent1),time) & HoldsAt(Outside(agent2),time)) |
%  (!HoldsAt(Outside(agent1),time) & !HoldsAt(Outside(agent2),time))).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/FrankEtAl2003/FrankEtAl.e',88).
% From E: 
% 
% '->'(
%    (holds_at(playHideAndSeek(Agent1),Time) , 
%     holds_at(playHideAndSeek(Agent2),Time)), 
%    ((holds_at(outside(Agent1),Time) , 
%      holds_at(outside(Agent2),Time)) ; 
%     (holds_at(not(outside(Agent1)),Time) , 
%      holds_at(not(outside(Agent2)),Time)))).
 %   [Time].
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/FrankEtAl2003/FrankEtAl.e',88).
playHideAndSeek(Agent1), playHideAndSeek(Agent2) ->
    (   outside(Agent1),
        outside(Agent2)
    ;   not(outside(Agent1)),
        not(outside(Agent2))
    ).


%; End of file.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/FrankEtAl2003/FrankEtAl.e',92).
% From E: 
% 
% :-call_pel_directive(translate(ending,'/pack/logicmoo_ec/ext/ec_sources/examples/FrankEtAl2003/FrankEtAl.e.lps')).
:- call_pel_directive(translate(ending,
                                '/pack/logicmoo_ec/ext/ec_sources/examples/FrankEtAl2003/FrankEtAl.e.lps')).
