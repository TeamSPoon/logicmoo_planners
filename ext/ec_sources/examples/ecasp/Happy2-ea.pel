:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/FallingObjectWithEvents5-ea.e',75).
:- call_pel_directive(translate(unskipped,
                                '/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/Happy2-ea.pel')).
:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(ecalc).
:- call_pel_directive(translate(begining,
                                '/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/Happy2-ea.pel')).
%; Happy2-ea.e

% load foundations/Root.e
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/Happy2-ea.e',3).
:- call_pel_directive(load('foundations/Root.e')).

% load foundations/EC.e
:- call_pel_directive(load('foundations/EC.e')).

% sort person
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/Happy2-ea.e',6).
sort(person).

% person Fred
t(person,fred).

% event Feed(person)
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/Happy2-ea.e',8).
event(feed(person)).

% event Clothe(person)
event(clothe(person)).

% fluent Happy(person)
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/Happy2-ea.e',10).
fluent(happy(person)).

% fluent Hungry(person)
fluent(hungry(person)).

% fluent Cold(person)
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/Happy2-ea.e',12).
fluent(cold(person)).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/Happy2-ea.e',14).
% [person,time]
% (HoldsAt(Happy(person),time) <->
% !HoldsAt(Hungry(person),time) &
% !HoldsAt(Cold(person),time)).
holds_at(happy(Person), Time) <->
    holds_at(not(hungry(Person)), Time),
    holds_at(not(cold(Person)), Time).


% [person,time]
% (Terminates(Feed(person),Hungry(person),time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/Happy2-ea.e',20).
terminates_at(feed(Person),hungry(Person),Time).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/Happy2-ea.e',22).
% [person,time]
% (Terminates(Clothe(person),Cold(person),time)).
terminates_at(clothe(Person),cold(Person),Time).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/Happy2-ea.e',26).
%;noninertial Happy
% [person,time]
% (ReleasedAt(Happy(person),time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/Happy2-ea.e',28).
released_at(happy(Person),Time).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/Happy2-ea.e',30).
% [person]
% (!ReleasedAt(Hungry(person),0)).
not(released_at(hungry(Person),0)).


% [person]
% (!ReleasedAt(Cold(person),0)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/Happy2-ea.e',30).
not(released_at(cold(Person),0)).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/Happy2-ea.e',34).
% HoldsAt(Hungry(Fred),0).
holds_at(hungry(fred),0).


% !HoldsAt(Cold(Fred),0).
holds_at(not(cold(fred)),0).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/Happy2-ea.e',36).
% Happens(Feed(Fred),1).
happens_at(feed(fred),1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/Happy2-ea.e',38).
% completion Happens
:- call_pel_directive(completion(happens_at)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/Happy2-ea.e',40).
% range time 0 2
:- call_pel_directive(range(time, 0, 2)).

% range offset 1 1
:- call_pel_directive(range(offset, 1, 1)).
%; End of file.
:- call_pel_directive(translate(ending,
                                '/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/Happy2-ea.pel')).
