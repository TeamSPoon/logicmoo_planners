:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/FallingObjectWithEvents5-ea.e',75).
% From E: 
% 
% :-call_pel_directive(translate(unskipped,'/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/Happy2-ea.e.lps')).
:- call_pel_directive(translate(unskipped,
                                '/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/Happy2-ea.e.lps')).
:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(lps).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/FallingObjectWithEvents5-ea.e',75).
% From E: 
% 
% :-call_pel_directive(translate(begining,'/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/Happy2-ea.e.lps')).
:- call_pel_directive(translate(begining,
                                '/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/Happy2-ea.e.lps')).
% Sat, 10 Oct 2020 15:31:57 GMT File: <stream>(0x559e4b461500)%; Happy2-ea.e

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/Happy2-ea.e',3).
% load foundations/Root.e
% From E: 
% 
% :-call_pel_directive(load('foundations/Root.e')).
:- call_pel_directive(load('foundations/Root.e')).

% load foundations/EC.e
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/Happy2-ea.e',3).
% From E: 
% 
% :-call_pel_directive(load('foundations/EC.e')).
:- call_pel_directive(load('foundations/EC.e')).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/Happy2-ea.e',6).
% sort person
% From E: 
% 
% sort(person).
sort(person).

% person Fred
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/Happy2-ea.e',6).
% From E: 
% 
% t(person,fred).
person(fred).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/Happy2-ea.e',8).
% event Feed(person)
% From E: 
% 
% event(feed(person)).
mpred_prop(feed(person),event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/Happy2-ea.e',8).
events([feed/1]).

% event Clothe(person)
% From E: 
% 
% event(clothe(person)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/Happy2-ea.e',8).
mpred_prop(clothe(person),event).
events([clothe/1]).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/Happy2-ea.e',10).
% fluent Happy(person)
% From E: 
% 
% fluent(happy(person)).
mpred_prop(happy(person),fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/Happy2-ea.e',10).
fluents([happy/1]).

% fluent Hungry(person)
% From E: 
% 
% fluent(hungry(person)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/Happy2-ea.e',10).
mpred_prop(hungry(person),fluent).
fluents([hungry/1]).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/Happy2-ea.e',12).
% fluent Cold(person)
% From E: 
% 
% fluent(cold(person)).
mpred_prop(cold(person),fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/Happy2-ea.e',12).
fluents([cold/1]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/Happy2-ea.e',14).
% [person,time]
% (HoldsAt(Happy(person),time) <->
% !HoldsAt(Hungry(person),time) &
% !HoldsAt(Cold(person),time)).
% From E: 
% 
% <->(
%    holds_at(happy(Person),Time), 
%    (holds_at(not(hungry(Person)),Time) , 
%     holds_at(not(cold(Person)),Time))).
 %   [Time].
if happy(Person)then not hungry(Person), not cold(Person).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/Happy2-ea.e',14).

 /*  reactive_rule([holds(happy(Person),Time_At)],
   	      [ holds(not(hungry(Person)),Time_At3),
   		holds(not(cold(Person)),Time_At3)
   	      ]).
 */
 %  "% =================================".
happy(Person)if not hungry(Person), not cold(Person).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/Happy2-ea.e',14).

 /*  l_int(holds(happy(Person),Time_At4),
         [ holds(not(hungry(Person)),Time_At4),
   	holds(not(cold(Person)),Time_At4)
         ]).
 */
 %  "% =================================".


% [person,time]
% (Terminates(Feed(person),Hungry(person),time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/Happy2-ea.e',20).
% From E: 
% 
% terminates_at(
%    feed(Person), 
%    hungry(Person), 
%    Time).
 %   [Time].
feed(Person)terminates hungry(Person).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/Happy2-ea.e',20).

 /*  terminated(happens(feed(Person),Time_From,Time_Until),
   	   hungry(Person),
   	   []).
 */
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/Happy2-ea.e',22).
% [person,time]
% (Terminates(Clothe(person),Cold(person),time)).
% From E: 
% 
% terminates_at(
%    clothe(Person), 
%    cold(Person), 
%    Time).
 %   [Time].
clothe(Person)terminates cold(Person).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/Happy2-ea.e',22).

 /*  terminated(happens(clothe(Person),
   		   Time_From,
   		   Time_Until),
   	   cold(Person),
   	   []).
 */
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/Happy2-ea.e',26).
%;noninertial Happy
% [person,time]
% (ReleasedAt(Happy(person),time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/Happy2-ea.e',28).
% From E: 
% 
% released_at(happy(Person),Time).
 %   [Time].
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/Happy2-ea.e',28).
released(happy(Person)).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/Happy2-ea.e',30).
% [person]
% (!ReleasedAt(Hungry(person),0)).
% From E: 
% 
% not(released_at(hungry(Person),0)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/Happy2-ea.e',30).
not(released_at(hungry(Person),0)).


% [person]
% (!ReleasedAt(Cold(person),0)).
% From E: 
% 
% not(released_at(cold(Person),0)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/Happy2-ea.e',30).
not(released_at(cold(Person),0)).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/Happy2-ea.e',34).
% HoldsAt(Hungry(Fred),0).
% From E: 
% 
% holds_at(hungry(fred),0).
initially hungry(fred).
 %  initial_state([hungry(fred)]).
 %  "% =================================".


% !HoldsAt(Cold(Fred),0).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/Happy2-ea.e',34).
% From E: 
% 
% holds_at(not(cold(fred)),0).
initially not cold(fred).
 %  initial_state([not(cold(fred))]).
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/Happy2-ea.e',36).
% Happens(Feed(Fred),1).
% From E: 
% 
% happens_at(feed(fred),1).
observe feed(fred)at 1.
 %  observe([feed(fred)],1).
 %  "% =================================".

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/Happy2-ea.e',38).
% completion Happens
% From E: 
% 
% :-call_pel_directive(completion(happens_at)).
:- call_pel_directive(completion(happens_at)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/Happy2-ea.e',40).
% range time 0 2
% From E: 
% 
% :-call_pel_directive(range(time,0,2)).
:- call_pel_directive(range(time, 0, 2)).

% range offset 1 1
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/Happy2-ea.e',40).
% From E: 
% 
% :-call_pel_directive(range(offset,1,1)).
:- call_pel_directive(range(offset, 1, 1)).
%; End of file.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/Happy2-ea.e',43).
% From E: 
% 
% :-call_pel_directive(translate(ending,'/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/Happy2-ea.e.lps')).
:- call_pel_directive(translate(ending,
                                '/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/Happy2-ea.e.lps')).
