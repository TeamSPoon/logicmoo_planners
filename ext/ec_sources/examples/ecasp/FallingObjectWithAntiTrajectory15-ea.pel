:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp-decreasoner/Yale40.e',65).
:- call_pel_directive(translate(unskipped,
                                '/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/FallingObjectWithAntiTrajectory15-ea.pel')).
:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(ecalc).
:- call_pel_directive(translate(begining,
                                '/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/FallingObjectWithAntiTrajectory15-ea.pel')).
%; FallingObjectWithAntiTrajectory15-ea.e

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/FallingObjectWithAntiTrajectory15-ea.e',2).
% option encoding 3
:- call_pel_directive(option(encoding, 3)).

% option trajectory on
:- call_pel_directive(option(trajectory, on)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/FallingObjectWithAntiTrajectory15-ea.e',5).
% load foundations/Root.e
:- call_pel_directive(load('foundations/Root.e')).

% load foundations/EC.e
:- call_pel_directive(load('foundations/EC.e')).

% sort object
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/FallingObjectWithAntiTrajectory15-ea.e',8).
sort(object).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/FallingObjectWithAntiTrajectory15-ea.e',10).
% sort agent
sort(agent).

% sort height: integer
subsort(height,integer).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/FallingObjectWithAntiTrajectory15-ea.e',13).
% agent Nathan
t(agent,nathan).

% object Apple
t(object,apple).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/FallingObjectWithAntiTrajectory15-ea.e',16).
% fluent Falling(object)
fluent(falling(object)).

% fluent Height(object,height)
fluent(height(object,height)).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/FallingObjectWithAntiTrajectory15-ea.e',16).
%;noninertial Height

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/FallingObjectWithAntiTrajectory15-ea.e',20).
% event Drop(agent,object)
event(drop(agent,object)).

% event HitGround(object)
event(hitGround(object)).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/FallingObjectWithAntiTrajectory15-ea.e',23).
%; Sigma
% [agent,object,time]
% Initiates(Drop(agent,object),Falling(object),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/FallingObjectWithAntiTrajectory15-ea.e',25).
initiates_at(drop(Agent,Object),
	     falling(Object),
	     Time).


% [object,time]
% Terminates(HitGround(object),Falling(object),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/FallingObjectWithAntiTrajectory15-ea.e',29).
terminates_at(hitGround(Object),falling(Object),Time).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/FallingObjectWithAntiTrajectory15-ea.e',31).
%; Delta
% [object,time]
% (HoldsAt(Falling(object),time) &
% HoldsAt(Height(object,0),time) ->
% Happens(HitGround(object),time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/FallingObjectWithAntiTrajectory15-ea.e',33).
holds_at(falling(Object), Time), holds_at(height(Object, 0), Time) ->
    happens_at(hitGround(Object), Time).


% Happens(Drop(Nathan,Apple),0).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/FallingObjectWithAntiTrajectory15-ea.e',36).
happens_at(drop(nathan,apple),0).


%; Psi
% [object,height1,height2,time]
% (HoldsAt(Height(object,height1),time) &
% HoldsAt(Height(object,height2),time) ->
% height1=height2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/FallingObjectWithAntiTrajectory15-ea.e',41).
holds_at(height(Object, Height1), Time), holds_at(height(Object, Height2), Time) ->
    Height1=Height2.


%; Pi
% [object,height1,height2,offset,time]
% (HoldsAt(Height(object,height1),time) &
% height2 = (height1 - offset) ->
% Trajectory(Falling(object),time,Height(object,height2),offset)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/FallingObjectWithAntiTrajectory15-ea.e',48).
holds_at(height(Object, Height1), Time), Height2=Height1-Offset ->
    trajectory(falling(Object),
               Time,
               height(Object, Height2),
               Offset).


% [object,height,offset,time]
% (HoldsAt(Height(object,height),time) ->
% AntiTrajectory(Falling(object),time,Height(object,height),offset)).
holds_at(height(Object, Height), Time) ->
    antiTrajectory(falling(Object),
                   Time,
                   height(Object, Height),
                   Offset).


%; Gamma


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/FallingObjectWithAntiTrajectory15-ea.e',59).
% !HoldsAt(Falling(Apple),0).
holds_at(not(falling(apple)),0).


% HoldsAt(Height(Apple,10),0).
holds_at(height(apple,10),0).


% [object]
% !ReleasedAt(Falling(object),0).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/FallingObjectWithAntiTrajectory15-ea.e',63).
not(released_at(falling(Object),0)).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/FallingObjectWithAntiTrajectory15-ea.e',65).
%;noninertial Height
% [object,height]
% ReleasedAt(Height(object,height),0).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/FallingObjectWithAntiTrajectory15-ea.e',67).
released_at(height(Object,Height),0).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/FallingObjectWithAntiTrajectory15-ea.e',69).
% completion Happens
:- call_pel_directive(completion(happens_at)).
%;completion Delta Happens

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/FallingObjectWithAntiTrajectory15-ea.e',72).
% range time 0 15
:- call_pel_directive(range(time, 0, 15)).

% range height 0 10
:- call_pel_directive(range(height, 0, 10)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/FallingObjectWithAntiTrajectory15-ea.e',74).
% range offset 1 10
:- call_pel_directive(range(offset, 1, 10)).
%; End of file.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/FallingObjectWithAntiTrajectory15-ea.e',76).
:- call_pel_directive(translate(ending,
                                '/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/FallingObjectWithAntiTrajectory15-ea.pel')).
