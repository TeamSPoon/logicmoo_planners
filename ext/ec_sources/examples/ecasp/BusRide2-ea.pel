:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Cassimatis2002/TwoScreens.e',56).
:- call_pel_directive(translate(unskipped,
                                '/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/BusRide2-ea.pel')).
:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(ecalc).
:- call_pel_directive(translate(begining,
                                '/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/BusRide2-ea.pel')).
%; BusRide2-ea.e

% load foundations/Root.e
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/BusRide2-ea.e',3).
:- call_pel_directive(load('foundations/Root.e')).

% load foundations/EC.e
:- call_pel_directive(load('foundations/EC.e')).

% fluent HasTicket()
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/BusRide2-ea.e',6).
fluent(hasTicket()).

% fluent OnRed()
fluent(onRed()).

% fluent OnYellow()
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/BusRide2-ea.e',8).
fluent(onYellow()).

% event Buy()
event(buy()).

% event Board()
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/BusRide2-ea.e',10).
event(board()).

% event BoardRed()
event(boardRed()).

% event BoardYellow()
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/BusRide2-ea.e',12).
event(boardYellow()).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/BusRide2-ea.e',14).
% [time]
% (Happens(Board(),time) -> 
%  Happens(BoardRed(),time) | Happens(BoardYellow(),time)).
happens_at(board(), Time) ->
    (   happens_at(boardRed(), Time)
    ;   happens_at(boardYellow(), Time)
    ).


% [time]
 % (Initiates(Buy(),HasTicket(),time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/BusRide2-ea.e',19).
initiates_at(buy(),hasTicket(),Time).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/BusRide2-ea.e',21).
% [time]
% (HoldsAt(HasTicket(),time) -> 
%  Initiates(BoardRed(),OnRed(),time)).
holds_at(hasTicket(), Time) ->
    initiates_at(boardRed(), onRed(), Time).


% [time]
 % (HoldsAt(HasTicket(),time) -> 
%  Initiates(BoardYellow(),OnYellow(),time)).
holds_at(hasTicket(), Time) ->
    initiates_at(boardYellow(), onYellow(), Time).


% [time]
 % (HoldsAt(OnRed(),time) -> 
%  !HoldsAt(OnYellow(),time)).
holds_at(onRed(), Time) ->
    holds_at(not(onYellow()), Time).


% [time]
 % (HoldsAt(OnYellow(),time) -> 
%  !HoldsAt(OnRed(),time)).
holds_at(onYellow(), Time) ->
    holds_at(not(onRed()), Time).


% [time]
 % (HoldsAt(OnRed(),time) -> 
%  HoldsAt(HasTicket(),time)).
holds_at(onRed(), Time) ->
    holds_at(hasTicket(), Time).


% [time]
 % (HoldsAt(OnYellow(),time) -> 
%  HoldsAt(HasTicket(),time)).
holds_at(onYellow(), Time) ->
    holds_at(hasTicket(), Time).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/BusRide2-ea.e',46).
% !ReleasedAt(HasTicket(),0).
not(released_at(hasTicket(),0)).


% !ReleasedAt(OnRed(),0).
not(released_at(onRed(),0)).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/BusRide2-ea.e',48).
% !ReleasedAt(OnYellow(),0).
not(released_at(onYellow(),0)).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/BusRide2-ea.e',50).
% HoldsAt(OnRed(),2).
holds_at(onRed(),2).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/BusRide2-ea.e',52).
% !HoldsAt(HasTicket(),0).
holds_at(not(hasTicket()),0).


% Happens(Buy(),0).
happens_at(buy(),0).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/BusRide2-ea.e',54).
% Happens(Board(),1).
happens_at(board(),1).


%; ABDUCED Happens(BoardRed(), 1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/BusRide2-ea.e',57).
% completion Happens
:- call_pel_directive(completion(happens_at)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/BusRide2-ea.e',59).
% range time 0 2
:- call_pel_directive(range(time, 0, 2)).

% range offset 1 1
:- call_pel_directive(range(offset, 1, 1)).
%; End of file.
:- call_pel_directive(translate(ending,
                                '/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/BusRide2-ea.pel')).
