:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/ChessBoard2-ea.e',51).
% From E: 
% 
% :-call_pel_directive(translate(unskipped,'/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/ChessBoard40-ea.e.lps')).
:- call_pel_directive(translate(unskipped,
                                '/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/ChessBoard40-ea.e.lps')).
:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(lps).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/ChessBoard2-ea.e',51).
% From E: 
% 
% :-call_pel_directive(translate(begining,'/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/ChessBoard40-ea.e.lps')).
:- call_pel_directive(translate(begining,
                                '/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/ChessBoard40-ea.e.lps')).
% Sat, 10 Oct 2020 14:56:23 GMT File: <stream>(0x5597f2964f00)%; ChessBoard40-ea.e

% load foundations/Root.e
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/ChessBoard40-ea.e',3).
% From E: 
% 
% :-call_pel_directive(load('foundations/Root.e')).
:- call_pel_directive(load('foundations/Root.e')).

% load foundations/EC.e
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/ChessBoard40-ea.e',3).
% From E: 
% 
% :-call_pel_directive(load('foundations/EC.e')).
:- call_pel_directive(load('foundations/EC.e')).

% event Throw()
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/ChessBoard40-ea.e',6).
% From E: 
% 
% event(throw()).
events([throw/0]).

% fluent ItsBlack()
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/ChessBoard40-ea.e',6).
% From E: 
% 
% fluent(itsBlack()).
fluents([itsBlack/0]).

% fluent ItsWhite()
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/ChessBoard40-ea.e',8).
% From E: 
% 
% fluent(itsWhite()).
fluents([itsWhite/0]).

% fluent OnBlack()
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/ChessBoard40-ea.e',8).
% From E: 
% 
% fluent(onBlack()).
fluents([onBlack/0]).

% fluent OnWhite()
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/ChessBoard40-ea.e',10).
% From E: 
% 
% fluent(onWhite()).
fluents([onWhite/0]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/ChessBoard40-ea.e',12).
% [time]
% (HoldsAt(ItsWhite(),time) ->
% Initiates(Throw(),OnWhite(),time)).
% From E: 
% 
% '->'(
%    holds_at(itsWhite(),Time), 
%    initiates_at(throw(),onWhite(),Time)).
 %   [Time].
throw initiates onWhite if itsWhite.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/ChessBoard40-ea.e',12).

 /*  initiated(happens(throw,Time_From,Time_Until),
   	  onWhite,
   	  [itsWhite]).
 */
 %  "% =================================".


% [time]
% (HoldsAt(ItsBlack(),time) ->
% Initiates(Throw(),OnBlack(),time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/ChessBoard40-ea.e',17).
% From E: 
% 
% '->'(
%    holds_at(itsBlack(),Time), 
%    initiates_at(throw(),onBlack(),Time)).
 %   [Time].
throw initiates onBlack if itsBlack.

 /*  initiated(happens(throw,Time_From,Time_Until),
   	  onBlack,
   	  [itsBlack]).
 */
 %  "% =================================".


% [time]
 % (HoldsAt(ItsWhite(),time) | HoldsAt(ItsBlack(),time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/ChessBoard40-ea.e',21).
% From E: 
% 
% (holds_at(itsWhite(),Time) ; 
%  holds_at(itsBlack(),Time)).
 %   [Time].
false not itsWhite, not itsBlack.
 %  d_pre([not(itsWhite),not(itsBlack)]).
 %  "% =================================".


%;noninertial ItsBlack, ItsWhite
% [time]
% (ReleasedAt(ItsBlack(),time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/ChessBoard40-ea.e',25).
% From E: 
% 
% released_at(itsBlack(),Time).
 %   [Time].
released(itsBlack).


% [time]
% (ReleasedAt(ItsWhite(),time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/ChessBoard40-ea.e',29).
% From E: 
% 
% released_at(itsWhite(),Time).
 %   [Time].
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/ChessBoard40-ea.e',29).
released(itsWhite).


% !ReleasedAt(OnBlack(),0).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/ChessBoard40-ea.e',31).
% From E: 
% 
% not(released_at(onBlack(),0)).
not(released_at(onBlack,0)).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/ChessBoard40-ea.e',33).
% !ReleasedAt(OnWhite(),0).
% From E: 
% 
% not(released_at(onWhite(),0)).
not(released_at(onWhite,0)).


% !HoldsAt(OnWhite(),0).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/ChessBoard40-ea.e',35).
% From E: 
% 
% holds_at(not(onWhite()),0).
initially not onWhite.
 %  initial_state([not(onWhite)]).
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/ChessBoard40-ea.e',37).
% !HoldsAt(OnBlack(),0).
% From E: 
% 
% holds_at(not(onBlack()),0).
initially not onBlack.
 %  initial_state([not(onBlack)]).
 %  "% =================================".


% Happens(Throw(),35).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/ChessBoard40-ea.e',37).
% From E: 
% 
% happens_at(throw(),35).
observe throw at 35.
 %  observe([throw],35).
 %  "% =================================".


%; prune models irrelevant to example:


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/ChessBoard40-ea.e',41).
% HoldsAt(ItsWhite(),0).
% From E: 
% 
% holds_at(itsWhite(),0).
initially itsWhite.
 %  initial_state([itsWhite]).
 %  "% =================================".


% HoldsAt(ItsBlack(),0).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/ChessBoard40-ea.e',41).
% From E: 
% 
% holds_at(itsBlack(),0).
initially itsBlack.
 %  initial_state([itsBlack]).
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/ChessBoard40-ea.e',43).
% HoldsAt(ItsWhite(),40).
% From E: 
% 
% holds_at(itsWhite(),40).
holds_at(itsWhite,40).


% HoldsAt(ItsBlack(),40).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/ChessBoard40-ea.e',43).
% From E: 
% 
% holds_at(itsBlack(),40).
holds_at(itsBlack,40).

% completion Happens
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/ChessBoard40-ea.e',45).
% From E: 
% 
% :-call_pel_directive(completion(happens_at)).
:- call_pel_directive(completion(happens_at)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/ChessBoard40-ea.e',48).
% range time 0 40
% From E: 
% 
% :-call_pel_directive(range(time,0,40)).
:- call_pel_directive(range(time, 0, 40)).

% range offset 1 1
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/ChessBoard40-ea.e',48).
% From E: 
% 
% :-call_pel_directive(range(offset,1,1)).
:- call_pel_directive(range(offset, 1, 1)).
%; End of file.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/ChessBoard40-ea.e',51).
% From E: 
% 
% :-call_pel_directive(translate(ending,'/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/ChessBoard40-ea.e.lps')).
:- call_pel_directive(translate(ending,
                                '/pack/logicmoo_ec/ext/ec_sources/examples/ecasp/ChessBoard40-ea.e.lps')).
