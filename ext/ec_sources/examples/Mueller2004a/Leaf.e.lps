:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004a/Holding.e',49).
% From E: 
% 
% :-call_pel_directive(translate(unskipped,'/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004a/Leaf.e.lps')).
:- call_pel_directive(translate(unskipped,
                                '/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004a/Leaf.e.lps')).
:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(lps).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004a/Holding.e',49).
% From E: 
% 
% :-call_pel_directive(translate(begining,'/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004a/Leaf.e.lps')).
:- call_pel_directive(translate(begining,
                                '/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004a/Leaf.e.lps')).
% Sat, 10 Oct 2020 15:32:01 GMT File: <stream>(0x559e4b323600)%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{Mueller:2004a,
%;   author = "Erik T. Mueller",
%;   year = "2004",
%;   title = "Event calculus reasoning through satisfiability",
%;   journal = "Journal of Logic and Computation",
%;   volume = "14",
%;   number = "5",
%;   pages = "703--730",
%; }
%;

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004a/Leaf.e',22).
% option trajectory on
% From E: 
% 
% :-call_pel_directive(option(trajectory,on)).
:- call_pel_directive(option(trajectory, on)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004a/Leaf.e',24).
% load foundations/Root.e
% From E: 
% 
% :-call_pel_directive(load('foundations/Root.e')).
:- call_pel_directive(load('foundations/Root.e')).

% load foundations/EC.e
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004a/Leaf.e',24).
% From E: 
% 
% :-call_pel_directive(load('foundations/EC.e')).
:- call_pel_directive(load('foundations/EC.e')).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004a/Leaf.e',27).
% sort object
% From E: 
% 
% sort(object).
sort(object).

% sort height: integer
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004a/Leaf.e',27).
% From E: 
% 
% subsort(height,integer).
subsort(height,integer).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004a/Leaf.e',30).
% fluent Height(object,height)
% From E: 
% 
% fluent(height(object,height)).
mpred_prop(height(object,height),fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004a/Leaf.e',30).
fluents([height/2]).

% fluent Falling(object)
% From E: 
% 
% fluent(falling(object)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004a/Leaf.e',30).
mpred_prop(falling(object),fluent).
fluents([falling/1]).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004a/Leaf.e',32).
% event StartFalling(object)
% From E: 
% 
% event(startFalling(object)).
mpred_prop(startFalling(object),event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004a/Leaf.e',32).
events([startFalling/1]).

% event HitsGround(object)
% From E: 
% 
% event(hitsGround(object)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004a/Leaf.e',32).
mpred_prop(hitsGround(object),event).
events([hitsGround/1]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004a/Leaf.e',35).
% [object,height1,height2,time]
% HoldsAt(Height(object,height1),time) &
% HoldsAt(Height(object,height2),time) ->
% height1=height2.
% From E: 
% 
% '->'(
%    (holds_at(height(Object,Height1),Time) , 
%     holds_at(height(Object,Height2),Time)), 
%    Height1=Height2).
 %   [Time].
false not equals(Height1, Height2), height(Object, Height1), height(Object, Height2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004a/Leaf.e',35).

 /*  d_pre([ not(equals(Height1,Height2)),
   	holds(height(Object,Height1),Time_At),
   	holds(height(Object,Height2),Time_At)
         ]).
 */
 %  "% =================================".


% [object,time]
% Initiates(StartFalling(object),Falling(object),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004a/Leaf.e',41).
% From E: 
% 
% initiates_at(
%    startFalling(Object), 
%    falling(Object), 
%    Time).
 %   [Time].
startFalling(Object)initiates falling(Object).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004a/Leaf.e',41).

 /*  initiated(happens(startFalling(Object),
   		  Time_From,
   		  Time_Until),
   	  falling(Object),
   	  []).
 */
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004a/Leaf.e',43).
% [object,height,time]
% Releases(StartFalling(object),Height(object,height),time).
% From E: 
% 
% releases_at(
%    startFalling(Object), 
%    height(Object,Height), 
%    Time).
 %   [Time].
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004a/Leaf.e',43).
releases(startFalling(Object),height(Object,Height)).


% [object,height1,height2,offset,time]
% HoldsAt(Height(object,height1),time) &
% height2=height1-offset*offset ->
% Trajectory(Falling(object),time,Height(object,height2),offset).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004a/Leaf.e',47).
% From E: 
% 
% '->'(
%    (holds_at(height(Object,Height1),Time) , 
%     Height2=Height1-Offset*Offset), 
%    trajectory(
%       falling(Object), 
%       Time, Time, 
%                height(Object,Height2), 
%                Offset)).
 %   [Time].
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004a/Leaf.e',47).
holds_at(height(Object, Height1), Time), Height2=Height1-Offset*Offset ->
    trajectory(falling(Object),
               Time,
               height(Object, Height2),
               Offset).


% [object,time]
% HoldsAt(Falling(object),time) &
% HoldsAt(Height(object,0),time) ->
% Happens(HitsGround(object),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004a/Leaf.e',52).
% From E: 
% 
% '->'(
%    (holds_at(falling(Object),Time) , 
%     holds_at(height(Object,0),Time)), 
%    happens_at(hitsGround(Object),Time)).
 %   [Time].
if falling(Object), height(Object, 0)then hitsGround(Object).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004a/Leaf.e',52).

 /*  reactive_rule([ holds(falling(Object),Time_At),
   		holds(height(Object,0),Time_At)
   	      ],
   	      [hitsGround(Object)]).
 */
 %  "% =================================".


%;[object,height1,height2,time]
%;HoldsAt(Height(object,height1),time) &
%;height1 != height2 ->
%;Terminates(HitsGround(object),Height(object,height2),time).
% [object,height,time]
% HoldsAt(Height(object,height),time) ->
% Initiates(HitsGround(object),Height(object,height),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004a/Leaf.e',61).
% From E: 
% 
% '->'(
%    holds_at(height(Object,Height),Time), 
%    initiates_at(
%       hitsGround(Object), 
%       height(Object,Height), 
%       Time)).
 %   [Time].
hitsGround(Object)initiates height(Object, Height)if height(Object, Height).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004a/Leaf.e',61).

 /*  initiated(happens(hitsGround(Object),
   		  Time_From,
   		  Time_Until),
   	  height(Object,Height),
   	  [holds(height(Object,Height),Time_From)]).
 */
 %  "% =================================".


% [object,time]
% Terminates(HitsGround(object),Falling(object),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004a/Leaf.e',66).
% From E: 
% 
% terminates_at(
%    hitsGround(Object), 
%    falling(Object), 
%    Time).
 %   [Time].
hitsGround(Object)terminates falling(Object).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004a/Leaf.e',66).

 /*  terminated(happens(hitsGround(Object),
   		   Time_From,
   		   Time_Until),
   	   falling(Object),
   	   []).
 */
 %  "% =================================".

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004a/Leaf.e',68).
% object Leaf
% From E: 
% 
% t(object,leaf).
object(leaf).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004a/Leaf.e',70).
% !HoldsAt(Falling(Leaf),0).
% From E: 
% 
% holds_at(not(falling(leaf)),0).
initially not falling(leaf).
 %  initial_state([not(falling(leaf))]).
 %  "% =================================".


% HoldsAt(Height(Leaf,9),0).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004a/Leaf.e',70).
% From E: 
% 
% holds_at(height(leaf,9),0).
initially height(leaf, 9).
 %  initial_state([height(leaf,9)]).
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004a/Leaf.e',72).
% Happens(StartFalling(Leaf),0).
% From E: 
% 
% happens_at(startFalling(leaf),0).
observe startFalling(leaf)at 0.
 %  observe([startFalling(leaf)],0).
 %  "% =================================".

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004a/Leaf.e',74).
% completion Happens
% From E: 
% 
% :-call_pel_directive(completion(happens_at)).
:- call_pel_directive(completion(happens_at)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004a/Leaf.e',76).
% range time 0 4
% From E: 
% 
% :-call_pel_directive(range(time,0,4)).
:- call_pel_directive(range(time, 0, 4)).

% range offset 1 9
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004a/Leaf.e',76).
% From E: 
% 
% :-call_pel_directive(range(offset,1,9)).
:- call_pel_directive(range(offset, 1, 9)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004a/Leaf.e',78).
% range height 0 9
% From E: 
% 
% :-call_pel_directive(range(height,0,9)).
:- call_pel_directive(range(height, 0, 9)).
%; End of file.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004a/Leaf.e',80).
% From E: 
% 
% :-call_pel_directive(translate(ending,'/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004a/Leaf.e.lps')).
:- call_pel_directive(translate(ending,
                                '/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004a/Leaf.e.lps')).
