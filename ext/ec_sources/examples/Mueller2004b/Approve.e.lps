:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004a/Leaf.e',80).
% From E: 
% 
% :-call_pel_directive(translate(unskipped,'/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/Approve.e.lps')).
:- call_pel_directive(translate(unskipped,
                                '/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/Approve.e.lps')).
:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(lps).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004a/Leaf.e',80).
% From E: 
% 
% :-call_pel_directive(translate(begining,'/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/Approve.e.lps')).
:- call_pel_directive(translate(begining,
                                '/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/Approve.e.lps')).
% Sat, 10 Oct 2020 15:32:01 GMT File: <stream>(0x559e4af69e00)%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; example of concurrent events with cumulative or canceling effects
%;
%; @inproceedings{Mueller:2004b,
%;   author = "Erik T. Mueller",
%;   year = "2004",
%;   title = "A tool for satisfiability-based commonsense reasoning in the event calculus",
%;   editor = "Valerie Barr and Zdravko Markov",
%;   booktitle = "\uppercase{P}roceedings of the \uppercase{S}eventeenth \uppercase{I}nternational \uppercase{F}lorida \uppercase{A}rtificial \uppercase{I}ntelligence \uppercase{R}esearch \uppercase{S}ociety \uppercase{C}onference",
%;   pages = "147--152",
%;   address = "Menlo Park, CA",
%;   publisher = "AAAI Press",
%; }
%;

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/Approve.e',25).
% load foundations/Root.e
% From E: 
% 
% :-call_pel_directive(load('foundations/Root.e')).
:- call_pel_directive(load('foundations/Root.e')).

% load foundations/EC.e
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/Approve.e',25).
% From E: 
% 
% :-call_pel_directive(load('foundations/EC.e')).
:- call_pel_directive(load('foundations/EC.e')).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/Approve.e',28).
% sort agent
% From E: 
% 
% sort(agent).
sort(agent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/Approve.e',30).
% event ApproveOf(agent,agent)
% From E: 
% 
% event(approveOf(agent,agent)).
events([approveOf/2]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/Approve.e',30).
mpred_prop(approveOf(agent,agent),action).
actions([approveOf/2]).

% event DisapproveOf(agent,agent)
% From E: 
% 
% event(disapproveOf(agent,agent)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/Approve.e',30).
events([disapproveOf/2]).
mpred_prop(disapproveOf(agent,agent),action).
actions([disapproveOf/2]).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/Approve.e',32).
% fluent Happy(agent)
% From E: 
% 
% fluent(happy(agent)).
mpred_prop(happy(agent),fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/Approve.e',32).
fluents([happy/1]).

% fluent Confused(agent)
% From E: 
% 
% fluent(confused(agent)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/Approve.e',32).
mpred_prop(confused(agent),fluent).
fluents([confused/1]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/Approve.e',35).
% [agent1,agent2,time]
% !Happens(DisapproveOf(agent1,agent2),time) ->
% Initiates(ApproveOf(agent1,agent2),Happy(agent2),time).
% From E: 
% 
% '->'(
%    not(happens_at(disapproveOf(Agent1,Agent2),Time)), 
%    initiates_at(
%       approveOf(Agent1,Agent2), 
%       happy(Agent2), 
%       Time)).
 %   [Time].
approveOf(Agent1, Agent2)initiates happy(Agent2)if not disapproveOf(Agent1, Agent2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/Approve.e',35).

 /*  initiated(happens(approveOf(Agent1,Agent2),
   		  Time_From,
   		  Time_Until),
   	  happy(Agent2),
   	  [not(disapproveOf(Agent1,Agent2))]).
 */
 %  "% =================================".


% [agent1,agent2,time]
% !Happens(ApproveOf(agent1,agent2),time) ->
% Terminates(DisapproveOf(agent1,agent2),Happy(agent2),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/Approve.e',40).
% From E: 
% 
% '->'(
%    not(happens_at(approveOf(Agent1,Agent2),Time)), 
%    terminates_at(
%       disapproveOf(Agent1,Agent2), 
%       happy(Agent2), 
%       Time)).
 %   [Time].
disapproveOf(Agent1, Agent2)terminates happy(Agent2)if not approveOf(Agent1, Agent2).

 /*  terminated(happens(disapproveOf(Agent1,Agent2),
   		   Time_From,
   		   Time_Until),
   	   happy(Agent2),
   	   [not(approveOf(Agent1,Agent2))]).
 */
 %  "% =================================".


% [agent1,agent2,time]
% Happens(DisapproveOf(agent1,agent2),time) ->
% Initiates(ApproveOf(agent1,agent2),Confused(agent2),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/Approve.e',44).
% From E: 
% 
% '->'(
%    happens_at(disapproveOf(Agent1,Agent2),Time), 
%    initiates_at(
%       approveOf(Agent1,Agent2), 
%       confused(Agent2), 
%       Time)).
 %   [Time].
approveOf(Agent1, Agent2)initiates confused(Agent2)if disapproveOf(Agent1, Agent2).

 /*  initiated(happens(approveOf(Agent1,Agent2),
   		  Time_From,
   		  Time_Until),
   	  confused(Agent2),
   	  [ happens(disapproveOf(Agent1,Agent2),
   		    Time_From,
   		    Time_Until)
   	  ]).
 */
 %  "% =================================".

% agent James, Peter
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/Approve.e',46).
% From E: 
% 
% t(agent,james).
agent(james).
% From E: 
% 
% t(agent,peter).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/Approve.e',46).
agent(peter).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/Approve.e',49).
% [agent]
 % !HoldsAt(Happy(agent),0) & !HoldsAt(Confused(agent),0).
% From E: 
% 
% (holds_at(not(happy(Agent)),0) , 
%  holds_at(not(confused(Agent)),0)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/Approve.e',49).
initially(not(happy(Agent))),
initially(not(confused(Agent))).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/Approve.e',51).
% Happens(ApproveOf(Peter,James),0).
% From E: 
% 
% happens_at(approveOf(peter,james),0).
observe approveOf(peter, james)at 0.
 %  observe([approveOf(peter,james)],0).
 %  "% =================================".


% Happens(DisapproveOf(Peter,James),0).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/Approve.e',51).
% From E: 
% 
% happens_at(disapproveOf(peter,james),0).
observe disapproveOf(peter, james)at 0.
 %  observe([disapproveOf(peter,james)],0).
 %  "% =================================".

% completion Happens
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/Approve.e',53).
% From E: 
% 
% :-call_pel_directive(completion(happens_at)).
:- call_pel_directive(completion(happens_at)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/Approve.e',56).
% range time 0 1
% From E: 
% 
% :-call_pel_directive(range(time,0,1)).
:- call_pel_directive(range(time, 0, 1)).

% range offset 1 1
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/Approve.e',56).
% From E: 
% 
% :-call_pel_directive(range(offset,1,1)).
:- call_pel_directive(range(offset, 1, 1)).
%; End of file.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/Approve.e',59).
% From E: 
% 
% :-call_pel_directive(translate(ending,'/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/Approve.e.lps')).
:- call_pel_directive(translate(ending,
                                '/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/Approve.e.lps')).
