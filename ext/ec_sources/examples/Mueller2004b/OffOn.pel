:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/Leaf.e',81).
:- call_pel_directive(translate(unskipped,
                                '/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/OffOn.pel')).
:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(ecalc).
:- call_pel_directive(translate(begining,
                                '/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/OffOn.pel')).
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @inproceedings{Mueller:2004b,
%;   author = "Erik T. Mueller",
%;   year = "2004",
%;   title = "A tool for satisfiability-based commonsense reasoning in the event calculus",
%;   editor = "Valerie Barr and Zdravko Markov",
%;   booktitle = "\uppercase{P}roceedings of the \uppercase{S}eventeenth \uppercase{I}nternational \uppercase{F}lorida \uppercase{A}rtificial \uppercase{I}ntelligence \uppercase{R}esearch \uppercase{S}ociety \uppercase{C}onference",
%;   pages = "147--152",
%;   address = "Menlo Park, CA",
%;   publisher = "AAAI Press",
%; }
%;

% load foundations/Root.e
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/OffOn.e',23).
:- call_pel_directive(load('foundations/Root.e')).

% load foundations/EC.e
:- call_pel_directive(load('foundations/EC.e')).

% sort agent
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/OffOn.e',26).
sort(agent).

% sort switch
sort(switch).

% fluent On(switch)
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/OffOn.e',29).
fluent(on(switch)).

% fluent Off(switch)
fluent(off(switch)).

% event TurnOn(agent,switch)
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/OffOn.e',31).
event(turnOn(agent,switch)).

% event TurnOff(agent,switch)
event(turnOff(agent,switch)).

% noninertial Off
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/OffOn.e',34).
:- call_pel_directive(noninertial(off)).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/OffOn.e',36).
% [switch,time]
 % HoldsAt(Off(switch),time) <-> !HoldsAt(On(switch),time).
holds_at(off(Switch), Time) <->
    holds_at(not(on(Switch)), Time).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/OffOn.e',38).
% [agent,switch,time]
 % Initiates(TurnOn(agent,switch),On(switch),time).
initiates_at(turnOn(Agent,Switch),
	     on(Switch),
	     Time).


% [agent,switch,time]
 % Terminates(TurnOff(agent,switch),On(switch),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/OffOn.e',38).
terminates_at(turnOff(Agent,Switch),
	      on(Switch),
	      Time).

% agent James
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/OffOn.e',40).
t(agent,james).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/OffOn.e',42).
% switch Switch1
t(switch,switch1).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/OffOn.e',44).
% !HoldsAt(On(Switch1),0).
holds_at(not(on(switch1)),0).


% Happens(TurnOn(James,Switch1),0).
happens_at(turnOn(james,switch1),0).

% range time 0 1
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/OffOn.e',46).
:- call_pel_directive(range(time, 0, 1)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/OffOn.e',48).
% range offset 1 1
:- call_pel_directive(range(offset, 1, 1)).
%; End of file.
:- call_pel_directive(translate(ending,
                                '/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/OffOn.pel')).
