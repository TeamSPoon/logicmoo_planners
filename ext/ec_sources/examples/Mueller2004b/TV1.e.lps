:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/RunningAndDriving2.e',50).
% From E: 
% 
% :-call_pel_directive(translate(unskipped,'/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/TV1.e.lps')).
:- call_pel_directive(translate(unskipped,
                                '/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/TV1.e.lps')).
:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(lps).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/RunningAndDriving2.e',50).
% From E: 
% 
% :-call_pel_directive(translate(begining,'/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/TV1.e.lps')).
:- call_pel_directive(translate(begining,
                                '/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/TV1.e.lps')).
% Sat, 10 Oct 2020 14:56:44 GMT File: <stream>(0x5597f2913d00)%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @inproceedings{Mueller:2004b,
%;   author = "Erik T. Mueller",
%;   year = "2004",
%;   title = "A tool for satisfiability-based commonsense reasoning in the event calculus",
%;   editor = "Valerie Barr and Zdravko Markov",
%;   booktitle = "\uppercase{P}roceedings of the \uppercase{S}eventeenth \uppercase{I}nternational \uppercase{F}lorida \uppercase{A}rtificial \uppercase{I}ntelligence \uppercase{R}esearch \uppercase{S}ociety \uppercase{C}onference",
%;   pages = "147--152",
%;   address = "Menlo Park, CA",
%;   publisher = "AAAI Press",
%; }
%;

% load foundations/Root.e
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/TV1.e',23).
% From E: 
% 
% :-call_pel_directive(load('foundations/Root.e')).
:- call_pel_directive(load('foundations/Root.e')).

% load foundations/EC.e
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/TV1.e',23).
% From E: 
% 
% :-call_pel_directive(load('foundations/EC.e')).
:- call_pel_directive(load('foundations/EC.e')).

% sort agent
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/TV1.e',26).
% From E: 
% 
% sort(agent).
sort(agent).

% sort switch
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/TV1.e',26).
% From E: 
% 
% sort(switch).
sort(switch).

% sort tv
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/TV1.e',28).
% From E: 
% 
% sort(tv).
sort(tv).

% function TVOf(switch): tv
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/TV1.e',30).
% From E: 
% 
% function(tVOf(switch),tv).
function(tVOf(switch),tv).

% fluent SwitchOn(switch)
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/TV1.e',30).
% From E: 
% 
% fluent(switchOn(switch)).
mpred_prop(switchOn(switch),fluent).
fluents([switchOn/1]).

% fluent TVOn(tv)
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/TV1.e',32).
% From E: 
% 
% fluent(tVOn(tv)).
mpred_prop(tVOn(tv),fluent).
fluents([tVOn/1]).

% fluent PluggedIn(tv)
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/TV1.e',32).
% From E: 
% 
% fluent(pluggedIn(tv)).
mpred_prop(pluggedIn(tv),fluent).
fluents([pluggedIn/1]).

% event TurnOn(agent,switch)
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/TV1.e',34).
% From E: 
% 
% event(turnOn(agent,switch)).
events([turnOn/2]).
mpred_prop(turnOn(agent,switch),action).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/TV1.e',34).
actions([turnOn/2]).

% event TurnOff(agent,switch)
% From E: 
% 
% event(turnOff(agent,switch)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/TV1.e',34).
events([turnOff/2]).
mpred_prop(turnOff(agent,switch),action).
actions([turnOff/2]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/TV1.e',37).
% [agent,switch,time]
 % Initiates(TurnOn(agent,switch),SwitchOn(switch),time).
% From E: 
% 
% initiates_at(
%    turnOn(Agent,Switch), 
%    switchOn(Switch), 
%    Time).
 %   [Time].
turnOn(Agent, Switch)initiates switchOn(Switch).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/TV1.e',37).

 /*  initiated(happens(turnOn(Agent,Switch),
   		  Time_From,
   		  Time_Until),
   	  switchOn(Switch),
   	  []).
 */
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/TV1.e',39).
% [agent,switch,tv,time]
% TVOf(switch)=tv & HoldsAt(PluggedIn(tv),time) ->
% Initiates(TurnOn(agent,switch),TVOn(tv),time).
% From E: 
% 
% '->'(
%    (tVOf(Switch)=Tv , 
%     holds_at(pluggedIn(Tv),Time)), 
%    initiates_at(
%       turnOn(Agent,Switch), 
%       tVOn(Tv), 
%       Time)).
 %   [Time].
turnOn(Agent, Switch)initiates tVOn(Tv)if tVOf(Switch, Tv), pluggedIn(Tv).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/TV1.e',39).

 /*  initiated(happens(turnOn(Agent,Switch),
   		  Time_From,
   		  Time_Until),
   	  tVOn(Tv),
   	  [tVOf(Switch,Tv),pluggedIn(Tv)]).
 */
 %  "% =================================".

% agent James
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/TV1.e',42).
% From E: 
% 
% t(agent,james).
agent(james).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/TV1.e',44).
% switch Switch1
% From E: 
% 
% t(switch,switch1).
switch(switch1).

% tv TV1
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/TV1.e',44).
% From E: 
% 
% t(tv,tv1).
tv(tv1).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/TV1.e',47).
% TVOf(Switch1)=TV1.
% From E: 
% 
% tVOf(switch1)=tv1.
tVOf(switch1,tv1).


% HoldsAt(PluggedIn(TV1),0).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/TV1.e',47).
% From E: 
% 
% holds_at(pluggedIn(tv1),0).
initially pluggedIn(tv1).
 %  initial_state([pluggedIn(tv1)]).
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/TV1.e',49).
% !HoldsAt(SwitchOn(Switch1),0).
% From E: 
% 
% holds_at(not(switchOn(switch1)),0).
initially not switchOn(switch1).
 %  initial_state([not(switchOn(switch1))]).
 %  "% =================================".


% !HoldsAt(TVOn(TV1),0).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/TV1.e',49).
% From E: 
% 
% holds_at(not(tVOn(tv1)),0).
initially not tVOn(tv1).
 %  initial_state([not(tVOn(tv1))]).
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/TV1.e',51).
% Happens(TurnOn(James,Switch1),0).
% From E: 
% 
% happens_at(turnOn(james,switch1),0).
observe turnOn(james, switch1)at 0.
 %  observe([turnOn(james,switch1)],0).
 %  "% =================================".

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/TV1.e',53).
% range time 0 1
% From E: 
% 
% :-call_pel_directive(range(time,0,1)).
:- call_pel_directive(range(time, 0, 1)).

% range offset 1 1
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/TV1.e',53).
% From E: 
% 
% :-call_pel_directive(range(offset,1,1)).
:- call_pel_directive(range(offset, 1, 1)).
%; End of file.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/TV1.e',56).
% From E: 
% 
% :-call_pel_directive(translate(ending,'/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/TV1.e.lps')).
:- call_pel_directive(translate(ending,
                                '/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/TV1.e.lps')).
