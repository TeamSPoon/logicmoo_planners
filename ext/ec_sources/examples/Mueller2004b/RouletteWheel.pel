:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/PickUp.e',110).
:- call_pel_directive(translate(unskipped,
                                '/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/RouletteWheel.pel')).
:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(ecalc).
:- call_pel_directive(translate(begining,
                                '/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/RouletteWheel.pel')).
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @inproceedings{Mueller:2004b,
%;   author = "Erik T. Mueller",
%;   year = "2004",
%;   title = "A tool for satisfiability-based commonsense reasoning in the event calculus",
%;   editor = "Valerie Barr and Zdravko Markov",
%;   booktitle = "\uppercase{P}roceedings of the \uppercase{S}eventeenth \uppercase{I}nternational \uppercase{F}lorida \uppercase{A}rtificial \uppercase{I}ntelligence \uppercase{R}esearch \uppercase{S}ociety \uppercase{C}onference",
%;   pages = "147--152",
%;   address = "Menlo Park, CA",
%;   publisher = "AAAI Press",
%; }
%;

% load foundations/Root.e
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/RouletteWheel.e',23).
:- call_pel_directive(load('foundations/Root.e')).

% load foundations/EC.e
:- call_pel_directive(load('foundations/EC.e')).

% sort wheel
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/RouletteWheel.e',26).
sort(wheel).

% sort value: integer
subsort(value,integer).

% fluent WheelValueDeterminingFluent(wheel,value)
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/RouletteWheel.e',29).
fluent(wheelValueDeterminingFluent(wheel,value)).

% fluent WheelValue(wheel,value)
fluent(wheelValue(wheel,value)).

% noninertial WheelValueDeterminingFluent
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/RouletteWheel.e',31).
:- call_pel_directive(noninertial(wheelValueDeterminingFluent)).

% event Spin(wheel)
event(spin(wheel)).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/RouletteWheel.e',34).
% [wheel,value1,value2,time]
% HoldsAt(WheelValue(wheel,value1),time) &
% HoldsAt(WheelValue(wheel,value2),time) ->
% value1=value2.
holds_at(wheelValue(Wheel, Value1), Time), holds_at(wheelValue(Wheel, Value2), Time) ->
    Value1=Value2.


% [wheel,value1,value2,time]
% HoldsAt(WheelValueDeterminingFluent(wheel,value1),time) &
% HoldsAt(WheelValueDeterminingFluent(wheel,value2),time) ->
% value1=value2.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/RouletteWheel.e',40).
holds_at(wheelValueDeterminingFluent(Wheel, Value1), Time), holds_at(wheelValueDeterminingFluent(Wheel, Value2), Time) ->
    Value1=Value2.


% [wheel,value,time]
% HoldsAt(WheelValueDeterminingFluent(wheel,value),time) ->
% Initiates(Spin(wheel),WheelValue(wheel,value),time).
holds_at(wheelValueDeterminingFluent(Wheel, Value), Time) ->
    initiates_at(spin(Wheel),
                 wheelValue(Wheel, Value),
                 Time).


% [wheel,value1,value2,time]
% HoldsAt(WheelValue(wheel,value1),time) &
% HoldsAt(WheelValueDeterminingFluent(wheel,value2),time) &
% value1!=value2 ->
% Terminates(Spin(wheel),WheelValue(wheel,value1),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/RouletteWheel.e',49).
holds_at(wheelValue(Wheel, Value1), Time), holds_at(wheelValueDeterminingFluent(Wheel, Value2), Time), Value1\=Value2 ->
    terminates_at(spin(Wheel),
                  wheelValue(Wheel, Value1),
                  Time).


% [wheel,time]
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/RouletteWheel.e',55).
% {value} % HoldsAt(WheelValueDeterminingFluent(wheel,value),time).
exists([Value],
 holds_at(wheelValueDeterminingFluent(Wheel,Value),
	 Time)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/RouletteWheel.e',57).
% wheel Wheel
t(wheel,wheel).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/RouletteWheel.e',59).
% HoldsAt(WheelValue(Wheel,7),0).
holds_at(wheelValue(wheel,7),0).


% Happens(Spin(Wheel),0).
happens_at(spin(wheel),0).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/RouletteWheel.e',61).
% HoldsAt(WheelValueDeterminingFluent(Wheel,7),1).
holds_at(wheelValueDeterminingFluent(wheel,7),1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/RouletteWheel.e',63).
% completion Happens
:- call_pel_directive(completion(happens_at)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/RouletteWheel.e',65).
% range value 7 10
:- call_pel_directive(range(value, 7, 10)).

% range time 0 1
:- call_pel_directive(range(time, 0, 1)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/RouletteWheel.e',67).
% range offset 1 1
:- call_pel_directive(range(offset, 1, 1)).
%; End of file.
:- call_pel_directive(translate(ending,
                                '/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/RouletteWheel.pel')).
