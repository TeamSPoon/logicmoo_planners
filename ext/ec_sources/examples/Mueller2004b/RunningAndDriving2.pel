:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(pfc).
% Wed, 01 Apr 2020 20:00:36 GMT
% From ../examples/Mueller2004b/RunningAndDriving2.pel:4
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/Mueller2004b/RunningAndDriving1.e',51).

 /*  loading(load_e_pl,
   	'/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/Mueller2004b/RunningAndDriving2.e').
 */
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @inproceedings{Mueller:2004b,
%;   author = "Erik T. Mueller",
%;   year = "2004",
%;   title = "A tool for satisfiability-based commonsense reasoning in the event calculus",
%;   editor = "Valerie Barr and Zdravko Markov",
%;   booktitle = "\uppercase{P}roceedings of the \uppercase{S}eventeenth \uppercase{I}nternational \uppercase{F}lorida \uppercase{A}rtificial \uppercase{I}ntelligence \uppercase{R}esearch \uppercase{S}ociety \uppercase{C}onference",
%;   pages = "147--152",
%;   address = "Menlo Park, CA",
%;   publisher = "AAAI Press",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/Mueller2004b/RunningAndDriving2.e:22
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/Mueller2004b/RunningAndDriving2.e',23).
% load foundations/Root.e
:- load_e('foundations/Root.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/Mueller2004b/RunningAndDriving2.e:23
% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/Mueller2004b/RunningAndDriving2.e',23).
:- load_e('foundations/EC.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/Mueller2004b/RunningAndDriving2.e:25
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/Mueller2004b/RunningAndDriving2.e',26).
% sort agent
==> sort(agent).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/Mueller2004b/RunningAndDriving2.e:27
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/Mueller2004b/RunningAndDriving2.e',28).
% fluent Tired(agent)
fluent(tired(agent)).
==> mpred_prop(tired(agent),fluent).
==> meta_argtypes(tired(agent)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/Mueller2004b/RunningAndDriving2.e:29
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/Mueller2004b/RunningAndDriving2.e',30).
% event Move(agent)
event(move(agent)).
==> mpred_prop(move(agent),event).
==> meta_argtypes(move(agent)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/Mueller2004b/RunningAndDriving2.e:30
% event Run(agent)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/Mueller2004b/RunningAndDriving2.e',30).
event(run(agent)).
==> mpred_prop(run(agent),event).
==> meta_argtypes(run(agent)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/Mueller2004b/RunningAndDriving2.e:31
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/Mueller2004b/RunningAndDriving2.e',32).
% event Drive(agent)
event(drive(agent)).
==> mpred_prop(drive(agent),event).
==> meta_argtypes(drive(agent)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/Mueller2004b/RunningAndDriving2.e:33
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/Mueller2004b/RunningAndDriving2.e',34).
% [agent,time]
% Happens(Move(agent),time) ->
% Happens(Run(agent),time) | Happens(Drive(agent),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/Mueller2004b/RunningAndDriving2.e:35

 /*  happens(move(Agent), Time) ->
       (   happens(run(Agent), Time)
       ;   happens(drive(Agent), Time)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/Mueller2004b/RunningAndDriving2.e',34).

 /*  happens(run(Agent), Time) :-
       not(happens(drive(Agent), Time)),
       happens(move(Agent), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/Mueller2004b/RunningAndDriving2.e',34).

 /*  [not(happens(drive(Agent), Time)), happens(move(Agent), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(run(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/Mueller2004b/RunningAndDriving2.e',34).
axiom(happens(run(Agent), Time),
   
    [ not(happens(drive(Agent), Time)),
      happens(move(Agent), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/Mueller2004b/RunningAndDriving2.e',34).

 /*  happens(drive(Agent), Time) :-
       not(happens(run(Agent), Time)),
       happens(move(Agent), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/Mueller2004b/RunningAndDriving2.e',34).

 /*  [not(happens(run(Agent), Time)), happens(move(Agent), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(drive(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/Mueller2004b/RunningAndDriving2.e',34).
axiom(happens(drive(Agent), Time),
   
    [ not(happens(run(Agent), Time)),
      happens(move(Agent), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/Mueller2004b/RunningAndDriving2.e',34).

 /*  not(happens(move(Agent), Time)) :-
       not(happens(run(Agent), Time)),
       not(happens(drive(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/Mueller2004b/RunningAndDriving2.e',34).

 /*  [not(happens(run(Agent), Time)), not(happens(drive(Agent), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(move(Agent), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/Mueller2004b/RunningAndDriving2.e',34).
axiom(not(happens(move(Agent), Time)),
   
    [ not(happens(run(Agent), Time)),
      not(happens(drive(Agent), Time))
    ]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/Mueller2004b/RunningAndDriving2.e:37
% xor Run, Drive
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/Mueller2004b/RunningAndDriving2.e',37).
==> xor([run,drive]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/Mueller2004b/RunningAndDriving2.e:39
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/Mueller2004b/RunningAndDriving2.e',40).
% [agent,time]
 % Initiates(Run(agent),Tired(agent),time).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(run(Agent), tired(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/Mueller2004b/RunningAndDriving2.e',40).
axiom(initiates(run(Agent), tired(Agent), Time),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/Mueller2004b/RunningAndDriving2.e:41
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/Mueller2004b/RunningAndDriving2.e',42).
% agent James
==> t(agent,james).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/Mueller2004b/RunningAndDriving2.e:43
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/Mueller2004b/RunningAndDriving2.e',44).
% !HoldsAt(Tired(James),0).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(tired(james)), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/Mueller2004b/RunningAndDriving2.e',44).
axiom(holds_at(neg(tired(james)), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/Mueller2004b/RunningAndDriving2.e:44
% Happens(Move(James),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/Mueller2004b/RunningAndDriving2.e',44).

 /*  [] ->
       ta(Ta_Param, tvs1=[start], tvs2=[start], happens(move(james), start)).
 */
axiom(happens(move(james), start),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/Mueller2004b/RunningAndDriving2.e:46
% range time 0 1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/Mueller2004b/RunningAndDriving2.e',46).
==> range(time,0,1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/Mueller2004b/RunningAndDriving2.e:47
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/examples/Mueller2004b/RunningAndDriving2.e',48).
% range offset 1 1
==> range(offset,1,1).
%; End of file.
