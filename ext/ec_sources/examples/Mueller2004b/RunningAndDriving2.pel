:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/RunningAndDriving1.e',51).
:- call_pel_directive(translate(unskipped,
                                '/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/RunningAndDriving2.pel')).
:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(ecalc).
:- call_pel_directive(translate(begining,
                                '/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/RunningAndDriving2.pel')).
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @inproceedings{Mueller:2004b,
%;   author = "Erik T. Mueller",
%;   year = "2004",
%;   title = "A tool for satisfiability-based commonsense reasoning in the event calculus",
%;   editor = "Valerie Barr and Zdravko Markov",
%;   booktitle = "\uppercase{P}roceedings of the \uppercase{S}eventeenth \uppercase{I}nternational \uppercase{F}lorida \uppercase{A}rtificial \uppercase{I}ntelligence \uppercase{R}esearch \uppercase{S}ociety \uppercase{C}onference",
%;   pages = "147--152",
%;   address = "Menlo Park, CA",
%;   publisher = "AAAI Press",
%; }
%;

% load foundations/Root.e
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/RunningAndDriving2.e',23).
:- call_pel_directive(load('foundations/Root.e')).

% load foundations/EC.e
:- call_pel_directive(load('foundations/EC.e')).

% sort agent
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/RunningAndDriving2.e',26).
sort(agent).

% fluent Tired(agent)
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/RunningAndDriving2.e',28).
fluent(tired(agent)).

% event Move(agent)
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/RunningAndDriving2.e',30).
event(move(agent)).

% event Run(agent)
event(run(agent)).

% event Drive(agent)
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/RunningAndDriving2.e',32).
event(drive(agent)).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/RunningAndDriving2.e',34).
% [agent,time]
% Happens(Move(agent),time) ->
% Happens(Run(agent),time) | Happens(Drive(agent),time).
happens_at(move(Agent), Time) ->
    (   happens_at(run(Agent), Time)
    ;   happens_at(drive(Agent), Time)
    ).

% xor Run, Drive
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/RunningAndDriving2.e',37).
xor([run,drive]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/RunningAndDriving2.e',40).
% [agent,time]
 % Initiates(Run(agent),Tired(agent),time).
initiates_at(run(Agent),tired(Agent),Time).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/RunningAndDriving2.e',42).
% agent James
t(agent,james).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/RunningAndDriving2.e',44).
% !HoldsAt(Tired(James),0).
holds_at(not(tired(james)),0).


% Happens(Move(James),0).
happens_at(move(james),0).

% range time 0 1
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/RunningAndDriving2.e',46).
:- call_pel_directive(range(time, 0, 1)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/RunningAndDriving2.e',48).
% range offset 1 1
:- call_pel_directive(range(offset, 1, 1)).
%; End of file.
:- call_pel_directive(translate(ending,
                                '/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/RunningAndDriving2.pel')).
