:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/Leaf.e',81).
% From E: 
% 
% :-call_pel_directive(translate(unskipped,'/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/OffOn.e.lps')).
:- call_pel_directive(translate(unskipped,
                                '/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/OffOn.e.lps')).
:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(lps).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/Leaf.e',81).
% From E: 
% 
% :-call_pel_directive(translate(begining,'/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/OffOn.e.lps')).
:- call_pel_directive(translate(begining,
                                '/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/OffOn.e.lps')).
% Sat, 10 Oct 2020 14:56:43 GMT File: <stream>(0x5597f2999c00)%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @inproceedings{Mueller:2004b,
%;   author = "Erik T. Mueller",
%;   year = "2004",
%;   title = "A tool for satisfiability-based commonsense reasoning in the event calculus",
%;   editor = "Valerie Barr and Zdravko Markov",
%;   booktitle = "\uppercase{P}roceedings of the \uppercase{S}eventeenth \uppercase{I}nternational \uppercase{F}lorida \uppercase{A}rtificial \uppercase{I}ntelligence \uppercase{R}esearch \uppercase{S}ociety \uppercase{C}onference",
%;   pages = "147--152",
%;   address = "Menlo Park, CA",
%;   publisher = "AAAI Press",
%; }
%;

% load foundations/Root.e
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/OffOn.e',23).
% From E: 
% 
% :-call_pel_directive(load('foundations/Root.e')).
:- call_pel_directive(load('foundations/Root.e')).

% load foundations/EC.e
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/OffOn.e',23).
% From E: 
% 
% :-call_pel_directive(load('foundations/EC.e')).
:- call_pel_directive(load('foundations/EC.e')).

% sort agent
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/OffOn.e',26).
% From E: 
% 
% sort(agent).
sort(agent).

% sort switch
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/OffOn.e',26).
% From E: 
% 
% sort(switch).
sort(switch).

% fluent On(switch)
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/OffOn.e',29).
% From E: 
% 
% fluent(on(switch)).
mpred_prop(on(switch),fluent).
fluents([on/1]).

% fluent Off(switch)
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/OffOn.e',29).
% From E: 
% 
% fluent(off(switch)).
mpred_prop(off(switch),fluent).
fluents([off/1]).

% event TurnOn(agent,switch)
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/OffOn.e',31).
% From E: 
% 
% event(turnOn(agent,switch)).
events([turnOn/2]).
mpred_prop(turnOn(agent,switch),action).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/OffOn.e',31).
actions([turnOn/2]).

% event TurnOff(agent,switch)
% From E: 
% 
% event(turnOff(agent,switch)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/OffOn.e',31).
events([turnOff/2]).
mpred_prop(turnOff(agent,switch),action).
actions([turnOff/2]).

% noninertial Off
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/OffOn.e',34).
% From E: 
% 
% :-call_pel_directive(noninertial(off)).
:- call_pel_directive(noninertial(off)).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/OffOn.e',36).
% [switch,time]
 % HoldsAt(Off(switch),time) <-> !HoldsAt(On(switch),time).
% From E: 
% 
% <->(
%    holds_at(off(Switch),Time), 
%    holds_at(not(on(Switch)),Time)).
 %   [Time].
not on(Switch)if off(Switch).
 %  l_int(holds(not(on(Switch)),Time_At),[off(Switch)]).
 %  "% =================================".
if not on(Switch)then off(Switch).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/OffOn.e',36).

 /*  reactive_rule([holds(not(on(Switch)),Time_At3)],
   	      [off(Switch)]).
 */
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/OffOn.e',38).
% [agent,switch,time]
 % Initiates(TurnOn(agent,switch),On(switch),time).
% From E: 
% 
% initiates_at(
%    turnOn(Agent,Switch), 
%    on(Switch), 
%    Time).
 %   [Time].
turnOn(Agent, Switch)initiates on(Switch).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/OffOn.e',38).

 /*  initiated(happens(turnOn(Agent,Switch),
   		  Time_From,
   		  Time_Until),
   	  on(Switch),
   	  []).
 */
 %  "% =================================".


% [agent,switch,time]
 % Terminates(TurnOff(agent,switch),On(switch),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/OffOn.e',38).
% From E: 
% 
% terminates_at(
%    turnOff(Agent,Switch), 
%    on(Switch), 
%    Time).
 %   [Time].
turnOff(Agent, Switch)terminates on(Switch).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/OffOn.e',38).

 /*  terminated(happens(turnOff(Agent,Switch),
   		   Time_From,
   		   Time_Until),
   	   on(Switch),
   	   []).
 */
 %  "% =================================".

% agent James
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/OffOn.e',40).
% From E: 
% 
% t(agent,james).
agent(james).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/OffOn.e',42).
% switch Switch1
% From E: 
% 
% t(switch,switch1).
switch(switch1).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/OffOn.e',44).
% !HoldsAt(On(Switch1),0).
% From E: 
% 
% holds_at(not(on(switch1)),0).
initially not on(switch1).
 %  initial_state([not(on(switch1))]).
 %  "% =================================".


% Happens(TurnOn(James,Switch1),0).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/OffOn.e',44).
% From E: 
% 
% happens_at(turnOn(james,switch1),0).
observe turnOn(james, switch1)at 0.
 %  observe([turnOn(james,switch1)],0).
 %  "% =================================".

% range time 0 1
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/OffOn.e',46).
% From E: 
% 
% :-call_pel_directive(range(time,0,1)).
:- call_pel_directive(range(time, 0, 1)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/OffOn.e',48).
% range offset 1 1
% From E: 
% 
% :-call_pel_directive(range(offset,1,1)).
:- call_pel_directive(range(offset, 1, 1)).
%; End of file.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/OffOn.e',50).
% From E: 
% 
% :-call_pel_directive(translate(ending,'/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/OffOn.e.lps')).
:- call_pel_directive(translate(ending,
                                '/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/OffOn.e.lps')).
