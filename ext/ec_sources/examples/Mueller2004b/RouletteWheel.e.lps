:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/PickUp.e',110).
% From E: 
% 
% :-call_pel_directive(translate(unskipped,'/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/RouletteWheel.e.lps')).
:- call_pel_directive(translate(unskipped,
                                '/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/RouletteWheel.e.lps')).
:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(lps).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/PickUp.e',110).
% From E: 
% 
% :-call_pel_directive(translate(begining,'/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/RouletteWheel.e.lps')).
:- call_pel_directive(translate(begining,
                                '/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/RouletteWheel.e.lps')).
% Sat, 10 Oct 2020 15:32:01 GMT File: <stream>(0x559e4b3ed300)%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @inproceedings{Mueller:2004b,
%;   author = "Erik T. Mueller",
%;   year = "2004",
%;   title = "A tool for satisfiability-based commonsense reasoning in the event calculus",
%;   editor = "Valerie Barr and Zdravko Markov",
%;   booktitle = "\uppercase{P}roceedings of the \uppercase{S}eventeenth \uppercase{I}nternational \uppercase{F}lorida \uppercase{A}rtificial \uppercase{I}ntelligence \uppercase{R}esearch \uppercase{S}ociety \uppercase{C}onference",
%;   pages = "147--152",
%;   address = "Menlo Park, CA",
%;   publisher = "AAAI Press",
%; }
%;

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/RouletteWheel.e',23).
% load foundations/Root.e
% From E: 
% 
% :-call_pel_directive(load('foundations/Root.e')).
:- call_pel_directive(load('foundations/Root.e')).

% load foundations/EC.e
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/RouletteWheel.e',23).
% From E: 
% 
% :-call_pel_directive(load('foundations/EC.e')).
:- call_pel_directive(load('foundations/EC.e')).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/RouletteWheel.e',26).
% sort wheel
% From E: 
% 
% sort(wheel).
sort(wheel).

% sort value: integer
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/RouletteWheel.e',26).
% From E: 
% 
% subsort(value,integer).
subsort(value,integer).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/RouletteWheel.e',29).
% fluent WheelValueDeterminingFluent(wheel,value)
% From E: 
% 
% fluent(wheelValueDeterminingFluent(wheel,value)).
mpred_prop(wheelValueDeterminingFluent(wheel,value),fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/RouletteWheel.e',29).
fluents([wheelValueDeterminingFluent/2]).

% fluent WheelValue(wheel,value)
% From E: 
% 
% fluent(wheelValue(wheel,value)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/RouletteWheel.e',29).
mpred_prop(wheelValue(wheel,value),fluent).
fluents([wheelValue/2]).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/RouletteWheel.e',31).
% noninertial WheelValueDeterminingFluent
% From E: 
% 
% :-call_pel_directive(noninertial(wheelValueDeterminingFluent)).
:- call_pel_directive(noninertial(wheelValueDeterminingFluent)).

% event Spin(wheel)
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/RouletteWheel.e',31).
% From E: 
% 
% event(spin(wheel)).
mpred_prop(spin(wheel),event).
events([spin/1]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/RouletteWheel.e',34).
% [wheel,value1,value2,time]
% HoldsAt(WheelValue(wheel,value1),time) &
% HoldsAt(WheelValue(wheel,value2),time) ->
% value1=value2.
% From E: 
% 
% '->'(
%    (holds_at(wheelValue(Wheel,Value1),Time) , 
%     holds_at(wheelValue(Wheel,Value2),Time)), 
%    Value1=Value2).
 %   [Time].
false not equals(Value1, Value2), wheelValue(Wheel, Value1), wheelValue(Wheel, Value2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/RouletteWheel.e',34).

 /*  d_pre([ not(equals(Value1,Value2)),
   	wheelValue(Wheel,Value1),
   	wheelValue(Wheel,Value2)
         ]).
 */
 %  "% =================================".


% [wheel,value1,value2,time]
% HoldsAt(WheelValueDeterminingFluent(wheel,value1),time) &
% HoldsAt(WheelValueDeterminingFluent(wheel,value2),time) ->
% value1=value2.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/RouletteWheel.e',40).
% From E: 
% 
% '->'(
%    (holds_at(wheelValueDeterminingFluent(Wheel,Value1),Time) , 
%     holds_at(wheelValueDeterminingFluent(Wheel,Value2),Time)), 
%    Value1=Value2).
 %   [Time].
false not equals(Value1, Value2), wheelValueDeterminingFluent(Wheel, Value1), wheelValueDeterminingFluent(Wheel, Value2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/RouletteWheel.e',40).

 /*  d_pre([ not(equals(Value1,Value2)),
   	wheelValueDeterminingFluent(Wheel,Value1),
   	wheelValueDeterminingFluent(Wheel,Value2)
         ]).
 */
 %  "% =================================".


% [wheel,value,time]
% HoldsAt(WheelValueDeterminingFluent(wheel,value),time) ->
% Initiates(Spin(wheel),WheelValue(wheel,value),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/RouletteWheel.e',45).
% From E: 
% 
% '->'(
%    holds_at(wheelValueDeterminingFluent(Wheel,Value),Time), 
%    initiates_at(
%       spin(Wheel), 
%       wheelValue(Wheel,Value), 
%       Time)).
 %   [Time].
spin(Wheel)initiates wheelValue(Wheel, Value)if wheelValueDeterminingFluent(Wheel, Value).

 /*  initiated(happens(spin(Wheel),Time_From,Time_Until),
   	  wheelValue(Wheel,Value),
   	  [wheelValueDeterminingFluent(Wheel,Value)]).
 */
 %  "% =================================".


% [wheel,value1,value2,time]
% HoldsAt(WheelValue(wheel,value1),time) &
% HoldsAt(WheelValueDeterminingFluent(wheel,value2),time) &
% value1!=value2 ->
% Terminates(Spin(wheel),WheelValue(wheel,value1),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/RouletteWheel.e',49).
% From E: 
% 
% '->'(
%    (holds_at(wheelValue(Wheel,Value1),Time) , 
%      holds_at(wheelValueDeterminingFluent(Wheel,Value2),Time) , 
%     Value1\=Value2), 
%    terminates_at(
%       spin(Wheel), 
%       wheelValue(Wheel,Value1), 
%       Time)).
 %   [Time].
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/RouletteWheel.e',49).
wheelValue(Wheel, Value1), wheelValueDeterminingFluent(Wheel, Value2), Value1\=Value2 ->
    terminates(spin(Wheel), wheelValue(Wheel, Value1)).


% [wheel,time]
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/RouletteWheel.e',55).
% {value} % HoldsAt(WheelValueDeterminingFluent(wheel,value),time).
% From E: 
% 
% exists(
%    [Value], 
%    holds_at(wheelValueDeterminingFluent(Wheel,Value),Time)).
 %   [Time].
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/RouletteWheel.e',55).
exists([Value],
 wheelValueDeterminingFluent(Wheel,Value)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/RouletteWheel.e',57).
% wheel Wheel
% From E: 
% 
% t(wheel,wheel).
wheel(wheel).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/RouletteWheel.e',59).
% HoldsAt(WheelValue(Wheel,7),0).
% From E: 
% 
% holds_at(wheelValue(wheel,7),0).
initially wheelValue(wheel, 7).
 %  initial_state([wheelValue(wheel,7)]).
 %  "% =================================".


% Happens(Spin(Wheel),0).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/RouletteWheel.e',59).
% From E: 
% 
% happens_at(spin(wheel),0).
observe spin(wheel)at 0.
 %  observe([spin(wheel)],0).
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/RouletteWheel.e',61).
% HoldsAt(WheelValueDeterminingFluent(Wheel,7),1).
% From E: 
% 
% holds_at(wheelValueDeterminingFluent(wheel,7),1).
holds_at(wheelValueDeterminingFluent(wheel,7),1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/RouletteWheel.e',63).
% completion Happens
% From E: 
% 
% :-call_pel_directive(completion(happens_at)).
:- call_pel_directive(completion(happens_at)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/RouletteWheel.e',65).
% range value 7 10
% From E: 
% 
% :-call_pel_directive(range(value,7,10)).
:- call_pel_directive(range(value, 7, 10)).

% range time 0 1
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/RouletteWheel.e',65).
% From E: 
% 
% :-call_pel_directive(range(time,0,1)).
:- call_pel_directive(range(time, 0, 1)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/RouletteWheel.e',67).
% range offset 1 1
% From E: 
% 
% :-call_pel_directive(range(offset,1,1)).
:- call_pel_directive(range(offset, 1, 1)).
%; End of file.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/RouletteWheel.e',69).
% From E: 
% 
% :-call_pel_directive(translate(ending,'/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/RouletteWheel.e.lps')).
:- call_pel_directive(translate(ending,
                                '/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2004b/RouletteWheel.e.lps')).
