:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Manual/Example4.e',27).
:- call_pel_directive(translate(unskipped,
                                '/pack/logicmoo_ec/ext/ec_sources/examples/MillerShanahan2002/Bowl.pel')).
:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(ecalc).
:- call_pel_directive(translate(begining,
                                '/pack/logicmoo_ec/ext/ec_sources/examples/MillerShanahan2002/Bowl.pel')).
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; \fullciteA[p. 461]{MillerShanahan:2002}
%;
%; @incollection{MillerShanahan:2002,
%;   author = "Rob Miller and Murray Shanahan",
%;   year = "2002",
%;   title = "Some alternative formulations of the event calculus",
%;   editor = "Antonis C. Kakas and Fariba Sadri",
%;   booktitle = "Computational Logic: Logic Programming and Beyond: Essays in Honour of \uppercase{R}obert \uppercase{A}. \uppercase{K}owalski, Part \uppercase{II}",
%;   series = "Lecture Notes in Computer Science",
%;   volume = "2408",
%;   pages = "452--490",
%;   address = "Berlin",
%;   publisher = "Springer",
%; }
%;

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/MillerShanahan2002/Bowl.e',27).
% load foundations/Root.e
:- call_pel_directive(load('foundations/Root.e')).

% load foundations/EC.e
:- call_pel_directive(load('foundations/EC.e')).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/MillerShanahan2002/Bowl.e',30).
% event LiftLeft()
event(liftLeft()).

% event LiftRight()
event(liftRight()).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/MillerShanahan2002/Bowl.e',32).
% fluent Spilt()
fluent(spilt()).

% fluent Raised()
fluent(raised()).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/MillerShanahan2002/Bowl.e',35).
% [time]
% !Happens(LiftRight(), time) ->
% Initiates(LiftLeft(), Spilt(), time).
not(happens_at(liftRight(), Time)) ->
    initiates_at(liftLeft(), spilt(), Time).


% [time]
% !Happens(LiftLeft(), time) ->
% Initiates(LiftRight(), Spilt(), time).
not(happens_at(liftLeft(), Time)) ->
    initiates_at(liftRight(), spilt(), Time).


% [time]
% Happens(LiftLeft(), time) ->
% Initiates(LiftRight(), Raised(), time).
happens_at(liftLeft(), Time) ->
    initiates_at(liftRight(), raised(), Time).


% !HoldsAt(Spilt(), 0).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/MillerShanahan2002/Bowl.e',46).
holds_at(not(spilt()),0).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/MillerShanahan2002/Bowl.e',48).
% !HoldsAt(Raised(), 0).
holds_at(not(raised()),0).


% Happens(LiftLeft(), 2).
happens_at(liftLeft(),2).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/MillerShanahan2002/Bowl.e',50).
% Happens(LiftRight(), 2).
happens_at(liftRight(),2).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/MillerShanahan2002/Bowl.e',52).
% completion Happens
:- call_pel_directive(completion(happens_at)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/MillerShanahan2002/Bowl.e',54).
% range time 0 3
:- call_pel_directive(range(time, 0, 3)).

% range offset 1 1
:- call_pel_directive(range(offset, 1, 1)).
%; End of file.
:- call_pel_directive(translate(ending,
                                '/pack/logicmoo_ec/ext/ec_sources/examples/MillerShanahan2002/Bowl.pel')).
