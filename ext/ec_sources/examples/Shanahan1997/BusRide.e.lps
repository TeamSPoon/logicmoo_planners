:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ReiterCriscuolo1981/NixonDiamond2.e',71).
% From E: 
% 
% :-call_pel_directive(translate(unskipped,'/pack/logicmoo_ec/ext/ec_sources/examples/Shanahan1997/BusRide.e.lps')).
:- call_pel_directive(translate(unskipped,
                                '/pack/logicmoo_ec/ext/ec_sources/examples/Shanahan1997/BusRide.e.lps')).
:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(lps).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ReiterCriscuolo1981/NixonDiamond2.e',71).
% From E: 
% 
% :-call_pel_directive(translate(begining,'/pack/logicmoo_ec/ext/ec_sources/examples/Shanahan1997/BusRide.e.lps')).
:- call_pel_directive(translate(begining,
                                '/pack/logicmoo_ec/ext/ec_sources/examples/Shanahan1997/BusRide.e.lps')).
% Sat, 10 Oct 2020 15:32:02 GMT File: <stream>(0x559e4af5bc00)%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{Kartha:1994,
%;   author = "G. Neelakantan Kartha",
%;   year = "1994",
%;   title = "Two counterexamples related to \uppercase{B}aker's approach to the frame problem",
%;   journal = "Artificial Intelligence",
%;   volume = "69",
%;   number = "1--2",
%;   pages = "379--391",
%; }
%;
%; \fullciteA[pp. 359--361]{Shanahan:1997}
%;
%; @book{Shanahan:1997,
%;   author = "Murray Shanahan",
%;   year = "1997",
%;   title = "Solving the Frame Problem",
%;   address = "Cambridge, MA",
%;   publisher = "MIT Press",
%; }
%;
%; modifications from Shanahan's formulation:
%; InitiallyN -> !HoldsAt
%; timestamps
%;

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Shanahan1997/BusRide.e',36).
% load foundations/Root.e
% From E: 
% 
% :-call_pel_directive(load('foundations/Root.e')).
:- call_pel_directive(load('foundations/Root.e')).

% load foundations/EC.e
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Shanahan1997/BusRide.e',36).
% From E: 
% 
% :-call_pel_directive(load('foundations/EC.e')).
:- call_pel_directive(load('foundations/EC.e')).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Shanahan1997/BusRide.e',39).
% fluent HasTicket()
% From E: 
% 
% fluent(hasTicket()).
fluents([hasTicket/0]).

% fluent OnRed()
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Shanahan1997/BusRide.e',39).
% From E: 
% 
% fluent(onRed()).
fluents([onRed/0]).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Shanahan1997/BusRide.e',41).
% fluent OnYellow()
% From E: 
% 
% fluent(onYellow()).
fluents([onYellow/0]).

% event Buy()
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Shanahan1997/BusRide.e',41).
% From E: 
% 
% event(buy()).
events([buy/0]).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Shanahan1997/BusRide.e',43).
% event Board()
% From E: 
% 
% event(board()).
events([board/0]).

% event BoardRed()
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Shanahan1997/BusRide.e',43).
% From E: 
% 
% event(boardRed()).
events([boardRed/0]).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Shanahan1997/BusRide.e',45).
% event BoardYellow()
% From E: 
% 
% event(boardYellow()).
events([boardYellow/0]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Shanahan1997/BusRide.e',47).
% [time]
 % Happens(Board(),time) -> Happens(BoardRed(),time) | Happens(BoardYellow(),time).
% From E: 
% 
% '->'(
%    happens_at(board(),Time), 
%    (happens_at(boardRed(),Time) ; 
%     happens_at(boardYellow(),Time))).
 %   [Time].
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Shanahan1997/BusRide.e',47).
board ->
    false((not(boardRed), not(boardYellow))).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Shanahan1997/BusRide.e',49).
% [time]
 % Initiates(Buy(),HasTicket(),time).
% From E: 
% 
% initiates_at(buy(),hasTicket(),Time).
 %   [Time].
buy initiates hasTicket.
 %  initiated(happens(buy,Time_From,Time_Until),hasTicket,[]).
 %  "% =================================".


% [time]
 % HoldsAt(HasTicket(),time) -> Initiates(BoardRed(),OnRed(),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Shanahan1997/BusRide.e',49).
% From E: 
% 
% '->'(
%    holds_at(hasTicket(),Time), 
%    initiates_at(boardRed(),onRed(),Time)).
 %   [Time].
boardRed initiates onRed if hasTicket.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Shanahan1997/BusRide.e',49).

 /*  initiated(happens(boardRed,Time_From,Time_Until),
   	  onRed,
   	  [holds(hasTicket,Time_From)]).
 */
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Shanahan1997/BusRide.e',51).
% [time]
 % HoldsAt(HasTicket(),time) -> Initiates(BoardYellow(),OnYellow(),time).
% From E: 
% 
% '->'(
%    holds_at(hasTicket(),Time), 
%    initiates_at(boardYellow(),onYellow(),Time)).
 %   [Time].
boardYellow initiates onYellow if hasTicket.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Shanahan1997/BusRide.e',51).

 /*  initiated(happens(boardYellow,Time_From,Time_Until),
   	  onYellow,
   	  [holds(hasTicket,Time_From)]).
 */
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Shanahan1997/BusRide.e',53).
% [time]
 % !(HoldsAt(OnRed(),time) & HoldsAt(OnYellow(),time)).
% From E: 
% 
% not(
%    (holds_at(onRed(),Time) , 
%     holds_at(onYellow(),Time))).
 %   [Time].
false onRed, onYellow.
 %  d_pre([holds(onRed,Time_At),holds(onYellow,Time_At)]).
 %  "% =================================".


% [time]
 % HoldsAt(OnRed(),time) -> HoldsAt(HasTicket(),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Shanahan1997/BusRide.e',53).
% From E: 
% 
% '->'(
%    holds_at(onRed(),Time), 
%    holds_at(hasTicket(),Time)).
 %   [Time].
hasTicket if onRed.
 %  l_int(holds(hasTicket,Time_At),[holds(onRed,Time_At)]).
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Shanahan1997/BusRide.e',55).
% [time]
 % HoldsAt(OnYellow(),time) -> HoldsAt(HasTicket(),time).
% From E: 
% 
% '->'(
%    holds_at(onYellow(),Time), 
%    holds_at(hasTicket(),Time)).
 %   [Time].
hasTicket if onYellow.
 %  l_int(holds(hasTicket,Time_At),[holds(onYellow,Time_At)]).
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Shanahan1997/BusRide.e',57).
% HoldsAt(OnRed(),2).
% From E: 
% 
% holds_at(onRed(),2).
holds_at(onRed,2).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Shanahan1997/BusRide.e',59).
% !HoldsAt(HasTicket(),0).
% From E: 
% 
% holds_at(not(hasTicket()),0).
initially not hasTicket.
 %  initial_state([not(hasTicket)]).
 %  "% =================================".


% Happens(Buy(),0).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Shanahan1997/BusRide.e',59).
% From E: 
% 
% happens_at(buy(),0).
observe buy at 0.
 %  observe([buy],0).
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Shanahan1997/BusRide.e',61).
% Happens(Board(),1).
% From E: 
% 
% happens_at(board(),1).
observe board at 1.
 %  observe([board],1).
 %  "% =================================".


%; ABDUCED Happens(BoardRed(), 1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Shanahan1997/BusRide.e',64).
% completion Happens
% From E: 
% 
% :-call_pel_directive(completion(happens_at)).
:- call_pel_directive(completion(happens_at)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Shanahan1997/BusRide.e',66).
% range time 0 2
% From E: 
% 
% :-call_pel_directive(range(time,0,2)).
:- call_pel_directive(range(time, 0, 2)).

% range offset 1 1
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Shanahan1997/BusRide.e',66).
% From E: 
% 
% :-call_pel_directive(range(offset,1,1)).
:- call_pel_directive(range(offset, 1, 1)).
%; End of file.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Shanahan1997/BusRide.e',69).
% From E: 
% 
% :-call_pel_directive(translate(ending,'/pack/logicmoo_ec/ext/ec_sources/examples/Shanahan1997/BusRide.e.lps')).
:- call_pel_directive(translate(ending,
                                '/pack/logicmoo_ec/ext/ec_sources/examples/Shanahan1997/BusRide.e.lps')).
