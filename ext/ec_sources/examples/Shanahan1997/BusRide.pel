:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/ReiterCriscuolo1981/NixonDiamond2.e',71).
:- call_pel_directive(translate(unskipped,
                                '/pack/logicmoo_ec/ext/ec_sources/examples/Shanahan1997/BusRide.pel')).
:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(ecalc).
:- call_pel_directive(translate(begining,
                                '/pack/logicmoo_ec/ext/ec_sources/examples/Shanahan1997/BusRide.pel')).
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{Kartha:1994,
%;   author = "G. Neelakantan Kartha",
%;   year = "1994",
%;   title = "Two counterexamples related to \uppercase{B}aker's approach to the frame problem",
%;   journal = "Artificial Intelligence",
%;   volume = "69",
%;   number = "1--2",
%;   pages = "379--391",
%; }
%;
%; \fullciteA[pp. 359--361]{Shanahan:1997}
%;
%; @book{Shanahan:1997,
%;   author = "Murray Shanahan",
%;   year = "1997",
%;   title = "Solving the Frame Problem",
%;   address = "Cambridge, MA",
%;   publisher = "MIT Press",
%; }
%;
%; modifications from Shanahan's formulation:
%; InitiallyN -> !HoldsAt
%; timestamps
%;

% load foundations/Root.e
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Shanahan1997/BusRide.e',36).
:- call_pel_directive(load('foundations/Root.e')).

% load foundations/EC.e
:- call_pel_directive(load('foundations/EC.e')).

% fluent HasTicket()
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Shanahan1997/BusRide.e',39).
fluent(hasTicket()).

% fluent OnRed()
fluent(onRed()).

% fluent OnYellow()
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Shanahan1997/BusRide.e',41).
fluent(onYellow()).

% event Buy()
event(buy()).

% event Board()
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Shanahan1997/BusRide.e',43).
event(board()).

% event BoardRed()
event(boardRed()).

% event BoardYellow()
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Shanahan1997/BusRide.e',45).
event(boardYellow()).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Shanahan1997/BusRide.e',47).
% [time]
 % Happens(Board(),time) -> Happens(BoardRed(),time) | Happens(BoardYellow(),time).
happens_at(board(), Time) ->
    (   happens_at(boardRed(), Time)
    ;   happens_at(boardYellow(), Time)
    ).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Shanahan1997/BusRide.e',49).
% [time]
 % Initiates(Buy(),HasTicket(),time).
initiates_at(buy(),hasTicket(),Time).


% [time]
 % HoldsAt(HasTicket(),time) -> Initiates(BoardRed(),OnRed(),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Shanahan1997/BusRide.e',49).
holds_at(hasTicket(), Time) ->
    initiates_at(boardRed(), onRed(), Time).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Shanahan1997/BusRide.e',51).
% [time]
 % HoldsAt(HasTicket(),time) -> Initiates(BoardYellow(),OnYellow(),time).
holds_at(hasTicket(), Time) ->
    initiates_at(boardYellow(), onYellow(), Time).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Shanahan1997/BusRide.e',53).
% [time]
 % !(HoldsAt(OnRed(),time) & HoldsAt(OnYellow(),time)).
not(( holds_at(onRed(), Time),
      holds_at(onYellow(), Time)
    )).


% [time]
 % HoldsAt(OnRed(),time) -> HoldsAt(HasTicket(),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Shanahan1997/BusRide.e',53).
holds_at(onRed(), Time) ->
    holds_at(hasTicket(), Time).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Shanahan1997/BusRide.e',55).
% [time]
 % HoldsAt(OnYellow(),time) -> HoldsAt(HasTicket(),time).
holds_at(onYellow(), Time) ->
    holds_at(hasTicket(), Time).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Shanahan1997/BusRide.e',57).
% HoldsAt(OnRed(),2).
holds_at(onRed(),2).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Shanahan1997/BusRide.e',59).
% !HoldsAt(HasTicket(),0).
holds_at(not(hasTicket()),0).


% Happens(Buy(),0).
happens_at(buy(),0).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Shanahan1997/BusRide.e',61).
% Happens(Board(),1).
happens_at(board(),1).


%; ABDUCED Happens(BoardRed(), 1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Shanahan1997/BusRide.e',64).
% completion Happens
:- call_pel_directive(completion(happens_at)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Shanahan1997/BusRide.e',66).
% range time 0 2
:- call_pel_directive(range(time, 0, 2)).

% range offset 1 1
:- call_pel_directive(range(offset, 1, 1)).
%; End of file.
:- call_pel_directive(translate(ending,
                                '/pack/logicmoo_ec/ext/ec_sources/examples/Shanahan1997/BusRide.pel')).
