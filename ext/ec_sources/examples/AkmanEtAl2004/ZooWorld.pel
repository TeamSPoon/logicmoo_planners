:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooTest6.e',52).
:- call_pel_directive(translate(unskipped,
                                '/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.pel')).
:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(ecalc).
:- call_pel_directive(translate(begining,
                                '/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.pel')).
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{Akman:2004,
%;   author = "Varol Akman and Selim T. Erdogan and Joohyung Lee and Vladimir Lifschitz and Hudson Turner",
%;   year = "2004",
%;   title = "Representing the zoo world and the traffic world in the language of the causal calculator",
%;   journal = "Artificial Intelligence",
%;   volume = "153",
%;   pages = "105--140",
%; }
%;

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',21).
% sort position: integer
subsort(position,integer).

% sort location
sort(location).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',23).
% sort cage: location
subsort(cage,location).

% sort gate
sort(gate).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',25).
% sort animal
sort(animal).

% sort elephant: animal
subsort(elephant,animal).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',27).
% sort horse: animal
subsort(horse,animal).

% sort dog: animal
subsort(dog,animal).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',29).
% sort human: animal
subsort(human,animal).

% sort species
sort(species).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',32).
% function Loc(position): location
function(loc(position),location).

% function Side1(gate): position
function(side1(gate),position).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',34).
% function Side2(gate): position
function(side2(gate),position).

% function Species(animal): species
function(species(animal),species).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',37).
% predicate Accessible(position,position,time)
predicate(accessible(position,position,time)).

% predicate Adult(animal)
predicate(adult(animal)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',39).
% predicate Large(animal)
predicate(large(animal)).

% predicate LargeSpecies(species)
predicate(largeSpecies(species)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',41).
% predicate Neighbor(position,position)
predicate(neighbor(position,position)).

% predicate Sides(position,position,gate)
predicate(sides(position,position,gate)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',44).
% event Close(human,gate)
event(close(human,gate)).

% event GetOff(human,animal)
event(getOff(human,animal)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',46).
% event Mount(human,animal)
event(mount(human,animal)).

% event Move(animal,position)
event(move(animal,position)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',48).
% event Open(human,gate)
event(open(human,gate)).

% event ThrowOff(animal,human)
event(throwOff(animal,human)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',51).
% fluent AbnormalEncroachment(human)
fluent(abnormalEncroachment(human)).

% noninertial AbnormalEncroachment
:- call_pel_directive(noninertial(abnormalEncroachment)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',53).
% fluent DoneBy(event,animal)
fluent(doneBy(event,animal)).

% noninertial DoneBy
:- call_pel_directive(noninertial(doneBy)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',55).
% fluent Mounted(human,animal)
fluent(mounted(human,animal)).

% fluent MountFails(human)
fluent(mountFails(human)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',57).
% noninertial MountFails
:- call_pel_directive(noninertial(mountFails)).

% fluent Moves(animal)
fluent(moves(animal)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',59).
% noninertial Moves
:- call_pel_directive(noninertial(moves)).

% fluent Opened(gate)
fluent(opened(gate)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',61).
% fluent Pos(animal,position)
fluent(pos(animal,position)).

% fluent PosDeterminingFluent(human,position)
fluent(posDeterminingFluent(human,position)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',63).
% noninertial PosDeterminingFluent
:- call_pel_directive(noninertial(posDeterminingFluent)).

% fluent ThrowOffFails(animal,human)
fluent(throwOffFails(animal,human)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',65).
% noninertial ThrowOffFails
:- call_pel_directive(noninertial(throwOffFails)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',67).
% species HumanSpecies, ElephantSpecies, HorseSpecies, DogSpecies
t(species,humanSpecies).
t(species,elephantSpecies).
t(species,horseSpecies).
t(species,dogSpecies).

% location Outside
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',67).
t(location,outside).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',70).
% LargeSpecies(HumanSpecies).
largeSpecies(humanSpecies).


% LargeSpecies(ElephantSpecies).
largeSpecies(elephantSpecies).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',72).
% LargeSpecies(HorseSpecies).
largeSpecies(horseSpecies).


% !LargeSpecies(DogSpecies).
not(largeSpecies(dogSpecies)).


% [event,animal,time]
% HoldsAt(DoneBy(event,animal),time) <->
% (Happens(event,time) &
%  (({gate} event=Close(animal,gate)) |
%   ({animal1} event=GetOff(animal,animal1))|
%   ({animal1} event=Mount(animal,animal1))|
%   ({position} event=Move(animal,position))|
%   ({gate} event=Open(animal,gate)) |
%   ({human1} event=ThrowOff(animal,human1)))).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',76).
holds_at(doneBy(Event, Animal), Time) <->
    happens_at(Event, Time),
    (   exists([Gate], Event=close(Animal, Gate))
    ;   exists([Animal1], Event=getOff(Animal, Animal1))
    ;   exists([Animal15],
               Event=mount(Animal, Animal15))
    ;   exists([Position], Event=move(Animal, Position))
    ;   exists([Gate7], Event=open(Animal, Gate7))
    ;   exists([Human1], Event=throwOff(Animal, Human1))
    ).


% [event1,event2,animal,time]
% HoldsAt(DoneBy(event1,animal),time) &
% HoldsAt(DoneBy(event2,animal),time) ->
% event1=event2.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',86).
holds_at(doneBy(Event1, Animal), Time), holds_at(doneBy(Event2, Animal), Time) ->
    Event1=Event2.


% [animal]
 % Large(animal) <-> (Adult(animal) & LargeSpecies(Species(animal))).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',89).
large(Animal) <->
    adult(Animal),
    largeSpecies(species(Animal)).


% [position]
 % {position1} % position1!=% position & Neighbor(position,position1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',91).
exists([Position1],  (Position1\=Position, neighbor(Position, Position1))).


% [position]
 % !Neighbor(position,position).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',93).
not(neighbor(Position,Position)).


% [position1,position2]
% Neighbor(position1,position2) ->
% Neighbor(position2,position1).
neighbor(Position1, Position2) ->
    neighbor(Position2, Position1).


% [cage]
 % cage!=% Outside.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',99).
Cage\=outside.


% [position1,position2,gate]
% Sides(position1,position2,gate) <->
% ((Side1(gate)=position1 &
%   Side2(gate)=position2) |
%  (Side2(gate)=position1 &
%   Side1(gate)=position2)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',103).
sides(Position1, Position2, Gate) <->
    (   side1(Gate)=Position1,
        side2(Gate)=Position2
    ;   side2(Gate)=Position1,
        side1(Gate)=Position2
    ).


% [gate]
 % Loc(Side1(gate))!=Loc(Side2(gate)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',108).
loc(side1(Gate))\=loc(side2(Gate)).


% [position1,position2,gate1,gate2]
% Sides(position1,position2,gate1) &
% Sides(position1,position2,gate2) ->
% gate1=gate2.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',112).
sides(Position1, Position2, Gate1), sides(Position1, Position2, Gate2) ->
    Gate1=Gate2.


% [position1,position2,gate]
% Sides(position1,position2,gate) ->
% Neighbor(position1,position2).
sides(Position1, Position2, Gate) ->
    neighbor(Position1, Position2).


% [position1,position2]
% Loc(position1) != Loc(position2) &
% Neighbor(position1,position2) ->
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',121).
% {gate}%  Sides(position1,position2,gate).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',123).
exists([Gate],  (loc(Position1)\=loc(Position2), neighbor(Position1, Position2)->sides(Position1, Position2, Gate))).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',125).
% [animal,position1,position2,time]
% HoldsAt(Pos(animal,position1),time) &
% HoldsAt(Pos(animal,position2),time) ->
% position1=position2.
holds_at(pos(Animal, Position1), Time), holds_at(pos(Animal, Position2), Time) ->
    Position1=Position2.


% [animal,time]
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',131).
% {position} % HoldsAt(Pos(animal,position),time).
exists([Position],
 holds_at(pos(Animal,Position),Time)).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',133).
% [animal1,animal2,position,time]
% (animal1!=animal2 &
%  Large(animal1) &
%  Large(animal2) &
%  HoldsAt(Pos(animal1,position),time) &
%  HoldsAt(Pos(animal2,position),time)) ->
% (({human} human=animal1 & HoldsAt(Mounted(human,animal2),time)) |
%  ({human} human=animal2 & HoldsAt(Mounted(human,animal1),time))).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',133).
Animal1\=Animal2, large(Animal1), large(Animal2), holds_at(pos(Animal1, Position), Time), holds_at(pos(Animal2, Position), Time) ->
    (   exists([Human],
                (Human=Animal1, holds_at(mounted(Human, Animal2), Time)))
    ;   exists([Human5],
                (Human5=Animal2, holds_at(mounted(Human5, Animal1), Time)))
    ).


% [human,position1,position2,time]
% HoldsAt(PosDeterminingFluent(human,position1),time) &
% HoldsAt(PosDeterminingFluent(human,position2),time) ->
% position1=position2.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',143).
holds_at(posDeterminingFluent(Human, Position1), Time), holds_at(posDeterminingFluent(Human, Position2), Time) ->
    Position1=Position2.


% [animal,position,time]
% Initiates(Move(animal,position),Pos(animal,position),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',148).
initiates_at(move(Animal,Position),
	     pos(Animal,Position),
	     Time).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',150).
% [animal,position1,position2,time]
% HoldsAt(Pos(animal,position1),time) ->
% Terminates(Move(animal,position2),Pos(animal,position1),time).
holds_at(pos(Animal, Position1), Time) ->
    terminates_at(move(Animal, Position2),
                  pos(Animal, Position1),
                  Time).


% [animal,position,time]
% Happens(Move(animal,position),time) ->
% !HoldsAt(Pos(animal,position),time).
happens_at(move(Animal, Position), Time) ->
    holds_at(not(pos(Animal, Position)), Time).


% [human,position,time]
% Happens(Move(human,position),time) ->
% !{animal} HoldsAt(Mounted(human,animal),time).
happens_at(move(Human, Position), Time) ->
    not(exists([Animal],
               holds_at(mounted(Human, Animal), Time))).


% [human,gate,time]
% Initiates(Open(human,gate),Opened(gate),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',163).
initiates_at(open(Human,Gate),
	     opened(Gate),
	     Time).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',165).
% [human,gate,time]
% Happens(Open(human,gate),time) ->
% !HoldsAt(Opened(gate),time) &
% (!{animal} HoldsAt(Mounted(human,animal),time)) &
% ({position}
%  (Side1(gate)=position | Side2(gate)=position) &
%  HoldsAt(Pos(human,position),time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',165).
happens_at(open(Human, Gate), Time) ->
    holds_at(not(opened(Gate)), Time),
    not(exists([Animal],
               holds_at(mounted(Human, Animal), Time))),
    exists([Position],
            ((side1(Gate)=Position;side2(Gate)=Position), holds_at(pos(Human, Position), Time))).


% [human,gate,time]
% Terminates(Close(human,gate),Opened(gate),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',174).
terminates_at(close(Human,Gate),
	      opened(Gate),
	      Time).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',176).
% [human,gate,time]
% Happens(Close(human,gate),time) ->
% HoldsAt(Opened(gate),time) &
% (!{animal} HoldsAt(Mounted(human,animal),time)) &
% {position}% 
% (Side1(gate)=position | Side2(gate)=position) &
% HoldsAt(Pos(human,position),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',180).
exists([Position],  (happens_at(close(Human, Gate), Time)->holds_at(opened(Gate), Time), not(exists([Animal], holds_at(mounted(Human, Animal), Time))), (side1(Gate)=Position;side2(Gate)=Position), holds_at(pos(Human, Position), Time))).


% [human,animal,position,time]
% HoldsAt(Mounted(human,animal),time) &
% HoldsAt(Pos(animal,position),time) ->
% HoldsAt(Pos(human,position),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',185).
holds_at(mounted(Human, Animal), Time), holds_at(pos(Animal, Position), Time) ->
    holds_at(pos(Human, Position), Time).


% [animal,time]
% HoldsAt(Moves(animal),time) <->
% ({position}
%  HoldsAt(Pos(animal,position),time) &
%  !HoldsAt(Pos(animal,position),time+1)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',190).
holds_at(moves(Animal), Time) <->
    exists([Position],
            (holds_at(pos(Animal, Position), Time), holds_at(not(pos(Animal, Position)), Time+1))).


% [human,time]
% HoldsAt(MountFails(human),time) <->
% ({animal}
%   Happens(Mount(human,animal),time) &
%   HoldsAt(Moves(animal),time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',196).
holds_at(mountFails(Human), Time) <->
    exists([Animal],
            (happens_at(mount(Human, Animal), Time), holds_at(moves(Animal), Time))).


% [human,animal,position,time]
% !HoldsAt(Moves(animal),time) ->
% Releases(Mount(human,animal),Pos(human,position),time).
holds_at(not(moves(Animal)), Time) ->
    releases_at(mount(Human, Animal),
                pos(Human, Position),
                Time).


% [human,animal,time]
% !HoldsAt(Moves(animal),time) ->
% Initiates(Mount(human,animal),Mounted(human,animal),time).
holds_at(not(moves(Animal)), Time) ->
    initiates_at(mount(Human, Animal),
                 mounted(Human, Animal),
                 Time).


% [human,animal,position,time]
% HoldsAt(Pos(animal,position),time) &
% HoldsAt(Moves(animal),time) ->
% Initiates(Mount(human,animal),Pos(human,position),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',210).
holds_at(pos(Animal, Position), Time), holds_at(moves(Animal), Time) ->
    initiates_at(mount(Human, Animal),
                 pos(Human, Position),
                 Time).


% [human,animal,position,time]
% HoldsAt(Pos(human,position),time) &
% HoldsAt(Moves(animal),time) ->
% Terminates(Mount(human,animal),Pos(human,position),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',215).
holds_at(pos(Human, Position), Time), holds_at(moves(Animal), Time) ->
    terminates_at(mount(Human, Animal),
                  pos(Human, Position),
                  Time).


% [human,animal,time]
% Happens(Mount(human,animal),time) ->
% Large(animal).
happens_at(mount(Human, Animal), Time) ->
    large(Animal).


% [human,animal,time]
% HoldsAt(Mounted(human,animal),time) ->
% Large(animal).
holds_at(mounted(Human, Animal), Time) ->
    large(Animal).


% [human1,human2,time]
% Happens(Mount(human1,human2),time) ->
% !Large(human1).
happens_at(mount(Human1, Human2), Time) ->
    not(large(Human1)).


% [human1,human2,time]
% HoldsAt(Mounted(human1,human2),time) ->
% !Large(human1).
holds_at(mounted(Human1, Human2), Time) ->
    not(large(Human1)).


% [human,animal,time]
% Happens(Mount(human,animal),time) ->
% !{human1} human1!=human & HoldsAt(Mounted(human1,animal),time).
happens_at(mount(Human, Animal), Time) ->
    not(exists([Human1],
                (Human1\=Human, holds_at(mounted(Human1, Animal), Time)))).


% [human1,human2,animal,time]
% HoldsAt(Mounted(human1,animal),time) &
% HoldsAt(Mounted(human2,animal),time) ->
% human1=human2.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',240).
holds_at(mounted(Human1, Animal), Time), holds_at(mounted(Human2, Animal), Time) ->
    Human1=Human2.


% [human,animal,time]
% Happens(Mount(human,animal),time) ->
% !{human1} human1!=human & HoldsAt(Mounted(human1,human),time).
happens_at(mount(Human, Animal), Time) ->
    not(exists([Human1],
                (Human1\=Human, holds_at(mounted(Human1, Human), Time)))).


% [human1,human2,time]
% Happens(Mount(human1,human2),time) ->
% {animal}%  HoldsAt(Mounted(human2,animal),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',249).
exists([Animal],  (happens_at(mount(Human1, Human2), Time)->holds_at(mounted(Human2, Animal), Time))).


% [human1,human2,time]
% HoldsAt(Mounted(human1,human2),time) ->
% !{animal} HoldsAt(Mounted(human2,animal),time).
holds_at(mounted(Human1, Human2), Time) ->
    not(exists([Animal],
               holds_at(mounted(Human2, Animal), Time))).


% [human,animal,time]
% Happens(Mount(human,animal),time) ->
% !{animal1} HoldsAt(Mounted(human,animal1),time).
happens_at(mount(Human, Animal), Time) ->
    not(exists([Animal1],
               holds_at(mounted(Human, Animal1), Time))).


% [human,animal,time]
% !HoldsAt(Moves(animal),time) ->
% Terminates(GetOff(human,animal),Mounted(human,animal),time).
holds_at(not(moves(Animal)), Time) ->
    terminates_at(getOff(Human, Animal),
                  mounted(Human, Animal),
                  Time).


% [human,animal,position,time]
% !HoldsAt(Moves(animal),time) &
% HoldsAt(PosDeterminingFluent(human,position),time) ->
% Initiates(GetOff(human,animal),Pos(human,position),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',265).
holds_at(not(moves(Animal)), Time), holds_at(posDeterminingFluent(Human, Position), Time) ->
    initiates_at(getOff(Human, Animal),
                 pos(Human, Position),
                 Time).


% [human,animal,position,time]
% !HoldsAt(Moves(animal),time) &
% HoldsAt(Pos(human,position),time) ->
% Terminates(GetOff(human,animal),Pos(human,position),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',270).
holds_at(not(moves(Animal)), Time), holds_at(pos(Human, Position), Time) ->
    terminates_at(getOff(Human, Animal),
                  pos(Human, Position),
                  Time).


% [human,animal,position1,position2,time]
% !HoldsAt(Moves(animal),time) &
% HoldsAt(Pos(human,position1),time) &
% position1!=position2 ->
% Terminates(GetOff(human,animal),Pos(human,position2),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',275).
holds_at(not(moves(Animal)), Time), holds_at(pos(Human, Position1), Time), Position1\=Position2 ->
    terminates_at(getOff(Human, Animal),
                  pos(Human, Position2),
                  Time).


% [human,animal,time]
% Happens(GetOff(human,animal),time) ->
% HoldsAt(Mounted(human,animal),time).
happens_at(getOff(Human, Animal), Time) ->
    holds_at(mounted(Human, Animal), Time).


% [animal1,human,time]
% HoldsAt(ThrowOffFails(animal1,human),time) <->
% ({position,animal2}
%  animal2!=human &
%  HoldsAt(PosDeterminingFluent(human,position),time) &
%  Large(animal2) &
%  HoldsAt(Pos(animal2,position),time+1)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',285).
holds_at(throwOffFails(Animal1, Human), Time) <->
    exists([Position, Animal2],
            (Animal2\=Human, holds_at(posDeterminingFluent(Human, Position), Time), large(Animal2), holds_at(pos(Animal2, Position), Time+1))).


% [animal,human,position,time]
% HoldsAt(PosDeterminingFluent(human,position),time) &
% !HoldsAt(ThrowOffFails(animal,human),time) ->
% Initiates(ThrowOff(animal,human),Pos(human,position),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',293).
holds_at(posDeterminingFluent(Human, Position), Time), holds_at(not(throwOffFails(Animal, Human)), Time) ->
    initiates_at(throwOff(Animal, Human),
                 pos(Human, Position),
                 Time).


% [animal,human,position,time]
% HoldsAt(Pos(human,position),time) &
% !HoldsAt(ThrowOffFails(animal,human),time) ->
% Terminates(ThrowOff(animal,human),Pos(human,position),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',298).
holds_at(pos(Human, Position), Time), holds_at(not(throwOffFails(Animal, Human)), Time) ->
    terminates_at(throwOff(Animal, Human),
                  pos(Human, Position),
                  Time).


% [animal,human,position1,position2,time]
% !HoldsAt(ThrowOffFails(animal,human),time) &
% HoldsAt(Pos(human,position1),time) &
% !HoldsAt(PosDeterminingFluent(human,position2),time) &
% position1!=position2 ->
% Terminates(ThrowOff(animal,human),Pos(human,position2),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',303).
holds_at(not(throwOffFails(Animal, Human)), Time), holds_at(pos(Human, Position1), Time), holds_at(not(posDeterminingFluent(Human, Position2)), Time), Position1\=Position2 ->
    terminates_at(throwOff(Animal, Human),
                  pos(Human, Position2),
                  Time).


% [human,time]
% (!{animal} Happens(ThrowOff(animal,human),time) |
%            Happens(GetOff(human,animal),time)) ->
% HoldsAt(PosDeterminingFluent(human,1),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',310).
not(exists([Animal],  (happens_at(throwOff(Animal, Human), Time);happens_at(getOff(Human, Animal), Time)))) ->
    holds_at(posDeterminingFluent(Human, 1), Time).


% [human,position,animal1,animal2,time]
% HoldsAt(PosDeterminingFluent(human,position),time) &
% HoldsAt(ThrowOffFails(animal1,human),time) &
% HoldsAt(Pos(animal2,position),time) ->
% Initiates(ThrowOff(animal1,human),Mounted(human,animal2),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',315).
holds_at(posDeterminingFluent(Human, Position), Time), holds_at(throwOffFails(Animal1, Human), Time), holds_at(pos(Animal2, Position), Time) ->
    initiates_at(throwOff(Animal1, Human),
                 mounted(Human, Animal2),
                 Time).


% [human,animal,time]
% !HoldsAt(ThrowOffFails(animal,human),time) ->
% Terminates(ThrowOff(animal,human),Mounted(human,animal),time).
holds_at(not(throwOffFails(Animal, Human)), Time) ->
    terminates_at(throwOff(Animal, Human),
                  mounted(Human, Animal),
                  Time).


% [animal,human,time]
% Happens(ThrowOff(animal,human),time) ->
% HoldsAt(Mounted(human,animal),time).
happens_at(throwOff(Animal, Human), Time) ->
    holds_at(mounted(Human, Animal), Time).


% [animal,human,time]
% Happens(ThrowOff(animal,human),time) ->
% !Happens(GetOff(human,animal),time).
happens_at(throwOff(Animal, Human), Time) ->
    not(happens_at(getOff(Human, Animal), Time)).


% [animal,human,time]
% Happens(GetOff(human,animal),time) ->
% !Happens(ThrowOff(animal,human),time).
happens_at(getOff(Human, Animal), Time) ->
    not(happens_at(throwOff(Animal, Human), Time)).


% [position1,position2,time]
% Accessible(position1,position2,time) <->
% (Neighbor(position1,position2) &
%  !{gate} Sides(position1,position2,gate) &
%          !HoldsAt(Opened(gate),time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',337).
accessible(Position1, Position2, Time) <->
    not(exists([Gate],
                (neighbor(Position1, Position2), sides(Position1, Position2, Gate), holds_at(not(opened(Gate)), Time)))).


% [animal,position1,position2,time]
% (position1!=position2 &
%  HoldsAt(Pos(animal,position1),time) &
%  HoldsAt(Pos(animal,position2),time+1)) ->
% Accessible(position1,position2,time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',343).
Position1\=Position2, holds_at(pos(Animal, Position1), Time), holds_at(pos(Animal, Position2), Time+1) ->
    accessible(Position1, Position2, Time).


% [human,time]
% HoldsAt(AbnormalEncroachment(human),time) <->
% (HoldsAt(MountFails(human),time) |
%  ({position,animal1,animal2}
%    HoldsAt(PosDeterminingFluent(human,position),time) &
%    !HoldsAt(ThrowOffFails(animal2,human),time) &
%    Happens(ThrowOff(animal2,human),time) &
%    animal1!=human &
%    Large(animal1) &
%    HoldsAt(Pos(animal1,position),time) &
%    !HoldsAt(Pos(animal1,position),time+1))).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',349).
holds_at(abnormalEncroachment(Human), Time) <->
    (   holds_at(mountFails(Human), Time)
    ;   exists([Position, Animal1, Animal2],
                (holds_at(posDeterminingFluent(Human, Position), Time), holds_at(not(throwOffFails(Animal2, Human)), Time), happens_at(throwOff(Animal2, Human), Time), Animal1\=Human, large(Animal1), holds_at(pos(Animal1, Position), Time), holds_at(not(pos(Animal1, Position)), Time+1)))
    ).


% [animal1,animal2,position,time]
% HoldsAt(Pos(animal1,position),time) &
% !HoldsAt(Pos(animal1,position),time+1) &
% !HoldsAt(Pos(animal2,position),time) &
% HoldsAt(Pos(animal2,position),time+1) ->
% (!Large(animal1) |
%  !Large(animal2) |
%  ({human} human=animal2 & HoldsAt(AbnormalEncroachment(human),time))).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',361).
holds_at(pos(Animal1, Position), Time), holds_at(not(pos(Animal1, Position)), Time+1), holds_at(not(pos(Animal2, Position)), Time), holds_at(pos(Animal2, Position), Time+1) ->
    (   not(large(Animal1))
    ;   not(large(Animal2))
    ;   exists([Human],
                (Human=Animal2, holds_at(abnormalEncroachment(Human), Time)))
    ).


% [animal1,animal2,position1,position2,time]
% animal1!=% animal2 &
% Large(animal1) & Large(animal2) &
% HoldsAt(Pos(animal1,position1),time) &
% HoldsAt(Pos(animal1,position2),time+1) &
% HoldsAt(Pos(animal2,position1),time) &
% HoldsAt(Pos(animal2,position2),time+1) ->
% !{gate} Sides(position1,position2,gate).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',370).
Animal1\=Animal2, large(Animal1), large(Animal2), holds_at(pos(Animal1, Position1), Time), holds_at(pos(Animal1, Position2), Time+1), holds_at(pos(Animal2, Position1), Time), holds_at(pos(Animal2, Position2), Time+1) ->
    not(exists([Gate], sides(Position1, Position2, Gate))).


% [animal1,animal2,position1,position2,time]
% animal1!=% animal2 &
% Large(animal1) & Large(animal2) &
% HoldsAt(Pos(animal1,position1),time) &
% HoldsAt(Pos(animal1,position2),time+1) &
% HoldsAt(Pos(animal2,position2),time) &
% HoldsAt(Pos(animal2,position1),time+1) ->
% !{gate} Sides(position1,position2,gate).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',379).
Animal1\=Animal2, large(Animal1), large(Animal2), holds_at(pos(Animal1, Position1), Time), holds_at(pos(Animal1, Position2), Time+1), holds_at(pos(Animal2, Position2), Time), holds_at(pos(Animal2, Position1), Time+1) ->
    not(exists([Gate], sides(Position1, Position2, Gate))).


% [gate,position1,position2,time]
% HoldsAt(Opened(gate),time) &
% !HoldsAt(Opened(gate),time+1) &
% Sides(position1,position2,gate) ->
% !{animal}
% HoldsAt(Pos(animal,position1),time) &
% HoldsAt(Pos(animal,position2),time+1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',388).
holds_at(opened(Gate), Time), holds_at(not(opened(Gate)), Time+1), sides(Position1, Position2, Gate) ->
    not(exists([Animal],
                (holds_at(pos(Animal, Position1), Time), holds_at(pos(Animal, Position2), Time+1)))).

% gate GateAO
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',394).
t(gate,gateAO).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',396).
% cage CageA
t(cage,cageA).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',398).
% Loc(1)=CageA.
loc(1)=cageA.


% Loc(2)=CageA.
loc(2)=cageA.


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',400).
% Loc(3)=CageA.
loc(3)=cageA.


% Loc(4)=CageA.
loc(4)=cageA.


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',402).
% Loc(5)=Outside.
loc(5)=outside.


% Loc(6)=Outside.
loc(6)=outside.


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',404).
% Loc(7)=Outside.
loc(7)=outside.


% Loc(8)=Outside.
loc(8)=outside.


% [position1,position2]
% Neighbor(position1,position2) <->
% ((position1=1 & position2=2) |
%  (position1=1 & position2=3) |
%  (position1=1 & position2=4) |
%  (position1=2 & position2=3) |
%  (position1=2 & position2=4) |
%  (position1=3 & position2=4) |
%  (position1=5 & position2=6) |
%  (position1=5 & position2=7) |
%  (position1=5 & position2=8) |
%  (position1=6 & position2=7) |
%  (position1=6 & position2=8) |
%  (position1=7 & position2=8) |
%  (position2=1 & position1=2) |
%  (position2=1 & position1=3) |
%  (position2=1 & position1=4) |
%  (position2=2 & position1=3) |
%  (position2=2 & position1=4) |
%  (position2=3 & position1=4) |
%  (position2=5 & position1=6) |
%  (position2=5 & position1=7) |
%  (position2=5 & position1=8) |
%  (position2=6 & position1=7) |
%  (position2=6 & position1=8) |
%  (position2=7 & position1=8) |
%  (position1=4 & position2=7) |
%  (position2=4 & position1=7)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',408).
neighbor(Position1, Position2) <->
    (   Position1=1,
        Position2=2
    ;   Position1=1,
        Position2=3
    ;   Position1=1,
        Position2=4
    ;   Position1=2,
        Position2=3
    ;   Position1=2,
        Position2=4
    ;   Position1=3,
        Position2=4
    ;   Position1=5,
        Position2=6
    ;   Position1=5,
        Position2=7
    ;   Position1=5,
        Position2=8
    ;   Position1=6,
        Position2=7
    ;   Position1=6,
        Position2=8
    ;   Position1=7,
        Position2=8
    ;   Position2=1,
        Position1=2
    ;   Position2=1,
        Position1=3
    ;   Position2=1,
        Position1=4
    ;   Position2=2,
        Position1=3
    ;   Position2=2,
        Position1=4
    ;   Position2=3,
        Position1=4
    ;   Position2=5,
        Position1=6
    ;   Position2=5,
        Position1=7
    ;   Position2=5,
        Position1=8
    ;   Position2=6,
        Position1=7
    ;   Position2=6,
        Position1=8
    ;   Position2=7,
        Position1=8
    ;   Position1=4,
        Position2=7
    ;   Position2=4,
        Position1=7
    ).


% Side1(GateAO)=4.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',435).
side1(gateAO)=4.


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',437).
% Side2(GateAO)=7.
side2(gateAO)=7.


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',439).
%; End of file.
:- call_pel_directive(translate(ending,
                                '/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.pel')).
