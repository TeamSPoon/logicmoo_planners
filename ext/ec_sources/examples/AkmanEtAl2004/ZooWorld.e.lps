:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooTest6.e',52).
% From E: 
% 
% :-call_pel_directive(translate(unskipped,'/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e.lps')).
:- call_pel_directive(translate(unskipped,
                                '/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e.lps')).
:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(lps).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooTest6.e',52).
% From E: 
% 
% :-call_pel_directive(translate(begining,'/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e.lps')).
:- call_pel_directive(translate(begining,
                                '/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e.lps')).
% Sat, 10 Oct 2020 14:56:20 GMT File: <stream>(0x5597f2be7600)%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{Akman:2004,
%;   author = "Varol Akman and Selim T. Erdogan and Joohyung Lee and Vladimir Lifschitz and Hudson Turner",
%;   year = "2004",
%;   title = "Representing the zoo world and the traffic world in the language of the causal calculator",
%;   journal = "Artificial Intelligence",
%;   volume = "153",
%;   pages = "105--140",
%; }
%;

% sort position: integer
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',21).
% From E: 
% 
% subsort(position,integer).
subsort(position,integer).

% sort location
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',21).
% From E: 
% 
% sort(location).
sort(location).

% sort cage: location
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',23).
% From E: 
% 
% subsort(cage,location).
subsort(cage,location).

% sort gate
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',23).
% From E: 
% 
% sort(gate).
sort(gate).

% sort animal
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',25).
% From E: 
% 
% sort(animal).
sort(animal).

% sort elephant: animal
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',25).
% From E: 
% 
% subsort(elephant,animal).
subsort(elephant,animal).

% sort horse: animal
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',27).
% From E: 
% 
% subsort(horse,animal).
subsort(horse,animal).

% sort dog: animal
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',27).
% From E: 
% 
% subsort(dog,animal).
subsort(dog,animal).

% sort human: animal
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',29).
% From E: 
% 
% subsort(human,animal).
subsort(human,animal).

% sort species
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',29).
% From E: 
% 
% sort(species).
sort(species).

% function Loc(position): location
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',32).
% From E: 
% 
% function(loc(position),location).
function(loc(position),location).

% function Side1(gate): position
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',32).
% From E: 
% 
% function(side1(gate),position).
function(side1(gate),position).

% function Side2(gate): position
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',34).
% From E: 
% 
% function(side2(gate),position).
function(side2(gate),position).

% function Species(animal): species
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',34).
% From E: 
% 
% function(species(animal),species).
function(species(animal),species).

% predicate Accessible(position,position,time)
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',37).
% From E: 
% 
% predicate(accessible(position,position,time)).
mpred_prop(accessible(position,position,time),predicate).
predicates([accessible/3]).

% predicate Adult(animal)
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',37).
% From E: 
% 
% predicate(adult(animal)).
mpred_prop(adult(animal),predicate).
predicates([adult/1]).

% predicate Large(animal)
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',39).
% From E: 
% 
% predicate(large(animal)).
mpred_prop(large(animal),predicate).
predicates([large/1]).

% predicate LargeSpecies(species)
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',39).
% From E: 
% 
% predicate(largeSpecies(species)).
mpred_prop(largeSpecies(species),predicate).
predicates([largeSpecies/1]).

% predicate Neighbor(position,position)
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',41).
% From E: 
% 
% predicate(neighbor(position,position)).
mpred_prop(neighbor(position,position),predicate).
predicates([neighbor/2]).

% predicate Sides(position,position,gate)
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',41).
% From E: 
% 
% predicate(sides(position,position,gate)).
mpred_prop(sides(position,position,gate),predicate).
predicates([sides/3]).

% event Close(human,gate)
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',44).
% From E: 
% 
% event(close(human,gate)).
mpred_prop(close(human,gate),event).
events([close/2]).

% event GetOff(human,animal)
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',44).
% From E: 
% 
% event(getOff(human,animal)).
mpred_prop(getOff(human,animal),event).
events([getOff/2]).

% event Mount(human,animal)
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',46).
% From E: 
% 
% event(mount(human,animal)).
mpred_prop(mount(human,animal),event).
events([mount/2]).

% event Move(animal,position)
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',46).
% From E: 
% 
% event(move(animal,position)).
mpred_prop(move(animal,position),event).
events([move/2]).

% event Open(human,gate)
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',48).
% From E: 
% 
% event(open(human,gate)).
mpred_prop(open(human,gate),event).
events([open/2]).

% event ThrowOff(animal,human)
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',48).
% From E: 
% 
% event(throwOff(animal,human)).
mpred_prop(throwOff(animal,human),event).
events([throwOff/2]).

% fluent AbnormalEncroachment(human)
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',51).
% From E: 
% 
% fluent(abnormalEncroachment(human)).
mpred_prop(abnormalEncroachment(human),fluent).
fluents([abnormalEncroachment/1]).

% noninertial AbnormalEncroachment
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',51).
% From E: 
% 
% :-call_pel_directive(noninertial(abnormalEncroachment)).
:- call_pel_directive(noninertial(abnormalEncroachment)).

% fluent DoneBy(event,animal)
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',53).
% From E: 
% 
% fluent(doneBy(event,animal)).
mpred_prop(doneBy(event,animal),fluent).
fluents([doneBy/2]).

% noninertial DoneBy
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',53).
% From E: 
% 
% :-call_pel_directive(noninertial(doneBy)).
:- call_pel_directive(noninertial(doneBy)).

% fluent Mounted(human,animal)
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',55).
% From E: 
% 
% fluent(mounted(human,animal)).
mpred_prop(mounted(human,animal),fluent).
fluents([mounted/2]).

% fluent MountFails(human)
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',55).
% From E: 
% 
% fluent(mountFails(human)).
mpred_prop(mountFails(human),fluent).
fluents([mountFails/1]).

% noninertial MountFails
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',57).
% From E: 
% 
% :-call_pel_directive(noninertial(mountFails)).
:- call_pel_directive(noninertial(mountFails)).

% fluent Moves(animal)
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',57).
% From E: 
% 
% fluent(moves(animal)).
mpred_prop(moves(animal),fluent).
fluents([moves/1]).

% noninertial Moves
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',59).
% From E: 
% 
% :-call_pel_directive(noninertial(moves)).
:- call_pel_directive(noninertial(moves)).

% fluent Opened(gate)
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',59).
% From E: 
% 
% fluent(opened(gate)).
mpred_prop(opened(gate),fluent).
fluents([opened/1]).

% fluent Pos(animal,position)
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',61).
% From E: 
% 
% fluent(pos(animal,position)).
mpred_prop(pos(animal,position),fluent).
fluents([pos/2]).

% fluent PosDeterminingFluent(human,position)
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',61).
% From E: 
% 
% fluent(posDeterminingFluent(human,position)).
mpred_prop(posDeterminingFluent(human,position),fluent).
fluents([posDeterminingFluent/2]).

% noninertial PosDeterminingFluent
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',63).
% From E: 
% 
% :-call_pel_directive(noninertial(posDeterminingFluent)).
:- call_pel_directive(noninertial(posDeterminingFluent)).

% fluent ThrowOffFails(animal,human)
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',63).
% From E: 
% 
% fluent(throwOffFails(animal,human)).
mpred_prop(throwOffFails(animal,human),fluent).
fluents([throwOffFails/2]).

% noninertial ThrowOffFails
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',65).
% From E: 
% 
% :-call_pel_directive(noninertial(throwOffFails)).
:- call_pel_directive(noninertial(throwOffFails)).

% species HumanSpecies, ElephantSpecies, HorseSpecies, DogSpecies
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',67).
% From E: 
% 
% t(species,humanSpecies).
species(humanSpecies).
% From E: 
% 
% t(species,elephantSpecies).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',67).
species(elephantSpecies).
% From E: 
% 
% t(species,horseSpecies).
species(horseSpecies).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',67).
% From E: 
% 
% t(species,dogSpecies).
species(dogSpecies).

% location Outside
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',67).
% From E: 
% 
% t(location,outside).
location(outside).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',70).
% LargeSpecies(HumanSpecies).
% From E: 
% 
% largeSpecies(humanSpecies).
largeSpecies(humanSpecies).


% LargeSpecies(ElephantSpecies).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',70).
% From E: 
% 
% largeSpecies(elephantSpecies).
largeSpecies(elephantSpecies).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',72).
% LargeSpecies(HorseSpecies).
% From E: 
% 
% largeSpecies(horseSpecies).
largeSpecies(horseSpecies).


% !LargeSpecies(DogSpecies).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',72).
% From E: 
% 
% not(largeSpecies(dogSpecies)).
not(largeSpecies(dogSpecies)).


% [event,animal,time]
% HoldsAt(DoneBy(event,animal),time) <->
% (Happens(event,time) &
%  (({gate} event=Close(animal,gate)) |
%   ({animal1} event=GetOff(animal,animal1))|
%   ({animal1} event=Mount(animal,animal1))|
%   ({position} event=Move(animal,position))|
%   ({gate} event=Open(animal,gate)) |
%   ({human1} event=ThrowOff(animal,human1)))).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',76).
% From E: 
% 
% <->(
%    holds_at(doneBy(Event,Animal),Time), 
%    (happens_at(Event,Time) , 
%     (exists(
%         [Gate], 
%         '='(
%            Event, 
%            close(Animal,Gate))) ; 
%       exists(
%          [Animal1], 
%          '='(
%             Event, 
%             getOff(Animal,Animal1))) ; 
%       exists(
%          [Animal15], 
%          '='(
%             Event, 
%             mount(Animal,Animal15))) ; 
%       exists(
%          [Position], 
%          '='(
%             Event, 
%             move(Animal,Position))) ; 
%       exists(
%          [Gate7], 
%          '='(
%             Event, 
%             open(Animal,Gate7))) ; 
%      exists(
%         [Human1], 
%         '='(
%            Event, 
%            throwOff(Animal,Human1)))))).
 %   [Time].
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',76).
doneBy(Event, Animal) <->
    Event,
    (   exists([Gate], Event=close(Animal, Gate))
    ;   exists([Animal1], Event=getOff(Animal, Animal1))
    ;   exists([Animal15],
               Event=mount(Animal, Animal15))
    ;   exists([Position], Event=move(Animal, Position))
    ;   exists([Gate7], Event=open(Animal, Gate7))
    ;   exists([Human1], Event=throwOff(Animal, Human1))
    ).


% [event1,event2,animal,time]
% HoldsAt(DoneBy(event1,animal),time) &
% HoldsAt(DoneBy(event2,animal),time) ->
% event1=event2.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',86).
% From E: 
% 
% '->'(
%    (holds_at(doneBy(Event1,Animal),Time) , 
%     holds_at(doneBy(Event2,Animal),Time)), 
%    Event1=Event2).
 %   [Time].
false not equals(Event1, Event2), doneBy(Event1, Animal), doneBy(Event2, Animal).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',86).

 /*  d_pre([ not(equals(Event1,Event2)),
   	doneBy(Event1,Animal),
   	doneBy(Event2,Animal)
         ]).
 */
 %  "% =================================".


% [animal]
 % Large(animal) <-> (Adult(animal) & LargeSpecies(Species(animal))).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',89).
% From E: 
% 
% <->(
%    large(Animal), 
%    (adult(Animal) , 
%     largeSpecies(species(Animal)))).
if large(Animal)then adult(Animal), largeSpecies(species(Animal)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',89).

 /*  reactive_rule([large(Animal)],
   	      [adult(Animal),largeSpecies(species(Animal))]).
 */
 %  "% =================================".
if adult(Animal), largeSpecies(species(Animal))then large(Animal).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',89).

 /*  reactive_rule([adult(Animal),largeSpecies(species(Animal))],
   	      [large(Animal)]).
 */
 %  "% =================================".


% [position]
 % {position1} % position1!=% position & Neighbor(position,position1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',91).
% From E: 
% 
% exists(
%    [Position1], 
%    (Position1\=Position , 
%     neighbor(Position,Position1))).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',91).
exists([Position1],  (Position1\=Position, neighbor(Position, Position1))).


% [position]
 % !Neighbor(position,position).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',93).
% From E: 
% 
% not(neighbor(Position,Position)).
not(neighbor(Position,Position)).


% [position1,position2]
% Neighbor(position1,position2) ->
% Neighbor(position2,position1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',97).
% From E: 
% 
% '->'(
%    neighbor(Position1,Position2), 
%    neighbor(Position2,Position1)).
if neighbor(Position1, Position2)then neighbor(Position2, Position1).

 /*  reactive_rule([neighbor(Position1,Position2)],
   	      [neighbor(Position2,Position1)]).
 */
 %  "% =================================".


% [cage]
 % cage!=% Outside.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',99).
% From E: 
% 
% Cage\=outside.
Cage\=outside.


% [position1,position2,gate]
% Sides(position1,position2,gate) <->
% ((Side1(gate)=position1 &
%   Side2(gate)=position2) |
%  (Side2(gate)=position1 &
%   Side1(gate)=position2)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',103).
% From E: 
% 
% <->(
%    sides(Position1,Position2,Gate), 
%    ((side1(Gate)=Position1 , 
%      side2(Gate)=Position2) ; 
%     (side2(Gate)=Position1 , 
%      side1(Gate)=Position2))).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',103).
sides(Position1, Position2, Gate) <->
    (   side1(Gate, Position1),
        side2(Gate, Position2)
    ;   side2(Gate, Position1),
        side1(Gate, Position2)
    ).


% [gate]
 % Loc(Side1(gate))!=Loc(Side2(gate)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',108).
% From E: 
% 
% '\='(
%    loc(side1(Gate)), 
%    loc(side2(Gate))).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',108).
loc(side1(Gate))\=loc(side2(Gate)).


% [position1,position2,gate1,gate2]
% Sides(position1,position2,gate1) &
% Sides(position1,position2,gate2) ->
% gate1=gate2.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',112).
% From E: 
% 
% '->'(
%    (sides(Position1,Position2,Gate1) , 
%     sides(Position1,Position2,Gate2)), 
%    Gate1=Gate2).
false not equals(Gate1, Gate2), sides(Position1, Position2, Gate1), sides(Position1, Position2, Gate2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',112).

 /*  d_pre([ not(equals(Gate1,Gate2)),
   	sides(Position1,Position2,Gate1),
   	sides(Position1,Position2,Gate2)
         ]).
 */
 %  "% =================================".


% [position1,position2,gate]
% Sides(position1,position2,gate) ->
% Neighbor(position1,position2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',117).
% From E: 
% 
% '->'(
%    sides(Position1,Position2,Gate), 
%    neighbor(Position1,Position2)).
if sides(Position1, Position2, Gate)then neighbor(Position1, Position2).

 /*  reactive_rule([sides(Position1,Position2,Gate)],
   	      [neighbor(Position1,Position2)]).
 */
 %  "% =================================".


% [position1,position2]
% Loc(position1) != Loc(position2) &
% Neighbor(position1,position2) ->
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',121).
% {gate}%  Sides(position1,position2,gate).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',123).
% From E: 
% 
% exists(
%    [Gate], 
%    '->'(
%       ('\='(
%           loc(Position1), 
%           loc(Position2)) , 
%        neighbor(Position1,Position2)), 
%       sides(Position1,Position2,Gate))).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',123).
exists([Gate],  (loc(Position1)\=loc(Position2), neighbor(Position1, Position2)->sides(Position1, Position2, Gate))).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',125).
% [animal,position1,position2,time]
% HoldsAt(Pos(animal,position1),time) &
% HoldsAt(Pos(animal,position2),time) ->
% position1=position2.
% From E: 
% 
% '->'(
%    (holds_at(pos(Animal,Position1),Time) , 
%     holds_at(pos(Animal,Position2),Time)), 
%    Position1=Position2).
 %   [Time].
false not equals(Position1, Position2), pos(Animal, Position1), pos(Animal, Position2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',125).

 /*  d_pre([ not(equals(Position1,Position2)),
   	holds(pos(Animal,Position1),Time_At),
   	holds(pos(Animal,Position2),Time_At)
         ]).
 */
 %  "% =================================".


% [animal,time]
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',131).
% {position} % HoldsAt(Pos(animal,position),time).
% From E: 
% 
% exists(
%    [Position], 
%    holds_at(pos(Animal,Position),Time)).
 %   [Time].
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',131).
exists([Position],
 pos(Animal,Position)).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',133).
% [animal1,animal2,position,time]
% (animal1!=animal2 &
%  Large(animal1) &
%  Large(animal2) &
%  HoldsAt(Pos(animal1,position),time) &
%  HoldsAt(Pos(animal2,position),time)) ->
% (({human} human=animal1 & HoldsAt(Mounted(human,animal2),time)) |
%  ({human} human=animal2 & HoldsAt(Mounted(human,animal1),time))).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',133).
% From E: 
% 
% '->'(
%    (Animal1\=Animal2 , 
%      large(Animal1) , 
%      large(Animal2) , 
%      holds_at(pos(Animal1,Position),Time) , 
%     holds_at(pos(Animal2,Position),Time)), 
%    (exists(
%        [Human], 
%        (Human=Animal1 , 
%         holds_at(mounted(Human,Animal2),Time))) ; 
%     exists(
%        [Human5], 
%        (Human5=Animal2 , 
%         holds_at(mounted(Human5,Animal1),Time))))).
 %   [Time].
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',133).
Animal1\=Animal2, large(Animal1), large(Animal2), pos(Animal1, Position), pos(Animal2, Position) ->
    (   exists([Human],
                (Human=Animal1, mounted(Human, Animal2)))
    ;   exists([Human5],
                (Human5=Animal2, mounted(Human5, Animal1)))
    ).


% [human,position1,position2,time]
% HoldsAt(PosDeterminingFluent(human,position1),time) &
% HoldsAt(PosDeterminingFluent(human,position2),time) ->
% position1=position2.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',143).
% From E: 
% 
% '->'(
%    (holds_at(posDeterminingFluent(Human,Position1),Time) , 
%     holds_at(posDeterminingFluent(Human,Position2),Time)), 
%    Position1=Position2).
 %   [Time].
false not equals(Position1, Position2), posDeterminingFluent(Human, Position1), posDeterminingFluent(Human, Position2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',143).

 /*  d_pre([ not(equals(Position1,Position2)),
   	posDeterminingFluent(Human,Position1),
   	posDeterminingFluent(Human,Position2)
         ]).
 */
 %  "% =================================".


% [animal,position,time]
% Initiates(Move(animal,position),Pos(animal,position),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',148).
% From E: 
% 
% initiates_at(
%    move(Animal,Position), 
%    pos(Animal,Position), 
%    Time).
 %   [Time].
move(Animal, Position)initiates pos(Animal, Position).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',148).

 /*  initiated(happens(move(Animal,Position),
   		  Time_From,
   		  Time_Until),
   	  pos(Animal,Position),
   	  []).
 */
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',150).
% [animal,position1,position2,time]
% HoldsAt(Pos(animal,position1),time) ->
% Terminates(Move(animal,position2),Pos(animal,position1),time).
% From E: 
% 
% '->'(
%    holds_at(pos(Animal,Position1),Time), 
%    terminates_at(
%       move(Animal,Position2), 
%       pos(Animal,Position1), 
%       Time)).
 %   [Time].
move(Animal, Position2)terminates pos(Animal, Position1)if pos(Animal, Position1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',150).

 /*  terminated(happens(move(Animal,Position2),
   		   Time_From,
   		   Time_Until),
   	   pos(Animal,Position1),
   	   [holds(pos(Animal,Position1),Time_From)]).
 */
 %  "% =================================".


% [animal,position,time]
% Happens(Move(animal,position),time) ->
% !HoldsAt(Pos(animal,position),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',155).
% From E: 
% 
% '->'(
%    happens_at(move(Animal,Position),Time), 
%    holds_at(not(pos(Animal,Position)),Time)).
 %   [Time].
not pos(Animal, Position)if move(Animal, Position).

 /*  l_int(holds(not(pos(Animal,Position)),Time_At),
         [ happens(move(Animal,Position),
   		Time_At,
   		Time_At)
         ]).
 */
 %  "% =================================".


% [human,position,time]
% Happens(Move(human,position),time) ->
% !{animal} HoldsAt(Mounted(human,animal),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',159).
% From E: 
% 
% '->'(
%    happens_at(move(Human,Position),Time), 
%    not(
%       exists(
%          [Animal], 
%          holds_at(mounted(Human,Animal),Time)))).
 %   [Time].
not mounted(Human, Animal)if move(Human, Position).

 /*  l_int(holds(not(mounted(Human,Animal)),Time_At),
         [ happens(move(Human,Position),
   		Time_At,
   		Time_At)
         ]).
 */
 %  "% =================================".


% [human,gate,time]
% Initiates(Open(human,gate),Opened(gate),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',163).
% From E: 
% 
% initiates_at(
%    open(Human,Gate), 
%    opened(Gate), 
%    Time).
 %   [Time].
open(Human, Gate)initiates opened(Gate).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',163).

 /*  initiated(happens(open(Human,Gate),
   		  Time_From,
   		  Time_Until),
   	  opened(Gate),
   	  []).
 */
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',165).
% [human,gate,time]
% Happens(Open(human,gate),time) ->
% !HoldsAt(Opened(gate),time) &
% (!{animal} HoldsAt(Mounted(human,animal),time)) &
% ({position}
%  (Side1(gate)=position | Side2(gate)=position) &
%  HoldsAt(Pos(human,position),time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',165).
% From E: 
% 
% '->'(
%    happens_at(open(Human,Gate),Time), 
%    (holds_at(not(opened(Gate)),Time) , 
%      not(
%         exists(
%            [Animal], 
%            holds_at(mounted(Human,Animal),Time))) , 
%     exists(
%        [Position], 
%        ((side1(Gate)=Position ; 
%          side2(Gate)=Position) , 
%         holds_at(pos(Human,Position),Time))))).
 %   [Time].
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',165).
open(Human, Gate) ->
    not(opened(Gate)),
    not(mounted(Human, Animal)),
    exists([Position],
            (false((not(side1(Gate, Position)), not(side2(Gate, Position)))), pos(Human, Position))).


% [human,gate,time]
% Terminates(Close(human,gate),Opened(gate),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',174).
% From E: 
% 
% terminates_at(
%    close(Human,Gate), 
%    opened(Gate), 
%    Time).
 %   [Time].
close(Human, Gate)terminates opened(Gate).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',174).

 /*  terminated(happens(close(Human,Gate),
   		   Time_From,
   		   Time_Until),
   	   opened(Gate),
   	   []).
 */
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',176).
% [human,gate,time]
% Happens(Close(human,gate),time) ->
% HoldsAt(Opened(gate),time) &
% (!{animal} HoldsAt(Mounted(human,animal),time)) &
% {position}% 
% (Side1(gate)=position | Side2(gate)=position) &
% HoldsAt(Pos(human,position),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',180).
% From E: 
% 
% exists(
%    [Position], 
%    '->'(
%       happens_at(close(Human,Gate),Time), 
%       (holds_at(opened(Gate),Time) , 
%         not(
%            exists(
%               [Animal], 
%               holds_at(mounted(Human,Animal),Time))) , 
%         (side1(Gate)=Position ; 
%          side2(Gate)=Position) , 
%        holds_at(pos(Human,Position),Time)))).
 %   [Time].
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',180).
exists([Position],  (close(Human, Gate)->opened(Gate), not(mounted(Human, Animal)), false((not(side1(Gate, Position)), not(side2(Gate, Position)))), pos(Human, Position))).


% [human,animal,position,time]
% HoldsAt(Mounted(human,animal),time) &
% HoldsAt(Pos(animal,position),time) ->
% HoldsAt(Pos(human,position),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',185).
% From E: 
% 
% '->'(
%    (holds_at(mounted(Human,Animal),Time) , 
%     holds_at(pos(Animal,Position),Time)), 
%    holds_at(pos(Human,Position),Time)).
 %   [Time].
pos(Human, Position)if mounted(Human, Animal), pos(Animal, Position).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',185).

 /*  l_int(holds(pos(Human,Position),Time_At),
         [ holds(mounted(Human,Animal),Time_At),
   	holds(pos(Animal,Position),Time_At)
         ]).
 */
 %  "% =================================".


% [animal,time]
% HoldsAt(Moves(animal),time) <->
% ({position}
%  HoldsAt(Pos(animal,position),time) &
%  !HoldsAt(Pos(animal,position),time+1)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',190).
% From E: 
% 
% <->(
%    holds_at(moves(Animal),Time), 
%    exists(
%       [Position], 
%       (holds_at(pos(Animal,Position),Time) , 
%        holds_at(not(pos(Animal,Position)),Time+1)))).
 %   [Time, Time+1].
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',190).
holds_at(moves(Animal), Time) <->
    exists([Position],
            (holds_at(pos(Animal, Position), Time), holds_at(not(pos(Animal, Position)), Time+1))).


% [human,time]
% HoldsAt(MountFails(human),time) <->
% ({animal}
%   Happens(Mount(human,animal),time) &
%   HoldsAt(Moves(animal),time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',196).
% From E: 
% 
% <->(
%    holds_at(mountFails(Human),Time), 
%    exists(
%       [Animal], 
%       (happens_at(mount(Human,Animal),Time) , 
%        holds_at(moves(Animal),Time)))).
 %   [Time].
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',196).
mountFails(Human) <->
    exists([Animal],
            (mount(Human, Animal), moves(Animal))).


% [human,animal,position,time]
% !HoldsAt(Moves(animal),time) ->
% Releases(Mount(human,animal),Pos(human,position),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',202).
% From E: 
% 
% '->'(
%    holds_at(not(moves(Animal)),Time), 
%    releases_at(
%       mount(Human,Animal), 
%       pos(Human,Position), 
%       Time)).
 %   [Time].
if not moves(Animal)then releases(mount(Human, Animal), pos(Human, Position)).

 /*  reactive_rule([not(moves(Animal))],
   	      [ releases(mount(Human,Animal),
   			 pos(Human,Position))
   	      ]).
 */
 %  "% =================================".


% [human,animal,time]
% !HoldsAt(Moves(animal),time) ->
% Initiates(Mount(human,animal),Mounted(human,animal),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',206).
% From E: 
% 
% '->'(
%    holds_at(not(moves(Animal)),Time), 
%    initiates_at(
%       mount(Human,Animal), 
%       mounted(Human,Animal), 
%       Time)).
 %   [Time].
mount(Human, Animal)initiates mounted(Human, Animal)if not moves(Animal).

 /*  initiated(happens(mount(Human,Animal),
   		  Time_From,
   		  Time_Until),
   	  mounted(Human,Animal),
   	  [not(moves(Animal))]).
 */
 %  "% =================================".


% [human,animal,position,time]
% HoldsAt(Pos(animal,position),time) &
% HoldsAt(Moves(animal),time) ->
% Initiates(Mount(human,animal),Pos(human,position),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',210).
% From E: 
% 
% '->'(
%    (holds_at(pos(Animal,Position),Time) , 
%     holds_at(moves(Animal),Time)), 
%    initiates_at(
%       mount(Human,Animal), 
%       pos(Human,Position), 
%       Time)).
 %   [Time].
mount(Human, Animal)initiates pos(Human, Position)if pos(Animal, Position), moves(Animal).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',210).

 /*  initiated(happens(mount(Human,Animal),
   		  Time_From,
   		  Time_Until),
   	  pos(Human,Position),
   	  [ holds(pos(Animal,Position),Time_From),
   	    moves(Animal)
   	  ]).
 */
 %  "% =================================".


% [human,animal,position,time]
% HoldsAt(Pos(human,position),time) &
% HoldsAt(Moves(animal),time) ->
% Terminates(Mount(human,animal),Pos(human,position),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',215).
% From E: 
% 
% '->'(
%    (holds_at(pos(Human,Position),Time) , 
%     holds_at(moves(Animal),Time)), 
%    terminates_at(
%       mount(Human,Animal), 
%       pos(Human,Position), 
%       Time)).
 %   [Time].
mount(Human, Animal)terminates pos(Human, Position)if pos(Human, Position), moves(Animal).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',215).

 /*  terminated(happens(mount(Human,Animal),
   		   Time_From,
   		   Time_Until),
   	   pos(Human,Position),
   	   [ holds(pos(Human,Position),Time_From),
   	     moves(Animal)
   	   ]).
 */
 %  "% =================================".


% [human,animal,time]
% Happens(Mount(human,animal),time) ->
% Large(animal).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',220).
% From E: 
% 
% '->'(
%    happens_at(mount(Human,Animal),Time), 
%    large(Animal)).
 %   [Time].
if mount(Human, Animal)then large(Animal).

 /*  reactive_rule([ happens(mount(Human,Animal),
   			Time_From,
   			Time_Until)
   	      ],
   	      [large(Animal)]).
 */
 %  "% =================================".


% [human,animal,time]
% HoldsAt(Mounted(human,animal),time) ->
% Large(animal).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',224).
% From E: 
% 
% '->'(
%    holds_at(mounted(Human,Animal),Time), 
%    large(Animal)).
 %   [Time].
if mounted(Human, Animal)then large(Animal).

 /*  reactive_rule([holds(mounted(Human,Animal),Time_At)],
   	      [large(Animal)]).
 */
 %  "% =================================".


% [human1,human2,time]
% Happens(Mount(human1,human2),time) ->
% !Large(human1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',228).
% From E: 
% 
% '->'(
%    happens_at(mount(Human1,Human2),Time), 
%    not(large(Human1))).
 %   [Time].
if mount(Human1, Human2)then not large(Human1).

 /*  reactive_rule([ happens(mount(Human1,Human2),
   			Time_From,
   			Time_Until)
   	      ],
   	      [not(large(Human1))]).
 */
 %  "% =================================".


% [human1,human2,time]
% HoldsAt(Mounted(human1,human2),time) ->
% !Large(human1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',232).
% From E: 
% 
% '->'(
%    holds_at(mounted(Human1,Human2),Time), 
%    not(large(Human1))).
 %   [Time].
if mounted(Human1, Human2)then not large(Human1).

 /*  reactive_rule([holds(mounted(Human1,Human2),Time_At)],
   	      [not(large(Human1))]).
 */
 %  "% =================================".


% [human,animal,time]
% Happens(Mount(human,animal),time) ->
% !{human1} human1!=human & HoldsAt(Mounted(human1,animal),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',236).
% From E: 
% 
% '->'(
%    happens_at(mount(Human,Animal),Time), 
%    not(
%       exists(
%          [Human1], 
%          (Human1\=Human , 
%           holds_at(mounted(Human1,Animal),Time))))).
 %   [Time].
mount(Human, Animal) ->
    not(( Human1\=Human,
          mounted(Human1, Animal)
        )).


% [human1,human2,animal,time]
% HoldsAt(Mounted(human1,animal),time) &
% HoldsAt(Mounted(human2,animal),time) ->
% human1=human2.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',240).
% From E: 
% 
% '->'(
%    (holds_at(mounted(Human1,Animal),Time) , 
%     holds_at(mounted(Human2,Animal),Time)), 
%    Human1=Human2).
 %   [Time].
false not equals(Human1, Human2), mounted(Human1, Animal), mounted(Human2, Animal).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',240).

 /*  d_pre([ not(equals(Human1,Human2)),
   	holds(mounted(Human1,Animal),Time_At),
   	holds(mounted(Human2,Animal),Time_At)
         ]).
 */
 %  "% =================================".


% [human,animal,time]
% Happens(Mount(human,animal),time) ->
% !{human1} human1!=human & HoldsAt(Mounted(human1,human),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',245).
% From E: 
% 
% '->'(
%    happens_at(mount(Human,Animal),Time), 
%    not(
%       exists(
%          [Human1], 
%          (Human1\=Human , 
%           holds_at(mounted(Human1,Human),Time))))).
 %   [Time].
mount(Human, Animal) ->
    not(( Human1\=Human,
          mounted(Human1, Human)
        )).


% [human1,human2,time]
% Happens(Mount(human1,human2),time) ->
% {animal}%  HoldsAt(Mounted(human2,animal),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',249).
% From E: 
% 
% exists(
%    [Animal], 
%    '->'(
%       happens_at(mount(Human1,Human2),Time), 
%       holds_at(mounted(Human2,Animal),Time))).
 %   [Time].
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',249).
exists([Animal],
 if(mounted(Human2,Animal),mount(Human1,Human2))).


% [human1,human2,time]
% HoldsAt(Mounted(human1,human2),time) ->
% !{animal} HoldsAt(Mounted(human2,animal),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',253).
% From E: 
% 
% '->'(
%    holds_at(mounted(Human1,Human2),Time), 
%    not(
%       exists(
%          [Animal], 
%          holds_at(mounted(Human2,Animal),Time)))).
 %   [Time].
not mounted(Human2, Animal)if mounted(Human1, Human2).

 /*  l_int(holds(not(mounted(Human2,Animal)),Time_At),
         [holds(mounted(Human1,Human2),Time_At)]).
 */
 %  "% =================================".


% [human,animal,time]
% Happens(Mount(human,animal),time) ->
% !{animal1} HoldsAt(Mounted(human,animal1),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',257).
% From E: 
% 
% '->'(
%    happens_at(mount(Human,Animal),Time), 
%    not(
%       exists(
%          [Animal1], 
%          holds_at(mounted(Human,Animal1),Time)))).
 %   [Time].
not mounted(Human, Animal1)if mount(Human, Animal).

 /*  l_int(holds(not(mounted(Human,Animal1)),Time_At),
         [ happens(mount(Human,Animal),
   		Time_At,
   		Time_At)
         ]).
 */
 %  "% =================================".


% [human,animal,time]
% !HoldsAt(Moves(animal),time) ->
% Terminates(GetOff(human,animal),Mounted(human,animal),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',261).
% From E: 
% 
% '->'(
%    holds_at(not(moves(Animal)),Time), 
%    terminates_at(
%       getOff(Human,Animal), 
%       mounted(Human,Animal), 
%       Time)).
 %   [Time].
getOff(Human, Animal)terminates mounted(Human, Animal)if not moves(Animal).

 /*  terminated(happens(getOff(Human,Animal),
   		   Time_From,
   		   Time_Until),
   	   mounted(Human,Animal),
   	   [not(moves(Animal))]).
 */
 %  "% =================================".


% [human,animal,position,time]
% !HoldsAt(Moves(animal),time) &
% HoldsAt(PosDeterminingFluent(human,position),time) ->
% Initiates(GetOff(human,animal),Pos(human,position),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',265).
% From E: 
% 
% '->'(
%    (holds_at(not(moves(Animal)),Time) , 
%     holds_at(posDeterminingFluent(Human,Position),Time)), 
%    initiates_at(
%       getOff(Human,Animal), 
%       pos(Human,Position), 
%       Time)).
 %   [Time].
getOff(Human, Animal)initiates pos(Human, Position)if not moves(Animal), posDeterminingFluent(Human, Position).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',265).

 /*  initiated(happens(getOff(Human,Animal),
   		  Time_From,
   		  Time_Until),
   	  pos(Human,Position),
   	  [ not(moves(Animal)),
   	    posDeterminingFluent(Human,Position)
   	  ]).
 */
 %  "% =================================".


% [human,animal,position,time]
% !HoldsAt(Moves(animal),time) &
% HoldsAt(Pos(human,position),time) ->
% Terminates(GetOff(human,animal),Pos(human,position),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',270).
% From E: 
% 
% '->'(
%    (holds_at(not(moves(Animal)),Time) , 
%     holds_at(pos(Human,Position),Time)), 
%    terminates_at(
%       getOff(Human,Animal), 
%       pos(Human,Position), 
%       Time)).
 %   [Time].
getOff(Human, Animal)terminates pos(Human, Position)if not moves(Animal), pos(Human, Position).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',270).

 /*  terminated(happens(getOff(Human,Animal),
   		   Time_From,
   		   Time_Until),
   	   pos(Human,Position),
   	   [ not(moves(Animal)),
   	     holds(pos(Human,Position),Time_From)
   	   ]).
 */
 %  "% =================================".


% [human,animal,position1,position2,time]
% !HoldsAt(Moves(animal),time) &
% HoldsAt(Pos(human,position1),time) &
% position1!=position2 ->
% Terminates(GetOff(human,animal),Pos(human,position2),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',275).
% From E: 
% 
% '->'(
%    (holds_at(not(moves(Animal)),Time) , 
%      holds_at(pos(Human,Position1),Time) , 
%     Position1\=Position2), 
%    terminates_at(
%       getOff(Human,Animal), 
%       pos(Human,Position2), 
%       Time)).
 %   [Time].
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',275).
not(moves(Animal)), pos(Human, Position1), Position1\=Position2 ->
    terminates(getOff(Human, Animal),
               pos(Human, Position2)).


% [human,animal,time]
% Happens(GetOff(human,animal),time) ->
% HoldsAt(Mounted(human,animal),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',281).
% From E: 
% 
% '->'(
%    happens_at(getOff(Human,Animal),Time), 
%    holds_at(mounted(Human,Animal),Time)).
 %   [Time].
mounted(Human, Animal)if getOff(Human, Animal).

 /*  l_int(holds(mounted(Human,Animal),Time_At),
         [ happens(getOff(Human,Animal),
   		Time_At,
   		Time_At)
         ]).
 */
 %  "% =================================".


% [animal1,human,time]
% HoldsAt(ThrowOffFails(animal1,human),time) <->
% ({position,animal2}
%  animal2!=human &
%  HoldsAt(PosDeterminingFluent(human,position),time) &
%  Large(animal2) &
%  HoldsAt(Pos(animal2,position),time+1)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',285).
% From E: 
% 
% <->(
%    holds_at(throwOffFails(Animal1,Human),Time), 
%    exists(
%       [ Position, 
%         Animal2 ], 
%       (Animal2\=Human , 
%         holds_at(posDeterminingFluent(Human,Position),Time) , 
%         large(Animal2) , 
%        holds_at(pos(Animal2,Position),Time+1)))).
 %   [Time, Time+1].
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',285).
holds_at(throwOffFails(Animal1, Human), Time) <->
    exists([Position, Animal2],
            (Animal2\=Human, holds_at(posDeterminingFluent(Human, Position), Time), large(Animal2), holds_at(pos(Animal2, Position), Time+1))).


% [animal,human,position,time]
% HoldsAt(PosDeterminingFluent(human,position),time) &
% !HoldsAt(ThrowOffFails(animal,human),time) ->
% Initiates(ThrowOff(animal,human),Pos(human,position),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',293).
% From E: 
% 
% '->'(
%    (holds_at(posDeterminingFluent(Human,Position),Time) , 
%     holds_at(not(throwOffFails(Animal,Human)),Time)), 
%    initiates_at(
%       throwOff(Animal,Human), 
%       pos(Human,Position), 
%       Time)).
 %   [Time].
throwOff(Animal, Human)initiates pos(Human, Position)if posDeterminingFluent(Human, Position), not throwOffFails(Animal, Human).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',293).

 /*  initiated(happens(throwOff(Animal,Human),
   		  Time_From,
   		  Time_Until),
   	  pos(Human,Position),
   	  [ posDeterminingFluent(Human,Position),
   	    not(throwOffFails(Animal,Human))
   	  ]).
 */
 %  "% =================================".


% [animal,human,position,time]
% HoldsAt(Pos(human,position),time) &
% !HoldsAt(ThrowOffFails(animal,human),time) ->
% Terminates(ThrowOff(animal,human),Pos(human,position),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',298).
% From E: 
% 
% '->'(
%    (holds_at(pos(Human,Position),Time) , 
%     holds_at(not(throwOffFails(Animal,Human)),Time)), 
%    terminates_at(
%       throwOff(Animal,Human), 
%       pos(Human,Position), 
%       Time)).
 %   [Time].
throwOff(Animal, Human)terminates pos(Human, Position)if pos(Human, Position), not throwOffFails(Animal, Human).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',298).

 /*  terminated(happens(throwOff(Animal,Human),
   		   Time_From,
   		   Time_Until),
   	   pos(Human,Position),
   	   [ holds(pos(Human,Position),Time_From),
   	     not(throwOffFails(Animal,Human))
   	   ]).
 */
 %  "% =================================".


% [animal,human,position1,position2,time]
% !HoldsAt(ThrowOffFails(animal,human),time) &
% HoldsAt(Pos(human,position1),time) &
% !HoldsAt(PosDeterminingFluent(human,position2),time) &
% position1!=position2 ->
% Terminates(ThrowOff(animal,human),Pos(human,position2),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',303).
% From E: 
% 
% '->'(
%    (holds_at(not(throwOffFails(Animal,Human)),Time) , 
%      holds_at(pos(Human,Position1),Time) , 
%      holds_at(not(posDeterminingFluent(Human,Position2)),Time) , 
%     Position1\=Position2), 
%    terminates_at(
%       throwOff(Animal,Human), 
%       pos(Human,Position2), 
%       Time)).
 %   [Time].
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',303).
not(throwOffFails(Animal, Human)), pos(Human, Position1), not(posDeterminingFluent(Human, Position2)), Position1\=Position2 ->
    terminates(throwOff(Animal, Human),
               pos(Human, Position2)).


% [human,time]
% (!{animal} Happens(ThrowOff(animal,human),time) |
%            Happens(GetOff(human,animal),time)) ->
% HoldsAt(PosDeterminingFluent(human,1),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',310).
% From E: 
% 
% '->'(
%    not(
%       exists(
%          [Animal], 
%          (happens_at(throwOff(Animal,Human),Time) ; 
%           happens_at(getOff(Human,Animal),Time)))), 
%    holds_at(posDeterminingFluent(Human,1),Time)).
 %   [Time].
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',310).
not(false((not(throwOff(Animal, Human)), not(getOff(Human, Animal))))) ->
    posDeterminingFluent(Human, 1).


% [human,position,animal1,animal2,time]
% HoldsAt(PosDeterminingFluent(human,position),time) &
% HoldsAt(ThrowOffFails(animal1,human),time) &
% HoldsAt(Pos(animal2,position),time) ->
% Initiates(ThrowOff(animal1,human),Mounted(human,animal2),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',315).
% From E: 
% 
% '->'(
%    (holds_at(posDeterminingFluent(Human,Position),Time) , 
%      holds_at(throwOffFails(Animal1,Human),Time) , 
%     holds_at(pos(Animal2,Position),Time)), 
%    initiates_at(
%       throwOff(Animal1,Human), 
%       mounted(Human,Animal2), 
%       Time)).
 %   [Time].
throwOff(Animal1, Human)initiates mounted(Human, Animal2)if posDeterminingFluent(Human, Position), throwOffFails(Animal1, Human), pos(Animal2, Position).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',315).

 /*  initiated(happens(throwOff(Animal1,Human),
   		  Time_From,
   		  Time_Until),
   	  mounted(Human,Animal2),
   	  [ posDeterminingFluent(Human,Position),
   	    throwOffFails(Animal1,Human),
   	    holds(pos(Animal2,Position),Time_From)
   	  ]).
 */
 %  "% =================================".


% [human,animal,time]
% !HoldsAt(ThrowOffFails(animal,human),time) ->
% Terminates(ThrowOff(animal,human),Mounted(human,animal),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',321).
% From E: 
% 
% '->'(
%    holds_at(not(throwOffFails(Animal,Human)),Time), 
%    terminates_at(
%       throwOff(Animal,Human), 
%       mounted(Human,Animal), 
%       Time)).
 %   [Time].
throwOff(Animal, Human)terminates mounted(Human, Animal)if not throwOffFails(Animal, Human).

 /*  terminated(happens(throwOff(Animal,Human),
   		   Time_From,
   		   Time_Until),
   	   mounted(Human,Animal),
   	   [not(throwOffFails(Animal,Human))]).
 */
 %  "% =================================".


% [animal,human,time]
% Happens(ThrowOff(animal,human),time) ->
% HoldsAt(Mounted(human,animal),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',325).
% From E: 
% 
% '->'(
%    happens_at(throwOff(Animal,Human),Time), 
%    holds_at(mounted(Human,Animal),Time)).
 %   [Time].
mounted(Human, Animal)if throwOff(Animal, Human).

 /*  l_int(holds(mounted(Human,Animal),Time_At),
         [ happens(throwOff(Animal,Human),
   		Time_At,
   		Time_At)
         ]).
 */
 %  "% =================================".


% [animal,human,time]
% Happens(ThrowOff(animal,human),time) ->
% !Happens(GetOff(human,animal),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',329).
% From E: 
% 
% '->'(
%    happens_at(throwOff(Animal,Human),Time), 
%    not(happens_at(getOff(Human,Animal),Time))).
 %   [Time].
if throwOff(Animal, Human)then not getOff(Human, Animal).

 /*  reactive_rule([ happens(throwOff(Animal,Human),
   			Time_From,
   			Time_Until)
   	      ],
   	      [not(getOff(Human,Animal))]).
 */
 %  "% =================================".


% [animal,human,time]
% Happens(GetOff(human,animal),time) ->
% !Happens(ThrowOff(animal,human),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',333).
% From E: 
% 
% '->'(
%    happens_at(getOff(Human,Animal),Time), 
%    not(happens_at(throwOff(Animal,Human),Time))).
 %   [Time].
if getOff(Human, Animal)then not throwOff(Animal, Human).

 /*  reactive_rule([ happens(getOff(Human,Animal),
   			Time_From,
   			Time_Until)
   	      ],
   	      [not(throwOff(Animal,Human))]).
 */
 %  "% =================================".


% [position1,position2,time]
% Accessible(position1,position2,time) <->
% (Neighbor(position1,position2) &
%  !{gate} Sides(position1,position2,gate) &
%          !HoldsAt(Opened(gate),time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',337).
% From E: 
% 
% <->(
%    accessible(Position1,Position2,Time), 
%    not(
%       exists(
%          [Gate], 
%          (neighbor(Position1,Position2) , 
%            sides(Position1,Position2,Gate) , 
%           holds_at(not(opened(Gate)),Time))))).
 %   [Time].
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',337).
accessible(Position1, Position2, Time) <->
    false((neighbor(Position1, Position2), sides(Position1, Position2, Gate), not(holds_at(opened(Gate), Time)))).


% [animal,position1,position2,time]
% (position1!=position2 &
%  HoldsAt(Pos(animal,position1),time) &
%  HoldsAt(Pos(animal,position2),time+1)) ->
% Accessible(position1,position2,time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',343).
% From E: 
% 
% '->'(
%    (Position1\=Position2 , 
%      holds_at(pos(Animal,Position1),Time) , 
%     holds_at(pos(Animal,Position2),Time+1)), 
%    accessible(Position1,Position2,Time)).
 %   [Time, Time+1].
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',343).
Position1\=Position2, holds_at(pos(Animal, Position1), Time), holds_at(pos(Animal, Position2), Time+1) ->
    accessible(Position1, Position2, Time).


% [human,time]
% HoldsAt(AbnormalEncroachment(human),time) <->
% (HoldsAt(MountFails(human),time) |
%  ({position,animal1,animal2}
%    HoldsAt(PosDeterminingFluent(human,position),time) &
%    !HoldsAt(ThrowOffFails(animal2,human),time) &
%    Happens(ThrowOff(animal2,human),time) &
%    animal1!=human &
%    Large(animal1) &
%    HoldsAt(Pos(animal1,position),time) &
%    !HoldsAt(Pos(animal1,position),time+1))).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',349).
% From E: 
% 
% <->(
%    holds_at(abnormalEncroachment(Human),Time), 
%    (holds_at(mountFails(Human),Time) ; 
%     exists(
%        [ Position, 
%          Animal1, 
%          Animal2 ], 
%        (holds_at(posDeterminingFluent(Human,Position),Time) , 
%          holds_at(not(throwOffFails(Animal2,Human)),Time) , 
%          happens_at(throwOff(Animal2,Human),Time) , 
%          Animal1\=Human , 
%          large(Animal1) , 
%          holds_at(pos(Animal1,Position),Time) , 
%         holds_at(not(pos(Animal1,Position)),Time+1))))).
 %   [Time, Time+1].
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',349).
holds_at(abnormalEncroachment(Human), Time) <->
    (   holds_at(mountFails(Human), Time)
    ;   exists([Position, Animal1, Animal2],
                (holds_at(posDeterminingFluent(Human, Position), Time), holds_at(not(throwOffFails(Animal2, Human)), Time), happens_at(throwOff(Animal2, Human), Time), Animal1\=Human, large(Animal1), holds_at(pos(Animal1, Position), Time), holds_at(not(pos(Animal1, Position)), Time+1)))
    ).


% [animal1,animal2,position,time]
% HoldsAt(Pos(animal1,position),time) &
% !HoldsAt(Pos(animal1,position),time+1) &
% !HoldsAt(Pos(animal2,position),time) &
% HoldsAt(Pos(animal2,position),time+1) ->
% (!Large(animal1) |
%  !Large(animal2) |
%  ({human} human=animal2 & HoldsAt(AbnormalEncroachment(human),time))).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',361).
% From E: 
% 
% '->'(
%    (holds_at(pos(Animal1,Position),Time) , 
%      holds_at(not(pos(Animal1,Position)),Time+1) , 
%      holds_at(not(pos(Animal2,Position)),Time) , 
%     holds_at(pos(Animal2,Position),Time+1)), 
%    (not(large(Animal1)) ; 
%      not(large(Animal2)) ; 
%     exists(
%        [Human], 
%        (Human=Animal2 , 
%         holds_at(abnormalEncroachment(Human),Time))))).
 %   [Time, Time+1].
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',361).
holds_at(pos(Animal1, Position), Time), holds_at(not(pos(Animal1, Position)), Time+1), holds_at(not(pos(Animal2, Position)), Time), holds_at(pos(Animal2, Position), Time+1) ->
    (   not(large(Animal1))
    ;   not(large(Animal2))
    ;   exists([Human],
                (Human=Animal2, holds_at(abnormalEncroachment(Human), Time)))
    ).


% [animal1,animal2,position1,position2,time]
% animal1!=% animal2 &
% Large(animal1) & Large(animal2) &
% HoldsAt(Pos(animal1,position1),time) &
% HoldsAt(Pos(animal1,position2),time+1) &
% HoldsAt(Pos(animal2,position1),time) &
% HoldsAt(Pos(animal2,position2),time+1) ->
% !{gate} Sides(position1,position2,gate).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',370).
% From E: 
% 
% '->'(
%    (Animal1\=Animal2 , 
%      large(Animal1) , 
%      large(Animal2) , 
%      holds_at(pos(Animal1,Position1),Time) , 
%      holds_at(pos(Animal1,Position2),Time+1) , 
%      holds_at(pos(Animal2,Position1),Time) , 
%     holds_at(pos(Animal2,Position2),Time+1)), 
%    not(
%       exists(
%          [Gate], 
%          sides(Position1,Position2,Gate)))).
 %   [Time, Time+1].
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',370).
Animal1\=Animal2, large(Animal1), large(Animal2), holds_at(pos(Animal1, Position1), Time), holds_at(pos(Animal1, Position2), Time+1), holds_at(pos(Animal2, Position1), Time), holds_at(pos(Animal2, Position2), Time+1) ->
    not(sides(Position1, Position2, Gate)).


% [animal1,animal2,position1,position2,time]
% animal1!=% animal2 &
% Large(animal1) & Large(animal2) &
% HoldsAt(Pos(animal1,position1),time) &
% HoldsAt(Pos(animal1,position2),time+1) &
% HoldsAt(Pos(animal2,position2),time) &
% HoldsAt(Pos(animal2,position1),time+1) ->
% !{gate} Sides(position1,position2,gate).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',379).
% From E: 
% 
% '->'(
%    (Animal1\=Animal2 , 
%      large(Animal1) , 
%      large(Animal2) , 
%      holds_at(pos(Animal1,Position1),Time) , 
%      holds_at(pos(Animal1,Position2),Time+1) , 
%      holds_at(pos(Animal2,Position2),Time) , 
%     holds_at(pos(Animal2,Position1),Time+1)), 
%    not(
%       exists(
%          [Gate], 
%          sides(Position1,Position2,Gate)))).
 %   [Time, Time+1].
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',379).
Animal1\=Animal2, large(Animal1), large(Animal2), holds_at(pos(Animal1, Position1), Time), holds_at(pos(Animal1, Position2), Time+1), holds_at(pos(Animal2, Position2), Time), holds_at(pos(Animal2, Position1), Time+1) ->
    not(sides(Position1, Position2, Gate)).


% [gate,position1,position2,time]
% HoldsAt(Opened(gate),time) &
% !HoldsAt(Opened(gate),time+1) &
% Sides(position1,position2,gate) ->
% !{animal}
% HoldsAt(Pos(animal,position1),time) &
% HoldsAt(Pos(animal,position2),time+1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',388).
% From E: 
% 
% '->'(
%    (holds_at(opened(Gate),Time) , 
%      holds_at(not(opened(Gate)),Time+1) , 
%     sides(Position1,Position2,Gate)), 
%    not(
%       exists(
%          [Animal], 
%          (holds_at(pos(Animal,Position1),Time) , 
%           holds_at(pos(Animal,Position2),Time+1))))).
 %   [Time, Time+1].
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',388).
holds_at(opened(Gate), Time), holds_at(not(opened(Gate)), Time+1), sides(Position1, Position2, Gate) ->
    not(( holds_at(pos(Animal, Position1), Time),
          holds_at(pos(Animal, Position2), Time+1)
        )).

% gate GateAO
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',394).
% From E: 
% 
% t(gate,gateAO).
gate(gateAO).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',396).
% cage CageA
% From E: 
% 
% t(cage,cageA).
cage(cageA).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',398).
% Loc(1)=CageA.
% From E: 
% 
% loc(1)=cageA.
loc(1,cageA).


% Loc(2)=CageA.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',398).
% From E: 
% 
% loc(2)=cageA.
loc(2,cageA).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',400).
% Loc(3)=CageA.
% From E: 
% 
% loc(3)=cageA.
loc(3,cageA).


% Loc(4)=CageA.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',400).
% From E: 
% 
% loc(4)=cageA.
loc(4,cageA).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',402).
% Loc(5)=Outside.
% From E: 
% 
% loc(5)=outside.
loc(5,outside).


% Loc(6)=Outside.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',402).
% From E: 
% 
% loc(6)=outside.
loc(6,outside).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',404).
% Loc(7)=Outside.
% From E: 
% 
% loc(7)=outside.
loc(7,outside).


% Loc(8)=Outside.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',404).
% From E: 
% 
% loc(8)=outside.
loc(8,outside).


% [position1,position2]
% Neighbor(position1,position2) <->
% ((position1=1 & position2=2) |
%  (position1=1 & position2=3) |
%  (position1=1 & position2=4) |
%  (position1=2 & position2=3) |
%  (position1=2 & position2=4) |
%  (position1=3 & position2=4) |
%  (position1=5 & position2=6) |
%  (position1=5 & position2=7) |
%  (position1=5 & position2=8) |
%  (position1=6 & position2=7) |
%  (position1=6 & position2=8) |
%  (position1=7 & position2=8) |
%  (position2=1 & position1=2) |
%  (position2=1 & position1=3) |
%  (position2=1 & position1=4) |
%  (position2=2 & position1=3) |
%  (position2=2 & position1=4) |
%  (position2=3 & position1=4) |
%  (position2=5 & position1=6) |
%  (position2=5 & position1=7) |
%  (position2=5 & position1=8) |
%  (position2=6 & position1=7) |
%  (position2=6 & position1=8) |
%  (position2=7 & position1=8) |
%  (position1=4 & position2=7) |
%  (position2=4 & position1=7)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',408).
% From E: 
% 
% <->(
%    neighbor(Position1,Position2), 
%    ((Position1=1 , 
%      Position2=2) ; 
%      (Position1=1 , 
%       Position2=3) ; 
%      (Position1=1 , 
%       Position2=4) ; 
%      (Position1=2 , 
%       Position2=3) ; 
%      (Position1=2 , 
%       Position2=4) ; 
%      (Position1=3 , 
%       Position2=4) ; 
%      (Position1=5 , 
%       Position2=6) ; 
%      (Position1=5 , 
%       Position2=7) ; 
%      (Position1=5 , 
%       Position2=8) ; 
%      (Position1=6 , 
%       Position2=7) ; 
%      (Position1=6 , 
%       Position2=8) ; 
%      (Position1=7 , 
%       Position2=8) ; 
%      (Position2=1 , 
%       Position1=2) ; 
%      (Position2=1 , 
%       Position1=3) ; 
%      (Position2=1 , 
%       Position1=4) ; 
%      (Position2=2 , 
%       Position1=3) ; 
%      (Position2=2 , 
%       Position1=4) ; 
%      (Position2=3 , 
%       Position1=4) ; 
%      (Position2=5 , 
%       Position1=6) ; 
%      (Position2=5 , 
%       Position1=7) ; 
%      (Position2=5 , 
%       Position1=8) ; 
%      (Position2=6 , 
%       Position1=7) ; 
%      (Position2=6 , 
%       Position1=8) ; 
%      (Position2=7 , 
%       Position1=8) ; 
%      (Position1=4 , 
%       Position2=7) ; 
%     (Position2=4 , 
%      Position1=7))).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',408).
neighbor(Position1, Position2) <->
    (   Position1=1,
        Position2=2
    ;   Position1=1,
        Position2=3
    ;   Position1=1,
        Position2=4
    ;   Position1=2,
        Position2=3
    ;   Position1=2,
        Position2=4
    ;   Position1=3,
        Position2=4
    ;   Position1=5,
        Position2=6
    ;   Position1=5,
        Position2=7
    ;   Position1=5,
        Position2=8
    ;   Position1=6,
        Position2=7
    ;   Position1=6,
        Position2=8
    ;   Position1=7,
        Position2=8
    ;   Position2=1,
        Position1=2
    ;   Position2=1,
        Position1=3
    ;   Position2=1,
        Position1=4
    ;   Position2=2,
        Position1=3
    ;   Position2=2,
        Position1=4
    ;   Position2=3,
        Position1=4
    ;   Position2=5,
        Position1=6
    ;   Position2=5,
        Position1=7
    ;   Position2=5,
        Position1=8
    ;   Position2=6,
        Position1=7
    ;   Position2=6,
        Position1=8
    ;   Position2=7,
        Position1=8
    ;   Position1=4,
        Position2=7
    ;   Position2=4,
        Position1=7
    ).


% Side1(GateAO)=4.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',435).
% From E: 
% 
% side1(gateAO)=4.
side1(gateAO,4).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',437).
% Side2(GateAO)=7.
% From E: 
% 
% side2(gateAO)=7.
side2(gateAO,7).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e',439).
%; End of file.
% From E: 
% 
% :-call_pel_directive(translate(ending,'/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e.lps')).
:- call_pel_directive(translate(ending,
                                '/pack/logicmoo_ec/ext/ec_sources/examples/AkmanEtAl2004/ZooWorld.e.lps')).
