:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingABook.e',103).
% translate: unskipped  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e.lps 
:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(lps).
% translate: begining  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e.lps 
% Thu, 08 Oct 2020 19:06:27 GMT File: <stream>(0x5600a3a3a600)%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{Mueller:2004c,
%;   author = "Erik T. Mueller",
%;   year = "2004",
%;   title = "Understanding script-based stories using commonsense reasoning",
%;   journal = "Cognitive Systems Research",
%;   volume = "5",
%;   number = "4",
%;   pages = "307--340",
%; }
%;

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',22).
% option modeldiff on
:- if(is_e_toplevel).
:- set_ec_option(modeldiff, on).
:- endif.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',24).
% ignore Love, ThreatenedBy
 %  pl=axiom(ignore(love),[]).
ignore(love).
 %  ignore(love).
 %  pl=axiom(ignore(threatenedBy),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',24).
ignore(threatenedBy).
 %  ignore(threatenedBy).

% ignore LookOutOnto, Floor, BuildingOf, SkyOf, GroundOf
 %  pl=axiom(ignore(lookOutOnto),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',24).
ignore(lookOutOnto).
 %  ignore(lookOutOnto).
 %  pl=axiom(ignore(floor),[]).
ignore(floor).
 %  ignore(floor).
 %  pl=axiom(ignore(buildingOf),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',24).
ignore(buildingOf).
 %  ignore(buildingOf).
 %  pl=axiom(ignore(skyOf),[]).
ignore(skyOf).
 %  ignore(skyOf).
 %  pl=axiom(ignore(groundOf),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',24).
ignore(groundOf).
 %  ignore(groundOf).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',26).
% ignore Near, WalkFrom, WalkFromTo, RunFromTo
 %  pl=axiom(ignore(near),[]).
ignore(near).
 %  ignore(near).
 %  pl=axiom(ignore(walkFrom),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',26).
ignore(walkFrom).
 %  ignore(walkFrom).
 %  pl=axiom(ignore(walkFromTo),[]).
ignore(walkFromTo).
 %  ignore(walkFromTo).
 %  pl=axiom(ignore(runFromTo),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',26).
ignore(runFromTo).
 %  ignore(runFromTo).

% ignore Side1, Side2
 %  pl=axiom(ignore(side1),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',26).
ignore(side1).
 %  ignore(side1).
 %  pl=axiom(ignore(side2),[]).
ignore(side2).
 %  ignore(side2).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',29).
% load foundations/Root.e
:- if(is_e_toplevel).
:- load_e_cond('foundations/Root.e', changed).
 %  load('/pack/logicmoo_ec/ext/ec_sources/foundations/Root.e',changed).
:- endif.

% load foundations/EC.e
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',29).
:- if(is_e_toplevel).
:- load_e_cond('foundations/EC.e', changed).
 %  load('/pack/logicmoo_ec/ext/ec_sources/foundations/EC.e',changed).
:- endif.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',31).
% load answers/Mueller2003/Ontology.e
:- if(is_e_toplevel).
:- load_e_cond('answers/Mueller2003/Ontology.e', changed).
 %  load('/pack/logicmoo_ec/ext/ec_sources/ecnet/Ontology.e',changed).
:- endif.

% load answers/Mueller2004c/RTSpaceM.e
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',31).
:- if(is_e_toplevel).
:- load_e_cond('answers/Mueller2004c/RTSpaceM.e', changed).
 %  load('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',changed).
:- endif.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',33).
% load answers/Mueller2004c/OTSpaceM.e
:- if(is_e_toplevel).
:- load_e_cond('answers/Mueller2004c/OTSpaceM.e', changed).
 %  load('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',changed).
:- endif.

% load answers/Mueller2004c/Container.e
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',33).
:- if(is_e_toplevel).
:- load_e_cond('answers/Mueller2004c/Container.e', changed).
 %  load('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',changed).
:- endif.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',35).
% load answers/Mueller2004c/Cognition.e
:- if(is_e_toplevel).
:- load_e_cond('answers/Mueller2004c/Cognition.e', changed).
 %  load('/pack/logicmoo_ec/ext/ec_sources/ecnet/Cognition.e',changed).
:- endif.

% load answers/Mueller2003/Sleep.e
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',35).
:- if(is_e_toplevel).
:- load_e_cond('answers/Mueller2003/Sleep.e', changed).
 %  load('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',changed).
:- endif.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',37).
% load answers/Mueller2003/Vision.e
:- if(is_e_toplevel).
:- load_e_cond('answers/Mueller2003/Vision.e', changed).
 %  load('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vision.e',changed).
:- endif.

% load answers/Mueller2004c/HandTo.e
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',37).
:- if(is_e_toplevel).
:- load_e_cond('answers/Mueller2004c/HandTo.e', changed).
 %  load('/pack/logicmoo_ec/ext/ec_sources/ecnet/HandTo.e',changed).
:- endif.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',40).
% location Location1
 %  t(location,location1).
location(location1).
 %  location(location1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',42).
% portal DummyPortal1
 %  t(portal,dummyPortal1).
portal(dummyPortal1).
 %  portal(dummyPortal1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',44).
% agent Recipient1
 %  t(agent,recipient1).
agent(recipient1).
 %  agent(recipient1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',46).
% letter Letter1
 %  t(letter,letter1).
letter(letter1).
 %  letter(letter1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',48).
% container Envelope1
 %  t(container,envelope1).
container(envelope1).
 %  container(envelope1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',50).
% physobj Surface1
 %  t(physobj,surface1).
physobj(surface1).
 %  physobj(surface1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',52).
% chair Chair1
 %  t(chair,chair1).
chair(chair1).
 %  chair(chair1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',54).
% content Content1
 %  t(content,content1).
content(content1).
 %  content(content1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',56).
% agent Carrier1
 %  t(agent,carrier1).
agent(carrier1).
 %  agent(carrier1).
%; prune

% sort ona, onb
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',58).
sort(ona).
 %  sort(ona).
sort(onb).
 %  sort(onb).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',60).
% fluent! On(ona,onb)
 %  blue=fluent(on(ona,onb)).
 %  fluent(on(ona,onb)).
fluents([on/2]).
 %  fluents([on/2]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',60).
mpred_prop(on(ona,onb),fluent).
 %  mpred_prop(on(ona,onb),fluent).

% event! PlaceOn(agent,ona,onb)
 %  blue=event(placeOn(agent,ona,onb)).
 %  event(placeOn(agent,ona,onb)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',60).
actions([placeOn/3]).
 %  actions([placeOn/3]).
mpred_prop(placeOn(agent,ona,onb),event).
 %  mpred_prop(placeOn(agent,ona,onb),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',62).
% event! TakeOffOf(agent,ona,onb)
 %  blue=event(takeOffOf(agent,ona,onb)).
 %  event(takeOffOf(agent,ona,onb)).
actions([takeOffOf/3]).
 %  actions([takeOffOf/3]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',62).
mpred_prop(takeOffOf(agent,ona,onb),event).
 %  mpred_prop(takeOffOf(agent,ona,onb),event).

% ona! Envelope1, Letter1
 %  t(ona,envelope1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',62).
ona(envelope1).
 %  ona(envelope1).
 %  t(ona,letter1).
ona(letter1).
 %  ona(letter1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',64).
% onb! Surface1
 %  t(onb,surface1).
onb(surface1).
 %  onb(surface1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',66).
% sort insidea, insideb
sort(insidea).
 %  sort(insidea).
sort(insideb).
 %  sort(insideb).

% fluent! Inside(insidea,insideb)
 %  blue=fluent(inside(insidea,insideb)).
 %  fluent(inside(insidea,insideb)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',66).
fluents([inside/2]).
 %  fluents([inside/2]).
mpred_prop(inside(insidea,insideb),fluent).
 %  mpred_prop(inside(insidea,insideb),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',68).
% event! PutInside(agent,insidea,insideb)
 %  blue=event(putInside(agent,insidea,insideb)).
 %  event(putInside(agent,insidea,insideb)).
actions([putInside/3]).
 %  actions([putInside/3]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',68).
mpred_prop(putInside(agent,insidea,insideb),event).
 %  mpred_prop(putInside(agent,insidea,insideb),event).

% event! TakeOutOf(agent,insidea,insideb)
 %  blue=event(takeOutOf(agent,insidea,insideb)).
 %  event(takeOutOf(agent,insidea,insideb)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',68).
actions([takeOutOf/3]).
 %  actions([takeOutOf/3]).
mpred_prop(takeOutOf(agent,insidea,insideb),event).
 %  mpred_prop(takeOutOf(agent,insidea,insideb),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',70).
% insidea! Letter1
 %  t(insidea,letter1).
insidea(letter1).
 %  insidea(letter1).

% insideb! Envelope1
 %  t(insideb,envelope1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',70).
insideb(envelope1).
 %  insideb(envelope1).
%; initial state
% [agent,physobj]
 % !HoldsAt(SittingOn(agent,physobj),0).
 %  pl=axiom(initially(neg(sittingOn(Agent,Physobj))),[]).
 %  initially(neg(sittingOn(Agent,Physobj))).
initially not sittingOn(Agent, Physobj).
 %  initial_state([not(sittingOn(Agent,Physobj))]).
 %  initial_state([not(sittingOn(Agent,Physobj))]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',75).
% [agent,physobj]
 % !HoldsAt(LyingOn(agent,physobj),0).
 %  pl=axiom(initially(neg(lyingOn(Agent,Physobj))),[]).
 %  initially(neg(lyingOn(Agent,Physobj))).
initially not lyingOn(Agent, Physobj).
 %  initial_state([not(lyingOn(Agent,Physobj))]).
 %  initial_state([not(lyingOn(Agent,Physobj))]).


% HoldsAt(Dressed(Recipient1),0).
 %  pl=axiom(initially(dressed(recipient1)),[]).
initially dressed(recipient1).
 %  initial_state([dressed(recipient1)]).
 %  initial_state([dressed(recipient1)]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',77).
% HoldsAt(Dressed(Carrier1),0).
 %  pl=axiom(initially(dressed(carrier1)),[]).
initially dressed(carrier1).
 %  initial_state([dressed(carrier1)]).
 %  initial_state([dressed(carrier1)]).


% HoldsAt(Awake(Recipient1),0).
 %  pl=axiom(initially(awake(recipient1)),[]).
initially awake(recipient1).
 %  initial_state([awake(recipient1)]).
 %  initial_state([awake(recipient1)]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',79).
% HoldsAt(Awake(Carrier1),0).
 %  pl=axiom(initially(awake(carrier1)),[]).
initially awake(carrier1).
 %  initial_state([awake(carrier1)]).
 %  initial_state([awake(carrier1)]).


% HoldsAt(Sleep3(Recipient1),0).
 %  pl=axiom(initially(sleep3(recipient1)),[]).
initially sleep3(recipient1).
 %  initial_state([sleep3(recipient1)]).
 %  initial_state([sleep3(recipient1)]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',81).
% HoldsAt(Sleep3(Carrier1),0).
 %  pl=axiom(initially(sleep3(carrier1)),[]).
initially sleep3(carrier1).
 %  initial_state([sleep3(carrier1)]).
 %  initial_state([sleep3(carrier1)]).


% HoldsAt(Standing(Recipient1),0).
 %  pl=axiom(initially(standing(recipient1)),[]).
initially standing(recipient1).
 %  initial_state([standing(recipient1)]).
 %  initial_state([standing(recipient1)]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',83).
% HoldsAt(Standing(Carrier1),0).
 %  pl=axiom(initially(standing(carrier1)),[]).
initially standing(carrier1).
 %  initial_state([standing(carrier1)]).
 %  initial_state([standing(carrier1)]).


% HoldsAt(ContainerClosed(Envelope1),0).
 %  pl=axiom(initially(containerClosed(envelope1)),[]).
initially containerClosed(envelope1).
 %  initial_state([containerClosed(envelope1)]).
 %  initial_state([containerClosed(envelope1)]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',85).
% HoldsAt(Inside(Letter1,Envelope1),0).
 %  pl=axiom(initially(inside(letter1,envelope1)),[]).
initially inside(letter1, envelope1).
 %  initial_state([inside(letter1,envelope1)]).
 %  initial_state([inside(letter1,envelope1)]).


% [physobj1,physobj2]
% !(physobj1=Letter1 & physobj2=Envelope1) ->
% !HoldsAt(Inside(physobj1, physobj2),0).
 %  clausify_pnf=(not((equals(letter1, Physobj1), equals(envelope1, Physobj2)))->initially(neg(inside(Physobj1, Physobj2)))).

 /*  initially(neg(inside(Physobj1, Physobj2))) :-
       (   not(equals(letter1, Physobj1))
       ;   not(equals(envelope1, Physobj2))
       ).
 */
 %   pl=axiom(initially(neg(inside(Physobj1, Physobj2))), [(not(equals(Physobj1, letter1));not(equals(Physobj2, envelope1)))]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',87).

 /*  not(equals(Physobj1, letter1));not(equals(Physobj2, envelope1)) ->
       initially(neg(inside(Physobj1, Physobj2))).
 */
if not equals(letter1, Physobj1);not equals(envelope1, Physobj2)then initially not inside(Physobj1, Physobj2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',87).

 /*   reactive_rule([  (not(equals(letter1, Physobj1));not(equals(envelope1, Physobj2)))
                    ],
                    [initially(not(inside(Physobj1, Physobj2)))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',87).

 /*   reactive_rule([  (not(equals(letter1, Physobj1));not(equals(envelope1, Physobj2)))
                    ],
                    [initially(not(inside(Physobj1, Physobj2)))]).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',89).
% [agent,object]
 % !HoldsAt(See(agent,object),0).
 %  pl=axiom(initially(neg(see(Agent,Object))),[]).
 %  initially(neg(see(Agent,Object))).
initially not see(Agent, Object).
 %  initial_state([not(see(Agent,Object))]).
 %  initial_state([not(see(Agent,Object))]).


% [agent,object]
% !(agent=Carrier1 & object=Envelope1) ->
% !HoldsAt(Holding(agent,object),0).
 %  clausify_pnf=(not((equals(carrier1, Agent), equals(envelope1, Object)))->initially(neg(holding(Agent, Object)))).

 /*  initially(neg(holding(Agent, Object))) :-
       (   not(equals(carrier1, Agent))
       ;   not(equals(envelope1, Object))
       ).
 */
 %   pl=axiom(initially(neg(holding(Agent, Object))), [(not(equals(Agent, carrier1));not(equals(Object, envelope1)))]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',91).

 /*  not(equals(Agent, carrier1));not(equals(Object, envelope1)) ->
       initially(neg(holding(Agent, Object))).
 */
if not equals(carrier1, Agent);not equals(envelope1, Object)then initially not holding(Agent, Object).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',91).

 /*   reactive_rule([  (not(equals(carrier1, Agent));not(equals(envelope1, Object)))
                    ],
                    [initially(not(holding(Agent, Object)))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',91).

 /*   reactive_rule([  (not(equals(carrier1, Agent));not(equals(envelope1, Object)))
                    ],
                    [initially(not(holding(Agent, Object)))]).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',93).
% HoldsAt(Holding(Carrier1,Envelope1),0).
 %  pl=axiom(initially(holding(carrier1,envelope1)),[]).
initially holding(carrier1, envelope1).
 %  initial_state([holding(carrier1,envelope1)]).
 %  initial_state([holding(carrier1,envelope1)]).


% [physobj1,physobj2]
 % !HoldsAt(On(physobj1, physobj2),0).
 %  pl=axiom(initially(neg(on(Physobj1,Physobj2))),[]).
 %  initially(neg(on(Physobj1,Physobj2))).
initially not on(Physobj1, Physobj2).
 %  initial_state([not(on(Physobj1,Physobj2))]).
 %  initial_state([not(on(Physobj1,Physobj2))]).


%; narrative


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',97).
% Happens(PlaceOn(Carrier1,Envelope1,Surface1),0).
 %  pl=axiom(happens(placeOn(carrier1,envelope1,surface1),start),[]).
 %  happens(placeOn(carrier1,envelope1,surface1),start).
observe(at(placeOn(carrier1,envelope1,surface1),start)).
 %  observe(at(placeOn(carrier1,envelope1,surface1),start)).


% Happens(TakeOffOf(Recipient1,Envelope1,Surface1),1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',97).

 /*  pl=axiom(happens(takeOffOf(recipient1,envelope1,surface1),When),
         [b(start,When)]).
 */

 /*  b(start, When) ->
       happens(takeOffOf(recipient1, envelope1, surface1), When).
 */
if b(start, When)then happens(takeOffOf(recipient1, envelope1, surface1), When).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',97).

 /*  reactive_rule([b(start,When)],
   	      [ happens(takeOffOf(recipient1,envelope1,surface1),
   			When)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',97).

 /*  reactive_rule([b(start,When)],
   	      [ happens(takeOffOf(recipient1,envelope1,surface1),
   			When)
   	      ]).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',99).
%;Happens(HandTo(Carrier1,Recipient1,Envelope1),0).


% Happens(SitOn(Recipient1,Chair1),2).

 /*  pl=axiom(happens(sitOn(recipient1,chair1),Start_Num2),
         [b(start,Start_Num2),toffset(start,2,Start_Num2)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',99).

 /*  (   b(start, Start_Num2),
       toffset(start, 2, Start_Num2)
   ->  happens(sitOn(recipient1, chair1), Start_Num2)
   ).
 */
if b(start, Start_Num2), toffset(start, 2, Start_Num2)then happens(sitOn(recipient1, chair1), Start_Num2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',99).

 /*  reactive_rule([ b(start,Start_Num2),
   		toffset(start,2,Start_Num2)
   	      ],
   	      [happens(sitOn(recipient1,chair1),Start_Num2)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',99).

 /*  reactive_rule([ b(start,Start_Num2),
   		toffset(start,2,Start_Num2)
   	      ],
   	      [happens(sitOn(recipient1,chair1),Start_Num2)]).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',101).
% Happens(ContainerOpen(Recipient1,Envelope1),3).

 /*  pl=axiom(happens(containerOpen(recipient1,envelope1),Start_Num3),
         [b(start,Start_Num3),toffset(start,3,Start_Num3)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',101).

 /*  (   b(start, Start_Num3),
       toffset(start, 3, Start_Num3)
   ->  happens(containerOpen(recipient1, envelope1), Start_Num3)
   ).
 */
if b(start, Start_Num3), toffset(start, 3, Start_Num3)then happens(containerOpen(recipient1, envelope1), Start_Num3).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',101).

 /*  reactive_rule([ b(start,Start_Num3),
   		toffset(start,3,Start_Num3)
   	      ],
   	      [ happens(containerOpen(recipient1,envelope1),
   			Start_Num3)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',101).

 /*  reactive_rule([ b(start,Start_Num3),
   		toffset(start,3,Start_Num3)
   	      ],
   	      [ happens(containerOpen(recipient1,envelope1),
   			Start_Num3)
   	      ]).
 */


% Happens(TakeOutOf(Recipient1,Letter1,Envelope1),4).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',101).

 /*  pl=axiom(happens(takeOutOf(recipient1,letter1,envelope1),Start_Num4),
         [b(start,Start_Num4),toffset(start,4,Start_Num4)]).
 */

 /*  (   b(start, Start_Num4),
       toffset(start, 4, Start_Num4)
   ->  happens(takeOutOf(recipient1, letter1, envelope1), Start_Num4)
   ).
 */
if b(start, Start_Num4), toffset(start, 4, Start_Num4)then happens(takeOutOf(recipient1, letter1, envelope1), Start_Num4).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',101).

 /*  reactive_rule([ b(start,Start_Num4),
   		toffset(start,4,Start_Num4)
   	      ],
   	      [ happens(takeOutOf(recipient1,letter1,envelope1),
   			Start_Num4)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',101).

 /*  reactive_rule([ b(start,Start_Num4),
   		toffset(start,4,Start_Num4)
   	      ],
   	      [ happens(takeOutOf(recipient1,letter1,envelope1),
   			Start_Num4)
   	      ]).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',103).
% Happens(LookAt(Recipient1,Letter1),5).

 /*  pl=axiom(happens(lookAt(recipient1,letter1),Start_Num5),
         [b(start,Start_Num5),toffset(start,5,Start_Num5)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',103).

 /*  (   b(start, Start_Num5),
       toffset(start, 5, Start_Num5)
   ->  happens(lookAt(recipient1, letter1), Start_Num5)
   ).
 */
if b(start, Start_Num5), toffset(start, 5, Start_Num5)then happens(lookAt(recipient1, letter1), Start_Num5).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',103).

 /*  reactive_rule([ b(start,Start_Num5),
   		toffset(start,5,Start_Num5)
   	      ],
   	      [happens(lookAt(recipient1,letter1),Start_Num5)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',103).

 /*  reactive_rule([ b(start,Start_Num5),
   		toffset(start,5,Start_Num5)
   	      ],
   	      [happens(lookAt(recipient1,letter1),Start_Num5)]).
 */


% Happens(Read(Recipient1,Letter1,Content1),6).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',103).

 /*  pl=axiom(happens(read(recipient1,letter1,content1),Start_Num6),
         [b(start,Start_Num6),toffset(start,6,Start_Num6)]).
 */

 /*  (   b(start, Start_Num6),
       toffset(start, 6, Start_Num6)
   ->  happens(read(recipient1, letter1, content1), Start_Num6)
   ).
 */
if b(start, Start_Num6), toffset(start, 6, Start_Num6)then happens(read(recipient1, letter1, content1), Start_Num6).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',103).

 /*  reactive_rule([ b(start,Start_Num6),
   		toffset(start,6,Start_Num6)
   	      ],
   	      [ happens(read(recipient1,letter1,content1),
   			Start_Num6)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',103).

 /*  reactive_rule([ b(start,Start_Num6),
   		toffset(start,6,Start_Num6)
   	      ],
   	      [ happens(read(recipient1,letter1,content1),
   			Start_Num6)
   	      ]).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',105).
% Happens(ThinkAbout(Recipient1,Content1),7).

 /*  pl=axiom(happens(thinkAbout(recipient1,content1),Start_Num7),
         [b(start,Start_Num7),toffset(start,7,Start_Num7)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',105).

 /*  (   b(start, Start_Num7),
       toffset(start, 7, Start_Num7)
   ->  happens(thinkAbout(recipient1, content1), Start_Num7)
   ).
 */
if b(start, Start_Num7), toffset(start, 7, Start_Num7)then happens(thinkAbout(recipient1, content1), Start_Num7).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',105).

 /*  reactive_rule([ b(start,Start_Num7),
   		toffset(start,7,Start_Num7)
   	      ],
   	      [ happens(thinkAbout(recipient1,content1),
   			Start_Num7)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',105).

 /*  reactive_rule([ b(start,Start_Num7),
   		toffset(start,7,Start_Num7)
   	      ],
   	      [ happens(thinkAbout(recipient1,content1),
   			Start_Num7)
   	      ]).
 */


% Happens(Understand(Recipient1,Content1),8).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',105).

 /*  pl=axiom(happens(understand(recipient1,content1),Start_Num8),
         [b(start,Start_Num8),toffset(start,8,Start_Num8)]).
 */

 /*  (   b(start, Start_Num8),
       toffset(start, 8, Start_Num8)
   ->  happens(understand(recipient1, content1), Start_Num8)
   ).
 */
if b(start, Start_Num8), toffset(start, 8, Start_Num8)then happens(understand(recipient1, content1), Start_Num8).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',105).

 /*  reactive_rule([ b(start,Start_Num8),
   		toffset(start,8,Start_Num8)
   	      ],
   	      [ happens(understand(recipient1,content1),
   			Start_Num8)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',105).

 /*  reactive_rule([ b(start,Start_Num8),
   		toffset(start,8,Start_Num8)
   	      ],
   	      [ happens(understand(recipient1,content1),
   			Start_Num8)
   	      ]).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',107).
% Happens(PutInside(Recipient1,Letter1,Envelope1),9).

 /*  pl=axiom(happens(putInside(recipient1,letter1,envelope1),Start_Num9),
         [b(start,Start_Num9),toffset(start,9,Start_Num9)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',107).

 /*  (   b(start, Start_Num9),
       toffset(start, 9, Start_Num9)
   ->  happens(putInside(recipient1, letter1, envelope1), Start_Num9)
   ).
 */
if b(start, Start_Num9), toffset(start, 9, Start_Num9)then happens(putInside(recipient1, letter1, envelope1), Start_Num9).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',107).

 /*  reactive_rule([ b(start,Start_Num9),
   		toffset(start,9,Start_Num9)
   	      ],
   	      [ happens(putInside(recipient1,letter1,envelope1),
   			Start_Num9)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',107).

 /*  reactive_rule([ b(start,Start_Num9),
   		toffset(start,9,Start_Num9)
   	      ],
   	      [ happens(putInside(recipient1,letter1,envelope1),
   			Start_Num9)
   	      ]).
 */


% Happens(RiseFrom(Recipient1,Chair1),10).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',107).

 /*  pl=axiom(happens(riseFrom(recipient1,chair1),Start_Num10),
         [b(start,Start_Num10),toffset(start,10,Start_Num10)]).
 */

 /*  (   b(start, Start_Num10),
       toffset(start, 10, Start_Num10)
   ->  happens(riseFrom(recipient1, chair1), Start_Num10)
   ).
 */
if b(start, Start_Num10), toffset(start, 10, Start_Num10)then happens(riseFrom(recipient1, chair1), Start_Num10).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',107).

 /*  reactive_rule([ b(start,Start_Num10),
   		toffset(start,10,Start_Num10)
   	      ],
   	      [happens(riseFrom(recipient1,chair1),Start_Num10)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',107).

 /*  reactive_rule([ b(start,Start_Num10),
   		toffset(start,10,Start_Num10)
   	      ],
   	      [happens(riseFrom(recipient1,chair1),Start_Num10)]).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',109).
% Happens(PlaceOn(Recipient1,Envelope1,Surface1),11).

 /*  pl=axiom(happens(placeOn(recipient1,envelope1,surface1),Start_Num11),
         [b(start,Start_Num11),toffset(start,11,Start_Num11)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',109).

 /*  (   b(start, Start_Num11),
       toffset(start, 11, Start_Num11)
   ->  happens(placeOn(recipient1, envelope1, surface1), Start_Num11)
   ).
 */
if b(start, Start_Num11), toffset(start, 11, Start_Num11)then happens(placeOn(recipient1, envelope1, surface1), Start_Num11).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',109).

 /*  reactive_rule([ b(start,Start_Num11),
   		toffset(start,11,Start_Num11)
   	      ],
   	      [ happens(placeOn(recipient1,envelope1,surface1),
   			Start_Num11)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',109).

 /*  reactive_rule([ b(start,Start_Num11),
   		toffset(start,11,Start_Num11)
   	      ],
   	      [ happens(placeOn(recipient1,envelope1,surface1),
   			Start_Num11)
   	      ]).
 */

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',111).
% range time 0 12
range(time,0,12).
 %  range(time,0,12).

% range offset 0 0
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',111).
range(offset,0,0).
 %  range(offset,0,0).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',113).
% range diameter 0 0
range(diameter,0,0).
 %  range(diameter,0,0).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',115).
% completion Happens
completion(happens).
 %  completion(happens).
%; End of file.
% translate: ending  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e.lps 
