:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingABook.e',103).
% translate: unskipped  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e.lps 
:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(lps).
% translate: begining  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e.lps 
% Thu, 08 Oct 2020 21:36:39 GMT File: <stream>(0x55894c1dde00)%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{Mueller:2004c,
%;   author = "Erik T. Mueller",
%;   year = "2004",
%;   title = "Understanding script-based stories using commonsense reasoning",
%;   journal = "Cognitive Systems Research",
%;   volume = "5",
%;   number = "4",
%;   pages = "307--340",
%; }
%;

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',22).
% option modeldiff on
:- if(is_e_toplevel).
:- set_ec_option(modeldiff, on).
:- endif.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',24).
% ignore Love, ThreatenedBy
% ignore(love).
ignore(love).
% ignore(threatenedBy).
ignore(threatenedBy).

% ignore LookOutOnto, Floor, BuildingOf, SkyOf, GroundOf
% ignore(lookOutOnto).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',24).
ignore(lookOutOnto).
% ignore(floor).
ignore(floor).
% ignore(buildingOf).
ignore(buildingOf).
% ignore(skyOf).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',24).
ignore(skyOf).
% ignore(groundOf).
ignore(groundOf).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',26).
% ignore Near, WalkFrom, WalkFromTo, RunFromTo
% ignore(near).
ignore(near).
% ignore(walkFrom).
ignore(walkFrom).
% ignore(walkFromTo).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',26).
ignore(walkFromTo).
% ignore(runFromTo).
ignore(runFromTo).

% ignore Side1, Side2
% ignore(side1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',26).
ignore(side1).
% ignore(side2).
ignore(side2).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',29).
% load foundations/Root.e
:- if(is_e_toplevel).
:- load_e_cond('foundations/Root.e', changed).
 %  load('/pack/logicmoo_ec/ext/ec_sources/foundations/Root.e',changed).
:- endif.

% load foundations/EC.e
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',29).
:- if(is_e_toplevel).
:- load_e_cond('foundations/EC.e', changed).
 %  load('/pack/logicmoo_ec/ext/ec_sources/foundations/EC.e',changed).
:- endif.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',31).
% load answers/Mueller2003/Ontology.e
:- if(is_e_toplevel).
:- load_e_cond('answers/Mueller2003/Ontology.e', changed).
 %  load('/pack/logicmoo_ec/ext/ec_sources/ecnet/Ontology.e',changed).
:- endif.

% load answers/Mueller2004c/RTSpaceM.e
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',31).
:- if(is_e_toplevel).
:- load_e_cond('answers/Mueller2004c/RTSpaceM.e', changed).
 %  load('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',changed).
:- endif.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',33).
% load answers/Mueller2004c/OTSpaceM.e
:- if(is_e_toplevel).
:- load_e_cond('answers/Mueller2004c/OTSpaceM.e', changed).
 %  load('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',changed).
:- endif.

% load answers/Mueller2004c/Container.e
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',33).
:- if(is_e_toplevel).
:- load_e_cond('answers/Mueller2004c/Container.e', changed).
 %  load('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',changed).
:- endif.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',35).
% load answers/Mueller2004c/Cognition.e
:- if(is_e_toplevel).
:- load_e_cond('answers/Mueller2004c/Cognition.e', changed).
 %  load('/pack/logicmoo_ec/ext/ec_sources/ecnet/Cognition.e',changed).
:- endif.

% load answers/Mueller2003/Sleep.e
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',35).
:- if(is_e_toplevel).
:- load_e_cond('answers/Mueller2003/Sleep.e', changed).
 %  load('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',changed).
:- endif.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',37).
% load answers/Mueller2003/Vision.e
:- if(is_e_toplevel).
:- load_e_cond('answers/Mueller2003/Vision.e', changed).
 %  load('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vision.e',changed).
:- endif.

% load answers/Mueller2004c/HandTo.e
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',37).
:- if(is_e_toplevel).
:- load_e_cond('answers/Mueller2004c/HandTo.e', changed).
 %  load('/pack/logicmoo_ec/ext/ec_sources/ecnet/HandTo.e',changed).
:- endif.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',40).
% location Location1
% t(location,location1).
location(location1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',42).
% portal DummyPortal1
% t(portal,dummyPortal1).
portal(dummyPortal1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',44).
% agent Recipient1
% t(agent,recipient1).
agent(recipient1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',46).
% letter Letter1
% t(letter,letter1).
letter(letter1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',48).
% container Envelope1
% t(container,envelope1).
container(envelope1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',50).
% physobj Surface1
% t(physobj,surface1).
physobj(surface1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',52).
% chair Chair1
% t(chair,chair1).
chair(chair1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',54).
% content Content1
% t(content,content1).
content(content1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',56).
% agent Carrier1
% t(agent,carrier1).
agent(carrier1).
%; prune

% sort ona, onb
% sort(ona).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',58).
sort(ona).
% sort(onb).
sort(onb).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',60).
% fluent! On(ona,onb)
% fluent(
%    on(ona,onb)).
fluents([on/2]).
% mpred_prop(
%    on(ona,onb), 
%    fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',60).
mpred_prop(on(ona,onb),fluent).

% event! PlaceOn(agent,ona,onb)
% event(
%    placeOn(agent,ona,onb)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',60).
actions([placeOn/3]).
% mpred_prop(
%    placeOn(agent,ona,onb), 
%    event).
mpred_prop(placeOn(agent,ona,onb),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',62).
% event! TakeOffOf(agent,ona,onb)
% event(
%    takeOffOf(agent,ona,onb)).
actions([takeOffOf/3]).
% mpred_prop(
%    takeOffOf(agent,ona,onb), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',62).
mpred_prop(takeOffOf(agent,ona,onb),event).

% ona! Envelope1, Letter1
% t(ona,envelope1).
ona(envelope1).
% t(ona,letter1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',62).
ona(letter1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',64).
% onb! Surface1
% t(onb,surface1).
onb(surface1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',66).
% sort insidea, insideb
% sort(insidea).
sort(insidea).
% sort(insideb).
sort(insideb).

% fluent! Inside(insidea,insideb)
% fluent(
%    inside(insidea,insideb)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',66).
fluents([inside/2]).
% mpred_prop(
%    inside(insidea,insideb), 
%    fluent).
mpred_prop(inside(insidea,insideb),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',68).
% event! PutInside(agent,insidea,insideb)
% event(
%    putInside(agent,insidea,insideb)).
actions([putInside/3]).
% mpred_prop(
%    putInside(agent,insidea,insideb), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',68).
mpred_prop(putInside(agent,insidea,insideb),event).

% event! TakeOutOf(agent,insidea,insideb)
% event(
%    takeOutOf(agent,insidea,insideb)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',68).
actions([takeOutOf/3]).
% mpred_prop(
%    takeOutOf(agent,insidea,insideb), 
%    event).
mpred_prop(takeOutOf(agent,insidea,insideb),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',70).
% insidea! Letter1
% t(insidea,letter1).
insidea(letter1).

% insideb! Envelope1
% t(insideb,envelope1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',70).
insideb(envelope1).
%; initial state
% [agent,physobj]
 % !HoldsAt(SittingOn(agent,physobj),0).
% initially(
%    neg(
%       sittingOn(Agent,Physobj))).
initially not sittingOn(Agent, Physobj).
 %  initial_state([not(sittingOn(Agent,Physobj))]).
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',75).
% [agent,physobj]
 % !HoldsAt(LyingOn(agent,physobj),0).
% initially(
%    neg(
%       lyingOn(Agent,Physobj))).
initially not lyingOn(Agent, Physobj).
 %  initial_state([not(lyingOn(Agent,Physobj))]).
 %  "% =================================".


% HoldsAt(Dressed(Recipient1),0).
% initially(
%    dressed(recipient1)).
initially dressed(recipient1).
 %  initial_state([dressed(recipient1)]).
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',77).
% HoldsAt(Dressed(Carrier1),0).
% initially(
%    dressed(carrier1)).
initially dressed(carrier1).
 %  initial_state([dressed(carrier1)]).
 %  "% =================================".


% HoldsAt(Awake(Recipient1),0).
% initially(
%    awake(recipient1)).
initially awake(recipient1).
 %  initial_state([awake(recipient1)]).
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',79).
% HoldsAt(Awake(Carrier1),0).
% initially(
%    awake(carrier1)).
initially awake(carrier1).
 %  initial_state([awake(carrier1)]).
 %  "% =================================".


% HoldsAt(Sleep3(Recipient1),0).
% initially(
%    sleep3(recipient1)).
initially sleep3(recipient1).
 %  initial_state([sleep3(recipient1)]).
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',81).
% HoldsAt(Sleep3(Carrier1),0).
% initially(
%    sleep3(carrier1)).
initially sleep3(carrier1).
 %  initial_state([sleep3(carrier1)]).
 %  "% =================================".


% HoldsAt(Standing(Recipient1),0).
% initially(
%    standing(recipient1)).
initially standing(recipient1).
 %  initial_state([standing(recipient1)]).
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',83).
% HoldsAt(Standing(Carrier1),0).
% initially(
%    standing(carrier1)).
initially standing(carrier1).
 %  initial_state([standing(carrier1)]).
 %  "% =================================".


% HoldsAt(ContainerClosed(Envelope1),0).
% initially(
%    containerClosed(envelope1)).
initially containerClosed(envelope1).
 %  initial_state([containerClosed(envelope1)]).
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',85).
% HoldsAt(Inside(Letter1,Envelope1),0).
% initially(
%    inside(letter1,envelope1)).
initially inside(letter1, envelope1).
 %  initial_state([inside(letter1,envelope1)]).
 %  "% =================================".


% [physobj1,physobj2]
% !(physobj1=Letter1 & physobj2=Envelope1) ->
% !HoldsAt(Inside(physobj1, physobj2),0).
% '->'(
%    ';'(
%       not(
%          equals(Physobj1,letter1)), 
%       not(
%          equals(Physobj2,envelope1))), 
%    initially(
%       neg(
%          inside(Physobj1,Physobj2)))).
if not equals(letter1, Physobj1);not equals(envelope1, Physobj2)then initially not inside(Physobj1, Physobj2).

 /*   reactive_rule([  (not(equals(letter1, Physobj1));not(equals(envelope1, Physobj2)))
                    ],
                    [initially(not(inside(Physobj1, Physobj2)))]).
 */
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',89).
% [agent,object]
 % !HoldsAt(See(agent,object),0).
% initially(
%    neg(
%       see(Agent,Object))).
initially not see(Agent, Object).
 %  initial_state([not(see(Agent,Object))]).
 %  "% =================================".


% [agent,object]
% !(agent=Carrier1 & object=Envelope1) ->
% !HoldsAt(Holding(agent,object),0).
% '->'(
%    ';'(
%       not(
%          equals(Agent,carrier1)), 
%       not(
%          equals(Object,envelope1))), 
%    initially(
%       neg(
%          holding(Agent,Object)))).
if not equals(carrier1, Agent);not equals(envelope1, Object)then initially not holding(Agent, Object).

 /*   reactive_rule([  (not(equals(carrier1, Agent));not(equals(envelope1, Object)))
                    ],
                    [initially(not(holding(Agent, Object)))]).
 */
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',93).
% HoldsAt(Holding(Carrier1,Envelope1),0).
% initially(
%    holding(carrier1,envelope1)).
initially holding(carrier1, envelope1).
 %  initial_state([holding(carrier1,envelope1)]).
 %  "% =================================".


% [physobj1,physobj2]
 % !HoldsAt(On(physobj1, physobj2),0).
% initially(
%    neg(
%       on(Physobj1,Physobj2))).
initially not on(Physobj1, Physobj2).
 %  initial_state([not(on(Physobj1,Physobj2))]).
 %  "% =================================".


%; narrative


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',97).
% Happens(PlaceOn(Carrier1,Envelope1,Surface1),0).
% happens(
%    placeOn(carrier1,envelope1,surface1), 
%    start).
observe(at(placeOn(carrier1,envelope1,surface1),start)).


% Happens(TakeOffOf(Recipient1,Envelope1,Surface1),1).
% happens(
%    takeOffOf(recipient1,envelope1,surface1), 
%    start+1).
observe takeOffOf(recipient1, envelope1, surface1)at start+1.
 %  observe([takeOffOf(recipient1,envelope1,surface1)],start+1).
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',99).
%;Happens(HandTo(Carrier1,Recipient1,Envelope1),0).


% Happens(SitOn(Recipient1,Chair1),2).
% happens(
%    sitOn(recipient1,chair1), 
%    start+2).
observe sitOn(recipient1, chair1)at start+2.
 %  observe([sitOn(recipient1,chair1)],start+2).
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',101).
% Happens(ContainerOpen(Recipient1,Envelope1),3).
% happens(
%    containerOpen(recipient1,envelope1), 
%    start+3).
observe containerOpen(recipient1, envelope1)at start+3.
 %  observe([containerOpen(recipient1,envelope1)],start+3).
 %  "% =================================".


% Happens(TakeOutOf(Recipient1,Letter1,Envelope1),4).
% happens(
%    takeOutOf(recipient1,letter1,envelope1), 
%    start+4).
observe takeOutOf(recipient1, letter1, envelope1)at start+4.
 %  observe([takeOutOf(recipient1,letter1,envelope1)],start+4).
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',103).
% Happens(LookAt(Recipient1,Letter1),5).
% happens(
%    lookAt(recipient1,letter1), 
%    start+5).
observe lookAt(recipient1, letter1)at start+5.
 %  observe([lookAt(recipient1,letter1)],start+5).
 %  "% =================================".


% Happens(Read(Recipient1,Letter1,Content1),6).
% happens(
%    read(recipient1,letter1,content1), 
%    start+6).
observe read(recipient1, letter1, content1)at start+6.
 %  observe([read(recipient1,letter1,content1)],start+6).
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',105).
% Happens(ThinkAbout(Recipient1,Content1),7).
% happens(
%    thinkAbout(recipient1,content1), 
%    start+7).
observe thinkAbout(recipient1, content1)at start+7.
 %  observe([thinkAbout(recipient1,content1)],start+7).
 %  "% =================================".


% Happens(Understand(Recipient1,Content1),8).
% happens(
%    understand(recipient1,content1), 
%    start+8).
observe understand(recipient1, content1)at start+8.
 %  observe([understand(recipient1,content1)],start+8).
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',107).
% Happens(PutInside(Recipient1,Letter1,Envelope1),9).
% happens(
%    putInside(recipient1,letter1,envelope1), 
%    start+9).
observe putInside(recipient1, letter1, envelope1)at start+9.
 %  observe([putInside(recipient1,letter1,envelope1)],start+9).
 %  "% =================================".


% Happens(RiseFrom(Recipient1,Chair1),10).
% happens(
%    riseFrom(recipient1,chair1), 
%    start+10).
observe riseFrom(recipient1, chair1)at start+10.
 %  observe([riseFrom(recipient1,chair1)],start+10).
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',109).
% Happens(PlaceOn(Recipient1,Envelope1,Surface1),11).
% happens(
%    placeOn(recipient1,envelope1,surface1), 
%    start+11).
observe placeOn(recipient1, envelope1, surface1)at start+11.
 %  observe([placeOn(recipient1,envelope1,surface1)],start+11).
 %  "% =================================".

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',111).
% range time 0 12
% range(time,0,12).
range(time,0,12).

% range offset 0 0
% range(offset,0,0).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',111).
range(offset,0,0).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',113).
% range diameter 0 0
% range(diameter,0,0).
range(diameter,0,0).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',115).
% completion Happens
% completion(happens).
completion(happens).
%; End of file.
% translate: ending  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e.lps 
