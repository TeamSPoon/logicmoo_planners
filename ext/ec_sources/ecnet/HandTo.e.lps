:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Gun.e',82).
% translate: unskipped  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/HandTo.e.lps 
:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(lps).
% translate: begining  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/HandTo.e.lps 
% Thu, 08 Oct 2020 21:36:20 GMT File: <stream>(0x55894c1e0d00)%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/HandTo.e',12).
% event HandTo(agent,agent,physobj)
% event(
%    handTo(agent,agent,physobj)).
actions([handTo/3]).
% mpred_prop(
%    handTo(agent,agent,physobj), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/HandTo.e',12).
mpred_prop(handTo(agent,agent,physobj),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/HandTo.e',14).
% [agent1,agent2,physobj,time]
% Initiates(HandTo(agent1,agent2,physobj),
%           Holding(agent2,physobj),
%           time).
% initiates(
%    handTo(Agent1,Agent2,Physobj), 
%    holding(Agent2,Physobj), 
%    Time).
handTo(Agent1, Agent2, Physobj)initiates holding(Agent2, Physobj).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/HandTo.e',14).

 /*  initiated(happens(handTo(Agent1,Agent2,Physobj),
   		  Time_From,
   		  Time_Until),
   	  holding(Agent2,Physobj),
   	  []).
 */
 %  "% =================================".


% [agent1,agent2,physobj,time]
% Terminates(HandTo(agent1,agent2,physobj),
%            Holding(agent1,physobj),
%            time).
% terminates(
%    handTo(Agent1,Agent2,Physobj), 
%    holding(Agent1,Physobj), 
%    Time).
handTo(Agent1, Agent2, Physobj)terminates holding(Agent1, Physobj).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/HandTo.e',20).

 /*  terminated(happens(handTo(Agent1,Agent2,Physobj),
   		   Time_From,
   		   Time_Until),
   	   holding(Agent1,Physobj),
   	   []).
 */
 %  "% =================================".


% [agent1,agent2,physobj,time]
% Happens(HandTo(agent1,agent2,physobj),time) ->
% HoldsAt(Holding(agent1,physobj),time).
% '->'(
%    metreqs(
%       handTo(Agent1,Agent2,Physobj)), 
%    requires(
%       handTo(Agent1,Agent2,Physobj), 
%       When_Time)).
if handTo(Agent1, Agent2, Physobj)then requires(handTo(Agent1, Agent2, Physobj), When_Time).

 /*  reactive_rule([ happens(handTo(Agent1,Agent2,Physobj),
   			Time_From,
   			Time_Until)
   	      ],
   	      [ requires(handTo(Agent1,
   				Agent2,
   				Physobj),
   			 When_Time)
   	      ]).
 */
 %  "% =================================".
% '->'(
%    holding(Agent1,Physobj), 
%    metreqs(
%       handTo(Agent1,Agent2,Physobj))).
handTo(Agent1, Agent2, Physobj)if holding(Agent1, Physobj).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/HandTo.e',25).

 /*  l_events(happens(handTo(Agent1,Agent2,Physobj),
   		 Time_From7,
   		 Time_From7),
   	 [holds(holding(Agent1,Physobj),Time_From7)]).
 */
 %  "% =================================".
% '->'(
%    not(
%       holding(Agent1,Physobj)), 
%    not(
%       handTo(Agent1,Agent2,Physobj))).
if not holding(Agent1, Physobj)then not handTo(Agent1, Agent2, Physobj).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/HandTo.e',25).

 /*  reactive_rule([ holds(not(holding(Agent1,Physobj)),
   		      Time_At)
   	      ],
   	      [not(handTo(Agent1,Agent2,Physobj))]).
 */
 %  "% =================================".

% event ShakeHands(agent,agent)
% event(
%    shakeHands(agent,agent)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/HandTo.e',27).
actions([shakeHands/2]).
% mpred_prop(
%    shakeHands(agent,agent), 
%    event).
mpred_prop(shakeHands(agent,agent),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/HandTo.e',30).
% event WriteOn(agent,paper,pen)
% event(
%    writeOn(agent,paper,pen)).
actions([writeOn/3]).
% mpred_prop(
%    writeOn(agent,paper,pen), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/HandTo.e',30).
mpred_prop(writeOn(agent,paper,pen),event).
% translate: ending  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/HandTo.e.lps 
