:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Money.e',12).
% translate: unskipped  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e.lps 
:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(lps).
% translate: begining  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e.lps 
% Thu, 08 Oct 2020 19:06:16 GMT File: <stream>(0x5600a39e3000)


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Money.e',12).
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; OMSpace: object-scale metric space
%;
%; The OMSpace representation deals with metric space at
%; the scale of objects.
%;
%; @article{Morgenstern:2001,
%;   author = "Morgenstern, Leora",
%;   year = "2001",
%;   title = "Mid-sized axiomatizations of commonsense problems: A case study in egg cracking",
%;   journal = "Studia Logica",
%;   volume = "67",
%;   pages = "333--384",
%; }
%;
%; @article{Shanahan:2003,
%;   author = "Shanahan, Murray",
%;   year = "2004",
%;   title = "An attempt to formalise a non-trivial benchmark problem in common sense reasoning",
%;   journal = "Artificial Intelligence",
%;   volume = "153",
%;   pages = "141--165",
%; }
%;

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',35).
% sort height: integer
subsort(height,integer).
 %  subsort(height,integer).

% sort distance: integer
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',35).
subsort(distance,integer).
 %  subsort(distance,integer).
%; Height
%; The height of object is height.

% fluent Height(object,height)
 %  blue=fluent(height(object,height)).
 %  fluent(height(object,height)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',40).
fluents([height/2]).
 %  fluents([height/2]).
mpred_prop(height(object,height),fluent).
 %  mpred_prop(height(object,height),fluent).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',43).
%; State constraint represent the fact that each
%; object has a unique height:
% [object,height1,height2,time]
% HoldsAt(Height(object,height1),time) &
% HoldsAt(Height(object,height2),time) ->
% height1=height2.
 %  clausify_pnf=(holds_at(height(Object, Height1), Time), holds_at(height(Object, Height2), Time)->equals(Height1, Height2)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',45).

 /*  not(holds_at(height(Object, Height1), Time)) :-
       holds_at(height(Object, Height2), Time),
       not(equals(Height1, Height2)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',45).

 /*  pl=axiom(not(height(Object,Height1)),
         [ height(Object,Height2),
   	not(equals(Height1,Height2))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',45).

 /*  (   height(Object, Height2),
       not(equals(Height1, Height2))
   ->  not(height(Object, Height1))
   ).
 */
if height(Object, Height2), not equals(Height1, Height2)then not height(Object, Height1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',45).

 /*  reactive_rule([ height(Object,Height2),
   		not(equals(Height1,Height2))
   	      ],
   	      [not(height(Object,Height1))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',45).

 /*  reactive_rule([ height(Object,Height2),
   		not(equals(Height1,Height2))
   	      ],
   	      [not(height(Object,Height1))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',45).

 /*  not(holds_at(height(Object, Height2), Time)) :-
       holds_at(height(Object, Height1), Time),
       not(equals(Height1, Height2)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',45).

 /*  pl=axiom(not(height(Object,Height2)),
         [ height(Object,Height1),
   	not(equals(Height2,Height1))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',45).

 /*  (   height(Object, Height1),
       not(equals(Height2, Height1))
   ->  not(height(Object, Height2))
   ).
 */
if height(Object, Height1), not equals(Height2, Height1)then not height(Object, Height2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',45).

 /*  reactive_rule([ height(Object,Height1),
   		not(equals(Height2,Height1))
   	      ],
   	      [not(height(Object,Height2))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',45).

 /*  reactive_rule([ height(Object,Height1),
   		not(equals(Height2,Height1))
   	      ],
   	      [not(height(Object,Height2))]).
 */


% [object,time]
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',51).
% {height}% HoldsAt(Height(object,height),time).

 /*  clausify_pnf=exists([Height],
          holds_at(height(Object,Height),Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',51).

 /*  holds_at(height(Object, Exists_Height), Time) :-
       some(Exists_Height, '$kolem_Fn_23'(Object, Time)).
 */

 /*  fix_axiom_head(Time) ->
       [ holds_at(height(Object, Exists_Height), Time),
          (->),
         height(Object, Exists_Height)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',51).

 /*  pl=axiom(height(Object,Exists_Height),
         [some(Exists_Height,'$kolem_Fn_23'(Object,Time))]).
 */

 /*  some(Exists_Height, '$kolem_Fn_23'(Object, Time)) ->
       height(Object, Exists_Height).
 */
if some(Exists_Height, '$kolem_Fn_23'(Object, Time))then height(Object, Exists_Height).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',51).

 /*  reactive_rule([ some(Exists_Height,
   		     '$kolem_Fn_23'(Object,Time))
   	      ],
   	      [height(Object,Exists_Height)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',51).

 /*  reactive_rule([ some(Exists_Height,
   		     '$kolem_Fn_23'(Object,Time))
   	      ],
   	      [height(Object,Exists_Height)]).
 */


%; falling
%; physobj1 is falling from physobj2 to physobj3.

% fluent FallingFromTo(physobj,physobj,physobj)
 %  blue=fluent(fallingFromTo(physobj,physobj,physobj)).
 %  fluent(fallingFromTo(physobj,physobj,physobj)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',56).
fluents([fallingFromTo/3]).
 %  fluents([fallingFromTo/3]).
mpred_prop(fallingFromTo(physobj,physobj,physobj),fluent).
 %  mpred_prop(fallingFromTo(physobj,physobj,physobj),fluent).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',56).
%; physobj1 starts falling from physobj2 to physobj3.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',59).
% event StartFallingFromTo(physobj,physobj,physobj)
 %  blue=event(startFallingFromTo(physobj,physobj,physobj)).
 %  event(startFallingFromTo(physobj,physobj,physobj)).
events([startFallingFromTo/3]).
 %  events([startFallingFromTo/3]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',59).
mpred_prop(startFallingFromTo(physobj,physobj,physobj),event).
 %  mpred_prop(startFallingFromTo(physobj,physobj,physobj),event).


%; physobj1 collides with physobj2.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',61).
% event CollideWith(physobj,physobj)
 %  blue=event(collideWith(physobj,physobj)).
 %  event(collideWith(physobj,physobj)).
events([collideWith/2]).
 %  events([collideWith/2]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',61).
mpred_prop(collideWith(physobj,physobj),event).
 %  mpred_prop(collideWith(physobj,physobj),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',63).
%; An effect axiom states that if a first physical object starts
%; falling from a second physical object to a third physical
%; object, the first physical object will be falling from the
%; second physical object to the third physical object:
% [physobj1,physobj2,physobj3,time]
% Initiates(StartFallingFromTo(physobj1,physobj2,physobj3),
%           FallingFromTo(physobj1,physobj2,physobj3),
%           time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',67).

 /*  pl=axiom(initiates(startFallingFromTo(Physobj1,
   				   Physobj2,
   				   Physobj3),
   		fallingFromTo(Physobj1,
   			      Physobj2,
   			      Physobj3),
   		Time),
         []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',67).

 /*  initiates(startFallingFromTo(Physobj1,
   			     Physobj2,
   			     Physobj3),
   	  fallingFromTo(Physobj1,Physobj2,Physobj3),
   	  Time).
 */
startFallingFromTo(Physobj1, Physobj2, Physobj3)initiates fallingFromTo(Physobj1, Physobj2, Physobj3).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',67).

 /*  initiated(happens(startFallingFromTo(Physobj1,
   				     Physobj2,
   				     Physobj3),
   		  Time_From,
   		  Time_Until),
   	  fallingFromTo(Physobj1,Physobj2,Physobj3),
   	  []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',67).

 /*  initiated(happens(startFallingFromTo(Physobj1,
   				     Physobj2,
   				     Physobj3),
   		  Time_From,
   		  Time_Until),
   	  fallingFromTo(Physobj1,Physobj2,Physobj3),
   	  []).
 */


%; A precondition axiom states that for
%; a first physical object to start
%; falling from a second physical object to a third physical
%; object,
%; the height of the first physical object and the
%; second physical object must be the same.
% [physobj1,physobj2,physobj3,height1,height2,time]
% Happens(StartFallingFromTo(physobj1,physobj2,physobj3),time) &
% HoldsAt(Height(physobj1,height1),time) &
% HoldsAt(Height(physobj2,height2),time) ->
% height1=height2.
 %  clausify_pnf=(happens(startFallingFromTo(Physobj1, Physobj2, Physobj3), Time), holds_at(height(Physobj1, Height1), Time), holds_at(height(Physobj2, Height2), Time)->equals(Height1, Height2)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',78).

 /*  not(happens(startFallingFromTo(Physobj1, Physobj2, Physobj3), Time)) :-
       holds_at(height(Physobj1, Height1), Time),
       holds_at(height(Physobj2, Height2), Time),
       not(equals(Height1, Height2)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',78).

 /*  fix_axiom_head(Time) ->
       [ not(happens(startFallingFromTo(Physobj1,
                                        Physobj2,
                                        Physobj3),
                     Time)),
          (->),
         not(startFallingFromTo(Physobj1, Physobj2, Physobj3))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',78).

 /*  pl=axiom(not(startFallingFromTo(Physobj1,
   			     Physobj2,
   			     Physobj3)),
         [ height(Physobj1,Height1),
   	height(Physobj2,Height2),
   	not(equals(Height1,Height2))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',78).

 /*  (   height(Physobj1, Height1),
       height(Physobj2, Height2),
       not(equals(Height1, Height2))
   ->  not(startFallingFromTo(Physobj1, Physobj2, Physobj3))
   ).
 */
if height(Physobj1, Height1), height(Physobj2, Height2), not equals(Height1, Height2)then not startFallingFromTo(Physobj1, Physobj2, Physobj3).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',78).

 /*  reactive_rule([ height(Physobj1,Height1),
   		height(Physobj2,Height2),
   		not(equals(Height1,Height2))
   	      ],
   	      [ not(startFallingFromTo(Physobj1,
   				       Physobj2,
   				       Physobj3))
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',78).

 /*  reactive_rule([ height(Physobj1,Height1),
   		height(Physobj2,Height2),
   		not(equals(Height1,Height2))
   	      ],
   	      [ not(startFallingFromTo(Physobj1,
   				       Physobj2,
   				       Physobj3))
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',78).

 /*  not(holds_at(height(Physobj1, Height1), Time)) :-
       holds_at(height(Physobj2, Height2), Time),
       happens(startFallingFromTo(Physobj1, Physobj2, Physobj3),
               Time),
       not(equals(Height1, Height2)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',78).

 /*  pl=axiom(not(height(Physobj1,Height1)),
         [ height(Physobj2,Height2),
   	startFallingFromTo(Physobj1,
   			   Physobj2,
   			   Physobj3),
   	not(equals(Height1,Height2))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',78).

 /*  (   height(Physobj2, Height2),
       startFallingFromTo(Physobj1, Physobj2, Physobj3),
       not(equals(Height1, Height2))
   ->  not(height(Physobj1, Height1))
   ).
 */
if height(Physobj2, Height2), startFallingFromTo(Physobj1, Physobj2, Physobj3), not equals(Height1, Height2)then not height(Physobj1, Height1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',78).

 /*  reactive_rule([ height(Physobj2,Height2),
   		happens(startFallingFromTo(Physobj1,
   					   Physobj2,
   					   Physobj3),
   			Time_From,
   			Time_Until),
   		not(equals(Height1,Height2))
   	      ],
   	      [not(height(Physobj1,Height1))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',78).

 /*  reactive_rule([ height(Physobj2,Height2),
   		happens(startFallingFromTo(Physobj1,
   					   Physobj2,
   					   Physobj3),
   			Time_From,
   			Time_Until),
   		not(equals(Height1,Height2))
   	      ],
   	      [not(height(Physobj1,Height1))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',78).

 /*  not(holds_at(height(Physobj2, Height2), Time)) :-
       holds_at(height(Physobj1, Height1), Time),
       happens(startFallingFromTo(Physobj1, Physobj2, Physobj3),
               Time),
       not(equals(Height1, Height2)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',78).

 /*  pl=axiom(not(height(Physobj2,Height2)),
         [ height(Physobj1,Height1),
   	startFallingFromTo(Physobj1,
   			   Physobj2,
   			   Physobj3),
   	not(equals(Height2,Height1))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',78).

 /*  (   height(Physobj1, Height1),
       startFallingFromTo(Physobj1, Physobj2, Physobj3),
       not(equals(Height2, Height1))
   ->  not(height(Physobj2, Height2))
   ).
 */
if height(Physobj1, Height1), startFallingFromTo(Physobj1, Physobj2, Physobj3), not equals(Height2, Height1)then not height(Physobj2, Height2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',78).

 /*  reactive_rule([ height(Physobj1,Height1),
   		happens(startFallingFromTo(Physobj1,
   					   Physobj2,
   					   Physobj3),
   			Time_From8,
   			Time_Until9),
   		not(equals(Height2,Height1))
   	      ],
   	      [not(height(Physobj2,Height2))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',78).

 /*  reactive_rule([ height(Physobj1,Height1),
   		happens(startFallingFromTo(Physobj1,
   					   Physobj2,
   					   Physobj3),
   			Time_From8,
   			Time_Until9),
   		not(equals(Height2,Height1))
   	      ],
   	      [not(height(Physobj2,Height2))]).
 */


%; A state constraint says that a physical object
%; cannot fall from itself, cannot fall to itself,
%; and cannot fall from and to the same physical object:
% [physobj1,physobj2,physobj3,time]
% HoldsAt(FallingFromTo(physobj1,physobj2,physobj3),time) ->
% physobj1!=physobj2 &
% physobj1!=physobj3 &
% physobj2!=physobj3.
 %  clausify_pnf=(holds_at(fallingFromTo(Physobj1, Physobj2, Physobj3), Time)->diff(Physobj1, Physobj2), diff(Physobj1, Physobj3), diff(Physobj2, Physobj3)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',87).

 /*  not(holds_at(fallingFromTo(Physobj1, Physobj2, Physobj3), Time)) :-
       (   not(diff(Physobj1, Physobj2))
       ;   not(diff(Physobj1, Physobj3))
       ;   not(diff(Physobj2, Physobj3))
       ).
 */
 %   pl=axiom(not(fallingFromTo(Physobj1, Physobj2, Physobj3)), [(equals(Physobj1, Physobj2);equals(Physobj1, Physobj3);equals(Physobj2, Physobj3))]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',87).

 /*  equals(Physobj1, Physobj2);equals(Physobj1, Physobj3);equals(Physobj2, Physobj3) ->
       not(fallingFromTo(Physobj1, Physobj2, Physobj3)).
 */
if equals(Physobj1, Physobj2);equals(Physobj1, Physobj3);equals(Physobj2, Physobj3)then not fallingFromTo(Physobj1, Physobj2, Physobj3).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',87).

 /*   reactive_rule([  (equals(Physobj1, Physobj2);equals(Physobj1, Physobj3);equals(Physobj2, Physobj3))
                    ],
                    [ holds(not(fallingFromTo(Physobj1,
                                              Physobj2,
                                              Physobj3)),
                            Holds)
                    ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',87).

 /*   reactive_rule([  (equals(Physobj1, Physobj2);equals(Physobj1, Physobj3);equals(Physobj2, Physobj3))
                    ],
                    [ holds(not(fallingFromTo(Physobj1,
                                              Physobj2,
                                              Physobj3)),
                            Holds)
                    ]).
 */


%; A state constraint says that the sky cannot fall:
% [sky,physobj1,physobj2,time]
% !HoldsAt(FallingFromTo(sky,physobj1,physobj2),time).

 /*  fix_axiom_head(Time) ->
       [ holds_at(neg(fallingFromTo(Sky, Physobj1, Physobj2)),
                  Time),
          (->),
         not(fallingFromTo(Sky, Physobj1, Physobj2))
       ].
 */
 %  pl=axiom(not(fallingFromTo(Sky,Physobj1,Physobj2)),[]).
not fallingFromTo(Sky, Physobj1, Physobj2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',94).

 /*  l_int(holds(not(fallingFromTo(Sky,Physobj1,Physobj2)),
   	    Holds),
         []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',94).

 /*  l_int(holds(not(fallingFromTo(Sky,Physobj1,Physobj2)),
   	    Holds),
         []).
 */


%; A releases axiom states that if
%; if a first physical object starts
%; falling from a second physical object to a third physical
%; object, the height of the first physical object
%; will be released from inertia:
% [physobj1,physobj2,physobj3,height,time]
% Releases(StartFallingFromTo(physobj1,physobj2,physobj3),
%          Height(physobj1,height),
%          time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',102).

 /*  pl=axiom(releases(startFallingFromTo(Physobj1,
   				  Physobj2,
   				  Physobj3),
   	       height(Physobj1,Height),
   	       Time),
         []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',102).
releases(startFallingFromTo(Physobj1,
			    Physobj2,
			    Physobj3),
	 height(Physobj1,Height),
	 Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',102).

 /*  releases(startFallingFromTo(Physobj1,
   			    Physobj2,
   			    Physobj3),
   	 height(Physobj1,Height),
   	 Time).
 */


%; A trajectory axiom states that
%; if a first physical object starts falling
%; from a second physical object
%; to a third physical object
%; at a time and
%; the first physical object has a height at the time,
%; then the first physical object will have a height
%; equal to the height minus an offset
%; at a time equal to the time plus the offset:
% [physobj1,physobj2,physobj3,height1,height2,offset,time]
% HoldsAt(Height(physobj1,height1),time) &
% height2=height1-offset ->
% Trajectory(FallingFromTo(physobj1,physobj2,physobj3),time,
%            Height(physobj1,height2),offset).
 %  clausify_pnf=(holds_at(height(Physobj1, Height1), Time), '-Pred'(Height1, Offset, Height2)->trajectory(fallingFromTo(Physobj1, Physobj2, Physobj3), Time, height(Physobj1, Height2), Offset)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',116).

 /*  trajectory(fallingFromTo(Physobj1, Physobj2, Physobj3), Time, height(Physobj1, Height2), Offset) :-
       holds_at(height(Physobj1, Height1), Time),
       '-Pred'(Height1, Offset, Height2).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',116).

 /*  pl=axiom(trajectory(fallingFromTo(Physobj1,
   			       Physobj2,
   			       Physobj3),
   		 Time,
   		 height(Physobj1,Height2),
   		 Offset),
         [ height(Physobj1,Height1),
   	'-Pred'(Height1,Offset,Height2)
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',116).

 /*  (   height(Physobj1, Height1),
       '-Pred'(Height1, Offset, Height2)
   ->  trajectory(fallingFromTo(Physobj1, Physobj2, Physobj3),
                  Time,
                  height(Physobj1, Height2),
                  Offset)
   ).
 */
if height(Physobj1, Height1), '-Pred'(Height1, Offset, Height2)then trajectory(fallingFromTo(Physobj1, Physobj2, Physobj3), Time, height(Physobj1, Height2), Offset).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',116).

 /*  reactive_rule([ height(Physobj1,Height1),
   		'-Pred'(Height1,Offset,Height2)
   	      ],
   	      [ trajectory(fallingFromTo(Physobj1,
   					 Physobj2,
   					 Physobj3),
   			   Time,
   			   height(Physobj1,Height2),
   			   Offset)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',116).

 /*  reactive_rule([ height(Physobj1,Height1),
   		'-Pred'(Height1,Offset,Height2)
   	      ],
   	      [ trajectory(fallingFromTo(Physobj1,
   					 Physobj2,
   					 Physobj3),
   			   Time,
   			   height(Physobj1,Height2),
   			   Offset)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',116).

 /*  not(holds_at(height(Physobj1, Height1), Time)) :-
       '-Pred'(Height1, Offset, Height2),
       not(trajectory(fallingFromTo(Physobj1, Physobj2, Physobj3),
                      Time,
                      height(Physobj1, Height2),
                      Offset)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',116).

 /*  pl=axiom(not(height(Physobj1,Height1)),
         [ '-Pred'(Height1,Offset,Height2),
   	not(trajectory(fallingFromTo(Physobj1,
   				     Physobj2,
   				     Physobj3),
   		       Time,
   		       height(Physobj1,Height2),
   		       Offset))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',116).

 /*  (   '-Pred'(Height1, Offset, Height2),
       not(trajectory(fallingFromTo(Physobj1, Physobj2, Physobj3),
                      Time,
                      height(Physobj1, Height2),
                      Offset))
   ->  not(height(Physobj1, Height1))
   ).
 */
if'-Pred'(Height1, Offset, Height2), not trajectory(fallingFromTo(Physobj1, Physobj2, Physobj3), Time, height(Physobj1, Height2), Offset)then not height(Physobj1, Height1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',116).

 /*  reactive_rule([ '-Pred'(Height1,Offset,Height2),
   		not(trajectory(fallingFromTo(Physobj1,
   					     Physobj2,
   					     Physobj3),
   			       Time,
   			       height(Physobj1,Height2),
   			       Offset))
   	      ],
   	      [not(height(Physobj1,Height1))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',116).

 /*  reactive_rule([ '-Pred'(Height1,Offset,Height2),
   		not(trajectory(fallingFromTo(Physobj1,
   					     Physobj2,
   					     Physobj3),
   			       Time,
   			       height(Physobj1,Height2),
   			       Offset))
   	      ],
   	      [not(height(Physobj1,Height1))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',116).

 /*  not('-Pred'(Height1, Offset, Height2)) :-
       holds_at(height(Physobj1, Height1), Time),
       not(trajectory(fallingFromTo(Physobj1, Physobj2, Physobj3),
                      Time,
                      height(Physobj1, Height2),
                      Offset)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',116).

 /*  fix_axiom_head(Time) ->
       [ holds_at(height(Physobj1, Height1), Time),
          (->),
         height(Physobj1, Height1)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',116).

 /*  pl=axiom(not('-Pred'(Height1,Offset,Height2)),
         [ height(Physobj1,Height1),
   	not(trajectory(fallingFromTo(Physobj1,
   				     Physobj2,
   				     Physobj3),
   		       Time,
   		       height(Physobj1,Height2),
   		       Offset))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',116).

 /*  (   height(Physobj1, Height1),
       not(trajectory(fallingFromTo(Physobj1, Physobj2, Physobj3),
                      Time,
                      height(Physobj1, Height2),
                      Offset))
   ->  not('-Pred'(Height1, Offset, Height2))
   ).
 */
if height(Physobj1, Height1), not trajectory(fallingFromTo(Physobj1, Physobj2, Physobj3), Time, height(Physobj1, Height2), Offset)then not'-Pred'(Height1, Offset, Height2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',116).

 /*  reactive_rule([ height(Physobj1,Height1),
   		not(trajectory(fallingFromTo(Physobj1,
   					     Physobj2,
   					     Physobj3),
   			       Time,
   			       height(Physobj1,Height2),
   			       Offset))
   	      ],
   	      [not('-Pred'(Height1,Offset,Height2))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',116).

 /*  reactive_rule([ height(Physobj1,Height1),
   		not(trajectory(fallingFromTo(Physobj1,
   					     Physobj2,
   					     Physobj3),
   			       Time,
   			       height(Physobj1,Height2),
   			       Offset))
   	      ],
   	      [not('-Pred'(Height1,Offset,Height2))]).
 */


%; A trigger axiom states that
%; if a first physical object is falling
%; from a second physical object
%; to a third physical object and
%; the height of the first physical object
%; is the same as the height of the third physical object,
%; the first physical object collides with the
%; third physical object:
% [physobj1,physobj2,physobj3,height,time]
% HoldsAt(FallingFromTo(physobj1,physobj2,physobj3),time) &
% HoldsAt(Height(physobj1,height),time) &
% HoldsAt(Height(physobj3,height),time) ->
% Happens(CollideWith(physobj1,physobj3),time).
 %  clausify_pnf=(holds_at(fallingFromTo(Physobj1, Physobj2, Physobj3), Time), holds_at(height(Physobj1, Height), Time), holds_at(height(Physobj3, Height), Time)->happens(collideWith(Physobj1, Physobj3), Time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',130).

 /*  happens(collideWith(Physobj1, Physobj3), Time) :-
       holds_at(fallingFromTo(Physobj1, Physobj2, Physobj3),
                Time),
       holds_at(height(Physobj1, Height), Time),
       holds_at(height(Physobj3, Height), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',130).

 /*  fix_axiom_head(Time) ->
       [ happens(collideWith(Physobj1, Physobj3), Time),
          (->),
         collideWith(Physobj1, Physobj3)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',130).

 /*  pl=axiom(collideWith(Physobj1,Physobj3),
         [ fallingFromTo(Physobj1,Physobj2,Physobj3),
   	height(Physobj1,Height),
   	height(Physobj3,Height)
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',130).

 /*  (   fallingFromTo(Physobj1, Physobj2, Physobj3),
       height(Physobj1, Height),
       height(Physobj3, Height)
   ->  collideWith(Physobj1, Physobj3)
   ).
 */
if fallingFromTo(Physobj1, Physobj2, Physobj3), height(Physobj1, Height), height(Physobj3, Height)then collideWith(Physobj1, Physobj3).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',130).

 /*  reactive_rule([ holds(fallingFromTo(Physobj1,
   				    Physobj2,
   				    Physobj3),
   		      Holds),
   		height(Physobj1,Height),
   		height(Physobj3,Height)
   	      ],
   	      [collideWith(Physobj1,Physobj3)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',130).

 /*  reactive_rule([ holds(fallingFromTo(Physobj1,
   				    Physobj2,
   				    Physobj3),
   		      Holds),
   		height(Physobj1,Height),
   		height(Physobj3,Height)
   	      ],
   	      [collideWith(Physobj1,Physobj3)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',130).

 /*  not(holds_at(fallingFromTo(Physobj1, Physobj2, Physobj3), Time)) :-
       holds_at(height(Physobj1, Height), Time),
       holds_at(height(Physobj3, Height), Time),
       not(happens(collideWith(Physobj1, Physobj3), Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',130).

 /*  pl=axiom(not(fallingFromTo(Physobj1,Physobj2,Physobj3)),
         [ height(Physobj1,Height),
   	height(Physobj3,Height),
   	not(collideWith(Physobj1,Physobj3))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',130).

 /*  (   height(Physobj1, Height),
       height(Physobj3, Height),
       not(collideWith(Physobj1, Physobj3))
   ->  not(fallingFromTo(Physobj1, Physobj2, Physobj3))
   ).
 */
if height(Physobj1, Height), height(Physobj3, Height), not collideWith(Physobj1, Physobj3)then not fallingFromTo(Physobj1, Physobj2, Physobj3).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',130).

 /*  reactive_rule([ height(Physobj1,Height),
   		height(Physobj3,Height),
   		not(collideWith(Physobj1,Physobj3))
   	      ],
   	      [ holds(not(fallingFromTo(Physobj1,
   					Physobj2,
   					Physobj3)),
   		      Holds6)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',130).

 /*  reactive_rule([ height(Physobj1,Height),
   		height(Physobj3,Height),
   		not(collideWith(Physobj1,Physobj3))
   	      ],
   	      [ holds(not(fallingFromTo(Physobj1,
   					Physobj2,
   					Physobj3)),
   		      Holds6)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',130).

 /*  not(holds_at(height(Physobj1, Height), Time)) :-
       holds_at(height(Physobj3, Height), Time),
       holds_at(fallingFromTo(Physobj1, Physobj2, Physobj3),
                Time),
       not(happens(collideWith(Physobj1, Physobj3), Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',130).

 /*  pl=axiom(not(height(Physobj1,Height)),
         [ height(Physobj3,Height),
   	fallingFromTo(Physobj1,Physobj2,Physobj3),
   	not(collideWith(Physobj1,Physobj3))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',130).

 /*  (   height(Physobj3, Height),
       fallingFromTo(Physobj1, Physobj2, Physobj3),
       not(collideWith(Physobj1, Physobj3))
   ->  not(height(Physobj1, Height))
   ).
 */
if height(Physobj3, Height), fallingFromTo(Physobj1, Physobj2, Physobj3), not collideWith(Physobj1, Physobj3)then not height(Physobj1, Height).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',130).

 /*  reactive_rule([ height(Physobj3,Height),
   		holds(fallingFromTo(Physobj1,
   				    Physobj2,
   				    Physobj3),
   		      Holds7),
   		not(collideWith(Physobj1,Physobj3))
   	      ],
   	      [not(height(Physobj1,Height))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',130).

 /*  reactive_rule([ height(Physobj3,Height),
   		holds(fallingFromTo(Physobj1,
   				    Physobj2,
   				    Physobj3),
   		      Holds7),
   		not(collideWith(Physobj1,Physobj3))
   	      ],
   	      [not(height(Physobj1,Height))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',130).

 /*  not(holds_at(height(Physobj3, Height), Time)) :-
       holds_at(height(Physobj1, Height), Time),
       holds_at(fallingFromTo(Physobj1, Physobj2, Physobj3),
                Time),
       not(happens(collideWith(Physobj1, Physobj3), Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',130).

 /*  pl=axiom(not(height(Physobj3,Height)),
         [ height(Physobj1,Height),
   	fallingFromTo(Physobj1,Physobj2,Physobj3),
   	not(collideWith(Physobj1,Physobj3))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',130).

 /*  (   height(Physobj1, Height),
       fallingFromTo(Physobj1, Physobj2, Physobj3),
       not(collideWith(Physobj1, Physobj3))
   ->  not(height(Physobj3, Height))
   ).
 */
if height(Physobj1, Height), fallingFromTo(Physobj1, Physobj2, Physobj3), not collideWith(Physobj1, Physobj3)then not height(Physobj3, Height).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',130).

 /*  reactive_rule([ height(Physobj1,Height),
   		holds(fallingFromTo(Physobj1,
   				    Physobj2,
   				    Physobj3),
   		      Holds8),
   		not(collideWith(Physobj1,Physobj3))
   	      ],
   	      [not(height(Physobj3,Height))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',130).

 /*  reactive_rule([ height(Physobj1,Height),
   		holds(fallingFromTo(Physobj1,
   				    Physobj2,
   				    Physobj3),
   		      Holds8),
   		not(collideWith(Physobj1,Physobj3))
   	      ],
   	      [not(height(Physobj3,Height))]).
 */


%; An effect axiom states that
%; if a first physical object is falling
%; from a second physical object
%; to a third physical object and
%; the first physical object collides with
%; the third physical object,
%; the first physical object will be on the third physical object:
% [physobj1,physobj2,physobj3,time]
% HoldsAt(FallingFromTo(physobj1,physobj2,physobj3),time) ->
% Initiates(CollideWith(physobj1,physobj3),
%           On(physobj1,physobj3),
%           time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',143).

 /*  pl=axiom(initiates(collideWith(Physobj1,Physobj3),
   		on(Physobj1,Physobj3),
   		Time),
         [fallingFromTo(Physobj1,Physobj2,Physobj3)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',143).

 /*  fallingFromTo(Physobj1, Physobj2, Physobj3) ->
       initiates(collideWith(Physobj1, Physobj3),
                 on(Physobj1, Physobj3),
                 Time).
 */
if fallingFromTo(Physobj1, Physobj2, Physobj3)then initiates(collideWith(Physobj1, Physobj3), on(Physobj1, Physobj3)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',143).

 /*  reactive_rule([ holds(fallingFromTo(Physobj1,
   				    Physobj2,
   				    Physobj3),
   		      Holds)
   	      ],
   	      [ initiates(collideWith(Physobj1,Physobj3),
   			  at(on(Physobj1,Physobj3),
   			     Time),
   			  Initiates)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',143).

 /*  reactive_rule([ holds(fallingFromTo(Physobj1,
   				    Physobj2,
   				    Physobj3),
   		      Holds)
   	      ],
   	      [ initiates(collideWith(Physobj1,Physobj3),
   			  at(on(Physobj1,Physobj3),
   			     Time),
   			  Initiates)
   	      ]).
 */


%; An effect axiom states that
%; if a physical object collides with another
%; physical object,
%; the height of the first physical object will
%; be the height of the second physical object:
% [physobj1,physobj2,height,time]
% HoldsAt(Height(physobj2,height),time) ->
% Initiates(CollideWith(physobj1,physobj2),
%           Height(physobj1,height),
%           time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',154).

 /*  pl=axiom(initiates(collideWith(Physobj1,Physobj2),
   		height(Physobj1,Height),
   		Time),
         [height(Physobj2,Height)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',154).

 /*  height(Physobj2, Height) ->
       initiates(collideWith(Physobj1, Physobj2),
                 height(Physobj1, Height),
                 Time).
 */
if height(Physobj2, Height)then initiates(collideWith(Physobj1, Physobj2), height(Physobj1, Height)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',154).

 /*  reactive_rule([height(Physobj2,Height)],
   	      [ initiates(collideWith(Physobj1,Physobj2),
   			  at(height(Physobj1,Height),
   			     Time),
   			  Initiates)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',154).

 /*  reactive_rule([height(Physobj2,Height)],
   	      [ initiates(collideWith(Physobj1,Physobj2),
   			  at(height(Physobj1,Height),
   			     Time),
   			  Initiates)
   	      ]).
 */


%;[physobj1,physobj2,height1,height2,time]
%;HoldsAt(Height(physobj2,height1),time) &
%;height1 != height2 ->
%;Terminates(CollideWith(physobj1,physobj2),
%;           Height(physobj1,height2),
%;           time).
%; An effect axiom states that
%; if a first physical object is falling
%; from a second physical object
%; to a third physical object and
%; the first physical object collides with
%; the third physical object,
%; the first physical object will no longer be
%; falling from the second physical object to the
%; third physical object:
% [physobj1,physobj2,physobj3,time]
% HoldsAt(FallingFromTo(physobj1,physobj2,physobj3),time) ->
% Terminates(CollideWith(physobj1,physobj3),
%            FallingFromTo(physobj1,physobj2,physobj3),
%            time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',176).

 /*  pl=axiom(terminates(collideWith(Physobj1,Physobj3),
   		 fallingFromTo(Physobj1,
   			       Physobj2,
   			       Physobj3),
   		 Time),
         [fallingFromTo(Physobj1,Physobj2,Physobj3)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',176).

 /*  fallingFromTo(Physobj1, Physobj2, Physobj3) ->
       terminates(collideWith(Physobj1, Physobj3),
                  fallingFromTo(Physobj1, Physobj2, Physobj3),
                  Time).
 */
if fallingFromTo(Physobj1, Physobj2, Physobj3)then terminates(collideWith(Physobj1, Physobj3), fallingFromTo(Physobj1, Physobj2, Physobj3)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',176).

 /*  reactive_rule([ holds(fallingFromTo(Physobj1,
   				    Physobj2,
   				    Physobj3),
   		      Holds)
   	      ],
   	      [ terminates(collideWith(Physobj1,Physobj3),
   			   at(fallingFromTo(Physobj1,
   					    Physobj2,
   					    Physobj3),
   			      Time),
   			   Terminates)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',176).

 /*  reactive_rule([ holds(fallingFromTo(Physobj1,
   				    Physobj2,
   				    Physobj3),
   		      Holds)
   	      ],
   	      [ terminates(collideWith(Physobj1,Physobj3),
   			   at(fallingFromTo(Physobj1,
   					    Physobj2,
   					    Physobj3),
   			      Time),
   			   Terminates)
   	      ]).
 */


%; flying
%; agent is flying from physobj1 to physobj2.

% fluent FlyingFromTo(agent,physobj,physobj)
 %  blue=fluent(flyingFromTo(agent,physobj,physobj)).
 %  fluent(flyingFromTo(agent,physobj,physobj)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',184).
fluents([flyingFromTo/3]).
 %  fluents([flyingFromTo/3]).
mpred_prop(flyingFromTo(agent,physobj,physobj),fluent).
 %  mpred_prop(flyingFromTo(agent,physobj,physobj),fluent).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',184).
%; agent starts flying from physobj1 to physobj2.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',187).
% event StartFlyingFromTo(agent,physobj,physobj)
 %  blue=event(startFlyingFromTo(agent,physobj,physobj)).
 %  event(startFlyingFromTo(agent,physobj,physobj)).
actions([startFlyingFromTo/3]).
 %  actions([startFlyingFromTo/3]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',187).
mpred_prop(startFlyingFromTo(agent,physobj,physobj),event).
 %  mpred_prop(startFlyingFromTo(agent,physobj,physobj),event).


%; agent reaches physobj.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',189).
% event Reach(agent,physobj)
 %  blue=event(reach(agent,physobj)).
 %  event(reach(agent,physobj)).
actions([reach/2]).
 %  actions([reach/2]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',189).
mpred_prop(reach(agent,physobj),event).
 %  mpred_prop(reach(agent,physobj),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',191).
%; An effect axiom states that if an agent starts
%; flying from a physical object to another physical object,
%; the agent will be flying from the first physical object
%; to the second physical object:
% [agent,physobj1,physobj2,time]
% Initiates(StartFlyingFromTo(agent,physobj1,physobj2),
%           FlyingFromTo(agent,physobj1,physobj2),
%           time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',195).

 /*  pl=axiom(initiates(startFlyingFromTo(Agent,
   				  Physobj1,
   				  Physobj2),
   		flyingFromTo(Agent,Physobj1,Physobj2),
   		Time),
         []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',195).

 /*  initiates(startFlyingFromTo(Agent,Physobj1,Physobj2),
   	  flyingFromTo(Agent,Physobj1,Physobj2),
   	  Time).
 */
startFlyingFromTo(Agent, Physobj1, Physobj2)initiates flyingFromTo(Agent, Physobj1, Physobj2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',195).

 /*  initiated(happens(startFlyingFromTo(Agent,
   				    Physobj1,
   				    Physobj2),
   		  Time_From,
   		  Time_Until),
   	  flyingFromTo(Agent,Physobj1,Physobj2),
   	  []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',195).

 /*  initiated(happens(startFlyingFromTo(Agent,
   				    Physobj1,
   				    Physobj2),
   		  Time_From,
   		  Time_Until),
   	  flyingFromTo(Agent,Physobj1,Physobj2),
   	  []).
 */


%; A precondition axiom states that for
%; an agent to start flying from a physical object to
%; another physical object,
%; the height of the agent and
%; the first physical object must be the same:
% [agent,physobj1,physobj2,height1,height2,time]
% Happens(StartFlyingFromTo(agent,physobj1,physobj2),time) &
% HoldsAt(Height(agent,height1),time) &
% HoldsAt(Height(physobj1,height2),time) ->
% height1=height2.
 %  clausify_pnf=(happens(startFlyingFromTo(Agent, Physobj1, Physobj2), Time), holds_at(height(Agent, Height1), Time), holds_at(height(Physobj1, Height2), Time)->equals(Height1, Height2)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',205).

 /*  not(happens(startFlyingFromTo(Agent, Physobj1, Physobj2), Time)) :-
       holds_at(height(Agent, Height1), Time),
       holds_at(height(Physobj1, Height2), Time),
       not(equals(Height1, Height2)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',205).

 /*  fix_axiom_head(Time) ->
       [ not(happens(startFlyingFromTo(Agent, Physobj1, Physobj2),
                     Time)),
          (->),
         not(startFlyingFromTo(Agent, Physobj1, Physobj2))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',205).

 /*  pl=axiom(not(startFlyingFromTo(Agent,Physobj1,Physobj2)),
         [ height(Agent,Height1),
   	height(Physobj1,Height2),
   	not(equals(Height1,Height2))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',205).

 /*  (   height(Agent, Height1),
       height(Physobj1, Height2),
       not(equals(Height1, Height2))
   ->  not(startFlyingFromTo(Agent, Physobj1, Physobj2))
   ).
 */
if height(Agent, Height1), height(Physobj1, Height2), not equals(Height1, Height2)then not startFlyingFromTo(Agent, Physobj1, Physobj2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',205).

 /*  reactive_rule([ height(Agent,Height1),
   		height(Physobj1,Height2),
   		not(equals(Height1,Height2))
   	      ],
   	      [ not(startFlyingFromTo(Agent,
   				      Physobj1,
   				      Physobj2))
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',205).

 /*  reactive_rule([ height(Agent,Height1),
   		height(Physobj1,Height2),
   		not(equals(Height1,Height2))
   	      ],
   	      [ not(startFlyingFromTo(Agent,
   				      Physobj1,
   				      Physobj2))
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',205).

 /*  not(holds_at(height(Agent, Height1), Time)) :-
       holds_at(height(Physobj1, Height2), Time),
       happens(startFlyingFromTo(Agent, Physobj1, Physobj2),
               Time),
       not(equals(Height1, Height2)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',205).

 /*  pl=axiom(not(height(Agent,Height1)),
         [ height(Physobj1,Height2),
   	startFlyingFromTo(Agent,Physobj1,Physobj2),
   	not(equals(Height1,Height2))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',205).

 /*  (   height(Physobj1, Height2),
       startFlyingFromTo(Agent, Physobj1, Physobj2),
       not(equals(Height1, Height2))
   ->  not(height(Agent, Height1))
   ).
 */
if height(Physobj1, Height2), startFlyingFromTo(Agent, Physobj1, Physobj2), not equals(Height1, Height2)then not height(Agent, Height1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',205).

 /*  reactive_rule([ height(Physobj1,Height2),
   		happens(startFlyingFromTo(Agent,
   					  Physobj1,
   					  Physobj2),
   			Time_From,
   			Time_Until),
   		not(equals(Height1,Height2))
   	      ],
   	      [not(height(Agent,Height1))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',205).

 /*  reactive_rule([ height(Physobj1,Height2),
   		happens(startFlyingFromTo(Agent,
   					  Physobj1,
   					  Physobj2),
   			Time_From,
   			Time_Until),
   		not(equals(Height1,Height2))
   	      ],
   	      [not(height(Agent,Height1))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',205).

 /*  not(holds_at(height(Physobj1, Height2), Time)) :-
       holds_at(height(Agent, Height1), Time),
       happens(startFlyingFromTo(Agent, Physobj1, Physobj2),
               Time),
       not(equals(Height1, Height2)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',205).

 /*  pl=axiom(not(height(Physobj1,Height2)),
         [ height(Agent,Height1),
   	startFlyingFromTo(Agent,Physobj1,Physobj2),
   	not(equals(Height2,Height1))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',205).

 /*  (   height(Agent, Height1),
       startFlyingFromTo(Agent, Physobj1, Physobj2),
       not(equals(Height2, Height1))
   ->  not(height(Physobj1, Height2))
   ).
 */
if height(Agent, Height1), startFlyingFromTo(Agent, Physobj1, Physobj2), not equals(Height2, Height1)then not height(Physobj1, Height2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',205).

 /*  reactive_rule([ height(Agent,Height1),
   		happens(startFlyingFromTo(Agent,
   					  Physobj1,
   					  Physobj2),
   			Time_From8,
   			Time_Until9),
   		not(equals(Height2,Height1))
   	      ],
   	      [not(height(Physobj1,Height2))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',205).

 /*  reactive_rule([ height(Agent,Height1),
   		happens(startFlyingFromTo(Agent,
   					  Physobj1,
   					  Physobj2),
   			Time_From8,
   			Time_Until9),
   		not(equals(Height2,Height1))
   	      ],
   	      [not(height(Physobj1,Height2))]).
 */


%; A state constraint says that an agent
%; cannot fly from and to the same physical object:
% [agent,physobj1,physobj2,time]
% HoldsAt(FlyingFromTo(agent,physobj1,physobj2),time) ->
% physobj1!=physobj2.
 %  clausify_pnf=(holds_at(flyingFromTo(Agent, Physobj1, Physobj2), Time)->diff(Physobj1, Physobj2)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',213).

 /*  not(holds_at(flyingFromTo(Agent, Physobj1, Physobj2), Time)) :-
       not(diff(Physobj1, Physobj2)).
 */

 /*  pl=axiom(not(flyingFromTo(Agent,Physobj1,Physobj2)),
         [equals(Physobj1,Physobj2)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',213).

 /*  equals(Physobj1, Physobj2) ->
       not(flyingFromTo(Agent, Physobj1, Physobj2)).
 */
if equals(Physobj1, Physobj2)then not flyingFromTo(Agent, Physobj1, Physobj2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',213).

 /*  reactive_rule([equals(Physobj1,Physobj2)],
   	      [ holds(not(flyingFromTo(Agent,
   				       Physobj1,
   				       Physobj2)),
   		      Holds)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',213).

 /*  reactive_rule([equals(Physobj1,Physobj2)],
   	      [ holds(not(flyingFromTo(Agent,
   				       Physobj1,
   				       Physobj2)),
   		      Holds)
   	      ]).
 */


%; A releases axiom states that if an agent
%; starts flying from a physical object to another
%; physical object, the height of the agent will
%; be released from inertia:
% [agent,physobj1,physobj2,height,time]
% Releases(StartFlyingFromTo(agent,physobj1,physobj2),
%          Height(agent,height),
%          time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',221).

 /*  pl=axiom(releases(startFlyingFromTo(Agent,
   				 Physobj1,
   				 Physobj2),
   	       height(Agent,Height),
   	       Time),
         []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',221).
releases(startFlyingFromTo(Agent,Physobj1,Physobj2),
	 height(Agent,Height),
	 Time).

 /*  releases(startFlyingFromTo(Agent,Physobj1,Physobj2),
   	 height(Agent,Height),
   	 Time).
 */


%; A trajectory axiom states that
%; if an agent starts flying from
%; from a physical object
%; to another physical object
%; at a time and
%; the agent has a height at the time,
%; then the agent will have a height
%; equal to the height plus an offset
%; at a time equal to the time plus the offset:
% [agent,physobj1,physobj2,height1,height2,offset,time]
% HoldsAt(Height(agent,height1),time) &
% height2=height1+offset ->
% Trajectory(FlyingFromTo(agent,physobj1,physobj2),time,
%            Height(agent,height2),offset).
 %  clausify_pnf=(holds_at(height(Agent, Height1), Time), '+Pred'(Height1, Offset, Height2)->trajectory(flyingFromTo(Agent, Physobj1, Physobj2), Time, height(Agent, Height2), Offset)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',235).

 /*  trajectory(flyingFromTo(Agent, Physobj1, Physobj2), Time, height(Agent, Height2), Offset) :-
       holds_at(height(Agent, Height1), Time),
       '+Pred'(Height1, Offset, Height2).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',235).

 /*  pl=axiom(trajectory(flyingFromTo(Agent,
   			      Physobj1,
   			      Physobj2),
   		 Time,
   		 height(Agent,Height2),
   		 Offset),
         [ height(Agent,Height1),
   	'+Pred'(Height1,Offset,Height2)
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',235).

 /*  (   height(Agent, Height1),
       '+Pred'(Height1, Offset, Height2)
   ->  trajectory(flyingFromTo(Agent, Physobj1, Physobj2),
                  Time,
                  height(Agent, Height2),
                  Offset)
   ).
 */
if height(Agent, Height1), '+Pred'(Height1, Offset, Height2)then trajectory(flyingFromTo(Agent, Physobj1, Physobj2), Time, height(Agent, Height2), Offset).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',235).

 /*  reactive_rule([ height(Agent,Height1),
   		'+Pred'(Height1,Offset,Height2)
   	      ],
   	      [ trajectory(flyingFromTo(Agent,
   					Physobj1,
   					Physobj2),
   			   Time,
   			   height(Agent,Height2),
   			   Offset)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',235).

 /*  reactive_rule([ height(Agent,Height1),
   		'+Pred'(Height1,Offset,Height2)
   	      ],
   	      [ trajectory(flyingFromTo(Agent,
   					Physobj1,
   					Physobj2),
   			   Time,
   			   height(Agent,Height2),
   			   Offset)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',235).

 /*  not(holds_at(height(Agent, Height1), Time)) :-
       '+Pred'(Height1, Offset, Height2),
       not(trajectory(flyingFromTo(Agent, Physobj1, Physobj2),
                      Time,
                      height(Agent, Height2),
                      Offset)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',235).

 /*  pl=axiom(not(height(Agent,Height1)),
         [ '+Pred'(Height1,Offset,Height2),
   	not(trajectory(flyingFromTo(Agent,
   				    Physobj1,
   				    Physobj2),
   		       Time,
   		       height(Agent,Height2),
   		       Offset))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',235).

 /*  (   '+Pred'(Height1, Offset, Height2),
       not(trajectory(flyingFromTo(Agent, Physobj1, Physobj2),
                      Time,
                      height(Agent, Height2),
                      Offset))
   ->  not(height(Agent, Height1))
   ).
 */
if'+Pred'(Height1, Offset, Height2), not trajectory(flyingFromTo(Agent, Physobj1, Physobj2), Time, height(Agent, Height2), Offset)then not height(Agent, Height1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',235).

 /*  reactive_rule([ '+Pred'(Height1,Offset,Height2),
   		not(trajectory(flyingFromTo(Agent,
   					    Physobj1,
   					    Physobj2),
   			       Time,
   			       height(Agent,Height2),
   			       Offset))
   	      ],
   	      [not(height(Agent,Height1))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',235).

 /*  reactive_rule([ '+Pred'(Height1,Offset,Height2),
   		not(trajectory(flyingFromTo(Agent,
   					    Physobj1,
   					    Physobj2),
   			       Time,
   			       height(Agent,Height2),
   			       Offset))
   	      ],
   	      [not(height(Agent,Height1))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',235).

 /*  not('+Pred'(Height1, Offset, Height2)) :-
       holds_at(height(Agent, Height1), Time),
       not(trajectory(flyingFromTo(Agent, Physobj1, Physobj2),
                      Time,
                      height(Agent, Height2),
                      Offset)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',235).

 /*  fix_axiom_head(Time) ->
       [ holds_at(height(Agent, Height1), Time),
          (->),
         height(Agent, Height1)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',235).

 /*  pl=axiom(not('+Pred'(Height1,Offset,Height2)),
         [ height(Agent,Height1),
   	not(trajectory(flyingFromTo(Agent,
   				    Physobj1,
   				    Physobj2),
   		       Time,
   		       height(Agent,Height2),
   		       Offset))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',235).

 /*  (   height(Agent, Height1),
       not(trajectory(flyingFromTo(Agent, Physobj1, Physobj2),
                      Time,
                      height(Agent, Height2),
                      Offset))
   ->  not('+Pred'(Height1, Offset, Height2))
   ).
 */
if height(Agent, Height1), not trajectory(flyingFromTo(Agent, Physobj1, Physobj2), Time, height(Agent, Height2), Offset)then not'+Pred'(Height1, Offset, Height2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',235).

 /*  reactive_rule([ height(Agent,Height1),
   		not(trajectory(flyingFromTo(Agent,
   					    Physobj1,
   					    Physobj2),
   			       Time,
   			       height(Agent,Height2),
   			       Offset))
   	      ],
   	      [not('+Pred'(Height1,Offset,Height2))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',235).

 /*  reactive_rule([ height(Agent,Height1),
   		not(trajectory(flyingFromTo(Agent,
   					    Physobj1,
   					    Physobj2),
   			       Time,
   			       height(Agent,Height2),
   			       Offset))
   	      ],
   	      [not('+Pred'(Height1,Offset,Height2))]).
 */


%; A trigger axiom states that
%; if an agent is flying
%; from a physical object
%; to another physical object and
%; the height of the agent
%; is the same as the height of the second physical object,
%; the agent reaches the second physical object:
% [agent,physobj1,physobj2,height,time]
% HoldsAt(FlyingFromTo(agent,physobj1,physobj2),time) &
% HoldsAt(Height(agent,height),time) &
% HoldsAt(Height(physobj2,height),time) ->
% Happens(Reach(agent,physobj2),time).
 %  clausify_pnf=(holds_at(flyingFromTo(Agent, Physobj1, Physobj2), Time), holds_at(height(Agent, Height), Time), holds_at(height(Physobj2, Height), Time)->happens(reach(Agent, Physobj2), Time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',248).

 /*  happens(reach(Agent, Physobj2), Time) :-
       holds_at(flyingFromTo(Agent, Physobj1, Physobj2),
                Time),
       holds_at(height(Agent, Height), Time),
       holds_at(height(Physobj2, Height), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',248).

 /*  fix_axiom_head(Time) ->
       [ happens(reach(Agent, Physobj2), Time),
          (->),
         reach(Agent, Physobj2)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',248).

 /*  pl=axiom(reach(Agent,Physobj2),
         [ flyingFromTo(Agent,Physobj1,Physobj2),
   	height(Agent,Height),
   	height(Physobj2,Height)
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',248).

 /*  (   flyingFromTo(Agent, Physobj1, Physobj2),
       height(Agent, Height),
       height(Physobj2, Height)
   ->  reach(Agent, Physobj2)
   ).
 */
if flyingFromTo(Agent, Physobj1, Physobj2), height(Agent, Height), height(Physobj2, Height)then reach(Agent, Physobj2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',248).

 /*  reactive_rule([ holds(flyingFromTo(Agent,
   				   Physobj1,
   				   Physobj2),
   		      Holds),
   		height(Agent,Height),
   		height(Physobj2,Height)
   	      ],
   	      [reach(Agent,Physobj2)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',248).

 /*  reactive_rule([ holds(flyingFromTo(Agent,
   				   Physobj1,
   				   Physobj2),
   		      Holds),
   		height(Agent,Height),
   		height(Physobj2,Height)
   	      ],
   	      [reach(Agent,Physobj2)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',248).

 /*  not(holds_at(flyingFromTo(Agent, Physobj1, Physobj2), Time)) :-
       holds_at(height(Agent, Height), Time),
       holds_at(height(Physobj2, Height), Time),
       not(happens(reach(Agent, Physobj2), Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',248).

 /*  pl=axiom(not(flyingFromTo(Agent,Physobj1,Physobj2)),
         [ height(Agent,Height),
   	height(Physobj2,Height),
   	not(reach(Agent,Physobj2))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',248).

 /*  (   height(Agent, Height),
       height(Physobj2, Height),
       not(reach(Agent, Physobj2))
   ->  not(flyingFromTo(Agent, Physobj1, Physobj2))
   ).
 */
if height(Agent, Height), height(Physobj2, Height), not reach(Agent, Physobj2)then not flyingFromTo(Agent, Physobj1, Physobj2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',248).

 /*  reactive_rule([ height(Agent,Height),
   		height(Physobj2,Height),
   		not(reach(Agent,Physobj2))
   	      ],
   	      [ holds(not(flyingFromTo(Agent,
   				       Physobj1,
   				       Physobj2)),
   		      Holds6)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',248).

 /*  reactive_rule([ height(Agent,Height),
   		height(Physobj2,Height),
   		not(reach(Agent,Physobj2))
   	      ],
   	      [ holds(not(flyingFromTo(Agent,
   				       Physobj1,
   				       Physobj2)),
   		      Holds6)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',248).

 /*  not(holds_at(height(Agent, Height), Time)) :-
       holds_at(height(Physobj2, Height), Time),
       holds_at(flyingFromTo(Agent, Physobj1, Physobj2),
                Time),
       not(happens(reach(Agent, Physobj2), Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',248).

 /*  pl=axiom(not(height(Agent,Height)),
         [ height(Physobj2,Height),
   	flyingFromTo(Agent,Physobj1,Physobj2),
   	not(reach(Agent,Physobj2))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',248).

 /*  (   height(Physobj2, Height),
       flyingFromTo(Agent, Physobj1, Physobj2),
       not(reach(Agent, Physobj2))
   ->  not(height(Agent, Height))
   ).
 */
if height(Physobj2, Height), flyingFromTo(Agent, Physobj1, Physobj2), not reach(Agent, Physobj2)then not height(Agent, Height).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',248).

 /*  reactive_rule([ height(Physobj2,Height),
   		holds(flyingFromTo(Agent,
   				   Physobj1,
   				   Physobj2),
   		      Holds7),
   		not(reach(Agent,Physobj2))
   	      ],
   	      [not(height(Agent,Height))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',248).

 /*  reactive_rule([ height(Physobj2,Height),
   		holds(flyingFromTo(Agent,
   				   Physobj1,
   				   Physobj2),
   		      Holds7),
   		not(reach(Agent,Physobj2))
   	      ],
   	      [not(height(Agent,Height))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',248).

 /*  not(holds_at(height(Physobj2, Height), Time)) :-
       holds_at(height(Agent, Height), Time),
       holds_at(flyingFromTo(Agent, Physobj1, Physobj2),
                Time),
       not(happens(reach(Agent, Physobj2), Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',248).

 /*  pl=axiom(not(height(Physobj2,Height)),
         [ height(Agent,Height),
   	flyingFromTo(Agent,Physobj1,Physobj2),
   	not(reach(Agent,Physobj2))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',248).

 /*  (   height(Agent, Height),
       flyingFromTo(Agent, Physobj1, Physobj2),
       not(reach(Agent, Physobj2))
   ->  not(height(Physobj2, Height))
   ).
 */
if height(Agent, Height), flyingFromTo(Agent, Physobj1, Physobj2), not reach(Agent, Physobj2)then not height(Physobj2, Height).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',248).

 /*  reactive_rule([ height(Agent,Height),
   		holds(flyingFromTo(Agent,
   				   Physobj1,
   				   Physobj2),
   		      Holds8),
   		not(reach(Agent,Physobj2))
   	      ],
   	      [not(height(Physobj2,Height))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',248).

 /*  reactive_rule([ height(Agent,Height),
   		holds(flyingFromTo(Agent,
   				   Physobj1,
   				   Physobj2),
   		      Holds8),
   		not(reach(Agent,Physobj2))
   	      ],
   	      [not(height(Physobj2,Height))]).
 */


%; An effect axiom states that
%; if an agent reaches a physical object,
%; the height of the agent will be the
%; height of the physical object:
% [agent,physobj,height,time]
% HoldsAt(Height(physobj,height),time) ->
% Initiates(Reach(agent,physobj),Height(agent,height),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',258).

 /*  pl=axiom(initiates(reach(Agent,Physobj),
   		height(Agent,Height),
   		Time),
         [height(Physobj,Height)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',258).

 /*  height(Physobj, Height) ->
       initiates(reach(Agent, Physobj),
                 height(Agent, Height),
                 Time).
 */
if height(Physobj, Height)then initiates(reach(Agent, Physobj), height(Agent, Height)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',258).

 /*  reactive_rule([height(Physobj,Height)],
   	      [ initiates(reach(Agent,Physobj),
   			  at(height(Agent,Height),
   			     Time),
   			  Initiates)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',258).

 /*  reactive_rule([height(Physobj,Height)],
   	      [ initiates(reach(Agent,Physobj),
   			  at(height(Agent,Height),
   			     Time),
   			  Initiates)
   	      ]).
 */


%;[agent,physobj,height1,height2,time]
%;HoldsAt(Height(physobj,height1),time) &
%;height1!=height2 ->
%;Terminates(Reach(agent,physobj),Height(agent,height2),time).
%; An effect axiom states that
%; if an agent is flying
%; from a physical object
%; to another physical object and
%; the agent reaches the second physical object,
%; the agent will no longer be
%; flying from the first physical object
%; to the second physical object:
% [agent,physobj1,physobj2,time]
% HoldsAt(FlyingFromTo(agent,physobj1,physobj2),time) ->
% Terminates(Reach(agent,physobj2),
%            FlyingFromTo(agent,physobj1,physobj2),
%            time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',275).

 /*  pl=axiom(terminates(reach(Agent,Physobj2),
   		 flyingFromTo(Agent,
   			      Physobj1,
   			      Physobj2),
   		 Time),
         [flyingFromTo(Agent,Physobj1,Physobj2)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',275).

 /*  flyingFromTo(Agent, Physobj1, Physobj2) ->
       terminates(reach(Agent, Physobj2),
                  flyingFromTo(Agent, Physobj1, Physobj2),
                  Time).
 */
if flyingFromTo(Agent, Physobj1, Physobj2)then terminates(reach(Agent, Physobj2), flyingFromTo(Agent, Physobj1, Physobj2)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',275).

 /*  reactive_rule([ holds(flyingFromTo(Agent,
   				   Physobj1,
   				   Physobj2),
   		      Holds)
   	      ],
   	      [ terminates(reach(Agent,Physobj2),
   			   at(flyingFromTo(Agent,
   					   Physobj1,
   					   Physobj2),
   			      Time),
   			   Terminates)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',275).

 /*  reactive_rule([ holds(flyingFromTo(Agent,
   				   Physobj1,
   				   Physobj2),
   		      Holds)
   	      ],
   	      [ terminates(reach(Agent,Physobj2),
   			   at(flyingFromTo(Agent,
   					   Physobj1,
   					   Physobj2),
   			      Time),
   			   Terminates)
   	      ]).
 */


%; A releases axiom states that
%; if an agent holds a physical object,
%; the height of the physical object is released from inertia:
% [agent,physobj,height,time]
% Releases(Hold(agent,physobj),Height(physobj,height),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',284).

 /*  pl=axiom(releases(hold(Agent,Physobj),
   	       height(Physobj,Height),
   	       Time),
         []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',284).
releases(hold(Agent,Physobj),
	 height(Physobj,Height),
	 Time).

 /*  releases(hold(Agent,Physobj),
   	 height(Physobj,Height),
   	 Time).
 */


%;[agent,physobj,height1,height2,time]
%;(!{object} PartOf(physobj,object)) &
%;HoldsAt(Height(physobj,height1),time) &
%;height1 != height2 ->
%;Terminates(LetGoOf(agent,physobj),Height(physobj,height2),time).
% [agent,physobj,height,time]
% (!{object} PartOf(physobj,object)) &
% HoldsAt(Height(physobj,height),time) ->
% Initiates(LetGoOf(agent,physobj),Height(physobj,height),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',293).

 /*  pl=axiom(initiates(letGoOf(Agent,Physobj),
   		height(Physobj,Height),
   		Time),
         [ not(partOf(Physobj,Object)),
   	height(Physobj,Height)
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',293).

 /*  (   not(partOf(Physobj, Object)),
       height(Physobj, Height)
   ->  initiates(letGoOf(Agent, Physobj),
                 height(Physobj, Height),
                 Time)
   ).
 */
if not partOf(Physobj, Object), height(Physobj, Height)then initiates(letGoOf(Agent, Physobj), height(Physobj, Height)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',293).

 /*  reactive_rule([ not(partOf(Physobj,Object)),
   		height(Physobj,Height)
   	      ],
   	      [ initiates(letGoOf(Agent,Physobj),
   			  at(height(Physobj,Height),
   			     Time),
   			  Initiates)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',293).

 /*  reactive_rule([ not(partOf(Physobj,Object)),
   		height(Physobj,Height)
   	      ],
   	      [ initiates(letGoOf(Agent,Physobj),
   			  at(height(Physobj,Height),
   			     Time),
   			  Initiates)
   	      ]).
 */


%; A state constraint says that
%; if an agent is holding a physical object and
%; the height of the agent is height,
%; the height of the physical object is height:
% [agent,physobj,height,time]
% HoldsAt(Holding(agent,physobj),time) &
% HoldsAt(Height(agent,height),time) ->
% HoldsAt(Height(physobj,height),time).
 %  clausify_pnf=(holds_at(holding(Agent, Physobj), Time), holds_at(height(Agent, Height), Time)->holds_at(height(Physobj, Height), Time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',302).

 /*  holds_at(height(Physobj, Height), Time) :-
       holds_at(holding(Agent, Physobj), Time),
       holds_at(height(Agent, Height), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',302).

 /*  fix_axiom_head(Time) ->
       [ holds_at(height(Physobj, Height), Time),
          (->),
         height(Physobj, Height)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',302).

 /*  pl=axiom(height(Physobj,Height),
         [ holding(Agent,Physobj),
   	height(Agent,Height)
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',302).

 /*  (   holding(Agent, Physobj),
       height(Agent, Height)
   ->  height(Physobj, Height)
   ).
 */
if holding(Agent, Physobj), height(Agent, Height)then height(Physobj, Height).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',302).

 /*  reactive_rule([ holds(holding(Agent,Physobj),Holds),
   		height(Agent,Height)
   	      ],
   	      [height(Physobj,Height)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',302).

 /*  reactive_rule([ holds(holding(Agent,Physobj),Holds),
   		height(Agent,Height)
   	      ],
   	      [height(Physobj,Height)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',302).

 /*  not(holds_at(holding(Agent, Physobj), Time)) :-
       holds_at(height(Agent, Height), Time),
       not(holds_at(height(Physobj, Height), Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',302).

 /*  pl=axiom(not(holding(Agent,Physobj)),
         [ height(Agent,Height),
   	not(height(Physobj,Height))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',302).

 /*  (   height(Agent, Height),
       not(height(Physobj, Height))
   ->  not(holding(Agent, Physobj))
   ).
 */
if height(Agent, Height), not height(Physobj, Height)then not holding(Agent, Physobj).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',302).

 /*  reactive_rule([ height(Agent,Height),
   		not(height(Physobj,Height))
   	      ],
   	      [ holds(not(holding(Agent,Physobj)),
   		      Holds5)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',302).

 /*  reactive_rule([ height(Agent,Height),
   		not(height(Physobj,Height))
   	      ],
   	      [ holds(not(holding(Agent,Physobj)),
   		      Holds5)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',302).

 /*  not(holds_at(height(Agent, Height), Time)) :-
       holds_at(holding(Agent, Physobj), Time),
       not(holds_at(height(Physobj, Height), Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',302).

 /*  pl=axiom(not(height(Agent,Height)),
         [ holding(Agent,Physobj),
   	not(height(Physobj,Height))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',302).

 /*  (   holding(Agent, Physobj),
       not(height(Physobj, Height))
   ->  not(height(Agent, Height))
   ).
 */
if holding(Agent, Physobj), not height(Physobj, Height)then not height(Agent, Height).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',302).

 /*  reactive_rule([ holds(holding(Agent,Physobj),Holds6),
   		not(height(Physobj,Height))
   	      ],
   	      [not(height(Agent,Height))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',302).

 /*  reactive_rule([ holds(holding(Agent,Physobj),Holds6),
   		not(height(Physobj,Height))
   	      ],
   	      [not(height(Agent,Height))]).
 */


%; A state constraint says that if a physical object
%; is part of an object,
%; the height of the physical object
%; is the same as the height of the object:
% [physobj,object,height,time]
% PartOf(physobj,object) &
% HoldsAt(Height(object,height),time) ->
% HoldsAt(Height(physobj,height),time).
 %  clausify_pnf=(partOf(Physobj, Object), holds_at(height(Object, Height), Time)->holds_at(height(Physobj, Height), Time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',311).

 /*  holds_at(height(Physobj, Height), Time) :-
       partOf(Physobj, Object),
       holds_at(height(Object, Height), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',311).

 /*  fix_axiom_head(Time) ->
       [ holds_at(height(Physobj, Height), Time),
          (->),
         height(Physobj, Height)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',311).

 /*  pl=axiom(height(Physobj,Height),
         [ partOf(Physobj,Object),
   	height(Object,Height)
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',311).

 /*  (   partOf(Physobj, Object),
       height(Object, Height)
   ->  height(Physobj, Height)
   ).
 */
if partOf(Physobj, Object), height(Object, Height)then height(Physobj, Height).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',311).

 /*  reactive_rule([ partOf(Physobj,Object),
   		height(Object,Height)
   	      ],
   	      [height(Physobj,Height)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',311).

 /*  reactive_rule([ partOf(Physobj,Object),
   		height(Object,Height)
   	      ],
   	      [height(Physobj,Height)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',311).

 /*  not(partOf(Physobj, Object)) :-
       holds_at(height(Object, Height), Time),
       not(holds_at(height(Physobj, Height), Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',311).

 /*  fix_axiom_head(Time) ->
       [ holds_at(height(Object, Height), Time),
          (->),
         height(Object, Height)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',311).

 /*  pl=axiom(not(partOf(Physobj,Object)),
         [ height(Object,Height),
   	not(height(Physobj,Height))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',311).

 /*  (   height(Object, Height),
       not(height(Physobj, Height))
   ->  not(partOf(Physobj, Object))
   ).
 */
if height(Object, Height), not height(Physobj, Height)then not partOf(Physobj, Object).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',311).

 /*  reactive_rule([ height(Object,Height),
   		not(height(Physobj,Height))
   	      ],
   	      [not(partOf(Physobj,Object))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',311).

 /*  reactive_rule([ height(Object,Height),
   		not(height(Physobj,Height))
   	      ],
   	      [not(partOf(Physobj,Object))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',311).

 /*  not(holds_at(height(Object, Height), Time)) :-
       partOf(Physobj, Object),
       not(holds_at(height(Physobj, Height), Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',311).

 /*  pl=axiom(not(height(Object,Height)),
         [ partOf(Physobj,Object),
   	not(height(Physobj,Height))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',311).

 /*  (   partOf(Physobj, Object),
       not(height(Physobj, Height))
   ->  not(height(Object, Height))
   ).
 */
if partOf(Physobj, Object), not height(Physobj, Height)then not height(Object, Height).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',311).

 /*  reactive_rule([ partOf(Physobj,Object),
   		not(height(Physobj,Height))
   	      ],
   	      [not(height(Object,Height))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e',311).

 /*  reactive_rule([ partOf(Physobj,Object),
   		not(height(Physobj,Height))
   	      ],
   	      [not(height(Object,Height))]).
 */


%;event Catch(agent,physobj)
%;event HitFromTo(agent,physobj,object,object)
%;fluent Distance(physobj,physobj,distance)
%;fluent FlyingAcrossFromTo(physobj,object,object)
%;[agent,physobj1,physobj2,physobj3,time]
%;Initiates(HitFromTo(agent,physobj1,physobj2,physobj3),
%;          FlyingAcrossFromTo(physobj1,physobj2,physobj3),
%;          time).
%;[agent,physobj1,physobj2,physobj3,distance,time]
%;Releases(HitFromTo(agent,physobj1,physobj2,physobj3),
%;         Distance(physobj1,physobj2,distance),
%;         time).
%;[agent,physobj1,physobj2,physobj3,distance,time]
%;Releases(HitFromTo(agent,physobj1,physobj2,physobj3),
%;         Distance(physobj1,physobj3,distance),
%;         time).
%;[physobj1,physobj2,physobj3,offset,time]
%;Trajectory(FlyingAcrossFromTo(physobj1,physobj2,physobj3),time,
%;           Distance(physobj1,physobj2,offset),offset).
%;[physobj1,physobj2,physobj3,distance1,distance2,offset,time]
%;HoldsAt(Distance(physobj2,physobj3,distance1),time) &
%;distance2 = distance1 - time ->
%;Trajectory(FlyingAcrossFromTo(physobj1,physobj2,physobj3),time,
%;           Distance(physobj1,physobj3,distance2),offset).
%;[agent,physobj1,physobj2,physobj3,time]
%;HoldsAt(FlyingAcrossFromTo(physobj1,physobj2,physobj3),time) ->
%;Initiates(Catch(agent,physobj1),
%;          Holding(agent,physobj1),
%;          time).
%;[agent,physobj1,physobj2,physobj3,time]
%;HoldsAt(FlyingAcrossFromTo(physobj1,physobj2,physobj3),time) ->
%;Terminates(Catch(agent,physobj1),
%;           FlyingAcrossFromTo(physobj1,physobj2,physobj3),
%;           time).
%; End of file.
% translate: ending  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e.lps 
