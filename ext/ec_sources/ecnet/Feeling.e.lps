:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/EatingInAHouse.e',183).
% translate: unskipped  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e.lps 
:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(lps).
% translate: begining  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e.lps 
% Thu, 08 Oct 2020 21:36:15 GMT File: <stream>(0x55894c2ff800)%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; feeling = emotion, attitude, ...
%;
%; The Feeling representation includes simple positive, neutral, and
%; negative emotions, and positive, neutral, and negative attitudes
%; toward objects.
%;
%; emotions
%; agent is happy.

% fluent Happy(agent)
% fluent(
%    happy(agent)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',20).
fluents([happy/1]).
% mpred_prop(
%    happy(agent), 
%    fluent).
mpred_prop(happy(agent),fluent).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',23).
%; agent is emotionally neutral or calm.

% fluent Calm(agent)
% fluent(
%    calm(agent)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',23).
fluents([calm/1]).
% mpred_prop(
%    calm(agent), 
%    fluent).
mpred_prop(calm(agent),fluent).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',26).
%; agent is unhappy.

% fluent Unhappy(agent)
% fluent(
%    unhappy(agent)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',26).
fluents([unhappy/1]).
% mpred_prop(
%    unhappy(agent), 
%    fluent).
mpred_prop(unhappy(agent),fluent).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',29).
%; At any moment, an agent is in one of three emotional states:

% xor Happy, Calm, Unhappy
% xor(
%    ==>, 
%    [ happy, 
%      calm, 
%      unhappy ]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',29).
==>xor[happy,calm,unhappy].
%; agent becomes happy.

% event BecomeHappy(agent)
% event(
%    becomeHappy(agent)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',32).
actions([becomeHappy/1]).
% mpred_prop(
%    becomeHappy(agent), 
%    event).
mpred_prop(becomeHappy(agent),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',35).
%; agent becomes calm.

% event BecomeCalm(agent)
% event(
%    becomeCalm(agent)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',35).
actions([becomeCalm/1]).
% mpred_prop(
%    becomeCalm(agent), 
%    event).
mpred_prop(becomeCalm(agent),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',38).
%; agent becomes unhappy.

% event BecomeUnhappy(agent)
% event(
%    becomeUnhappy(agent)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',38).
actions([becomeUnhappy/1]).
% mpred_prop(
%    becomeUnhappy(agent), 
%    event).
mpred_prop(becomeUnhappy(agent),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',41).
%; A number of effect and precondition axioms deal with the transitions
%; from one emotional state to another:
% [agent,time]
% Initiates(BecomeHappy(agent),Happy(agent),time).
% initiates(
%    becomeHappy(Agent), 
%    happy(Agent), 
%    Time).
becomeHappy(Agent)initiates happy(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',43).

 /*  initiated(happens(becomeHappy(Agent),
   		  Time_From,
   		  Time_Until),
   	  happy(Agent),
   	  []).
 */
 %  "% =================================".


% [agent,time]
% HoldsAt(Calm(agent),time) ->
% Terminates(BecomeHappy(agent),Calm(agent),time).
% '->'(
%    calm(Agent), 
%    terminates(
%       becomeHappy(Agent), 
%       calm(Agent), 
%       Time)).
if calm(Agent)then terminates(becomeHappy(Agent), calm(Agent)at Time, _).

 /*  reactive_rule([holds(calm(Agent),Time_At)],
   	      [ terminates(becomeHappy(Agent),
   			   at(calm(Agent),Time),
   			   Terminates)
   	      ]).
 */
 %  "% =================================".


% [agent,time]
% HoldsAt(Unhappy(agent),time) ->
% Terminates(BecomeHappy(agent),Unhappy(agent),time).
% '->'(
%    unhappy(Agent), 
%    terminates(
%       becomeHappy(Agent), 
%       unhappy(Agent), 
%       Time)).
if unhappy(Agent)then terminates(becomeHappy(Agent), unhappy(Agent)at Time, _).

 /*  reactive_rule([holds(unhappy(Agent),Time_At)],
   	      [ terminates(becomeHappy(Agent),
   			   at(unhappy(Agent),Time),
   			   Terminates)
   	      ]).
 */
 %  "% =================================".


% [agent,time]
% Happens(BecomeHappy(agent),time) ->
% !HoldsAt(Happy(agent),time).
% '->'(
%    metreqs(
%       becomeHappy(Agent)), 
%    requires(
%       becomeHappy(Agent), 
%       When_Time)).
if becomeHappy(Agent)then requires(becomeHappy(Agent), When_Time).

 /*  reactive_rule([ happens(becomeHappy(Agent),
   			Time_From,
   			Time_Until)
   	      ],
   	      [requires(becomeHappy(Agent),When_Time)]).
 */
 %  "% =================================".
% '->'(
%    not(
%       happy(Agent)), 
%    metreqs(
%       becomeHappy(Agent))).
becomeHappy(Agent)if not happy(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',55).

 /*  l_events(happens(becomeHappy(Agent),
   		 Time_From5,
   		 Time_From5),
   	 [holds(not(happy(Agent)),Time_From5)]).
 */
 %  "% =================================".
% '->'(
%    not(
%       not(
%          happy(Agent))), 
%    not(
%       becomeHappy(Agent))).
if not not happy(Agent)then not becomeHappy(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',55).

 /*  reactive_rule([ holds(not([ holds(not(happy(Agent)),
   				  Time_At)
   			  ]),
   		      Time_At)
   	      ],
   	      [not(becomeHappy(Agent))]).
 */
 %  "% =================================".


% [agent,time]
% Initiates(BecomeCalm(agent),Calm(agent),time).
% initiates(
%    becomeCalm(Agent), 
%    calm(Agent), 
%    Time).
becomeCalm(Agent)initiates calm(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',59).

 /*  initiated(happens(becomeCalm(Agent),
   		  Time_From,
   		  Time_Until),
   	  calm(Agent),
   	  []).
 */
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',61).
% [agent,time]
% HoldsAt(Happy(agent),time) ->
% Terminates(BecomeCalm(agent),Happy(agent),time).
% '->'(
%    happy(Agent), 
%    terminates(
%       becomeCalm(Agent), 
%       happy(Agent), 
%       Time)).
if happy(Agent)then terminates(becomeCalm(Agent), happy(Agent)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',61).

 /*  reactive_rule([holds(happy(Agent),Time_At)],
   	      [ terminates(becomeCalm(Agent),
   			   at(happy(Agent),Time),
   			   Terminates)
   	      ]).
 */
 %  "% =================================".


% [agent,time]
% HoldsAt(Unhappy(agent),time) ->
% Terminates(BecomeCalm(agent),Unhappy(agent),time).
% '->'(
%    unhappy(Agent), 
%    terminates(
%       becomeCalm(Agent), 
%       unhappy(Agent), 
%       Time)).
if unhappy(Agent)then terminates(becomeCalm(Agent), unhappy(Agent)at Time, _).

 /*  reactive_rule([holds(unhappy(Agent),Time_At)],
   	      [ terminates(becomeCalm(Agent),
   			   at(unhappy(Agent),Time),
   			   Terminates)
   	      ]).
 */
 %  "% =================================".


% [agent,time]
% Happens(BecomeCalm(agent),time) -> !HoldsAt(Calm(agent),time).
% '->'(
%    metreqs(
%       becomeCalm(Agent)), 
%    requires(
%       becomeCalm(Agent), 
%       When_Time)).
if becomeCalm(Agent)then requires(becomeCalm(Agent), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',70).

 /*  reactive_rule([ happens(becomeCalm(Agent),
   			Time_From,
   			Time_Until)
   	      ],
   	      [requires(becomeCalm(Agent),When_Time)]).
 */
 %  "% =================================".
% '->'(
%    not(
%       calm(Agent)), 
%    metreqs(
%       becomeCalm(Agent))).
becomeCalm(Agent)if not calm(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',70).

 /*  l_events(happens(becomeCalm(Agent),
   		 Time_From5,
   		 Time_From5),
   	 [holds(not(calm(Agent)),Time_From5)]).
 */
 %  "% =================================".
% '->'(
%    not(
%       not(
%          calm(Agent))), 
%    not(
%       becomeCalm(Agent))).
if not not calm(Agent)then not becomeCalm(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',70).

 /*  reactive_rule([ holds(not([holds(not(calm(Agent)),Time_At)]),
   		      Time_At)
   	      ],
   	      [not(becomeCalm(Agent))]).
 */
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',72).
% [agent,time]
% Initiates(BecomeUnhappy(agent),Unhappy(agent),time).
% initiates(
%    becomeUnhappy(Agent), 
%    unhappy(Agent), 
%    Time).
becomeUnhappy(Agent)initiates unhappy(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',72).

 /*  initiated(happens(becomeUnhappy(Agent),
   		  Time_From,
   		  Time_Until),
   	  unhappy(Agent),
   	  []).
 */
 %  "% =================================".


% [agent,time]
% HoldsAt(Happy(agent),time) ->
% Terminates(BecomeUnhappy(agent),Happy(agent),time).
% '->'(
%    happy(Agent), 
%    terminates(
%       becomeUnhappy(Agent), 
%       happy(Agent), 
%       Time)).
if happy(Agent)then terminates(becomeUnhappy(Agent), happy(Agent)at Time, _).

 /*  reactive_rule([holds(happy(Agent),Time_At)],
   	      [ terminates(becomeUnhappy(Agent),
   			   at(happy(Agent),Time),
   			   Terminates)
   	      ]).
 */
 %  "% =================================".


% [agent,time]
% HoldsAt(Calm(agent),time) ->
% Terminates(BecomeUnhappy(agent),Calm(agent),time).
% '->'(
%    calm(Agent), 
%    terminates(
%       becomeUnhappy(Agent), 
%       calm(Agent), 
%       Time)).
if calm(Agent)then terminates(becomeUnhappy(Agent), calm(Agent)at Time, _).

 /*  reactive_rule([holds(calm(Agent),Time_At)],
   	      [ terminates(becomeUnhappy(Agent),
   			   at(calm(Agent),Time),
   			   Terminates)
   	      ]).
 */
 %  "% =================================".


% [agent,time]
% Happens(BecomeUnhappy(agent),time) -> !HoldsAt(Unhappy(agent),time).
% '->'(
%    metreqs(
%       becomeUnhappy(Agent)), 
%    requires(
%       becomeUnhappy(Agent), 
%       When_Time)).
if becomeUnhappy(Agent)then requires(becomeUnhappy(Agent), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',84).

 /*  reactive_rule([ happens(becomeUnhappy(Agent),
   			Time_From,
   			Time_Until)
   	      ],
   	      [requires(becomeUnhappy(Agent),When_Time)]).
 */
 %  "% =================================".
% '->'(
%    not(
%       unhappy(Agent)), 
%    metreqs(
%       becomeUnhappy(Agent))).
becomeUnhappy(Agent)if not unhappy(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',84).

 /*  l_events(happens(becomeUnhappy(Agent),
   		 Time_From5,
   		 Time_From5),
   	 [holds(not(unhappy(Agent)),Time_From5)]).
 */
 %  "% =================================".
% '->'(
%    not(
%       not(
%          unhappy(Agent))), 
%    not(
%       becomeUnhappy(Agent))).
if not not unhappy(Agent)then not becomeUnhappy(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',84).

 /*  reactive_rule([ holds(not([ holds(not(unhappy(Agent)),
   				  Time_At)
   			  ]),
   		      Time_At)
   	      ],
   	      [not(becomeUnhappy(Agent))]).
 */
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',86).
%; anger

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',88).
% fluent AngryAt(agent,agent)
% fluent(
%    angryAt(agent,agent)).
fluents([angryAt/2]).
% mpred_prop(
%    angryAt(agent,agent), 
%    fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',88).
mpred_prop(angryAt(agent,agent),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',90).
% event BecomeAngryAt(agent,agent)
% event(
%    becomeAngryAt(agent,agent)).
actions([becomeAngryAt/2]).
% mpred_prop(
%    becomeAngryAt(agent,agent), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',90).
mpred_prop(becomeAngryAt(agent,agent),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',92).
% [agent1,agent2,time]
% Initiates(BecomeAngryAt(agent1,agent2),AngryAt(agent1,agent2),time).
% initiates(
%    becomeAngryAt(Agent1,Agent2), 
%    angryAt(Agent1,Agent2), 
%    Time).
becomeAngryAt(Agent1, Agent2)initiates angryAt(Agent1, Agent2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',92).

 /*  initiated(happens(becomeAngryAt(Agent1,Agent2),
   		  Time_From,
   		  Time_Until),
   	  angryAt(Agent1,Agent2),
   	  []).
 */
 %  "% =================================".


% [agent1,agent2,time]
% Terminates(BecomeHappy(agent1),AngryAt(agent1,agent2),time).
% terminates(
%    becomeHappy(Agent1), 
%    angryAt(Agent1,Agent2), 
%    Time).
becomeHappy(Agent1)terminates angryAt(Agent1, Agent2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',96).

 /*  terminated(happens(becomeHappy(Agent1),
   		   Time_From,
   		   Time_Until),
   	   angryAt(Agent1,Agent2),
   	   []).
 */
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',98).
% [agent1,agent2,time]
% Happens(BecomeAngryAt(agent1,agent2),time) ->
% Happens(BecomeUnhappy(agent1),time).
% '->'(
%    becomeAngryAt(Agent1,Agent2), 
%    becomeUnhappy(Agent1)).
becomeUnhappy(Agent1)if becomeAngryAt(Agent1, Agent2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',98).

 /*  l_events(happens(becomeUnhappy(Agent1),
   		 Time_From,
   		 Time_Until),
   	 [ happens(becomeAngryAt(Agent1,Agent2),
   		   Time_From,
   		   Time_Until)
   	 ]).
 */
 %  "% =================================".
% '->'(
%    not(
%       becomeUnhappy(Agent1)), 
%    not(
%       becomeAngryAt(Agent1,Agent2))).
if not becomeUnhappy(Agent1)then not becomeAngryAt(Agent1, Agent2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',98).

 /*  reactive_rule([not(becomeUnhappy(Agent1))],
   	      [not(becomeAngryAt(Agent1,Agent2))]).
 */
 %  "% =================================".


%; attitudes
%; agent likes object.

% fluent Like(agent,object)
% fluent(
%    like(agent,object)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',104).
fluents([like/2]).
% mpred_prop(
%    like(agent,object), 
%    fluent).
mpred_prop(like(agent,object),fluent).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',104).
%; agent loves object.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',107).
% fluent Love(agent,object)
% fluent(
%    love(agent,object)).
fluents([love/2]).
% mpred_prop(
%    love(agent,object), 
%    fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',107).
mpred_prop(love(agent,object),fluent).


%; agent dislikes object.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',109).
% fluent Dislike(agent,object)
% fluent(
%    dislike(agent,object)).
fluents([dislike/2]).
% mpred_prop(
%    dislike(agent,object), 
%    fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',109).
mpred_prop(dislike(agent,object),fluent).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',111).
%; agent likes snow.

% fluent LikeSnow(agent)
% fluent(
%    likeSnow(agent)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',111).
fluents([likeSnow/1]).
% mpred_prop(
%    likeSnow(agent), 
%    fluent).
mpred_prop(likeSnow(agent),fluent).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',114).
%; A trigger axiom states that
%; if an agent is awake, likes snow, and is in a room that
%; looks out onto a location where it is snowing, that agent
%; becomes happy:
% [agent,room,outside,time]
% !HoldsAt(Happy(agent),time) &
% HoldsAt(Awake(agent),time) &
% HoldsAt(LikeSnow(agent),time) &
% HoldsAt(At(agent,room),time) &
% LookOutOnto(room)=outside &
% HoldsAt(Snowing(outside),time) ->
% Happens(BecomeHappy(agent),time).
% '->'(
%    ','(
%       not(
%          happy(Agent)), 
%       ','(
%          awake(Agent), 
%          ','(
%             likeSnow(Agent), 
%             ','(
%                at(Agent,Room), 
%                ','(
%                   lookOutOntoPred(Room,Outside), 
%                   snowing(Outside)))))), 
%    becomeHappy(Agent)).
becomeHappy(Agent)if not happy(Agent), awake(Agent), likeSnow(Agent), loc_at(Agent, Room), lookOutOntoPred(Room, Outside), snowing(Outside).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',118).

 /*  l_events(happens(becomeHappy(Agent),
   		 Time_From,
   		 Time_From),
   	 [ holds(not(happy(Agent)),Time_From),
   	   awake(Agent),
   	   likeSnow(Agent),
   	   loc_at(Agent,Room),
   	   lookOutOntoPred(Room,Outside),
   	   snowing(Outside)
   	 ]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       awake(Agent), 
%       ','(
%          likeSnow(Agent), 
%          ','(
%             at(Agent,Room), 
%             ','(
%                lookOutOntoPred(Room,Outside), 
%                ','(
%                   snowing(Outside), 
%                   not(
%                      becomeHappy(Agent))))))), 
%    not(
%       not(
%          happy(Agent)))).
not not happy(Agent)if awake(Agent), likeSnow(Agent), loc_at(Agent, Room), lookOutOntoPred(Room, Outside), snowing(Outside), not becomeHappy(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',118).

 /*  l_int(holds(not([holds(not(happy(Agent)),Time_At)]),
   	    Time_At),
         [ awake(Agent),
   	likeSnow(Agent),
   	loc_at(Agent,Room),
   	lookOutOntoPred(Room,Outside),
   	snowing(Outside),
   	not(becomeHappy(Agent))
         ]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       likeSnow(Agent), 
%       ','(
%          at(Agent,Room), 
%          ','(
%             lookOutOntoPred(Room,Outside), 
%             ','(
%                snowing(Outside), 
%                ','(
%                   not(
%                      happy(Agent)), 
%                   not(
%                      becomeHappy(Agent))))))), 
%    not(
%       awake(Agent))).
if likeSnow(Agent), loc_at(Agent, Room), lookOutOntoPred(Room, Outside), snowing(Outside), not happy(Agent), not becomeHappy(Agent)then not awake(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',118).

 /*  reactive_rule([ likeSnow(Agent),
   		loc_at(Agent,Room),
   		lookOutOntoPred(Room,Outside),
   		snowing(Outside),
   		holds(not(happy(Agent)),Time_At6),
   		not(becomeHappy(Agent))
   	      ],
   	      [not(awake(Agent))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       at(Agent,Room), 
%       ','(
%          lookOutOntoPred(Room,Outside), 
%          ','(
%             snowing(Outside), 
%             ','(
%                awake(Agent), 
%                ','(
%                   not(
%                      happy(Agent)), 
%                   not(
%                      becomeHappy(Agent))))))), 
%    not(
%       likeSnow(Agent))).
if loc_at(Agent, Room), lookOutOntoPred(Room, Outside), snowing(Outside), awake(Agent), not happy(Agent), not becomeHappy(Agent)then not likeSnow(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',118).

 /*  reactive_rule([ loc_at(Agent,Room),
   		lookOutOntoPred(Room,Outside),
   		snowing(Outside),
   		awake(Agent),
   		holds(not(happy(Agent)),Time_At7),
   		not(becomeHappy(Agent))
   	      ],
   	      [not(likeSnow(Agent))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       lookOutOntoPred(Room,Outside), 
%       ','(
%          snowing(Outside), 
%          ','(
%             likeSnow(Agent), 
%             ','(
%                awake(Agent), 
%                ','(
%                   not(
%                      happy(Agent)), 
%                   not(
%                      becomeHappy(Agent))))))), 
%    not(
%       at(Agent,Room))).
if lookOutOntoPred(Room, Outside), snowing(Outside), likeSnow(Agent), awake(Agent), not happy(Agent), not becomeHappy(Agent)then not loc_at(Agent, Room).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',118).

 /*  reactive_rule([ lookOutOntoPred(Room,Outside),
   		snowing(Outside),
   		likeSnow(Agent),
   		awake(Agent),
   		holds(not(happy(Agent)),Time_At8),
   		not(becomeHappy(Agent))
   	      ],
   	      [not(loc_at(Agent,Room))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       snowing(Outside), 
%       ','(
%          at(Agent,Room), 
%          ','(
%             likeSnow(Agent), 
%             ','(
%                awake(Agent), 
%                ','(
%                   not(
%                      happy(Agent)), 
%                   not(
%                      becomeHappy(Agent))))))), 
%    not(
%       lookOutOntoPred(Room,Outside))).
if snowing(Outside), loc_at(Agent, Room), likeSnow(Agent), awake(Agent), not happy(Agent), not becomeHappy(Agent)then not lookOutOntoPred(Room, Outside).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',118).

 /*  reactive_rule([ snowing(Outside),
   		loc_at(Agent,Room),
   		likeSnow(Agent),
   		awake(Agent),
   		holds(not(happy(Agent)),Time_At9),
   		not(becomeHappy(Agent))
   	      ],
   	      [not(lookOutOntoPred(Room,Outside))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       lookOutOntoPred(Room,Outside), 
%       ','(
%          at(Agent,Room), 
%          ','(
%             likeSnow(Agent), 
%             ','(
%                awake(Agent), 
%                ','(
%                   not(
%                      happy(Agent)), 
%                   not(
%                      becomeHappy(Agent))))))), 
%    not(
%       snowing(Outside))).
if lookOutOntoPred(Room, Outside), loc_at(Agent, Room), likeSnow(Agent), awake(Agent), not happy(Agent), not becomeHappy(Agent)then not snowing(Outside).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',118).

 /*  reactive_rule([ lookOutOntoPred(Room,Outside),
   		loc_at(Agent,Room),
   		likeSnow(Agent),
   		awake(Agent),
   		holds(not(happy(Agent)),Time_At10),
   		not(becomeHappy(Agent))
   	      ],
   	      [not(snowing(Outside))]).
 */
 %  "% =================================".


%; We introduced LikeSnow above since Like
%; can only be used to represent that an agent likes a
%; particular object, not snow in general.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',131).
% event Smile(agent)
% event(
%    smile(agent)).
actions([smile/1]).
% mpred_prop(
%    smile(agent), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',131).
mpred_prop(smile(agent),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',133).
%; End of file.
% translate: ending  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e.lps 
