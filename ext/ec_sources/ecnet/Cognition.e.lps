:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Book.e',87).
% translate: unskipped  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/Cognition.e.lps 
:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(lps).
% translate: begining  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/Cognition.e.lps 
% Thu, 08 Oct 2020 21:35:56 GMT File: <stream>(0x55894c1dd100)%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Cognition.e',11).
% event Read(agent,text,content)
% event(
%    read(agent,text,content)).
actions([read/3]).
% mpred_prop(
%    read(agent,text,content), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Cognition.e',11).
mpred_prop(read(agent,text,content),event).

% event ThinkAbout(agent,content)
% event(
%    thinkAbout(agent,content)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Cognition.e',11).
actions([thinkAbout/2]).
% mpred_prop(
%    thinkAbout(agent,content), 
%    event).
mpred_prop(thinkAbout(agent,content),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Cognition.e',13).
% event Think(agent)
% event(
%    think(agent)).
actions([think/1]).
% mpred_prop(
%    think(agent), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Cognition.e',13).
mpred_prop(think(agent),event).

% event Understand(agent,content)
% event(
%    understand(agent,content)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Cognition.e',13).
actions([understand/2]).
% mpred_prop(
%    understand(agent,content), 
%    event).
mpred_prop(understand(agent,content),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Cognition.e',15).
% event Dream(agent)
% event(
%    dream(agent)).
actions([dream/1]).
% mpred_prop(
%    dream(agent), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Cognition.e',15).
mpred_prop(dream(agent),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Cognition.e',17).
% [agent,text,content,time]
% Happens(Read(agent,text,content),time) ->
% HoldsAt(See(agent,text),time).
% '->'(
%    metreqs(
%       read(Agent,Text,Content)), 
%    requires(
%       read(Agent,Text,Content), 
%       When_Time)).
if read(Agent, Text, Content)then requires(read(Agent, Text, Content), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Cognition.e',17).

 /*  reactive_rule([ happens(read(Agent,Text,Content),
   			Time_From,
   			Time_Until)
   	      ],
   	      [ requires(read(Agent,Text,Content),
   			 When_Time)
   	      ]).
 */
 %  "% =================================".
% '->'(
%    see(Agent,Text), 
%    metreqs(
%       read(Agent,Text,Content))).
read(Agent, Text, Content)if see(Agent, Text).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Cognition.e',17).

 /*  l_events(happens(read(Agent,Text,Content),
   		 Time_From7,
   		 Time_From7),
   	 [holds(see(Agent,Text),Time_From7)]).
 */
 %  "% =================================".
% '->'(
%    not(
%       see(Agent,Text)), 
%    not(
%       read(Agent,Text,Content))).
if not see(Agent, Text)then not read(Agent, Text, Content).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Cognition.e',17).

 /*  reactive_rule([holds(not(see(Agent,Text)),Time_At)],
   	      [not(read(Agent,Text,Content))]).
 */
 %  "% =================================".
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Cognition.e',20).
% translate: ending  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/Cognition.e.lps 
