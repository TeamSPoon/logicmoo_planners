:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PolySpace.e',116).
% translate: unskipped  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/Rain.e.lps 
:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(lps).
% translate: begining  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/Rain.e.lps 
% Thu, 08 Oct 2020 21:36:37 GMT File: <stream>(0x55894c2e0700)%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; Rain
%;
%; It starts raining at location outside.

% event StartRaining(outside)
% event(
%    startRaining(outside)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rain.e',14).
events([startRaining/1]).
% mpred_prop(
%    startRaining(outside), 
%    event).
mpred_prop(startRaining(outside),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rain.e',17).
%; It stops raining at location outside.

% event StopRaining(outside)
% event(
%    stopRaining(outside)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rain.e',17).
events([stopRaining/1]).
% mpred_prop(
%    stopRaining(outside), 
%    event).
mpred_prop(stopRaining(outside),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rain.e',20).
%; It is raining at location outside.

% fluent Raining(outside)
% fluent(
%    raining(outside)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rain.e',20).
fluents([raining/1]).
% mpred_prop(
%    raining(outside), 
%    fluent).
mpred_prop(raining(outside),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rain.e',23).
% event GetWet(object)
% event(
%    getWet(object)).
events([getWet/1]).
% mpred_prop(
%    getWet(object), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rain.e',23).
mpred_prop(getWet(object),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rain.e',25).
% event Dry(object)
% event(
%    dry(object)).
events([dry/1]).
% mpred_prop(
%    dry(object), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rain.e',25).
mpred_prop(dry(object),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rain.e',27).
% fluent Wet(object)
% fluent(
%    wet(object)).
fluents([wet/1]).
% mpred_prop(
%    wet(object), 
%    fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rain.e',27).
mpred_prop(wet(object),fluent).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rain.e',29).
% [agent,outside,time]
% HoldsAt(At(agent,outside),time) &
% HoldsAt(Raining(outside),time) &
% !HoldsAt(Wet(agent),time) &
% (!{umbrella} HoldsAt(Holding(agent,umbrella),time)) ->
% Happens(GetWet(agent),time).
% '->'(
%    ','(
%       at(Agent,Outside), 
%       ','(
%          raining(Outside), 
%          ','(
%             not(
%                wet(Agent)), 
%             not(
%                holding(Agent,Umbrella))))), 
%    getWet(Agent)).
getWet(Agent)if loc_at(Agent, Outside), raining(Outside), not wet(Agent), not holding(Agent, Umbrella).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rain.e',29).

 /*  l_events(happens(getWet(Agent),Time_From,Time_From),
   	 [ loc_at(Agent,Outside),
   	   raining(Outside),
   	   holds(not(wet(Agent)),Time_From),
   	   holds(not(holding(Agent,Umbrella)),
   		 Time_From)
   	 ]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       raining(Outside), 
%       ','(
%          not(
%             wet(Agent)), 
%          ','(
%             not(
%                holding(Agent,Umbrella)), 
%             not(
%                getWet(Agent))))), 
%    not(
%       at(Agent,Outside))).
if raining(Outside), not wet(Agent), not holding(Agent, Umbrella), not getWet(Agent)then not loc_at(Agent, Outside).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rain.e',29).

 /*  reactive_rule([ raining(Outside),
   		holds(not(wet(Agent)),Time_At),
   		holds(not(holding(Agent,Umbrella)),
   		      Time_At),
   		not(getWet(Agent))
   	      ],
   	      [not(loc_at(Agent,Outside))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       not(
%          wet(Agent)), 
%       ','(
%          not(
%             holding(Agent,Umbrella)), 
%          ','(
%             at(Agent,Outside), 
%             not(
%                getWet(Agent))))), 
%    not(
%       raining(Outside))).
if not wet(Agent), not holding(Agent, Umbrella), loc_at(Agent, Outside), not getWet(Agent)then not raining(Outside).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rain.e',29).

 /*  reactive_rule([ holds(not(wet(Agent)),Time_At6),
   		holds(not(holding(Agent,Umbrella)),
   		      Time_At6),
   		loc_at(Agent,Outside),
   		not(getWet(Agent))
   	      ],
   	      [not(raining(Outside))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       not(
%          holding(Agent,Umbrella)), 
%       ','(
%          raining(Outside), 
%          ','(
%             at(Agent,Outside), 
%             not(
%                getWet(Agent))))), 
%    not(
%       not(
%          wet(Agent)))).
not not wet(Agent)if not holding(Agent, Umbrella), raining(Outside), loc_at(Agent, Outside), not getWet(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rain.e',29).

 /*  l_int(holds(not([holds(not(wet(Agent)),Time_At7)]),
   	    Time_At7),
         [ holds(not(holding(Agent,Umbrella)),Time_At7),
   	raining(Outside),
   	loc_at(Agent,Outside),
   	not(getWet(Agent))
         ]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       not(
%          wet(Agent)), 
%       ','(
%          raining(Outside), 
%          ','(
%             at(Agent,Outside), 
%             not(
%                getWet(Agent))))), 
%    holding(Agent,Umbrella)).
holding(Agent, Umbrella)if not wet(Agent), raining(Outside), loc_at(Agent, Outside), not getWet(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rain.e',29).

 /*  l_int(holds(holding(Agent,Umbrella),Time_At8),
         [ holds(not(wet(Agent)),Time_At8),
   	raining(Outside),
   	loc_at(Agent,Outside),
   	not(getWet(Agent))
         ]).
 */
 %  "% =================================".


% [object,time]
% Initiates(GetWet(object),Wet(object),time).
% initiates(
%    getWet(Object), 
%    wet(Object), 
%    Time).
getWet(Object)initiates wet(Object).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rain.e',37).

 /*  initiated(happens(getWet(Object),
   		  Time_From,
   		  Time_Until),
   	  wet(Object),
   	  []).
 */
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rain.e',39).
% [object,time]
% Terminates(Dry(object),Wet(object),time).
% terminates(
%    dry(Object), 
%    wet(Object), 
%    Time).
dry(Object)terminates wet(Object).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rain.e',39).

 /*  terminated(happens(dry(Object),Time_From,Time_Until),
   	   wet(Object),
   	   []).
 */
 %  "% =================================".


%; End of file.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rain.e',41).
% translate: ending  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/Rain.e.lps 
