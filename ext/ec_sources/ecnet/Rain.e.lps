:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PolySpace.e',116).
% translate: unskipped  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/Rain.e.lps 
:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(lps).
% translate: begining  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/Rain.e.lps 
% Wed, 07 Oct 2020 09:36:16 GMT File: <stream>(0x5557c8e65800)%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; Rain
%;
%; It starts raining at location outside.

% event StartRaining(outside)
 %  event(startRaining(outside)).
 %  event(startRaining(outside)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rain.e',14).
events([startRaining/1]).
mpred_prop(startRaining(outside),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rain.e',17).
%; It stops raining at location outside.

% event StopRaining(outside)
 %  event(stopRaining(outside)).
 %  event(stopRaining(outside)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rain.e',17).
events([stopRaining/1]).
mpred_prop(stopRaining(outside),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rain.e',20).
%; It is raining at location outside.

% fluent Raining(outside)
 %  fluent(raining(outside)).
 %  fluent(raining(outside)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rain.e',20).
fluents([raining/1]).
mpred_prop(raining(outside),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rain.e',23).
% event GetWet(object)
 %  event(getWet(object)).
 %  event(getWet(object)).
events([getWet/1]).
mpred_prop(getWet(object),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rain.e',25).
% event Dry(object)
 %  event(dry(object)).
 %  event(dry(object)).
events([dry/1]).
mpred_prop(dry(object),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rain.e',27).
% fluent Wet(object)
 %  fluent(wet(object)).
 %  fluent(wet(object)).
fluents([wet/1]).
mpred_prop(wet(object),fluent).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rain.e',29).
% [agent,outside,time]
% HoldsAt(At(agent,outside),time) &
% HoldsAt(Raining(outside),time) &
% !HoldsAt(Wet(agent),time) &
% (!{umbrella} HoldsAt(Holding(agent,umbrella),time)) ->
% Happens(GetWet(agent),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rain.e',29).

 /*  (   holds_at(at(Agent, Outside), Time),
       holds_at(raining(Outside), Time),
       holds_at(neg(wet(Agent)), Time),
       not(exists([Umbrella],
                  holds_at(holding(Agent, Umbrella), Time)))
   ->  happens(getWet(Agent), Time)
   ).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rain.e',29).
then(if((at(loc_at(Agent, Outside), Time), at(raining(Outside), Time), at(not(wet(Agent)), Time), not(at(holding(Agent, Umbrella), Time)))), happens(getWet(Agent), Time)).

 /*  reactive_rule([ holds(loc_at(Agent,Outside),Time),
   		holds(raining(Outside),Time),
   		holds(not(wet(Agent)),Time),
   		holds(not(holding(Agent,Umbrella)),
   		      Time)
   	      ],
   	      [happens(getWet(Agent),Time)]).
 */


% [object,time]
% Initiates(GetWet(object),Wet(object),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rain.e',37).

 /*  axiom(initiates(getWet(Object), wet(Object), Time),
       []).
 */
 %  initiates(getWet(Getwet),wet(Getwet),Initiates).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rain.e',37).
initiates(getWet(Getwet),wet(Getwet)).

 /*  initiated(happens(getWet(Getwet),
   		  Time_From,
   		  Time_Until),
   	  wet(Getwet),
   	  []).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rain.e',39).
% [object,time]
% Terminates(Dry(object),Wet(object),time).

 /*  axiom(terminates(dry(Object), wet(Object), Time),
       []).
 */
 %  terminates(dry(Dry),wet(Dry),Terminates).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rain.e',39).
terminates(dry(Dry),wet(Dry)).

 /*  terminated(happens(dry(Dry),Time_From,Time_Until),
   	   wet(Dry),
   	   []).
 */


%; End of file.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rain.e',41).
% translate: ending  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/Rain.e.lps 
