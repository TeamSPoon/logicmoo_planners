:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/HungerNeed.e',32).
% translate: unskipped  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e.lps 
:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(lps).
% translate: begining  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e.lps 
% Thu, 08 Oct 2020 19:06:10 GMT File: <stream>(0x5600a39b1300)%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; IPRel: interpersonal relations
%;

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',14).
% fluent FriendOf(agent,agent)
 %  blue=fluent(friendOf(agent,agent)).
 %  fluent(friendOf(agent,agent)).
fluents([friendOf/2]).
 %  fluents([friendOf/2]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',14).
mpred_prop(friendOf(agent,agent),fluent).
 %  mpred_prop(friendOf(agent,agent),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',16).
% fluent NeutralOf(agent,agent)
 %  blue=fluent(neutralOf(agent,agent)).
 %  fluent(neutralOf(agent,agent)).
fluents([neutralOf/2]).
 %  fluents([neutralOf/2]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',16).
mpred_prop(neutralOf(agent,agent),fluent).
 %  mpred_prop(neutralOf(agent,agent),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',18).
% fluent EnemyOf(agent,agent)
 %  blue=fluent(enemyOf(agent,agent)).
 %  fluent(enemyOf(agent,agent)).
fluents([enemyOf/2]).
 %  fluents([enemyOf/2]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',18).
mpred_prop(enemyOf(agent,agent),fluent).
 %  mpred_prop(enemyOf(agent,agent),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',20).
% event BecomeFriends(agent,agent)
 %  blue=event(becomeFriends(agent,agent)).
 %  event(becomeFriends(agent,agent)).
actions([becomeFriends/2]).
 %  actions([becomeFriends/2]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',20).
mpred_prop(becomeFriends(agent,agent),event).
 %  mpred_prop(becomeFriends(agent,agent),event).

% event BecomeNeutral(agent,agent)
 %  blue=event(becomeNeutral(agent,agent)).
 %  event(becomeNeutral(agent,agent)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',20).
actions([becomeNeutral/2]).
 %  actions([becomeNeutral/2]).
mpred_prop(becomeNeutral(agent,agent),event).
 %  mpred_prop(becomeNeutral(agent,agent),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',22).
% event BecomeEnemies(agent,agent)
 %  blue=event(becomeEnemies(agent,agent)).
 %  event(becomeEnemies(agent,agent)).
actions([becomeEnemies/2]).
 %  actions([becomeEnemies/2]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',22).
mpred_prop(becomeEnemies(agent,agent),event).
 %  mpred_prop(becomeEnemies(agent,agent),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',24).
% [agent1,agent2,time]
% HoldsAt(FriendOf(agent1,agent2),time) ->
% !Holds(EnemyOf(agent1,agent2),time).
 %  clausify_pnf=(holds_at(friendOf(Agent1, Agent2), Time)->not(holds(enemyOf(Agent1, Agent2), Time))).

 /*  not(holds(enemyOf(Agent1, Agent2), Time)) :-
       holds_at(friendOf(Agent1, Agent2), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',24).

 /*  fix_axiom_head(Time) ->
       [ holds_at(friendOf(Agent1, Agent2), Time),
          (->),
         friendOf(Agent1, Agent2)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',24).

 /*  pl=axiom(not(holds(enemyOf(Agent1,Agent2),Time)),
         [friendOf(Agent1,Agent2)]).
 */

 /*  friendOf(Agent1, Agent2) ->
       not(holds(enemyOf(Agent1, Agent2), Time)).
 */
if friendOf(Agent1, Agent2)then not holds(enemyOf(Agent1, Agent2), Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',24).

 /*  reactive_rule([friendOf(Agent1,Agent2)],
   	      [ holds(not([ holds(enemyOf(Agent1,Agent2),
   				  Time)
   			  ]),
   		      Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',24).

 /*  reactive_rule([friendOf(Agent1,Agent2)],
   	      [ holds(not([ holds(enemyOf(Agent1,Agent2),
   				  Time)
   			  ]),
   		      Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',24).

 /*  not(holds_at(friendOf(Agent1, Agent2), Time)) :-
       holds(enemyOf(Agent1, Agent2), Time).
 */

 /*  pl=axiom(not(friendOf(Agent1,Agent2)),
         [holds(enemyOf(Agent1,Agent2),Time)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',24).

 /*  holds(enemyOf(Agent1, Agent2), Time) ->
       not(friendOf(Agent1, Agent2)).
 */
if holds(enemyOf(Agent1, Agent2), Time)then not friendOf(Agent1, Agent2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',24).

 /*  reactive_rule([holds(enemyOf(Agent1,Agent2),Time)],
   	      [not(friendOf(Agent1,Agent2))]).
 */

 /*  reactive_rule([holds(enemyOf(Agent1,Agent2),Time)],
   	      [not(friendOf(Agent1,Agent2))]).
 */


% [agent1,agent2,time]
% HoldsAt(NeutralOf(agent1,agent2),time) ->
% !Holds(EnemyOf(agent1,agent2),time).
 %  clausify_pnf=(holds_at(neutralOf(Agent1, Agent2), Time)->not(holds(enemyOf(Agent1, Agent2), Time))).

 /*  not(holds(enemyOf(Agent1, Agent2), Time)) :-
       holds_at(neutralOf(Agent1, Agent2), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',29).

 /*  fix_axiom_head(Time) ->
       [ holds_at(neutralOf(Agent1, Agent2), Time),
          (->),
         neutralOf(Agent1, Agent2)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',29).

 /*  pl=axiom(not(holds(enemyOf(Agent1,Agent2),Time)),
         [neutralOf(Agent1,Agent2)]).
 */

 /*  neutralOf(Agent1, Agent2) ->
       not(holds(enemyOf(Agent1, Agent2), Time)).
 */
if neutralOf(Agent1, Agent2)then not holds(enemyOf(Agent1, Agent2), Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',29).

 /*  reactive_rule([neutralOf(Agent1,Agent2)],
   	      [ holds(not([ holds(enemyOf(Agent1,Agent2),
   				  Time)
   			  ]),
   		      Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',29).

 /*  reactive_rule([neutralOf(Agent1,Agent2)],
   	      [ holds(not([ holds(enemyOf(Agent1,Agent2),
   				  Time)
   			  ]),
   		      Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',29).

 /*  not(holds_at(neutralOf(Agent1, Agent2), Time)) :-
       holds(enemyOf(Agent1, Agent2), Time).
 */

 /*  pl=axiom(not(neutralOf(Agent1,Agent2)),
         [holds(enemyOf(Agent1,Agent2),Time)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',29).

 /*  holds(enemyOf(Agent1, Agent2), Time) ->
       not(neutralOf(Agent1, Agent2)).
 */
if holds(enemyOf(Agent1, Agent2), Time)then not neutralOf(Agent1, Agent2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',29).

 /*  reactive_rule([holds(enemyOf(Agent1,Agent2),Time)],
   	      [not(neutralOf(Agent1,Agent2))]).
 */

 /*  reactive_rule([holds(enemyOf(Agent1,Agent2),Time)],
   	      [not(neutralOf(Agent1,Agent2))]).
 */


% [agent1,agent2,time]
% HoldsAt(FriendOf(agent1,agent2),time) ->
% HoldsAt(FriendOf(agent2,agent1),time).
 %  clausify_pnf=(holds_at(friendOf(Agent1, Agent2), Time)->holds_at(friendOf(Agent2, Agent1), Time)).


% [agent1,agent2,time]
% HoldsAt(NeutralOf(agent1,agent2),time) ->
% HoldsAt(NeutralOf(agent2,agent1),time).
 %  clausify_pnf=(holds_at(neutralOf(Agent1, Agent2), Time)->holds_at(neutralOf(Agent2, Agent1), Time)).


% [agent1,agent2,time]
% HoldsAt(EnemyOf(agent1,agent2),time) ->
% HoldsAt(EnemyOf(agent2,agent1),time).
 %  clausify_pnf=(holds_at(enemyOf(Agent1, Agent2), Time)->holds_at(enemyOf(Agent2, Agent1), Time)).


% [agent1,agent2,time]
% Initiates(BecomeFriends(agent1,agent2),FriendOf(agent1,agent2),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',45).

 /*  pl=axiom(initiates(becomeFriends(Agent1,Agent2),
   		friendOf(Agent1,Agent2),
   		Time),
         []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',45).

 /*  initiates(becomeFriends(Agent1,Agent2),
   	  friendOf(Agent1,Agent2),
   	  Time).
 */
becomeFriends(Agent1, Agent2)initiates friendOf(Agent1, Agent2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',45).

 /*  initiated(happens(becomeFriends(Agent1,Agent2),
   		  Time_From,
   		  Time_Until),
   	  friendOf(Agent1,Agent2),
   	  []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',45).

 /*  initiated(happens(becomeFriends(Agent1,Agent2),
   		  Time_From,
   		  Time_Until),
   	  friendOf(Agent1,Agent2),
   	  []).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',47).
% [agent1,agent2,time]
% Initiates(BecomeFriends(agent1,agent2),FriendOf(agent2,agent1),time).

 /*  pl=axiom(initiates(becomeFriends(Agent1,Agent2),
   		friendOf(Agent2,Agent1),
   		Time),
         []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',47).

 /*  initiates(becomeFriends(Agent1,Agent2),
   	  friendOf(Agent2,Agent1),
   	  Time).
 */
becomeFriends(Agent1, Agent2)initiates friendOf(Agent2, Agent1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',47).

 /*  initiated(happens(becomeFriends(Agent1,Agent2),
   		  Time_From,
   		  Time_Until),
   	  friendOf(Agent2,Agent1),
   	  []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',47).

 /*  initiated(happens(becomeFriends(Agent1,Agent2),
   		  Time_From,
   		  Time_Until),
   	  friendOf(Agent2,Agent1),
   	  []).
 */


% [agent1,agent2,time]
% Terminates(BecomeFriends(agent1,agent2),NeutralOf(agent1,agent2),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',51).

 /*  pl=axiom(terminates(becomeFriends(Agent1,Agent2),
   		 neutralOf(Agent1,Agent2),
   		 Time),
         []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',51).

 /*  terminates(becomeFriends(Agent1,Agent2),
   	   neutralOf(Agent1,Agent2),
   	   Time).
 */
becomeFriends(Agent1, Agent2)terminates neutralOf(Agent1, Agent2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',51).

 /*  terminated(happens(becomeFriends(Agent1,Agent2),
   		   Time_From,
   		   Time_Until),
   	   neutralOf(Agent1,Agent2),
   	   []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',51).

 /*  terminated(happens(becomeFriends(Agent1,Agent2),
   		   Time_From,
   		   Time_Until),
   	   neutralOf(Agent1,Agent2),
   	   []).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',53).
% [agent1,agent2,time]
% Terminates(BecomeFriends(agent1,agent2),NeutralOf(agent2,agent1),time).

 /*  pl=axiom(terminates(becomeFriends(Agent1,Agent2),
   		 neutralOf(Agent2,Agent1),
   		 Time),
         []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',53).

 /*  terminates(becomeFriends(Agent1,Agent2),
   	   neutralOf(Agent2,Agent1),
   	   Time).
 */
becomeFriends(Agent1, Agent2)terminates neutralOf(Agent2, Agent1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',53).

 /*  terminated(happens(becomeFriends(Agent1,Agent2),
   		   Time_From,
   		   Time_Until),
   	   neutralOf(Agent2,Agent1),
   	   []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',53).

 /*  terminated(happens(becomeFriends(Agent1,Agent2),
   		   Time_From,
   		   Time_Until),
   	   neutralOf(Agent2,Agent1),
   	   []).
 */


% [agent1,agent2,time]
% Terminates(BecomeFriends(agent1,agent2),EnemyOf(agent1,agent2),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',57).

 /*  pl=axiom(terminates(becomeFriends(Agent1,Agent2),
   		 enemyOf(Agent1,Agent2),
   		 Time),
         []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',57).

 /*  terminates(becomeFriends(Agent1,Agent2),
   	   enemyOf(Agent1,Agent2),
   	   Time).
 */
becomeFriends(Agent1, Agent2)terminates enemyOf(Agent1, Agent2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',57).

 /*  terminated(happens(becomeFriends(Agent1,Agent2),
   		   Time_From,
   		   Time_Until),
   	   enemyOf(Agent1,Agent2),
   	   []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',57).

 /*  terminated(happens(becomeFriends(Agent1,Agent2),
   		   Time_From,
   		   Time_Until),
   	   enemyOf(Agent1,Agent2),
   	   []).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',59).
% [agent1,agent2,time]
% Terminates(BecomeFriends(agent1,agent2),EnemyOf(agent2,agent1),time).

 /*  pl=axiom(terminates(becomeFriends(Agent1,Agent2),
   		 enemyOf(Agent2,Agent1),
   		 Time),
         []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',59).

 /*  terminates(becomeFriends(Agent1,Agent2),
   	   enemyOf(Agent2,Agent1),
   	   Time).
 */
becomeFriends(Agent1, Agent2)terminates enemyOf(Agent2, Agent1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',59).

 /*  terminated(happens(becomeFriends(Agent1,Agent2),
   		   Time_From,
   		   Time_Until),
   	   enemyOf(Agent2,Agent1),
   	   []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',59).

 /*  terminated(happens(becomeFriends(Agent1,Agent2),
   		   Time_From,
   		   Time_Until),
   	   enemyOf(Agent2,Agent1),
   	   []).
 */


% [agent1,agent2,time]
% Initiates(BecomeEnemies(agent1,agent2),EnemyOf(agent1,agent2),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',63).

 /*  pl=axiom(initiates(becomeEnemies(Agent1,Agent2),
   		enemyOf(Agent1,Agent2),
   		Time),
         []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',63).

 /*  initiates(becomeEnemies(Agent1,Agent2),
   	  enemyOf(Agent1,Agent2),
   	  Time).
 */
becomeEnemies(Agent1, Agent2)initiates enemyOf(Agent1, Agent2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',63).

 /*  initiated(happens(becomeEnemies(Agent1,Agent2),
   		  Time_From,
   		  Time_Until),
   	  enemyOf(Agent1,Agent2),
   	  []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',63).

 /*  initiated(happens(becomeEnemies(Agent1,Agent2),
   		  Time_From,
   		  Time_Until),
   	  enemyOf(Agent1,Agent2),
   	  []).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',65).
% [agent1,agent2,time]
% Initiates(BecomeEnemies(agent1,agent2),EnemyOf(agent2,agent1),time).

 /*  pl=axiom(initiates(becomeEnemies(Agent1,Agent2),
   		enemyOf(Agent2,Agent1),
   		Time),
         []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',65).

 /*  initiates(becomeEnemies(Agent1,Agent2),
   	  enemyOf(Agent2,Agent1),
   	  Time).
 */
becomeEnemies(Agent1, Agent2)initiates enemyOf(Agent2, Agent1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',65).

 /*  initiated(happens(becomeEnemies(Agent1,Agent2),
   		  Time_From,
   		  Time_Until),
   	  enemyOf(Agent2,Agent1),
   	  []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',65).

 /*  initiated(happens(becomeEnemies(Agent1,Agent2),
   		  Time_From,
   		  Time_Until),
   	  enemyOf(Agent2,Agent1),
   	  []).
 */


% [agent1,agent2,time]
% Terminates(BecomeEnemies(agent1,agent2),NeutralOf(agent1,agent2),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',69).

 /*  pl=axiom(terminates(becomeEnemies(Agent1,Agent2),
   		 neutralOf(Agent1,Agent2),
   		 Time),
         []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',69).

 /*  terminates(becomeEnemies(Agent1,Agent2),
   	   neutralOf(Agent1,Agent2),
   	   Time).
 */
becomeEnemies(Agent1, Agent2)terminates neutralOf(Agent1, Agent2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',69).

 /*  terminated(happens(becomeEnemies(Agent1,Agent2),
   		   Time_From,
   		   Time_Until),
   	   neutralOf(Agent1,Agent2),
   	   []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',69).

 /*  terminated(happens(becomeEnemies(Agent1,Agent2),
   		   Time_From,
   		   Time_Until),
   	   neutralOf(Agent1,Agent2),
   	   []).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',71).
% [agent1,agent2,time]
% Terminates(BecomeEnemies(agent1,agent2),NeutralOf(agent2,agent1),time).

 /*  pl=axiom(terminates(becomeEnemies(Agent1,Agent2),
   		 neutralOf(Agent2,Agent1),
   		 Time),
         []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',71).

 /*  terminates(becomeEnemies(Agent1,Agent2),
   	   neutralOf(Agent2,Agent1),
   	   Time).
 */
becomeEnemies(Agent1, Agent2)terminates neutralOf(Agent2, Agent1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',71).

 /*  terminated(happens(becomeEnemies(Agent1,Agent2),
   		   Time_From,
   		   Time_Until),
   	   neutralOf(Agent2,Agent1),
   	   []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',71).

 /*  terminated(happens(becomeEnemies(Agent1,Agent2),
   		   Time_From,
   		   Time_Until),
   	   neutralOf(Agent2,Agent1),
   	   []).
 */


% [agent1,agent2,time]
% Terminates(BecomeEnemies(agent1,agent2),FriendOf(agent1,agent2),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',75).

 /*  pl=axiom(terminates(becomeEnemies(Agent1,Agent2),
   		 friendOf(Agent1,Agent2),
   		 Time),
         []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',75).

 /*  terminates(becomeEnemies(Agent1,Agent2),
   	   friendOf(Agent1,Agent2),
   	   Time).
 */
becomeEnemies(Agent1, Agent2)terminates friendOf(Agent1, Agent2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',75).

 /*  terminated(happens(becomeEnemies(Agent1,Agent2),
   		   Time_From,
   		   Time_Until),
   	   friendOf(Agent1,Agent2),
   	   []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',75).

 /*  terminated(happens(becomeEnemies(Agent1,Agent2),
   		   Time_From,
   		   Time_Until),
   	   friendOf(Agent1,Agent2),
   	   []).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',77).
% [agent1,agent2,time]
% Terminates(BecomeEnemies(agent1,agent2),FriendOf(agent2,agent1),time).

 /*  pl=axiom(terminates(becomeEnemies(Agent1,Agent2),
   		 friendOf(Agent2,Agent1),
   		 Time),
         []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',77).

 /*  terminates(becomeEnemies(Agent1,Agent2),
   	   friendOf(Agent2,Agent1),
   	   Time).
 */
becomeEnemies(Agent1, Agent2)terminates friendOf(Agent2, Agent1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',77).

 /*  terminated(happens(becomeEnemies(Agent1,Agent2),
   		   Time_From,
   		   Time_Until),
   	   friendOf(Agent2,Agent1),
   	   []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',77).

 /*  terminated(happens(becomeEnemies(Agent1,Agent2),
   		   Time_From,
   		   Time_Until),
   	   friendOf(Agent2,Agent1),
   	   []).
 */


% [agent1,agent2,time]
% Initiates(BecomeNeutral(agent1,agent2),NeutralOf(agent1,agent2),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',81).

 /*  pl=axiom(initiates(becomeNeutral(Agent1,Agent2),
   		neutralOf(Agent1,Agent2),
   		Time),
         []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',81).

 /*  initiates(becomeNeutral(Agent1,Agent2),
   	  neutralOf(Agent1,Agent2),
   	  Time).
 */
becomeNeutral(Agent1, Agent2)initiates neutralOf(Agent1, Agent2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',81).

 /*  initiated(happens(becomeNeutral(Agent1,Agent2),
   		  Time_From,
   		  Time_Until),
   	  neutralOf(Agent1,Agent2),
   	  []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',81).

 /*  initiated(happens(becomeNeutral(Agent1,Agent2),
   		  Time_From,
   		  Time_Until),
   	  neutralOf(Agent1,Agent2),
   	  []).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',83).
% [agent1,agent2,time]
% Initiates(BecomeNeutral(agent1,agent2),NeutralOf(agent2,agent1),time).

 /*  pl=axiom(initiates(becomeNeutral(Agent1,Agent2),
   		neutralOf(Agent2,Agent1),
   		Time),
         []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',83).

 /*  initiates(becomeNeutral(Agent1,Agent2),
   	  neutralOf(Agent2,Agent1),
   	  Time).
 */
becomeNeutral(Agent1, Agent2)initiates neutralOf(Agent2, Agent1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',83).

 /*  initiated(happens(becomeNeutral(Agent1,Agent2),
   		  Time_From,
   		  Time_Until),
   	  neutralOf(Agent2,Agent1),
   	  []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',83).

 /*  initiated(happens(becomeNeutral(Agent1,Agent2),
   		  Time_From,
   		  Time_Until),
   	  neutralOf(Agent2,Agent1),
   	  []).
 */


% [agent1,agent2,time]
% Terminates(BecomeNeutral(agent1,agent2),FriendOf(agent1,agent2),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',87).

 /*  pl=axiom(terminates(becomeNeutral(Agent1,Agent2),
   		 friendOf(Agent1,Agent2),
   		 Time),
         []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',87).

 /*  terminates(becomeNeutral(Agent1,Agent2),
   	   friendOf(Agent1,Agent2),
   	   Time).
 */
becomeNeutral(Agent1, Agent2)terminates friendOf(Agent1, Agent2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',87).

 /*  terminated(happens(becomeNeutral(Agent1,Agent2),
   		   Time_From,
   		   Time_Until),
   	   friendOf(Agent1,Agent2),
   	   []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',87).

 /*  terminated(happens(becomeNeutral(Agent1,Agent2),
   		   Time_From,
   		   Time_Until),
   	   friendOf(Agent1,Agent2),
   	   []).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',89).
% [agent1,agent2,time]
% Terminates(BecomeNeutral(agent1,agent2),FriendOf(agent2,agent1),time).

 /*  pl=axiom(terminates(becomeNeutral(Agent1,Agent2),
   		 friendOf(Agent2,Agent1),
   		 Time),
         []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',89).

 /*  terminates(becomeNeutral(Agent1,Agent2),
   	   friendOf(Agent2,Agent1),
   	   Time).
 */
becomeNeutral(Agent1, Agent2)terminates friendOf(Agent2, Agent1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',89).

 /*  terminated(happens(becomeNeutral(Agent1,Agent2),
   		   Time_From,
   		   Time_Until),
   	   friendOf(Agent2,Agent1),
   	   []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',89).

 /*  terminated(happens(becomeNeutral(Agent1,Agent2),
   		   Time_From,
   		   Time_Until),
   	   friendOf(Agent2,Agent1),
   	   []).
 */


% [agent1,agent2,time]
% Terminates(BecomeNeutral(agent1,agent2),EnemyOf(agent1,agent2),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',93).

 /*  pl=axiom(terminates(becomeNeutral(Agent1,Agent2),
   		 enemyOf(Agent1,Agent2),
   		 Time),
         []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',93).

 /*  terminates(becomeNeutral(Agent1,Agent2),
   	   enemyOf(Agent1,Agent2),
   	   Time).
 */
becomeNeutral(Agent1, Agent2)terminates enemyOf(Agent1, Agent2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',93).

 /*  terminated(happens(becomeNeutral(Agent1,Agent2),
   		   Time_From,
   		   Time_Until),
   	   enemyOf(Agent1,Agent2),
   	   []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',93).

 /*  terminated(happens(becomeNeutral(Agent1,Agent2),
   		   Time_From,
   		   Time_Until),
   	   enemyOf(Agent1,Agent2),
   	   []).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',95).
% [agent1,agent2,time]
% Terminates(BecomeNeutral(agent1,agent2),EnemyOf(agent2,agent1),time).

 /*  pl=axiom(terminates(becomeNeutral(Agent1,Agent2),
   		 enemyOf(Agent2,Agent1),
   		 Time),
         []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',95).

 /*  terminates(becomeNeutral(Agent1,Agent2),
   	   enemyOf(Agent2,Agent1),
   	   Time).
 */
becomeNeutral(Agent1, Agent2)terminates enemyOf(Agent2, Agent1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',95).

 /*  terminated(happens(becomeNeutral(Agent1,Agent2),
   		   Time_From,
   		   Time_Until),
   	   enemyOf(Agent2,Agent1),
   	   []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',95).

 /*  terminated(happens(becomeNeutral(Agent1,Agent2),
   		   Time_From,
   		   Time_Until),
   	   enemyOf(Agent2,Agent1),
   	   []).
 */


% [agent1,agent2,time]
% HoldsAt(FriendOf(agent1,agent2),time) ->
% HoldsAt(Like(agent1,agent2),time).
 %  clausify_pnf=(holds_at(friendOf(Agent1, Agent2), Time)->holds_at(like(Agent1, Agent2), Time)).

 /*  holds_at(like(Agent1, Agent2), Time) :-
       holds_at(friendOf(Agent1, Agent2), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',99).

 /*  fix_axiom_head(Time) ->
       [ holds_at(like(Agent1, Agent2), Time),
          (->),
         like(Agent1, Agent2)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',99).

 /*  pl=axiom(like(Agent1,Agent2),
         [friendOf(Agent1,Agent2)]).
 */

 /*  friendOf(Agent1, Agent2) ->
       like(Agent1, Agent2).
 */
if friendOf(Agent1, Agent2)then like(Agent1, Agent2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',99).

 /*  reactive_rule([holds(friendOf(Agent1,Agent2),Holds)],
   	      [like(Agent1,Agent2)]).
 */

 /*  reactive_rule([holds(friendOf(Agent1,Agent2),Holds)],
   	      [like(Agent1,Agent2)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',99).

 /*  not(holds_at(friendOf(Agent1, Agent2), Time)) :-
       not(holds_at(like(Agent1, Agent2), Time)).
 */

 /*  pl=axiom(not(friendOf(Agent1,Agent2)),
         [not(like(Agent1,Agent2))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',99).

 /*  not(like(Agent1, Agent2)) ->
       not(friendOf(Agent1, Agent2)).
 */
if not like(Agent1, Agent2)then not friendOf(Agent1, Agent2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',99).

 /*  reactive_rule([not(like(Agent1,Agent2))],
   	      [ holds(not(friendOf(Agent1,Agent2)),
   		      Holds4)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',99).

 /*  reactive_rule([not(like(Agent1,Agent2))],
   	      [ holds(not(friendOf(Agent1,Agent2)),
   		      Holds4)
   	      ]).
 */


% [agent1,agent2,time]
% HoldsAt(EnemyOf(agent1,agent2),time) ->
% HoldsAt(Dislike(agent1,agent2),time).
 %  clausify_pnf=(holds_at(enemyOf(Agent1, Agent2), Time)->holds_at(dislike(Agent1, Agent2), Time)).

 /*  holds_at(dislike(Agent1, Agent2), Time) :-
       holds_at(enemyOf(Agent1, Agent2), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',103).

 /*  fix_axiom_head(Time) ->
       [ holds_at(dislike(Agent1, Agent2), Time),
          (->),
         dislike(Agent1, Agent2)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',103).

 /*  pl=axiom(dislike(Agent1,Agent2),
         [enemyOf(Agent1,Agent2)]).
 */

 /*  enemyOf(Agent1, Agent2) ->
       dislike(Agent1, Agent2).
 */
if enemyOf(Agent1, Agent2)then dislike(Agent1, Agent2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',103).

 /*  reactive_rule([holds(enemyOf(Agent1,Agent2),Holds)],
   	      [dislike(Agent1,Agent2)]).
 */

 /*  reactive_rule([holds(enemyOf(Agent1,Agent2),Holds)],
   	      [dislike(Agent1,Agent2)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',103).

 /*  not(holds_at(enemyOf(Agent1, Agent2), Time)) :-
       not(holds_at(dislike(Agent1, Agent2), Time)).
 */

 /*  pl=axiom(not(enemyOf(Agent1,Agent2)),
         [not(dislike(Agent1,Agent2))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',103).

 /*  not(dislike(Agent1, Agent2)) ->
       not(enemyOf(Agent1, Agent2)).
 */
if not dislike(Agent1, Agent2)then not enemyOf(Agent1, Agent2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',103).

 /*  reactive_rule([not(dislike(Agent1,Agent2))],
   	      [ holds(not(enemyOf(Agent1,Agent2)),
   		      Holds4)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',103).

 /*  reactive_rule([not(dislike(Agent1,Agent2))],
   	      [ holds(not(enemyOf(Agent1,Agent2)),
   		      Holds4)
   	      ]).
 */

% fluent AcquaintanceOf(agent,agent)
 %  blue=fluent(acquaintanceOf(agent,agent)).
 %  fluent(acquaintanceOf(agent,agent)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',105).
fluents([acquaintanceOf/2]).
 %  fluents([acquaintanceOf/2]).
mpred_prop(acquaintanceOf(agent,agent),fluent).
 %  mpred_prop(acquaintanceOf(agent,agent),fluent).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',108).
% [agent,time]
 % HoldsAt(AcquaintanceOf(agent,agent),time).

 /*  fix_axiom_head(Time) ->
       [ holds_at(acquaintanceOf(Agent, Agent), Time),
          (->),
         acquaintanceOf(Agent, Agent)
       ].
 */
 %  pl=axiom(acquaintanceOf(Agent,Agent),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',108).
acquaintanceOf(Agent,Agent).
 %  acquaintanceOf(Agent,Agent).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',110).
% [agent1,agent2,time]
% HoldsAt(AcquaintanceOf(agent1,agent2),time) ->
% HoldsAt(AcquaintanceOf(agent2,agent1),time).
 %  clausify_pnf=(holds_at(acquaintanceOf(Agent1, Agent2), Time)->holds_at(acquaintanceOf(Agent2, Agent1), Time)).

% event Introduce(agent,agent)
 %  blue=event(introduce(agent,agent)).
 %  event(introduce(agent,agent)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',113).
actions([introduce/2]).
 %  actions([introduce/2]).
mpred_prop(introduce(agent,agent),event).
 %  mpred_prop(introduce(agent,agent),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',116).
% [agent1,agent2,time]
% Initiates(Introduce(agent1,agent2),
%           AcquaintanceOf(agent1,agent2),
%           time).

 /*  pl=axiom(initiates(introduce(Agent1,Agent2),
   		acquaintanceOf(Agent1,Agent2),
   		Time),
         []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',116).

 /*  initiates(introduce(Agent1,Agent2),
   	  acquaintanceOf(Agent1,Agent2),
   	  Time).
 */
introduce(Agent1, Agent2)initiates acquaintanceOf(Agent1, Agent2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',116).

 /*  initiated(happens(introduce(Agent1,Agent2),
   		  Time_From,
   		  Time_Until),
   	  acquaintanceOf(Agent1,Agent2),
   	  []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',116).

 /*  initiated(happens(introduce(Agent1,Agent2),
   		  Time_From,
   		  Time_Until),
   	  acquaintanceOf(Agent1,Agent2),
   	  []).
 */


% [agent1,agent2,time]
% Initiates(Introduce(agent1,agent2),
%           AcquaintanceOf(agent2,agent1),
%           time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',122).

 /*  pl=axiom(initiates(introduce(Agent1,Agent2),
   		acquaintanceOf(Agent2,Agent1),
   		Time),
         []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',122).

 /*  initiates(introduce(Agent1,Agent2),
   	  acquaintanceOf(Agent2,Agent1),
   	  Time).
 */
introduce(Agent1, Agent2)initiates acquaintanceOf(Agent2, Agent1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',122).

 /*  initiated(happens(introduce(Agent1,Agent2),
   		  Time_From,
   		  Time_Until),
   	  acquaintanceOf(Agent2,Agent1),
   	  []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',122).

 /*  initiated(happens(introduce(Agent1,Agent2),
   		  Time_From,
   		  Time_Until),
   	  acquaintanceOf(Agent2,Agent1),
   	  []).
 */

% event IntroduceMutual(agent,agent,agent)
 %  blue=event(introduceMutual(agent,agent,agent)).
 %  event(introduceMutual(agent,agent,agent)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',125).
actions([introduceMutual/3]).
 %  actions([introduceMutual/3]).
mpred_prop(introduceMutual(agent,agent,agent),event).
 %  mpred_prop(introduceMutual(agent,agent,agent),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',128).
% [agent1,agent2,agent3,time]
% Initiates(IntroduceMutual(agent1,agent2,agent3),
%           AcquaintanceOf(agent2,agent3),
%           time).

 /*  pl=axiom(initiates(introduceMutual(Agent1,Agent2,Agent3),
   		acquaintanceOf(Agent2,Agent3),
   		Time),
         []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',128).

 /*  initiates(introduceMutual(Agent1,Agent2,Agent3),
   	  acquaintanceOf(Agent2,Agent3),
   	  Time).
 */
introduceMutual(Agent1, Agent2, Agent3)initiates acquaintanceOf(Agent2, Agent3).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',128).

 /*  initiated(happens(introduceMutual(Agent1,
   				  Agent2,
   				  Agent3),
   		  Time_From,
   		  Time_Until),
   	  acquaintanceOf(Agent2,Agent3),
   	  []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',128).

 /*  initiated(happens(introduceMutual(Agent1,
   				  Agent2,
   				  Agent3),
   		  Time_From,
   		  Time_Until),
   	  acquaintanceOf(Agent2,Agent3),
   	  []).
 */


% [agent1,agent2,agent3,time]
% Initiates(IntroduceMutual(agent1,agent2,agent3),
%           AcquaintanceOf(agent3,agent2),
%           time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',134).

 /*  pl=axiom(initiates(introduceMutual(Agent1,Agent2,Agent3),
   		acquaintanceOf(Agent3,Agent2),
   		Time),
         []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',134).

 /*  initiates(introduceMutual(Agent1,Agent2,Agent3),
   	  acquaintanceOf(Agent3,Agent2),
   	  Time).
 */
introduceMutual(Agent1, Agent2, Agent3)initiates acquaintanceOf(Agent3, Agent2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',134).

 /*  initiated(happens(introduceMutual(Agent1,
   				  Agent2,
   				  Agent3),
   		  Time_From,
   		  Time_Until),
   	  acquaintanceOf(Agent3,Agent2),
   	  []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',134).

 /*  initiated(happens(introduceMutual(Agent1,
   				  Agent2,
   				  Agent3),
   		  Time_From,
   		  Time_Until),
   	  acquaintanceOf(Agent3,Agent2),
   	  []).
 */


% [agent1,agent2,agent3,time]
% Happens(IntroduceMutual(agent1,agent2,agent3),time) ->
% HoldsAt(AcquaintanceOf(agent1,agent2),time) &
% HoldsAt(AcquaintanceOf(agent1,agent3),time).
 %  clausify_pnf=(happens(introduceMutual(Agent1, Agent2, Agent3), Time)->holds_at(acquaintanceOf(Agent1, Agent2), Time), holds_at(acquaintanceOf(Agent1, Agent3), Time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',139).

 /*  not(happens(introduceMutual(Agent1, Agent2, Agent3), Time)) :-
       (   not(holds_at(acquaintanceOf(Agent1, Agent2), Time))
       ;   not(holds_at(acquaintanceOf(Agent1, Agent3), Time))
       ).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',139).

 /*  fix_axiom_head(Time) ->
       [ not(happens(introduceMutual(Agent1, Agent2, Agent3),
                     Time)),
          (->),
         not(introduceMutual(Agent1, Agent2, Agent3))
       ].
 */
 %   pl=axiom(not(introduceMutual(Agent1, Agent2, Agent3)), [(not(acquaintanceOf(Agent1, Agent2));not(acquaintanceOf(Agent1, Agent3)))]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',139).

 /*  not(acquaintanceOf(Agent1, Agent2));not(acquaintanceOf(Agent1, Agent3)) ->
       not(introduceMutual(Agent1, Agent2, Agent3)).
 */
if not acquaintanceOf(Agent1, Agent2);not acquaintanceOf(Agent1, Agent3)then not introduceMutual(Agent1, Agent2, Agent3).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',139).

 /*   reactive_rule([  (not(acquaintanceOf(Agent1, Agent2));not(acquaintanceOf(Agent1, Agent3)))
                    ],
                    [ not(introduceMutual(Agent1, Agent2, Agent3))
                    ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',139).

 /*   reactive_rule([  (not(acquaintanceOf(Agent1, Agent2));not(acquaintanceOf(Agent1, Agent3)))
                    ],
                    [ not(introduceMutual(Agent1, Agent2, Agent3))
                    ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',139).

 /*  holds_at(acquaintanceOf(Agent1, Agent2), Time) :-
       happens(introduceMutual(Agent1, Agent2, Agent3),
               Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',139).

 /*  pl=axiom(requires(introduceMutual(Agent1,Agent2,Agent3),
   	       When_Time),
         [ metreqs(introduceMutual(Agent1,Agent2,Agent3))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',139).

 /*  metreqs(introduceMutual(Agent1, Agent2, Agent3)) ->
       requires(introduceMutual(Agent1, Agent2, Agent3),
                When_Time).
 */
if metreqs(introduceMutual(Agent1, Agent2, Agent3))then requires(introduceMutual(Agent1, Agent2, Agent3), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',139).

 /*  reactive_rule([ metreqs(introduceMutual(Agent1,
   					Agent2,
   					Agent3))
   	      ],
   	      [ requires(introduceMutual(Agent1,
   					 Agent2,
   					 Agent3),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',139).

 /*  reactive_rule([ metreqs(introduceMutual(Agent1,
   					Agent2,
   					Agent3))
   	      ],
   	      [ requires(introduceMutual(Agent1,
   					 Agent2,
   					 Agent3),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',139).

 /*  fix_axiom_head(When_Time) ->
       [ holds_at(metreqs(introduceMutual(Agent1, Agent2, Agent3)),
                  When_Time),
          (->),
         metreqs(introduceMutual(Agent1, Agent2, Agent3))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',139).

 /*  pl=axiom(metreqs(introduceMutual(Agent1,Agent2,Agent3)),
         [acquaintanceOf(Agent1,Agent2)]).
 */

 /*  acquaintanceOf(Agent1, Agent2) ->
       metreqs(introduceMutual(Agent1, Agent2, Agent3)).
 */
if acquaintanceOf(Agent1, Agent2)then metreqs(introduceMutual(Agent1, Agent2, Agent3)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',139).

 /*  reactive_rule([ holds(acquaintanceOf(Agent1,Agent2),
   		      Holds)
   	      ],
   	      [ metreqs(introduceMutual(Agent1,
   					Agent2,
   					Agent3))
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',139).

 /*  reactive_rule([ holds(acquaintanceOf(Agent1,Agent2),
   		      Holds)
   	      ],
   	      [ metreqs(introduceMutual(Agent1,
   					Agent2,
   					Agent3))
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',139).

 /*  holds_at(acquaintanceOf(Agent1, Agent3), When_Time) :-
       happens(introduceMutual(Agent1, Agent2, Agent3),
               When_Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',139).

 /*  pl=axiom(requires(introduceMutual(Agent1,Agent2,Agent3),
   	       When_Time),
         [ metreqs(introduceMutual(Agent1,Agent2,Agent3))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',139).

 /*  metreqs(introduceMutual(Agent1, Agent2, Agent3)) ->
       requires(introduceMutual(Agent1, Agent2, Agent3),
                When_Time).
 */
if metreqs(introduceMutual(Agent1, Agent2, Agent3))then requires(introduceMutual(Agent1, Agent2, Agent3), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',139).

 /*  reactive_rule([ metreqs(introduceMutual(Agent1,
   					Agent2,
   					Agent3))
   	      ],
   	      [ requires(introduceMutual(Agent1,
   					 Agent2,
   					 Agent3),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',139).

 /*  reactive_rule([ metreqs(introduceMutual(Agent1,
   					Agent2,
   					Agent3))
   	      ],
   	      [ requires(introduceMutual(Agent1,
   					 Agent2,
   					 Agent3),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',139).

 /*  fix_axiom_head(When_Time) ->
       [ holds_at(metreqs(introduceMutual(Agent1, Agent2, Agent3)),
                  When_Time),
          (->),
         metreqs(introduceMutual(Agent1, Agent2, Agent3))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',139).

 /*  pl=axiom(metreqs(introduceMutual(Agent1,Agent2,Agent3)),
         [acquaintanceOf(Agent1,Agent3)]).
 */

 /*  acquaintanceOf(Agent1, Agent3) ->
       metreqs(introduceMutual(Agent1, Agent2, Agent3)).
 */
if acquaintanceOf(Agent1, Agent3)then metreqs(introduceMutual(Agent1, Agent2, Agent3)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',139).

 /*  reactive_rule([ holds(acquaintanceOf(Agent1,Agent3),
   		      Holds6)
   	      ],
   	      [ metreqs(introduceMutual(Agent1,
   					Agent2,
   					Agent3))
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',139).

 /*  reactive_rule([ holds(acquaintanceOf(Agent1,Agent3),
   		      Holds6)
   	      ],
   	      [ metreqs(introduceMutual(Agent1,
   					Agent2,
   					Agent3))
   	      ]).
 */


%; End of file.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',142).
% translate: ending  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e.lps 
