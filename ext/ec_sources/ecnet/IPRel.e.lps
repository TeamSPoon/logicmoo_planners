:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/HungerNeed.e',32).
% translate: unskipped  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e.lps 
:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(lps).
% translate: begining  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e.lps 
% Wed, 07 Oct 2020 09:35:28 GMT File: <stream>(0x5557c8ecd600)%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; IPRel: interpersonal relations
%;

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',14).
% fluent FriendOf(agent,agent)
 %  fluent(friendOf(agent,agent)).
 %  fluent(friendOf(agent,agent)).
fluents([friendOf/2]).
mpred_prop(friendOf(agent,agent),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',16).
% fluent NeutralOf(agent,agent)
 %  fluent(neutralOf(agent,agent)).
 %  fluent(neutralOf(agent,agent)).
fluents([neutralOf/2]).
mpred_prop(neutralOf(agent,agent),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',18).
% fluent EnemyOf(agent,agent)
 %  fluent(enemyOf(agent,agent)).
 %  fluent(enemyOf(agent,agent)).
fluents([enemyOf/2]).
mpred_prop(enemyOf(agent,agent),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',20).
% event BecomeFriends(agent,agent)
 %  event(becomeFriends(agent,agent)).
 %  event(becomeFriends(agent,agent)).
actions([becomeFriends/2]).
mpred_prop(becomeFriends(agent,agent),event).

% event BecomeNeutral(agent,agent)
 %  event(becomeNeutral(agent,agent)).
 %  event(becomeNeutral(agent,agent)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',20).
actions([becomeNeutral/2]).
mpred_prop(becomeNeutral(agent,agent),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',22).
% event BecomeEnemies(agent,agent)
 %  event(becomeEnemies(agent,agent)).
 %  event(becomeEnemies(agent,agent)).
actions([becomeEnemies/2]).
mpred_prop(becomeEnemies(agent,agent),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',24).
% [agent1,agent2,time]
% HoldsAt(FriendOf(agent1,agent2),time) ->
% !Holds(EnemyOf(agent1,agent2),time).

 /*  holds_at(friendOf(Agent1, Agent2), Time) ->
       not(holds(enemyOf(Agent1, Agent2), Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',24).
then(if(at(friendOf(Agent1,Agent2),Time)),
     not(holds(enemyOf(Agent1,Agent2),Time))).

 /*  reactive_rule([holds(friendOf(Agent1,Agent2),Time)],
   	      [ holds(not([ holds(enemyOf(Agent1,Agent2),
   				  Time)
   			  ]),
   		      Time)
   	      ]).
 */


% [agent1,agent2,time]
% HoldsAt(NeutralOf(agent1,agent2),time) ->
% !Holds(EnemyOf(agent1,agent2),time).

 /*  holds_at(neutralOf(Agent1, Agent2), Time) ->
       not(holds(enemyOf(Agent1, Agent2), Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',29).
then(if(at(neutralOf(Agent1,Agent2),Time)),
     not(holds(enemyOf(Agent1,Agent2),Time))).

 /*  reactive_rule([holds(neutralOf(Agent1,Agent2),Time)],
   	      [ holds(not([ holds(enemyOf(Agent1,Agent2),
   				  Time)
   			  ]),
   		      Time)
   	      ]).
 */


% [agent1,agent2,time]
% HoldsAt(FriendOf(agent1,agent2),time) ->
% HoldsAt(FriendOf(agent2,agent1),time).

 /*  holds_at(friendOf(Agent1, Agent2), Time) ->
       holds_at(friendOf(Agent2, Agent1), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',33).
then(if(at(friendOf(Agent1,Agent2),Time)),
     at(friendOf(Agent2,Agent1),Time)).

 /*  reactive_rule([holds(friendOf(Agent1,Agent2),Time)],
   	      [holds(friendOf(Agent2,Agent1),Time)]).
 */


% [agent1,agent2,time]
% HoldsAt(NeutralOf(agent1,agent2),time) ->
% HoldsAt(NeutralOf(agent2,agent1),time).

 /*  holds_at(neutralOf(Agent1, Agent2), Time) ->
       holds_at(neutralOf(Agent2, Agent1), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',37).
then(if(at(neutralOf(Agent1,Agent2),Time)),
     at(neutralOf(Agent2,Agent1),Time)).

 /*  reactive_rule([holds(neutralOf(Agent1,Agent2),Time)],
   	      [holds(neutralOf(Agent2,Agent1),Time)]).
 */


% [agent1,agent2,time]
% HoldsAt(EnemyOf(agent1,agent2),time) ->
% HoldsAt(EnemyOf(agent2,agent1),time).

 /*  holds_at(enemyOf(Agent1, Agent2), Time) ->
       holds_at(enemyOf(Agent2, Agent1), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',41).
then(if(at(enemyOf(Agent1,Agent2),Time)),
     at(enemyOf(Agent2,Agent1),Time)).

 /*  reactive_rule([holds(enemyOf(Agent1,Agent2),Time)],
   	      [holds(enemyOf(Agent2,Agent1),Time)]).
 */


% [agent1,agent2,time]
% Initiates(BecomeFriends(agent1,agent2),FriendOf(agent1,agent2),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',45).

 /*  axiom(initiates(becomeFriends(Agent1, Agent2), friendOf(Agent1, Agent2), Time),
       []).
 */

 /*  initiates(becomeFriends(A,Becomefriends),
   	  friendOf(A,Becomefriends),
   	  Initiates).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',45).
initiates(becomeFriends(A,Becomefriends),
	  friendOf(A,Becomefriends)).

 /*  initiated(happens(becomeFriends(A,Becomefriends),
   		  Time_From,
   		  Time_Until),
   	  friendOf(A,Becomefriends),
   	  []).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',47).
% [agent1,agent2,time]
% Initiates(BecomeFriends(agent1,agent2),FriendOf(agent2,agent1),time).

 /*  axiom(initiates(becomeFriends(Agent1, Agent2), friendOf(Agent2, Agent1), Time),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',47).

 /*  initiates(becomeFriends(Friendof,Becomefriends),
   	  friendOf(Becomefriends,Friendof),
   	  Initiates).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',47).
initiates(becomeFriends(Friendof,Becomefriends),
	  friendOf(Becomefriends,Friendof)).

 /*  initiated(happens(becomeFriends(Friendof,Becomefriends),
   		  Time_From,
   		  Time_Until),
   	  friendOf(Becomefriends,Friendof),
   	  []).
 */


% [agent1,agent2,time]
% Terminates(BecomeFriends(agent1,agent2),NeutralOf(agent1,agent2),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',51).

 /*  axiom(terminates(becomeFriends(Agent1, Agent2), neutralOf(Agent1, Agent2), Time),
       []).
 */

 /*  terminates(becomeFriends(A,Becomefriends),
   	   neutralOf(A,Becomefriends),
   	   Terminates).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',51).
terminates(becomeFriends(A,Becomefriends),
	   neutralOf(A,Becomefriends)).

 /*  terminated(happens(becomeFriends(A,Becomefriends),
   		   Time_From,
   		   Time_Until),
   	   neutralOf(A,Becomefriends),
   	   []).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',53).
% [agent1,agent2,time]
% Terminates(BecomeFriends(agent1,agent2),NeutralOf(agent2,agent1),time).

 /*  axiom(terminates(becomeFriends(Agent1, Agent2), neutralOf(Agent2, Agent1), Time),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',53).

 /*  terminates(becomeFriends(Neutralof,Becomefriends),
   	   neutralOf(Becomefriends,Neutralof),
   	   Terminates).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',53).
terminates(becomeFriends(Neutralof,Becomefriends),
	   neutralOf(Becomefriends,Neutralof)).

 /*  terminated(happens(becomeFriends(Neutralof,Becomefriends),
   		   Time_From,
   		   Time_Until),
   	   neutralOf(Becomefriends,Neutralof),
   	   []).
 */


% [agent1,agent2,time]
% Terminates(BecomeFriends(agent1,agent2),EnemyOf(agent1,agent2),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',57).

 /*  axiom(terminates(becomeFriends(Agent1, Agent2), enemyOf(Agent1, Agent2), Time),
       []).
 */

 /*  terminates(becomeFriends(A,Becomefriends),
   	   enemyOf(A,Becomefriends),
   	   Terminates).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',57).
terminates(becomeFriends(A,Becomefriends),
	   enemyOf(A,Becomefriends)).

 /*  terminated(happens(becomeFriends(A,Becomefriends),
   		   Time_From,
   		   Time_Until),
   	   enemyOf(A,Becomefriends),
   	   []).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',59).
% [agent1,agent2,time]
% Terminates(BecomeFriends(agent1,agent2),EnemyOf(agent2,agent1),time).

 /*  axiom(terminates(becomeFriends(Agent1, Agent2), enemyOf(Agent2, Agent1), Time),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',59).

 /*  terminates(becomeFriends(Enemyof,Becomefriends),
   	   enemyOf(Becomefriends,Enemyof),
   	   Terminates).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',59).
terminates(becomeFriends(Enemyof,Becomefriends),
	   enemyOf(Becomefriends,Enemyof)).

 /*  terminated(happens(becomeFriends(Enemyof,Becomefriends),
   		   Time_From,
   		   Time_Until),
   	   enemyOf(Becomefriends,Enemyof),
   	   []).
 */


% [agent1,agent2,time]
% Initiates(BecomeEnemies(agent1,agent2),EnemyOf(agent1,agent2),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',63).

 /*  axiom(initiates(becomeEnemies(Agent1, Agent2), enemyOf(Agent1, Agent2), Time),
       []).
 */

 /*  initiates(becomeEnemies(A,Becomeenemies),
   	  enemyOf(A,Becomeenemies),
   	  Initiates).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',63).
initiates(becomeEnemies(A,Becomeenemies),
	  enemyOf(A,Becomeenemies)).

 /*  initiated(happens(becomeEnemies(A,Becomeenemies),
   		  Time_From,
   		  Time_Until),
   	  enemyOf(A,Becomeenemies),
   	  []).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',65).
% [agent1,agent2,time]
% Initiates(BecomeEnemies(agent1,agent2),EnemyOf(agent2,agent1),time).

 /*  axiom(initiates(becomeEnemies(Agent1, Agent2), enemyOf(Agent2, Agent1), Time),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',65).

 /*  initiates(becomeEnemies(Enemyof,Becomeenemies),
   	  enemyOf(Becomeenemies,Enemyof),
   	  Initiates).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',65).
initiates(becomeEnemies(Enemyof,Becomeenemies),
	  enemyOf(Becomeenemies,Enemyof)).

 /*  initiated(happens(becomeEnemies(Enemyof,Becomeenemies),
   		  Time_From,
   		  Time_Until),
   	  enemyOf(Becomeenemies,Enemyof),
   	  []).
 */


% [agent1,agent2,time]
% Terminates(BecomeEnemies(agent1,agent2),NeutralOf(agent1,agent2),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',69).

 /*  axiom(terminates(becomeEnemies(Agent1, Agent2), neutralOf(Agent1, Agent2), Time),
       []).
 */

 /*  terminates(becomeEnemies(A,Becomeenemies),
   	   neutralOf(A,Becomeenemies),
   	   Terminates).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',69).
terminates(becomeEnemies(A,Becomeenemies),
	   neutralOf(A,Becomeenemies)).

 /*  terminated(happens(becomeEnemies(A,Becomeenemies),
   		   Time_From,
   		   Time_Until),
   	   neutralOf(A,Becomeenemies),
   	   []).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',71).
% [agent1,agent2,time]
% Terminates(BecomeEnemies(agent1,agent2),NeutralOf(agent2,agent1),time).

 /*  axiom(terminates(becomeEnemies(Agent1, Agent2), neutralOf(Agent2, Agent1), Time),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',71).

 /*  terminates(becomeEnemies(Neutralof,Becomeenemies),
   	   neutralOf(Becomeenemies,Neutralof),
   	   Terminates).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',71).
terminates(becomeEnemies(Neutralof,Becomeenemies),
	   neutralOf(Becomeenemies,Neutralof)).

 /*  terminated(happens(becomeEnemies(Neutralof,Becomeenemies),
   		   Time_From,
   		   Time_Until),
   	   neutralOf(Becomeenemies,Neutralof),
   	   []).
 */


% [agent1,agent2,time]
% Terminates(BecomeEnemies(agent1,agent2),FriendOf(agent1,agent2),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',75).

 /*  axiom(terminates(becomeEnemies(Agent1, Agent2), friendOf(Agent1, Agent2), Time),
       []).
 */

 /*  terminates(becomeEnemies(A,Becomeenemies),
   	   friendOf(A,Becomeenemies),
   	   Terminates).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',75).
terminates(becomeEnemies(A,Becomeenemies),
	   friendOf(A,Becomeenemies)).

 /*  terminated(happens(becomeEnemies(A,Becomeenemies),
   		   Time_From,
   		   Time_Until),
   	   friendOf(A,Becomeenemies),
   	   []).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',77).
% [agent1,agent2,time]
% Terminates(BecomeEnemies(agent1,agent2),FriendOf(agent2,agent1),time).

 /*  axiom(terminates(becomeEnemies(Agent1, Agent2), friendOf(Agent2, Agent1), Time),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',77).

 /*  terminates(becomeEnemies(Friendof,Becomeenemies),
   	   friendOf(Becomeenemies,Friendof),
   	   Terminates).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',77).
terminates(becomeEnemies(Friendof,Becomeenemies),
	   friendOf(Becomeenemies,Friendof)).

 /*  terminated(happens(becomeEnemies(Friendof,Becomeenemies),
   		   Time_From,
   		   Time_Until),
   	   friendOf(Becomeenemies,Friendof),
   	   []).
 */


% [agent1,agent2,time]
% Initiates(BecomeNeutral(agent1,agent2),NeutralOf(agent1,agent2),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',81).

 /*  axiom(initiates(becomeNeutral(Agent1, Agent2), neutralOf(Agent1, Agent2), Time),
       []).
 */

 /*  initiates(becomeNeutral(A,Becomeneutral),
   	  neutralOf(A,Becomeneutral),
   	  Initiates).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',81).
initiates(becomeNeutral(A,Becomeneutral),
	  neutralOf(A,Becomeneutral)).

 /*  initiated(happens(becomeNeutral(A,Becomeneutral),
   		  Time_From,
   		  Time_Until),
   	  neutralOf(A,Becomeneutral),
   	  []).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',83).
% [agent1,agent2,time]
% Initiates(BecomeNeutral(agent1,agent2),NeutralOf(agent2,agent1),time).

 /*  axiom(initiates(becomeNeutral(Agent1, Agent2), neutralOf(Agent2, Agent1), Time),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',83).

 /*  initiates(becomeNeutral(Neutralof,Becomeneutral),
   	  neutralOf(Becomeneutral,Neutralof),
   	  Initiates).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',83).
initiates(becomeNeutral(Neutralof,Becomeneutral),
	  neutralOf(Becomeneutral,Neutralof)).

 /*  initiated(happens(becomeNeutral(Neutralof,Becomeneutral),
   		  Time_From,
   		  Time_Until),
   	  neutralOf(Becomeneutral,Neutralof),
   	  []).
 */


% [agent1,agent2,time]
% Terminates(BecomeNeutral(agent1,agent2),FriendOf(agent1,agent2),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',87).

 /*  axiom(terminates(becomeNeutral(Agent1, Agent2), friendOf(Agent1, Agent2), Time),
       []).
 */

 /*  terminates(becomeNeutral(A,Becomeneutral),
   	   friendOf(A,Becomeneutral),
   	   Terminates).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',87).
terminates(becomeNeutral(A,Becomeneutral),
	   friendOf(A,Becomeneutral)).

 /*  terminated(happens(becomeNeutral(A,Becomeneutral),
   		   Time_From,
   		   Time_Until),
   	   friendOf(A,Becomeneutral),
   	   []).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',89).
% [agent1,agent2,time]
% Terminates(BecomeNeutral(agent1,agent2),FriendOf(agent2,agent1),time).

 /*  axiom(terminates(becomeNeutral(Agent1, Agent2), friendOf(Agent2, Agent1), Time),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',89).

 /*  terminates(becomeNeutral(Friendof,Becomeneutral),
   	   friendOf(Becomeneutral,Friendof),
   	   Terminates).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',89).
terminates(becomeNeutral(Friendof,Becomeneutral),
	   friendOf(Becomeneutral,Friendof)).

 /*  terminated(happens(becomeNeutral(Friendof,Becomeneutral),
   		   Time_From,
   		   Time_Until),
   	   friendOf(Becomeneutral,Friendof),
   	   []).
 */


% [agent1,agent2,time]
% Terminates(BecomeNeutral(agent1,agent2),EnemyOf(agent1,agent2),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',93).

 /*  axiom(terminates(becomeNeutral(Agent1, Agent2), enemyOf(Agent1, Agent2), Time),
       []).
 */

 /*  terminates(becomeNeutral(A,Becomeneutral),
   	   enemyOf(A,Becomeneutral),
   	   Terminates).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',93).
terminates(becomeNeutral(A,Becomeneutral),
	   enemyOf(A,Becomeneutral)).

 /*  terminated(happens(becomeNeutral(A,Becomeneutral),
   		   Time_From,
   		   Time_Until),
   	   enemyOf(A,Becomeneutral),
   	   []).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',95).
% [agent1,agent2,time]
% Terminates(BecomeNeutral(agent1,agent2),EnemyOf(agent2,agent1),time).

 /*  axiom(terminates(becomeNeutral(Agent1, Agent2), enemyOf(Agent2, Agent1), Time),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',95).

 /*  terminates(becomeNeutral(Enemyof,Becomeneutral),
   	   enemyOf(Becomeneutral,Enemyof),
   	   Terminates).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',95).
terminates(becomeNeutral(Enemyof,Becomeneutral),
	   enemyOf(Becomeneutral,Enemyof)).

 /*  terminated(happens(becomeNeutral(Enemyof,Becomeneutral),
   		   Time_From,
   		   Time_Until),
   	   enemyOf(Becomeneutral,Enemyof),
   	   []).
 */


% [agent1,agent2,time]
% HoldsAt(FriendOf(agent1,agent2),time) ->
% HoldsAt(Like(agent1,agent2),time).

 /*  holds_at(friendOf(Agent1, Agent2), Time) ->
       holds_at(like(Agent1, Agent2), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',99).
then(if(at(friendOf(Agent1,Agent2),Time)),
     at(like(Agent1,Agent2),Time)).

 /*  reactive_rule([holds(friendOf(Agent1,Agent2),Time)],
   	      [holds(like(Agent1,Agent2),Time)]).
 */


% [agent1,agent2,time]
% HoldsAt(EnemyOf(agent1,agent2),time) ->
% HoldsAt(Dislike(agent1,agent2),time).

 /*  holds_at(enemyOf(Agent1, Agent2), Time) ->
       holds_at(dislike(Agent1, Agent2), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',103).
then(if(at(enemyOf(Agent1,Agent2),Time)),
     at(dislike(Agent1,Agent2),Time)).

 /*  reactive_rule([holds(enemyOf(Agent1,Agent2),Time)],
   	      [holds(dislike(Agent1,Agent2),Time)]).
 */

% fluent AcquaintanceOf(agent,agent)
 %  fluent(acquaintanceOf(agent,agent)).
 %  fluent(acquaintanceOf(agent,agent)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',105).
fluents([acquaintanceOf/2]).
mpred_prop(acquaintanceOf(agent,agent),fluent).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',108).
% [agent,time]
 % HoldsAt(AcquaintanceOf(agent,agent),time).

 /*  fix_axiom_head(Time) ->
       [ holds_at(acquaintanceOf(Agent, Agent), Time),
          (->),
         acquaintanceOf(Agent, Agent)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',108).

 /*  axiom(acquaintanceOf(Agent, Agent),
       []).
 */
acquaintanceOf(Acquaintanceof,Acquaintanceof).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',110).
% [agent1,agent2,time]
% HoldsAt(AcquaintanceOf(agent1,agent2),time) ->
% HoldsAt(AcquaintanceOf(agent2,agent1),time).

 /*  holds_at(acquaintanceOf(Agent1, Agent2), Time) ->
       holds_at(acquaintanceOf(Agent2, Agent1), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',110).
then(if(at(acquaintanceOf(Agent1,Agent2),Time)),
     at(acquaintanceOf(Agent2,Agent1),Time)).

 /*  reactive_rule([ holds(acquaintanceOf(Agent1,Agent2),
   		      Time)
   	      ],
   	      [ holds(acquaintanceOf(Agent2,Agent1),
   		      Time)
   	      ]).
 */

% event Introduce(agent,agent)
 %  event(introduce(agent,agent)).
 %  event(introduce(agent,agent)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',113).
actions([introduce/2]).
mpred_prop(introduce(agent,agent),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',116).
% [agent1,agent2,time]
% Initiates(Introduce(agent1,agent2),
%           AcquaintanceOf(agent1,agent2),
%           time).

 /*  axiom(initiates(introduce(Agent1, Agent2), acquaintanceOf(Agent1, Agent2), Time),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',116).

 /*  initiates(introduce(A,Introduce),
   	  acquaintanceOf(A,Introduce),
   	  Initiates).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',116).
initiates(introduce(A,Introduce),
	  acquaintanceOf(A,Introduce)).

 /*  initiated(happens(introduce(A,Introduce),
   		  Time_From,
   		  Time_Until),
   	  acquaintanceOf(A,Introduce),
   	  []).
 */


% [agent1,agent2,time]
% Initiates(Introduce(agent1,agent2),
%           AcquaintanceOf(agent2,agent1),
%           time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',122).

 /*  axiom(initiates(introduce(Agent1, Agent2), acquaintanceOf(Agent2, Agent1), Time),
       []).
 */

 /*  initiates(introduce(Acquaintanceof,Introduce),
   	  acquaintanceOf(Introduce,Acquaintanceof),
   	  Initiates).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',122).
initiates(introduce(Acquaintanceof,Introduce),
	  acquaintanceOf(Introduce,Acquaintanceof)).

 /*  initiated(happens(introduce(Acquaintanceof,Introduce),
   		  Time_From,
   		  Time_Until),
   	  acquaintanceOf(Introduce,Acquaintanceof),
   	  []).
 */

% event IntroduceMutual(agent,agent,agent)
 %  event(introduceMutual(agent,agent,agent)).
 %  event(introduceMutual(agent,agent,agent)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',125).
actions([introduceMutual/3]).
mpred_prop(introduceMutual(agent,agent,agent),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',128).
% [agent1,agent2,agent3,time]
% Initiates(IntroduceMutual(agent1,agent2,agent3),
%           AcquaintanceOf(agent2,agent3),
%           time).

 /*  axiom(initiates(introduceMutual(Agent1, Agent2, Agent3), acquaintanceOf(Agent2, Agent3), Time),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',128).

 /*  initiates(introduceMutual(IntroducemutualP_Num3_V,
   			  A,
   			  Introducemutual),
   	  acquaintanceOf(A,Introducemutual),
   	  Initiates).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',128).
initiates(introduceMutual(IntroducemutualP_Num3_V,
			  A,
			  Introducemutual),
	  acquaintanceOf(A,Introducemutual)).

 /*  initiated(happens(introduceMutual(IntroducemutualP_Num3_V,
   				  A,
   				  Introducemutual),
   		  Time_From,
   		  Time_Until),
   	  acquaintanceOf(A,Introducemutual),
   	  []).
 */


% [agent1,agent2,agent3,time]
% Initiates(IntroduceMutual(agent1,agent2,agent3),
%           AcquaintanceOf(agent3,agent2),
%           time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',134).

 /*  axiom(initiates(introduceMutual(Agent1, Agent2, Agent3), acquaintanceOf(Agent3, Agent2), Time),
       []).
 */

 /*  initiates(introduceMutual(IntroducemutualP_Num3_V,
   			  Acquaintanceof,
   			  Introducemutual),
   	  acquaintanceOf(Introducemutual,Acquaintanceof),
   	  Initiates).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',134).
initiates(introduceMutual(IntroducemutualP_Num3_V,
			  Acquaintanceof,
			  Introducemutual),
	  acquaintanceOf(Introducemutual,Acquaintanceof)).

 /*  initiated(happens(introduceMutual(IntroducemutualP_Num3_V,
   				  Acquaintanceof,
   				  Introducemutual),
   		  Time_From,
   		  Time_Until),
   	  acquaintanceOf(Introducemutual,Acquaintanceof),
   	  []).
 */


% [agent1,agent2,agent3,time]
% Happens(IntroduceMutual(agent1,agent2,agent3),time) ->
% HoldsAt(AcquaintanceOf(agent1,agent2),time) &
% HoldsAt(AcquaintanceOf(agent1,agent3),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',139).

 /*  (   happens(introduceMutual(Agent1, Agent2, Agent3),
               Time)
   ->  holds_at(acquaintanceOf(Agent1, Agent2), Time),
       holds_at(acquaintanceOf(Agent1, Agent3), Time)
   ).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',139).
then(if(happens(introduceMutual(Agent1, Agent2, Agent3), Time)),  (at(acquaintanceOf(Agent1, Agent2), Time), at(acquaintanceOf(Agent1, Agent3), Time))).

 /*  reactive_rule([ happens(introduceMutual(Agent1,
   					Agent2,
   					Agent3),
   			Time)
   	      ],
   	      [ holds(acquaintanceOf(Agent1,Agent2),
   		      Time),
   		holds(acquaintanceOf(Agent1,Agent3),
   		      Time)
   	      ]).
 */


%; End of file.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',142).
% translate: ending  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e.lps 
