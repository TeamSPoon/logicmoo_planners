:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Ontology.e',105).
% translate: unskipped  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e.lps 
:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(lps).
% translate: begining  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e.lps 
% Thu, 08 Oct 2020 21:36:30 GMT File: <stream>(0x55894c1dcc00)%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; OTSpace: object-scale topological space
%;
%; The OTSpace representation deals with topological space at
%; the scale of objects such as agents (humans and animals)
%; and physical objects.
%;
%; PartOf
%; physobj is a part of object.

% predicate PartOf(physobj,object)
% predicate(
%    partOf(physobj,object)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',20).
predicates([partOf/2]).
% mpred_prop(
%    partOf(physobj,object), 
%    predicate).
mpred_prop(partOf(physobj,object),predicate).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',23).
%; A state constraint says that if a physical object
%; is part of an object, the location of the
%; physical object is the same as the location of the object:
% [physobj,object,location,time]
% PartOf(physobj,object) &
% HoldsAt(At(object,location),time) ->
% HoldsAt(At(physobj,location),time).
% '->'(
%    ','(
%       partOf(Physobj,Object), 
%       at(Object,Location)), 
%    at(Physobj,Location)).
if partOf(Physobj, Object), loc_at(Object, Location)then loc_at(Physobj, Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',26).

 /*  reactive_rule([ partOf(Physobj,Object),
   		loc_at(Object,Location)
   	      ],
   	      [loc_at(Physobj,Location)]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       at(Object,Location), 
%       not(
%          at(Physobj,Location))), 
%    not(
%       partOf(Physobj,Object))).
if loc_at(Object, Location), not loc_at(Physobj, Location)then not partOf(Physobj, Object).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',26).

 /*  reactive_rule([ loc_at(Object,Location),
   		not(loc_at(Physobj,Location))
   	      ],
   	      [not(partOf(Physobj,Object))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       partOf(Physobj,Object), 
%       not(
%          at(Physobj,Location))), 
%    not(
%       at(Object,Location))).
if partOf(Physobj, Object), not loc_at(Physobj, Location)then not loc_at(Object, Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',26).

 /*  reactive_rule([ partOf(Physobj,Object),
   		not(loc_at(Physobj,Location))
   	      ],
   	      [not(loc_at(Object,Location))]).
 */
 %  "% =================================".


%; rolling a snowball bigger
%; agent rolls stuff1 along stuff2.

% event RollAlong(agent,stuff,stuff)
% event(
%    rollAlong(agent,stuff,stuff)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',33).
actions([rollAlong/3]).
% mpred_prop(
%    rollAlong(agent,stuff,stuff), 
%    event).
mpred_prop(rollAlong(agent,stuff,stuff),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',33).
%; The diameter of ball is diameter.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',36).
% fluent Diameter(ball,diameter)
% fluent(
%    diameter(ball,diameter)).
fluents([diameter/2]).
% mpred_prop(
%    diameter(ball,diameter), 
%    fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',36).
mpred_prop(diameter(ball,diameter),fluent).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',38).
%; A state constraint says that a ball has a unique diameter:
% [ball,diameter1,diameter2,time]
% HoldsAt(Diameter(ball,diameter1),time) &
% HoldsAt(Diameter(ball,diameter2),time) ->
% diameter1=diameter2.
% '->'(
%    ','(
%       diameter(Ball,Diameter2), 
%       not(
%          equals(Diameter1,Diameter2))), 
%    not(
%       diameter(Ball,Diameter1))).
if diameter(Ball, Diameter2), not equals(Diameter1, Diameter2)then not diameter(Ball, Diameter1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',40).

 /*  reactive_rule([ diameter(Ball,Diameter2),
   		not(equals(Diameter1,Diameter2))
   	      ],
   	      [not(diameter(Ball,Diameter1))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       diameter(Ball,Diameter1), 
%       not(
%          equals(Diameter2,Diameter1))), 
%    not(
%       diameter(Ball,Diameter2))).
if diameter(Ball, Diameter1), not equals(Diameter2, Diameter1)then not diameter(Ball, Diameter2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',40).

 /*  reactive_rule([ diameter(Ball,Diameter1),
   		not(equals(Diameter2,Diameter1))
   	      ],
   	      [not(diameter(Ball,Diameter2))]).
 */
 %  "% =================================".


%; Effect axiom state that if an agent rolls some snow along
%; some other snow, the diameter of the first snow will increase:
% [agent,snow1,snow2,diameter1,diameter2,time]
% HoldsAt(Diameter(snow1,diameter1),time) &
% diameter2 = diameter1+1 ->
% Initiates(RollAlong(agent,snow1,snow2),
%           Diameter(snow1,diameter2),
%           time).
% '->'(
%    ','(
%       diameter(Snow1,Diameter1), 
%       '+Pred'(Diameter1,1,Diameter2)), 
%    initiates(
%       rollAlong(Agent,Snow1,Snow2), 
%       diameter(Snow1,Diameter2), 
%       Time)).
if diameter(Snow1, Diameter1), '+Pred'(Diameter1, 1, Diameter2)then initiates(rollAlong(Agent, Snow1, Snow2), diameter(Snow1, Diameter2)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',46).

 /*  reactive_rule([ diameter(Snow1,Diameter1),
   		'+Pred'(Diameter1,1,Diameter2)
   	      ],
   	      [ initiates(rollAlong(Agent,
   				    Snow1,
   				    Snow2),
   			  at(diameter(Snow1,Diameter2),
   			     Time),
   			  Initiates)
   	      ]).
 */
 %  "% =================================".


% [agent,snow1,snow2,diameter1,time]
% HoldsAt(Diameter(snow1,diameter1),time) ->
% Terminates(RollAlong(agent,snow1,snow2),
%            Diameter(snow1,diameter1),
%            time).
% '->'(
%    diameter(Snow1,Diameter1), 
%    terminates(
%       rollAlong(Agent,Snow1,Snow2), 
%       diameter(Snow1,Diameter1), 
%       Time)).
if diameter(Snow1, Diameter1)then terminates(rollAlong(Agent, Snow1, Snow2), diameter(Snow1, Diameter1)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',54).

 /*  reactive_rule([diameter(Snow1,Diameter1)],
   	      [ terminates(rollAlong(Agent,
   				     Snow1,
   				     Snow2),
   			   at(diameter(Snow1,Diameter1),
   			      Time),
   			   Terminates)
   	      ]).
 */
 %  "% =================================".


%; A precondition axiom states that
%; for an agent to roll some snow along some other snow,
%; there must be a location such that
%; the agent is at the location,
%; the first snow is at the location, and
%; the second snow is at the location:
%;[agent,snow1,snow2,time]
%;Happens(RollAlong(agent,snow1,snow2),time) ->
%;{location}
%;HoldsAt(At(agent,location),time) &
%;HoldsAt(At(snow1,location),time) &
%;HoldsAt(At(snow2,location),time).
%; motion
%; object moves (in place).

% event Move(object)
% event(
%    move(object)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',74).
events([move/1]).
% mpred_prop(
%    move(object), 
%    event).
mpred_prop(move(object),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',77).
%; Holding
%; agent is holding physobj.

% fluent Holding(agent,physobj)
% fluent(
%    holding(agent,physobj)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',79).
fluents([holding/2]).
% mpred_prop(
%    holding(agent,physobj), 
%    fluent).
mpred_prop(holding(agent,physobj),fluent).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',79).
%; agent holds or picks up physobj.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',82).
% event Hold(agent,physobj)
% event(
%    hold(agent,physobj)).
actions([hold/2]).
% mpred_prop(
%    hold(agent,physobj), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',82).
mpred_prop(hold(agent,physobj),event).


%; agent picks up some stuff1 from stuff2.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',84).
% event HoldSome(agent,stuff,stuff)
% event(
%    holdSome(agent,stuff,stuff)).
actions([holdSome/3]).
% mpred_prop(
%    holdSome(agent,stuff,stuff), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',84).
mpred_prop(holdSome(agent,stuff,stuff),event).


%; agent releases or lets go of physobj.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',86).
% event LetGoOf(agent,physobj)
% event(
%    letGoOf(agent,physobj)).
actions([letGoOf/2]).
% mpred_prop(
%    letGoOf(agent,physobj), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',86).
mpred_prop(letGoOf(agent,physobj),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',88).
%; An effect axiom states that if an agent holds
%; a physical object, the agent will be holding the
%; physical object:
% [agent,physobj,time]
% Initiates(Hold(agent,physobj),Holding(agent,physobj),time).
% initiates(
%    hold(Agent,Physobj), 
%    holding(Agent,Physobj), 
%    Time).
hold(Agent, Physobj)initiates holding(Agent, Physobj).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',91).

 /*  initiated(happens(hold(Agent,Physobj),
   		  Time_From,
   		  Time_Until),
   	  holding(Agent,Physobj),
   	  []).
 */
 %  "% =================================".


%; A precondition axiom states that
%; for an agent to hold a physical object,
%; there must be a location such that
%; the agent is at the location and
%; the physical object is at the location:
%;[agent,physobj,time]
%;Happens(Hold(agent,physobj),time) ->
%;{location}
%;  HoldsAt(At(agent,location),time) &
%;  HoldsAt(At(physobj,location),time).
%; An effect axiom states that if an agent
%; lets go of a physical object, the agent is no longer holding
%; the physical object:
% [agent,physobj,time]
% Terminates(LetGoOf(agent,physobj),Holding(agent,physobj),time).
% terminates(
%    letGoOf(Agent,Physobj), 
%    holding(Agent,Physobj), 
%    Time).
letGoOf(Agent, Physobj)terminates holding(Agent, Physobj).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',108).

 /*  terminated(happens(letGoOf(Agent,Physobj),
   		   Time_From,
   		   Time_Until),
   	   holding(Agent,Physobj),
   	   []).
 */
 %  "% =================================".


%; A precondition axiom states that
%; for an agent to let go of a physical object,
%; the agent must be holding the physical object:
% [agent,physobj,time]
% Happens(LetGoOf(agent,physobj),time) ->
% HoldsAt(Holding(agent,physobj),time).
% '->'(
%    metreqs(
%       letGoOf(Agent,Physobj)), 
%    requires(
%       letGoOf(Agent,Physobj), 
%       When_Time)).
if letGoOf(Agent, Physobj)then requires(letGoOf(Agent, Physobj), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',114).

 /*  reactive_rule([ happens(letGoOf(Agent,Physobj),
   			Time_From,
   			Time_Until)
   	      ],
   	      [ requires(letGoOf(Agent,Physobj),
   			 When_Time)
   	      ]).
 */
 %  "% =================================".
% '->'(
%    holding(Agent,Physobj), 
%    metreqs(
%       letGoOf(Agent,Physobj))).
letGoOf(Agent, Physobj)if holding(Agent, Physobj).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',114).

 /*  l_events(happens(letGoOf(Agent,Physobj),
   		 Time_From6,
   		 Time_From6),
   	 [holds(holding(Agent,Physobj),Time_From6)]).
 */
 %  "% =================================".
% '->'(
%    not(
%       holding(Agent,Physobj)), 
%    not(
%       letGoOf(Agent,Physobj))).
if not holding(Agent, Physobj)then not letGoOf(Agent, Physobj).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',114).

 /*  reactive_rule([ holds(not(holding(Agent,Physobj)),
   		      Time_At)
   	      ],
   	      [not(letGoOf(Agent,Physobj))]).
 */
 %  "% =================================".


%; A releases axiom states that if an agent holds
%; a physical object,
%; the physical object's location will be released
%; from inertia:
% [agent,physobj,location,time]
% Releases(Hold(agent,physobj),At(physobj,location),time).
% releases(
%    hold(Agent,Physobj), 
%    at(Physobj,Location), 
%    Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',122).
releases(hold(Agent,Physobj),
	 loc_at(Physobj,Location),
	 Time).


%; A state constraint says that if an agent is holding
%; a physical object and the agent is at a location,
%; the physical object is also at the location:
% [agent,physobj,location,time]
% HoldsAt(Holding(agent,physobj),time) &
% HoldsAt(At(agent,location),time) ->
% HoldsAt(At(physobj,location),time).
% '->'(
%    ','(
%       holding(Agent,Physobj), 
%       at(Agent,Location)), 
%    at(Physobj,Location)).
if holding(Agent, Physobj), loc_at(Agent, Location)then loc_at(Physobj, Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',128).

 /*  reactive_rule([ holds(holding(Agent,Physobj),Time_At),
   		loc_at(Agent,Location)
   	      ],
   	      [loc_at(Physobj,Location)]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       at(Agent,Location), 
%       not(
%          at(Physobj,Location))), 
%    not(
%       holding(Agent,Physobj))).
not holding(Agent, Physobj)if loc_at(Agent, Location), not loc_at(Physobj, Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',128).

 /*  l_int(holds(not(holding(Agent,Physobj)),Time_At5),
         [ loc_at(Agent,Location),
   	not(loc_at(Physobj,Location))
         ]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       holding(Agent,Physobj), 
%       not(
%          at(Physobj,Location))), 
%    not(
%       at(Agent,Location))).
if holding(Agent, Physobj), not loc_at(Physobj, Location)then not loc_at(Agent, Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',128).

 /*  reactive_rule([ holds(holding(Agent,Physobj),
   		      Time_At6),
   		not(loc_at(Physobj,Location))
   	      ],
   	      [not(loc_at(Agent,Location))]).
 */
 %  "% =================================".


%; A releases axiom states that if an agent holds
%; a physical object,
%; the locations of the parts of the physical object
%; will be released from inertia:
% [agent,physobj1,physobj2,location,time]
% PartOf(physobj1,physobj2) ->
% Releases(Hold(agent,physobj2),At(physobj1,location),time).
% '->'(
%    partOf(Physobj1,Physobj2), 
%    releases(
%       hold(Agent,Physobj2), 
%       at(Physobj1,Location), 
%       Time)).
if partOf(Physobj1, Physobj2)then releases(hold(Agent, Physobj2), loc_at(Physobj1, Location), Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',137).

 /*  reactive_rule([partOf(Physobj1,Physobj2)],
   	      [ releases(hold(Agent,Physobj2),
   			 loc_at(Physobj1,Location),
   			 Time)
   	      ]).
 */
 %  "% =================================".


%; Further, if an agent holds a physical object,
%; the locations of the physical objects of which
%; the physical object is a part
%; will be released from inertia:
% [agent,physobj1,physobj2,location,time]
% PartOf(physobj1,physobj2) ->
% Releases(Hold(agent,physobj1),At(physobj2,location),time).
% '->'(
%    partOf(Physobj1,Physobj2), 
%    releases(
%       hold(Agent,Physobj1), 
%       at(Physobj2,Location), 
%       Time)).
if partOf(Physobj1, Physobj2)then releases(hold(Agent, Physobj1), loc_at(Physobj2, Location), Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',145).

 /*  reactive_rule([partOf(Physobj1,Physobj2)],
   	      [ releases(hold(Agent,Physobj1),
   			 loc_at(Physobj2,Location),
   			 Time)
   	      ]).
 */
 %  "% =================================".


%;[agent,physobj,location1,location2,time]
%;(!{object} PartOf(physobj,object)) &
%;HoldsAt(At(agent,location1),time) &
%;location1 != location2 ->
%;Terminates(LetGoOf(agent,physobj),At(physobj,location2),time).
% [agent,physobj,location,time]
% (!{object} PartOf(physobj,object)) &
% HoldsAt(At(agent,location),time) ->
% Initiates(LetGoOf(agent,physobj),At(physobj,location),time).
% '->'(
%    ','(
%       not(
%          partOf(Physobj,Object)), 
%       at(Agent,Location)), 
%    initiates(
%       letGoOf(Agent,Physobj), 
%       at(Physobj,Location), 
%       Time)).
if not partOf(Physobj, Object), loc_at(Agent, Location)then initiates(letGoOf(Agent, Physobj), loc_at(Physobj, Location)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',155).

 /*  reactive_rule([ not(partOf(Physobj,Object)),
   		loc_at(Agent,Location)
   	      ],
   	      [ initiates(letGoOf(Agent,Physobj),
   			  at(loc_at(Physobj,Location),
   			     Time),
   			  Initiates)
   	      ]).
 */
 %  "% =================================".


%;[agent,physobj1,physobj2,location1,location2,time]
%;PartOf(physobj1,physobj2) &
%;(!{object} PartOf(physobj2,object)) &
%;HoldsAt(At(agent,location1),time) &
%;location1 != location2 ->
%;Terminates(LetGoOf(agent,physobj1),At(physobj2,location2),time).
% [agent,physobj1,physobj2,location,time]
% PartOf(physobj1,physobj2) &
% (!{object} PartOf(physobj2,object)) &
% HoldsAt(At(agent,location),time) ->
% Initiates(LetGoOf(agent,physobj1),At(physobj2,location),time).
% '->'(
%    ','(
%       partOf(Physobj1,Physobj2), 
%       ','(
%          not(
%             partOf(Physobj2,Object)), 
%          at(Agent,Location))), 
%    initiates(
%       letGoOf(Agent,Physobj1), 
%       at(Physobj2,Location), 
%       Time)).
if partOf(Physobj1, Physobj2), not partOf(Physobj2, Object), loc_at(Agent, Location)then initiates(letGoOf(Agent, Physobj1), loc_at(Physobj2, Location)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',167).

 /*  reactive_rule([ partOf(Physobj1,Physobj2),
   		not(partOf(Physobj2,Object)),
   		loc_at(Agent,Location)
   	      ],
   	      [ initiates(letGoOf(Agent,Physobj1),
   			  at(loc_at(Physobj2,Location),
   			     Time),
   			  Initiates)
   	      ]).
 */
 %  "% =================================".


%; An effect axiom states that if an agent is at a location
%; and lets go of a physical object, the physical object
%; will be at the location:
% [agent,physobj,location,time]
% HoldsAt(At(agent,location),time) ->
% Initiates(LetGoOf(agent,physobj),At(physobj,location),time).
% '->'(
%    at(Agent,Location), 
%    initiates(
%       letGoOf(Agent,Physobj), 
%       at(Physobj,Location), 
%       Time)).
if loc_at(Agent, Location)then initiates(letGoOf(Agent, Physobj), loc_at(Physobj, Location)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',176).

 /*  reactive_rule([loc_at(Agent,Location)],
   	      [ initiates(letGoOf(Agent,Physobj),
   			  at(loc_at(Physobj,Location),
   			     Time),
   			  Initiates)
   	      ]).
 */
 %  "% =================================".


%; An effect axiom states that if an agent picks up
%; some stuff out of some other stuff, the agent will
%; be holding the first stuff:
% [agent,stuff1,stuff2,time]
% Initiates(HoldSome(agent,stuff1,stuff2),
%           Holding(agent,stuff1),
%           time).
% initiates(
%    holdSome(Agent,Stuff1,Stuff2), 
%    holding(Agent,Stuff1), 
%    Time).
holdSome(Agent, Stuff1, Stuff2)initiates holding(Agent, Stuff1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',183).

 /*  initiated(happens(holdSome(Agent,Stuff1,Stuff2),
   		  Time_From,
   		  Time_Until),
   	  holding(Agent,Stuff1),
   	  []).
 */
 %  "% =================================".


%; A precondition axiom states that
%; for an agent to pick up some stuff out of some other stuff,
%; the first stuff must be a part of the second stuff and
%; there must be a location such that the agent is at the location,
%; the first stuff is at the location, and the second stuff is
%; at the location:
% [agent,stuff1,stuff2,time]
% Happens(HoldSome(agent,stuff1,stuff2),time) ->
% PartOf(stuff1,stuff2) &
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',194).
% {location}% 
%   HoldsAt(At(agent,location),time) &
%   HoldsAt(At(stuff1,location),time) &
%   HoldsAt(At(stuff2,location),time).
% '->'(
%    ','(
%       ';'(
%          not(
%             partOf(Stuff1,Stuff2)), 
%          ';'(
%             not(
%                at(Agent,Exists_Location)), 
%             ';'(
%                not(
%                   at(Stuff1,Exists_Location)), 
%                not(
%                   at(Stuff2,Exists_Location))))), 
%       some(
%          Exists_Location, 
%          '$kolem_Fn_697'(Agent,Stuff1,Stuff2,Time))), 
%    not(
%       holdSome(Agent,Stuff1,Stuff2))).
if (not partOf(Stuff1, Stuff2);not loc_at(Agent, Exists_Location);not loc_at(Stuff1, Exists_Location);not loc_at(Stuff2, Exists_Location)), some(Exists_Location, '$kolem_Fn_697'(Agent, Stuff1, Stuff2, Time))then not holdSome(Agent, Stuff1, Stuff2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',197).

 /*   reactive_rule([  (not(partOf(Stuff1, Stuff2));not(loc_at(Agent, Exists_Location));not(loc_at(Stuff1, Exists_Location));not(loc_at(Stuff2, Exists_Location))),
                      some(Exists_Location,
                           '$kolem_Fn_697'(Agent,
                                           Stuff1,
                                           Stuff2,
                                           Time))
                    ],
                    [not(holdSome(Agent, Stuff1, Stuff2))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       holdSome(Agent,Stuff1,Stuff2), 
%       some(
%          Exists_Location, 
%          '$kolem_Fn_697'(Agent,Stuff1,Stuff2,Time))), 
%    partOf(Stuff1,Stuff2)).
if holdSome(Agent, Stuff1, Stuff2), some(Exists_Location, '$kolem_Fn_697'(Agent, Stuff1, Stuff2, Time))then partOf(Stuff1, Stuff2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',197).

 /*  reactive_rule([ happens(holdSome(Agent,Stuff1,Stuff2),
   			Time_From,
   			Time_Until),
   		some(Exists_Location,
   		     '$kolem_Fn_697'(Agent,
   				     Stuff1,
   				     Stuff2,
   				     Time))
   	      ],
   	      [partOf(Stuff1,Stuff2)]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       holdSome(Agent,Stuff1,Stuff2), 
%       some(
%          Exists_Location, 
%          '$kolem_Fn_697'(Agent,Stuff1,Stuff2,Time))), 
%    at(Agent,Exists_Location)).
if holdSome(Agent, Stuff1, Stuff2), some(Exists_Location, '$kolem_Fn_697'(Agent, Stuff1, Stuff2, Time))then loc_at(Agent, Exists_Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',197).

 /*  reactive_rule([ happens(holdSome(Agent,Stuff1,Stuff2),
   			Time_From8,
   			Time_Until9),
   		some(Exists_Location,
   		     '$kolem_Fn_697'(Agent,
   				     Stuff1,
   				     Stuff2,
   				     Time))
   	      ],
   	      [loc_at(Agent,Exists_Location)]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       holdSome(Agent,Stuff1,Stuff2), 
%       some(
%          Exists_Location, 
%          '$kolem_Fn_697'(Agent,Stuff1,Stuff2,Time))), 
%    at(Stuff1,Exists_Location)).
if holdSome(Agent, Stuff1, Stuff2), some(Exists_Location, '$kolem_Fn_697'(Agent, Stuff1, Stuff2, Time))then loc_at(Stuff1, Exists_Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',197).

 /*  reactive_rule([ happens(holdSome(Agent,Stuff1,Stuff2),
   			Time_From10,
   			Time_Until11),
   		some(Exists_Location,
   		     '$kolem_Fn_697'(Agent,
   				     Stuff1,
   				     Stuff2,
   				     Time))
   	      ],
   	      [loc_at(Stuff1,Exists_Location)]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       holdSome(Agent,Stuff1,Stuff2), 
%       some(
%          Exists_Location, 
%          '$kolem_Fn_697'(Agent,Stuff1,Stuff2,Time))), 
%    at(Stuff2,Exists_Location)).
if holdSome(Agent, Stuff1, Stuff2), some(Exists_Location, '$kolem_Fn_697'(Agent, Stuff1, Stuff2, Time))then loc_at(Stuff2, Exists_Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',197).

 /*  reactive_rule([ happens(holdSome(Agent,Stuff1,Stuff2),
   			Time_From12,
   			Time_Until13),
   		some(Exists_Location,
   		     '$kolem_Fn_697'(Agent,
   				     Stuff1,
   				     Stuff2,
   				     Time))
   	      ],
   	      [loc_at(Stuff2,Exists_Location)]).
 */
 %  "% =================================".


%; A releases axiom states that if an agent picks up some
%; stuff out of some other stuff,
%; the first stuff's location will be released
%; from inertia:
% [agent,stuff1,stuff2,location,time]
% Releases(HoldSome(agent,stuff1,stuff2),At(stuff1,location),time).
% releases(
%    holdSome(Agent,Stuff1,Stuff2), 
%    at(Stuff1,Location), 
%    Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',206).
releases(holdSome(Agent,Stuff1,Stuff2),
	 loc_at(Stuff1,Location),
	 Time).


%; Inside
%; physobj1 is inside physobj2.

% fluent Inside(physobj,physobj)
% fluent(
%    inside(physobj,physobj)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',211).
fluents([inside/2]).
% mpred_prop(
%    inside(physobj,physobj), 
%    fluent).
mpred_prop(inside(physobj,physobj),fluent).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',211).
%; agent puts physobj1 inside physobj2.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',214).
% event PutInside(agent,physobj,physobj)
% event(
%    putInside(agent,physobj,physobj)).
actions([putInside/3]).
% mpred_prop(
%    putInside(agent,physobj,physobj), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',214).
mpred_prop(putInside(agent,physobj,physobj),event).


%; agent takes physobj1 out of physobj2.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',216).
% event TakeOutOf(agent,physobj,physobj)
% event(
%    takeOutOf(agent,physobj,physobj)).
actions([takeOutOf/3]).
% mpred_prop(
%    takeOutOf(agent,physobj,physobj), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',216).
mpred_prop(takeOutOf(agent,physobj,physobj),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',218).
%; A state constraint says that a physical object cannot
%; be inside itself:
% [physobj1,physobj2,time]
% HoldsAt(Inside(physobj1,physobj2),time) ->
% physobj1!=physobj2.
% '->'(
%    equals(Physobj1,Physobj2), 
%    not(
%       inside(Physobj1,Physobj2))).
not inside(Physobj1, Physobj2)if equals(Physobj1, Physobj2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',220).

 /*  l_int(holds(not(inside(Physobj1,Physobj2)),Time_At),
         [equals(Physobj1,Physobj2)]).
 */
 %  "% =================================".


%; A state constraint says that if a physical object is
%; inside another physical object, the second physical object
%; is not inside the first physical object:
% [physobj1,physobj2,time]
% HoldsAt(Inside(physobj1,physobj2),time) ->
% !HoldsAt(Inside(physobj2,physobj1),time).
% '->'(
%    inside(Physobj1,Physobj2), 
%    not(
%       inside(Physobj2,Physobj1))).
not inside(Physobj2, Physobj1)if inside(Physobj1, Physobj2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',227).

 /*  l_int(holds(not(inside(Physobj2,Physobj1)),Time_At),
         [holds(inside(Physobj1,Physobj2),Time_At)]).
 */
 %  "% =================================".
% '->'(
%    not(
%       not(
%          inside(Physobj2,Physobj1))), 
%    not(
%       inside(Physobj1,Physobj2))).
not inside(Physobj1, Physobj2)if not not inside(Physobj2, Physobj1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',227).

 /*  l_int(holds(not(inside(Physobj1,Physobj2)),Time_At4),
         [ holds(not([ holds(not(inside(Physobj2,Physobj1)),
   			  Time_At4)
   		  ]),
   	      Time_At4)
         ]).
 */
 %  "% =================================".


%; An effect axiom states that if an agent puts a physical
%; object inside another physical object, the first
%; physical object will be inside the second physical object:
% [agent,physobj1,physobj2,time]
% Initiates(PutInside(agent,physobj1,physobj2),
%           Inside(physobj1,physobj2),time).
% initiates(
%    putInside(Agent,Physobj1,Physobj2), 
%    inside(Physobj1,Physobj2), 
%    Time).
putInside(Agent, Physobj1, Physobj2)initiates inside(Physobj1, Physobj2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',234).

 /*  initiated(happens(putInside(Agent,Physobj1,Physobj2),
   		  Time_From,
   		  Time_Until),
   	  inside(Physobj1,Physobj2),
   	  []).
 */
 %  "% =================================".


%; An effect axiom states that if an agent puts a physical
%; object inside another physical object, the agent will
%; no longer be holding the first physical object:
% [agent,physobj1,physobj2,time]
% Terminates(PutInside(agent,physobj1,physobj2),
%            Holding(agent,physobj1),time).
% terminates(
%    putInside(Agent,Physobj1,Physobj2), 
%    holding(Agent,Physobj1), 
%    Time).
putInside(Agent, Physobj1, Physobj2)terminates holding(Agent, Physobj1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',241).

 /*  terminated(happens(putInside(Agent,Physobj1,Physobj2),
   		   Time_From,
   		   Time_Until),
   	   holding(Agent,Physobj1),
   	   []).
 */
 %  "% =================================".


%; A precondition axiom states that
%; for an agent to put a physical object inside another
%; physical object,
%; the agent must be holding the first physical object
%; and there must be a location such that
%; the agent is at the location and
%; the second physical object is at the location:
%;[agent,physobj1,physobj2,time]
%;Happens(PutInside(agent,physobj1,physobj2),time) ->
%;HoldsAt(Holding(agent,physobj1),time) &
%;{location}
%; HoldsAt(At(agent,location),time) &
%; HoldsAt(At(physobj2,location),time).
%; An effect axiom states that
%; if an agent takes a physical object out of another
%; physical object, the first physical object
%; will no longer be inside the second physical object:
% [agent,physobj1,physobj2,time]
% Terminates(TakeOutOf(agent,physobj1,physobj2),
%            Inside(physobj1,physobj2),time).
% terminates(
%    takeOutOf(Agent,Physobj1,Physobj2), 
%    inside(Physobj1,Physobj2), 
%    Time).
takeOutOf(Agent, Physobj1, Physobj2)terminates inside(Physobj1, Physobj2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',263).

 /*  terminated(happens(takeOutOf(Agent,Physobj1,Physobj2),
   		   Time_From,
   		   Time_Until),
   	   inside(Physobj1,Physobj2),
   	   []).
 */
 %  "% =================================".


%; A precondition axiom states that
%; for an agent to take a physical object out of another
%; physical object,
%; the first physical object must be inside the second physical object
%; and there must be a location such that
%; the agent is at the location,
%; the first physical object is at the location, and
%; the second physical object is at the location:
% [agent,physobj1,physobj2,time]
% Happens(TakeOutOf(agent,physobj1,physobj2),time) ->
% HoldsAt(Inside(physobj1,physobj2),time) &
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',275).
% {location}% 
%  HoldsAt(At(agent,location),time) &
%  HoldsAt(At(physobj1,location),time) &
%  HoldsAt(At(physobj2,location),time).
% '->'(
%    ','(
%       ';'(
%          not(
%             inside(Physobj1,Physobj2)), 
%          ';'(
%             not(
%                at(Agent,Exists_Location)), 
%             ';'(
%                not(
%                   at(Physobj1,Exists_Location)), 
%                not(
%                   at(Physobj2,Exists_Location))))), 
%       some(
%          Exists_Location, 
%          '$kolem_Fn_698'(Agent,Physobj1,Physobj2,Time))), 
%    not(
%       takeOutOf(Agent,Physobj1,Physobj2))).
if (not inside(Physobj1, Physobj2);not loc_at(Agent, Exists_Location);not loc_at(Physobj1, Exists_Location);not loc_at(Physobj2, Exists_Location)), some(Exists_Location, '$kolem_Fn_698'(Agent, Physobj1, Physobj2, Time))then not takeOutOf(Agent, Physobj1, Physobj2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',278).

 /*   reactive_rule([  (not(inside(Physobj1, Physobj2));not(loc_at(Agent, Exists_Location));not(loc_at(Physobj1, Exists_Location));not(loc_at(Physobj2, Exists_Location))),
                      some(Exists_Location,
                           '$kolem_Fn_698'(Agent,
                                           Physobj1,
                                           Physobj2,
                                           Time))
                    ],
                    [not(takeOutOf(Agent, Physobj1, Physobj2))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       takeOutOf(Agent,Physobj1,Physobj2), 
%       some(
%          Exists_Location, 
%          '$kolem_Fn_698'(Agent,Physobj1,Physobj2,Time))), 
%    inside(Physobj1,Physobj2)).
inside(Physobj1, Physobj2)if takeOutOf(Agent, Physobj1, Physobj2), some(Exists_Location, '$kolem_Fn_698'(Agent, Physobj1, Physobj2, Time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',278).

 /*  l_int(holds(inside(Physobj1,Physobj2),Time_At),
         [ happens(takeOutOf(Agent,Physobj1,Physobj2),
   		Time_At,
   		Time_At),
   	some(Exists_Location,
   	     '$kolem_Fn_698'(Agent,
   			     Physobj1,
   			     Physobj2,
   			     Time))
         ]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       takeOutOf(Agent,Physobj1,Physobj2), 
%       some(
%          Exists_Location, 
%          '$kolem_Fn_698'(Agent,Physobj1,Physobj2,Time))), 
%    at(Agent,Exists_Location)).
if takeOutOf(Agent, Physobj1, Physobj2), some(Exists_Location, '$kolem_Fn_698'(Agent, Physobj1, Physobj2, Time))then loc_at(Agent, Exists_Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',278).

 /*  reactive_rule([ happens(takeOutOf(Agent,
   				  Physobj1,
   				  Physobj2),
   			Time_From,
   			Time_Until),
   		some(Exists_Location,
   		     '$kolem_Fn_698'(Agent,
   				     Physobj1,
   				     Physobj2,
   				     Time))
   	      ],
   	      [loc_at(Agent,Exists_Location)]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       takeOutOf(Agent,Physobj1,Physobj2), 
%       some(
%          Exists_Location, 
%          '$kolem_Fn_698'(Agent,Physobj1,Physobj2,Time))), 
%    at(Physobj1,Exists_Location)).
if takeOutOf(Agent, Physobj1, Physobj2), some(Exists_Location, '$kolem_Fn_698'(Agent, Physobj1, Physobj2, Time))then loc_at(Physobj1, Exists_Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',278).

 /*  reactive_rule([ happens(takeOutOf(Agent,
   				  Physobj1,
   				  Physobj2),
   			Time_From9,
   			Time_Until10),
   		some(Exists_Location,
   		     '$kolem_Fn_698'(Agent,
   				     Physobj1,
   				     Physobj2,
   				     Time))
   	      ],
   	      [loc_at(Physobj1,Exists_Location)]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       takeOutOf(Agent,Physobj1,Physobj2), 
%       some(
%          Exists_Location, 
%          '$kolem_Fn_698'(Agent,Physobj1,Physobj2,Time))), 
%    at(Physobj2,Exists_Location)).
if takeOutOf(Agent, Physobj1, Physobj2), some(Exists_Location, '$kolem_Fn_698'(Agent, Physobj1, Physobj2, Time))then loc_at(Physobj2, Exists_Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',278).

 /*  reactive_rule([ happens(takeOutOf(Agent,
   				  Physobj1,
   				  Physobj2),
   			Time_From11,
   			Time_Until12),
   		some(Exists_Location,
   		     '$kolem_Fn_698'(Agent,
   				     Physobj1,
   				     Physobj2,
   				     Time))
   	      ],
   	      [loc_at(Physobj2,Exists_Location)]).
 */
 %  "% =================================".


%; A releases axiom states that if an agent puts a physical
%; object inside another physical object,
%; the first physical object's location will be released
%; from inertia:
% [agent,physobj1,physobj2,location,time]
% Releases(PutInside(agent,physobj1,physobj2),
%          At(physobj1,location),time).
% releases(
%    putInside(Agent,Physobj1,Physobj2), 
%    at(Physobj1,Location), 
%    Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',287).
releases(putInside(Agent,Physobj1,Physobj2),
	 loc_at(Physobj1,Location),
	 Time).


%; A state constraint says that if a physical object is inside
%; another physical object and the second physical object is
%; at a location, the first physical object is also at the location:
% [physobj1,physobj2,location,time]
% HoldsAt(Inside(physobj1,physobj2),time) &
% HoldsAt(At(physobj2,location),time) ->
% HoldsAt(At(physobj1,location),time).
% '->'(
%    ','(
%       inside(Physobj1,Physobj2), 
%       at(Physobj2,Location)), 
%    at(Physobj1,Location)).
if inside(Physobj1, Physobj2), loc_at(Physobj2, Location)then loc_at(Physobj1, Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',294).

 /*  reactive_rule([ holds(inside(Physobj1,Physobj2),
   		      Time_At),
   		loc_at(Physobj2,Location)
   	      ],
   	      [loc_at(Physobj1,Location)]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       at(Physobj2,Location), 
%       not(
%          at(Physobj1,Location))), 
%    not(
%       inside(Physobj1,Physobj2))).
not inside(Physobj1, Physobj2)if loc_at(Physobj2, Location), not loc_at(Physobj1, Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',294).

 /*  l_int(holds(not(inside(Physobj1,Physobj2)),Time_At5),
         [ loc_at(Physobj2,Location),
   	not(loc_at(Physobj1,Location))
         ]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       inside(Physobj1,Physobj2), 
%       not(
%          at(Physobj1,Location))), 
%    not(
%       at(Physobj2,Location))).
if inside(Physobj1, Physobj2), not loc_at(Physobj1, Location)then not loc_at(Physobj2, Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',294).

 /*  reactive_rule([ holds(inside(Physobj1,Physobj2),
   		      Time_At6),
   		not(loc_at(Physobj1,Location))
   	      ],
   	      [not(loc_at(Physobj2,Location))]).
 */
 %  "% =================================".


%; An effect axiom states that if an agent takes a physical
%; object out of another physical object,
%; the agent will be holding the first physical object:
% [agent,physobj1,physobj2,time]
% Initiates(TakeOutOf(agent,physobj1,physobj2),
%           Holding(agent,physobj1),
%           time).
% initiates(
%    takeOutOf(Agent,Physobj1,Physobj2), 
%    holding(Agent,Physobj1), 
%    Time).
takeOutOf(Agent, Physobj1, Physobj2)initiates holding(Agent, Physobj1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',302).

 /*  initiated(happens(takeOutOf(Agent,Physobj1,Physobj2),
   		  Time_From,
   		  Time_Until),
   	  holding(Agent,Physobj1),
   	  []).
 */
 %  "% =================================".


%; On
%; physobj1 is on physobj2.

% fluent On(physobj,physobj)
% fluent(
%    on(physobj,physobj)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',309).
fluents([on/2]).
% mpred_prop(
%    on(physobj,physobj), 
%    fluent).
mpred_prop(on(physobj,physobj),fluent).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',312).
%; agent places physobj1 on physobj2.

% event PlaceOn(agent,physobj,physobj)
% event(
%    placeOn(agent,physobj,physobj)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',312).
actions([placeOn/3]).
% mpred_prop(
%    placeOn(agent,physobj,physobj), 
%    event).
mpred_prop(placeOn(agent,physobj,physobj),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',312).
%; agent takes physobj1 off of physobj2.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',315).
% event TakeOffOf(agent,physobj,physobj)
% event(
%    takeOffOf(agent,physobj,physobj)).
actions([takeOffOf/3]).
% mpred_prop(
%    takeOffOf(agent,physobj,physobj), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',315).
mpred_prop(takeOffOf(agent,physobj,physobj),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',317).
%; A state constraint says that a physical object cannot
%; be on itself:
% [physobj1,physobj2,time]
% HoldsAt(On(physobj1,physobj2),time) ->
% physobj1!=physobj2.
% '->'(
%    equals(Physobj1,Physobj2), 
%    not(
%       on(Physobj1,Physobj2))).
not on(Physobj1, Physobj2)if equals(Physobj1, Physobj2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',319).

 /*  l_int(holds(not(on(Physobj1,Physobj2)),Time_At),
         [equals(Physobj1,Physobj2)]).
 */
 %  "% =================================".


%; A state constraint says that if a physical object is
%; on another physical object, the second physical object
%; is not on the first physical object:
% [physobj1,physobj2,time]
% HoldsAt(On(physobj1,physobj2),time) ->
% !HoldsAt(On(physobj2,physobj1),time).
% '->'(
%    on(Physobj1,Physobj2), 
%    not(
%       on(Physobj2,Physobj1))).
not on(Physobj2, Physobj1)if on(Physobj1, Physobj2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',326).

 /*  l_int(holds(not(on(Physobj2,Physobj1)),Time_At),
         [holds(on(Physobj1,Physobj2),Time_At)]).
 */
 %  "% =================================".
% '->'(
%    not(
%       not(
%          on(Physobj2,Physobj1))), 
%    not(
%       on(Physobj1,Physobj2))).
not on(Physobj1, Physobj2)if not not on(Physobj2, Physobj1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',326).

 /*  l_int(holds(not(on(Physobj1,Physobj2)),Time_At4),
         [ holds(not([ holds(not(on(Physobj2,Physobj1)),
   			  Time_At4)
   		  ]),
   	      Time_At4)
         ]).
 */
 %  "% =================================".


%; An effect axiom states that if an agent places a physical
%; object on another physical object, the first
%; physical object will be on the second physical object:
% [agent,physobj1,physobj2,time]
% Initiates(PlaceOn(agent,physobj1,physobj2),
%           On(physobj1,physobj2),time).
% initiates(
%    placeOn(Agent,Physobj1,Physobj2), 
%    on(Physobj1,Physobj2), 
%    Time).
placeOn(Agent, Physobj1, Physobj2)initiates on(Physobj1, Physobj2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',333).

 /*  initiated(happens(placeOn(Agent,Physobj1,Physobj2),
   		  Time_From,
   		  Time_Until),
   	  on(Physobj1,Physobj2),
   	  []).
 */
 %  "% =================================".


%; An effect axiom states that if an agent places a physical
%; object on another physical object, the agent will
%; no longer be holding the first physical object:
% [agent,physobj1,physobj2,time]
% Terminates(PlaceOn(agent,physobj1,physobj2),
%            Holding(agent,physobj1),time).
% terminates(
%    placeOn(Agent,Physobj1,Physobj2), 
%    holding(Agent,Physobj1), 
%    Time).
placeOn(Agent, Physobj1, Physobj2)terminates holding(Agent, Physobj1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',340).

 /*  terminated(happens(placeOn(Agent,Physobj1,Physobj2),
   		   Time_From,
   		   Time_Until),
   	   holding(Agent,Physobj1),
   	   []).
 */
 %  "% =================================".


%; A precondition axiom states that
%; for an agent to place a physical object on another
%; physical object,
%; the agent must be holding the first physical object
%; and there must be a location such that
%; the agent is at the location and
%; the second physical object is at the location:
%;[agent,physobj1,physobj2,time]
%;Happens(PlaceOn(agent,physobj1,physobj2),time) ->
%;HoldsAt(Holding(agent,physobj1),time) &
%;{location}
%; HoldsAt(At(agent,location),time) &
%; HoldsAt(At(physobj2,location),time).
%; An effect axiom states that
%; if an agent takes a physical object off of another
%; physical object, the first physical object
%; will no longer be on the second physical object:
% [agent,physobj1,physobj2,time]
% Terminates(TakeOffOf(agent,physobj1,physobj2),
%            On(physobj1,physobj2),time).
% terminates(
%    takeOffOf(Agent,Physobj1,Physobj2), 
%    on(Physobj1,Physobj2), 
%    Time).
takeOffOf(Agent, Physobj1, Physobj2)terminates on(Physobj1, Physobj2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',362).

 /*  terminated(happens(takeOffOf(Agent,Physobj1,Physobj2),
   		   Time_From,
   		   Time_Until),
   	   on(Physobj1,Physobj2),
   	   []).
 */
 %  "% =================================".


%; An effect axiom states that if an agent takes a physical
%; object off of another physical object,
%; the agent will be holding the first physical object:
% [agent,physobj1,physobj2,time]
% Initiates(TakeOffOf(agent,physobj1,physobj2),
%           Holding(agent,physobj1),time).
% initiates(
%    takeOffOf(Agent,Physobj1,Physobj2), 
%    holding(Agent,Physobj1), 
%    Time).
takeOffOf(Agent, Physobj1, Physobj2)initiates holding(Agent, Physobj1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',369).

 /*  initiated(happens(takeOffOf(Agent,Physobj1,Physobj2),
   		  Time_From,
   		  Time_Until),
   	  holding(Agent,Physobj1),
   	  []).
 */
 %  "% =================================".


%; A precondition axiom states that
%; for an agent to take a physical object off of another
%; physical object,
%; the first physical object must be on the second physical object
%; and there must be a location such that
%; the agent is at the location and
%; the first physical object is at the location:
%; the second physical object is at the location:
% [agent,physobj1,physobj2,time]
% Happens(TakeOffOf(agent,physobj1,physobj2),time) ->
% HoldsAt(On(physobj1,physobj2),time) &
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',381).
% {location}% 
%  HoldsAt(At(agent,location),time) &
%  HoldsAt(At(physobj1,location),time) &
%  HoldsAt(At(physobj2,location),time).
% '->'(
%    ','(
%       ';'(
%          not(
%             on(Physobj1,Physobj2)), 
%          ';'(
%             not(
%                at(Agent,Exists_Location)), 
%             ';'(
%                not(
%                   at(Physobj1,Exists_Location)), 
%                not(
%                   at(Physobj2,Exists_Location))))), 
%       some(
%          Exists_Location, 
%          '$kolem_Fn_699'(Agent,Physobj1,Physobj2,Time))), 
%    not(
%       takeOffOf(Agent,Physobj1,Physobj2))).
if (not on(Physobj1, Physobj2);not loc_at(Agent, Exists_Location);not loc_at(Physobj1, Exists_Location);not loc_at(Physobj2, Exists_Location)), some(Exists_Location, '$kolem_Fn_699'(Agent, Physobj1, Physobj2, Time))then not takeOffOf(Agent, Physobj1, Physobj2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',384).

 /*   reactive_rule([  (not(on(Physobj1, Physobj2));not(loc_at(Agent, Exists_Location));not(loc_at(Physobj1, Exists_Location));not(loc_at(Physobj2, Exists_Location))),
                      some(Exists_Location,
                           '$kolem_Fn_699'(Agent,
                                           Physobj1,
                                           Physobj2,
                                           Time))
                    ],
                    [not(takeOffOf(Agent, Physobj1, Physobj2))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       takeOffOf(Agent,Physobj1,Physobj2), 
%       some(
%          Exists_Location, 
%          '$kolem_Fn_699'(Agent,Physobj1,Physobj2,Time))), 
%    on(Physobj1,Physobj2)).
on(Physobj1, Physobj2)if takeOffOf(Agent, Physobj1, Physobj2), some(Exists_Location, '$kolem_Fn_699'(Agent, Physobj1, Physobj2, Time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',384).

 /*  l_int(holds(on(Physobj1,Physobj2),Time_At),
         [ happens(takeOffOf(Agent,Physobj1,Physobj2),
   		Time_At,
   		Time_At),
   	some(Exists_Location,
   	     '$kolem_Fn_699'(Agent,
   			     Physobj1,
   			     Physobj2,
   			     Time))
         ]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       takeOffOf(Agent,Physobj1,Physobj2), 
%       some(
%          Exists_Location, 
%          '$kolem_Fn_699'(Agent,Physobj1,Physobj2,Time))), 
%    at(Agent,Exists_Location)).
if takeOffOf(Agent, Physobj1, Physobj2), some(Exists_Location, '$kolem_Fn_699'(Agent, Physobj1, Physobj2, Time))then loc_at(Agent, Exists_Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',384).

 /*  reactive_rule([ happens(takeOffOf(Agent,
   				  Physobj1,
   				  Physobj2),
   			Time_From,
   			Time_Until),
   		some(Exists_Location,
   		     '$kolem_Fn_699'(Agent,
   				     Physobj1,
   				     Physobj2,
   				     Time))
   	      ],
   	      [loc_at(Agent,Exists_Location)]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       takeOffOf(Agent,Physobj1,Physobj2), 
%       some(
%          Exists_Location, 
%          '$kolem_Fn_699'(Agent,Physobj1,Physobj2,Time))), 
%    at(Physobj1,Exists_Location)).
if takeOffOf(Agent, Physobj1, Physobj2), some(Exists_Location, '$kolem_Fn_699'(Agent, Physobj1, Physobj2, Time))then loc_at(Physobj1, Exists_Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',384).

 /*  reactive_rule([ happens(takeOffOf(Agent,
   				  Physobj1,
   				  Physobj2),
   			Time_From9,
   			Time_Until10),
   		some(Exists_Location,
   		     '$kolem_Fn_699'(Agent,
   				     Physobj1,
   				     Physobj2,
   				     Time))
   	      ],
   	      [loc_at(Physobj1,Exists_Location)]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       takeOffOf(Agent,Physobj1,Physobj2), 
%       some(
%          Exists_Location, 
%          '$kolem_Fn_699'(Agent,Physobj1,Physobj2,Time))), 
%    at(Physobj2,Exists_Location)).
if takeOffOf(Agent, Physobj1, Physobj2), some(Exists_Location, '$kolem_Fn_699'(Agent, Physobj1, Physobj2, Time))then loc_at(Physobj2, Exists_Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',384).

 /*  reactive_rule([ happens(takeOffOf(Agent,
   				  Physobj1,
   				  Physobj2),
   			Time_From11,
   			Time_Until12),
   		some(Exists_Location,
   		     '$kolem_Fn_699'(Agent,
   				     Physobj1,
   				     Physobj2,
   				     Time))
   	      ],
   	      [loc_at(Physobj2,Exists_Location)]).
 */
 %  "% =================================".


%; A releases axiom states that if an agent places a physical
%; object on another physical object,
%; the first physical object's location will be released
%; from inertia:
% [agent,physobj1,physobj2,location,time]
% Releases(PlaceOn(agent,physobj1,physobj2),
%          At(physobj1,location),
%          time).
% releases(
%    placeOn(Agent,Physobj1,Physobj2), 
%    at(Physobj1,Location), 
%    Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',393).
releases(placeOn(Agent,Physobj1,Physobj2),
	 loc_at(Physobj1,Location),
	 Time).


%; A state constraint says that if a physical object is on
%; another physical object and the second physical object is
%; at a location, the first physical object is also at the location:
% [physobj1,physobj2,location,time]
% HoldsAt(On(physobj1,physobj2),time) &
% HoldsAt(At(physobj2,location),time) ->
% HoldsAt(At(physobj1,location),time).
% '->'(
%    ','(
%       on(Physobj1,Physobj2), 
%       at(Physobj2,Location)), 
%    at(Physobj1,Location)).
if on(Physobj1, Physobj2), loc_at(Physobj2, Location)then loc_at(Physobj1, Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',401).

 /*  reactive_rule([ holds(on(Physobj1,Physobj2),Time_At),
   		loc_at(Physobj2,Location)
   	      ],
   	      [loc_at(Physobj1,Location)]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       at(Physobj2,Location), 
%       not(
%          at(Physobj1,Location))), 
%    not(
%       on(Physobj1,Physobj2))).
not on(Physobj1, Physobj2)if loc_at(Physobj2, Location), not loc_at(Physobj1, Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',401).

 /*  l_int(holds(not(on(Physobj1,Physobj2)),Time_At5),
         [ loc_at(Physobj2,Location),
   	not(loc_at(Physobj1,Location))
         ]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       on(Physobj1,Physobj2), 
%       not(
%          at(Physobj1,Location))), 
%    not(
%       at(Physobj2,Location))).
if on(Physobj1, Physobj2), not loc_at(Physobj1, Location)then not loc_at(Physobj2, Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',401).

 /*  reactive_rule([ holds(on(Physobj1,Physobj2),Time_At6),
   		not(loc_at(Physobj1,Location))
   	      ],
   	      [not(loc_at(Physobj2,Location))]).
 */
 %  "% =================================".

% fluent Near(agent,object)
% fluent(
%    near(agent,object)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',405).
fluents([near/2]).
% mpred_prop(
%    near(agent,object), 
%    fluent).
mpred_prop(near(agent,object),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',407).
% event WalkFromTo(agent,object,object)
% event(
%    walkFromTo(agent,object,object)).
actions([walkFromTo/3]).
% mpred_prop(
%    walkFromTo(agent,object,object), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',407).
mpred_prop(walkFromTo(agent,object,object),event).

% event WalkFrom(agent,object)
% event(
%    walkFrom(agent,object)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',407).
actions([walkFrom/2]).
% mpred_prop(
%    walkFrom(agent,object), 
%    event).
mpred_prop(walkFrom(agent,object),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',409).
% event RunFromTo(agent,object,object)
% event(
%    runFromTo(agent,object,object)).
actions([runFromTo/3]).
% mpred_prop(
%    runFromTo(agent,object,object), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',409).
mpred_prop(runFromTo(agent,object,object),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',411).
% [agent,object1,object2,time]
% Initiates(WalkFromTo(agent,object1,object2),
%           Near(agent,object2),
%           time).
% initiates(
%    walkFromTo(Agent,Object1,Object2), 
%    near(Agent,Object2), 
%    Time).
walkFromTo(Agent, Object1, Object2)initiates near(Agent, Object2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',411).

 /*  initiated(happens(walkFromTo(Agent,Object1,Object2),
   		  Time_From,
   		  Time_Until),
   	  near(Agent,Object2),
   	  []).
 */
 %  "% =================================".


% [agent,object1,object2,time]
% Terminates(WalkFromTo(agent,object1,object2),
%            Near(agent,object1),
%            time).
% terminates(
%    walkFromTo(Agent,Object1,Object2), 
%    near(Agent,Object1), 
%    Time).
walkFromTo(Agent, Object1, Object2)terminates near(Agent, Object1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',417).

 /*  terminated(happens(walkFromTo(Agent,Object1,Object2),
   		   Time_From,
   		   Time_Until),
   	   near(Agent,Object1),
   	   []).
 */
 %  "% =================================".


% [agent,object1,object2,time]
% Happens(WalkFromTo(agent,object1,object2),time) ->
% {location}% 
% HoldsAt(At(agent,location),time) &
% HoldsAt(At(object1,location),time) &
% HoldsAt(At(object2,location),time).
% '->'(
%    ','(
%       ';'(
%          not(
%             at(Agent,Exists_Location)), 
%          ';'(
%             not(
%                at(Object1,Exists_Location)), 
%             not(
%                at(Object2,Exists_Location)))), 
%       some(
%          Exists_Location, 
%          '$kolem_Fn_700'(Agent,Object1,Object2,Time))), 
%    not(
%       walkFromTo(Agent,Object1,Object2))).
if (not loc_at(Agent, Exists_Location);not loc_at(Object1, Exists_Location);not loc_at(Object2, Exists_Location)), some(Exists_Location, '$kolem_Fn_700'(Agent, Object1, Object2, Time))then not walkFromTo(Agent, Object1, Object2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',422).

 /*   reactive_rule([  (not(loc_at(Agent, Exists_Location));not(loc_at(Object1, Exists_Location));not(loc_at(Object2, Exists_Location))),
                      some(Exists_Location,
                           '$kolem_Fn_700'(Agent,
                                           Object1,
                                           Object2,
                                           Time))
                    ],
                    [not(walkFromTo(Agent, Object1, Object2))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       walkFromTo(Agent,Object1,Object2), 
%       some(
%          Exists_Location, 
%          '$kolem_Fn_700'(Agent,Object1,Object2,Time))), 
%    at(Agent,Exists_Location)).
if walkFromTo(Agent, Object1, Object2), some(Exists_Location, '$kolem_Fn_700'(Agent, Object1, Object2, Time))then loc_at(Agent, Exists_Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',422).

 /*  reactive_rule([ happens(walkFromTo(Agent,
   				   Object1,
   				   Object2),
   			Time_From,
   			Time_Until),
   		some(Exists_Location,
   		     '$kolem_Fn_700'(Agent,
   				     Object1,
   				     Object2,
   				     Time))
   	      ],
   	      [loc_at(Agent,Exists_Location)]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       walkFromTo(Agent,Object1,Object2), 
%       some(
%          Exists_Location, 
%          '$kolem_Fn_700'(Agent,Object1,Object2,Time))), 
%    at(Object1,Exists_Location)).
if walkFromTo(Agent, Object1, Object2), some(Exists_Location, '$kolem_Fn_700'(Agent, Object1, Object2, Time))then loc_at(Object1, Exists_Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',422).

 /*  reactive_rule([ happens(walkFromTo(Agent,
   				   Object1,
   				   Object2),
   			Time_From8,
   			Time_Until9),
   		some(Exists_Location,
   		     '$kolem_Fn_700'(Agent,
   				     Object1,
   				     Object2,
   				     Time))
   	      ],
   	      [loc_at(Object1,Exists_Location)]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       walkFromTo(Agent,Object1,Object2), 
%       some(
%          Exists_Location, 
%          '$kolem_Fn_700'(Agent,Object1,Object2,Time))), 
%    at(Object2,Exists_Location)).
if walkFromTo(Agent, Object1, Object2), some(Exists_Location, '$kolem_Fn_700'(Agent, Object1, Object2, Time))then loc_at(Object2, Exists_Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',422).

 /*  reactive_rule([ happens(walkFromTo(Agent,
   				   Object1,
   				   Object2),
   			Time_From10,
   			Time_Until11),
   		some(Exists_Location,
   		     '$kolem_Fn_700'(Agent,
   				     Object1,
   				     Object2,
   				     Time))
   	      ],
   	      [loc_at(Object2,Exists_Location)]).
 */
 %  "% =================================".


% [agent,object1,object2,time]
% Initiates(RunFromTo(agent,object1,object2),
%           Near(agent,object2),
%           time).
% initiates(
%    runFromTo(Agent,Object1,Object2), 
%    near(Agent,Object2), 
%    Time).
runFromTo(Agent, Object1, Object2)initiates near(Agent, Object2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',429).

 /*  initiated(happens(runFromTo(Agent,Object1,Object2),
   		  Time_From,
   		  Time_Until),
   	  near(Agent,Object2),
   	  []).
 */
 %  "% =================================".


% [agent,object1,object2,time]
% Terminates(RunFromTo(agent,object1,object2),
%            Near(agent,object1),
%            time).
% terminates(
%    runFromTo(Agent,Object1,Object2), 
%    near(Agent,Object1), 
%    Time).
runFromTo(Agent, Object1, Object2)terminates near(Agent, Object1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',434).

 /*  terminated(happens(runFromTo(Agent,Object1,Object2),
   		   Time_From,
   		   Time_Until),
   	   near(Agent,Object1),
   	   []).
 */
 %  "% =================================".


% [agent,object1,object2,time]
% Happens(RunFromTo(agent,object1,object2),time) ->
% {location}% 
% HoldsAt(At(agent,location),time) &
% HoldsAt(At(object1,location),time) &
% HoldsAt(At(object2,location),time).
% '->'(
%    ','(
%       ';'(
%          not(
%             at(Agent,Exists_Location)), 
%          ';'(
%             not(
%                at(Object1,Exists_Location)), 
%             not(
%                at(Object2,Exists_Location)))), 
%       some(
%          Exists_Location, 
%          '$kolem_Fn_701'(Agent,Object1,Object2,Time))), 
%    not(
%       runFromTo(Agent,Object1,Object2))).
if (not loc_at(Agent, Exists_Location);not loc_at(Object1, Exists_Location);not loc_at(Object2, Exists_Location)), some(Exists_Location, '$kolem_Fn_701'(Agent, Object1, Object2, Time))then not runFromTo(Agent, Object1, Object2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',439).

 /*   reactive_rule([  (not(loc_at(Agent, Exists_Location));not(loc_at(Object1, Exists_Location));not(loc_at(Object2, Exists_Location))),
                      some(Exists_Location,
                           '$kolem_Fn_701'(Agent,
                                           Object1,
                                           Object2,
                                           Time))
                    ],
                    [not(runFromTo(Agent, Object1, Object2))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       runFromTo(Agent,Object1,Object2), 
%       some(
%          Exists_Location, 
%          '$kolem_Fn_701'(Agent,Object1,Object2,Time))), 
%    at(Agent,Exists_Location)).
if runFromTo(Agent, Object1, Object2), some(Exists_Location, '$kolem_Fn_701'(Agent, Object1, Object2, Time))then loc_at(Agent, Exists_Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',439).

 /*  reactive_rule([ happens(runFromTo(Agent,
   				  Object1,
   				  Object2),
   			Time_From,
   			Time_Until),
   		some(Exists_Location,
   		     '$kolem_Fn_701'(Agent,
   				     Object1,
   				     Object2,
   				     Time))
   	      ],
   	      [loc_at(Agent,Exists_Location)]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       runFromTo(Agent,Object1,Object2), 
%       some(
%          Exists_Location, 
%          '$kolem_Fn_701'(Agent,Object1,Object2,Time))), 
%    at(Object1,Exists_Location)).
if runFromTo(Agent, Object1, Object2), some(Exists_Location, '$kolem_Fn_701'(Agent, Object1, Object2, Time))then loc_at(Object1, Exists_Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',439).

 /*  reactive_rule([ happens(runFromTo(Agent,
   				  Object1,
   				  Object2),
   			Time_From8,
   			Time_Until9),
   		some(Exists_Location,
   		     '$kolem_Fn_701'(Agent,
   				     Object1,
   				     Object2,
   				     Time))
   	      ],
   	      [loc_at(Object1,Exists_Location)]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       runFromTo(Agent,Object1,Object2), 
%       some(
%          Exists_Location, 
%          '$kolem_Fn_701'(Agent,Object1,Object2,Time))), 
%    at(Object2,Exists_Location)).
if runFromTo(Agent, Object1, Object2), some(Exists_Location, '$kolem_Fn_701'(Agent, Object1, Object2, Time))then loc_at(Object2, Exists_Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',439).

 /*  reactive_rule([ happens(runFromTo(Agent,
   				  Object1,
   				  Object2),
   			Time_From10,
   			Time_Until11),
   		some(Exists_Location,
   		     '$kolem_Fn_701'(Agent,
   				     Object1,
   				     Object2,
   				     Time))
   	      ],
   	      [loc_at(Object2,Exists_Location)]).
 */
 %  "% =================================".


% [agent,object,time]
% Terminates(WalkFrom(agent,object),
%            Near(agent,object),
%            time).
% terminates(
%    walkFrom(Agent,Object), 
%    near(Agent,Object), 
%    Time).
walkFrom(Agent, Object)terminates near(Agent, Object).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',446).

 /*  terminated(happens(walkFrom(Agent,Object),
   		   Time_From,
   		   Time_Until),
   	   near(Agent,Object),
   	   []).
 */
 %  "% =================================".


% [agent,object,location,door,time]
% HoldsAt(Near(agent,object),time) &
% HoldsAt(At(agent,location),time) &
% HoldsAt(At(object,location),time) &
% Side1(door)=location &
% Happens(WalkThroughDoor12(agent,door),time) ->
% Happens(WalkFrom(agent,object),time).
% '->'(
%    ','(
%       near(Agent,Object), 
%       ','(
%          at(Agent,Location), 
%          ','(
%             at(Object,Location), 
%             ','(
%                side1Pred(Door,Location), 
%                walkThroughDoor12(Agent,Door))))), 
%    walkFrom(Agent,Object)).
walkFrom(Agent, Object)if near(Agent, Object), loc_at(Agent, Location), loc_at(Object, Location), side1Pred(Door, Location), walkThroughDoor12(Agent, Door).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',451).

 /*  l_events(happens(walkFrom(Agent,Object),
   		 Time_From,
   		 Time_Until),
   	 [ holds(near(Agent,Object),Time_From),
   	   loc_at(Agent,Location),
   	   loc_at(Object,Location),
   	   side1Pred(Door,Location),
   	   happens(walkThroughDoor12(Agent,Door),
   		   Time_From,
   		   Time_Until)
   	 ]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       at(Agent,Location), 
%       ','(
%          at(Object,Location), 
%          ','(
%             side1Pred(Door,Location), 
%             ','(
%                walkThroughDoor12(Agent,Door), 
%                not(
%                   walkFrom(Agent,Object)))))), 
%    not(
%       near(Agent,Object))).
not near(Agent, Object)if loc_at(Agent, Location), loc_at(Object, Location), side1Pred(Door, Location), walkThroughDoor12(Agent, Door), not walkFrom(Agent, Object).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',451).

 /*  l_int(holds(not(near(Agent,Object)),Time_At),
         [ loc_at(Agent,Location),
   	loc_at(Object,Location),
   	side1Pred(Door,Location),
   	happens(walkThroughDoor12(Agent,Door),
   		Time_At,
   		Time_At),
   	not(walkFrom(Agent,Object))
         ]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       at(Object,Location), 
%       ','(
%          side1Pred(Door,Location), 
%          ','(
%             walkThroughDoor12(Agent,Door), 
%             ','(
%                near(Agent,Object), 
%                not(
%                   walkFrom(Agent,Object)))))), 
%    not(
%       at(Agent,Location))).
if loc_at(Object, Location), side1Pred(Door, Location), walkThroughDoor12(Agent, Door), near(Agent, Object), not walkFrom(Agent, Object)then not loc_at(Agent, Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',451).

 /*  reactive_rule([ loc_at(Object,Location),
   		side1Pred(Door,Location),
   		happens(walkThroughDoor12(Agent,Door),
   			Time_From8,
   			Time_Until9),
   		holds(near(Agent,Object),Time_Until9),
   		not(walkFrom(Agent,Object))
   	      ],
   	      [not(loc_at(Agent,Location))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       side1Pred(Door,Location), 
%       ','(
%          walkThroughDoor12(Agent,Door), 
%          ','(
%             at(Agent,Location), 
%             ','(
%                near(Agent,Object), 
%                not(
%                   walkFrom(Agent,Object)))))), 
%    not(
%       at(Object,Location))).
if side1Pred(Door, Location), walkThroughDoor12(Agent, Door), loc_at(Agent, Location), near(Agent, Object), not walkFrom(Agent, Object)then not loc_at(Object, Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',451).

 /*  reactive_rule([ side1Pred(Door,Location),
   		happens(walkThroughDoor12(Agent,Door),
   			Time_From10,
   			Time_Until11),
   		loc_at(Agent,Location),
   		holds(near(Agent,Object),
   		      Time_Until11),
   		not(walkFrom(Agent,Object))
   	      ],
   	      [not(loc_at(Object,Location))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       walkThroughDoor12(Agent,Door), 
%       ','(
%          at(Object,Location), 
%          ','(
%             at(Agent,Location), 
%             ','(
%                near(Agent,Object), 
%                not(
%                   walkFrom(Agent,Object)))))), 
%    not(
%       side1Pred(Door,Location))).
if walkThroughDoor12(Agent, Door), loc_at(Object, Location), loc_at(Agent, Location), near(Agent, Object), not walkFrom(Agent, Object)then not side1Pred(Door, Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',451).

 /*  reactive_rule([ happens(walkThroughDoor12(Agent,Door),
   			Time_From12,
   			Time_Until13),
   		loc_at(Object,Location),
   		loc_at(Agent,Location),
   		holds(near(Agent,Object),
   		      Time_Until13),
   		not(walkFrom(Agent,Object))
   	      ],
   	      [not(side1Pred(Door,Location))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       side1Pred(Door,Location), 
%       ','(
%          at(Object,Location), 
%          ','(
%             at(Agent,Location), 
%             ','(
%                near(Agent,Object), 
%                not(
%                   walkFrom(Agent,Object)))))), 
%    not(
%       walkThroughDoor12(Agent,Door))).
if side1Pred(Door, Location), loc_at(Object, Location), loc_at(Agent, Location), near(Agent, Object), not walkFrom(Agent, Object)then not walkThroughDoor12(Agent, Door).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',451).

 /*  reactive_rule([ side1Pred(Door,Location),
   		loc_at(Object,Location),
   		loc_at(Agent,Location),
   		holds(near(Agent,Object),Time_At14),
   		not(walkFrom(Agent,Object))
   	      ],
   	      [not(walkThroughDoor12(Agent,Door))]).
 */
 %  "% =================================".


% [agent,object,location,door,time]
% HoldsAt(Near(agent,object),time) &
% HoldsAt(At(agent,location),time) &
% HoldsAt(At(object,location),time) &
% Side2(door)=location &
% Happens(WalkThroughDoor21(agent,door),time) ->
% Happens(WalkFrom(agent,object),time).
% '->'(
%    ','(
%       near(Agent,Object), 
%       ','(
%          at(Agent,Location), 
%          ','(
%             at(Object,Location), 
%             ','(
%                side2Pred(Door,Location), 
%                walkThroughDoor21(Agent,Door))))), 
%    walkFrom(Agent,Object)).
walkFrom(Agent, Object)if near(Agent, Object), loc_at(Agent, Location), loc_at(Object, Location), side2Pred(Door, Location), walkThroughDoor21(Agent, Door).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',459).

 /*  l_events(happens(walkFrom(Agent,Object),
   		 Time_From,
   		 Time_Until),
   	 [ holds(near(Agent,Object),Time_From),
   	   loc_at(Agent,Location),
   	   loc_at(Object,Location),
   	   side2Pred(Door,Location),
   	   happens(walkThroughDoor21(Agent,Door),
   		   Time_From,
   		   Time_Until)
   	 ]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       at(Agent,Location), 
%       ','(
%          at(Object,Location), 
%          ','(
%             side2Pred(Door,Location), 
%             ','(
%                walkThroughDoor21(Agent,Door), 
%                not(
%                   walkFrom(Agent,Object)))))), 
%    not(
%       near(Agent,Object))).
not near(Agent, Object)if loc_at(Agent, Location), loc_at(Object, Location), side2Pred(Door, Location), walkThroughDoor21(Agent, Door), not walkFrom(Agent, Object).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',459).

 /*  l_int(holds(not(near(Agent,Object)),Time_At),
         [ loc_at(Agent,Location),
   	loc_at(Object,Location),
   	side2Pred(Door,Location),
   	happens(walkThroughDoor21(Agent,Door),
   		Time_At,
   		Time_At),
   	not(walkFrom(Agent,Object))
         ]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       at(Object,Location), 
%       ','(
%          side2Pred(Door,Location), 
%          ','(
%             walkThroughDoor21(Agent,Door), 
%             ','(
%                near(Agent,Object), 
%                not(
%                   walkFrom(Agent,Object)))))), 
%    not(
%       at(Agent,Location))).
if loc_at(Object, Location), side2Pred(Door, Location), walkThroughDoor21(Agent, Door), near(Agent, Object), not walkFrom(Agent, Object)then not loc_at(Agent, Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',459).

 /*  reactive_rule([ loc_at(Object,Location),
   		side2Pred(Door,Location),
   		happens(walkThroughDoor21(Agent,Door),
   			Time_From8,
   			Time_Until9),
   		holds(near(Agent,Object),Time_Until9),
   		not(walkFrom(Agent,Object))
   	      ],
   	      [not(loc_at(Agent,Location))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       side2Pred(Door,Location), 
%       ','(
%          walkThroughDoor21(Agent,Door), 
%          ','(
%             at(Agent,Location), 
%             ','(
%                near(Agent,Object), 
%                not(
%                   walkFrom(Agent,Object)))))), 
%    not(
%       at(Object,Location))).
if side2Pred(Door, Location), walkThroughDoor21(Agent, Door), loc_at(Agent, Location), near(Agent, Object), not walkFrom(Agent, Object)then not loc_at(Object, Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',459).

 /*  reactive_rule([ side2Pred(Door,Location),
   		happens(walkThroughDoor21(Agent,Door),
   			Time_From10,
   			Time_Until11),
   		loc_at(Agent,Location),
   		holds(near(Agent,Object),
   		      Time_Until11),
   		not(walkFrom(Agent,Object))
   	      ],
   	      [not(loc_at(Object,Location))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       walkThroughDoor21(Agent,Door), 
%       ','(
%          at(Object,Location), 
%          ','(
%             at(Agent,Location), 
%             ','(
%                near(Agent,Object), 
%                not(
%                   walkFrom(Agent,Object)))))), 
%    not(
%       side2Pred(Door,Location))).
if walkThroughDoor21(Agent, Door), loc_at(Object, Location), loc_at(Agent, Location), near(Agent, Object), not walkFrom(Agent, Object)then not side2Pred(Door, Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',459).

 /*  reactive_rule([ happens(walkThroughDoor21(Agent,Door),
   			Time_From12,
   			Time_Until13),
   		loc_at(Object,Location),
   		loc_at(Agent,Location),
   		holds(near(Agent,Object),
   		      Time_Until13),
   		not(walkFrom(Agent,Object))
   	      ],
   	      [not(side2Pred(Door,Location))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       side2Pred(Door,Location), 
%       ','(
%          at(Object,Location), 
%          ','(
%             at(Agent,Location), 
%             ','(
%                near(Agent,Object), 
%                not(
%                   walkFrom(Agent,Object)))))), 
%    not(
%       walkThroughDoor21(Agent,Door))).
if side2Pred(Door, Location), loc_at(Object, Location), loc_at(Agent, Location), near(Agent, Object), not walkFrom(Agent, Object)then not walkThroughDoor21(Agent, Door).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',459).

 /*  reactive_rule([ side2Pred(Door,Location),
   		loc_at(Object,Location),
   		loc_at(Agent,Location),
   		holds(near(Agent,Object),Time_At14),
   		not(walkFrom(Agent,Object))
   	      ],
   	      [not(walkThroughDoor21(Agent,Door))]).
 */
 %  "% =================================".


% [agent,object,room,staircase,time]
% HoldsAt(Near(agent,object),time) &
% HoldsAt(At(agent,room),time) &
% HoldsAt(At(object,room),time) &
% Side1(staircase)=room &
% Happens(WalkUpStaircase(agent,staircase),time) ->
% Happens(WalkFrom(agent,object),time).
% '->'(
%    ','(
%       near(Agent,Object), 
%       ','(
%          at(Agent,Room), 
%          ','(
%             at(Object,Room), 
%             ','(
%                side1Pred(Staircase,Room), 
%                walkUpStaircase(Agent,Staircase))))), 
%    walkFrom(Agent,Object)).
walkFrom(Agent, Object)if near(Agent, Object), loc_at(Agent, Room), loc_at(Object, Room), side1Pred(Staircase, Room), walkUpStaircase(Agent, Staircase).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',467).

 /*  l_events(happens(walkFrom(Agent,Object),
   		 Time_From,
   		 Time_Until),
   	 [ holds(near(Agent,Object),Time_From),
   	   loc_at(Agent,Room),
   	   loc_at(Object,Room),
   	   side1Pred(Staircase,Room),
   	   happens(walkUpStaircase(Agent,Staircase),
   		   Time_From,
   		   Time_Until)
   	 ]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       at(Agent,Room), 
%       ','(
%          at(Object,Room), 
%          ','(
%             side1Pred(Staircase,Room), 
%             ','(
%                walkUpStaircase(Agent,Staircase), 
%                not(
%                   walkFrom(Agent,Object)))))), 
%    not(
%       near(Agent,Object))).
not near(Agent, Object)if loc_at(Agent, Room), loc_at(Object, Room), side1Pred(Staircase, Room), walkUpStaircase(Agent, Staircase), not walkFrom(Agent, Object).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',467).

 /*  l_int(holds(not(near(Agent,Object)),Time_At),
         [ loc_at(Agent,Room),
   	loc_at(Object,Room),
   	side1Pred(Staircase,Room),
   	happens(walkUpStaircase(Agent,Staircase),
   		Time_At,
   		Time_At),
   	not(walkFrom(Agent,Object))
         ]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       at(Object,Room), 
%       ','(
%          side1Pred(Staircase,Room), 
%          ','(
%             walkUpStaircase(Agent,Staircase), 
%             ','(
%                near(Agent,Object), 
%                not(
%                   walkFrom(Agent,Object)))))), 
%    not(
%       at(Agent,Room))).
if loc_at(Object, Room), side1Pred(Staircase, Room), walkUpStaircase(Agent, Staircase), near(Agent, Object), not walkFrom(Agent, Object)then not loc_at(Agent, Room).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',467).

 /*  reactive_rule([ loc_at(Object,Room),
   		side1Pred(Staircase,Room),
   		happens(walkUpStaircase(Agent,Staircase),
   			Time_From8,
   			Time_Until9),
   		holds(near(Agent,Object),Time_Until9),
   		not(walkFrom(Agent,Object))
   	      ],
   	      [not(loc_at(Agent,Room))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       side1Pred(Staircase,Room), 
%       ','(
%          walkUpStaircase(Agent,Staircase), 
%          ','(
%             at(Agent,Room), 
%             ','(
%                near(Agent,Object), 
%                not(
%                   walkFrom(Agent,Object)))))), 
%    not(
%       at(Object,Room))).
if side1Pred(Staircase, Room), walkUpStaircase(Agent, Staircase), loc_at(Agent, Room), near(Agent, Object), not walkFrom(Agent, Object)then not loc_at(Object, Room).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',467).

 /*  reactive_rule([ side1Pred(Staircase,Room),
   		happens(walkUpStaircase(Agent,Staircase),
   			Time_From10,
   			Time_Until11),
   		loc_at(Agent,Room),
   		holds(near(Agent,Object),
   		      Time_Until11),
   		not(walkFrom(Agent,Object))
   	      ],
   	      [not(loc_at(Object,Room))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       walkUpStaircase(Agent,Staircase), 
%       ','(
%          at(Object,Room), 
%          ','(
%             at(Agent,Room), 
%             ','(
%                near(Agent,Object), 
%                not(
%                   walkFrom(Agent,Object)))))), 
%    not(
%       side1Pred(Staircase,Room))).
if walkUpStaircase(Agent, Staircase), loc_at(Object, Room), loc_at(Agent, Room), near(Agent, Object), not walkFrom(Agent, Object)then not side1Pred(Staircase, Room).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',467).

 /*  reactive_rule([ happens(walkUpStaircase(Agent,Staircase),
   			Time_From12,
   			Time_Until13),
   		loc_at(Object,Room),
   		loc_at(Agent,Room),
   		holds(near(Agent,Object),
   		      Time_Until13),
   		not(walkFrom(Agent,Object))
   	      ],
   	      [not(side1Pred(Staircase,Room))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       side1Pred(Staircase,Room), 
%       ','(
%          at(Object,Room), 
%          ','(
%             at(Agent,Room), 
%             ','(
%                near(Agent,Object), 
%                not(
%                   walkFrom(Agent,Object)))))), 
%    not(
%       walkUpStaircase(Agent,Staircase))).
if side1Pred(Staircase, Room), loc_at(Object, Room), loc_at(Agent, Room), near(Agent, Object), not walkFrom(Agent, Object)then not walkUpStaircase(Agent, Staircase).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',467).

 /*  reactive_rule([ side1Pred(Staircase,Room),
   		loc_at(Object,Room),
   		loc_at(Agent,Room),
   		holds(near(Agent,Object),Time_At14),
   		not(walkFrom(Agent,Object))
   	      ],
   	      [not(walkUpStaircase(Agent,Staircase))]).
 */
 %  "% =================================".


% [agent,object,room,staircase,time]
% HoldsAt(Near(agent,object),time) &
% HoldsAt(At(agent,room),time) &
% HoldsAt(At(object,room),time) &
% Side2(staircase)=room &
% Happens(WalkDownStaircase(agent,staircase),time) ->
% Happens(WalkFrom(agent,object),time).
% '->'(
%    ','(
%       near(Agent,Object), 
%       ','(
%          at(Agent,Room), 
%          ','(
%             at(Object,Room), 
%             ','(
%                side2Pred(Staircase,Room), 
%                walkDownStaircase(Agent,Staircase))))), 
%    walkFrom(Agent,Object)).
walkFrom(Agent, Object)if near(Agent, Object), loc_at(Agent, Room), loc_at(Object, Room), side2Pred(Staircase, Room), walkDownStaircase(Agent, Staircase).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',475).

 /*  l_events(happens(walkFrom(Agent,Object),
   		 Time_From,
   		 Time_Until),
   	 [ holds(near(Agent,Object),Time_From),
   	   loc_at(Agent,Room),
   	   loc_at(Object,Room),
   	   side2Pred(Staircase,Room),
   	   happens(walkDownStaircase(Agent,Staircase),
   		   Time_From,
   		   Time_Until)
   	 ]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       at(Agent,Room), 
%       ','(
%          at(Object,Room), 
%          ','(
%             side2Pred(Staircase,Room), 
%             ','(
%                walkDownStaircase(Agent,Staircase), 
%                not(
%                   walkFrom(Agent,Object)))))), 
%    not(
%       near(Agent,Object))).
not near(Agent, Object)if loc_at(Agent, Room), loc_at(Object, Room), side2Pred(Staircase, Room), walkDownStaircase(Agent, Staircase), not walkFrom(Agent, Object).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',475).

 /*  l_int(holds(not(near(Agent,Object)),Time_At),
         [ loc_at(Agent,Room),
   	loc_at(Object,Room),
   	side2Pred(Staircase,Room),
   	happens(walkDownStaircase(Agent,Staircase),
   		Time_At,
   		Time_At),
   	not(walkFrom(Agent,Object))
         ]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       at(Object,Room), 
%       ','(
%          side2Pred(Staircase,Room), 
%          ','(
%             walkDownStaircase(Agent,Staircase), 
%             ','(
%                near(Agent,Object), 
%                not(
%                   walkFrom(Agent,Object)))))), 
%    not(
%       at(Agent,Room))).
if loc_at(Object, Room), side2Pred(Staircase, Room), walkDownStaircase(Agent, Staircase), near(Agent, Object), not walkFrom(Agent, Object)then not loc_at(Agent, Room).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',475).

 /*  reactive_rule([ loc_at(Object,Room),
   		side2Pred(Staircase,Room),
   		happens(walkDownStaircase(Agent,Staircase),
   			Time_From8,
   			Time_Until9),
   		holds(near(Agent,Object),Time_Until9),
   		not(walkFrom(Agent,Object))
   	      ],
   	      [not(loc_at(Agent,Room))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       side2Pred(Staircase,Room), 
%       ','(
%          walkDownStaircase(Agent,Staircase), 
%          ','(
%             at(Agent,Room), 
%             ','(
%                near(Agent,Object), 
%                not(
%                   walkFrom(Agent,Object)))))), 
%    not(
%       at(Object,Room))).
if side2Pred(Staircase, Room), walkDownStaircase(Agent, Staircase), loc_at(Agent, Room), near(Agent, Object), not walkFrom(Agent, Object)then not loc_at(Object, Room).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',475).

 /*  reactive_rule([ side2Pred(Staircase,Room),
   		happens(walkDownStaircase(Agent,Staircase),
   			Time_From10,
   			Time_Until11),
   		loc_at(Agent,Room),
   		holds(near(Agent,Object),
   		      Time_Until11),
   		not(walkFrom(Agent,Object))
   	      ],
   	      [not(loc_at(Object,Room))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       walkDownStaircase(Agent,Staircase), 
%       ','(
%          at(Object,Room), 
%          ','(
%             at(Agent,Room), 
%             ','(
%                near(Agent,Object), 
%                not(
%                   walkFrom(Agent,Object)))))), 
%    not(
%       side2Pred(Staircase,Room))).
if walkDownStaircase(Agent, Staircase), loc_at(Object, Room), loc_at(Agent, Room), near(Agent, Object), not walkFrom(Agent, Object)then not side2Pred(Staircase, Room).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',475).

 /*  reactive_rule([ happens(walkDownStaircase(Agent,Staircase),
   			Time_From12,
   			Time_Until13),
   		loc_at(Object,Room),
   		loc_at(Agent,Room),
   		holds(near(Agent,Object),
   		      Time_Until13),
   		not(walkFrom(Agent,Object))
   	      ],
   	      [not(side2Pred(Staircase,Room))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       side2Pred(Staircase,Room), 
%       ','(
%          at(Object,Room), 
%          ','(
%             at(Agent,Room), 
%             ','(
%                near(Agent,Object), 
%                not(
%                   walkFrom(Agent,Object)))))), 
%    not(
%       walkDownStaircase(Agent,Staircase))).
if side2Pred(Staircase, Room), loc_at(Object, Room), loc_at(Agent, Room), near(Agent, Object), not walkFrom(Agent, Object)then not walkDownStaircase(Agent, Staircase).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',475).

 /*  reactive_rule([ side2Pred(Staircase,Room),
   		loc_at(Object,Room),
   		loc_at(Agent,Room),
   		holds(near(Agent,Object),Time_At14),
   		not(walkFrom(Agent,Object))
   	      ],
   	      [not(walkDownStaircase(Agent,Staircase))]).
 */
 %  "% =================================".


%; End of file.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',481).
% translate: ending  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e.lps 
