:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Arson.e',87).
% translate: unskipped  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e.lps 
:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(lps).
% translate: begining  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e.lps 
% Thu, 08 Oct 2020 21:35:49 GMT File: <stream>(0x55894c2fe400)%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{EthanAllen:1982,
%;   author = "Ethan Allen",
%;   year = "1982",
%;   title = "Baseball Play and Strategy",
%;   address = "Robert E. Krieger",
%;   publisher = "Malabar, FL",
%;   edition = "Third",
%; }
%;
%; @book{Coombs:1967,
%;   author = "Jack Coombs",
%;   year = "1967",
%;   title = "Baseball",
%;   address = "Englewood Cliffs, NJ",
%;   publisher = "Prentice-Hall",
%;   edition = "4th",
%;   howpublished = "revised by Danny Litwhiler",
%; }
%;

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',31).
% sort ballgame
% sort(ballgame).
sort(ballgame).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',33).
% sort hardball: ball
% subsort(hardball,ball).
subsort(hardball,ball).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',35).
% sort base: physobj
% subsort(base,physobj).
subsort(base,physobj).

% sort firstbase: base
% subsort(firstbase,base).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',35).
subsort(firstbase,base).
%;sort secondbase: base
%;sort thirdbase: base

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',39).
% sort homeplate: base
% subsort(homeplate,base).
subsort(homeplate,base).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',41).
% sort mound: physobj
% subsort(mound,physobj).
subsort(mound,physobj).

% sort pitchermound: mound
% subsort(pitchermound,mound).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',41).
subsort(pitchermound,mound).
%;sort furniture: physobj
%;sort bench: furniture
%;sort playerbench: bench

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',48).
% sort field: physobj
% subsort(field,physobj).
subsort(field,physobj).
%;sort shortstoparea: field
%;sort catcherarea: field

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',53).
% sort outfield: field
% subsort(outfield,field).
subsort(outfield,field).
%;sort leftfield: outfield
%;sort centerfield: outfield
%;sort rightfield: outfield

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',58).
% function BallOf(ballgame): hardball
% function(
%    ballOf(ballgame)).
functions([ballOf/1]).
% mpred_prop(
%    ballOf(ballgame), 
%    function).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',58).
mpred_prop(ballOf(ballgame),function).
% predicate(
%    ball(ballgame,hardball)).
predicates([ball/2]).
% mpred_prop(
%    ball(ballgame,hardball), 
%    predicate).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',58).
mpred_prop(ball(ballgame,hardball),predicate).
% functional_predicate(ballOf,ball).
functional_predicate(ballOf,ball).
% function_argtypes(
%    ball, 
%    ballOf(ballgame), 
%    hardball).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',58).
function_argtypes(ball,ballOf(ballgame),hardball).
% resultIsa(ballOf,hardball).
resultIsa(ballOf,hardball).

% function FirstBaseOf(ballgame): firstbase
% function(
%    firstBaseOf(ballgame)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',58).
functions([firstBaseOf/1]).
% mpred_prop(
%    firstBaseOf(ballgame), 
%    function).
mpred_prop(firstBaseOf(ballgame),function).
% predicate(
%    firstBase(ballgame,firstbase)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',58).
predicates([firstBase/2]).
% mpred_prop(
%    firstBase(ballgame,firstbase), 
%    predicate).
mpred_prop(firstBase(ballgame,firstbase),predicate).
% functional_predicate(firstBaseOf,firstBase).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',58).
functional_predicate(firstBaseOf,firstBase).
% function_argtypes(
%    firstBase, 
%    firstBaseOf(ballgame), 
%    firstbase).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',58).
function_argtypes(firstBase,firstBaseOf(ballgame),firstbase).
% resultIsa(firstBaseOf,firstbase).
resultIsa(firstBaseOf,firstbase).
%;function SecondBaseOf(ballgame): secondbase
%;function ThirdBaseOf(ballgame): thirdbase

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',62).
% function HomeplateOf(ballgame): homeplate
% function(
%    homeplateOf(ballgame)).
functions([homeplateOf/1]).
% mpred_prop(
%    homeplateOf(ballgame), 
%    function).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',62).
mpred_prop(homeplateOf(ballgame),function).
% predicate(
%    homeplate(ballgame,homeplate)).
predicates([homeplate/2]).
% mpred_prop(
%    homeplate(ballgame,homeplate), 
%    predicate).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',62).
mpred_prop(homeplate(ballgame,homeplate),predicate).
% functional_predicate(homeplateOf,homeplate).
functional_predicate(homeplateOf,homeplate).
% function_argtypes(
%    homeplate, 
%    homeplateOf(ballgame), 
%    homeplate).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',62).
function_argtypes(homeplate,homeplateOf(ballgame),homeplate).
% resultIsa(homeplateOf,homeplate).
resultIsa(homeplateOf,homeplate).

% function OutfieldOf(ballgame): outfield
% function(
%    outfieldOf(ballgame)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',62).
functions([outfieldOf/1]).
% mpred_prop(
%    outfieldOf(ballgame), 
%    function).
mpred_prop(outfieldOf(ballgame),function).
% predicate(
%    outfield(ballgame,outfield)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',62).
predicates([outfield/2]).
% mpred_prop(
%    outfield(ballgame,outfield), 
%    predicate).
mpred_prop(outfield(ballgame,outfield),predicate).
% functional_predicate(outfieldOf,outfield).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',62).
functional_predicate(outfieldOf,outfield).
% function_argtypes(
%    outfield, 
%    outfieldOf(ballgame), 
%    outfield).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',62).
function_argtypes(outfield,outfieldOf(ballgame),outfield).
% resultIsa(outfieldOf,outfield).
resultIsa(outfieldOf,outfield).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',64).
% function PitchermoundOf(ballgame): pitchermound
% function(
%    pitchermoundOf(ballgame)).
functions([pitchermoundOf/1]).
% mpred_prop(
%    pitchermoundOf(ballgame), 
%    function).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',64).
mpred_prop(pitchermoundOf(ballgame),function).
% predicate(
%    pitchermound(ballgame,pitchermound)).
predicates([pitchermound/2]).
% mpred_prop(
%    pitchermound(ballgame,pitchermound), 
%    predicate).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',64).
mpred_prop(pitchermound(ballgame,pitchermound),predicate).
% functional_predicate(pitchermoundOf,pitchermound).
functional_predicate(pitchermoundOf,pitchermound).
% function_argtypes(
%    pitchermound, 
%    pitchermoundOf(ballgame), 
%    pitchermound).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',64).
function_argtypes(pitchermound,pitchermoundOf(ballgame),pitchermound).
% resultIsa(pitchermoundOf,pitchermound).
resultIsa(pitchermoundOf,pitchermound).

% function PlayerbenchOf(ballgame): playerbench
% function(
%    playerbenchOf(ballgame)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',64).
functions([playerbenchOf/1]).
% mpred_prop(
%    playerbenchOf(ballgame), 
%    function).
mpred_prop(playerbenchOf(ballgame),function).
% predicate(
%    playerbench(ballgame,playerbench)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',64).
predicates([playerbench/2]).
% mpred_prop(
%    playerbench(ballgame,playerbench), 
%    predicate).
mpred_prop(playerbench(ballgame,playerbench),predicate).
% functional_predicate(playerbenchOf,playerbench).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',64).
functional_predicate(playerbenchOf,playerbench).
% function_argtypes(
%    playerbench, 
%    playerbenchOf(ballgame), 
%    playerbench).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',64).
function_argtypes(playerbench,playerbenchOf(ballgame),playerbench).
% resultIsa(playerbenchOf,playerbench).
resultIsa(playerbenchOf,playerbench).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',67).
% predicate HomeTeamPlayer(ballgame,agent)
% predicate(
%    homeTeamPlayer(ballgame,agent)).
predicates([homeTeamPlayer/2]).
% mpred_prop(
%    homeTeamPlayer(ballgame,agent), 
%    predicate).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',67).
mpred_prop(homeTeamPlayer(ballgame,agent),predicate).

% predicate VisitingTeamPlayer(ballgame,agent)
% predicate(
%    visitingTeamPlayer(ballgame,agent)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',67).
predicates([visitingTeamPlayer/2]).
% mpred_prop(
%    visitingTeamPlayer(ballgame,agent), 
%    predicate).
mpred_prop(visitingTeamPlayer(ballgame,agent),predicate).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',69).
% predicate Player(ballgame,agent)
% predicate(
%    player(ballgame,agent)).
predicates([player/2]).
% mpred_prop(
%    player(ballgame,agent), 
%    predicate).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',69).
mpred_prop(player(ballgame,agent),predicate).

% predicate OnOppositeTeams(ballgame,agent,agent)
% predicate(
%    onOppositeTeams(ballgame,agent,agent)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',69).
predicates([onOppositeTeams/3]).
% mpred_prop(
%    onOppositeTeams(ballgame,agent,agent), 
%    predicate).
mpred_prop(onOppositeTeams(ballgame,agent,agent),predicate).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',72).
% event Pitch(ballgame,agent,hardball,agent)
% event(
%    pitch(ballgame,agent,hardball,agent)).
events([pitch/4]).
% mpred_prop(
%    pitch(ballgame,agent,hardball,agent), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',72).
mpred_prop(pitch(ballgame,agent,hardball,agent),event).

% event PitchInStrikeZone(ballgame,agent,hardball,agent)
% event(
%    pitchInStrikeZone(ballgame,agent,hardball,agent)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',72).
events([pitchInStrikeZone/4]).
% mpred_prop(
%    pitchInStrikeZone(ballgame,agent,hardball,agent), 
%    event).
mpred_prop(pitchInStrikeZone(ballgame,agent,hardball,agent),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',74).
% event PitchOutOfStrikeZone(ballgame,agent,hardball,agent)
% event(
%    pitchOutOfStrikeZone(ballgame,agent,hardball,agent)).
events([pitchOutOfStrikeZone/4]).
% mpred_prop(
%    pitchOutOfStrikeZone(ballgame,agent,hardball,agent), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',74).
mpred_prop(pitchOutOfStrikeZone(ballgame,agent,hardball,agent),event).

% event Swing(ballgame,agent,hardball)
% event(
%    swing(ballgame,agent,hardball)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',74).
events([swing/3]).
% mpred_prop(
%    swing(ballgame,agent,hardball), 
%    event).
mpred_prop(swing(ballgame,agent,hardball),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',76).
% event SwingMiss(ballgame,agent,hardball)
% event(
%    swingMiss(ballgame,agent,hardball)).
events([swingMiss/3]).
% mpred_prop(
%    swingMiss(ballgame,agent,hardball), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',76).
mpred_prop(swingMiss(ballgame,agent,hardball),event).

% event SwingHit(ballgame,agent,hardball)
% event(
%    swingHit(ballgame,agent,hardball)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',76).
events([swingHit/3]).
% mpred_prop(
%    swingHit(ballgame,agent,hardball), 
%    event).
mpred_prop(swingHit(ballgame,agent,hardball),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',78).
% event SwingHitFair(ballgame,agent,hardball)
% event(
%    swingHitFair(ballgame,agent,hardball)).
events([swingHitFair/3]).
% mpred_prop(
%    swingHitFair(ballgame,agent,hardball), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',78).
mpred_prop(swingHitFair(ballgame,agent,hardball),event).

% event SwingHitFoul(ballgame,agent,hardball)
% event(
%    swingHitFoul(ballgame,agent,hardball)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',78).
events([swingHitFoul/3]).
% mpred_prop(
%    swingHitFoul(ballgame,agent,hardball), 
%    event).
mpred_prop(swingHitFoul(ballgame,agent,hardball),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',80).
% event SwingHitFairFly(ballgame,agent,hardball)
% event(
%    swingHitFairFly(ballgame,agent,hardball)).
events([swingHitFairFly/3]).
% mpred_prop(
%    swingHitFairFly(ballgame,agent,hardball), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',80).
mpred_prop(swingHitFairFly(ballgame,agent,hardball),event).

% event SwingHitFairGround(ballgame,agent,hardball)
% event(
%    swingHitFairGround(ballgame,agent,hardball)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',80).
events([swingHitFairGround/3]).
% mpred_prop(
%    swingHitFairGround(ballgame,agent,hardball), 
%    event).
mpred_prop(swingHitFairGround(ballgame,agent,hardball),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',83).
% [ballgame,agent]
% HomeTeamPlayer(ballgame,agent) ->
% !VisitingTeamPlayer(ballgame,agent).
% '->'(
%    homeTeamPlayer(Ballgame,Agent), 
%    not(
%       visitingTeamPlayer(Ballgame,Agent))).
if homeTeamPlayer(Ballgame, Agent)then not visitingTeamPlayer(Ballgame, Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',83).

 /*  reactive_rule([homeTeamPlayer(Ballgame,Agent)],
   	      [not(visitingTeamPlayer(Ballgame,Agent))]).
 */
 %  "% =================================".
% '->'(
%    visitingTeamPlayer(Ballgame,Agent), 
%    not(
%       homeTeamPlayer(Ballgame,Agent))).
if visitingTeamPlayer(Ballgame, Agent)then not homeTeamPlayer(Ballgame, Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',83).

 /*  reactive_rule([visitingTeamPlayer(Ballgame,Agent)],
   	      [not(homeTeamPlayer(Ballgame,Agent))]).
 */
 %  "% =================================".


% [ballgame,agent]
 % HomeTeamPlayer(ballgame,agent) -> Player(ballgame,agent).
% '->'(
%    homeTeamPlayer(Ballgame,Agent), 
%    player(Ballgame,Agent)).
if homeTeamPlayer(Ballgame, Agent)then player(Ballgame, Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',86).

 /*  reactive_rule([homeTeamPlayer(Ballgame,Agent)],
   	      [player(Ballgame,Agent)]).
 */
 %  "% =================================".
% '->'(
%    not(
%       player(Ballgame,Agent)), 
%    not(
%       homeTeamPlayer(Ballgame,Agent))).
if not player(Ballgame, Agent)then not homeTeamPlayer(Ballgame, Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',86).

 /*  reactive_rule([not(player(Ballgame,Agent))],
   	      [not(homeTeamPlayer(Ballgame,Agent))]).
 */
 %  "% =================================".


% [ballgame,agent]
 % VisitingTeamPlayer(ballgame,agent) -> Player(ballgame,agent).
% '->'(
%    visitingTeamPlayer(Ballgame,Agent), 
%    player(Ballgame,Agent)).
if visitingTeamPlayer(Ballgame, Agent)then player(Ballgame, Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',88).

 /*  reactive_rule([visitingTeamPlayer(Ballgame,Agent)],
   	      [player(Ballgame,Agent)]).
 */
 %  "% =================================".
% '->'(
%    not(
%       player(Ballgame,Agent)), 
%    not(
%       visitingTeamPlayer(Ballgame,Agent))).
if not player(Ballgame, Agent)then not visitingTeamPlayer(Ballgame, Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',88).

 /*  reactive_rule([not(player(Ballgame,Agent))],
   	      [not(visitingTeamPlayer(Ballgame,Agent))]).
 */
 %  "% =================================".


% [ballgame,agent1,agent2]
% OnOppositeTeams(ballgame,agent1,agent2) <->
% (HomeTeamPlayer(ballgame,agent1) &
%  VisitingTeamPlayer(ballgame,agent2)) |
% (HomeTeamPlayer(ballgame,agent2) &
%  VisitingTeamPlayer(ballgame,agent1)).
 %  <->(onOppositeTeams(Ballgame, Agent1, Agent2),  (homeTeamPlayer(Ballgame, Agent1), visitingTeamPlayer(Ballgame, Agent2);homeTeamPlayer(Ballgame, Agent2), visitingTeamPlayer(Ballgame, Agent1))).
% '->'(
%    ','(
%       ';'(
%          not(
%             homeTeamPlayer(Ballgame,Agent1)), 
%          not(
%             visitingTeamPlayer(Ballgame,Agent2))), 
%       ';'(
%          not(
%             homeTeamPlayer(Ballgame,Agent2)), 
%          not(
%             visitingTeamPlayer(Ballgame,Agent1)))), 
%    not(
%       onOppositeTeams(Ballgame,Agent1,Agent2))).
if (not homeTeamPlayer(Ballgame, Agent1);not visitingTeamPlayer(Ballgame, Agent2)), (not homeTeamPlayer(Ballgame, Agent2);not visitingTeamPlayer(Ballgame, Agent1))then not onOppositeTeams(Ballgame, Agent1, Agent2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',92).

 /*   reactive_rule([  (not(homeTeamPlayer(Ballgame, Agent1));not(visitingTeamPlayer(Ballgame, Agent2))),
                       (not(homeTeamPlayer(Ballgame, Agent2));not(visitingTeamPlayer(Ballgame, Agent1)))
                    ],
                    [ not(onOppositeTeams(Ballgame,
                                          Agent1,
                                          Agent2))
                    ]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       ';'(
%          not(
%             homeTeamPlayer(Ballgame,Agent2)), 
%          not(
%             visitingTeamPlayer(Ballgame,Agent1))), 
%       onOppositeTeams(Ballgame,Agent1,Agent2)), 
%    homeTeamPlayer(Ballgame,Agent1)).
if (not homeTeamPlayer(Ballgame, Agent2);not visitingTeamPlayer(Ballgame, Agent1)), onOppositeTeams(Ballgame, Agent1, Agent2)then homeTeamPlayer(Ballgame, Agent1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',92).

 /*   reactive_rule([  (not(homeTeamPlayer(Ballgame, Agent2));not(visitingTeamPlayer(Ballgame, Agent1))),
                      onOppositeTeams(Ballgame, Agent1, Agent2)
                    ],
                    [homeTeamPlayer(Ballgame, Agent1)]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       ';'(
%          not(
%             homeTeamPlayer(Ballgame,Agent2)), 
%          not(
%             visitingTeamPlayer(Ballgame,Agent1))), 
%       onOppositeTeams(Ballgame,Agent1,Agent2)), 
%    visitingTeamPlayer(Ballgame,Agent2)).
if (not homeTeamPlayer(Ballgame, Agent2);not visitingTeamPlayer(Ballgame, Agent1)), onOppositeTeams(Ballgame, Agent1, Agent2)then visitingTeamPlayer(Ballgame, Agent2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',92).

 /*   reactive_rule([  (not(homeTeamPlayer(Ballgame, Agent2));not(visitingTeamPlayer(Ballgame, Agent1))),
                      onOppositeTeams(Ballgame, Agent1, Agent2)
                    ],
                    [visitingTeamPlayer(Ballgame, Agent2)]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       ';'(
%          not(
%             homeTeamPlayer(Ballgame,Agent1)), 
%          not(
%             visitingTeamPlayer(Ballgame,Agent2))), 
%       onOppositeTeams(Ballgame,Agent1,Agent2)), 
%    homeTeamPlayer(Ballgame,Agent2)).
if (not homeTeamPlayer(Ballgame, Agent1);not visitingTeamPlayer(Ballgame, Agent2)), onOppositeTeams(Ballgame, Agent1, Agent2)then homeTeamPlayer(Ballgame, Agent2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',92).

 /*   reactive_rule([  (not(homeTeamPlayer(Ballgame, Agent1));not(visitingTeamPlayer(Ballgame, Agent2))),
                      onOppositeTeams(Ballgame, Agent1, Agent2)
                    ],
                    [homeTeamPlayer(Ballgame, Agent2)]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       ';'(
%          not(
%             homeTeamPlayer(Ballgame,Agent1)), 
%          not(
%             visitingTeamPlayer(Ballgame,Agent2))), 
%       onOppositeTeams(Ballgame,Agent1,Agent2)), 
%    visitingTeamPlayer(Ballgame,Agent1)).
if (not homeTeamPlayer(Ballgame, Agent1);not visitingTeamPlayer(Ballgame, Agent2)), onOppositeTeams(Ballgame, Agent1, Agent2)then visitingTeamPlayer(Ballgame, Agent1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',92).

 /*   reactive_rule([  (not(homeTeamPlayer(Ballgame, Agent1));not(visitingTeamPlayer(Ballgame, Agent2))),
                      onOppositeTeams(Ballgame, Agent1, Agent2)
                    ],
                    [visitingTeamPlayer(Ballgame, Agent1)]).
 */
 %  "% =================================".
% '->'(
%    ';'(
%       ','(
%          homeTeamPlayer(Ballgame,Agent1), 
%          visitingTeamPlayer(Ballgame,Agent2)), 
%       ','(
%          homeTeamPlayer(Ballgame,Agent2), 
%          visitingTeamPlayer(Ballgame,Agent1))), 
%    onOppositeTeams(Ballgame,Agent1,Agent2)).
if homeTeamPlayer(Ballgame, Agent1), visitingTeamPlayer(Ballgame, Agent2);homeTeamPlayer(Ballgame, Agent2), visitingTeamPlayer(Ballgame, Agent1)then onOppositeTeams(Ballgame, Agent1, Agent2).
 %  reactive_rule([(homeTeamPlayer(Ballgame, Agent1), visitingTeamPlayer(Ballgame, Agent2);homeTeamPlayer(Ballgame, Agent2), visitingTeamPlayer(Ballgame, Agent1))], [onOppositeTeams(Ballgame, Agent1, Agent2)]).
 %  "% =================================".
% '->'(
%    ','(
%       visitingTeamPlayer(Ballgame,Agent2), 
%       not(
%          onOppositeTeams(Ballgame,Agent1,Agent2))), 
%    not(
%       homeTeamPlayer(Ballgame,Agent1))).
if visitingTeamPlayer(Ballgame, Agent2), not onOppositeTeams(Ballgame, Agent1, Agent2)then not homeTeamPlayer(Ballgame, Agent1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',92).

 /*  reactive_rule([ visitingTeamPlayer(Ballgame,Agent2),
   		not(onOppositeTeams(Ballgame,
   				    Agent1,
   				    Agent2))
   	      ],
   	      [not(homeTeamPlayer(Ballgame,Agent1))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       homeTeamPlayer(Ballgame,Agent1), 
%       not(
%          onOppositeTeams(Ballgame,Agent1,Agent2))), 
%    not(
%       visitingTeamPlayer(Ballgame,Agent2))).
if homeTeamPlayer(Ballgame, Agent1), not onOppositeTeams(Ballgame, Agent1, Agent2)then not visitingTeamPlayer(Ballgame, Agent2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',92).

 /*  reactive_rule([ homeTeamPlayer(Ballgame,Agent1),
   		not(onOppositeTeams(Ballgame,
   				    Agent1,
   				    Agent2))
   	      ],
   	      [not(visitingTeamPlayer(Ballgame,Agent2))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       visitingTeamPlayer(Ballgame,Agent1), 
%       not(
%          onOppositeTeams(Ballgame,Agent1,Agent2))), 
%    not(
%       homeTeamPlayer(Ballgame,Agent2))).
if visitingTeamPlayer(Ballgame, Agent1), not onOppositeTeams(Ballgame, Agent1, Agent2)then not homeTeamPlayer(Ballgame, Agent2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',92).

 /*  reactive_rule([ visitingTeamPlayer(Ballgame,Agent1),
   		not(onOppositeTeams(Ballgame,
   				    Agent1,
   				    Agent2))
   	      ],
   	      [not(homeTeamPlayer(Ballgame,Agent2))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       homeTeamPlayer(Ballgame,Agent2), 
%       not(
%          onOppositeTeams(Ballgame,Agent1,Agent2))), 
%    not(
%       visitingTeamPlayer(Ballgame,Agent1))).
if homeTeamPlayer(Ballgame, Agent2), not onOppositeTeams(Ballgame, Agent1, Agent2)then not visitingTeamPlayer(Ballgame, Agent1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',92).

 /*  reactive_rule([ homeTeamPlayer(Ballgame,Agent2),
   		not(onOppositeTeams(Ballgame,
   				    Agent1,
   				    Agent2))
   	      ],
   	      [not(visitingTeamPlayer(Ballgame,Agent1))]).
 */
 %  "% =================================".


% [ballgame,agent1,hardball,agent2,pitchermound,homeplate,time]
% Happens(Pitch(ballgame,agent1,hardball,agent2),time) &
% PitchermoundOf(ballgame) = pitchermound &
% HomeplateOf(ballgame) = homeplate ->
% HoldsAt(Near(agent1,pitchermound),time) &
% HoldsAt(Near(agent2,homeplate),time) &
% OnOppositeTeams(ballgame,agent1,agent2).
% '->'(
%    ','(
%       pitchermound(Ballgame,Pitchermound), 
%       ','(
%          homeplate(Ballgame,Homeplate), 
%          ';'(
%             not(
%                near(Agent1,Pitchermound)), 
%             ';'(
%                not(
%                   near(Agent2,Homeplate)), 
%                not(
%                   onOppositeTeams(Ballgame,Agent1,Agent2)))))), 
%    not(
%       pitch(Ballgame,Agent1,Hardball,Agent2))).
if pitchermound(Ballgame, Pitchermound), homeplate(Ballgame, Homeplate), (not near(Agent1, Pitchermound);not near(Agent2, Homeplate);not onOppositeTeams(Ballgame, Agent1, Agent2))then not pitch(Ballgame, Agent1, Hardball, Agent2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',99).

 /*   reactive_rule([ pitchermound(Ballgame, Pitchermound),
                      homeplate(Ballgame, Homeplate),
                       (not(near(Agent1, Pitchermound));not(near(Agent2, Homeplate));not(onOppositeTeams(Ballgame, Agent1, Agent2)))
                    ],
                    [ not(pitch(Ballgame,
                                Agent1,
                                Hardball,
                                Agent2))
                    ]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       homeplate(Ballgame,Homeplate), 
%       ','(
%          pitch(Ballgame,Agent1,Hardball,Agent2), 
%          ';'(
%             not(
%                near(Agent1,Pitchermound)), 
%             ';'(
%                not(
%                   near(Agent2,Homeplate)), 
%                not(
%                   onOppositeTeams(Ballgame,Agent1,Agent2)))))), 
%    not(
%       pitchermound(Ballgame,Pitchermound))).
if homeplate(Ballgame, Homeplate), pitch(Ballgame, Agent1, Hardball, Agent2), (not near(Agent1, Pitchermound);not near(Agent2, Homeplate);not onOppositeTeams(Ballgame, Agent1, Agent2))then not pitchermound(Ballgame, Pitchermound).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',99).

 /*   reactive_rule([ homeplate(Ballgame, Homeplate),
                      pitch(Ballgame,
                            Agent1,
                            Hardball,
                            Agent2),
                       (not(near(Agent1, Pitchermound));not(near(Agent2, Homeplate));not(onOppositeTeams(Ballgame, Agent1, Agent2)))
                    ],
                    [not(pitchermound(Ballgame, Pitchermound))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       pitchermound(Ballgame,Pitchermound), 
%       ','(
%          pitch(Ballgame,Agent1,Hardball,Agent2), 
%          ';'(
%             not(
%                near(Agent1,Pitchermound)), 
%             ';'(
%                not(
%                   near(Agent2,Homeplate)), 
%                not(
%                   onOppositeTeams(Ballgame,Agent1,Agent2)))))), 
%    not(
%       homeplate(Ballgame,Homeplate))).
if pitchermound(Ballgame, Pitchermound), pitch(Ballgame, Agent1, Hardball, Agent2), (not near(Agent1, Pitchermound);not near(Agent2, Homeplate);not onOppositeTeams(Ballgame, Agent1, Agent2))then not homeplate(Ballgame, Homeplate).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',99).

 /*   reactive_rule([ pitchermound(Ballgame, Pitchermound),
                      pitch(Ballgame,
                            Agent1,
                            Hardball,
                            Agent2),
                       (not(near(Agent1, Pitchermound));not(near(Agent2, Homeplate));not(onOppositeTeams(Ballgame, Agent1, Agent2)))
                    ],
                    [not(homeplate(Ballgame, Homeplate))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       pitch(Ballgame,Agent1,Hardball,Agent2), 
%       ','(
%          pitchermound(Ballgame,Pitchermound), 
%          homeplate(Ballgame,Homeplate))), 
%    near(Agent1,Pitchermound)).
near(Agent1, Pitchermound)if pitch(Ballgame, Agent1, Hardball, Agent2), pitchermound(Ballgame, Pitchermound), homeplate(Ballgame, Homeplate).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',99).

 /*  l_int(holds(near(Agent1,Pitchermound),Time_At),
         [ pitch(Ballgame,Agent1,Hardball,Agent2),
   	pitchermound(Ballgame,Pitchermound),
   	homeplate(Ballgame,Homeplate)
         ]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       pitch(Ballgame,Agent1,Hardball,Agent2), 
%       ','(
%          pitchermound(Ballgame,Pitchermound), 
%          homeplate(Ballgame,Homeplate))), 
%    near(Agent2,Homeplate)).
near(Agent2, Homeplate)if pitch(Ballgame, Agent1, Hardball, Agent2), pitchermound(Ballgame, Pitchermound), homeplate(Ballgame, Homeplate).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',99).

 /*  l_int(holds(near(Agent2,Homeplate),Time_At8),
         [ pitch(Ballgame,Agent1,Hardball,Agent2),
   	pitchermound(Ballgame,Pitchermound),
   	homeplate(Ballgame,Homeplate)
         ]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       pitch(Ballgame,Agent1,Hardball,Agent2), 
%       ','(
%          pitchermound(Ballgame,Pitchermound), 
%          homeplate(Ballgame,Homeplate))), 
%    onOppositeTeams(Ballgame,Agent1,Agent2)).
if pitch(Ballgame, Agent1, Hardball, Agent2), pitchermound(Ballgame, Pitchermound), homeplate(Ballgame, Homeplate)then onOppositeTeams(Ballgame, Agent1, Agent2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',99).

 /*  reactive_rule([ pitch(Ballgame,
   		      Agent1,
   		      Hardball,
   		      Agent2),
   		pitchermound(Ballgame,Pitchermound),
   		homeplate(Ballgame,Homeplate)
   	      ],
   	      [ onOppositeTeams(Ballgame,
   				Agent1,
   				Agent2)
   	      ]).
 */
 %  "% =================================".


% [ballgame,agent1,agent2,hardball,time]
% Happens(Pitch(ballgame,agent1,hardball,agent2),time) ->
% Happens(PitchInStrikeZone(ballgame,agent1,hardball,agent2),time) |
% Happens(PitchOutOfStrikeZone(ballgame,agent1,hardball,agent2),time).
% '->'(
%    ','(
%       not(
%          pitchOutOfStrikeZone(Ballgame,Agent1,Hardball,Agent2)), 
%       pitch(Ballgame,Agent1,Hardball,Agent2)), 
%    pitchInStrikeZone(Ballgame,Agent1,Hardball,Agent2)).
if not pitchOutOfStrikeZone(Ballgame, Agent1, Hardball, Agent2), pitch(Ballgame, Agent1, Hardball, Agent2)then pitchInStrikeZone(Ballgame, Agent1, Hardball, Agent2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',107).

 /*  reactive_rule([ not(pitchOutOfStrikeZone(Ballgame,
   					 Agent1,
   					 Hardball,
   					 Agent2)),
   		pitch(Ballgame,
   		      Agent1,
   		      Hardball,
   		      Agent2)
   	      ],
   	      [ pitchInStrikeZone(Ballgame,
   				  Agent1,
   				  Hardball,
   				  Agent2)
   	      ]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       not(
%          pitchInStrikeZone(Ballgame,Agent1,Hardball,Agent2)), 
%       pitch(Ballgame,Agent1,Hardball,Agent2)), 
%    pitchOutOfStrikeZone(Ballgame,Agent1,Hardball,Agent2)).
if not pitchInStrikeZone(Ballgame, Agent1, Hardball, Agent2), pitch(Ballgame, Agent1, Hardball, Agent2)then pitchOutOfStrikeZone(Ballgame, Agent1, Hardball, Agent2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',107).

 /*  reactive_rule([ not(pitchInStrikeZone(Ballgame,
   				      Agent1,
   				      Hardball,
   				      Agent2)),
   		pitch(Ballgame,
   		      Agent1,
   		      Hardball,
   		      Agent2)
   	      ],
   	      [ pitchOutOfStrikeZone(Ballgame,
   				     Agent1,
   				     Hardball,
   				     Agent2)
   	      ]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       not(
%          pitchInStrikeZone(Ballgame,Agent1,Hardball,Agent2)), 
%       not(
%          pitchOutOfStrikeZone(Ballgame,Agent1,Hardball,Agent2))), 
%    not(
%       pitch(Ballgame,Agent1,Hardball,Agent2))).
if not pitchInStrikeZone(Ballgame, Agent1, Hardball, Agent2), not pitchOutOfStrikeZone(Ballgame, Agent1, Hardball, Agent2)then not pitch(Ballgame, Agent1, Hardball, Agent2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',107).

 /*  reactive_rule([ not(pitchInStrikeZone(Ballgame,
   				      Agent1,
   				      Hardball,
   				      Agent2)),
   		not(pitchOutOfStrikeZone(Ballgame,
   					 Agent1,
   					 Hardball,
   					 Agent2))
   	      ],
   	      [ not(pitch(Ballgame,
   			  Agent1,
   			  Hardball,
   			  Agent2))
   	      ]).
 */
 %  "% =================================".


% [ballgame,agent1,agent2,hardball,time]
% Happens(PitchInStrikeZone(ballgame,agent1,hardball,agent2),time) ->
% !Happens(PitchOutOfStrikeZone(ballgame,agent1,hardball,agent2),time).
% '->'(
%    pitchInStrikeZone(Ballgame,Agent1,Hardball,Agent2), 
%    not(
%       pitchOutOfStrikeZone(Ballgame,Agent1,Hardball,Agent2))).
if pitchInStrikeZone(Ballgame, Agent1, Hardball, Agent2)then not pitchOutOfStrikeZone(Ballgame, Agent1, Hardball, Agent2).

 /*  reactive_rule([ pitchInStrikeZone(Ballgame,
   				  Agent1,
   				  Hardball,
   				  Agent2)
   	      ],
   	      [ not(pitchOutOfStrikeZone(Ballgame,
   					 Agent1,
   					 Hardball,
   					 Agent2))
   	      ]).
 */
 %  "% =================================".
% '->'(
%    pitchOutOfStrikeZone(Ballgame,Agent1,Hardball,Agent2), 
%    not(
%       pitchInStrikeZone(Ballgame,Agent1,Hardball,Agent2))).
if pitchOutOfStrikeZone(Ballgame, Agent1, Hardball, Agent2)then not pitchInStrikeZone(Ballgame, Agent1, Hardball, Agent2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',112).

 /*  reactive_rule([ pitchOutOfStrikeZone(Ballgame,
   				     Agent1,
   				     Hardball,
   				     Agent2)
   	      ],
   	      [ not(pitchInStrikeZone(Ballgame,
   				      Agent1,
   				      Hardball,
   				      Agent2))
   	      ]).
 */
 %  "% =================================".


% [ballgame,agent1,agent2,hardball,time]
% Happens(PitchInStrikeZone(ballgame,agent1,hardball,agent2),time) ->
% Happens(Swing(ballgame,agent2,hardball),time+1).
% '->'(
%    ','(
%       b(Time,When), 
%       pitchInStrikeZone(Ballgame,Agent1,Hardball,Agent2)), 
%    happens(
%       swing(Ballgame,Agent2,Hardball), 
%       When)).
if b(Time, A), pitchInStrikeZone(Ballgame, Agent1, Hardball, Agent2)then happens(swing(Ballgame, Agent2, Hardball), A).

 /*  reactive_rule([ b(Time,When),
   		pitchInStrikeZone(Ballgame,
   				  Agent1,
   				  Hardball,
   				  Agent2)
   	      ],
   	      [ happens(swing(Ballgame,
   			      Agent2,
   			      Hardball),
   			When)
   	      ]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       b(Time,When6), 
%       not(
%          happens(
%             swing(Ballgame,Agent2,Hardball), 
%             When6))), 
%    not(
%       pitchInStrikeZone(Ballgame,Agent1,Hardball,Agent2))).
if b(Time, A), not happens(swing(Ballgame, Agent2, Hardball), A)then not pitchInStrikeZone(Ballgame, Agent1, Hardball, Agent2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',116).

 /*  reactive_rule([ b(Time,When6),
   		not(happens(swing(Ballgame,
   				  Agent2,
   				  Hardball),
   			    When6))
   	      ],
   	      [ not(pitchInStrikeZone(Ballgame,
   				      Agent1,
   				      Hardball,
   				      Agent2))
   	      ]).
 */
 %  "% =================================".


% [ballgame,agent,hardball,time]
% Happens(Swing(ballgame,agent,hardball),time) ->
% Happens(SwingHit(ballgame,agent,hardball),time) |
% Happens(SwingMiss(ballgame,agent,hardball),time).
% '->'(
%    ','(
%       not(
%          swingMiss(Ballgame,Agent,Hardball)), 
%       swing(Ballgame,Agent,Hardball)), 
%    swingHit(Ballgame,Agent,Hardball)).
if not swingMiss(Ballgame, Agent, Hardball), swing(Ballgame, Agent, Hardball)then swingHit(Ballgame, Agent, Hardball).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',120).

 /*  reactive_rule([ not(swingMiss(Ballgame,
   			      Agent,
   			      Hardball)),
   		swing(Ballgame,Agent,Hardball)
   	      ],
   	      [swingHit(Ballgame,Agent,Hardball)]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       not(
%          swingHit(Ballgame,Agent,Hardball)), 
%       swing(Ballgame,Agent,Hardball)), 
%    swingMiss(Ballgame,Agent,Hardball)).
if not swingHit(Ballgame, Agent, Hardball), swing(Ballgame, Agent, Hardball)then swingMiss(Ballgame, Agent, Hardball).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',120).

 /*  reactive_rule([ not(swingHit(Ballgame,Agent,Hardball)),
   		swing(Ballgame,Agent,Hardball)
   	      ],
   	      [swingMiss(Ballgame,Agent,Hardball)]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       not(
%          swingHit(Ballgame,Agent,Hardball)), 
%       not(
%          swingMiss(Ballgame,Agent,Hardball))), 
%    not(
%       swing(Ballgame,Agent,Hardball))).
if not swingHit(Ballgame, Agent, Hardball), not swingMiss(Ballgame, Agent, Hardball)then not swing(Ballgame, Agent, Hardball).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',120).

 /*  reactive_rule([ not(swingHit(Ballgame,Agent,Hardball)),
   		not(swingMiss(Ballgame,
   			      Agent,
   			      Hardball))
   	      ],
   	      [not(swing(Ballgame,Agent,Hardball))]).
 */
 %  "% =================================".


% [ballgame,agent,hardball,time]
% Happens(SwingHit(ballgame,agent,hardball),time) ->
% !Happens(SwingMiss(ballgame,agent,hardball),time).
% '->'(
%    swingHit(Ballgame,Agent,Hardball), 
%    not(
%       swingMiss(Ballgame,Agent,Hardball))).
if swingHit(Ballgame, Agent, Hardball)then not swingMiss(Ballgame, Agent, Hardball).

 /*  reactive_rule([swingHit(Ballgame,Agent,Hardball)],
   	      [ not(swingMiss(Ballgame,
   			      Agent,
   			      Hardball))
   	      ]).
 */
 %  "% =================================".
% '->'(
%    swingMiss(Ballgame,Agent,Hardball), 
%    not(
%       swingHit(Ballgame,Agent,Hardball))).
if swingMiss(Ballgame, Agent, Hardball)then not swingHit(Ballgame, Agent, Hardball).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',125).

 /*  reactive_rule([swingMiss(Ballgame,Agent,Hardball)],
   	      [ not(swingHit(Ballgame,Agent,Hardball))
   	      ]).
 */
 %  "% =================================".


% [ballgame,agent,hardball,time]
% Happens(SwingHit(ballgame,agent,hardball),time) ->
% Happens(SwingHitFair(ballgame,agent,hardball),time) |
% Happens(SwingHitFoul(ballgame,agent,hardball),time).
% '->'(
%    ','(
%       not(
%          swingHitFoul(Ballgame,Agent,Hardball)), 
%       swingHit(Ballgame,Agent,Hardball)), 
%    swingHitFair(Ballgame,Agent,Hardball)).
if not swingHitFoul(Ballgame, Agent, Hardball), swingHit(Ballgame, Agent, Hardball)then swingHitFair(Ballgame, Agent, Hardball).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',129).

 /*  reactive_rule([ not(swingHitFoul(Ballgame,
   				 Agent,
   				 Hardball)),
   		swingHit(Ballgame,Agent,Hardball)
   	      ],
   	      [swingHitFair(Ballgame,Agent,Hardball)]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       not(
%          swingHitFair(Ballgame,Agent,Hardball)), 
%       swingHit(Ballgame,Agent,Hardball)), 
%    swingHitFoul(Ballgame,Agent,Hardball)).
if not swingHitFair(Ballgame, Agent, Hardball), swingHit(Ballgame, Agent, Hardball)then swingHitFoul(Ballgame, Agent, Hardball).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',129).

 /*  reactive_rule([ not(swingHitFair(Ballgame,
   				 Agent,
   				 Hardball)),
   		swingHit(Ballgame,Agent,Hardball)
   	      ],
   	      [swingHitFoul(Ballgame,Agent,Hardball)]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       not(
%          swingHitFair(Ballgame,Agent,Hardball)), 
%       not(
%          swingHitFoul(Ballgame,Agent,Hardball))), 
%    not(
%       swingHit(Ballgame,Agent,Hardball))).
if not swingHitFair(Ballgame, Agent, Hardball), not swingHitFoul(Ballgame, Agent, Hardball)then not swingHit(Ballgame, Agent, Hardball).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',129).

 /*  reactive_rule([ not(swingHitFair(Ballgame,
   				 Agent,
   				 Hardball)),
   		not(swingHitFoul(Ballgame,
   				 Agent,
   				 Hardball))
   	      ],
   	      [ not(swingHit(Ballgame,Agent,Hardball))
   	      ]).
 */
 %  "% =================================".


% [ballgame,agent,hardball,time]
% Happens(SwingHitFair(ballgame,agent,hardball),time) ->
% !Happens(SwingHitFoul(ballgame,agent,hardball),time).
% '->'(
%    swingHitFair(Ballgame,Agent,Hardball), 
%    not(
%       swingHitFoul(Ballgame,Agent,Hardball))).
if swingHitFair(Ballgame, Agent, Hardball)then not swingHitFoul(Ballgame, Agent, Hardball).

 /*  reactive_rule([swingHitFair(Ballgame,Agent,Hardball)],
   	      [ not(swingHitFoul(Ballgame,
   				 Agent,
   				 Hardball))
   	      ]).
 */
 %  "% =================================".
% '->'(
%    swingHitFoul(Ballgame,Agent,Hardball), 
%    not(
%       swingHitFair(Ballgame,Agent,Hardball))).
if swingHitFoul(Ballgame, Agent, Hardball)then not swingHitFair(Ballgame, Agent, Hardball).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',134).

 /*  reactive_rule([swingHitFoul(Ballgame,Agent,Hardball)],
   	      [ not(swingHitFair(Ballgame,
   				 Agent,
   				 Hardball))
   	      ]).
 */
 %  "% =================================".


% [ballgame,agent,hardball,time]
% Happens(SwingHitFair(ballgame,agent,hardball),time) ->
% Happens(SwingHitFairFly(ballgame,agent,hardball),time) |
% Happens(SwingHitFairGround(ballgame,agent,hardball),time).
% '->'(
%    ','(
%       not(
%          swingHitFairGround(Ballgame,Agent,Hardball)), 
%       swingHitFair(Ballgame,Agent,Hardball)), 
%    swingHitFairFly(Ballgame,Agent,Hardball)).
if not swingHitFairGround(Ballgame, Agent, Hardball), swingHitFair(Ballgame, Agent, Hardball)then swingHitFairFly(Ballgame, Agent, Hardball).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',138).

 /*  reactive_rule([ not(swingHitFairGround(Ballgame,
   				       Agent,
   				       Hardball)),
   		swingHitFair(Ballgame,Agent,Hardball)
   	      ],
   	      [ swingHitFairFly(Ballgame,
   				Agent,
   				Hardball)
   	      ]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       not(
%          swingHitFairFly(Ballgame,Agent,Hardball)), 
%       swingHitFair(Ballgame,Agent,Hardball)), 
%    swingHitFairGround(Ballgame,Agent,Hardball)).
if not swingHitFairFly(Ballgame, Agent, Hardball), swingHitFair(Ballgame, Agent, Hardball)then swingHitFairGround(Ballgame, Agent, Hardball).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',138).

 /*  reactive_rule([ not(swingHitFairFly(Ballgame,
   				    Agent,
   				    Hardball)),
   		swingHitFair(Ballgame,Agent,Hardball)
   	      ],
   	      [ swingHitFairGround(Ballgame,
   				   Agent,
   				   Hardball)
   	      ]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       not(
%          swingHitFairFly(Ballgame,Agent,Hardball)), 
%       not(
%          swingHitFairGround(Ballgame,Agent,Hardball))), 
%    not(
%       swingHitFair(Ballgame,Agent,Hardball))).
if not swingHitFairFly(Ballgame, Agent, Hardball), not swingHitFairGround(Ballgame, Agent, Hardball)then not swingHitFair(Ballgame, Agent, Hardball).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',138).

 /*  reactive_rule([ not(swingHitFairFly(Ballgame,
   				    Agent,
   				    Hardball)),
   		not(swingHitFairGround(Ballgame,
   				       Agent,
   				       Hardball))
   	      ],
   	      [ not(swingHitFair(Ballgame,
   				 Agent,
   				 Hardball))
   	      ]).
 */
 %  "% =================================".


% [ballgame,agent,hardball,time]
% Happens(SwingHitFairFly(ballgame,agent,hardball),time) ->
% Happens(SwingHitFairGround(ballgame,agent,hardball),time).
% '->'(
%    swingHitFairFly(Ballgame,Agent,Hardball), 
%    swingHitFairGround(Ballgame,Agent,Hardball)).
if swingHitFairFly(Ballgame, Agent, Hardball)then swingHitFairGround(Ballgame, Agent, Hardball).

 /*  reactive_rule([ swingHitFairFly(Ballgame,
   				Agent,
   				Hardball)
   	      ],
   	      [ swingHitFairGround(Ballgame,
   				   Agent,
   				   Hardball)
   	      ]).
 */
 %  "% =================================".
% '->'(
%    not(
%       swingHitFairGround(Ballgame,Agent,Hardball)), 
%    not(
%       swingHitFairFly(Ballgame,Agent,Hardball))).
if not swingHitFairGround(Ballgame, Agent, Hardball)then not swingHitFairFly(Ballgame, Agent, Hardball).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',143).

 /*  reactive_rule([ not(swingHitFairGround(Ballgame,
   				       Agent,
   				       Hardball))
   	      ],
   	      [ not(swingHitFairFly(Ballgame,
   				    Agent,
   				    Hardball))
   	      ]).
 */
 %  "% =================================".


% [ballgame,agent,hardball,homeplate,firstbase,time]
% Happens(SwingHit(ballgame,agent,hardball),time) &
% HomeplateOf(ballgame) = homeplate &
% FirstBaseOf(ballgame) = firstbase ->
% Happens(RunFromTo(agent,homeplate,firstbase),time).
% '->'(
%    ','(
%       swingHit(Ballgame,Agent,Hardball), 
%       ','(
%          homeplate(Ballgame,Homeplate), 
%          firstBase(Ballgame,Firstbase))), 
%    runFromTo(Agent,Homeplate,Firstbase)).
runFromTo(Agent, Homeplate, Firstbase)if swingHit(Ballgame, Agent, Hardball), homeplate(Ballgame, Homeplate), firstBase(Ballgame, Firstbase).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',147).

 /*  l_events(happens(runFromTo(Agent,Homeplate,Firstbase),
   		 Time_From,
   		 Time_From),
   	 [ swingHit(Ballgame,Agent,Hardball),
   	   homeplate(Ballgame,Homeplate),
   	   firstBase(Ballgame,Firstbase)
   	 ]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       homeplate(Ballgame,Homeplate), 
%       ','(
%          firstBase(Ballgame,Firstbase), 
%          not(
%             runFromTo(Agent,Homeplate,Firstbase)))), 
%    not(
%       swingHit(Ballgame,Agent,Hardball))).
if homeplate(Ballgame, Homeplate), firstBase(Ballgame, Firstbase), not runFromTo(Agent, Homeplate, Firstbase)then not swingHit(Ballgame, Agent, Hardball).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',147).

 /*  reactive_rule([ homeplate(Ballgame,Homeplate),
   		firstBase(Ballgame,Firstbase),
   		not(runFromTo(Agent,
   			      Homeplate,
   			      Firstbase))
   	      ],
   	      [ not(swingHit(Ballgame,Agent,Hardball))
   	      ]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       firstBase(Ballgame,Firstbase), 
%       ','(
%          swingHit(Ballgame,Agent,Hardball), 
%          not(
%             runFromTo(Agent,Homeplate,Firstbase)))), 
%    not(
%       homeplate(Ballgame,Homeplate))).
if firstBase(Ballgame, Firstbase), swingHit(Ballgame, Agent, Hardball), not runFromTo(Agent, Homeplate, Firstbase)then not homeplate(Ballgame, Homeplate).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',147).

 /*  reactive_rule([ firstBase(Ballgame,Firstbase),
   		swingHit(Ballgame,Agent,Hardball),
   		not(runFromTo(Agent,
   			      Homeplate,
   			      Firstbase))
   	      ],
   	      [not(homeplate(Ballgame,Homeplate))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       homeplate(Ballgame,Homeplate), 
%       ','(
%          swingHit(Ballgame,Agent,Hardball), 
%          not(
%             runFromTo(Agent,Homeplate,Firstbase)))), 
%    not(
%       firstBase(Ballgame,Firstbase))).
if homeplate(Ballgame, Homeplate), swingHit(Ballgame, Agent, Hardball), not runFromTo(Agent, Homeplate, Firstbase)then not firstBase(Ballgame, Firstbase).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',147).

 /*  reactive_rule([ homeplate(Ballgame,Homeplate),
   		swingHit(Ballgame,Agent,Hardball),
   		not(runFromTo(Agent,
   			      Homeplate,
   			      Firstbase))
   	      ],
   	      [not(firstBase(Ballgame,Firstbase))]).
 */
 %  "% =================================".


% [ballgame,agent,hardball,homeplate,outfield,time]
% HomeplateOf(ballgame) = homeplate &
% OutfieldOf(ballgame) = outfield &
% Happens(SwingHitFairFly(ballgame,agent,hardball),time) ->
% Happens(HitFromTo(agent,hardball,homeplate,outfield),time).
% '->'(
%    ','(
%       homeplate(Ballgame,Homeplate), 
%       ','(
%          outfield(Ballgame,Outfield), 
%          swingHitFairFly(Ballgame,Agent,Hardball))), 
%    hitFromTo(Agent,Hardball,Homeplate,Outfield)).
if homeplate(Ballgame, Homeplate), outfield(Ballgame, Outfield), swingHitFairFly(Ballgame, Agent, Hardball)then hitFromTo(Agent, Hardball, Homeplate, Outfield).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',153).

 /*  reactive_rule([ homeplate(Ballgame,Homeplate),
   		outfield(Ballgame,Outfield),
   		swingHitFairFly(Ballgame,
   				Agent,
   				Hardball)
   	      ],
   	      [ hitFromTo(Agent,
   			  Hardball,
   			  Homeplate,
   			  Outfield)
   	      ]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       outfield(Ballgame,Outfield), 
%       ','(
%          swingHitFairFly(Ballgame,Agent,Hardball), 
%          not(
%             hitFromTo(Agent,Hardball,Homeplate,Outfield)))), 
%    not(
%       homeplate(Ballgame,Homeplate))).
if outfield(Ballgame, Outfield), swingHitFairFly(Ballgame, Agent, Hardball), not hitFromTo(Agent, Hardball, Homeplate, Outfield)then not homeplate(Ballgame, Homeplate).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',153).

 /*  reactive_rule([ outfield(Ballgame,Outfield),
   		swingHitFairFly(Ballgame,
   				Agent,
   				Hardball),
   		not(hitFromTo(Agent,
   			      Hardball,
   			      Homeplate,
   			      Outfield))
   	      ],
   	      [not(homeplate(Ballgame,Homeplate))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       swingHitFairFly(Ballgame,Agent,Hardball), 
%       ','(
%          homeplate(Ballgame,Homeplate), 
%          not(
%             hitFromTo(Agent,Hardball,Homeplate,Outfield)))), 
%    not(
%       outfield(Ballgame,Outfield))).
if swingHitFairFly(Ballgame, Agent, Hardball), homeplate(Ballgame, Homeplate), not hitFromTo(Agent, Hardball, Homeplate, Outfield)then not outfield(Ballgame, Outfield).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',153).

 /*  reactive_rule([ swingHitFairFly(Ballgame,
   				Agent,
   				Hardball),
   		homeplate(Ballgame,Homeplate),
   		not(hitFromTo(Agent,
   			      Hardball,
   			      Homeplate,
   			      Outfield))
   	      ],
   	      [not(outfield(Ballgame,Outfield))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       outfield(Ballgame,Outfield), 
%       ','(
%          homeplate(Ballgame,Homeplate), 
%          not(
%             hitFromTo(Agent,Hardball,Homeplate,Outfield)))), 
%    not(
%       swingHitFairFly(Ballgame,Agent,Hardball))).
if outfield(Ballgame, Outfield), homeplate(Ballgame, Homeplate), not hitFromTo(Agent, Hardball, Homeplate, Outfield)then not swingHitFairFly(Ballgame, Agent, Hardball).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',153).

 /*  reactive_rule([ outfield(Ballgame,Outfield),
   		homeplate(Ballgame,Homeplate),
   		not(hitFromTo(Agent,
   			      Hardball,
   			      Homeplate,
   			      Outfield))
   	      ],
   	      [ not(swingHitFairFly(Ballgame,
   				    Agent,
   				    Hardball))
   	      ]).
 */
 %  "% =================================".


%; End of file.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',157).
% translate: ending  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e.lps 
