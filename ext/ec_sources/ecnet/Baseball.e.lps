:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Arson.e',87).
% translate: unskipped  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e.lps 
:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(lps).
% translate: begining  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e.lps 
% Wed, 07 Oct 2020 20:49:10 GMT File: <stream>(0x55afae0ccb00)%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{EthanAllen:1982,
%;   author = "Ethan Allen",
%;   year = "1982",
%;   title = "Baseball Play and Strategy",
%;   address = "Robert E. Krieger",
%;   publisher = "Malabar, FL",
%;   edition = "Third",
%; }
%;
%; @book{Coombs:1967,
%;   author = "Jack Coombs",
%;   year = "1967",
%;   title = "Baseball",
%;   address = "Englewood Cliffs, NJ",
%;   publisher = "Prentice-Hall",
%;   edition = "4th",
%;   howpublished = "revised by Danny Litwhiler",
%; }
%;

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',31).
% sort ballgame
sort(ballgame).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',33).
% sort hardball: ball
subsort(hardball,ball).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',35).
% sort base: physobj
subsort(base,physobj).

% sort firstbase: base
subsort(firstbase,base).
%;sort secondbase: base
%;sort thirdbase: base

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',39).
% sort homeplate: base
subsort(homeplate,base).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',41).
% sort mound: physobj
subsort(mound,physobj).

% sort pitchermound: mound
subsort(pitchermound,mound).
%;sort furniture: physobj
%;sort bench: furniture
%;sort playerbench: bench

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',48).
% sort field: physobj
subsort(field,physobj).
%;sort shortstoparea: field
%;sort catcherarea: field

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',53).
% sort outfield: field
subsort(outfield,field).
%;sort leftfield: outfield
%;sort centerfield: outfield
%;sort rightfield: outfield

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',58).
% function BallOf(ballgame): hardball

 /*  axiom(function_argtypes(Function_ArgtypesP_Num3_V, ballOf(ballgame), hardball),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',58).
function_argtypes(Function_ArgtypesP_Num3_V1,
		  ballOf(ballgame),
		  hardball).
 %  predicate(ball(ballgame,hardball)).
 %  predicate(ball(ballgame,hardball)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',58).
predicates([ball/2]).
mpred_prop(ball(ballgame,hardball),predicate).

 /*  axiom(functional_predicate(ballOf, ball),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',58).
functional_predicate(ballOf,ball).
resultIsa(ballOf,hardball).

% function FirstBaseOf(ballgame): firstbase

 /*  axiom(function_argtypes(Function_ArgtypesP_Num3_V, firstBaseOf(ballgame), firstbase),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',58).
function_argtypes(Function_ArgtypesP_Num3_V1,
		  firstBaseOf(ballgame),
		  firstbase).
 %  predicate(firstBase(ballgame,firstbase)).
 %  predicate(firstBase(ballgame,firstbase)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',58).
predicates([firstBase/2]).
mpred_prop(firstBase(ballgame,firstbase),predicate).

 /*  axiom(functional_predicate(firstBaseOf, firstBase),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',58).
functional_predicate(firstBaseOf,firstBase).
resultIsa(firstBaseOf,firstbase).
%;function SecondBaseOf(ballgame): secondbase
%;function ThirdBaseOf(ballgame): thirdbase

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',62).
% function HomeplateOf(ballgame): homeplate

 /*  axiom(function_argtypes(Function_ArgtypesP_Num3_V, homeplateOf(ballgame), homeplate),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',62).
function_argtypes(Function_ArgtypesP_Num3_V1,
		  homeplateOf(ballgame),
		  homeplate).
 %  predicate(homeplate(ballgame,homeplate)).
 %  predicate(homeplate(ballgame,homeplate)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',62).
predicates([homeplate/2]).
mpred_prop(homeplate(ballgame,homeplate),predicate).

 /*  axiom(functional_predicate(homeplateOf, homeplate),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',62).
functional_predicate(homeplateOf,homeplate).
resultIsa(homeplateOf,homeplate).

% function OutfieldOf(ballgame): outfield

 /*  axiom(function_argtypes(Function_ArgtypesP_Num3_V, outfieldOf(ballgame), outfield),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',62).
function_argtypes(Function_ArgtypesP_Num3_V1,
		  outfieldOf(ballgame),
		  outfield).
 %  predicate(outfield(ballgame,outfield)).
 %  predicate(outfield(ballgame,outfield)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',62).
predicates([outfield/2]).
mpred_prop(outfield(ballgame,outfield),predicate).

 /*  axiom(functional_predicate(outfieldOf, outfield),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',62).
functional_predicate(outfieldOf,outfield).
resultIsa(outfieldOf,outfield).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',64).
% function PitchermoundOf(ballgame): pitchermound

 /*  axiom(function_argtypes(Function_ArgtypesP_Num3_V, pitchermoundOf(ballgame), pitchermound),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',64).
function_argtypes(Function_ArgtypesP_Num3_V1,
		  pitchermoundOf(ballgame),
		  pitchermound).
 %  predicate(pitchermound(ballgame,pitchermound)).
 %  predicate(pitchermound(ballgame,pitchermound)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',64).
predicates([pitchermound/2]).
mpred_prop(pitchermound(ballgame,pitchermound),predicate).

 /*  axiom(functional_predicate(pitchermoundOf, pitchermound),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',64).
functional_predicate(pitchermoundOf,pitchermound).
resultIsa(pitchermoundOf,pitchermound).

% function PlayerbenchOf(ballgame): playerbench

 /*  axiom(function_argtypes(Function_ArgtypesP_Num3_V, playerbenchOf(ballgame), playerbench),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',64).
function_argtypes(Function_ArgtypesP_Num3_V1,
		  playerbenchOf(ballgame),
		  playerbench).
 %  predicate(playerbench(ballgame,playerbench)).
 %  predicate(playerbench(ballgame,playerbench)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',64).
predicates([playerbench/2]).
mpred_prop(playerbench(ballgame,playerbench),predicate).

 /*  axiom(functional_predicate(playerbenchOf, playerbench),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',64).
functional_predicate(playerbenchOf,playerbench).
resultIsa(playerbenchOf,playerbench).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',67).
% predicate HomeTeamPlayer(ballgame,agent)
 %  predicate(homeTeamPlayer(ballgame,agent)).
 %  predicate(homeTeamPlayer(ballgame,agent)).
predicates([homeTeamPlayer/2]).
mpred_prop(homeTeamPlayer(ballgame,agent),predicate).

% predicate VisitingTeamPlayer(ballgame,agent)
 %  predicate(visitingTeamPlayer(ballgame,agent)).
 %  predicate(visitingTeamPlayer(ballgame,agent)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',67).
predicates([visitingTeamPlayer/2]).
mpred_prop(visitingTeamPlayer(ballgame,agent),predicate).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',69).
% predicate Player(ballgame,agent)
 %  predicate(player(ballgame,agent)).
 %  predicate(player(ballgame,agent)).
predicates([player/2]).
mpred_prop(player(ballgame,agent),predicate).

% predicate OnOppositeTeams(ballgame,agent,agent)
 %  predicate(onOppositeTeams(ballgame,agent,agent)).
 %  predicate(onOppositeTeams(ballgame,agent,agent)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',69).
predicates([onOppositeTeams/3]).
mpred_prop(onOppositeTeams(ballgame,agent,agent),predicate).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',72).
% event Pitch(ballgame,agent,hardball,agent)
 %  event(pitch(ballgame,agent,hardball,agent)).
 %  event(pitch(ballgame,agent,hardball,agent)).
events([pitch/4]).
mpred_prop(pitch(ballgame,agent,hardball,agent),event).

% event PitchInStrikeZone(ballgame,agent,hardball,agent)
 %  event(pitchInStrikeZone(ballgame,agent,hardball,agent)).
 %  event(pitchInStrikeZone(ballgame,agent,hardball,agent)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',72).
events([pitchInStrikeZone/4]).
mpred_prop(pitchInStrikeZone(ballgame,agent,hardball,agent),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',74).
% event PitchOutOfStrikeZone(ballgame,agent,hardball,agent)
 %  event(pitchOutOfStrikeZone(ballgame,agent,hardball,agent)).
 %  event(pitchOutOfStrikeZone(ballgame,agent,hardball,agent)).
events([pitchOutOfStrikeZone/4]).
mpred_prop(pitchOutOfStrikeZone(ballgame,agent,hardball,agent),event).

% event Swing(ballgame,agent,hardball)
 %  event(swing(ballgame,agent,hardball)).
 %  event(swing(ballgame,agent,hardball)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',74).
events([swing/3]).
mpred_prop(swing(ballgame,agent,hardball),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',76).
% event SwingMiss(ballgame,agent,hardball)
 %  event(swingMiss(ballgame,agent,hardball)).
 %  event(swingMiss(ballgame,agent,hardball)).
events([swingMiss/3]).
mpred_prop(swingMiss(ballgame,agent,hardball),event).

% event SwingHit(ballgame,agent,hardball)
 %  event(swingHit(ballgame,agent,hardball)).
 %  event(swingHit(ballgame,agent,hardball)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',76).
events([swingHit/3]).
mpred_prop(swingHit(ballgame,agent,hardball),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',78).
% event SwingHitFair(ballgame,agent,hardball)
 %  event(swingHitFair(ballgame,agent,hardball)).
 %  event(swingHitFair(ballgame,agent,hardball)).
events([swingHitFair/3]).
mpred_prop(swingHitFair(ballgame,agent,hardball),event).

% event SwingHitFoul(ballgame,agent,hardball)
 %  event(swingHitFoul(ballgame,agent,hardball)).
 %  event(swingHitFoul(ballgame,agent,hardball)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',78).
events([swingHitFoul/3]).
mpred_prop(swingHitFoul(ballgame,agent,hardball),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',80).
% event SwingHitFairFly(ballgame,agent,hardball)
 %  event(swingHitFairFly(ballgame,agent,hardball)).
 %  event(swingHitFairFly(ballgame,agent,hardball)).
events([swingHitFairFly/3]).
mpred_prop(swingHitFairFly(ballgame,agent,hardball),event).

% event SwingHitFairGround(ballgame,agent,hardball)
 %  event(swingHitFairGround(ballgame,agent,hardball)).
 %  event(swingHitFairGround(ballgame,agent,hardball)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',80).
events([swingHitFairGround/3]).
mpred_prop(swingHitFairGround(ballgame,agent,hardball),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',83).
% [ballgame,agent]
% HomeTeamPlayer(ballgame,agent) ->
% !VisitingTeamPlayer(ballgame,agent).

 /*  homeTeamPlayer(Ballgame, Agent) ->
       not(visitingTeamPlayer(Ballgame, Agent)).
 */
if homeTeamPlayer(Ballgame, Agent)then not visitingTeamPlayer(Ballgame, Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',83).

 /*  reactive_rule([homeTeamPlayer(Ballgame,Agent)],
   	      [not(visitingTeamPlayer(Ballgame,Agent))]).
 */


% [ballgame,agent]
 % HomeTeamPlayer(ballgame,agent) -> Player(ballgame,agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',86).

 /*  homeTeamPlayer(Ballgame, Agent) ->
       player(Ballgame, Agent).
 */
if homeTeamPlayer(Ballgame, Agent)then player(Ballgame, Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',86).

 /*  reactive_rule([homeTeamPlayer(Ballgame,Agent)],
   	      [player(Ballgame,Agent)]).
 */


% [ballgame,agent]
 % VisitingTeamPlayer(ballgame,agent) -> Player(ballgame,agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',88).

 /*  visitingTeamPlayer(Ballgame, Agent) ->
       player(Ballgame, Agent).
 */
if visitingTeamPlayer(Ballgame, Agent)then player(Ballgame, Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',88).

 /*  reactive_rule([visitingTeamPlayer(Ballgame,Agent)],
   	      [player(Ballgame,Agent)]).
 */


% [ballgame,agent1,agent2]
% OnOppositeTeams(ballgame,agent1,agent2) <->
% (HomeTeamPlayer(ballgame,agent1) &
%  VisitingTeamPlayer(ballgame,agent2)) |
% (HomeTeamPlayer(ballgame,agent2) &
%  VisitingTeamPlayer(ballgame,agent1)).
 %  <->(onOppositeTeams(Ballgame, Agent1, Agent2),  (homeTeamPlayer(Ballgame, Agent1), visitingTeamPlayer(Ballgame, Agent2);homeTeamPlayer(Ballgame, Agent2), visitingTeamPlayer(Ballgame, Agent1))).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',92).

 /*  (   onOppositeTeams(Ballgame, Agent1, Agent2)
   ->  (   homeTeamPlayer(Ballgame, Agent1),
           visitingTeamPlayer(Ballgame, Agent2)
       ;   homeTeamPlayer(Ballgame, Agent2),
           visitingTeamPlayer(Ballgame, Agent1)
       )
   ).
 */
if onOppositeTeams(Ballgame, Agent1, Agent2)then homeTeamPlayer(Ballgame, Agent1), visitingTeamPlayer(Ballgame, Agent2);homeTeamPlayer(Ballgame, Agent2), visitingTeamPlayer(Ballgame, Agent1).
 %  reactive_rule([onOppositeTeams(Ballgame, Agent1, Agent2)], [(homeTeamPlayer(Ballgame, Agent1), visitingTeamPlayer(Ballgame, Agent2);homeTeamPlayer(Ballgame, Agent2), visitingTeamPlayer(Ballgame, Agent1))]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',92).

 /*  (   (   homeTeamPlayer(Ballgame, Agent1),
           visitingTeamPlayer(Ballgame, Agent2)
       ;   homeTeamPlayer(Ballgame, Agent2),
           visitingTeamPlayer(Ballgame, Agent1)
       )
   ->  onOppositeTeams(Ballgame, Agent1, Agent2)
   ).
 */
if homeTeamPlayer(Ballgame, Agent1), visitingTeamPlayer(Ballgame, Agent2);homeTeamPlayer(Ballgame, Agent2), visitingTeamPlayer(Ballgame, Agent1)then onOppositeTeams(Ballgame, Agent1, Agent2).
 %  reactive_rule([(homeTeamPlayer(Ballgame, Agent1), visitingTeamPlayer(Ballgame, Agent2);homeTeamPlayer(Ballgame, Agent2), visitingTeamPlayer(Ballgame, Agent1))], [onOppositeTeams(Ballgame, Agent1, Agent2)]).


% [ballgame,agent1,hardball,agent2,pitchermound,homeplate,time]
% Happens(Pitch(ballgame,agent1,hardball,agent2),time) &
% PitchermoundOf(ballgame) = pitchermound &
% HomeplateOf(ballgame) = homeplate ->
% HoldsAt(Near(agent1,pitchermound),time) &
% HoldsAt(Near(agent2,homeplate),time) &
% OnOppositeTeams(ballgame,agent1,agent2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',99).

 /*  (   happens(pitch(Ballgame, Agent1, Hardball, Agent2),
               Time),
       pitchermound(Ballgame, Pitchermound),
       homeplate(Ballgame, Homeplate)
   ->  holds_at(near(Agent1, Pitchermound), Time),
       holds_at(near(Agent2, Homeplate), Time),
       onOppositeTeams(Ballgame, Agent1, Agent2)
   ).
 */
if happens(pitch(Ballgame, Agent1, Hardball, Agent2), Time), pitchermound(Ballgame, Pitchermound), homeplate(Ballgame, Homeplate)then near(Agent1, Pitchermound)at Time, near(Agent2, Homeplate)at Time, onOppositeTeams(Ballgame, Agent1, Agent2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',99).

 /*  reactive_rule([ happens(pitch(Ballgame,
   			      Agent1,
   			      Hardball,
   			      Agent2),
   			Time),
   		pitchermound(Ballgame,Pitchermound),
   		homeplate(Ballgame,Homeplate)
   	      ],
   	      [ holds(near(Agent1,Pitchermound),Time),
   		holds(near(Agent2,Homeplate),Time),
   		onOppositeTeams(Ballgame,
   				Agent1,
   				Agent2)
   	      ]).
 */


% [ballgame,agent1,agent2,hardball,time]
% Happens(Pitch(ballgame,agent1,hardball,agent2),time) ->
% Happens(PitchInStrikeZone(ballgame,agent1,hardball,agent2),time) |
% Happens(PitchOutOfStrikeZone(ballgame,agent1,hardball,agent2),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',107).

 /*  happens(pitch(Ballgame, Agent1, Hardball, Agent2), Time) ->
       (   happens(pitchInStrikeZone(Ballgame,
                                     Agent1,
                                     Hardball,
                                     Agent2),
                   Time)
       ;   happens(pitchOutOfStrikeZone(Ballgame,
                                        Agent1,
                                        Hardball,
                                        Agent2),
                   Time)
       ).
 */
if happens(pitch(Ballgame, Agent1, Hardball, Agent2), Time)then happens(pitchInStrikeZone(Ballgame, Agent1, Hardball, Agent2), Time);happens(pitchOutOfStrikeZone(Ballgame, Agent1, Hardball, Agent2), Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',107).

 /*   reactive_rule([ happens(pitch(Ballgame,
                                    Agent1,
                                    Hardball,
                                    Agent2),
                              Time)
                    ],
                    [  (happens(pitchInStrikeZone(Ballgame, Agent1, Hardball, Agent2), Time);happens(pitchOutOfStrikeZone(Ballgame, Agent1, Hardball, Agent2), Time))
                    ]).
 */


% [ballgame,agent1,agent2,hardball,time]
% Happens(PitchInStrikeZone(ballgame,agent1,hardball,agent2),time) ->
% !Happens(PitchOutOfStrikeZone(ballgame,agent1,hardball,agent2),time).

 /*  happens(pitchInStrikeZone(Ballgame, Agent1, Hardball, Agent2), Time) ->
       not(happens(pitchOutOfStrikeZone(Ballgame,
                                        Agent1,
                                        Hardball,
                                        Agent2),
                   Time)).
 */
if happens(pitchInStrikeZone(Ballgame, Agent1, Hardball, Agent2), Time)then not happens(pitchOutOfStrikeZone(Ballgame, Agent1, Hardball, Agent2), Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',112).

 /*  reactive_rule([ happens(pitchInStrikeZone(Ballgame,
   					  Agent1,
   					  Hardball,
   					  Agent2),
   			Time)
   	      ],
   	      [ not(happens(pitchOutOfStrikeZone(Ballgame,
   						 Agent1,
   						 Hardball,
   						 Agent2),
   			    Time))
   	      ]).
 */


% [ballgame,agent1,agent2,hardball,time]
% Happens(PitchInStrikeZone(ballgame,agent1,hardball,agent2),time) ->
% Happens(Swing(ballgame,agent2,hardball),time+1).

 /*  happens(pitchInStrikeZone(Ballgame, Agent1, Hardball, Agent2), Time) ->
       happens(swing(Ballgame, Agent2, Hardball), Time+1).
 */
if happens(pitchInStrikeZone(Ballgame, Agent1, Hardball, Agent2), Time)then observe swing(Ballgame, Agent2, Hardball)at Time+1.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',116).

 /*  reactive_rule([ happens(pitchInStrikeZone(Ballgame,
   					  Agent1,
   					  Hardball,
   					  Agent2),
   			Time)
   	      ],
   	      [ observe(at(swing(Ballgame,
   				 Agent2,
   				 Hardball),
   			   Time+1))
   	      ]).
 */


% [ballgame,agent,hardball,time]
% Happens(Swing(ballgame,agent,hardball),time) ->
% Happens(SwingHit(ballgame,agent,hardball),time) |
% Happens(SwingMiss(ballgame,agent,hardball),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',120).

 /*  happens(swing(Ballgame, Agent, Hardball), Time) ->
       (   happens(swingHit(Ballgame, Agent, Hardball),
                   Time)
       ;   happens(swingMiss(Ballgame, Agent, Hardball),
                   Time)
       ).
 */
if happens(swing(Ballgame, Agent, Hardball), Time)then happens(swingHit(Ballgame, Agent, Hardball), Time);happens(swingMiss(Ballgame, Agent, Hardball), Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',120).

 /*   reactive_rule([ happens(swing(Ballgame, Agent, Hardball),
                              Time)
                    ],
                    [  (happens(swingHit(Ballgame, Agent, Hardball), Time);happens(swingMiss(Ballgame, Agent, Hardball), Time))
                    ]).
 */


% [ballgame,agent,hardball,time]
% Happens(SwingHit(ballgame,agent,hardball),time) ->
% !Happens(SwingMiss(ballgame,agent,hardball),time).

 /*  happens(swingHit(Ballgame, Agent, Hardball), Time) ->
       not(happens(swingMiss(Ballgame, Agent, Hardball),
                   Time)).
 */
if happens(swingHit(Ballgame, Agent, Hardball), Time)then not happens(swingMiss(Ballgame, Agent, Hardball), Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',125).

 /*  reactive_rule([ happens(swingHit(Ballgame,
   				 Agent,
   				 Hardball),
   			Time)
   	      ],
   	      [ not(happens(swingMiss(Ballgame,
   				      Agent,
   				      Hardball),
   			    Time))
   	      ]).
 */


% [ballgame,agent,hardball,time]
% Happens(SwingHit(ballgame,agent,hardball),time) ->
% Happens(SwingHitFair(ballgame,agent,hardball),time) |
% Happens(SwingHitFoul(ballgame,agent,hardball),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',129).

 /*  happens(swingHit(Ballgame, Agent, Hardball), Time) ->
       (   happens(swingHitFair(Ballgame, Agent, Hardball),
                   Time)
       ;   happens(swingHitFoul(Ballgame, Agent, Hardball),
                   Time)
       ).
 */
if happens(swingHit(Ballgame, Agent, Hardball), Time)then happens(swingHitFair(Ballgame, Agent, Hardball), Time);happens(swingHitFoul(Ballgame, Agent, Hardball), Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',129).

 /*   reactive_rule([ happens(swingHit(Ballgame, Agent, Hardball),
                              Time)
                    ],
                    [  (happens(swingHitFair(Ballgame, Agent, Hardball), Time);happens(swingHitFoul(Ballgame, Agent, Hardball), Time))
                    ]).
 */


% [ballgame,agent,hardball,time]
% Happens(SwingHitFair(ballgame,agent,hardball),time) ->
% !Happens(SwingHitFoul(ballgame,agent,hardball),time).

 /*  happens(swingHitFair(Ballgame, Agent, Hardball), Time) ->
       not(happens(swingHitFoul(Ballgame, Agent, Hardball),
                   Time)).
 */
if happens(swingHitFair(Ballgame, Agent, Hardball), Time)then not happens(swingHitFoul(Ballgame, Agent, Hardball), Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',134).

 /*  reactive_rule([ happens(swingHitFair(Ballgame,
   				     Agent,
   				     Hardball),
   			Time)
   	      ],
   	      [ not(happens(swingHitFoul(Ballgame,
   					 Agent,
   					 Hardball),
   			    Time))
   	      ]).
 */


% [ballgame,agent,hardball,time]
% Happens(SwingHitFair(ballgame,agent,hardball),time) ->
% Happens(SwingHitFairFly(ballgame,agent,hardball),time) |
% Happens(SwingHitFairGround(ballgame,agent,hardball),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',138).

 /*  happens(swingHitFair(Ballgame, Agent, Hardball), Time) ->
       (   happens(swingHitFairFly(Ballgame, Agent, Hardball),
                   Time)
       ;   happens(swingHitFairGround(Ballgame, Agent, Hardball),
                   Time)
       ).
 */
if happens(swingHitFair(Ballgame, Agent, Hardball), Time)then happens(swingHitFairFly(Ballgame, Agent, Hardball), Time);happens(swingHitFairGround(Ballgame, Agent, Hardball), Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',138).

 /*   reactive_rule([ happens(swingHitFair(Ballgame,
                                           Agent,
                                           Hardball),
                              Time)
                    ],
                    [  (happens(swingHitFairFly(Ballgame, Agent, Hardball), Time);happens(swingHitFairGround(Ballgame, Agent, Hardball), Time))
                    ]).
 */


% [ballgame,agent,hardball,time]
% Happens(SwingHitFairFly(ballgame,agent,hardball),time) ->
% Happens(SwingHitFairGround(ballgame,agent,hardball),time).

 /*  happens(swingHitFairFly(Ballgame, Agent, Hardball), Time) ->
       happens(swingHitFairGround(Ballgame, Agent, Hardball),
               Time).
 */
if happens(swingHitFairFly(Ballgame, Agent, Hardball), Time)then happens(swingHitFairGround(Ballgame, Agent, Hardball), Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',143).

 /*  reactive_rule([ happens(swingHitFairFly(Ballgame,
   					Agent,
   					Hardball),
   			Time)
   	      ],
   	      [ happens(swingHitFairGround(Ballgame,
   					   Agent,
   					   Hardball),
   			Time)
   	      ]).
 */


% [ballgame,agent,hardball,homeplate,firstbase,time]
% Happens(SwingHit(ballgame,agent,hardball),time) &
% HomeplateOf(ballgame) = homeplate &
% FirstBaseOf(ballgame) = firstbase ->
% Happens(RunFromTo(agent,homeplate,firstbase),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',147).

 /*  (   happens(swingHit(Ballgame, Agent, Hardball), Time),
       homeplate(Ballgame, Homeplate),
       firstBase(Ballgame, Firstbase)
   ->  happens(runFromTo(Agent, Homeplate, Firstbase), Time)
   ).
 */
if happens(swingHit(Ballgame, Agent, Hardball), Time), homeplate(Ballgame, Homeplate), firstBase(Ballgame, Firstbase)then happens(runFromTo(Agent, Homeplate, Firstbase), Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',147).

 /*  reactive_rule([ happens(swingHit(Ballgame,
   				 Agent,
   				 Hardball),
   			Time),
   		homeplate(Ballgame,Homeplate),
   		firstBase(Ballgame,Firstbase)
   	      ],
   	      [ happens(runFromTo(Agent,
   				  Homeplate,
   				  Firstbase),
   			Time)
   	      ]).
 */


% [ballgame,agent,hardball,homeplate,outfield,time]
% HomeplateOf(ballgame) = homeplate &
% OutfieldOf(ballgame) = outfield &
% Happens(SwingHitFairFly(ballgame,agent,hardball),time) ->
% Happens(HitFromTo(agent,hardball,homeplate,outfield),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',153).

 /*  (   homeplate(Ballgame, Homeplate),
       outfield(Ballgame, Outfield),
       happens(swingHitFairFly(Ballgame, Agent, Hardball),
               Time)
   ->  happens(hitFromTo(Agent,
                         Hardball,
                         Homeplate,
                         Outfield),
               Time)
   ).
 */
if homeplate(Ballgame, Homeplate), outfield(Ballgame, Outfield), happens(swingHitFairFly(Ballgame, Agent, Hardball), Time)then happens(hitFromTo(Agent, Hardball, Homeplate, Outfield), Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',153).

 /*  reactive_rule([ homeplate(Ballgame,Homeplate),
   		outfield(Ballgame,Outfield),
   		happens(swingHitFairFly(Ballgame,
   					Agent,
   					Hardball),
   			Time)
   	      ],
   	      [ happens(hitFromTo(Agent,
   				  Hardball,
   				  Homeplate,
   				  Outfield),
   			Time)
   	      ]).
 */


%; End of file.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',157).
% translate: ending  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e.lps 
