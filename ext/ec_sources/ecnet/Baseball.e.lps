:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Arson.e',87).
% From E: 
% 
% :-call_pel_directive(translate(unskipped,'/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e.lps')).
:- call_pel_directive(translate(unskipped,
                                '/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e.lps')).
:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(lps).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Arson.e',87).
% From E: 
% 
% :-call_pel_directive(translate(begining,'/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e.lps')).
:- call_pel_directive(translate(begining,
                                '/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e.lps')).
% Sat, 10 Oct 2020 15:31:33 GMT File: <stream>(0x559e4b468800)%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{EthanAllen:1982,
%;   author = "Ethan Allen",
%;   year = "1982",
%;   title = "Baseball Play and Strategy",
%;   address = "Robert E. Krieger",
%;   publisher = "Malabar, FL",
%;   edition = "Third",
%; }
%;
%; @book{Coombs:1967,
%;   author = "Jack Coombs",
%;   year = "1967",
%;   title = "Baseball",
%;   address = "Englewood Cliffs, NJ",
%;   publisher = "Prentice-Hall",
%;   edition = "4th",
%;   howpublished = "revised by Danny Litwhiler",
%; }
%;

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',31).
% sort ballgame
% From E: 
% 
% sort(ballgame).
sort(ballgame).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',33).
% sort hardball: ball
% From E: 
% 
% subsort(hardball,ball).
subsort(hardball,ball).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',35).
% sort base: physobj
% From E: 
% 
% subsort(base,physobj).
subsort(base,physobj).

% sort firstbase: base
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',35).
% From E: 
% 
% subsort(firstbase,base).
subsort(firstbase,base).
%;sort secondbase: base
%;sort thirdbase: base

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',39).
% sort homeplate: base
% From E: 
% 
% subsort(homeplate,base).
subsort(homeplate,base).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',41).
% sort mound: physobj
% From E: 
% 
% subsort(mound,physobj).
subsort(mound,physobj).

% sort pitchermound: mound
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',41).
% From E: 
% 
% subsort(pitchermound,mound).
subsort(pitchermound,mound).
%;sort furniture: physobj
%;sort bench: furniture
%;sort playerbench: bench

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',48).
% sort field: physobj
% From E: 
% 
% subsort(field,physobj).
subsort(field,physobj).
%;sort shortstoparea: field
%;sort catcherarea: field

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',53).
% sort outfield: field
% From E: 
% 
% subsort(outfield,field).
subsort(outfield,field).
%;sort leftfield: outfield
%;sort centerfield: outfield
%;sort rightfield: outfield

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',58).
% function BallOf(ballgame): hardball
% From E: 
% 
% function(ballOf(ballgame),hardball).
function(ballOf(ballgame),hardball).

% function FirstBaseOf(ballgame): firstbase
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',58).
% From E: 
% 
% function(firstBaseOf(ballgame),firstbase).
function(firstBaseOf(ballgame),firstbase).
%;function SecondBaseOf(ballgame): secondbase
%;function ThirdBaseOf(ballgame): thirdbase

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',62).
% function HomeplateOf(ballgame): homeplate
% From E: 
% 
% function(homeplateOf(ballgame),homeplate).
function(homeplateOf(ballgame),homeplate).

% function OutfieldOf(ballgame): outfield
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',62).
% From E: 
% 
% function(outfieldOf(ballgame),outfield).
function(outfieldOf(ballgame),outfield).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',64).
% function PitchermoundOf(ballgame): pitchermound
% From E: 
% 
% function(pitchermoundOf(ballgame),pitchermound).
function(pitchermoundOf(ballgame),pitchermound).

% function PlayerbenchOf(ballgame): playerbench
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',64).
% From E: 
% 
% function(playerbenchOf(ballgame),playerbench).
function(playerbenchOf(ballgame),playerbench).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',67).
% predicate HomeTeamPlayer(ballgame,agent)
% From E: 
% 
% predicate(homeTeamPlayer(ballgame,agent)).
mpred_prop(homeTeamPlayer(ballgame,agent),predicate).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',67).
predicates([homeTeamPlayer/2]).

% predicate VisitingTeamPlayer(ballgame,agent)
% From E: 
% 
% predicate(visitingTeamPlayer(ballgame,agent)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',67).
mpred_prop(visitingTeamPlayer(ballgame,agent),predicate).
predicates([visitingTeamPlayer/2]).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',69).
% predicate Player(ballgame,agent)
% From E: 
% 
% predicate(player(ballgame,agent)).
mpred_prop(player(ballgame,agent),predicate).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',69).
predicates([player/2]).

% predicate OnOppositeTeams(ballgame,agent,agent)
% From E: 
% 
% predicate(onOppositeTeams(ballgame,agent,agent)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',69).
mpred_prop(onOppositeTeams(ballgame,agent,agent),predicate).
predicates([onOppositeTeams/3]).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',72).
% event Pitch(ballgame,agent,hardball,agent)
% From E: 
% 
% event(pitch(ballgame,agent,hardball,agent)).
mpred_prop(pitch(ballgame,agent,hardball,agent),event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',72).
events([pitch/4]).

% event PitchInStrikeZone(ballgame,agent,hardball,agent)
% From E: 
% 
% event(pitchInStrikeZone(ballgame,agent,hardball,agent)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',72).
mpred_prop(pitchInStrikeZone(ballgame,agent,hardball,agent),event).
events([pitchInStrikeZone/4]).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',74).
% event PitchOutOfStrikeZone(ballgame,agent,hardball,agent)
% From E: 
% 
% event(pitchOutOfStrikeZone(ballgame,agent,hardball,agent)).
mpred_prop(pitchOutOfStrikeZone(ballgame,agent,hardball,agent),event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',74).
events([pitchOutOfStrikeZone/4]).

% event Swing(ballgame,agent,hardball)
% From E: 
% 
% event(swing(ballgame,agent,hardball)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',74).
mpred_prop(swing(ballgame,agent,hardball),event).
events([swing/3]).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',76).
% event SwingMiss(ballgame,agent,hardball)
% From E: 
% 
% event(swingMiss(ballgame,agent,hardball)).
mpred_prop(swingMiss(ballgame,agent,hardball),event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',76).
events([swingMiss/3]).

% event SwingHit(ballgame,agent,hardball)
% From E: 
% 
% event(swingHit(ballgame,agent,hardball)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',76).
mpred_prop(swingHit(ballgame,agent,hardball),event).
events([swingHit/3]).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',78).
% event SwingHitFair(ballgame,agent,hardball)
% From E: 
% 
% event(swingHitFair(ballgame,agent,hardball)).
mpred_prop(swingHitFair(ballgame,agent,hardball),event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',78).
events([swingHitFair/3]).

% event SwingHitFoul(ballgame,agent,hardball)
% From E: 
% 
% event(swingHitFoul(ballgame,agent,hardball)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',78).
mpred_prop(swingHitFoul(ballgame,agent,hardball),event).
events([swingHitFoul/3]).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',80).
% event SwingHitFairFly(ballgame,agent,hardball)
% From E: 
% 
% event(swingHitFairFly(ballgame,agent,hardball)).
mpred_prop(swingHitFairFly(ballgame,agent,hardball),event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',80).
events([swingHitFairFly/3]).

% event SwingHitFairGround(ballgame,agent,hardball)
% From E: 
% 
% event(swingHitFairGround(ballgame,agent,hardball)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',80).
mpred_prop(swingHitFairGround(ballgame,agent,hardball),event).
events([swingHitFairGround/3]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',83).
% [ballgame,agent]
% HomeTeamPlayer(ballgame,agent) ->
% !VisitingTeamPlayer(ballgame,agent).
% From E: 
% 
% '->'(
%    homeTeamPlayer(Ballgame,Agent), 
%    not(visitingTeamPlayer(Ballgame,Agent))).
if homeTeamPlayer(Ballgame, Agent)then not visitingTeamPlayer(Ballgame, Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',83).

 /*  reactive_rule([homeTeamPlayer(Ballgame,Agent)],
   	      [not(visitingTeamPlayer(Ballgame,Agent))]).
 */
 %  "% =================================".


% [ballgame,agent]
 % HomeTeamPlayer(ballgame,agent) -> Player(ballgame,agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',86).
% From E: 
% 
% '->'(
%    homeTeamPlayer(Ballgame,Agent), 
%    player(Ballgame,Agent)).
if homeTeamPlayer(Ballgame, Agent)then player(Ballgame, Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',86).

 /*  reactive_rule([homeTeamPlayer(Ballgame,Agent)],
   	      [player(Ballgame,Agent)]).
 */
 %  "% =================================".


% [ballgame,agent]
 % VisitingTeamPlayer(ballgame,agent) -> Player(ballgame,agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',88).
% From E: 
% 
% '->'(
%    visitingTeamPlayer(Ballgame,Agent), 
%    player(Ballgame,Agent)).
if visitingTeamPlayer(Ballgame, Agent)then player(Ballgame, Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',88).

 /*  reactive_rule([visitingTeamPlayer(Ballgame,Agent)],
   	      [player(Ballgame,Agent)]).
 */
 %  "% =================================".


% [ballgame,agent1,agent2]
% OnOppositeTeams(ballgame,agent1,agent2) <->
% (HomeTeamPlayer(ballgame,agent1) &
%  VisitingTeamPlayer(ballgame,agent2)) |
% (HomeTeamPlayer(ballgame,agent2) &
%  VisitingTeamPlayer(ballgame,agent1)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',92).
% From E: 
% 
% <->(
%    onOppositeTeams(Ballgame,Agent1,Agent2), 
%    ((homeTeamPlayer(Ballgame,Agent1) , 
%      visitingTeamPlayer(Ballgame,Agent2)) ; 
%     (homeTeamPlayer(Ballgame,Agent2) , 
%      visitingTeamPlayer(Ballgame,Agent1)))).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',92).
onOppositeTeams(Ballgame, Agent1, Agent2) <->
    (   homeTeamPlayer(Ballgame, Agent1),
        visitingTeamPlayer(Ballgame, Agent2)
    ;   homeTeamPlayer(Ballgame, Agent2),
        visitingTeamPlayer(Ballgame, Agent1)
    ).


% [ballgame,agent1,hardball,agent2,pitchermound,homeplate,time]
% Happens(Pitch(ballgame,agent1,hardball,agent2),time) &
% PitchermoundOf(ballgame) = pitchermound &
% HomeplateOf(ballgame) = homeplate ->
% HoldsAt(Near(agent1,pitchermound),time) &
% HoldsAt(Near(agent2,homeplate),time) &
% OnOppositeTeams(ballgame,agent1,agent2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',99).
% From E: 
% 
% '->'(
%    (happens_at(pitch(Ballgame,Agent1,Hardball,Agent2),Time) , 
%      pitchermoundOf(Ballgame)=Pitchermound , 
%     homeplateOf(Ballgame)=Homeplate), 
%    (holds_at(near(Agent1,Pitchermound),Time) , 
%      holds_at(near(Agent2,Homeplate),Time) , 
%     onOppositeTeams(Ballgame,Agent1,Agent2))).
 %   [Time].
if pitch(Ballgame, Agent1, Hardball, Agent2), pitchermoundOf(Ballgame, Pitchermound), homeplateOf(Ballgame, Homeplate)then near(Agent1, Pitchermound), near(Agent2, Homeplate), onOppositeTeams(Ballgame, Agent1, Agent2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',99).

 /*  reactive_rule([ pitch(Ballgame,
   		      Agent1,
   		      Hardball,
   		      Agent2),
   		pitchermoundOf(Ballgame,Pitchermound),
   		homeplateOf(Ballgame,Homeplate)
   	      ],
   	      [ near(Agent1,Pitchermound),
   		near(Agent2,Homeplate),
   		onOppositeTeams(Ballgame,
   				Agent1,
   				Agent2)
   	      ]).
 */
 %  "% =================================".


% [ballgame,agent1,agent2,hardball,time]
% Happens(Pitch(ballgame,agent1,hardball,agent2),time) ->
% Happens(PitchInStrikeZone(ballgame,agent1,hardball,agent2),time) |
% Happens(PitchOutOfStrikeZone(ballgame,agent1,hardball,agent2),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',107).
% From E: 
% 
% '->'(
%    happens_at(pitch(Ballgame,Agent1,Hardball,Agent2),Time), 
%    (happens_at(pitchInStrikeZone(Ballgame,Agent1,Hardball,Agent2),Time) ; 
%     happens_at(pitchOutOfStrikeZone(Ballgame,Agent1,Hardball,Agent2),Time))).
 %   [Time].
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',107).
pitch(Ballgame, Agent1, Hardball, Agent2) ->
    false((not(pitchInStrikeZone(Ballgame, Agent1, Hardball, Agent2)), not(pitchOutOfStrikeZone(Ballgame, Agent1, Hardball, Agent2)))).


% [ballgame,agent1,agent2,hardball,time]
% Happens(PitchInStrikeZone(ballgame,agent1,hardball,agent2),time) ->
% !Happens(PitchOutOfStrikeZone(ballgame,agent1,hardball,agent2),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',112).
% From E: 
% 
% '->'(
%    happens_at(pitchInStrikeZone(Ballgame,Agent1,Hardball,Agent2),Time), 
%    not(happens_at(pitchOutOfStrikeZone(Ballgame,Agent1,Hardball,Agent2),Time))).
 %   [Time].
if pitchInStrikeZone(Ballgame, Agent1, Hardball, Agent2)then not pitchOutOfStrikeZone(Ballgame, Agent1, Hardball, Agent2).

 /*  reactive_rule([ pitchInStrikeZone(Ballgame,
   				  Agent1,
   				  Hardball,
   				  Agent2)
   	      ],
   	      [ not(pitchOutOfStrikeZone(Ballgame,
   					 Agent1,
   					 Hardball,
   					 Agent2))
   	      ]).
 */
 %  "% =================================".


% [ballgame,agent1,agent2,hardball,time]
% Happens(PitchInStrikeZone(ballgame,agent1,hardball,agent2),time) ->
% Happens(Swing(ballgame,agent2,hardball),time+1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',116).
% From E: 
% 
% '->'(
%    happens_at(pitchInStrikeZone(Ballgame,Agent1,Hardball,Agent2),Time), 
%    happens_at(swing(Ballgame,Agent2,Hardball),Time+1)).
 %   [Time, Time+1].
happens_at(pitchInStrikeZone(Ballgame, Agent1, Hardball, Agent2), Time) ->
    happens_at(swing(Ballgame, Agent2, Hardball), Time+1).


% [ballgame,agent,hardball,time]
% Happens(Swing(ballgame,agent,hardball),time) ->
% Happens(SwingHit(ballgame,agent,hardball),time) |
% Happens(SwingMiss(ballgame,agent,hardball),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',120).
% From E: 
% 
% '->'(
%    happens_at(swing(Ballgame,Agent,Hardball),Time), 
%    (happens_at(swingHit(Ballgame,Agent,Hardball),Time) ; 
%     happens_at(swingMiss(Ballgame,Agent,Hardball),Time))).
 %   [Time].
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',120).
swing(Ballgame, Agent, Hardball) ->
    false((not(swingHit(Ballgame, Agent, Hardball)), not(swingMiss(Ballgame, Agent, Hardball)))).


% [ballgame,agent,hardball,time]
% Happens(SwingHit(ballgame,agent,hardball),time) ->
% !Happens(SwingMiss(ballgame,agent,hardball),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',125).
% From E: 
% 
% '->'(
%    happens_at(swingHit(Ballgame,Agent,Hardball),Time), 
%    not(happens_at(swingMiss(Ballgame,Agent,Hardball),Time))).
 %   [Time].
if swingHit(Ballgame, Agent, Hardball)then not swingMiss(Ballgame, Agent, Hardball).

 /*  reactive_rule([swingHit(Ballgame,Agent,Hardball)],
   	      [ not(swingMiss(Ballgame,
   			      Agent,
   			      Hardball))
   	      ]).
 */
 %  "% =================================".


% [ballgame,agent,hardball,time]
% Happens(SwingHit(ballgame,agent,hardball),time) ->
% Happens(SwingHitFair(ballgame,agent,hardball),time) |
% Happens(SwingHitFoul(ballgame,agent,hardball),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',129).
% From E: 
% 
% '->'(
%    happens_at(swingHit(Ballgame,Agent,Hardball),Time), 
%    (happens_at(swingHitFair(Ballgame,Agent,Hardball),Time) ; 
%     happens_at(swingHitFoul(Ballgame,Agent,Hardball),Time))).
 %   [Time].
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',129).
swingHit(Ballgame, Agent, Hardball) ->
    false((not(swingHitFair(Ballgame, Agent, Hardball)), not(swingHitFoul(Ballgame, Agent, Hardball)))).


% [ballgame,agent,hardball,time]
% Happens(SwingHitFair(ballgame,agent,hardball),time) ->
% !Happens(SwingHitFoul(ballgame,agent,hardball),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',134).
% From E: 
% 
% '->'(
%    happens_at(swingHitFair(Ballgame,Agent,Hardball),Time), 
%    not(happens_at(swingHitFoul(Ballgame,Agent,Hardball),Time))).
 %   [Time].
if swingHitFair(Ballgame, Agent, Hardball)then not swingHitFoul(Ballgame, Agent, Hardball).

 /*  reactive_rule([swingHitFair(Ballgame,Agent,Hardball)],
   	      [ not(swingHitFoul(Ballgame,
   				 Agent,
   				 Hardball))
   	      ]).
 */
 %  "% =================================".


% [ballgame,agent,hardball,time]
% Happens(SwingHitFair(ballgame,agent,hardball),time) ->
% Happens(SwingHitFairFly(ballgame,agent,hardball),time) |
% Happens(SwingHitFairGround(ballgame,agent,hardball),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',138).
% From E: 
% 
% '->'(
%    happens_at(swingHitFair(Ballgame,Agent,Hardball),Time), 
%    (happens_at(swingHitFairFly(Ballgame,Agent,Hardball),Time) ; 
%     happens_at(swingHitFairGround(Ballgame,Agent,Hardball),Time))).
 %   [Time].
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',138).
swingHitFair(Ballgame, Agent, Hardball) ->
    false((not(swingHitFairFly(Ballgame, Agent, Hardball)), not(swingHitFairGround(Ballgame, Agent, Hardball)))).


% [ballgame,agent,hardball,time]
% Happens(SwingHitFairFly(ballgame,agent,hardball),time) ->
% Happens(SwingHitFairGround(ballgame,agent,hardball),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',143).
% From E: 
% 
% '->'(
%    happens_at(swingHitFairFly(Ballgame,Agent,Hardball),Time), 
%    happens_at(swingHitFairGround(Ballgame,Agent,Hardball),Time)).
 %   [Time].
if swingHitFairFly(Ballgame, Agent, Hardball)then swingHitFairGround(Ballgame, Agent, Hardball).

 /*  reactive_rule([ swingHitFairFly(Ballgame,
   				Agent,
   				Hardball)
   	      ],
   	      [ swingHitFairGround(Ballgame,
   				   Agent,
   				   Hardball)
   	      ]).
 */
 %  "% =================================".


% [ballgame,agent,hardball,homeplate,firstbase,time]
% Happens(SwingHit(ballgame,agent,hardball),time) &
% HomeplateOf(ballgame) = homeplate &
% FirstBaseOf(ballgame) = firstbase ->
% Happens(RunFromTo(agent,homeplate,firstbase),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',147).
% From E: 
% 
% '->'(
%    (happens_at(swingHit(Ballgame,Agent,Hardball),Time) , 
%      homeplateOf(Ballgame)=Homeplate , 
%     firstBaseOf(Ballgame)=Firstbase), 
%    happens_at(runFromTo(Agent,Homeplate,Firstbase),Time)).
 %   [Time].
if swingHit(Ballgame, Agent, Hardball), homeplateOf(Ballgame, Homeplate), firstBaseOf(Ballgame, Firstbase)then runFromTo(Agent, Homeplate, Firstbase).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',147).

 /*  reactive_rule([ swingHit(Ballgame,Agent,Hardball),
   		homeplateOf(Ballgame,Homeplate),
   		firstBaseOf(Ballgame,Firstbase)
   	      ],
   	      [runFromTo(Agent,Homeplate,Firstbase)]).
 */
 %  "% =================================".


% [ballgame,agent,hardball,homeplate,outfield,time]
% HomeplateOf(ballgame) = homeplate &
% OutfieldOf(ballgame) = outfield &
% Happens(SwingHitFairFly(ballgame,agent,hardball),time) ->
% Happens(HitFromTo(agent,hardball,homeplate,outfield),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',153).
% From E: 
% 
% '->'(
%    (homeplateOf(Ballgame)=Homeplate , 
%      outfieldOf(Ballgame)=Outfield , 
%     happens_at(swingHitFairFly(Ballgame,Agent,Hardball),Time)), 
%    happens_at(hitFromTo(Agent,Hardball,Homeplate,Outfield),Time)).
 %   [Time].
if homeplateOf(Ballgame, Homeplate), outfieldOf(Ballgame, Outfield), swingHitFairFly(Ballgame, Agent, Hardball)then hitFromTo(Agent, Hardball, Homeplate, Outfield).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',153).

 /*  reactive_rule([ homeplateOf(Ballgame,Homeplate),
   		outfieldOf(Ballgame,Outfield),
   		swingHitFairFly(Ballgame,
   				Agent,
   				Hardball)
   	      ],
   	      [ hitFromTo(Agent,
   			  Hardball,
   			  Homeplate,
   			  Outfield)
   	      ]).
 */
 %  "% =================================".


%; End of file.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',157).
% From E: 
% 
% :-call_pel_directive(translate(ending,'/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e.lps')).
:- call_pel_directive(translate(ending,
                                '/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e.lps')).
