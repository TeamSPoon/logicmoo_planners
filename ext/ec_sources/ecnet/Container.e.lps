:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Condition.e',77).
% From E: 
% 
% :-call_pel_directive(translate(unskipped,'/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e.lps')).
:- call_pel_directive(translate(unskipped,
                                '/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e.lps')).
:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(lps).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Condition.e',77).
% From E: 
% 
% :-call_pel_directive(translate(begining,'/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e.lps')).
:- call_pel_directive(translate(begining,
                                '/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e.lps')).
% Sat, 10 Oct 2020 15:31:34 GMT File: <stream>(0x559e4b325000)%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%;
%; Container: container
%;
%; linkage to OTSpace(M):
% [agent,container1,container2,time]
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',17).
% Happens(TakeOutOf(agent,container1,container2),time) ->
% HoldsAt(ContainerIsOpen(container2),time).
% From E: 
% 
% '->'(
%    happens_at(takeOutOf(Agent,Container1,Container2),Time), 
%    holds_at(containerIsOpen(Container2),Time)).
 %   [Time].
if takeOutOf(Agent, Container1, Container2)then containerIsOpen(Container2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',17).

 /*  reactive_rule([ takeOutOf(Agent,
   			  Container1,
   			  Container2)
   	      ],
   	      [containerIsOpen(Container2)]).
 */
 %  "% =================================".


% [agent,container1,container2,time]
% Happens(PutInside(agent,container1,container2),time) ->
% HoldsAt(ContainerIsOpen(container2),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',21).
% From E: 
% 
% '->'(
%    happens_at(putInside(Agent,Container1,Container2),Time), 
%    holds_at(containerIsOpen(Container2),Time)).
 %   [Time].
if putInside(Agent, Container1, Container2)then containerIsOpen(Container2).

 /*  reactive_rule([ putInside(Agent,
   			  Container1,
   			  Container2)
   	      ],
   	      [containerIsOpen(Container2)]).
 */
 %  "% =================================".


%; agent opens container.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',25).
% event ContainerOpen(agent,container)
% From E: 
% 
% event(containerOpen(agent,container)).
events([containerOpen/2]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',25).
mpred_prop(containerOpen(agent,container),action).
actions([containerOpen/2]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',27).
%; agent closes container.

% event ContainerClose(agent,container)
% From E: 
% 
% event(containerClose(agent,container)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',27).
events([containerClose/2]).
mpred_prop(containerClose(agent,container),action).
actions([containerClose/2]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',30).
%; container is open.

% fluent ContainerIsOpen(container)
% From E: 
% 
% fluent(containerIsOpen(container)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',30).
mpred_prop(containerIsOpen(container),fluent).
fluents([containerIsOpen/1]).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',33).
% fluent ContainerClosed(container)
% From E: 
% 
% fluent(containerClosed(container)).
mpred_prop(containerClosed(container),fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',33).
fluents([containerClosed/1]).

% noninertial ContainerClosed
% From E: 
% 
% :-call_pel_directive(noninertial(containerClosed)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',33).
:- call_pel_directive(noninertial(containerClosed)).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',36).
% [container,time]
% HoldsAt(ContainerClosed(container),time) <->
% !HoldsAt(ContainerIsOpen(container),time).
% From E: 
% 
% <->(
%    holds_at(containerClosed(Container),Time), 
%    holds_at(not(containerIsOpen(Container)),Time)).
 %   [Time].
if containerClosed(Container)then not containerIsOpen(Container).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',36).

 /*  reactive_rule([containerClosed(Container)],
   	      [not(containerIsOpen(Container))]).
 */
 %  "% =================================".
if not containerIsOpen(Container)then containerClosed(Container).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',36).

 /*  reactive_rule([not(containerIsOpen(Container))],
   	      [containerClosed(Container)]).
 */
 %  "% =================================".


%; A precondition axiom states that
%; for an agent to open a container,
%; the agent must be awake,
%; the container must not already be open, and
%; the agent must be holding the container.
% [agent,container,time]
% Happens(ContainerOpen(agent,container),time) ->
% HoldsAt(Awake(agent),time) &
% !HoldsAt(ContainerIsOpen(container),time) &
% HoldsAt(Holding(agent,container),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',45).
% From E: 
% 
% '->'(
%    happens_at(containerOpen(Agent,Container),Time), 
%    (holds_at(awake(Agent),Time) , 
%      holds_at(not(containerIsOpen(Container)),Time) , 
%     holds_at(holding(Agent,Container),Time))).
 %   [Time].
if containerOpen(Agent, Container)then awake(Agent), not containerIsOpen(Container), holding(Agent, Container).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',45).

 /*  reactive_rule([containerOpen(Agent,Container)],
   	      [ awake(Agent),
   		not(containerIsOpen(Container)),
   		holding(Agent,Container)
   	      ]).
 */
 %  "% =================================".


%; An effect axiom states that
%; if an agent opens a container,
%; the container will be open:
% [agent,container,time]
% Initiates(ContainerOpen(agent,container),ContainerIsOpen(container),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',54).
% From E: 
% 
% initiates_at(
%    containerOpen(Agent,Container), 
%    containerIsOpen(Container), 
%    Time).
 %   [Time].
containerOpen(Agent, Container)initiates containerIsOpen(Container).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',54).

 /*  initiated(happens(containerOpen(Agent,Container),
   		  Time_From,
   		  Time_Until),
   	  containerIsOpen(Container),
   	  []).
 */
 %  "% =================================".


%; A precondition axiom states that
%; for an agent to close a container,
%; the agent must be awake,
%; the container must be open, and
%; the agent must be holding the container.
% [agent,container,time]
% Happens(ContainerClose(agent,container),time) ->
% HoldsAt(Awake(agent),time) &
% HoldsAt(ContainerIsOpen(container),time) &
% HoldsAt(Holding(agent,container),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',62).
% From E: 
% 
% '->'(
%    happens_at(containerClose(Agent,Container),Time), 
%    (holds_at(awake(Agent),Time) , 
%      holds_at(containerIsOpen(Container),Time) , 
%     holds_at(holding(Agent,Container),Time))).
 %   [Time].
if containerClose(Agent, Container)then awake(Agent), containerIsOpen(Container), holding(Agent, Container).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',62).

 /*  reactive_rule([containerClose(Agent,Container)],
   	      [ awake(Agent),
   		holds(containerIsOpen(Container),Time_At),
   		holding(Agent,Container)
   	      ]).
 */
 %  "% =================================".


%; An effect axiom states that
%; if an agent closes a container,
%; the container will no longer be open:
% [agent,container,time]
% Terminates(ContainerClose(agent,container),ContainerIsOpen(container),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',71).
% From E: 
% 
% terminates_at(
%    containerClose(Agent,Container), 
%    containerIsOpen(Container), 
%    Time).
 %   [Time].
containerClose(Agent, Container)terminates containerIsOpen(Container).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',71).

 /*  terminated(happens(containerClose(Agent,Container),
   		   Time_From,
   		   Time_Until),
   	   containerIsOpen(Container),
   	   []).
 */
 %  "% =================================".


%; End of file.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',73).
% From E: 
% 
% :-call_pel_directive(translate(ending,'/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e.lps')).
:- call_pel_directive(translate(ending,
                                '/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e.lps')).
