:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Condition.e',77).
% translate: unskipped  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e.lps 
:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(lps).
% translate: begining  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e.lps 
% Thu, 08 Oct 2020 19:05:46 GMT File: <stream>(0x5600a387d800)%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%;
%; Container: container
%;
%; linkage to OTSpace(M):
% [agent,container1,container2,time]
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',17).
% Happens(TakeOutOf(agent,container1,container2),time) ->
% HoldsAt(ContainerIsOpen(container2),time).
 %  clausify_pnf=(happens(takeOutOf(Agent, Container1, Container2), Time)->holds_at(containerIsOpen(Container2), Time)).

 /*  holds_at(containerIsOpen(Container2), Time) :-
       happens(takeOutOf(Agent, Container1, Container2),
               Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',17).

 /*  pl=axiom(requires(takeOutOf(Agent,Container1,Container2),
   	       When_Time),
         [ metreqs(takeOutOf(Agent,
   			  Container1,
   			  Container2))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',17).

 /*  metreqs(takeOutOf(Agent, Container1, Container2)) ->
       requires(takeOutOf(Agent, Container1, Container2),
                When_Time).
 */
if metreqs(takeOutOf(Agent, Container1, Container2))then requires(takeOutOf(Agent, Container1, Container2), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',17).

 /*  reactive_rule([ metreqs(takeOutOf(Agent,
   				  Container1,
   				  Container2))
   	      ],
   	      [ requires(takeOutOf(Agent,
   				   Container1,
   				   Container2),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',17).

 /*  reactive_rule([ metreqs(takeOutOf(Agent,
   				  Container1,
   				  Container2))
   	      ],
   	      [ requires(takeOutOf(Agent,
   				   Container1,
   				   Container2),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',17).

 /*  fix_axiom_head(When_Time) ->
       [ holds_at(metreqs(takeOutOf(Agent,
                                    Container1,
                                    Container2)),
                  When_Time),
          (->),
         metreqs(takeOutOf(Agent, Container1, Container2))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',17).

 /*  pl=axiom(metreqs(takeOutOf(Agent,Container1,Container2)),
         [containerIsOpen(Container2)]).
 */

 /*  containerIsOpen(Container2) ->
       metreqs(takeOutOf(Agent, Container1, Container2)).
 */
if containerIsOpen(Container2)then metreqs(takeOutOf(Agent, Container1, Container2)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',17).

 /*  reactive_rule([containerIsOpen(Container2)],
   	      [ metreqs(takeOutOf(Agent,
   				  Container1,
   				  Container2))
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',17).

 /*  reactive_rule([containerIsOpen(Container2)],
   	      [ metreqs(takeOutOf(Agent,
   				  Container1,
   				  Container2))
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',17).

 /*  not(happens(takeOutOf(Agent, Container1, Container2), When_Time)) :-
       not(holds_at(containerIsOpen(Container2), When_Time)).
 */

 /*  fix_axiom_head(When_Time) ->
       [ not(happens(takeOutOf(Agent, Container1, Container2),
                     When_Time)),
          (->),
         not(takeOutOf(Agent, Container1, Container2))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',17).

 /*  pl=axiom(not(takeOutOf(Agent,Container1,Container2)),
         [not(containerIsOpen(Container2))]).
 */

 /*  not(containerIsOpen(Container2)) ->
       not(takeOutOf(Agent, Container1, Container2)).
 */
if not containerIsOpen(Container2)then not takeOutOf(Agent, Container1, Container2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',17).

 /*  reactive_rule([not(containerIsOpen(Container2))],
   	      [ not(takeOutOf(Agent,
   			      Container1,
   			      Container2))
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',17).

 /*  reactive_rule([not(containerIsOpen(Container2))],
   	      [ not(takeOutOf(Agent,
   			      Container1,
   			      Container2))
   	      ]).
 */


% [agent,container1,container2,time]
% Happens(PutInside(agent,container1,container2),time) ->
% HoldsAt(ContainerIsOpen(container2),time).
 %  clausify_pnf=(happens(putInside(Agent, Container1, Container2), Time)->holds_at(containerIsOpen(Container2), Time)).

 /*  holds_at(containerIsOpen(Container2), Time) :-
       happens(putInside(Agent, Container1, Container2),
               Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',21).

 /*  pl=axiom(requires(putInside(Agent,Container1,Container2),
   	       When_Time),
         [ metreqs(putInside(Agent,
   			  Container1,
   			  Container2))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',21).

 /*  metreqs(putInside(Agent, Container1, Container2)) ->
       requires(putInside(Agent, Container1, Container2),
                When_Time).
 */
if metreqs(putInside(Agent, Container1, Container2))then requires(putInside(Agent, Container1, Container2), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',21).

 /*  reactive_rule([ metreqs(putInside(Agent,
   				  Container1,
   				  Container2))
   	      ],
   	      [ requires(putInside(Agent,
   				   Container1,
   				   Container2),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',21).

 /*  reactive_rule([ metreqs(putInside(Agent,
   				  Container1,
   				  Container2))
   	      ],
   	      [ requires(putInside(Agent,
   				   Container1,
   				   Container2),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',21).

 /*  fix_axiom_head(When_Time) ->
       [ holds_at(metreqs(putInside(Agent,
                                    Container1,
                                    Container2)),
                  When_Time),
          (->),
         metreqs(putInside(Agent, Container1, Container2))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',21).

 /*  pl=axiom(metreqs(putInside(Agent,Container1,Container2)),
         [containerIsOpen(Container2)]).
 */

 /*  containerIsOpen(Container2) ->
       metreqs(putInside(Agent, Container1, Container2)).
 */
if containerIsOpen(Container2)then metreqs(putInside(Agent, Container1, Container2)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',21).

 /*  reactive_rule([containerIsOpen(Container2)],
   	      [ metreqs(putInside(Agent,
   				  Container1,
   				  Container2))
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',21).

 /*  reactive_rule([containerIsOpen(Container2)],
   	      [ metreqs(putInside(Agent,
   				  Container1,
   				  Container2))
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',21).

 /*  not(happens(putInside(Agent, Container1, Container2), When_Time)) :-
       not(holds_at(containerIsOpen(Container2), When_Time)).
 */

 /*  fix_axiom_head(When_Time) ->
       [ not(happens(putInside(Agent, Container1, Container2),
                     When_Time)),
          (->),
         not(putInside(Agent, Container1, Container2))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',21).

 /*  pl=axiom(not(putInside(Agent,Container1,Container2)),
         [not(containerIsOpen(Container2))]).
 */

 /*  not(containerIsOpen(Container2)) ->
       not(putInside(Agent, Container1, Container2)).
 */
if not containerIsOpen(Container2)then not putInside(Agent, Container1, Container2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',21).

 /*  reactive_rule([not(containerIsOpen(Container2))],
   	      [ not(putInside(Agent,
   			      Container1,
   			      Container2))
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',21).

 /*  reactive_rule([not(containerIsOpen(Container2))],
   	      [ not(putInside(Agent,
   			      Container1,
   			      Container2))
   	      ]).
 */


%; agent opens container.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',25).
% event ContainerOpen(agent,container)
 %  blue=event(containerOpen(agent,container)).
 %  event(containerOpen(agent,container)).
actions([containerOpen/2]).
 %  actions([containerOpen/2]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',25).
mpred_prop(containerOpen(agent,container),event).
 %  mpred_prop(containerOpen(agent,container),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',27).
%; agent closes container.

% event ContainerClose(agent,container)
 %  blue=event(containerClose(agent,container)).
 %  event(containerClose(agent,container)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',27).
actions([containerClose/2]).
 %  actions([containerClose/2]).
mpred_prop(containerClose(agent,container),event).
 %  mpred_prop(containerClose(agent,container),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',30).
%; container is open.

% fluent ContainerIsOpen(container)
 %  blue=fluent(containerIsOpen(container)).
 %  fluent(containerIsOpen(container)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',30).
fluents([containerIsOpen/1]).
 %  fluents([containerIsOpen/1]).
mpred_prop(containerIsOpen(container),fluent).
 %  mpred_prop(containerIsOpen(container),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',33).
% fluent ContainerClosed(container)
 %  blue=fluent(containerClosed(container)).
 %  fluent(containerClosed(container)).
fluents([containerClosed/1]).
 %  fluents([containerClosed/1]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',33).
mpred_prop(containerClosed(container),fluent).
 %  mpred_prop(containerClosed(container),fluent).

% noninertial ContainerClosed
noninertial(containerClosed).
 %  noninertial(containerClosed).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',36).
% [container,time]
% HoldsAt(ContainerClosed(container),time) <->
% !HoldsAt(ContainerIsOpen(container),time).

 /*  holds_at(containerClosed(Container), Time) <->
       holds_at(neg(containerIsOpen(Container)), Time).
 */
 %  clausify_pnf=(holds_at(containerClosed(Container), Time)->holds_at(neg(containerIsOpen(Container)), Time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',36).

 /*  holds_at(neg(containerIsOpen(Container)), Time) :-
       holds_at(containerClosed(Container), Time).
 */

 /*  fix_axiom_head(Time) ->
       [ holds_at(neg(containerIsOpen(Container)), Time),
          (->),
         not(containerIsOpen(Container))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',36).

 /*  pl=axiom(not(containerIsOpen(Container)),
         [containerClosed(Container)]).
 */

 /*  containerClosed(Container) ->
       not(containerIsOpen(Container)).
 */
if containerClosed(Container)then not containerIsOpen(Container).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',36).

 /*  reactive_rule([containerClosed(Container)],
   	      [not(containerIsOpen(Container))]).
 */

 /*  reactive_rule([containerClosed(Container)],
   	      [not(containerIsOpen(Container))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',36).

 /*  not(holds_at(containerClosed(Container), Time)) :-
       not(holds_at(neg(containerIsOpen(Container)), Time)).
 */

 /*  pl=axiom(not(containerClosed(Container)),
         [not(not(containerIsOpen(Container)))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',36).

 /*  not(not(containerIsOpen(Container))) ->
       not(containerClosed(Container)).
 */
if not not containerIsOpen(Container)then not containerClosed(Container).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',36).

 /*  reactive_rule([not(not(containerIsOpen(Container)))],
   	      [not(containerClosed(Container))]).
 */

 /*  reactive_rule([not(not(containerIsOpen(Container)))],
   	      [not(containerClosed(Container))]).
 */
 %  clausify_pnf=(holds_at(neg(containerIsOpen(Container)), Time)->holds_at(containerClosed(Container), Time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',36).

 /*  holds_at(containerClosed(Container), Time) :-
       holds_at(neg(containerIsOpen(Container)), Time).
 */

 /*  fix_axiom_head(Time) ->
       [ holds_at(containerClosed(Container), Time),
          (->),
         containerClosed(Container)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',36).

 /*  pl=axiom(containerClosed(Container),
         [not(containerIsOpen(Container))]).
 */

 /*  not(containerIsOpen(Container)) ->
       containerClosed(Container).
 */
if not containerIsOpen(Container)then containerClosed(Container).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',36).

 /*  reactive_rule([not(containerIsOpen(Container))],
   	      [containerClosed(Container)]).
 */

 /*  reactive_rule([not(containerIsOpen(Container))],
   	      [containerClosed(Container)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',36).

 /*  not(holds_at(neg(containerIsOpen(Container)), Time)) :-
       not(holds_at(containerClosed(Container), Time)).
 */

 /*  pl=axiom(not(not(containerIsOpen(Container))),
         [not(containerClosed(Container))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',36).

 /*  not(containerClosed(Container)) ->
       not(not(containerIsOpen(Container))).
 */
if not containerClosed(Container)then not not containerIsOpen(Container).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',36).

 /*  reactive_rule([not(containerClosed(Container))],
   	      [not(not(containerIsOpen(Container)))]).
 */

 /*  reactive_rule([not(containerClosed(Container))],
   	      [not(not(containerIsOpen(Container)))]).
 */


%; A precondition axiom states that
%; for an agent to open a container,
%; the agent must be awake,
%; the container must not already be open, and
%; the agent must be holding the container.
% [agent,container,time]
% Happens(ContainerOpen(agent,container),time) ->
% HoldsAt(Awake(agent),time) &
% !HoldsAt(ContainerIsOpen(container),time) &
% HoldsAt(Holding(agent,container),time).
 %  clausify_pnf=(happens(containerOpen(Agent, Container), Time)->holds_at(awake(Agent), Time), holds_at(neg(containerIsOpen(Container)), Time), holds_at(holding(Agent, Container), Time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',45).

 /*  not(happens(containerOpen(Agent, Container), Time)) :-
       (   not(holds_at(awake(Agent), Time))
       ;   not(holds_at(neg(containerIsOpen(Container)), Time))
       ;   not(holds_at(holding(Agent, Container), Time))
       ).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',45).

 /*  fix_axiom_head(Time) ->
       [ not(happens(containerOpen(Agent, Container), Time)),
          (->),
         not(containerOpen(Agent, Container))
       ].
 */
 %   pl=axiom(not(containerOpen(Agent, Container)), [(not(awake(Agent));not(not(containerIsOpen(Container)));not(holding(Agent, Container)))]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',45).

 /*  not(awake(Agent));not(not(containerIsOpen(Container)));not(holding(Agent, Container)) ->
       not(containerOpen(Agent, Container)).
 */
if not awake(Agent);not not containerIsOpen(Container);not holding(Agent, Container)then not containerOpen(Agent, Container).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',45).

 /*   reactive_rule([  (not(awake(Agent));not(not(containerIsOpen(Container)));not(holding(Agent, Container)))
                    ],
                    [not(containerOpen(Agent, Container))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',45).

 /*   reactive_rule([  (not(awake(Agent));not(not(containerIsOpen(Container)));not(holding(Agent, Container)))
                    ],
                    [not(containerOpen(Agent, Container))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',45).

 /*  holds_at(awake(Agent), Time) :-
       happens(containerOpen(Agent, Container), Time).
 */

 /*  pl=axiom(requires(containerOpen(Agent,Container),
   	       When_Time),
         [metreqs(containerOpen(Agent,Container))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',45).

 /*  metreqs(containerOpen(Agent, Container)) ->
       requires(containerOpen(Agent, Container), When_Time).
 */
if metreqs(containerOpen(Agent, Container))then requires(containerOpen(Agent, Container), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',45).

 /*  reactive_rule([metreqs(containerOpen(Agent,Container))],
   	      [ requires(containerOpen(Agent,Container),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',45).

 /*  reactive_rule([metreqs(containerOpen(Agent,Container))],
   	      [ requires(containerOpen(Agent,Container),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',45).

 /*  fix_axiom_head(When_Time) ->
       [ holds_at(metreqs(containerOpen(Agent, Container)),
                  When_Time),
          (->),
         metreqs(containerOpen(Agent, Container))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',45).

 /*  pl=axiom(metreqs(containerOpen(Agent,Container)),
         [awake(Agent)]).
 */

 /*  awake(Agent) ->
       metreqs(containerOpen(Agent, Container)).
 */
if awake(Agent)then metreqs(containerOpen(Agent, Container)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',45).

 /*  reactive_rule([awake(Agent)],
   	      [metreqs(containerOpen(Agent,Container))]).
 */

 /*  reactive_rule([awake(Agent)],
   	      [metreqs(containerOpen(Agent,Container))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',45).

 /*  holds_at(neg(containerIsOpen(Container)), When_Time) :-
       happens(containerOpen(Agent, Container), When_Time).
 */

 /*  pl=axiom(requires(containerOpen(Agent,Container),
   	       When_Time),
         [metreqs(containerOpen(Agent,Container))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',45).

 /*  metreqs(containerOpen(Agent, Container)) ->
       requires(containerOpen(Agent, Container), When_Time).
 */
if metreqs(containerOpen(Agent, Container))then requires(containerOpen(Agent, Container), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',45).

 /*  reactive_rule([metreqs(containerOpen(Agent,Container))],
   	      [ requires(containerOpen(Agent,Container),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',45).

 /*  reactive_rule([metreqs(containerOpen(Agent,Container))],
   	      [ requires(containerOpen(Agent,Container),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',45).

 /*  fix_axiom_head(When_Time) ->
       [ holds_at(metreqs(containerOpen(Agent, Container)),
                  When_Time),
          (->),
         metreqs(containerOpen(Agent, Container))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',45).

 /*  pl=axiom(metreqs(containerOpen(Agent,Container)),
         [not(containerIsOpen(Container))]).
 */

 /*  not(containerIsOpen(Container)) ->
       metreqs(containerOpen(Agent, Container)).
 */
if not containerIsOpen(Container)then metreqs(containerOpen(Agent, Container)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',45).

 /*  reactive_rule([not(containerIsOpen(Container))],
   	      [metreqs(containerOpen(Agent,Container))]).
 */

 /*  reactive_rule([not(containerIsOpen(Container))],
   	      [metreqs(containerOpen(Agent,Container))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',45).

 /*  holds_at(holding(Agent, Container), When_Time) :-
       happens(containerOpen(Agent, Container), When_Time).
 */

 /*  pl=axiom(requires(containerOpen(Agent,Container),
   	       When_Time),
         [metreqs(containerOpen(Agent,Container))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',45).

 /*  metreqs(containerOpen(Agent, Container)) ->
       requires(containerOpen(Agent, Container), When_Time).
 */
if metreqs(containerOpen(Agent, Container))then requires(containerOpen(Agent, Container), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',45).

 /*  reactive_rule([metreqs(containerOpen(Agent,Container))],
   	      [ requires(containerOpen(Agent,Container),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',45).

 /*  reactive_rule([metreqs(containerOpen(Agent,Container))],
   	      [ requires(containerOpen(Agent,Container),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',45).

 /*  fix_axiom_head(When_Time) ->
       [ holds_at(metreqs(containerOpen(Agent, Container)),
                  When_Time),
          (->),
         metreqs(containerOpen(Agent, Container))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',45).

 /*  pl=axiom(metreqs(containerOpen(Agent,Container)),
         [holding(Agent,Container)]).
 */

 /*  holding(Agent, Container) ->
       metreqs(containerOpen(Agent, Container)).
 */
if holding(Agent, Container)then metreqs(containerOpen(Agent, Container)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',45).

 /*  reactive_rule([holding(Agent,Container)],
   	      [metreqs(containerOpen(Agent,Container))]).
 */

 /*  reactive_rule([holding(Agent,Container)],
   	      [metreqs(containerOpen(Agent,Container))]).
 */


%; An effect axiom states that
%; if an agent opens a container,
%; the container will be open:
% [agent,container,time]
% Initiates(ContainerOpen(agent,container),ContainerIsOpen(container),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',54).

 /*  pl=axiom(initiates(containerOpen(Agent,Container),
   		containerIsOpen(Container),
   		Time),
         []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',54).

 /*  initiates(containerOpen(Agent,Container),
   	  containerIsOpen(Container),
   	  Time).
 */
containerOpen(Agent, Container)initiates containerIsOpen(Container).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',54).

 /*  initiated(happens(containerOpen(Agent,Container),
   		  Time_From,
   		  Time_Until),
   	  containerIsOpen(Container),
   	  []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',54).

 /*  initiated(happens(containerOpen(Agent,Container),
   		  Time_From,
   		  Time_Until),
   	  containerIsOpen(Container),
   	  []).
 */


%; A precondition axiom states that
%; for an agent to close a container,
%; the agent must be awake,
%; the container must be open, and
%; the agent must be holding the container.
% [agent,container,time]
% Happens(ContainerClose(agent,container),time) ->
% HoldsAt(Awake(agent),time) &
% HoldsAt(ContainerIsOpen(container),time) &
% HoldsAt(Holding(agent,container),time).
 %  clausify_pnf=(happens(containerClose(Agent, Container), Time)->holds_at(awake(Agent), Time), holds_at(containerIsOpen(Container), Time), holds_at(holding(Agent, Container), Time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',62).

 /*  not(happens(containerClose(Agent, Container), Time)) :-
       (   not(holds_at(awake(Agent), Time))
       ;   not(holds_at(containerIsOpen(Container), Time))
       ;   not(holds_at(holding(Agent, Container), Time))
       ).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',62).

 /*  fix_axiom_head(Time) ->
       [ not(happens(containerClose(Agent, Container), Time)),
          (->),
         not(containerClose(Agent, Container))
       ].
 */
 %   pl=axiom(not(containerClose(Agent, Container)), [(not(awake(Agent));not(containerIsOpen(Container));not(holding(Agent, Container)))]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',62).

 /*  not(awake(Agent));not(containerIsOpen(Container));not(holding(Agent, Container)) ->
       not(containerClose(Agent, Container)).
 */
if not awake(Agent);not containerIsOpen(Container);not holding(Agent, Container)then not containerClose(Agent, Container).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',62).

 /*   reactive_rule([  (not(awake(Agent));not(containerIsOpen(Container));not(holding(Agent, Container)))
                    ],
                    [not(containerClose(Agent, Container))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',62).

 /*   reactive_rule([  (not(awake(Agent));not(containerIsOpen(Container));not(holding(Agent, Container)))
                    ],
                    [not(containerClose(Agent, Container))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',62).

 /*  holds_at(awake(Agent), Time) :-
       happens(containerClose(Agent, Container), Time).
 */

 /*  pl=axiom(requires(containerClose(Agent,Container),
   	       When_Time),
         [metreqs(containerClose(Agent,Container))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',62).

 /*  metreqs(containerClose(Agent, Container)) ->
       requires(containerClose(Agent, Container), When_Time).
 */
if metreqs(containerClose(Agent, Container))then requires(containerClose(Agent, Container), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',62).

 /*  reactive_rule([metreqs(containerClose(Agent,Container))],
   	      [ requires(containerClose(Agent,Container),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',62).

 /*  reactive_rule([metreqs(containerClose(Agent,Container))],
   	      [ requires(containerClose(Agent,Container),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',62).

 /*  fix_axiom_head(When_Time) ->
       [ holds_at(metreqs(containerClose(Agent, Container)),
                  When_Time),
          (->),
         metreqs(containerClose(Agent, Container))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',62).

 /*  pl=axiom(metreqs(containerClose(Agent,Container)),
         [awake(Agent)]).
 */

 /*  awake(Agent) ->
       metreqs(containerClose(Agent, Container)).
 */
if awake(Agent)then metreqs(containerClose(Agent, Container)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',62).

 /*  reactive_rule([awake(Agent)],
   	      [metreqs(containerClose(Agent,Container))]).
 */

 /*  reactive_rule([awake(Agent)],
   	      [metreqs(containerClose(Agent,Container))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',62).

 /*  holds_at(containerIsOpen(Container), When_Time) :-
       happens(containerClose(Agent, Container), When_Time).
 */

 /*  pl=axiom(requires(containerClose(Agent,Container),
   	       When_Time),
         [metreqs(containerClose(Agent,Container))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',62).

 /*  metreqs(containerClose(Agent, Container)) ->
       requires(containerClose(Agent, Container), When_Time).
 */
if metreqs(containerClose(Agent, Container))then requires(containerClose(Agent, Container), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',62).

 /*  reactive_rule([metreqs(containerClose(Agent,Container))],
   	      [ requires(containerClose(Agent,Container),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',62).

 /*  reactive_rule([metreqs(containerClose(Agent,Container))],
   	      [ requires(containerClose(Agent,Container),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',62).

 /*  fix_axiom_head(When_Time) ->
       [ holds_at(metreqs(containerClose(Agent, Container)),
                  When_Time),
          (->),
         metreqs(containerClose(Agent, Container))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',62).

 /*  pl=axiom(metreqs(containerClose(Agent,Container)),
         [containerIsOpen(Container)]).
 */

 /*  containerIsOpen(Container) ->
       metreqs(containerClose(Agent, Container)).
 */
if containerIsOpen(Container)then metreqs(containerClose(Agent, Container)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',62).

 /*  reactive_rule([holds(containerIsOpen(Container),Holds)],
   	      [metreqs(containerClose(Agent,Container))]).
 */

 /*  reactive_rule([holds(containerIsOpen(Container),Holds)],
   	      [metreqs(containerClose(Agent,Container))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',62).

 /*  holds_at(holding(Agent, Container), When_Time) :-
       happens(containerClose(Agent, Container), When_Time).
 */

 /*  pl=axiom(requires(containerClose(Agent,Container),
   	       When_Time),
         [metreqs(containerClose(Agent,Container))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',62).

 /*  metreqs(containerClose(Agent, Container)) ->
       requires(containerClose(Agent, Container), When_Time).
 */
if metreqs(containerClose(Agent, Container))then requires(containerClose(Agent, Container), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',62).

 /*  reactive_rule([metreqs(containerClose(Agent,Container))],
   	      [ requires(containerClose(Agent,Container),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',62).

 /*  reactive_rule([metreqs(containerClose(Agent,Container))],
   	      [ requires(containerClose(Agent,Container),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',62).

 /*  fix_axiom_head(When_Time) ->
       [ holds_at(metreqs(containerClose(Agent, Container)),
                  When_Time),
          (->),
         metreqs(containerClose(Agent, Container))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',62).

 /*  pl=axiom(metreqs(containerClose(Agent,Container)),
         [holding(Agent,Container)]).
 */

 /*  holding(Agent, Container) ->
       metreqs(containerClose(Agent, Container)).
 */
if holding(Agent, Container)then metreqs(containerClose(Agent, Container)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',62).

 /*  reactive_rule([holding(Agent,Container)],
   	      [metreqs(containerClose(Agent,Container))]).
 */

 /*  reactive_rule([holding(Agent,Container)],
   	      [metreqs(containerClose(Agent,Container))]).
 */


%; An effect axiom states that
%; if an agent closes a container,
%; the container will no longer be open:
% [agent,container,time]
% Terminates(ContainerClose(agent,container),ContainerIsOpen(container),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',71).

 /*  pl=axiom(terminates(containerClose(Agent,Container),
   		 containerIsOpen(Container),
   		 Time),
         []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',71).

 /*  terminates(containerClose(Agent,Container),
   	   containerIsOpen(Container),
   	   Time).
 */
containerClose(Agent, Container)terminates containerIsOpen(Container).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',71).

 /*  terminated(happens(containerClose(Agent,Container),
   		   Time_From,
   		   Time_Until),
   	   containerIsOpen(Container),
   	   []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',71).

 /*  terminated(happens(containerClose(Agent,Container),
   		   Time_From,
   		   Time_Until),
   	   containerIsOpen(Container),
   	   []).
 */


%; End of file.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',73).
% translate: ending  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e.lps 
