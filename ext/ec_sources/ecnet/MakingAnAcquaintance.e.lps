:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Kidnapping.e',127).
% translate: unskipped  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e.lps 
:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(lps).
% translate: begining  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e.lps 
% Wed, 07 Oct 2020 09:35:50 GMT File: <stream>(0x5557c8ef1900)%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{Mueller:2004c,
%;   author = "Erik T. Mueller",
%;   year = "2004",
%;   title = "Understanding script-based stories using commonsense reasoning",
%;   journal = "Cognitive Systems Research",
%;   volume = "5",
%;   number = "4",
%;   pages = "307--340",
%; }
%;

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',22).
% option modeldiff on
:- if(is_e_toplevel).
:- set_ec_option(modeldiff, on).
:- endif.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',24).
% ignore LookOutOnto, Floor, BuildingOf, SkyOf, GroundOf

 /*  axiom(ignore(lookOutOnto),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',24).
ignore(lookOutOnto).

 /*  axiom(ignore(floor),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',24).
ignore(floor).

 /*  axiom(ignore(buildingOf),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',24).
ignore(buildingOf).

 /*  axiom(ignore(skyOf),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',24).
ignore(skyOf).

 /*  axiom(ignore(groundOf),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',24).
ignore(groundOf).

% ignore Near, WalkFrom, WalkFromTo, RunFromTo

 /*  axiom(ignore(near),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',24).
ignore(near).

 /*  axiom(ignore(walkFrom),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',24).
ignore(walkFrom).

 /*  axiom(ignore(walkFromTo),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',24).
ignore(walkFromTo).

 /*  axiom(ignore(runFromTo),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',24).
ignore(runFromTo).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',26).
% ignore Side1, Side2

 /*  axiom(ignore(side1),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',26).
ignore(side1).

 /*  axiom(ignore(side2),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',26).
ignore(side2).

% ignore FriendOf, NeutralOf, EnemyOf,

 /*  axiom(ignore(friendOf),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',26).
ignore(friendOf).

 /*  axiom(ignore(neutralOf),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',26).
ignore(neutralOf).

 /*  axiom(ignore(enemyOf),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',26).
ignore(enemyOf).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',28).
% ignore BecomeFriends, BecomeNeutral, BecomeEnemies

 /*  axiom(ignore(becomeFriends),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',28).
ignore(becomeFriends).

 /*  axiom(ignore(becomeNeutral),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',28).
ignore(becomeNeutral).

 /*  axiom(ignore(becomeEnemies),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',28).
ignore(becomeEnemies).

% ignore Happy, Calm, Unhappy

 /*  axiom(ignore(happy),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',28).
ignore(happy).

 /*  axiom(ignore(calm),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',28).
ignore(calm).

 /*  axiom(ignore(unhappy),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',28).
ignore(unhappy).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',30).
% ignore BecomeHappy, BecomeCalm, BecomeUnhappy

 /*  axiom(ignore(becomeHappy),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',30).
ignore(becomeHappy).

 /*  axiom(ignore(becomeCalm),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',30).
ignore(becomeCalm).

 /*  axiom(ignore(becomeUnhappy),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',30).
ignore(becomeUnhappy).

% ignore AngryAt, BecomeAngryAt

 /*  axiom(ignore(angryAt),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',30).
ignore(angryAt).

 /*  axiom(ignore(becomeAngryAt),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',30).
ignore(becomeAngryAt).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',32).
% ignore Like, Love, Dislike, LikeSnow

 /*  axiom(ignore(like),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',32).
ignore(like).

 /*  axiom(ignore(love),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',32).
ignore(love).

 /*  axiom(ignore(dislike),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',32).
ignore(dislike).

 /*  axiom(ignore(likeSnow),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',32).
ignore(likeSnow).

% ignore HandTo

 /*  axiom(ignore(handTo),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',32).
ignore(handTo).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',34).
% ignore InviteIn, InvitedIn, IntendToWalkIn, IntentionToWalkIn

 /*  axiom(ignore(inviteIn),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',34).
ignore(inviteIn).

 /*  axiom(ignore(invitedIn),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',34).
ignore(invitedIn).

 /*  axiom(ignore(intendToWalkIn),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',34).
ignore(intendToWalkIn).

 /*  axiom(ignore(intentionToWalkIn),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',34).
ignore(intentionToWalkIn).

% ignore ActOnIntentionToWalkIn, Greet, SayGoodbye, CryForJoy

 /*  axiom(ignore(actOnIntentionToWalkIn),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',34).
ignore(actOnIntentionToWalkIn).

 /*  axiom(ignore(greet),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',34).
ignore(greet).

 /*  axiom(ignore(sayGoodbye),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',34).
ignore(sayGoodbye).

 /*  axiom(ignore(cryForJoy),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',34).
ignore(cryForJoy).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',36).
% ignore Threaten, ReleaseFromThreat, ThreatenedBy

 /*  axiom(ignore(threaten),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',36).
ignore(threaten).

 /*  axiom(ignore(releaseFromThreat),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',36).
ignore(releaseFromThreat).

 /*  axiom(ignore(threatenedBy),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',36).
ignore(threatenedBy).

% ignore Order, KnowOrder, Request, KnowRequest

 /*  axiom(ignore(order),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',36).
ignore(order).

 /*  axiom(ignore(knowOrder),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',36).
ignore(knowOrder).

 /*  axiom(ignore(request),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',36).
ignore(request).

 /*  axiom(ignore(knowRequest),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',36).
ignore(knowRequest).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',39).
% load foundations/Root.e
:- if(is_e_toplevel).
:- cond_convert_e(changed, 'foundations/Root.e').
:- endif.

% load foundations/EC.e
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',39).
:- if(is_e_toplevel).
:- cond_convert_e(changed, 'foundations/EC.e').
:- endif.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',41).
% load answers/Mueller2003/Ontology.e
:- if(is_e_toplevel).
:- cond_convert_e(changed, 'answers/Mueller2003/Ontology.e').
 %  loading(changed,'/pack/logicmoo_ec/ext/ec_sources/ecnet/Ontology.e').
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; integer
%;

% sort diameter: integer
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Ontology.e',14).
subsort(diameter,integer).
%; object

% sort object
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Ontology.e',18).
sort(object).

% sort agent: object
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Ontology.e',20).
subsort(agent,object).

% sort physobj: object
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Ontology.e',22).
subsort(physobj,object).

% sort bed: physobj
subsort(bed,physobj).

% sort snowflake: physobj
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Ontology.e',24).
subsort(snowflake,physobj).

% sort sky: physobj
subsort(sky,physobj).

% sort stuff: physobj
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Ontology.e',27).
subsort(stuff,physobj).

% sort surface: physobj
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Ontology.e',29).
subsort(surface,physobj).

% sort ground: surface
subsort(ground,surface).

% sort snow: stuff
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Ontology.e',32).
subsort(snow,stuff).

% sort ball
sort(ball).

% sort food: physobj
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Ontology.e',35).
subsort(food,physobj).

% sort fruit: food
subsort(fruit,food).

% sort orange: fruit
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Ontology.e',37).
subsort(orange,fruit).

% sort salad: food
subsort(salad,food).

% sort clothing: physobj
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Ontology.e',40).
subsort(clothing,physobj).

% sort scarf: clothing
subsort(scarf,clothing).

% sort hat: clothing
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Ontology.e',42).
subsort(hat,clothing).

% sort vegetablematter: physobj
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Ontology.e',44).
subsort(vegetablematter,physobj).

% sort coal: vegetablematter
subsort(coal,vegetablematter).

% sort bodypart: physobj
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Ontology.e',47).
subsort(bodypart,physobj).

% sort hand: bodypart
subsort(hand,bodypart).

% sort papertowels: physobj
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Ontology.e',50).
subsort(papertowels,physobj).

% sort device: physobj
subsort(device,physobj).

% sort electronicdevice: device
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Ontology.e',52).
subsort(electronicdevice,device).

% sort lamp: electronicdevice
subsort(lamp,electronicdevice).

% sort cat: physobj
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Ontology.e',55).
subsort(cat,physobj).

% sort horse: physobj
subsort(horse,physobj).

% sort weapon: physobj
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Ontology.e',58).
subsort(weapon,physobj).

% sort gun: weapon
subsort(gun,weapon).

% sort bomb: weapon
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Ontology.e',60).
subsort(bomb,weapon).

% sort bullet: weapon
subsort(bullet,weapon).
%; location

% sort location
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Ontology.e',65).
sort(location).

% sort room: location, outside: location
subsort(room,location).
subsort(outside,location).
%; portal

% sort portal
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Ontology.e',70).
sort(portal).

% sort door: portal, staircase: portal
subsort(door,portal).
subsort(staircase,portal).

% sort street: portal
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Ontology.e',72).
subsort(street,portal).

% sort track: portal
subsort(track,portal).

% sort building
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Ontology.e',75).
sort(building).

% sort fire: object
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Ontology.e',77).
subsort(fire,object).

% sort smoke: physobj
subsort(smoke,physobj).

% sort furniture: physobj
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Ontology.e',80).
subsort(furniture,physobj).

% sort chair: furniture
subsort(chair,furniture).

% sort table: furniture
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Ontology.e',82).
subsort(table,furniture).

% sort bill: physobj
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Ontology.e',84).
subsort(bill,physobj).

% sort ticket: physobj
subsort(ticket,physobj).

% sort envelope: physobj
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Ontology.e',86).
subsort(envelope,physobj).

% sort text: physobj
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Ontology.e',88).
subsort(text,physobj).

% sort book: text
subsort(book,text).

% sort letter: text
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Ontology.e',90).
subsort(letter,text).

% sort menu: text
subsort(menu,text).

% sort paper: physobj
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Ontology.e',93).
subsort(paper,physobj).

% sort content
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Ontology.e',95).
sort(content).

% sort script
sort(script).

% sort container: physobj
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Ontology.e',98).
subsort(container,physobj).

% sort cigarette: physobj
subsort(cigarette,physobj).

% sort ashtray: physobj
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Ontology.e',100).
subsort(ashtray,physobj).

% sort umbrella: physobj
subsort(umbrella,physobj).

% sort pen: physobj
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Ontology.e',103).
subsort(pen,physobj).
%; End of file.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Ontology.e',105).
:- endif.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',42).
% load answers/Mueller2003/Feeling.e
:- if(is_e_toplevel).
:- cond_convert_e(changed, 'answers/Mueller2003/Feeling.e').
 %  loading(changed,'/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e').
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; feeling = emotion, attitude, ...
%;
%; The Feeling representation includes simple positive, neutral, and
%; negative emotions, and positive, neutral, and negative attitudes
%; toward objects.
%;
%; emotions
%; agent is happy.

% fluent Happy(agent)
 %  fluent(happy(agent)).
 %  fluent(happy(agent)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',20).
fluents([happy/1]).
mpred_prop(happy(agent),fluent).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',23).
%; agent is emotionally neutral or calm.

% fluent Calm(agent)
 %  fluent(calm(agent)).
 %  fluent(calm(agent)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',23).
fluents([calm/1]).
mpred_prop(calm(agent),fluent).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',26).
%; agent is unhappy.

% fluent Unhappy(agent)
 %  fluent(unhappy(agent)).
 %  fluent(unhappy(agent)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',26).
fluents([unhappy/1]).
mpred_prop(unhappy(agent),fluent).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',29).
%; At any moment, an agent is in one of three emotional states:

% xor Happy, Calm, Unhappy
 %  ==>xor[happy,calm,unhappy].
==>xor[happy,calm,unhappy].
%; agent becomes happy.

% event BecomeHappy(agent)
 %  event(becomeHappy(agent)).
 %  event(becomeHappy(agent)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',32).
actions([becomeHappy/1]).
mpred_prop(becomeHappy(agent),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',35).
%; agent becomes calm.

% event BecomeCalm(agent)
 %  event(becomeCalm(agent)).
 %  event(becomeCalm(agent)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',35).
actions([becomeCalm/1]).
mpred_prop(becomeCalm(agent),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',38).
%; agent becomes unhappy.

% event BecomeUnhappy(agent)
 %  event(becomeUnhappy(agent)).
 %  event(becomeUnhappy(agent)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',38).
actions([becomeUnhappy/1]).
mpred_prop(becomeUnhappy(agent),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',41).
%; A number of effect and precondition axioms deal with the transitions
%; from one emotional state to another:
% [agent,time]
% Initiates(BecomeHappy(agent),Happy(agent),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',43).

 /*  axiom(initiates(becomeHappy(Agent), happy(Agent), Time),
       []).
 */

 /*  initiates(becomeHappy(Becomehappy),
   	  happy(Becomehappy),
   	  Initiates).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',43).
initiates(becomeHappy(Becomehappy),happy(Becomehappy)).

 /*  initiated(happens(becomeHappy(Becomehappy),
   		  Time_From,
   		  Time_Until),
   	  happy(Becomehappy),
   	  []).
 */


% [agent,time]
% HoldsAt(Calm(agent),time) ->
% Terminates(BecomeHappy(agent),Calm(agent),time).

 /*  axiom(terminates(becomeHappy(Agent), calm(Agent), Time),
       [calm(Agent)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',47).

 /*  calm(Calm) ->
       terminates(becomeHappy(Calm), calm(Calm), Terminates).
 */
then(if(calm(Calm)),
     terminates(becomeHappy(Calm),
		at(calm(Calm),Terminates),
		Terminates4)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',47).

 /*  reactive_rule([holds(calm(Calm),Holds)],
   	      [ terminates(becomeHappy(Calm),
   			   at(calm(Calm),Terminates),
   			   Terminates4)
   	      ]).
 */


% [agent,time]
% HoldsAt(Unhappy(agent),time) ->
% Terminates(BecomeHappy(agent),Unhappy(agent),time).

 /*  axiom(terminates(becomeHappy(Agent), unhappy(Agent), Time),
       [unhappy(Agent)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',51).

 /*  unhappy(Unhappy) ->
       terminates(becomeHappy(Unhappy),
                  unhappy(Unhappy),
                  Terminates).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',51).
then(if(unhappy(Unhappy)),
     terminates(becomeHappy(Unhappy),
		at(unhappy(Unhappy),Terminates),
		Terminates4)).

 /*  reactive_rule([holds(unhappy(Unhappy),Holds)],
   	      [ terminates(becomeHappy(Unhappy),
   			   at(unhappy(Unhappy),Terminates),
   			   Terminates4)
   	      ]).
 */


% [agent,time]
% Happens(BecomeHappy(agent),time) ->
% !HoldsAt(Happy(agent),time).

 /*  happens(becomeHappy(Agent), Time) ->
       holds_at(neg(happy(Agent)), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',55).
then(if(happens(becomeHappy(Agent),Time)),
     at(not(happy(Agent)),Time)).

 /*  reactive_rule([happens(becomeHappy(Agent),Time)],
   	      [holds(not(happy(Agent)),Time)]).
 */


% [agent,time]
% Initiates(BecomeCalm(agent),Calm(agent),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',59).

 /*  axiom(initiates(becomeCalm(Agent), calm(Agent), Time),
       []).
 */

 /*  initiates(becomeCalm(Becomecalm),
   	  calm(Becomecalm),
   	  Initiates).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',59).
initiates(becomeCalm(Becomecalm),calm(Becomecalm)).

 /*  initiated(happens(becomeCalm(Becomecalm),
   		  Time_From,
   		  Time_Until),
   	  calm(Becomecalm),
   	  []).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',61).
% [agent,time]
% HoldsAt(Happy(agent),time) ->
% Terminates(BecomeCalm(agent),Happy(agent),time).

 /*  axiom(terminates(becomeCalm(Agent), happy(Agent), Time),
       [happy(Agent)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',61).

 /*  happy(Happy) ->
       terminates(becomeCalm(Happy), happy(Happy), Terminates).
 */
then(if(happy(Happy)),
     terminates(becomeCalm(Happy),
		at(happy(Happy),Terminates),
		Terminates4)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',61).

 /*  reactive_rule([holds(happy(Happy),Holds)],
   	      [ terminates(becomeCalm(Happy),
   			   at(happy(Happy),Terminates),
   			   Terminates4)
   	      ]).
 */


% [agent,time]
% HoldsAt(Unhappy(agent),time) ->
% Terminates(BecomeCalm(agent),Unhappy(agent),time).

 /*  axiom(terminates(becomeCalm(Agent), unhappy(Agent), Time),
       [unhappy(Agent)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',66).

 /*  unhappy(Unhappy) ->
       terminates(becomeCalm(Unhappy),
                  unhappy(Unhappy),
                  Terminates).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',66).
then(if(unhappy(Unhappy)),
     terminates(becomeCalm(Unhappy),
		at(unhappy(Unhappy),Terminates),
		Terminates4)).

 /*  reactive_rule([holds(unhappy(Unhappy),Holds)],
   	      [ terminates(becomeCalm(Unhappy),
   			   at(unhappy(Unhappy),Terminates),
   			   Terminates4)
   	      ]).
 */


% [agent,time]
% Happens(BecomeCalm(agent),time) -> !HoldsAt(Calm(agent),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',70).

 /*  happens(becomeCalm(Agent), Time) ->
       holds_at(neg(calm(Agent)), Time).
 */
then(if(happens(becomeCalm(Agent),Time)),
     at(not(calm(Agent)),Time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',70).

 /*  reactive_rule([happens(becomeCalm(Agent),Time)],
   	      [holds(not(calm(Agent)),Time)]).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',72).
% [agent,time]
% Initiates(BecomeUnhappy(agent),Unhappy(agent),time).

 /*  axiom(initiates(becomeUnhappy(Agent), unhappy(Agent), Time),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',72).

 /*  initiates(becomeUnhappy(Becomeunhappy),
   	  unhappy(Becomeunhappy),
   	  Initiates).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',72).
initiates(becomeUnhappy(Becomeunhappy),
	  unhappy(Becomeunhappy)).

 /*  initiated(happens(becomeUnhappy(Becomeunhappy),
   		  Time_From,
   		  Time_Until),
   	  unhappy(Becomeunhappy),
   	  []).
 */


% [agent,time]
% HoldsAt(Happy(agent),time) ->
% Terminates(BecomeUnhappy(agent),Happy(agent),time).

 /*  axiom(terminates(becomeUnhappy(Agent), happy(Agent), Time),
       [happy(Agent)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',76).

 /*  happy(Happy) ->
       terminates(becomeUnhappy(Happy), happy(Happy), Terminates).
 */
then(if(happy(Happy)),
     terminates(becomeUnhappy(Happy),
		at(happy(Happy),Terminates),
		Terminates4)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',76).

 /*  reactive_rule([holds(happy(Happy),Holds)],
   	      [ terminates(becomeUnhappy(Happy),
   			   at(happy(Happy),Terminates),
   			   Terminates4)
   	      ]).
 */


% [agent,time]
% HoldsAt(Calm(agent),time) ->
% Terminates(BecomeUnhappy(agent),Calm(agent),time).

 /*  axiom(terminates(becomeUnhappy(Agent), calm(Agent), Time),
       [calm(Agent)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',80).

 /*  calm(Calm) ->
       terminates(becomeUnhappy(Calm), calm(Calm), Terminates).
 */
then(if(calm(Calm)),
     terminates(becomeUnhappy(Calm),
		at(calm(Calm),Terminates),
		Terminates4)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',80).

 /*  reactive_rule([holds(calm(Calm),Holds)],
   	      [ terminates(becomeUnhappy(Calm),
   			   at(calm(Calm),Terminates),
   			   Terminates4)
   	      ]).
 */


% [agent,time]
% Happens(BecomeUnhappy(agent),time) -> !HoldsAt(Unhappy(agent),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',84).

 /*  happens(becomeUnhappy(Agent), Time) ->
       holds_at(neg(unhappy(Agent)), Time).
 */
then(if(happens(becomeUnhappy(Agent),Time)),
     at(not(unhappy(Agent)),Time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',84).

 /*  reactive_rule([happens(becomeUnhappy(Agent),Time)],
   	      [holds(not(unhappy(Agent)),Time)]).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',86).
%; anger

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',88).
% fluent AngryAt(agent,agent)
 %  fluent(angryAt(agent,agent)).
 %  fluent(angryAt(agent,agent)).
fluents([angryAt/2]).
mpred_prop(angryAt(agent,agent),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',90).
% event BecomeAngryAt(agent,agent)
 %  event(becomeAngryAt(agent,agent)).
 %  event(becomeAngryAt(agent,agent)).
actions([becomeAngryAt/2]).
mpred_prop(becomeAngryAt(agent,agent),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',92).
% [agent1,agent2,time]
% Initiates(BecomeAngryAt(agent1,agent2),AngryAt(agent1,agent2),time).

 /*  axiom(initiates(becomeAngryAt(Agent1, Agent2), angryAt(Agent1, Agent2), Time),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',92).

 /*  initiates(becomeAngryAt(A,Becomeangryat),
   	  angryAt(A,Becomeangryat),
   	  Initiates).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',92).
initiates(becomeAngryAt(A,Becomeangryat),
	  angryAt(A,Becomeangryat)).

 /*  initiated(happens(becomeAngryAt(A,Becomeangryat),
   		  Time_From,
   		  Time_Until),
   	  angryAt(A,Becomeangryat),
   	  []).
 */


% [agent1,agent2,time]
% Terminates(BecomeHappy(agent1),AngryAt(agent1,agent2),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',96).

 /*  axiom(terminates(becomeHappy(Agent1), angryAt(Agent1, Agent2), Time),
       []).
 */

 /*  terminates(becomeHappy(Becomehappy),
   	   angryAt(Becomehappy,Angryat),
   	   Terminates).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',96).
terminates(becomeHappy(Becomehappy),
	   angryAt(Becomehappy,Angryat)).

 /*  terminated(happens(becomeHappy(Becomehappy),
   		   Time_From,
   		   Time_Until),
   	   angryAt(Becomehappy,Angryat),
   	   []).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',98).
% [agent1,agent2,time]
% Happens(BecomeAngryAt(agent1,agent2),time) ->
% Happens(BecomeUnhappy(agent1),time).

 /*  happens(becomeAngryAt(Agent1, Agent2), Time) ->
       happens(becomeUnhappy(Agent1), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',98).
then(if(happens(becomeAngryAt(Agent1,Agent2),Time)),
     happens(becomeUnhappy(Agent1),Time)).

 /*  reactive_rule([ happens(becomeAngryAt(Agent1,Agent2),
   			Time)
   	      ],
   	      [happens(becomeUnhappy(Agent1),Time)]).
 */


%; attitudes
%; agent likes object.

% fluent Like(agent,object)
 %  fluent(like(agent,object)).
 %  fluent(like(agent,object)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',104).
fluents([like/2]).
mpred_prop(like(agent,object),fluent).


%; agent loves object.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',107).
% fluent Love(agent,object)
 %  fluent(love(agent,object)).
 %  fluent(love(agent,object)).
fluents([love/2]).
mpred_prop(love(agent,object),fluent).


%; agent dislikes object.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',109).
% fluent Dislike(agent,object)
 %  fluent(dislike(agent,object)).
 %  fluent(dislike(agent,object)).
fluents([dislike/2]).
mpred_prop(dislike(agent,object),fluent).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',111).
%; agent likes snow.

% fluent LikeSnow(agent)
 %  fluent(likeSnow(agent)).
 %  fluent(likeSnow(agent)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',111).
fluents([likeSnow/1]).
mpred_prop(likeSnow(agent),fluent).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',114).
%; A trigger axiom states that
%; if an agent is awake, likes snow, and is in a room that
%; looks out onto a location where it is snowing, that agent
%; becomes happy:
% [agent,room,outside,time]
% !HoldsAt(Happy(agent),time) &
% HoldsAt(Awake(agent),time) &
% HoldsAt(LikeSnow(agent),time) &
% HoldsAt(At(agent,room),time) &
% LookOutOnto(room)=outside &
% HoldsAt(Snowing(outside),time) ->
% Happens(BecomeHappy(agent),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',118).

 /*  (   holds_at(neg(happy(Agent)), Time),
       holds_at(awake(Agent), Time),
       holds_at(likeSnow(Agent), Time),
       holds_at(at(Agent, Room), Time),
       equals(lookOutOnto(Room), Outside),
       holds_at(snowing(Outside), Time)
   ->  happens(becomeHappy(Agent), Time)
   ).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',118).
then(if((at(not(happy(Agent)), Time), at(awake(Agent), Time), at(likeSnow(Agent), Time), at(loc_at(Agent, Room), Time), equals(lookOutOnto(Room), Outside), at(snowing(Outside), Time))), happens(becomeHappy(Agent), Time)).

 /*  reactive_rule([ holds(not(happy(Agent)),Time),
   		holds(awake(Agent),Time),
   		holds(likeSnow(Agent),Time),
   		holds(loc_at(Agent,Room),Time),
   		equals(lookOutOnto(Room),Outside),
   		holds(snowing(Outside),Time)
   	      ],
   	      [happens(becomeHappy(Agent),Time)]).
 */


%; We introduced LikeSnow above since Like
%; can only be used to represent that an agent likes a
%; particular object, not snow in general.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',131).
% event Smile(agent)
 %  event(smile(agent)).
 %  event(smile(agent)).
actions([smile/1]).
mpred_prop(smile(agent),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',133).
%; End of file.
:- endif.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',43).
% load answers/Mueller2004c/HandTo.e
:- if(is_e_toplevel).
:- cond_convert_e(changed, 'answers/Mueller2004c/HandTo.e').
 %  loading(changed,'/pack/logicmoo_ec/ext/ec_sources/ecnet/HandTo.e').
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;

% event HandTo(agent,agent,physobj)
 %  event(handTo(agent,agent,physobj)).
 %  event(handTo(agent,agent,physobj)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/HandTo.e',12).
actions([handTo/3]).
mpred_prop(handTo(agent,agent,physobj),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/HandTo.e',14).
% [agent1,agent2,physobj,time]
% Initiates(HandTo(agent1,agent2,physobj),
%           Holding(agent2,physobj),
%           time).

 /*  axiom(initiates(handTo(Agent1, Agent2, Physobj), holding(Agent2, Physobj), Time),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/HandTo.e',14).

 /*  initiates(handTo(HandtoP_Num3_V,A,Handto),
   	  holding(A,Handto),
   	  Initiates).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/HandTo.e',14).
initiates(handTo(HandtoP_Num3_V,A,Handto),
	  holding(A,Handto)).

 /*  initiated(happens(handTo(HandtoP_Num3_V,A,Handto),
   		  Time_From,
   		  Time_Until),
   	  holding(A,Handto),
   	  []).
 */


% [agent1,agent2,physobj,time]
% Terminates(HandTo(agent1,agent2,physobj),
%            Holding(agent1,physobj),
%            time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/HandTo.e',20).

 /*  axiom(terminates(handTo(Agent1, Agent2, Physobj), holding(Agent1, Physobj), Time),
       []).
 */

 /*  terminates(handTo(HandtoP_Num3_V,_,Handto),
   	   holding(HandtoP_Num3_V,Handto),
   	   Terminates).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/HandTo.e',20).
terminates(handTo(HandtoP_Num3_V,_,Handto),
	   holding(HandtoP_Num3_V,Handto)).

 /*  terminated(happens(handTo(HandtoP_Num3_V,_,Handto),
   		   Time_From,
   		   Time_Until),
   	   holding(HandtoP_Num3_V,Handto),
   	   []).
 */


% [agent1,agent2,physobj,time]
% Happens(HandTo(agent1,agent2,physobj),time) ->
% HoldsAt(Holding(agent1,physobj),time).

 /*  happens(handTo(Agent1, Agent2, Physobj), Time) ->
       holds_at(holding(Agent1, Physobj), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/HandTo.e',25).
then(if(happens(handTo(Agent1,Agent2,Physobj),
		Time)),
     at(holding(Agent1,Physobj),Time)).

 /*  reactive_rule([ happens(handTo(Agent1,Agent2,Physobj),
   			Time)
   	      ],
   	      [holds(holding(Agent1,Physobj),Time)]).
 */

% event ShakeHands(agent,agent)
 %  event(shakeHands(agent,agent)).
 %  event(shakeHands(agent,agent)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/HandTo.e',27).
actions([shakeHands/2]).
mpred_prop(shakeHands(agent,agent),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/HandTo.e',30).
% event WriteOn(agent,paper,pen)
 %  event(writeOn(agent,paper,pen)).
 %  event(writeOn(agent,paper,pen)).
actions([writeOn/3]).
mpred_prop(writeOn(agent,paper,pen),event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/HandTo.e',30).
:- endif.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',44).
% load answers/Mueller2004c/RTSpaceM.e
:- if(is_e_toplevel).
:- cond_convert_e(changed, 'answers/Mueller2004c/RTSpaceM.e').
 %  loading(changed,'/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e').
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; RTSpace: room-scale topological space
%;
%; We use topological and metric representations of space,
%; at two levels of granularity---room-scale and object-scale.
%; The RTSpace representation deals with topological space at
%; the scale of rooms and outdoor locations.
%; This representation of space consists of locations, which
%; are connected by portals. There are two types of locations:
%; rooms and outside areas (outsides).
%;
%; object is at location.

% fluent At(object,location)
 %  fluent(at(object,location)).
 %  fluent(at(object,location)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',22).
fluents([loc_at/2]).
 %  mpred_prop(at(object,location),fluent).
mpred_prop(loc_at(object,location),fluent).

% manualrelease At
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',24).

 /*  axiom(manualrelease(at),
       []).
 */
manualrelease(at).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',26).
% [object1,location,time]
% (% {object2} PartOf(object1,object2)) ->
% ReleasedAt(At(object1,location),time).
 %  clausify_pnf=exists([Object2],  (partOf(Object1, Object2)->releasedAt(at(Object1, Location), Time))).

 /*  releasedAt(at(Object1, Location), Time) :-
       partOf(Object1, Exists_Object2),
       some(Exists_Object2,
            '$kolem_Fn_62'(Object1, Location, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',26).

 /*  axiom(releasedAt(at(Object1, Location), Time),
       [ partOf(Object1, Exists_Object2),
         some(Exists_Object2,
              '$kolem_Fn_62'(Object1, Location, Time))
       ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',26).

 /*  (   partOf(Kolem_Fn_62P_Num3_V, Partof),
       some(Partof,
            '$kolem_Fn_62'(Kolem_Fn_62P_Num3_V, Tloc, Time_At))
   ->  releasedAt(at(Kolem_Fn_62P_Num3_V, Tloc), Time_At)
   ).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',26).
then(if((partOf(Kolem_Fn_62P_Num3_V, Partof), some(Partof, '$kolem_Fn_62'(Kolem_Fn_62P_Num3_V, Tloc, Time_At)))), releasedAt(loc_at(Kolem_Fn_62P_Num3_V, Tloc), Time_At)).

 /*  reactive_rule([ partOf(Kolem_Fn_62P_Num3_V,Partof),
   		some(Partof,
   		     '$kolem_Fn_62'(Kolem_Fn_62P_Num3_V,
   				    Tloc,
   				    Time_At))
   	      ],
   	      [ releasedAt(loc_at(Kolem_Fn_62P_Num3_V,Tloc),
   			   Time_At)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',26).

 /*  not(partOf(Object1, Exists_Object2)) :-
       not(releasedAt(at(Object1, Location), Time)),
       some(Exists_Object2,
            '$kolem_Fn_62'(Object1, Location, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',26).

 /*  axiom(not(partOf(Object1, Exists_Object2)),
       [ not(releasedAt(at(Object1, Location), Time)),
         some(Exists_Object2,
              '$kolem_Fn_62'(Object1, Location, Time))
       ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',26).

 /*  (   not(releasedAt(at(Kolem_Fn_62P_Num3_V11, Tloc9),
                      Time_At10)),
       some(Partof12,
            '$kolem_Fn_62'(Kolem_Fn_62P_Num3_V11, Tloc9, Time_At10))
   ->  not(partOf(Kolem_Fn_62P_Num3_V11, Partof12))
   ).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',26).
then(if((not(releasedAt(loc_at(Kolem_Fn_62P_Num3_V11, Tloc9), Time_At10)), some(Partof12, '$kolem_Fn_62'(Kolem_Fn_62P_Num3_V11, Tloc9, Time_At10)))), not(partOf(Kolem_Fn_62P_Num3_V11, Partof12))).

 /*  reactive_rule([ not(releasedAt(loc_at(Kolem_Fn_62P_Num3_V11,
   				      Tloc9),
   			       Time_At10)),
   		some(Partof12,
   		     '$kolem_Fn_62'(Kolem_Fn_62P_Num3_V11,
   				    Tloc9,
   				    Time_At10))
   	      ],
   	      [not(partOf(Kolem_Fn_62P_Num3_V11,Partof12))]).
 */


%; A state constraint says that an object
%; is at one location at a time:
% [object,location1,location2,time]
% HoldsAt(At(object,location1),time) &
% HoldsAt(At(object,location2),time) ->
% location1=location2.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',32).

 /*  (   holds_at(at(Object, Location1), Time),
       holds_at(at(Object, Location2), Time)
   ->  equals(Location1, Location2)
   ).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',32).
then(if((at(loc_at(Object, Location1), Time), at(loc_at(Object, Location2), Time))), equals(Location1, Location2)).

 /*  reactive_rule([ holds(loc_at(Object,Location1),Time),
   		holds(loc_at(Object,Location2),Time)
   	      ],
   	      [equals(Location1,Location2)]).
 */


%; connectivity
%; Side one of portal is location.

% function Side1(portal): location
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',39).

 /*  axiom(function_arity(side1(portal), 1),
       []).
 */
function_arity(side1(portal),1).
 %  predicate(side1Pred(portal,location)).
 %  predicate(side1Pred(portal,location)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',39).
predicates([side1Pred/2]).
mpred_prop(side1Pred(portal,location),predicate).

 /*  axiom(functional_predicate(side1, side1Pred),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',39).
functional_predicate(side1,side1Pred).
resultIsa(side1,location).
%; Side two of portal is location.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',42).
% function Side2(portal): location

 /*  axiom(function_arity(side2(portal), 1),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',42).
function_arity(side2(portal),1).
 %  predicate(side2Pred(portal,location)).
 %  predicate(side2Pred(portal,location)).
predicates([side2Pred/2]).
mpred_prop(side2Pred(portal,location),predicate).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',42).

 /*  axiom(functional_predicate(side2, side2Pred),
       []).
 */
functional_predicate(side2,side2Pred).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',42).
resultIsa(side2,location).
%; The building of room is building.

% function BuildingOf(room): building
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',44).

 /*  axiom(function_arity(buildingOf(room), 1),
       []).
 */
function_arity(buildingOf(room),1).
 %  predicate(building(room,building)).
 %  predicate(building(room,building)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',44).
predicates([building/2]).
mpred_prop(building(room,building),predicate).

 /*  axiom(functional_predicate(buildingOf, building),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',44).
functional_predicate(buildingOf,building).
resultIsa(buildingOf,building).
%; object is at a location that has portal.

% fluent NearPortal(object,portal)
 %  fluent(nearPortal(object,portal)).
 %  fluent(nearPortal(object,portal)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',47).
fluents([nearPortal/2]).
mpred_prop(nearPortal(object,portal),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',49).
% noninertial NearPortal
noninertial(nearPortal).
%; A state constraint says that an object is near
%; a portal if and only if there is a location such that
%; the object is at the location and one of the sides
%; of the portal is the location:
% [object,portal,time]
% HoldsAt(NearPortal(object,portal),time) <->
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',55).
% {location}% 
%  (Side1(portal)=location|
%   Side2(portal)=location) &
%  HoldsAt(At(object,location),time).
 %  clausify_pnf=exists([Location], <->(holds_at(nearPortal(Object, Portal), Time),  ((equals(side1(Portal), Location);equals(side2(Portal), Location)), holds_at(at(Object, Location), Time)))).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',57).

 /*  not(holds_at(nearPortal(Object, Portal), Time)) :-
       (   not(equals(side1(Portal), Exists_Location)),
           not(equals(side2(Portal), Exists_Location))
       ;   not(holds_at(at(Object, Exists_Location), Time))
       ),
       some(Exists_Location,
            '$kolem_Fn_63'(Object, Portal, Time)).
 */
 %  axiom(not(nearPortal(Object, Portal)), [(not(equals(side1(Portal), Exists_Location)), not(equals(side2(Portal), Exists_Location));not(at(Object, Exists_Location))), some(Exists_Location, '$kolem_Fn_63'(Object, Portal, Time))]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',57).

 /*  (   (   not(equals(side1(Side1), Tloc)),
           not(equals(side2(Side1), Tloc))
       ;   not(at(Kolem_Fn_63P_Num3_V, Tloc))
       ),
       some(Tloc,
            '$kolem_Fn_63'(Kolem_Fn_63P_Num3_V, Side1, Kolem_Fn_63))
   ->  not(nearPortal(Kolem_Fn_63P_Num3_V, Side1))
   ).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',57).
then(if(((not(equals(side1(Side1), Tloc)), not(equals(side2(Side1), Tloc));not(loc_at(Kolem_Fn_63P_Num3_V, Tloc))), some(Tloc, '$kolem_Fn_63'(Kolem_Fn_63P_Num3_V, Side1, Kolem_Fn_63)))), not(nearPortal(Kolem_Fn_63P_Num3_V, Side1))).
 %  reactive_rule([(not(equals(side1(Side1), Tloc)), not(equals(side2(Side1), Tloc));not(loc_at(Kolem_Fn_63P_Num3_V, Tloc))), some(Tloc, '$kolem_Fn_63'(Kolem_Fn_63P_Num3_V, Side1, Kolem_Fn_63))], [holds(not(nearPortal(Kolem_Fn_63P_Num3_V, Side1)), Holds)]).

 /*  holds_at(at(Object, Exists_Location), Time) :-
       holds_at(nearPortal(Object, Portal), Time),
       some(Exists_Location,
            '$kolem_Fn_63'(Object, Portal, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',57).

 /*  fix_axiom_head(Time) ->
       [ holds_at(at(Object, Exists_Location), Time),
          (->),
         at(Object, Exists_Location)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',57).

 /*  axiom(at(Object, Exists_Location),
       [ nearPortal(Object, Portal),
         some(Exists_Location,
              '$kolem_Fn_63'(Object, Portal, Time))
       ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',57).

 /*  (   nearPortal(Kolem_Fn_63P_Num3_V13, Nearportal),
       some(Tloc10,
            '$kolem_Fn_63'(Kolem_Fn_63P_Num3_V13,
                           Nearportal,
                           Kolem_Fn_6312))
   ->  at(Kolem_Fn_63P_Num3_V13, Tloc10)
   ).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',57).
then(if((nearPortal(Kolem_Fn_63P_Num3_V13, Nearportal), some(Tloc10, '$kolem_Fn_63'(Kolem_Fn_63P_Num3_V13, Nearportal, Kolem_Fn_6312)))), loc_at(Kolem_Fn_63P_Num3_V13, Tloc10)).

 /*  reactive_rule([ holds(nearPortal(Kolem_Fn_63P_Num3_V13,
   				 Nearportal),
   		      Holds14),
   		some(Tloc10,
   		     '$kolem_Fn_63'(Kolem_Fn_63P_Num3_V13,
   				    Nearportal,
   				    Kolem_Fn_6312))
   	      ],
   	      [ holds(loc_at(Kolem_Fn_63P_Num3_V13,Tloc10),
   		      Holds15)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',57).

 /*  holds_at(nearPortal(Object, Portal), Time) :-
       holds_at(at(Object, Exists_Location), Time),
       (   equals(side1(Portal), Exists_Location)
       ;   equals(side2(Portal), Exists_Location)
       ),
       some(Exists_Location,
            '$kolem_Fn_63'(Object, Portal, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',57).

 /*  fix_axiom_head(Time) ->
       [ holds_at(nearPortal(Object, Portal), Time),
          (->),
         nearPortal(Object, Portal)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',57).

 /*  axiom(nearPortal(Object, Portal),
       [ at(Object, Exists_Location),
          (equals(side1(Portal), Exists_Location);equals(side2(Portal), Exists_Location)),
         some(Exists_Location,
              '$kolem_Fn_63'(Object, Portal, Time))
       ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',57).

 /*  (   at(Kolem_Fn_63P_Num3_V19, Tloc16),
       (   equals(side1(Side117), Tloc16)
       ;   equals(side2(Side117), Tloc16)
       ),
       some(Tloc16,
            '$kolem_Fn_63'(Kolem_Fn_63P_Num3_V19,
                           Side117,
                           Kolem_Fn_6318))
   ->  nearPortal(Kolem_Fn_63P_Num3_V19, Side117)
   ).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',57).
then(if((loc_at(Kolem_Fn_63P_Num3_V19, Tloc16), (equals(side1(Side117), Tloc16);equals(side2(Side117), Tloc16)), some(Tloc16, '$kolem_Fn_63'(Kolem_Fn_63P_Num3_V19, Side117, Kolem_Fn_6318)))), nearPortal(Kolem_Fn_63P_Num3_V19, Side117)).

 /*   reactive_rule([ holds(loc_at(Kolem_Fn_63P_Num3_V19, Tloc16),
                            Holds20),
                       (equals(side1(Side117), Tloc16);equals(side2(Side117), Tloc16)),
                      some(Tloc16,
                           '$kolem_Fn_63'(Kolem_Fn_63P_Num3_V19,
                                          Side117,
                                          Kolem_Fn_6318))
                    ],
                    [ holds(nearPortal(Kolem_Fn_63P_Num3_V19, Side117),
                            Holds21)
                    ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',57).

 /*  not(holds_at(at(Object, Exists_Location), Time)) :-
       (   equals(side1(Portal), Exists_Location)
       ;   equals(side2(Portal), Exists_Location)
       ),
       not(holds_at(nearPortal(Object, Portal), Time)),
       some(Exists_Location,
            '$kolem_Fn_63'(Object, Portal, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',57).

 /*  axiom(not(at(Object, Exists_Location)),
       [  (equals(side1(Portal), Exists_Location);equals(side2(Portal), Exists_Location)),
         not(nearPortal(Object, Portal)),
         some(Exists_Location,
              '$kolem_Fn_63'(Object, Portal, Time))
       ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',57).

 /*  (   (   equals(side1(Side123), Tloc22)
       ;   equals(side2(Side123), Tloc22)
       ),
       not(nearPortal(Kolem_Fn_63P_Num3_V25, Side123)),
       some(Tloc22,
            '$kolem_Fn_63'(Kolem_Fn_63P_Num3_V25,
                           Side123,
                           Kolem_Fn_6324))
   ->  not(at(Kolem_Fn_63P_Num3_V25, Tloc22))
   ).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',57).
then(if(((equals(side1(Side123), Tloc22);equals(side2(Side123), Tloc22)), not(nearPortal(Kolem_Fn_63P_Num3_V25, Side123)), some(Tloc22, '$kolem_Fn_63'(Kolem_Fn_63P_Num3_V25, Side123, Kolem_Fn_6324)))), not(loc_at(Kolem_Fn_63P_Num3_V25, Tloc22))).

 /*   reactive_rule([  (equals(side1(Side123), Tloc22);equals(side2(Side123), Tloc22)),
                      holds(not(nearPortal(Kolem_Fn_63P_Num3_V25,
                                           Side123)),
                            Holds26),
                      some(Tloc22,
                           '$kolem_Fn_63'(Kolem_Fn_63P_Num3_V25,
                                          Side123,
                                          Kolem_Fn_6324))
                    ],
                    [ holds(not(loc_at(Kolem_Fn_63P_Num3_V25, Tloc22)),
                            Holds27)
                    ]).
 */


%; locking and unlocking doors
%; agent unlocks door.

% event DoorUnlock(agent,door)
 %  event(doorUnlock(agent,door)).
 %  event(doorUnlock(agent,door)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',64).
actions([doorUnlock/2]).
mpred_prop(doorUnlock(agent,door),event).


%; agent locks door.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',67).
% event DoorLock(agent,door)
 %  event(doorLock(agent,door)).
 %  event(doorLock(agent,door)).
actions([doorLock/2]).
mpred_prop(doorLock(agent,door),event).


%; door is unlocked.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',69).
% fluent DoorUnlocked(door)
 %  fluent(doorUnlocked(door)).
 %  fluent(doorUnlocked(door)).
fluents([doorUnlocked/1]).
mpred_prop(doorUnlocked(door),fluent).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',71).
%; A precondition axiom states that
%; for an agent to unlock a door,
%; the agent must be awake,
%; the door must not already be unlocked, and
%; the agent must be near the door:
% [agent,door,time]
% Happens(DoorUnlock(agent,door),time) ->
% HoldsAt(Awake(agent),time) &
% !HoldsAt(DoorUnlocked(door),time) &
% HoldsAt(NearPortal(agent,door),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',76).

 /*  (   happens(doorUnlock(Agent, Door), Time)
   ->  holds_at(awake(Agent), Time),
       holds_at(neg(doorUnlocked(Door)), Time),
       holds_at(nearPortal(Agent, Door), Time)
   ).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',76).
then(if(happens(doorUnlock(Agent, Door), Time)),  (at(awake(Agent), Time), at(not(doorUnlocked(Door)), Time), at(nearPortal(Agent, Door), Time))).

 /*  reactive_rule([happens(doorUnlock(Agent,Door),Time)],
   	      [ holds(awake(Agent),Time),
   		holds(not(doorUnlocked(Door)),Time),
   		holds(nearPortal(Agent,Door),Time)
   	      ]).
 */


%; An effect axiom states that
%; if an agent unlocks a door,
%; the door will be unlocked:
% [agent,door,time]
% Initiates(DoorUnlock(agent,door),DoorUnlocked(door),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',85).

 /*  axiom(initiates(doorUnlock(Agent, Door), doorUnlocked(Door), Time),
       []).
 */

 /*  initiates(doorUnlock(_,Doorunlock),
   	  doorUnlocked(Doorunlock),
   	  Initiates).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',85).
initiates(doorUnlock(_,Doorunlock),
	  doorUnlocked(Doorunlock)).

 /*  initiated(happens(doorUnlock(_,Doorunlock),
   		  Time_From,
   		  Time_Until),
   	  doorUnlocked(Doorunlock),
   	  []).
 */


%; A precondition axiom states that
%; for an agent to lock a door,
%; the agent must be awake,
%; the door must be unlocked, and
%; the agent must be near the door:
% [agent,door,time]
% Happens(DoorLock(agent,door),time) ->
% HoldsAt(Awake(agent),time) &
% HoldsAt(DoorUnlocked(door),time) &
% HoldsAt(NearPortal(agent,door),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',93).

 /*  (   happens(doorLock(Agent, Door), Time)
   ->  holds_at(awake(Agent), Time),
       holds_at(doorUnlocked(Door), Time),
       holds_at(nearPortal(Agent, Door), Time)
   ).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',93).
then(if(happens(doorLock(Agent, Door), Time)),  (at(awake(Agent), Time), at(doorUnlocked(Door), Time), at(nearPortal(Agent, Door), Time))).

 /*  reactive_rule([happens(doorLock(Agent,Door),Time)],
   	      [ holds(awake(Agent),Time),
   		holds(doorUnlocked(Door),Time),
   		holds(nearPortal(Agent,Door),Time)
   	      ]).
 */


%; An effect axiom states that
%; if an agent locks a door,
%; the door will no longer be unlocked.
% [agent,door,time]
% Terminates(DoorLock(agent,door),DoorUnlocked(door),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',102).

 /*  axiom(terminates(doorLock(Agent, Door), doorUnlocked(Door), Time),
       []).
 */

 /*  terminates(doorLock(_,Doorlock),
   	   doorUnlocked(Doorlock),
   	   Terminates).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',102).
terminates(doorLock(_,Doorlock),
	   doorUnlocked(Doorlock)).

 /*  terminated(happens(doorLock(_,Doorlock),
   		   Time_From,
   		   Time_Until),
   	   doorUnlocked(Doorlock),
   	   []).
 */


%; A state constraint says that if a door is open,
%; it is unlocked:
% [door,time]
% HoldsAt(DoorIsOpen(door),time) -> HoldsAt(DoorUnlocked(door),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',107).

 /*  holds_at(doorIsOpen(Door), Time) ->
       holds_at(doorUnlocked(Door), Time).
 */
then(if(at(doorIsOpen(Door),Time)),
     at(doorUnlocked(Door),Time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',107).

 /*  reactive_rule([holds(doorIsOpen(Door),Time)],
   	      [holds(doorUnlocked(Door),Time)]).
 */


%; opening and closing doors
%; agent opens door.

% event DoorOpen(agent,door)
 %  event(doorOpen(agent,door)).
 %  event(doorOpen(agent,door)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',112).
actions([doorOpen/2]).
mpred_prop(doorOpen(agent,door),event).


%; agent closes door.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',115).
% event DoorClose(agent,door)
 %  event(doorClose(agent,door)).
 %  event(doorClose(agent,door)).
actions([doorClose/2]).
mpred_prop(doorClose(agent,door),event).


%; door is open.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',117).
% fluent DoorIsOpen(door)
 %  fluent(doorIsOpen(door)).
 %  fluent(doorIsOpen(door)).
fluents([doorIsOpen/1]).
mpred_prop(doorIsOpen(door),fluent).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',119).
%; A precondition axiom states that
%; for an agent to open a door,
%; the agent must be awake,
%; the door must not already be open,
%; the door must be unlocked, and
%; the agent must be near the door:
% [agent,door,time]
% Happens(DoorOpen(agent,door),time) ->
% HoldsAt(Awake(agent),time) &
% !HoldsAt(DoorIsOpen(door),time) &
% HoldsAt(DoorUnlocked(door),time) &
% HoldsAt(NearPortal(agent,door),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',125).

 /*  (   happens(doorOpen(Agent, Door), Time)
   ->  holds_at(awake(Agent), Time),
       holds_at(neg(doorIsOpen(Door)), Time),
       holds_at(doorUnlocked(Door), Time),
       holds_at(nearPortal(Agent, Door), Time)
   ).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',125).
then(if(happens(doorOpen(Agent, Door), Time)),  (at(awake(Agent), Time), at(not(doorIsOpen(Door)), Time), at(doorUnlocked(Door), Time), at(nearPortal(Agent, Door), Time))).

 /*  reactive_rule([happens(doorOpen(Agent,Door),Time)],
   	      [ holds(awake(Agent),Time),
   		holds(not(doorIsOpen(Door)),Time),
   		holds(doorUnlocked(Door),Time),
   		holds(nearPortal(Agent,Door),Time)
   	      ]).
 */


%; An effect axiom states that
%; if an agent opens a door,
%; the door will be open:
% [agent,door,time]
% Initiates(DoorOpen(agent,door),DoorIsOpen(door),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',135).

 /*  axiom(initiates(doorOpen(Agent, Door), doorIsOpen(Door), Time),
       []).
 */

 /*  initiates(doorOpen(_,Dooropen),
   	  doorIsOpen(Dooropen),
   	  Initiates).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',135).
initiates(doorOpen(_,Dooropen),doorIsOpen(Dooropen)).

 /*  initiated(happens(doorOpen(_,Dooropen),
   		  Time_From,
   		  Time_Until),
   	  doorIsOpen(Dooropen),
   	  []).
 */


%; A precondition axiom states that
%; for an agent to close a door,
%; the agent must be awake,
%; the door must be open,
%; the door must be unlocked, and
%; the agent must be near the door:
% [agent,door,time]
% Happens(DoorClose(agent,door),time) ->
% HoldsAt(Awake(agent),time) &
% HoldsAt(DoorIsOpen(door),time) &
% HoldsAt(DoorUnlocked(door),time) &
% HoldsAt(NearPortal(agent,door),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',144).

 /*  (   happens(doorClose(Agent, Door), Time)
   ->  holds_at(awake(Agent), Time),
       holds_at(doorIsOpen(Door), Time),
       holds_at(doorUnlocked(Door), Time),
       holds_at(nearPortal(Agent, Door), Time)
   ).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',144).
then(if(happens(doorClose(Agent, Door), Time)),  (at(awake(Agent), Time), at(doorIsOpen(Door), Time), at(doorUnlocked(Door), Time), at(nearPortal(Agent, Door), Time))).

 /*  reactive_rule([happens(doorClose(Agent,Door),Time)],
   	      [ holds(awake(Agent),Time),
   		holds(doorIsOpen(Door),Time),
   		holds(doorUnlocked(Door),Time),
   		holds(nearPortal(Agent,Door),Time)
   	      ]).
 */


%; An effect axiom states that
%; if an agent closes a door,
%; the door will no longer be open:
% [agent,door,time]
% Terminates(DoorClose(agent,door),DoorIsOpen(door),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',154).

 /*  axiom(terminates(doorClose(Agent, Door), doorIsOpen(Door), Time),
       []).
 */

 /*  terminates(doorClose(_,Doorclose),
   	   doorIsOpen(Doorclose),
   	   Terminates).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',154).
terminates(doorClose(_,Doorclose),
	   doorIsOpen(Doorclose)).

 /*  terminated(happens(doorClose(_,Doorclose),
   		   Time_From,
   		   Time_Until),
   	   doorIsOpen(Doorclose),
   	   []).
 */


%; passing through doors
%; agent walks through side one of door.

% event WalkThroughDoor12(agent,door)
 %  event(walkThroughDoor12(agent,door)).
 %  event(walkThroughDoor12(agent,door)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',159).
actions([walkThroughDoor12/2]).
mpred_prop(walkThroughDoor12(agent,door),event).


%; agent walks through side two of door.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',162).
% event WalkThroughDoor21(agent,door)
 %  event(walkThroughDoor21(agent,door)).
 %  event(walkThroughDoor21(agent,door)).
actions([walkThroughDoor21/2]).
mpred_prop(walkThroughDoor21(agent,door),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',164).
%; Precondition axioms state that
%; for an agent to walk through a side of a door,
%; the agent must be awake and standing,
%; the door must be open, and
%; the agent must be at the side of the door that
%; the agent walks through:
% [agent,door,time]
% Happens(WalkThroughDoor12(agent,door),time) ->
% HoldsAt(Awake(agent),time) &
% HoldsAt(Standing(agent),time) &
% HoldsAt(DoorIsOpen(door),time) &
% HoldsAt(At(agent,Side1(door)),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',170).

 /*  (   happens(walkThroughDoor12(Agent, Door), Time)
   ->  holds_at(awake(Agent), Time),
       holds_at(standing(Agent), Time),
       holds_at(doorIsOpen(Door), Time),
       holds_at(at(Agent, side1(Door)), Time)
   ).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',170).
then(if(happens(walkThroughDoor12(Agent, Door), Time)),  (at(awake(Agent), Time), at(standing(Agent), Time), at(doorIsOpen(Door), Time), at(loc_at(Agent, side1(Door)), Time))).

 /*  reactive_rule([ happens(walkThroughDoor12(Agent,Door),
   			Time)
   	      ],
   	      [ holds(awake(Agent),Time),
   		holds(standing(Agent),Time),
   		holds(doorIsOpen(Door),Time),
   		holds(loc_at(Agent,side1(Door)),Time)
   	      ]).
 */


% [agent,door,time]
% Happens(WalkThroughDoor21(agent,door),time) ->
% HoldsAt(Awake(agent),time) &
% HoldsAt(Standing(agent),time) &
% HoldsAt(DoorIsOpen(door),time) &
% HoldsAt(At(agent,Side2(door)),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',178).

 /*  (   happens(walkThroughDoor21(Agent, Door), Time)
   ->  holds_at(awake(Agent), Time),
       holds_at(standing(Agent), Time),
       holds_at(doorIsOpen(Door), Time),
       holds_at(at(Agent, side2(Door)), Time)
   ).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',178).
then(if(happens(walkThroughDoor21(Agent, Door), Time)),  (at(awake(Agent), Time), at(standing(Agent), Time), at(doorIsOpen(Door), Time), at(loc_at(Agent, side2(Door)), Time))).

 /*  reactive_rule([ happens(walkThroughDoor21(Agent,Door),
   			Time)
   	      ],
   	      [ holds(awake(Agent),Time),
   		holds(standing(Agent),Time),
   		holds(doorIsOpen(Door),Time),
   		holds(loc_at(Agent,side2(Door)),Time)
   	      ]).
 */


%; Effect axioms state that
%; if an agent walks through one side of a door,
%; the agent will be at the other side of the door:
% [agent,door,location,time]
% Side2(door)=location ->
% Initiates(WalkThroughDoor12(agent,door),At(agent,location),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',187).

 /*  axiom(initiates(walkThroughDoor12(Agent, Door), at(Agent, Location), Time),
       [equals(side2(Door), Location)]).
 */

 /*  equals(side2(Side2), Tloc) ->
       initiates(walkThroughDoor12(A, Side2),
                 at(A, Tloc),
                 Initiates).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',187).
then(if(equals(side2(Side2),Tloc)),
     initiates(walkThroughDoor12(A,Side2),
	       at(loc_at(A,Tloc),Initiates),
	       Initiates7)).

 /*  reactive_rule([equals(side2(Side2),Tloc)],
   	      [ initiates(walkThroughDoor12(A,Side2),
   			  at(loc_at(A,Tloc),
   			     Initiates),
   			  Initiates7)
   	      ]).
 */


% [agent,door,location,time]
% Side1(door)=location ->
% Initiates(WalkThroughDoor21(agent,door),At(agent,location),time).

 /*  axiom(initiates(walkThroughDoor21(Agent, Door), at(Agent, Location), Time),
       [equals(side1(Door), Location)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',192).

 /*  equals(side1(Side1), Tloc) ->
       initiates(walkThroughDoor21(A, Side1),
                 at(A, Tloc),
                 Initiates).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',192).
then(if(equals(side1(Side1),Tloc)),
     initiates(walkThroughDoor21(A,Side1),
	       at(loc_at(A,Tloc),Initiates),
	       Initiates7)).

 /*  reactive_rule([equals(side1(Side1),Tloc)],
   	      [ initiates(walkThroughDoor21(A,Side1),
   			  at(loc_at(A,Tloc),
   			     Initiates),
   			  Initiates7)
   	      ]).
 */


% [agent,door,location,time]
% Side1(door)=location ->
% Terminates(WalkThroughDoor12(agent,door),At(agent,location),time).

 /*  axiom(terminates(walkThroughDoor12(Agent, Door), at(Agent, Location), Time),
       [equals(side1(Door), Location)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',196).

 /*  equals(side1(Side1), Tloc) ->
       terminates(walkThroughDoor12(A, Side1),
                  at(A, Tloc),
                  Terminates).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',196).
then(if(equals(side1(Side1),Tloc)),
     terminates(walkThroughDoor12(A,Side1),
		at(loc_at(A,Tloc),Terminates),
		Terminates7)).

 /*  reactive_rule([equals(side1(Side1),Tloc)],
   	      [ terminates(walkThroughDoor12(A,Side1),
   			   at(loc_at(A,Tloc),
   			      Terminates),
   			   Terminates7)
   	      ]).
 */


% [agent,door,location,time]
% Side2(door)=location ->
% Terminates(WalkThroughDoor21(agent,door),At(agent,location),time).

 /*  axiom(terminates(walkThroughDoor21(Agent, Door), at(Agent, Location), Time),
       [equals(side2(Door), Location)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',200).

 /*  equals(side2(Side2), Tloc) ->
       terminates(walkThroughDoor21(A, Side2),
                  at(A, Tloc),
                  Terminates).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',200).
then(if(equals(side2(Side2),Tloc)),
     terminates(walkThroughDoor21(A,Side2),
		at(loc_at(A,Tloc),Terminates),
		Terminates7)).

 /*  reactive_rule([equals(side2(Side2),Tloc)],
   	      [ terminates(walkThroughDoor21(A,Side2),
   			   at(loc_at(A,Tloc),
   			      Terminates),
   			   Terminates7)
   	      ]).
 */


%; walking from one end of a street to another
%; agent walks from the first end of street to the second end.

% event WalkStreet12(agent,street)
 %  event(walkStreet12(agent,street)).
 %  event(walkStreet12(agent,street)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',205).
actions([walkStreet12/2]).
mpred_prop(walkStreet12(agent,street),event).


%; agent walks from the second end of street to the first end.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',208).
% event WalkStreet21(agent,street)
 %  event(walkStreet21(agent,street)).
 %  event(walkStreet21(agent,street)).
actions([walkStreet21/2]).
mpred_prop(walkStreet21(agent,street),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',210).
%; Precondition axioms state that
%; for an agent to walk from one end of a street to another,
%; the agent must be awake,
%; the agent must be standing, and
%; the agent must be at the first end of the street:
% [agent,street,time]
% Happens(WalkStreet12(agent,street),time) ->
% HoldsAt(Awake(agent),time) &
% HoldsAt(Standing(agent),time) &
% HoldsAt(At(agent,Side1(street)),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',215).

 /*  (   happens(walkStreet12(Agent, Street), Time)
   ->  holds_at(awake(Agent), Time),
       holds_at(standing(Agent), Time),
       holds_at(at(Agent, side1(Street)), Time)
   ).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',215).
then(if(happens(walkStreet12(Agent, Street), Time)),  (at(awake(Agent), Time), at(standing(Agent), Time), at(loc_at(Agent, side1(Street)), Time))).

 /*  reactive_rule([ happens(walkStreet12(Agent,Street),
   			Time)
   	      ],
   	      [ holds(awake(Agent),Time),
   		holds(standing(Agent),Time),
   		holds(loc_at(Agent,side1(Street)),
   		      Time)
   	      ]).
 */


% [agent,street,time]
% Happens(WalkStreet21(agent,street),time) ->
% HoldsAt(Awake(agent),time) &
% HoldsAt(Standing(agent),time) &
% HoldsAt(At(agent,Side2(street)),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',222).

 /*  (   happens(walkStreet21(Agent, Street), Time)
   ->  holds_at(awake(Agent), Time),
       holds_at(standing(Agent), Time),
       holds_at(at(Agent, side2(Street)), Time)
   ).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',222).
then(if(happens(walkStreet21(Agent, Street), Time)),  (at(awake(Agent), Time), at(standing(Agent), Time), at(loc_at(Agent, side2(Street)), Time))).

 /*  reactive_rule([ happens(walkStreet21(Agent,Street),
   			Time)
   	      ],
   	      [ holds(awake(Agent),Time),
   		holds(standing(Agent),Time),
   		holds(loc_at(Agent,side2(Street)),
   		      Time)
   	      ]).
 */


%; Effect axioms state that
%; if an agent walks from one end of a street to another,
%; the agent will be at the other end of the street:
% [agent,street,location,time]
% Side2(street)=location ->
% Initiates(WalkStreet12(agent,street),At(agent,location),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',230).

 /*  axiom(initiates(walkStreet12(Agent, Street), at(Agent, Location), Time),
       [equals(side2(Street), Location)]).
 */

 /*  equals(side2(Side2), Tloc) ->
       initiates(walkStreet12(A, Side2),
                 at(A, Tloc),
                 Initiates).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',230).
then(if(equals(side2(Side2),Tloc)),
     initiates(walkStreet12(A,Side2),
	       at(loc_at(A,Tloc),Initiates),
	       Initiates7)).

 /*  reactive_rule([equals(side2(Side2),Tloc)],
   	      [ initiates(walkStreet12(A,Side2),
   			  at(loc_at(A,Tloc),
   			     Initiates),
   			  Initiates7)
   	      ]).
 */


% [agent,street,location,time]
% Side1(street)=location ->
% Initiates(WalkStreet21(agent,street),At(agent,location),time).

 /*  axiom(initiates(walkStreet21(Agent, Street), at(Agent, Location), Time),
       [equals(side1(Street), Location)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',235).

 /*  equals(side1(Side1), Tloc) ->
       initiates(walkStreet21(A, Side1),
                 at(A, Tloc),
                 Initiates).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',235).
then(if(equals(side1(Side1),Tloc)),
     initiates(walkStreet21(A,Side1),
	       at(loc_at(A,Tloc),Initiates),
	       Initiates7)).

 /*  reactive_rule([equals(side1(Side1),Tloc)],
   	      [ initiates(walkStreet21(A,Side1),
   			  at(loc_at(A,Tloc),
   			     Initiates),
   			  Initiates7)
   	      ]).
 */


% [agent,street,location,time]
% Side1(street)=location ->
% Terminates(WalkStreet12(agent,street),At(agent,location),time).

 /*  axiom(terminates(walkStreet12(Agent, Street), at(Agent, Location), Time),
       [equals(side1(Street), Location)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',239).

 /*  equals(side1(Side1), Tloc) ->
       terminates(walkStreet12(A, Side1),
                  at(A, Tloc),
                  Terminates).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',239).
then(if(equals(side1(Side1),Tloc)),
     terminates(walkStreet12(A,Side1),
		at(loc_at(A,Tloc),Terminates),
		Terminates7)).

 /*  reactive_rule([equals(side1(Side1),Tloc)],
   	      [ terminates(walkStreet12(A,Side1),
   			   at(loc_at(A,Tloc),
   			      Terminates),
   			   Terminates7)
   	      ]).
 */


% [agent,street,location,time]
% Side2(street)=location ->
% Terminates(WalkStreet21(agent,street),At(agent,location),time).

 /*  axiom(terminates(walkStreet21(Agent, Street), at(Agent, Location), Time),
       [equals(side2(Street), Location)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',243).

 /*  equals(side2(Side2), Tloc) ->
       terminates(walkStreet21(A, Side2),
                  at(A, Tloc),
                  Terminates).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',243).
then(if(equals(side2(Side2),Tloc)),
     terminates(walkStreet21(A,Side2),
		at(loc_at(A,Tloc),Terminates),
		Terminates7)).

 /*  reactive_rule([equals(side2(Side2),Tloc)],
   	      [ terminates(walkStreet21(A,Side2),
   			   at(loc_at(A,Tloc),
   			      Terminates),
   			   Terminates7)
   	      ]).
 */


%; floors
%; The floor of room is integer.

% function Floor(room): integer
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',248).

 /*  axiom(function_arity(floor(room), 1),
       []).
 */
function_arity(floor(room),1).
 %  predicate(floorPred(room,integer)).
 %  predicate(floorPred(room,integer)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',248).
predicates([floorPred/2]).
mpred_prop(floorPred(room,integer),predicate).

 /*  axiom(functional_predicate(floor, floorPred),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',248).
functional_predicate(floor,floorPred).
resultIsa(floor,integer).
%; walking up and down staircases
%; agent walks down staircase.

% event WalkDownStaircase(agent,staircase)
 %  event(walkDownStaircase(agent,staircase)).
 %  event(walkDownStaircase(agent,staircase)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',253).
actions([walkDownStaircase/2]).
mpred_prop(walkDownStaircase(agent,staircase),event).


%; agent walks up staircase.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',256).
% event WalkUpStaircase(agent,staircase)
 %  event(walkUpStaircase(agent,staircase)).
 %  event(walkUpStaircase(agent,staircase)).
actions([walkUpStaircase/2]).
mpred_prop(walkUpStaircase(agent,staircase),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',258).
%; Precondition axioms state that
%; for an agent to walk down (up) a staircase,
%; the agent must be awake, standing, and
%; at the top (bottom) of the staircase:
% [agent,staircase,time]
% Happens(WalkDownStaircase(agent,staircase),time) ->
% HoldsAt(Awake(agent),time) &
% HoldsAt(Standing(agent),time) &
% HoldsAt(At(agent,Side2(staircase)),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',262).

 /*  (   happens(walkDownStaircase(Agent, Staircase), Time)
   ->  holds_at(awake(Agent), Time),
       holds_at(standing(Agent), Time),
       holds_at(at(Agent, side2(Staircase)), Time)
   ).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',262).
then(if(happens(walkDownStaircase(Agent, Staircase), Time)),  (at(awake(Agent), Time), at(standing(Agent), Time), at(loc_at(Agent, side2(Staircase)), Time))).

 /*  reactive_rule([ happens(walkDownStaircase(Agent,Staircase),
   			Time)
   	      ],
   	      [ holds(awake(Agent),Time),
   		holds(standing(Agent),Time),
   		holds(loc_at(Agent,side2(Staircase)),
   		      Time)
   	      ]).
 */


% [agent,staircase,time]
% Happens(WalkUpStaircase(agent,staircase),time) ->
% HoldsAt(Awake(agent),time) &
% HoldsAt(Standing(agent),time) &
% HoldsAt(At(agent,Side1(staircase)),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',269).

 /*  (   happens(walkUpStaircase(Agent, Staircase), Time)
   ->  holds_at(awake(Agent), Time),
       holds_at(standing(Agent), Time),
       holds_at(at(Agent, side1(Staircase)), Time)
   ).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',269).
then(if(happens(walkUpStaircase(Agent, Staircase), Time)),  (at(awake(Agent), Time), at(standing(Agent), Time), at(loc_at(Agent, side1(Staircase)), Time))).

 /*  reactive_rule([ happens(walkUpStaircase(Agent,Staircase),
   			Time)
   	      ],
   	      [ holds(awake(Agent),Time),
   		holds(standing(Agent),Time),
   		holds(loc_at(Agent,side1(Staircase)),
   		      Time)
   	      ]).
 */


%; Effect axioms state that
%; if an agent walks down (up) a staircase,
%; the agent will be at the bottom (top) of the staircase:
% [agent,staircase,room,time]
% Side1(staircase)=room ->
% Initiates(WalkDownStaircase(agent,staircase),At(agent,room),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',277).

 /*  axiom(initiates(walkDownStaircase(Agent, Staircase), at(Agent, Room), Time),
       [equals(side1(Staircase), Room)]).
 */

 /*  equals(side1(Side1), Tloc) ->
       initiates(walkDownStaircase(A, Side1),
                 at(A, Tloc),
                 Initiates).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',277).
then(if(equals(side1(Side1),Tloc)),
     initiates(walkDownStaircase(A,Side1),
	       at(loc_at(A,Tloc),Initiates),
	       Initiates7)).

 /*  reactive_rule([equals(side1(Side1),Tloc)],
   	      [ initiates(walkDownStaircase(A,Side1),
   			  at(loc_at(A,Tloc),
   			     Initiates),
   			  Initiates7)
   	      ]).
 */


% [agent,staircase,room,time]
% Side2(staircase)=room ->
% Terminates(WalkDownStaircase(agent,staircase),At(agent,room),time).

 /*  axiom(terminates(walkDownStaircase(Agent, Staircase), at(Agent, Room), Time),
       [equals(side2(Staircase), Room)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',282).

 /*  equals(side2(Side2), Tloc) ->
       terminates(walkDownStaircase(A, Side2),
                  at(A, Tloc),
                  Terminates).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',282).
then(if(equals(side2(Side2),Tloc)),
     terminates(walkDownStaircase(A,Side2),
		at(loc_at(A,Tloc),Terminates),
		Terminates7)).

 /*  reactive_rule([equals(side2(Side2),Tloc)],
   	      [ terminates(walkDownStaircase(A,Side2),
   			   at(loc_at(A,Tloc),
   			      Terminates),
   			   Terminates7)
   	      ]).
 */


% [agent,staircase,room,time]
% Side2(staircase)=room ->
% Initiates(WalkUpStaircase(agent,staircase),At(agent,room),time).

 /*  axiom(initiates(walkUpStaircase(Agent, Staircase), at(Agent, Room), Time),
       [equals(side2(Staircase), Room)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',286).

 /*  equals(side2(Side2), Tloc) ->
       initiates(walkUpStaircase(A, Side2),
                 at(A, Tloc),
                 Initiates).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',286).
then(if(equals(side2(Side2),Tloc)),
     initiates(walkUpStaircase(A,Side2),
	       at(loc_at(A,Tloc),Initiates),
	       Initiates7)).

 /*  reactive_rule([equals(side2(Side2),Tloc)],
   	      [ initiates(walkUpStaircase(A,Side2),
   			  at(loc_at(A,Tloc),
   			     Initiates),
   			  Initiates7)
   	      ]).
 */


% [agent,staircase,room,time]
% Side1(staircase)=room ->
% Terminates(WalkUpStaircase(agent,staircase),At(agent,room),time).

 /*  axiom(terminates(walkUpStaircase(Agent, Staircase), at(Agent, Room), Time),
       [equals(side1(Staircase), Room)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',290).

 /*  equals(side1(Side1), Tloc) ->
       terminates(walkUpStaircase(A, Side1),
                  at(A, Tloc),
                  Terminates).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',290).
then(if(equals(side1(Side1),Tloc)),
     terminates(walkUpStaircase(A,Side1),
		at(loc_at(A,Tloc),Terminates),
		Terminates7)).

 /*  reactive_rule([equals(side1(Side1),Tloc)],
   	      [ terminates(walkUpStaircase(A,Side1),
   			   at(loc_at(A,Tloc),
   			      Terminates),
   			   Terminates7)
   	      ]).
 */


%; A state constraint says that if an agent is outside,
%; the agent is dressed.
% [agent,outside,time]
% HoldsAt(At(agent,outside),time) ->
% HoldsAt(Dressed(agent),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',295).

 /*  holds_at(at(Agent, Outside), Time) ->
       holds_at(dressed(Agent), Time).
 */
then(if(at(loc_at(Agent,Outside),Time)),
     at(dressed(Agent),Time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',295).

 /*  reactive_rule([holds(loc_at(Agent,Outside),Time)],
   	      [holds(dressed(Agent),Time)]).
 */


%; room looks out onto outside.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',300).
% function LookOutOnto(room): outside

 /*  axiom(function_arity(lookOutOnto(room), 1),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',300).
function_arity(lookOutOnto(room),1).
 %  predicate(lookOutOntoPred(room,outside)).
 %  predicate(lookOutOntoPred(room,outside)).
predicates([lookOutOntoPred/2]).
mpred_prop(lookOutOntoPred(room,outside),predicate).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',300).

 /*  axiom(functional_predicate(lookOutOnto, lookOutOntoPred),
       []).
 */
functional_predicate(lookOutOnto,lookOutOntoPred).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',300).
resultIsa(lookOutOnto,outside).
%; location1 is adjacent to location2.

% predicate Adjacent(location,location)
 %  predicate(adjacent(location,location)).
 %  predicate(adjacent(location,location)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',302).
predicates([adjacent/2]).
mpred_prop(adjacent(location,location),predicate).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',305).
%; A state constraint says that
%; two locations are adjacent if and only if
%; they have a portal in common:
% [location1,location2]
 
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',308).
% Adjacent(location1,location2) <->
% {portal}% 
% (Side1(portal)=location1 &
%  Side2(portal)=location2) |
% (Side2(portal)=location1 &
%  Side1(portal)=location2).
 %  clausify_pnf=exists([Portal], <->(adjacent(Location1, Location2),  (equals(side1(Portal), Location1), equals(side2(Portal), Location2);equals(side2(Portal), Location1), equals(side1(Portal), Location2)))).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',308).

 /*  adjacent(Location1, Location2) :-
       (   equals(side1(Exists_Portal), Location1),
           equals(side2(Exists_Portal), Location2)
       ;   equals(side2(Exists_Portal), Location1),
           equals(side1(Exists_Portal), Location2)
       ),
       some(Exists_Portal, '$kolem_Fn_64'(Location1, Location2)).
 */
 %  axiom(adjacent(Location1, Location2), [(equals(side1(Exists_Portal), Location1), equals(side2(Exists_Portal), Location2);equals(side2(Exists_Portal), Location1), equals(side1(Exists_Portal), Location2)), some(Exists_Portal, '$kolem_Fn_64'(Location1, Location2))]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',308).

 /*  (   (   equals(side1(Side1), Equals),
           equals(side2(Side1), Equals6)
       ;   equals(side2(Side1), Equals),
           equals(side1(Side1), Equals6)
       ),
       some(Side1, '$kolem_Fn_64'(Equals, Equals6))
   ->  adjacent(Equals, Equals6)
   ).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',308).
then(if(((equals(side1(Side1), Equals), equals(side2(Side1), Equals6);equals(side2(Side1), Equals), equals(side1(Side1), Equals6)), some(Side1, '$kolem_Fn_64'(Equals, Equals6)))), adjacent(Equals, Equals6)).
 %  reactive_rule([(equals(side1(Side1), Equals), equals(side2(Side1), Equals6);equals(side2(Side1), Equals), equals(side1(Side1), Equals6)), some(Side1, '$kolem_Fn_64'(Equals, Equals6))], [adjacent(Equals, Equals6)]).

 /*  not(adjacent(Location1, Location2)) :-
       (   not(equals(side1(Exists_Portal), Location1))
       ;   not(equals(side2(Exists_Portal), Location2))
       ),
       (   not(equals(side2(Exists_Portal), Location1))
       ;   not(equals(side1(Exists_Portal), Location2))
       ),
       some(Exists_Portal, '$kolem_Fn_64'(Location1, Location2)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',308).

 /*  axiom(not(adjacent(Location1, Location2)),
       [  (not(equals(side1(Exists_Portal), Location1));not(equals(side2(Exists_Portal), Location2))),
          (not(equals(side2(Exists_Portal), Location1));not(equals(side1(Exists_Portal), Location2))),
         some(Exists_Portal, '$kolem_Fn_64'(Location1, Location2))
       ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',308).

 /*  (   (   not(equals(side1(Side17), Equals8))
       ;   not(equals(side2(Side17), Equals9))
       ),
       (   not(equals(side2(Side17), Equals8))
       ;   not(equals(side1(Side17), Equals9))
       ),
       some(Side17, '$kolem_Fn_64'(Equals8, Equals9))
   ->  not(adjacent(Equals8, Equals9))
   ).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',308).
then(if(((not(equals(side1(Side17), Equals8));not(equals(side2(Side17), Equals9))), (not(equals(side2(Side17), Equals8));not(equals(side1(Side17), Equals9))), some(Side17, '$kolem_Fn_64'(Equals8, Equals9)))), not(adjacent(Equals8, Equals9))).

 /*   reactive_rule([  (not(equals(side1(Side17), Equals8));not(equals(side2(Side17), Equals9))),
                       (not(equals(side2(Side17), Equals8));not(equals(side1(Side17), Equals9))),
                      some(Side17,
                           '$kolem_Fn_64'(Equals8, Equals9))
                    ],
                    [not(adjacent(Equals8, Equals9))]).
 */


%; The ground of outside is ground.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',316).
% function GroundOf(outside): ground

 /*  axiom(function_arity(groundOf(outside), 1),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',316).
function_arity(groundOf(outside),1).
 %  predicate(ground(outside,ground)).
 %  predicate(ground(outside,ground)).
predicates([ground/2]).
mpred_prop(ground(outside,ground),predicate).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',316).

 /*  axiom(functional_predicate(groundOf, ground),
       []).
 */
functional_predicate(groundOf,ground).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',316).
resultIsa(groundOf,ground).
%; The sky of outside is sky.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',318).
% function SkyOf(outside): sky

 /*  axiom(function_arity(skyOf(outside), 1),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',318).
function_arity(skyOf(outside),1).
 %  predicate(sky(outside,sky)).
 %  predicate(sky(outside,sky)).
predicates([sky/2]).
mpred_prop(sky(outside,sky),predicate).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',318).

 /*  axiom(functional_predicate(skyOf, sky),
       []).
 */
functional_predicate(skyOf,sky).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',318).
resultIsa(skyOf,sky).
 %; State constraints fix the location of ground and sky:
% [outside,ground,time]
% GroundOf(outside) = ground ->
% HoldsAt(At(ground,outside),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',322).

 /*  equals(groundOf(Outside), Ground) ->
       holds_at(at(Ground, Outside), Time).
 */
then(if(equals(groundOf(Outside),Ground)),
     at(loc_at(Ground,Outside),Time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',322).

 /*  reactive_rule([equals(groundOf(Outside),Ground)],
   	      [holds(loc_at(Ground,Outside),Time)]).
 */


% [outside,sky,time]
% SkyOf(outside) = sky ->
% HoldsAt(At(sky,outside),time).

 /*  equals(skyOf(Outside), Sky) ->
       holds_at(at(Sky, Outside), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',327).
then(if(equals(skyOf(Outside),Sky)),
     at(loc_at(Sky,Outside),Time)).

 /*  reactive_rule([equals(skyOf(Outside),Sky)],
   	      [holds(loc_at(Sky,Outside),Time)]).
 */


%; End of file.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',329).
:- endif.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',45).
% load answers/Mueller2003/Sleep.e
:- if(is_e_toplevel).
:- cond_convert_e(changed, 'answers/Mueller2003/Sleep.e').
 %  loading(changed,'/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e').
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; The Sleep representation deals with the activity of sleeping and
%; body posture.
%; It is similar to the finite automaton representation of sleep
%; used in ThoughtTreasure \fullcite[chap. 7]{Mueller:1998}.
%;
%; @book{Mueller:1998,
%;   author = "Erik T. Mueller",
%;   year = "1998",
%;   title = "Natural Language Processing with \uppercase{T}hought\uppercase{T}reasure",
%;   address = "New York",
%;   publisher = "Signiform",
%; }
%;
%; sleep
%; agent wakes up.

% event WakeUp(agent)
 %  event(wakeUp(agent)).
 %  event(wakeUp(agent)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',27).
actions([wakeUp/1]).
mpred_prop(wakeUp(agent),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',30).
%; agent gets tired.

% event GetTired(agent)
 %  event(getTired(agent)).
 %  event(getTired(agent)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',30).
actions([getTired/1]).
mpred_prop(getTired(agent),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',33).
%; agent falls asleep.

% event FallAsleep(agent)
 %  event(fallAsleep(agent)).
 %  event(fallAsleep(agent)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',33).
actions([fallAsleep/1]).
mpred_prop(fallAsleep(agent),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',36).
%; agent is asleep.

% fluent Sleep0(agent)
 %  fluent(sleep0(agent)).
 %  fluent(sleep0(agent)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',36).
fluents([sleep0/1]).
mpred_prop(sleep0(agent),fluent).


%; agent is awake and in bed.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',39).
% fluent Sleep1(agent)
 %  fluent(sleep1(agent)).
 %  fluent(sleep1(agent)).
fluents([sleep1/1]).
mpred_prop(sleep1(agent),fluent).


%; agent is awake, out of bed, and undressed.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',41).
% fluent Sleep2(agent)
 %  fluent(sleep2(agent)).
 %  fluent(sleep2(agent)).
fluents([sleep2/1]).
mpred_prop(sleep2(agent),fluent).


%; agent is awake and dressed.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',43).
% fluent Sleep3(agent)
 %  fluent(sleep3(agent)).
 %  fluent(sleep3(agent)).
fluents([sleep3/1]).
mpred_prop(sleep3(agent),fluent).


%; agent is tired and dressed.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',45).
% fluent Sleep4(agent)
 %  fluent(sleep4(agent)).
 %  fluent(sleep4(agent)).
fluents([sleep4/1]).
mpred_prop(sleep4(agent),fluent).


%; agent is tired and undressed.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',47).
% fluent Sleep5(agent)
 %  fluent(sleep5(agent)).
 %  fluent(sleep5(agent)).
fluents([sleep5/1]).
mpred_prop(sleep5(agent),fluent).


%; agent is in bed, waiting to fall asleep.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',49).
% fluent Sleep6(agent)
 %  fluent(sleep6(agent)).
 %  fluent(sleep6(agent)).
fluents([sleep6/1]).
mpred_prop(sleep6(agent),fluent).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',51).
%; At any time, an agent is in one of seven sleep states:

% xor Sleep0, Sleep1, Sleep2, Sleep3, Sleep4, Sleep5, Sleep6
 %  ==>xor[sleep0,sleep1,sleep2,sleep3,sleep4,sleep5,sleep6].
==>xor[sleep0,sleep1,sleep2,sleep3,sleep4,sleep5,sleep6].
%; constraints
%; agent is asleep.

% fluent Asleep(agent)
 %  fluent(asleep(agent)).
 %  fluent(asleep(agent)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',56).
fluents([asleep/1]).
mpred_prop(asleep(agent),fluent).


%; agent is awake.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',59).
% fluent Awake(agent)
 %  fluent(awake(agent)).
 %  fluent(awake(agent)).
fluents([awake/1]).
mpred_prop(awake(agent),fluent).

% noninertial Asleep
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',59).
noninertial(asleep).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',61).
% noninertial Awake
noninertial(awake).
%; Sleep0 indicates that the agent is asleep:
% [agent,time]
 % HoldsAt(Asleep(agent),time) <-> HoldsAt(Sleep0(agent),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',63).

 /*  holds_at(asleep(Agent), Time) <->
       holds_at(sleep0(Agent), Time).
 */

 /*  holds_at(asleep(Agent), Time) ->
       holds_at(sleep0(Agent), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',63).
then(if(at(asleep(Agent),Time)),
     at(sleep0(Agent),Time)).

 /*  reactive_rule([holds(asleep(Agent),Time)],
   	      [holds(sleep0(Agent),Time)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',63).

 /*  holds_at(sleep0(Agent), Time) ->
       holds_at(asleep(Agent), Time).
 */
then(if(at(sleep0(Agent),Time)),
     at(asleep(Agent),Time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',63).

 /*  reactive_rule([holds(sleep0(Agent),Time)],
   	      [holds(asleep(Agent),Time)]).
 */


%; In all other sleep states, the agent is awake:
% [agent,time]
% HoldsAt(Awake(agent),time) <->
% HoldsAt(Sleep1(agent),time) |
% HoldsAt(Sleep2(agent),time) |
% HoldsAt(Sleep3(agent),time) |
% HoldsAt(Sleep4(agent),time) |
% HoldsAt(Sleep5(agent),time) |
% HoldsAt(Sleep6(agent),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',67).

 /*  holds_at(awake(Agent), Time) <->
       (   holds_at(sleep1(Agent), Time)
       ;   holds_at(sleep2(Agent), Time)
       ;   holds_at(sleep3(Agent), Time)
       ;   holds_at(sleep4(Agent), Time)
       ;   holds_at(sleep5(Agent), Time)
       ;   holds_at(sleep6(Agent), Time)
       ).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',67).

 /*  holds_at(awake(Agent), Time) ->
       (   holds_at(sleep1(Agent), Time)
       ;   holds_at(sleep2(Agent), Time)
       ;   holds_at(sleep3(Agent), Time)
       ;   holds_at(sleep4(Agent), Time)
       ;   holds_at(sleep5(Agent), Time)
       ;   holds_at(sleep6(Agent), Time)
       ).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',67).
 then(if(at(awake(Agent), Time)),
         (at(sleep1(Agent), Time);at(sleep2(Agent), Time);at(sleep3(Agent), Time);at(sleep4(Agent), Time);at(sleep5(Agent), Time);at(sleep6(Agent), Time))).

 /*   reactive_rule([holds(awake(Agent), Time)],
                    [  (at(sleep1(Agent), Time);at(sleep2(Agent), Time);at(sleep3(Agent), Time);at(sleep4(Agent), Time);at(sleep5(Agent), Time);at(sleep6(Agent), Time))
                    ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',67).

 /*  holds_at(sleep1(Agent), Time);holds_at(sleep2(Agent), Time);holds_at(sleep3(Agent), Time);holds_at(sleep4(Agent), Time);holds_at(sleep5(Agent), Time);holds_at(sleep6(Agent), Time) ->
       holds_at(awake(Agent), Time).
 */
 then(if((at(sleep1(Agent), Time);at(sleep2(Agent), Time);at(sleep3(Agent), Time);at(sleep4(Agent), Time);at(sleep5(Agent), Time);at(sleep6(Agent), Time))),
        at(awake(Agent), Time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',67).

 /*   reactive_rule([  (at(sleep1(Agent), Time);at(sleep2(Agent), Time);at(sleep3(Agent), Time);at(sleep4(Agent), Time);at(sleep5(Agent), Time);at(sleep6(Agent), Time))
                    ],
                    [holds(awake(Agent), Time)]).
 */


%; A number of axioms are used to specify the transitions of
%; a finite automaton.
%;--
%; Waking up causes a transition from Sleep0
%; to Sleep1:
% [agent,time]
 
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',82).
% Terminates(WakeUp(agent),Sleep0(agent),time).

 /*  axiom(terminates(wakeUp(Agent), sleep0(Agent), Time),
       []).
 */
 %  terminates(wakeUp(Wakeup),sleep0(Wakeup),Terminates).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',82).
terminates(wakeUp(Wakeup),sleep0(Wakeup)).

 /*  terminated(happens(wakeUp(Wakeup),
   		   Time_From,
   		   Time_Until),
   	   sleep0(Wakeup),
   	   []).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',84).
% [agent,time]
 % Initiates(WakeUp(agent),Sleep1(agent),time).

 /*  axiom(initiates(wakeUp(Agent), sleep1(Agent), Time),
       []).
 */
 %  initiates(wakeUp(Wakeup),sleep1(Wakeup),Initiates).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',84).
initiates(wakeUp(Wakeup),sleep1(Wakeup)).

 /*  initiated(happens(wakeUp(Wakeup),
   		  Time_From,
   		  Time_Until),
   	  sleep1(Wakeup),
   	  []).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',86).
% [agent,time]
 % Happens(WakeUp(agent),time) -> HoldsAt(Sleep0(agent),time).

 /*  happens(wakeUp(Agent), Time) ->
       holds_at(sleep0(Agent), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',86).
then(if(happens(wakeUp(Agent),Time)),
     at(sleep0(Agent),Time)).

 /*  reactive_rule([happens(wakeUp(Agent),Time)],
   	      [holds(sleep0(Agent),Time)]).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',88).
%;--
%; Getting out of bed causes a transition from Sleep1
%; to Sleep2:
% [agent,bed,time]
 
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',92).
% Terminates(RiseFrom(agent,bed),Sleep1(agent),time).

 /*  axiom(terminates(riseFrom(Agent, Bed), sleep1(Agent), Time),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',92).

 /*  terminates(riseFrom(Sleep1,Risefrom),
   	   sleep1(Sleep1),
   	   Terminates).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',92).
terminates(riseFrom(Sleep1,Risefrom),sleep1(Sleep1)).

 /*  terminated(happens(riseFrom(Sleep1,Risefrom),
   		   Time_From,
   		   Time_Until),
   	   sleep1(Sleep1),
   	   []).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',94).
% [agent,bed,time]
 % Initiates(RiseFrom(agent,bed),Sleep2(agent),time).

 /*  axiom(initiates(riseFrom(Agent, Bed), sleep2(Agent), Time),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',94).

 /*  initiates(riseFrom(Sleep2,Risefrom),
   	  sleep2(Sleep2),
   	  Initiates).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',94).
initiates(riseFrom(Sleep2,Risefrom),sleep2(Sleep2)).

 /*  initiated(happens(riseFrom(Sleep2,Risefrom),
   		  Time_From,
   		  Time_Until),
   	  sleep2(Sleep2),
   	  []).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',96).
% [agent,bed,time]
% Happens(RiseFrom(agent,bed),time) -> HoldsAt(Sleep1(agent),time).

 /*  happens(riseFrom(Agent, Bed), Time) ->
       holds_at(sleep1(Agent), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',96).
then(if(happens(riseFrom(Agent,Bed),Time)),
     at(sleep1(Agent),Time)).

 /*  reactive_rule([happens(riseFrom(Agent,Bed),Time)],
   	      [holds(sleep1(Agent),Time)]).
 */


%;--
%; Getting dressed causes a transition from Sleep2
%; to Sleep3, the normal state of awakeness:
% [agent,time]
 
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',103).
% Terminates(GetDressed(agent),Sleep2(agent),time).

 /*  axiom(terminates(getDressed(Agent), sleep2(Agent), Time),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',103).

 /*  terminates(getDressed(Getdressed),
   	   sleep2(Getdressed),
   	   Terminates).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',103).
terminates(getDressed(Getdressed),sleep2(Getdressed)).

 /*  terminated(happens(getDressed(Getdressed),
   		   Time_From,
   		   Time_Until),
   	   sleep2(Getdressed),
   	   []).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',105).
% [agent,time]
 % Initiates(GetDressed(agent),Sleep3(agent),time).

 /*  axiom(initiates(getDressed(Agent), sleep3(Agent), Time),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',105).

 /*  initiates(getDressed(Getdressed),
   	  sleep3(Getdressed),
   	  Initiates).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',105).
initiates(getDressed(Getdressed),sleep3(Getdressed)).

 /*  initiated(happens(getDressed(Getdressed),
   		  Time_From,
   		  Time_Until),
   	  sleep3(Getdressed),
   	  []).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',107).
% [agent,time]
 % Happens(GetDressed(agent),time) -> HoldsAt(Sleep2(agent),time).

 /*  happens(getDressed(Agent), Time) ->
       holds_at(sleep2(Agent), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',107).
then(if(happens(getDressed(Agent),Time)),
     at(sleep2(Agent),Time)).

 /*  reactive_rule([happens(getDressed(Agent),Time)],
   	      [holds(sleep2(Agent),Time)]).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',109).
%;--
%; Getting tired causes a transition from Sleep3
%; to Sleep4:
% [agent,time]
 
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',113).
% Terminates(GetTired(agent),Sleep3(agent),time).

 /*  axiom(terminates(getTired(Agent), sleep3(Agent), Time),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',113).

 /*  terminates(getTired(Gettired),
   	   sleep3(Gettired),
   	   Terminates).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',113).
terminates(getTired(Gettired),sleep3(Gettired)).

 /*  terminated(happens(getTired(Gettired),
   		   Time_From,
   		   Time_Until),
   	   sleep3(Gettired),
   	   []).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',115).
% [agent,time]
 % Initiates(GetTired(agent),Sleep4(agent),time).

 /*  axiom(initiates(getTired(Agent), sleep4(Agent), Time),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',115).

 /*  initiates(getTired(Gettired),
   	  sleep4(Gettired),
   	  Initiates).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',115).
initiates(getTired(Gettired),sleep4(Gettired)).

 /*  initiated(happens(getTired(Gettired),
   		  Time_From,
   		  Time_Until),
   	  sleep4(Gettired),
   	  []).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',117).
% [agent,time]
 % Happens(GetTired(agent),time) -> HoldsAt(Sleep3(agent),time).

 /*  happens(getTired(Agent), Time) ->
       holds_at(sleep3(Agent), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',117).
then(if(happens(getTired(Agent),Time)),
     at(sleep3(Agent),Time)).

 /*  reactive_rule([happens(getTired(Agent),Time)],
   	      [holds(sleep3(Agent),Time)]).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',119).
%;--
%; Getting undressed causes a transition from Sleep4
%; to Sleep5:
% [agent,time]
 
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',123).
% Terminates(GetUndressed(agent),Sleep4(agent),time).

 /*  axiom(terminates(getUndressed(Agent), sleep4(Agent), Time),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',123).

 /*  terminates(getUndressed(Getundressed),
   	   sleep4(Getundressed),
   	   Terminates).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',123).
terminates(getUndressed(Getundressed),sleep4(Getundressed)).

 /*  terminated(happens(getUndressed(Getundressed),
   		   Time_From,
   		   Time_Until),
   	   sleep4(Getundressed),
   	   []).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',125).
% [agent,time]
 % Initiates(GetUndressed(agent),Sleep5(agent),time).

 /*  axiom(initiates(getUndressed(Agent), sleep5(Agent), Time),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',125).

 /*  initiates(getUndressed(Getundressed),
   	  sleep5(Getundressed),
   	  Initiates).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',125).
initiates(getUndressed(Getundressed),sleep5(Getundressed)).

 /*  initiated(happens(getUndressed(Getundressed),
   		  Time_From,
   		  Time_Until),
   	  sleep5(Getundressed),
   	  []).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',127).
% [agent,time]
 % Happens(GetUndressed(agent),time) -> HoldsAt(Sleep4(agent),time).

 /*  happens(getUndressed(Agent), Time) ->
       holds_at(sleep4(Agent), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',127).
then(if(happens(getUndressed(Agent),Time)),
     at(sleep4(Agent),Time)).

 /*  reactive_rule([happens(getUndressed(Agent),Time)],
   	      [holds(sleep4(Agent),Time)]).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',129).
%;--
%; Lying on a bed causes a transition from Sleep5
%; to Sleep6:
% [agent,bed,time]
 
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',133).
% Terminates(LieOn(agent,bed),Sleep5(agent),time).

 /*  axiom(terminates(lieOn(Agent, Bed), sleep5(Agent), Time),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',133).

 /*  terminates(lieOn(Sleep5,Lieon),
   	   sleep5(Sleep5),
   	   Terminates).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',133).
terminates(lieOn(Sleep5,Lieon),sleep5(Sleep5)).

 /*  terminated(happens(lieOn(Sleep5,Lieon),
   		   Time_From,
   		   Time_Until),
   	   sleep5(Sleep5),
   	   []).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',135).
% [agent,bed,time]
 % Initiates(LieOn(agent,bed),Sleep6(agent),time).

 /*  axiom(initiates(lieOn(Agent, Bed), sleep6(Agent), Time),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',135).

 /*  initiates(lieOn(Sleep6,Lieon),
   	  sleep6(Sleep6),
   	  Initiates).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',135).
initiates(lieOn(Sleep6,Lieon),sleep6(Sleep6)).

 /*  initiated(happens(lieOn(Sleep6,Lieon),
   		  Time_From,
   		  Time_Until),
   	  sleep6(Sleep6),
   	  []).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',137).
% [agent,bed,time]
 % Happens(LieOn(agent,bed),time) -> HoldsAt(Sleep5(agent),time).

 /*  happens(lieOn(Agent, Bed), Time) ->
       holds_at(sleep5(Agent), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',137).
then(if(happens(lieOn(Agent,Bed),Time)),
     at(sleep5(Agent),Time)).

 /*  reactive_rule([happens(lieOn(Agent,Bed),Time)],
   	      [holds(sleep5(Agent),Time)]).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',139).
%;--
%; Falling asleep causes a transition from Sleep6
%; to Sleep0:
% [agent,time]
 
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',143).
% Terminates(FallAsleep(agent),Sleep6(agent),time).

 /*  axiom(terminates(fallAsleep(Agent), sleep6(Agent), Time),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',143).

 /*  terminates(fallAsleep(Fallasleep),
   	   sleep6(Fallasleep),
   	   Terminates).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',143).
terminates(fallAsleep(Fallasleep),sleep6(Fallasleep)).

 /*  terminated(happens(fallAsleep(Fallasleep),
   		   Time_From,
   		   Time_Until),
   	   sleep6(Fallasleep),
   	   []).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',145).
% [agent,time]
 % Initiates(FallAsleep(agent),Sleep0(agent),time).

 /*  axiom(initiates(fallAsleep(Agent), sleep0(Agent), Time),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',145).

 /*  initiates(fallAsleep(Fallasleep),
   	  sleep0(Fallasleep),
   	  Initiates).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',145).
initiates(fallAsleep(Fallasleep),sleep0(Fallasleep)).

 /*  initiated(happens(fallAsleep(Fallasleep),
   		  Time_From,
   		  Time_Until),
   	  sleep0(Fallasleep),
   	  []).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',147).
% [agent,time]
 % Happens(FallAsleep(agent),time) -> HoldsAt(Sleep6(agent),time).

 /*  happens(fallAsleep(Agent), Time) ->
       holds_at(sleep6(Agent), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',147).
then(if(happens(fallAsleep(Agent),Time)),
     at(sleep6(Agent),Time)).

 /*  reactive_rule([happens(fallAsleep(Agent),Time)],
   	      [holds(sleep6(Agent),Time)]).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',149).
%;--
%; agent acts on being in state Sleep5.

% fluent ActOnSleep5(agent)
 %  fluent(actOnSleep5(agent)).
 %  fluent(actOnSleep5(agent)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',151).
fluents([actOnSleep5/1]).
mpred_prop(actOnSleep5(agent),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',153).
% noninertial ActOnSleep5
noninertial(actOnSleep5).
%; We reduce the number of models by asserting that
%; an agent only acts on being in state Sleep5 while in
%; that state:
% [agent,time]
% !HoldsAt(Sleep5(agent),time) ->
% !HoldsAt(ActOnSleep5(agent),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',158).

 /*  holds_at(neg(sleep5(Agent)), Time) ->
       holds_at(neg(actOnSleep5(Agent)), Time).
 */
then(if(at(not(sleep5(Agent)),Time)),
     at(not(actOnSleep5(Agent)),Time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',158).

 /*  reactive_rule([holds(not(sleep5(Agent)),Time)],
   	      [holds(not(actOnSleep5(Agent)),Time)]).
 */


%; Undressed is like IntentionToPlay
%; ActOnSleep5 is like ActOnIntentionToPlay
%; A trigger axiom states that if an agent is in state Sleep5,
%; the agent acts on this state, the agent is in a room, and
%; a bed is at the room, the agent lies on the bed:
% [agent,room,bed,time]
% HoldsAt(Sleep5(agent),time) &
% HoldsAt(ActOnSleep5(agent),time) &
% HoldsAt(At(agent,room),time) &
% HoldsAt(At(bed,room),time) ->
% Happens(LieOn(agent,bed),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',168).

 /*  (   holds_at(sleep5(Agent), Time),
       holds_at(actOnSleep5(Agent), Time),
       holds_at(at(Agent, Room), Time),
       holds_at(at(Bed, Room), Time)
   ->  happens(lieOn(Agent, Bed), Time)
   ).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',168).
then(if((at(sleep5(Agent), Time), at(actOnSleep5(Agent), Time), at(loc_at(Agent, Room), Time), at(loc_at(Bed, Room), Time))), happens(lieOn(Agent, Bed), Time)).

 /*  reactive_rule([ holds(sleep5(Agent),Time),
   		holds(actOnSleep5(Agent),Time),
   		holds(loc_at(Agent,Room),Time),
   		holds(loc_at(Bed,Room),Time)
   	      ],
   	      [happens(lieOn(Agent,Bed),Time)]).
 */


%; A precondition axiom states that for
%; an agent to lie on a bed,
%; the agent must be in state Sleep5,
%; the agent must act on this state, and
%; there must be a room such that
%; the agent is in the room and the bed is in the room:
% [agent,bed,time]
% Happens(LieOn(agent,bed),time) ->
% HoldsAt(Sleep5(agent),time) &
% HoldsAt(ActOnSleep5(agent),time) &
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',181).
% {room}% 
%  HoldsAt(At(agent,room),time) &
%  HoldsAt(At(bed,room),time).
 %  clausify_pnf=exists([Room],  (happens(lieOn(Agent, Bed), Time)->holds_at(sleep5(Agent), Time), holds_at(actOnSleep5(Agent), Time), holds_at(at(Agent, Room), Time), holds_at(at(Bed, Room), Time))).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',185).

 /*  not(happens(lieOn(Agent, Bed), Time)) :-
       (   not(holds_at(sleep5(Agent), Time))
       ;   not(holds_at(actOnSleep5(Agent), Time))
       ;   not(holds_at(at(Agent, Exists_Room), Time))
       ;   not(holds_at(at(Bed, Exists_Room), Time))
       ),
       some(Exists_Room, '$kolem_Fn_65'(Agent, Bed, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',185).

 /*  fix_axiom_head(Time) ->
       [ not(happens(lieOn(Agent, Bed), Time)),
          (->),
         not(lieOn(Agent, Bed))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',185).

 /*  axiom(not(lieOn(Agent, Bed)),
       [  (not(sleep5(Agent));not(actOnSleep5(Agent));not(at(Agent, Exists_Room));not(at(Bed, Exists_Room))),
         some(Exists_Room, '$kolem_Fn_65'(Agent, Bed, Time))
       ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',185).

 /*  (   (   not(sleep5(Sleep5))
       ;   not(actOnSleep5(Sleep5))
       ;   not(at(Sleep5, Tloc))
       ;   not(at(Lieon, Tloc))
       ),
       some(Tloc, '$kolem_Fn_65'(Sleep5, Lieon, Kolem_Fn_65))
   ->  not(lieOn(Sleep5, Lieon))
   ).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',185).
then(if(((not(sleep5(Sleep5));not(actOnSleep5(Sleep5));not(loc_at(Sleep5, Tloc));not(loc_at(Lieon, Tloc))), some(Tloc, '$kolem_Fn_65'(Sleep5, Lieon, Kolem_Fn_65)))), not(lieOn(Sleep5, Lieon))).

 /*   reactive_rule([  (not(sleep5(Sleep5));not(actOnSleep5(Sleep5));not(loc_at(Sleep5, Tloc));not(loc_at(Lieon, Tloc))),
                      some(Tloc,
                           '$kolem_Fn_65'(Sleep5,
                                          Lieon,
                                          Kolem_Fn_65))
                    ],
                    [not(lieOn(Sleep5, Lieon))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',185).

 /*  holds_at(sleep5(Agent), Time) :-
       happens(lieOn(Agent, Bed), Time),
       some(Exists_Room, '$kolem_Fn_65'(Agent, Bed, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',185).

 /*  fix_axiom_head(Time) ->
       [holds_at(sleep5(Agent), Time), ->, sleep5(Agent)].
 */

 /*  axiom(sleep5(Agent),
       [ lieOn(Agent, Bed),
         some(Exists_Room, '$kolem_Fn_65'(Agent, Bed, Time))
       ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',185).

 /*  (   lieOn(Kolem_Fn_65P_Num3_V, Lieon9),
       some(_,
            '$kolem_Fn_65'(Kolem_Fn_65P_Num3_V,
                           Lieon9,
                           Kolem_Fn_6510))
   ->  sleep5(Kolem_Fn_65P_Num3_V)
   ).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',185).
then(if((lieOn(Kolem_Fn_65P_Num3_V, Lieon9), some(_, '$kolem_Fn_65'(Kolem_Fn_65P_Num3_V, Lieon9, Kolem_Fn_6510)))), sleep5(Kolem_Fn_65P_Num3_V)).

 /*  reactive_rule([ happens(lieOn(Kolem_Fn_65P_Num3_V,Lieon9),
   			Time_From,
   			Time_Until),
   		some(_,
   		     '$kolem_Fn_65'(Kolem_Fn_65P_Num3_V,
   				    Lieon9,
   				    Kolem_Fn_6510))
   	      ],
   	      [holds(sleep5(Kolem_Fn_65P_Num3_V),Holds)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',185).

 /*  holds_at(actOnSleep5(Agent), Time) :-
       happens(lieOn(Agent, Bed), Time),
       some(Exists_Room, '$kolem_Fn_65'(Agent, Bed, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',185).

 /*  fix_axiom_head(Time) ->
       [ holds_at(actOnSleep5(Agent), Time),
          (->),
         actOnSleep5(Agent)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',185).

 /*  axiom(actOnSleep5(Agent),
       [ lieOn(Agent, Bed),
         some(Exists_Room, '$kolem_Fn_65'(Agent, Bed, Time))
       ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',185).

 /*  (   lieOn(Kolem_Fn_65P_Num3_V17, Lieon15),
       some(_,
            '$kolem_Fn_65'(Kolem_Fn_65P_Num3_V17,
                           Lieon15,
                           Kolem_Fn_6516))
   ->  actOnSleep5(Kolem_Fn_65P_Num3_V17)
   ).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',185).
then(if((lieOn(Kolem_Fn_65P_Num3_V17, Lieon15), some(_, '$kolem_Fn_65'(Kolem_Fn_65P_Num3_V17, Lieon15, Kolem_Fn_6516)))), actOnSleep5(Kolem_Fn_65P_Num3_V17)).

 /*  reactive_rule([ happens(lieOn(Kolem_Fn_65P_Num3_V17,
   			      Lieon15),
   			Time_From18,
   			Time_Until19),
   		some(_,
   		     '$kolem_Fn_65'(Kolem_Fn_65P_Num3_V17,
   				    Lieon15,
   				    Kolem_Fn_6516))
   	      ],
   	      [ holds(actOnSleep5(Kolem_Fn_65P_Num3_V17),
   		      Holds20)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',185).

 /*  holds_at(at(Agent, Exists_Room), Time) :-
       happens(lieOn(Agent, Bed), Time),
       some(Exists_Room, '$kolem_Fn_65'(Agent, Bed, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',185).

 /*  fix_axiom_head(Time) ->
       [ holds_at(at(Agent, Exists_Room), Time),
          (->),
         at(Agent, Exists_Room)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',185).

 /*  axiom(at(Agent, Exists_Room),
       [ lieOn(Agent, Bed),
         some(Exists_Room, '$kolem_Fn_65'(Agent, Bed, Time))
       ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',185).

 /*  (   lieOn(Kolem_Fn_65P_Num3_V24, Lieon22),
       some(Tloc21,
            '$kolem_Fn_65'(Kolem_Fn_65P_Num3_V24,
                           Lieon22,
                           Kolem_Fn_6523))
   ->  at(Kolem_Fn_65P_Num3_V24, Tloc21)
   ).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',185).
then(if((lieOn(Kolem_Fn_65P_Num3_V24, Lieon22), some(Tloc21, '$kolem_Fn_65'(Kolem_Fn_65P_Num3_V24, Lieon22, Kolem_Fn_6523)))), loc_at(Kolem_Fn_65P_Num3_V24, Tloc21)).

 /*  reactive_rule([ happens(lieOn(Kolem_Fn_65P_Num3_V24,
   			      Lieon22),
   			Time_From25,
   			Time_Until26),
   		some(Tloc21,
   		     '$kolem_Fn_65'(Kolem_Fn_65P_Num3_V24,
   				    Lieon22,
   				    Kolem_Fn_6523))
   	      ],
   	      [ holds(loc_at(Kolem_Fn_65P_Num3_V24,Tloc21),
   		      Holds27)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',185).

 /*  holds_at(at(Bed, Exists_Room), Time) :-
       happens(lieOn(Agent, Bed), Time),
       some(Exists_Room, '$kolem_Fn_65'(Agent, Bed, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',185).

 /*  fix_axiom_head(Time) ->
       [ holds_at(at(Bed, Exists_Room), Time),
          (->),
         at(Bed, Exists_Room)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',185).

 /*  axiom(at(Bed, Exists_Room),
       [ lieOn(Agent, Bed),
         some(Exists_Room, '$kolem_Fn_65'(Agent, Bed, Time))
       ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',185).

 /*  (   lieOn(Kolem_Fn_65P_Num3_V31, Lieon29),
       some(Tloc28,
            '$kolem_Fn_65'(Kolem_Fn_65P_Num3_V31,
                           Lieon29,
                           Kolem_Fn_6530))
   ->  at(Lieon29, Tloc28)
   ).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',185).
then(if((lieOn(Kolem_Fn_65P_Num3_V31, Lieon29), some(Tloc28, '$kolem_Fn_65'(Kolem_Fn_65P_Num3_V31, Lieon29, Kolem_Fn_6530)))), loc_at(Lieon29, Tloc28)).

 /*  reactive_rule([ happens(lieOn(Kolem_Fn_65P_Num3_V31,
   			      Lieon29),
   			Time_From32,
   			Time_Until33),
   		some(Tloc28,
   		     '$kolem_Fn_65'(Kolem_Fn_65P_Num3_V31,
   				    Lieon29,
   				    Kolem_Fn_6530))
   	      ],
   	      [holds(loc_at(Lieon29,Tloc28),Holds34)]).
 */


%; (body) posture
%; agent lies on physobj.

% event LieOn(agent,physobj)
 %  event(lieOn(agent,physobj)).
 %  event(lieOn(agent,physobj)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',191).
actions([lieOn/2]).
mpred_prop(lieOn(agent,physobj),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',194).
%; agent sits on physobj.

% event SitOn(agent,physobj)
 %  event(sitOn(agent,physobj)).
 %  event(sitOn(agent,physobj)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',194).
actions([sitOn/2]).
mpred_prop(sitOn(agent,physobj),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',197).
% [agent,physobj,time]
% Happens(SitOn(agent,physobj),time) ->
% {location}% 
%  HoldsAt(At(agent,location),time) &
%  HoldsAt(At(physobj,location),time).
 %  clausify_pnf=exists([Location],  (happens(sitOn(Agent, Physobj), Time)->holds_at(at(Agent, Location), Time), holds_at(at(Physobj, Location), Time))).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',199).

 /*  not(happens(sitOn(Agent, Physobj), Time)) :-
       (   not(holds_at(at(Agent, Exists_Location), Time))
       ;   not(holds_at(at(Physobj, Exists_Location), Time))
       ),
       some(Exists_Location,
            '$kolem_Fn_66'(Agent, Physobj, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',199).

 /*  fix_axiom_head(Time) ->
       [ not(happens(sitOn(Agent, Physobj), Time)),
          (->),
         not(sitOn(Agent, Physobj))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',199).

 /*  axiom(not(sitOn(Agent, Physobj)),
       [  (not(at(Agent, Exists_Location));not(at(Physobj, Exists_Location))),
         some(Exists_Location,
              '$kolem_Fn_66'(Agent, Physobj, Time))
       ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',199).

 /*  (   (   not(at(Kolem_Fn_66P_Num3_V, Tloc))
       ;   not(at(Siton, Tloc))
       ),
       some(Tloc,
            '$kolem_Fn_66'(Kolem_Fn_66P_Num3_V, Siton, Kolem_Fn_66))
   ->  not(sitOn(Kolem_Fn_66P_Num3_V, Siton))
   ).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',199).
then(if(((not(loc_at(Kolem_Fn_66P_Num3_V, Tloc));not(loc_at(Siton, Tloc))), some(Tloc, '$kolem_Fn_66'(Kolem_Fn_66P_Num3_V, Siton, Kolem_Fn_66)))), not(sitOn(Kolem_Fn_66P_Num3_V, Siton))).

 /*   reactive_rule([  (not(loc_at(Kolem_Fn_66P_Num3_V, Tloc));not(loc_at(Siton, Tloc))),
                      some(Tloc,
                           '$kolem_Fn_66'(Kolem_Fn_66P_Num3_V,
                                          Siton,
                                          Kolem_Fn_66))
                    ],
                    [not(sitOn(Kolem_Fn_66P_Num3_V, Siton))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',199).

 /*  holds_at(at(Agent, Exists_Location), Time) :-
       happens(sitOn(Agent, Physobj), Time),
       some(Exists_Location,
            '$kolem_Fn_66'(Agent, Physobj, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',199).

 /*  fix_axiom_head(Time) ->
       [ holds_at(at(Agent, Exists_Location), Time),
          (->),
         at(Agent, Exists_Location)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',199).

 /*  axiom(at(Agent, Exists_Location),
       [ sitOn(Agent, Physobj),
         some(Exists_Location,
              '$kolem_Fn_66'(Agent, Physobj, Time))
       ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',199).

 /*  (   sitOn(Kolem_Fn_66P_Num3_V12, Siton10),
       some(Tloc9,
            '$kolem_Fn_66'(Kolem_Fn_66P_Num3_V12,
                           Siton10,
                           Kolem_Fn_6611))
   ->  at(Kolem_Fn_66P_Num3_V12, Tloc9)
   ).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',199).
then(if((sitOn(Kolem_Fn_66P_Num3_V12, Siton10), some(Tloc9, '$kolem_Fn_66'(Kolem_Fn_66P_Num3_V12, Siton10, Kolem_Fn_6611)))), loc_at(Kolem_Fn_66P_Num3_V12, Tloc9)).

 /*  reactive_rule([ happens(sitOn(Kolem_Fn_66P_Num3_V12,
   			      Siton10),
   			Time_From,
   			Time_Until),
   		some(Tloc9,
   		     '$kolem_Fn_66'(Kolem_Fn_66P_Num3_V12,
   				    Siton10,
   				    Kolem_Fn_6611))
   	      ],
   	      [ holds(loc_at(Kolem_Fn_66P_Num3_V12,Tloc9),
   		      Holds)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',199).

 /*  holds_at(at(Physobj, Exists_Location), Time) :-
       happens(sitOn(Agent, Physobj), Time),
       some(Exists_Location,
            '$kolem_Fn_66'(Agent, Physobj, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',199).

 /*  fix_axiom_head(Time) ->
       [ holds_at(at(Physobj, Exists_Location), Time),
          (->),
         at(Physobj, Exists_Location)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',199).

 /*  axiom(at(Physobj, Exists_Location),
       [ sitOn(Agent, Physobj),
         some(Exists_Location,
              '$kolem_Fn_66'(Agent, Physobj, Time))
       ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',199).

 /*  (   sitOn(Kolem_Fn_66P_Num3_V19, Siton17),
       some(Tloc16,
            '$kolem_Fn_66'(Kolem_Fn_66P_Num3_V19,
                           Siton17,
                           Kolem_Fn_6618))
   ->  at(Siton17, Tloc16)
   ).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',199).
then(if((sitOn(Kolem_Fn_66P_Num3_V19, Siton17), some(Tloc16, '$kolem_Fn_66'(Kolem_Fn_66P_Num3_V19, Siton17, Kolem_Fn_6618)))), loc_at(Siton17, Tloc16)).

 /*  reactive_rule([ happens(sitOn(Kolem_Fn_66P_Num3_V19,
   			      Siton17),
   			Time_From20,
   			Time_Until21),
   		some(Tloc16,
   		     '$kolem_Fn_66'(Kolem_Fn_66P_Num3_V19,
   				    Siton17,
   				    Kolem_Fn_6618))
   	      ],
   	      [holds(loc_at(Siton17,Tloc16),Holds22)]).
 */


%; agent rises from physobj.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',204).
% event RiseFrom(agent,physobj)
 %  event(riseFrom(agent,physobj)).
 %  event(riseFrom(agent,physobj)).
actions([riseFrom/2]).
mpred_prop(riseFrom(agent,physobj),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',206).
%; agent is lying on physobj.

% fluent LyingOn(agent,physobj)
 %  fluent(lyingOn(agent,physobj)).
 %  fluent(lyingOn(agent,physobj)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',206).
fluents([lyingOn/2]).
mpred_prop(lyingOn(agent,physobj),fluent).


%; agent is sitting on physobj.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',209).
% fluent SittingOn(agent,physobj)
 %  fluent(sittingOn(agent,physobj)).
 %  fluent(sittingOn(agent,physobj)).
fluents([sittingOn/2]).
mpred_prop(sittingOn(agent,physobj),fluent).


%; agent is standing.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',211).
% fluent Standing(agent)
 %  fluent(standing(agent)).
 %  fluent(standing(agent)).
fluents([standing/1]).
mpred_prop(standing(agent),fluent).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',213).
%; agent is lying down.

% fluent Lying(agent)
 %  fluent(lying(agent)).
 %  fluent(lying(agent)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',213).
fluents([lying/1]).
mpred_prop(lying(agent),fluent).


%; agent is sitting.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',216).
% fluent Sitting(agent)
 %  fluent(sitting(agent)).
 %  fluent(sitting(agent)).
fluents([sitting/1]).
mpred_prop(sitting(agent),fluent).

% noninertial Lying
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',216).
noninertial(lying).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',218).
% noninertial Sitting
noninertial(sitting).
%; At any time, an agent is either lying, sitting, or standing:

% xor Lying, Sitting, Standing
 %  ==>xor[lying,sitting,standing].
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',220).
==>xor[lying,sitting,standing].


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',223).
% [agent,physobj,time]
% HoldsAt(LyingOn(agent,physobj),time) ->
% HoldsAt(Lying(agent),time).

 /*  holds_at(lyingOn(Agent, Physobj), Time) ->
       holds_at(lying(Agent), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',223).
then(if(at(lyingOn(Agent,Physobj),Time)),
     at(lying(Agent),Time)).

 /*  reactive_rule([holds(lyingOn(Agent,Physobj),Time)],
   	      [holds(lying(Agent),Time)]).
 */


% [agent,physobj,time]
% HoldsAt(SittingOn(agent,physobj),time) ->
% HoldsAt(Sitting(agent),time).

 /*  holds_at(sittingOn(Agent, Physobj), Time) ->
       holds_at(sitting(Agent), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',228).
then(if(at(sittingOn(Agent,Physobj),Time)),
     at(sitting(Agent),Time)).

 /*  reactive_rule([holds(sittingOn(Agent,Physobj),Time)],
   	      [holds(sitting(Agent),Time)]).
 */


%; State constraints represent that an agent can lie or sit
%; on at most one object at a time:
% [agent,physobj1,physobj2,time]
% HoldsAt(LyingOn(agent,physobj1),time) &
% HoldsAt(LyingOn(agent,physobj2),time) ->
% physobj1=physobj2.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',233).

 /*  (   holds_at(lyingOn(Agent, Physobj1), Time),
       holds_at(lyingOn(Agent, Physobj2), Time)
   ->  equals(Physobj1, Physobj2)
   ).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',233).
then(if((at(lyingOn(Agent, Physobj1), Time), at(lyingOn(Agent, Physobj2), Time))), equals(Physobj1, Physobj2)).

 /*  reactive_rule([ holds(lyingOn(Agent,Physobj1),Time),
   		holds(lyingOn(Agent,Physobj2),Time)
   	      ],
   	      [equals(Physobj1,Physobj2)]).
 */


% [agent,physobj1,physobj2,time]
% HoldsAt(SittingOn(agent,physobj1),time) &
% HoldsAt(SittingOn(agent,physobj2),time) ->
% physobj1=physobj2.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',239).

 /*  (   holds_at(sittingOn(Agent, Physobj1), Time),
       holds_at(sittingOn(Agent, Physobj2), Time)
   ->  equals(Physobj1, Physobj2)
   ).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',239).
then(if((at(sittingOn(Agent, Physobj1), Time), at(sittingOn(Agent, Physobj2), Time))), equals(Physobj1, Physobj2)).

 /*  reactive_rule([ holds(sittingOn(Agent,Physobj1),Time),
   		holds(sittingOn(Agent,Physobj2),Time)
   	      ],
   	      [equals(Physobj1,Physobj2)]).
 */


%; An effect axiom states that if an agent is standing and
%; lies on a physical object, the agent will be lying on
%; the physical object:
% [agent,physobj,time]
% HoldsAt(Standing(agent),time) ->
% Initiates(LieOn(agent,physobj),
%           LyingOn(agent,physobj),
%           time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',246).

 /*  axiom(initiates(lieOn(Agent, Physobj), lyingOn(Agent, Physobj), Time),
       [standing(Agent)]).
 */

 /*  standing(Standing) ->
       initiates(lieOn(Standing, Lieon),
                 lyingOn(Standing, Lieon),
                 Initiates).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',246).
then(if(standing(Standing)),
     initiates(lieOn(Standing,Lieon),
	       at(lyingOn(Standing,Lieon),Initiates),
	       Initiates6)).

 /*  reactive_rule([holds(standing(Standing),Holds)],
   	      [ initiates(lieOn(Standing,Lieon),
   			  at(lyingOn(Standing,Lieon),
   			     Initiates),
   			  Initiates6)
   	      ]).
 */


%; An effect axiom states that if an agent
%; lies on a physical object, the agent will no longer
%; be standing:
% [agent,physobj,time]
% Terminates(LieOn(agent,physobj),
%            Standing(agent),
%            time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',255).

 /*  axiom(terminates(lieOn(Agent, Physobj), standing(Agent), Time),
       []).
 */

 /*  terminates(lieOn(Standing,Lieon),
   	   standing(Standing),
   	   Terminates).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',255).
terminates(lieOn(Standing,Lieon),standing(Standing)).

 /*  terminated(happens(lieOn(Standing,Lieon),
   		   Time_From,
   		   Time_Until),
   	   standing(Standing),
   	   []).
 */


%; An effect axiom states that if an agent is standing and
%; sits on a physical object, the agent will be sitting on
%; the physical object:
% [agent,physobj,time]
% HoldsAt(Standing(agent),time) ->
% Initiates(SitOn(agent,physobj),
%           SittingOn(agent,physobj),
%           time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',263).

 /*  axiom(initiates(sitOn(Agent, Physobj), sittingOn(Agent, Physobj), Time),
       [standing(Agent)]).
 */

 /*  standing(Standing) ->
       initiates(sitOn(Standing, Siton),
                 sittingOn(Standing, Siton),
                 Initiates).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',263).
then(if(standing(Standing)),
     initiates(sitOn(Standing,Siton),
	       at(sittingOn(Standing,Siton),
		  Initiates),
	       Initiates6)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',263).

 /*  reactive_rule([holds(standing(Standing),Holds)],
   	      [ initiates(sitOn(Standing,Siton),
   			  at(sittingOn(Standing,Siton),
   			     Initiates),
   			  Initiates6)
   	      ]).
 */


%; An effect axiom states that if an agent
%; sits on a physical object, the agent will no longer
%; be standing:
% [agent,physobj,time]
% Terminates(SitOn(agent,physobj),
%            Standing(agent),
%            time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',272).

 /*  axiom(terminates(sitOn(Agent, Physobj), standing(Agent), Time),
       []).
 */

 /*  terminates(sitOn(Standing,Siton),
   	   standing(Standing),
   	   Terminates).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',272).
terminates(sitOn(Standing,Siton),standing(Standing)).

 /*  terminated(happens(sitOn(Standing,Siton),
   		   Time_From,
   		   Time_Until),
   	   standing(Standing),
   	   []).
 */


%; An effect axiom states that if an agent
%; is sitting or lying on a physical object and
%; the agent rises from the physical object,
%; the agent will be standing:
% [agent,physobj,time]
% (HoldsAt(SittingOn(agent,physobj),time) |
%  HoldsAt(LyingOn(agent,physobj),time)) ->
% Initiates(RiseFrom(agent,physobj),
%           Standing(agent),
%           time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',281).

 /*  axiom(initiates(riseFrom(Agent, Physobj), standing(Agent), Time),
       [  (sittingOn(Agent, Physobj);lyingOn(Agent, Physobj))
       ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',281).

 /*  sittingOn(Standing, Sittingon);lyingOn(Standing, Sittingon) ->
       initiates(riseFrom(Standing, Sittingon),
                 standing(Standing),
                 Initiates).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',281).
 then(if((sittingOn(Standing, Sittingon);lyingOn(Standing, Sittingon))),
        initiates(riseFrom(Standing, Sittingon),
                  at(standing(Standing), Initiates),
                  Initiates6)).

 /*   reactive_rule([  (sittingOn(Standing, Sittingon);lyingOn(Standing, Sittingon))
                    ],
                    [ initiates(riseFrom(Standing, Sittingon),
                                at(standing(Standing), Initiates),
                                Initiates6)
                    ]).
 */


%; An effect axiom states that if an agent is sitting on
%; a physical object and the agent rises from the physical
%; object, the agent will no longer be sitting on the
%; physical object:
% [agent,physobj,time]
% HoldsAt(SittingOn(agent,physobj),time) ->
% Terminates(RiseFrom(agent,physobj),
%            SittingOn(agent,physobj),
%            time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',292).

 /*  axiom(terminates(riseFrom(Agent, Physobj), sittingOn(Agent, Physobj), Time),
       [sittingOn(Agent, Physobj)]).
 */

 /*  sittingOn(A, Sittingon) ->
       terminates(riseFrom(A, Sittingon),
                  sittingOn(A, Sittingon),
                  Terminates).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',292).
then(if(sittingOn(A,Sittingon)),
     terminates(riseFrom(A,Sittingon),
		at(sittingOn(A,Sittingon),Terminates),
		Terminates5)).

 /*  reactive_rule([holds(sittingOn(A,Sittingon),Holds)],
   	      [ terminates(riseFrom(A,Sittingon),
   			   at(sittingOn(A,Sittingon),
   			      Terminates),
   			   Terminates5)
   	      ]).
 */


%; An effect axiom states that if an agent is lying on
%; a physical object and the agent rises from the physical
%; object, the agent will no longer be lying on the
%; physical object:
% [agent,physobj,time]
% HoldsAt(LyingOn(agent,physobj),time) ->
% Terminates(RiseFrom(agent,physobj),
%            LyingOn(agent,physobj),
%            time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',302).

 /*  axiom(terminates(riseFrom(Agent, Physobj), lyingOn(Agent, Physobj), Time),
       [lyingOn(Agent, Physobj)]).
 */

 /*  lyingOn(A, Lyingon) ->
       terminates(riseFrom(A, Lyingon),
                  lyingOn(A, Lyingon),
                  Terminates).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',302).
then(if(lyingOn(A,Lyingon)),
     terminates(riseFrom(A,Lyingon),
		at(lyingOn(A,Lyingon),Terminates),
		Terminates5)).

 /*  reactive_rule([holds(lyingOn(A,Lyingon),Holds)],
   	      [ terminates(riseFrom(A,Lyingon),
   			   at(lyingOn(A,Lyingon),
   			      Terminates),
   			   Terminates5)
   	      ]).
 */


%; dressing
%; agent gets undressed.

% event GetDressed(agent)
 %  event(getDressed(agent)).
 %  event(getDressed(agent)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',310).
actions([getDressed/1]).
mpred_prop(getDressed(agent),event).


%; agent gets dressed.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',313).
% event GetUndressed(agent)
 %  event(getUndressed(agent)).
 %  event(getUndressed(agent)).
actions([getUndressed/1]).
mpred_prop(getUndressed(agent),event).


%; agent is dressed.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',315).
% fluent Dressed(agent)
 %  fluent(dressed(agent)).
 %  fluent(dressed(agent)).
fluents([dressed/1]).
mpred_prop(dressed(agent),fluent).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',317).
%; Effect axioms deal with getting dressed and undressed:
% [agent,time]
 % Initiates(GetDressed(agent),Dressed(agent),time).

 /*  axiom(initiates(getDressed(Agent), dressed(Agent), Time),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',317).

 /*  initiates(getDressed(Getdressed),
   	  dressed(Getdressed),
   	  Initiates).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',317).
initiates(getDressed(Getdressed),dressed(Getdressed)).

 /*  initiated(happens(getDressed(Getdressed),
   		  Time_From,
   		  Time_Until),
   	  dressed(Getdressed),
   	  []).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',319).
% [agent,time]
 % Terminates(GetUndressed(agent),Dressed(agent),time).

 /*  axiom(terminates(getUndressed(Agent), dressed(Agent), Time),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',319).

 /*  terminates(getUndressed(Getundressed),
   	   dressed(Getundressed),
   	   Terminates).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',319).
terminates(getUndressed(Getundressed),
	   dressed(Getundressed)).

 /*  terminated(happens(getUndressed(Getundressed),
   		   Time_From,
   		   Time_Until),
   	   dressed(Getundressed),
   	   []).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',321).
%; End of file.
:- endif.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',46).
% load answers/Mueller2003/SpeechAct.e
:- if(is_e_toplevel).
:- cond_convert_e(changed, 'answers/Mueller2003/SpeechAct.e').
 %  loading(changed,'/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e').
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; The SpeechAct representation deals with a few speech acts
%; \fullcite{Searle:1969}.
%;
%; @book{Searle:1969,
%;   author = "John R. Searle",
%;   year = "1969",
%;   title = "Speech Acts: An Essay in the Philosophy of Language",
%;   address = "Cambridge",
%;   publisher = "Cambridge University Press",
%; }
%;
%; We handle
%; the illocutionary acts of
%; inviting someone into one's house (a form of request) and
%; greeting someone,
%; and the expressive speech act of crying for joy.
%;
%; inviting in
%; agent1 invites agent2 into room.

% event InviteIn(agent,agent,room)
 %  event(inviteIn(agent,agent,room)).
 %  event(inviteIn(agent,agent,room)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',31).
actions([inviteIn/3]).
mpred_prop(inviteIn(agent,agent,room),event).


%; agent1 is invited into room by agent2.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',34).
% fluent InvitedIn(agent,room,agent)
 %  fluent(invitedIn(agent,room,agent)).
 %  fluent(invitedIn(agent,room,agent)).
fluents([invitedIn/3]).
mpred_prop(invitedIn(agent,room,agent),fluent).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',36).
%; A precondition axiom states that for
%; an agent to invite another agent into a room,
%; the first agent must be in the room and
%; there must be an outside area such that
%; the second agent is at the outside area and
%; the outside area is adjacent to the room:
% [agent1,agent2,room,time]
% Happens(InviteIn(agent1,agent2,room),time) ->
% HoldsAt(At(agent1,room),time) &
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',42).
% {outside}% 
% HoldsAt(At(agent2,outside),time) &
% Adjacent(room,outside).
 %  clausify_pnf=exists([Outside],  (happens(inviteIn(Agent1, Agent2, Room), Time)->holds_at(at(Agent1, Room), Time), holds_at(at(Agent2, Outside), Time), adjacent(Room, Outside))).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',45).

 /*  not(happens(inviteIn(Agent1, Agent2, Room), Time)) :-
       (   not(holds_at(at(Agent1, Room), Time))
       ;   not(holds_at(at(Agent2, Exists_Outside), Time))
       ;   not(adjacent(Room, Exists_Outside))
       ),
       some(Exists_Outside,
            '$kolem_Fn_67'(Agent1, Agent2, Room, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',45).

 /*  fix_axiom_head(Time) ->
       [ not(happens(inviteIn(Agent1, Agent2, Room), Time)),
          (->),
         not(inviteIn(Agent1, Agent2, Room))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',45).

 /*  axiom(not(inviteIn(Agent1, Agent2, Room)),
       [  (not(at(Agent1, Room));not(at(Agent2, Exists_Outside));not(adjacent(Room, Exists_Outside))),
         some(Exists_Outside,
              '$kolem_Fn_67'(Agent1, Agent2, Room, Time))
       ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',45).

 /*  (   (   not(at(Kolem_Fn_67P_Num4_V, Tloc))
       ;   not(at(A, Tloc7))
       ;   not(adjacent(Tloc, Tloc7))
       ),
       some(Tloc7,
            '$kolem_Fn_67'(Kolem_Fn_67P_Num4_V,
                           A,
                           Tloc,
                           Kolem_Fn_67))
   ->  not(inviteIn(Kolem_Fn_67P_Num4_V, A, Tloc))
   ).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',45).
then(if(((not(loc_at(Kolem_Fn_67P_Num4_V, Tloc));not(loc_at(A, Tloc7));not(adjacent(Tloc, Tloc7))), some(Tloc7, '$kolem_Fn_67'(Kolem_Fn_67P_Num4_V, A, Tloc, Kolem_Fn_67)))), not(inviteIn(Kolem_Fn_67P_Num4_V, A, Tloc))).

 /*   reactive_rule([  (not(loc_at(Kolem_Fn_67P_Num4_V, Tloc));not(loc_at(A, Tloc7));not(adjacent(Tloc, Tloc7))),
                      some(Tloc7,
                           '$kolem_Fn_67'(Kolem_Fn_67P_Num4_V,
                                          A,
                                          Tloc,
                                          Kolem_Fn_67))
                    ],
                    [not(inviteIn(Kolem_Fn_67P_Num4_V, A, Tloc))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',45).

 /*  holds_at(at(Agent1, Room), Time) :-
       happens(inviteIn(Agent1, Agent2, Room), Time),
       some(Exists_Outside,
            '$kolem_Fn_67'(Agent1, Agent2, Room, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',45).

 /*  fix_axiom_head(Time) ->
       [ holds_at(at(Agent1, Room), Time),
          (->),
         at(Agent1, Room)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',45).

 /*  axiom(at(Agent1, Room),
       [ inviteIn(Agent1, Agent2, Room),
         some(Exists_Outside,
              '$kolem_Fn_67'(Agent1, Agent2, Room, Time))
       ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',45).

 /*  (   inviteIn(InviteinP_Num3_V, A, Tloc10),
       some(_,
            '$kolem_Fn_67'(InviteinP_Num3_V,
                           A,
                           Tloc10,
                           Kolem_Fn_6712))
   ->  at(InviteinP_Num3_V, Tloc10)
   ).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',45).
then(if((inviteIn(InviteinP_Num3_V, A, Tloc10), some(_, '$kolem_Fn_67'(InviteinP_Num3_V, A, Tloc10, Kolem_Fn_6712)))), loc_at(InviteinP_Num3_V, Tloc10)).

 /*  reactive_rule([ happens(inviteIn(InviteinP_Num3_V,
   				 A,
   				 Tloc10),
   			Time_From,
   			Time_Until),
   		some(_,
   		     '$kolem_Fn_67'(InviteinP_Num3_V,
   				    A,
   				    Tloc10,
   				    Kolem_Fn_6712))
   	      ],
   	      [ holds(loc_at(InviteinP_Num3_V,Tloc10),
   		      Holds)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',45).

 /*  holds_at(at(Agent2, Exists_Outside), Time) :-
       happens(inviteIn(Agent1, Agent2, Room), Time),
       some(Exists_Outside,
            '$kolem_Fn_67'(Agent1, Agent2, Room, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',45).

 /*  fix_axiom_head(Time) ->
       [ holds_at(at(Agent2, Exists_Outside), Time),
          (->),
         at(Agent2, Exists_Outside)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',45).

 /*  axiom(at(Agent2, Exists_Outside),
       [ inviteIn(Agent1, Agent2, Room),
         some(Exists_Outside,
              '$kolem_Fn_67'(Agent1, Agent2, Room, Time))
       ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',45).

 /*  (   inviteIn(InviteinP_Num3_V18, A, Invitein),
       some(Tloc16,
            '$kolem_Fn_67'(InviteinP_Num3_V18,
                           A,
                           Invitein,
                           Kolem_Fn_6719))
   ->  at(A, Tloc16)
   ).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',45).
then(if((inviteIn(InviteinP_Num3_V18, A, Invitein), some(Tloc16, '$kolem_Fn_67'(InviteinP_Num3_V18, A, Invitein, Kolem_Fn_6719)))), loc_at(A, Tloc16)).

 /*  reactive_rule([ happens(inviteIn(InviteinP_Num3_V18,
   				 A,
   				 Invitein),
   			Time_From20,
   			Time_Until21),
   		some(Tloc16,
   		     '$kolem_Fn_67'(InviteinP_Num3_V18,
   				    A,
   				    Invitein,
   				    Kolem_Fn_6719))
   	      ],
   	      [holds(loc_at(A,Tloc16),Holds22)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',45).

 /*  adjacent(Room, Exists_Outside) :-
       happens(inviteIn(Agent1, Agent2, Room), Time),
       some(Exists_Outside,
            '$kolem_Fn_67'(Agent1, Agent2, Room, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',45).

 /*  fix_axiom_head(Time) ->
       [ happens(inviteIn(Agent1, Agent2, Room), Time),
          (->),
         inviteIn(Agent1, Agent2, Room)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',45).

 /*  axiom(adjacent(Room, Exists_Outside),
       [ inviteIn(Agent1, Agent2, Room),
         some(Exists_Outside,
              '$kolem_Fn_67'(Agent1, Agent2, Room, Time))
       ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',45).

 /*  (   inviteIn(InviteinP_Num3_V24, A, Invitein23),
       some(Adjacent,
            '$kolem_Fn_67'(InviteinP_Num3_V24,
                           A,
                           Invitein23,
                           Kolem_Fn_6725))
   ->  adjacent(Invitein23, Adjacent)
   ).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',45).
then(if((inviteIn(InviteinP_Num3_V24, A, Invitein23), some(Adjacent, '$kolem_Fn_67'(InviteinP_Num3_V24, A, Invitein23, Kolem_Fn_6725)))), adjacent(Invitein23, Adjacent)).

 /*  reactive_rule([ happens(inviteIn(InviteinP_Num3_V24,
   				 A,
   				 Invitein23),
   			Time_From27,
   			Time_Until28),
   		some(Adjacent,
   		     '$kolem_Fn_67'(InviteinP_Num3_V24,
   				    A,
   				    Invitein23,
   				    Kolem_Fn_6725))
   	      ],
   	      [adjacent(Invitein23,Adjacent)]).
 */


%; An effect axiom states that if
%; an agent invites another agent into a room,
%; the second agent will be invited into the room by the first agent:
% [agent1,agent2,room,time]
% Initiates(InviteIn(agent1,agent2,room),
%           InvitedIn(agent2,room,agent1),
%           time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',52).

 /*  axiom(initiates(inviteIn(Agent1, Agent2, Room), invitedIn(Agent2, Room, Agent1), Time),
       []).
 */

 /*  initiates(inviteIn(InviteinP_Num3_V,
   		   InvitedinP_Num3_V,
   		   Invitein),
   	  invitedIn(InvitedinP_Num3_V,
   		    Invitein,
   		    InviteinP_Num3_V),
   	  Initiates).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',52).
initiates(inviteIn(InviteinP_Num3_V,
		   InvitedinP_Num3_V,
		   Invitein),
	  invitedIn(InvitedinP_Num3_V,
		    Invitein,
		    InviteinP_Num3_V)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',52).

 /*  initiated(happens(inviteIn(InviteinP_Num3_V,
   			   InvitedinP_Num3_V,
   			   Invitein),
   		  Time_From,
   		  Time_Until),
   	  invitedIn(InvitedinP_Num3_V,
   		    Invitein,
   		    InviteinP_Num3_V),
   	  []).
 */


%; agent intends to walk into room.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',58).
% event IntendToWalkIn(agent,room)
 %  event(intendToWalkIn(agent,room)).
 %  event(intendToWalkIn(agent,room)).
actions([intendToWalkIn/2]).
mpred_prop(intendToWalkIn(agent,room),event).


%; agent has the intention to walk into room.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',60).
% fluent IntentionToWalkIn(agent,room)
 %  fluent(intentionToWalkIn(agent,room)).
 %  fluent(intentionToWalkIn(agent,room)).
fluents([intentionToWalkIn/2]).
mpred_prop(intentionToWalkIn(agent,room),fluent).


%; agent acts on the intention to walk into room.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',62).
% fluent ActOnIntentionToWalkIn(agent,room)
 %  fluent(actOnIntentionToWalkIn(agent,room)).
 %  fluent(actOnIntentionToWalkIn(agent,room)).
fluents([actOnIntentionToWalkIn/2]).
mpred_prop(actOnIntentionToWalkIn(agent,room),fluent).

% noninertial ActOnIntentionToWalkIn
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',62).
noninertial(actOnIntentionToWalkIn).
%; A trigger axiom states that
%; if an agent is invited into a room by another agent,
%; the first agent likes the second agent, and
%; the first agent does not already have the intention to
%; walk into the room,
%; the first agent intends to walk into the room:
% [agent1,agent2,room,time]
% HoldsAt(InvitedIn(agent1,room,agent2),time) &
% HoldsAt(Like(agent1,agent2),time) &
% !HoldsAt(IntentionToWalkIn(agent1,room),time) ->
% Happens(IntendToWalkIn(agent1,room),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',71).

 /*  (   holds_at(invitedIn(Agent1, Room, Agent2), Time),
       holds_at(like(Agent1, Agent2), Time),
       holds_at(neg(intentionToWalkIn(Agent1, Room)), Time)
   ->  happens(intendToWalkIn(Agent1, Room), Time)
   ).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',71).
then(if((at(invitedIn(Agent1, Room, Agent2), Time), at(like(Agent1, Agent2), Time), at(not(intentionToWalkIn(Agent1, Room)), Time))), happens(intendToWalkIn(Agent1, Room), Time)).

 /*  reactive_rule([ holds(invitedIn(Agent1,Room,Agent2),
   		      Time),
   		holds(like(Agent1,Agent2),Time),
   		holds(not(intentionToWalkIn(Agent1,Room)),
   		      Time)
   	      ],
   	      [ happens(intendToWalkIn(Agent1,Room),
   			Time)
   	      ]).
 */


%; An effect axiom states that
%; if an agent intends to walk into a room,
%; the agent will have the intention to walk into the room:
% [agent,room,time]
% Initiates(IntendToWalkIn(agent,room),
%           IntentionToWalkIn(agent,room),
%           time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',80).

 /*  axiom(initiates(intendToWalkIn(Agent, Room), intentionToWalkIn(Agent, Room), Time),
       []).
 */

 /*  initiates(intendToWalkIn(A,Intendtowalkin),
   	  intentionToWalkIn(A,Intendtowalkin),
   	  Initiates).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',80).
initiates(intendToWalkIn(A,Intendtowalkin),
	  intentionToWalkIn(A,Intendtowalkin)).

 /*  initiated(happens(intendToWalkIn(A,Intendtowalkin),
   		  Time_From,
   		  Time_Until),
   	  intentionToWalkIn(A,Intendtowalkin),
   	  []).
 */


%; Two trigger axioms state that
%; if an agent has the intention to walk into a room,
%; the agent acts on the intention to walk into the room,
%; the agent is at a location,
%; side one (two) of a door is the room,
%; side two (one) of the door is the location,
%; agent will walk through side two (one) of the door:
% [agent,room,location,door,time]
% HoldsAt(IntentionToWalkIn(agent,room),time) &
% HoldsAt(ActOnIntentionToWalkIn(agent,room),time) &
% HoldsAt(At(agent,location),time) &
% Side1(door)=room &
% Side2(door)=location ->
% Happens(WalkThroughDoor21(agent,door),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',92).

 /*  (   holds_at(intentionToWalkIn(Agent, Room), Time),
       holds_at(actOnIntentionToWalkIn(Agent, Room), Time),
       holds_at(at(Agent, Location), Time),
       equals(side1(Door), Room),
       equals(side2(Door), Location)
   ->  happens(walkThroughDoor21(Agent, Door), Time)
   ).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',92).
then(if((at(intentionToWalkIn(Agent, Room), Time), at(actOnIntentionToWalkIn(Agent, Room), Time), at(loc_at(Agent, Location), Time), equals(side1(Door), Room), equals(side2(Door), Location))), happens(walkThroughDoor21(Agent, Door), Time)).

 /*  reactive_rule([ holds(intentionToWalkIn(Agent,Room),
   		      Time),
   		holds(actOnIntentionToWalkIn(Agent,Room),
   		      Time),
   		holds(loc_at(Agent,Location),Time),
   		equals(side1(Door),Room),
   		equals(side2(Door),Location)
   	      ],
   	      [ happens(walkThroughDoor21(Agent,Door),
   			Time)
   	      ]).
 */


% [agent,room,location,door,time]
% HoldsAt(IntentionToWalkIn(agent,room),time) &
% HoldsAt(ActOnIntentionToWalkIn(agent,room),time) &
% HoldsAt(At(agent,location),time) &
% Side2(door)=room &
% Side1(door)=location ->
% Happens(WalkThroughDoor12(agent,door),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',101).

 /*  (   holds_at(intentionToWalkIn(Agent, Room), Time),
       holds_at(actOnIntentionToWalkIn(Agent, Room), Time),
       holds_at(at(Agent, Location), Time),
       equals(side2(Door), Room),
       equals(side1(Door), Location)
   ->  happens(walkThroughDoor12(Agent, Door), Time)
   ).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',101).
then(if((at(intentionToWalkIn(Agent, Room), Time), at(actOnIntentionToWalkIn(Agent, Room), Time), at(loc_at(Agent, Location), Time), equals(side2(Door), Room), equals(side1(Door), Location))), happens(walkThroughDoor12(Agent, Door), Time)).

 /*  reactive_rule([ holds(intentionToWalkIn(Agent,Room),
   		      Time),
   		holds(actOnIntentionToWalkIn(Agent,Room),
   		      Time),
   		holds(loc_at(Agent,Location),Time),
   		equals(side2(Door),Room),
   		equals(side1(Door),Location)
   	      ],
   	      [ happens(walkThroughDoor12(Agent,Door),
   			Time)
   	      ]).
 */


%; Two effect axioms state that
%; if side one (two) of a door is a room and
%; an agent walks through side two (one) of the door,
%; the agent will no longer have the intention to
%; walk into the room:
% [agent,room,door,time]
% Side1(door)=room ->
% Terminates(WalkThroughDoor21(agent,door),
%            IntentionToWalkIn(agent,room),
%            time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',113).

 /*  axiom(terminates(walkThroughDoor21(Agent, Door), intentionToWalkIn(Agent, Room), Time),
       [equals(side1(Door), Room)]).
 */

 /*  equals(side1(Side1), Equals) ->
       terminates(walkThroughDoor21(A, Side1),
                  intentionToWalkIn(A, Equals),
                  Terminates).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',113).
then(if(equals(side1(Side1),Equals)),
     terminates(walkThroughDoor21(A,Side1),
		at(intentionToWalkIn(A,Equals),
		   Terminates),
		Terminates7)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',113).

 /*  reactive_rule([equals(side1(Side1),Equals)],
   	      [ terminates(walkThroughDoor21(A,Side1),
   			   at(intentionToWalkIn(A,Equals),
   			      Terminates),
   			   Terminates7)
   	      ]).
 */


% [agent,room,door,time]
% Side2(door)=room ->
% Terminates(WalkThroughDoor12(agent,door),
%            IntentionToWalkIn(agent,room),
%            time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',120).

 /*  axiom(terminates(walkThroughDoor12(Agent, Door), intentionToWalkIn(Agent, Room), Time),
       [equals(side2(Door), Room)]).
 */

 /*  equals(side2(Side2), Equals) ->
       terminates(walkThroughDoor12(A, Side2),
                  intentionToWalkIn(A, Equals),
                  Terminates).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',120).
then(if(equals(side2(Side2),Equals)),
     terminates(walkThroughDoor12(A,Side2),
		at(intentionToWalkIn(A,Equals),
		   Terminates),
		Terminates7)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',120).

 /*  reactive_rule([equals(side2(Side2),Equals)],
   	      [ terminates(walkThroughDoor12(A,Side2),
   			   at(intentionToWalkIn(A,Equals),
   			      Terminates),
   			   Terminates7)
   	      ]).
 */


%; agent greets object.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',126).
% event Greet(agent,object)
 %  event(greet(agent,object)).
 %  event(greet(agent,object)).
actions([greet/2]).
mpred_prop(greet(agent,object),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',128).
% event SayPleasedToMeet(agent,agent)
 %  event(sayPleasedToMeet(agent,agent)).
 %  event(sayPleasedToMeet(agent,agent)).
actions([sayPleasedToMeet/2]).
mpred_prop(sayPleasedToMeet(agent,agent),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',130).
%; agent says goodbye to object.

% event SayGoodbye(agent,object)
 %  event(sayGoodbye(agent,object)).
 %  event(sayGoodbye(agent,object)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',130).
actions([sayGoodbye/2]).
mpred_prop(sayGoodbye(agent,object),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',133).
% event TalkAbout(agent,content)
 %  event(talkAbout(agent,content)).
 %  event(talkAbout(agent,content)).
actions([talkAbout/2]).
mpred_prop(talkAbout(agent,content),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',135).
% event Converse(agent,agent)
 %  event(converse(agent,agent)).
 %  event(converse(agent,agent)).
actions([converse/2]).
mpred_prop(converse(agent,agent),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',137).
% [agent1,agent2,time]
% Happens(Converse(agent1,agent2),time) ->
% {location}% 
% HoldsAt(At(agent1,location),time) &
% HoldsAt(At(agent2,location),time).
 %  clausify_pnf=exists([Location],  (happens(converse(Agent1, Agent2), Time)->holds_at(at(Agent1, Location), Time), holds_at(at(Agent2, Location), Time))).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',139).

 /*  not(happens(converse(Agent1, Agent2), Time)) :-
       (   not(holds_at(at(Agent1, Exists_Location), Time))
       ;   not(holds_at(at(Agent2, Exists_Location), Time))
       ),
       some(Exists_Location,
            '$kolem_Fn_68'(Agent1, Agent2, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',139).

 /*  fix_axiom_head(Time) ->
       [ not(happens(converse(Agent1, Agent2), Time)),
          (->),
         not(converse(Agent1, Agent2))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',139).

 /*  axiom(not(converse(Agent1, Agent2)),
       [  (not(at(Agent1, Exists_Location));not(at(Agent2, Exists_Location))),
         some(Exists_Location,
              '$kolem_Fn_68'(Agent1, Agent2, Time))
       ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',139).

 /*  (   (   not(at(Kolem_Fn_68P_Num3_V, Tloc))
       ;   not(at(Converse, Tloc))
       ),
       some(Tloc,
            '$kolem_Fn_68'(Kolem_Fn_68P_Num3_V,
                           Converse,
                           Kolem_Fn_68))
   ->  not(converse(Kolem_Fn_68P_Num3_V, Converse))
   ).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',139).
then(if(((not(loc_at(Kolem_Fn_68P_Num3_V, Tloc));not(loc_at(Converse, Tloc))), some(Tloc, '$kolem_Fn_68'(Kolem_Fn_68P_Num3_V, Converse, Kolem_Fn_68)))), not(converse(Kolem_Fn_68P_Num3_V, Converse))).

 /*   reactive_rule([  (not(loc_at(Kolem_Fn_68P_Num3_V, Tloc));not(loc_at(Converse, Tloc))),
                      some(Tloc,
                           '$kolem_Fn_68'(Kolem_Fn_68P_Num3_V,
                                          Converse,
                                          Kolem_Fn_68))
                    ],
                    [not(converse(Kolem_Fn_68P_Num3_V, Converse))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',139).

 /*  holds_at(at(Agent1, Exists_Location), Time) :-
       happens(converse(Agent1, Agent2), Time),
       some(Exists_Location,
            '$kolem_Fn_68'(Agent1, Agent2, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',139).

 /*  fix_axiom_head(Time) ->
       [ holds_at(at(Agent1, Exists_Location), Time),
          (->),
         at(Agent1, Exists_Location)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',139).

 /*  axiom(at(Agent1, Exists_Location),
       [ converse(Agent1, Agent2),
         some(Exists_Location,
              '$kolem_Fn_68'(Agent1, Agent2, Time))
       ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',139).

 /*  (   converse(Kolem_Fn_68P_Num3_V12, Converse10),
       some(Tloc9,
            '$kolem_Fn_68'(Kolem_Fn_68P_Num3_V12,
                           Converse10,
                           Kolem_Fn_6811))
   ->  at(Kolem_Fn_68P_Num3_V12, Tloc9)
   ).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',139).
then(if((converse(Kolem_Fn_68P_Num3_V12, Converse10), some(Tloc9, '$kolem_Fn_68'(Kolem_Fn_68P_Num3_V12, Converse10, Kolem_Fn_6811)))), loc_at(Kolem_Fn_68P_Num3_V12, Tloc9)).

 /*  reactive_rule([ converse(Kolem_Fn_68P_Num3_V12,Converse10),
   		some(Tloc9,
   		     '$kolem_Fn_68'(Kolem_Fn_68P_Num3_V12,
   				    Converse10,
   				    Kolem_Fn_6811))
   	      ],
   	      [ holds(loc_at(Kolem_Fn_68P_Num3_V12,Tloc9),
   		      Holds)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',139).

 /*  holds_at(at(Agent2, Exists_Location), Time) :-
       happens(converse(Agent1, Agent2), Time),
       some(Exists_Location,
            '$kolem_Fn_68'(Agent1, Agent2, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',139).

 /*  fix_axiom_head(Time) ->
       [ holds_at(at(Agent2, Exists_Location), Time),
          (->),
         at(Agent2, Exists_Location)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',139).

 /*  axiom(at(Agent2, Exists_Location),
       [ converse(Agent1, Agent2),
         some(Exists_Location,
              '$kolem_Fn_68'(Agent1, Agent2, Time))
       ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',139).

 /*  (   converse(Kolem_Fn_68P_Num3_V17, Converse15),
       some(Tloc14,
            '$kolem_Fn_68'(Kolem_Fn_68P_Num3_V17,
                           Converse15,
                           Kolem_Fn_6816))
   ->  at(Converse15, Tloc14)
   ).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',139).
then(if((converse(Kolem_Fn_68P_Num3_V17, Converse15), some(Tloc14, '$kolem_Fn_68'(Kolem_Fn_68P_Num3_V17, Converse15, Kolem_Fn_6816)))), loc_at(Converse15, Tloc14)).

 /*  reactive_rule([ converse(Kolem_Fn_68P_Num3_V17,Converse15),
   		some(Tloc14,
   		     '$kolem_Fn_68'(Kolem_Fn_68P_Num3_V17,
   				    Converse15,
   				    Kolem_Fn_6816))
   	      ],
   	      [ holds(loc_at(Converse15,Tloc14),
   		      Holds18)
   	      ]).
 */


%; A precondition axiom states that for
%; an agent to greet an object,
%; there must be a location such that
%; the agent is at the location and
%; the object is at the location:
% [agent,object,time]
% Happens(Greet(agent,object),time) ->
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',148).
% {location}% 
% HoldsAt(At(agent,location),time) &
% HoldsAt(At(object,location),time).
 %  clausify_pnf=exists([Location],  (happens(greet(Agent, Object), Time)->holds_at(at(Agent, Location), Time), holds_at(at(Object, Location), Time))).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',150).

 /*  not(happens(greet(Agent, Object), Time)) :-
       (   not(holds_at(at(Agent, Exists_Location), Time))
       ;   not(holds_at(at(Object, Exists_Location), Time))
       ),
       some(Exists_Location,
            '$kolem_Fn_69'(Agent, Object, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',150).

 /*  fix_axiom_head(Time) ->
       [ not(happens(greet(Agent, Object), Time)),
          (->),
         not(greet(Agent, Object))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',150).

 /*  axiom(not(greet(Agent, Object)),
       [  (not(at(Agent, Exists_Location));not(at(Object, Exists_Location))),
         some(Exists_Location,
              '$kolem_Fn_69'(Agent, Object, Time))
       ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',150).

 /*  (   (   not(at(Kolem_Fn_69P_Num3_V, Tloc))
       ;   not(at(Greet, Tloc))
       ),
       some(Tloc,
            '$kolem_Fn_69'(Kolem_Fn_69P_Num3_V, Greet, Kolem_Fn_69))
   ->  not(greet(Kolem_Fn_69P_Num3_V, Greet))
   ).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',150).
then(if(((not(loc_at(Kolem_Fn_69P_Num3_V, Tloc));not(loc_at(Greet, Tloc))), some(Tloc, '$kolem_Fn_69'(Kolem_Fn_69P_Num3_V, Greet, Kolem_Fn_69)))), not(greet(Kolem_Fn_69P_Num3_V, Greet))).

 /*   reactive_rule([  (not(loc_at(Kolem_Fn_69P_Num3_V, Tloc));not(loc_at(Greet, Tloc))),
                      some(Tloc,
                           '$kolem_Fn_69'(Kolem_Fn_69P_Num3_V,
                                          Greet,
                                          Kolem_Fn_69))
                    ],
                    [not(greet(Kolem_Fn_69P_Num3_V, Greet))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',150).

 /*  holds_at(at(Agent, Exists_Location), Time) :-
       happens(greet(Agent, Object), Time),
       some(Exists_Location,
            '$kolem_Fn_69'(Agent, Object, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',150).

 /*  fix_axiom_head(Time) ->
       [ holds_at(at(Agent, Exists_Location), Time),
          (->),
         at(Agent, Exists_Location)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',150).

 /*  axiom(at(Agent, Exists_Location),
       [ greet(Agent, Object),
         some(Exists_Location,
              '$kolem_Fn_69'(Agent, Object, Time))
       ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',150).

 /*  (   greet(Kolem_Fn_69P_Num3_V12, Greet10),
       some(Tloc9,
            '$kolem_Fn_69'(Kolem_Fn_69P_Num3_V12,
                           Greet10,
                           Kolem_Fn_6911))
   ->  at(Kolem_Fn_69P_Num3_V12, Tloc9)
   ).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',150).
then(if((greet(Kolem_Fn_69P_Num3_V12, Greet10), some(Tloc9, '$kolem_Fn_69'(Kolem_Fn_69P_Num3_V12, Greet10, Kolem_Fn_6911)))), loc_at(Kolem_Fn_69P_Num3_V12, Tloc9)).

 /*  reactive_rule([ greet(Kolem_Fn_69P_Num3_V12,Greet10),
   		some(Tloc9,
   		     '$kolem_Fn_69'(Kolem_Fn_69P_Num3_V12,
   				    Greet10,
   				    Kolem_Fn_6911))
   	      ],
   	      [ holds(loc_at(Kolem_Fn_69P_Num3_V12,Tloc9),
   		      Holds)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',150).

 /*  holds_at(at(Object, Exists_Location), Time) :-
       happens(greet(Agent, Object), Time),
       some(Exists_Location,
            '$kolem_Fn_69'(Agent, Object, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',150).

 /*  fix_axiom_head(Time) ->
       [ holds_at(at(Object, Exists_Location), Time),
          (->),
         at(Object, Exists_Location)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',150).

 /*  axiom(at(Object, Exists_Location),
       [ greet(Agent, Object),
         some(Exists_Location,
              '$kolem_Fn_69'(Agent, Object, Time))
       ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',150).

 /*  (   greet(Kolem_Fn_69P_Num3_V17, Greet15),
       some(Tloc14,
            '$kolem_Fn_69'(Kolem_Fn_69P_Num3_V17,
                           Greet15,
                           Kolem_Fn_6916))
   ->  at(Greet15, Tloc14)
   ).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',150).
then(if((greet(Kolem_Fn_69P_Num3_V17, Greet15), some(Tloc14, '$kolem_Fn_69'(Kolem_Fn_69P_Num3_V17, Greet15, Kolem_Fn_6916)))), loc_at(Greet15, Tloc14)).

 /*  reactive_rule([ greet(Kolem_Fn_69P_Num3_V17,Greet15),
   		some(Tloc14,
   		     '$kolem_Fn_69'(Kolem_Fn_69P_Num3_V17,
   				    Greet15,
   				    Kolem_Fn_6916))
   	      ],
   	      [holds(loc_at(Greet15,Tloc14),Holds18)]).
 */


% [agent,object,time]
% Happens(SayGoodbye(agent,object),time) ->
% {location}% 
% HoldsAt(At(agent,location),time) &
% HoldsAt(At(object,location),time).
 %  clausify_pnf=exists([Location],  (happens(sayGoodbye(Agent, Object), Time)->holds_at(at(Agent, Location), Time), holds_at(at(Object, Location), Time))).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',155).

 /*  not(happens(sayGoodbye(Agent, Object), Time)) :-
       (   not(holds_at(at(Agent, Exists_Location), Time))
       ;   not(holds_at(at(Object, Exists_Location), Time))
       ),
       some(Exists_Location,
            '$kolem_Fn_70'(Agent, Object, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',155).

 /*  fix_axiom_head(Time) ->
       [ not(happens(sayGoodbye(Agent, Object), Time)),
          (->),
         not(sayGoodbye(Agent, Object))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',155).

 /*  axiom(not(sayGoodbye(Agent, Object)),
       [  (not(at(Agent, Exists_Location));not(at(Object, Exists_Location))),
         some(Exists_Location,
              '$kolem_Fn_70'(Agent, Object, Time))
       ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',155).

 /*  (   (   not(at(Kolem_Fn_70P_Num3_V, Tloc))
       ;   not(at(Saygoodbye, Tloc))
       ),
       some(Tloc,
            '$kolem_Fn_70'(Kolem_Fn_70P_Num3_V,
                           Saygoodbye,
                           Kolem_Fn_70))
   ->  not(sayGoodbye(Kolem_Fn_70P_Num3_V, Saygoodbye))
   ).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',155).
then(if(((not(loc_at(Kolem_Fn_70P_Num3_V, Tloc));not(loc_at(Saygoodbye, Tloc))), some(Tloc, '$kolem_Fn_70'(Kolem_Fn_70P_Num3_V, Saygoodbye, Kolem_Fn_70)))), not(sayGoodbye(Kolem_Fn_70P_Num3_V, Saygoodbye))).

 /*   reactive_rule([  (not(loc_at(Kolem_Fn_70P_Num3_V, Tloc));not(loc_at(Saygoodbye, Tloc))),
                      some(Tloc,
                           '$kolem_Fn_70'(Kolem_Fn_70P_Num3_V,
                                          Saygoodbye,
                                          Kolem_Fn_70))
                    ],
                    [not(sayGoodbye(Kolem_Fn_70P_Num3_V, Saygoodbye))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',155).

 /*  holds_at(at(Agent, Exists_Location), Time) :-
       happens(sayGoodbye(Agent, Object), Time),
       some(Exists_Location,
            '$kolem_Fn_70'(Agent, Object, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',155).

 /*  fix_axiom_head(Time) ->
       [ holds_at(at(Agent, Exists_Location), Time),
          (->),
         at(Agent, Exists_Location)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',155).

 /*  axiom(at(Agent, Exists_Location),
       [ sayGoodbye(Agent, Object),
         some(Exists_Location,
              '$kolem_Fn_70'(Agent, Object, Time))
       ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',155).

 /*  (   sayGoodbye(Kolem_Fn_70P_Num3_V12, Saygoodbye10),
       some(Tloc9,
            '$kolem_Fn_70'(Kolem_Fn_70P_Num3_V12,
                           Saygoodbye10,
                           Kolem_Fn_7011))
   ->  at(Kolem_Fn_70P_Num3_V12, Tloc9)
   ).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',155).
then(if((sayGoodbye(Kolem_Fn_70P_Num3_V12, Saygoodbye10), some(Tloc9, '$kolem_Fn_70'(Kolem_Fn_70P_Num3_V12, Saygoodbye10, Kolem_Fn_7011)))), loc_at(Kolem_Fn_70P_Num3_V12, Tloc9)).

 /*  reactive_rule([ sayGoodbye(Kolem_Fn_70P_Num3_V12,
   			   Saygoodbye10),
   		some(Tloc9,
   		     '$kolem_Fn_70'(Kolem_Fn_70P_Num3_V12,
   				    Saygoodbye10,
   				    Kolem_Fn_7011))
   	      ],
   	      [ holds(loc_at(Kolem_Fn_70P_Num3_V12,Tloc9),
   		      Holds)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',155).

 /*  holds_at(at(Object, Exists_Location), Time) :-
       happens(sayGoodbye(Agent, Object), Time),
       some(Exists_Location,
            '$kolem_Fn_70'(Agent, Object, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',155).

 /*  fix_axiom_head(Time) ->
       [ holds_at(at(Object, Exists_Location), Time),
          (->),
         at(Object, Exists_Location)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',155).

 /*  axiom(at(Object, Exists_Location),
       [ sayGoodbye(Agent, Object),
         some(Exists_Location,
              '$kolem_Fn_70'(Agent, Object, Time))
       ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',155).

 /*  (   sayGoodbye(Kolem_Fn_70P_Num3_V17, Saygoodbye15),
       some(Tloc14,
            '$kolem_Fn_70'(Kolem_Fn_70P_Num3_V17,
                           Saygoodbye15,
                           Kolem_Fn_7016))
   ->  at(Saygoodbye15, Tloc14)
   ).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',155).
then(if((sayGoodbye(Kolem_Fn_70P_Num3_V17, Saygoodbye15), some(Tloc14, '$kolem_Fn_70'(Kolem_Fn_70P_Num3_V17, Saygoodbye15, Kolem_Fn_7016)))), loc_at(Saygoodbye15, Tloc14)).

 /*  reactive_rule([ sayGoodbye(Kolem_Fn_70P_Num3_V17,
   			   Saygoodbye15),
   		some(Tloc14,
   		     '$kolem_Fn_70'(Kolem_Fn_70P_Num3_V17,
   				    Saygoodbye15,
   				    Kolem_Fn_7016))
   	      ],
   	      [ holds(loc_at(Saygoodbye15,Tloc14),
   		      Holds18)
   	      ]).
 */


%; speech: expression of emotions
%; agent cries for joy.

% event CryForJoy(agent)
 %  event(cryForJoy(agent)).
 %  event(cryForJoy(agent)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',162).
actions([cryForJoy/1]).
mpred_prop(cryForJoy(agent),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',165).
%; A precondition axiom states that for
%; an agent to cry for joy,
%; the agent must be happy:
% [agent,time]
% Happens(CryForJoy(agent),time) ->
% HoldsAt(Happy(agent),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',168).

 /*  happens(cryForJoy(Agent), Time) ->
       holds_at(happy(Agent), Time).
 */
then(if(happens(cryForJoy(Agent),Time)),
     at(happy(Agent),Time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',168).

 /*  reactive_rule([happens(cryForJoy(Agent),Time)],
   	      [holds(happy(Agent),Time)]).
 */

% event Threaten(agent,agent,weapon)
 %  event(threaten(agent,agent,weapon)).
 %  event(threaten(agent,agent,weapon)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',171).
actions([threaten/3]).
mpred_prop(threaten(agent,agent,weapon),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',174).
% event ReleaseFromThreat(agent,agent)
 %  event(releaseFromThreat(agent,agent)).
 %  event(releaseFromThreat(agent,agent)).
actions([releaseFromThreat/2]).
mpred_prop(releaseFromThreat(agent,agent),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',176).
% fluent ThreatenedBy(agent,agent)
 %  fluent(threatenedBy(agent,agent)).
 %  fluent(threatenedBy(agent,agent)).
fluents([threatenedBy/2]).
mpred_prop(threatenedBy(agent,agent),fluent).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',178).
% [agent1,agent2,weapon,time]
% Happens(Threaten(agent1,agent2,weapon), time) ->
% HoldsAt(Holding(agent1,weapon),time) &
% {location}% 
% HoldsAt(At(agent1,location),time) &
% HoldsAt(At(agent2,location),time).
 %  clausify_pnf=exists([Location],  (happens(threaten(Agent1, Agent2, Weapon), Time)->holds_at(holding(Agent1, Weapon), Time), holds_at(at(Agent1, Location), Time), holds_at(at(Agent2, Location), Time))).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',181).

 /*  not(happens(threaten(Agent1, Agent2, Weapon), Time)) :-
       (   not(holds_at(holding(Agent1, Weapon), Time))
       ;   not(holds_at(at(Agent1, Exists_Location), Time))
       ;   not(holds_at(at(Agent2, Exists_Location), Time))
       ),
       some(Exists_Location,
            '$kolem_Fn_71'(Agent1, Agent2, Weapon, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',181).

 /*  fix_axiom_head(Time) ->
       [ not(happens(threaten(Agent1, Agent2, Weapon), Time)),
          (->),
         not(threaten(Agent1, Agent2, Weapon))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',181).

 /*  axiom(not(threaten(Agent1, Agent2, Weapon)),
       [  (not(holding(Agent1, Weapon));not(at(Agent1, Exists_Location));not(at(Agent2, Exists_Location))),
         some(Exists_Location,
              '$kolem_Fn_71'(Agent1, Agent2, Weapon, Time))
       ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',181).

 /*  (   (   not(holding(Kolem_Fn_71P_Num4_V, Holding))
       ;   not(at(Kolem_Fn_71P_Num4_V, Tloc))
       ;   not(at(A, Tloc))
       ),
       some(Tloc,
            '$kolem_Fn_71'(Kolem_Fn_71P_Num4_V,
                           A,
                           Holding,
                           Kolem_Fn_71))
   ->  not(threaten(Kolem_Fn_71P_Num4_V, A, Holding))
   ).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',181).
then(if(((not(holding(Kolem_Fn_71P_Num4_V, Holding));not(loc_at(Kolem_Fn_71P_Num4_V, Tloc));not(loc_at(A, Tloc))), some(Tloc, '$kolem_Fn_71'(Kolem_Fn_71P_Num4_V, A, Holding, Kolem_Fn_71)))), not(threaten(Kolem_Fn_71P_Num4_V, A, Holding))).

 /*   reactive_rule([  (not(holding(Kolem_Fn_71P_Num4_V, Holding));not(loc_at(Kolem_Fn_71P_Num4_V, Tloc));not(loc_at(A, Tloc))),
                      some(Tloc,
                           '$kolem_Fn_71'(Kolem_Fn_71P_Num4_V,
                                          A,
                                          Holding,
                                          Kolem_Fn_71))
                    ],
                    [ not(threaten(Kolem_Fn_71P_Num4_V,
                                   A,
                                   Holding))
                    ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',181).

 /*  holds_at(holding(Agent1, Weapon), Time) :-
       happens(threaten(Agent1, Agent2, Weapon), Time),
       some(Exists_Location,
            '$kolem_Fn_71'(Agent1, Agent2, Weapon, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',181).

 /*  fix_axiom_head(Time) ->
       [ holds_at(holding(Agent1, Weapon), Time),
          (->),
         holding(Agent1, Weapon)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',181).

 /*  axiom(holding(Agent1, Weapon),
       [ threaten(Agent1, Agent2, Weapon),
         some(Exists_Location,
              '$kolem_Fn_71'(Agent1, Agent2, Weapon, Time))
       ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',181).

 /*  (   threaten(ThreatenP_Num3_V, A, Threaten),
       some(_,
            '$kolem_Fn_71'(ThreatenP_Num3_V,
                           A,
                           Threaten,
                           Kolem_Fn_7112))
   ->  holding(ThreatenP_Num3_V, Threaten)
   ).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',181).
then(if((threaten(ThreatenP_Num3_V, A, Threaten), some(_, '$kolem_Fn_71'(ThreatenP_Num3_V, A, Threaten, Kolem_Fn_7112)))), holding(ThreatenP_Num3_V, Threaten)).

 /*  reactive_rule([ happens(threaten(ThreatenP_Num3_V,
   				 A,
   				 Threaten),
   			Time_From,
   			Time_Until),
   		some(_,
   		     '$kolem_Fn_71'(ThreatenP_Num3_V,
   				    A,
   				    Threaten,
   				    Kolem_Fn_7112))
   	      ],
   	      [ holds(holding(ThreatenP_Num3_V,Threaten),
   		      Holds)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',181).

 /*  holds_at(at(Agent1, Exists_Location), Time) :-
       happens(threaten(Agent1, Agent2, Weapon), Time),
       some(Exists_Location,
            '$kolem_Fn_71'(Agent1, Agent2, Weapon, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',181).

 /*  fix_axiom_head(Time) ->
       [ holds_at(at(Agent1, Exists_Location), Time),
          (->),
         at(Agent1, Exists_Location)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',181).

 /*  axiom(at(Agent1, Exists_Location),
       [ threaten(Agent1, Agent2, Weapon),
         some(Exists_Location,
              '$kolem_Fn_71'(Agent1, Agent2, Weapon, Time))
       ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',181).

 /*  (   threaten(ThreatenP_Num3_V18, A, Threaten17),
       some(Tloc16,
            '$kolem_Fn_71'(ThreatenP_Num3_V18,
                           A,
                           Threaten17,
                           Kolem_Fn_7119))
   ->  at(ThreatenP_Num3_V18, Tloc16)
   ).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',181).
then(if((threaten(ThreatenP_Num3_V18, A, Threaten17), some(Tloc16, '$kolem_Fn_71'(ThreatenP_Num3_V18, A, Threaten17, Kolem_Fn_7119)))), loc_at(ThreatenP_Num3_V18, Tloc16)).

 /*  reactive_rule([ happens(threaten(ThreatenP_Num3_V18,
   				 A,
   				 Threaten17),
   			Time_From20,
   			Time_Until21),
   		some(Tloc16,
   		     '$kolem_Fn_71'(ThreatenP_Num3_V18,
   				    A,
   				    Threaten17,
   				    Kolem_Fn_7119))
   	      ],
   	      [ holds(loc_at(ThreatenP_Num3_V18,Tloc16),
   		      Holds22)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',181).

 /*  holds_at(at(Agent2, Exists_Location), Time) :-
       happens(threaten(Agent1, Agent2, Weapon), Time),
       some(Exists_Location,
            '$kolem_Fn_71'(Agent1, Agent2, Weapon, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',181).

 /*  fix_axiom_head(Time) ->
       [ holds_at(at(Agent2, Exists_Location), Time),
          (->),
         at(Agent2, Exists_Location)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',181).

 /*  axiom(at(Agent2, Exists_Location),
       [ threaten(Agent1, Agent2, Weapon),
         some(Exists_Location,
              '$kolem_Fn_71'(Agent1, Agent2, Weapon, Time))
       ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',181).

 /*  (   threaten(ThreatenP_Num3_V25, A, Threaten24),
       some(Tloc23,
            '$kolem_Fn_71'(ThreatenP_Num3_V25,
                           A,
                           Threaten24,
                           Kolem_Fn_7126))
   ->  at(A, Tloc23)
   ).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',181).
then(if((threaten(ThreatenP_Num3_V25, A, Threaten24), some(Tloc23, '$kolem_Fn_71'(ThreatenP_Num3_V25, A, Threaten24, Kolem_Fn_7126)))), loc_at(A, Tloc23)).

 /*  reactive_rule([ happens(threaten(ThreatenP_Num3_V25,
   				 A,
   				 Threaten24),
   			Time_From27,
   			Time_Until28),
   		some(Tloc23,
   		     '$kolem_Fn_71'(ThreatenP_Num3_V25,
   				    A,
   				    Threaten24,
   				    Kolem_Fn_7126))
   	      ],
   	      [holds(loc_at(A,Tloc23),Holds29)]).
 */


% [agent1,agent2,weapon,time]
% Happens(Threaten(agent1,agent2,weapon), time) ->
% Happens(BecomeAngryAt(agent2,agent1),time).

 /*  happens(threaten(Agent1, Agent2, Weapon), Time) ->
       happens(becomeAngryAt(Agent2, Agent1), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',186).
then(if(happens(threaten(Agent1,Agent2,Weapon),
		Time)),
     happens(becomeAngryAt(Agent2,Agent1),Time)).

 /*  reactive_rule([ happens(threaten(Agent1,
   				 Agent2,
   				 Weapon),
   			Time)
   	      ],
   	      [ happens(becomeAngryAt(Agent2,Agent1),
   			Time)
   	      ]).
 */


% [agent1,agent2,weapon,time]
% Initiates(Threaten(agent1,agent2,weapon),
%           ThreatenedBy(agent2,agent1),
%           time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',190).

 /*  axiom(initiates(threaten(Agent1, Agent2, Weapon), threatenedBy(Agent2, Agent1), Time),
       []).
 */

 /*  initiates(threaten(ThreatenP_Num3_V,A,Threaten),
   	  threatenedBy(A,ThreatenP_Num3_V),
   	  Initiates).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',190).
initiates(threaten(ThreatenP_Num3_V,A,Threaten),
	  threatenedBy(A,ThreatenP_Num3_V)).

 /*  initiated(happens(threaten(ThreatenP_Num3_V,
   			   A,
   			   Threaten),
   		  Time_From,
   		  Time_Until),
   	  threatenedBy(A,ThreatenP_Num3_V),
   	  []).
 */


% [agent1,agent2,time]
% Terminates(ReleaseFromThreat(agent1,agent2),
%            ThreatenedBy(agent2,agent1),
%            time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',195).

 /*  axiom(terminates(releaseFromThreat(Agent1, Agent2), threatenedBy(Agent2, Agent1), Time),
       []).
 */

 /*  terminates(releaseFromThreat(Threatenedby,
   			     Releasefromthreat),
   	   threatenedBy(Releasefromthreat,Threatenedby),
   	   Terminates).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',195).
terminates(releaseFromThreat(Threatenedby,
			     Releasefromthreat),
	   threatenedBy(Releasefromthreat,Threatenedby)).

 /*  terminated(happens(releaseFromThreat(Threatenedby,
   				     Releasefromthreat),
   		   Time_From,
   		   Time_Until),
   	   threatenedBy(Releasefromthreat,Threatenedby),
   	   []).
 */

% event Order(agent,agent,physobj)
 %  event(order(agent,agent,physobj)).
 %  event(order(agent,agent,physobj)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',198).
actions([order/3]).
mpred_prop(order(agent,agent,physobj),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',201).
% fluent KnowOrder(agent,agent,physobj)
 %  fluent(knowOrder(agent,agent,physobj)).
 %  fluent(knowOrder(agent,agent,physobj)).
fluents([knowOrder/3]).
mpred_prop(knowOrder(agent,agent,physobj),fluent).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',203).
% [agent1,agent2,physobj,time]
% Initiates(Order(agent1,agent2,physobj),
%           KnowOrder(agent2,agent1,physobj),
%           time).

 /*  axiom(initiates(order(Agent1, Agent2, Physobj), knowOrder(Agent2, Agent1, Physobj), Time),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',203).

 /*  initiates(order(OrderP_Num3_V,
   		KnoworderP_Num3_V,
   		Order),
   	  knowOrder(KnoworderP_Num3_V,
   		    OrderP_Num3_V,
   		    Order),
   	  Initiates).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',203).
initiates(order(OrderP_Num3_V,
		KnoworderP_Num3_V,
		Order),
	  knowOrder(KnoworderP_Num3_V,
		    OrderP_Num3_V,
		    Order)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',203).

 /*  initiated(happens(order(OrderP_Num3_V,
   			KnoworderP_Num3_V,
   			Order),
   		  Time_From,
   		  Time_Until),
   	  knowOrder(KnoworderP_Num3_V,
   		    OrderP_Num3_V,
   		    Order),
   	  []).
 */


% [agent1,agent2,physobj,time]
% Happens(Order(agent1,agent2,physobj),time) ->
% {location}% 
% HoldsAt(At(agent1,location),time) &
% HoldsAt(At(agent2,location),time).
 %  clausify_pnf=exists([Location],  (happens(order(Agent1, Agent2, Physobj), Time)->holds_at(at(Agent1, Location), Time), holds_at(at(Agent2, Location), Time))).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',209).

 /*  not(happens(order(Agent1, Agent2, Physobj), Time)) :-
       (   not(holds_at(at(Agent1, Exists_Location), Time))
       ;   not(holds_at(at(Agent2, Exists_Location), Time))
       ),
       some(Exists_Location,
            '$kolem_Fn_72'(Agent1, Agent2, Physobj, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',209).

 /*  fix_axiom_head(Time) ->
       [ not(happens(order(Agent1, Agent2, Physobj), Time)),
          (->),
         not(order(Agent1, Agent2, Physobj))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',209).

 /*  axiom(not(order(Agent1, Agent2, Physobj)),
       [  (not(at(Agent1, Exists_Location));not(at(Agent2, Exists_Location))),
         some(Exists_Location,
              '$kolem_Fn_72'(Agent1, Agent2, Physobj, Time))
       ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',209).

 /*  (   (   not(at(Kolem_Fn_72P_Num4_V, Tloc))
       ;   not(at(A, Tloc))
       ),
       some(Tloc,
            '$kolem_Fn_72'(Kolem_Fn_72P_Num4_V,
                           A,
                           Order,
                           Kolem_Fn_72))
   ->  not(order(Kolem_Fn_72P_Num4_V, A, Order))
   ).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',209).
then(if(((not(loc_at(Kolem_Fn_72P_Num4_V, Tloc));not(loc_at(A, Tloc))), some(Tloc, '$kolem_Fn_72'(Kolem_Fn_72P_Num4_V, A, Order, Kolem_Fn_72)))), not(order(Kolem_Fn_72P_Num4_V, A, Order))).

 /*   reactive_rule([  (not(loc_at(Kolem_Fn_72P_Num4_V, Tloc));not(loc_at(A, Tloc))),
                      some(Tloc,
                           '$kolem_Fn_72'(Kolem_Fn_72P_Num4_V,
                                          A,
                                          Order,
                                          Kolem_Fn_72))
                    ],
                    [not(order(Kolem_Fn_72P_Num4_V, A, Order))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',209).

 /*  holds_at(at(Agent1, Exists_Location), Time) :-
       happens(order(Agent1, Agent2, Physobj), Time),
       some(Exists_Location,
            '$kolem_Fn_72'(Agent1, Agent2, Physobj, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',209).

 /*  fix_axiom_head(Time) ->
       [ holds_at(at(Agent1, Exists_Location), Time),
          (->),
         at(Agent1, Exists_Location)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',209).

 /*  axiom(at(Agent1, Exists_Location),
       [ order(Agent1, Agent2, Physobj),
         some(Exists_Location,
              '$kolem_Fn_72'(Agent1, Agent2, Physobj, Time))
       ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',209).

 /*  (   order(OrderP_Num3_V, A, Order11),
       some(Tloc10,
            '$kolem_Fn_72'(OrderP_Num3_V,
                           A,
                           Order11,
                           Kolem_Fn_7213))
   ->  at(OrderP_Num3_V, Tloc10)
   ).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',209).
then(if((order(OrderP_Num3_V, A, Order11), some(Tloc10, '$kolem_Fn_72'(OrderP_Num3_V, A, Order11, Kolem_Fn_7213)))), loc_at(OrderP_Num3_V, Tloc10)).

 /*  reactive_rule([ happens(order(OrderP_Num3_V,
   			      A,
   			      Order11),
   			Time_From,
   			Time_Until),
   		some(Tloc10,
   		     '$kolem_Fn_72'(OrderP_Num3_V,
   				    A,
   				    Order11,
   				    Kolem_Fn_7213))
   	      ],
   	      [ holds(loc_at(OrderP_Num3_V,Tloc10),
   		      Holds)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',209).

 /*  holds_at(at(Agent2, Exists_Location), Time) :-
       happens(order(Agent1, Agent2, Physobj), Time),
       some(Exists_Location,
            '$kolem_Fn_72'(Agent1, Agent2, Physobj, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',209).

 /*  fix_axiom_head(Time) ->
       [ holds_at(at(Agent2, Exists_Location), Time),
          (->),
         at(Agent2, Exists_Location)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',209).

 /*  axiom(at(Agent2, Exists_Location),
       [ order(Agent1, Agent2, Physobj),
         some(Exists_Location,
              '$kolem_Fn_72'(Agent1, Agent2, Physobj, Time))
       ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',209).

 /*  (   order(OrderP_Num3_V19, A, Order18),
       some(Tloc17,
            '$kolem_Fn_72'(OrderP_Num3_V19,
                           A,
                           Order18,
                           Kolem_Fn_7220))
   ->  at(A, Tloc17)
   ).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',209).
then(if((order(OrderP_Num3_V19, A, Order18), some(Tloc17, '$kolem_Fn_72'(OrderP_Num3_V19, A, Order18, Kolem_Fn_7220)))), loc_at(A, Tloc17)).

 /*  reactive_rule([ happens(order(OrderP_Num3_V19,
   			      A,
   			      Order18),
   			Time_From21,
   			Time_Until22),
   		some(Tloc17,
   		     '$kolem_Fn_72'(OrderP_Num3_V19,
   				    A,
   				    Order18,
   				    Kolem_Fn_7220))
   	      ],
   	      [holds(loc_at(A,Tloc17),Holds23)]).
 */

% event Request(agent,agent,physobj)
 %  event(request(agent,agent,physobj)).
 %  event(request(agent,agent,physobj)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',213).
actions([request/3]).
mpred_prop(request(agent,agent,physobj),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',216).
% fluent KnowRequest(agent,agent,physobj)
 %  fluent(knowRequest(agent,agent,physobj)).
 %  fluent(knowRequest(agent,agent,physobj)).
fluents([knowRequest/3]).
mpred_prop(knowRequest(agent,agent,physobj),fluent).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',218).
% [agent1,agent2,physobj,time]
% Initiates(Request(agent1,agent2,physobj),
%           KnowRequest(agent2,agent1,physobj),
%           time).

 /*  axiom(initiates(request(Agent1, Agent2, Physobj), knowRequest(Agent2, Agent1, Physobj), Time),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',218).

 /*  initiates(request(RequestP_Num3_V,
   		  KnowrequestP_Num3_V,
   		  Request),
   	  knowRequest(KnowrequestP_Num3_V,
   		      RequestP_Num3_V,
   		      Request),
   	  Initiates).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',218).
initiates(request(RequestP_Num3_V,
		  KnowrequestP_Num3_V,
		  Request),
	  knowRequest(KnowrequestP_Num3_V,
		      RequestP_Num3_V,
		      Request)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',218).

 /*  initiated(happens(request(RequestP_Num3_V,
   			  KnowrequestP_Num3_V,
   			  Request),
   		  Time_From,
   		  Time_Until),
   	  knowRequest(KnowrequestP_Num3_V,
   		      RequestP_Num3_V,
   		      Request),
   	  []).
 */


% [agent1,agent2,physobj,time]
% Happens(Request(agent1,agent2,physobj),time) ->
% {location}% 
% HoldsAt(At(agent1,location),time) &
% HoldsAt(At(agent2,location),time).
 %  clausify_pnf=exists([Location],  (happens(request(Agent1, Agent2, Physobj), Time)->holds_at(at(Agent1, Location), Time), holds_at(at(Agent2, Location), Time))).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',224).

 /*  not(happens(request(Agent1, Agent2, Physobj), Time)) :-
       (   not(holds_at(at(Agent1, Exists_Location), Time))
       ;   not(holds_at(at(Agent2, Exists_Location), Time))
       ),
       some(Exists_Location,
            '$kolem_Fn_73'(Agent1, Agent2, Physobj, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',224).

 /*  fix_axiom_head(Time) ->
       [ not(happens(request(Agent1, Agent2, Physobj), Time)),
          (->),
         not(request(Agent1, Agent2, Physobj))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',224).

 /*  axiom(not(request(Agent1, Agent2, Physobj)),
       [  (not(at(Agent1, Exists_Location));not(at(Agent2, Exists_Location))),
         some(Exists_Location,
              '$kolem_Fn_73'(Agent1, Agent2, Physobj, Time))
       ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',224).

 /*  (   (   not(at(Kolem_Fn_73P_Num4_V, Tloc))
       ;   not(at(A, Tloc))
       ),
       some(Tloc,
            '$kolem_Fn_73'(Kolem_Fn_73P_Num4_V,
                           A,
                           Request,
                           Kolem_Fn_73))
   ->  not(request(Kolem_Fn_73P_Num4_V, A, Request))
   ).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',224).
then(if(((not(loc_at(Kolem_Fn_73P_Num4_V, Tloc));not(loc_at(A, Tloc))), some(Tloc, '$kolem_Fn_73'(Kolem_Fn_73P_Num4_V, A, Request, Kolem_Fn_73)))), not(request(Kolem_Fn_73P_Num4_V, A, Request))).

 /*   reactive_rule([  (not(loc_at(Kolem_Fn_73P_Num4_V, Tloc));not(loc_at(A, Tloc))),
                      some(Tloc,
                           '$kolem_Fn_73'(Kolem_Fn_73P_Num4_V,
                                          A,
                                          Request,
                                          Kolem_Fn_73))
                    ],
                    [ not(request(Kolem_Fn_73P_Num4_V,
                                  A,
                                  Request))
                    ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',224).

 /*  holds_at(at(Agent1, Exists_Location), Time) :-
       happens(request(Agent1, Agent2, Physobj), Time),
       some(Exists_Location,
            '$kolem_Fn_73'(Agent1, Agent2, Physobj, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',224).

 /*  fix_axiom_head(Time) ->
       [ holds_at(at(Agent1, Exists_Location), Time),
          (->),
         at(Agent1, Exists_Location)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',224).

 /*  axiom(at(Agent1, Exists_Location),
       [ request(Agent1, Agent2, Physobj),
         some(Exists_Location,
              '$kolem_Fn_73'(Agent1, Agent2, Physobj, Time))
       ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',224).

 /*  (   request(RequestP_Num3_V, A, Request11),
       some(Tloc10,
            '$kolem_Fn_73'(RequestP_Num3_V,
                           A,
                           Request11,
                           Kolem_Fn_7313))
   ->  at(RequestP_Num3_V, Tloc10)
   ).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',224).
then(if((request(RequestP_Num3_V, A, Request11), some(Tloc10, '$kolem_Fn_73'(RequestP_Num3_V, A, Request11, Kolem_Fn_7313)))), loc_at(RequestP_Num3_V, Tloc10)).

 /*  reactive_rule([ happens(request(RequestP_Num3_V,
   				A,
   				Request11),
   			Time_From,
   			Time_Until),
   		some(Tloc10,
   		     '$kolem_Fn_73'(RequestP_Num3_V,
   				    A,
   				    Request11,
   				    Kolem_Fn_7313))
   	      ],
   	      [ holds(loc_at(RequestP_Num3_V,Tloc10),
   		      Holds)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',224).

 /*  holds_at(at(Agent2, Exists_Location), Time) :-
       happens(request(Agent1, Agent2, Physobj), Time),
       some(Exists_Location,
            '$kolem_Fn_73'(Agent1, Agent2, Physobj, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',224).

 /*  fix_axiom_head(Time) ->
       [ holds_at(at(Agent2, Exists_Location), Time),
          (->),
         at(Agent2, Exists_Location)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',224).

 /*  axiom(at(Agent2, Exists_Location),
       [ request(Agent1, Agent2, Physobj),
         some(Exists_Location,
              '$kolem_Fn_73'(Agent1, Agent2, Physobj, Time))
       ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',224).

 /*  (   request(RequestP_Num3_V19, A, Request18),
       some(Tloc17,
            '$kolem_Fn_73'(RequestP_Num3_V19,
                           A,
                           Request18,
                           Kolem_Fn_7320))
   ->  at(A, Tloc17)
   ).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',224).
then(if((request(RequestP_Num3_V19, A, Request18), some(Tloc17, '$kolem_Fn_73'(RequestP_Num3_V19, A, Request18, Kolem_Fn_7320)))), loc_at(A, Tloc17)).

 /*  reactive_rule([ happens(request(RequestP_Num3_V19,
   				A,
   				Request18),
   			Time_From21,
   			Time_Until22),
   		some(Tloc17,
   		     '$kolem_Fn_73'(RequestP_Num3_V19,
   				    A,
   				    Request18,
   				    Kolem_Fn_7320))
   	      ],
   	      [holds(loc_at(A,Tloc17),Holds23)]).
 */


%; End of file.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',228).
:- endif.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',47).
% load answers/Mueller2004c/IPRel.e
:- if(is_e_toplevel).
:- cond_convert_e(changed, 'answers/Mueller2004c/IPRel.e').
 %  loading(changed,'/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e').
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; IPRel: interpersonal relations
%;

% fluent FriendOf(agent,agent)
 %  fluent(friendOf(agent,agent)).
 %  fluent(friendOf(agent,agent)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',14).
fluents([friendOf/2]).
mpred_prop(friendOf(agent,agent),fluent).

% fluent NeutralOf(agent,agent)
 %  fluent(neutralOf(agent,agent)).
 %  fluent(neutralOf(agent,agent)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',16).
fluents([neutralOf/2]).
mpred_prop(neutralOf(agent,agent),fluent).

% fluent EnemyOf(agent,agent)
 %  fluent(enemyOf(agent,agent)).
 %  fluent(enemyOf(agent,agent)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',18).
fluents([enemyOf/2]).
mpred_prop(enemyOf(agent,agent),fluent).

% event BecomeFriends(agent,agent)
 %  event(becomeFriends(agent,agent)).
 %  event(becomeFriends(agent,agent)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',20).
actions([becomeFriends/2]).
mpred_prop(becomeFriends(agent,agent),event).

% event BecomeNeutral(agent,agent)
 %  event(becomeNeutral(agent,agent)).
 %  event(becomeNeutral(agent,agent)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',20).
actions([becomeNeutral/2]).
mpred_prop(becomeNeutral(agent,agent),event).

% event BecomeEnemies(agent,agent)
 %  event(becomeEnemies(agent,agent)).
 %  event(becomeEnemies(agent,agent)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',22).
actions([becomeEnemies/2]).
mpred_prop(becomeEnemies(agent,agent),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',24).
% [agent1,agent2,time]
% HoldsAt(FriendOf(agent1,agent2),time) ->
% !Holds(EnemyOf(agent1,agent2),time).

 /*  holds_at(friendOf(Agent1, Agent2), Time) ->
       not(holds(enemyOf(Agent1, Agent2), Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',24).
then(if(at(friendOf(Agent1,Agent2),Time)),
     not(holds(enemyOf(Agent1,Agent2),Time))).

 /*  reactive_rule([holds(friendOf(Agent1,Agent2),Time)],
   	      [ holds(not([ holds(enemyOf(Agent1,Agent2),
   				  Time)
   			  ]),
   		      Time)
   	      ]).
 */


% [agent1,agent2,time]
% HoldsAt(NeutralOf(agent1,agent2),time) ->
% !Holds(EnemyOf(agent1,agent2),time).

 /*  holds_at(neutralOf(Agent1, Agent2), Time) ->
       not(holds(enemyOf(Agent1, Agent2), Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',29).
then(if(at(neutralOf(Agent1,Agent2),Time)),
     not(holds(enemyOf(Agent1,Agent2),Time))).

 /*  reactive_rule([holds(neutralOf(Agent1,Agent2),Time)],
   	      [ holds(not([ holds(enemyOf(Agent1,Agent2),
   				  Time)
   			  ]),
   		      Time)
   	      ]).
 */


% [agent1,agent2,time]
% HoldsAt(FriendOf(agent1,agent2),time) ->
% HoldsAt(FriendOf(agent2,agent1),time).

 /*  holds_at(friendOf(Agent1, Agent2), Time) ->
       holds_at(friendOf(Agent2, Agent1), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',33).
then(if(at(friendOf(Agent1,Agent2),Time)),
     at(friendOf(Agent2,Agent1),Time)).

 /*  reactive_rule([holds(friendOf(Agent1,Agent2),Time)],
   	      [holds(friendOf(Agent2,Agent1),Time)]).
 */


% [agent1,agent2,time]
% HoldsAt(NeutralOf(agent1,agent2),time) ->
% HoldsAt(NeutralOf(agent2,agent1),time).

 /*  holds_at(neutralOf(Agent1, Agent2), Time) ->
       holds_at(neutralOf(Agent2, Agent1), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',37).
then(if(at(neutralOf(Agent1,Agent2),Time)),
     at(neutralOf(Agent2,Agent1),Time)).

 /*  reactive_rule([holds(neutralOf(Agent1,Agent2),Time)],
   	      [holds(neutralOf(Agent2,Agent1),Time)]).
 */


% [agent1,agent2,time]
% HoldsAt(EnemyOf(agent1,agent2),time) ->
% HoldsAt(EnemyOf(agent2,agent1),time).

 /*  holds_at(enemyOf(Agent1, Agent2), Time) ->
       holds_at(enemyOf(Agent2, Agent1), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',41).
then(if(at(enemyOf(Agent1,Agent2),Time)),
     at(enemyOf(Agent2,Agent1),Time)).

 /*  reactive_rule([holds(enemyOf(Agent1,Agent2),Time)],
   	      [holds(enemyOf(Agent2,Agent1),Time)]).
 */


% [agent1,agent2,time]
% Initiates(BecomeFriends(agent1,agent2),FriendOf(agent1,agent2),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',45).

 /*  axiom(initiates(becomeFriends(Agent1, Agent2), friendOf(Agent1, Agent2), Time),
       []).
 */

 /*  initiates(becomeFriends(A,Becomefriends),
   	  friendOf(A,Becomefriends),
   	  Initiates).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',45).
initiates(becomeFriends(A,Becomefriends),
	  friendOf(A,Becomefriends)).

 /*  initiated(happens(becomeFriends(A,Becomefriends),
   		  Time_From,
   		  Time_Until),
   	  friendOf(A,Becomefriends),
   	  []).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',47).
% [agent1,agent2,time]
% Initiates(BecomeFriends(agent1,agent2),FriendOf(agent2,agent1),time).

 /*  axiom(initiates(becomeFriends(Agent1, Agent2), friendOf(Agent2, Agent1), Time),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',47).

 /*  initiates(becomeFriends(Friendof,Becomefriends),
   	  friendOf(Becomefriends,Friendof),
   	  Initiates).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',47).
initiates(becomeFriends(Friendof,Becomefriends),
	  friendOf(Becomefriends,Friendof)).

 /*  initiated(happens(becomeFriends(Friendof,Becomefriends),
   		  Time_From,
   		  Time_Until),
   	  friendOf(Becomefriends,Friendof),
   	  []).
 */


% [agent1,agent2,time]
% Terminates(BecomeFriends(agent1,agent2),NeutralOf(agent1,agent2),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',51).

 /*  axiom(terminates(becomeFriends(Agent1, Agent2), neutralOf(Agent1, Agent2), Time),
       []).
 */

 /*  terminates(becomeFriends(A,Becomefriends),
   	   neutralOf(A,Becomefriends),
   	   Terminates).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',51).
terminates(becomeFriends(A,Becomefriends),
	   neutralOf(A,Becomefriends)).

 /*  terminated(happens(becomeFriends(A,Becomefriends),
   		   Time_From,
   		   Time_Until),
   	   neutralOf(A,Becomefriends),
   	   []).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',53).
% [agent1,agent2,time]
% Terminates(BecomeFriends(agent1,agent2),NeutralOf(agent2,agent1),time).

 /*  axiom(terminates(becomeFriends(Agent1, Agent2), neutralOf(Agent2, Agent1), Time),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',53).

 /*  terminates(becomeFriends(Neutralof,Becomefriends),
   	   neutralOf(Becomefriends,Neutralof),
   	   Terminates).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',53).
terminates(becomeFriends(Neutralof,Becomefriends),
	   neutralOf(Becomefriends,Neutralof)).

 /*  terminated(happens(becomeFriends(Neutralof,Becomefriends),
   		   Time_From,
   		   Time_Until),
   	   neutralOf(Becomefriends,Neutralof),
   	   []).
 */


% [agent1,agent2,time]
% Terminates(BecomeFriends(agent1,agent2),EnemyOf(agent1,agent2),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',57).

 /*  axiom(terminates(becomeFriends(Agent1, Agent2), enemyOf(Agent1, Agent2), Time),
       []).
 */

 /*  terminates(becomeFriends(A,Becomefriends),
   	   enemyOf(A,Becomefriends),
   	   Terminates).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',57).
terminates(becomeFriends(A,Becomefriends),
	   enemyOf(A,Becomefriends)).

 /*  terminated(happens(becomeFriends(A,Becomefriends),
   		   Time_From,
   		   Time_Until),
   	   enemyOf(A,Becomefriends),
   	   []).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',59).
% [agent1,agent2,time]
% Terminates(BecomeFriends(agent1,agent2),EnemyOf(agent2,agent1),time).

 /*  axiom(terminates(becomeFriends(Agent1, Agent2), enemyOf(Agent2, Agent1), Time),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',59).

 /*  terminates(becomeFriends(Enemyof,Becomefriends),
   	   enemyOf(Becomefriends,Enemyof),
   	   Terminates).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',59).
terminates(becomeFriends(Enemyof,Becomefriends),
	   enemyOf(Becomefriends,Enemyof)).

 /*  terminated(happens(becomeFriends(Enemyof,Becomefriends),
   		   Time_From,
   		   Time_Until),
   	   enemyOf(Becomefriends,Enemyof),
   	   []).
 */


% [agent1,agent2,time]
% Initiates(BecomeEnemies(agent1,agent2),EnemyOf(agent1,agent2),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',63).

 /*  axiom(initiates(becomeEnemies(Agent1, Agent2), enemyOf(Agent1, Agent2), Time),
       []).
 */

 /*  initiates(becomeEnemies(A,Becomeenemies),
   	  enemyOf(A,Becomeenemies),
   	  Initiates).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',63).
initiates(becomeEnemies(A,Becomeenemies),
	  enemyOf(A,Becomeenemies)).

 /*  initiated(happens(becomeEnemies(A,Becomeenemies),
   		  Time_From,
   		  Time_Until),
   	  enemyOf(A,Becomeenemies),
   	  []).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',65).
% [agent1,agent2,time]
% Initiates(BecomeEnemies(agent1,agent2),EnemyOf(agent2,agent1),time).

 /*  axiom(initiates(becomeEnemies(Agent1, Agent2), enemyOf(Agent2, Agent1), Time),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',65).

 /*  initiates(becomeEnemies(Enemyof,Becomeenemies),
   	  enemyOf(Becomeenemies,Enemyof),
   	  Initiates).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',65).
initiates(becomeEnemies(Enemyof,Becomeenemies),
	  enemyOf(Becomeenemies,Enemyof)).

 /*  initiated(happens(becomeEnemies(Enemyof,Becomeenemies),
   		  Time_From,
   		  Time_Until),
   	  enemyOf(Becomeenemies,Enemyof),
   	  []).
 */


% [agent1,agent2,time]
% Terminates(BecomeEnemies(agent1,agent2),NeutralOf(agent1,agent2),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',69).

 /*  axiom(terminates(becomeEnemies(Agent1, Agent2), neutralOf(Agent1, Agent2), Time),
       []).
 */

 /*  terminates(becomeEnemies(A,Becomeenemies),
   	   neutralOf(A,Becomeenemies),
   	   Terminates).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',69).
terminates(becomeEnemies(A,Becomeenemies),
	   neutralOf(A,Becomeenemies)).

 /*  terminated(happens(becomeEnemies(A,Becomeenemies),
   		   Time_From,
   		   Time_Until),
   	   neutralOf(A,Becomeenemies),
   	   []).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',71).
% [agent1,agent2,time]
% Terminates(BecomeEnemies(agent1,agent2),NeutralOf(agent2,agent1),time).

 /*  axiom(terminates(becomeEnemies(Agent1, Agent2), neutralOf(Agent2, Agent1), Time),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',71).

 /*  terminates(becomeEnemies(Neutralof,Becomeenemies),
   	   neutralOf(Becomeenemies,Neutralof),
   	   Terminates).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',71).
terminates(becomeEnemies(Neutralof,Becomeenemies),
	   neutralOf(Becomeenemies,Neutralof)).

 /*  terminated(happens(becomeEnemies(Neutralof,Becomeenemies),
   		   Time_From,
   		   Time_Until),
   	   neutralOf(Becomeenemies,Neutralof),
   	   []).
 */


% [agent1,agent2,time]
% Terminates(BecomeEnemies(agent1,agent2),FriendOf(agent1,agent2),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',75).

 /*  axiom(terminates(becomeEnemies(Agent1, Agent2), friendOf(Agent1, Agent2), Time),
       []).
 */

 /*  terminates(becomeEnemies(A,Becomeenemies),
   	   friendOf(A,Becomeenemies),
   	   Terminates).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',75).
terminates(becomeEnemies(A,Becomeenemies),
	   friendOf(A,Becomeenemies)).

 /*  terminated(happens(becomeEnemies(A,Becomeenemies),
   		   Time_From,
   		   Time_Until),
   	   friendOf(A,Becomeenemies),
   	   []).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',77).
% [agent1,agent2,time]
% Terminates(BecomeEnemies(agent1,agent2),FriendOf(agent2,agent1),time).

 /*  axiom(terminates(becomeEnemies(Agent1, Agent2), friendOf(Agent2, Agent1), Time),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',77).

 /*  terminates(becomeEnemies(Friendof,Becomeenemies),
   	   friendOf(Becomeenemies,Friendof),
   	   Terminates).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',77).
terminates(becomeEnemies(Friendof,Becomeenemies),
	   friendOf(Becomeenemies,Friendof)).

 /*  terminated(happens(becomeEnemies(Friendof,Becomeenemies),
   		   Time_From,
   		   Time_Until),
   	   friendOf(Becomeenemies,Friendof),
   	   []).
 */


% [agent1,agent2,time]
% Initiates(BecomeNeutral(agent1,agent2),NeutralOf(agent1,agent2),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',81).

 /*  axiom(initiates(becomeNeutral(Agent1, Agent2), neutralOf(Agent1, Agent2), Time),
       []).
 */

 /*  initiates(becomeNeutral(A,Becomeneutral),
   	  neutralOf(A,Becomeneutral),
   	  Initiates).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',81).
initiates(becomeNeutral(A,Becomeneutral),
	  neutralOf(A,Becomeneutral)).

 /*  initiated(happens(becomeNeutral(A,Becomeneutral),
   		  Time_From,
   		  Time_Until),
   	  neutralOf(A,Becomeneutral),
   	  []).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',83).
% [agent1,agent2,time]
% Initiates(BecomeNeutral(agent1,agent2),NeutralOf(agent2,agent1),time).

 /*  axiom(initiates(becomeNeutral(Agent1, Agent2), neutralOf(Agent2, Agent1), Time),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',83).

 /*  initiates(becomeNeutral(Neutralof,Becomeneutral),
   	  neutralOf(Becomeneutral,Neutralof),
   	  Initiates).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',83).
initiates(becomeNeutral(Neutralof,Becomeneutral),
	  neutralOf(Becomeneutral,Neutralof)).

 /*  initiated(happens(becomeNeutral(Neutralof,Becomeneutral),
   		  Time_From,
   		  Time_Until),
   	  neutralOf(Becomeneutral,Neutralof),
   	  []).
 */


% [agent1,agent2,time]
% Terminates(BecomeNeutral(agent1,agent2),FriendOf(agent1,agent2),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',87).

 /*  axiom(terminates(becomeNeutral(Agent1, Agent2), friendOf(Agent1, Agent2), Time),
       []).
 */

 /*  terminates(becomeNeutral(A,Becomeneutral),
   	   friendOf(A,Becomeneutral),
   	   Terminates).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',87).
terminates(becomeNeutral(A,Becomeneutral),
	   friendOf(A,Becomeneutral)).

 /*  terminated(happens(becomeNeutral(A,Becomeneutral),
   		   Time_From,
   		   Time_Until),
   	   friendOf(A,Becomeneutral),
   	   []).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',89).
% [agent1,agent2,time]
% Terminates(BecomeNeutral(agent1,agent2),FriendOf(agent2,agent1),time).

 /*  axiom(terminates(becomeNeutral(Agent1, Agent2), friendOf(Agent2, Agent1), Time),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',89).

 /*  terminates(becomeNeutral(Friendof,Becomeneutral),
   	   friendOf(Becomeneutral,Friendof),
   	   Terminates).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',89).
terminates(becomeNeutral(Friendof,Becomeneutral),
	   friendOf(Becomeneutral,Friendof)).

 /*  terminated(happens(becomeNeutral(Friendof,Becomeneutral),
   		   Time_From,
   		   Time_Until),
   	   friendOf(Becomeneutral,Friendof),
   	   []).
 */


% [agent1,agent2,time]
% Terminates(BecomeNeutral(agent1,agent2),EnemyOf(agent1,agent2),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',93).

 /*  axiom(terminates(becomeNeutral(Agent1, Agent2), enemyOf(Agent1, Agent2), Time),
       []).
 */

 /*  terminates(becomeNeutral(A,Becomeneutral),
   	   enemyOf(A,Becomeneutral),
   	   Terminates).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',93).
terminates(becomeNeutral(A,Becomeneutral),
	   enemyOf(A,Becomeneutral)).

 /*  terminated(happens(becomeNeutral(A,Becomeneutral),
   		   Time_From,
   		   Time_Until),
   	   enemyOf(A,Becomeneutral),
   	   []).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',95).
% [agent1,agent2,time]
% Terminates(BecomeNeutral(agent1,agent2),EnemyOf(agent2,agent1),time).

 /*  axiom(terminates(becomeNeutral(Agent1, Agent2), enemyOf(Agent2, Agent1), Time),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',95).

 /*  terminates(becomeNeutral(Enemyof,Becomeneutral),
   	   enemyOf(Becomeneutral,Enemyof),
   	   Terminates).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',95).
terminates(becomeNeutral(Enemyof,Becomeneutral),
	   enemyOf(Becomeneutral,Enemyof)).

 /*  terminated(happens(becomeNeutral(Enemyof,Becomeneutral),
   		   Time_From,
   		   Time_Until),
   	   enemyOf(Becomeneutral,Enemyof),
   	   []).
 */


% [agent1,agent2,time]
% HoldsAt(FriendOf(agent1,agent2),time) ->
% HoldsAt(Like(agent1,agent2),time).

 /*  holds_at(friendOf(Agent1, Agent2), Time) ->
       holds_at(like(Agent1, Agent2), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',99).
then(if(at(friendOf(Agent1,Agent2),Time)),
     at(like(Agent1,Agent2),Time)).

 /*  reactive_rule([holds(friendOf(Agent1,Agent2),Time)],
   	      [holds(like(Agent1,Agent2),Time)]).
 */


% [agent1,agent2,time]
% HoldsAt(EnemyOf(agent1,agent2),time) ->
% HoldsAt(Dislike(agent1,agent2),time).

 /*  holds_at(enemyOf(Agent1, Agent2), Time) ->
       holds_at(dislike(Agent1, Agent2), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',103).
then(if(at(enemyOf(Agent1,Agent2),Time)),
     at(dislike(Agent1,Agent2),Time)).

 /*  reactive_rule([holds(enemyOf(Agent1,Agent2),Time)],
   	      [holds(dislike(Agent1,Agent2),Time)]).
 */

% fluent AcquaintanceOf(agent,agent)
 %  fluent(acquaintanceOf(agent,agent)).
 %  fluent(acquaintanceOf(agent,agent)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',105).
fluents([acquaintanceOf/2]).
mpred_prop(acquaintanceOf(agent,agent),fluent).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',108).
% [agent,time]
 % HoldsAt(AcquaintanceOf(agent,agent),time).

 /*  fix_axiom_head(Time) ->
       [ holds_at(acquaintanceOf(Agent, Agent), Time),
          (->),
         acquaintanceOf(Agent, Agent)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',108).

 /*  axiom(acquaintanceOf(Agent, Agent),
       []).
 */
acquaintanceOf(Acquaintanceof,Acquaintanceof).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',108).

 /*  l_int(holds(acquaintanceOf(Acquaintanceof,Acquaintanceof),
   	    Holds),
         []).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',110).
% [agent1,agent2,time]
% HoldsAt(AcquaintanceOf(agent1,agent2),time) ->
% HoldsAt(AcquaintanceOf(agent2,agent1),time).

 /*  holds_at(acquaintanceOf(Agent1, Agent2), Time) ->
       holds_at(acquaintanceOf(Agent2, Agent1), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',110).
then(if(at(acquaintanceOf(Agent1,Agent2),Time)),
     at(acquaintanceOf(Agent2,Agent1),Time)).

 /*  reactive_rule([ holds(acquaintanceOf(Agent1,Agent2),
   		      Time)
   	      ],
   	      [ holds(acquaintanceOf(Agent2,Agent1),
   		      Time)
   	      ]).
 */

% event Introduce(agent,agent)
 %  event(introduce(agent,agent)).
 %  event(introduce(agent,agent)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',113).
actions([introduce/2]).
mpred_prop(introduce(agent,agent),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',116).
% [agent1,agent2,time]
% Initiates(Introduce(agent1,agent2),
%           AcquaintanceOf(agent1,agent2),
%           time).

 /*  axiom(initiates(introduce(Agent1, Agent2), acquaintanceOf(Agent1, Agent2), Time),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',116).

 /*  initiates(introduce(A,Introduce),
   	  acquaintanceOf(A,Introduce),
   	  Initiates).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',116).
initiates(introduce(A,Introduce),
	  acquaintanceOf(A,Introduce)).

 /*  initiated(happens(introduce(A,Introduce),
   		  Time_From,
   		  Time_Until),
   	  acquaintanceOf(A,Introduce),
   	  []).
 */


% [agent1,agent2,time]
% Initiates(Introduce(agent1,agent2),
%           AcquaintanceOf(agent2,agent1),
%           time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',122).

 /*  axiom(initiates(introduce(Agent1, Agent2), acquaintanceOf(Agent2, Agent1), Time),
       []).
 */

 /*  initiates(introduce(Acquaintanceof,Introduce),
   	  acquaintanceOf(Introduce,Acquaintanceof),
   	  Initiates).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',122).
initiates(introduce(Acquaintanceof,Introduce),
	  acquaintanceOf(Introduce,Acquaintanceof)).

 /*  initiated(happens(introduce(Acquaintanceof,Introduce),
   		  Time_From,
   		  Time_Until),
   	  acquaintanceOf(Introduce,Acquaintanceof),
   	  []).
 */

% event IntroduceMutual(agent,agent,agent)
 %  event(introduceMutual(agent,agent,agent)).
 %  event(introduceMutual(agent,agent,agent)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',125).
actions([introduceMutual/3]).
mpred_prop(introduceMutual(agent,agent,agent),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',128).
% [agent1,agent2,agent3,time]
% Initiates(IntroduceMutual(agent1,agent2,agent3),
%           AcquaintanceOf(agent2,agent3),
%           time).

 /*  axiom(initiates(introduceMutual(Agent1, Agent2, Agent3), acquaintanceOf(Agent2, Agent3), Time),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',128).

 /*  initiates(introduceMutual(IntroducemutualP_Num3_V,
   			  A,
   			  Introducemutual),
   	  acquaintanceOf(A,Introducemutual),
   	  Initiates).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',128).
initiates(introduceMutual(IntroducemutualP_Num3_V,
			  A,
			  Introducemutual),
	  acquaintanceOf(A,Introducemutual)).

 /*  initiated(happens(introduceMutual(IntroducemutualP_Num3_V,
   				  A,
   				  Introducemutual),
   		  Time_From,
   		  Time_Until),
   	  acquaintanceOf(A,Introducemutual),
   	  []).
 */


% [agent1,agent2,agent3,time]
% Initiates(IntroduceMutual(agent1,agent2,agent3),
%           AcquaintanceOf(agent3,agent2),
%           time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',134).

 /*  axiom(initiates(introduceMutual(Agent1, Agent2, Agent3), acquaintanceOf(Agent3, Agent2), Time),
       []).
 */

 /*  initiates(introduceMutual(IntroducemutualP_Num3_V,
   			  Acquaintanceof,
   			  Introducemutual),
   	  acquaintanceOf(Introducemutual,Acquaintanceof),
   	  Initiates).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',134).
initiates(introduceMutual(IntroducemutualP_Num3_V,
			  Acquaintanceof,
			  Introducemutual),
	  acquaintanceOf(Introducemutual,Acquaintanceof)).

 /*  initiated(happens(introduceMutual(IntroducemutualP_Num3_V,
   				  Acquaintanceof,
   				  Introducemutual),
   		  Time_From,
   		  Time_Until),
   	  acquaintanceOf(Introducemutual,Acquaintanceof),
   	  []).
 */


% [agent1,agent2,agent3,time]
% Happens(IntroduceMutual(agent1,agent2,agent3),time) ->
% HoldsAt(AcquaintanceOf(agent1,agent2),time) &
% HoldsAt(AcquaintanceOf(agent1,agent3),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',139).

 /*  (   happens(introduceMutual(Agent1, Agent2, Agent3),
               Time)
   ->  holds_at(acquaintanceOf(Agent1, Agent2), Time),
       holds_at(acquaintanceOf(Agent1, Agent3), Time)
   ).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',139).
then(if(happens(introduceMutual(Agent1, Agent2, Agent3), Time)),  (at(acquaintanceOf(Agent1, Agent2), Time), at(acquaintanceOf(Agent1, Agent3), Time))).

 /*  reactive_rule([ happens(introduceMutual(Agent1,
   					Agent2,
   					Agent3),
   			Time)
   	      ],
   	      [ holds(acquaintanceOf(Agent1,Agent2),
   		      Time),
   		holds(acquaintanceOf(Agent1,Agent3),
   		      Time)
   	      ]).
 */


%; End of file.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',142).
:- endif.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',49).
% location Location1
 %  t(location,location1).
location(location1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',51).
% portal DummyPortal1
 %  t(portal,dummyPortal1).
portal(dummyPortal1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',53).
% agent Introducer1
 %  t(agent,introducer1).
agent(introducer1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',55).
% agent Introducee1
 %  t(agent,introducee1).
agent(introducee1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',57).
% agent Introduced1
 %  t(agent,introduced1).
agent(introduced1).
%; initial state
% [agent,physobj]
 % !HoldsAt(SittingOn(agent,physobj),0).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',59).

 /*  axiom(initially(neg(sittingOn(Agent, Physobj))),
       []).
 */
 %  initially(neg(sittingOn(_,Sittingon))).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',59).
initially(not(sittingOn(_,Sittingon))).
 %  initial_state([not(sittingOn(_,Sittingon))]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',61).
% [agent,physobj]
 % !HoldsAt(LyingOn(agent,physobj),0).

 /*  axiom(initially(neg(lyingOn(Agent, Physobj))),
       []).
 */
 %  initially(neg(lyingOn(_,Lyingon))).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',61).
initially(not(lyingOn(_,Lyingon))).
 %  initial_state([not(lyingOn(_,Lyingon))]).


% [agent]
 % HoldsAt(Dressed(agent),0).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',61).

 /*  axiom(initially(dressed(Agent)),
       []).
 */
initially(dressed(Dressed)).
 %  initial_state([dressed(Dressed)]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',63).
% [agent]
 % HoldsAt(Awake(agent),0).

 /*  axiom(initially(awake(Agent)),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',63).
initially(awake(Awake)).
 %  initial_state([awake(Awake)]).


% [agent]
 % HoldsAt(Sleep3(agent),0).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',63).

 /*  axiom(initially(sleep3(Agent)),
       []).
 */
initially(sleep3(Sleep3)).
 %  initial_state([sleep3(Sleep3)]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',65).
% [agent]
 % HoldsAt(Standing(agent),0).

 /*  axiom(initially(standing(Agent)),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',65).
initially(standing(Standing)).
 %  initial_state([standing(Standing)]).


% HoldsAt(AcquaintanceOf(Introducer1,Introducee1),0).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',65).

 /*  axiom(initially(acquaintanceOf(introducer1, introducee1)),
       []).
 */
initially(acquaintanceOf(introducer1,introducee1)).
 %  initial_state([acquaintanceOf(introducer1,introducee1)]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',67).
% HoldsAt(AcquaintanceOf(Introducer1,Introduced1),0).

 /*  axiom(initially(acquaintanceOf(introducer1, introduced1)),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',67).
initially(acquaintanceOf(introducer1,introduced1)).
 %  initial_state([acquaintanceOf(introducer1,introduced1)]).


% !HoldsAt(AcquaintanceOf(Introducee1,Introduced1),0).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',67).

 /*  axiom(initially(neg(acquaintanceOf(introducee1, introduced1))),
       []).
 */
 %  initially(neg(acquaintanceOf(introducee1,introduced1))).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',67).
initially(not(acquaintanceOf(introducee1,introduced1))).
 %  initial_state([not(acquaintanceOf(introducee1,introduced1))]).


%; narrative
%;Happens(IntroduceMutual(Introducer1,Introducee1,Introduced1),0).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',72).
% Happens(Introduce(Introducee1,Introduced1),0).

 /*  axiom(happens(introduce(introducee1, introduced1), start),
       []).
 */
 %  happens(introduce(introducee1,introduced1),start).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',72).
observe(at(introduce(introducee1,introduced1),start)).


%;Happens(Introduce(Introduced1,Introducee1),0).
%;Happens(Smile(Introducer1),1).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',75).
% Happens(Smile(Introducee1),1).

 /*  axiom(happens(smile(introducee1), When),
       [b(start, When)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',75).

 /*  b(start, When1) ->
       happens(smile(introducee1), When1).
 */
then(if(b(start,When1)),happens(smile(introducee1),When1)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',75).

 /*  reactive_rule([b(start,When1)],
   	      [happens(smile(introducee1),When1)]).
 */


% Happens(Smile(Introduced1),2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',75).

 /*  axiom(happens(smile(introduced1), Start_Num2),
       [b(start, Start_Num2), toffset(start, 2, Start_Num2)]).
 */

 /*  (   b(start, When),
       toffset(start, 2, When)
   ->  happens(smile(introduced1), When)
   ).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',75).
then(if((b(start, When), toffset(start, 2, When))), happens(smile(introduced1), When)).

 /*  reactive_rule([b(start,When),toffset(start,2,When)],
   	      [happens(smile(introduced1),When)]).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',77).
% Happens(SayPleasedToMeet(Introducee1,Introduced1),3).

 /*  axiom(happens(sayPleasedToMeet(introducee1, introduced1), Start_Num3),
       [b(start, Start_Num3), toffset(start, 3, Start_Num3)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',77).

 /*  (   b(start, When),
       toffset(start, 3, When)
   ->  happens(sayPleasedToMeet(introducee1, introduced1), When)
   ).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',77).
then(if((b(start, When), toffset(start, 3, When))), happens(sayPleasedToMeet(introducee1, introduced1), When)).

 /*  reactive_rule([b(start,When),toffset(start,3,When)],
   	      [ happens(sayPleasedToMeet(introducee1,introduced1),
   			When)
   	      ]).
 */


% Happens(SayPleasedToMeet(Introduced1,Introducee1),4).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',77).

 /*  axiom(happens(sayPleasedToMeet(introduced1, introducee1), Start_Num4),
       [b(start, Start_Num4), toffset(start, 4, Start_Num4)]).
 */

 /*  (   b(start, When),
       toffset(start, 4, When)
   ->  happens(sayPleasedToMeet(introduced1, introducee1), When)
   ).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',77).
then(if((b(start, When), toffset(start, 4, When))), happens(sayPleasedToMeet(introduced1, introducee1), When)).

 /*  reactive_rule([b(start,When),toffset(start,4,When)],
   	      [ happens(sayPleasedToMeet(introduced1,introducee1),
   			When)
   	      ]).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',79).
% Happens(ShakeHands(Introducee1,Introduced1),5).

 /*  axiom(happens(shakeHands(introducee1, introduced1), Start_Num5),
       [b(start, Start_Num5), toffset(start, 5, Start_Num5)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',79).

 /*  (   b(start, When),
       toffset(start, 5, When)
   ->  happens(shakeHands(introducee1, introduced1), When)
   ).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',79).
then(if((b(start, When), toffset(start, 5, When))), happens(shakeHands(introducee1, introduced1), When)).

 /*  reactive_rule([b(start,When),toffset(start,5,When)],
   	      [happens(shakeHands(introducee1,introduced1),When)]).
 */

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',81).
% range time 0 6
range(time,0,6).

% range offset 0 0
range(offset,0,0).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',83).
% range diameter 0 0
range(diameter,0,0).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',85).
% completion Happens
completion(happens).
%; End of file.
% translate: ending  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e.lps 
