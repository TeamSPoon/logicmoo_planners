:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Kidnapping.e',127).
% translate: unskipped  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e.lps 
:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(lps).
% translate: begining  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e.lps 
% Thu, 08 Oct 2020 19:06:14 GMT File: <stream>(0x5600a39b0c00)%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{Mueller:2004c,
%;   author = "Erik T. Mueller",
%;   year = "2004",
%;   title = "Understanding script-based stories using commonsense reasoning",
%;   journal = "Cognitive Systems Research",
%;   volume = "5",
%;   number = "4",
%;   pages = "307--340",
%; }
%;

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',22).
% option modeldiff on
:- if(is_e_toplevel).
:- set_ec_option(modeldiff, on).
:- endif.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',24).
% ignore LookOutOnto, Floor, BuildingOf, SkyOf, GroundOf
 %  pl=axiom(ignore(lookOutOnto),[]).
ignore(lookOutOnto).
 %  ignore(lookOutOnto).
 %  pl=axiom(ignore(floor),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',24).
ignore(floor).
 %  ignore(floor).
 %  pl=axiom(ignore(buildingOf),[]).
ignore(buildingOf).
 %  ignore(buildingOf).
 %  pl=axiom(ignore(skyOf),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',24).
ignore(skyOf).
 %  ignore(skyOf).
 %  pl=axiom(ignore(groundOf),[]).
ignore(groundOf).
 %  ignore(groundOf).

% ignore Near, WalkFrom, WalkFromTo, RunFromTo
 %  pl=axiom(ignore(near),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',24).
ignore(near).
 %  ignore(near).
 %  pl=axiom(ignore(walkFrom),[]).
ignore(walkFrom).
 %  ignore(walkFrom).
 %  pl=axiom(ignore(walkFromTo),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',24).
ignore(walkFromTo).
 %  ignore(walkFromTo).
 %  pl=axiom(ignore(runFromTo),[]).
ignore(runFromTo).
 %  ignore(runFromTo).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',26).
% ignore Side1, Side2
 %  pl=axiom(ignore(side1),[]).
ignore(side1).
 %  ignore(side1).
 %  pl=axiom(ignore(side2),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',26).
ignore(side2).
 %  ignore(side2).

% ignore FriendOf, NeutralOf, EnemyOf,
 %  pl=axiom(ignore(friendOf),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',26).
ignore(friendOf).
 %  ignore(friendOf).
 %  pl=axiom(ignore(neutralOf),[]).
ignore(neutralOf).
 %  ignore(neutralOf).
 %  pl=axiom(ignore(enemyOf),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',26).
ignore(enemyOf).
 %  ignore(enemyOf).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',28).
% ignore BecomeFriends, BecomeNeutral, BecomeEnemies
 %  pl=axiom(ignore(becomeFriends),[]).
ignore(becomeFriends).
 %  ignore(becomeFriends).
 %  pl=axiom(ignore(becomeNeutral),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',28).
ignore(becomeNeutral).
 %  ignore(becomeNeutral).
 %  pl=axiom(ignore(becomeEnemies),[]).
ignore(becomeEnemies).
 %  ignore(becomeEnemies).

% ignore Happy, Calm, Unhappy
 %  pl=axiom(ignore(happy),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',28).
ignore(happy).
 %  ignore(happy).
 %  pl=axiom(ignore(calm),[]).
ignore(calm).
 %  ignore(calm).
 %  pl=axiom(ignore(unhappy),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',28).
ignore(unhappy).
 %  ignore(unhappy).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',30).
% ignore BecomeHappy, BecomeCalm, BecomeUnhappy
 %  pl=axiom(ignore(becomeHappy),[]).
ignore(becomeHappy).
 %  ignore(becomeHappy).
 %  pl=axiom(ignore(becomeCalm),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',30).
ignore(becomeCalm).
 %  ignore(becomeCalm).
 %  pl=axiom(ignore(becomeUnhappy),[]).
ignore(becomeUnhappy).
 %  ignore(becomeUnhappy).

% ignore AngryAt, BecomeAngryAt
 %  pl=axiom(ignore(angryAt),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',30).
ignore(angryAt).
 %  ignore(angryAt).
 %  pl=axiom(ignore(becomeAngryAt),[]).
ignore(becomeAngryAt).
 %  ignore(becomeAngryAt).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',32).
% ignore Like, Love, Dislike, LikeSnow
 %  pl=axiom(ignore(like),[]).
ignore(like).
 %  ignore(like).
 %  pl=axiom(ignore(love),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',32).
ignore(love).
 %  ignore(love).
 %  pl=axiom(ignore(dislike),[]).
ignore(dislike).
 %  ignore(dislike).
 %  pl=axiom(ignore(likeSnow),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',32).
ignore(likeSnow).
 %  ignore(likeSnow).

% ignore HandTo
 %  pl=axiom(ignore(handTo),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',32).
ignore(handTo).
 %  ignore(handTo).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',34).
% ignore InviteIn, InvitedIn, IntendToWalkIn, IntentionToWalkIn
 %  pl=axiom(ignore(inviteIn),[]).
ignore(inviteIn).
 %  ignore(inviteIn).
 %  pl=axiom(ignore(invitedIn),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',34).
ignore(invitedIn).
 %  ignore(invitedIn).
 %  pl=axiom(ignore(intendToWalkIn),[]).
ignore(intendToWalkIn).
 %  ignore(intendToWalkIn).
 %  pl=axiom(ignore(intentionToWalkIn),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',34).
ignore(intentionToWalkIn).
 %  ignore(intentionToWalkIn).

% ignore ActOnIntentionToWalkIn, Greet, SayGoodbye, CryForJoy
 %  pl=axiom(ignore(actOnIntentionToWalkIn),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',34).
ignore(actOnIntentionToWalkIn).
 %  ignore(actOnIntentionToWalkIn).
 %  pl=axiom(ignore(greet),[]).
ignore(greet).
 %  ignore(greet).
 %  pl=axiom(ignore(sayGoodbye),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',34).
ignore(sayGoodbye).
 %  ignore(sayGoodbye).
 %  pl=axiom(ignore(cryForJoy),[]).
ignore(cryForJoy).
 %  ignore(cryForJoy).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',36).
% ignore Threaten, ReleaseFromThreat, ThreatenedBy
 %  pl=axiom(ignore(threaten),[]).
ignore(threaten).
 %  ignore(threaten).
 %  pl=axiom(ignore(releaseFromThreat),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',36).
ignore(releaseFromThreat).
 %  ignore(releaseFromThreat).
 %  pl=axiom(ignore(threatenedBy),[]).
ignore(threatenedBy).
 %  ignore(threatenedBy).

% ignore Order, KnowOrder, Request, KnowRequest
 %  pl=axiom(ignore(order),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',36).
ignore(order).
 %  ignore(order).
 %  pl=axiom(ignore(knowOrder),[]).
ignore(knowOrder).
 %  ignore(knowOrder).
 %  pl=axiom(ignore(request),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',36).
ignore(request).
 %  ignore(request).
 %  pl=axiom(ignore(knowRequest),[]).
ignore(knowRequest).
 %  ignore(knowRequest).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',39).
% load foundations/Root.e
:- if(is_e_toplevel).
:- load_e_cond('foundations/Root.e', changed).
 %  load('/pack/logicmoo_ec/ext/ec_sources/foundations/Root.e',changed).
:- endif.

% load foundations/EC.e
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',39).
:- if(is_e_toplevel).
:- load_e_cond('foundations/EC.e', changed).
 %  load('/pack/logicmoo_ec/ext/ec_sources/foundations/EC.e',changed).
:- endif.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',41).
% load answers/Mueller2003/Ontology.e
:- if(is_e_toplevel).
:- load_e_cond('answers/Mueller2003/Ontology.e', changed).
 %  load('/pack/logicmoo_ec/ext/ec_sources/ecnet/Ontology.e',changed).
:- endif.

% load answers/Mueller2003/Feeling.e
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',41).
:- if(is_e_toplevel).
:- load_e_cond('answers/Mueller2003/Feeling.e', changed).
 %  load('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',changed).
:- endif.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',43).
% load answers/Mueller2004c/HandTo.e
:- if(is_e_toplevel).
:- load_e_cond('answers/Mueller2004c/HandTo.e', changed).
 %  load('/pack/logicmoo_ec/ext/ec_sources/ecnet/HandTo.e',changed).
:- endif.

% load answers/Mueller2004c/RTSpaceM.e
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',43).
:- if(is_e_toplevel).
:- load_e_cond('answers/Mueller2004c/RTSpaceM.e', changed).
 %  load('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',changed).
:- endif.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',45).
% load answers/Mueller2003/Sleep.e
:- if(is_e_toplevel).
:- load_e_cond('answers/Mueller2003/Sleep.e', changed).
 %  load('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',changed).
:- endif.

% load answers/Mueller2003/SpeechAct.e
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',45).
:- if(is_e_toplevel).
:- load_e_cond('answers/Mueller2003/SpeechAct.e', changed).
 %  load('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',changed).
:- endif.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',47).
% load answers/Mueller2004c/IPRel.e
:- if(is_e_toplevel).
:- load_e_cond('answers/Mueller2004c/IPRel.e', changed).
 %  load('/pack/logicmoo_ec/ext/ec_sources/ecnet/IPRel.e',changed).
:- endif.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',49).
% location Location1
 %  t(location,location1).
location(location1).
 %  location(location1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',51).
% portal DummyPortal1
 %  t(portal,dummyPortal1).
portal(dummyPortal1).
 %  portal(dummyPortal1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',53).
% agent Introducer1
 %  t(agent,introducer1).
agent(introducer1).
 %  agent(introducer1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',55).
% agent Introducee1
 %  t(agent,introducee1).
agent(introducee1).
 %  agent(introducee1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',57).
% agent Introduced1
 %  t(agent,introduced1).
agent(introduced1).
 %  agent(introduced1).
%; initial state
% [agent,physobj]
 % !HoldsAt(SittingOn(agent,physobj),0).
 %  pl=axiom(initially(neg(sittingOn(Agent,Physobj))),[]).
 %  initially(neg(sittingOn(Agent,Physobj))).
initially not sittingOn(Agent, Physobj).
 %  initial_state([not(sittingOn(Agent,Physobj))]).
 %  initial_state([not(sittingOn(Agent,Physobj))]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',61).
% [agent,physobj]
 % !HoldsAt(LyingOn(agent,physobj),0).
 %  pl=axiom(initially(neg(lyingOn(Agent,Physobj))),[]).
 %  initially(neg(lyingOn(Agent,Physobj))).
initially not lyingOn(Agent, Physobj).
 %  initial_state([not(lyingOn(Agent,Physobj))]).
 %  initial_state([not(lyingOn(Agent,Physobj))]).


% [agent]
 % HoldsAt(Dressed(agent),0).
 %  pl=axiom(initially(dressed(Agent)),[]).
initially dressed(Agent).
 %  initial_state([dressed(Agent)]).
 %  initial_state([dressed(Agent)]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',63).
% [agent]
 % HoldsAt(Awake(agent),0).
 %  pl=axiom(initially(awake(Agent)),[]).
initially awake(Agent).
 %  initial_state([awake(Agent)]).
 %  initial_state([awake(Agent)]).


% [agent]
 % HoldsAt(Sleep3(agent),0).
 %  pl=axiom(initially(sleep3(Agent)),[]).
initially sleep3(Agent).
 %  initial_state([sleep3(Agent)]).
 %  initial_state([sleep3(Agent)]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',65).
% [agent]
 % HoldsAt(Standing(agent),0).
 %  pl=axiom(initially(standing(Agent)),[]).
initially standing(Agent).
 %  initial_state([standing(Agent)]).
 %  initial_state([standing(Agent)]).


% HoldsAt(AcquaintanceOf(Introducer1,Introducee1),0).
 %  pl=axiom(initially(acquaintanceOf(introducer1,introducee1)),[]).
initially acquaintanceOf(introducer1, introducee1).
 %  initial_state([acquaintanceOf(introducer1,introducee1)]).
 %  initial_state([acquaintanceOf(introducer1,introducee1)]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',67).
% HoldsAt(AcquaintanceOf(Introducer1,Introduced1),0).
 %  pl=axiom(initially(acquaintanceOf(introducer1,introduced1)),[]).
initially acquaintanceOf(introducer1, introduced1).
 %  initial_state([acquaintanceOf(introducer1,introduced1)]).
 %  initial_state([acquaintanceOf(introducer1,introduced1)]).


% !HoldsAt(AcquaintanceOf(Introducee1,Introduced1),0).
 %  pl=axiom(initially(neg(acquaintanceOf(introducee1,introduced1))),[]).
 %  initially(neg(acquaintanceOf(introducee1,introduced1))).
initially not acquaintanceOf(introducee1, introduced1).
 %  initial_state([not(acquaintanceOf(introducee1,introduced1))]).
 %  initial_state([not(acquaintanceOf(introducee1,introduced1))]).


%; narrative
%;Happens(IntroduceMutual(Introducer1,Introducee1,Introduced1),0).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',72).
% Happens(Introduce(Introducee1,Introduced1),0).
 %  pl=axiom(happens(introduce(introducee1,introduced1),start),[]).
 %  happens(introduce(introducee1,introduced1),start).
observe(at(introduce(introducee1,introduced1),start)).
 %  observe(at(introduce(introducee1,introduced1),start)).


%;Happens(Introduce(Introduced1,Introducee1),0).
%;Happens(Smile(Introducer1),1).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',75).
% Happens(Smile(Introducee1),1).
 %  pl=axiom(happens(smile(introducee1),When),[b(start,When)]).

 /*  b(start, When) ->
       happens(smile(introducee1), When).
 */
if b(start, When)then happens(smile(introducee1), When).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',75).

 /*  reactive_rule([b(start,When)],
   	      [happens(smile(introducee1),When)]).
 */

 /*  reactive_rule([b(start,When)],
   	      [happens(smile(introducee1),When)]).
 */


% Happens(Smile(Introduced1),2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',75).

 /*  pl=axiom(happens(smile(introduced1),Start_Num2),
         [b(start,Start_Num2),toffset(start,2,Start_Num2)]).
 */

 /*  (   b(start, Start_Num2),
       toffset(start, 2, Start_Num2)
   ->  happens(smile(introduced1), Start_Num2)
   ).
 */
if b(start, Start_Num2), toffset(start, 2, Start_Num2)then happens(smile(introduced1), Start_Num2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',75).

 /*  reactive_rule([ b(start,Start_Num2),
   		toffset(start,2,Start_Num2)
   	      ],
   	      [happens(smile(introduced1),Start_Num2)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',75).

 /*  reactive_rule([ b(start,Start_Num2),
   		toffset(start,2,Start_Num2)
   	      ],
   	      [happens(smile(introduced1),Start_Num2)]).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',77).
% Happens(SayPleasedToMeet(Introducee1,Introduced1),3).

 /*  pl=axiom(happens(sayPleasedToMeet(introducee1,introduced1),
   	      Start_Num3),
         [b(start,Start_Num3),toffset(start,3,Start_Num3)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',77).

 /*  (   b(start, Start_Num3),
       toffset(start, 3, Start_Num3)
   ->  happens(sayPleasedToMeet(introducee1, introduced1), Start_Num3)
   ).
 */
if b(start, Start_Num3), toffset(start, 3, Start_Num3)then happens(sayPleasedToMeet(introducee1, introduced1), Start_Num3).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',77).

 /*  reactive_rule([ b(start,Start_Num3),
   		toffset(start,3,Start_Num3)
   	      ],
   	      [ happens(sayPleasedToMeet(introducee1,introduced1),
   			Start_Num3)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',77).

 /*  reactive_rule([ b(start,Start_Num3),
   		toffset(start,3,Start_Num3)
   	      ],
   	      [ happens(sayPleasedToMeet(introducee1,introduced1),
   			Start_Num3)
   	      ]).
 */


% Happens(SayPleasedToMeet(Introduced1,Introducee1),4).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',77).

 /*  pl=axiom(happens(sayPleasedToMeet(introduced1,introducee1),
   	      Start_Num4),
         [b(start,Start_Num4),toffset(start,4,Start_Num4)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',77).

 /*  (   b(start, Start_Num4),
       toffset(start, 4, Start_Num4)
   ->  happens(sayPleasedToMeet(introduced1, introducee1), Start_Num4)
   ).
 */
if b(start, Start_Num4), toffset(start, 4, Start_Num4)then happens(sayPleasedToMeet(introduced1, introducee1), Start_Num4).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',77).

 /*  reactive_rule([ b(start,Start_Num4),
   		toffset(start,4,Start_Num4)
   	      ],
   	      [ happens(sayPleasedToMeet(introduced1,introducee1),
   			Start_Num4)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',77).

 /*  reactive_rule([ b(start,Start_Num4),
   		toffset(start,4,Start_Num4)
   	      ],
   	      [ happens(sayPleasedToMeet(introduced1,introducee1),
   			Start_Num4)
   	      ]).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',79).
% Happens(ShakeHands(Introducee1,Introduced1),5).

 /*  pl=axiom(happens(shakeHands(introducee1,introduced1),Start_Num5),
         [b(start,Start_Num5),toffset(start,5,Start_Num5)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',79).

 /*  (   b(start, Start_Num5),
       toffset(start, 5, Start_Num5)
   ->  happens(shakeHands(introducee1, introduced1), Start_Num5)
   ).
 */
if b(start, Start_Num5), toffset(start, 5, Start_Num5)then happens(shakeHands(introducee1, introduced1), Start_Num5).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',79).

 /*  reactive_rule([ b(start,Start_Num5),
   		toffset(start,5,Start_Num5)
   	      ],
   	      [ happens(shakeHands(introducee1,introduced1),
   			Start_Num5)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',79).

 /*  reactive_rule([ b(start,Start_Num5),
   		toffset(start,5,Start_Num5)
   	      ],
   	      [ happens(shakeHands(introducee1,introduced1),
   			Start_Num5)
   	      ]).
 */

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',81).
% range time 0 6
range(time,0,6).
 %  range(time,0,6).

% range offset 0 0
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',81).
range(offset,0,0).
 %  range(offset,0,0).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',83).
% range diameter 0 0
range(diameter,0,0).
 %  range(diameter,0,0).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e',85).
% completion Happens
completion(happens).
 %  completion(happens).
%; End of file.
% translate: ending  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/MakingAnAcquaintance.e.lps 
