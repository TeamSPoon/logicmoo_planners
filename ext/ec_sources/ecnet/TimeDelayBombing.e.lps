:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',115).
% translate: unskipped  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/TimeDelayBombing.e.lps 
:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(lps).
% translate: begining  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/TimeDelayBombing.e.lps 
% Thu, 08 Oct 2020 19:07:11 GMT File: <stream>(0x5600a3b2bc00)%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; DEV-MUC3-0008
%; TimeDelayBombing
%;
%; @article{Mueller:2004c,
%;   author = "Erik T. Mueller",
%;   year = "2004",
%;   title = "Understanding script-based stories using commonsense reasoning",
%;   journal = "Cognitive Systems Research",
%;   volume = "5",
%;   number = "4",
%;   pages = "307--340",
%; }
%;

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TimeDelayBombing.e',25).
% ignore SkyOf, GroundOf, Near, Inside, WalkFromTo, RunFromTo
 %  pl=axiom(ignore(skyOf),[]).
ignore(skyOf).
 %  ignore(skyOf).
 %  pl=axiom(ignore(groundOf),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TimeDelayBombing.e',25).
ignore(groundOf).
 %  ignore(groundOf).
 %  pl=axiom(ignore(near),[]).
ignore(near).
 %  ignore(near).
 %  pl=axiom(ignore(inside),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TimeDelayBombing.e',25).
ignore(inside).
 %  ignore(inside).
 %  pl=axiom(ignore(walkFromTo),[]).
ignore(walkFromTo).
 %  ignore(walkFromTo).
 %  pl=axiom(ignore(runFromTo),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TimeDelayBombing.e',25).
ignore(runFromTo).
 %  ignore(runFromTo).

% ignore RollAlong, Diameter, Move, HoldSome, PutInside
 %  pl=axiom(ignore(rollAlong),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TimeDelayBombing.e',25).
ignore(rollAlong).
 %  ignore(rollAlong).
 %  pl=axiom(ignore(diameter),[]).
ignore(diameter).
 %  ignore(diameter).
 %  pl=axiom(ignore(move),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TimeDelayBombing.e',25).
ignore(move).
 %  ignore(move).
 %  pl=axiom(ignore(holdSome),[]).
ignore(holdSome).
 %  ignore(holdSome).
 %  pl=axiom(ignore(putInside),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TimeDelayBombing.e',25).
ignore(putInside).
 %  ignore(putInside).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TimeDelayBombing.e',27).
% ignore TakeOutOf, On, DoorUnlock, DoorLock, WalkThroughDoor12
 %  pl=axiom(ignore(takeOutOf),[]).
ignore(takeOutOf).
 %  ignore(takeOutOf).
 %  pl=axiom(ignore(on),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TimeDelayBombing.e',27).
ignore(on).
 %  ignore(on).
 %  pl=axiom(ignore(doorUnlock),[]).
ignore(doorUnlock).
 %  ignore(doorUnlock).
 %  pl=axiom(ignore(doorLock),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TimeDelayBombing.e',27).
ignore(doorLock).
 %  ignore(doorLock).
 %  pl=axiom(ignore(walkThroughDoor12),[]).
ignore(walkThroughDoor12).
 %  ignore(walkThroughDoor12).

% ignore WalkThroughDoor21, WalkDownStaircase, WalkUpStaircase
 %  pl=axiom(ignore(walkThroughDoor21),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TimeDelayBombing.e',27).
ignore(walkThroughDoor21).
 %  ignore(walkThroughDoor21).
 %  pl=axiom(ignore(walkDownStaircase),[]).
ignore(walkDownStaircase).
 %  ignore(walkDownStaircase).
 %  pl=axiom(ignore(walkUpStaircase),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TimeDelayBombing.e',27).
ignore(walkUpStaircase).
 %  ignore(walkUpStaircase).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TimeDelayBombing.e',30).
% ignore ThreatenedBy
 %  pl=axiom(ignore(threatenedBy),[]).
ignore(threatenedBy).
 %  ignore(threatenedBy).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TimeDelayBombing.e',32).
% load foundations/Root.e
:- if(is_e_toplevel).
:- load_e_cond('foundations/Root.e', changed).
 %  load('/pack/logicmoo_ec/ext/ec_sources/foundations/Root.e',changed).
:- endif.

% load foundations/EC.e
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TimeDelayBombing.e',32).
:- if(is_e_toplevel).
:- load_e_cond('foundations/EC.e', changed).
 %  load('/pack/logicmoo_ec/ext/ec_sources/foundations/EC.e',changed).
:- endif.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TimeDelayBombing.e',34).
% load answers/Mueller2003/Ontology.e
:- if(is_e_toplevel).
:- load_e_cond('answers/Mueller2003/Ontology.e', changed).
 %  load('/pack/logicmoo_ec/ext/ec_sources/ecnet/Ontology.e',changed).
:- endif.

% load answers/Mueller2004c/OTSpaceM.e
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TimeDelayBombing.e',34).
:- if(is_e_toplevel).
:- load_e_cond('answers/Mueller2004c/OTSpaceM.e', changed).
 %  load('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',changed).
:- endif.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TimeDelayBombing.e',36).
% load answers/Mueller2004c/RTSpaceM.e
:- if(is_e_toplevel).
:- load_e_cond('answers/Mueller2004c/RTSpaceM.e', changed).
 %  load('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',changed).
:- endif.

% load answers/Mueller2004c/Condition.e
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TimeDelayBombing.e',36).
:- if(is_e_toplevel).
:- load_e_cond('answers/Mueller2004c/Condition.e', changed).
 %  load('/pack/logicmoo_ec/ext/ec_sources/ecnet/Condition.e',changed).
:- endif.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TimeDelayBombing.e',38).
% load answers/Mueller2003/Sleep.e
:- if(is_e_toplevel).
:- load_e_cond('answers/Mueller2003/Sleep.e', changed).
 %  load('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',changed).
:- endif.

% load answers/Mueller2004c/Bomb.e
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TimeDelayBombing.e',38).
:- if(is_e_toplevel).
:- load_e_cond('answers/Mueller2004c/Bomb.e', changed).
 %  load('/pack/logicmoo_ec/ext/ec_sources/ecnet/Bomb.e',changed).
:- endif.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TimeDelayBombing.e',41).
% bomb Bomb1
 %  t(bomb,bomb1).
bomb(bomb1).
 %  bomb(bomb1).


% BombTimeDelay(Bomb1)=3.
 %  pl=axiom(bombTimeDelayPred(bomb1,3),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TimeDelayBombing.e',41).
bombTimeDelayPred(bomb1,3).
 %  bombTimeDelayPred(bomb1,3).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TimeDelayBombing.e',43).
% [time]
 % !HoldsAt(DestroyedDeterminingFluent(Bomb1),time).

 /*  fix_axiom_head(Time) ->
       [ holds_at(neg(destroyedDeterminingFluent(bomb1)), Time),
          (->),
         not(destroyedDeterminingFluent(bomb1))
       ].
 */
 %  pl=axiom(not(destroyedDeterminingFluent(bomb1)),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TimeDelayBombing.e',43).
not(destroyedDeterminingFluent(bomb1)).
 %  not(destroyedDeterminingFluent(bomb1)).


% [time]
 % !HoldsAt(DamagedDeterminingFluent(Bomb1),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TimeDelayBombing.e',43).

 /*  fix_axiom_head(Time) ->
       [ holds_at(neg(damagedDeterminingFluent(bomb1)), Time),
          (->),
         not(damagedDeterminingFluent(bomb1))
       ].
 */
 %  pl=axiom(not(damagedDeterminingFluent(bomb1)),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TimeDelayBombing.e',43).
not(damagedDeterminingFluent(bomb1)).
 %  not(damagedDeterminingFluent(bomb1)).

% agent Perp1
 %  t(agent,perp1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TimeDelayBombing.e',45).
agent(perp1).
 %  agent(perp1).


% [time]
 % !HoldsAt(InjuredDeterminingFluent(Perp1),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TimeDelayBombing.e',47).

 /*  fix_axiom_head(Time) ->
       [ holds_at(neg(injuredDeterminingFluent(perp1)), Time),
          (->),
         not(injuredDeterminingFluent(perp1))
       ].
 */
 %  pl=axiom(not(injuredDeterminingFluent(perp1)),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TimeDelayBombing.e',47).
not(injuredDeterminingFluent(perp1)).
 %  not(injuredDeterminingFluent(perp1)).


% [time]
 % !HoldsAt(KilledDeterminingFluent(Perp1),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TimeDelayBombing.e',47).

 /*  fix_axiom_head(Time) ->
       [ holds_at(neg(killedDeterminingFluent(perp1)), Time),
          (->),
         not(killedDeterminingFluent(perp1))
       ].
 */
 %  pl=axiom(not(killedDeterminingFluent(perp1)),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TimeDelayBombing.e',47).
not(killedDeterminingFluent(perp1)).
 %  not(killedDeterminingFluent(perp1)).

% agent HumanTarget1
 %  t(agent,humanTarget1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TimeDelayBombing.e',49).
agent(humanTarget1).
 %  agent(humanTarget1).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TimeDelayBombing.e',51).
% HoldsAt(Alive(HumanTarget1),0).
 %  pl=axiom(initially(alive(humanTarget1)),[]).
initially alive(humanTarget1).
 %  initial_state([alive(humanTarget1)]).
 %  initial_state([alive(humanTarget1)]).


% HoldsAt(Awake(HumanTarget1),0).
 %  pl=axiom(initially(awake(humanTarget1)),[]).
initially awake(humanTarget1).
 %  initial_state([awake(humanTarget1)]).
 %  initial_state([awake(humanTarget1)]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TimeDelayBombing.e',53).
% HoldsAt(Standing(HumanTarget1),0).
 %  pl=axiom(initially(standing(humanTarget1)),[]).
initially standing(humanTarget1).
 %  initial_state([standing(humanTarget1)]).
 %  initial_state([standing(humanTarget1)]).


% HoldsAt(Sleep2(HumanTarget1),0).
 %  pl=axiom(initially(sleep2(humanTarget1)),[]).
initially sleep2(humanTarget1).
 %  initial_state([sleep2(humanTarget1)]).
 %  initial_state([sleep2(humanTarget1)]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TimeDelayBombing.e',55).
% !HoldsAt(Injured(HumanTarget1),0).
 %  pl=axiom(initially(neg(injured(humanTarget1))),[]).
 %  initially(neg(injured(humanTarget1))).
initially not injured(humanTarget1).
 %  initial_state([not(injured(humanTarget1))]).
 %  initial_state([not(injured(humanTarget1))]).


% [object]
 % !HoldsAt(Holding(HumanTarget1,object),0).
 %  pl=axiom(initially(neg(holding(humanTarget1,Object))),[]).
 %  initially(neg(holding(humanTarget1,Object))).
initially not holding(humanTarget1, Object).
 %  initial_state([not(holding(humanTarget1,Object))]).
 %  initial_state([not(holding(humanTarget1,Object))]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TimeDelayBombing.e',57).
% HoldsAt(At(HumanTarget1,Outside1),0).
 %  pl=axiom(initially(at(humanTarget1,outside1)),[]).
 %  initially(at(humanTarget1,outside1)).
initially loc_at(humanTarget1, outside1).
 %  initial_state([loc_at(humanTarget1,outside1)]).
 %  initial_state([loc_at(humanTarget1,outside1)]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TimeDelayBombing.e',59).
% [time]
 % HoldsAt(KilledDeterminingFluent(HumanTarget1),time).

 /*  fix_axiom_head(Time) ->
       [ holds_at(killedDeterminingFluent(humanTarget1), Time),
          (->),
         killedDeterminingFluent(humanTarget1)
       ].
 */
 %  pl=axiom(killedDeterminingFluent(humanTarget1),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TimeDelayBombing.e',59).
killedDeterminingFluent(humanTarget1).
 %  killedDeterminingFluent(humanTarget1).


% [time]
 % !HoldsAt(InjuredDeterminingFluent(HumanTarget1),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TimeDelayBombing.e',59).

 /*  fix_axiom_head(Time) ->
       [ holds_at(neg(injuredDeterminingFluent(humanTarget1)), Time),
          (->),
         not(injuredDeterminingFluent(humanTarget1))
       ].
 */
 %  pl=axiom(not(injuredDeterminingFluent(humanTarget1)),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TimeDelayBombing.e',59).
not(injuredDeterminingFluent(humanTarget1)).
 %  not(injuredDeterminingFluent(humanTarget1)).

% agent HumanTarget2
 %  t(agent,humanTarget2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TimeDelayBombing.e',61).
agent(humanTarget2).
 %  agent(humanTarget2).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TimeDelayBombing.e',63).
% HoldsAt(Alive(HumanTarget2),0).
 %  pl=axiom(initially(alive(humanTarget2)),[]).
initially alive(humanTarget2).
 %  initial_state([alive(humanTarget2)]).
 %  initial_state([alive(humanTarget2)]).


% HoldsAt(Awake(HumanTarget2),0).
 %  pl=axiom(initially(awake(humanTarget2)),[]).
initially awake(humanTarget2).
 %  initial_state([awake(humanTarget2)]).
 %  initial_state([awake(humanTarget2)]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TimeDelayBombing.e',65).
% HoldsAt(Standing(HumanTarget2),0).
 %  pl=axiom(initially(standing(humanTarget2)),[]).
initially standing(humanTarget2).
 %  initial_state([standing(humanTarget2)]).
 %  initial_state([standing(humanTarget2)]).


% HoldsAt(Sleep2(HumanTarget2),0).
 %  pl=axiom(initially(sleep2(humanTarget2)),[]).
initially sleep2(humanTarget2).
 %  initial_state([sleep2(humanTarget2)]).
 %  initial_state([sleep2(humanTarget2)]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TimeDelayBombing.e',67).
% !HoldsAt(Injured(HumanTarget2),0).
 %  pl=axiom(initially(neg(injured(humanTarget2))),[]).
 %  initially(neg(injured(humanTarget2))).
initially not injured(humanTarget2).
 %  initial_state([not(injured(humanTarget2))]).
 %  initial_state([not(injured(humanTarget2))]).


% [object]
 % !HoldsAt(Holding(HumanTarget2,object),0).
 %  pl=axiom(initially(neg(holding(humanTarget2,Object))),[]).
 %  initially(neg(holding(humanTarget2,Object))).
initially not holding(humanTarget2, Object).
 %  initial_state([not(holding(humanTarget2,Object))]).
 %  initial_state([not(holding(humanTarget2,Object))]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TimeDelayBombing.e',69).
% HoldsAt(At(HumanTarget2,Outside1),0).
 %  pl=axiom(initially(at(humanTarget2,outside1)),[]).
 %  initially(at(humanTarget2,outside1)).
initially loc_at(humanTarget2, outside1).
 %  initial_state([loc_at(humanTarget2,outside1)]).
 %  initial_state([loc_at(humanTarget2,outside1)]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TimeDelayBombing.e',71).
% [time]
 % HoldsAt(KilledDeterminingFluent(HumanTarget2),time).

 /*  fix_axiom_head(Time) ->
       [ holds_at(killedDeterminingFluent(humanTarget2), Time),
          (->),
         killedDeterminingFluent(humanTarget2)
       ].
 */
 %  pl=axiom(killedDeterminingFluent(humanTarget2),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TimeDelayBombing.e',71).
killedDeterminingFluent(humanTarget2).
 %  killedDeterminingFluent(humanTarget2).


% [time]
 % !HoldsAt(InjuredDeterminingFluent(HumanTarget2),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TimeDelayBombing.e',71).

 /*  fix_axiom_head(Time) ->
       [ holds_at(neg(injuredDeterminingFluent(humanTarget2)), Time),
          (->),
         not(injuredDeterminingFluent(humanTarget2))
       ].
 */
 %  pl=axiom(not(injuredDeterminingFluent(humanTarget2)),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TimeDelayBombing.e',71).
not(injuredDeterminingFluent(humanTarget2)).
 %  not(injuredDeterminingFluent(humanTarget2)).

% agent HumanTarget3
 %  t(agent,humanTarget3).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TimeDelayBombing.e',73).
agent(humanTarget3).
 %  agent(humanTarget3).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TimeDelayBombing.e',75).
% HoldsAt(Alive(HumanTarget3),0).
 %  pl=axiom(initially(alive(humanTarget3)),[]).
initially alive(humanTarget3).
 %  initial_state([alive(humanTarget3)]).
 %  initial_state([alive(humanTarget3)]).


% HoldsAt(Awake(HumanTarget3),0).
 %  pl=axiom(initially(awake(humanTarget3)),[]).
initially awake(humanTarget3).
 %  initial_state([awake(humanTarget3)]).
 %  initial_state([awake(humanTarget3)]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TimeDelayBombing.e',77).
% HoldsAt(Standing(HumanTarget3),0).
 %  pl=axiom(initially(standing(humanTarget3)),[]).
initially standing(humanTarget3).
 %  initial_state([standing(humanTarget3)]).
 %  initial_state([standing(humanTarget3)]).


% HoldsAt(Sleep2(HumanTarget3),0).
 %  pl=axiom(initially(sleep2(humanTarget3)),[]).
initially sleep2(humanTarget3).
 %  initial_state([sleep2(humanTarget3)]).
 %  initial_state([sleep2(humanTarget3)]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TimeDelayBombing.e',79).
% !HoldsAt(Injured(HumanTarget3),0).
 %  pl=axiom(initially(neg(injured(humanTarget3))),[]).
 %  initially(neg(injured(humanTarget3))).
initially not injured(humanTarget3).
 %  initial_state([not(injured(humanTarget3))]).
 %  initial_state([not(injured(humanTarget3))]).


% [object]
 % !HoldsAt(Holding(HumanTarget3,object),0).
 %  pl=axiom(initially(neg(holding(humanTarget3,Object))),[]).
 %  initially(neg(holding(humanTarget3,Object))).
initially not holding(humanTarget3, Object).
 %  initial_state([not(holding(humanTarget3,Object))]).
 %  initial_state([not(holding(humanTarget3,Object))]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TimeDelayBombing.e',81).
% HoldsAt(At(HumanTarget3,Outside1),0).
 %  pl=axiom(initially(at(humanTarget3,outside1)),[]).
 %  initially(at(humanTarget3,outside1)).
initially loc_at(humanTarget3, outside1).
 %  initial_state([loc_at(humanTarget3,outside1)]).
 %  initial_state([loc_at(humanTarget3,outside1)]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TimeDelayBombing.e',83).
% [time]
 % HoldsAt(KilledDeterminingFluent(HumanTarget3),time).

 /*  fix_axiom_head(Time) ->
       [ holds_at(killedDeterminingFluent(humanTarget3), Time),
          (->),
         killedDeterminingFluent(humanTarget3)
       ].
 */
 %  pl=axiom(killedDeterminingFluent(humanTarget3),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TimeDelayBombing.e',83).
killedDeterminingFluent(humanTarget3).
 %  killedDeterminingFluent(humanTarget3).


% [time]
 % !HoldsAt(InjuredDeterminingFluent(HumanTarget3),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TimeDelayBombing.e',83).

 /*  fix_axiom_head(Time) ->
       [ holds_at(neg(injuredDeterminingFluent(humanTarget3)), Time),
          (->),
         not(injuredDeterminingFluent(humanTarget3))
       ].
 */
 %  pl=axiom(not(injuredDeterminingFluent(humanTarget3)),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TimeDelayBombing.e',83).
not(injuredDeterminingFluent(humanTarget3)).
 %  not(injuredDeterminingFluent(humanTarget3)).

% agent HumanTarget4
 %  t(agent,humanTarget4).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TimeDelayBombing.e',85).
agent(humanTarget4).
 %  agent(humanTarget4).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TimeDelayBombing.e',87).
% HoldsAt(Alive(HumanTarget4),0).
 %  pl=axiom(initially(alive(humanTarget4)),[]).
initially alive(humanTarget4).
 %  initial_state([alive(humanTarget4)]).
 %  initial_state([alive(humanTarget4)]).


% HoldsAt(Awake(HumanTarget4),0).
 %  pl=axiom(initially(awake(humanTarget4)),[]).
initially awake(humanTarget4).
 %  initial_state([awake(humanTarget4)]).
 %  initial_state([awake(humanTarget4)]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TimeDelayBombing.e',89).
% HoldsAt(Standing(HumanTarget4),0).
 %  pl=axiom(initially(standing(humanTarget4)),[]).
initially standing(humanTarget4).
 %  initial_state([standing(humanTarget4)]).
 %  initial_state([standing(humanTarget4)]).


% HoldsAt(Sleep2(HumanTarget4),0).
 %  pl=axiom(initially(sleep2(humanTarget4)),[]).
initially sleep2(humanTarget4).
 %  initial_state([sleep2(humanTarget4)]).
 %  initial_state([sleep2(humanTarget4)]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TimeDelayBombing.e',91).
% !HoldsAt(Injured(HumanTarget4),0).
 %  pl=axiom(initially(neg(injured(humanTarget4))),[]).
 %  initially(neg(injured(humanTarget4))).
initially not injured(humanTarget4).
 %  initial_state([not(injured(humanTarget4))]).
 %  initial_state([not(injured(humanTarget4))]).


% [object]
 % !HoldsAt(Holding(HumanTarget4,object),0).
 %  pl=axiom(initially(neg(holding(humanTarget4,Object))),[]).
 %  initially(neg(holding(humanTarget4,Object))).
initially not holding(humanTarget4, Object).
 %  initial_state([not(holding(humanTarget4,Object))]).
 %  initial_state([not(holding(humanTarget4,Object))]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TimeDelayBombing.e',93).
% HoldsAt(At(HumanTarget4,Outside1),0).
 %  pl=axiom(initially(at(humanTarget4,outside1)),[]).
 %  initially(at(humanTarget4,outside1)).
initially loc_at(humanTarget4, outside1).
 %  initial_state([loc_at(humanTarget4,outside1)]).
 %  initial_state([loc_at(humanTarget4,outside1)]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TimeDelayBombing.e',95).
% [time]
 % HoldsAt(KilledDeterminingFluent(HumanTarget4),time).

 /*  fix_axiom_head(Time) ->
       [ holds_at(killedDeterminingFluent(humanTarget4), Time),
          (->),
         killedDeterminingFluent(humanTarget4)
       ].
 */
 %  pl=axiom(killedDeterminingFluent(humanTarget4),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TimeDelayBombing.e',95).
killedDeterminingFluent(humanTarget4).
 %  killedDeterminingFluent(humanTarget4).


% [time]
 % !HoldsAt(InjuredDeterminingFluent(HumanTarget4),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TimeDelayBombing.e',95).

 /*  fix_axiom_head(Time) ->
       [ holds_at(neg(injuredDeterminingFluent(humanTarget4)), Time),
          (->),
         not(injuredDeterminingFluent(humanTarget4))
       ].
 */
 %  pl=axiom(not(injuredDeterminingFluent(humanTarget4)),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TimeDelayBombing.e',95).
not(injuredDeterminingFluent(humanTarget4)).
 %  not(injuredDeterminingFluent(humanTarget4)).

% physobj PhysTarget1
 %  t(physobj,physTarget1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TimeDelayBombing.e',97).
physobj(physTarget1).
 %  physobj(physTarget1).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TimeDelayBombing.e',99).
% HoldsAt(Intact(PhysTarget1),0).
 %  pl=axiom(initially(intact(physTarget1)),[]).
initially intact(physTarget1).
 %  initial_state([intact(physTarget1)]).
 %  initial_state([intact(physTarget1)]).


% HoldsAt(At(PhysTarget1,Outside1),0).
 %  pl=axiom(initially(at(physTarget1,outside1)),[]).
 %  initially(at(physTarget1,outside1)).
initially loc_at(physTarget1, outside1).
 %  initial_state([loc_at(physTarget1,outside1)]).
 %  initial_state([loc_at(physTarget1,outside1)]).


% [time]
 % HoldsAt(DestroyedDeterminingFluent(PhysTarget1),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TimeDelayBombing.e',101).

 /*  fix_axiom_head(Time) ->
       [ holds_at(destroyedDeterminingFluent(physTarget1), Time),
          (->),
         destroyedDeterminingFluent(physTarget1)
       ].
 */
 %  pl=axiom(destroyedDeterminingFluent(physTarget1),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TimeDelayBombing.e',101).
destroyedDeterminingFluent(physTarget1).
 %  destroyedDeterminingFluent(physTarget1).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TimeDelayBombing.e',103).
% [time]
 % !HoldsAt(DamagedDeterminingFluent(PhysTarget1),time).

 /*  fix_axiom_head(Time) ->
       [ holds_at(neg(damagedDeterminingFluent(physTarget1)), Time),
          (->),
         not(damagedDeterminingFluent(physTarget1))
       ].
 */
 %  pl=axiom(not(damagedDeterminingFluent(physTarget1)),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TimeDelayBombing.e',103).
not(damagedDeterminingFluent(physTarget1)).
 %  not(damagedDeterminingFluent(physTarget1)).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TimeDelayBombing.e',105).
%; room-scale topological space

% outside Outside1
 %  t(outside,outside1).
outside(outside1).
 %  outside(outside1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TimeDelayBombing.e',107).
% outside Outside2
 %  t(outside,outside2).
outside(outside2).
 %  outside(outside2).

% room Inside1
 %  t(room,inside1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TimeDelayBombing.e',107).
room(inside1).
 %  room(inside1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TimeDelayBombing.e',109).
% door Door1
 %  t(door,door1).
door(door1).
 %  door(door1).

% building Building1
 %  t(building,building1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TimeDelayBombing.e',109).
building(building1).
 %  building(building1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TimeDelayBombing.e',111).
% street Street1
 %  t(street,street1).
street(street1).
 %  street(street1).


% Side1(Door1)=Outside1.
 %  pl=axiom(side1Pred(door1,outside1),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TimeDelayBombing.e',111).
side1Pred(door1,outside1).
 %  side1Pred(door1,outside1).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TimeDelayBombing.e',113).
% Side2(Door1)=Inside1.
 %  pl=axiom(side2Pred(door1,inside1),[]).
side2Pred(door1,inside1).
 %  side2Pred(door1,inside1).


% LookOutOnto(Inside1)=Outside1.
 %  pl=axiom(lookOutOntoPred(inside1,outside1),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TimeDelayBombing.e',113).
lookOutOntoPred(inside1,outside1).
 %  lookOutOntoPred(inside1,outside1).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TimeDelayBombing.e',115).
% Floor(Inside1)=1.
 %  pl=axiom(floorPred(inside1,1),[]).
floorPred(inside1,1).
 %  floorPred(inside1,1).


% BuildingOf(Inside1)=Building1.
 %  pl=axiom(building(inside1,building1),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TimeDelayBombing.e',115).
building(inside1,building1).
 %  building(inside1,building1).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TimeDelayBombing.e',117).
% Side1(Street1)=Outside1.
 %  pl=axiom(side1Pred(street1,outside1),[]).
side1Pred(street1,outside1).
 %  side1Pred(street1,outside1).


% Side2(Street1)=Outside2.
 %  pl=axiom(side2Pred(street1,outside2),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TimeDelayBombing.e',117).
side2Pred(street1,outside2).
 %  side2Pred(street1,outside2).


% HoldsAt(Alive(Perp1),0).
 %  pl=axiom(initially(alive(perp1)),[]).
initially alive(perp1).
 %  initial_state([alive(perp1)]).
 %  initial_state([alive(perp1)]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TimeDelayBombing.e',121).
% HoldsAt(Awake(Perp1),0).
 %  pl=axiom(initially(awake(perp1)),[]).
initially awake(perp1).
 %  initial_state([awake(perp1)]).
 %  initial_state([awake(perp1)]).


% HoldsAt(Standing(Perp1),0).
 %  pl=axiom(initially(standing(perp1)),[]).
initially standing(perp1).
 %  initial_state([standing(perp1)]).
 %  initial_state([standing(perp1)]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TimeDelayBombing.e',123).
% HoldsAt(Sleep2(Perp1),0).
 %  pl=axiom(initially(sleep2(perp1)),[]).
initially sleep2(perp1).
 %  initial_state([sleep2(perp1)]).
 %  initial_state([sleep2(perp1)]).


% !HoldsAt(Injured(Perp1),0).
 %  pl=axiom(initially(neg(injured(perp1))),[]).
 %  initially(neg(injured(perp1))).
initially not injured(perp1).
 %  initial_state([not(injured(perp1))]).
 %  initial_state([not(injured(perp1))]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TimeDelayBombing.e',125).
% [object]
 % !HoldsAt(Holding(Perp1,object),0).
 %  pl=axiom(initially(neg(holding(perp1,Object))),[]).
 %  initially(neg(holding(perp1,Object))).
initially not holding(perp1, Object).
 %  initial_state([not(holding(perp1,Object))]).
 %  initial_state([not(holding(perp1,Object))]).


% HoldsAt(At(Bomb1,Outside2),0).
 %  pl=axiom(initially(at(bomb1,outside2)),[]).
 %  initially(at(bomb1,outside2)).
initially loc_at(bomb1, outside2).
 %  initial_state([loc_at(bomb1,outside2)]).
 %  initial_state([loc_at(bomb1,outside2)]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TimeDelayBombing.e',127).
% HoldsAt(At(Perp1,Outside2),0).
 %  pl=axiom(initially(at(perp1,outside2)),[]).
 %  initially(at(perp1,outside2)).
initially loc_at(perp1, outside2).
 %  initial_state([loc_at(perp1,outside2)]).
 %  initial_state([loc_at(perp1,outside2)]).


% HoldsAt(Intact(Bomb1),0).
 %  pl=axiom(initially(intact(bomb1)),[]).
initially intact(bomb1).
 %  initial_state([intact(bomb1)]).
 %  initial_state([intact(bomb1)]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TimeDelayBombing.e',129).
% !HoldsAt(BombActivated(Bomb1),0).
 %  pl=axiom(initially(neg(bombActivated(bomb1))),[]).
 %  initially(neg(bombActivated(bomb1))).
initially not bombActivated(bomb1).
 %  initial_state([not(bombActivated(bomb1))]).
 %  initial_state([not(bombActivated(bomb1))]).


% !HoldsAt(DoorIsOpen(Door1),0).
 %  pl=axiom(initially(neg(doorIsOpen(door1))),[]).
 %  initially(neg(doorIsOpen(door1))).
initially not doorIsOpen(door1).
 %  initial_state([not(doorIsOpen(door1))]).
 %  initial_state([not(doorIsOpen(door1))]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TimeDelayBombing.e',131).
% HoldsAt(DoorUnlocked(Door1),0).
 %  pl=axiom(initially(doorUnlocked(door1)),[]).
initially doorUnlocked(door1).
 %  initial_state([doorUnlocked(door1)]).
 %  initial_state([doorUnlocked(door1)]).


% HoldsAt(BombTimerValue(Bomb1, BombTimeDelay(Bomb1)),0).
 %  pl=axiom(initially(bombTimerValue(bomb1,bombTimeDelay(bomb1))),[]).
initially bombTimerValue(bomb1, bombTimeDelay(bomb1)).
 %  initial_state([bombTimerValue(bomb1,bombTimeDelay(bomb1))]).
 %  initial_state([bombTimerValue(bomb1,bombTimeDelay(bomb1))]).


%; narrative


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TimeDelayBombing.e',135).
% Happens(PickUp(Perp1,Bomb1),0).
 %  pl=axiom(happens(pickUp(perp1,bomb1),start),[]).
 %  happens(pickUp(perp1,bomb1),start).
observe(at(pickUp(perp1,bomb1),start)).
 %  observe(at(pickUp(perp1,bomb1),start)).


% Happens(WalkStreet21(Perp1,Street1),1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TimeDelayBombing.e',135).

 /*  pl=axiom(happens(walkStreet21(perp1,street1),When),
         [b(start,When)]).
 */

 /*  b(start, When) ->
       happens(walkStreet21(perp1, street1), When).
 */
if b(start, When)then happens(walkStreet21(perp1, street1), When).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TimeDelayBombing.e',135).

 /*  reactive_rule([b(start,When)],
   	      [happens(walkStreet21(perp1,street1),When)]).
 */

 /*  reactive_rule([b(start,When)],
   	      [happens(walkStreet21(perp1,street1),When)]).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TimeDelayBombing.e',137).
% Happens(BombActivate(Perp1,Bomb1),2).

 /*  pl=axiom(happens(bombActivate(perp1,bomb1),Start_Num2),
         [b(start,Start_Num2),toffset(start,2,Start_Num2)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TimeDelayBombing.e',137).

 /*  (   b(start, Start_Num2),
       toffset(start, 2, Start_Num2)
   ->  happens(bombActivate(perp1, bomb1), Start_Num2)
   ).
 */
if b(start, Start_Num2), toffset(start, 2, Start_Num2)then happens(bombActivate(perp1, bomb1), Start_Num2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TimeDelayBombing.e',137).

 /*  reactive_rule([ b(start,Start_Num2),
   		toffset(start,2,Start_Num2)
   	      ],
   	      [happens(bombActivate(perp1,bomb1),Start_Num2)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TimeDelayBombing.e',137).

 /*  reactive_rule([ b(start,Start_Num2),
   		toffset(start,2,Start_Num2)
   	      ],
   	      [happens(bombActivate(perp1,bomb1),Start_Num2)]).
 */


% Happens(LetGoOf(Perp1,Bomb1),3).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TimeDelayBombing.e',137).

 /*  pl=axiom(happens(letGoOf(perp1,bomb1),Start_Num3),
         [b(start,Start_Num3),toffset(start,3,Start_Num3)]).
 */

 /*  (   b(start, Start_Num3),
       toffset(start, 3, Start_Num3)
   ->  happens(letGoOf(perp1, bomb1), Start_Num3)
   ).
 */
if b(start, Start_Num3), toffset(start, 3, Start_Num3)then happens(letGoOf(perp1, bomb1), Start_Num3).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TimeDelayBombing.e',137).

 /*  reactive_rule([ b(start,Start_Num3),
   		toffset(start,3,Start_Num3)
   	      ],
   	      [happens(letGoOf(perp1,bomb1),Start_Num3)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TimeDelayBombing.e',137).

 /*  reactive_rule([ b(start,Start_Num3),
   		toffset(start,3,Start_Num3)
   	      ],
   	      [happens(letGoOf(perp1,bomb1),Start_Num3)]).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TimeDelayBombing.e',139).
% Happens(WalkStreet12(Perp1,Street1),4).

 /*  pl=axiom(happens(walkStreet12(perp1,street1),Start_Num4),
         [b(start,Start_Num4),toffset(start,4,Start_Num4)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TimeDelayBombing.e',139).

 /*  (   b(start, Start_Num4),
       toffset(start, 4, Start_Num4)
   ->  happens(walkStreet12(perp1, street1), Start_Num4)
   ).
 */
if b(start, Start_Num4), toffset(start, 4, Start_Num4)then happens(walkStreet12(perp1, street1), Start_Num4).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TimeDelayBombing.e',139).

 /*  reactive_rule([ b(start,Start_Num4),
   		toffset(start,4,Start_Num4)
   	      ],
   	      [happens(walkStreet12(perp1,street1),Start_Num4)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TimeDelayBombing.e',139).

 /*  reactive_rule([ b(start,Start_Num4),
   		toffset(start,4,Start_Num4)
   	      ],
   	      [happens(walkStreet12(perp1,street1),Start_Num4)]).
 */

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TimeDelayBombing.e',141).
% range time 0 7
range(time,0,7).
 %  range(time,0,7).

% range offset 0 3
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TimeDelayBombing.e',141).
range(offset,0,3).
 %  range(offset,0,3).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TimeDelayBombing.e',143).
% range diameter 0 0
range(diameter,0,0).
 %  range(diameter,0,0).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TimeDelayBombing.e',145).
% completion Happens
completion(happens).
 %  completion(happens).
%; End of file.
% translate: ending  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/TimeDelayBombing.e.lps 
