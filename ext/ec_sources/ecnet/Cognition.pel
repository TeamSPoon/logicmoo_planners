:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Book.e',87).
:- call_pel_directive(translate(unskipped,
                                '/pack/logicmoo_ec/ext/ec_sources/ecnet/Cognition.pel')).
:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(ecalc).
:- call_pel_directive(translate(begining,
                                '/pack/logicmoo_ec/ext/ec_sources/ecnet/Cognition.pel')).
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Cognition.e',11).
% event Read(agent,text,content)
event(read(agent,text,content)).

% event ThinkAbout(agent,content)
event(thinkAbout(agent,content)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Cognition.e',13).
% event Think(agent)
event(think(agent)).

% event Understand(agent,content)
event(understand(agent,content)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Cognition.e',15).
% event Dream(agent)
event(dream(agent)).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Cognition.e',17).
% [agent,text,content,time]
% Happens(Read(agent,text,content),time) ->
% HoldsAt(See(agent,text),time).
happens_at(read(Agent, Text, Content), Time) ->
    holds_at(see(Agent, Text), Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Cognition.e',20).
:- call_pel_directive(translate(ending,
                                '/pack/logicmoo_ec/ext/ec_sources/ecnet/Cognition.pel')).
