:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',133).
% translate: unskipped  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/Fire.e.lps 
:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(lps).
% translate: begining  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/Fire.e.lps 
% Thu, 08 Oct 2020 19:06:06 GMT File: <stream>(0x5600a3975200)%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; fire
%;
%; agent sets fire to physobj with burn time offset.

% event SetFireTo(agent,physobj,fire,offset)
 %  blue=event(setFireTo(agent,physobj,fire,offset)).
 %  event(setFireTo(agent,physobj,fire,offset)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Fire.e',14).
actions([setFireTo/4]).
 %  actions([setFireTo/4]).
mpred_prop(setFireTo(agent,physobj,fire,offset),event).
 %  mpred_prop(setFireTo(agent,physobj,fire,offset),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Fire.e',17).
%; An effect axioms states that
%; if an agent sets a fire to a physical object with a burn time,
%; the physical object will be burning with the fire and burn time:
% [agent,physobj,fire,offset,time]
% Initiates(SetFireTo(agent,physobj,fire,offset),
%           Burning(physobj,fire,offset),
%           time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Fire.e',20).

 /*  pl=axiom(initiates(setFireTo(Agent,
   			  Physobj,
   			  Fire,
   			  Offset),
   		burning(Physobj,Fire,Offset),
   		Time),
         []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Fire.e',20).

 /*  initiates(setFireTo(Agent,Physobj,Fire,Offset),
   	  burning(Physobj,Fire,Offset),
   	  Time).
 */
setFireTo(Agent, Physobj, Fire, Offset)initiates burning(Physobj, Fire, Offset).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Fire.e',20).

 /*  initiated(happens(setFireTo(Agent,
   			    Physobj,
   			    Fire,
   			    Offset),
   		  Time_From,
   		  Time_Until),
   	  burning(Physobj,Fire,Offset),
   	  []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Fire.e',20).

 /*  initiated(happens(setFireTo(Agent,
   			    Physobj,
   			    Fire,
   			    Offset),
   		  Time_From,
   		  Time_Until),
   	  burning(Physobj,Fire,Offset),
   	  []).
 */


%; agent puts out fire on physobj.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Fire.e',26).
% event PutOutFire(agent,physobj,fire)
 %  blue=event(putOutFire(agent,physobj,fire)).
 %  event(putOutFire(agent,physobj,fire)).
actions([putOutFire/3]).
 %  actions([putOutFire/3]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Fire.e',26).
mpred_prop(putOutFire(agent,physobj,fire),event).
 %  mpred_prop(putOutFire(agent,physobj,fire),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Fire.e',28).
%; An effect axiom states that
%; if an agent puts out a fire on a physical object,
%; the physical object will no longer be burning:
% [agent,physobj,fire,offset,time]
% Terminates(PutOutFire(agent,physobj,fire),
%            Burning(physobj,fire,offset),
%            time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Fire.e',31).

 /*  pl=axiom(terminates(putOutFire(Agent,Physobj,Fire),
   		 burning(Physobj,Fire,Offset),
   		 Time),
         []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Fire.e',31).

 /*  terminates(putOutFire(Agent,Physobj,Fire),
   	   burning(Physobj,Fire,Offset),
   	   Time).
 */
putOutFire(Agent, Physobj, Fire)terminates burning(Physobj, Fire, Offset).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Fire.e',31).

 /*  terminated(happens(putOutFire(Agent,Physobj,Fire),
   		   Time_From,
   		   Time_Until),
   	   burning(Physobj,Fire,Offset),
   	   []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Fire.e',31).

 /*  terminated(happens(putOutFire(Agent,Physobj,Fire),
   		   Time_From,
   		   Time_Until),
   	   burning(Physobj,Fire,Offset),
   	   []).
 */


%; A precondition axiom states that
%; for an agent to set fire to a physical object,
%; there must be a location such that
%; the agent is at the location and
%; the physical object is at the location:
% [agent,fire,physobj,offset,time]
% Happens(SetFireTo(agent,physobj,fire,offset),time) ->
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Fire.e',41).
% {location}%  HoldsAt(At(agent,location),time) &
%            HoldsAt(At(physobj,location),time).
 %  clausify_pnf=exists([Location],  (happens(setFireTo(Agent, Physobj, Fire, Offset), Time)->holds_at(at(Agent, Location), Time), holds_at(at(Physobj, Location), Time))).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Fire.e',43).

 /*  not(happens(setFireTo(Agent, Physobj, Fire, Offset), Time)) :-
       (   not(holds_at(at(Agent, Exists_Location), Time))
       ;   not(holds_at(at(Physobj, Exists_Location), Time))
       ),
       some(Exists_Location,
            '$kolem_Fn_17'(Agent,
                           Physobj,
                           Fire,
                           Offset,
                           Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Fire.e',43).

 /*  fix_axiom_head(Time) ->
       [ not(happens(setFireTo(Agent, Physobj, Fire, Offset),
                     Time)),
          (->),
         not(setFireTo(Agent, Physobj, Fire, Offset))
       ].
 */
 %   pl=axiom(not(setFireTo(Agent, Physobj, Fire, Offset)), [(not(at(Agent, Exists_Location));not(at(Physobj, Exists_Location))), some(Exists_Location, '$kolem_Fn_17'(Agent, Physobj, Fire, Offset, Time))]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Fire.e',43).

 /*  (   (   not(at(Agent, Exists_Location))
       ;   not(at(Physobj, Exists_Location))
       ),
       some(Exists_Location,
            '$kolem_Fn_17'(Agent,
                           Physobj,
                           Fire,
                           Offset,
                           Time))
   ->  not(setFireTo(Agent, Physobj, Fire, Offset))
   ).
 */
if (not loc_at(Agent, Exists_Location);not loc_at(Physobj, Exists_Location)), some(Exists_Location, '$kolem_Fn_17'(Agent, Physobj, Fire, Offset, Time))then not setFireTo(Agent, Physobj, Fire, Offset).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Fire.e',43).

 /*   reactive_rule([  (not(loc_at(Agent, Exists_Location));not(loc_at(Physobj, Exists_Location))),
                      some(Exists_Location,
                           '$kolem_Fn_17'(Agent,
                                          Physobj,
                                          Fire,
                                          Offset,
                                          Time))
                    ],
                    [ not(setFireTo(Agent,
                                    Physobj,
                                    Fire,
                                    Offset))
                    ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Fire.e',43).

 /*   reactive_rule([  (not(loc_at(Agent, Exists_Location));not(loc_at(Physobj, Exists_Location))),
                      some(Exists_Location,
                           '$kolem_Fn_17'(Agent,
                                          Physobj,
                                          Fire,
                                          Offset,
                                          Time))
                    ],
                    [ not(setFireTo(Agent,
                                    Physobj,
                                    Fire,
                                    Offset))
                    ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Fire.e',43).

 /*  holds_at(at(Agent, Exists_Location), Time) :-
       happens(setFireTo(Agent, Physobj, Fire, Offset),
               Time),
       some(Exists_Location,
            '$kolem_Fn_17'(Agent,
                           Physobj,
                           Fire,
                           Offset,
                           Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Fire.e',43).

 /*  fix_axiom_head(Time) ->
       [ holds_at(at(Agent, Exists_Location), Time),
          (->),
         at(Agent, Exists_Location)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Fire.e',43).

 /*  pl=axiom(at(Agent,Exists_Location),
         [ setFireTo(Agent,Physobj,Fire,Offset),
   	some(Exists_Location,
   	     '$kolem_Fn_17'(Agent,
   			    Physobj,
   			    Fire,
   			    Offset,
   			    Time))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Fire.e',43).

 /*  (   setFireTo(Agent, Physobj, Fire, Offset),
       some(Exists_Location,
            '$kolem_Fn_17'(Agent,
                           Physobj,
                           Fire,
                           Offset,
                           Time))
   ->  at(Agent, Exists_Location)
   ).
 */
if setFireTo(Agent, Physobj, Fire, Offset), some(Exists_Location, '$kolem_Fn_17'(Agent, Physobj, Fire, Offset, Time))then loc_at(Agent, Exists_Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Fire.e',43).

 /*  reactive_rule([ happens(setFireTo(Agent,
   				  Physobj,
   				  Fire,
   				  Offset),
   			Time_From,
   			Time_Until),
   		some(Exists_Location,
   		     '$kolem_Fn_17'(Agent,
   				    Physobj,
   				    Fire,
   				    Offset,
   				    Time))
   	      ],
   	      [loc_at(Agent,Exists_Location)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Fire.e',43).

 /*  reactive_rule([ happens(setFireTo(Agent,
   				  Physobj,
   				  Fire,
   				  Offset),
   			Time_From,
   			Time_Until),
   		some(Exists_Location,
   		     '$kolem_Fn_17'(Agent,
   				    Physobj,
   				    Fire,
   				    Offset,
   				    Time))
   	      ],
   	      [loc_at(Agent,Exists_Location)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Fire.e',43).

 /*  holds_at(at(Physobj, Exists_Location), Time) :-
       happens(setFireTo(Agent, Physobj, Fire, Offset),
               Time),
       some(Exists_Location,
            '$kolem_Fn_17'(Agent,
                           Physobj,
                           Fire,
                           Offset,
                           Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Fire.e',43).

 /*  fix_axiom_head(Time) ->
       [ holds_at(at(Physobj, Exists_Location), Time),
          (->),
         at(Physobj, Exists_Location)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Fire.e',43).

 /*  pl=axiom(at(Physobj,Exists_Location),
         [ setFireTo(Agent,Physobj,Fire,Offset),
   	some(Exists_Location,
   	     '$kolem_Fn_17'(Agent,
   			    Physobj,
   			    Fire,
   			    Offset,
   			    Time))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Fire.e',43).

 /*  (   setFireTo(Agent, Physobj, Fire, Offset),
       some(Exists_Location,
            '$kolem_Fn_17'(Agent,
                           Physobj,
                           Fire,
                           Offset,
                           Time))
   ->  at(Physobj, Exists_Location)
   ).
 */
if setFireTo(Agent, Physobj, Fire, Offset), some(Exists_Location, '$kolem_Fn_17'(Agent, Physobj, Fire, Offset, Time))then loc_at(Physobj, Exists_Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Fire.e',43).

 /*  reactive_rule([ happens(setFireTo(Agent,
   				  Physobj,
   				  Fire,
   				  Offset),
   			Time_From9,
   			Time_Until10),
   		some(Exists_Location,
   		     '$kolem_Fn_17'(Agent,
   				    Physobj,
   				    Fire,
   				    Offset,
   				    Time))
   	      ],
   	      [loc_at(Physobj,Exists_Location)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Fire.e',43).

 /*  reactive_rule([ happens(setFireTo(Agent,
   				  Physobj,
   				  Fire,
   				  Offset),
   			Time_From9,
   			Time_Until10),
   		some(Exists_Location,
   		     '$kolem_Fn_17'(Agent,
   				    Physobj,
   				    Fire,
   				    Offset,
   				    Time))
   	      ],
   	      [loc_at(Physobj,Exists_Location)]).
 */


%; A precondition axiom states that
%; for an agent to put out a fire on a physical object,
%; there must be a location such that
%; the agent is at the location and
%; the physical object is at the location:
% [agent,fire,physobj,time]
% Happens(PutOutFire(agent,physobj,fire),time) ->
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Fire.e',51).
% {location}%  HoldsAt(At(agent,location),time) &
%            HoldsAt(At(physobj,location),time).
 %  clausify_pnf=exists([Location],  (happens(putOutFire(Agent, Physobj, Fire), Time)->holds_at(at(Agent, Location), Time), holds_at(at(Physobj, Location), Time))).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Fire.e',53).

 /*  not(happens(putOutFire(Agent, Physobj, Fire), Time)) :-
       (   not(holds_at(at(Agent, Exists_Location), Time))
       ;   not(holds_at(at(Physobj, Exists_Location), Time))
       ),
       some(Exists_Location,
            '$kolem_Fn_18'(Agent, Physobj, Fire, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Fire.e',53).

 /*  fix_axiom_head(Time) ->
       [ not(happens(putOutFire(Agent, Physobj, Fire), Time)),
          (->),
         not(putOutFire(Agent, Physobj, Fire))
       ].
 */
 %   pl=axiom(not(putOutFire(Agent, Physobj, Fire)), [(not(at(Agent, Exists_Location));not(at(Physobj, Exists_Location))), some(Exists_Location, '$kolem_Fn_18'(Agent, Physobj, Fire, Time))]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Fire.e',53).

 /*  (   (   not(at(Agent, Exists_Location))
       ;   not(at(Physobj, Exists_Location))
       ),
       some(Exists_Location,
            '$kolem_Fn_18'(Agent, Physobj, Fire, Time))
   ->  not(putOutFire(Agent, Physobj, Fire))
   ).
 */
if (not loc_at(Agent, Exists_Location);not loc_at(Physobj, Exists_Location)), some(Exists_Location, '$kolem_Fn_18'(Agent, Physobj, Fire, Time))then not putOutFire(Agent, Physobj, Fire).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Fire.e',53).

 /*   reactive_rule([  (not(loc_at(Agent, Exists_Location));not(loc_at(Physobj, Exists_Location))),
                      some(Exists_Location,
                           '$kolem_Fn_18'(Agent,
                                          Physobj,
                                          Fire,
                                          Time))
                    ],
                    [not(putOutFire(Agent, Physobj, Fire))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Fire.e',53).

 /*   reactive_rule([  (not(loc_at(Agent, Exists_Location));not(loc_at(Physobj, Exists_Location))),
                      some(Exists_Location,
                           '$kolem_Fn_18'(Agent,
                                          Physobj,
                                          Fire,
                                          Time))
                    ],
                    [not(putOutFire(Agent, Physobj, Fire))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Fire.e',53).

 /*  holds_at(at(Agent, Exists_Location), Time) :-
       happens(putOutFire(Agent, Physobj, Fire), Time),
       some(Exists_Location,
            '$kolem_Fn_18'(Agent, Physobj, Fire, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Fire.e',53).

 /*  fix_axiom_head(Time) ->
       [ holds_at(at(Agent, Exists_Location), Time),
          (->),
         at(Agent, Exists_Location)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Fire.e',53).

 /*  pl=axiom(at(Agent,Exists_Location),
         [ putOutFire(Agent,Physobj,Fire),
   	some(Exists_Location,
   	     '$kolem_Fn_18'(Agent,
   			    Physobj,
   			    Fire,
   			    Time))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Fire.e',53).

 /*  (   putOutFire(Agent, Physobj, Fire),
       some(Exists_Location,
            '$kolem_Fn_18'(Agent, Physobj, Fire, Time))
   ->  at(Agent, Exists_Location)
   ).
 */
if putOutFire(Agent, Physobj, Fire), some(Exists_Location, '$kolem_Fn_18'(Agent, Physobj, Fire, Time))then loc_at(Agent, Exists_Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Fire.e',53).

 /*  reactive_rule([ happens(putOutFire(Agent,
   				   Physobj,
   				   Fire),
   			Time_From,
   			Time_Until),
   		some(Exists_Location,
   		     '$kolem_Fn_18'(Agent,
   				    Physobj,
   				    Fire,
   				    Time))
   	      ],
   	      [loc_at(Agent,Exists_Location)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Fire.e',53).

 /*  reactive_rule([ happens(putOutFire(Agent,
   				   Physobj,
   				   Fire),
   			Time_From,
   			Time_Until),
   		some(Exists_Location,
   		     '$kolem_Fn_18'(Agent,
   				    Physobj,
   				    Fire,
   				    Time))
   	      ],
   	      [loc_at(Agent,Exists_Location)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Fire.e',53).

 /*  holds_at(at(Physobj, Exists_Location), Time) :-
       happens(putOutFire(Agent, Physobj, Fire), Time),
       some(Exists_Location,
            '$kolem_Fn_18'(Agent, Physobj, Fire, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Fire.e',53).

 /*  fix_axiom_head(Time) ->
       [ holds_at(at(Physobj, Exists_Location), Time),
          (->),
         at(Physobj, Exists_Location)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Fire.e',53).

 /*  pl=axiom(at(Physobj,Exists_Location),
         [ putOutFire(Agent,Physobj,Fire),
   	some(Exists_Location,
   	     '$kolem_Fn_18'(Agent,
   			    Physobj,
   			    Fire,
   			    Time))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Fire.e',53).

 /*  (   putOutFire(Agent, Physobj, Fire),
       some(Exists_Location,
            '$kolem_Fn_18'(Agent, Physobj, Fire, Time))
   ->  at(Physobj, Exists_Location)
   ).
 */
if putOutFire(Agent, Physobj, Fire), some(Exists_Location, '$kolem_Fn_18'(Agent, Physobj, Fire, Time))then loc_at(Physobj, Exists_Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Fire.e',53).

 /*  reactive_rule([ happens(putOutFire(Agent,
   				   Physobj,
   				   Fire),
   			Time_From8,
   			Time_Until9),
   		some(Exists_Location,
   		     '$kolem_Fn_18'(Agent,
   				    Physobj,
   				    Fire,
   				    Time))
   	      ],
   	      [loc_at(Physobj,Exists_Location)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Fire.e',53).

 /*  reactive_rule([ happens(putOutFire(Agent,
   				   Physobj,
   				   Fire),
   			Time_From8,
   			Time_Until9),
   		some(Exists_Location,
   		     '$kolem_Fn_18'(Agent,
   				    Physobj,
   				    Fire,
   				    Time))
   	      ],
   	      [loc_at(Physobj,Exists_Location)]).
 */


%; physobj is burning with fire and burn time offset.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Fire.e',57).
% fluent Burning(physobj,fire,offset)
 %  blue=fluent(burning(physobj,fire,offset)).
 %  fluent(burning(physobj,fire,offset)).
fluents([burning/3]).
 %  fluents([burning/3]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Fire.e',57).
mpred_prop(burning(physobj,fire,offset),fluent).
 %  mpred_prop(burning(physobj,fire,offset),fluent).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Fire.e',59).
%; A state constraint says that a physical object burning with
%; a fire has at most one burn time at a time:
% [physobj,fire,offset1,offset2,time]
% HoldsAt(Burning(physobj,fire,offset1),time) &
% HoldsAt(Burning(physobj,fire,offset2),time) ->
% offset1=offset2.
 %  clausify_pnf=(holds_at(burning(Physobj, Fire, Offset1), Time), holds_at(burning(Physobj, Fire, Offset2), Time)->equals(Offset1, Offset2)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Fire.e',61).

 /*  not(holds_at(burning(Physobj, Fire, Offset1), Time)) :-
       holds_at(burning(Physobj, Fire, Offset2), Time),
       not(equals(Offset1, Offset2)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Fire.e',61).

 /*  pl=axiom(not(burning(Physobj,Fire,Offset1)),
         [ burning(Physobj,Fire,Offset2),
   	not(equals(Offset1,Offset2))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Fire.e',61).

 /*  (   burning(Physobj, Fire, Offset2),
       not(equals(Offset1, Offset2))
   ->  not(burning(Physobj, Fire, Offset1))
   ).
 */
if burning(Physobj, Fire, Offset2), not equals(Offset1, Offset2)then not burning(Physobj, Fire, Offset1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Fire.e',61).

 /*  reactive_rule([ holds(burning(Physobj,Fire,Offset2),
   		      Holds),
   		not(equals(Offset1,Offset2))
   	      ],
   	      [ holds(not(burning(Physobj,
   				  Fire,
   				  Offset1)),
   		      Holds6)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Fire.e',61).

 /*  reactive_rule([ holds(burning(Physobj,Fire,Offset2),
   		      Holds),
   		not(equals(Offset1,Offset2))
   	      ],
   	      [ holds(not(burning(Physobj,
   				  Fire,
   				  Offset1)),
   		      Holds6)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Fire.e',61).

 /*  not(holds_at(burning(Physobj, Fire, Offset2), Time)) :-
       holds_at(burning(Physobj, Fire, Offset1), Time),
       not(equals(Offset1, Offset2)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Fire.e',61).

 /*  pl=axiom(not(burning(Physobj,Fire,Offset2)),
         [ burning(Physobj,Fire,Offset1),
   	not(equals(Offset2,Offset1))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Fire.e',61).

 /*  (   burning(Physobj, Fire, Offset1),
       not(equals(Offset2, Offset1))
   ->  not(burning(Physobj, Fire, Offset2))
   ).
 */
if burning(Physobj, Fire, Offset1), not equals(Offset2, Offset1)then not burning(Physobj, Fire, Offset2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Fire.e',61).

 /*  reactive_rule([ holds(burning(Physobj,Fire,Offset1),
   		      Holds7),
   		not(equals(Offset2,Offset1))
   	      ],
   	      [ holds(not(burning(Physobj,
   				  Fire,
   				  Offset2)),
   		      Holds8)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Fire.e',61).

 /*  reactive_rule([ holds(burning(Physobj,Fire,Offset1),
   		      Holds7),
   		not(equals(Offset2,Offset1))
   	      ],
   	      [ holds(not(burning(Physobj,
   				  Fire,
   				  Offset2)),
   		      Holds8)
   	      ]).
 */


%; The burn time of physobj is decremented.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Fire.e',67).
% event DecrementBurning(physobj)
 %  blue=event(decrementBurning(physobj)).
 %  event(decrementBurning(physobj)).
events([decrementBurning/1]).
 %  events([decrementBurning/1]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Fire.e',67).
mpred_prop(decrementBurning(physobj),event).
 %  mpred_prop(decrementBurning(physobj),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Fire.e',69).
%; A trigger axiom states that
%; if a physical object is burning with a fire and a burn time and
%; the burn time is greater than zero,
%; the burn time of the physical object is decremented:
% [physobj,fire,offset,time]
% HoldsAt(Burning(physobj,fire,offset),time) &
% (offset > 0) ->
% Happens(DecrementBurning(physobj),time).
 %  clausify_pnf=(holds_at(burning(Physobj, Fire, Offset), Time), Offset>0->happens(decrementBurning(Physobj), Time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Fire.e',73).

 /*  happens(decrementBurning(Physobj), Time) :-
       holds_at(burning(Physobj, Fire, Offset), Time),
       comparison(Offset, 0, >).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Fire.e',73).

 /*  fix_axiom_head(Time) ->
       [ happens(decrementBurning(Physobj), Time),
          (->),
         decrementBurning(Physobj)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Fire.e',73).

 /*  pl=axiom(decrementBurning(Physobj),
         [ burning(Physobj,Fire,Offset),
   	comparison(Offset,0,>)
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Fire.e',73).

 /*  (   burning(Physobj, Fire, Offset),
       comparison(Offset, 0, >)
   ->  decrementBurning(Physobj)
   ).
 */
if burning(Physobj, Fire, Offset), comparison(Offset, 0, >)then decrementBurning(Physobj).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Fire.e',73).

 /*  reactive_rule([ holds(burning(Physobj,Fire,Offset),
   		      Holds),
   		comparison(Offset,0,>)
   	      ],
   	      [decrementBurning(Physobj)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Fire.e',73).

 /*  reactive_rule([ holds(burning(Physobj,Fire,Offset),
   		      Holds),
   		comparison(Offset,0,>)
   	      ],
   	      [decrementBurning(Physobj)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Fire.e',73).

 /*  not(holds_at(burning(Physobj, Fire, Offset), Time)) :-
       comparison(Offset, 0, >),
       not(happens(decrementBurning(Physobj), Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Fire.e',73).

 /*  pl=axiom(not(burning(Physobj,Fire,Offset)),
         [ comparison(Offset,0,>),
   	not(decrementBurning(Physobj))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Fire.e',73).

 /*  (   comparison(Offset, 0, >),
       not(decrementBurning(Physobj))
   ->  not(burning(Physobj, Fire, Offset))
   ).
 */
if comparison(Offset, 0, >), not decrementBurning(Physobj)then not burning(Physobj, Fire, Offset).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Fire.e',73).

 /*  reactive_rule([ comparison(Offset,0,>),
   		not(decrementBurning(Physobj))
   	      ],
   	      [ holds(not(burning(Physobj,
   				  Fire,
   				  Offset)),
   		      Holds5)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Fire.e',73).

 /*  reactive_rule([ comparison(Offset,0,>),
   		not(decrementBurning(Physobj))
   	      ],
   	      [ holds(not(burning(Physobj,
   				  Fire,
   				  Offset)),
   		      Holds5)
   	      ]).
 */


%; An effect axiom states that if a physical object is
%; burning with a fire and a burn time, and the burn time of a physical
%; object is decremented, the burn time of the physical
%; object will be the burn time minus one:
% [physobj,fire,offset1,offset2,time]
% HoldsAt(Burning(physobj,fire,offset1),time) &
% offset2 = offset1-1 ->
% Initiates(DecrementBurning(physobj),
%           Burning(physobj,fire,offset2),
%           time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Fire.e',82).

 /*  pl=axiom(initiates(decrementBurning(Physobj),
   		burning(Physobj,Fire,Offset2),
   		Time),
         [ burning(Physobj,Fire,Offset1),
   	'-Pred'(Offset1,1,Offset2)
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Fire.e',82).

 /*  (   burning(Physobj, Fire, Offset1),
       '-Pred'(Offset1, 1, Offset2)
   ->  initiates(decrementBurning(Physobj),
                 burning(Physobj, Fire, Offset2),
                 Time)
   ).
 */
if burning(Physobj, Fire, Offset1), '-Pred'(Offset1, 1, Offset2)then initiates(decrementBurning(Physobj), burning(Physobj, Fire, Offset2)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Fire.e',82).

 /*  reactive_rule([ holds(burning(Physobj,Fire,Offset1),
   		      Holds),
   		'-Pred'(Offset1,1,Offset2)
   	      ],
   	      [ initiates(decrementBurning(Physobj),
   			  at(burning(Physobj,
   				     Fire,
   				     Offset2),
   			     Time),
   			  Initiates)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Fire.e',82).

 /*  reactive_rule([ holds(burning(Physobj,Fire,Offset1),
   		      Holds),
   		'-Pred'(Offset1,1,Offset2)
   	      ],
   	      [ initiates(decrementBurning(Physobj),
   			  at(burning(Physobj,
   				     Fire,
   				     Offset2),
   			     Time),
   			  Initiates)
   	      ]).
 */


%; An effect axiom states that if a physical object is
%; burning with a fire and a burn time, and the burn time of a physical
%; object is decremented, the burn time of the physical
%; object will no longer be the burn time:
% [physobj,fire,offset,time]
% HoldsAt(Burning(physobj,fire,offset),time) ->
% Terminates(DecrementBurning(physobj),
%            Burning(physobj,fire,offset),
%            time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Fire.e',93).

 /*  pl=axiom(terminates(decrementBurning(Physobj),
   		 burning(Physobj,Fire,Offset),
   		 Time),
         [burning(Physobj,Fire,Offset)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Fire.e',93).

 /*  burning(Physobj, Fire, Offset) ->
       terminates(decrementBurning(Physobj),
                  burning(Physobj, Fire, Offset),
                  Time).
 */
if burning(Physobj, Fire, Offset)then terminates(decrementBurning(Physobj), burning(Physobj, Fire, Offset)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Fire.e',93).

 /*  reactive_rule([ holds(burning(Physobj,Fire,Offset),
   		      Holds)
   	      ],
   	      [ terminates(decrementBurning(Physobj),
   			   at(burning(Physobj,
   				      Fire,
   				      Offset),
   			      Time),
   			   Terminates)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Fire.e',93).

 /*  reactive_rule([ holds(burning(Physobj,Fire,Offset),
   		      Holds)
   	      ],
   	      [ terminates(decrementBurning(Physobj),
   			   at(burning(Physobj,
   				      Fire,
   				      Offset),
   			      Time),
   			   Terminates)
   	      ]).
 */


%; A trigger axiom states that
%; if a physical object is burning with a fire and a burn time
%; that is not equal to zero, the fire will damage the
%; physical object:
% [physobj,fire,offset,time]
% offset!=% 0 &
% HoldsAt(Burning(physobj,fire,offset),time) &
% HoldsAt(Intact(physobj),time) ->
% Happens(Damage(fire,physobj),time).
 %  clausify_pnf=(diff(Offset, 0), holds_at(burning(Physobj, Fire, Offset), Time), holds_at(intact(Physobj), Time)->happens(damage(Fire, Physobj), Time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Fire.e',103).

 /*  happens(damage(Fire, Physobj), Time) :-
       diff(Offset, 0),
       holds_at(burning(Physobj, Fire, Offset), Time),
       holds_at(intact(Physobj), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Fire.e',103).

 /*  fix_axiom_head(Time) ->
       [ happens(damage(Fire, Physobj), Time),
          (->),
         damage(Fire, Physobj)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Fire.e',103).

 /*  pl=axiom(damage(Fire,Physobj),
         [ diff(Offset,0),
   	burning(Physobj,Fire,Offset),
   	intact(Physobj)
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Fire.e',103).

 /*  (   diff(Offset, 0),
       burning(Physobj, Fire, Offset),
       intact(Physobj)
   ->  damage(Fire, Physobj)
   ).
 */
if diff(Offset, 0), burning(Physobj, Fire, Offset), intact(Physobj)then damage(Fire, Physobj).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Fire.e',103).

 /*  reactive_rule([ diff(Offset,0),
   		holds(burning(Physobj,Fire,Offset),
   		      Holds),
   		holds(intact(Physobj),Holds)
   	      ],
   	      [ happens(damage(Fire,Physobj),
   			Time_From,
   			Time_Until)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Fire.e',103).

 /*  reactive_rule([ diff(Offset,0),
   		holds(burning(Physobj,Fire,Offset),
   		      Holds),
   		holds(intact(Physobj),Holds)
   	      ],
   	      [ happens(damage(Fire,Physobj),
   			Time_From,
   			Time_Until)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Fire.e',103).

 /*  not(holds_at(burning(Physobj, Fire, Offset), Time)) :-
       holds_at(intact(Physobj), Time),
       diff(Offset, 0),
       not(happens(damage(Fire, Physobj), Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Fire.e',103).

 /*  pl=axiom(not(burning(Physobj,Fire,Offset)),
         [ intact(Physobj),
   	diff(Offset,0),
   	not(damage(Fire,Physobj))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Fire.e',103).

 /*  (   intact(Physobj),
       diff(Offset, 0),
       not(damage(Fire, Physobj))
   ->  not(burning(Physobj, Fire, Offset))
   ).
 */
if intact(Physobj), diff(Offset, 0), not damage(Fire, Physobj)then not burning(Physobj, Fire, Offset).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Fire.e',103).

 /*  reactive_rule([ holds(intact(Physobj),Holds7),
   		diff(Offset,0),
   		not(damage(Fire,Physobj))
   	      ],
   	      [ holds(not(burning(Physobj,
   				  Fire,
   				  Offset)),
   		      Holds8)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Fire.e',103).

 /*  reactive_rule([ holds(intact(Physobj),Holds7),
   		diff(Offset,0),
   		not(damage(Fire,Physobj))
   	      ],
   	      [ holds(not(burning(Physobj,
   				  Fire,
   				  Offset)),
   		      Holds8)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Fire.e',103).

 /*  not(holds_at(intact(Physobj), Time)) :-
       holds_at(burning(Physobj, Fire, Offset), Time),
       diff(Offset, 0),
       not(happens(damage(Fire, Physobj), Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Fire.e',103).

 /*  pl=axiom(not(intact(Physobj)),
         [ burning(Physobj,Fire,Offset),
   	diff(Offset,0),
   	not(damage(Fire,Physobj))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Fire.e',103).

 /*  (   burning(Physobj, Fire, Offset),
       diff(Offset, 0),
       not(damage(Fire, Physobj))
   ->  not(intact(Physobj))
   ).
 */
if burning(Physobj, Fire, Offset), diff(Offset, 0), not damage(Fire, Physobj)then not intact(Physobj).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Fire.e',103).

 /*  reactive_rule([ holds(burning(Physobj,Fire,Offset),
   		      Holds9),
   		diff(Offset,0),
   		not(damage(Fire,Physobj))
   	      ],
   	      [holds(not(intact(Physobj)),Holds10)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Fire.e',103).

 /*  reactive_rule([ holds(burning(Physobj,Fire,Offset),
   		      Holds9),
   		diff(Offset,0),
   		not(damage(Fire,Physobj))
   	      ],
   	      [holds(not(intact(Physobj)),Holds10)]).
 */


%; A trigger axiom states that
%; if a physical object is burning with a fire and a burn time
%; that is equal to zero, the fire will destroy the
%; physical object:
% [physobj,fire,time]
% HoldsAt(Burning(physobj,fire,0),time) &
% !HoldsAt(Destroyed(physobj),time) ->
% Happens(Destroy(fire,physobj),time).
 %  clausify_pnf=(holds_at(burning(Physobj, Fire, 0), Time), holds_at(neg(destroyed(Physobj)), Time)->happens(destroy(Fire, Physobj), Time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Fire.e',113).

 /*  happens(destroy(Fire, Physobj), Time) :-
       holds_at(burning(Physobj, Fire, 0), Time),
       holds_at(neg(destroyed(Physobj)), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Fire.e',113).

 /*  fix_axiom_head(Time) ->
       [ happens(destroy(Fire, Physobj), Time),
          (->),
         destroy(Fire, Physobj)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Fire.e',113).

 /*  pl=axiom(destroy(Fire,Physobj),
         [ burning(Physobj,Fire,0),
   	not(destroyed(Physobj))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Fire.e',113).

 /*  (   burning(Physobj, Fire, 0),
       not(destroyed(Physobj))
   ->  destroy(Fire, Physobj)
   ).
 */
if burning(Physobj, Fire, 0), not destroyed(Physobj)then destroy(Fire, Physobj).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Fire.e',113).

 /*  reactive_rule([ holds(burning(Physobj,Fire,0),Holds),
   		holds(not(destroyed(Physobj)),Holds)
   	      ],
   	      [ happens(destroy(Fire,Physobj),
   			Time_From,
   			Time_Until)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Fire.e',113).

 /*  reactive_rule([ holds(burning(Physobj,Fire,0),Holds),
   		holds(not(destroyed(Physobj)),Holds)
   	      ],
   	      [ happens(destroy(Fire,Physobj),
   			Time_From,
   			Time_Until)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Fire.e',113).

 /*  not(holds_at(burning(Physobj, Fire, 0), Time)) :-
       holds_at(neg(destroyed(Physobj)), Time),
       not(happens(destroy(Fire, Physobj), Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Fire.e',113).

 /*  pl=axiom(not(burning(Physobj,Fire,0)),
         [ not(destroyed(Physobj)),
   	not(destroy(Fire,Physobj))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Fire.e',113).

 /*  (   not(destroyed(Physobj)),
       not(destroy(Fire, Physobj))
   ->  not(burning(Physobj, Fire, 0))
   ).
 */
if not destroyed(Physobj), not destroy(Fire, Physobj)then not burning(Physobj, Fire, 0).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Fire.e',113).

 /*  reactive_rule([ holds(not(destroyed(Physobj)),Holds6),
   		not(destroy(Fire,Physobj))
   	      ],
   	      [ holds(not(burning(Physobj,Fire,0)),
   		      Holds7)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Fire.e',113).

 /*  reactive_rule([ holds(not(destroyed(Physobj)),Holds6),
   		not(destroy(Fire,Physobj))
   	      ],
   	      [ holds(not(burning(Physobj,Fire,0)),
   		      Holds7)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Fire.e',113).

 /*  not(holds_at(neg(destroyed(Physobj)), Time)) :-
       holds_at(burning(Physobj, Fire, 0), Time),
       not(happens(destroy(Fire, Physobj), Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Fire.e',113).

 /*  pl=axiom(not(not(destroyed(Physobj))),
         [ burning(Physobj,Fire,0),
   	not(destroy(Fire,Physobj))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Fire.e',113).

 /*  (   burning(Physobj, Fire, 0),
       not(destroy(Fire, Physobj))
   ->  not(not(destroyed(Physobj)))
   ).
 */
if burning(Physobj, Fire, 0), not destroy(Fire, Physobj)then not not destroyed(Physobj).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Fire.e',113).

 /*  reactive_rule([ holds(burning(Physobj,Fire,0),Holds8),
   		not(destroy(Fire,Physobj))
   	      ],
   	      [ holds(not([ holds(not(destroyed(Physobj)),
   				  Holds9)
   			  ]),
   		      Holds9)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Fire.e',113).

 /*  reactive_rule([ holds(burning(Physobj,Fire,0),Holds8),
   		not(destroy(Fire,Physobj))
   	      ],
   	      [ holds(not([ holds(not(destroyed(Physobj)),
   				  Holds9)
   			  ]),
   		      Holds9)
   	      ]).
 */


%; An effect axiom states that if a fire destroys a physical
%; object, the physical object will no longer be burning:
% [physobj,fire,offset,time]
% Terminates(Destroy(fire,physobj),
%            Burning(physobj,fire,offset),
%            time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Fire.e',120).

 /*  pl=axiom(terminates(destroy(Fire,Physobj),
   		 burning(Physobj,Fire,Offset),
   		 Time),
         []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Fire.e',120).

 /*  terminates(destroy(Fire,Physobj),
   	   burning(Physobj,Fire,Offset),
   	   Time).
 */
destroy(Fire, Physobj)terminates burning(Physobj, Fire, Offset).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Fire.e',120).

 /*  terminated(happens(destroy(Fire,Physobj),
   		   Time_From,
   		   Time_Until),
   	   burning(Physobj,Fire,Offset),
   	   []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Fire.e',120).

 /*  terminated(happens(destroy(Fire,Physobj),
   		   Time_From,
   		   Time_Until),
   	   burning(Physobj,Fire,Offset),
   	   []).
 */


%; End of file.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Fire.e',124).
% translate: ending  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/Fire.e.lps 
