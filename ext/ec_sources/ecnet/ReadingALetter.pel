:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingABook.e',103).
:- call_pel_directive(translate(unskipped,
                                '/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.pel')).
:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(ecalc).
:- call_pel_directive(translate(begining,
                                '/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.pel')).
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{Mueller:2004c,
%;   author = "Erik T. Mueller",
%;   year = "2004",
%;   title = "Understanding script-based stories using commonsense reasoning",
%;   journal = "Cognitive Systems Research",
%;   volume = "5",
%;   number = "4",
%;   pages = "307--340",
%; }
%;

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',22).
% option modeldiff on
:- call_pel_directive(option(modeldiff, on)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',24).
% ignore Love, ThreatenedBy
:- call_pel_directive(ignore(love)).
:- call_pel_directive(ignore(threatenedBy)).

% ignore LookOutOnto, Floor, BuildingOf, SkyOf, GroundOf
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',24).
:- call_pel_directive(ignore(lookOutOnto)).
:- call_pel_directive(ignore(floor)).
:- call_pel_directive(ignore(buildingOf)).
:- call_pel_directive(ignore(skyOf)).
:- call_pel_directive(ignore(groundOf)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',26).
% ignore Near, WalkFrom, WalkFromTo, RunFromTo
:- call_pel_directive(ignore(near)).
:- call_pel_directive(ignore(walkFrom)).
:- call_pel_directive(ignore(walkFromTo)).
:- call_pel_directive(ignore(runFromTo)).

% ignore Side1, Side2
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',26).
:- call_pel_directive(ignore(side1)).
:- call_pel_directive(ignore(side2)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',29).
% load foundations/Root.e
:- call_pel_directive(load('foundations/Root.e')).

% load foundations/EC.e
:- call_pel_directive(load('foundations/EC.e')).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',31).
% load answers/Mueller2003/Ontology.e
:- call_pel_directive(load('answers/Mueller2003/Ontology.e')).

% load answers/Mueller2004c/RTSpaceM.e
:- call_pel_directive(load('answers/Mueller2004c/RTSpaceM.e')).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',33).
% load answers/Mueller2004c/OTSpaceM.e
:- call_pel_directive(load('answers/Mueller2004c/OTSpaceM.e')).

% load answers/Mueller2004c/Container.e
:- call_pel_directive(load('answers/Mueller2004c/Container.e')).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',35).
% load answers/Mueller2004c/Cognition.e
:- call_pel_directive(load('answers/Mueller2004c/Cognition.e')).

% load answers/Mueller2003/Sleep.e
:- call_pel_directive(load('answers/Mueller2003/Sleep.e')).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',37).
% load answers/Mueller2003/Vision.e
:- call_pel_directive(load('answers/Mueller2003/Vision.e')).

% load answers/Mueller2004c/HandTo.e
:- call_pel_directive(load('answers/Mueller2004c/HandTo.e')).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',40).
% location Location1
t(location,location1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',42).
% portal DummyPortal1
t(portal,dummyPortal1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',44).
% agent Recipient1
t(agent,recipient1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',46).
% letter Letter1
t(letter,letter1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',48).
% container Envelope1
t(container,envelope1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',50).
% physobj Surface1
t(physobj,surface1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',52).
% chair Chair1
t(chair,chair1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',54).
% content Content1
t(content,content1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',56).
% agent Carrier1
t(agent,carrier1).
%; prune

% sort ona, onb
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',58).
sort(ona).
sort(onb).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',60).
% fluent! On(ona,onb)
fluent(on(ona,onb)).

% event! PlaceOn(agent,ona,onb)
event(placeOn(agent,ona,onb)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',62).
% event! TakeOffOf(agent,ona,onb)
event(takeOffOf(agent,ona,onb)).

% ona! Envelope1, Letter1
t(ona,envelope1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',62).
t(ona,letter1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',64).
% onb! Surface1
t(onb,surface1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',66).
% sort insidea, insideb
sort(insidea).
sort(insideb).

% fluent! Inside(insidea,insideb)
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',66).
fluent(inside(insidea,insideb)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',68).
% event! PutInside(agent,insidea,insideb)
event(putInside(agent,insidea,insideb)).

% event! TakeOutOf(agent,insidea,insideb)
event(takeOutOf(agent,insidea,insideb)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',70).
% insidea! Letter1
t(insidea,letter1).

% insideb! Envelope1
t(insideb,envelope1).
%; initial state
% [agent,physobj]
 % !HoldsAt(SittingOn(agent,physobj),0).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',73).
holds_at(not(sittingOn(Agent,Physobj)),0).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',75).
% [agent,physobj]
 % !HoldsAt(LyingOn(agent,physobj),0).
holds_at(not(lyingOn(Agent,Physobj)),0).


% HoldsAt(Dressed(Recipient1),0).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',75).
holds_at(dressed(recipient1),0).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',77).
% HoldsAt(Dressed(Carrier1),0).
holds_at(dressed(carrier1),0).


% HoldsAt(Awake(Recipient1),0).
holds_at(awake(recipient1),0).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',79).
% HoldsAt(Awake(Carrier1),0).
holds_at(awake(carrier1),0).


% HoldsAt(Sleep3(Recipient1),0).
holds_at(sleep3(recipient1),0).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',81).
% HoldsAt(Sleep3(Carrier1),0).
holds_at(sleep3(carrier1),0).


% HoldsAt(Standing(Recipient1),0).
holds_at(standing(recipient1),0).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',83).
% HoldsAt(Standing(Carrier1),0).
holds_at(standing(carrier1),0).


% HoldsAt(ContainerClosed(Envelope1),0).
holds_at(containerClosed(envelope1),0).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',85).
% HoldsAt(Inside(Letter1,Envelope1),0).
holds_at(inside(letter1,envelope1),0).


% [physobj1,physobj2]
% !(physobj1=Letter1 & physobj2=Envelope1) ->
% !HoldsAt(Inside(physobj1, physobj2),0).
not((Physobj1=letter1, Physobj2=envelope1)) ->
    holds_at(not(inside(Physobj1, Physobj2)), 0).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',89).
% [agent,object]
 % !HoldsAt(See(agent,object),0).
holds_at(not(see(Agent,Object)),0).


% [agent,object]
% !(agent=Carrier1 & object=Envelope1) ->
% !HoldsAt(Holding(agent,object),0).
not((Agent=carrier1, Object=envelope1)) ->
    holds_at(not(holding(Agent, Object)), 0).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',93).
% HoldsAt(Holding(Carrier1,Envelope1),0).
holds_at(holding(carrier1,envelope1),0).


% [physobj1,physobj2]
 % !HoldsAt(On(physobj1, physobj2),0).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',93).
holds_at(not(on(Physobj1,Physobj2)),0).


%; narrative


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',97).
% Happens(PlaceOn(Carrier1,Envelope1,Surface1),0).
happens_at(placeOn(carrier1,envelope1,surface1),0).


% Happens(TakeOffOf(Recipient1,Envelope1,Surface1),1).
happens_at(takeOffOf(recipient1,envelope1,surface1),1).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',99).
%;Happens(HandTo(Carrier1,Recipient1,Envelope1),0).


% Happens(SitOn(Recipient1,Chair1),2).
happens_at(sitOn(recipient1,chair1),2).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',101).
% Happens(ContainerOpen(Recipient1,Envelope1),3).
happens_at(containerOpen(recipient1,envelope1),3).


% Happens(TakeOutOf(Recipient1,Letter1,Envelope1),4).
happens_at(takeOutOf(recipient1,letter1,envelope1),4).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',103).
% Happens(LookAt(Recipient1,Letter1),5).
happens_at(lookAt(recipient1,letter1),5).


% Happens(Read(Recipient1,Letter1,Content1),6).
happens_at(read(recipient1,letter1,content1),6).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',105).
% Happens(ThinkAbout(Recipient1,Content1),7).
happens_at(thinkAbout(recipient1,content1),7).


% Happens(Understand(Recipient1,Content1),8).
happens_at(understand(recipient1,content1),8).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',107).
% Happens(PutInside(Recipient1,Letter1,Envelope1),9).
happens_at(putInside(recipient1,letter1,envelope1),9).


% Happens(RiseFrom(Recipient1,Chair1),10).
happens_at(riseFrom(recipient1,chair1),10).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',109).
% Happens(PlaceOn(Recipient1,Envelope1,Surface1),11).
happens_at(placeOn(recipient1,envelope1,surface1),11).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',111).
% range time 0 12
:- call_pel_directive(range(time, 0, 12)).

% range offset 0 0
:- call_pel_directive(range(offset, 0, 0)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',113).
% range diameter 0 0
:- call_pel_directive(range(diameter, 0, 0)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',115).
% completion Happens
:- call_pel_directive(completion(happens_at)).
%; End of file.
:- call_pel_directive(translate(ending,
                                '/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.pel')).
