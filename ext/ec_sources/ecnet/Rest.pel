:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',279).
:- call_pel_directive(translate(unskipped,
                                '/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.pel')).
:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(ecalc).
:- call_pel_directive(translate(begining,
                                '/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.pel')).
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{Mueller:InPress,
%;   author = "Erik T. Mueller",
%;   year = "in press",
%;   title = "Modelling space and time in narratives about restaurants",
%;   journal = "Literary and Linguistic Computing",
%; }
%;

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',19).
% option renaming off
:- call_pel_directive(option(renaming, off)).

% option encoding 3
:- call_pel_directive(option(encoding, 3)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',22).
% load foundations/Root.e
:- call_pel_directive(load('foundations/Root.e')).

% load foundations/EC.e
:- call_pel_directive(load('foundations/EC.e')).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',24).
% load answers/Mueller2003/Ontology.e
:- call_pel_directive(load('answers/Mueller2003/Ontology.e')).

% load answers/MuellerInPress/RepRest.e
:- call_pel_directive(load('answers/MuellerInPress/RepRest.e')).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',27).
% door MainEntrance1
t(door,mainEntrance1).
%; room-scale topological space

% outside Street1
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',29).
t(outside,street1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',31).
% room DiningRoom1
t(room,diningRoom1).

% door KitchenDoor1
t(door,kitchenDoor1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',33).
% room Kitchen1
t(room,kitchen1).


% Side1(MainEntrance1)=Street1.
side1(mainEntrance1)=street1.


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',35).
% Side2(MainEntrance1)=DiningRoom1.
side2(mainEntrance1)=diningRoom1.


% Side1(KitchenDoor1)=DiningRoom1.
side1(kitchenDoor1)=diningRoom1.


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',37).
% Side2(KitchenDoor1)=Kitchen1.
side2(kitchenDoor1)=kitchen1.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',39).
% agent Customer1
t(agent,customer1).

% menu Menu1
t(menu,menu1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',41).
% chair Chair1
t(chair,chair1).

% food Food1
t(food,food1).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',43).
% HoldsAt(At(Customer1,Street1),0).
holds_at(at_loc(customer1,street1),0).


% HoldsAt(Hungry(Customer1),0).
holds_at(hungry(customer1),0).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',45).
% HoldsAt(At(Chair1,DiningRoom1),0).
holds_at(at_loc(chair1,diningRoom1),0).


% HoldsAt(At(Menu1,DiningRoom1),0).
holds_at(at_loc(menu1,diningRoom1),0).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',47).
% HoldsAt(On(Menu1,Table1),0).
holds_at(on(menu1,table1),0).


% HoldsAt(At(Food1,Kitchen1),0).
holds_at(at_loc(food1,kitchen1),0).

% waiter Waiter1
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',49).
t(waiter,waiter1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',51).
% cook Cook1
t(cook,cook1).
%; props

% table Table1
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',53).
t(table,table1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',55).
% bill Bill1
t(bill,bill1).
%; restaurant

% restaurant Restaurant1
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',57).
t(restaurant,restaurant1).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',59).
% CookOf(Restaurant1)=Cook1.
cookOf(restaurant1)=cook1.


% TableOf(Restaurant1)=Table1.
tableOf(restaurant1)=table1.


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',61).
% WaiterOf(Restaurant1)=Waiter1.
waiterOf(restaurant1)=waiter1.


% KitchenDoorOf(Restaurant1)=KitchenDoor1.
kitchenDoorOf(restaurant1)=kitchenDoor1.


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',63).
% BillOf(Restaurant1)=Bill1.
billOf(restaurant1)=bill1.


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',65).
%; prune

% sort ona, onb
sort(ona).
sort(onb).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',67).
% fluent! On(ona,onb)
fluent(on(ona,onb)).

% event! PlaceOn(agent,ona,onb)
event(placeOn(agent,ona,onb)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',69).
% event! TakeOffOf(agent,ona,onb)
event(takeOffOf(agent,ona,onb)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',71).
% sort ordera, orderb, orderc
sort(ordera).
sort(orderb).
sort(orderc).

% event! Order(ordera,orderb,orderc)
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',71).
event(order(ordera,orderb,orderc)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',73).
% fluent! KnowOrder(orderb,ordera,orderc)
fluent(knowOrder(orderb,ordera,orderc)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',75).
% sort requesta, requestb, requestc
sort(requesta).
sort(requestb).
sort(requestc).

% event! Request(requesta,requestb,requestc)
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',75).
event(request(requesta,requestb,requestc)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',77).
% fluent! KnowRequest(requestb,requesta,requestc)
fluent(knowRequest(requestb,requesta,requestc)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',79).
% sort holda, holdb, holdc
sort(holda).
sort(holdb).
sort(holdc).

% event! TakeOffOf(holda,holdb,holdc)
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',79).
event(takeOffOf(holda,holdb,holdc)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',81).
% event! PickUp(holda,holdb)
event(pickUp(holda,holdb)).

% event! LetGoOf(holda,holdb)
event(letGoOf(holda,holdb)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',83).
% event! Hold(holda,holdb)
event(hold(holda,holdb)).

% fluent! Holding(holda,holdb)
fluent(holding(holda,holdb)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',86).
% sort sita, sitb
sort(sita).
sort(sitb).

% event! LieOn(sita,sitb)
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',86).
event(lieOn(sita,sitb)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',88).
% event! SitOn(sita,sitb)
event(sitOn(sita,sitb)).

% event! RiseFrom(sita,sitb)
event(riseFrom(sita,sitb)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',90).
% fluent! LyingOn(sita,sitb)
fluent(lyingOn(sita,sitb)).

% fluent! SittingOn(sita,sitb)
fluent(sittingOn(sita,sitb)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',93).
% sort greeta, greetb
sort(greeta).
sort(greetb).

% event! Greet(greeta,greetb)
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',93).
event(greet(greeta,greetb)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',96).
% ona! Menu1, Food1, Bill1
t(ona,menu1).
t(ona,food1).
t(ona,bill1).

% onb! Table1
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',96).
t(onb,table1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',98).
% ordera! Customer1, Waiter1
t(ordera,customer1).
t(ordera,waiter1).

% orderb! Waiter1, Cook1
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',98).
t(orderb,waiter1).
t(orderb,cook1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',100).
% orderc! Food1
t(orderc,food1).

% requesta! Customer1
t(requesta,customer1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',102).
% requestb! Waiter1
t(requestb,waiter1).

% requestc! Bill1
t(requestc,bill1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',104).
% holda! Customer1, Waiter1
t(holda,customer1).
t(holda,waiter1).

% holdb! Menu1, Food1, Bill1
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',104).
t(holdb,menu1).
t(holdb,food1).
t(holdb,bill1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',106).
% holdc! Table1
t(holdc,table1).

% sita! Customer1
t(sita,customer1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',108).
% sitb! Chair1
t(sitb,chair1).

% greeta! Customer1, Waiter1
t(greeta,customer1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',108).
t(greeta,waiter1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',110).
% greetb! Customer1, Waiter1
t(greetb,customer1).
t(greetb,waiter1).
%; initial situation


% HoldsAt(At(Waiter1,DiningRoom1),0).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',112).
holds_at(at_loc(waiter1,diningRoom1),0).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',114).
% HoldsAt(At(Cook1,Kitchen1),0).
holds_at(at_loc(cook1,kitchen1),0).


% HoldsAt(At(Table1,DiningRoom1),0).
holds_at(at_loc(table1,diningRoom1),0).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',116).
% !HoldsAt(On(Bill1,Table1),0).
holds_at(not(on(bill1,table1)),0).


% HoldsAt(At(Bill1,DiningRoom1),0).
holds_at(at_loc(bill1,diningRoom1),0).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',118).
% [agent]
 % HoldsAt(Standing(agent),0).
holds_at(standing(Agent),0).


% [agent,object]
 % !HoldsAt(Holding(agent,object),0).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',118).
holds_at(not(holding(Agent,Object)),0).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',120).
% [agent1,agent2,physobj]
 % !HoldsAt(KnowOrder(agent1,agent2,physobj),0).
holds_at(not(knowOrder(Agent1,Agent2,Physobj)),0).


% [agent1,agent2,physobj]
 % !HoldsAt(KnowRequest(agent1,agent2,physobj),0).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',120).
holds_at(not(knowRequest(Agent1,Agent2,Physobj)),0).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',122).
% HoldsAt(BeWaiter0(Waiter1),0).
holds_at(beWaiter0(waiter1),0).


% HoldsAt(BeCook0(Cook1),0).
holds_at(beCook0(cook1),0).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',124).
% [food]
 % !HoldsAt(FoodPrepared(food),0).
holds_at(not(foodPrepared(Food)),0).


% !HoldsAt(Hungry(Cook1),0).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',124).
holds_at(not(hungry(cook1)),0).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',126).
% !HoldsAt(Hungry(Waiter1),0).
holds_at(not(hungry(waiter1)),0).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',128).
% Happens(WalkThroughDoor12(Customer1,MainEntrance1),0).
happens_at(walkThroughDoor12(customer1,mainEntrance1),0).


% Happens(Greet(Waiter1,Customer1),1).
happens_at(greet(waiter1,customer1),1).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',130).
% Happens(SitOn(Customer1,Chair1),2).
happens_at(sitOn(customer1,chair1),2).


% Happens(TakeOffOf(Customer1,Menu1,Table1),3).
happens_at(takeOffOf(customer1,menu1,table1),3).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',132).
% Happens(Order(Customer1,Waiter1,Food1),4).
happens_at(order(customer1,waiter1,food1),4).


% Happens(PlaceOn(Customer1,Menu1,Table1),5).
happens_at(placeOn(customer1,menu1,table1),5).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',134).
% Happens(Eat(Customer1,Food1),11).
happens_at(eat(customer1,food1),11).


% Happens(Request(Customer1,Waiter1,Bill1),12).
happens_at(request(customer1,waiter1,bill1),12).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',136).
% Happens(Pay(Customer1,Waiter1),15).
happens_at(pay(customer1,waiter1),15).


% Happens(Tip(Customer1,Waiter1),15).
happens_at(tip(customer1,waiter1),15).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',138).
% Happens(RiseFrom(Customer1,Chair1),16).
happens_at(riseFrom(customer1,chair1),16).


% Happens(SayGoodbye(Customer1,Waiter1),17).
happens_at(sayGoodbye(customer1,waiter1),17).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',140).
% Happens(WalkThroughDoor21(Customer1,MainEntrance1),18).
happens_at(walkThroughDoor21(customer1,mainEntrance1),18).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',142).
% range time 0 19
:- call_pel_directive(range(time, 0, 19)).

% range offset 0 0
:- call_pel_directive(range(offset, 0, 0)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',144).
% range diameter 0 0
:- call_pel_directive(range(diameter, 0, 0)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',146).
% completion Happens
:- call_pel_directive(completion(happens_at)).
%; End of file.
:- call_pel_directive(translate(ending,
                                '/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.pel')).
