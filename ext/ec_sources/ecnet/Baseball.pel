:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Arson.e',87).
:- call_pel_directive(translate(unskipped,
                                '/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.pel')).
:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(ecalc).
:- call_pel_directive(translate(begining,
                                '/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.pel')).
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{EthanAllen:1982,
%;   author = "Ethan Allen",
%;   year = "1982",
%;   title = "Baseball Play and Strategy",
%;   address = "Robert E. Krieger",
%;   publisher = "Malabar, FL",
%;   edition = "Third",
%; }
%;
%; @book{Coombs:1967,
%;   author = "Jack Coombs",
%;   year = "1967",
%;   title = "Baseball",
%;   address = "Englewood Cliffs, NJ",
%;   publisher = "Prentice-Hall",
%;   edition = "4th",
%;   howpublished = "revised by Danny Litwhiler",
%; }
%;

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',31).
% sort ballgame
sort(ballgame).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',33).
% sort hardball: ball
subsort(hardball,ball).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',35).
% sort base: physobj
subsort(base,physobj).

% sort firstbase: base
subsort(firstbase,base).
%;sort secondbase: base
%;sort thirdbase: base

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',39).
% sort homeplate: base
subsort(homeplate,base).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',41).
% sort mound: physobj
subsort(mound,physobj).

% sort pitchermound: mound
subsort(pitchermound,mound).
%;sort furniture: physobj
%;sort bench: furniture
%;sort playerbench: bench

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',48).
% sort field: physobj
subsort(field,physobj).
%;sort shortstoparea: field
%;sort catcherarea: field

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',53).
% sort outfield: field
subsort(outfield,field).
%;sort leftfield: outfield
%;sort centerfield: outfield
%;sort rightfield: outfield

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',58).
% function BallOf(ballgame): hardball
function(ballOf(ballgame),hardball).

% function FirstBaseOf(ballgame): firstbase
function(firstBaseOf(ballgame),firstbase).
%;function SecondBaseOf(ballgame): secondbase
%;function ThirdBaseOf(ballgame): thirdbase

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',62).
% function HomeplateOf(ballgame): homeplate
function(homeplateOf(ballgame),homeplate).

% function OutfieldOf(ballgame): outfield
function(outfieldOf(ballgame),outfield).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',64).
% function PitchermoundOf(ballgame): pitchermound
function(pitchermoundOf(ballgame),pitchermound).

% function PlayerbenchOf(ballgame): playerbench
function(playerbenchOf(ballgame),playerbench).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',67).
% predicate HomeTeamPlayer(ballgame,agent)
predicate(homeTeamPlayer(ballgame,agent)).

% predicate VisitingTeamPlayer(ballgame,agent)
predicate(visitingTeamPlayer(ballgame,agent)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',69).
% predicate Player(ballgame,agent)
predicate(player(ballgame,agent)).

% predicate OnOppositeTeams(ballgame,agent,agent)
predicate(onOppositeTeams(ballgame,agent,agent)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',72).
% event Pitch(ballgame,agent,hardball,agent)
event(pitch(ballgame,agent,hardball,agent)).

% event PitchInStrikeZone(ballgame,agent,hardball,agent)
event(pitchInStrikeZone(ballgame,agent,hardball,agent)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',74).
% event PitchOutOfStrikeZone(ballgame,agent,hardball,agent)
event(pitchOutOfStrikeZone(ballgame,agent,hardball,agent)).

% event Swing(ballgame,agent,hardball)
event(swing(ballgame,agent,hardball)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',76).
% event SwingMiss(ballgame,agent,hardball)
event(swingMiss(ballgame,agent,hardball)).

% event SwingHit(ballgame,agent,hardball)
event(swingHit(ballgame,agent,hardball)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',78).
% event SwingHitFair(ballgame,agent,hardball)
event(swingHitFair(ballgame,agent,hardball)).

% event SwingHitFoul(ballgame,agent,hardball)
event(swingHitFoul(ballgame,agent,hardball)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',80).
% event SwingHitFairFly(ballgame,agent,hardball)
event(swingHitFairFly(ballgame,agent,hardball)).

% event SwingHitFairGround(ballgame,agent,hardball)
event(swingHitFairGround(ballgame,agent,hardball)).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',83).
% [ballgame,agent]
% HomeTeamPlayer(ballgame,agent) ->
% !VisitingTeamPlayer(ballgame,agent).
homeTeamPlayer(Ballgame, Agent) ->
    not(visitingTeamPlayer(Ballgame, Agent)).


% [ballgame,agent]
 % HomeTeamPlayer(ballgame,agent) -> Player(ballgame,agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',86).
homeTeamPlayer(Ballgame, Agent) ->
    player(Ballgame, Agent).


% [ballgame,agent]
 % VisitingTeamPlayer(ballgame,agent) -> Player(ballgame,agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',88).
visitingTeamPlayer(Ballgame, Agent) ->
    player(Ballgame, Agent).


% [ballgame,agent1,agent2]
% OnOppositeTeams(ballgame,agent1,agent2) <->
% (HomeTeamPlayer(ballgame,agent1) &
%  VisitingTeamPlayer(ballgame,agent2)) |
% (HomeTeamPlayer(ballgame,agent2) &
%  VisitingTeamPlayer(ballgame,agent1)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',92).
onOppositeTeams(Ballgame, Agent1, Agent2) <->
    (   homeTeamPlayer(Ballgame, Agent1),
        visitingTeamPlayer(Ballgame, Agent2)
    ;   homeTeamPlayer(Ballgame, Agent2),
        visitingTeamPlayer(Ballgame, Agent1)
    ).


% [ballgame,agent1,hardball,agent2,pitchermound,homeplate,time]
% Happens(Pitch(ballgame,agent1,hardball,agent2),time) &
% PitchermoundOf(ballgame) = pitchermound &
% HomeplateOf(ballgame) = homeplate ->
% HoldsAt(Near(agent1,pitchermound),time) &
% HoldsAt(Near(agent2,homeplate),time) &
% OnOppositeTeams(ballgame,agent1,agent2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',99).
happens_at(pitch(Ballgame, Agent1, Hardball, Agent2), Time), pitchermoundOf(Ballgame)=Pitchermound, homeplateOf(Ballgame)=Homeplate ->
    holds_at(near(Agent1, Pitchermound), Time),
    holds_at(near(Agent2, Homeplate), Time),
    onOppositeTeams(Ballgame, Agent1, Agent2).


% [ballgame,agent1,agent2,hardball,time]
% Happens(Pitch(ballgame,agent1,hardball,agent2),time) ->
% Happens(PitchInStrikeZone(ballgame,agent1,hardball,agent2),time) |
% Happens(PitchOutOfStrikeZone(ballgame,agent1,hardball,agent2),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',107).
happens_at(pitch(Ballgame, Agent1, Hardball, Agent2), Time) ->
    (   happens_at(pitchInStrikeZone(Ballgame,
                                     Agent1,
                                     Hardball,
                                     Agent2),
                   Time)
    ;   happens_at(pitchOutOfStrikeZone(Ballgame,
                                        Agent1,
                                        Hardball,
                                        Agent2),
                   Time)
    ).


% [ballgame,agent1,agent2,hardball,time]
% Happens(PitchInStrikeZone(ballgame,agent1,hardball,agent2),time) ->
% !Happens(PitchOutOfStrikeZone(ballgame,agent1,hardball,agent2),time).
happens_at(pitchInStrikeZone(Ballgame, Agent1, Hardball, Agent2), Time) ->
    not(happens_at(pitchOutOfStrikeZone(Ballgame,
                                        Agent1,
                                        Hardball,
                                        Agent2),
                   Time)).


% [ballgame,agent1,agent2,hardball,time]
% Happens(PitchInStrikeZone(ballgame,agent1,hardball,agent2),time) ->
% Happens(Swing(ballgame,agent2,hardball),time+1).
happens_at(pitchInStrikeZone(Ballgame, Agent1, Hardball, Agent2), Time) ->
    happens_at(swing(Ballgame, Agent2, Hardball), Time+1).


% [ballgame,agent,hardball,time]
% Happens(Swing(ballgame,agent,hardball),time) ->
% Happens(SwingHit(ballgame,agent,hardball),time) |
% Happens(SwingMiss(ballgame,agent,hardball),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',120).
happens_at(swing(Ballgame, Agent, Hardball), Time) ->
    (   happens_at(swingHit(Ballgame, Agent, Hardball),
                   Time)
    ;   happens_at(swingMiss(Ballgame, Agent, Hardball),
                   Time)
    ).


% [ballgame,agent,hardball,time]
% Happens(SwingHit(ballgame,agent,hardball),time) ->
% !Happens(SwingMiss(ballgame,agent,hardball),time).
happens_at(swingHit(Ballgame, Agent, Hardball), Time) ->
    not(happens_at(swingMiss(Ballgame, Agent, Hardball),
                   Time)).


% [ballgame,agent,hardball,time]
% Happens(SwingHit(ballgame,agent,hardball),time) ->
% Happens(SwingHitFair(ballgame,agent,hardball),time) |
% Happens(SwingHitFoul(ballgame,agent,hardball),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',129).
happens_at(swingHit(Ballgame, Agent, Hardball), Time) ->
    (   happens_at(swingHitFair(Ballgame, Agent, Hardball),
                   Time)
    ;   happens_at(swingHitFoul(Ballgame, Agent, Hardball),
                   Time)
    ).


% [ballgame,agent,hardball,time]
% Happens(SwingHitFair(ballgame,agent,hardball),time) ->
% !Happens(SwingHitFoul(ballgame,agent,hardball),time).
happens_at(swingHitFair(Ballgame, Agent, Hardball), Time) ->
    not(happens_at(swingHitFoul(Ballgame, Agent, Hardball),
                   Time)).


% [ballgame,agent,hardball,time]
% Happens(SwingHitFair(ballgame,agent,hardball),time) ->
% Happens(SwingHitFairFly(ballgame,agent,hardball),time) |
% Happens(SwingHitFairGround(ballgame,agent,hardball),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',138).
happens_at(swingHitFair(Ballgame, Agent, Hardball), Time) ->
    (   happens_at(swingHitFairFly(Ballgame, Agent, Hardball),
                   Time)
    ;   happens_at(swingHitFairGround(Ballgame,
                                      Agent,
                                      Hardball),
                   Time)
    ).


% [ballgame,agent,hardball,time]
% Happens(SwingHitFairFly(ballgame,agent,hardball),time) ->
% Happens(SwingHitFairGround(ballgame,agent,hardball),time).
happens_at(swingHitFairFly(Ballgame, Agent, Hardball), Time) ->
    happens_at(swingHitFairGround(Ballgame, Agent, Hardball),
               Time).


% [ballgame,agent,hardball,homeplate,firstbase,time]
% Happens(SwingHit(ballgame,agent,hardball),time) &
% HomeplateOf(ballgame) = homeplate &
% FirstBaseOf(ballgame) = firstbase ->
% Happens(RunFromTo(agent,homeplate,firstbase),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',147).
happens_at(swingHit(Ballgame, Agent, Hardball), Time), homeplateOf(Ballgame)=Homeplate, firstBaseOf(Ballgame)=Firstbase ->
    happens_at(runFromTo(Agent, Homeplate, Firstbase),
               Time).


% [ballgame,agent,hardball,homeplate,outfield,time]
% HomeplateOf(ballgame) = homeplate &
% OutfieldOf(ballgame) = outfield &
% Happens(SwingHitFairFly(ballgame,agent,hardball),time) ->
% Happens(HitFromTo(agent,hardball,homeplate,outfield),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',153).
homeplateOf(Ballgame)=Homeplate, outfieldOf(Ballgame)=Outfield, happens_at(swingHitFairFly(Ballgame, Agent, Hardball), Time) ->
    happens_at(hitFromTo(Agent,
                         Hardball,
                         Homeplate,
                         Outfield),
               Time).


%; End of file.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',157).
:- call_pel_directive(translate(ending,
                                '/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.pel')).
