:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(pfc).
% Wed, 01 Apr 2020 20:02:02 GMT
% From ../ecnet/PolySpace.pel:4
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/PlayNeed.e',131).

 /*  loading(load_e_pl,
   	'/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/PolySpace.e').
 */
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @phdthesis{Cassimatis:2002,
%;   author = "Nicholas L. Cassimatis",
%;   year = "2002",
%;   title = "Polyscheme: A Cognitive Architecture for Integrating Multiple Representation and Inference Schemes",
%;   address = "Cambridge, MA",
%;   school = "Program in Media Arts and Sciences, School of Architecture and Planning, Massachusetts Institute of Technology",
%; }
%;
%; sorts

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/PolySpace.e:20
% sort object
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/PolySpace.e',20).
==> sort(object).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/PolySpace.e:21
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/PolySpace.e',22).
% sort xcoord: integer
==> subsort(xcoord,integer).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/PolySpace.e:22
% sort ycoord: integer
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/PolySpace.e',22).
==> subsort(ycoord,integer).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/PolySpace.e:23
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/PolySpace.e',24).
% sort grid
==> sort(grid).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/PolySpace.e:24
% sort shape
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/PolySpace.e',24).
==> sort(shape).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/PolySpace.e:25
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/PolySpace.e',26).
% sort color
==> sort(color).
%; constants

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/PolySpace.e:28
% shape Round,Square
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/PolySpace.e',28).
==> t(shape,round).
==> t(shape,square).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/PolySpace.e:29
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/PolySpace.e',30).
% color Red,Green
==> t(color,red).
==> t(color,green).
%; predicates, fluents, and events

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/PolySpace.e:32
% predicate Equal(object,object)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/PolySpace.e',32).
predicate(equal(object,object)).
==> mpred_prop(equal(object,object),predicate).
==> meta_argtypes(equal(object,object)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/PolySpace.e:33
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/PolySpace.e',34).
% predicate Shape(object,shape)
predicate(shape(object,shape)).
==> mpred_prop(shape(object,shape),predicate).
==> meta_argtypes(shape(object,shape)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/PolySpace.e:34
% predicate Color(object,color)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/PolySpace.e',34).
predicate(color(object,color)).
==> mpred_prop(color(object,color),predicate).
==> meta_argtypes(color(object,color)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/PolySpace.e:35
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/PolySpace.e',36).
% fluent Location(grid,object,xcoord,ycoord)
fluent(location(grid,object,xcoord,ycoord)).
==> mpred_prop(location(grid,object,xcoord,ycoord),fluent).
==> meta_argtypes(location(grid,object,xcoord,ycoord)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/PolySpace.e:36
% event Move(grid,object,xcoord,ycoord,xcoord,ycoord)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/PolySpace.e',36).
event(move(grid,object,xcoord,ycoord,xcoord,ycoord)).
==> mpred_prop(move(grid,object,xcoord,ycoord,xcoord,ycoord),event).
==> meta_argtypes(move(grid,object,xcoord,ycoord,xcoord,ycoord)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/PolySpace.e:38
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/PolySpace.e',39).
%; axioms
% [object1,object2]
 % Equal(object1,object2) -> Equal(object2,object1).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/PolySpace.e:40
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/PolySpace.e',41).

 /*  equal(Object1, Object2) ->
       equal(Object2, Object1).
 */


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/PolySpace.e:42
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/PolySpace.e',43).
%; objects have unique shape
% [object,shape1,shape2]
% Shape(object,shape1) & Shape(object,shape2) ->
% shape1=shape2.
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/PolySpace.e:45

 /*  shape(Object, Shape1), shape(Object, Shape2) ->
       equals(Shape1, Shape2).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/PolySpace.e',45).

 /*  not(shape(Object, Shape1)) :-
       shape(Object, Shape2),
       not(equals(Shape1, Shape2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/PolySpace.e',45).

 /*  [shape(Object, Shape2), not(equals(Shape1, Shape2))] ->
       ta(Ta_Param, tvs1=[], tvs2=[], not(shape(Object, Shape1))).
 */
axiom(not(shape(Object, Shape1)),
    [shape(Object, Shape2), not(equals(Shape1, Shape2))]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/PolySpace.e',45).

 /*  not(shape(Object, Shape2)) :-
       shape(Object, Shape1),
       not(equals(Shape1, Shape2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/PolySpace.e',45).

 /*  [shape(Object, Shape1), not(equals(Shape1, Shape2))] ->
       ta(Ta_Param4, tvs1=[], tvs2=[], not(shape(Object, Shape2))).
 */
axiom(not(shape(Object, Shape2)),
    [shape(Object, Shape1), not(equals(Shape2, Shape1))]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/PolySpace.e:47
%; objects have unique color
% [object,color1,color2]
% Color(object,color1) & Color(object,color2) ->
% color1=color2.
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/PolySpace.e:50
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/PolySpace.e',49).

 /*  color(Object, Color1), color(Object, Color2) ->
       equals(Color1, Color2).
 */

 /*  not(color(Object, Color1)) :-
       color(Object, Color2),
       not(equals(Color1, Color2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/PolySpace.e',49).

 /*  [color(Object, Color2), not(equals(Color1, Color2))] ->
       ta(Ta_Param, tvs1=[], tvs2=[], not(color(Object, Color1))).
 */
axiom(not(color(Object, Color1)),
    [color(Object, Color2), not(equals(Color1, Color2))]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/PolySpace.e',49).

 /*  not(color(Object, Color2)) :-
       color(Object, Color1),
       not(equals(Color1, Color2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/PolySpace.e',49).

 /*  [color(Object, Color1), not(equals(Color1, Color2))] ->
       ta(Ta_Param4, tvs1=[], tvs2=[], not(color(Object, Color2))).
 */
axiom(not(color(Object, Color2)),
    [color(Object, Color1), not(equals(Color2, Color1))]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/PolySpace.e:52
%; if objects are the same, they have the same shape
% [object1,object2]
% Equal(object1,object2) ->
% ({shape} Shape(object1,shape) & Shape(object2,shape)).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/PolySpace.e:55
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/PolySpace.e',54).

 /*  equal(Object1, Object2) ->
       exists([Shape],
               (shape(Object1, Shape), shape(Object2, Shape))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/PolySpace.e',54).

 /*  not(equal(Object1, Object2)) :-
       (   not(shape(Object1, Shape))
       ;   not(shape(Object2, Shape))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/PolySpace.e',54).

 /*  [(not(shape(Object1, Shape));not(shape(Object2, Shape)))] ->
       ta(Ta_Param, tvs1=[], tvs2=[], not(equal(Object1, Object2))).
 */
axiom(not(equal(Object1, Object2)),
   
    [  (not(shape(Object1, Shape));not(shape(Object2, Shape)))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/PolySpace.e',54).

 /*  shape(Object1, Shape) :-
       equal(Object1, Object2).
 */

 /*  [equal(Object1, Object2)] ->
       ta(Ta_Param4, tvs1=[], tvs2=[], shape(Object1, Shape)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/PolySpace.e',54).
axiom(shape(Object1, Shape),
    [equal(Object1, Object2)]).

 /*  shape(Object2, Shape) :-
       equal(Object1, Object2).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/PolySpace.e',54).

 /*  [equal(Object1, Object2)] ->
       ta(Ta_Param5, tvs1=[], tvs2=[], shape(Object2, Shape)).
 */
axiom(shape(Object2, Shape),
    [equal(Object1, Object2)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/PolySpace.e:57
%; if objects are the same, they have the same color
% [object1,object2]
% Equal(object1,object2) ->
% ({color} Color(object1,color) & Color(object2,color)).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/PolySpace.e:60
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/PolySpace.e',59).

 /*  equal(Object1, Object2) ->
       exists([Color],
               (color(Object1, Color), color(Object2, Color))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/PolySpace.e',59).

 /*  not(equal(Object1, Object2)) :-
       (   not(color(Object1, Color))
       ;   not(color(Object2, Color))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/PolySpace.e',59).

 /*  [(not(color(Object1, Color));not(color(Object2, Color)))] ->
       ta(Ta_Param, tvs1=[], tvs2=[], not(equal(Object1, Object2))).
 */
axiom(not(equal(Object1, Object2)),
   
    [  (not(color(Object1, Color));not(color(Object2, Color)))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/PolySpace.e',59).

 /*  color(Object1, Color) :-
       equal(Object1, Object2).
 */

 /*  [equal(Object1, Object2)] ->
       ta(Ta_Param4, tvs1=[], tvs2=[], color(Object1, Color)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/PolySpace.e',59).
axiom(color(Object1, Color),
    [equal(Object1, Object2)]).

 /*  color(Object2, Color) :-
       equal(Object1, Object2).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/PolySpace.e',59).

 /*  [equal(Object1, Object2)] ->
       ta(Ta_Param5, tvs1=[], tvs2=[], color(Object2, Color)).
 */
axiom(color(Object2, Color),
    [equal(Object1, Object2)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/PolySpace.e:62
%; if objects are the same, they have the same location
% [grid,object1,object2,xcoord1,ycoord1,xcoord2,ycoord2,time]
% Equal(object1,object2) ->
% (HoldsAt(Location(grid,object1,xcoord1,ycoord1),time) &
%  HoldsAt(Location(grid,object2,xcoord2,ycoord2),time) ->
%  xcoord1=xcoord2 & ycoord1=ycoord2).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/PolySpace.e:67
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/PolySpace.e',64).

 /*  equal(Object1, Object2) ->
       ( holds_at(location(Grid, Object1, Xcoord1, Ycoord1), Time), holds_at(location(Grid, Object2, Xcoord2, Ycoord2), Time)->equals(Xcoord1, Xcoord2), equals(Ycoord1, Ycoord2)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/PolySpace.e',64).

 /*  not(equal(Object1, Object2)) :-
       ( holds_at(location(Grid, Object1, Xcoord1, Ycoord1),
                  Time),
         holds_at(location(Grid, Object2, Xcoord2, Ycoord2),
                  Time)
       ),
       (   not(equals(Xcoord1, Xcoord2))
       ;   not(equals(Ycoord1, Ycoord2))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/PolySpace.e',64).

 /*  [holds_at(location(Grid, Object1, Xcoord1, Ycoord1), Time), holds_at(location(Grid, Object2, Xcoord2, Ycoord2), Time),  (not(equals(Xcoord1, Xcoord2));not(equals(Ycoord1, Ycoord2)))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(equal(Object1, Object2))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/PolySpace.e',64).
axiom(not(equal(Object1, Object2)),
   
    [ holds_at(location(Grid, Object1, Xcoord1, Ycoord1),
               Time),
      holds_at(location(Grid, Object2, Xcoord2, Ycoord2),
               Time),
       (not(equals(Xcoord1, Xcoord2));not(equals(Ycoord1, Ycoord2)))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/PolySpace.e',64).

 /*  not(holds_at(location(Grid, Object1, Xcoord1, Ycoord1), Time)) :-
       holds_at(location(Grid, Object2, Xcoord2, Ycoord2),
                Time),
       (   not(equals(Xcoord1, Xcoord2))
       ;   not(equals(Ycoord1, Ycoord2))
       ),
       equal(Object1, Object2).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/PolySpace.e',64).

 /*  [holds_at(location(Grid, Object2, Xcoord2, Ycoord2), Time),  (not(equals(Xcoord1, Xcoord2));not(equals(Ycoord1, Ycoord2))), equal(Object1, Object2)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(location(Grid,
                                Object1,
                                Xcoord1,
                                Ycoord1)),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/PolySpace.e',64).
axiom(holds_at(neg(location(Grid, Object1, Xcoord1, Ycoord1)), Time),
   
    [ holds_at(location(Grid, Object2, Xcoord2, Ycoord2),
               Time),
       (not(equals(Xcoord1, Xcoord2));not(equals(Ycoord1, Ycoord2))),
      equal(Object1, Object2)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/PolySpace.e',64).

 /*  not(holds_at(location(Grid, Object2, Xcoord2, Ycoord2), Time)) :-
       holds_at(location(Grid, Object1, Xcoord1, Ycoord1),
                Time),
       (   not(equals(Xcoord1, Xcoord2))
       ;   not(equals(Ycoord1, Ycoord2))
       ),
       equal(Object1, Object2).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/PolySpace.e',64).

 /*  [holds_at(location(Grid, Object1, Xcoord1, Ycoord1), Time),  (not(equals(Xcoord1, Xcoord2));not(equals(Ycoord1, Ycoord2))), equal(Object1, Object2)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(location(Grid,
                                Object2,
                                Xcoord2,
                                Ycoord2)),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/PolySpace.e',64).
axiom(holds_at(neg(location(Grid, Object2, Xcoord2, Ycoord2)), Time),
   
    [ holds_at(location(Grid, Object1, Xcoord1, Ycoord1),
               Time),
       (not(equals(Xcoord2, Xcoord1));not(equals(Ycoord2, Ycoord1))),
      equal(Object1, Object2)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/PolySpace.e:69
%; object in one location at a time
% [grid,object,xcoord1,ycoord1,xcoord2,ycoord2,time]
% HoldsAt(Location(grid,object,xcoord1,ycoord1),time) &
% HoldsAt(Location(grid,object,xcoord2,ycoord2),time) ->
% xcoord1=xcoord2 & ycoord1=ycoord2.
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/PolySpace.e:73
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/PolySpace.e',71).

 /*  holds_at(location(Grid, Object, Xcoord1, Ycoord1), Time), holds_at(location(Grid, Object, Xcoord2, Ycoord2), Time) ->
       equals(Xcoord1, Xcoord2),
       equals(Ycoord1, Ycoord2).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/PolySpace.e',71).

 /*  not(holds_at(location(Grid, Object, Xcoord1, Ycoord1), Time)) :-
       holds_at(location(Grid, Object, Xcoord2, Ycoord2),
                Time),
       (   not(equals(Xcoord1, Xcoord2))
       ;   not(equals(Ycoord1, Ycoord2))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/PolySpace.e',71).

 /*  [holds_at(location(Grid, Object, Xcoord2, Ycoord2), Time),  (not(equals(Xcoord1, Xcoord2));not(equals(Ycoord1, Ycoord2)))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(location(Grid,
                                Object,
                                Xcoord1,
                                Ycoord1)),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/PolySpace.e',71).
axiom(holds_at(neg(location(Grid, Object, Xcoord1, Ycoord1)), Time),
   
    [ holds_at(location(Grid, Object, Xcoord2, Ycoord2),
               Time),
       (not(equals(Xcoord1, Xcoord2));not(equals(Ycoord1, Ycoord2)))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/PolySpace.e',71).

 /*  not(holds_at(location(Grid, Object, Xcoord2, Ycoord2), Time)) :-
       holds_at(location(Grid, Object, Xcoord1, Ycoord1),
                Time),
       (   not(equals(Xcoord1, Xcoord2))
       ;   not(equals(Ycoord1, Ycoord2))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/PolySpace.e',71).

 /*  [holds_at(location(Grid, Object, Xcoord1, Ycoord1), Time),  (not(equals(Xcoord1, Xcoord2));not(equals(Ycoord1, Ycoord2)))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(location(Grid,
                                Object,
                                Xcoord2,
                                Ycoord2)),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/PolySpace.e',71).
axiom(holds_at(neg(location(Grid, Object, Xcoord2, Ycoord2)), Time),
   
    [ holds_at(location(Grid, Object, Xcoord1, Ycoord1),
               Time),
       (not(equals(Xcoord2, Xcoord1));not(equals(Ycoord2, Ycoord1)))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/PolySpace.e:75
%; objects have locations
% [grid,object,time]
% (
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/PolySpace.e:77
% {xcoord,ycoord} HoldsAt(Location(grid,object,xcoord,ycoord),time)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/PolySpace.e',77).

 /*  exists([Xcoord,Ycoord],
    holds_at(location(Grid,Object,Xcoord,Ycoord),
   	 Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/PolySpace.e',77).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(location(Grid, Object, Xcoord, Ycoord),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/PolySpace.e',77).
axiom(holds_at(location(Grid, Object, Xcoord, Ycoord), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/PolySpace.e:79
%; different objects are not at same location
% [grid,object1,object2,xcoord1,ycoord1,time]
% HoldsAt(Location(grid,object1,xcoord1,ycoord1),time) &
% HoldsAt(Location(grid,object2,xcoord1,ycoord1),time) ->
% Equal(object1,object2).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/PolySpace.e:83
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/PolySpace.e',81).

 /*  holds_at(location(Grid, Object1, Xcoord1, Ycoord1), Time), holds_at(location(Grid, Object2, Xcoord1, Ycoord1), Time) ->
       equal(Object1, Object2).
 */

 /*  equal(Object1, Object2) :-
       holds_at(location(Grid, Object1, Xcoord1, Ycoord1),
                Time),
       holds_at(location(Grid, Object2, Xcoord1, Ycoord1),
                Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/PolySpace.e',81).

 /*  [holds_at(location(Grid, Object1, Xcoord1, Ycoord1), Time), holds_at(location(Grid, Object2, Xcoord1, Ycoord1), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          equal(Object1, Object2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/PolySpace.e',81).
axiom(equal(Object1, Object2),
   
    [ holds_at(location(Grid, Object1, Xcoord1, Ycoord1),
               Time),
      holds_at(location(Grid, Object2, Xcoord1, Ycoord1),
               Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/PolySpace.e',81).

 /*  not(holds_at(location(Grid, Object1, Xcoord1, Ycoord1), Time)) :-
       holds_at(location(Grid, Object2, Xcoord1, Ycoord1),
                Time),
       not(equal(Object1, Object2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/PolySpace.e',81).

 /*  [holds_at(location(Grid, Object2, Xcoord1, Ycoord1), Time), not(equal(Object1, Object2))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(location(Grid,
                                Object1,
                                Xcoord1,
                                Ycoord1)),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/PolySpace.e',81).
axiom(holds_at(neg(location(Grid, Object1, Xcoord1, Ycoord1)), Time),
   
    [ holds_at(location(Grid, Object2, Xcoord1, Ycoord1),
               Time),
      not(equal(Object1, Object2))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/PolySpace.e',81).

 /*  not(holds_at(location(Grid, Object2, Xcoord1, Ycoord1), Time)) :-
       holds_at(location(Grid, Object1, Xcoord1, Ycoord1),
                Time),
       not(equal(Object1, Object2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/PolySpace.e',81).

 /*  [holds_at(location(Grid, Object1, Xcoord1, Ycoord1), Time), not(equal(Object1, Object2))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(location(Grid,
                                Object2,
                                Xcoord1,
                                Ycoord1)),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/PolySpace.e',81).
axiom(holds_at(neg(location(Grid, Object2, Xcoord1, Ycoord1)), Time),
   
    [ holds_at(location(Grid, Object1, Xcoord1, Ycoord1),
               Time),
      not(equal(Object1, Object2))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/PolySpace.e:85
%; moving to a location causes an object to be at that location
% [grid,object,xcoord1,ycoord1,xcoord2,ycoord2,time]
% Initiates(Move(grid,object,xcoord1,ycoord1,xcoord2,ycoord2),
%           Location(grid,object,xcoord2,ycoord2),
%           time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/PolySpace.e:89
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/PolySpace.e',87).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(move(Grid,
                         Object,
                         Xcoord1,
                         Ycoord1,
                         Xcoord2,
                         Ycoord2),
                    location(Grid, Object, Xcoord2, Ycoord2),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/PolySpace.e',87).
axiom(initiates(move(Grid, Object, Xcoord1, Ycoord1, Xcoord2, Ycoord2), location(Grid, Object, Xcoord2, Ycoord2), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/PolySpace.e:91
%; moving to a location causes the object no longer to be at its previous
%; location
% [grid,object,xcoord1,ycoord1,xcoord2,ycoord2,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/PolySpace.e:94
% Terminates(Move(grid,object,xcoord1,ycoord1,xcoord2,ycoord2),
%            Location(grid,object,xcoord1,ycoord1),
%            time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/PolySpace.e:96
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/PolySpace.e',94).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(move(Grid,
                          Object,
                          Xcoord1,
                          Ycoord1,
                          Xcoord2,
                          Ycoord2),
                     location(Grid,
                              Object,
                              Xcoord1,
                              Ycoord1),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/PolySpace.e',94).
axiom(terminates(move(Grid, Object, Xcoord1, Ycoord1, Xcoord2, Ycoord2), location(Grid, Object, Xcoord1, Ycoord1), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/PolySpace.e:98
%;; allow diagonal movements
%;[grid,object,xcoord1,ycoord1,xcoord2,ycoord2,time]
%;Happens(Move(grid,object,xcoord1,ycoord1,xcoord2,ycoord2),time) ->
%;HoldsAt(Location(grid,object,xcoord1,ycoord1),time) &
%;(xcoord1=xcoord2 |
%; xcoord1=xcoord2+1 |
%; xcoord1=xcoord2-1) &
%;(ycoord1=ycoord2 |
%; ycoord1=ycoord2+1 |
%; ycoord1=ycoord2-1).
%; only allow right angle movements
% [grid,object,xcoord1,ycoord1,xcoord2,ycoord2,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/PolySpace.e:111
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/PolySpace.e',112).
% Happens(Move(grid,object,xcoord1,ycoord1,xcoord2,ycoord2),time) ->
% HoldsAt(Location(grid,object,xcoord1,ycoord1),time) &
% ((xcoord1=xcoord2 & (ycoord1=ycoord2+1 | ycoord1=ycoord2-1)) |
%  (ycoord1=ycoord2 & (xcoord1=xcoord2+1 | xcoord1=xcoord2-1))).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/PolySpace.e:114
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/PolySpace.e',112).

 /*  happens(move(Grid, Object, Xcoord1, Ycoord1, Xcoord2, Ycoord2), Time) ->
       holds_at(location(Grid, Object, Xcoord1, Ycoord1),
                Time),
       (   equals(Xcoord1, Xcoord2),
           (   equals(Ycoord1, Ycoord2+1)
           ;   equals(Ycoord1, Ycoord2-1)
           )
       ;   equals(Ycoord1, Ycoord2),
           (   equals(Xcoord1, Xcoord2+1)
           ;   equals(Xcoord1, Xcoord2-1)
           )
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/PolySpace.e',112).

 /*  not(happens(move(Grid, Object, Xcoord1, Ycoord1, Xcoord2, Ycoord2), Time)) :-
       (   not(holds_at(location(Grid,
                                 Object,
                                 Xcoord1,
                                 Ycoord1),
                        Time))
       ;   (   not(equals(Xcoord1, Xcoord2))
           ;   not(equals(Ycoord1, Ycoord2+1)),
               not(equals(Ycoord1, Ycoord2-1))
           ),
           (   not(equals(Ycoord1, Ycoord2))
           ;   not(equals(Xcoord1, Xcoord2+1)),
               not(equals(Xcoord1, Xcoord2-1))
           )
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/PolySpace.e',112).

 /*  [(holds_at(neg(location(Grid, Object, Xcoord1, Ycoord1)), Time);(not(equals(Xcoord1, Xcoord2));not(equals(Ycoord1, Ycoord2+1)), not(equals(Ycoord1, Ycoord2-1))), (not(equals(Ycoord1, Ycoord2));not(equals(Xcoord1, Xcoord2+1)), not(equals(Xcoord1, Xcoord2-1))))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(move(Grid,
                           Object,
                           Xcoord1,
                           Ycoord1,
                           Xcoord2,
                           Ycoord2),
                      Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/PolySpace.e',112).
axiom(not(happens(move(Grid, Object, Xcoord1, Ycoord1, Xcoord2, Ycoord2), Time)),
   
    [  (holds_at(neg(location(Grid, Object, Xcoord1, Ycoord1)), Time);(not(equals(Xcoord1, Xcoord2));not(equals(Ycoord1, Ycoord2+1)), not(equals(Ycoord1, Ycoord2-1))), (not(equals(Ycoord1, Ycoord2));not(equals(Xcoord1, Xcoord2+1)), not(equals(Xcoord1, Xcoord2-1))))
    ]).

 /*  holds_at(location(Grid, Object, Xcoord1, Ycoord1), Time) :-
       happens(move(Grid,
                    Object,
                    Xcoord1,
                    Ycoord1,
                    Xcoord2,
                    Ycoord2),
               Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/PolySpace.e',112).

 /*  [holds_at(metreqs(move(Grid, Object, Xcoord1, Ycoord1, Xcoord2, Ycoord2)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(move(Grid,
                        Object,
                        Xcoord1,
                        Ycoord1,
                        Xcoord2,
                        Ycoord2),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/PolySpace.e',112).
axiom(requires(move(Grid, Object, Xcoord1, Ycoord1, Xcoord2, Ycoord2), Time),
   
    [ holds_at(metreqs(move(Grid,
                            Object,
                            Xcoord1,
                            Ycoord1,
                            Xcoord2,
                            Ycoord2)),
               Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/PolySpace.e',112).

 /*  [holds_at(location(Grid, Object, Xcoord1, Ycoord1), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(move(Grid,
                                Object,
                                Xcoord1,
                                Ycoord1,
                                Xcoord2,
                                Ycoord2)),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/PolySpace.e',112).
axiom(holds_at(metreqs(move(Grid, Object, Xcoord1, Ycoord1, Xcoord2, Ycoord2)), Time),
   
    [ holds_at(location(Grid, Object, Xcoord1, Ycoord1),
               Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/PolySpace.e:116
%; End of file.
