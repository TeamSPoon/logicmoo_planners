:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',329).
% translate: unskipped  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e.lps 
:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(lps).
% translate: begining  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e.lps 
% Thu, 08 Oct 2020 21:37:06 GMT File: <stream>(0x55894c1dc700)%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; DEV-MUC3-0147
%; ShootingAttack
%;
%; @article{Mueller:2004c,
%;   author = "Erik T. Mueller",
%;   year = "2004",
%;   title = "Understanding script-based stories using commonsense reasoning",
%;   journal = "Cognitive Systems Research",
%;   volume = "5",
%;   number = "4",
%;   pages = "307--340",
%; }
%;

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',25).
% ignore SkyOf, GroundOf, Near, WalkFromTo, RunFromTo
% ignore(skyOf).
ignore(skyOf).
% ignore(groundOf).
ignore(groundOf).
% ignore(near).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',25).
ignore(near).
% ignore(walkFromTo).
ignore(walkFromTo).
% ignore(runFromTo).
ignore(runFromTo).

% ignore RollAlong, Diameter, Move, HoldSome
% ignore(rollAlong).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',25).
ignore(rollAlong).
% ignore(diameter).
ignore(diameter).
% ignore(move).
ignore(move).
% ignore(holdSome).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',25).
ignore(holdSome).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',27).
% ignore TakeOutOf, On, DoorUnlock, DoorLock, WalkThroughDoor12
% ignore(takeOutOf).
ignore(takeOutOf).
% ignore(on).
ignore(on).
% ignore(doorUnlock).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',27).
ignore(doorUnlock).
% ignore(doorLock).
ignore(doorLock).
% ignore(walkThroughDoor12).
ignore(walkThroughDoor12).

% ignore WalkThroughDoor21, WalkDownStaircase, WalkUpStaircase
% ignore(walkThroughDoor21).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',27).
ignore(walkThroughDoor21).
% ignore(walkDownStaircase).
ignore(walkDownStaircase).
% ignore(walkUpStaircase).
ignore(walkUpStaircase).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',30).
% ignore Love, ThreatenedBy
% ignore(love).
ignore(love).
% ignore(threatenedBy).
ignore(threatenedBy).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',32).
% load foundations/Root.e
:- if(is_e_toplevel).
:- load_e_cond('foundations/Root.e', changed).
 %  load('/pack/logicmoo_ec/ext/ec_sources/foundations/Root.e',changed).
:- endif.

% load foundations/EC.e
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',32).
:- if(is_e_toplevel).
:- load_e_cond('foundations/EC.e', changed).
 %  load('/pack/logicmoo_ec/ext/ec_sources/foundations/EC.e',changed).
:- endif.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',34).
% load answers/Mueller2003/Ontology.e
:- if(is_e_toplevel).
:- load_e_cond('answers/Mueller2003/Ontology.e', changed).
 %  load('/pack/logicmoo_ec/ext/ec_sources/ecnet/Ontology.e',changed).
:- endif.

% load answers/Mueller2004c/OTSpaceM.e
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',34).
:- if(is_e_toplevel).
:- load_e_cond('answers/Mueller2004c/OTSpaceM.e', changed).
 %  load('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',changed).
:- endif.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',36).
% load answers/Mueller2004c/RTSpaceM.e
:- if(is_e_toplevel).
:- load_e_cond('answers/Mueller2004c/RTSpaceM.e', changed).
 %  load('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',changed).
:- endif.

% load answers/Mueller2004c/Condition.e
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',36).
:- if(is_e_toplevel).
:- load_e_cond('answers/Mueller2004c/Condition.e', changed).
 %  load('/pack/logicmoo_ec/ext/ec_sources/ecnet/Condition.e',changed).
:- endif.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',38).
% load answers/Mueller2004c/Gun.e
:- if(is_e_toplevel).
:- load_e_cond('answers/Mueller2004c/Gun.e', changed).
 %  load('/pack/logicmoo_ec/ext/ec_sources/ecnet/Gun.e',changed).
:- endif.

% load answers/Mueller2003/Sleep.e
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',38).
:- if(is_e_toplevel).
:- load_e_cond('answers/Mueller2003/Sleep.e', changed).
 %  load('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',changed).
:- endif.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',41).
% gun Gun1
% t(gun,gun1).
gun(gun1).

% bullet Bullet1
% t(bullet,bullet1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',41).
bullet(bullet1).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',43).
% HoldsAt(Intact(Gun1),0).
% initially(
%    intact(gun1)).
initially intact(gun1).
 %  initial_state([intact(gun1)]).
 %  "% =================================".


% HoldsAt(Intact(Bullet1),0).
% initially(
%    intact(bullet1)).
initially intact(bullet1).
 %  initial_state([intact(bullet1)]).
 %  "% =================================".

% agent Perp1
% t(agent,perp1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',45).
agent(perp1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',48).
% physobj PhysTarget1
% t(physobj,physTarget1).
physobj(physTarget1).


% HoldsAt(Intact(PhysTarget1),0).
% initially(
%    intact(physTarget1)).
initially intact(physTarget1).
 %  initial_state([intact(physTarget1)]).
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',50).
% HoldsAt(At(PhysTarget1,Outside1),0).
% initially(
%    at(physTarget1,outside1)).
initially loc_at(physTarget1, outside1).
 %  initial_state([loc_at(physTarget1,outside1)]).
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',52).
%; prune

% sort shoota, shootb, shooto, shooth, shootp
% sort(shoota).
sort(shoota).
% sort(shootb).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',52).
sort(shootb).
% sort(shooto).
sort(shooto).
% sort(shooth).
sort(shooth).
% sort(shootp).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',52).
sort(shootp).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',54).
% event! Shoot(shoota,shootb,shooto)
% event(
%    shoot(shoota,shootb,shooto)).
events([shoot/3]).
% mpred_prop(
%    shoot(shoota,shootb,shooto), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',54).
mpred_prop(shoot(shoota,shootb,shooto),event).

% event! ShootInjure(shoota,shootb,shooth)
% event(
%    shootInjure(shoota,shootb,shooth)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',54).
events([shootInjure/3]).
% mpred_prop(
%    shootInjure(shoota,shootb,shooth), 
%    event).
mpred_prop(shootInjure(shoota,shootb,shooth),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',56).
% event! ShootKill(shoota,shootb,shooth)
% event(
%    shootKill(shoota,shootb,shooth)).
events([shootKill/3]).
% mpred_prop(
%    shootKill(shoota,shootb,shooth), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',56).
mpred_prop(shootKill(shoota,shootb,shooth),event).

% event! ShootDamage(shoota,shootb,shootp)
% event(
%    shootDamage(shoota,shootb,shootp)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',56).
events([shootDamage/3]).
% mpred_prop(
%    shootDamage(shoota,shootb,shootp), 
%    event).
mpred_prop(shootDamage(shoota,shootb,shootp),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',58).
% event! ShootDestroy(shoota,shootb,shootp)
% event(
%    shootDestroy(shoota,shootb,shootp)).
events([shootDestroy/3]).
% mpred_prop(
%    shootDestroy(shoota,shootb,shootp), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',58).
mpred_prop(shootDestroy(shoota,shootb,shootp),event).

% shoota! Perp1
% t(shoota,perp1).
shoota(perp1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',60).
% shootb! Gun1
% t(shootb,gun1).
shootb(gun1).

% shooto! PhysTarget1
% t(shooto,physTarget1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',60).
shooto(physTarget1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',62).
% shootp! PhysTarget1
% t(shootp,physTarget1).
shootp(physTarget1).
%; room-scale topological space

% outside Outside1
% t(outside,outside1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',64).
outside(outside1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',66).
% outside Outside2
% t(outside,outside2).
outside(outside2).

% room Inside1
% t(room,inside1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',66).
room(inside1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',68).
% door Door1
% t(door,door1).
door(door1).

% building Building1
% t(building,building1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',68).
building(building1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',70).
% street Street1
% t(street,street1).
street(street1).


% Side1(Door1)=Outside1.
% side1Pred(door1,outside1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',70).
side1Pred(door1,outside1).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',72).
% Side2(Door1)=Inside1.
% side2Pred(door1,inside1).
side2Pred(door1,inside1).


% LookOutOnto(Inside1)=Outside1.
% lookOutOntoPred(inside1,outside1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',72).
lookOutOntoPred(inside1,outside1).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',74).
% Floor(Inside1)=1.
% floorPred(inside1,1).
floorPred(inside1,1).


% BuildingOf(Inside1)=Building1.
% building(inside1,building1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',74).
building(inside1,building1).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',76).
% Side1(Street1)=Outside1.
% side1Pred(street1,outside1).
side1Pred(street1,outside1).


% Side2(Street1)=Outside2.
% side2Pred(street1,outside2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',76).
side2Pred(street1,outside2).


% HoldsAt(Alive(Perp1),0).
% initially(
%    alive(perp1)).
initially alive(perp1).
 %  initial_state([alive(perp1)]).
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',80).
% HoldsAt(Awake(Perp1),0).
% initially(
%    awake(perp1)).
initially awake(perp1).
 %  initial_state([awake(perp1)]).
 %  "% =================================".


% HoldsAt(Standing(Perp1),0).
% initially(
%    standing(perp1)).
initially standing(perp1).
 %  initial_state([standing(perp1)]).
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',82).
% HoldsAt(Sleep2(Perp1),0).
% initially(
%    sleep2(perp1)).
initially sleep2(perp1).
 %  initial_state([sleep2(perp1)]).
 %  "% =================================".


% !HoldsAt(Injured(Perp1),0).
% initially(
%    neg(
%       injured(perp1))).
initially not injured(perp1).
 %  initial_state([not(injured(perp1))]).
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',84).
% [object]
 % !HoldsAt(Holding(Perp1,object),0).
% initially(
%    neg(
%       holding(perp1,Object))).
initially not holding(perp1, Object).
 %  initial_state([not(holding(perp1,Object))]).
 %  "% =================================".


% HoldsAt(At(Gun1,Outside2),0).
% initially(
%    at(gun1,outside2)).
initially loc_at(gun1, outside2).
 %  initial_state([loc_at(gun1,outside2)]).
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',86).
% HoldsAt(At(Perp1,Outside2),0).
% initially(
%    at(perp1,outside2)).
initially loc_at(perp1, outside2).
 %  initial_state([loc_at(perp1,outside2)]).
 %  "% =================================".


% HoldsAt(At(Bullet1,Outside2),0).
% initially(
%    at(bullet1,outside2)).
initially loc_at(bullet1, outside2).
 %  initial_state([loc_at(bullet1,outside2)]).
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',88).
% HoldsAt(DoorIsOpen(Door1),0).
% initially(
%    doorIsOpen(door1)).
initially doorIsOpen(door1).
 %  initial_state([doorIsOpen(door1)]).
 %  "% =================================".


% HoldsAt(DoorUnlocked(Door1),0).
% initially(
%    doorUnlocked(door1)).
initially doorUnlocked(door1).
 %  initial_state([doorUnlocked(door1)]).
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',90).
% [physobj1,physobj2]
 % !HoldsAt(Inside(physobj1,physobj2),0).
% initially(
%    neg(
%       inside(Physobj1,Physobj2))).
initially not inside(Physobj1, Physobj2).
 %  initial_state([not(inside(Physobj1,Physobj2))]).
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',92).
%; narrative


% Happens(PickUp(Perp1,Gun1),0).
% happens(
%    pickUp(perp1,gun1), 
%    start).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',92).
observe(at(pickUp(perp1,gun1),start)).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',94).
% Happens(PickUp(Perp1,Bullet1),1).
% happens(
%    pickUp(perp1,bullet1), 
%    start+1).
observe pickUp(perp1, bullet1)at start+1.
 %  observe([pickUp(perp1,bullet1)],start+1).
 %  "% =================================".


% Happens(PutInside(Perp1,Bullet1,Gun1),2).
% happens(
%    putInside(perp1,bullet1,gun1), 
%    start+2).
observe putInside(perp1, bullet1, gun1)at start+2.
 %  observe([putInside(perp1,bullet1,gun1)],start+2).
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',96).
% Happens(WalkStreet21(Perp1,Street1),3).
% happens(
%    walkStreet21(perp1,street1), 
%    start+3).
observe walkStreet21(perp1, street1)at start+3.
 %  observe([walkStreet21(perp1,street1)],start+3).
 %  "% =================================".


% Happens(Shoot(Perp1,Gun1,PhysTarget1),4).
% happens(
%    shoot(perp1,gun1,physTarget1), 
%    start+4).
observe shoot(perp1, gun1, physTarget1)at start+4.
 %  observe([shoot(perp1,gun1,physTarget1)],start+4).
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',98).
% Happens(ShootDestroy(Perp1,Gun1,PhysTarget1),4).
% happens(
%    shootDestroy(perp1,gun1,physTarget1), 
%    start+4).
observe shootDestroy(perp1, gun1, physTarget1)at start+4.
 %  observe([shootDestroy(perp1,gun1,physTarget1)],start+4).
 %  "% =================================".


% Happens(WalkStreet12(Perp1,Street1),5).
% happens(
%    walkStreet12(perp1,street1), 
%    start+5).
observe walkStreet12(perp1, street1)at start+5.
 %  observe([walkStreet12(perp1,street1)],start+5).
 %  "% =================================".

% range time 0 6
% range(time,0,6).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',100).
range(time,0,6).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',102).
% range offset 0 3
% range(offset,0,3).
range(offset,0,3).

% range diameter 0 0
% range(diameter,0,0).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',102).
range(diameter,0,0).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',105).
% completion Happens
% completion(happens).
completion(happens).
%; End of file.
% translate: ending  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e.lps 
