:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',329).
% translate: unskipped  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e.lps 
:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(lps).
% translate: begining  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e.lps 
% Thu, 08 Oct 2020 19:06:53 GMT File: <stream>(0x5600a3ab6400)%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; DEV-MUC3-0147
%; ShootingAttack
%;
%; @article{Mueller:2004c,
%;   author = "Erik T. Mueller",
%;   year = "2004",
%;   title = "Understanding script-based stories using commonsense reasoning",
%;   journal = "Cognitive Systems Research",
%;   volume = "5",
%;   number = "4",
%;   pages = "307--340",
%; }
%;

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',25).
% ignore SkyOf, GroundOf, Near, WalkFromTo, RunFromTo
 %  pl=axiom(ignore(skyOf),[]).
ignore(skyOf).
 %  ignore(skyOf).
 %  pl=axiom(ignore(groundOf),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',25).
ignore(groundOf).
 %  ignore(groundOf).
 %  pl=axiom(ignore(near),[]).
ignore(near).
 %  ignore(near).
 %  pl=axiom(ignore(walkFromTo),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',25).
ignore(walkFromTo).
 %  ignore(walkFromTo).
 %  pl=axiom(ignore(runFromTo),[]).
ignore(runFromTo).
 %  ignore(runFromTo).

% ignore RollAlong, Diameter, Move, HoldSome
 %  pl=axiom(ignore(rollAlong),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',25).
ignore(rollAlong).
 %  ignore(rollAlong).
 %  pl=axiom(ignore(diameter),[]).
ignore(diameter).
 %  ignore(diameter).
 %  pl=axiom(ignore(move),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',25).
ignore(move).
 %  ignore(move).
 %  pl=axiom(ignore(holdSome),[]).
ignore(holdSome).
 %  ignore(holdSome).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',27).
% ignore TakeOutOf, On, DoorUnlock, DoorLock, WalkThroughDoor12
 %  pl=axiom(ignore(takeOutOf),[]).
ignore(takeOutOf).
 %  ignore(takeOutOf).
 %  pl=axiom(ignore(on),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',27).
ignore(on).
 %  ignore(on).
 %  pl=axiom(ignore(doorUnlock),[]).
ignore(doorUnlock).
 %  ignore(doorUnlock).
 %  pl=axiom(ignore(doorLock),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',27).
ignore(doorLock).
 %  ignore(doorLock).
 %  pl=axiom(ignore(walkThroughDoor12),[]).
ignore(walkThroughDoor12).
 %  ignore(walkThroughDoor12).

% ignore WalkThroughDoor21, WalkDownStaircase, WalkUpStaircase
 %  pl=axiom(ignore(walkThroughDoor21),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',27).
ignore(walkThroughDoor21).
 %  ignore(walkThroughDoor21).
 %  pl=axiom(ignore(walkDownStaircase),[]).
ignore(walkDownStaircase).
 %  ignore(walkDownStaircase).
 %  pl=axiom(ignore(walkUpStaircase),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',27).
ignore(walkUpStaircase).
 %  ignore(walkUpStaircase).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',30).
% ignore Love, ThreatenedBy
 %  pl=axiom(ignore(love),[]).
ignore(love).
 %  ignore(love).
 %  pl=axiom(ignore(threatenedBy),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',30).
ignore(threatenedBy).
 %  ignore(threatenedBy).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',32).
% load foundations/Root.e
:- if(is_e_toplevel).
:- load_e_cond('foundations/Root.e', changed).
 %  load('/pack/logicmoo_ec/ext/ec_sources/foundations/Root.e',changed).
:- endif.

% load foundations/EC.e
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',32).
:- if(is_e_toplevel).
:- load_e_cond('foundations/EC.e', changed).
 %  load('/pack/logicmoo_ec/ext/ec_sources/foundations/EC.e',changed).
:- endif.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',34).
% load answers/Mueller2003/Ontology.e
:- if(is_e_toplevel).
:- load_e_cond('answers/Mueller2003/Ontology.e', changed).
 %  load('/pack/logicmoo_ec/ext/ec_sources/ecnet/Ontology.e',changed).
:- endif.

% load answers/Mueller2004c/OTSpaceM.e
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',34).
:- if(is_e_toplevel).
:- load_e_cond('answers/Mueller2004c/OTSpaceM.e', changed).
 %  load('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',changed).
:- endif.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',36).
% load answers/Mueller2004c/RTSpaceM.e
:- if(is_e_toplevel).
:- load_e_cond('answers/Mueller2004c/RTSpaceM.e', changed).
 %  load('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',changed).
:- endif.

% load answers/Mueller2004c/Condition.e
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',36).
:- if(is_e_toplevel).
:- load_e_cond('answers/Mueller2004c/Condition.e', changed).
 %  load('/pack/logicmoo_ec/ext/ec_sources/ecnet/Condition.e',changed).
:- endif.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',38).
% load answers/Mueller2004c/Gun.e
:- if(is_e_toplevel).
:- load_e_cond('answers/Mueller2004c/Gun.e', changed).
 %  load('/pack/logicmoo_ec/ext/ec_sources/ecnet/Gun.e',changed).
:- endif.

% load answers/Mueller2003/Sleep.e
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',38).
:- if(is_e_toplevel).
:- load_e_cond('answers/Mueller2003/Sleep.e', changed).
 %  load('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',changed).
:- endif.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',41).
% gun Gun1
 %  t(gun,gun1).
gun(gun1).
 %  gun(gun1).

% bullet Bullet1
 %  t(bullet,bullet1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',41).
bullet(bullet1).
 %  bullet(bullet1).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',43).
% HoldsAt(Intact(Gun1),0).
 %  pl=axiom(initially(intact(gun1)),[]).
initially intact(gun1).
 %  initial_state([intact(gun1)]).
 %  initial_state([intact(gun1)]).


% HoldsAt(Intact(Bullet1),0).
 %  pl=axiom(initially(intact(bullet1)),[]).
initially intact(bullet1).
 %  initial_state([intact(bullet1)]).
 %  initial_state([intact(bullet1)]).

% agent Perp1
 %  t(agent,perp1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',45).
agent(perp1).
 %  agent(perp1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',48).
% physobj PhysTarget1
 %  t(physobj,physTarget1).
physobj(physTarget1).
 %  physobj(physTarget1).


% HoldsAt(Intact(PhysTarget1),0).
 %  pl=axiom(initially(intact(physTarget1)),[]).
initially intact(physTarget1).
 %  initial_state([intact(physTarget1)]).
 %  initial_state([intact(physTarget1)]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',50).
% HoldsAt(At(PhysTarget1,Outside1),0).
 %  pl=axiom(initially(at(physTarget1,outside1)),[]).
 %  initially(at(physTarget1,outside1)).
initially loc_at(physTarget1, outside1).
 %  initial_state([loc_at(physTarget1,outside1)]).
 %  initial_state([loc_at(physTarget1,outside1)]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',52).
%; prune

% sort shoota, shootb, shooto, shooth, shootp
sort(shoota).
 %  sort(shoota).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',52).
sort(shootb).
 %  sort(shootb).
sort(shooto).
 %  sort(shooto).
sort(shooth).
 %  sort(shooth).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',52).
sort(shootp).
 %  sort(shootp).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',54).
% event! Shoot(shoota,shootb,shooto)
 %  blue=event(shoot(shoota,shootb,shooto)).
 %  event(shoot(shoota,shootb,shooto)).
events([shoot/3]).
 %  events([shoot/3]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',54).
mpred_prop(shoot(shoota,shootb,shooto),event).
 %  mpred_prop(shoot(shoota,shootb,shooto),event).

% event! ShootInjure(shoota,shootb,shooth)
 %  blue=event(shootInjure(shoota,shootb,shooth)).
 %  event(shootInjure(shoota,shootb,shooth)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',54).
events([shootInjure/3]).
 %  events([shootInjure/3]).
mpred_prop(shootInjure(shoota,shootb,shooth),event).
 %  mpred_prop(shootInjure(shoota,shootb,shooth),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',56).
% event! ShootKill(shoota,shootb,shooth)
 %  blue=event(shootKill(shoota,shootb,shooth)).
 %  event(shootKill(shoota,shootb,shooth)).
events([shootKill/3]).
 %  events([shootKill/3]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',56).
mpred_prop(shootKill(shoota,shootb,shooth),event).
 %  mpred_prop(shootKill(shoota,shootb,shooth),event).

% event! ShootDamage(shoota,shootb,shootp)
 %  blue=event(shootDamage(shoota,shootb,shootp)).
 %  event(shootDamage(shoota,shootb,shootp)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',56).
events([shootDamage/3]).
 %  events([shootDamage/3]).
mpred_prop(shootDamage(shoota,shootb,shootp),event).
 %  mpred_prop(shootDamage(shoota,shootb,shootp),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',58).
% event! ShootDestroy(shoota,shootb,shootp)
 %  blue=event(shootDestroy(shoota,shootb,shootp)).
 %  event(shootDestroy(shoota,shootb,shootp)).
events([shootDestroy/3]).
 %  events([shootDestroy/3]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',58).
mpred_prop(shootDestroy(shoota,shootb,shootp),event).
 %  mpred_prop(shootDestroy(shoota,shootb,shootp),event).

% shoota! Perp1
 %  t(shoota,perp1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',58).
shoota(perp1).
 %  shoota(perp1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',60).
% shootb! Gun1
 %  t(shootb,gun1).
shootb(gun1).
 %  shootb(gun1).

% shooto! PhysTarget1
 %  t(shooto,physTarget1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',60).
shooto(physTarget1).
 %  shooto(physTarget1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',62).
% shootp! PhysTarget1
 %  t(shootp,physTarget1).
shootp(physTarget1).
 %  shootp(physTarget1).
%; room-scale topological space

% outside Outside1
 %  t(outside,outside1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',64).
outside(outside1).
 %  outside(outside1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',66).
% outside Outside2
 %  t(outside,outside2).
outside(outside2).
 %  outside(outside2).

% room Inside1
 %  t(room,inside1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',66).
room(inside1).
 %  room(inside1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',68).
% door Door1
 %  t(door,door1).
door(door1).
 %  door(door1).

% building Building1
 %  t(building,building1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',68).
building(building1).
 %  building(building1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',70).
% street Street1
 %  t(street,street1).
street(street1).
 %  street(street1).


% Side1(Door1)=Outside1.
 %  pl=axiom(side1Pred(door1,outside1),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',70).
side1Pred(door1,outside1).
 %  side1Pred(door1,outside1).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',72).
% Side2(Door1)=Inside1.
 %  pl=axiom(side2Pred(door1,inside1),[]).
side2Pred(door1,inside1).
 %  side2Pred(door1,inside1).


% LookOutOnto(Inside1)=Outside1.
 %  pl=axiom(lookOutOntoPred(inside1,outside1),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',72).
lookOutOntoPred(inside1,outside1).
 %  lookOutOntoPred(inside1,outside1).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',74).
% Floor(Inside1)=1.
 %  pl=axiom(floorPred(inside1,1),[]).
floorPred(inside1,1).
 %  floorPred(inside1,1).


% BuildingOf(Inside1)=Building1.
 %  pl=axiom(building(inside1,building1),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',74).
building(inside1,building1).
 %  building(inside1,building1).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',76).
% Side1(Street1)=Outside1.
 %  pl=axiom(side1Pred(street1,outside1),[]).
side1Pred(street1,outside1).
 %  side1Pred(street1,outside1).


% Side2(Street1)=Outside2.
 %  pl=axiom(side2Pred(street1,outside2),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',76).
side2Pred(street1,outside2).
 %  side2Pred(street1,outside2).


% HoldsAt(Alive(Perp1),0).
 %  pl=axiom(initially(alive(perp1)),[]).
initially alive(perp1).
 %  initial_state([alive(perp1)]).
 %  initial_state([alive(perp1)]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',80).
% HoldsAt(Awake(Perp1),0).
 %  pl=axiom(initially(awake(perp1)),[]).
initially awake(perp1).
 %  initial_state([awake(perp1)]).
 %  initial_state([awake(perp1)]).


% HoldsAt(Standing(Perp1),0).
 %  pl=axiom(initially(standing(perp1)),[]).
initially standing(perp1).
 %  initial_state([standing(perp1)]).
 %  initial_state([standing(perp1)]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',82).
% HoldsAt(Sleep2(Perp1),0).
 %  pl=axiom(initially(sleep2(perp1)),[]).
initially sleep2(perp1).
 %  initial_state([sleep2(perp1)]).
 %  initial_state([sleep2(perp1)]).


% !HoldsAt(Injured(Perp1),0).
 %  pl=axiom(initially(neg(injured(perp1))),[]).
 %  initially(neg(injured(perp1))).
initially not injured(perp1).
 %  initial_state([not(injured(perp1))]).
 %  initial_state([not(injured(perp1))]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',84).
% [object]
 % !HoldsAt(Holding(Perp1,object),0).
 %  pl=axiom(initially(neg(holding(perp1,Object))),[]).
 %  initially(neg(holding(perp1,Object))).
initially not holding(perp1, Object).
 %  initial_state([not(holding(perp1,Object))]).
 %  initial_state([not(holding(perp1,Object))]).


% HoldsAt(At(Gun1,Outside2),0).
 %  pl=axiom(initially(at(gun1,outside2)),[]).
 %  initially(at(gun1,outside2)).
initially loc_at(gun1, outside2).
 %  initial_state([loc_at(gun1,outside2)]).
 %  initial_state([loc_at(gun1,outside2)]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',86).
% HoldsAt(At(Perp1,Outside2),0).
 %  pl=axiom(initially(at(perp1,outside2)),[]).
 %  initially(at(perp1,outside2)).
initially loc_at(perp1, outside2).
 %  initial_state([loc_at(perp1,outside2)]).
 %  initial_state([loc_at(perp1,outside2)]).


% HoldsAt(At(Bullet1,Outside2),0).
 %  pl=axiom(initially(at(bullet1,outside2)),[]).
 %  initially(at(bullet1,outside2)).
initially loc_at(bullet1, outside2).
 %  initial_state([loc_at(bullet1,outside2)]).
 %  initial_state([loc_at(bullet1,outside2)]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',88).
% HoldsAt(DoorIsOpen(Door1),0).
 %  pl=axiom(initially(doorIsOpen(door1)),[]).
initially doorIsOpen(door1).
 %  initial_state([doorIsOpen(door1)]).
 %  initial_state([doorIsOpen(door1)]).


% HoldsAt(DoorUnlocked(Door1),0).
 %  pl=axiom(initially(doorUnlocked(door1)),[]).
initially doorUnlocked(door1).
 %  initial_state([doorUnlocked(door1)]).
 %  initial_state([doorUnlocked(door1)]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',90).
% [physobj1,physobj2]
 % !HoldsAt(Inside(physobj1,physobj2),0).
 %  pl=axiom(initially(neg(inside(Physobj1,Physobj2))),[]).
 %  initially(neg(inside(Physobj1,Physobj2))).
initially not inside(Physobj1, Physobj2).
 %  initial_state([not(inside(Physobj1,Physobj2))]).
 %  initial_state([not(inside(Physobj1,Physobj2))]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',92).
%; narrative


% Happens(PickUp(Perp1,Gun1),0).
 %  pl=axiom(happens(pickUp(perp1,gun1),start),[]).
 %  happens(pickUp(perp1,gun1),start).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',92).
observe(at(pickUp(perp1,gun1),start)).
 %  observe(at(pickUp(perp1,gun1),start)).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',94).
% Happens(PickUp(Perp1,Bullet1),1).
 %  pl=axiom(happens(pickUp(perp1,bullet1),When),[b(start,When)]).

 /*  b(start, When) ->
       happens(pickUp(perp1, bullet1), When).
 */
if b(start, When)then happens(pickUp(perp1, bullet1), When).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',94).

 /*  reactive_rule([b(start,When)],
   	      [happens(pickUp(perp1,bullet1),When)]).
 */

 /*  reactive_rule([b(start,When)],
   	      [happens(pickUp(perp1,bullet1),When)]).
 */


% Happens(PutInside(Perp1,Bullet1,Gun1),2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',94).

 /*  pl=axiom(happens(putInside(perp1,bullet1,gun1),Start_Num2),
         [b(start,Start_Num2),toffset(start,2,Start_Num2)]).
 */

 /*  (   b(start, Start_Num2),
       toffset(start, 2, Start_Num2)
   ->  happens(putInside(perp1, bullet1, gun1), Start_Num2)
   ).
 */
if b(start, Start_Num2), toffset(start, 2, Start_Num2)then happens(putInside(perp1, bullet1, gun1), Start_Num2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',94).

 /*  reactive_rule([ b(start,Start_Num2),
   		toffset(start,2,Start_Num2)
   	      ],
   	      [happens(putInside(perp1,bullet1,gun1),Start_Num2)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',94).

 /*  reactive_rule([ b(start,Start_Num2),
   		toffset(start,2,Start_Num2)
   	      ],
   	      [happens(putInside(perp1,bullet1,gun1),Start_Num2)]).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',96).
% Happens(WalkStreet21(Perp1,Street1),3).

 /*  pl=axiom(happens(walkStreet21(perp1,street1),Start_Num3),
         [b(start,Start_Num3),toffset(start,3,Start_Num3)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',96).

 /*  (   b(start, Start_Num3),
       toffset(start, 3, Start_Num3)
   ->  happens(walkStreet21(perp1, street1), Start_Num3)
   ).
 */
if b(start, Start_Num3), toffset(start, 3, Start_Num3)then happens(walkStreet21(perp1, street1), Start_Num3).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',96).

 /*  reactive_rule([ b(start,Start_Num3),
   		toffset(start,3,Start_Num3)
   	      ],
   	      [happens(walkStreet21(perp1,street1),Start_Num3)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',96).

 /*  reactive_rule([ b(start,Start_Num3),
   		toffset(start,3,Start_Num3)
   	      ],
   	      [happens(walkStreet21(perp1,street1),Start_Num3)]).
 */


% Happens(Shoot(Perp1,Gun1,PhysTarget1),4).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',96).

 /*  pl=axiom(happens(shoot(perp1,gun1,physTarget1),Start_Num4),
         [b(start,Start_Num4),toffset(start,4,Start_Num4)]).
 */

 /*  (   b(start, Start_Num4),
       toffset(start, 4, Start_Num4)
   ->  happens(shoot(perp1, gun1, physTarget1), Start_Num4)
   ).
 */
if b(start, Start_Num4), toffset(start, 4, Start_Num4)then happens(shoot(perp1, gun1, physTarget1), Start_Num4).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',96).

 /*  reactive_rule([ b(start,Start_Num4),
   		toffset(start,4,Start_Num4)
   	      ],
   	      [happens(shoot(perp1,gun1,physTarget1),Start_Num4)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',96).

 /*  reactive_rule([ b(start,Start_Num4),
   		toffset(start,4,Start_Num4)
   	      ],
   	      [happens(shoot(perp1,gun1,physTarget1),Start_Num4)]).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',98).
% Happens(ShootDestroy(Perp1,Gun1,PhysTarget1),4).

 /*  pl=axiom(happens(shootDestroy(perp1,gun1,physTarget1),Start_Num4),
         [b(start,Start_Num4),toffset(start,4,Start_Num4)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',98).

 /*  (   b(start, Start_Num4),
       toffset(start, 4, Start_Num4)
   ->  happens(shootDestroy(perp1, gun1, physTarget1), Start_Num4)
   ).
 */
if b(start, Start_Num4), toffset(start, 4, Start_Num4)then happens(shootDestroy(perp1, gun1, physTarget1), Start_Num4).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',98).

 /*  reactive_rule([ b(start,Start_Num4),
   		toffset(start,4,Start_Num4)
   	      ],
   	      [ happens(shootDestroy(perp1,gun1,physTarget1),
   			Start_Num4)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',98).

 /*  reactive_rule([ b(start,Start_Num4),
   		toffset(start,4,Start_Num4)
   	      ],
   	      [ happens(shootDestroy(perp1,gun1,physTarget1),
   			Start_Num4)
   	      ]).
 */


% Happens(WalkStreet12(Perp1,Street1),5).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',98).

 /*  pl=axiom(happens(walkStreet12(perp1,street1),Start_Num5),
         [b(start,Start_Num5),toffset(start,5,Start_Num5)]).
 */

 /*  (   b(start, Start_Num5),
       toffset(start, 5, Start_Num5)
   ->  happens(walkStreet12(perp1, street1), Start_Num5)
   ).
 */
if b(start, Start_Num5), toffset(start, 5, Start_Num5)then happens(walkStreet12(perp1, street1), Start_Num5).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',98).

 /*  reactive_rule([ b(start,Start_Num5),
   		toffset(start,5,Start_Num5)
   	      ],
   	      [happens(walkStreet12(perp1,street1),Start_Num5)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',98).

 /*  reactive_rule([ b(start,Start_Num5),
   		toffset(start,5,Start_Num5)
   	      ],
   	      [happens(walkStreet12(perp1,street1),Start_Num5)]).
 */

% range time 0 6
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',100).
range(time,0,6).
 %  range(time,0,6).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',102).
% range offset 0 3
range(offset,0,3).
 %  range(offset,0,3).

% range diameter 0 0
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',102).
range(diameter,0,0).
 %  range(diameter,0,0).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',105).
% completion Happens
completion(happens).
 %  completion(happens).
%; End of file.
% translate: ending  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e.lps 
