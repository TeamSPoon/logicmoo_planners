:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PlayNeed.e',131).
% translate: unskipped  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/PolySpace.e.lps 
:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(lps).
% translate: begining  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/PolySpace.e.lps 
% Wed, 07 Oct 2020 09:36:15 GMT File: <stream>(0x5557c8f01100)%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @phdthesis{Cassimatis:2002,
%;   author = "Nicholas L. Cassimatis",
%;   year = "2002",
%;   title = "Polyscheme: A Cognitive Architecture for Integrating Multiple Representation and Inference Schemes",
%;   address = "Cambridge, MA",
%;   school = "Program in Media Arts and Sciences, School of Architecture and Planning, Massachusetts Institute of Technology",
%; }
%;
%; sorts

% sort object
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PolySpace.e',20).
sort(object).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PolySpace.e',22).
% sort xcoord: integer
subsort(xcoord,integer).

% sort ycoord: integer
subsort(ycoord,integer).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PolySpace.e',24).
% sort grid
sort(grid).

% sort shape
sort(shape).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PolySpace.e',26).
% sort color
sort(color).
%; constants

% shape Round,Square
 %  t(shape,round).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PolySpace.e',28).
shape(round).
 %  t(shape,square).
shape(square).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PolySpace.e',30).
% color Red,Green
 %  t(color,red).
color(red).
 %  t(color,green).
color(green).
%; predicates, fluents, and events

% predicate Equal(object,object)
 %  predicate(equal(object,object)).
 %  predicate(equal(object,object)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PolySpace.e',32).
predicates([equal/2]).
mpred_prop(equal(object,object),predicate).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PolySpace.e',34).
% predicate Shape(object,shape)
 %  predicate(shape(object,shape)).
 %  predicate(shape(object,shape)).
predicates([shape/2]).
mpred_prop(shape(object,shape),predicate).

% predicate Color(object,color)
 %  predicate(color(object,color)).
 %  predicate(color(object,color)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PolySpace.e',34).
predicates([color/2]).
mpred_prop(color(object,color),predicate).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PolySpace.e',36).
% fluent Location(grid,object,xcoord,ycoord)
 %  fluent(location(grid,object,xcoord,ycoord)).
 %  fluent(location(grid,object,xcoord,ycoord)).
fluents([location/4]).
mpred_prop(location(grid,object,xcoord,ycoord),fluent).

% event Move(grid,object,xcoord,ycoord,xcoord,ycoord)
 %  event(move(grid,object,xcoord,ycoord,xcoord,ycoord)).
 %  event(move(grid,object,xcoord,ycoord,xcoord,ycoord)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PolySpace.e',36).
events([move/6]).
mpred_prop(move(grid,object,xcoord,ycoord,xcoord,ycoord),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PolySpace.e',39).
%; axioms
% [object1,object2]
 % Equal(object1,object2) -> Equal(object2,object1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PolySpace.e',41).

 /*  equal(Object1, Object2) ->
       equal(Object2, Object1).
 */
then(if(equal(Object1,Object2)),
     equal(Object2,Object1)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PolySpace.e',41).

 /*  reactive_rule([equal(Object1,Object2)],
   	      [equal(Object2,Object1)]).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PolySpace.e',43).
%; objects have unique shape
% [object,shape1,shape2]
% Shape(object,shape1) & Shape(object,shape2) ->
% shape1=shape2.

 /*  (   shape(Object, Shape1),
       shape(Object, Shape2)
   ->  equals(Shape1, Shape2)
   ).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PolySpace.e',45).
then(if((shape(Object, Shape1), shape(Object, Shape2))), equals(Shape1, Shape2)).

 /*  reactive_rule([ shape(Object,Shape1),
   		shape(Object,Shape2)
   	      ],
   	      [equals(Shape1,Shape2)]).
 */


%; objects have unique color
% [object,color1,color2]
% Color(object,color1) & Color(object,color2) ->
% color1=color2.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PolySpace.e',49).

 /*  (   color(Object, Color1),
       color(Object, Color2)
   ->  equals(Color1, Color2)
   ).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PolySpace.e',49).
then(if((color(Object, Color1), color(Object, Color2))), equals(Color1, Color2)).

 /*  reactive_rule([ color(Object,Color1),
   		color(Object,Color2)
   	      ],
   	      [equals(Color1,Color2)]).
 */


%; if objects are the same, they have the same shape
% [object1,object2]
% Equal(object1,object2) ->
% ({shape} Shape(object1,shape) & Shape(object2,shape)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PolySpace.e',54).

 /*  (   equal(Object1, Object2)
   ->  exists([Shape],
               (shape(Object1, Shape), shape(Object2, Shape)))
   ).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PolySpace.e',54).
then(if(equal(Object1, Object2)), exists([Shape],  (shape(Object1, Shape), shape(Object2, Shape)))).
 %  reactive_rule([equal(Object1, Object2)], [exists([Shape],  (shape(Object1, Shape), shape(Object2, Shape)))]).


%; if objects are the same, they have the same color
% [object1,object2]
% Equal(object1,object2) ->
% ({color} Color(object1,color) & Color(object2,color)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PolySpace.e',59).

 /*  (   equal(Object1, Object2)
   ->  exists([Color],
               (color(Object1, Color), color(Object2, Color)))
   ).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PolySpace.e',59).
then(if(equal(Object1, Object2)), exists([Color],  (color(Object1, Color), color(Object2, Color)))).
 %  reactive_rule([equal(Object1, Object2)], [exists([Color],  (color(Object1, Color), color(Object2, Color)))]).


%; if objects are the same, they have the same location
% [grid,object1,object2,xcoord1,ycoord1,xcoord2,ycoord2,time]
% Equal(object1,object2) ->
% (HoldsAt(Location(grid,object1,xcoord1,ycoord1),time) &
%  HoldsAt(Location(grid,object2,xcoord2,ycoord2),time) ->
%  xcoord1=xcoord2 & ycoord1=ycoord2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PolySpace.e',64).

 /*  (   equal(Object1, Object2)
   ->  holds_at(location(Grid, Object1, Xcoord1, Ycoord1),
                Time),
       holds_at(location(Grid, Object2, Xcoord2, Ycoord2),
                Time)
   ->  equals(Xcoord1, Xcoord2),
       equals(Ycoord1, Ycoord2)
   ).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PolySpace.e',64).
then(if(equal(Object1, Object2)), then(if((at(location(Grid, Object1, Xcoord1, Ycoord1), Time), at(location(Grid, Object2, Xcoord2, Ycoord2), Time))),  (equals(Xcoord1, Xcoord2), equals(Ycoord1, Ycoord2)))).
 %  reactive_rule([equal(Object1, Object2)], [(([holds(location(Grid, Object1, Xcoord1, Ycoord1), Time), holds(location(Grid, Object2, Xcoord2, Ycoord2), Time)]->[equals(Xcoord1, Xcoord2), equals(Ycoord1, Ycoord2)]);[true])]).


%; object in one location at a time
% [grid,object,xcoord1,ycoord1,xcoord2,ycoord2,time]
% HoldsAt(Location(grid,object,xcoord1,ycoord1),time) &
% HoldsAt(Location(grid,object,xcoord2,ycoord2),time) ->
% xcoord1=xcoord2 & ycoord1=ycoord2.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PolySpace.e',71).

 /*  (   holds_at(location(Grid, Object, Xcoord1, Ycoord1),
                Time),
       holds_at(location(Grid, Object, Xcoord2, Ycoord2),
                Time)
   ->  equals(Xcoord1, Xcoord2),
       equals(Ycoord1, Ycoord2)
   ).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PolySpace.e',71).
then(if((at(location(Grid, Object, Xcoord1, Ycoord1), Time), at(location(Grid, Object, Xcoord2, Ycoord2), Time))),  (equals(Xcoord1, Xcoord2), equals(Ycoord1, Ycoord2))).

 /*  reactive_rule([ holds(location(Grid,
   			       Object,
   			       Xcoord1,
   			       Ycoord1),
   		      Time),
   		holds(location(Grid,
   			       Object,
   			       Xcoord2,
   			       Ycoord2),
   		      Time)
   	      ],
   	      [ equals(Xcoord1,Xcoord2),
   		equals(Ycoord1,Ycoord2)
   	      ]).
 */


%; objects have locations
% [grid,object,time]
% (% {xcoord,ycoord} HoldsAt(Location(grid,object,xcoord,ycoord),time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PolySpace.e',77).

 /*  clausify_pnf=exists([Xcoord,Ycoord],
          holds_at(location(Grid,
   			 Object,
   			 Xcoord,
   			 Ycoord),
   		Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PolySpace.e',77).

 /*  fix_axiom_head(Time) ->
       [ holds_at(location(Grid, Object, Xcoord, Ycoord),
                  Time),
          (->),
         location(Grid, Object, Xcoord, Ycoord)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PolySpace.e',77).

 /*  axiom(location(Grid, Object, Xcoord, Ycoord),
       []).
 */
location(LocationP_Num4_V,_,_,Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PolySpace.e',77).

 /*  l_int(holds(location(LocationP_Num4_V,
   		     _,
   		     _,
   		     Location),
   	    Holds),
         []).
 */


%; different objects are not at same location
% [grid,object1,object2,xcoord1,ycoord1,time]
% HoldsAt(Location(grid,object1,xcoord1,ycoord1),time) &
% HoldsAt(Location(grid,object2,xcoord1,ycoord1),time) ->
% Equal(object1,object2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PolySpace.e',81).

 /*  (   holds_at(location(Grid, Object1, Xcoord1, Ycoord1),
                Time),
       holds_at(location(Grid, Object2, Xcoord1, Ycoord1),
                Time)
   ->  equal(Object1, Object2)
   ).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PolySpace.e',81).
then(if((at(location(Grid, Object1, Xcoord1, Ycoord1), Time), at(location(Grid, Object2, Xcoord1, Ycoord1), Time))), equal(Object1, Object2)).

 /*  reactive_rule([ holds(location(Grid,
   			       Object1,
   			       Xcoord1,
   			       Ycoord1),
   		      Time),
   		holds(location(Grid,
   			       Object2,
   			       Xcoord1,
   			       Ycoord1),
   		      Time)
   	      ],
   	      [equal(Object1,Object2)]).
 */


%; moving to a location causes an object to be at that location
% [grid,object,xcoord1,ycoord1,xcoord2,ycoord2,time]
% Initiates(Move(grid,object,xcoord1,ycoord1,xcoord2,ycoord2),
%           Location(grid,object,xcoord2,ycoord2),
%           time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PolySpace.e',87).

 /*  axiom(initiates(move(Grid, Object, Xcoord1, Ycoord1, Xcoord2, Ycoord2), location(Grid, Object, Xcoord2, Ycoord2), Time),
       []).
 */

 /*  initiates(move(MoveP_Num6_V,
   	       A,
   	       _,
   	       _,
   	       B,
   	       Move),
   	  location(MoveP_Num6_V,A,B,Move),
   	  Initiates).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PolySpace.e',87).
initiates(move(MoveP_Num6_V,
	       A,
	       _,
	       _,
	       B,
	       Move),
	  location(MoveP_Num6_V,A,B,Move)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PolySpace.e',87).

 /*  initiated(happens(move(MoveP_Num6_V,
   		       A,
   		       _,
   		       _,
   		       B,
   		       Move),
   		  Time_From,
   		  Time_Until),
   	  location(MoveP_Num6_V,A,B,Move),
   	  []).
 */


%; moving to a location causes the object no longer to be at its previous
%; location
% [grid,object,xcoord1,ycoord1,xcoord2,ycoord2,time]
% Terminates(Move(grid,object,xcoord1,ycoord1,xcoord2,ycoord2),
%            Location(grid,object,xcoord1,ycoord1),
%            time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PolySpace.e',94).

 /*  axiom(terminates(move(Grid, Object, Xcoord1, Ycoord1, Xcoord2, Ycoord2), location(Grid, Object, Xcoord1, Ycoord1), Time),
       []).
 */

 /*  terminates(move(MoveP_Num6_V,
   		A,
   		B,
   		Location,
   		_,
   		Move),
   	   location(MoveP_Num6_V,A,B,Location),
   	   Terminates).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PolySpace.e',94).
terminates(move(MoveP_Num6_V,
		A,
		B,
		Location,
		_,
		Move),
	   location(MoveP_Num6_V,A,B,Location)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PolySpace.e',94).

 /*  terminated(happens(move(MoveP_Num6_V,
   			A,
   			B,
   			Location,
   			_,
   			Move),
   		   Time_From,
   		   Time_Until),
   	   location(MoveP_Num6_V,A,B,Location),
   	   []).
 */


%;; allow diagonal movements
%;[grid,object,xcoord1,ycoord1,xcoord2,ycoord2,time]
%;Happens(Move(grid,object,xcoord1,ycoord1,xcoord2,ycoord2),time) ->
%;HoldsAt(Location(grid,object,xcoord1,ycoord1),time) &
%;(xcoord1=xcoord2 |
%; xcoord1=xcoord2+1 |
%; xcoord1=xcoord2-1) &
%;(ycoord1=ycoord2 |
%; ycoord1=ycoord2+1 |
%; ycoord1=ycoord2-1).
%; only allow right angle movements
% [grid,object,xcoord1,ycoord1,xcoord2,ycoord2,time]
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PolySpace.e',112).
% Happens(Move(grid,object,xcoord1,ycoord1,xcoord2,ycoord2),time) ->
% HoldsAt(Location(grid,object,xcoord1,ycoord1),time) &
% ((xcoord1=xcoord2 & (ycoord1=ycoord2+1 | ycoord1=ycoord2-1)) |
%  (ycoord1=ycoord2 & (xcoord1=xcoord2+1 | xcoord1=xcoord2-1))).

 /*  (   happens(move(Grid,
                    Object,
                    Xcoord1,
                    Ycoord1,
                    Xcoord2,
                    Ycoord2),
               Time)
   ->  holds_at(location(Grid, Object, Xcoord1, Ycoord1),
                Time),
       (   equals(Xcoord1, Xcoord2),
           (   equals(Ycoord1, Ycoord2+1)
           ;   equals(Ycoord1, Ycoord2-1)
           )
       ;   equals(Ycoord1, Ycoord2),
           (   equals(Xcoord1, Xcoord2+1)
           ;   equals(Xcoord1, Xcoord2-1)
           )
       )
   ).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PolySpace.e',112).
then(if(happens(move(Grid, Object, Xcoord1, Ycoord1, Xcoord2, Ycoord2), Time)),  (at(location(Grid, Object, Xcoord1, Ycoord1), Time), (equals(Xcoord1, Xcoord2), (equals(Ycoord1, Ycoord2+1);equals(Ycoord1, Ycoord2-1));equals(Ycoord1, Ycoord2), (equals(Xcoord1, Xcoord2+1);equals(Xcoord1, Xcoord2-1))))).
 %  reactive_rule([happens(move(Grid, Object, Xcoord1, Ycoord1, Xcoord2, Ycoord2), Time)], [holds(location(Grid, Object, Xcoord1, Ycoord1), Time),  (equals(Xcoord1, Xcoord2), (equals(Ycoord1, Ycoord2+1);equals(Ycoord1, Ycoord2-1));equals(Ycoord1, Ycoord2), (equals(Xcoord1, Xcoord2+1);equals(Xcoord1, Xcoord2-1)))]).


%; End of file.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PolySpace.e',116).
% translate: ending  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/PolySpace.e.lps 
