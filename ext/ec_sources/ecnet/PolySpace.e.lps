:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PlayNeed.e',131).
% translate: unskipped  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/PolySpace.e.lps 
:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(lps).
% translate: begining  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/PolySpace.e.lps 
% Thu, 08 Oct 2020 21:36:35 GMT File: <stream>(0x55894c216300)%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @phdthesis{Cassimatis:2002,
%;   author = "Nicholas L. Cassimatis",
%;   year = "2002",
%;   title = "Polyscheme: A Cognitive Architecture for Integrating Multiple Representation and Inference Schemes",
%;   address = "Cambridge, MA",
%;   school = "Program in Media Arts and Sciences, School of Architecture and Planning, Massachusetts Institute of Technology",
%; }
%;
%; sorts

% sort object
% sort(object).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PolySpace.e',20).
sort(object).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PolySpace.e',22).
% sort xcoord: integer
% subsort(xcoord,integer).
subsort(xcoord,integer).

% sort ycoord: integer
% subsort(ycoord,integer).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PolySpace.e',22).
subsort(ycoord,integer).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PolySpace.e',24).
% sort grid
% sort(grid).
sort(grid).

% sort shape
% sort(shape).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PolySpace.e',24).
sort(shape).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PolySpace.e',26).
% sort color
% sort(color).
sort(color).
%; constants

% shape Round,Square
% t(shape,round).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PolySpace.e',28).
shape(round).
% t(shape,square).
shape(square).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PolySpace.e',30).
% color Red,Green
% t(color,red).
color(red).
% t(color,green).
color(green).
%; predicates, fluents, and events

% predicate Equal(object,object)
% predicate(
%    equal(object,object)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PolySpace.e',32).
predicates([equal/2]).
% mpred_prop(
%    equal(object,object), 
%    predicate).
mpred_prop(equal(object,object),predicate).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PolySpace.e',34).
% predicate Shape(object,shape)
% predicate(
%    shape(object,shape)).
predicates([shape/2]).
% mpred_prop(
%    shape(object,shape), 
%    predicate).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PolySpace.e',34).
mpred_prop(shape(object,shape),predicate).

% predicate Color(object,color)
% predicate(
%    color(object,color)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PolySpace.e',34).
predicates([color/2]).
% mpred_prop(
%    color(object,color), 
%    predicate).
mpred_prop(color(object,color),predicate).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PolySpace.e',36).
% fluent Location(grid,object,xcoord,ycoord)
% fluent(
%    location(grid,object,xcoord,ycoord)).
fluents([location/4]).
% mpred_prop(
%    location(grid,object,xcoord,ycoord), 
%    fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PolySpace.e',36).
mpred_prop(location(grid,object,xcoord,ycoord),fluent).

% event Move(grid,object,xcoord,ycoord,xcoord,ycoord)
% event(
%    move(grid,object,xcoord,ycoord,xcoord,ycoord)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PolySpace.e',36).
events([move/6]).
% mpred_prop(
%    move(grid,object,xcoord,ycoord,xcoord,ycoord), 
%    event).
mpred_prop(move(grid,object,xcoord,ycoord,xcoord,ycoord),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PolySpace.e',39).
%; axioms
% [object1,object2]
 % Equal(object1,object2) -> Equal(object2,object1).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PolySpace.e',43).
%; objects have unique shape
% [object,shape1,shape2]
% Shape(object,shape1) & Shape(object,shape2) ->
% shape1=shape2.
% '->'(
%    ','(
%       shape(Object,Shape2), 
%       not(
%          equals(Shape1,Shape2))), 
%    not(
%       shape(Object,Shape1))).
if shape(Object, Shape2), not equals(Shape1, Shape2)then not shape(Object, Shape1).

 /*  reactive_rule([ shape(Object,Shape2),
   		not(equals(Shape1,Shape2))
   	      ],
   	      [not(shape(Object,Shape1))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       shape(Object,Shape1), 
%       not(
%          equals(Shape2,Shape1))), 
%    not(
%       shape(Object,Shape2))).
if shape(Object, Shape1), not equals(Shape2, Shape1)then not shape(Object, Shape2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PolySpace.e',45).

 /*  reactive_rule([ shape(Object,Shape1),
   		not(equals(Shape2,Shape1))
   	      ],
   	      [not(shape(Object,Shape2))]).
 */
 %  "% =================================".


%; objects have unique color
% [object,color1,color2]
% Color(object,color1) & Color(object,color2) ->
% color1=color2.
% '->'(
%    ','(
%       color(Object,Color2), 
%       not(
%          equals(Color1,Color2))), 
%    not(
%       color(Object,Color1))).
if color(Object, Color2), not equals(Color1, Color2)then not color(Object, Color1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PolySpace.e',49).

 /*  reactive_rule([ color(Object,Color2),
   		not(equals(Color1,Color2))
   	      ],
   	      [not(color(Object,Color1))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       color(Object,Color1), 
%       not(
%          equals(Color2,Color1))), 
%    not(
%       color(Object,Color2))).
if color(Object, Color1), not equals(Color2, Color1)then not color(Object, Color2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PolySpace.e',49).

 /*  reactive_rule([ color(Object,Color1),
   		not(equals(Color2,Color1))
   	      ],
   	      [not(color(Object,Color2))]).
 */
 %  "% =================================".


%; if objects are the same, they have the same shape
% [object1,object2]
% Equal(object1,object2) ->
% ({shape} Shape(object1,shape) & Shape(object2,shape)).
% '->'(
%    ';'(
%       not(
%          shape(Object1,Shape)), 
%       not(
%          shape(Object2,Shape))), 
%    not(
%       equal(Object1,Object2))).
if not shape(Object1, Shape);not shape(Object2, Shape)then not equal(Object1, Object2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PolySpace.e',54).

 /*   reactive_rule([  (not(shape(Object1, Shape));not(shape(Object2, Shape)))
                    ],
                    [not(equal(Object1, Object2))]).
 */
 %  "% =================================".
% '->'(
%    equal(Object1,Object2), 
%    shape(Object1,Shape)).
if equal(Object1, Object2)then shape(Object1, Shape).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PolySpace.e',54).

 /*  reactive_rule([equal(Object1,Object2)],
   	      [shape(Object1,Shape)]).
 */
 %  "% =================================".
% '->'(
%    equal(Object1,Object2), 
%    shape(Object2,Shape)).
if equal(Object1, Object2)then shape(Object2, Shape).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PolySpace.e',54).

 /*  reactive_rule([equal(Object1,Object2)],
   	      [shape(Object2,Shape)]).
 */
 %  "% =================================".


%; if objects are the same, they have the same color
% [object1,object2]
% Equal(object1,object2) ->
% ({color} Color(object1,color) & Color(object2,color)).
% '->'(
%    ';'(
%       not(
%          color(Object1,Color)), 
%       not(
%          color(Object2,Color))), 
%    not(
%       equal(Object1,Object2))).
if not color(Object1, Color);not color(Object2, Color)then not equal(Object1, Object2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PolySpace.e',59).

 /*   reactive_rule([  (not(color(Object1, Color));not(color(Object2, Color)))
                    ],
                    [not(equal(Object1, Object2))]).
 */
 %  "% =================================".
% '->'(
%    equal(Object1,Object2), 
%    color(Object1,Color)).
if equal(Object1, Object2)then color(Object1, Color).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PolySpace.e',59).

 /*  reactive_rule([equal(Object1,Object2)],
   	      [color(Object1,Color)]).
 */
 %  "% =================================".
% '->'(
%    equal(Object1,Object2), 
%    color(Object2,Color)).
if equal(Object1, Object2)then color(Object2, Color).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PolySpace.e',59).

 /*  reactive_rule([equal(Object1,Object2)],
   	      [color(Object2,Color)]).
 */
 %  "% =================================".


%; if objects are the same, they have the same location
% [grid,object1,object2,xcoord1,ycoord1,xcoord2,ycoord2,time]
% Equal(object1,object2) ->
% (HoldsAt(Location(grid,object1,xcoord1,ycoord1),time) &
%  HoldsAt(Location(grid,object2,xcoord2,ycoord2),time) ->
%  xcoord1=xcoord2 & ycoord1=ycoord2).
% '->'(
%    ','(
%       location(Grid,Object1,Xcoord1,Ycoord1), 
%       ','(
%          location(Grid,Object2,Xcoord2,Ycoord2), 
%          ';'(
%             not(
%                equals(Xcoord1,Xcoord2)), 
%             not(
%                equals(Ycoord1,Ycoord2))))), 
%    not(
%       equal(Object1,Object2))).
if location(Grid, Object1, Xcoord1, Ycoord1), location(Grid, Object2, Xcoord2, Ycoord2), (not equals(Xcoord1, Xcoord2);not equals(Ycoord1, Ycoord2))then not equal(Object1, Object2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PolySpace.e',64).

 /*   reactive_rule([ holds(location(Grid,
                                     Object1,
                                     Xcoord1,
                                     Ycoord1),
                            Time_At),
                      holds(location(Grid,
                                     Object2,
                                     Xcoord2,
                                     Ycoord2),
                            Time_At),
                       (not(equals(Xcoord1, Xcoord2));not(equals(Ycoord1, Ycoord2)))
                    ],
                    [not(equal(Object1, Object2))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       location(Grid,Object2,Xcoord2,Ycoord2), 
%       ','(
%          ';'(
%             not(
%                equals(Xcoord1,Xcoord2)), 
%             not(
%                equals(Ycoord1,Ycoord2))), 
%          equal(Object1,Object2))), 
%    not(
%       location(Grid,Object1,Xcoord1,Ycoord1))).
not location(Grid, Object1, Xcoord1, Ycoord1)if location(Grid, Object2, Xcoord2, Ycoord2), (not equals(Xcoord1, Xcoord2);not equals(Ycoord1, Ycoord2)), equal(Object1, Object2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PolySpace.e',64).

 /*   l_int(holds(not(location(Grid,
                               Object1,
                               Xcoord1,
                               Ycoord1)),
                  Time_At9),
            [ holds(location(Grid,
                             Object2,
                             Xcoord2,
                             Ycoord2),
                    Time_At9),
               (not(equals(Xcoord1, Xcoord2));not(equals(Ycoord1, Ycoord2))),
              equal(Object1, Object2)
            ]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       location(Grid,Object1,Xcoord1,Ycoord1), 
%       ','(
%          ';'(
%             not(
%                equals(Xcoord2,Xcoord1)), 
%             not(
%                equals(Ycoord2,Ycoord1))), 
%          equal(Object1,Object2))), 
%    not(
%       location(Grid,Object2,Xcoord2,Ycoord2))).
not location(Grid, Object2, Xcoord2, Ycoord2)if location(Grid, Object1, Xcoord1, Ycoord1), (not equals(Xcoord2, Xcoord1);not equals(Ycoord2, Ycoord1)), equal(Object1, Object2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PolySpace.e',64).

 /*   l_int(holds(not(location(Grid,
                               Object2,
                               Xcoord2,
                               Ycoord2)),
                  Time_At10),
            [ holds(location(Grid,
                             Object1,
                             Xcoord1,
                             Ycoord1),
                    Time_At10),
               (not(equals(Xcoord2, Xcoord1));not(equals(Ycoord2, Ycoord1))),
              equal(Object1, Object2)
            ]).
 */
 %  "% =================================".


%; object in one location at a time
% [grid,object,xcoord1,ycoord1,xcoord2,ycoord2,time]
% HoldsAt(Location(grid,object,xcoord1,ycoord1),time) &
% HoldsAt(Location(grid,object,xcoord2,ycoord2),time) ->
% xcoord1=xcoord2 & ycoord1=ycoord2.
% '->'(
%    ','(
%       location(Grid,Object,Xcoord2,Ycoord2), 
%       ';'(
%          not(
%             equals(Xcoord1,Xcoord2)), 
%          not(
%             equals(Ycoord1,Ycoord2)))), 
%    not(
%       location(Grid,Object,Xcoord1,Ycoord1))).
not location(Grid, Object, Xcoord1, Ycoord1)if location(Grid, Object, Xcoord2, Ycoord2), (not equals(Xcoord1, Xcoord2);not equals(Ycoord1, Ycoord2)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PolySpace.e',71).

 /*   l_int(holds(not(location(Grid,
                               Object,
                               Xcoord1,
                               Ycoord1)),
                  Time_At),
            [ holds(location(Grid, Object, Xcoord2, Ycoord2),
                    Time_At),
               (not(equals(Xcoord1, Xcoord2));not(equals(Ycoord1, Ycoord2)))
            ]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       location(Grid,Object,Xcoord1,Ycoord1), 
%       ';'(
%          not(
%             equals(Xcoord2,Xcoord1)), 
%          not(
%             equals(Ycoord2,Ycoord1)))), 
%    not(
%       location(Grid,Object,Xcoord2,Ycoord2))).
not location(Grid, Object, Xcoord2, Ycoord2)if location(Grid, Object, Xcoord1, Ycoord1), (not equals(Xcoord2, Xcoord1);not equals(Ycoord2, Ycoord1)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PolySpace.e',71).

 /*   l_int(holds(not(location(Grid,
                               Object,
                               Xcoord2,
                               Ycoord2)),
                  Time_At8),
            [ holds(location(Grid, Object, Xcoord1, Ycoord1),
                    Time_At8),
               (not(equals(Xcoord2, Xcoord1));not(equals(Ycoord2, Ycoord1)))
            ]).
 */
 %  "% =================================".


%; objects have locations
% [grid,object,time]
% (% {xcoord,ycoord} HoldsAt(Location(grid,object,xcoord,ycoord),time)).
% location(Grid,Object,Xcoord,Ycoord).
location(Grid, Object, Xcoord, Ycoord).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PolySpace.e',77).

 /*  l_int(holds(location(Grid,Object,Xcoord,Ycoord),
   	    Time_At),
         []).
 */
 %  "% =================================".


%; different objects are not at same location
% [grid,object1,object2,xcoord1,ycoord1,time]
% HoldsAt(Location(grid,object1,xcoord1,ycoord1),time) &
% HoldsAt(Location(grid,object2,xcoord1,ycoord1),time) ->
% Equal(object1,object2).
% '->'(
%    ','(
%       location(Grid,Object1,Xcoord1,Ycoord1), 
%       location(Grid,Object2,Xcoord1,Ycoord1)), 
%    equal(Object1,Object2)).
if location(Grid, Object1, Xcoord1, Ycoord1), location(Grid, Object2, Xcoord1, Ycoord1)then equal(Object1, Object2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PolySpace.e',81).

 /*  reactive_rule([ holds(location(Grid,
   			       Object1,
   			       Xcoord1,
   			       Ycoord1),
   		      Time_At),
   		holds(location(Grid,
   			       Object2,
   			       Xcoord1,
   			       Ycoord1),
   		      Time_At)
   	      ],
   	      [equal(Object1,Object2)]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       location(Grid,Object2,Xcoord1,Ycoord1), 
%       not(
%          equal(Object1,Object2))), 
%    not(
%       location(Grid,Object1,Xcoord1,Ycoord1))).
not location(Grid, Object1, Xcoord1, Ycoord1)if location(Grid, Object2, Xcoord1, Ycoord1), not equal(Object1, Object2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PolySpace.e',81).

 /*  l_int(holds(not(location(Grid,
   			 Object1,
   			 Xcoord1,
   			 Ycoord1)),
   	    Time_At7),
         [ holds(location(Grid,
   		       Object2,
   		       Xcoord1,
   		       Ycoord1),
   	      Time_At7),
   	not(equal(Object1,Object2))
         ]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       location(Grid,Object1,Xcoord1,Ycoord1), 
%       not(
%          equal(Object1,Object2))), 
%    not(
%       location(Grid,Object2,Xcoord1,Ycoord1))).
not location(Grid, Object2, Xcoord1, Ycoord1)if location(Grid, Object1, Xcoord1, Ycoord1), not equal(Object1, Object2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PolySpace.e',81).

 /*  l_int(holds(not(location(Grid,
   			 Object2,
   			 Xcoord1,
   			 Ycoord1)),
   	    Time_At8),
         [ holds(location(Grid,
   		       Object1,
   		       Xcoord1,
   		       Ycoord1),
   	      Time_At8),
   	not(equal(Object1,Object2))
         ]).
 */
 %  "% =================================".


%; moving to a location causes an object to be at that location
% [grid,object,xcoord1,ycoord1,xcoord2,ycoord2,time]
% Initiates(Move(grid,object,xcoord1,ycoord1,xcoord2,ycoord2),
%           Location(grid,object,xcoord2,ycoord2),
%           time).
% initiates(
%    move(Grid,Object,Xcoord1,Ycoord1,Xcoord2,Ycoord2), 
%    location(Grid,Object,Xcoord2,Ycoord2), 
%    Time).
move(Grid, Object, Xcoord1, Ycoord1, Xcoord2, Ycoord2)initiates location(Grid, Object, Xcoord2, Ycoord2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PolySpace.e',87).

 /*  initiated(happens(move(Grid,
   		       Object,
   		       Xcoord1,
   		       Ycoord1,
   		       Xcoord2,
   		       Ycoord2),
   		  Time_From,
   		  Time_Until),
   	  location(Grid,Object,Xcoord2,Ycoord2),
   	  []).
 */
 %  "% =================================".


%; moving to a location causes the object no longer to be at its previous
%; location
% [grid,object,xcoord1,ycoord1,xcoord2,ycoord2,time]
% Terminates(Move(grid,object,xcoord1,ycoord1,xcoord2,ycoord2),
%            Location(grid,object,xcoord1,ycoord1),
%            time).
% terminates(
%    move(Grid,Object,Xcoord1,Ycoord1,Xcoord2,Ycoord2), 
%    location(Grid,Object,Xcoord1,Ycoord1), 
%    Time).
move(Grid, Object, Xcoord1, Ycoord1, Xcoord2, Ycoord2)terminates location(Grid, Object, Xcoord1, Ycoord1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PolySpace.e',94).

 /*  terminated(happens(move(Grid,
   			Object,
   			Xcoord1,
   			Ycoord1,
   			Xcoord2,
   			Ycoord2),
   		   Time_From,
   		   Time_Until),
   	   location(Grid,
   		    Object,
   		    Xcoord1,
   		    Ycoord1),
   	   []).
 */
 %  "% =================================".


%;; allow diagonal movements
%;[grid,object,xcoord1,ycoord1,xcoord2,ycoord2,time]
%;Happens(Move(grid,object,xcoord1,ycoord1,xcoord2,ycoord2),time) ->
%;HoldsAt(Location(grid,object,xcoord1,ycoord1),time) &
%;(xcoord1=xcoord2 |
%; xcoord1=xcoord2+1 |
%; xcoord1=xcoord2-1) &
%;(ycoord1=ycoord2 |
%; ycoord1=ycoord2+1 |
%; ycoord1=ycoord2-1).
%; only allow right angle movements
% [grid,object,xcoord1,ycoord1,xcoord2,ycoord2,time]
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PolySpace.e',112).
% Happens(Move(grid,object,xcoord1,ycoord1,xcoord2,ycoord2),time) ->
% HoldsAt(Location(grid,object,xcoord1,ycoord1),time) &
% ((xcoord1=xcoord2 & (ycoord1=ycoord2+1 | ycoord1=ycoord2-1)) |
%  (ycoord1=ycoord2 & (xcoord1=xcoord2+1 | xcoord1=xcoord2-1))).
% '->'(
%    ';'(
%       not(
%          location(Grid,Object,Xcoord1,Ycoord1)), 
%       ','(
%          ';'(
%             not(
%                equals(Xcoord1,Xcoord2)), 
%             ','(
%                not(
%                   '+Pred'(Ycoord2,1,Ycoord1)), 
%                not(
%                   '-Pred'(Ycoord2,1,Ycoord1)))), 
%          ';'(
%             not(
%                equals(Ycoord1,Ycoord2)), 
%             ','(
%                not(
%                   '+Pred'(Xcoord2,1,Xcoord1)), 
%                not(
%                   '-Pred'(Xcoord2,1,Xcoord1)))))), 
%    not(
%       move(Grid,Object,Xcoord1,Ycoord1,Xcoord2,Ycoord2))).
if not location(Grid, Object, Xcoord1, Ycoord1);(not equals(Xcoord1, Xcoord2);not'+Pred'(Ycoord2, 1, Ycoord1), not'-Pred'(Ycoord2, 1, Ycoord1)), (not equals(Ycoord1, Ycoord2);not'+Pred'(Xcoord2, 1, Xcoord1), not'-Pred'(Xcoord2, 1, Xcoord1))then not move(Grid, Object, Xcoord1, Ycoord1, Xcoord2, Ycoord2).
 %  reactive_rule([(not(location(Grid, Object, Xcoord1, Ycoord1));(not(equals(Xcoord1, Xcoord2));not('+Pred'(Ycoord2, 1, Ycoord1)), not('-Pred'(Ycoord2, 1, Ycoord1))), (not(equals(Ycoord1, Ycoord2));not('+Pred'(Xcoord2, 1, Xcoord1)), not('-Pred'(Xcoord2, 1, Xcoord1))))], [not(move(Grid, Object, Xcoord1, Ycoord1, Xcoord2, Ycoord2))]).
 %  "% =================================".
% '->'(
%    metreqs(
%       move(Grid,Object,Xcoord1,Ycoord1,Xcoord2,Ycoord2)), 
%    requires(
%       move(Grid,Object,Xcoord1,Ycoord1,Xcoord2,Ycoord2), 
%       When_Time)).
if move(Grid, Object, Xcoord1, Ycoord1, Xcoord2, Ycoord2)then requires(move(Grid, Object, Xcoord1, Ycoord1, Xcoord2, Ycoord2), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PolySpace.e',112).

 /*  reactive_rule([ happens(move(Grid,
   			     Object,
   			     Xcoord1,
   			     Ycoord1,
   			     Xcoord2,
   			     Ycoord2),
   			Time_From,
   			Time_Until)
   	      ],
   	      [ requires(move(Grid,
   			      Object,
   			      Xcoord1,
   			      Ycoord1,
   			      Xcoord2,
   			      Ycoord2),
   			 When_Time)
   	      ]).
 */
 %  "% =================================".
% '->'(
%    location(Grid,Object,Xcoord1,Ycoord1), 
%    metreqs(
%       move(Grid,Object,Xcoord1,Ycoord1,Xcoord2,Ycoord2))).
move(Grid, Object, Xcoord1, Ycoord1, Xcoord2, Ycoord2)if location(Grid, Object, Xcoord1, Ycoord1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PolySpace.e',112).

 /*  l_events(happens(move(Grid,
   		      Object,
   		      Xcoord1,
   		      Ycoord1,
   		      Xcoord2,
   		      Ycoord2),
   		 Time_From10,
   		 Time_From10),
   	 [ holds(location(Grid,
   			  Object,
   			  Xcoord1,
   			  Ycoord1),
   		 Time_From10)
   	 ]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       not(
%          '-Pred'(Ycoord2,1,Ycoord1)), 
%       ','(
%          ';'(
%             not(
%                equals(Ycoord1,Ycoord2)), 
%             ','(
%                not(
%                   '+Pred'(Xcoord2,1,Xcoord1)), 
%                not(
%                   '-Pred'(Xcoord2,1,Xcoord1)))), 
%          move(Grid,Object,Xcoord1,Ycoord1,Xcoord2,Ycoord2))), 
%    '+Pred'(Ycoord2,1,Ycoord1)).
if not'-Pred'(Ycoord2, 1, Ycoord1), (not equals(Ycoord1, Ycoord2);not'+Pred'(Xcoord2, 1, Xcoord1), not'-Pred'(Xcoord2, 1, Xcoord1)), move(Grid, Object, Xcoord1, Ycoord1, Xcoord2, Ycoord2)then'+Pred'(Ycoord2, 1, Ycoord1).
 %  reactive_rule([not('-Pred'(Ycoord2, 1, Ycoord1)),  (not(equals(Ycoord1, Ycoord2));not('+Pred'(Xcoord2, 1, Xcoord1)), not('-Pred'(Xcoord2, 1, Xcoord1))), happens(move(Grid, Object, Xcoord1, Ycoord1, Xcoord2, Ycoord2), Time_From11, Time_Until12)], ['+Pred'(Ycoord2, 1, Ycoord1)]).
 %  "% =================================".
% '->'(
%    ','(
%       not(
%          '+Pred'(Ycoord2,1,Ycoord1)), 
%       ','(
%          ';'(
%             not(
%                equals(Ycoord1,Ycoord2)), 
%             ','(
%                not(
%                   '+Pred'(Xcoord2,1,Xcoord1)), 
%                not(
%                   '-Pred'(Xcoord2,1,Xcoord1)))), 
%          move(Grid,Object,Xcoord1,Ycoord1,Xcoord2,Ycoord2))), 
%    '-Pred'(Ycoord2,1,Ycoord1)).
if not'+Pred'(Ycoord2, 1, Ycoord1), (not equals(Ycoord1, Ycoord2);not'+Pred'(Xcoord2, 1, Xcoord1), not'-Pred'(Xcoord2, 1, Xcoord1)), move(Grid, Object, Xcoord1, Ycoord1, Xcoord2, Ycoord2)then'-Pred'(Ycoord2, 1, Ycoord1).
 %  reactive_rule([not('+Pred'(Ycoord2, 1, Ycoord1)),  (not(equals(Ycoord1, Ycoord2));not('+Pred'(Xcoord2, 1, Xcoord1)), not('-Pred'(Xcoord2, 1, Xcoord1))), happens(move(Grid, Object, Xcoord1, Ycoord1, Xcoord2, Ycoord2), Time_From13, Time_Until14)], ['-Pred'(Ycoord2, 1, Ycoord1)]).
 %  "% =================================".
% '->'(
%    ','(
%       not(
%          '-Pred'(Xcoord2,1,Xcoord1)), 
%       ','(
%          ';'(
%             not(
%                equals(Xcoord1,Xcoord2)), 
%             ','(
%                not(
%                   '+Pred'(Ycoord2,1,Ycoord1)), 
%                not(
%                   '-Pred'(Ycoord2,1,Ycoord1)))), 
%          move(Grid,Object,Xcoord1,Ycoord1,Xcoord2,Ycoord2))), 
%    '+Pred'(Xcoord2,1,Xcoord1)).
if not'-Pred'(Xcoord2, 1, Xcoord1), (not equals(Xcoord1, Xcoord2);not'+Pred'(Ycoord2, 1, Ycoord1), not'-Pred'(Ycoord2, 1, Ycoord1)), move(Grid, Object, Xcoord1, Ycoord1, Xcoord2, Ycoord2)then'+Pred'(Xcoord2, 1, Xcoord1).
 %  reactive_rule([not('-Pred'(Xcoord2, 1, Xcoord1)),  (not(equals(Xcoord1, Xcoord2));not('+Pred'(Ycoord2, 1, Ycoord1)), not('-Pred'(Ycoord2, 1, Ycoord1))), happens(move(Grid, Object, Xcoord1, Ycoord1, Xcoord2, Ycoord2), Time_From15, Time_Until16)], ['+Pred'(Xcoord2, 1, Xcoord1)]).
 %  "% =================================".
% '->'(
%    ','(
%       not(
%          '+Pred'(Xcoord2,1,Xcoord1)), 
%       ','(
%          ';'(
%             not(
%                equals(Xcoord1,Xcoord2)), 
%             ','(
%                not(
%                   '+Pred'(Ycoord2,1,Ycoord1)), 
%                not(
%                   '-Pred'(Ycoord2,1,Ycoord1)))), 
%          move(Grid,Object,Xcoord1,Ycoord1,Xcoord2,Ycoord2))), 
%    '-Pred'(Xcoord2,1,Xcoord1)).
if not'+Pred'(Xcoord2, 1, Xcoord1), (not equals(Xcoord1, Xcoord2);not'+Pred'(Ycoord2, 1, Ycoord1), not'-Pred'(Ycoord2, 1, Ycoord1)), move(Grid, Object, Xcoord1, Ycoord1, Xcoord2, Ycoord2)then'-Pred'(Xcoord2, 1, Xcoord1).
 %  reactive_rule([not('+Pred'(Xcoord2, 1, Xcoord1)),  (not(equals(Xcoord1, Xcoord2));not('+Pred'(Ycoord2, 1, Ycoord1)), not('-Pred'(Ycoord2, 1, Ycoord1))), happens(move(Grid, Object, Xcoord1, Ycoord1, Xcoord2, Ycoord2), Time_From17, Time_Until18)], ['-Pred'(Xcoord2, 1, Xcoord1)]).
 %  "% =================================".


%; End of file.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PolySpace.e',116).
% translate: ending  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/PolySpace.e.lps 
