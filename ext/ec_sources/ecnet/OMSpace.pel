:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(pfc).
% Tue, 06 Oct 2020 05:01:20 GMT
 %  loading(load_e_pl,'/pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e').


% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:0
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; OMSpace: object-scale metric space
%;
%; The OMSpace representation deals with metric space at
%; the scale of objects.
%;
%; @article{Morgenstern:2001,
%;   author = "Morgenstern, Leora",
%;   year = "2001",
%;   title = "Mid-sized axiomatizations of commonsense problems: A case study in egg cracking",
%;   journal = "Studia Logica",
%;   volume = "67",
%;   pages = "333--384",
%; }
%;
%; @article{Shanahan:2003,
%;   author = "Shanahan, Murray",
%;   year = "2004",
%;   title = "An attempt to formalise a non-trivial benchmark problem in common sense reasoning",
%;   journal = "Artificial Intelligence",
%;   volume = "153",
%;   pages = "141--165",
%; }
%;

% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:34
% sort height: integer
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:35
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:35
subsort(height,integer).
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:35
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:35
subsort(height,integer).

% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:35
% sort distance: integer
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:36
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:36
subsort(distance,integer).
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:36
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:36
subsort(distance,integer).
%; Height
%; The height of object is height.

% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:40
% fluent Height(object,height)
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:41
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:41
fluent(height(object,height)).
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:41
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:41
fluents([height/2]).
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:41
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:41
fluents([height/2]).
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:41
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:41
meta_argtypes(height(object,height)).
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:41
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:41
meta_argtypes(height(object,height)).
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:41
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:41
mpred_prop(height(object,height),fluent).
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:41
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:41
mpred_prop(height(object,height),fluent).
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:41
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:41
meta_argtypes(height(object,height)).
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:41
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:41
meta_argtypes(height(object,height)).


% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:42
%; State constraint represent the fact that each
%; object has a unique height:
% [object,height1,height2,time]
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:45
% HoldsAt(Height(object,height1),time) &
% HoldsAt(Height(object,height2),time) ->
% height1=height2.
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:47
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:47
holds_at(height(Object, Height1), Time), holds_at(height(Object, Height2), Time) ->
    equals(Height1, Height2).
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:47
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:47
reactive_rule([ holds(height(Object,Height1),Time),
		holds(height(Object,Height2),Time)
	      ],
	      [equals(Height1,Height2)]).


% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:49
% [object,time]
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:50
% {height}
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:51
% HoldsAt(Height(object,height),time).
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:51

 /*  exists([Height],
    holds_at(height(Object,Height),Time)).
 */
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:51

 /*  holds_at(height(Object, Exists_Height), Time) :-
       some(Exists_Height, '$kolem_Fn_76'(Object, Time)).
 */
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:51

 /*  [some(Exists_Height, '$kolem_Fn_76'(Object, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(height(Object, Exists_Height), Time)).
 */
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:51
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:51
some(Height5, '$kolem_Fn_76'(A, Time4)) ->
    holds_at(height(A, Height5), Time4).
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:51
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:51
reactive_rule([some(Height5,'$kolem_Fn_76'(A,Time4))],
	      [holds(height(A,Height5),Time4)]).


% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:53
%; falling
%; physobj1 is falling from physobj2 to physobj3.

% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:56
% fluent FallingFromTo(physobj,physobj,physobj)
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:57
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:57
fluent(fallingFromTo(physobj,physobj,physobj)).
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:57
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:57
fluents([fallingFromTo/3]).
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:57
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:57
fluents([fallingFromTo/3]).
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:57
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:57
meta_argtypes(fallingFromTo(physobj,physobj,physobj)).
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:57
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:57
meta_argtypes(fallingFromTo(physobj,physobj,physobj)).
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:57
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:57
mpred_prop(fallingFromTo(physobj,physobj,physobj),fluent).
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:57
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:57
mpred_prop(fallingFromTo(physobj,physobj,physobj),fluent).
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:57
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:57
meta_argtypes(fallingFromTo(physobj,physobj,physobj)).
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:57
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:57
meta_argtypes(fallingFromTo(physobj,physobj,physobj)).


% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:57
%; physobj1 starts falling from physobj2 to physobj3.

% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:58
% event StartFallingFromTo(physobj,physobj,physobj)
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:59
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:59
event(startFallingFromTo(physobj,physobj,physobj)).
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:59
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:59
events([startFallingFromTo/3]).
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:59
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:59
events([startFallingFromTo/3]).
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:59
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:59
meta_argtypes(startFallingFromTo(physobj,physobj,physobj)).
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:59
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:59
meta_argtypes(startFallingFromTo(physobj,physobj,physobj)).
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:59
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:59
mpred_prop(startFallingFromTo(physobj,physobj,physobj),event).
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:59
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:59
mpred_prop(startFallingFromTo(physobj,physobj,physobj),event).
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:59
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:59
meta_argtypes(startFallingFromTo(physobj,physobj,physobj)).
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:59
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:59
meta_argtypes(startFallingFromTo(physobj,physobj,physobj)).


% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:59
%; physobj1 collides with physobj2.

% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:60
% event CollideWith(physobj,physobj)
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:61
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:61
event(collideWith(physobj,physobj)).
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:61
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:61
events([collideWith/2]).
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:61
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:61
events([collideWith/2]).
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:61
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:61
meta_argtypes(collideWith(physobj,physobj)).
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:61
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:61
meta_argtypes(collideWith(physobj,physobj)).
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:61
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:61
mpred_prop(collideWith(physobj,physobj),event).
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:61
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:61
mpred_prop(collideWith(physobj,physobj),event).
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:61
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:61
meta_argtypes(collideWith(physobj,physobj)).
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:61
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:61
meta_argtypes(collideWith(physobj,physobj)).


% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:62
%; An effect axiom states that if a first physical object starts
%; falling from a second physical object to a third physical
%; object, the first physical object will be falling from the
%; second physical object to the third physical object:
% [physobj1,physobj2,physobj3,time]
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:67
% Initiates(StartFallingFromTo(physobj1,physobj2,physobj3),
%           FallingFromTo(physobj1,physobj2,physobj3),
%           time).
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:69

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(startFallingFromTo(Physobj1,
                                       Physobj2,
                                       Physobj3),
                    fallingFromTo(Physobj1, Physobj2, Physobj3),
                    Time)).
 */
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:69
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:69
initiates(startFallingFromTo(StartfallingfromtoP_Num3_V,
			     A,
			     Startfallingfromto),
	  fallingFromTo(StartfallingfromtoP_Num3_V,
			A,
			Startfallingfromto),
	  Initiates).
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:69
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:69
initiated(happens(startFallingFromTo(StartfallingfromtoP_Num3_V,
				     A,
				     Startfallingfromto),
		  Maptime,
		  Happens),
	  fallingFromTo(StartfallingfromtoP_Num3_V,
			A,
			Startfallingfromto),
	  []).


% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:71
%; A precondition axiom states that for
%; a first physical object to start
%; falling from a second physical object to a third physical
%; object,
%; the height of the first physical object and the
%; second physical object must be the same.
% [physobj1,physobj2,physobj3,height1,height2,time]
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:78
% Happens(StartFallingFromTo(physobj1,physobj2,physobj3),time) &
% HoldsAt(Height(physobj1,height1),time) &
% HoldsAt(Height(physobj2,height2),time) ->
% height1=height2.
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:81
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:81
happens(startFallingFromTo(Physobj1, Physobj2, Physobj3), Time), holds_at(height(Physobj1, Height1), Time), holds_at(height(Physobj2, Height2), Time) ->
    equals(Height1, Height2).
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:81
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:81
reactive_rule([ happens(startFallingFromTo(Physobj1,
					   Physobj2,
					   Physobj3),
			Time),
		holds(height(Physobj1,Height1),Time),
		holds(height(Physobj2,Height2),Time)
	      ],
	      [equals(Height1,Height2)]).


% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:83
%; A state constraint says that a physical object
%; cannot fall from itself, cannot fall to itself,
%; and cannot fall from and to the same physical object:
% [physobj1,physobj2,physobj3,time]
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:87
% HoldsAt(FallingFromTo(physobj1,physobj2,physobj3),time) ->
% physobj1!=physobj2 &
% physobj1!=physobj3 &
% physobj2!=physobj3.
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:90
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:90
holds_at(fallingFromTo(Physobj1, Physobj2, Physobj3), Time) ->
    diff(Physobj1, Physobj2),
    diff(Physobj1, Physobj3),
    diff(Physobj2, Physobj3).
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:90
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:90
reactive_rule([ holds(fallingFromTo(Physobj1,
				    Physobj2,
				    Physobj3),
		      Time)
	      ],
	      [ diff(Physobj1,Physobj2),
		diff(Physobj1,Physobj3),
		diff(Physobj2,Physobj3)
	      ]).


% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:92
%; A state constraint says that the sky cannot fall:
% [sky,physobj1,physobj2,time]
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:94
% !HoldsAt(FallingFromTo(sky,physobj1,physobj2),time).
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:94

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(fallingFromTo(Sky, Physobj1, Physobj2)),
                   Time)).
 */
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:94
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:94
holds_at(neg(fallingFromTo(FallingfromtoP_Num3_V,
			   _,
			   Fallingfromto)),
	 Time4).
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:94
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:94
l_int(holds(not(fallingFromTo(FallingfromtoP_Num3_V,
			      _,
			      Fallingfromto)),
	    Time4),
      []).


% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:96
%; A releases axiom states that if
%; if a first physical object starts
%; falling from a second physical object to a third physical
%; object, the height of the first physical object
%; will be released from inertia:
% [physobj1,physobj2,physobj3,height,time]
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:102
% Releases(StartFallingFromTo(physobj1,physobj2,physobj3),
%          Height(physobj1,height),
%          time).
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:104

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          releases(startFallingFromTo(Physobj1,
                                      Physobj2,
                                      Physobj3),
                   height(Physobj1, Height),
                   Time)).
 */
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:104
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:104
releases(startFallingFromTo(StartfallingfromtoP_Num3_V,
			    _,
			    Startfallingfromto),
	 height(StartfallingfromtoP_Num3_V,Height7),
	 Releases).
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:104
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:104
releases(startFallingFromTo(StartfallingfromtoP_Num3_V,
			    _,
			    Startfallingfromto),
	 height(StartfallingfromtoP_Num3_V,Height7),
	 Releases).


% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:106
%; A trajectory axiom states that
%; if a first physical object starts falling
%; from a second physical object
%; to a third physical object
%; at a time and
%; the first physical object has a height at the time,
%; then the first physical object will have a height
%; equal to the height minus an offset
%; at a time equal to the time plus the offset:
% [physobj1,physobj2,physobj3,height1,height2,offset,time]
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:116
% HoldsAt(Height(physobj1,height1),time) &
% height2=height1-offset ->
% Trajectory(FallingFromTo(physobj1,physobj2,physobj3),time,
%            Height(physobj1,height2),offset).
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:119
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:119
holds_at(height(Physobj1, Height1), Time), equals(Height2, Height1-Offset) ->
    trajectory(fallingFromTo(Physobj1, Physobj2, Physobj3),
               Time,
               height(Physobj1, Height2),
               Offset).
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:119
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:119
reactive_rule([ holds(height(Physobj1,Height1),Time),
		equals(Height2,Height1-Offset)
	      ],
	      [ trajectory(fallingFromTo(Physobj1,
					 Physobj2,
					 Physobj3),
			   Time,
			   height(Physobj1,Height2),
			   Offset)
	      ]).


% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:121
%; A trigger axiom states that
%; if a first physical object is falling
%; from a second physical object
%; to a third physical object and
%; the height of the first physical object
%; is the same as the height of the third physical object,
%; the first physical object collides with the
%; third physical object:
% [physobj1,physobj2,physobj3,height,time]
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:130
% HoldsAt(FallingFromTo(physobj1,physobj2,physobj3),time) &
% HoldsAt(Height(physobj1,height),time) &
% HoldsAt(Height(physobj3,height),time) ->
% Happens(CollideWith(physobj1,physobj3),time).
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:133
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:133
holds_at(fallingFromTo(Physobj1, Physobj2, Physobj3), Time), holds_at(height(Physobj1, Height), Time), holds_at(height(Physobj3, Height), Time) ->
    happens(collideWith(Physobj1, Physobj3), Time).
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:133
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:133
reactive_rule([ holds(fallingFromTo(Physobj1,
				    Physobj2,
				    Physobj3),
		      Time),
		holds(height(Physobj1,Height),Time),
		holds(height(Physobj3,Height),Time)
	      ],
	      [ happens(collideWith(Physobj1,Physobj3),
			Time)
	      ]).


% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:135
%; An effect axiom states that
%; if a first physical object is falling
%; from a second physical object
%; to a third physical object and
%; the first physical object collides with
%; the third physical object,
%; the first physical object will be on the third physical object:
% [physobj1,physobj2,physobj3,time]
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:143
% HoldsAt(FallingFromTo(physobj1,physobj2,physobj3),time) ->
% Initiates(CollideWith(physobj1,physobj3),
%           On(physobj1,physobj3),
%           time).
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:146
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:146
holds_at(fallingFromTo(Physobj1, Physobj2, Physobj3), Time) ->
    initiates(collideWith(Physobj1, Physobj3),
              on(Physobj1, Physobj3),
              Time).
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:146
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:146
reactive_rule([ holds(fallingFromTo(Physobj1,
				    Physobj2,
				    Physobj3),
		      Time)
	      ],
	      [ initiates(collideWith(Physobj1,Physobj3),
			  at(on(Physobj1,Physobj3),
			     Time))
	      ]).


% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:148
%; An effect axiom states that
%; if a physical object collides with another
%; physical object,
%; the height of the first physical object will
%; be the height of the second physical object:
% [physobj1,physobj2,height,time]
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:154
% HoldsAt(Height(physobj2,height),time) ->
% Initiates(CollideWith(physobj1,physobj2),
%           Height(physobj1,height),
%           time).
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:157
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:157
holds_at(height(Physobj2, Height), Time) ->
    initiates(collideWith(Physobj1, Physobj2),
              height(Physobj1, Height),
              Time).
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:157
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:157
reactive_rule([holds(height(Physobj2,Height),Time)],
	      [ initiates(collideWith(Physobj1,Physobj2),
			  at(height(Physobj1,Height),
			     Time))
	      ]).


% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:159
%;[physobj1,physobj2,height1,height2,time]
%;HoldsAt(Height(physobj2,height1),time) &
%;height1 != height2 ->
%;Terminates(CollideWith(physobj1,physobj2),
%;           Height(physobj1,height2),
%;           time).
%; An effect axiom states that
%; if a first physical object is falling
%; from a second physical object
%; to a third physical object and
%; the first physical object collides with
%; the third physical object,
%; the first physical object will no longer be
%; falling from the second physical object to the
%; third physical object:
% [physobj1,physobj2,physobj3,time]
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:176
% HoldsAt(FallingFromTo(physobj1,physobj2,physobj3),time) ->
% Terminates(CollideWith(physobj1,physobj3),
%            FallingFromTo(physobj1,physobj2,physobj3),
%            time).
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:179
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:179
holds_at(fallingFromTo(Physobj1, Physobj2, Physobj3), Time) ->
    terminates(collideWith(Physobj1, Physobj3),
               fallingFromTo(Physobj1, Physobj2, Physobj3),
               Time).
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:179
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:179
reactive_rule([ holds(fallingFromTo(Physobj1,
				    Physobj2,
				    Physobj3),
		      Time)
	      ],
	      [ terminates(collideWith(Physobj1,Physobj3),
			   at(fallingFromTo(Physobj1,
					    Physobj2,
					    Physobj3),
			      Time))
	      ]).


% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:181
%; flying
%; agent is flying from physobj1 to physobj2.

% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:184
% fluent FlyingFromTo(agent,physobj,physobj)
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:185
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:185
fluent(flyingFromTo(agent,physobj,physobj)).
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:185
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:185
fluents([flyingFromTo/3]).
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:185
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:185
fluents([flyingFromTo/3]).
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:185
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:185
meta_argtypes(flyingFromTo(agent,physobj,physobj)).
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:185
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:185
meta_argtypes(flyingFromTo(agent,physobj,physobj)).
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:185
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:185
mpred_prop(flyingFromTo(agent,physobj,physobj),fluent).
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:185
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:185
mpred_prop(flyingFromTo(agent,physobj,physobj),fluent).
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:185
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:185
meta_argtypes(flyingFromTo(agent,physobj,physobj)).
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:185
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:185
meta_argtypes(flyingFromTo(agent,physobj,physobj)).


% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:185
%; agent starts flying from physobj1 to physobj2.

% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:186
% event StartFlyingFromTo(agent,physobj,physobj)
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:187
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:187
event(startFlyingFromTo(agent,physobj,physobj)).
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:187
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:187
actions([startFlyingFromTo/3]).
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:187
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:187
actions([startFlyingFromTo/3]).
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:187
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:187
meta_argtypes(startFlyingFromTo(agent,physobj,physobj)).
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:187
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:187
meta_argtypes(startFlyingFromTo(agent,physobj,physobj)).
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:187
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:187
mpred_prop(startFlyingFromTo(agent,physobj,physobj),event).
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:187
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:187
mpred_prop(startFlyingFromTo(agent,physobj,physobj),event).
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:187
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:187
meta_argtypes(startFlyingFromTo(agent,physobj,physobj)).
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:187
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:187
meta_argtypes(startFlyingFromTo(agent,physobj,physobj)).


% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:187
%; agent reaches physobj.

% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:188
% event Reach(agent,physobj)
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:189
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:189
event(reach(agent,physobj)).
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:189
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:189
actions([reach/2]).
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:189
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:189
actions([reach/2]).
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:189
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:189
meta_argtypes(reach(agent,physobj)).
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:189
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:189
meta_argtypes(reach(agent,physobj)).
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:189
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:189
mpred_prop(reach(agent,physobj),event).
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:189
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:189
mpred_prop(reach(agent,physobj),event).
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:189
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:189
meta_argtypes(reach(agent,physobj)).
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:189
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:189
meta_argtypes(reach(agent,physobj)).


% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:190
%; An effect axiom states that if an agent starts
%; flying from a physical object to another physical object,
%; the agent will be flying from the first physical object
%; to the second physical object:
% [agent,physobj1,physobj2,time]
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:195
% Initiates(StartFlyingFromTo(agent,physobj1,physobj2),
%           FlyingFromTo(agent,physobj1,physobj2),
%           time).
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:197

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(startFlyingFromTo(Agent, Physobj1, Physobj2),
                    flyingFromTo(Agent, Physobj1, Physobj2),
                    Time)).
 */
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:197
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:197
initiates(startFlyingFromTo(StartflyingfromtoP_Num3_V,
			    A,
			    Startflyingfromto),
	  flyingFromTo(StartflyingfromtoP_Num3_V,
		       A,
		       Startflyingfromto),
	  Initiates).
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:197
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:197
initiated(happens(startFlyingFromTo(StartflyingfromtoP_Num3_V,
				    A,
				    Startflyingfromto),
		  Maptime,
		  Happens),
	  flyingFromTo(StartflyingfromtoP_Num3_V,
		       A,
		       Startflyingfromto),
	  []).


% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:199
%; A precondition axiom states that for
%; an agent to start flying from a physical object to
%; another physical object,
%; the height of the agent and
%; the first physical object must be the same:
% [agent,physobj1,physobj2,height1,height2,time]
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:205
% Happens(StartFlyingFromTo(agent,physobj1,physobj2),time) &
% HoldsAt(Height(agent,height1),time) &
% HoldsAt(Height(physobj1,height2),time) ->
% height1=height2.
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:208
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:208
happens(startFlyingFromTo(Agent, Physobj1, Physobj2), Time), holds_at(height(Agent, Height1), Time), holds_at(height(Physobj1, Height2), Time) ->
    equals(Height1, Height2).
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:208
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:208
reactive_rule([ happens(startFlyingFromTo(Agent,
					  Physobj1,
					  Physobj2),
			Time),
		holds(height(Agent,Height1),Time),
		holds(height(Physobj1,Height2),Time)
	      ],
	      [equals(Height1,Height2)]).


% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:210
%; A state constraint says that an agent
%; cannot fly from and to the same physical object:
% [agent,physobj1,physobj2,time]
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:213
% HoldsAt(FlyingFromTo(agent,physobj1,physobj2),time) ->
% physobj1!=physobj2.
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:214
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:214
holds_at(flyingFromTo(Agent, Physobj1, Physobj2), Time) ->
    diff(Physobj1, Physobj2).
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:214
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:214
reactive_rule([ holds(flyingFromTo(Agent,
				   Physobj1,
				   Physobj2),
		      Time)
	      ],
	      [diff(Physobj1,Physobj2)]).


% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:216
%; A releases axiom states that if an agent
%; starts flying from a physical object to another
%; physical object, the height of the agent will
%; be released from inertia:
% [agent,physobj1,physobj2,height,time]
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:221
% Releases(StartFlyingFromTo(agent,physobj1,physobj2),
%          Height(agent,height),
%          time).
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:223

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          releases(startFlyingFromTo(Agent, Physobj1, Physobj2),
                   height(Agent, Height),
                   Time)).
 */
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:223
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:223
releases(startFlyingFromTo(StartflyingfromtoP_Num3_V,
			   _,
			   Startflyingfromto),
	 height(StartflyingfromtoP_Num3_V,Height7),
	 Releases).
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:223
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:223
releases(startFlyingFromTo(StartflyingfromtoP_Num3_V,
			   _,
			   Startflyingfromto),
	 height(StartflyingfromtoP_Num3_V,Height7),
	 Releases).


% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:225
%; A trajectory axiom states that
%; if an agent starts flying from
%; from a physical object
%; to another physical object
%; at a time and
%; the agent has a height at the time,
%; then the agent will have a height
%; equal to the height plus an offset
%; at a time equal to the time plus the offset:
% [agent,physobj1,physobj2,height1,height2,offset,time]
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:235
% HoldsAt(Height(agent,height1),time) &
% height2=height1+offset ->
% Trajectory(FlyingFromTo(agent,physobj1,physobj2),time,
%            Height(agent,height2),offset).
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:238
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:238
holds_at(height(Agent, Height1), Time), equals(Height2, Height1+Offset) ->
    trajectory(flyingFromTo(Agent, Physobj1, Physobj2),
               Time,
               height(Agent, Height2),
               Offset).
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:238
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:238
reactive_rule([ holds(height(Agent,Height1),Time),
		equals(Height2,Height1+Offset)
	      ],
	      [ trajectory(flyingFromTo(Agent,
					Physobj1,
					Physobj2),
			   Time,
			   height(Agent,Height2),
			   Offset)
	      ]).


% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:240
%; A trigger axiom states that
%; if an agent is flying
%; from a physical object
%; to another physical object and
%; the height of the agent
%; is the same as the height of the second physical object,
%; the agent reaches the second physical object:
% [agent,physobj1,physobj2,height,time]
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:248
% HoldsAt(FlyingFromTo(agent,physobj1,physobj2),time) &
% HoldsAt(Height(agent,height),time) &
% HoldsAt(Height(physobj2,height),time) ->
% Happens(Reach(agent,physobj2),time).
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:251
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:251
holds_at(flyingFromTo(Agent, Physobj1, Physobj2), Time), holds_at(height(Agent, Height), Time), holds_at(height(Physobj2, Height), Time) ->
    happens(reach(Agent, Physobj2), Time).
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:251
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:251
reactive_rule([ holds(flyingFromTo(Agent,
				   Physobj1,
				   Physobj2),
		      Time),
		holds(height(Agent,Height),Time),
		holds(height(Physobj2,Height),Time)
	      ],
	      [happens(reach(Agent,Physobj2),Time)]).


% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:253
%; An effect axiom states that
%; if an agent reaches a physical object,
%; the height of the agent will be the
%; height of the physical object:
% [agent,physobj,height,time]
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:258
% HoldsAt(Height(physobj,height),time) ->
% Initiates(Reach(agent,physobj),Height(agent,height),time).
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:259
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:259
holds_at(height(Physobj, Height), Time) ->
    initiates(reach(Agent, Physobj),
              height(Agent, Height),
              Time).
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:259
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:259
reactive_rule([holds(height(Physobj,Height),Time)],
	      [ initiates(reach(Agent,Physobj),
			  at(height(Agent,Height),
			     Time))
	      ]).


% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:261
%;[agent,physobj,height1,height2,time]
%;HoldsAt(Height(physobj,height1),time) &
%;height1!=height2 ->
%;Terminates(Reach(agent,physobj),Height(agent,height2),time).
%; An effect axiom states that
%; if an agent is flying
%; from a physical object
%; to another physical object and
%; the agent reaches the second physical object,
%; the agent will no longer be
%; flying from the first physical object
%; to the second physical object:
% [agent,physobj1,physobj2,time]
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:275
% HoldsAt(FlyingFromTo(agent,physobj1,physobj2),time) ->
% Terminates(Reach(agent,physobj2),
%            FlyingFromTo(agent,physobj1,physobj2),
%            time).
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:278
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:278
holds_at(flyingFromTo(Agent, Physobj1, Physobj2), Time) ->
    terminates(reach(Agent, Physobj2),
               flyingFromTo(Agent, Physobj1, Physobj2),
               Time).
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:278
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:278
reactive_rule([ holds(flyingFromTo(Agent,
				   Physobj1,
				   Physobj2),
		      Time)
	      ],
	      [ terminates(reach(Agent,Physobj2),
			   at(flyingFromTo(Agent,
					   Physobj1,
					   Physobj2),
			      Time))
	      ]).


% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:280
%; A releases axiom states that
%; if an agent holds a physical object,
%; the height of the physical object is released from inertia:
% [agent,physobj,height,time]
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:284
% Releases(Hold(agent,physobj),Height(physobj,height),time).
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:284

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          releases(hold(Agent, Physobj),
                   height(Physobj, Height),
                   Time)).
 */
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:284
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:284
releases(hold(_,Hold),
	 height(Hold,Height5),
	 Releases).
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:284
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:284
releases(hold(_,Hold),
	 height(Hold,Height5),
	 Releases).


% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:286
%;[agent,physobj,height1,height2,time]
%;(!{object} PartOf(physobj,object)) &
%;HoldsAt(Height(physobj,height1),time) &
%;height1 != height2 ->
%;Terminates(LetGoOf(agent,physobj),Height(physobj,height2),time).
% [agent,physobj,height,time]
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:293
% (!{object} PartOf(physobj,object)) &
% HoldsAt(Height(physobj,height),time) ->
% Initiates(LetGoOf(agent,physobj),Height(physobj,height),time).
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:295
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:295
not(exists([Object], partOf(Physobj, Object))), holds_at(height(Physobj, Height), Time) ->
    initiates(letGoOf(Agent, Physobj),
              height(Physobj, Height),
              Time).
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:295
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:295
reactive_rule([ holds(not(partOf(Physobj,Object)),
		      Holds),
		holds(height(Physobj,Height),Time)
	      ],
	      [ initiates(letGoOf(Agent,Physobj),
			  at(height(Physobj,Height),
			     Time))
	      ]).


% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:297
%; A state constraint says that
%; if an agent is holding a physical object and
%; the height of the agent is height,
%; the height of the physical object is height:
% [agent,physobj,height,time]
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:302
% HoldsAt(Holding(agent,physobj),time) &
% HoldsAt(Height(agent,height),time) ->
% HoldsAt(Height(physobj,height),time).
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:304
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:304
holds_at(holding(Agent, Physobj), Time), holds_at(height(Agent, Height), Time) ->
    holds_at(height(Physobj, Height), Time).
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:304
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:304
reactive_rule([ holds(holding(Agent,Physobj),Time),
		holds(height(Agent,Height),Time)
	      ],
	      [holds(height(Physobj,Height),Time)]).


% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:306
%; A state constraint says that if a physical object
%; is part of an object,
%; the height of the physical object
%; is the same as the height of the object:
% [physobj,object,height,time]
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:311
% PartOf(physobj,object) &
% HoldsAt(Height(object,height),time) ->
% HoldsAt(Height(physobj,height),time).
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:313
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:313
partOf(Physobj, Object), holds_at(height(Object, Height), Time) ->
    holds_at(height(Physobj, Height), Time).
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:313
% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:313
reactive_rule([ holds(partOf(Physobj,Object),Holds),
		holds(height(Object,Height),Time)
	      ],
	      [holds(height(Physobj,Height),Time)]).


% From /pack/logicmoo_ec/ext/ec_sources/ecnet/OMSpace.e:315
%;event Catch(agent,physobj)
%;event HitFromTo(agent,physobj,object,object)
%;fluent Distance(physobj,physobj,distance)
%;fluent FlyingAcrossFromTo(physobj,object,object)
%;[agent,physobj1,physobj2,physobj3,time]
%;Initiates(HitFromTo(agent,physobj1,physobj2,physobj3),
%;          FlyingAcrossFromTo(physobj1,physobj2,physobj3),
%;          time).
%;[agent,physobj1,physobj2,physobj3,distance,time]
%;Releases(HitFromTo(agent,physobj1,physobj2,physobj3),
%;         Distance(physobj1,physobj2,distance),
%;         time).
%;[agent,physobj1,physobj2,physobj3,distance,time]
%;Releases(HitFromTo(agent,physobj1,physobj2,physobj3),
%;         Distance(physobj1,physobj3,distance),
%;         time).
%;[physobj1,physobj2,physobj3,offset,time]
%;Trajectory(FlyingAcrossFromTo(physobj1,physobj2,physobj3),time,
%;           Distance(physobj1,physobj2,offset),offset).
%;[physobj1,physobj2,physobj3,distance1,distance2,offset,time]
%;HoldsAt(Distance(physobj2,physobj3,distance1),time) &
%;distance2 = distance1 - time ->
%;Trajectory(FlyingAcrossFromTo(physobj1,physobj2,physobj3),time,
%;           Distance(physobj1,physobj3,distance2),offset).
%;[agent,physobj1,physobj2,physobj3,time]
%;HoldsAt(FlyingAcrossFromTo(physobj1,physobj2,physobj3),time) ->
%;Initiates(Catch(agent,physobj1),
%;          Holding(agent,physobj1),
%;          time).
%;[agent,physobj1,physobj2,physobj3,time]
%;HoldsAt(FlyingAcrossFromTo(physobj1,physobj2,physobj3),time) ->
%;Terminates(Catch(agent,physobj1),
%;           FlyingAcrossFromTo(physobj1,physobj2,physobj3),
%;           time).
%; End of file.
