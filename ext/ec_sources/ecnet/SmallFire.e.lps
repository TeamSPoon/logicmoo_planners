:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleeping.e',87).
% translate: unskipped  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/SmallFire.e.lps 
:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(lps).
% translate: begining  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/SmallFire.e.lps 
% Thu, 08 Oct 2020 21:37:14 GMT File: <stream>(0x55894c2e1e00)%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; SmallFire: matches, lighters, cigarettes, etc.
%;

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SmallFire.e',14).
% event Light(agent,physobj)
% event(
%    light(agent,physobj)).
actions([light/2]).
% mpred_prop(
%    light(agent,physobj), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SmallFire.e',14).
mpred_prop(light(agent,physobj),event).

% event LightWith(agent,physobj,physobj)
% event(
%    lightWith(agent,physobj,physobj)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SmallFire.e',14).
actions([lightWith/3]).
% mpred_prop(
%    lightWith(agent,physobj,physobj), 
%    event).
mpred_prop(lightWith(agent,physobj,physobj),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SmallFire.e',16).
% event PutOut(agent,physobj)
% event(
%    putOut(agent,physobj)).
actions([putOut/2]).
% mpred_prop(
%    putOut(agent,physobj), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SmallFire.e',16).
mpred_prop(putOut(agent,physobj),event).

% event BlowOut(agent,physobj)
% event(
%    blowOut(agent,physobj)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SmallFire.e',16).
actions([blowOut/2]).
% mpred_prop(
%    blowOut(agent,physobj), 
%    event).
mpred_prop(blowOut(agent,physobj),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SmallFire.e',18).
% fluent IsBurning(physobj)
% fluent(
%    isBurning(physobj)).
fluents([isBurning/1]).
% mpred_prop(
%    isBurning(physobj), 
%    fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SmallFire.e',18).
mpred_prop(isBurning(physobj),fluent).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SmallFire.e',20).
% [agent,physobj1,physobj2,time]
% HoldsAt(IsBurning(physobj2),time) ->
% Initiates(LightWith(agent,physobj1,physobj2),
%           IsBurning(physobj1),
%           time).
% '->'(
%    isBurning(Physobj2), 
%    initiates(
%       lightWith(Agent,Physobj1,Physobj2), 
%       isBurning(Physobj1), 
%       Time)).
if isBurning(Physobj2)then initiates(lightWith(Agent, Physobj1, Physobj2), isBurning(Physobj1)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SmallFire.e',20).

 /*  reactive_rule([holds(isBurning(Physobj2),Time_At)],
   	      [ initiates(lightWith(Agent,
   				    Physobj1,
   				    Physobj2),
   			  at(isBurning(Physobj1),Time),
   			  Initiates)
   	      ]).
 */
 %  "% =================================".


% [agent,physobj1,physobj2,time]
% Happens(LightWith(agent,physobj1,physobj2),time) ->
% HoldsAt(Holding(agent,physobj1),time) &
% HoldsAt(Holding(agent,physobj2),time) &
% !HoldsAt(IsBurning(physobj1),time).
% '->'(
%    ';'(
%       not(
%          holding(Agent,Physobj1)), 
%       ';'(
%          not(
%             holding(Agent,Physobj2)), 
%          not(
%             not(
%                isBurning(Physobj1))))), 
%    not(
%       lightWith(Agent,Physobj1,Physobj2))).
if not holding(Agent, Physobj1);not holding(Agent, Physobj2);not not isBurning(Physobj1)then not lightWith(Agent, Physobj1, Physobj2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SmallFire.e',27).

 /*   reactive_rule([  (not(holding(Agent, Physobj1));not(holding(Agent, Physobj2));not(not(isBurning(Physobj1))))
                    ],
                    [not(lightWith(Agent, Physobj1, Physobj2))]).
 */
 %  "% =================================".
% '->'(
%    metreqs(
%       lightWith(Agent,Physobj1,Physobj2)), 
%    requires(
%       lightWith(Agent,Physobj1,Physobj2), 
%       When_Time)).
if lightWith(Agent, Physobj1, Physobj2)then requires(lightWith(Agent, Physobj1, Physobj2), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SmallFire.e',27).

 /*  reactive_rule([ happens(lightWith(Agent,
   				  Physobj1,
   				  Physobj2),
   			Time_From,
   			Time_Until)
   	      ],
   	      [ requires(lightWith(Agent,
   				   Physobj1,
   				   Physobj2),
   			 When_Time)
   	      ]).
 */
 %  "% =================================".
% '->'(
%    holding(Agent,Physobj1), 
%    metreqs(
%       lightWith(Agent,Physobj1,Physobj2))).
lightWith(Agent, Physobj1, Physobj2)if holding(Agent, Physobj1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SmallFire.e',27).

 /*  l_events(happens(lightWith(Agent,Physobj1,Physobj2),
   		 Time_From7,
   		 Time_From7),
   	 [holds(holding(Agent,Physobj1),Time_From7)]).
 */
 %  "% =================================".
% '->'(
%    metreqs(
%       lightWith(Agent,Physobj1,Physobj2)), 
%    requires(
%       lightWith(Agent,Physobj1,Physobj2), 
%       When_Time)).
if lightWith(Agent, Physobj1, Physobj2)then requires(lightWith(Agent, Physobj1, Physobj2), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SmallFire.e',27).

 /*  reactive_rule([ happens(lightWith(Agent,
   				  Physobj1,
   				  Physobj2),
   			Time_From8,
   			Time_Until9)
   	      ],
   	      [ requires(lightWith(Agent,
   				   Physobj1,
   				   Physobj2),
   			 When_Time)
   	      ]).
 */
 %  "% =================================".
% '->'(
%    holding(Agent,Physobj2), 
%    metreqs(
%       lightWith(Agent,Physobj1,Physobj2))).
lightWith(Agent, Physobj1, Physobj2)if holding(Agent, Physobj2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SmallFire.e',27).

 /*  l_events(happens(lightWith(Agent,Physobj1,Physobj2),
   		 Time_From10,
   		 Time_From10),
   	 [holds(holding(Agent,Physobj2),Time_From10)]).
 */
 %  "% =================================".
% '->'(
%    metreqs(
%       lightWith(Agent,Physobj1,Physobj2)), 
%    requires(
%       lightWith(Agent,Physobj1,Physobj2), 
%       When_Time)).
if lightWith(Agent, Physobj1, Physobj2)then requires(lightWith(Agent, Physobj1, Physobj2), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SmallFire.e',27).

 /*  reactive_rule([ happens(lightWith(Agent,
   				  Physobj1,
   				  Physobj2),
   			Time_From11,
   			Time_Until12)
   	      ],
   	      [ requires(lightWith(Agent,
   				   Physobj1,
   				   Physobj2),
   			 When_Time)
   	      ]).
 */
 %  "% =================================".
% '->'(
%    not(
%       isBurning(Physobj1)), 
%    metreqs(
%       lightWith(Agent,Physobj1,Physobj2))).
lightWith(Agent, Physobj1, Physobj2)if not isBurning(Physobj1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SmallFire.e',27).

 /*  l_events(happens(lightWith(Agent,Physobj1,Physobj2),
   		 Time_From13,
   		 Time_From13),
   	 [holds(not(isBurning(Physobj1)),Time_From13)]).
 */
 %  "% =================================".


% [agent,physobj,time]
% Initiates(Light(agent,physobj),
%           IsBurning(physobj),
%           time).
% initiates(
%    light(Agent,Physobj), 
%    isBurning(Physobj), 
%    Time).
light(Agent, Physobj)initiates isBurning(Physobj).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SmallFire.e',33).

 /*  initiated(happens(light(Agent,Physobj),
   		  Time_From,
   		  Time_Until),
   	  isBurning(Physobj),
   	  []).
 */
 %  "% =================================".


% [agent,physobj,time]
% Happens(Light(agent,physobj),time) ->
% HoldsAt(Holding(agent,physobj),time) &
% !HoldsAt(IsBurning(physobj),time).
% '->'(
%    ';'(
%       not(
%          holding(Agent,Physobj)), 
%       not(
%          not(
%             isBurning(Physobj)))), 
%    not(
%       light(Agent,Physobj))).
if not holding(Agent, Physobj);not not isBurning(Physobj)then not light(Agent, Physobj).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SmallFire.e',38).

 /*   reactive_rule([  (not(holding(Agent, Physobj));not(not(isBurning(Physobj))))
                    ],
                    [not(light(Agent, Physobj))]).
 */
 %  "% =================================".
% '->'(
%    metreqs(
%       light(Agent,Physobj)), 
%    requires(
%       light(Agent,Physobj), 
%       When_Time)).
if light(Agent, Physobj)then requires(light(Agent, Physobj), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SmallFire.e',38).

 /*  reactive_rule([ happens(light(Agent,Physobj),
   			Time_From,
   			Time_Until)
   	      ],
   	      [ requires(light(Agent,Physobj),
   			 When_Time)
   	      ]).
 */
 %  "% =================================".
% '->'(
%    holding(Agent,Physobj), 
%    metreqs(
%       light(Agent,Physobj))).
light(Agent, Physobj)if holding(Agent, Physobj).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SmallFire.e',38).

 /*  l_events(happens(light(Agent,Physobj),
   		 Time_From6,
   		 Time_From6),
   	 [holds(holding(Agent,Physobj),Time_From6)]).
 */
 %  "% =================================".
% '->'(
%    metreqs(
%       light(Agent,Physobj)), 
%    requires(
%       light(Agent,Physobj), 
%       When_Time)).
if light(Agent, Physobj)then requires(light(Agent, Physobj), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SmallFire.e',38).

 /*  reactive_rule([ happens(light(Agent,Physobj),
   			Time_From7,
   			Time_Until8)
   	      ],
   	      [ requires(light(Agent,Physobj),
   			 When_Time)
   	      ]).
 */
 %  "% =================================".
% '->'(
%    not(
%       isBurning(Physobj)), 
%    metreqs(
%       light(Agent,Physobj))).
light(Agent, Physobj)if not isBurning(Physobj).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SmallFire.e',38).

 /*  l_events(happens(light(Agent,Physobj),
   		 Time_From9,
   		 Time_From9),
   	 [holds(not(isBurning(Physobj)),Time_From9)]).
 */
 %  "% =================================".


% [agent,physobj,time]
% Terminates(PutOut(agent,physobj),
%            IsBurning(physobj),
%            time).
% terminates(
%    putOut(Agent,Physobj), 
%    isBurning(Physobj), 
%    Time).
putOut(Agent, Physobj)terminates isBurning(Physobj).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SmallFire.e',43).

 /*  terminated(happens(putOut(Agent,Physobj),
   		   Time_From,
   		   Time_Until),
   	   isBurning(Physobj),
   	   []).
 */
 %  "% =================================".


% [agent,physobj,time]
% Happens(PutOut(agent,physobj),time) ->
% HoldsAt(Holding(agent,physobj),time) &
% HoldsAt(IsBurning(physobj),time).
% '->'(
%    ';'(
%       not(
%          holding(Agent,Physobj)), 
%       not(
%          isBurning(Physobj))), 
%    not(
%       putOut(Agent,Physobj))).
if not holding(Agent, Physobj);not isBurning(Physobj)then not putOut(Agent, Physobj).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SmallFire.e',48).

 /*   reactive_rule([  (not(holding(Agent, Physobj));not(isBurning(Physobj)))
                    ],
                    [not(putOut(Agent, Physobj))]).
 */
 %  "% =================================".
% '->'(
%    metreqs(
%       putOut(Agent,Physobj)), 
%    requires(
%       putOut(Agent,Physobj), 
%       When_Time)).
if putOut(Agent, Physobj)then requires(putOut(Agent, Physobj), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SmallFire.e',48).

 /*  reactive_rule([ happens(putOut(Agent,Physobj),
   			Time_From,
   			Time_Until)
   	      ],
   	      [ requires(putOut(Agent,Physobj),
   			 When_Time)
   	      ]).
 */
 %  "% =================================".
% '->'(
%    holding(Agent,Physobj), 
%    metreqs(
%       putOut(Agent,Physobj))).
putOut(Agent, Physobj)if holding(Agent, Physobj).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SmallFire.e',48).

 /*  l_events(happens(putOut(Agent,Physobj),
   		 Time_From6,
   		 Time_From6),
   	 [holds(holding(Agent,Physobj),Time_From6)]).
 */
 %  "% =================================".
% '->'(
%    metreqs(
%       putOut(Agent,Physobj)), 
%    requires(
%       putOut(Agent,Physobj), 
%       When_Time)).
if putOut(Agent, Physobj)then requires(putOut(Agent, Physobj), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SmallFire.e',48).

 /*  reactive_rule([ happens(putOut(Agent,Physobj),
   			Time_From7,
   			Time_Until8)
   	      ],
   	      [ requires(putOut(Agent,Physobj),
   			 When_Time)
   	      ]).
 */
 %  "% =================================".
% '->'(
%    isBurning(Physobj), 
%    metreqs(
%       putOut(Agent,Physobj))).
putOut(Agent, Physobj)if isBurning(Physobj).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SmallFire.e',48).

 /*  l_events(happens(putOut(Agent,Physobj),
   		 Time_From9,
   		 Time_From9),
   	 [holds(isBurning(Physobj),Time_From9)]).
 */
 %  "% =================================".


% [agent,physobj,time]
% Terminates(BlowOut(agent,physobj),
%            IsBurning(physobj),
%            time).
% terminates(
%    blowOut(Agent,Physobj), 
%    isBurning(Physobj), 
%    Time).
blowOut(Agent, Physobj)terminates isBurning(Physobj).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SmallFire.e',53).

 /*  terminated(happens(blowOut(Agent,Physobj),
   		   Time_From,
   		   Time_Until),
   	   isBurning(Physobj),
   	   []).
 */
 %  "% =================================".


% [agent,physobj,time]
% Happens(BlowOut(agent,physobj),time) ->
% HoldsAt(Holding(agent,physobj),time) &
% HoldsAt(IsBurning(physobj),time).
% '->'(
%    ';'(
%       not(
%          holding(Agent,Physobj)), 
%       not(
%          isBurning(Physobj))), 
%    not(
%       blowOut(Agent,Physobj))).
if not holding(Agent, Physobj);not isBurning(Physobj)then not blowOut(Agent, Physobj).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SmallFire.e',58).

 /*   reactive_rule([  (not(holding(Agent, Physobj));not(isBurning(Physobj)))
                    ],
                    [not(blowOut(Agent, Physobj))]).
 */
 %  "% =================================".
% '->'(
%    metreqs(
%       blowOut(Agent,Physobj)), 
%    requires(
%       blowOut(Agent,Physobj), 
%       When_Time)).
if blowOut(Agent, Physobj)then requires(blowOut(Agent, Physobj), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SmallFire.e',58).

 /*  reactive_rule([ happens(blowOut(Agent,Physobj),
   			Time_From,
   			Time_Until)
   	      ],
   	      [ requires(blowOut(Agent,Physobj),
   			 When_Time)
   	      ]).
 */
 %  "% =================================".
% '->'(
%    holding(Agent,Physobj), 
%    metreqs(
%       blowOut(Agent,Physobj))).
blowOut(Agent, Physobj)if holding(Agent, Physobj).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SmallFire.e',58).

 /*  l_events(happens(blowOut(Agent,Physobj),
   		 Time_From6,
   		 Time_From6),
   	 [holds(holding(Agent,Physobj),Time_From6)]).
 */
 %  "% =================================".
% '->'(
%    metreqs(
%       blowOut(Agent,Physobj)), 
%    requires(
%       blowOut(Agent,Physobj), 
%       When_Time)).
if blowOut(Agent, Physobj)then requires(blowOut(Agent, Physobj), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SmallFire.e',58).

 /*  reactive_rule([ happens(blowOut(Agent,Physobj),
   			Time_From7,
   			Time_Until8)
   	      ],
   	      [ requires(blowOut(Agent,Physobj),
   			 When_Time)
   	      ]).
 */
 %  "% =================================".
% '->'(
%    isBurning(Physobj), 
%    metreqs(
%       blowOut(Agent,Physobj))).
blowOut(Agent, Physobj)if isBurning(Physobj).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SmallFire.e',58).

 /*  l_events(happens(blowOut(Agent,Physobj),
   		 Time_From9,
   		 Time_From9),
   	 [holds(isBurning(Physobj),Time_From9)]).
 */
 %  "% =================================".


%; End of file.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SmallFire.e',61).
% translate: ending  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/SmallFire.e.lps 
