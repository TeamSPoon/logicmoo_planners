:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleeping.e',87).
% From E: 
% 
% :-call_pel_directive(translate(unskipped,'/pack/logicmoo_ec/ext/ec_sources/ecnet/SmallFire.e.lps')).
:- call_pel_directive(translate(unskipped,
                                '/pack/logicmoo_ec/ext/ec_sources/ecnet/SmallFire.e.lps')).
:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(lps).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleeping.e',87).
% From E: 
% 
% :-call_pel_directive(translate(begining,'/pack/logicmoo_ec/ext/ec_sources/ecnet/SmallFire.e.lps')).
:- call_pel_directive(translate(begining,
                                '/pack/logicmoo_ec/ext/ec_sources/ecnet/SmallFire.e.lps')).
% Sat, 10 Oct 2020 14:56:14 GMT File: <stream>(0x5597f2c00b00)%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; SmallFire: matches, lighters, cigarettes, etc.
%;

% event Light(agent,physobj)
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SmallFire.e',14).
% From E: 
% 
% event(light(agent,physobj)).
events([light/2]).
mpred_prop(light(agent,physobj),action).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SmallFire.e',14).
actions([light/2]).

% event LightWith(agent,physobj,physobj)
% From E: 
% 
% event(lightWith(agent,physobj,physobj)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SmallFire.e',14).
events([lightWith/3]).
mpred_prop(lightWith(agent,physobj,physobj),action).
actions([lightWith/3]).

% event PutOut(agent,physobj)
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SmallFire.e',16).
% From E: 
% 
% event(putOut(agent,physobj)).
events([putOut/2]).
mpred_prop(putOut(agent,physobj),action).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SmallFire.e',16).
actions([putOut/2]).

% event BlowOut(agent,physobj)
% From E: 
% 
% event(blowOut(agent,physobj)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SmallFire.e',16).
events([blowOut/2]).
mpred_prop(blowOut(agent,physobj),action).
actions([blowOut/2]).

% fluent IsBurning(physobj)
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SmallFire.e',18).
% From E: 
% 
% fluent(isBurning(physobj)).
mpred_prop(isBurning(physobj),fluent).
fluents([isBurning/1]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SmallFire.e',20).
% [agent,physobj1,physobj2,time]
% HoldsAt(IsBurning(physobj2),time) ->
% Initiates(LightWith(agent,physobj1,physobj2),
%           IsBurning(physobj1),
%           time).
% From E: 
% 
% '->'(
%    holds_at(isBurning(Physobj2),Time), 
%    initiates_at(
%       lightWith(Agent,Physobj1,Physobj2), 
%       isBurning(Physobj1), 
%       Time)).
 %   [Time].
lightWith(Agent, Physobj1, Physobj2)initiates isBurning(Physobj1)if isBurning(Physobj2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SmallFire.e',20).

 /*  initiated(happens(lightWith(Agent,Physobj1,Physobj2),
   		  Time_From,
   		  Time_Until),
   	  isBurning(Physobj1),
   	  [holds(isBurning(Physobj2),Time_From)]).
 */
 %  "% =================================".


% [agent,physobj1,physobj2,time]
% Happens(LightWith(agent,physobj1,physobj2),time) ->
% HoldsAt(Holding(agent,physobj1),time) &
% HoldsAt(Holding(agent,physobj2),time) &
% !HoldsAt(IsBurning(physobj1),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SmallFire.e',27).
% From E: 
% 
% '->'(
%    happens_at(lightWith(Agent,Physobj1,Physobj2),Time), 
%    (holds_at(holding(Agent,Physobj1),Time) , 
%      holds_at(holding(Agent,Physobj2),Time) , 
%     holds_at(not(isBurning(Physobj1)),Time))).
 %   [Time].
if lightWith(Agent, Physobj1, Physobj2)then holding(Agent, Physobj1), holding(Agent, Physobj2), not isBurning(Physobj1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SmallFire.e',27).

 /*  reactive_rule([ happens(lightWith(Agent,
   				  Physobj1,
   				  Physobj2),
   			Time_From,
   			Time_Until)
   	      ],
   	      [ holds(holding(Agent,Physobj1),
   		      Time_At),
   		holds(holding(Agent,Physobj2),
   		      Time_At),
   		holds(not(isBurning(Physobj1)),Time_At)
   	      ]).
 */
 %  "% =================================".


% [agent,physobj,time]
% Initiates(Light(agent,physobj),
%           IsBurning(physobj),
%           time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SmallFire.e',33).
% From E: 
% 
% initiates_at(
%    light(Agent,Physobj), 
%    isBurning(Physobj), 
%    Time).
 %   [Time].
light(Agent, Physobj)initiates isBurning(Physobj).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SmallFire.e',33).

 /*  initiated(happens(light(Agent,Physobj),
   		  Time_From,
   		  Time_Until),
   	  isBurning(Physobj),
   	  []).
 */
 %  "% =================================".


% [agent,physobj,time]
% Happens(Light(agent,physobj),time) ->
% HoldsAt(Holding(agent,physobj),time) &
% !HoldsAt(IsBurning(physobj),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SmallFire.e',38).
% From E: 
% 
% '->'(
%    happens_at(light(Agent,Physobj),Time), 
%    (holds_at(holding(Agent,Physobj),Time) , 
%     holds_at(not(isBurning(Physobj)),Time))).
 %   [Time].
if light(Agent, Physobj)then holding(Agent, Physobj), not isBurning(Physobj).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SmallFire.e',38).

 /*  reactive_rule([ happens(light(Agent,Physobj),
   			Time_From,
   			Time_Until)
   	      ],
   	      [ holds(holding(Agent,Physobj),Time_At),
   		holds(not(isBurning(Physobj)),Time_At)
   	      ]).
 */
 %  "% =================================".


% [agent,physobj,time]
% Terminates(PutOut(agent,physobj),
%            IsBurning(physobj),
%            time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SmallFire.e',43).
% From E: 
% 
% terminates_at(
%    putOut(Agent,Physobj), 
%    isBurning(Physobj), 
%    Time).
 %   [Time].
putOut(Agent, Physobj)terminates isBurning(Physobj).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SmallFire.e',43).

 /*  terminated(happens(putOut(Agent,Physobj),
   		   Time_From,
   		   Time_Until),
   	   isBurning(Physobj),
   	   []).
 */
 %  "% =================================".


% [agent,physobj,time]
% Happens(PutOut(agent,physobj),time) ->
% HoldsAt(Holding(agent,physobj),time) &
% HoldsAt(IsBurning(physobj),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SmallFire.e',48).
% From E: 
% 
% '->'(
%    happens_at(putOut(Agent,Physobj),Time), 
%    (holds_at(holding(Agent,Physobj),Time) , 
%     holds_at(isBurning(Physobj),Time))).
 %   [Time].
if putOut(Agent, Physobj)then holding(Agent, Physobj), isBurning(Physobj).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SmallFire.e',48).

 /*  reactive_rule([ happens(putOut(Agent,Physobj),
   			Time_From,
   			Time_Until)
   	      ],
   	      [ holds(holding(Agent,Physobj),Time_At),
   		holds(isBurning(Physobj),Time_At)
   	      ]).
 */
 %  "% =================================".


% [agent,physobj,time]
% Terminates(BlowOut(agent,physobj),
%            IsBurning(physobj),
%            time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SmallFire.e',53).
% From E: 
% 
% terminates_at(
%    blowOut(Agent,Physobj), 
%    isBurning(Physobj), 
%    Time).
 %   [Time].
blowOut(Agent, Physobj)terminates isBurning(Physobj).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SmallFire.e',53).

 /*  terminated(happens(blowOut(Agent,Physobj),
   		   Time_From,
   		   Time_Until),
   	   isBurning(Physobj),
   	   []).
 */
 %  "% =================================".


% [agent,physobj,time]
% Happens(BlowOut(agent,physobj),time) ->
% HoldsAt(Holding(agent,physobj),time) &
% HoldsAt(IsBurning(physobj),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SmallFire.e',58).
% From E: 
% 
% '->'(
%    happens_at(blowOut(Agent,Physobj),Time), 
%    (holds_at(holding(Agent,Physobj),Time) , 
%     holds_at(isBurning(Physobj),Time))).
 %   [Time].
if blowOut(Agent, Physobj)then holding(Agent, Physobj), isBurning(Physobj).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SmallFire.e',58).

 /*  reactive_rule([ happens(blowOut(Agent,Physobj),
   			Time_From,
   			Time_Until)
   	      ],
   	      [ holds(holding(Agent,Physobj),Time_At),
   		holds(isBurning(Physobj),Time_At)
   	      ]).
 */
 %  "% =================================".


%; End of file.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SmallFire.e',61).
% From E: 
% 
% :-call_pel_directive(translate(ending,'/pack/logicmoo_ec/ext/ec_sources/ecnet/SmallFire.e.lps')).
:- call_pel_directive(translate(ending,
                                '/pack/logicmoo_ec/ext/ec_sources/ecnet/SmallFire.e.lps')).
