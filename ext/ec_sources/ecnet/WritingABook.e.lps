:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vision.e',75).
% translate: unskipped  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/WritingABook.e.lps 
:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(lps).
% translate: begining  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/WritingABook.e.lps 
% Thu, 08 Oct 2020 21:37:34 GMT File: <stream>(0x55894c1dc400)%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{Mueller:2004c,
%;   author = "Erik T. Mueller",
%;   year = "2004",
%;   title = "Understanding script-based stories using commonsense reasoning",
%;   journal = "Cognitive Systems Research",
%;   volume = "5",
%;   number = "4",
%;   pages = "307--340",
%; }
%;

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/WritingABook.e',22).
% option modeldiff on
:- if(is_e_toplevel).
:- set_ec_option(modeldiff, on).
:- endif.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/WritingABook.e',24).
% ignore Love, ThreatenedBy
% ignore(love).
ignore(love).
% ignore(threatenedBy).
ignore(threatenedBy).

% ignore LookOutOnto, Floor, BuildingOf, SkyOf, GroundOf
% ignore(lookOutOnto).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/WritingABook.e',24).
ignore(lookOutOnto).
% ignore(floor).
ignore(floor).
% ignore(buildingOf).
ignore(buildingOf).
% ignore(skyOf).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/WritingABook.e',24).
ignore(skyOf).
% ignore(groundOf).
ignore(groundOf).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/WritingABook.e',26).
% ignore Inside
% ignore(inside).
ignore(inside).

% ignore Near, WalkFrom, WalkFromTo, RunFromTo
% ignore(near).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/WritingABook.e',26).
ignore(near).
% ignore(walkFrom).
ignore(walkFrom).
% ignore(walkFromTo).
ignore(walkFromTo).
% ignore(runFromTo).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/WritingABook.e',26).
ignore(runFromTo).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/WritingABook.e',28).
% ignore See
% ignore(see).
ignore(see).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/WritingABook.e',30).
% option renaming off
:- if(is_e_toplevel).
:- set_ec_option(renaming, off).
:- endif.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/WritingABook.e',32).
% load foundations/Root.e
:- if(is_e_toplevel).
:- load_e_cond('foundations/Root.e', changed).
 %  load('/pack/logicmoo_ec/ext/ec_sources/foundations/Root.e',changed).
:- endif.

% load foundations/EC.e
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/WritingABook.e',32).
:- if(is_e_toplevel).
:- load_e_cond('foundations/EC.e', changed).
 %  load('/pack/logicmoo_ec/ext/ec_sources/foundations/EC.e',changed).
:- endif.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/WritingABook.e',34).
% load answers/Mueller2003/Ontology.e
:- if(is_e_toplevel).
:- load_e_cond('answers/Mueller2003/Ontology.e', changed).
 %  load('/pack/logicmoo_ec/ext/ec_sources/ecnet/Ontology.e',changed).
:- endif.

% load answers/Mueller2004c/RTSpaceM.e
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/WritingABook.e',34).
:- if(is_e_toplevel).
:- load_e_cond('answers/Mueller2004c/RTSpaceM.e', changed).
 %  load('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',changed).
:- endif.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/WritingABook.e',36).
% load answers/Mueller2004c/OTSpaceM.e
:- if(is_e_toplevel).
:- load_e_cond('answers/Mueller2004c/OTSpaceM.e', changed).
 %  load('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',changed).
:- endif.

% load answers/Mueller2004c/HandTo.e
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/WritingABook.e',36).
:- if(is_e_toplevel).
:- load_e_cond('answers/Mueller2004c/HandTo.e', changed).
 %  load('/pack/logicmoo_ec/ext/ec_sources/ecnet/HandTo.e',changed).
:- endif.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/WritingABook.e',38).
% load answers/Mueller2003/Sleep.e
:- if(is_e_toplevel).
:- load_e_cond('answers/Mueller2003/Sleep.e', changed).
 %  load('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',changed).
:- endif.

% load answers/Mueller2004c/Cognition.e
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/WritingABook.e',38).
:- if(is_e_toplevel).
:- load_e_cond('answers/Mueller2004c/Cognition.e', changed).
 %  load('/pack/logicmoo_ec/ext/ec_sources/ecnet/Cognition.e',changed).
:- endif.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/WritingABook.e',41).
% door Door1
% t(door,door1).
door(door1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/WritingABook.e',43).
% room Room0
% t(room,room0).
room(room0).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/WritingABook.e',45).
% room Room1
% t(room,room1).
room(room1).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/WritingABook.e',47).
% Side1(Door1)=Room0.
% side1Pred(door1,room0).
side1Pred(door1,room0).


% Side2(Door1)=Room1.
% side2Pred(door1,room1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/WritingABook.e',47).
side2Pred(door1,room1).

% agent Writer1
% t(agent,writer1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/WritingABook.e',49).
agent(writer1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/WritingABook.e',52).
% paper Paper1
% t(paper,paper1).
paper(paper1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/WritingABook.e',54).
% pen Pen1
% t(pen,pen1).
pen(pen1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/WritingABook.e',56).
% chair Chair1
% t(chair,chair1).
chair(chair1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/WritingABook.e',58).
% physobj Desk1
% t(physobj,desk1).
physobj(desk1).
%; initial state
% [agent,object]
 % !HoldsAt(Holding(agent,object),0).
% initially(
%    neg(
%       holding(Agent,Object))).
initially not holding(Agent, Object).
 %  initial_state([not(holding(Agent,Object))]).
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/WritingABook.e',62).
% [agent,physobj]
 % !HoldsAt(SittingOn(agent,physobj),0).
% initially(
%    neg(
%       sittingOn(Agent,Physobj))).
initially not sittingOn(Agent, Physobj).
 %  initial_state([not(sittingOn(Agent,Physobj))]).
 %  "% =================================".


% [agent,physobj]
 % !HoldsAt(LyingOn(agent,physobj),0).
% initially(
%    neg(
%       lyingOn(Agent,Physobj))).
initially not lyingOn(Agent, Physobj).
 %  initial_state([not(lyingOn(Agent,Physobj))]).
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/WritingABook.e',64).
% [physobj1,physobj2]
% !(physobj1=Pen1 & physobj2=Desk1) &
% !(physobj1=Paper1 & physobj2=Desk1) ->
% !HoldsAt(On(physobj1, physobj2),0).
% '->'(
%    ','(
%       ';'(
%          not(
%             equals(Physobj1,pen1)), 
%          not(
%             equals(Physobj2,desk1))), 
%       ';'(
%          not(
%             equals(Physobj1,paper1)), 
%          not(
%             equals(Physobj2,desk1)))), 
%    initially(
%       neg(
%          on(Physobj1,Physobj2)))).
if (not equals(pen1, Physobj1);not equals(desk1, Physobj2)), (not equals(paper1, Physobj1);not equals(desk1, Physobj2))then initially not on(Physobj1, Physobj2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/WritingABook.e',64).

 /*   reactive_rule([  (not(equals(pen1, Physobj1));not(equals(desk1, Physobj2))),
                       (not(equals(paper1, Physobj1));not(equals(desk1, Physobj2)))
                    ],
                    [initially(not(on(Physobj1, Physobj2)))]).
 */
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/WritingABook.e',68).
% HoldsAt(On(Paper1,Desk1),0).
% initially(
%    on(paper1,desk1)).
initially on(paper1, desk1).
 %  initial_state([on(paper1,desk1)]).
 %  "% =================================".


% HoldsAt(On(Pen1,Desk1),0).
% initially(
%    on(pen1,desk1)).
initially on(pen1, desk1).
 %  initial_state([on(pen1,desk1)]).
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/WritingABook.e',70).
% HoldsAt(Dressed(Writer1),0).
% initially(
%    dressed(writer1)).
initially dressed(writer1).
 %  initial_state([dressed(writer1)]).
 %  "% =================================".


% HoldsAt(Awake(Writer1),0).
% initially(
%    awake(writer1)).
initially awake(writer1).
 %  initial_state([awake(writer1)]).
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/WritingABook.e',72).
% HoldsAt(Sleep3(Writer1),0).
% initially(
%    sleep3(writer1)).
initially sleep3(writer1).
 %  initial_state([sleep3(writer1)]).
 %  "% =================================".


% HoldsAt(Standing(Writer1),0).
% initially(
%    standing(writer1)).
initially standing(writer1).
 %  initial_state([standing(writer1)]).
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/WritingABook.e',74).
% HoldsAt(DoorUnlocked(Door1),0).
% initially(
%    doorUnlocked(door1)).
initially doorUnlocked(door1).
 %  initial_state([doorUnlocked(door1)]).
 %  "% =================================".


% HoldsAt(DoorIsOpen(Door1),0).
% initially(
%    doorIsOpen(door1)).
initially doorIsOpen(door1).
 %  initial_state([doorIsOpen(door1)]).
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/WritingABook.e',76).
% HoldsAt(At(Writer1,Room0),0).
% initially(
%    at(writer1,room0)).
initially loc_at(writer1, room0).
 %  initial_state([loc_at(writer1,room0)]).
 %  "% =================================".


% HoldsAt(At(Chair1,Room1),0).
% initially(
%    at(chair1,room1)).
initially loc_at(chair1, room1).
 %  initial_state([loc_at(chair1,room1)]).
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/WritingABook.e',78).
% HoldsAt(At(Desk1,Room1),0).
% initially(
%    at(desk1,room1)).
initially loc_at(desk1, room1).
 %  initial_state([loc_at(desk1,room1)]).
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/WritingABook.e',80).
%; narrative


% Happens(WalkThroughDoor12(Writer1,Door1),0).
% happens(
%    walkThroughDoor12(writer1,door1), 
%    start).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/WritingABook.e',80).
observe(at(walkThroughDoor12(writer1,door1),start)).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/WritingABook.e',82).
% Happens(SitOn(Writer1,Chair1),1).
% happens(
%    sitOn(writer1,chair1), 
%    start+1).
observe sitOn(writer1, chair1)at start+1.
 %  observe([sitOn(writer1,chair1)],start+1).
 %  "% =================================".


% Happens(TakeOffOf(Writer1,Pen1,Desk1),2).
% happens(
%    takeOffOf(writer1,pen1,desk1), 
%    start+2).
observe takeOffOf(writer1, pen1, desk1)at start+2.
 %  observe([takeOffOf(writer1,pen1,desk1)],start+2).
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/WritingABook.e',84).
% Happens(Think(Writer1),3).
% happens(
%    think(writer1), 
%    start+3).
observe think(writer1)at start+3.
 %  observe([think(writer1)],start+3).
 %  "% =================================".


% Happens(WriteOn(Writer1,Paper1,Pen1),4).
% happens(
%    writeOn(writer1,paper1,pen1), 
%    start+4).
observe writeOn(writer1, paper1, pen1)at start+4.
 %  observe([writeOn(writer1,paper1,pen1)],start+4).
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/WritingABook.e',86).
% Happens(WriteOn(Writer1,Paper1,Pen1),5).
% happens(
%    writeOn(writer1,paper1,pen1), 
%    start+5).
observe writeOn(writer1, paper1, pen1)at start+5.
 %  observe([writeOn(writer1,paper1,pen1)],start+5).
 %  "% =================================".


% Happens(PlaceOn(Writer1,Pen1,Desk1),6).
% happens(
%    placeOn(writer1,pen1,desk1), 
%    start+6).
observe placeOn(writer1, pen1, desk1)at start+6.
 %  observe([placeOn(writer1,pen1,desk1)],start+6).
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/WritingABook.e',88).
% Happens(RiseFrom(Writer1,Chair1),7).
% happens(
%    riseFrom(writer1,chair1), 
%    start+7).
observe riseFrom(writer1, chair1)at start+7.
 %  observe([riseFrom(writer1,chair1)],start+7).
 %  "% =================================".


% Happens(WalkThroughDoor21(Writer1,Door1),8).
% happens(
%    walkThroughDoor21(writer1,door1), 
%    start+8).
observe walkThroughDoor21(writer1, door1)at start+8.
 %  observe([walkThroughDoor21(writer1,door1)],start+8).
 %  "% =================================".

% range time 0 9
% range(time,0,9).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/WritingABook.e',90).
range(time,0,9).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/WritingABook.e',92).
% range offset 0 0
% range(offset,0,0).
range(offset,0,0).

% range diameter 0 0
% range(diameter,0,0).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/WritingABook.e',92).
range(diameter,0,0).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/WritingABook.e',95).
% completion Happens
% completion(happens).
completion(happens).
%; End of file.
% translate: ending  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/WritingABook.e.lps 
