% translate: unskipped  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/Arson.e.lps 
:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(lps).
% translate: begining  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/Arson.e.lps 
% Thu, 08 Oct 2020 19:05:33 GMT File: <stream>(0x5600a3809700)%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; DEV-MUC3-0060
%; Arson
%;
%; @article{Mueller:2004c,
%;   author = "Erik T. Mueller",
%;   year = "2004",
%;   title = "Understanding script-based stories using commonsense reasoning",
%;   journal = "Cognitive Systems Research",
%;   volume = "5",
%;   number = "4",
%;   pages = "307--340",
%; }
%;

% ignore SkyOf, GroundOf, Near, Inside, WalkFromTo, RunFromTo
 %  pl=axiom(ignore(skyOf),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Arson.e',25).
ignore(skyOf).
 %  ignore(skyOf).
 %  pl=axiom(ignore(groundOf),[]).
ignore(groundOf).
 %  ignore(groundOf).
 %  pl=axiom(ignore(near),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Arson.e',25).
ignore(near).
 %  ignore(near).
 %  pl=axiom(ignore(inside),[]).
ignore(inside).
 %  ignore(inside).
 %  pl=axiom(ignore(walkFromTo),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Arson.e',25).
ignore(walkFromTo).
 %  ignore(walkFromTo).
 %  pl=axiom(ignore(runFromTo),[]).
ignore(runFromTo).
 %  ignore(runFromTo).

% ignore RollAlong, Diameter, Move, HoldSome, PutInside
 %  pl=axiom(ignore(rollAlong),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Arson.e',25).
ignore(rollAlong).
 %  ignore(rollAlong).
 %  pl=axiom(ignore(diameter),[]).
ignore(diameter).
 %  ignore(diameter).
 %  pl=axiom(ignore(move),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Arson.e',25).
ignore(move).
 %  ignore(move).
 %  pl=axiom(ignore(holdSome),[]).
ignore(holdSome).
 %  ignore(holdSome).
 %  pl=axiom(ignore(putInside),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Arson.e',25).
ignore(putInside).
 %  ignore(putInside).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Arson.e',27).
% ignore TakeOutOf, On, DoorUnlock, DoorLock, WalkThroughDoor12
 %  pl=axiom(ignore(takeOutOf),[]).
ignore(takeOutOf).
 %  ignore(takeOutOf).
 %  pl=axiom(ignore(on),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Arson.e',27).
ignore(on).
 %  ignore(on).
 %  pl=axiom(ignore(doorUnlock),[]).
ignore(doorUnlock).
 %  ignore(doorUnlock).
 %  pl=axiom(ignore(doorLock),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Arson.e',27).
ignore(doorLock).
 %  ignore(doorLock).
 %  pl=axiom(ignore(walkThroughDoor12),[]).
ignore(walkThroughDoor12).
 %  ignore(walkThroughDoor12).

% ignore WalkThroughDoor21, WalkDownStaircase, WalkUpStaircase
 %  pl=axiom(ignore(walkThroughDoor21),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Arson.e',27).
ignore(walkThroughDoor21).
 %  ignore(walkThroughDoor21).
 %  pl=axiom(ignore(walkDownStaircase),[]).
ignore(walkDownStaircase).
 %  ignore(walkDownStaircase).
 %  pl=axiom(ignore(walkUpStaircase),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Arson.e',27).
ignore(walkUpStaircase).
 %  ignore(walkUpStaircase).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Arson.e',30).
% ignore ThreatenedBy
 %  pl=axiom(ignore(threatenedBy),[]).
ignore(threatenedBy).
 %  ignore(threatenedBy).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Arson.e',32).
% load foundations/Root.e
:- if(is_e_toplevel).
:- load_e_cond('foundations/Root.e', changed).
 %  load('/pack/logicmoo_ec/ext/ec_sources/foundations/Root.e',changed).
:- endif.

% load foundations/EC.e
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Arson.e',32).
:- if(is_e_toplevel).
:- load_e_cond('foundations/EC.e', changed).
 %  load('/pack/logicmoo_ec/ext/ec_sources/foundations/EC.e',changed).
:- endif.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Arson.e',34).
% load answers/Mueller2003/Ontology.e
:- if(is_e_toplevel).
:- load_e_cond('answers/Mueller2003/Ontology.e', changed).
 %  load('/pack/logicmoo_ec/ext/ec_sources/ecnet/Ontology.e',changed).
:- endif.

% load answers/Mueller2004c/OTSpaceM.e
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Arson.e',34).
:- if(is_e_toplevel).
:- load_e_cond('answers/Mueller2004c/OTSpaceM.e', changed).
 %  load('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',changed).
:- endif.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Arson.e',36).
% load answers/Mueller2004c/RTSpaceM.e
:- if(is_e_toplevel).
:- load_e_cond('answers/Mueller2004c/RTSpaceM.e', changed).
 %  load('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',changed).
:- endif.

% load answers/Mueller2004c/Fire.e
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Arson.e',36).
:- if(is_e_toplevel).
:- load_e_cond('answers/Mueller2004c/Fire.e', changed).
 %  load('/pack/logicmoo_ec/ext/ec_sources/ecnet/Fire.e',changed).
:- endif.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Arson.e',38).
% load answers/Mueller2004c/Condition.e
:- if(is_e_toplevel).
:- load_e_cond('answers/Mueller2004c/Condition.e', changed).
 %  load('/pack/logicmoo_ec/ext/ec_sources/ecnet/Condition.e',changed).
:- endif.

% load answers/Mueller2003/Sleep.e
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Arson.e',38).
:- if(is_e_toplevel).
:- load_e_cond('answers/Mueller2003/Sleep.e', changed).
 %  load('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',changed).
:- endif.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Arson.e',41).
% fire Fire1
 %  t(fire,fire1).
fire(fire1).
 %  fire(fire1).


% HoldsAt(At(Fire1,Outside1),0).
 %  pl=axiom(initially(at(fire1,outside1)),[]).
 %  initially(at(fire1,outside1)).
initially loc_at(fire1, outside1).
 %  initial_state([loc_at(fire1,outside1)]).
 %  initial_state([loc_at(fire1,outside1)]).

% agent Perp1
 %  t(agent,perp1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Arson.e',43).
agent(perp1).
 %  agent(perp1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Arson.e',46).
% physobj PhysTarget1
 %  t(physobj,physTarget1).
physobj(physTarget1).
 %  physobj(physTarget1).


% HoldsAt(Intact(PhysTarget1),0).
 %  pl=axiom(initially(intact(physTarget1)),[]).
initially intact(physTarget1).
 %  initial_state([intact(physTarget1)]).
 %  initial_state([intact(physTarget1)]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Arson.e',48).
% HoldsAt(At(PhysTarget1,Outside1),0).
 %  pl=axiom(initially(at(physTarget1,outside1)),[]).
 %  initially(at(physTarget1,outside1)).
initially loc_at(physTarget1, outside1).
 %  initial_state([loc_at(physTarget1,outside1)]).
 %  initial_state([loc_at(physTarget1,outside1)]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Arson.e',50).
%; room-scale topological space

% outside Outside1
 %  t(outside,outside1).
outside(outside1).
 %  outside(outside1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Arson.e',52).
% outside Outside2
 %  t(outside,outside2).
outside(outside2).
 %  outside(outside2).

% room Inside1
 %  t(room,inside1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Arson.e',52).
room(inside1).
 %  room(inside1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Arson.e',54).
% door Door1
 %  t(door,door1).
door(door1).
 %  door(door1).

% building Building1
 %  t(building,building1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Arson.e',54).
building(building1).
 %  building(building1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Arson.e',56).
% street Street1
 %  t(street,street1).
street(street1).
 %  street(street1).


% Side1(Door1)=Outside1.
 %  pl=axiom(side1Pred(door1,outside1),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Arson.e',56).
side1Pred(door1,outside1).
 %  side1Pred(door1,outside1).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Arson.e',58).
% Side2(Door1)=Inside1.
 %  pl=axiom(side2Pred(door1,inside1),[]).
side2Pred(door1,inside1).
 %  side2Pred(door1,inside1).


% LookOutOnto(Inside1)=Outside1.
 %  pl=axiom(lookOutOntoPred(inside1,outside1),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Arson.e',58).
lookOutOntoPred(inside1,outside1).
 %  lookOutOntoPred(inside1,outside1).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Arson.e',60).
% Floor(Inside1)=1.
 %  pl=axiom(floorPred(inside1,1),[]).
floorPred(inside1,1).
 %  floorPred(inside1,1).


% BuildingOf(Inside1)=Building1.
 %  pl=axiom(building(inside1,building1),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Arson.e',60).
building(inside1,building1).
 %  building(inside1,building1).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Arson.e',62).
% Side1(Street1)=Outside1.
 %  pl=axiom(side1Pred(street1,outside1),[]).
side1Pred(street1,outside1).
 %  side1Pred(street1,outside1).


% Side2(Street1)=Outside2.
 %  pl=axiom(side2Pred(street1,outside2),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Arson.e',62).
side2Pred(street1,outside2).
 %  side2Pred(street1,outside2).


% HoldsAt(Alive(Perp1),0).
 %  pl=axiom(initially(alive(perp1)),[]).
initially alive(perp1).
 %  initial_state([alive(perp1)]).
 %  initial_state([alive(perp1)]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Arson.e',66).
% HoldsAt(Awake(Perp1),0).
 %  pl=axiom(initially(awake(perp1)),[]).
initially awake(perp1).
 %  initial_state([awake(perp1)]).
 %  initial_state([awake(perp1)]).


% HoldsAt(Standing(Perp1),0).
 %  pl=axiom(initially(standing(perp1)),[]).
initially standing(perp1).
 %  initial_state([standing(perp1)]).
 %  initial_state([standing(perp1)]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Arson.e',68).
% HoldsAt(Sleep2(Perp1),0).
 %  pl=axiom(initially(sleep2(perp1)),[]).
initially sleep2(perp1).
 %  initial_state([sleep2(perp1)]).
 %  initial_state([sleep2(perp1)]).


% !HoldsAt(Injured(Perp1),0).
 %  pl=axiom(initially(neg(injured(perp1))),[]).
 %  initially(neg(injured(perp1))).
initially not injured(perp1).
 %  initial_state([not(injured(perp1))]).
 %  initial_state([not(injured(perp1))]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Arson.e',70).
% [object]
 % !HoldsAt(Holding(Perp1,object),0).
 %  pl=axiom(initially(neg(holding(perp1,Object))),[]).
 %  initially(neg(holding(perp1,Object))).
initially not holding(perp1, Object).
 %  initial_state([not(holding(perp1,Object))]).
 %  initial_state([not(holding(perp1,Object))]).


% HoldsAt(At(Perp1,Outside2),0).
 %  pl=axiom(initially(at(perp1,outside2)),[]).
 %  initially(at(perp1,outside2)).
initially loc_at(perp1, outside2).
 %  initial_state([loc_at(perp1,outside2)]).
 %  initial_state([loc_at(perp1,outside2)]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Arson.e',72).
% !HoldsAt(DoorIsOpen(Door1),0).
 %  pl=axiom(initially(neg(doorIsOpen(door1))),[]).
 %  initially(neg(doorIsOpen(door1))).
initially not doorIsOpen(door1).
 %  initial_state([not(doorIsOpen(door1))]).
 %  initial_state([not(doorIsOpen(door1))]).


% HoldsAt(DoorUnlocked(Door1),0).
 %  pl=axiom(initially(doorUnlocked(door1)),[]).
initially doorUnlocked(door1).
 %  initial_state([doorUnlocked(door1)]).
 %  initial_state([doorUnlocked(door1)]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Arson.e',74).
% [physobj,fire,offset]
 % !HoldsAt(Burning(physobj,fire,offset),0).

 /*  pl=axiom(initially(neg(burning(Physobj,Fire,Offset))),
         []).
 */
 %  initially(neg(burning(Physobj,Fire,Offset))).
initially not burning(Physobj, Fire, Offset).
 %  initial_state([not(burning(Physobj,Fire,Offset))]).
 %  initial_state([not(burning(Physobj,Fire,Offset))]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Arson.e',76).
%; narrative


% Happens(WalkStreet21(Perp1,Street1),0).
 %  pl=axiom(happens(walkStreet21(perp1,street1),start),[]).
 %  happens(walkStreet21(perp1,street1),start).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Arson.e',76).
observe(at(walkStreet21(perp1,street1),start)).
 %  observe(at(walkStreet21(perp1,street1),start)).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Arson.e',78).
% Happens(SetFireTo(Perp1,PhysTarget1,Fire1,3),1).

 /*  pl=axiom(happens(setFireTo(perp1,physTarget1,fire1,3),When),
         [b(start,When)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Arson.e',78).

 /*  b(start, When) ->
       happens(setFireTo(perp1, physTarget1, fire1, 3), When).
 */
if b(start, When)then happens(setFireTo(perp1, physTarget1, fire1, 3), When).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Arson.e',78).

 /*  reactive_rule([b(start,When)],
   	      [ happens(setFireTo(perp1,physTarget1,fire1,3),
   			When)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Arson.e',78).

 /*  reactive_rule([b(start,When)],
   	      [ happens(setFireTo(perp1,physTarget1,fire1,3),
   			When)
   	      ]).
 */


% Happens(WalkStreet12(Perp1,Street1),2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Arson.e',78).

 /*  pl=axiom(happens(walkStreet12(perp1,street1),Start_Num2),
         [b(start,Start_Num2),toffset(start,2,Start_Num2)]).
 */

 /*  (   b(start, Start_Num2),
       toffset(start, 2, Start_Num2)
   ->  happens(walkStreet12(perp1, street1), Start_Num2)
   ).
 */
if b(start, Start_Num2), toffset(start, 2, Start_Num2)then happens(walkStreet12(perp1, street1), Start_Num2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Arson.e',78).

 /*  reactive_rule([ b(start,Start_Num2),
   		toffset(start,2,Start_Num2)
   	      ],
   	      [happens(walkStreet12(perp1,street1),Start_Num2)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Arson.e',78).

 /*  reactive_rule([ b(start,Start_Num2),
   		toffset(start,2,Start_Num2)
   	      ],
   	      [happens(walkStreet12(perp1,street1),Start_Num2)]).
 */

% range time 0 6
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Arson.e',80).
range(time,0,6).
 %  range(time,0,6).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Arson.e',82).
% range offset 0 3
range(offset,0,3).
 %  range(offset,0,3).

% range diameter 0 0
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Arson.e',82).
range(diameter,0,0).
 %  range(diameter,0,0).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Arson.e',85).
% completion Happens
completion(happens).
 %  completion(happens).
%; End of file.
% translate: ending  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/Arson.e.lps 
