:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',212).
% translate: unskipped  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e.lps 
:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(lps).
% translate: begining  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e.lps 
% Thu, 08 Oct 2020 21:37:25 GMT File: <stream>(0x55894c2e3c00)%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{Mueller:2004c,
%;   author = "Erik T. Mueller",
%;   year = "2004",
%;   title = "Understanding script-based stories using commonsense reasoning",
%;   journal = "Cognitive Systems Research",
%;   volume = "5",
%;   number = "4",
%;   pages = "307--340",
%; }
%;

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',22).
% option modeldiff on
:- if(is_e_toplevel).
:- set_ec_option(modeldiff, on).
:- endif.

% option renaming off
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',22).
:- if(is_e_toplevel).
:- set_ec_option(renaming, off).
:- endif.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',25).
% ignore Love, ThreatenedBy
% ignore(love).
ignore(love).
% ignore(threatenedBy).
ignore(threatenedBy).

% ignore LookOutOnto, Floor, BuildingOf, SkyOf, GroundOf
% ignore(lookOutOnto).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',25).
ignore(lookOutOnto).
% ignore(floor).
ignore(floor).
% ignore(buildingOf).
ignore(buildingOf).
% ignore(skyOf).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',25).
ignore(skyOf).
% ignore(groundOf).
ignore(groundOf).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',27).
% ignore Inside, PutInside, On, PlaceOn
% ignore(inside).
ignore(inside).
% ignore(putInside).
ignore(putInside).
% ignore(on).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',27).
ignore(on).
% ignore(placeOn).
ignore(placeOn).

% ignore Like, Happy, BecomeAngryAt
% ignore(like).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',27).
ignore(like).
% ignore(happy).
ignore(happy).
% ignore(becomeAngryAt).
ignore(becomeAngryAt).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',29).
% ignore Near, WalkFrom, WalkFromTo, RunFromTo
% ignore(near).
ignore(near).
% ignore(walkFrom).
ignore(walkFrom).
% ignore(walkFromTo).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',29).
ignore(walkFromTo).
% ignore(runFromTo).
ignore(runFromTo).

% ignore ActOnIntentionToWalkIn, IntentionToWalkIn, InvitedIn, InviteIn
% ignore(actOnIntentionToWalkIn).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',29).
ignore(actOnIntentionToWalkIn).
% ignore(intentionToWalkIn).
ignore(intentionToWalkIn).
% ignore(invitedIn).
ignore(invitedIn).
% ignore(inviteIn).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',29).
ignore(inviteIn).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',31).
% ignore TakeOffOf, TakeOutOf, LetGoOf
% ignore(takeOffOf).
ignore(takeOffOf).
% ignore(takeOutOf).
ignore(takeOutOf).
% ignore(letGoOf).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',31).
ignore(letGoOf).

% ignore Greet, SayGoodbye, Order, KnowOrder
% ignore(greet).
ignore(greet).
% ignore(sayGoodbye).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',31).
ignore(sayGoodbye).
% ignore(order).
ignore(order).
% ignore(knowOrder).
ignore(knowOrder).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',33).
% ignore LieOn, SitOn, RiseFrom, LyingOn, SittingOn
% ignore(lieOn).
ignore(lieOn).
% ignore(sitOn).
ignore(sitOn).
% ignore(riseFrom).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',33).
ignore(riseFrom).
% ignore(lyingOn).
ignore(lyingOn).
% ignore(sittingOn).
ignore(sittingOn).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',35).
% load foundations/Root.e
:- if(is_e_toplevel).
:- load_e_cond('foundations/Root.e', changed).
 %  load('/pack/logicmoo_ec/ext/ec_sources/foundations/Root.e',changed).
:- endif.

% load foundations/EC.e
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',35).
:- if(is_e_toplevel).
:- load_e_cond('foundations/EC.e', changed).
 %  load('/pack/logicmoo_ec/ext/ec_sources/foundations/EC.e',changed).
:- endif.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',37).
% load answers/Mueller2003/Ontology.e
:- if(is_e_toplevel).
:- load_e_cond('answers/Mueller2003/Ontology.e', changed).
 %  load('/pack/logicmoo_ec/ext/ec_sources/ecnet/Ontology.e',changed).
:- endif.

% load answers/Mueller2004c/OTSpaceM.e
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',37).
:- if(is_e_toplevel).
:- load_e_cond('answers/Mueller2004c/OTSpaceM.e', changed).
 %  load('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',changed).
:- endif.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',39).
% load answers/Mueller2004c/RTSpaceM.e
:- if(is_e_toplevel).
:- load_e_cond('answers/Mueller2004c/RTSpaceM.e', changed).
 %  load('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',changed).
:- endif.

% load answers/Mueller2003/Sleep.e
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',39).
:- if(is_e_toplevel).
:- load_e_cond('answers/Mueller2003/Sleep.e', changed).
 %  load('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',changed).
:- endif.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',41).
% load answers/Mueller2004c/Dress.e
:- if(is_e_toplevel).
:- load_e_cond('answers/Mueller2004c/Dress.e', changed).
 %  load('/pack/logicmoo_ec/ext/ec_sources/ecnet/Dress.e',changed).
:- endif.

% load answers/Mueller2004c/Rain.e
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',41).
:- if(is_e_toplevel).
:- load_e_cond('answers/Mueller2004c/Rain.e', changed).
 %  load('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rain.e',changed).
:- endif.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',44).
% room Origin1
% t(room,origin1).
room(origin1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',46).
% door OriginDoor1
% t(door,originDoor1).
door(originDoor1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',48).
% outside OriginOutside1
% t(outside,originOutside1).
outside(originOutside1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',50).
% street StreetFromOriginToMiddle1
% t(street,streetFromOriginToMiddle1).
street(streetFromOriginToMiddle1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',52).
% outside Middle1
% t(outside,middle1).
outside(middle1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',54).
% street StreetFromMiddleToDestination1
% t(street,streetFromMiddleToDestination1).
street(streetFromMiddleToDestination1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',56).
% outside DestinationOutside1
% t(outside,destinationOutside1).
outside(destinationOutside1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',58).
% door DestinationDoor1
% t(door,destinationDoor1).
door(destinationDoor1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',60).
% room Destination1
% t(room,destination1).
room(destination1).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',62).
% Side1(OriginDoor1)=OriginOutside1.
% side1Pred(originDoor1,originOutside1).
side1Pred(originDoor1,originOutside1).


% Side2(OriginDoor1)=Origin1.
% side2Pred(originDoor1,origin1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',62).
side2Pred(originDoor1,origin1).


% Side1(StreetFromOriginToMiddle1)=OriginOutside1.
% side1Pred(streetFromOriginToMiddle1,originOutside1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',64).
side1Pred(streetFromOriginToMiddle1,originOutside1).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',66).
% Side2(StreetFromOriginToMiddle1)=Middle1.
% side2Pred(streetFromOriginToMiddle1,middle1).
side2Pred(streetFromOriginToMiddle1,middle1).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',68).
% Side1(StreetFromMiddleToDestination1)=Middle1.
% side1Pred(streetFromMiddleToDestination1,middle1).
side1Pred(streetFromMiddleToDestination1,middle1).


% Side2(StreetFromMiddleToDestination1)=DestinationOutside1.
% side2Pred(streetFromMiddleToDestination1,destinationOutside1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',68).
side2Pred(streetFromMiddleToDestination1,destinationOutside1).


% Side1(DestinationDoor1)=DestinationOutside1.
% side1Pred(destinationDoor1,destinationOutside1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',70).
side1Pred(destinationDoor1,destinationOutside1).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',72).
% Side2(DestinationDoor1)=Destination1.
% side2Pred(destinationDoor1,destination1).
side2Pred(destinationDoor1,destination1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',74).
% agent Walker1
% t(agent,walker1).
agent(walker1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',76).
% clothing Clothes1
% t(clothing,clothes1).
clothing(clothes1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',78).
% umbrella Umbrella1
% t(umbrella,umbrella1).
umbrella(umbrella1).
%; initial state
% [agent,object]
 % !HoldsAt(Holding(agent,object),0).
% initially(
%    neg(
%       holding(Agent,Object))).
initially not holding(Agent, Object).
 %  initial_state([not(holding(Agent,Object))]).
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',82).
% [agent]
 % HoldsAt(Dressed(agent),0).
% initially(
%    dressed(Agent)).
initially dressed(Agent).
 %  initial_state([dressed(Agent)]).
 %  "% =================================".


% [agent]
 % HoldsAt(Awake(agent),0).
% initially(
%    awake(Agent)).
initially awake(Agent).
 %  initial_state([awake(Agent)]).
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',84).
% [agent]
 % HoldsAt(Sleep3(agent),0).
% initially(
%    sleep3(Agent)).
initially sleep3(Agent).
 %  initial_state([sleep3(Agent)]).
 %  "% =================================".


% [agent]
 % HoldsAt(Standing(agent),0).
% initially(
%    standing(Agent)).
initially standing(Agent).
 %  initial_state([standing(Agent)]).
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',86).
% HoldsAt(DoorUnlocked(OriginDoor1),0).
% initially(
%    doorUnlocked(originDoor1)).
initially doorUnlocked(originDoor1).
 %  initial_state([doorUnlocked(originDoor1)]).
 %  "% =================================".


% !HoldsAt(DoorIsOpen(OriginDoor1),0).
% initially(
%    neg(
%       doorIsOpen(originDoor1))).
initially not doorIsOpen(originDoor1).
 %  initial_state([not(doorIsOpen(originDoor1))]).
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',88).
% HoldsAt(DoorUnlocked(DestinationDoor1),0).
% initially(
%    doorUnlocked(destinationDoor1)).
initially doorUnlocked(destinationDoor1).
 %  initial_state([doorUnlocked(destinationDoor1)]).
 %  "% =================================".


% !HoldsAt(DoorIsOpen(DestinationDoor1),0).
% initially(
%    neg(
%       doorIsOpen(destinationDoor1))).
initially not doorIsOpen(destinationDoor1).
 %  initial_state([not(doorIsOpen(destinationDoor1))]).
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',90).
% HoldsAt(At(Walker1,Origin1),0).
% initially(
%    at(walker1,origin1)).
initially loc_at(walker1, origin1).
 %  initial_state([loc_at(walker1,origin1)]).
 %  "% =================================".


% HoldsAt(At(Clothes1,Origin1),0).
% initially(
%    at(clothes1,origin1)).
initially loc_at(clothes1, origin1).
 %  initial_state([loc_at(clothes1,origin1)]).
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',92).
% HoldsAt(At(Umbrella1,Origin1),0).
% initially(
%    at(umbrella1,origin1)).
initially loc_at(umbrella1, origin1).
 %  initial_state([loc_at(umbrella1,origin1)]).
 %  "% =================================".


% [outside,time]
 % HoldsAt(Raining(outside),time).
% raining(Outside).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',92).
raining(Outside).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',94).
% [object]
 % !HoldsAt(Wet(object),0).
% initially(
%    neg(
%       wet(Object))).
initially not wet(Object).
 %  initial_state([not(wet(Object))]).
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',96).
%; narrative


% Happens(PutOn(Walker1,Clothes1),0).
% happens(
%    putOn(walker1,clothes1), 
%    start).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',96).
observe(at(putOn(walker1,clothes1),start)).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',98).
% Happens(PickUp(Walker1,Umbrella1),1).
% happens(
%    pickUp(walker1,umbrella1), 
%    start+1).
observe pickUp(walker1, umbrella1)at start+1.
 %  observe([pickUp(walker1,umbrella1)],start+1).
 %  "% =================================".


% Happens(DoorOpen(Walker1,OriginDoor1),2).
% happens(
%    doorOpen(walker1,originDoor1), 
%    start+2).
observe doorOpen(walker1, originDoor1)at start+2.
 %  observe([doorOpen(walker1,originDoor1)],start+2).
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',100).
% Happens(WalkThroughDoor21(Walker1,OriginDoor1),3).
% happens(
%    walkThroughDoor21(walker1,originDoor1), 
%    start+3).
observe walkThroughDoor21(walker1, originDoor1)at start+3.
 %  observe([walkThroughDoor21(walker1,originDoor1)],start+3).
 %  "% =================================".


% Happens(DoorClose(Walker1,OriginDoor1),4).
% happens(
%    doorClose(walker1,originDoor1), 
%    start+4).
observe doorClose(walker1, originDoor1)at start+4.
 %  observe([doorClose(walker1,originDoor1)],start+4).
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',102).
% Happens(WalkStreet12(Walker1,StreetFromOriginToMiddle1),5).
% happens(
%    walkStreet12(walker1,streetFromOriginToMiddle1), 
%    start+5).
observe walkStreet12(walker1, streetFromOriginToMiddle1)at start+5.
 %  observe([walkStreet12(walker1,streetFromOriginToMiddle1)],start+5).
 %  "% =================================".


% Happens(WalkStreet12(Walker1,StreetFromMiddleToDestination1),6).
% happens(
%    walkStreet12(walker1,streetFromMiddleToDestination1), 
%    start+6).
observe walkStreet12(walker1, streetFromMiddleToDestination1)at start+6.
 %  observe([walkStreet12(walker1,streetFromMiddleToDestination1)],start+6).
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',104).
% Happens(DoorOpen(Walker1,DestinationDoor1),7).
% happens(
%    doorOpen(walker1,destinationDoor1), 
%    start+7).
observe doorOpen(walker1, destinationDoor1)at start+7.
 %  observe([doorOpen(walker1,destinationDoor1)],start+7).
 %  "% =================================".


% Happens(WalkThroughDoor12(Walker1,DestinationDoor1),8).
% happens(
%    walkThroughDoor12(walker1,destinationDoor1), 
%    start+8).
observe walkThroughDoor12(walker1, destinationDoor1)at start+8.
 %  observe([walkThroughDoor12(walker1,destinationDoor1)],start+8).
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',106).
% Happens(DoorClose(Walker1,DestinationDoor1),9).
% happens(
%    doorClose(walker1,destinationDoor1), 
%    start+9).
observe doorClose(walker1, destinationDoor1)at start+9.
 %  observe([doorClose(walker1,destinationDoor1)],start+9).
 %  "% =================================".


% Happens(TakeOff(Walker1,Clothes1),10).
% happens(
%    takeOff(walker1,clothes1), 
%    start+10).
observe takeOff(walker1, clothes1)at start+10.
 %  observe([takeOff(walker1,clothes1)],start+10).
 %  "% =================================".

% range time 0 11
% range(time,0,11).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',108).
range(time,0,11).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',110).
% range offset 0 0
% range(offset,0,0).
range(offset,0,0).

% range diameter 0 0
% range(diameter,0,0).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',110).
range(diameter,0,0).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',113).
% completion Happens
% completion(happens).
completion(happens).
%; End of file.
% translate: ending  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e.lps 
