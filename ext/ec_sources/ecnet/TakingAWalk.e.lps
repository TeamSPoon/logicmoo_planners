:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',212).
% translate: unskipped  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e.lps 
:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(lps).
% translate: begining  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e.lps 
% Thu, 08 Oct 2020 19:07:10 GMT File: <stream>(0x5600a3b28a00)%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{Mueller:2004c,
%;   author = "Erik T. Mueller",
%;   year = "2004",
%;   title = "Understanding script-based stories using commonsense reasoning",
%;   journal = "Cognitive Systems Research",
%;   volume = "5",
%;   number = "4",
%;   pages = "307--340",
%; }
%;

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',22).
% option modeldiff on
:- if(is_e_toplevel).
:- set_ec_option(modeldiff, on).
:- endif.

% option renaming off
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',22).
:- if(is_e_toplevel).
:- set_ec_option(renaming, off).
:- endif.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',25).
% ignore Love, ThreatenedBy
 %  pl=axiom(ignore(love),[]).
ignore(love).
 %  ignore(love).
 %  pl=axiom(ignore(threatenedBy),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',25).
ignore(threatenedBy).
 %  ignore(threatenedBy).

% ignore LookOutOnto, Floor, BuildingOf, SkyOf, GroundOf
 %  pl=axiom(ignore(lookOutOnto),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',25).
ignore(lookOutOnto).
 %  ignore(lookOutOnto).
 %  pl=axiom(ignore(floor),[]).
ignore(floor).
 %  ignore(floor).
 %  pl=axiom(ignore(buildingOf),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',25).
ignore(buildingOf).
 %  ignore(buildingOf).
 %  pl=axiom(ignore(skyOf),[]).
ignore(skyOf).
 %  ignore(skyOf).
 %  pl=axiom(ignore(groundOf),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',25).
ignore(groundOf).
 %  ignore(groundOf).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',27).
% ignore Inside, PutInside, On, PlaceOn
 %  pl=axiom(ignore(inside),[]).
ignore(inside).
 %  ignore(inside).
 %  pl=axiom(ignore(putInside),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',27).
ignore(putInside).
 %  ignore(putInside).
 %  pl=axiom(ignore(on),[]).
ignore(on).
 %  ignore(on).
 %  pl=axiom(ignore(placeOn),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',27).
ignore(placeOn).
 %  ignore(placeOn).

% ignore Like, Happy, BecomeAngryAt
 %  pl=axiom(ignore(like),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',27).
ignore(like).
 %  ignore(like).
 %  pl=axiom(ignore(happy),[]).
ignore(happy).
 %  ignore(happy).
 %  pl=axiom(ignore(becomeAngryAt),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',27).
ignore(becomeAngryAt).
 %  ignore(becomeAngryAt).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',29).
% ignore Near, WalkFrom, WalkFromTo, RunFromTo
 %  pl=axiom(ignore(near),[]).
ignore(near).
 %  ignore(near).
 %  pl=axiom(ignore(walkFrom),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',29).
ignore(walkFrom).
 %  ignore(walkFrom).
 %  pl=axiom(ignore(walkFromTo),[]).
ignore(walkFromTo).
 %  ignore(walkFromTo).
 %  pl=axiom(ignore(runFromTo),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',29).
ignore(runFromTo).
 %  ignore(runFromTo).

% ignore ActOnIntentionToWalkIn, IntentionToWalkIn, InvitedIn, InviteIn
 %  pl=axiom(ignore(actOnIntentionToWalkIn),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',29).
ignore(actOnIntentionToWalkIn).
 %  ignore(actOnIntentionToWalkIn).
 %  pl=axiom(ignore(intentionToWalkIn),[]).
ignore(intentionToWalkIn).
 %  ignore(intentionToWalkIn).
 %  pl=axiom(ignore(invitedIn),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',29).
ignore(invitedIn).
 %  ignore(invitedIn).
 %  pl=axiom(ignore(inviteIn),[]).
ignore(inviteIn).
 %  ignore(inviteIn).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',31).
% ignore TakeOffOf, TakeOutOf, LetGoOf
 %  pl=axiom(ignore(takeOffOf),[]).
ignore(takeOffOf).
 %  ignore(takeOffOf).
 %  pl=axiom(ignore(takeOutOf),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',31).
ignore(takeOutOf).
 %  ignore(takeOutOf).
 %  pl=axiom(ignore(letGoOf),[]).
ignore(letGoOf).
 %  ignore(letGoOf).

% ignore Greet, SayGoodbye, Order, KnowOrder
 %  pl=axiom(ignore(greet),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',31).
ignore(greet).
 %  ignore(greet).
 %  pl=axiom(ignore(sayGoodbye),[]).
ignore(sayGoodbye).
 %  ignore(sayGoodbye).
 %  pl=axiom(ignore(order),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',31).
ignore(order).
 %  ignore(order).
 %  pl=axiom(ignore(knowOrder),[]).
ignore(knowOrder).
 %  ignore(knowOrder).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',33).
% ignore LieOn, SitOn, RiseFrom, LyingOn, SittingOn
 %  pl=axiom(ignore(lieOn),[]).
ignore(lieOn).
 %  ignore(lieOn).
 %  pl=axiom(ignore(sitOn),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',33).
ignore(sitOn).
 %  ignore(sitOn).
 %  pl=axiom(ignore(riseFrom),[]).
ignore(riseFrom).
 %  ignore(riseFrom).
 %  pl=axiom(ignore(lyingOn),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',33).
ignore(lyingOn).
 %  ignore(lyingOn).
 %  pl=axiom(ignore(sittingOn),[]).
ignore(sittingOn).
 %  ignore(sittingOn).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',35).
% load foundations/Root.e
:- if(is_e_toplevel).
:- load_e_cond('foundations/Root.e', changed).
 %  load('/pack/logicmoo_ec/ext/ec_sources/foundations/Root.e',changed).
:- endif.

% load foundations/EC.e
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',35).
:- if(is_e_toplevel).
:- load_e_cond('foundations/EC.e', changed).
 %  load('/pack/logicmoo_ec/ext/ec_sources/foundations/EC.e',changed).
:- endif.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',37).
% load answers/Mueller2003/Ontology.e
:- if(is_e_toplevel).
:- load_e_cond('answers/Mueller2003/Ontology.e', changed).
 %  load('/pack/logicmoo_ec/ext/ec_sources/ecnet/Ontology.e',changed).
:- endif.

% load answers/Mueller2004c/OTSpaceM.e
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',37).
:- if(is_e_toplevel).
:- load_e_cond('answers/Mueller2004c/OTSpaceM.e', changed).
 %  load('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',changed).
:- endif.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',39).
% load answers/Mueller2004c/RTSpaceM.e
:- if(is_e_toplevel).
:- load_e_cond('answers/Mueller2004c/RTSpaceM.e', changed).
 %  load('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',changed).
:- endif.

% load answers/Mueller2003/Sleep.e
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',39).
:- if(is_e_toplevel).
:- load_e_cond('answers/Mueller2003/Sleep.e', changed).
 %  load('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',changed).
:- endif.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',41).
% load answers/Mueller2004c/Dress.e
:- if(is_e_toplevel).
:- load_e_cond('answers/Mueller2004c/Dress.e', changed).
 %  load('/pack/logicmoo_ec/ext/ec_sources/ecnet/Dress.e',changed).
:- endif.

% load answers/Mueller2004c/Rain.e
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',41).
:- if(is_e_toplevel).
:- load_e_cond('answers/Mueller2004c/Rain.e', changed).
 %  load('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rain.e',changed).
:- endif.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',44).
% room Origin1
 %  t(room,origin1).
room(origin1).
 %  room(origin1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',46).
% door OriginDoor1
 %  t(door,originDoor1).
door(originDoor1).
 %  door(originDoor1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',48).
% outside OriginOutside1
 %  t(outside,originOutside1).
outside(originOutside1).
 %  outside(originOutside1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',50).
% street StreetFromOriginToMiddle1
 %  t(street,streetFromOriginToMiddle1).
street(streetFromOriginToMiddle1).
 %  street(streetFromOriginToMiddle1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',52).
% outside Middle1
 %  t(outside,middle1).
outside(middle1).
 %  outside(middle1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',54).
% street StreetFromMiddleToDestination1
 %  t(street,streetFromMiddleToDestination1).
street(streetFromMiddleToDestination1).
 %  street(streetFromMiddleToDestination1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',56).
% outside DestinationOutside1
 %  t(outside,destinationOutside1).
outside(destinationOutside1).
 %  outside(destinationOutside1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',58).
% door DestinationDoor1
 %  t(door,destinationDoor1).
door(destinationDoor1).
 %  door(destinationDoor1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',60).
% room Destination1
 %  t(room,destination1).
room(destination1).
 %  room(destination1).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',62).
% Side1(OriginDoor1)=OriginOutside1.
 %  pl=axiom(side1Pred(originDoor1,originOutside1),[]).
side1Pred(originDoor1,originOutside1).
 %  side1Pred(originDoor1,originOutside1).


% Side2(OriginDoor1)=Origin1.
 %  pl=axiom(side2Pred(originDoor1,origin1),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',62).
side2Pred(originDoor1,origin1).
 %  side2Pred(originDoor1,origin1).


% Side1(StreetFromOriginToMiddle1)=OriginOutside1.
 %  pl=axiom(side1Pred(streetFromOriginToMiddle1,originOutside1),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',64).
side1Pred(streetFromOriginToMiddle1,originOutside1).
 %  side1Pred(streetFromOriginToMiddle1,originOutside1).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',66).
% Side2(StreetFromOriginToMiddle1)=Middle1.
 %  pl=axiom(side2Pred(streetFromOriginToMiddle1,middle1),[]).
side2Pred(streetFromOriginToMiddle1,middle1).
 %  side2Pred(streetFromOriginToMiddle1,middle1).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',68).
% Side1(StreetFromMiddleToDestination1)=Middle1.
 %  pl=axiom(side1Pred(streetFromMiddleToDestination1,middle1),[]).
side1Pred(streetFromMiddleToDestination1,middle1).
 %  side1Pred(streetFromMiddleToDestination1,middle1).


% Side2(StreetFromMiddleToDestination1)=DestinationOutside1.
 %  pl=axiom(side2Pred(streetFromMiddleToDestination1,destinationOutside1),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',68).
side2Pred(streetFromMiddleToDestination1,destinationOutside1).
 %  side2Pred(streetFromMiddleToDestination1,destinationOutside1).


% Side1(DestinationDoor1)=DestinationOutside1.
 %  pl=axiom(side1Pred(destinationDoor1,destinationOutside1),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',70).
side1Pred(destinationDoor1,destinationOutside1).
 %  side1Pred(destinationDoor1,destinationOutside1).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',72).
% Side2(DestinationDoor1)=Destination1.
 %  pl=axiom(side2Pred(destinationDoor1,destination1),[]).
side2Pred(destinationDoor1,destination1).
 %  side2Pred(destinationDoor1,destination1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',74).
% agent Walker1
 %  t(agent,walker1).
agent(walker1).
 %  agent(walker1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',76).
% clothing Clothes1
 %  t(clothing,clothes1).
clothing(clothes1).
 %  clothing(clothes1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',78).
% umbrella Umbrella1
 %  t(umbrella,umbrella1).
umbrella(umbrella1).
 %  umbrella(umbrella1).
%; initial state
% [agent,object]
 % !HoldsAt(Holding(agent,object),0).
 %  pl=axiom(initially(neg(holding(Agent,Object))),[]).
 %  initially(neg(holding(Agent,Object))).
initially not holding(Agent, Object).
 %  initial_state([not(holding(Agent,Object))]).
 %  initial_state([not(holding(Agent,Object))]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',82).
% [agent]
 % HoldsAt(Dressed(agent),0).
 %  pl=axiom(initially(dressed(Agent)),[]).
initially dressed(Agent).
 %  initial_state([dressed(Agent)]).
 %  initial_state([dressed(Agent)]).


% [agent]
 % HoldsAt(Awake(agent),0).
 %  pl=axiom(initially(awake(Agent)),[]).
initially awake(Agent).
 %  initial_state([awake(Agent)]).
 %  initial_state([awake(Agent)]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',84).
% [agent]
 % HoldsAt(Sleep3(agent),0).
 %  pl=axiom(initially(sleep3(Agent)),[]).
initially sleep3(Agent).
 %  initial_state([sleep3(Agent)]).
 %  initial_state([sleep3(Agent)]).


% [agent]
 % HoldsAt(Standing(agent),0).
 %  pl=axiom(initially(standing(Agent)),[]).
initially standing(Agent).
 %  initial_state([standing(Agent)]).
 %  initial_state([standing(Agent)]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',86).
% HoldsAt(DoorUnlocked(OriginDoor1),0).
 %  pl=axiom(initially(doorUnlocked(originDoor1)),[]).
initially doorUnlocked(originDoor1).
 %  initial_state([doorUnlocked(originDoor1)]).
 %  initial_state([doorUnlocked(originDoor1)]).


% !HoldsAt(DoorIsOpen(OriginDoor1),0).
 %  pl=axiom(initially(neg(doorIsOpen(originDoor1))),[]).
 %  initially(neg(doorIsOpen(originDoor1))).
initially not doorIsOpen(originDoor1).
 %  initial_state([not(doorIsOpen(originDoor1))]).
 %  initial_state([not(doorIsOpen(originDoor1))]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',88).
% HoldsAt(DoorUnlocked(DestinationDoor1),0).
 %  pl=axiom(initially(doorUnlocked(destinationDoor1)),[]).
initially doorUnlocked(destinationDoor1).
 %  initial_state([doorUnlocked(destinationDoor1)]).
 %  initial_state([doorUnlocked(destinationDoor1)]).


% !HoldsAt(DoorIsOpen(DestinationDoor1),0).
 %  pl=axiom(initially(neg(doorIsOpen(destinationDoor1))),[]).
 %  initially(neg(doorIsOpen(destinationDoor1))).
initially not doorIsOpen(destinationDoor1).
 %  initial_state([not(doorIsOpen(destinationDoor1))]).
 %  initial_state([not(doorIsOpen(destinationDoor1))]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',90).
% HoldsAt(At(Walker1,Origin1),0).
 %  pl=axiom(initially(at(walker1,origin1)),[]).
 %  initially(at(walker1,origin1)).
initially loc_at(walker1, origin1).
 %  initial_state([loc_at(walker1,origin1)]).
 %  initial_state([loc_at(walker1,origin1)]).


% HoldsAt(At(Clothes1,Origin1),0).
 %  pl=axiom(initially(at(clothes1,origin1)),[]).
 %  initially(at(clothes1,origin1)).
initially loc_at(clothes1, origin1).
 %  initial_state([loc_at(clothes1,origin1)]).
 %  initial_state([loc_at(clothes1,origin1)]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',92).
% HoldsAt(At(Umbrella1,Origin1),0).
 %  pl=axiom(initially(at(umbrella1,origin1)),[]).
 %  initially(at(umbrella1,origin1)).
initially loc_at(umbrella1, origin1).
 %  initial_state([loc_at(umbrella1,origin1)]).
 %  initial_state([loc_at(umbrella1,origin1)]).


% [outside,time]
 % HoldsAt(Raining(outside),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',92).

 /*  fix_axiom_head(Time) ->
       [holds_at(raining(Outside), Time), ->, raining(Outside)].
 */
 %  pl=axiom(raining(Outside),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',92).
raining(Outside).
 %  raining(Outside).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',94).
% [object]
 % !HoldsAt(Wet(object),0).
 %  pl=axiom(initially(neg(wet(Object))),[]).
 %  initially(neg(wet(Object))).
initially not wet(Object).
 %  initial_state([not(wet(Object))]).
 %  initial_state([not(wet(Object))]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',96).
%; narrative


% Happens(PutOn(Walker1,Clothes1),0).
 %  pl=axiom(happens(putOn(walker1,clothes1),start),[]).
 %  happens(putOn(walker1,clothes1),start).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',96).
observe(at(putOn(walker1,clothes1),start)).
 %  observe(at(putOn(walker1,clothes1),start)).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',98).
% Happens(PickUp(Walker1,Umbrella1),1).

 /*  pl=axiom(happens(pickUp(walker1,umbrella1),When),
         [b(start,When)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',98).

 /*  b(start, When) ->
       happens(pickUp(walker1, umbrella1), When).
 */
if b(start, When)then happens(pickUp(walker1, umbrella1), When).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',98).

 /*  reactive_rule([b(start,When)],
   	      [happens(pickUp(walker1,umbrella1),When)]).
 */

 /*  reactive_rule([b(start,When)],
   	      [happens(pickUp(walker1,umbrella1),When)]).
 */


% Happens(DoorOpen(Walker1,OriginDoor1),2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',98).

 /*  pl=axiom(happens(doorOpen(walker1,originDoor1),Start_Num2),
         [b(start,Start_Num2),toffset(start,2,Start_Num2)]).
 */

 /*  (   b(start, Start_Num2),
       toffset(start, 2, Start_Num2)
   ->  happens(doorOpen(walker1, originDoor1), Start_Num2)
   ).
 */
if b(start, Start_Num2), toffset(start, 2, Start_Num2)then happens(doorOpen(walker1, originDoor1), Start_Num2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',98).

 /*  reactive_rule([ b(start,Start_Num2),
   		toffset(start,2,Start_Num2)
   	      ],
   	      [happens(doorOpen(walker1,originDoor1),Start_Num2)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',98).

 /*  reactive_rule([ b(start,Start_Num2),
   		toffset(start,2,Start_Num2)
   	      ],
   	      [happens(doorOpen(walker1,originDoor1),Start_Num2)]).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',100).
% Happens(WalkThroughDoor21(Walker1,OriginDoor1),3).

 /*  pl=axiom(happens(walkThroughDoor21(walker1,originDoor1),Start_Num3),
         [b(start,Start_Num3),toffset(start,3,Start_Num3)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',100).

 /*  (   b(start, Start_Num3),
       toffset(start, 3, Start_Num3)
   ->  happens(walkThroughDoor21(walker1, originDoor1), Start_Num3)
   ).
 */
if b(start, Start_Num3), toffset(start, 3, Start_Num3)then happens(walkThroughDoor21(walker1, originDoor1), Start_Num3).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',100).

 /*  reactive_rule([ b(start,Start_Num3),
   		toffset(start,3,Start_Num3)
   	      ],
   	      [ happens(walkThroughDoor21(walker1,originDoor1),
   			Start_Num3)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',100).

 /*  reactive_rule([ b(start,Start_Num3),
   		toffset(start,3,Start_Num3)
   	      ],
   	      [ happens(walkThroughDoor21(walker1,originDoor1),
   			Start_Num3)
   	      ]).
 */


% Happens(DoorClose(Walker1,OriginDoor1),4).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',100).

 /*  pl=axiom(happens(doorClose(walker1,originDoor1),Start_Num4),
         [b(start,Start_Num4),toffset(start,4,Start_Num4)]).
 */

 /*  (   b(start, Start_Num4),
       toffset(start, 4, Start_Num4)
   ->  happens(doorClose(walker1, originDoor1), Start_Num4)
   ).
 */
if b(start, Start_Num4), toffset(start, 4, Start_Num4)then happens(doorClose(walker1, originDoor1), Start_Num4).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',100).

 /*  reactive_rule([ b(start,Start_Num4),
   		toffset(start,4,Start_Num4)
   	      ],
   	      [ happens(doorClose(walker1,originDoor1),
   			Start_Num4)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',100).

 /*  reactive_rule([ b(start,Start_Num4),
   		toffset(start,4,Start_Num4)
   	      ],
   	      [ happens(doorClose(walker1,originDoor1),
   			Start_Num4)
   	      ]).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',102).
% Happens(WalkStreet12(Walker1,StreetFromOriginToMiddle1),5).

 /*  pl=axiom(happens(walkStreet12(walker1,streetFromOriginToMiddle1),
   	      Start_Num5),
         [b(start,Start_Num5),toffset(start,5,Start_Num5)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',102).

 /*  (   b(start, Start_Num5),
       toffset(start, 5, Start_Num5)
   ->  happens(walkStreet12(walker1, streetFromOriginToMiddle1), Start_Num5)
   ).
 */
if b(start, Start_Num5), toffset(start, 5, Start_Num5)then happens(walkStreet12(walker1, streetFromOriginToMiddle1), Start_Num5).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',102).

 /*  reactive_rule([ b(start,Start_Num5),
   		toffset(start,5,Start_Num5)
   	      ],
   	      [ happens(walkStreet12(walker1,streetFromOriginToMiddle1),
   			Start_Num5)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',102).

 /*  reactive_rule([ b(start,Start_Num5),
   		toffset(start,5,Start_Num5)
   	      ],
   	      [ happens(walkStreet12(walker1,streetFromOriginToMiddle1),
   			Start_Num5)
   	      ]).
 */


% Happens(WalkStreet12(Walker1,StreetFromMiddleToDestination1),6).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',102).

 /*  pl=axiom(happens(walkStreet12(walker1,streetFromMiddleToDestination1),
   	      Start_Num6),
         [b(start,Start_Num6),toffset(start,6,Start_Num6)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',102).

 /*  (   b(start, Start_Num6),
       toffset(start, 6, Start_Num6)
   ->  happens(walkStreet12(walker1, streetFromMiddleToDestination1),
               Start_Num6)
   ).
 */
if b(start, Start_Num6), toffset(start, 6, Start_Num6)then happens(walkStreet12(walker1, streetFromMiddleToDestination1), Start_Num6).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',102).

 /*  reactive_rule([ b(start,Start_Num6),
   		toffset(start,6,Start_Num6)
   	      ],
   	      [ happens(walkStreet12(walker1,
   				     streetFromMiddleToDestination1),
   			Start_Num6)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',102).

 /*  reactive_rule([ b(start,Start_Num6),
   		toffset(start,6,Start_Num6)
   	      ],
   	      [ happens(walkStreet12(walker1,
   				     streetFromMiddleToDestination1),
   			Start_Num6)
   	      ]).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',104).
% Happens(DoorOpen(Walker1,DestinationDoor1),7).

 /*  pl=axiom(happens(doorOpen(walker1,destinationDoor1),Start_Num7),
         [b(start,Start_Num7),toffset(start,7,Start_Num7)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',104).

 /*  (   b(start, Start_Num7),
       toffset(start, 7, Start_Num7)
   ->  happens(doorOpen(walker1, destinationDoor1), Start_Num7)
   ).
 */
if b(start, Start_Num7), toffset(start, 7, Start_Num7)then happens(doorOpen(walker1, destinationDoor1), Start_Num7).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',104).

 /*  reactive_rule([ b(start,Start_Num7),
   		toffset(start,7,Start_Num7)
   	      ],
   	      [ happens(doorOpen(walker1,destinationDoor1),
   			Start_Num7)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',104).

 /*  reactive_rule([ b(start,Start_Num7),
   		toffset(start,7,Start_Num7)
   	      ],
   	      [ happens(doorOpen(walker1,destinationDoor1),
   			Start_Num7)
   	      ]).
 */


% Happens(WalkThroughDoor12(Walker1,DestinationDoor1),8).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',104).

 /*  pl=axiom(happens(walkThroughDoor12(walker1,destinationDoor1),
   	      Start_Num8),
         [b(start,Start_Num8),toffset(start,8,Start_Num8)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',104).

 /*  (   b(start, Start_Num8),
       toffset(start, 8, Start_Num8)
   ->  happens(walkThroughDoor12(walker1, destinationDoor1), Start_Num8)
   ).
 */
if b(start, Start_Num8), toffset(start, 8, Start_Num8)then happens(walkThroughDoor12(walker1, destinationDoor1), Start_Num8).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',104).

 /*  reactive_rule([ b(start,Start_Num8),
   		toffset(start,8,Start_Num8)
   	      ],
   	      [ happens(walkThroughDoor12(walker1,destinationDoor1),
   			Start_Num8)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',104).

 /*  reactive_rule([ b(start,Start_Num8),
   		toffset(start,8,Start_Num8)
   	      ],
   	      [ happens(walkThroughDoor12(walker1,destinationDoor1),
   			Start_Num8)
   	      ]).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',106).
% Happens(DoorClose(Walker1,DestinationDoor1),9).

 /*  pl=axiom(happens(doorClose(walker1,destinationDoor1),Start_Num9),
         [b(start,Start_Num9),toffset(start,9,Start_Num9)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',106).

 /*  (   b(start, Start_Num9),
       toffset(start, 9, Start_Num9)
   ->  happens(doorClose(walker1, destinationDoor1), Start_Num9)
   ).
 */
if b(start, Start_Num9), toffset(start, 9, Start_Num9)then happens(doorClose(walker1, destinationDoor1), Start_Num9).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',106).

 /*  reactive_rule([ b(start,Start_Num9),
   		toffset(start,9,Start_Num9)
   	      ],
   	      [ happens(doorClose(walker1,destinationDoor1),
   			Start_Num9)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',106).

 /*  reactive_rule([ b(start,Start_Num9),
   		toffset(start,9,Start_Num9)
   	      ],
   	      [ happens(doorClose(walker1,destinationDoor1),
   			Start_Num9)
   	      ]).
 */


% Happens(TakeOff(Walker1,Clothes1),10).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',106).

 /*  pl=axiom(happens(takeOff(walker1,clothes1),Start_Num10),
         [b(start,Start_Num10),toffset(start,10,Start_Num10)]).
 */

 /*  (   b(start, Start_Num10),
       toffset(start, 10, Start_Num10)
   ->  happens(takeOff(walker1, clothes1), Start_Num10)
   ).
 */
if b(start, Start_Num10), toffset(start, 10, Start_Num10)then happens(takeOff(walker1, clothes1), Start_Num10).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',106).

 /*  reactive_rule([ b(start,Start_Num10),
   		toffset(start,10,Start_Num10)
   	      ],
   	      [happens(takeOff(walker1,clothes1),Start_Num10)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',106).

 /*  reactive_rule([ b(start,Start_Num10),
   		toffset(start,10,Start_Num10)
   	      ],
   	      [happens(takeOff(walker1,clothes1),Start_Num10)]).
 */

% range time 0 11
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',108).
range(time,0,11).
 %  range(time,0,11).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',110).
% range offset 0 0
range(offset,0,0).
 %  range(offset,0,0).

% range diameter 0 0
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',110).
range(diameter,0,0).
 %  range(diameter,0,0).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e',113).
% completion Happens
completion(happens).
 %  completion(happens).
%; End of file.
% translate: ending  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/TakingAWalk.e.lps 
