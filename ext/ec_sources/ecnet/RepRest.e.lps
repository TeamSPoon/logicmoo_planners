:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',117).
% translate: unskipped  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e.lps 
:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(lps).
% translate: begining  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e.lps 
% Thu, 08 Oct 2020 19:06:29 GMT File: <stream>(0x5600a3a38200)%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{Mueller:InPress,
%;   author = "Erik T. Mueller",
%;   year = "in press",
%;   title = "Modelling space and time in narratives about restaurants",
%;   journal = "Literary and Linguistic Computing",
%; }
%;
%;sort boolean
%;sort integer
%;reified sort predicate
%;reified sort function
%;
%;sort time: integer
%;sort offset: integer
%;
%;reified sort fluent
%;reified sort event
%;
%;predicate Happens(event,time)
%;predicate HoldsAt(fluent,time)
%;predicate ReleasedAt(fluent,time)
%;predicate Initiates(event,fluent,time)
%;predicate Terminates(event,fluent,time)
%;predicate Releases(event,fluent,time)
%;
%;sort diameter: integer
%;
%;sort object
%;
%;sort agent: object
%;
%;sort physobj: object
%;sort bed: physobj
%;sort snowflake: physobj
%;sort sky: physobj
%;
%;sort stuff: physobj
%;
%;sort surface: physobj
%;sort ground: surface
%;
%;sort snow: stuff
%;sort ball
%;
%;sort food: physobj
%;sort fruit: food
%;sort orange: fruit
%;sort salad: food
%;
%;sort clothing: physobj
%;sort scarf: clothing
%;sort hat: clothing
%;
%;sort vegetablematter: physobj
%;sort coal: vegetablematter
%;
%;sort bodypart: physobj
%;sort hand: bodypart
%;
%;sort papertowels: physobj
%;sort device: physobj
%;sort electronicdevice: device
%;sort lamp: electronicdevice
%;
%;sort cat: physobj
%;
%;sort weapon: physobj
%;sort gun: weapon
%;sort bomb: weapon
%;sort bullet: weapon
%;
%;sort location
%;sort room: location, outside: location
%;
%;sort portal
%;sort door: portal, staircase: portal
%;sort street: portal
%;
%;sort building
%;
%;sort fire: object
%;
%;sort furniture: physobj
%;sort chair: furniture
%;sort table: furniture
%;
%;sort menu: physobj
%;sort bill: physobj
%;
%;sort script
%;

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',103).
% fluent Holding(agent,physobj)
 %  blue=fluent(holding(agent,physobj)).
 %  fluent(holding(agent,physobj)).
fluents([holding/2]).
 %  fluents([holding/2]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',103).
mpred_prop(holding(agent,physobj),fluent).
 %  mpred_prop(holding(agent,physobj),fluent).

% event PickUp(agent,physobj)
 %  blue=event(pickUp(agent,physobj)).
 %  event(pickUp(agent,physobj)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',103).
actions([pickUp/2]).
 %  actions([pickUp/2]).
mpred_prop(pickUp(agent,physobj),event).
 %  mpred_prop(pickUp(agent,physobj),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',105).
% event LetGoOf(agent,physobj)
 %  blue=event(letGoOf(agent,physobj)).
 %  event(letGoOf(agent,physobj)).
actions([letGoOf/2]).
 %  actions([letGoOf/2]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',105).
mpred_prop(letGoOf(agent,physobj),event).
 %  mpred_prop(letGoOf(agent,physobj),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',107).
% [agent,physobj,time]
% Initiates(PickUp(agent,physobj),Holding(agent,physobj),time).

 /*  pl=axiom(initiates(pickUp(Agent,Physobj),
   		holding(Agent,Physobj),
   		Time),
         []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',107).

 /*  initiates(pickUp(Agent,Physobj),
   	  holding(Agent,Physobj),
   	  Time).
 */
pickUp(Agent, Physobj)initiates holding(Agent, Physobj).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',107).

 /*  initiated(happens(pickUp(Agent,Physobj),
   		  Time_From,
   		  Time_Until),
   	  holding(Agent,Physobj),
   	  []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',107).

 /*  initiated(happens(pickUp(Agent,Physobj),
   		  Time_From,
   		  Time_Until),
   	  holding(Agent,Physobj),
   	  []).
 */


% [agent,physobj,time]
% Happens(PickUp(agent,physobj),time) ->
% {location}% 
%   HoldsAt(At(agent,location),time) &
%   HoldsAt(At(physobj,location),time).
 %  clausify_pnf=exists([Location],  (happens(pickUp(Agent, Physobj), Time)->holds_at(at(Agent, Location), Time), holds_at(at(Physobj, Location), Time))).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',111).

 /*  not(happens(pickUp(Agent, Physobj), Time)) :-
       (   not(holds_at(at(Agent, Exists_Location), Time))
       ;   not(holds_at(at(Physobj, Exists_Location), Time))
       ),
       some(Exists_Location,
            '$kolem_Fn_37'(Agent, Physobj, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',111).

 /*  fix_axiom_head(Time) ->
       [ not(happens(pickUp(Agent, Physobj), Time)),
          (->),
         not(pickUp(Agent, Physobj))
       ].
 */
 %   pl=axiom(not(pickUp(Agent, Physobj)), [(not(at(Agent, Exists_Location));not(at(Physobj, Exists_Location))), some(Exists_Location, '$kolem_Fn_37'(Agent, Physobj, Time))]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',111).

 /*  (   (   not(at(Agent, Exists_Location))
       ;   not(at(Physobj, Exists_Location))
       ),
       some(Exists_Location,
            '$kolem_Fn_37'(Agent, Physobj, Time))
   ->  not(pickUp(Agent, Physobj))
   ).
 */
if (not loc_at(Agent, Exists_Location);not loc_at(Physobj, Exists_Location)), some(Exists_Location, '$kolem_Fn_37'(Agent, Physobj, Time))then not pickUp(Agent, Physobj).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',111).

 /*   reactive_rule([  (not(loc_at(Agent, Exists_Location));not(loc_at(Physobj, Exists_Location))),
                      some(Exists_Location,
                           '$kolem_Fn_37'(Agent, Physobj, Time))
                    ],
                    [not(pickUp(Agent, Physobj))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',111).

 /*   reactive_rule([  (not(loc_at(Agent, Exists_Location));not(loc_at(Physobj, Exists_Location))),
                      some(Exists_Location,
                           '$kolem_Fn_37'(Agent, Physobj, Time))
                    ],
                    [not(pickUp(Agent, Physobj))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',111).

 /*  holds_at(at(Agent, Exists_Location), Time) :-
       happens(pickUp(Agent, Physobj), Time),
       some(Exists_Location,
            '$kolem_Fn_37'(Agent, Physobj, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',111).

 /*  fix_axiom_head(Time) ->
       [ holds_at(at(Agent, Exists_Location), Time),
          (->),
         at(Agent, Exists_Location)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',111).

 /*  pl=axiom(at(Agent,Exists_Location),
         [ pickUp(Agent,Physobj),
   	some(Exists_Location,
   	     '$kolem_Fn_37'(Agent,Physobj,Time))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',111).

 /*  (   pickUp(Agent, Physobj),
       some(Exists_Location,
            '$kolem_Fn_37'(Agent, Physobj, Time))
   ->  at(Agent, Exists_Location)
   ).
 */
if pickUp(Agent, Physobj), some(Exists_Location, '$kolem_Fn_37'(Agent, Physobj, Time))then loc_at(Agent, Exists_Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',111).

 /*  reactive_rule([ happens(pickUp(Agent,Physobj),
   			Time_From,
   			Time_Until),
   		some(Exists_Location,
   		     '$kolem_Fn_37'(Agent,Physobj,Time))
   	      ],
   	      [loc_at(Agent,Exists_Location)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',111).

 /*  reactive_rule([ happens(pickUp(Agent,Physobj),
   			Time_From,
   			Time_Until),
   		some(Exists_Location,
   		     '$kolem_Fn_37'(Agent,Physobj,Time))
   	      ],
   	      [loc_at(Agent,Exists_Location)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',111).

 /*  holds_at(at(Physobj, Exists_Location), Time) :-
       happens(pickUp(Agent, Physobj), Time),
       some(Exists_Location,
            '$kolem_Fn_37'(Agent, Physobj, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',111).

 /*  fix_axiom_head(Time) ->
       [ holds_at(at(Physobj, Exists_Location), Time),
          (->),
         at(Physobj, Exists_Location)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',111).

 /*  pl=axiom(at(Physobj,Exists_Location),
         [ pickUp(Agent,Physobj),
   	some(Exists_Location,
   	     '$kolem_Fn_37'(Agent,Physobj,Time))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',111).

 /*  (   pickUp(Agent, Physobj),
       some(Exists_Location,
            '$kolem_Fn_37'(Agent, Physobj, Time))
   ->  at(Physobj, Exists_Location)
   ).
 */
if pickUp(Agent, Physobj), some(Exists_Location, '$kolem_Fn_37'(Agent, Physobj, Time))then loc_at(Physobj, Exists_Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',111).

 /*  reactive_rule([ happens(pickUp(Agent,Physobj),
   			Time_From7,
   			Time_Until8),
   		some(Exists_Location,
   		     '$kolem_Fn_37'(Agent,Physobj,Time))
   	      ],
   	      [loc_at(Physobj,Exists_Location)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',111).

 /*  reactive_rule([ happens(pickUp(Agent,Physobj),
   			Time_From7,
   			Time_Until8),
   		some(Exists_Location,
   		     '$kolem_Fn_37'(Agent,Physobj,Time))
   	      ],
   	      [loc_at(Physobj,Exists_Location)]).
 */


% [agent,physobj,time]
% Terminates(LetGoOf(agent,physobj),Holding(agent,physobj),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',117).

 /*  pl=axiom(terminates(letGoOf(Agent,Physobj),
   		 holding(Agent,Physobj),
   		 Time),
         []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',117).

 /*  terminates(letGoOf(Agent,Physobj),
   	   holding(Agent,Physobj),
   	   Time).
 */
letGoOf(Agent, Physobj)terminates holding(Agent, Physobj).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',117).

 /*  terminated(happens(letGoOf(Agent,Physobj),
   		   Time_From,
   		   Time_Until),
   	   holding(Agent,Physobj),
   	   []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',117).

 /*  terminated(happens(letGoOf(Agent,Physobj),
   		   Time_From,
   		   Time_Until),
   	   holding(Agent,Physobj),
   	   []).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',119).
% [agent,physobj,time]
% Happens(LetGoOf(agent,physobj),time) ->
% HoldsAt(Holding(agent,physobj),time).
 %  clausify_pnf=(happens(letGoOf(Agent, Physobj), Time)->holds_at(holding(Agent, Physobj), Time)).

 /*  holds_at(holding(Agent, Physobj), Time) :-
       happens(letGoOf(Agent, Physobj), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',119).

 /*  pl=axiom(requires(letGoOf(Agent,Physobj),When_Time),
         [metreqs(letGoOf(Agent,Physobj))]).
 */

 /*  metreqs(letGoOf(Agent, Physobj)) ->
       requires(letGoOf(Agent, Physobj), When_Time).
 */
if metreqs(letGoOf(Agent, Physobj))then requires(letGoOf(Agent, Physobj), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',119).

 /*  reactive_rule([metreqs(letGoOf(Agent,Physobj))],
   	      [ requires(letGoOf(Agent,Physobj),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',119).

 /*  reactive_rule([metreqs(letGoOf(Agent,Physobj))],
   	      [ requires(letGoOf(Agent,Physobj),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',119).

 /*  fix_axiom_head(When_Time) ->
       [ holds_at(metreqs(letGoOf(Agent, Physobj)), When_Time),
          (->),
         metreqs(letGoOf(Agent, Physobj))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',119).

 /*  pl=axiom(metreqs(letGoOf(Agent,Physobj)),
         [holding(Agent,Physobj)]).
 */

 /*  holding(Agent, Physobj) ->
       metreqs(letGoOf(Agent, Physobj)).
 */
if holding(Agent, Physobj)then metreqs(letGoOf(Agent, Physobj)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',119).

 /*  reactive_rule([holds(holding(Agent,Physobj),Holds)],
   	      [metreqs(letGoOf(Agent,Physobj))]).
 */

 /*  reactive_rule([holds(holding(Agent,Physobj),Holds)],
   	      [metreqs(letGoOf(Agent,Physobj))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',119).

 /*  not(happens(letGoOf(Agent, Physobj), When_Time)) :-
       not(holds_at(holding(Agent, Physobj), When_Time)).
 */

 /*  fix_axiom_head(When_Time) ->
       [ not(happens(letGoOf(Agent, Physobj), When_Time)),
          (->),
         not(letGoOf(Agent, Physobj))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',119).

 /*  pl=axiom(not(letGoOf(Agent,Physobj)),
         [not(holding(Agent,Physobj))]).
 */

 /*  not(holding(Agent, Physobj)) ->
       not(letGoOf(Agent, Physobj)).
 */
if not holding(Agent, Physobj)then not letGoOf(Agent, Physobj).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',119).

 /*  reactive_rule([ holds(not(holding(Agent,Physobj)),
   		      Holds5)
   	      ],
   	      [not(letGoOf(Agent,Physobj))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',119).

 /*  reactive_rule([ holds(not(holding(Agent,Physobj)),
   		      Holds5)
   	      ],
   	      [not(letGoOf(Agent,Physobj))]).
 */


% [agent,physobj,location,time]
% Releases(PickUp(agent,physobj),At(physobj,location),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',124).

 /*  pl=axiom(releases(pickUp(Agent,Physobj),
   	       at(Physobj,Location),
   	       Time),
         []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',124).

 /*  releases(pickUp(Agent,Physobj),
   	 at(Physobj,Location),
   	 Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',124).
releases(pickUp(Agent,Physobj),
	 loc_at(Physobj,Location),
	 Time).

 /*  releases(pickUp(Agent,Physobj),
   	 loc_at(Physobj,Location),
   	 Time).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',126).
% [agent,physobj,location,time]
% HoldsAt(Holding(agent,physobj),time) &
% HoldsAt(At(agent,location),time) ->
% HoldsAt(At(physobj,location),time).
 %  clausify_pnf=(holds_at(holding(Agent, Physobj), Time), holds_at(at(Agent, Location), Time)->holds_at(at(Physobj, Location), Time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',126).

 /*  holds_at(at(Physobj, Location), Time) :-
       holds_at(holding(Agent, Physobj), Time),
       holds_at(at(Agent, Location), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',126).

 /*  fix_axiom_head(Time) ->
       [ holds_at(at(Physobj, Location), Time),
          (->),
         at(Physobj, Location)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',126).

 /*  pl=axiom(at(Physobj,Location),
         [ holding(Agent,Physobj),
   	at(Agent,Location)
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',126).

 /*  (   holding(Agent, Physobj),
       at(Agent, Location)
   ->  at(Physobj, Location)
   ).
 */
if holding(Agent, Physobj), loc_at(Agent, Location)then loc_at(Physobj, Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',126).

 /*  reactive_rule([ holds(holding(Agent,Physobj),Holds),
   		loc_at(Agent,Location)
   	      ],
   	      [loc_at(Physobj,Location)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',126).

 /*  reactive_rule([ holds(holding(Agent,Physobj),Holds),
   		loc_at(Agent,Location)
   	      ],
   	      [loc_at(Physobj,Location)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',126).

 /*  not(holds_at(holding(Agent, Physobj), Time)) :-
       holds_at(at(Agent, Location), Time),
       not(holds_at(at(Physobj, Location), Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',126).

 /*  pl=axiom(not(holding(Agent,Physobj)),
         [ at(Agent,Location),
   	not(at(Physobj,Location))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',126).

 /*  (   at(Agent, Location),
       not(at(Physobj, Location))
   ->  not(holding(Agent, Physobj))
   ).
 */
if loc_at(Agent, Location), not loc_at(Physobj, Location)then not holding(Agent, Physobj).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',126).

 /*  reactive_rule([ loc_at(Agent,Location),
   		not(loc_at(Physobj,Location))
   	      ],
   	      [ holds(not(holding(Agent,Physobj)),
   		      Holds5)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',126).

 /*  reactive_rule([ loc_at(Agent,Location),
   		not(loc_at(Physobj,Location))
   	      ],
   	      [ holds(not(holding(Agent,Physobj)),
   		      Holds5)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',126).

 /*  not(holds_at(at(Agent, Location), Time)) :-
       holds_at(holding(Agent, Physobj), Time),
       not(holds_at(at(Physobj, Location), Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',126).

 /*  pl=axiom(not(at(Agent,Location)),
         [ holding(Agent,Physobj),
   	not(at(Physobj,Location))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',126).

 /*  (   holding(Agent, Physobj),
       not(at(Physobj, Location))
   ->  not(at(Agent, Location))
   ).
 */
if holding(Agent, Physobj), not loc_at(Physobj, Location)then not loc_at(Agent, Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',126).

 /*  reactive_rule([ holds(holding(Agent,Physobj),Holds6),
   		not(loc_at(Physobj,Location))
   	      ],
   	      [not(loc_at(Agent,Location))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',126).

 /*  reactive_rule([ holds(holding(Agent,Physobj),Holds6),
   		not(loc_at(Physobj,Location))
   	      ],
   	      [not(loc_at(Agent,Location))]).
 */


%;[agent,physobj,location1,location2,time]
%;HoldsAt(At(agent,location1),time) &
%;location1!=location2 ->
%;Terminates(LetGoOf(agent,physobj),At(physobj,location2),time).
% [agent,physobj,location,time]
% HoldsAt(At(agent,location),time) ->
% Initiates(LetGoOf(agent,physobj),At(physobj,location),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',136).

 /*  pl=axiom(initiates(letGoOf(Agent,Physobj),
   		at(Physobj,Location),
   		Time),
         [at(Agent,Location)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',136).

 /*  at(Agent, Location) ->
       initiates(letGoOf(Agent, Physobj),
                 at(Physobj, Location),
                 Time).
 */
if loc_at(Agent, Location)then initiates(letGoOf(Agent, Physobj), loc_at(Physobj, Location)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',136).

 /*  reactive_rule([loc_at(Agent,Location)],
   	      [ initiates(letGoOf(Agent,Physobj),
   			  at(loc_at(Physobj,Location),
   			     Time),
   			  Initiates)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',136).

 /*  reactive_rule([loc_at(Agent,Location)],
   	      [ initiates(letGoOf(Agent,Physobj),
   			  at(loc_at(Physobj,Location),
   			     Time),
   			  Initiates)
   	      ]).
 */

% fluent On(physobj,physobj)
 %  blue=fluent(on(physobj,physobj)).
 %  fluent(on(physobj,physobj)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',139).
fluents([on/2]).
 %  fluents([on/2]).
mpred_prop(on(physobj,physobj),fluent).
 %  mpred_prop(on(physobj,physobj),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',142).
% event PlaceOn(agent,physobj,physobj)
 %  blue=event(placeOn(agent,physobj,physobj)).
 %  event(placeOn(agent,physobj,physobj)).
actions([placeOn/3]).
 %  actions([placeOn/3]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',142).
mpred_prop(placeOn(agent,physobj,physobj),event).
 %  mpred_prop(placeOn(agent,physobj,physobj),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',144).
% event TakeOffOf(agent,physobj,physobj)
 %  blue=event(takeOffOf(agent,physobj,physobj)).
 %  event(takeOffOf(agent,physobj,physobj)).
actions([takeOffOf/3]).
 %  actions([takeOffOf/3]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',144).
mpred_prop(takeOffOf(agent,physobj,physobj),event).
 %  mpred_prop(takeOffOf(agent,physobj,physobj),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',146).
% [physobj1,physobj2,time]
% HoldsAt(On(physobj1,physobj2),time) ->
% physobj1!=physobj2.
 %  clausify_pnf=(holds_at(on(Physobj1, Physobj2), Time)->diff(Physobj1, Physobj2)).

 /*  not(holds_at(on(Physobj1, Physobj2), Time)) :-
       not(diff(Physobj1, Physobj2)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',146).

 /*  pl=axiom(not(on(Physobj1,Physobj2)),
         [equals(Physobj1,Physobj2)]).
 */

 /*  equals(Physobj1, Physobj2) ->
       not(on(Physobj1, Physobj2)).
 */
if equals(Physobj1, Physobj2)then not on(Physobj1, Physobj2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',146).

 /*  reactive_rule([equals(Physobj1,Physobj2)],
   	      [ holds(not(on(Physobj1,Physobj2)),
   		      Holds)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',146).

 /*  reactive_rule([equals(Physobj1,Physobj2)],
   	      [ holds(not(on(Physobj1,Physobj2)),
   		      Holds)
   	      ]).
 */


% [physobj1,physobj2,time]
% HoldsAt(On(physobj1,physobj2),time) ->
% !HoldsAt(On(physobj2,physobj1),time).
 %  clausify_pnf=(holds_at(on(Physobj1, Physobj2), Time)->holds_at(neg(on(Physobj2, Physobj1)), Time)).

 /*  holds_at(neg(on(Physobj2, Physobj1)), Time) :-
       holds_at(on(Physobj1, Physobj2), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',151).

 /*  fix_axiom_head(Time) ->
       [ holds_at(neg(on(Physobj2, Physobj1)), Time),
          (->),
         not(on(Physobj2, Physobj1))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',151).

 /*  pl=axiom(not(on(Physobj2,Physobj1)),
         [on(Physobj1,Physobj2)]).
 */

 /*  on(Physobj1, Physobj2) ->
       not(on(Physobj2, Physobj1)).
 */
if on(Physobj1, Physobj2)then not on(Physobj2, Physobj1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',151).

 /*  reactive_rule([holds(on(Physobj1,Physobj2),Holds)],
   	      [ holds(not(on(Physobj2,Physobj1)),
   		      Holds4)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',151).

 /*  reactive_rule([holds(on(Physobj1,Physobj2),Holds)],
   	      [ holds(not(on(Physobj2,Physobj1)),
   		      Holds4)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',151).

 /*  not(holds_at(on(Physobj1, Physobj2), Time)) :-
       not(holds_at(neg(on(Physobj2, Physobj1)), Time)).
 */

 /*  pl=axiom(not(on(Physobj1,Physobj2)),
         [not(not(on(Physobj2,Physobj1)))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',151).

 /*  not(not(on(Physobj2, Physobj1))) ->
       not(on(Physobj1, Physobj2)).
 */
if not not on(Physobj2, Physobj1)then not on(Physobj1, Physobj2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',151).

 /*  reactive_rule([ holds(not([ holds(not(on(Physobj2,Physobj1)),
   				  Holds5)
   			  ]),
   		      Holds5)
   	      ],
   	      [ holds(not(on(Physobj1,Physobj2)),
   		      Holds6)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',151).

 /*  reactive_rule([ holds(not([ holds(not(on(Physobj2,Physobj1)),
   				  Holds5)
   			  ]),
   		      Holds5)
   	      ],
   	      [ holds(not(on(Physobj1,Physobj2)),
   		      Holds6)
   	      ]).
 */


% [agent,physobj1,physobj2,time]
% Initiates(PlaceOn(agent,physobj1,physobj2),
%           On(physobj1,physobj2),time).

 /*  pl=axiom(initiates(placeOn(Agent,Physobj1,Physobj2),
   		on(Physobj1,Physobj2),
   		Time),
         []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',155).

 /*  initiates(placeOn(Agent,Physobj1,Physobj2),
   	  on(Physobj1,Physobj2),
   	  Time).
 */
placeOn(Agent, Physobj1, Physobj2)initiates on(Physobj1, Physobj2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',155).

 /*  initiated(happens(placeOn(Agent,Physobj1,Physobj2),
   		  Time_From,
   		  Time_Until),
   	  on(Physobj1,Physobj2),
   	  []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',155).

 /*  initiated(happens(placeOn(Agent,Physobj1,Physobj2),
   		  Time_From,
   		  Time_Until),
   	  on(Physobj1,Physobj2),
   	  []).
 */


% [agent,physobj1,physobj2,time]
% Terminates(PlaceOn(agent,physobj1,physobj2),
%            Holding(agent,physobj1),time).

 /*  pl=axiom(terminates(placeOn(Agent,Physobj1,Physobj2),
   		 holding(Agent,Physobj1),
   		 Time),
         []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',159).

 /*  terminates(placeOn(Agent,Physobj1,Physobj2),
   	   holding(Agent,Physobj1),
   	   Time).
 */
placeOn(Agent, Physobj1, Physobj2)terminates holding(Agent, Physobj1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',159).

 /*  terminated(happens(placeOn(Agent,Physobj1,Physobj2),
   		   Time_From,
   		   Time_Until),
   	   holding(Agent,Physobj1),
   	   []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',159).

 /*  terminated(happens(placeOn(Agent,Physobj1,Physobj2),
   		   Time_From,
   		   Time_Until),
   	   holding(Agent,Physobj1),
   	   []).
 */


% [agent,physobj1,physobj2,time]
% Happens(PlaceOn(agent,physobj1,physobj2),time) ->
% HoldsAt(Holding(agent,physobj1),time) &
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',163).
% {location}% 
%  HoldsAt(At(agent,location),time) &
%  HoldsAt(At(physobj2,location),time).
 %  clausify_pnf=exists([Location],  (happens(placeOn(Agent, Physobj1, Physobj2), Time)->holds_at(holding(Agent, Physobj1), Time), holds_at(at(Agent, Location), Time), holds_at(at(Physobj2, Location), Time))).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',165).

 /*  not(happens(placeOn(Agent, Physobj1, Physobj2), Time)) :-
       (   not(holds_at(holding(Agent, Physobj1), Time))
       ;   not(holds_at(at(Agent, Exists_Location), Time))
       ;   not(holds_at(at(Physobj2, Exists_Location), Time))
       ),
       some(Exists_Location,
            '$kolem_Fn_38'(Agent, Physobj1, Physobj2, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',165).

 /*  fix_axiom_head(Time) ->
       [ not(happens(placeOn(Agent, Physobj1, Physobj2),
                     Time)),
          (->),
         not(placeOn(Agent, Physobj1, Physobj2))
       ].
 */
 %   pl=axiom(not(placeOn(Agent, Physobj1, Physobj2)), [(not(holding(Agent, Physobj1));not(at(Agent, Exists_Location));not(at(Physobj2, Exists_Location))), some(Exists_Location, '$kolem_Fn_38'(Agent, Physobj1, Physobj2, Time))]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',165).

 /*  (   (   not(holding(Agent, Physobj1))
       ;   not(at(Agent, Exists_Location))
       ;   not(at(Physobj2, Exists_Location))
       ),
       some(Exists_Location,
            '$kolem_Fn_38'(Agent, Physobj1, Physobj2, Time))
   ->  not(placeOn(Agent, Physobj1, Physobj2))
   ).
 */
if (not holding(Agent, Physobj1);not loc_at(Agent, Exists_Location);not loc_at(Physobj2, Exists_Location)), some(Exists_Location, '$kolem_Fn_38'(Agent, Physobj1, Physobj2, Time))then not placeOn(Agent, Physobj1, Physobj2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',165).

 /*   reactive_rule([  (not(holding(Agent, Physobj1));not(loc_at(Agent, Exists_Location));not(loc_at(Physobj2, Exists_Location))),
                      some(Exists_Location,
                           '$kolem_Fn_38'(Agent,
                                          Physobj1,
                                          Physobj2,
                                          Time))
                    ],
                    [not(placeOn(Agent, Physobj1, Physobj2))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',165).

 /*   reactive_rule([  (not(holding(Agent, Physobj1));not(loc_at(Agent, Exists_Location));not(loc_at(Physobj2, Exists_Location))),
                      some(Exists_Location,
                           '$kolem_Fn_38'(Agent,
                                          Physobj1,
                                          Physobj2,
                                          Time))
                    ],
                    [not(placeOn(Agent, Physobj1, Physobj2))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',165).

 /*  holds_at(holding(Agent, Physobj1), Time) :-
       happens(placeOn(Agent, Physobj1, Physobj2), Time),
       some(Exists_Location,
            '$kolem_Fn_38'(Agent, Physobj1, Physobj2, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',165).

 /*  fix_axiom_head(Time) ->
       [ holds_at(holding(Agent, Physobj1), Time),
          (->),
         holding(Agent, Physobj1)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',165).

 /*  pl=axiom(holding(Agent,Physobj1),
         [ placeOn(Agent,Physobj1,Physobj2),
   	some(Exists_Location,
   	     '$kolem_Fn_38'(Agent,
   			    Physobj1,
   			    Physobj2,
   			    Time))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',165).

 /*  (   placeOn(Agent, Physobj1, Physobj2),
       some(Exists_Location,
            '$kolem_Fn_38'(Agent, Physobj1, Physobj2, Time))
   ->  holding(Agent, Physobj1)
   ).
 */
if placeOn(Agent, Physobj1, Physobj2), some(Exists_Location, '$kolem_Fn_38'(Agent, Physobj1, Physobj2, Time))then holding(Agent, Physobj1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',165).

 /*  reactive_rule([ happens(placeOn(Agent,
   				Physobj1,
   				Physobj2),
   			Time_From,
   			Time_Until),
   		some(Exists_Location,
   		     '$kolem_Fn_38'(Agent,
   				    Physobj1,
   				    Physobj2,
   				    Time))
   	      ],
   	      [holds(holding(Agent,Physobj1),Holds)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',165).

 /*  reactive_rule([ happens(placeOn(Agent,
   				Physobj1,
   				Physobj2),
   			Time_From,
   			Time_Until),
   		some(Exists_Location,
   		     '$kolem_Fn_38'(Agent,
   				    Physobj1,
   				    Physobj2,
   				    Time))
   	      ],
   	      [holds(holding(Agent,Physobj1),Holds)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',165).

 /*  holds_at(at(Agent, Exists_Location), Time) :-
       happens(placeOn(Agent, Physobj1, Physobj2), Time),
       some(Exists_Location,
            '$kolem_Fn_38'(Agent, Physobj1, Physobj2, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',165).

 /*  fix_axiom_head(Time) ->
       [ holds_at(at(Agent, Exists_Location), Time),
          (->),
         at(Agent, Exists_Location)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',165).

 /*  pl=axiom(at(Agent,Exists_Location),
         [ placeOn(Agent,Physobj1,Physobj2),
   	some(Exists_Location,
   	     '$kolem_Fn_38'(Agent,
   			    Physobj1,
   			    Physobj2,
   			    Time))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',165).

 /*  (   placeOn(Agent, Physobj1, Physobj2),
       some(Exists_Location,
            '$kolem_Fn_38'(Agent, Physobj1, Physobj2, Time))
   ->  at(Agent, Exists_Location)
   ).
 */
if placeOn(Agent, Physobj1, Physobj2), some(Exists_Location, '$kolem_Fn_38'(Agent, Physobj1, Physobj2, Time))then loc_at(Agent, Exists_Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',165).

 /*  reactive_rule([ happens(placeOn(Agent,
   				Physobj1,
   				Physobj2),
   			Time_From9,
   			Time_Until10),
   		some(Exists_Location,
   		     '$kolem_Fn_38'(Agent,
   				    Physobj1,
   				    Physobj2,
   				    Time))
   	      ],
   	      [loc_at(Agent,Exists_Location)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',165).

 /*  reactive_rule([ happens(placeOn(Agent,
   				Physobj1,
   				Physobj2),
   			Time_From9,
   			Time_Until10),
   		some(Exists_Location,
   		     '$kolem_Fn_38'(Agent,
   				    Physobj1,
   				    Physobj2,
   				    Time))
   	      ],
   	      [loc_at(Agent,Exists_Location)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',165).

 /*  holds_at(at(Physobj2, Exists_Location), Time) :-
       happens(placeOn(Agent, Physobj1, Physobj2), Time),
       some(Exists_Location,
            '$kolem_Fn_38'(Agent, Physobj1, Physobj2, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',165).

 /*  fix_axiom_head(Time) ->
       [ holds_at(at(Physobj2, Exists_Location), Time),
          (->),
         at(Physobj2, Exists_Location)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',165).

 /*  pl=axiom(at(Physobj2,Exists_Location),
         [ placeOn(Agent,Physobj1,Physobj2),
   	some(Exists_Location,
   	     '$kolem_Fn_38'(Agent,
   			    Physobj1,
   			    Physobj2,
   			    Time))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',165).

 /*  (   placeOn(Agent, Physobj1, Physobj2),
       some(Exists_Location,
            '$kolem_Fn_38'(Agent, Physobj1, Physobj2, Time))
   ->  at(Physobj2, Exists_Location)
   ).
 */
if placeOn(Agent, Physobj1, Physobj2), some(Exists_Location, '$kolem_Fn_38'(Agent, Physobj1, Physobj2, Time))then loc_at(Physobj2, Exists_Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',165).

 /*  reactive_rule([ happens(placeOn(Agent,
   				Physobj1,
   				Physobj2),
   			Time_From11,
   			Time_Until12),
   		some(Exists_Location,
   		     '$kolem_Fn_38'(Agent,
   				    Physobj1,
   				    Physobj2,
   				    Time))
   	      ],
   	      [loc_at(Physobj2,Exists_Location)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',165).

 /*  reactive_rule([ happens(placeOn(Agent,
   				Physobj1,
   				Physobj2),
   			Time_From11,
   			Time_Until12),
   		some(Exists_Location,
   		     '$kolem_Fn_38'(Agent,
   				    Physobj1,
   				    Physobj2,
   				    Time))
   	      ],
   	      [loc_at(Physobj2,Exists_Location)]).
 */


% [agent,physobj1,physobj2,time]
% Terminates(TakeOffOf(agent,physobj1,physobj2),
%            On(physobj1,physobj2),time).

 /*  pl=axiom(terminates(takeOffOf(Agent,Physobj1,Physobj2),
   		 on(Physobj1,Physobj2),
   		 Time),
         []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',170).

 /*  terminates(takeOffOf(Agent,Physobj1,Physobj2),
   	   on(Physobj1,Physobj2),
   	   Time).
 */
takeOffOf(Agent, Physobj1, Physobj2)terminates on(Physobj1, Physobj2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',170).

 /*  terminated(happens(takeOffOf(Agent,Physobj1,Physobj2),
   		   Time_From,
   		   Time_Until),
   	   on(Physobj1,Physobj2),
   	   []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',170).

 /*  terminated(happens(takeOffOf(Agent,Physobj1,Physobj2),
   		   Time_From,
   		   Time_Until),
   	   on(Physobj1,Physobj2),
   	   []).
 */


% [agent,physobj1,physobj2,time]
% Initiates(TakeOffOf(agent,physobj1,physobj2),
%           Holding(agent,physobj1),time).

 /*  pl=axiom(initiates(takeOffOf(Agent,Physobj1,Physobj2),
   		holding(Agent,Physobj1),
   		Time),
         []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',174).

 /*  initiates(takeOffOf(Agent,Physobj1,Physobj2),
   	  holding(Agent,Physobj1),
   	  Time).
 */
takeOffOf(Agent, Physobj1, Physobj2)initiates holding(Agent, Physobj1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',174).

 /*  initiated(happens(takeOffOf(Agent,Physobj1,Physobj2),
   		  Time_From,
   		  Time_Until),
   	  holding(Agent,Physobj1),
   	  []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',174).

 /*  initiated(happens(takeOffOf(Agent,Physobj1,Physobj2),
   		  Time_From,
   		  Time_Until),
   	  holding(Agent,Physobj1),
   	  []).
 */


% [agent,physobj1,physobj2,location,time]
% Releases(TakeOffOf(agent,physobj1,physobj2),
%          At(physobj1,location),
%          time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',178).

 /*  pl=axiom(releases(takeOffOf(Agent,Physobj1,Physobj2),
   	       at(Physobj1,Location),
   	       Time),
         []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',178).

 /*  releases(takeOffOf(Agent,Physobj1,Physobj2),
   	 at(Physobj1,Location),
   	 Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',178).
releases(takeOffOf(Agent,Physobj1,Physobj2),
	 loc_at(Physobj1,Location),
	 Time).

 /*  releases(takeOffOf(Agent,Physobj1,Physobj2),
   	 loc_at(Physobj1,Location),
   	 Time).
 */


% [agent,physobj1,physobj2,time]
% Happens(TakeOffOf(agent,physobj1,physobj2),time) ->
% HoldsAt(On(physobj1,physobj2),time) &
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',183).
% {location}% 
%  HoldsAt(At(agent,location),time) &
%  HoldsAt(At(physobj1,location),time) &
%  HoldsAt(At(physobj2,location),time).
 %  clausify_pnf=exists([Location],  (happens(takeOffOf(Agent, Physobj1, Physobj2), Time)->holds_at(on(Physobj1, Physobj2), Time), holds_at(at(Agent, Location), Time), holds_at(at(Physobj1, Location), Time), holds_at(at(Physobj2, Location), Time))).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',185).

 /*  not(happens(takeOffOf(Agent, Physobj1, Physobj2), Time)) :-
       (   not(holds_at(on(Physobj1, Physobj2), Time))
       ;   not(holds_at(at(Agent, Exists_Location), Time))
       ;   not(holds_at(at(Physobj1, Exists_Location), Time))
       ;   not(holds_at(at(Physobj2, Exists_Location), Time))
       ),
       some(Exists_Location,
            '$kolem_Fn_39'(Agent, Physobj1, Physobj2, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',185).

 /*  fix_axiom_head(Time) ->
       [ not(happens(takeOffOf(Agent, Physobj1, Physobj2),
                     Time)),
          (->),
         not(takeOffOf(Agent, Physobj1, Physobj2))
       ].
 */
 %   pl=axiom(not(takeOffOf(Agent, Physobj1, Physobj2)), [(not(on(Physobj1, Physobj2));not(at(Agent, Exists_Location));not(at(Physobj1, Exists_Location));not(at(Physobj2, Exists_Location))), some(Exists_Location, '$kolem_Fn_39'(Agent, Physobj1, Physobj2, Time))]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',185).

 /*  (   (   not(on(Physobj1, Physobj2))
       ;   not(at(Agent, Exists_Location))
       ;   not(at(Physobj1, Exists_Location))
       ;   not(at(Physobj2, Exists_Location))
       ),
       some(Exists_Location,
            '$kolem_Fn_39'(Agent, Physobj1, Physobj2, Time))
   ->  not(takeOffOf(Agent, Physobj1, Physobj2))
   ).
 */
if (not on(Physobj1, Physobj2);not loc_at(Agent, Exists_Location);not loc_at(Physobj1, Exists_Location);not loc_at(Physobj2, Exists_Location)), some(Exists_Location, '$kolem_Fn_39'(Agent, Physobj1, Physobj2, Time))then not takeOffOf(Agent, Physobj1, Physobj2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',185).

 /*   reactive_rule([  (not(on(Physobj1, Physobj2));not(loc_at(Agent, Exists_Location));not(loc_at(Physobj1, Exists_Location));not(loc_at(Physobj2, Exists_Location))),
                      some(Exists_Location,
                           '$kolem_Fn_39'(Agent,
                                          Physobj1,
                                          Physobj2,
                                          Time))
                    ],
                    [not(takeOffOf(Agent, Physobj1, Physobj2))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',185).

 /*   reactive_rule([  (not(on(Physobj1, Physobj2));not(loc_at(Agent, Exists_Location));not(loc_at(Physobj1, Exists_Location));not(loc_at(Physobj2, Exists_Location))),
                      some(Exists_Location,
                           '$kolem_Fn_39'(Agent,
                                          Physobj1,
                                          Physobj2,
                                          Time))
                    ],
                    [not(takeOffOf(Agent, Physobj1, Physobj2))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',185).

 /*  holds_at(on(Physobj1, Physobj2), Time) :-
       happens(takeOffOf(Agent, Physobj1, Physobj2), Time),
       some(Exists_Location,
            '$kolem_Fn_39'(Agent, Physobj1, Physobj2, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',185).

 /*  fix_axiom_head(Time) ->
       [ holds_at(on(Physobj1, Physobj2), Time),
          (->),
         on(Physobj1, Physobj2)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',185).

 /*  pl=axiom(on(Physobj1,Physobj2),
         [ takeOffOf(Agent,Physobj1,Physobj2),
   	some(Exists_Location,
   	     '$kolem_Fn_39'(Agent,
   			    Physobj1,
   			    Physobj2,
   			    Time))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',185).

 /*  (   takeOffOf(Agent, Physobj1, Physobj2),
       some(Exists_Location,
            '$kolem_Fn_39'(Agent, Physobj1, Physobj2, Time))
   ->  on(Physobj1, Physobj2)
   ).
 */
if takeOffOf(Agent, Physobj1, Physobj2), some(Exists_Location, '$kolem_Fn_39'(Agent, Physobj1, Physobj2, Time))then on(Physobj1, Physobj2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',185).

 /*  reactive_rule([ happens(takeOffOf(Agent,
   				  Physobj1,
   				  Physobj2),
   			Time_From,
   			Time_Until),
   		some(Exists_Location,
   		     '$kolem_Fn_39'(Agent,
   				    Physobj1,
   				    Physobj2,
   				    Time))
   	      ],
   	      [holds(on(Physobj1,Physobj2),Holds)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',185).

 /*  reactive_rule([ happens(takeOffOf(Agent,
   				  Physobj1,
   				  Physobj2),
   			Time_From,
   			Time_Until),
   		some(Exists_Location,
   		     '$kolem_Fn_39'(Agent,
   				    Physobj1,
   				    Physobj2,
   				    Time))
   	      ],
   	      [holds(on(Physobj1,Physobj2),Holds)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',185).

 /*  holds_at(at(Agent, Exists_Location), Time) :-
       happens(takeOffOf(Agent, Physobj1, Physobj2), Time),
       some(Exists_Location,
            '$kolem_Fn_39'(Agent, Physobj1, Physobj2, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',185).

 /*  fix_axiom_head(Time) ->
       [ holds_at(at(Agent, Exists_Location), Time),
          (->),
         at(Agent, Exists_Location)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',185).

 /*  pl=axiom(at(Agent,Exists_Location),
         [ takeOffOf(Agent,Physobj1,Physobj2),
   	some(Exists_Location,
   	     '$kolem_Fn_39'(Agent,
   			    Physobj1,
   			    Physobj2,
   			    Time))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',185).

 /*  (   takeOffOf(Agent, Physobj1, Physobj2),
       some(Exists_Location,
            '$kolem_Fn_39'(Agent, Physobj1, Physobj2, Time))
   ->  at(Agent, Exists_Location)
   ).
 */
if takeOffOf(Agent, Physobj1, Physobj2), some(Exists_Location, '$kolem_Fn_39'(Agent, Physobj1, Physobj2, Time))then loc_at(Agent, Exists_Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',185).

 /*  reactive_rule([ happens(takeOffOf(Agent,
   				  Physobj1,
   				  Physobj2),
   			Time_From9,
   			Time_Until10),
   		some(Exists_Location,
   		     '$kolem_Fn_39'(Agent,
   				    Physobj1,
   				    Physobj2,
   				    Time))
   	      ],
   	      [loc_at(Agent,Exists_Location)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',185).

 /*  reactive_rule([ happens(takeOffOf(Agent,
   				  Physobj1,
   				  Physobj2),
   			Time_From9,
   			Time_Until10),
   		some(Exists_Location,
   		     '$kolem_Fn_39'(Agent,
   				    Physobj1,
   				    Physobj2,
   				    Time))
   	      ],
   	      [loc_at(Agent,Exists_Location)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',185).

 /*  holds_at(at(Physobj1, Exists_Location), Time) :-
       happens(takeOffOf(Agent, Physobj1, Physobj2), Time),
       some(Exists_Location,
            '$kolem_Fn_39'(Agent, Physobj1, Physobj2, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',185).

 /*  fix_axiom_head(Time) ->
       [ holds_at(at(Physobj1, Exists_Location), Time),
          (->),
         at(Physobj1, Exists_Location)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',185).

 /*  pl=axiom(at(Physobj1,Exists_Location),
         [ takeOffOf(Agent,Physobj1,Physobj2),
   	some(Exists_Location,
   	     '$kolem_Fn_39'(Agent,
   			    Physobj1,
   			    Physobj2,
   			    Time))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',185).

 /*  (   takeOffOf(Agent, Physobj1, Physobj2),
       some(Exists_Location,
            '$kolem_Fn_39'(Agent, Physobj1, Physobj2, Time))
   ->  at(Physobj1, Exists_Location)
   ).
 */
if takeOffOf(Agent, Physobj1, Physobj2), some(Exists_Location, '$kolem_Fn_39'(Agent, Physobj1, Physobj2, Time))then loc_at(Physobj1, Exists_Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',185).

 /*  reactive_rule([ happens(takeOffOf(Agent,
   				  Physobj1,
   				  Physobj2),
   			Time_From11,
   			Time_Until12),
   		some(Exists_Location,
   		     '$kolem_Fn_39'(Agent,
   				    Physobj1,
   				    Physobj2,
   				    Time))
   	      ],
   	      [loc_at(Physobj1,Exists_Location)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',185).

 /*  reactive_rule([ happens(takeOffOf(Agent,
   				  Physobj1,
   				  Physobj2),
   			Time_From11,
   			Time_Until12),
   		some(Exists_Location,
   		     '$kolem_Fn_39'(Agent,
   				    Physobj1,
   				    Physobj2,
   				    Time))
   	      ],
   	      [loc_at(Physobj1,Exists_Location)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',185).

 /*  holds_at(at(Physobj2, Exists_Location), Time) :-
       happens(takeOffOf(Agent, Physobj1, Physobj2), Time),
       some(Exists_Location,
            '$kolem_Fn_39'(Agent, Physobj1, Physobj2, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',185).

 /*  fix_axiom_head(Time) ->
       [ holds_at(at(Physobj2, Exists_Location), Time),
          (->),
         at(Physobj2, Exists_Location)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',185).

 /*  pl=axiom(at(Physobj2,Exists_Location),
         [ takeOffOf(Agent,Physobj1,Physobj2),
   	some(Exists_Location,
   	     '$kolem_Fn_39'(Agent,
   			    Physobj1,
   			    Physobj2,
   			    Time))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',185).

 /*  (   takeOffOf(Agent, Physobj1, Physobj2),
       some(Exists_Location,
            '$kolem_Fn_39'(Agent, Physobj1, Physobj2, Time))
   ->  at(Physobj2, Exists_Location)
   ).
 */
if takeOffOf(Agent, Physobj1, Physobj2), some(Exists_Location, '$kolem_Fn_39'(Agent, Physobj1, Physobj2, Time))then loc_at(Physobj2, Exists_Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',185).

 /*  reactive_rule([ happens(takeOffOf(Agent,
   				  Physobj1,
   				  Physobj2),
   			Time_From13,
   			Time_Until14),
   		some(Exists_Location,
   		     '$kolem_Fn_39'(Agent,
   				    Physobj1,
   				    Physobj2,
   				    Time))
   	      ],
   	      [loc_at(Physobj2,Exists_Location)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',185).

 /*  reactive_rule([ happens(takeOffOf(Agent,
   				  Physobj1,
   				  Physobj2),
   			Time_From13,
   			Time_Until14),
   		some(Exists_Location,
   		     '$kolem_Fn_39'(Agent,
   				    Physobj1,
   				    Physobj2,
   				    Time))
   	      ],
   	      [loc_at(Physobj2,Exists_Location)]).
 */


% [agent,physobj1,physobj2,location,time]
% Releases(PlaceOn(agent,physobj1,physobj2),
%          At(physobj1,location),
%          time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',191).

 /*  pl=axiom(releases(placeOn(Agent,Physobj1,Physobj2),
   	       at(Physobj1,Location),
   	       Time),
         []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',191).

 /*  releases(placeOn(Agent,Physobj1,Physobj2),
   	 at(Physobj1,Location),
   	 Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',191).
releases(placeOn(Agent,Physobj1,Physobj2),
	 loc_at(Physobj1,Location),
	 Time).

 /*  releases(placeOn(Agent,Physobj1,Physobj2),
   	 loc_at(Physobj1,Location),
   	 Time).
 */


% [physobj1,physobj2,location,time]
% HoldsAt(On(physobj1,physobj2),time) &
% HoldsAt(At(physobj2,location),time) ->
% HoldsAt(At(physobj1,location),time).
 %  clausify_pnf=(holds_at(on(Physobj1, Physobj2), Time), holds_at(at(Physobj2, Location), Time)->holds_at(at(Physobj1, Location), Time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',196).

 /*  holds_at(at(Physobj1, Location), Time) :-
       holds_at(on(Physobj1, Physobj2), Time),
       holds_at(at(Physobj2, Location), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',196).

 /*  fix_axiom_head(Time) ->
       [ holds_at(at(Physobj1, Location), Time),
          (->),
         at(Physobj1, Location)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',196).

 /*  pl=axiom(at(Physobj1,Location),
         [ on(Physobj1,Physobj2),
   	at(Physobj2,Location)
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',196).

 /*  (   on(Physobj1, Physobj2),
       at(Physobj2, Location)
   ->  at(Physobj1, Location)
   ).
 */
if on(Physobj1, Physobj2), loc_at(Physobj2, Location)then loc_at(Physobj1, Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',196).

 /*  reactive_rule([ holds(on(Physobj1,Physobj2),Holds),
   		loc_at(Physobj2,Location)
   	      ],
   	      [loc_at(Physobj1,Location)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',196).

 /*  reactive_rule([ holds(on(Physobj1,Physobj2),Holds),
   		loc_at(Physobj2,Location)
   	      ],
   	      [loc_at(Physobj1,Location)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',196).

 /*  not(holds_at(on(Physobj1, Physobj2), Time)) :-
       holds_at(at(Physobj2, Location), Time),
       not(holds_at(at(Physobj1, Location), Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',196).

 /*  pl=axiom(not(on(Physobj1,Physobj2)),
         [ at(Physobj2,Location),
   	not(at(Physobj1,Location))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',196).

 /*  (   at(Physobj2, Location),
       not(at(Physobj1, Location))
   ->  not(on(Physobj1, Physobj2))
   ).
 */
if loc_at(Physobj2, Location), not loc_at(Physobj1, Location)then not on(Physobj1, Physobj2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',196).

 /*  reactive_rule([ loc_at(Physobj2,Location),
   		not(loc_at(Physobj1,Location))
   	      ],
   	      [ holds(not(on(Physobj1,Physobj2)),
   		      Holds5)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',196).

 /*  reactive_rule([ loc_at(Physobj2,Location),
   		not(loc_at(Physobj1,Location))
   	      ],
   	      [ holds(not(on(Physobj1,Physobj2)),
   		      Holds5)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',196).

 /*  not(holds_at(at(Physobj2, Location), Time)) :-
       holds_at(on(Physobj1, Physobj2), Time),
       not(holds_at(at(Physobj1, Location), Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',196).

 /*  pl=axiom(not(at(Physobj2,Location)),
         [ on(Physobj1,Physobj2),
   	not(at(Physobj1,Location))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',196).

 /*  (   on(Physobj1, Physobj2),
       not(at(Physobj1, Location))
   ->  not(at(Physobj2, Location))
   ).
 */
if on(Physobj1, Physobj2), not loc_at(Physobj1, Location)then not loc_at(Physobj2, Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',196).

 /*  reactive_rule([ holds(on(Physobj1,Physobj2),Holds6),
   		not(loc_at(Physobj1,Location))
   	      ],
   	      [not(loc_at(Physobj2,Location))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',196).

 /*  reactive_rule([ holds(on(Physobj1,Physobj2),Holds6),
   		not(loc_at(Physobj1,Location))
   	      ],
   	      [not(loc_at(Physobj2,Location))]).
 */

% fluent At(object,location)
 %  blue=fluent(at(object,location)).
 %  fluent(at(object,location)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',199).
fluents([loc_at/2]).
 %  fluents([loc_at/2]).
 %  mpred_prop(at(object,location),fluent).
mpred_prop(loc_at(object,location),fluent).
 %  mpred_prop(loc_at(object,location),fluent).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',202).
% [object,time]
% {location} % HoldsAt(At(object,location),time).

 /*  clausify_pnf=exists([Location],
          holds_at(at(Object,Location),Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',202).

 /*  holds_at(at(Object, Exists_Location), Time) :-
       some(Exists_Location, '$kolem_Fn_40'(Object, Time)).
 */

 /*  fix_axiom_head(Time) ->
       [ holds_at(at(Object, Exists_Location), Time),
          (->),
         at(Object, Exists_Location)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',202).

 /*  pl=axiom(at(Object,Exists_Location),
         [ some(Exists_Location,
   	     '$kolem_Fn_40'(Object,Time))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',202).

 /*  some(Exists_Location, '$kolem_Fn_40'(Object, Time)) ->
       at(Object, Exists_Location).
 */
if some(Exists_Location, '$kolem_Fn_40'(Object, Time))then loc_at(Object, Exists_Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',202).

 /*  reactive_rule([ some(Exists_Location,
   		     '$kolem_Fn_40'(Object,Time))
   	      ],
   	      [loc_at(Object,Exists_Location)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',202).

 /*  reactive_rule([ some(Exists_Location,
   		     '$kolem_Fn_40'(Object,Time))
   	      ],
   	      [loc_at(Object,Exists_Location)]).
 */


% [object,location1,location2,time]
% HoldsAt(At(object,location1),time) &
% HoldsAt(At(object,location2),time) ->
% location1=location2.
 %  clausify_pnf=(holds_at(at(Object, Location1), Time), holds_at(at(Object, Location2), Time)->equals(Location1, Location2)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',206).

 /*  not(holds_at(at(Object, Location1), Time)) :-
       holds_at(at(Object, Location2), Time),
       not(equals(Location1, Location2)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',206).

 /*  pl=axiom(not(at(Object,Location1)),
         [ at(Object,Location2),
   	not(equals(Location1,Location2))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',206).

 /*  (   at(Object, Location2),
       not(equals(Location1, Location2))
   ->  not(at(Object, Location1))
   ).
 */
if loc_at(Object, Location2), not equals(Location1, Location2)then not loc_at(Object, Location1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',206).

 /*  reactive_rule([ loc_at(Object,Location2),
   		not(equals(Location1,Location2))
   	      ],
   	      [not(loc_at(Object,Location1))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',206).

 /*  reactive_rule([ loc_at(Object,Location2),
   		not(equals(Location1,Location2))
   	      ],
   	      [not(loc_at(Object,Location1))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',206).

 /*  not(holds_at(at(Object, Location2), Time)) :-
       holds_at(at(Object, Location1), Time),
       not(equals(Location1, Location2)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',206).

 /*  pl=axiom(not(at(Object,Location2)),
         [ at(Object,Location1),
   	not(equals(Location2,Location1))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',206).

 /*  (   at(Object, Location1),
       not(equals(Location2, Location1))
   ->  not(at(Object, Location2))
   ).
 */
if loc_at(Object, Location1), not equals(Location2, Location1)then not loc_at(Object, Location2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',206).

 /*  reactive_rule([ loc_at(Object,Location1),
   		not(equals(Location2,Location1))
   	      ],
   	      [not(loc_at(Object,Location2))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',206).

 /*  reactive_rule([ loc_at(Object,Location1),
   		not(equals(Location2,Location1))
   	      ],
   	      [not(loc_at(Object,Location2))]).
 */

% function Side1(portal): location
 %  blue=function(side1(portal)).
 %  function(side1(portal)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',209).
functions([side1/1]).
 %  functions([side1/1]).
mpred_prop(side1(portal),function).
 %  mpred_prop(side1(portal),function).
 %  blue=predicate(side1Pred(portal,location)).
 %  predicate(side1Pred(portal,location)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',209).
predicates([side1Pred/2]).
 %  predicates([side1Pred/2]).
mpred_prop(side1Pred(portal,location),predicate).
 %  mpred_prop(side1Pred(portal,location),predicate).
 %  pl=axiom(functional_predicate(side1,side1Pred),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',209).
functional_predicate(side1,side1Pred).
 %  functional_predicate(side1,side1Pred).
 %  pl=axiom(function_argtypes(side1Pred,side1(portal),location),[]).
function_argtypes(side1Pred,side1(portal),location).
 %  function_argtypes(side1Pred,side1(portal),location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',209).
resultIsa(side1,location).
 %  resultIsa(side1,location).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',211).
% function Side2(portal): location
 %  blue=function(side2(portal)).
 %  function(side2(portal)).
functions([side2/1]).
 %  functions([side2/1]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',211).
mpred_prop(side2(portal),function).
 %  mpred_prop(side2(portal),function).
 %  blue=predicate(side2Pred(portal,location)).
 %  predicate(side2Pred(portal,location)).
predicates([side2Pred/2]).
 %  predicates([side2Pred/2]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',211).
mpred_prop(side2Pred(portal,location),predicate).
 %  mpred_prop(side2Pred(portal,location),predicate).
 %  pl=axiom(functional_predicate(side2,side2Pred),[]).
functional_predicate(side2,side2Pred).
 %  functional_predicate(side2,side2Pred).
 %  pl=axiom(function_argtypes(side2Pred,side2(portal),location),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',211).
function_argtypes(side2Pred,side2(portal),location).
 %  function_argtypes(side2Pred,side2(portal),location).
resultIsa(side2,location).
 %  resultIsa(side2,location).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',213).
% fluent NearPortal(object,portal)
 %  blue=fluent(nearPortal(object,portal)).
 %  fluent(nearPortal(object,portal)).
fluents([nearPortal/2]).
 %  fluents([nearPortal/2]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',213).
mpred_prop(nearPortal(object,portal),fluent).
 %  mpred_prop(nearPortal(object,portal),fluent).

% noninertial NearPortal
noninertial(nearPortal).
 %  noninertial(nearPortal).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',216).
% [object,portal,time]
% HoldsAt(NearPortal(object,portal),time) <->
% {location}% 
%  (Side1(portal)=location|
%   Side2(portal)=location) &
%  HoldsAt(At(object,location),time).
 %  clausify_pnf=exists([Location], <->(holds_at(nearPortal(Object, Portal), Time),  ((side1Pred(Portal, Location);side2Pred(Portal, Location)), holds_at(at(Object, Location), Time)))).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',218).

 /*  not(holds_at(nearPortal(Object, Portal), Time)) :-
       (   not(side1Pred(Portal, Exists_Location)),
           not(side2Pred(Portal, Exists_Location))
       ;   not(holds_at(at(Object, Exists_Location), Time))
       ),
       some(Exists_Location,
            '$kolem_Fn_41'(Object, Portal, Time)).
 */
 %  pl=axiom(not(nearPortal(Object, Portal)), [(not(side1Pred(Portal, Exists_Location)), not(side2Pred(Portal, Exists_Location));not(at(Object, Exists_Location))), some(Exists_Location, '$kolem_Fn_41'(Object, Portal, Time))]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',218).

 /*  (   (   not(side1Pred(Portal, Exists_Location)),
           not(side2Pred(Portal, Exists_Location))
       ;   not(at(Object, Exists_Location))
       ),
       some(Exists_Location,
            '$kolem_Fn_41'(Object, Portal, Time))
   ->  not(nearPortal(Object, Portal))
   ).
 */
if (not side1Pred(Portal, Exists_Location), not side2Pred(Portal, Exists_Location);not loc_at(Object, Exists_Location)), some(Exists_Location, '$kolem_Fn_41'(Object, Portal, Time))then not nearPortal(Object, Portal).
 %  reactive_rule([(not(side1Pred(Portal, Exists_Location)), not(side2Pred(Portal, Exists_Location));not(loc_at(Object, Exists_Location))), some(Exists_Location, '$kolem_Fn_41'(Object, Portal, Time))], [not(nearPortal(Object, Portal))]).
 %  reactive_rule([(not(side1Pred(Portal, Exists_Location)), not(side2Pred(Portal, Exists_Location));not(loc_at(Object, Exists_Location))), some(Exists_Location, '$kolem_Fn_41'(Object, Portal, Time))], [not(nearPortal(Object, Portal))]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',218).

 /*  side1Pred(Portal, Exists_Location) :-
       not(side2Pred(Portal, Exists_Location)),
       holds_at(nearPortal(Object, Portal), Time),
       some(Exists_Location,
            '$kolem_Fn_41'(Object, Portal, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',218).

 /*  fix_axiom_head(Time) ->
       [ holds_at(nearPortal(Object, Portal), Time),
          (->),
         nearPortal(Object, Portal)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',218).

 /*  pl=axiom(side1Pred(Portal,Exists_Location),
         [ not(side2Pred(Portal,Exists_Location)),
   	nearPortal(Object,Portal),
   	some(Exists_Location,
   	     '$kolem_Fn_41'(Object,Portal,Time))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',218).

 /*  (   not(side2Pred(Portal, Exists_Location)),
       nearPortal(Object, Portal),
       some(Exists_Location,
            '$kolem_Fn_41'(Object, Portal, Time))
   ->  side1Pred(Portal, Exists_Location)
   ).
 */
if not side2Pred(Portal, Exists_Location), nearPortal(Object, Portal), some(Exists_Location, '$kolem_Fn_41'(Object, Portal, Time))then side1Pred(Portal, Exists_Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',218).

 /*  reactive_rule([ not(side2Pred(Portal,Exists_Location)),
   		nearPortal(Object,Portal),
   		some(Exists_Location,
   		     '$kolem_Fn_41'(Object,Portal,Time))
   	      ],
   	      [side1Pred(Portal,Exists_Location)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',218).

 /*  reactive_rule([ not(side2Pred(Portal,Exists_Location)),
   		nearPortal(Object,Portal),
   		some(Exists_Location,
   		     '$kolem_Fn_41'(Object,Portal,Time))
   	      ],
   	      [side1Pred(Portal,Exists_Location)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',218).

 /*  side2Pred(Portal, Exists_Location) :-
       not(side1Pred(Portal, Exists_Location)),
       holds_at(nearPortal(Object, Portal), Time),
       some(Exists_Location,
            '$kolem_Fn_41'(Object, Portal, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',218).

 /*  fix_axiom_head(Time) ->
       [ holds_at(nearPortal(Object, Portal), Time),
          (->),
         nearPortal(Object, Portal)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',218).

 /*  pl=axiom(side2Pred(Portal,Exists_Location),
         [ not(side1Pred(Portal,Exists_Location)),
   	nearPortal(Object,Portal),
   	some(Exists_Location,
   	     '$kolem_Fn_41'(Object,Portal,Time))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',218).

 /*  (   not(side1Pred(Portal, Exists_Location)),
       nearPortal(Object, Portal),
       some(Exists_Location,
            '$kolem_Fn_41'(Object, Portal, Time))
   ->  side2Pred(Portal, Exists_Location)
   ).
 */
if not side1Pred(Portal, Exists_Location), nearPortal(Object, Portal), some(Exists_Location, '$kolem_Fn_41'(Object, Portal, Time))then side2Pred(Portal, Exists_Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',218).

 /*  reactive_rule([ not(side1Pred(Portal,Exists_Location)),
   		nearPortal(Object,Portal),
   		some(Exists_Location,
   		     '$kolem_Fn_41'(Object,Portal,Time))
   	      ],
   	      [side2Pred(Portal,Exists_Location)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',218).

 /*  reactive_rule([ not(side1Pred(Portal,Exists_Location)),
   		nearPortal(Object,Portal),
   		some(Exists_Location,
   		     '$kolem_Fn_41'(Object,Portal,Time))
   	      ],
   	      [side2Pred(Portal,Exists_Location)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',218).

 /*  holds_at(at(Object, Exists_Location), Time) :-
       holds_at(nearPortal(Object, Portal), Time),
       some(Exists_Location,
            '$kolem_Fn_41'(Object, Portal, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',218).

 /*  fix_axiom_head(Time) ->
       [ holds_at(at(Object, Exists_Location), Time),
          (->),
         at(Object, Exists_Location)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',218).

 /*  pl=axiom(at(Object,Exists_Location),
         [ nearPortal(Object,Portal),
   	some(Exists_Location,
   	     '$kolem_Fn_41'(Object,Portal,Time))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',218).

 /*  (   nearPortal(Object, Portal),
       some(Exists_Location,
            '$kolem_Fn_41'(Object, Portal, Time))
   ->  at(Object, Exists_Location)
   ).
 */
if nearPortal(Object, Portal), some(Exists_Location, '$kolem_Fn_41'(Object, Portal, Time))then loc_at(Object, Exists_Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',218).

 /*  reactive_rule([ nearPortal(Object,Portal),
   		some(Exists_Location,
   		     '$kolem_Fn_41'(Object,Portal,Time))
   	      ],
   	      [loc_at(Object,Exists_Location)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',218).

 /*  reactive_rule([ nearPortal(Object,Portal),
   		some(Exists_Location,
   		     '$kolem_Fn_41'(Object,Portal,Time))
   	      ],
   	      [loc_at(Object,Exists_Location)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',218).

 /*  holds_at(nearPortal(Object, Portal), Time) :-
       holds_at(at(Object, Exists_Location), Time),
       (   side1Pred(Portal, Exists_Location)
       ;   side2Pred(Portal, Exists_Location)
       ),
       some(Exists_Location,
            '$kolem_Fn_41'(Object, Portal, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',218).

 /*  fix_axiom_head(Time) ->
       [ holds_at(nearPortal(Object, Portal), Time),
          (->),
         nearPortal(Object, Portal)
       ].
 */
 %   pl=axiom(nearPortal(Object, Portal), [at(Object, Exists_Location),  (side1Pred(Portal, Exists_Location);side2Pred(Portal, Exists_Location)), some(Exists_Location, '$kolem_Fn_41'(Object, Portal, Time))]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',218).

 /*  (   at(Object, Exists_Location),
       (   side1Pred(Portal, Exists_Location)
       ;   side2Pred(Portal, Exists_Location)
       ),
       some(Exists_Location,
            '$kolem_Fn_41'(Object, Portal, Time))
   ->  nearPortal(Object, Portal)
   ).
 */
if loc_at(Object, Exists_Location), (side1Pred(Portal, Exists_Location);side2Pred(Portal, Exists_Location)), some(Exists_Location, '$kolem_Fn_41'(Object, Portal, Time))then nearPortal(Object, Portal).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',218).

 /*   reactive_rule([ loc_at(Object, Exists_Location),
                       (side1Pred(Portal, Exists_Location);side2Pred(Portal, Exists_Location)),
                      some(Exists_Location,
                           '$kolem_Fn_41'(Object, Portal, Time))
                    ],
                    [nearPortal(Object, Portal)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',218).

 /*   reactive_rule([ loc_at(Object, Exists_Location),
                       (side1Pred(Portal, Exists_Location);side2Pred(Portal, Exists_Location)),
                      some(Exists_Location,
                           '$kolem_Fn_41'(Object, Portal, Time))
                    ],
                    [nearPortal(Object, Portal)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',218).

 /*  not(holds_at(at(Object, Exists_Location), Time)) :-
       (   side1Pred(Portal, Exists_Location)
       ;   side2Pred(Portal, Exists_Location)
       ),
       not(holds_at(nearPortal(Object, Portal), Time)),
       some(Exists_Location,
            '$kolem_Fn_41'(Object, Portal, Time)).
 */
 %   pl=axiom(not(at(Object, Exists_Location)), [(side1Pred(Portal, Exists_Location);side2Pred(Portal, Exists_Location)), not(nearPortal(Object, Portal)), some(Exists_Location, '$kolem_Fn_41'(Object, Portal, Time))]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',218).

 /*  (   (   side1Pred(Portal, Exists_Location)
       ;   side2Pred(Portal, Exists_Location)
       ),
       not(nearPortal(Object, Portal)),
       some(Exists_Location,
            '$kolem_Fn_41'(Object, Portal, Time))
   ->  not(at(Object, Exists_Location))
   ).
 */
if (side1Pred(Portal, Exists_Location);side2Pred(Portal, Exists_Location)), not nearPortal(Object, Portal), some(Exists_Location, '$kolem_Fn_41'(Object, Portal, Time))then not loc_at(Object, Exists_Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',218).

 /*   reactive_rule([  (side1Pred(Portal, Exists_Location);side2Pred(Portal, Exists_Location)),
                      not(nearPortal(Object, Portal)),
                      some(Exists_Location,
                           '$kolem_Fn_41'(Object, Portal, Time))
                    ],
                    [not(loc_at(Object, Exists_Location))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',218).

 /*   reactive_rule([  (side1Pred(Portal, Exists_Location);side2Pred(Portal, Exists_Location)),
                      not(nearPortal(Object, Portal)),
                      some(Exists_Location,
                           '$kolem_Fn_41'(Object, Portal, Time))
                    ],
                    [not(loc_at(Object, Exists_Location))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',218).

 /*  not(side1Pred(Portal, Exists_Location)) :-
       holds_at(at(Object, Exists_Location), Time),
       not(holds_at(nearPortal(Object, Portal), Time)),
       some(Exists_Location,
            '$kolem_Fn_41'(Object, Portal, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',218).

 /*  fix_axiom_head(Time) ->
       [ holds_at(at(Object, Exists_Location), Time),
          (->),
         at(Object, Exists_Location)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',218).

 /*  pl=axiom(not(side1Pred(Portal,Exists_Location)),
         [ at(Object,Exists_Location),
   	not(nearPortal(Object,Portal)),
   	some(Exists_Location,
   	     '$kolem_Fn_41'(Object,Portal,Time))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',218).

 /*  (   at(Object, Exists_Location),
       not(nearPortal(Object, Portal)),
       some(Exists_Location,
            '$kolem_Fn_41'(Object, Portal, Time))
   ->  not(side1Pred(Portal, Exists_Location))
   ).
 */
if loc_at(Object, Exists_Location), not nearPortal(Object, Portal), some(Exists_Location, '$kolem_Fn_41'(Object, Portal, Time))then not side1Pred(Portal, Exists_Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',218).

 /*  reactive_rule([ loc_at(Object,Exists_Location),
   		not(nearPortal(Object,Portal)),
   		some(Exists_Location,
   		     '$kolem_Fn_41'(Object,Portal,Time))
   	      ],
   	      [not(side1Pred(Portal,Exists_Location))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',218).

 /*  reactive_rule([ loc_at(Object,Exists_Location),
   		not(nearPortal(Object,Portal)),
   		some(Exists_Location,
   		     '$kolem_Fn_41'(Object,Portal,Time))
   	      ],
   	      [not(side1Pred(Portal,Exists_Location))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',218).

 /*  not(side2Pred(Portal, Exists_Location)) :-
       holds_at(at(Object, Exists_Location), Time),
       not(holds_at(nearPortal(Object, Portal), Time)),
       some(Exists_Location,
            '$kolem_Fn_41'(Object, Portal, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',218).

 /*  fix_axiom_head(Time) ->
       [ holds_at(at(Object, Exists_Location), Time),
          (->),
         at(Object, Exists_Location)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',218).

 /*  pl=axiom(not(side2Pred(Portal,Exists_Location)),
         [ at(Object,Exists_Location),
   	not(nearPortal(Object,Portal)),
   	some(Exists_Location,
   	     '$kolem_Fn_41'(Object,Portal,Time))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',218).

 /*  (   at(Object, Exists_Location),
       not(nearPortal(Object, Portal)),
       some(Exists_Location,
            '$kolem_Fn_41'(Object, Portal, Time))
   ->  not(side2Pred(Portal, Exists_Location))
   ).
 */
if loc_at(Object, Exists_Location), not nearPortal(Object, Portal), some(Exists_Location, '$kolem_Fn_41'(Object, Portal, Time))then not side2Pred(Portal, Exists_Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',218).

 /*  reactive_rule([ loc_at(Object,Exists_Location),
   		not(nearPortal(Object,Portal)),
   		some(Exists_Location,
   		     '$kolem_Fn_41'(Object,Portal,Time))
   	      ],
   	      [not(side2Pred(Portal,Exists_Location))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',218).

 /*  reactive_rule([ loc_at(Object,Exists_Location),
   		not(nearPortal(Object,Portal)),
   		some(Exists_Location,
   		     '$kolem_Fn_41'(Object,Portal,Time))
   	      ],
   	      [not(side2Pred(Portal,Exists_Location))]).
 */

% event WalkThroughDoor12(agent,door)
 %  blue=event(walkThroughDoor12(agent,door)).
 %  event(walkThroughDoor12(agent,door)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',222).
actions([walkThroughDoor12/2]).
 %  actions([walkThroughDoor12/2]).
mpred_prop(walkThroughDoor12(agent,door),event).
 %  mpred_prop(walkThroughDoor12(agent,door),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',224).
% event WalkThroughDoor21(agent,door)
 %  blue=event(walkThroughDoor21(agent,door)).
 %  event(walkThroughDoor21(agent,door)).
actions([walkThroughDoor21/2]).
 %  actions([walkThroughDoor21/2]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',224).
mpred_prop(walkThroughDoor21(agent,door),event).
 %  mpred_prop(walkThroughDoor21(agent,door),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',226).
% [agent,door,time]
% Happens(WalkThroughDoor12(agent,door),time) ->
% HoldsAt(Standing(agent),time) &
% HoldsAt(At(agent,Side1(door)),time).
 %  clausify_pnf=(happens(walkThroughDoor12(Agent, Door), Time)->holds_at(standing(Agent), Time), holds_at(at(Agent, side1(Door)), Time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',226).

 /*  not(happens(walkThroughDoor12(Agent, Door), Time)) :-
       (   not(holds_at(standing(Agent), Time))
       ;   not(holds_at(at(Agent, side1(Door)), Time))
       ).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',226).

 /*  fix_axiom_head(Time) ->
       [ not(happens(walkThroughDoor12(Agent, Door), Time)),
          (->),
         not(walkThroughDoor12(Agent, Door))
       ].
 */
 %   pl=axiom(not(walkThroughDoor12(Agent, Door)), [(not(standing(Agent));not(at(Agent, side1(Door))))]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',226).

 /*  not(standing(Agent));not(at(Agent, side1(Door))) ->
       not(walkThroughDoor12(Agent, Door)).
 */
if not standing(Agent);not loc_at(Agent, side1(Door))then not walkThroughDoor12(Agent, Door).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',226).

 /*   reactive_rule([  (not(standing(Agent));not(loc_at(Agent, side1(Door))))
                    ],
                    [not(walkThroughDoor12(Agent, Door))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',226).

 /*   reactive_rule([  (not(standing(Agent));not(loc_at(Agent, side1(Door))))
                    ],
                    [not(walkThroughDoor12(Agent, Door))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',226).

 /*  holds_at(standing(Agent), Time) :-
       happens(walkThroughDoor12(Agent, Door), Time).
 */

 /*  pl=axiom(requires(walkThroughDoor12(Agent,Door),
   	       When_Time),
         [metreqs(walkThroughDoor12(Agent,Door))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',226).

 /*  metreqs(walkThroughDoor12(Agent, Door)) ->
       requires(walkThroughDoor12(Agent, Door), When_Time).
 */
if metreqs(walkThroughDoor12(Agent, Door))then requires(walkThroughDoor12(Agent, Door), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',226).

 /*  reactive_rule([metreqs(walkThroughDoor12(Agent,Door))],
   	      [ requires(walkThroughDoor12(Agent,Door),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',226).

 /*  reactive_rule([metreqs(walkThroughDoor12(Agent,Door))],
   	      [ requires(walkThroughDoor12(Agent,Door),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',226).

 /*  fix_axiom_head(When_Time) ->
       [ holds_at(metreqs(walkThroughDoor12(Agent, Door)),
                  When_Time),
          (->),
         metreqs(walkThroughDoor12(Agent, Door))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',226).

 /*  pl=axiom(metreqs(walkThroughDoor12(Agent,Door)),
         [standing(Agent)]).
 */

 /*  standing(Agent) ->
       metreqs(walkThroughDoor12(Agent, Door)).
 */
if standing(Agent)then metreqs(walkThroughDoor12(Agent, Door)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',226).

 /*  reactive_rule([standing(Agent)],
   	      [metreqs(walkThroughDoor12(Agent,Door))]).
 */

 /*  reactive_rule([standing(Agent)],
   	      [metreqs(walkThroughDoor12(Agent,Door))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',226).

 /*  holds_at(at(Agent, side1(Door)), When_Time) :-
       happens(walkThroughDoor12(Agent, Door), When_Time).
 */

 /*  pl=axiom(requires(walkThroughDoor12(Agent,Door),
   	       When_Time),
         [metreqs(walkThroughDoor12(Agent,Door))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',226).

 /*  metreqs(walkThroughDoor12(Agent, Door)) ->
       requires(walkThroughDoor12(Agent, Door), When_Time).
 */
if metreqs(walkThroughDoor12(Agent, Door))then requires(walkThroughDoor12(Agent, Door), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',226).

 /*  reactive_rule([metreqs(walkThroughDoor12(Agent,Door))],
   	      [ requires(walkThroughDoor12(Agent,Door),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',226).

 /*  reactive_rule([metreqs(walkThroughDoor12(Agent,Door))],
   	      [ requires(walkThroughDoor12(Agent,Door),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',226).

 /*  fix_axiom_head(When_Time) ->
       [ holds_at(metreqs(walkThroughDoor12(Agent, Door)),
                  When_Time),
          (->),
         metreqs(walkThroughDoor12(Agent, Door))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',226).

 /*  pl=axiom(metreqs(walkThroughDoor12(Agent,Door)),
         [at(Agent,side1(Door))]).
 */

 /*  at(Agent, side1(Door)) ->
       metreqs(walkThroughDoor12(Agent, Door)).
 */
if loc_at(Agent, side1(Door))then metreqs(walkThroughDoor12(Agent, Door)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',226).

 /*  reactive_rule([loc_at(Agent,side1(Door))],
   	      [metreqs(walkThroughDoor12(Agent,Door))]).
 */

 /*  reactive_rule([loc_at(Agent,side1(Door))],
   	      [metreqs(walkThroughDoor12(Agent,Door))]).
 */


% [agent,door,time]
% Happens(WalkThroughDoor21(agent,door),time) ->
% HoldsAt(Standing(agent),time) &
% HoldsAt(At(agent,Side2(door)),time).
 %  clausify_pnf=(happens(walkThroughDoor21(Agent, Door), Time)->holds_at(standing(Agent), Time), holds_at(at(Agent, side2(Door)), Time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',232).

 /*  not(happens(walkThroughDoor21(Agent, Door), Time)) :-
       (   not(holds_at(standing(Agent), Time))
       ;   not(holds_at(at(Agent, side2(Door)), Time))
       ).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',232).

 /*  fix_axiom_head(Time) ->
       [ not(happens(walkThroughDoor21(Agent, Door), Time)),
          (->),
         not(walkThroughDoor21(Agent, Door))
       ].
 */
 %   pl=axiom(not(walkThroughDoor21(Agent, Door)), [(not(standing(Agent));not(at(Agent, side2(Door))))]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',232).

 /*  not(standing(Agent));not(at(Agent, side2(Door))) ->
       not(walkThroughDoor21(Agent, Door)).
 */
if not standing(Agent);not loc_at(Agent, side2(Door))then not walkThroughDoor21(Agent, Door).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',232).

 /*   reactive_rule([  (not(standing(Agent));not(loc_at(Agent, side2(Door))))
                    ],
                    [not(walkThroughDoor21(Agent, Door))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',232).

 /*   reactive_rule([  (not(standing(Agent));not(loc_at(Agent, side2(Door))))
                    ],
                    [not(walkThroughDoor21(Agent, Door))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',232).

 /*  holds_at(standing(Agent), Time) :-
       happens(walkThroughDoor21(Agent, Door), Time).
 */

 /*  pl=axiom(requires(walkThroughDoor21(Agent,Door),
   	       When_Time),
         [metreqs(walkThroughDoor21(Agent,Door))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',232).

 /*  metreqs(walkThroughDoor21(Agent, Door)) ->
       requires(walkThroughDoor21(Agent, Door), When_Time).
 */
if metreqs(walkThroughDoor21(Agent, Door))then requires(walkThroughDoor21(Agent, Door), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',232).

 /*  reactive_rule([metreqs(walkThroughDoor21(Agent,Door))],
   	      [ requires(walkThroughDoor21(Agent,Door),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',232).

 /*  reactive_rule([metreqs(walkThroughDoor21(Agent,Door))],
   	      [ requires(walkThroughDoor21(Agent,Door),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',232).

 /*  fix_axiom_head(When_Time) ->
       [ holds_at(metreqs(walkThroughDoor21(Agent, Door)),
                  When_Time),
          (->),
         metreqs(walkThroughDoor21(Agent, Door))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',232).

 /*  pl=axiom(metreqs(walkThroughDoor21(Agent,Door)),
         [standing(Agent)]).
 */

 /*  standing(Agent) ->
       metreqs(walkThroughDoor21(Agent, Door)).
 */
if standing(Agent)then metreqs(walkThroughDoor21(Agent, Door)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',232).

 /*  reactive_rule([standing(Agent)],
   	      [metreqs(walkThroughDoor21(Agent,Door))]).
 */

 /*  reactive_rule([standing(Agent)],
   	      [metreqs(walkThroughDoor21(Agent,Door))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',232).

 /*  holds_at(at(Agent, side2(Door)), When_Time) :-
       happens(walkThroughDoor21(Agent, Door), When_Time).
 */

 /*  pl=axiom(requires(walkThroughDoor21(Agent,Door),
   	       When_Time),
         [metreqs(walkThroughDoor21(Agent,Door))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',232).

 /*  metreqs(walkThroughDoor21(Agent, Door)) ->
       requires(walkThroughDoor21(Agent, Door), When_Time).
 */
if metreqs(walkThroughDoor21(Agent, Door))then requires(walkThroughDoor21(Agent, Door), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',232).

 /*  reactive_rule([metreqs(walkThroughDoor21(Agent,Door))],
   	      [ requires(walkThroughDoor21(Agent,Door),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',232).

 /*  reactive_rule([metreqs(walkThroughDoor21(Agent,Door))],
   	      [ requires(walkThroughDoor21(Agent,Door),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',232).

 /*  fix_axiom_head(When_Time) ->
       [ holds_at(metreqs(walkThroughDoor21(Agent, Door)),
                  When_Time),
          (->),
         metreqs(walkThroughDoor21(Agent, Door))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',232).

 /*  pl=axiom(metreqs(walkThroughDoor21(Agent,Door)),
         [at(Agent,side2(Door))]).
 */

 /*  at(Agent, side2(Door)) ->
       metreqs(walkThroughDoor21(Agent, Door)).
 */
if loc_at(Agent, side2(Door))then metreqs(walkThroughDoor21(Agent, Door)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',232).

 /*  reactive_rule([loc_at(Agent,side2(Door))],
   	      [metreqs(walkThroughDoor21(Agent,Door))]).
 */

 /*  reactive_rule([loc_at(Agent,side2(Door))],
   	      [metreqs(walkThroughDoor21(Agent,Door))]).
 */


% [agent,door,location,time]
% Side2(door)=location ->
% Initiates(WalkThroughDoor12(agent,door),At(agent,location),time).

 /*  pl=axiom(initiates(walkThroughDoor12(Agent,Door),
   		at(Agent,Location),
   		Time),
         [side2Pred(Door,Location)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',237).

 /*  side2Pred(Door, Location) ->
       initiates(walkThroughDoor12(Agent, Door),
                 at(Agent, Location),
                 Time).
 */
if side2Pred(Door, Location)then initiates(walkThroughDoor12(Agent, Door), loc_at(Agent, Location)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',237).

 /*  reactive_rule([side2Pred(Door,Location)],
   	      [ initiates(walkThroughDoor12(Agent,Door),
   			  at(loc_at(Agent,Location),
   			     Time),
   			  Initiates)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',237).

 /*  reactive_rule([side2Pred(Door,Location)],
   	      [ initiates(walkThroughDoor12(Agent,Door),
   			  at(loc_at(Agent,Location),
   			     Time),
   			  Initiates)
   	      ]).
 */


% [agent,door,location,time]
% Side1(door)=location ->
% Initiates(WalkThroughDoor21(agent,door),At(agent,location),time).

 /*  pl=axiom(initiates(walkThroughDoor21(Agent,Door),
   		at(Agent,Location),
   		Time),
         [side1Pred(Door,Location)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',241).

 /*  side1Pred(Door, Location) ->
       initiates(walkThroughDoor21(Agent, Door),
                 at(Agent, Location),
                 Time).
 */
if side1Pred(Door, Location)then initiates(walkThroughDoor21(Agent, Door), loc_at(Agent, Location)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',241).

 /*  reactive_rule([side1Pred(Door,Location)],
   	      [ initiates(walkThroughDoor21(Agent,Door),
   			  at(loc_at(Agent,Location),
   			     Time),
   			  Initiates)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',241).

 /*  reactive_rule([side1Pred(Door,Location)],
   	      [ initiates(walkThroughDoor21(Agent,Door),
   			  at(loc_at(Agent,Location),
   			     Time),
   			  Initiates)
   	      ]).
 */


% [agent,door,location,time]
% Side1(door)=location ->
% Terminates(WalkThroughDoor12(agent,door),At(agent,location),time).

 /*  pl=axiom(terminates(walkThroughDoor12(Agent,Door),
   		 at(Agent,Location),
   		 Time),
         [side1Pred(Door,Location)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',245).

 /*  side1Pred(Door, Location) ->
       terminates(walkThroughDoor12(Agent, Door),
                  at(Agent, Location),
                  Time).
 */
if side1Pred(Door, Location)then terminates(walkThroughDoor12(Agent, Door), loc_at(Agent, Location)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',245).

 /*  reactive_rule([side1Pred(Door,Location)],
   	      [ terminates(walkThroughDoor12(Agent,Door),
   			   at(loc_at(Agent,Location),
   			      Time),
   			   Terminates)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',245).

 /*  reactive_rule([side1Pred(Door,Location)],
   	      [ terminates(walkThroughDoor12(Agent,Door),
   			   at(loc_at(Agent,Location),
   			      Time),
   			   Terminates)
   	      ]).
 */


% [agent,door,location,time]
% Side2(door)=location ->
% Terminates(WalkThroughDoor21(agent,door),At(agent,location),time).

 /*  pl=axiom(terminates(walkThroughDoor21(Agent,Door),
   		 at(Agent,Location),
   		 Time),
         [side2Pred(Door,Location)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',249).

 /*  side2Pred(Door, Location) ->
       terminates(walkThroughDoor21(Agent, Door),
                  at(Agent, Location),
                  Time).
 */
if side2Pred(Door, Location)then terminates(walkThroughDoor21(Agent, Door), loc_at(Agent, Location)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',249).

 /*  reactive_rule([side2Pred(Door,Location)],
   	      [ terminates(walkThroughDoor21(Agent,Door),
   			   at(loc_at(Agent,Location),
   			      Time),
   			   Terminates)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',249).

 /*  reactive_rule([side2Pred(Door,Location)],
   	      [ terminates(walkThroughDoor21(Agent,Door),
   			   at(loc_at(Agent,Location),
   			      Time),
   			   Terminates)
   	      ]).
 */

% fluent Hungry(agent)
 %  blue=fluent(hungry(agent)).
 %  fluent(hungry(agent)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',251).
fluents([hungry/1]).
 %  fluents([hungry/1]).
mpred_prop(hungry(agent),fluent).
 %  mpred_prop(hungry(agent),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',254).
% fluent Satiated(agent)
 %  blue=fluent(satiated(agent)).
 %  fluent(satiated(agent)).
fluents([satiated/1]).
 %  fluents([satiated/1]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',254).
mpred_prop(satiated(agent),fluent).
 %  mpred_prop(satiated(agent),fluent).

% noninertial Satiated
noninertial(satiated).
 %  noninertial(satiated).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',257).
% [agent,time]
 % HoldsAt(Hungry(agent),time) <-> !HoldsAt(Satiated(agent),time).

 /*  holds_at(hungry(Agent), Time) <->
       holds_at(neg(satiated(Agent)), Time).
 */
 %  clausify_pnf=(holds_at(hungry(Agent), Time)->holds_at(neg(satiated(Agent)), Time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',257).

 /*  holds_at(neg(satiated(Agent)), Time) :-
       holds_at(hungry(Agent), Time).
 */

 /*  fix_axiom_head(Time) ->
       [ holds_at(neg(satiated(Agent)), Time),
          (->),
         not(satiated(Agent))
       ].
 */
 %  pl=axiom(not(satiated(Agent)),[hungry(Agent)]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',257).

 /*  hungry(Agent) ->
       not(satiated(Agent)).
 */
if hungry(Agent)then not satiated(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',257).

 /*  reactive_rule([holds(hungry(Agent),Holds)],
   	      [not(satiated(Agent))]).
 */

 /*  reactive_rule([holds(hungry(Agent),Holds)],
   	      [not(satiated(Agent))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',257).

 /*  not(holds_at(hungry(Agent), Time)) :-
       not(holds_at(neg(satiated(Agent)), Time)).
 */
 %  pl=axiom(not(hungry(Agent)),[not(not(satiated(Agent)))]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',257).

 /*  not(not(satiated(Agent))) ->
       not(hungry(Agent)).
 */
if not not satiated(Agent)then not hungry(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',257).

 /*  reactive_rule([not(not(satiated(Agent)))],
   	      [holds(not(hungry(Agent)),Holds3)]).
 */

 /*  reactive_rule([not(not(satiated(Agent)))],
   	      [holds(not(hungry(Agent)),Holds3)]).
 */
 %  clausify_pnf=(holds_at(neg(satiated(Agent)), Time)->holds_at(hungry(Agent), Time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',257).

 /*  holds_at(hungry(Agent), Time) :-
       holds_at(neg(satiated(Agent)), Time).
 */

 /*  fix_axiom_head(Time) ->
       [holds_at(hungry(Agent), Time), ->, hungry(Agent)].
 */
 %  pl=axiom(hungry(Agent),[not(satiated(Agent))]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',257).

 /*  not(satiated(Agent)) ->
       hungry(Agent).
 */
if not satiated(Agent)then hungry(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',257).

 /*  reactive_rule([not(satiated(Agent))],
   	      [holds(hungry(Agent),Holds4)]).
 */

 /*  reactive_rule([not(satiated(Agent))],
   	      [holds(hungry(Agent),Holds4)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',257).

 /*  not(holds_at(neg(satiated(Agent)), Time)) :-
       not(holds_at(hungry(Agent), Time)).
 */
 %  pl=axiom(not(not(satiated(Agent))),[not(hungry(Agent))]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',257).

 /*  not(hungry(Agent)) ->
       not(not(satiated(Agent))).
 */
if not hungry(Agent)then not not satiated(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',257).

 /*  reactive_rule([holds(not(hungry(Agent)),Holds5)],
   	      [not(not(satiated(Agent)))]).
 */

 /*  reactive_rule([holds(not(hungry(Agent)),Holds5)],
   	      [not(not(satiated(Agent)))]).
 */

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',259).
% event Eat(agent,food)
 %  blue=event(eat(agent,food)).
 %  event(eat(agent,food)).
actions([eat/2]).
 %  actions([eat/2]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',259).
mpred_prop(eat(agent,food),event).
 %  mpred_prop(eat(agent,food),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',261).
% [agent,food,time]
% Happens(Eat(agent,food),time) ->
% {location}% 
% HoldsAt(At(agent,location),time) &
% HoldsAt(At(food,location),time).
 %  clausify_pnf=exists([Location],  (happens(eat(Agent, Food), Time)->holds_at(at(Agent, Location), Time), holds_at(at(Food, Location), Time))).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',263).

 /*  not(happens(eat(Agent, Food), Time)) :-
       (   not(holds_at(at(Agent, Exists_Location), Time))
       ;   not(holds_at(at(Food, Exists_Location), Time))
       ),
       some(Exists_Location,
            '$kolem_Fn_42'(Agent, Food, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',263).

 /*  fix_axiom_head(Time) ->
       [ not(happens(eat(Agent, Food), Time)),
          (->),
         not(eat(Agent, Food))
       ].
 */
 %   pl=axiom(not(eat(Agent, Food)), [(not(at(Agent, Exists_Location));not(at(Food, Exists_Location))), some(Exists_Location, '$kolem_Fn_42'(Agent, Food, Time))]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',263).

 /*  (   (   not(at(Agent, Exists_Location))
       ;   not(at(Food, Exists_Location))
       ),
       some(Exists_Location,
            '$kolem_Fn_42'(Agent, Food, Time))
   ->  not(eat(Agent, Food))
   ).
 */
if (not loc_at(Agent, Exists_Location);not loc_at(Food, Exists_Location)), some(Exists_Location, '$kolem_Fn_42'(Agent, Food, Time))then not eat(Agent, Food).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',263).

 /*   reactive_rule([  (not(loc_at(Agent, Exists_Location));not(loc_at(Food, Exists_Location))),
                      some(Exists_Location,
                           '$kolem_Fn_42'(Agent, Food, Time))
                    ],
                    [not(eat(Agent, Food))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',263).

 /*   reactive_rule([  (not(loc_at(Agent, Exists_Location));not(loc_at(Food, Exists_Location))),
                      some(Exists_Location,
                           '$kolem_Fn_42'(Agent, Food, Time))
                    ],
                    [not(eat(Agent, Food))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',263).

 /*  holds_at(at(Agent, Exists_Location), Time) :-
       happens(eat(Agent, Food), Time),
       some(Exists_Location,
            '$kolem_Fn_42'(Agent, Food, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',263).

 /*  fix_axiom_head(Time) ->
       [ holds_at(at(Agent, Exists_Location), Time),
          (->),
         at(Agent, Exists_Location)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',263).

 /*  pl=axiom(at(Agent,Exists_Location),
         [ eat(Agent,Food),
   	some(Exists_Location,
   	     '$kolem_Fn_42'(Agent,Food,Time))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',263).

 /*  (   eat(Agent, Food),
       some(Exists_Location,
            '$kolem_Fn_42'(Agent, Food, Time))
   ->  at(Agent, Exists_Location)
   ).
 */
if eat(Agent, Food), some(Exists_Location, '$kolem_Fn_42'(Agent, Food, Time))then loc_at(Agent, Exists_Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',263).

 /*  reactive_rule([ happens(eat(Agent,Food),
   			Time_From,
   			Time_Until),
   		some(Exists_Location,
   		     '$kolem_Fn_42'(Agent,Food,Time))
   	      ],
   	      [loc_at(Agent,Exists_Location)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',263).

 /*  reactive_rule([ happens(eat(Agent,Food),
   			Time_From,
   			Time_Until),
   		some(Exists_Location,
   		     '$kolem_Fn_42'(Agent,Food,Time))
   	      ],
   	      [loc_at(Agent,Exists_Location)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',263).

 /*  holds_at(at(Food, Exists_Location), Time) :-
       happens(eat(Agent, Food), Time),
       some(Exists_Location,
            '$kolem_Fn_42'(Agent, Food, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',263).

 /*  fix_axiom_head(Time) ->
       [ holds_at(at(Food, Exists_Location), Time),
          (->),
         at(Food, Exists_Location)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',263).

 /*  pl=axiom(at(Food,Exists_Location),
         [ eat(Agent,Food),
   	some(Exists_Location,
   	     '$kolem_Fn_42'(Agent,Food,Time))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',263).

 /*  (   eat(Agent, Food),
       some(Exists_Location,
            '$kolem_Fn_42'(Agent, Food, Time))
   ->  at(Food, Exists_Location)
   ).
 */
if eat(Agent, Food), some(Exists_Location, '$kolem_Fn_42'(Agent, Food, Time))then loc_at(Food, Exists_Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',263).

 /*  reactive_rule([ happens(eat(Agent,Food),
   			Time_From7,
   			Time_Until8),
   		some(Exists_Location,
   		     '$kolem_Fn_42'(Agent,Food,Time))
   	      ],
   	      [loc_at(Food,Exists_Location)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',263).

 /*  reactive_rule([ happens(eat(Agent,Food),
   			Time_From7,
   			Time_Until8),
   		some(Exists_Location,
   		     '$kolem_Fn_42'(Agent,Food,Time))
   	      ],
   	      [loc_at(Food,Exists_Location)]).
 */


% [agent,food,time]
% Terminates(Eat(agent,food),Hungry(agent),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',268).

 /*  pl=axiom(terminates(eat(Agent,Food),
   		 hungry(Agent),
   		 Time),
         []).
 */
 %  terminates(eat(Agent,Food),hungry(Agent),Time).
eat(Agent, Food)terminates hungry(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',268).

 /*  terminated(happens(eat(Agent,Food),
   		   Time_From,
   		   Time_Until),
   	   hungry(Agent),
   	   []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',268).

 /*  terminated(happens(eat(Agent,Food),
   		   Time_From,
   		   Time_Until),
   	   hungry(Agent),
   	   []).
 */

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',270).
% sort restaurant: script
subsort(restaurant,script).
 %  subsort(restaurant,script).

% sort waiter: agent
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',270).
subsort(waiter,agent).
 %  subsort(waiter,agent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',272).
% sort cook: agent
subsort(cook,agent).
 %  subsort(cook,agent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',274).
% function BillOf(restaurant): bill
 %  blue=function(billOf(restaurant)).
 %  function(billOf(restaurant)).
functions([billOf/1]).
 %  functions([billOf/1]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',274).
mpred_prop(billOf(restaurant),function).
 %  mpred_prop(billOf(restaurant),function).
 %  blue=predicate(bill(restaurant,bill)).
 %  predicate(bill(restaurant,bill)).
predicates([bill/2]).
 %  predicates([bill/2]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',274).
mpred_prop(bill(restaurant,bill),predicate).
 %  mpred_prop(bill(restaurant,bill),predicate).
 %  pl=axiom(functional_predicate(billOf,bill),[]).
functional_predicate(billOf,bill).
 %  functional_predicate(billOf,bill).
 %  pl=axiom(function_argtypes(bill,billOf(restaurant),bill),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',274).
function_argtypes(bill,billOf(restaurant),bill).
 %  function_argtypes(bill,billOf(restaurant),bill).
resultIsa(billOf,bill).
 %  resultIsa(billOf,bill).

% function CookOf(restaurant): cook
 %  blue=function(cookOf(restaurant)).
 %  function(cookOf(restaurant)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',274).
functions([cookOf/1]).
 %  functions([cookOf/1]).
mpred_prop(cookOf(restaurant),function).
 %  mpred_prop(cookOf(restaurant),function).
 %  blue=predicate(cook(restaurant,cook)).
 %  predicate(cook(restaurant,cook)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',274).
predicates([cook/2]).
 %  predicates([cook/2]).
mpred_prop(cook(restaurant,cook),predicate).
 %  mpred_prop(cook(restaurant,cook),predicate).
 %  pl=axiom(functional_predicate(cookOf,cook),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',274).
functional_predicate(cookOf,cook).
 %  functional_predicate(cookOf,cook).
 %  pl=axiom(function_argtypes(cook,cookOf(restaurant),cook),[]).
function_argtypes(cook,cookOf(restaurant),cook).
 %  function_argtypes(cook,cookOf(restaurant),cook).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',274).
resultIsa(cookOf,cook).
 %  resultIsa(cookOf,cook).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',276).
% function TableOf(restaurant): table
 %  blue=function(tableOf(restaurant)).
 %  function(tableOf(restaurant)).
functions([tableOf/1]).
 %  functions([tableOf/1]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',276).
mpred_prop(tableOf(restaurant),function).
 %  mpred_prop(tableOf(restaurant),function).
 %  blue=predicate(table(restaurant,table)).
 %  predicate(table(restaurant,table)).
predicates([(table)/2]).
 %  predicates([(table)/2]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',276).
mpred_prop(table(restaurant,table),predicate).
 %  mpred_prop(table(restaurant,table),predicate).
 %  pl=axiom(functional_predicate(tableOf,table),[]).
functional_predicate(tableOf,table).
 %  functional_predicate(tableOf,table).
 %  pl=axiom(function_argtypes(table,tableOf(restaurant),table),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',276).
function_argtypes(table,tableOf(restaurant),table).
 %  function_argtypes(table,tableOf(restaurant),table).
resultIsa(tableOf,table).
 %  resultIsa(tableOf,table).

% function WaiterOf(restaurant): waiter
 %  blue=function(waiterOf(restaurant)).
 %  function(waiterOf(restaurant)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',276).
functions([waiterOf/1]).
 %  functions([waiterOf/1]).
mpred_prop(waiterOf(restaurant),function).
 %  mpred_prop(waiterOf(restaurant),function).
 %  blue=predicate(waiter(restaurant,waiter)).
 %  predicate(waiter(restaurant,waiter)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',276).
predicates([waiter/2]).
 %  predicates([waiter/2]).
mpred_prop(waiter(restaurant,waiter),predicate).
 %  mpred_prop(waiter(restaurant,waiter),predicate).
 %  pl=axiom(functional_predicate(waiterOf,waiter),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',276).
functional_predicate(waiterOf,waiter).
 %  functional_predicate(waiterOf,waiter).
 %  pl=axiom(function_argtypes(waiter,waiterOf(restaurant),waiter),[]).
function_argtypes(waiter,waiterOf(restaurant),waiter).
 %  function_argtypes(waiter,waiterOf(restaurant),waiter).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',276).
resultIsa(waiterOf,waiter).
 %  resultIsa(waiterOf,waiter).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',278).
% function KitchenDoorOf(restaurant): door
 %  blue=function(kitchenDoorOf(restaurant)).
 %  function(kitchenDoorOf(restaurant)).
functions([kitchenDoorOf/1]).
 %  functions([kitchenDoorOf/1]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',278).
mpred_prop(kitchenDoorOf(restaurant),function).
 %  mpred_prop(kitchenDoorOf(restaurant),function).
 %  blue=predicate(kitchenDoor(restaurant,door)).
 %  predicate(kitchenDoor(restaurant,door)).
predicates([kitchenDoor/2]).
 %  predicates([kitchenDoor/2]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',278).
mpred_prop(kitchenDoor(restaurant,door),predicate).
 %  mpred_prop(kitchenDoor(restaurant,door),predicate).
 %  pl=axiom(functional_predicate(kitchenDoorOf,kitchenDoor),[]).
functional_predicate(kitchenDoorOf,kitchenDoor).
 %  functional_predicate(kitchenDoorOf,kitchenDoor).
 %  pl=axiom(function_argtypes(kitchenDoor,kitchenDoorOf(restaurant),door),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',278).
function_argtypes(kitchenDoor,kitchenDoorOf(restaurant),door).
 %  function_argtypes(kitchenDoor,kitchenDoorOf(restaurant),door).
resultIsa(kitchenDoorOf,door).
 %  resultIsa(kitchenDoorOf,door).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',280).
% fluent BeWaiter0(waiter)
 %  blue=fluent(beWaiter0(waiter)).
 %  fluent(beWaiter0(waiter)).
fluents([beWaiter0/1]).
 %  fluents([beWaiter0/1]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',280).
mpred_prop(beWaiter0(waiter),fluent).
 %  mpred_prop(beWaiter0(waiter),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',282).
% fluent BeWaiter1(waiter)
 %  blue=fluent(beWaiter1(waiter)).
 %  fluent(beWaiter1(waiter)).
fluents([beWaiter1/1]).
 %  fluents([beWaiter1/1]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',282).
mpred_prop(beWaiter1(waiter),fluent).
 %  mpred_prop(beWaiter1(waiter),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',284).
% fluent BeWaiter2(waiter)
 %  blue=fluent(beWaiter2(waiter)).
 %  fluent(beWaiter2(waiter)).
fluents([beWaiter2/1]).
 %  fluents([beWaiter2/1]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',284).
mpred_prop(beWaiter2(waiter),fluent).
 %  mpred_prop(beWaiter2(waiter),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',286).
% fluent BeWaiter3(waiter)
 %  blue=fluent(beWaiter3(waiter)).
 %  fluent(beWaiter3(waiter)).
fluents([beWaiter3/1]).
 %  fluents([beWaiter3/1]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',286).
mpred_prop(beWaiter3(waiter),fluent).
 %  mpred_prop(beWaiter3(waiter),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',288).
% fluent BeWaiter4(waiter)
 %  blue=fluent(beWaiter4(waiter)).
 %  fluent(beWaiter4(waiter)).
fluents([beWaiter4/1]).
 %  fluents([beWaiter4/1]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',288).
mpred_prop(beWaiter4(waiter),fluent).
 %  mpred_prop(beWaiter4(waiter),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',290).
% fluent BeWaiter5(waiter)
 %  blue=fluent(beWaiter5(waiter)).
 %  fluent(beWaiter5(waiter)).
fluents([beWaiter5/1]).
 %  fluents([beWaiter5/1]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',290).
mpred_prop(beWaiter5(waiter),fluent).
 %  mpred_prop(beWaiter5(waiter),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',292).
% fluent BeWaiter6(waiter)
 %  blue=fluent(beWaiter6(waiter)).
 %  fluent(beWaiter6(waiter)).
fluents([beWaiter6/1]).
 %  fluents([beWaiter6/1]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',292).
mpred_prop(beWaiter6(waiter),fluent).
 %  mpred_prop(beWaiter6(waiter),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',294).
% fluent BeWaiter7(waiter)
 %  blue=fluent(beWaiter7(waiter)).
 %  fluent(beWaiter7(waiter)).
fluents([beWaiter7/1]).
 %  fluents([beWaiter7/1]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',294).
mpred_prop(beWaiter7(waiter),fluent).
 %  mpred_prop(beWaiter7(waiter),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',296).
% fluent BeWaiter8(waiter)
 %  blue=fluent(beWaiter8(waiter)).
 %  fluent(beWaiter8(waiter)).
fluents([beWaiter8/1]).
 %  fluents([beWaiter8/1]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',296).
mpred_prop(beWaiter8(waiter),fluent).
 %  mpred_prop(beWaiter8(waiter),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',298).
% fluent BeWaiter9(waiter)
 %  blue=fluent(beWaiter9(waiter)).
 %  fluent(beWaiter9(waiter)).
fluents([beWaiter9/1]).
 %  fluents([beWaiter9/1]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',298).
mpred_prop(beWaiter9(waiter),fluent).
 %  mpred_prop(beWaiter9(waiter),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',300).
% xor BeWaiter0, BeWaiter1, BeWaiter2, BeWaiter3, BeWaiter4, BeWaiter5, BeWaiter6, BeWaiter7, BeWaiter8, BeWaiter9

 /*  red = ==>xor[ beWaiter0,
     beWaiter1,
     beWaiter2,
     beWaiter3,
     beWaiter4,
     beWaiter5,
     beWaiter6,
     beWaiter7,
     beWaiter8,
     beWaiter9
   ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',300).
==>xor[ beWaiter0,
  beWaiter1,
  beWaiter2,
  beWaiter3,
  beWaiter4,
  beWaiter5,
  beWaiter6,
  beWaiter7,
  beWaiter8,
  beWaiter9
].
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',300).

 /*  ==>xor[ beWaiter0,
     beWaiter1,
     beWaiter2,
     beWaiter3,
     beWaiter4,
     beWaiter5,
     beWaiter6,
     beWaiter7,
     beWaiter8,
     beWaiter9
   ].
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',302).
% [waiter,agent,time]
% HoldsAt(BeWaiter0(waiter),time) ->
% Terminates(Greet(waiter,agent),
%            BeWaiter0(waiter),
%            time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',302).

 /*  pl=axiom(terminates(greet(Waiter,Agent),
   		 beWaiter0(Waiter),
   		 Time),
         [beWaiter0(Waiter)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',302).

 /*  beWaiter0(Waiter) ->
       terminates(greet(Waiter, Agent),
                  beWaiter0(Waiter),
                  Time).
 */
if beWaiter0(Waiter)then terminates(greet(Waiter, Agent), beWaiter0(Waiter)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',302).

 /*  reactive_rule([beWaiter0(Waiter)],
   	      [ terminates(greet(Waiter,Agent),
   			   at(beWaiter0(Waiter),Time),
   			   Terminates)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',302).

 /*  reactive_rule([beWaiter0(Waiter)],
   	      [ terminates(greet(Waiter,Agent),
   			   at(beWaiter0(Waiter),Time),
   			   Terminates)
   	      ]).
 */


% [waiter,agent,time]
% HoldsAt(BeWaiter0(waiter),time) ->
% Initiates(Greet(waiter,agent),
%           BeWaiter1(waiter),
%           time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',309).

 /*  pl=axiom(initiates(greet(Waiter,Agent),
   		beWaiter1(Waiter),
   		Time),
         [beWaiter0(Waiter)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',309).

 /*  beWaiter0(Waiter) ->
       initiates(greet(Waiter, Agent),
                 beWaiter1(Waiter),
                 Time).
 */
if beWaiter0(Waiter)then initiates(greet(Waiter, Agent), beWaiter1(Waiter)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',309).

 /*  reactive_rule([beWaiter0(Waiter)],
   	      [ initiates(greet(Waiter,Agent),
   			  at(beWaiter1(Waiter),Time),
   			  Initiates)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',309).

 /*  reactive_rule([beWaiter0(Waiter)],
   	      [ initiates(greet(Waiter,Agent),
   			  at(beWaiter1(Waiter),Time),
   			  Initiates)
   	      ]).
 */


% [waiter,agent,food,time]
% HoldsAt(BeWaiter1(waiter),time) ->
% Terminates(Order(agent,waiter,food),
%            BeWaiter1(waiter),
%            time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',315).

 /*  pl=axiom(terminates(order(Agent,Waiter,Food),
   		 beWaiter1(Waiter),
   		 Time),
         [beWaiter1(Waiter)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',315).

 /*  beWaiter1(Waiter) ->
       terminates(order(Agent, Waiter, Food),
                  beWaiter1(Waiter),
                  Time).
 */
if beWaiter1(Waiter)then terminates(order(Agent, Waiter, Food), beWaiter1(Waiter)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',315).

 /*  reactive_rule([beWaiter1(Waiter)],
   	      [ terminates(order(Agent,Waiter,Food),
   			   at(beWaiter1(Waiter),Time),
   			   Terminates)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',315).

 /*  reactive_rule([beWaiter1(Waiter)],
   	      [ terminates(order(Agent,Waiter,Food),
   			   at(beWaiter1(Waiter),Time),
   			   Terminates)
   	      ]).
 */


% [waiter,agent,food,time]
% HoldsAt(BeWaiter1(waiter),time) ->
% Initiates(Order(agent,waiter,food),
%           BeWaiter2(waiter),
%           time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',321).

 /*  pl=axiom(initiates(order(Agent,Waiter,Food),
   		beWaiter2(Waiter),
   		Time),
         [beWaiter1(Waiter)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',321).

 /*  beWaiter1(Waiter) ->
       initiates(order(Agent, Waiter, Food),
                 beWaiter2(Waiter),
                 Time).
 */
if beWaiter1(Waiter)then initiates(order(Agent, Waiter, Food), beWaiter2(Waiter)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',321).

 /*  reactive_rule([beWaiter1(Waiter)],
   	      [ initiates(order(Agent,Waiter,Food),
   			  at(beWaiter2(Waiter),Time),
   			  Initiates)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',321).

 /*  reactive_rule([beWaiter1(Waiter)],
   	      [ initiates(order(Agent,Waiter,Food),
   			  at(beWaiter2(Waiter),Time),
   			  Initiates)
   	      ]).
 */


% [restaurant,waiter,time]
% WaiterOf(restaurant)=waiter &
% HoldsAt(BeWaiter2(waiter),time) ->
% Happens(WalkThroughDoor12(waiter,KitchenDoorOf(restaurant)),time).
 %  clausify_pnf=(waiter(Restaurant, Waiter), holds_at(beWaiter2(Waiter), Time)->happens(walkThroughDoor12(Waiter, kitchenDoorOf(Restaurant)), Time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',327).

 /*  happens(walkThroughDoor12(Waiter, kitchenDoorOf(Restaurant)), Time) :-
       waiter(Restaurant, Waiter),
       holds_at(beWaiter2(Waiter), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',327).

 /*  fix_axiom_head(Time) ->
       [ happens(walkThroughDoor12(Waiter, kitchenDoorOf(Restaurant)),
                 Time),
          (->),
         walkThroughDoor12(Waiter, kitchenDoorOf(Restaurant))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',327).

 /*  pl=axiom(walkThroughDoor12(Waiter,kitchenDoorOf(Restaurant)),
         [waiter(Restaurant,Waiter),beWaiter2(Waiter)]).
 */

 /*  (   waiter(Restaurant, Waiter),
       beWaiter2(Waiter)
   ->  walkThroughDoor12(Waiter, kitchenDoorOf(Restaurant))
   ).
 */
if waiter(Restaurant, Waiter), beWaiter2(Waiter)then walkThroughDoor12(Waiter, kitchenDoorOf(Restaurant)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',327).

 /*  reactive_rule([ waiter(Restaurant,Waiter),
   		beWaiter2(Waiter)
   	      ],
   	      [ walkThroughDoor12(Waiter,
   				  kitchenDoorOf(Restaurant))
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',327).

 /*  reactive_rule([ waiter(Restaurant,Waiter),
   		beWaiter2(Waiter)
   	      ],
   	      [ walkThroughDoor12(Waiter,
   				  kitchenDoorOf(Restaurant))
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',327).

 /*  not(waiter(Restaurant, Waiter)) :-
       holds_at(beWaiter2(Waiter), Time),
       not(happens(walkThroughDoor12(Waiter,
                                     kitchenDoorOf(Restaurant)),
                   Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',327).

 /*  fix_axiom_head(Time) ->
       [holds_at(beWaiter2(Waiter), Time), ->, beWaiter2(Waiter)].
 */

 /*  fix_axiom_head(Time) ->
       [ not(happens(walkThroughDoor12(Waiter,
                                       kitchenDoorOf(Restaurant)),
                     Time)),
          (->),
         not(walkThroughDoor12(Waiter, kitchenDoorOf(Restaurant)))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',327).

 /*  pl=axiom(not(waiter(Restaurant,Waiter)),
         [ beWaiter2(Waiter),
   	not(walkThroughDoor12(Waiter,
   			      kitchenDoorOf(Restaurant)))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',327).

 /*  (   beWaiter2(Waiter),
       not(walkThroughDoor12(Waiter, kitchenDoorOf(Restaurant)))
   ->  not(waiter(Restaurant, Waiter))
   ).
 */
if beWaiter2(Waiter), not walkThroughDoor12(Waiter, kitchenDoorOf(Restaurant))then not waiter(Restaurant, Waiter).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',327).

 /*  reactive_rule([ beWaiter2(Waiter),
   		not(walkThroughDoor12(Waiter,
   				      kitchenDoorOf(Restaurant)))
   	      ],
   	      [not(waiter(Restaurant,Waiter))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',327).

 /*  reactive_rule([ beWaiter2(Waiter),
   		not(walkThroughDoor12(Waiter,
   				      kitchenDoorOf(Restaurant)))
   	      ],
   	      [not(waiter(Restaurant,Waiter))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',327).

 /*  not(holds_at(beWaiter2(Waiter), Time)) :-
       waiter(Restaurant, Waiter),
       not(happens(walkThroughDoor12(Waiter,
                                     kitchenDoorOf(Restaurant)),
                   Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',327).

 /*  pl=axiom(not(beWaiter2(Waiter)),
         [ waiter(Restaurant,Waiter),
   	not(walkThroughDoor12(Waiter,
   			      kitchenDoorOf(Restaurant)))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',327).

 /*  (   waiter(Restaurant, Waiter),
       not(walkThroughDoor12(Waiter, kitchenDoorOf(Restaurant)))
   ->  not(beWaiter2(Waiter))
   ).
 */
if waiter(Restaurant, Waiter), not walkThroughDoor12(Waiter, kitchenDoorOf(Restaurant))then not beWaiter2(Waiter).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',327).

 /*  reactive_rule([ waiter(Restaurant,Waiter),
   		not(walkThroughDoor12(Waiter,
   				      kitchenDoorOf(Restaurant)))
   	      ],
   	      [not(beWaiter2(Waiter))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',327).

 /*  reactive_rule([ waiter(Restaurant,Waiter),
   		not(walkThroughDoor12(Waiter,
   				      kitchenDoorOf(Restaurant)))
   	      ],
   	      [not(beWaiter2(Waiter))]).
 */


% [restaurant,waiter,door,time]
% HoldsAt(BeWaiter2(waiter),time) &
% WaiterOf(restaurant)=waiter &
% KitchenDoorOf(restaurant)=door ->
% Terminates(WalkThroughDoor12(waiter,door),
%            BeWaiter2(waiter),
%            time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',332).

 /*  pl=axiom(terminates(walkThroughDoor12(Waiter,Door),
   		 beWaiter2(Waiter),
   		 Time),
         [ beWaiter2(Waiter),
   	waiter(Restaurant,Waiter),
   	kitchenDoor(Restaurant,Door)
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',332).

 /*  (   beWaiter2(Waiter),
       waiter(Restaurant, Waiter),
       kitchenDoor(Restaurant, Door)
   ->  terminates(walkThroughDoor12(Waiter, Door),
                  beWaiter2(Waiter),
                  Time)
   ).
 */
if beWaiter2(Waiter), waiter(Restaurant, Waiter), kitchenDoor(Restaurant, Door)then terminates(walkThroughDoor12(Waiter, Door), beWaiter2(Waiter)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',332).

 /*  reactive_rule([ beWaiter2(Waiter),
   		waiter(Restaurant,Waiter),
   		kitchenDoor(Restaurant,Door)
   	      ],
   	      [ terminates(walkThroughDoor12(Waiter,Door),
   			   at(beWaiter2(Waiter),Time),
   			   Terminates)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',332).

 /*  reactive_rule([ beWaiter2(Waiter),
   		waiter(Restaurant,Waiter),
   		kitchenDoor(Restaurant,Door)
   	      ],
   	      [ terminates(walkThroughDoor12(Waiter,Door),
   			   at(beWaiter2(Waiter),Time),
   			   Terminates)
   	      ]).
 */


% [restaurant,waiter,door,time]
% HoldsAt(BeWaiter2(waiter),time) &
% WaiterOf(restaurant)=waiter &
% KitchenDoorOf(restaurant)=door ->
% Initiates(WalkThroughDoor12(waiter,door),
%           BeWaiter3(waiter),
%           time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',340).

 /*  pl=axiom(initiates(walkThroughDoor12(Waiter,Door),
   		beWaiter3(Waiter),
   		Time),
         [ beWaiter2(Waiter),
   	waiter(Restaurant,Waiter),
   	kitchenDoor(Restaurant,Door)
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',340).

 /*  (   beWaiter2(Waiter),
       waiter(Restaurant, Waiter),
       kitchenDoor(Restaurant, Door)
   ->  initiates(walkThroughDoor12(Waiter, Door),
                 beWaiter3(Waiter),
                 Time)
   ).
 */
if beWaiter2(Waiter), waiter(Restaurant, Waiter), kitchenDoor(Restaurant, Door)then initiates(walkThroughDoor12(Waiter, Door), beWaiter3(Waiter)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',340).

 /*  reactive_rule([ beWaiter2(Waiter),
   		waiter(Restaurant,Waiter),
   		kitchenDoor(Restaurant,Door)
   	      ],
   	      [ initiates(walkThroughDoor12(Waiter,Door),
   			  at(beWaiter3(Waiter),Time),
   			  Initiates)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',340).

 /*  reactive_rule([ beWaiter2(Waiter),
   		waiter(Restaurant,Waiter),
   		kitchenDoor(Restaurant,Door)
   	      ],
   	      [ initiates(walkThroughDoor12(Waiter,Door),
   			  at(beWaiter3(Waiter),Time),
   			  Initiates)
   	      ]).
 */


% [restaurant,food,time]
% HoldsAt(BeWaiter3(WaiterOf(restaurant)),time) &
% ({agent} HoldsAt(KnowOrder(WaiterOf(restaurant),agent,food),time)) ->
% Happens(Order(WaiterOf(restaurant),CookOf(restaurant),food),time).
 %  clausify_pnf=(holds_at(beWaiter3(waiterOf(Restaurant)), Time), exists([Agent], holds_at(knowOrder(waiterOf(Restaurant), Agent, Food), Time))->happens(order(waiterOf(Restaurant), cookOf(Restaurant), Food), Time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',348).

 /*  happens(order(waiterOf(Restaurant), cookOf(Restaurant), Food), Time) :-
       holds_at(beWaiter3(waiterOf(Restaurant)), Time),
       holds_at(knowOrder(waiterOf(Restaurant), Agent, Food),
                Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',348).

 /*  fix_axiom_head(Time) ->
       [ happens(order(waiterOf(Restaurant),
                       cookOf(Restaurant),
                       Food),
                 Time),
          (->),
         order(waiterOf(Restaurant), cookOf(Restaurant), Food)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',348).

 /*  pl=axiom(order(waiterOf(Restaurant),
   	    cookOf(Restaurant),
   	    Food),
         [ beWaiter3(waiterOf(Restaurant)),
   	knowOrder(waiterOf(Restaurant),Agent,Food)
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',348).

 /*  (   beWaiter3(waiterOf(Restaurant)),
       knowOrder(waiterOf(Restaurant), Agent, Food)
   ->  order(waiterOf(Restaurant), cookOf(Restaurant), Food)
   ).
 */
if beWaiter3(waiterOf(Restaurant)), knowOrder(waiterOf(Restaurant), Agent, Food)then order(waiterOf(Restaurant), cookOf(Restaurant), Food).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',348).

 /*  reactive_rule([ beWaiter3(waiterOf(Restaurant)),
   		knowOrder(waiterOf(Restaurant),
   			  Agent,
   			  Food)
   	      ],
   	      [ order(waiterOf(Restaurant),
   		      cookOf(Restaurant),
   		      Food)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',348).

 /*  reactive_rule([ beWaiter3(waiterOf(Restaurant)),
   		knowOrder(waiterOf(Restaurant),
   			  Agent,
   			  Food)
   	      ],
   	      [ order(waiterOf(Restaurant),
   		      cookOf(Restaurant),
   		      Food)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',348).

 /*  not(holds_at(beWaiter3(waiterOf(Restaurant)), Time)) :-
       holds_at(knowOrder(waiterOf(Restaurant), Agent, Food),
                Time),
       not(happens(order(waiterOf(Restaurant),
                         cookOf(Restaurant),
                         Food),
                   Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',348).

 /*  pl=axiom(not(beWaiter3(waiterOf(Restaurant))),
         [ knowOrder(waiterOf(Restaurant),Agent,Food),
   	not(order(waiterOf(Restaurant),
   		  cookOf(Restaurant),
   		  Food))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',348).

 /*  (   knowOrder(waiterOf(Restaurant), Agent, Food),
       not(order(waiterOf(Restaurant), cookOf(Restaurant), Food))
   ->  not(beWaiter3(waiterOf(Restaurant)))
   ).
 */
if knowOrder(waiterOf(Restaurant), Agent, Food), not order(waiterOf(Restaurant), cookOf(Restaurant), Food)then not beWaiter3(waiterOf(Restaurant)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',348).

 /*  reactive_rule([ knowOrder(waiterOf(Restaurant),
   			  Agent,
   			  Food),
   		not(order(waiterOf(Restaurant),
   			  cookOf(Restaurant),
   			  Food))
   	      ],
   	      [not(beWaiter3(waiterOf(Restaurant)))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',348).

 /*  reactive_rule([ knowOrder(waiterOf(Restaurant),
   			  Agent,
   			  Food),
   		not(order(waiterOf(Restaurant),
   			  cookOf(Restaurant),
   			  Food))
   	      ],
   	      [not(beWaiter3(waiterOf(Restaurant)))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',348).

 /*  not(holds_at(knowOrder(waiterOf(Restaurant), Agent, Food), Time)) :-
       holds_at(beWaiter3(waiterOf(Restaurant)), Time),
       not(happens(order(waiterOf(Restaurant),
                         cookOf(Restaurant),
                         Food),
                   Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',348).

 /*  pl=axiom(not(knowOrder(waiterOf(Restaurant),Agent,Food)),
         [ beWaiter3(waiterOf(Restaurant)),
   	not(order(waiterOf(Restaurant),
   		  cookOf(Restaurant),
   		  Food))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',348).

 /*  (   beWaiter3(waiterOf(Restaurant)),
       not(order(waiterOf(Restaurant), cookOf(Restaurant), Food))
   ->  not(knowOrder(waiterOf(Restaurant), Agent, Food))
   ).
 */
if beWaiter3(waiterOf(Restaurant)), not order(waiterOf(Restaurant), cookOf(Restaurant), Food)then not knowOrder(waiterOf(Restaurant), Agent, Food).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',348).

 /*  reactive_rule([ beWaiter3(waiterOf(Restaurant)),
   		not(order(waiterOf(Restaurant),
   			  cookOf(Restaurant),
   			  Food))
   	      ],
   	      [ not(knowOrder(waiterOf(Restaurant),
   			      Agent,
   			      Food))
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',348).

 /*  reactive_rule([ beWaiter3(waiterOf(Restaurant)),
   		not(order(waiterOf(Restaurant),
   			  cookOf(Restaurant),
   			  Food))
   	      ],
   	      [ not(knowOrder(waiterOf(Restaurant),
   			      Agent,
   			      Food))
   	      ]).
 */


% [restaurant,waiter,cook,food,time]
% WaiterOf(restaurant)=waiter &
% CookOf(restaurant)=cook &
% HoldsAt(BeWaiter3(waiter),time) ->
% Terminates(Order(waiter,cook,food),
%            BeWaiter3(waiter),
%            time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',353).

 /*  pl=axiom(terminates(order(Waiter,Cook,Food),
   		 beWaiter3(Waiter),
   		 Time),
         [ waiter(Restaurant,Waiter),
   	cook(Restaurant,Cook),
   	beWaiter3(Waiter)
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',353).

 /*  (   waiter(Restaurant, Waiter),
       cook(Restaurant, Cook),
       beWaiter3(Waiter)
   ->  terminates(order(Waiter, Cook, Food),
                  beWaiter3(Waiter),
                  Time)
   ).
 */
if waiter(Restaurant, Waiter), cook(Restaurant, Cook), beWaiter3(Waiter)then terminates(order(Waiter, Cook, Food), beWaiter3(Waiter)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',353).

 /*  reactive_rule([ waiter(Restaurant,Waiter),
   		cook(Restaurant,Cook),
   		beWaiter3(Waiter)
   	      ],
   	      [ terminates(order(Waiter,Cook,Food),
   			   at(beWaiter3(Waiter),Time),
   			   Terminates)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',353).

 /*  reactive_rule([ waiter(Restaurant,Waiter),
   		cook(Restaurant,Cook),
   		beWaiter3(Waiter)
   	      ],
   	      [ terminates(order(Waiter,Cook,Food),
   			   at(beWaiter3(Waiter),Time),
   			   Terminates)
   	      ]).
 */


% [restaurant,waiter,cook,food,time]
% WaiterOf(restaurant)=waiter &
% CookOf(restaurant)=cook &
% HoldsAt(BeWaiter3(waiter),time) ->
% Initiates(Order(waiter,cook,food),
%           BeWaiter4(waiter),
%           time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',361).

 /*  pl=axiom(initiates(order(Waiter,Cook,Food),
   		beWaiter4(Waiter),
   		Time),
         [ waiter(Restaurant,Waiter),
   	cook(Restaurant,Cook),
   	beWaiter3(Waiter)
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',361).

 /*  (   waiter(Restaurant, Waiter),
       cook(Restaurant, Cook),
       beWaiter3(Waiter)
   ->  initiates(order(Waiter, Cook, Food),
                 beWaiter4(Waiter),
                 Time)
   ).
 */
if waiter(Restaurant, Waiter), cook(Restaurant, Cook), beWaiter3(Waiter)then initiates(order(Waiter, Cook, Food), beWaiter4(Waiter)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',361).

 /*  reactive_rule([ waiter(Restaurant,Waiter),
   		cook(Restaurant,Cook),
   		beWaiter3(Waiter)
   	      ],
   	      [ initiates(order(Waiter,Cook,Food),
   			  at(beWaiter4(Waiter),Time),
   			  Initiates)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',361).

 /*  reactive_rule([ waiter(Restaurant,Waiter),
   		cook(Restaurant,Cook),
   		beWaiter3(Waiter)
   	      ],
   	      [ initiates(order(Waiter,Cook,Food),
   			  at(beWaiter4(Waiter),Time),
   			  Initiates)
   	      ]).
 */


% [waiter,food,time]
% HoldsAt(BeWaiter4(waiter),time) &
% ({agent} HoldsAt(KnowOrder(waiter,agent,food),time)) &
% HoldsAt(FoodPrepared(food),time) ->
% Happens(PickUp(waiter,food),time).
 %  clausify_pnf=(holds_at(beWaiter4(Waiter), Time), exists([Agent], holds_at(knowOrder(Waiter, Agent, Food), Time)), holds_at(foodPrepared(Food), Time)->happens(pickUp(Waiter, Food), Time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',369).

 /*  happens(pickUp(Waiter, Food), Time) :-
       holds_at(beWaiter4(Waiter), Time),
       holds_at(knowOrder(Waiter, Agent, Food), Time),
       holds_at(foodPrepared(Food), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',369).

 /*  fix_axiom_head(Time) ->
       [ happens(pickUp(Waiter, Food), Time),
          (->),
         pickUp(Waiter, Food)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',369).

 /*  pl=axiom(pickUp(Waiter,Food),
         [ beWaiter4(Waiter),
   	knowOrder(Waiter,Agent,Food),
   	foodPrepared(Food)
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',369).

 /*  (   beWaiter4(Waiter),
       knowOrder(Waiter, Agent, Food),
       foodPrepared(Food)
   ->  pickUp(Waiter, Food)
   ).
 */
if beWaiter4(Waiter), knowOrder(Waiter, Agent, Food), foodPrepared(Food)then pickUp(Waiter, Food).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',369).

 /*  reactive_rule([ beWaiter4(Waiter),
   		knowOrder(Waiter,Agent,Food),
   		foodPrepared(Food)
   	      ],
   	      [ happens(pickUp(Waiter,Food),
   			Time_From,
   			Time_Until)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',369).

 /*  reactive_rule([ beWaiter4(Waiter),
   		knowOrder(Waiter,Agent,Food),
   		foodPrepared(Food)
   	      ],
   	      [ happens(pickUp(Waiter,Food),
   			Time_From,
   			Time_Until)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',369).

 /*  not(holds_at(beWaiter4(Waiter), Time)) :-
       holds_at(knowOrder(Waiter, Agent, Food), Time),
       holds_at(foodPrepared(Food), Time),
       not(happens(pickUp(Waiter, Food), Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',369).

 /*  pl=axiom(not(beWaiter4(Waiter)),
         [ knowOrder(Waiter,Agent,Food),
   	foodPrepared(Food),
   	not(pickUp(Waiter,Food))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',369).

 /*  (   knowOrder(Waiter, Agent, Food),
       foodPrepared(Food),
       not(pickUp(Waiter, Food))
   ->  not(beWaiter4(Waiter))
   ).
 */
if knowOrder(Waiter, Agent, Food), foodPrepared(Food), not pickUp(Waiter, Food)then not beWaiter4(Waiter).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',369).

 /*  reactive_rule([ knowOrder(Waiter,Agent,Food),
   		foodPrepared(Food),
   		not(pickUp(Waiter,Food))
   	      ],
   	      [not(beWaiter4(Waiter))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',369).

 /*  reactive_rule([ knowOrder(Waiter,Agent,Food),
   		foodPrepared(Food),
   		not(pickUp(Waiter,Food))
   	      ],
   	      [not(beWaiter4(Waiter))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',369).

 /*  not(holds_at(knowOrder(Waiter, Agent, Food), Time)) :-
       holds_at(foodPrepared(Food), Time),
       holds_at(beWaiter4(Waiter), Time),
       not(happens(pickUp(Waiter, Food), Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',369).

 /*  pl=axiom(not(knowOrder(Waiter,Agent,Food)),
         [ foodPrepared(Food),
   	beWaiter4(Waiter),
   	not(pickUp(Waiter,Food))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',369).

 /*  (   foodPrepared(Food),
       beWaiter4(Waiter),
       not(pickUp(Waiter, Food))
   ->  not(knowOrder(Waiter, Agent, Food))
   ).
 */
if foodPrepared(Food), beWaiter4(Waiter), not pickUp(Waiter, Food)then not knowOrder(Waiter, Agent, Food).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',369).

 /*  reactive_rule([ foodPrepared(Food),
   		beWaiter4(Waiter),
   		not(pickUp(Waiter,Food))
   	      ],
   	      [not(knowOrder(Waiter,Agent,Food))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',369).

 /*  reactive_rule([ foodPrepared(Food),
   		beWaiter4(Waiter),
   		not(pickUp(Waiter,Food))
   	      ],
   	      [not(knowOrder(Waiter,Agent,Food))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',369).

 /*  not(holds_at(foodPrepared(Food), Time)) :-
       holds_at(knowOrder(Waiter, Agent, Food), Time),
       holds_at(beWaiter4(Waiter), Time),
       not(happens(pickUp(Waiter, Food), Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',369).

 /*  pl=axiom(not(foodPrepared(Food)),
         [ knowOrder(Waiter,Agent,Food),
   	beWaiter4(Waiter),
   	not(pickUp(Waiter,Food))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',369).

 /*  (   knowOrder(Waiter, Agent, Food),
       beWaiter4(Waiter),
       not(pickUp(Waiter, Food))
   ->  not(foodPrepared(Food))
   ).
 */
if knowOrder(Waiter, Agent, Food), beWaiter4(Waiter), not pickUp(Waiter, Food)then not foodPrepared(Food).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',369).

 /*  reactive_rule([ knowOrder(Waiter,Agent,Food),
   		beWaiter4(Waiter),
   		not(pickUp(Waiter,Food))
   	      ],
   	      [not(foodPrepared(Food))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',369).

 /*  reactive_rule([ knowOrder(Waiter,Agent,Food),
   		beWaiter4(Waiter),
   		not(pickUp(Waiter,Food))
   	      ],
   	      [not(foodPrepared(Food))]).
 */


% [waiter,food,time]
% HoldsAt(BeWaiter4(waiter),time) &
% ({agent} HoldsAt(KnowOrder(waiter,agent,food),time)) ->
% Terminates(PickUp(waiter,food),
%            BeWaiter4(waiter),
%            time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',375).

 /*  pl=axiom(terminates(pickUp(Waiter,Food),
   		 beWaiter4(Waiter),
   		 Time),
         [ beWaiter4(Waiter),
   	knowOrder(Waiter,Agent,Food)
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',375).

 /*  (   beWaiter4(Waiter),
       knowOrder(Waiter, Agent, Food)
   ->  terminates(pickUp(Waiter, Food),
                  beWaiter4(Waiter),
                  Time)
   ).
 */
if beWaiter4(Waiter), knowOrder(Waiter, Agent, Food)then terminates(pickUp(Waiter, Food), beWaiter4(Waiter)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',375).

 /*  reactive_rule([ beWaiter4(Waiter),
   		knowOrder(Waiter,Agent,Food)
   	      ],
   	      [ terminates(pickUp(Waiter,Food),
   			   at(beWaiter4(Waiter),Time),
   			   Terminates)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',375).

 /*  reactive_rule([ beWaiter4(Waiter),
   		knowOrder(Waiter,Agent,Food)
   	      ],
   	      [ terminates(pickUp(Waiter,Food),
   			   at(beWaiter4(Waiter),Time),
   			   Terminates)
   	      ]).
 */


% [waiter,food,time]
% HoldsAt(BeWaiter4(waiter),time) &
% ({agent} HoldsAt(KnowOrder(waiter,agent,food),time)) ->
% Initiates(PickUp(waiter,food),
%           BeWaiter5(waiter),
%           time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',382).

 /*  pl=axiom(initiates(pickUp(Waiter,Food),
   		beWaiter5(Waiter),
   		Time),
         [ beWaiter4(Waiter),
   	knowOrder(Waiter,Agent,Food)
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',382).

 /*  (   beWaiter4(Waiter),
       knowOrder(Waiter, Agent, Food)
   ->  initiates(pickUp(Waiter, Food),
                 beWaiter5(Waiter),
                 Time)
   ).
 */
if beWaiter4(Waiter), knowOrder(Waiter, Agent, Food)then initiates(pickUp(Waiter, Food), beWaiter5(Waiter)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',382).

 /*  reactive_rule([ beWaiter4(Waiter),
   		knowOrder(Waiter,Agent,Food)
   	      ],
   	      [ initiates(pickUp(Waiter,Food),
   			  at(beWaiter5(Waiter),Time),
   			  Initiates)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',382).

 /*  reactive_rule([ beWaiter4(Waiter),
   		knowOrder(Waiter,Agent,Food)
   	      ],
   	      [ initiates(pickUp(Waiter,Food),
   			  at(beWaiter5(Waiter),Time),
   			  Initiates)
   	      ]).
 */


% [restaurant,waiter,time]
% WaiterOf(restaurant)=waiter &
% HoldsAt(BeWaiter5(waiter),time) ->
% Happens(WalkThroughDoor21(waiter,KitchenDoorOf(restaurant)),time).
 %  clausify_pnf=(waiter(Restaurant, Waiter), holds_at(beWaiter5(Waiter), Time)->happens(walkThroughDoor21(Waiter, kitchenDoorOf(Restaurant)), Time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',389).

 /*  happens(walkThroughDoor21(Waiter, kitchenDoorOf(Restaurant)), Time) :-
       waiter(Restaurant, Waiter),
       holds_at(beWaiter5(Waiter), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',389).

 /*  fix_axiom_head(Time) ->
       [ happens(walkThroughDoor21(Waiter, kitchenDoorOf(Restaurant)),
                 Time),
          (->),
         walkThroughDoor21(Waiter, kitchenDoorOf(Restaurant))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',389).

 /*  pl=axiom(walkThroughDoor21(Waiter,kitchenDoorOf(Restaurant)),
         [waiter(Restaurant,Waiter),beWaiter5(Waiter)]).
 */

 /*  (   waiter(Restaurant, Waiter),
       beWaiter5(Waiter)
   ->  walkThroughDoor21(Waiter, kitchenDoorOf(Restaurant))
   ).
 */
if waiter(Restaurant, Waiter), beWaiter5(Waiter)then walkThroughDoor21(Waiter, kitchenDoorOf(Restaurant)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',389).

 /*  reactive_rule([ waiter(Restaurant,Waiter),
   		beWaiter5(Waiter)
   	      ],
   	      [ walkThroughDoor21(Waiter,
   				  kitchenDoorOf(Restaurant))
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',389).

 /*  reactive_rule([ waiter(Restaurant,Waiter),
   		beWaiter5(Waiter)
   	      ],
   	      [ walkThroughDoor21(Waiter,
   				  kitchenDoorOf(Restaurant))
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',389).

 /*  not(waiter(Restaurant, Waiter)) :-
       holds_at(beWaiter5(Waiter), Time),
       not(happens(walkThroughDoor21(Waiter,
                                     kitchenDoorOf(Restaurant)),
                   Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',389).

 /*  fix_axiom_head(Time) ->
       [holds_at(beWaiter5(Waiter), Time), ->, beWaiter5(Waiter)].
 */

 /*  fix_axiom_head(Time) ->
       [ not(happens(walkThroughDoor21(Waiter,
                                       kitchenDoorOf(Restaurant)),
                     Time)),
          (->),
         not(walkThroughDoor21(Waiter, kitchenDoorOf(Restaurant)))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',389).

 /*  pl=axiom(not(waiter(Restaurant,Waiter)),
         [ beWaiter5(Waiter),
   	not(walkThroughDoor21(Waiter,
   			      kitchenDoorOf(Restaurant)))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',389).

 /*  (   beWaiter5(Waiter),
       not(walkThroughDoor21(Waiter, kitchenDoorOf(Restaurant)))
   ->  not(waiter(Restaurant, Waiter))
   ).
 */
if beWaiter5(Waiter), not walkThroughDoor21(Waiter, kitchenDoorOf(Restaurant))then not waiter(Restaurant, Waiter).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',389).

 /*  reactive_rule([ beWaiter5(Waiter),
   		not(walkThroughDoor21(Waiter,
   				      kitchenDoorOf(Restaurant)))
   	      ],
   	      [not(waiter(Restaurant,Waiter))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',389).

 /*  reactive_rule([ beWaiter5(Waiter),
   		not(walkThroughDoor21(Waiter,
   				      kitchenDoorOf(Restaurant)))
   	      ],
   	      [not(waiter(Restaurant,Waiter))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',389).

 /*  not(holds_at(beWaiter5(Waiter), Time)) :-
       waiter(Restaurant, Waiter),
       not(happens(walkThroughDoor21(Waiter,
                                     kitchenDoorOf(Restaurant)),
                   Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',389).

 /*  pl=axiom(not(beWaiter5(Waiter)),
         [ waiter(Restaurant,Waiter),
   	not(walkThroughDoor21(Waiter,
   			      kitchenDoorOf(Restaurant)))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',389).

 /*  (   waiter(Restaurant, Waiter),
       not(walkThroughDoor21(Waiter, kitchenDoorOf(Restaurant)))
   ->  not(beWaiter5(Waiter))
   ).
 */
if waiter(Restaurant, Waiter), not walkThroughDoor21(Waiter, kitchenDoorOf(Restaurant))then not beWaiter5(Waiter).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',389).

 /*  reactive_rule([ waiter(Restaurant,Waiter),
   		not(walkThroughDoor21(Waiter,
   				      kitchenDoorOf(Restaurant)))
   	      ],
   	      [not(beWaiter5(Waiter))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',389).

 /*  reactive_rule([ waiter(Restaurant,Waiter),
   		not(walkThroughDoor21(Waiter,
   				      kitchenDoorOf(Restaurant)))
   	      ],
   	      [not(beWaiter5(Waiter))]).
 */


% [restaurant,waiter,door,time]
% HoldsAt(BeWaiter5(waiter),time) &
% WaiterOf(restaurant)=waiter &
% KitchenDoorOf(restaurant)=door ->
% Terminates(WalkThroughDoor21(waiter,door),
%            BeWaiter5(waiter),
%            time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',394).

 /*  pl=axiom(terminates(walkThroughDoor21(Waiter,Door),
   		 beWaiter5(Waiter),
   		 Time),
         [ beWaiter5(Waiter),
   	waiter(Restaurant,Waiter),
   	kitchenDoor(Restaurant,Door)
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',394).

 /*  (   beWaiter5(Waiter),
       waiter(Restaurant, Waiter),
       kitchenDoor(Restaurant, Door)
   ->  terminates(walkThroughDoor21(Waiter, Door),
                  beWaiter5(Waiter),
                  Time)
   ).
 */
if beWaiter5(Waiter), waiter(Restaurant, Waiter), kitchenDoor(Restaurant, Door)then terminates(walkThroughDoor21(Waiter, Door), beWaiter5(Waiter)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',394).

 /*  reactive_rule([ beWaiter5(Waiter),
   		waiter(Restaurant,Waiter),
   		kitchenDoor(Restaurant,Door)
   	      ],
   	      [ terminates(walkThroughDoor21(Waiter,Door),
   			   at(beWaiter5(Waiter),Time),
   			   Terminates)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',394).

 /*  reactive_rule([ beWaiter5(Waiter),
   		waiter(Restaurant,Waiter),
   		kitchenDoor(Restaurant,Door)
   	      ],
   	      [ terminates(walkThroughDoor21(Waiter,Door),
   			   at(beWaiter5(Waiter),Time),
   			   Terminates)
   	      ]).
 */


% [restaurant,waiter,door,time]
% HoldsAt(BeWaiter5(waiter),time) &
% WaiterOf(restaurant)=waiter &
% KitchenDoorOf(restaurant)=door ->
% Initiates(WalkThroughDoor21(waiter,door),
%           BeWaiter6(waiter),
%           time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',402).

 /*  pl=axiom(initiates(walkThroughDoor21(Waiter,Door),
   		beWaiter6(Waiter),
   		Time),
         [ beWaiter5(Waiter),
   	waiter(Restaurant,Waiter),
   	kitchenDoor(Restaurant,Door)
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',402).

 /*  (   beWaiter5(Waiter),
       waiter(Restaurant, Waiter),
       kitchenDoor(Restaurant, Door)
   ->  initiates(walkThroughDoor21(Waiter, Door),
                 beWaiter6(Waiter),
                 Time)
   ).
 */
if beWaiter5(Waiter), waiter(Restaurant, Waiter), kitchenDoor(Restaurant, Door)then initiates(walkThroughDoor21(Waiter, Door), beWaiter6(Waiter)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',402).

 /*  reactive_rule([ beWaiter5(Waiter),
   		waiter(Restaurant,Waiter),
   		kitchenDoor(Restaurant,Door)
   	      ],
   	      [ initiates(walkThroughDoor21(Waiter,Door),
   			  at(beWaiter6(Waiter),Time),
   			  Initiates)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',402).

 /*  reactive_rule([ beWaiter5(Waiter),
   		waiter(Restaurant,Waiter),
   		kitchenDoor(Restaurant,Door)
   	      ],
   	      [ initiates(walkThroughDoor21(Waiter,Door),
   			  at(beWaiter6(Waiter),Time),
   			  Initiates)
   	      ]).
 */


% [restaurant,waiter,table,food,time]
% WaiterOf(restaurant)=waiter &
% TableOf(restaurant)=table &
% HoldsAt(BeWaiter6(waiter),time) &
% HoldsAt(Holding(waiter,food),time) ->
% Happens(PlaceOn(waiter,food,table),time).
 %  clausify_pnf=(waiter(Restaurant, Waiter), table(Restaurant, Table), holds_at(beWaiter6(Waiter), Time), holds_at(holding(Waiter, Food), Time)->happens(placeOn(Waiter, Food, Table), Time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',410).

 /*  happens(placeOn(Waiter, Food, Table), Time) :-
       waiter(Restaurant, Waiter),
       ( table(Restaurant, Table)
       ),
       holds_at(beWaiter6(Waiter), Time),
       holds_at(holding(Waiter, Food), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',410).

 /*  fix_axiom_head(Time) ->
       [ happens(placeOn(Waiter, Food, Table), Time),
          (->),
         placeOn(Waiter, Food, Table)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',410).

 /*  pl=axiom(placeOn(Waiter,Food,Table),
         [ waiter(Restaurant,Waiter),
   	table(Restaurant,Table),
   	beWaiter6(Waiter),
   	holding(Waiter,Food)
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',410).

 /*  (   waiter(Restaurant, Waiter),
       ( table(Restaurant, Table)
       ),
       beWaiter6(Waiter),
       holding(Waiter, Food)
   ->  placeOn(Waiter, Food, Table)
   ).
 */
if waiter(Restaurant, Waiter), table(Restaurant, Table), beWaiter6(Waiter), holding(Waiter, Food)then placeOn(Waiter, Food, Table).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',410).

 /*  reactive_rule([ waiter(Restaurant,Waiter),
   		table(Restaurant,Table),
   		beWaiter6(Waiter),
   		holds(holding(Waiter,Food),Holds)
   	      ],
   	      [ happens(placeOn(Waiter,Food,Table),
   			Time_From,
   			Time_Until)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',410).

 /*  reactive_rule([ waiter(Restaurant,Waiter),
   		table(Restaurant,Table),
   		beWaiter6(Waiter),
   		holds(holding(Waiter,Food),Holds)
   	      ],
   	      [ happens(placeOn(Waiter,Food,Table),
   			Time_From,
   			Time_Until)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',410).

 /*  not(waiter(Restaurant, Waiter)) :-
       ( table(Restaurant, Table)
       ),
       holds_at(beWaiter6(Waiter), Time),
       holds_at(holding(Waiter, Food), Time),
       not(happens(placeOn(Waiter, Food, Table), Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',410).

 /*  fix_axiom_head(Time) ->
       [holds_at(beWaiter6(Waiter), Time), ->, beWaiter6(Waiter)].
 */

 /*  fix_axiom_head(Time) ->
       [ holds_at(holding(Waiter, Food), Time),
          (->),
         holding(Waiter, Food)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',410).

 /*  fix_axiom_head(Time) ->
       [ not(happens(placeOn(Waiter, Food, Table), Time)),
          (->),
         not(placeOn(Waiter, Food, Table))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',410).

 /*  pl=axiom(not(waiter(Restaurant,Waiter)),
         [ table(Restaurant,Table),
   	beWaiter6(Waiter),
   	holding(Waiter,Food),
   	not(placeOn(Waiter,Food,Table))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',410).

 /*  (   ( table(Restaurant, Table)
       ),
       beWaiter6(Waiter),
       holding(Waiter, Food),
       not(placeOn(Waiter, Food, Table))
   ->  not(waiter(Restaurant, Waiter))
   ).
 */
if table(Restaurant, Table), beWaiter6(Waiter), holding(Waiter, Food), not placeOn(Waiter, Food, Table)then not waiter(Restaurant, Waiter).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',410).

 /*  reactive_rule([ table(Restaurant,Table),
   		beWaiter6(Waiter),
   		holds(holding(Waiter,Food),Holds8),
   		not(placeOn(Waiter,Food,Table))
   	      ],
   	      [not(waiter(Restaurant,Waiter))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',410).

 /*  reactive_rule([ table(Restaurant,Table),
   		beWaiter6(Waiter),
   		holds(holding(Waiter,Food),Holds8),
   		not(placeOn(Waiter,Food,Table))
   	      ],
   	      [not(waiter(Restaurant,Waiter))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',410).

 /*  not(table(Restaurant, Table)) :-
       holds_at(beWaiter6(Waiter), Time),
       holds_at(holding(Waiter, Food), Time),
       waiter(Restaurant, Waiter),
       not(happens(placeOn(Waiter, Food, Table), Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',410).

 /*  fix_axiom_head(Time) ->
       [holds_at(beWaiter6(Waiter), Time), ->, beWaiter6(Waiter)].
 */

 /*  fix_axiom_head(Time) ->
       [ holds_at(holding(Waiter, Food), Time),
          (->),
         holding(Waiter, Food)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',410).

 /*  fix_axiom_head(Time) ->
       [ not(happens(placeOn(Waiter, Food, Table), Time)),
          (->),
         not(placeOn(Waiter, Food, Table))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',410).

 /*  pl=axiom(not(table(Restaurant,Table)),
         [ beWaiter6(Waiter),
   	holding(Waiter,Food),
   	waiter(Restaurant,Waiter),
   	not(placeOn(Waiter,Food,Table))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',410).

 /*  (   beWaiter6(Waiter),
       holding(Waiter, Food),
       waiter(Restaurant, Waiter),
       not(placeOn(Waiter, Food, Table))
   ->  not(table(Restaurant, Table))
   ).
 */
if beWaiter6(Waiter), holding(Waiter, Food), waiter(Restaurant, Waiter), not placeOn(Waiter, Food, Table)then not table(Restaurant, Table).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',410).

 /*  reactive_rule([ beWaiter6(Waiter),
   		holds(holding(Waiter,Food),Holds9),
   		waiter(Restaurant,Waiter),
   		not(placeOn(Waiter,Food,Table))
   	      ],
   	      [not(table(Restaurant,Table))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',410).

 /*  reactive_rule([ beWaiter6(Waiter),
   		holds(holding(Waiter,Food),Holds9),
   		waiter(Restaurant,Waiter),
   		not(placeOn(Waiter,Food,Table))
   	      ],
   	      [not(table(Restaurant,Table))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',410).

 /*  not(holds_at(beWaiter6(Waiter), Time)) :-
       holds_at(holding(Waiter, Food), Time),
       ( table(Restaurant, Table)
       ),
       waiter(Restaurant, Waiter),
       not(happens(placeOn(Waiter, Food, Table), Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',410).

 /*  pl=axiom(not(beWaiter6(Waiter)),
         [ holding(Waiter,Food),
   	table(Restaurant,Table),
   	waiter(Restaurant,Waiter),
   	not(placeOn(Waiter,Food,Table))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',410).

 /*  (   holding(Waiter, Food),
       ( table(Restaurant, Table)
       ),
       waiter(Restaurant, Waiter),
       not(placeOn(Waiter, Food, Table))
   ->  not(beWaiter6(Waiter))
   ).
 */
if holding(Waiter, Food), table(Restaurant, Table), waiter(Restaurant, Waiter), not placeOn(Waiter, Food, Table)then not beWaiter6(Waiter).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',410).

 /*  reactive_rule([ holds(holding(Waiter,Food),Holds10),
   		table(Restaurant,Table),
   		waiter(Restaurant,Waiter),
   		not(placeOn(Waiter,Food,Table))
   	      ],
   	      [not(beWaiter6(Waiter))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',410).

 /*  reactive_rule([ holds(holding(Waiter,Food),Holds10),
   		table(Restaurant,Table),
   		waiter(Restaurant,Waiter),
   		not(placeOn(Waiter,Food,Table))
   	      ],
   	      [not(beWaiter6(Waiter))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',410).

 /*  not(holds_at(holding(Waiter, Food), Time)) :-
       holds_at(beWaiter6(Waiter), Time),
       ( table(Restaurant, Table)
       ),
       waiter(Restaurant, Waiter),
       not(happens(placeOn(Waiter, Food, Table), Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',410).

 /*  pl=axiom(not(holding(Waiter,Food)),
         [ beWaiter6(Waiter),
   	table(Restaurant,Table),
   	waiter(Restaurant,Waiter),
   	not(placeOn(Waiter,Food,Table))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',410).

 /*  (   beWaiter6(Waiter),
       ( table(Restaurant, Table)
       ),
       waiter(Restaurant, Waiter),
       not(placeOn(Waiter, Food, Table))
   ->  not(holding(Waiter, Food))
   ).
 */
if beWaiter6(Waiter), table(Restaurant, Table), waiter(Restaurant, Waiter), not placeOn(Waiter, Food, Table)then not holding(Waiter, Food).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',410).

 /*  reactive_rule([ beWaiter6(Waiter),
   		table(Restaurant,Table),
   		waiter(Restaurant,Waiter),
   		not(placeOn(Waiter,Food,Table))
   	      ],
   	      [ holds(not(holding(Waiter,Food)),
   		      Holds11)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',410).

 /*  reactive_rule([ beWaiter6(Waiter),
   		table(Restaurant,Table),
   		waiter(Restaurant,Waiter),
   		not(placeOn(Waiter,Food,Table))
   	      ],
   	      [ holds(not(holding(Waiter,Food)),
   		      Holds11)
   	      ]).
 */


% [waiter,food,table,time]
% HoldsAt(BeWaiter6(waiter),time) ->
% Terminates(PlaceOn(waiter,food,table),
%            BeWaiter6(waiter),
%            time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',417).

 /*  pl=axiom(terminates(placeOn(Waiter,Food,Table),
   		 beWaiter6(Waiter),
   		 Time),
         [beWaiter6(Waiter)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',417).

 /*  beWaiter6(Waiter) ->
       terminates(placeOn(Waiter, Food, Table),
                  beWaiter6(Waiter),
                  Time).
 */
if beWaiter6(Waiter)then terminates(placeOn(Waiter, Food, Table), beWaiter6(Waiter)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',417).

 /*  reactive_rule([beWaiter6(Waiter)],
   	      [ terminates(placeOn(Waiter,Food,Table),
   			   at(beWaiter6(Waiter),Time),
   			   Terminates)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',417).

 /*  reactive_rule([beWaiter6(Waiter)],
   	      [ terminates(placeOn(Waiter,Food,Table),
   			   at(beWaiter6(Waiter),Time),
   			   Terminates)
   	      ]).
 */


% [waiter,food,table,time]
% HoldsAt(BeWaiter6(waiter),time) ->
% Initiates(PlaceOn(waiter,food,table),
%           BeWaiter7(waiter),
%           time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',423).

 /*  pl=axiom(initiates(placeOn(Waiter,Food,Table),
   		beWaiter7(Waiter),
   		Time),
         [beWaiter6(Waiter)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',423).

 /*  beWaiter6(Waiter) ->
       initiates(placeOn(Waiter, Food, Table),
                 beWaiter7(Waiter),
                 Time).
 */
if beWaiter6(Waiter)then initiates(placeOn(Waiter, Food, Table), beWaiter7(Waiter)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',423).

 /*  reactive_rule([beWaiter6(Waiter)],
   	      [ initiates(placeOn(Waiter,Food,Table),
   			  at(beWaiter7(Waiter),Time),
   			  Initiates)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',423).

 /*  reactive_rule([beWaiter6(Waiter)],
   	      [ initiates(placeOn(Waiter,Food,Table),
   			  at(beWaiter7(Waiter),Time),
   			  Initiates)
   	      ]).
 */


% [waiter,agent,bill,time]
% HoldsAt(BeWaiter7(waiter),time) ->
% Terminates(Request(agent,waiter,bill),
%            BeWaiter7(waiter),
%            time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',429).

 /*  pl=axiom(terminates(request(Agent,Waiter,Bill),
   		 beWaiter7(Waiter),
   		 Time),
         [beWaiter7(Waiter)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',429).

 /*  beWaiter7(Waiter) ->
       terminates(request(Agent, Waiter, Bill),
                  beWaiter7(Waiter),
                  Time).
 */
if beWaiter7(Waiter)then terminates(request(Agent, Waiter, Bill), beWaiter7(Waiter)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',429).

 /*  reactive_rule([beWaiter7(Waiter)],
   	      [ terminates(request(Agent,Waiter,Bill),
   			   at(beWaiter7(Waiter),Time),
   			   Terminates)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',429).

 /*  reactive_rule([beWaiter7(Waiter)],
   	      [ terminates(request(Agent,Waiter,Bill),
   			   at(beWaiter7(Waiter),Time),
   			   Terminates)
   	      ]).
 */


% [waiter,agent,bill,time]
% HoldsAt(BeWaiter7(waiter),time) ->
% Initiates(Request(agent,waiter,bill),
%           BeWaiter8(waiter),
%           time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',435).

 /*  pl=axiom(initiates(request(Agent,Waiter,Bill),
   		beWaiter8(Waiter),
   		Time),
         [beWaiter7(Waiter)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',435).

 /*  beWaiter7(Waiter) ->
       initiates(request(Agent, Waiter, Bill),
                 beWaiter8(Waiter),
                 Time).
 */
if beWaiter7(Waiter)then initiates(request(Agent, Waiter, Bill), beWaiter8(Waiter)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',435).

 /*  reactive_rule([beWaiter7(Waiter)],
   	      [ initiates(request(Agent,Waiter,Bill),
   			  at(beWaiter8(Waiter),Time),
   			  Initiates)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',435).

 /*  reactive_rule([beWaiter7(Waiter)],
   	      [ initiates(request(Agent,Waiter,Bill),
   			  at(beWaiter8(Waiter),Time),
   			  Initiates)
   	      ]).
 */


% [restaurant,waiter,bill,time]
% WaiterOf(restaurant)=waiter &
% BillOf(restaurant)=bill &
% HoldsAt(BeWaiter8(waiter),time) ->
% Happens(PickUp(waiter,bill),time).
 %  clausify_pnf=(waiter(Restaurant, Waiter), bill(Restaurant, Bill), holds_at(beWaiter8(Waiter), Time)->happens(pickUp(Waiter, Bill), Time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',441).

 /*  happens(pickUp(Waiter, Bill), Time) :-
       waiter(Restaurant, Waiter),
       bill(Restaurant, Bill),
       holds_at(beWaiter8(Waiter), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',441).

 /*  fix_axiom_head(Time) ->
       [ happens(pickUp(Waiter, Bill), Time),
          (->),
         pickUp(Waiter, Bill)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',441).

 /*  pl=axiom(pickUp(Waiter,Bill),
         [ waiter(Restaurant,Waiter),
   	bill(Restaurant,Bill),
   	beWaiter8(Waiter)
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',441).

 /*  (   waiter(Restaurant, Waiter),
       bill(Restaurant, Bill),
       beWaiter8(Waiter)
   ->  pickUp(Waiter, Bill)
   ).
 */
if waiter(Restaurant, Waiter), bill(Restaurant, Bill), beWaiter8(Waiter)then pickUp(Waiter, Bill).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',441).

 /*  reactive_rule([ waiter(Restaurant,Waiter),
   		bill(Restaurant,Bill),
   		beWaiter8(Waiter)
   	      ],
   	      [ happens(pickUp(Waiter,Bill),
   			Time_From,
   			Time_Until)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',441).

 /*  reactive_rule([ waiter(Restaurant,Waiter),
   		bill(Restaurant,Bill),
   		beWaiter8(Waiter)
   	      ],
   	      [ happens(pickUp(Waiter,Bill),
   			Time_From,
   			Time_Until)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',441).

 /*  not(waiter(Restaurant, Waiter)) :-
       bill(Restaurant, Bill),
       holds_at(beWaiter8(Waiter), Time),
       not(happens(pickUp(Waiter, Bill), Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',441).

 /*  fix_axiom_head(Time) ->
       [holds_at(beWaiter8(Waiter), Time), ->, beWaiter8(Waiter)].
 */

 /*  fix_axiom_head(Time) ->
       [ not(happens(pickUp(Waiter, Bill), Time)),
          (->),
         not(pickUp(Waiter, Bill))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',441).

 /*  pl=axiom(not(waiter(Restaurant,Waiter)),
         [ bill(Restaurant,Bill),
   	beWaiter8(Waiter),
   	not(pickUp(Waiter,Bill))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',441).

 /*  (   bill(Restaurant, Bill),
       beWaiter8(Waiter),
       not(pickUp(Waiter, Bill))
   ->  not(waiter(Restaurant, Waiter))
   ).
 */
if bill(Restaurant, Bill), beWaiter8(Waiter), not pickUp(Waiter, Bill)then not waiter(Restaurant, Waiter).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',441).

 /*  reactive_rule([ bill(Restaurant,Bill),
   		beWaiter8(Waiter),
   		not(pickUp(Waiter,Bill))
   	      ],
   	      [not(waiter(Restaurant,Waiter))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',441).

 /*  reactive_rule([ bill(Restaurant,Bill),
   		beWaiter8(Waiter),
   		not(pickUp(Waiter,Bill))
   	      ],
   	      [not(waiter(Restaurant,Waiter))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',441).

 /*  not(bill(Restaurant, Bill)) :-
       holds_at(beWaiter8(Waiter), Time),
       waiter(Restaurant, Waiter),
       not(happens(pickUp(Waiter, Bill), Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',441).

 /*  fix_axiom_head(Time) ->
       [holds_at(beWaiter8(Waiter), Time), ->, beWaiter8(Waiter)].
 */

 /*  fix_axiom_head(Time) ->
       [ not(happens(pickUp(Waiter, Bill), Time)),
          (->),
         not(pickUp(Waiter, Bill))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',441).

 /*  pl=axiom(not(bill(Restaurant,Bill)),
         [ beWaiter8(Waiter),
   	waiter(Restaurant,Waiter),
   	not(pickUp(Waiter,Bill))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',441).

 /*  (   beWaiter8(Waiter),
       waiter(Restaurant, Waiter),
       not(pickUp(Waiter, Bill))
   ->  not(bill(Restaurant, Bill))
   ).
 */
if beWaiter8(Waiter), waiter(Restaurant, Waiter), not pickUp(Waiter, Bill)then not bill(Restaurant, Bill).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',441).

 /*  reactive_rule([ beWaiter8(Waiter),
   		waiter(Restaurant,Waiter),
   		not(pickUp(Waiter,Bill))
   	      ],
   	      [not(bill(Restaurant,Bill))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',441).

 /*  reactive_rule([ beWaiter8(Waiter),
   		waiter(Restaurant,Waiter),
   		not(pickUp(Waiter,Bill))
   	      ],
   	      [not(bill(Restaurant,Bill))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',441).

 /*  not(holds_at(beWaiter8(Waiter), Time)) :-
       bill(Restaurant, Bill),
       waiter(Restaurant, Waiter),
       not(happens(pickUp(Waiter, Bill), Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',441).

 /*  pl=axiom(not(beWaiter8(Waiter)),
         [ bill(Restaurant,Bill),
   	waiter(Restaurant,Waiter),
   	not(pickUp(Waiter,Bill))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',441).

 /*  (   bill(Restaurant, Bill),
       waiter(Restaurant, Waiter),
       not(pickUp(Waiter, Bill))
   ->  not(beWaiter8(Waiter))
   ).
 */
if bill(Restaurant, Bill), waiter(Restaurant, Waiter), not pickUp(Waiter, Bill)then not beWaiter8(Waiter).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',441).

 /*  reactive_rule([ bill(Restaurant,Bill),
   		waiter(Restaurant,Waiter),
   		not(pickUp(Waiter,Bill))
   	      ],
   	      [not(beWaiter8(Waiter))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',441).

 /*  reactive_rule([ bill(Restaurant,Bill),
   		waiter(Restaurant,Waiter),
   		not(pickUp(Waiter,Bill))
   	      ],
   	      [not(beWaiter8(Waiter))]).
 */


% [waiter,bill,time]
% HoldsAt(BeWaiter8(waiter),time) ->
% Terminates(PickUp(waiter,bill),
%            BeWaiter8(waiter),
%            time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',447).

 /*  pl=axiom(terminates(pickUp(Waiter,Bill),
   		 beWaiter8(Waiter),
   		 Time),
         [beWaiter8(Waiter)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',447).

 /*  beWaiter8(Waiter) ->
       terminates(pickUp(Waiter, Bill),
                  beWaiter8(Waiter),
                  Time).
 */
if beWaiter8(Waiter)then terminates(pickUp(Waiter, Bill), beWaiter8(Waiter)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',447).

 /*  reactive_rule([beWaiter8(Waiter)],
   	      [ terminates(pickUp(Waiter,Bill),
   			   at(beWaiter8(Waiter),Time),
   			   Terminates)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',447).

 /*  reactive_rule([beWaiter8(Waiter)],
   	      [ terminates(pickUp(Waiter,Bill),
   			   at(beWaiter8(Waiter),Time),
   			   Terminates)
   	      ]).
 */


% [waiter,bill,time]
% HoldsAt(BeWaiter8(waiter),time) ->
% Initiates(PickUp(waiter,bill),
%           BeWaiter9(waiter),
%           time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',453).

 /*  pl=axiom(initiates(pickUp(Waiter,Bill),
   		beWaiter9(Waiter),
   		Time),
         [beWaiter8(Waiter)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',453).

 /*  beWaiter8(Waiter) ->
       initiates(pickUp(Waiter, Bill),
                 beWaiter9(Waiter),
                 Time).
 */
if beWaiter8(Waiter)then initiates(pickUp(Waiter, Bill), beWaiter9(Waiter)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',453).

 /*  reactive_rule([beWaiter8(Waiter)],
   	      [ initiates(pickUp(Waiter,Bill),
   			  at(beWaiter9(Waiter),Time),
   			  Initiates)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',453).

 /*  reactive_rule([beWaiter8(Waiter)],
   	      [ initiates(pickUp(Waiter,Bill),
   			  at(beWaiter9(Waiter),Time),
   			  Initiates)
   	      ]).
 */


% [restaurant,waiter,bill,table,time]
% WaiterOf(restaurant)=waiter &
% BillOf(restaurant)=bill &
% TableOf(restaurant)=table &
% HoldsAt(BeWaiter9(waiter),time) ->
% Happens(PlaceOn(waiter,bill,table),time).
 %  clausify_pnf=(waiter(Restaurant, Waiter), bill(Restaurant, Bill), table(Restaurant, Table), holds_at(beWaiter9(Waiter), Time)->happens(placeOn(Waiter, Bill, Table), Time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',459).

 /*  happens(placeOn(Waiter, Bill, Table), Time) :-
       waiter(Restaurant, Waiter),
       bill(Restaurant, Bill),
       ( table(Restaurant, Table)
       ),
       holds_at(beWaiter9(Waiter), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',459).

 /*  fix_axiom_head(Time) ->
       [ happens(placeOn(Waiter, Bill, Table), Time),
          (->),
         placeOn(Waiter, Bill, Table)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',459).

 /*  pl=axiom(placeOn(Waiter,Bill,Table),
         [ waiter(Restaurant,Waiter),
   	bill(Restaurant,Bill),
   	table(Restaurant,Table),
   	beWaiter9(Waiter)
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',459).

 /*  (   waiter(Restaurant, Waiter),
       bill(Restaurant, Bill),
       ( table(Restaurant, Table)
       ),
       beWaiter9(Waiter)
   ->  placeOn(Waiter, Bill, Table)
   ).
 */
if waiter(Restaurant, Waiter), bill(Restaurant, Bill), table(Restaurant, Table), beWaiter9(Waiter)then placeOn(Waiter, Bill, Table).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',459).

 /*  reactive_rule([ waiter(Restaurant,Waiter),
   		bill(Restaurant,Bill),
   		table(Restaurant,Table),
   		beWaiter9(Waiter)
   	      ],
   	      [ happens(placeOn(Waiter,Bill,Table),
   			Time_From,
   			Time_Until)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',459).

 /*  reactive_rule([ waiter(Restaurant,Waiter),
   		bill(Restaurant,Bill),
   		table(Restaurant,Table),
   		beWaiter9(Waiter)
   	      ],
   	      [ happens(placeOn(Waiter,Bill,Table),
   			Time_From,
   			Time_Until)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',459).

 /*  not(waiter(Restaurant, Waiter)) :-
       bill(Restaurant, Bill),
       ( table(Restaurant, Table)
       ),
       holds_at(beWaiter9(Waiter), Time),
       not(happens(placeOn(Waiter, Bill, Table), Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',459).

 /*  fix_axiom_head(Time) ->
       [holds_at(beWaiter9(Waiter), Time), ->, beWaiter9(Waiter)].
 */

 /*  fix_axiom_head(Time) ->
       [ not(happens(placeOn(Waiter, Bill, Table), Time)),
          (->),
         not(placeOn(Waiter, Bill, Table))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',459).

 /*  pl=axiom(not(waiter(Restaurant,Waiter)),
         [ bill(Restaurant,Bill),
   	table(Restaurant,Table),
   	beWaiter9(Waiter),
   	not(placeOn(Waiter,Bill,Table))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',459).

 /*  (   bill(Restaurant, Bill),
       ( table(Restaurant, Table)
       ),
       beWaiter9(Waiter),
       not(placeOn(Waiter, Bill, Table))
   ->  not(waiter(Restaurant, Waiter))
   ).
 */
if bill(Restaurant, Bill), table(Restaurant, Table), beWaiter9(Waiter), not placeOn(Waiter, Bill, Table)then not waiter(Restaurant, Waiter).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',459).

 /*  reactive_rule([ bill(Restaurant,Bill),
   		table(Restaurant,Table),
   		beWaiter9(Waiter),
   		not(placeOn(Waiter,Bill,Table))
   	      ],
   	      [not(waiter(Restaurant,Waiter))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',459).

 /*  reactive_rule([ bill(Restaurant,Bill),
   		table(Restaurant,Table),
   		beWaiter9(Waiter),
   		not(placeOn(Waiter,Bill,Table))
   	      ],
   	      [not(waiter(Restaurant,Waiter))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',459).

 /*  not(bill(Restaurant, Bill)) :-
       ( table(Restaurant, Table)
       ),
       holds_at(beWaiter9(Waiter), Time),
       waiter(Restaurant, Waiter),
       not(happens(placeOn(Waiter, Bill, Table), Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',459).

 /*  fix_axiom_head(Time) ->
       [holds_at(beWaiter9(Waiter), Time), ->, beWaiter9(Waiter)].
 */

 /*  fix_axiom_head(Time) ->
       [ not(happens(placeOn(Waiter, Bill, Table), Time)),
          (->),
         not(placeOn(Waiter, Bill, Table))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',459).

 /*  pl=axiom(not(bill(Restaurant,Bill)),
         [ table(Restaurant,Table),
   	beWaiter9(Waiter),
   	waiter(Restaurant,Waiter),
   	not(placeOn(Waiter,Bill,Table))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',459).

 /*  (   ( table(Restaurant, Table)
       ),
       beWaiter9(Waiter),
       waiter(Restaurant, Waiter),
       not(placeOn(Waiter, Bill, Table))
   ->  not(bill(Restaurant, Bill))
   ).
 */
if table(Restaurant, Table), beWaiter9(Waiter), waiter(Restaurant, Waiter), not placeOn(Waiter, Bill, Table)then not bill(Restaurant, Bill).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',459).

 /*  reactive_rule([ table(Restaurant,Table),
   		beWaiter9(Waiter),
   		waiter(Restaurant,Waiter),
   		not(placeOn(Waiter,Bill,Table))
   	      ],
   	      [not(bill(Restaurant,Bill))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',459).

 /*  reactive_rule([ table(Restaurant,Table),
   		beWaiter9(Waiter),
   		waiter(Restaurant,Waiter),
   		not(placeOn(Waiter,Bill,Table))
   	      ],
   	      [not(bill(Restaurant,Bill))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',459).

 /*  not(table(Restaurant, Table)) :-
       holds_at(beWaiter9(Waiter), Time),
       bill(Restaurant, Bill),
       waiter(Restaurant, Waiter),
       not(happens(placeOn(Waiter, Bill, Table), Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',459).

 /*  fix_axiom_head(Time) ->
       [holds_at(beWaiter9(Waiter), Time), ->, beWaiter9(Waiter)].
 */

 /*  fix_axiom_head(Time) ->
       [ not(happens(placeOn(Waiter, Bill, Table), Time)),
          (->),
         not(placeOn(Waiter, Bill, Table))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',459).

 /*  pl=axiom(not(table(Restaurant,Table)),
         [ beWaiter9(Waiter),
   	bill(Restaurant,Bill),
   	waiter(Restaurant,Waiter),
   	not(placeOn(Waiter,Bill,Table))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',459).

 /*  (   beWaiter9(Waiter),
       bill(Restaurant, Bill),
       waiter(Restaurant, Waiter),
       not(placeOn(Waiter, Bill, Table))
   ->  not(table(Restaurant, Table))
   ).
 */
if beWaiter9(Waiter), bill(Restaurant, Bill), waiter(Restaurant, Waiter), not placeOn(Waiter, Bill, Table)then not table(Restaurant, Table).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',459).

 /*  reactive_rule([ beWaiter9(Waiter),
   		bill(Restaurant,Bill),
   		waiter(Restaurant,Waiter),
   		not(placeOn(Waiter,Bill,Table))
   	      ],
   	      [not(table(Restaurant,Table))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',459).

 /*  reactive_rule([ beWaiter9(Waiter),
   		bill(Restaurant,Bill),
   		waiter(Restaurant,Waiter),
   		not(placeOn(Waiter,Bill,Table))
   	      ],
   	      [not(table(Restaurant,Table))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',459).

 /*  not(holds_at(beWaiter9(Waiter), Time)) :-
       ( table(Restaurant, Table)
       ),
       bill(Restaurant, Bill),
       waiter(Restaurant, Waiter),
       not(happens(placeOn(Waiter, Bill, Table), Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',459).

 /*  pl=axiom(not(beWaiter9(Waiter)),
         [ table(Restaurant,Table),
   	bill(Restaurant,Bill),
   	waiter(Restaurant,Waiter),
   	not(placeOn(Waiter,Bill,Table))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',459).

 /*  (   ( table(Restaurant, Table)
       ),
       bill(Restaurant, Bill),
       waiter(Restaurant, Waiter),
       not(placeOn(Waiter, Bill, Table))
   ->  not(beWaiter9(Waiter))
   ).
 */
if table(Restaurant, Table), bill(Restaurant, Bill), waiter(Restaurant, Waiter), not placeOn(Waiter, Bill, Table)then not beWaiter9(Waiter).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',459).

 /*  reactive_rule([ table(Restaurant,Table),
   		bill(Restaurant,Bill),
   		waiter(Restaurant,Waiter),
   		not(placeOn(Waiter,Bill,Table))
   	      ],
   	      [not(beWaiter9(Waiter))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',459).

 /*  reactive_rule([ table(Restaurant,Table),
   		bill(Restaurant,Bill),
   		waiter(Restaurant,Waiter),
   		not(placeOn(Waiter,Bill,Table))
   	      ],
   	      [not(beWaiter9(Waiter))]).
 */


% [waiter,bill,table,time]
% HoldsAt(BeWaiter9(waiter),time) ->
% Terminates(PlaceOn(waiter,bill,table),
%            BeWaiter9(waiter),
%            time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',466).

 /*  pl=axiom(terminates(placeOn(Waiter,Bill,Table),
   		 beWaiter9(Waiter),
   		 Time),
         [beWaiter9(Waiter)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',466).

 /*  beWaiter9(Waiter) ->
       terminates(placeOn(Waiter, Bill, Table),
                  beWaiter9(Waiter),
                  Time).
 */
if beWaiter9(Waiter)then terminates(placeOn(Waiter, Bill, Table), beWaiter9(Waiter)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',466).

 /*  reactive_rule([beWaiter9(Waiter)],
   	      [ terminates(placeOn(Waiter,Bill,Table),
   			   at(beWaiter9(Waiter),Time),
   			   Terminates)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',466).

 /*  reactive_rule([beWaiter9(Waiter)],
   	      [ terminates(placeOn(Waiter,Bill,Table),
   			   at(beWaiter9(Waiter),Time),
   			   Terminates)
   	      ]).
 */


% [waiter,bill,table,time]
% HoldsAt(BeWaiter9(waiter),time) ->
% Initiates(PlaceOn(waiter,bill,table),
%           BeWaiter0(waiter),
%           time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',472).

 /*  pl=axiom(initiates(placeOn(Waiter,Bill,Table),
   		beWaiter0(Waiter),
   		Time),
         [beWaiter9(Waiter)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',472).

 /*  beWaiter9(Waiter) ->
       initiates(placeOn(Waiter, Bill, Table),
                 beWaiter0(Waiter),
                 Time).
 */
if beWaiter9(Waiter)then initiates(placeOn(Waiter, Bill, Table), beWaiter0(Waiter)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',472).

 /*  reactive_rule([beWaiter9(Waiter)],
   	      [ initiates(placeOn(Waiter,Bill,Table),
   			  at(beWaiter0(Waiter),Time),
   			  Initiates)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',472).

 /*  reactive_rule([beWaiter9(Waiter)],
   	      [ initiates(placeOn(Waiter,Bill,Table),
   			  at(beWaiter0(Waiter),Time),
   			  Initiates)
   	      ]).
 */

% fluent BeCook0(cook)
 %  blue=fluent(beCook0(cook)).
 %  fluent(beCook0(cook)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',476).
fluents([beCook0/1]).
 %  fluents([beCook0/1]).
mpred_prop(beCook0(cook),fluent).
 %  mpred_prop(beCook0(cook),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',479).
% fluent BeCook1(cook)
 %  blue=fluent(beCook1(cook)).
 %  fluent(beCook1(cook)).
fluents([beCook1/1]).
 %  fluents([beCook1/1]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',479).
mpred_prop(beCook1(cook),fluent).
 %  mpred_prop(beCook1(cook),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',481).
% xor BeCook0, BeCook1
 %  red = ==>xor[beCook0,beCook1].
==>xor[beCook0,beCook1].
 %  ==>xor[beCook0,beCook1].


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',483).
% [cook,agent,food,time]
% HoldsAt(BeCook0(cook),time) ->
% Terminates(Order(agent,cook,food),
%            BeCook0(cook),
%            time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',483).

 /*  pl=axiom(terminates(order(Agent,Cook,Food),
   		 beCook0(Cook),
   		 Time),
         [beCook0(Cook)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',483).

 /*  beCook0(Cook) ->
       terminates(order(Agent, Cook, Food),
                  beCook0(Cook),
                  Time).
 */
if beCook0(Cook)then terminates(order(Agent, Cook, Food), beCook0(Cook)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',483).

 /*  reactive_rule([beCook0(Cook)],
   	      [ terminates(order(Agent,Cook,Food),
   			   at(beCook0(Cook),Time),
   			   Terminates)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',483).

 /*  reactive_rule([beCook0(Cook)],
   	      [ terminates(order(Agent,Cook,Food),
   			   at(beCook0(Cook),Time),
   			   Terminates)
   	      ]).
 */


% [cook,agent,food,time]
% HoldsAt(BeCook0(cook),time) ->
% Initiates(Order(agent,cook,food),
%           BeCook1(cook),
%           time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',490).

 /*  pl=axiom(initiates(order(Agent,Cook,Food),
   		beCook1(Cook),
   		Time),
         [beCook0(Cook)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',490).

 /*  beCook0(Cook) ->
       initiates(order(Agent, Cook, Food),
                 beCook1(Cook),
                 Time).
 */
if beCook0(Cook)then initiates(order(Agent, Cook, Food), beCook1(Cook)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',490).

 /*  reactive_rule([beCook0(Cook)],
   	      [ initiates(order(Agent,Cook,Food),
   			  at(beCook1(Cook),Time),
   			  Initiates)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',490).

 /*  reactive_rule([beCook0(Cook)],
   	      [ initiates(order(Agent,Cook,Food),
   			  at(beCook1(Cook),Time),
   			  Initiates)
   	      ]).
 */

% event FoodPrepare(agent,food)
 %  blue=event(foodPrepare(agent,food)).
 %  event(foodPrepare(agent,food)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',494).
actions([foodPrepare/2]).
 %  actions([foodPrepare/2]).
mpred_prop(foodPrepare(agent,food),event).
 %  mpred_prop(foodPrepare(agent,food),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',497).
% fluent FoodPrepared(food)
 %  blue=fluent(foodPrepared(food)).
 %  fluent(foodPrepared(food)).
fluents([foodPrepared/1]).
 %  fluents([foodPrepared/1]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',497).
mpred_prop(foodPrepared(food),fluent).
 %  mpred_prop(foodPrepared(food),fluent).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',499).
% [agent,food,time]
% Initiates(FoodPrepare(agent,food),
%           FoodPrepared(food),
%           time).

 /*  pl=axiom(initiates(foodPrepare(Agent,Food),
   		foodPrepared(Food),
   		Time),
         []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',499).

 /*  initiates(foodPrepare(Agent,Food),
   	  foodPrepared(Food),
   	  Time).
 */
foodPrepare(Agent, Food)initiates foodPrepared(Food).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',499).

 /*  initiated(happens(foodPrepare(Agent,Food),
   		  Time_From,
   		  Time_Until),
   	  foodPrepared(Food),
   	  []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',499).

 /*  initiated(happens(foodPrepare(Agent,Food),
   		  Time_From,
   		  Time_Until),
   	  foodPrepared(Food),
   	  []).
 */


% [agent,food,time]
% Happens(FoodPrepare(agent,food),time) ->
% {location}% 
% HoldsAt(At(agent,location),time) &
% HoldsAt(At(food,location),time).
 %  clausify_pnf=exists([Location],  (happens(foodPrepare(Agent, Food), Time)->holds_at(at(Agent, Location), Time), holds_at(at(Food, Location), Time))).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',505).

 /*  not(happens(foodPrepare(Agent, Food), Time)) :-
       (   not(holds_at(at(Agent, Exists_Location), Time))
       ;   not(holds_at(at(Food, Exists_Location), Time))
       ),
       some(Exists_Location,
            '$kolem_Fn_47'(Agent, Food, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',505).

 /*  fix_axiom_head(Time) ->
       [ not(happens(foodPrepare(Agent, Food), Time)),
          (->),
         not(foodPrepare(Agent, Food))
       ].
 */
 %   pl=axiom(not(foodPrepare(Agent, Food)), [(not(at(Agent, Exists_Location));not(at(Food, Exists_Location))), some(Exists_Location, '$kolem_Fn_47'(Agent, Food, Time))]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',505).

 /*  (   (   not(at(Agent, Exists_Location))
       ;   not(at(Food, Exists_Location))
       ),
       some(Exists_Location,
            '$kolem_Fn_47'(Agent, Food, Time))
   ->  not(foodPrepare(Agent, Food))
   ).
 */
if (not loc_at(Agent, Exists_Location);not loc_at(Food, Exists_Location)), some(Exists_Location, '$kolem_Fn_47'(Agent, Food, Time))then not foodPrepare(Agent, Food).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',505).

 /*   reactive_rule([  (not(loc_at(Agent, Exists_Location));not(loc_at(Food, Exists_Location))),
                      some(Exists_Location,
                           '$kolem_Fn_47'(Agent, Food, Time))
                    ],
                    [not(foodPrepare(Agent, Food))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',505).

 /*   reactive_rule([  (not(loc_at(Agent, Exists_Location));not(loc_at(Food, Exists_Location))),
                      some(Exists_Location,
                           '$kolem_Fn_47'(Agent, Food, Time))
                    ],
                    [not(foodPrepare(Agent, Food))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',505).

 /*  holds_at(at(Agent, Exists_Location), Time) :-
       happens(foodPrepare(Agent, Food), Time),
       some(Exists_Location,
            '$kolem_Fn_47'(Agent, Food, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',505).

 /*  fix_axiom_head(Time) ->
       [ holds_at(at(Agent, Exists_Location), Time),
          (->),
         at(Agent, Exists_Location)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',505).

 /*  pl=axiom(at(Agent,Exists_Location),
         [ foodPrepare(Agent,Food),
   	some(Exists_Location,
   	     '$kolem_Fn_47'(Agent,Food,Time))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',505).

 /*  (   foodPrepare(Agent, Food),
       some(Exists_Location,
            '$kolem_Fn_47'(Agent, Food, Time))
   ->  at(Agent, Exists_Location)
   ).
 */
if foodPrepare(Agent, Food), some(Exists_Location, '$kolem_Fn_47'(Agent, Food, Time))then loc_at(Agent, Exists_Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',505).

 /*  reactive_rule([ happens(foodPrepare(Agent,Food),
   			Time_From,
   			Time_Until),
   		some(Exists_Location,
   		     '$kolem_Fn_47'(Agent,Food,Time))
   	      ],
   	      [loc_at(Agent,Exists_Location)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',505).

 /*  reactive_rule([ happens(foodPrepare(Agent,Food),
   			Time_From,
   			Time_Until),
   		some(Exists_Location,
   		     '$kolem_Fn_47'(Agent,Food,Time))
   	      ],
   	      [loc_at(Agent,Exists_Location)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',505).

 /*  holds_at(at(Food, Exists_Location), Time) :-
       happens(foodPrepare(Agent, Food), Time),
       some(Exists_Location,
            '$kolem_Fn_47'(Agent, Food, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',505).

 /*  fix_axiom_head(Time) ->
       [ holds_at(at(Food, Exists_Location), Time),
          (->),
         at(Food, Exists_Location)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',505).

 /*  pl=axiom(at(Food,Exists_Location),
         [ foodPrepare(Agent,Food),
   	some(Exists_Location,
   	     '$kolem_Fn_47'(Agent,Food,Time))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',505).

 /*  (   foodPrepare(Agent, Food),
       some(Exists_Location,
            '$kolem_Fn_47'(Agent, Food, Time))
   ->  at(Food, Exists_Location)
   ).
 */
if foodPrepare(Agent, Food), some(Exists_Location, '$kolem_Fn_47'(Agent, Food, Time))then loc_at(Food, Exists_Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',505).

 /*  reactive_rule([ happens(foodPrepare(Agent,Food),
   			Time_From7,
   			Time_Until8),
   		some(Exists_Location,
   		     '$kolem_Fn_47'(Agent,Food,Time))
   	      ],
   	      [loc_at(Food,Exists_Location)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',505).

 /*  reactive_rule([ happens(foodPrepare(Agent,Food),
   			Time_From7,
   			Time_Until8),
   		some(Exists_Location,
   		     '$kolem_Fn_47'(Agent,Food,Time))
   	      ],
   	      [loc_at(Food,Exists_Location)]).
 */


% [cook,agent,food,time]
% HoldsAt(BeCook1(cook),time) &
% HoldsAt(KnowOrder(cook,agent,food),time) ->
% Happens(FoodPrepare(cook,food),time).
 %  clausify_pnf=(holds_at(beCook1(Cook), Time), holds_at(knowOrder(Cook, Agent, Food), Time)->happens(foodPrepare(Cook, Food), Time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',511).

 /*  happens(foodPrepare(Cook, Food), Time) :-
       holds_at(beCook1(Cook), Time),
       holds_at(knowOrder(Cook, Agent, Food), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',511).

 /*  fix_axiom_head(Time) ->
       [ happens(foodPrepare(Cook, Food), Time),
          (->),
         foodPrepare(Cook, Food)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',511).

 /*  pl=axiom(foodPrepare(Cook,Food),
         [ beCook1(Cook),
   	knowOrder(Cook,Agent,Food)
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',511).

 /*  (   beCook1(Cook),
       knowOrder(Cook, Agent, Food)
   ->  foodPrepare(Cook, Food)
   ).
 */
if beCook1(Cook), knowOrder(Cook, Agent, Food)then foodPrepare(Cook, Food).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',511).

 /*  reactive_rule([ beCook1(Cook),
   		knowOrder(Cook,Agent,Food)
   	      ],
   	      [ happens(foodPrepare(Cook,Food),
   			Time_From,
   			Time_Until)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',511).

 /*  reactive_rule([ beCook1(Cook),
   		knowOrder(Cook,Agent,Food)
   	      ],
   	      [ happens(foodPrepare(Cook,Food),
   			Time_From,
   			Time_Until)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',511).

 /*  not(holds_at(beCook1(Cook), Time)) :-
       holds_at(knowOrder(Cook, Agent, Food), Time),
       not(happens(foodPrepare(Cook, Food), Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',511).

 /*  pl=axiom(not(beCook1(Cook)),
         [ knowOrder(Cook,Agent,Food),
   	not(foodPrepare(Cook,Food))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',511).

 /*  (   knowOrder(Cook, Agent, Food),
       not(foodPrepare(Cook, Food))
   ->  not(beCook1(Cook))
   ).
 */
if knowOrder(Cook, Agent, Food), not foodPrepare(Cook, Food)then not beCook1(Cook).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',511).

 /*  reactive_rule([ knowOrder(Cook,Agent,Food),
   		not(foodPrepare(Cook,Food))
   	      ],
   	      [not(beCook1(Cook))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',511).

 /*  reactive_rule([ knowOrder(Cook,Agent,Food),
   		not(foodPrepare(Cook,Food))
   	      ],
   	      [not(beCook1(Cook))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',511).

 /*  not(holds_at(knowOrder(Cook, Agent, Food), Time)) :-
       holds_at(beCook1(Cook), Time),
       not(happens(foodPrepare(Cook, Food), Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',511).

 /*  pl=axiom(not(knowOrder(Cook,Agent,Food)),
         [beCook1(Cook),not(foodPrepare(Cook,Food))]).
 */

 /*  (   beCook1(Cook),
       not(foodPrepare(Cook, Food))
   ->  not(knowOrder(Cook, Agent, Food))
   ).
 */
if beCook1(Cook), not foodPrepare(Cook, Food)then not knowOrder(Cook, Agent, Food).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',511).

 /*  reactive_rule([ beCook1(Cook),
   		not(foodPrepare(Cook,Food))
   	      ],
   	      [not(knowOrder(Cook,Agent,Food))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',511).

 /*  reactive_rule([ beCook1(Cook),
   		not(foodPrepare(Cook,Food))
   	      ],
   	      [not(knowOrder(Cook,Agent,Food))]).
 */


% [cook,food,time]
% HoldsAt(BeCook1(cook),time) ->
% Terminates(FoodPrepare(cook,food),
%            BeCook1(cook),
%            time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',516).

 /*  pl=axiom(terminates(foodPrepare(Cook,Food),
   		 beCook1(Cook),
   		 Time),
         [beCook1(Cook)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',516).

 /*  beCook1(Cook) ->
       terminates(foodPrepare(Cook, Food),
                  beCook1(Cook),
                  Time).
 */
if beCook1(Cook)then terminates(foodPrepare(Cook, Food), beCook1(Cook)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',516).

 /*  reactive_rule([beCook1(Cook)],
   	      [ terminates(foodPrepare(Cook,Food),
   			   at(beCook1(Cook),Time),
   			   Terminates)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',516).

 /*  reactive_rule([beCook1(Cook)],
   	      [ terminates(foodPrepare(Cook,Food),
   			   at(beCook1(Cook),Time),
   			   Terminates)
   	      ]).
 */


% [cook,food,time]
% HoldsAt(BeCook1(cook),time) ->
% Initiates(FoodPrepare(cook,food),
%           BeCook0(cook),
%           time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',522).

 /*  pl=axiom(initiates(foodPrepare(Cook,Food),
   		beCook0(Cook),
   		Time),
         [beCook1(Cook)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',522).

 /*  beCook1(Cook) ->
       initiates(foodPrepare(Cook, Food),
                 beCook0(Cook),
                 Time).
 */
if beCook1(Cook)then initiates(foodPrepare(Cook, Food), beCook0(Cook)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',522).

 /*  reactive_rule([beCook1(Cook)],
   	      [ initiates(foodPrepare(Cook,Food),
   			  at(beCook0(Cook),Time),
   			  Initiates)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',522).

 /*  reactive_rule([beCook1(Cook)],
   	      [ initiates(foodPrepare(Cook,Food),
   			  at(beCook0(Cook),Time),
   			  Initiates)
   	      ]).
 */

% event Pay(agent,agent)
 %  blue=event(pay(agent,agent)).
 %  event(pay(agent,agent)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',526).
actions([pay/2]).
 %  actions([pay/2]).
mpred_prop(pay(agent,agent),event).
 %  mpred_prop(pay(agent,agent),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',529).
% event Tip(agent,agent)
 %  blue=event(tip(agent,agent)).
 %  event(tip(agent,agent)).
actions([tip/2]).
 %  actions([tip/2]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',529).
mpred_prop(tip(agent,agent),event).
 %  mpred_prop(tip(agent,agent),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',531).
% [agent,physobj,time]
% Happens(LieOn(agent,physobj),time) ->
% {room}% 
%  HoldsAt(At(agent,room),time) &
%  HoldsAt(At(physobj,room),time).
 %  clausify_pnf=exists([Room],  (happens(lieOn(Agent, Physobj), Time)->holds_at(at(Agent, Room), Time), holds_at(at(Physobj, Room), Time))).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',533).

 /*  not(happens(lieOn(Agent, Physobj), Time)) :-
       (   not(holds_at(at(Agent, Exists_Room), Time))
       ;   not(holds_at(at(Physobj, Exists_Room), Time))
       ),
       some(Exists_Room, '$kolem_Fn_48'(Agent, Physobj, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',533).

 /*  fix_axiom_head(Time) ->
       [ not(happens(lieOn(Agent, Physobj), Time)),
          (->),
         not(lieOn(Agent, Physobj))
       ].
 */
 %   pl=axiom(not(lieOn(Agent, Physobj)), [(not(at(Agent, Exists_Room));not(at(Physobj, Exists_Room))), some(Exists_Room, '$kolem_Fn_48'(Agent, Physobj, Time))]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',533).

 /*  (   (   not(at(Agent, Exists_Room))
       ;   not(at(Physobj, Exists_Room))
       ),
       some(Exists_Room, '$kolem_Fn_48'(Agent, Physobj, Time))
   ->  not(lieOn(Agent, Physobj))
   ).
 */
if (not loc_at(Agent, Exists_Room);not loc_at(Physobj, Exists_Room)), some(Exists_Room, '$kolem_Fn_48'(Agent, Physobj, Time))then not lieOn(Agent, Physobj).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',533).

 /*   reactive_rule([  (not(loc_at(Agent, Exists_Room));not(loc_at(Physobj, Exists_Room))),
                      some(Exists_Room,
                           '$kolem_Fn_48'(Agent, Physobj, Time))
                    ],
                    [not(lieOn(Agent, Physobj))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',533).

 /*   reactive_rule([  (not(loc_at(Agent, Exists_Room));not(loc_at(Physobj, Exists_Room))),
                      some(Exists_Room,
                           '$kolem_Fn_48'(Agent, Physobj, Time))
                    ],
                    [not(lieOn(Agent, Physobj))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',533).

 /*  holds_at(at(Agent, Exists_Room), Time) :-
       happens(lieOn(Agent, Physobj), Time),
       some(Exists_Room, '$kolem_Fn_48'(Agent, Physobj, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',533).

 /*  fix_axiom_head(Time) ->
       [ holds_at(at(Agent, Exists_Room), Time),
          (->),
         at(Agent, Exists_Room)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',533).

 /*  pl=axiom(at(Agent,Exists_Room),
         [ lieOn(Agent,Physobj),
   	some(Exists_Room,
   	     '$kolem_Fn_48'(Agent,Physobj,Time))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',533).

 /*  (   lieOn(Agent, Physobj),
       some(Exists_Room, '$kolem_Fn_48'(Agent, Physobj, Time))
   ->  at(Agent, Exists_Room)
   ).
 */
if lieOn(Agent, Physobj), some(Exists_Room, '$kolem_Fn_48'(Agent, Physobj, Time))then loc_at(Agent, Exists_Room).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',533).

 /*  reactive_rule([ lieOn(Agent,Physobj),
   		some(Exists_Room,
   		     '$kolem_Fn_48'(Agent,Physobj,Time))
   	      ],
   	      [loc_at(Agent,Exists_Room)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',533).

 /*  reactive_rule([ lieOn(Agent,Physobj),
   		some(Exists_Room,
   		     '$kolem_Fn_48'(Agent,Physobj,Time))
   	      ],
   	      [loc_at(Agent,Exists_Room)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',533).

 /*  holds_at(at(Physobj, Exists_Room), Time) :-
       happens(lieOn(Agent, Physobj), Time),
       some(Exists_Room, '$kolem_Fn_48'(Agent, Physobj, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',533).

 /*  fix_axiom_head(Time) ->
       [ holds_at(at(Physobj, Exists_Room), Time),
          (->),
         at(Physobj, Exists_Room)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',533).

 /*  pl=axiom(at(Physobj,Exists_Room),
         [ lieOn(Agent,Physobj),
   	some(Exists_Room,
   	     '$kolem_Fn_48'(Agent,Physobj,Time))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',533).

 /*  (   lieOn(Agent, Physobj),
       some(Exists_Room, '$kolem_Fn_48'(Agent, Physobj, Time))
   ->  at(Physobj, Exists_Room)
   ).
 */
if lieOn(Agent, Physobj), some(Exists_Room, '$kolem_Fn_48'(Agent, Physobj, Time))then loc_at(Physobj, Exists_Room).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',533).

 /*  reactive_rule([ lieOn(Agent,Physobj),
   		some(Exists_Room,
   		     '$kolem_Fn_48'(Agent,Physobj,Time))
   	      ],
   	      [loc_at(Physobj,Exists_Room)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',533).

 /*  reactive_rule([ lieOn(Agent,Physobj),
   		some(Exists_Room,
   		     '$kolem_Fn_48'(Agent,Physobj,Time))
   	      ],
   	      [loc_at(Physobj,Exists_Room)]).
 */


% [agent,physobj,time]
% Happens(SitOn(agent,physobj),time) ->
% {room}% 
%  HoldsAt(At(agent,room),time) &
%  HoldsAt(At(physobj,room),time).
 %  clausify_pnf=exists([Room],  (happens(sitOn(Agent, Physobj), Time)->holds_at(at(Agent, Room), Time), holds_at(at(Physobj, Room), Time))).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',538).

 /*  not(happens(sitOn(Agent, Physobj), Time)) :-
       (   not(holds_at(at(Agent, Exists_Room), Time))
       ;   not(holds_at(at(Physobj, Exists_Room), Time))
       ),
       some(Exists_Room, '$kolem_Fn_49'(Agent, Physobj, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',538).

 /*  fix_axiom_head(Time) ->
       [ not(happens(sitOn(Agent, Physobj), Time)),
          (->),
         not(sitOn(Agent, Physobj))
       ].
 */
 %   pl=axiom(not(sitOn(Agent, Physobj)), [(not(at(Agent, Exists_Room));not(at(Physobj, Exists_Room))), some(Exists_Room, '$kolem_Fn_49'(Agent, Physobj, Time))]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',538).

 /*  (   (   not(at(Agent, Exists_Room))
       ;   not(at(Physobj, Exists_Room))
       ),
       some(Exists_Room, '$kolem_Fn_49'(Agent, Physobj, Time))
   ->  not(sitOn(Agent, Physobj))
   ).
 */
if (not loc_at(Agent, Exists_Room);not loc_at(Physobj, Exists_Room)), some(Exists_Room, '$kolem_Fn_49'(Agent, Physobj, Time))then not sitOn(Agent, Physobj).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',538).

 /*   reactive_rule([  (not(loc_at(Agent, Exists_Room));not(loc_at(Physobj, Exists_Room))),
                      some(Exists_Room,
                           '$kolem_Fn_49'(Agent, Physobj, Time))
                    ],
                    [not(sitOn(Agent, Physobj))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',538).

 /*   reactive_rule([  (not(loc_at(Agent, Exists_Room));not(loc_at(Physobj, Exists_Room))),
                      some(Exists_Room,
                           '$kolem_Fn_49'(Agent, Physobj, Time))
                    ],
                    [not(sitOn(Agent, Physobj))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',538).

 /*  holds_at(at(Agent, Exists_Room), Time) :-
       happens(sitOn(Agent, Physobj), Time),
       some(Exists_Room, '$kolem_Fn_49'(Agent, Physobj, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',538).

 /*  fix_axiom_head(Time) ->
       [ holds_at(at(Agent, Exists_Room), Time),
          (->),
         at(Agent, Exists_Room)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',538).

 /*  pl=axiom(at(Agent,Exists_Room),
         [ sitOn(Agent,Physobj),
   	some(Exists_Room,
   	     '$kolem_Fn_49'(Agent,Physobj,Time))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',538).

 /*  (   sitOn(Agent, Physobj),
       some(Exists_Room, '$kolem_Fn_49'(Agent, Physobj, Time))
   ->  at(Agent, Exists_Room)
   ).
 */
if sitOn(Agent, Physobj), some(Exists_Room, '$kolem_Fn_49'(Agent, Physobj, Time))then loc_at(Agent, Exists_Room).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',538).

 /*  reactive_rule([ sitOn(Agent,Physobj),
   		some(Exists_Room,
   		     '$kolem_Fn_49'(Agent,Physobj,Time))
   	      ],
   	      [loc_at(Agent,Exists_Room)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',538).

 /*  reactive_rule([ sitOn(Agent,Physobj),
   		some(Exists_Room,
   		     '$kolem_Fn_49'(Agent,Physobj,Time))
   	      ],
   	      [loc_at(Agent,Exists_Room)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',538).

 /*  holds_at(at(Physobj, Exists_Room), Time) :-
       happens(sitOn(Agent, Physobj), Time),
       some(Exists_Room, '$kolem_Fn_49'(Agent, Physobj, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',538).

 /*  fix_axiom_head(Time) ->
       [ holds_at(at(Physobj, Exists_Room), Time),
          (->),
         at(Physobj, Exists_Room)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',538).

 /*  pl=axiom(at(Physobj,Exists_Room),
         [ sitOn(Agent,Physobj),
   	some(Exists_Room,
   	     '$kolem_Fn_49'(Agent,Physobj,Time))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',538).

 /*  (   sitOn(Agent, Physobj),
       some(Exists_Room, '$kolem_Fn_49'(Agent, Physobj, Time))
   ->  at(Physobj, Exists_Room)
   ).
 */
if sitOn(Agent, Physobj), some(Exists_Room, '$kolem_Fn_49'(Agent, Physobj, Time))then loc_at(Physobj, Exists_Room).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',538).

 /*  reactive_rule([ sitOn(Agent,Physobj),
   		some(Exists_Room,
   		     '$kolem_Fn_49'(Agent,Physobj,Time))
   	      ],
   	      [loc_at(Physobj,Exists_Room)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',538).

 /*  reactive_rule([ sitOn(Agent,Physobj),
   		some(Exists_Room,
   		     '$kolem_Fn_49'(Agent,Physobj,Time))
   	      ],
   	      [loc_at(Physobj,Exists_Room)]).
 */

% event LieOn(agent,physobj)
 %  blue=event(lieOn(agent,physobj)).
 %  event(lieOn(agent,physobj)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',542).
actions([lieOn/2]).
 %  actions([lieOn/2]).
mpred_prop(lieOn(agent,physobj),event).
 %  mpred_prop(lieOn(agent,physobj),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',545).
% event SitOn(agent,physobj)
 %  blue=event(sitOn(agent,physobj)).
 %  event(sitOn(agent,physobj)).
actions([sitOn/2]).
 %  actions([sitOn/2]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',545).
mpred_prop(sitOn(agent,physobj),event).
 %  mpred_prop(sitOn(agent,physobj),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',547).
% event RiseFrom(agent,physobj)
 %  blue=event(riseFrom(agent,physobj)).
 %  event(riseFrom(agent,physobj)).
actions([riseFrom/2]).
 %  actions([riseFrom/2]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',547).
mpred_prop(riseFrom(agent,physobj),event).
 %  mpred_prop(riseFrom(agent,physobj),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',549).
% fluent LyingOn(agent,physobj)
 %  blue=fluent(lyingOn(agent,physobj)).
 %  fluent(lyingOn(agent,physobj)).
fluents([lyingOn/2]).
 %  fluents([lyingOn/2]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',549).
mpred_prop(lyingOn(agent,physobj),fluent).
 %  mpred_prop(lyingOn(agent,physobj),fluent).

% fluent SittingOn(agent,physobj)
 %  blue=fluent(sittingOn(agent,physobj)).
 %  fluent(sittingOn(agent,physobj)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',549).
fluents([sittingOn/2]).
 %  fluents([sittingOn/2]).
mpred_prop(sittingOn(agent,physobj),fluent).
 %  mpred_prop(sittingOn(agent,physobj),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',551).
% fluent Standing(agent)
 %  blue=fluent(standing(agent)).
 %  fluent(standing(agent)).
fluents([standing/1]).
 %  fluents([standing/1]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',551).
mpred_prop(standing(agent),fluent).
 %  mpred_prop(standing(agent),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',553).
% fluent Lying(agent)
 %  blue=fluent(lying(agent)).
 %  fluent(lying(agent)).
fluents([lying/1]).
 %  fluents([lying/1]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',553).
mpred_prop(lying(agent),fluent).
 %  mpred_prop(lying(agent),fluent).

% fluent Sitting(agent)
 %  blue=fluent(sitting(agent)).
 %  fluent(sitting(agent)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',553).
fluents([sitting/1]).
 %  fluents([sitting/1]).
mpred_prop(sitting(agent),fluent).
 %  mpred_prop(sitting(agent),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',555).
% noninertial Lying
noninertial(lying).
 %  noninertial(lying).

% noninertial Sitting
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',555).
noninertial(sitting).
 %  noninertial(sitting).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',558).
% xor Lying, Sitting, Standing
 %  red = ==>xor[lying,sitting,standing].
==>xor[lying,sitting,standing].
 %  ==>xor[lying,sitting,standing].


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',560).
% [agent,physobj,time]
% HoldsAt(LyingOn(agent,physobj),time) ->
% HoldsAt(Lying(agent),time).
 %  clausify_pnf=(holds_at(lyingOn(Agent, Physobj), Time)->holds_at(lying(Agent), Time)).

 /*  holds_at(lying(Agent), Time) :-
       holds_at(lyingOn(Agent, Physobj), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',560).

 /*  fix_axiom_head(Time) ->
       [holds_at(lying(Agent), Time), ->, lying(Agent)].
 */
 %  pl=axiom(lying(Agent),[lyingOn(Agent,Physobj)]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',560).

 /*  lyingOn(Agent, Physobj) ->
       lying(Agent).
 */
if lyingOn(Agent, Physobj)then lying(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',560).

 /*  reactive_rule([lyingOn(Agent,Physobj)],
   	      [lying(Agent)]).
 */

 /*  reactive_rule([lyingOn(Agent,Physobj)],
   	      [lying(Agent)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',560).

 /*  not(holds_at(lyingOn(Agent, Physobj), Time)) :-
       not(holds_at(lying(Agent), Time)).
 */

 /*  pl=axiom(not(lyingOn(Agent,Physobj)),
         [not(lying(Agent))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',560).

 /*  not(lying(Agent)) ->
       not(lyingOn(Agent, Physobj)).
 */
if not lying(Agent)then not lyingOn(Agent, Physobj).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',560).

 /*  reactive_rule([not(lying(Agent))],
   	      [not(lyingOn(Agent,Physobj))]).
 */

 /*  reactive_rule([not(lying(Agent))],
   	      [not(lyingOn(Agent,Physobj))]).
 */


% [agent,physobj,time]
% HoldsAt(SittingOn(agent,physobj),time) ->
% HoldsAt(Sitting(agent),time).
 %  clausify_pnf=(holds_at(sittingOn(Agent, Physobj), Time)->holds_at(sitting(Agent), Time)).

 /*  holds_at(sitting(Agent), Time) :-
       holds_at(sittingOn(Agent, Physobj), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',565).

 /*  fix_axiom_head(Time) ->
       [holds_at(sitting(Agent), Time), ->, sitting(Agent)].
 */
 %  pl=axiom(sitting(Agent),[sittingOn(Agent,Physobj)]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',565).

 /*  sittingOn(Agent, Physobj) ->
       sitting(Agent).
 */
if sittingOn(Agent, Physobj)then sitting(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',565).

 /*  reactive_rule([sittingOn(Agent,Physobj)],
   	      [sitting(Agent)]).
 */

 /*  reactive_rule([sittingOn(Agent,Physobj)],
   	      [sitting(Agent)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',565).

 /*  not(holds_at(sittingOn(Agent, Physobj), Time)) :-
       not(holds_at(sitting(Agent), Time)).
 */

 /*  pl=axiom(not(sittingOn(Agent,Physobj)),
         [not(sitting(Agent))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',565).

 /*  not(sitting(Agent)) ->
       not(sittingOn(Agent, Physobj)).
 */
if not sitting(Agent)then not sittingOn(Agent, Physobj).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',565).

 /*  reactive_rule([not(sitting(Agent))],
   	      [not(sittingOn(Agent,Physobj))]).
 */

 /*  reactive_rule([not(sitting(Agent))],
   	      [not(sittingOn(Agent,Physobj))]).
 */


% [agent,physobj1,physobj2,time]
% HoldsAt(LyingOn(agent,physobj1),time) &
% HoldsAt(LyingOn(agent,physobj2),time) ->
% physobj1=physobj2.
 %  clausify_pnf=(holds_at(lyingOn(Agent, Physobj1), Time), holds_at(lyingOn(Agent, Physobj2), Time)->equals(Physobj1, Physobj2)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',569).

 /*  not(holds_at(lyingOn(Agent, Physobj1), Time)) :-
       holds_at(lyingOn(Agent, Physobj2), Time),
       not(equals(Physobj1, Physobj2)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',569).

 /*  pl=axiom(not(lyingOn(Agent,Physobj1)),
         [ lyingOn(Agent,Physobj2),
   	not(equals(Physobj1,Physobj2))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',569).

 /*  (   lyingOn(Agent, Physobj2),
       not(equals(Physobj1, Physobj2))
   ->  not(lyingOn(Agent, Physobj1))
   ).
 */
if lyingOn(Agent, Physobj2), not equals(Physobj1, Physobj2)then not lyingOn(Agent, Physobj1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',569).

 /*  reactive_rule([ lyingOn(Agent,Physobj2),
   		not(equals(Physobj1,Physobj2))
   	      ],
   	      [not(lyingOn(Agent,Physobj1))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',569).

 /*  reactive_rule([ lyingOn(Agent,Physobj2),
   		not(equals(Physobj1,Physobj2))
   	      ],
   	      [not(lyingOn(Agent,Physobj1))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',569).

 /*  not(holds_at(lyingOn(Agent, Physobj2), Time)) :-
       holds_at(lyingOn(Agent, Physobj1), Time),
       not(equals(Physobj1, Physobj2)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',569).

 /*  pl=axiom(not(lyingOn(Agent,Physobj2)),
         [ lyingOn(Agent,Physobj1),
   	not(equals(Physobj2,Physobj1))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',569).

 /*  (   lyingOn(Agent, Physobj1),
       not(equals(Physobj2, Physobj1))
   ->  not(lyingOn(Agent, Physobj2))
   ).
 */
if lyingOn(Agent, Physobj1), not equals(Physobj2, Physobj1)then not lyingOn(Agent, Physobj2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',569).

 /*  reactive_rule([ lyingOn(Agent,Physobj1),
   		not(equals(Physobj2,Physobj1))
   	      ],
   	      [not(lyingOn(Agent,Physobj2))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',569).

 /*  reactive_rule([ lyingOn(Agent,Physobj1),
   		not(equals(Physobj2,Physobj1))
   	      ],
   	      [not(lyingOn(Agent,Physobj2))]).
 */


% [agent,physobj1,physobj2,time]
% HoldsAt(SittingOn(agent,physobj1),time) &
% HoldsAt(SittingOn(agent,physobj2),time) ->
% physobj1=physobj2.
 %  clausify_pnf=(holds_at(sittingOn(Agent, Physobj1), Time), holds_at(sittingOn(Agent, Physobj2), Time)->equals(Physobj1, Physobj2)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',574).

 /*  not(holds_at(sittingOn(Agent, Physobj1), Time)) :-
       holds_at(sittingOn(Agent, Physobj2), Time),
       not(equals(Physobj1, Physobj2)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',574).

 /*  pl=axiom(not(sittingOn(Agent,Physobj1)),
         [ sittingOn(Agent,Physobj2),
   	not(equals(Physobj1,Physobj2))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',574).

 /*  (   sittingOn(Agent, Physobj2),
       not(equals(Physobj1, Physobj2))
   ->  not(sittingOn(Agent, Physobj1))
   ).
 */
if sittingOn(Agent, Physobj2), not equals(Physobj1, Physobj2)then not sittingOn(Agent, Physobj1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',574).

 /*  reactive_rule([ sittingOn(Agent,Physobj2),
   		not(equals(Physobj1,Physobj2))
   	      ],
   	      [not(sittingOn(Agent,Physobj1))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',574).

 /*  reactive_rule([ sittingOn(Agent,Physobj2),
   		not(equals(Physobj1,Physobj2))
   	      ],
   	      [not(sittingOn(Agent,Physobj1))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',574).

 /*  not(holds_at(sittingOn(Agent, Physobj2), Time)) :-
       holds_at(sittingOn(Agent, Physobj1), Time),
       not(equals(Physobj1, Physobj2)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',574).

 /*  pl=axiom(not(sittingOn(Agent,Physobj2)),
         [ sittingOn(Agent,Physobj1),
   	not(equals(Physobj2,Physobj1))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',574).

 /*  (   sittingOn(Agent, Physobj1),
       not(equals(Physobj2, Physobj1))
   ->  not(sittingOn(Agent, Physobj2))
   ).
 */
if sittingOn(Agent, Physobj1), not equals(Physobj2, Physobj1)then not sittingOn(Agent, Physobj2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',574).

 /*  reactive_rule([ sittingOn(Agent,Physobj1),
   		not(equals(Physobj2,Physobj1))
   	      ],
   	      [not(sittingOn(Agent,Physobj2))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',574).

 /*  reactive_rule([ sittingOn(Agent,Physobj1),
   		not(equals(Physobj2,Physobj1))
   	      ],
   	      [not(sittingOn(Agent,Physobj2))]).
 */


% [agent,physobj,time]
% HoldsAt(Standing(agent),time) ->
% Initiates(LieOn(agent,physobj),
%           LyingOn(agent,physobj),
%           time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',579).

 /*  pl=axiom(initiates(lieOn(Agent,Physobj),
   		lyingOn(Agent,Physobj),
   		Time),
         [standing(Agent)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',579).

 /*  standing(Agent) ->
       initiates(lieOn(Agent, Physobj),
                 lyingOn(Agent, Physobj),
                 Time).
 */
if standing(Agent)then initiates(lieOn(Agent, Physobj), lyingOn(Agent, Physobj)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',579).

 /*  reactive_rule([standing(Agent)],
   	      [ initiates(lieOn(Agent,Physobj),
   			  at(lyingOn(Agent,Physobj),
   			     Time),
   			  Initiates)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',579).

 /*  reactive_rule([standing(Agent)],
   	      [ initiates(lieOn(Agent,Physobj),
   			  at(lyingOn(Agent,Physobj),
   			     Time),
   			  Initiates)
   	      ]).
 */


% [agent,physobj,time]
% Terminates(LieOn(agent,physobj),
%            Standing(agent),
%            time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',585).

 /*  pl=axiom(terminates(lieOn(Agent,Physobj),
   		 standing(Agent),
   		 Time),
         []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',585).

 /*  terminates(lieOn(Agent,Physobj),
   	   standing(Agent),
   	   Time).
 */
lieOn(Agent, Physobj)terminates standing(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',585).

 /*  terminated(happens(lieOn(Agent,Physobj),
   		   Time_From,
   		   Time_Until),
   	   standing(Agent),
   	   []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',585).

 /*  terminated(happens(lieOn(Agent,Physobj),
   		   Time_From,
   		   Time_Until),
   	   standing(Agent),
   	   []).
 */


% [agent,physobj,time]
% HoldsAt(Standing(agent),time) ->
% Initiates(SitOn(agent,physobj),
%           SittingOn(agent,physobj),
%           time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',590).

 /*  pl=axiom(initiates(sitOn(Agent,Physobj),
   		sittingOn(Agent,Physobj),
   		Time),
         [standing(Agent)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',590).

 /*  standing(Agent) ->
       initiates(sitOn(Agent, Physobj),
                 sittingOn(Agent, Physobj),
                 Time).
 */
if standing(Agent)then initiates(sitOn(Agent, Physobj), sittingOn(Agent, Physobj)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',590).

 /*  reactive_rule([holds(standing(Agent),Holds)],
   	      [ initiates(sitOn(Agent,Physobj),
   			  at(sittingOn(Agent,Physobj),
   			     Time),
   			  Initiates)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',590).

 /*  reactive_rule([holds(standing(Agent),Holds)],
   	      [ initiates(sitOn(Agent,Physobj),
   			  at(sittingOn(Agent,Physobj),
   			     Time),
   			  Initiates)
   	      ]).
 */


% [agent,physobj,time]
% Terminates(SitOn(agent,physobj),
%            Standing(agent),
%            time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',596).

 /*  pl=axiom(terminates(sitOn(Agent,Physobj),
   		 standing(Agent),
   		 Time),
         []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',596).

 /*  terminates(sitOn(Agent,Physobj),
   	   standing(Agent),
   	   Time).
 */
sitOn(Agent, Physobj)terminates standing(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',596).

 /*  terminated(happens(sitOn(Agent,Physobj),
   		   Time_From,
   		   Time_Until),
   	   standing(Agent),
   	   []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',596).

 /*  terminated(happens(sitOn(Agent,Physobj),
   		   Time_From,
   		   Time_Until),
   	   standing(Agent),
   	   []).
 */


% [agent,physobj,time]
% (HoldsAt(SittingOn(agent,physobj),time) |
%  HoldsAt(LyingOn(agent,physobj),time)) ->
% Initiates(RiseFrom(agent,physobj),
%           Standing(agent),
%           time).
 %   pl=axiom(initiates(riseFrom(Agent, Physobj), standing(Agent), Time), [(sittingOn(Agent, Physobj);lyingOn(Agent, Physobj))]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',601).

 /*  sittingOn(Agent, Physobj);lyingOn(Agent, Physobj) ->
       initiates(riseFrom(Agent, Physobj),
                 standing(Agent),
                 Time).
 */
if sittingOn(Agent, Physobj);lyingOn(Agent, Physobj)then initiates(riseFrom(Agent, Physobj), standing(Agent)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',601).

 /*   reactive_rule([  (sittingOn(Agent, Physobj);lyingOn(Agent, Physobj))
                    ],
                    [ initiates(riseFrom(Agent, Physobj),
                                at(standing(Agent), Time),
                                Initiates)
                    ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',601).

 /*   reactive_rule([  (sittingOn(Agent, Physobj);lyingOn(Agent, Physobj))
                    ],
                    [ initiates(riseFrom(Agent, Physobj),
                                at(standing(Agent), Time),
                                Initiates)
                    ]).
 */


% [agent,physobj,time]
% HoldsAt(LyingOn(agent,physobj),time) ->
% Terminates(RiseFrom(agent,physobj),
%            LyingOn(agent,physobj),
%            time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',608).

 /*  pl=axiom(terminates(riseFrom(Agent,Physobj),
   		 lyingOn(Agent,Physobj),
   		 Time),
         [lyingOn(Agent,Physobj)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',608).

 /*  lyingOn(Agent, Physobj) ->
       terminates(riseFrom(Agent, Physobj),
                  lyingOn(Agent, Physobj),
                  Time).
 */
if lyingOn(Agent, Physobj)then terminates(riseFrom(Agent, Physobj), lyingOn(Agent, Physobj)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',608).

 /*  reactive_rule([lyingOn(Agent,Physobj)],
   	      [ terminates(riseFrom(Agent,Physobj),
   			   at(lyingOn(Agent,Physobj),
   			      Time),
   			   Terminates)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',608).

 /*  reactive_rule([lyingOn(Agent,Physobj)],
   	      [ terminates(riseFrom(Agent,Physobj),
   			   at(lyingOn(Agent,Physobj),
   			      Time),
   			   Terminates)
   	      ]).
 */


% [agent,physobj,time]
% HoldsAt(SittingOn(agent,physobj),time) ->
% Terminates(RiseFrom(agent,physobj),
%            SittingOn(agent,physobj),
%            time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',614).

 /*  pl=axiom(terminates(riseFrom(Agent,Physobj),
   		 sittingOn(Agent,Physobj),
   		 Time),
         [sittingOn(Agent,Physobj)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',614).

 /*  sittingOn(Agent, Physobj) ->
       terminates(riseFrom(Agent, Physobj),
                  sittingOn(Agent, Physobj),
                  Time).
 */
if sittingOn(Agent, Physobj)then terminates(riseFrom(Agent, Physobj), sittingOn(Agent, Physobj)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',614).

 /*  reactive_rule([sittingOn(Agent,Physobj)],
   	      [ terminates(riseFrom(Agent,Physobj),
   			   at(sittingOn(Agent,Physobj),
   			      Time),
   			   Terminates)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',614).

 /*  reactive_rule([sittingOn(Agent,Physobj)],
   	      [ terminates(riseFrom(Agent,Physobj),
   			   at(sittingOn(Agent,Physobj),
   			      Time),
   			   Terminates)
   	      ]).
 */

% event Greet(agent,agent)
 %  blue=event(greet(agent,agent)).
 %  event(greet(agent,agent)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',618).
actions([greet/2]).
 %  actions([greet/2]).
mpred_prop(greet(agent,agent),event).
 %  mpred_prop(greet(agent,agent),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',621).
% event SayGoodbye(agent,agent)
 %  blue=event(sayGoodbye(agent,agent)).
 %  event(sayGoodbye(agent,agent)).
actions([sayGoodbye/2]).
 %  actions([sayGoodbye/2]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',621).
mpred_prop(sayGoodbye(agent,agent),event).
 %  mpred_prop(sayGoodbye(agent,agent),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',623).
% [agent1,agent2,time]
% Happens(Greet(agent1,agent2),time) ->
% {location}% 
% HoldsAt(At(agent1,location),time) &
% HoldsAt(At(agent2,location),time).
 %  clausify_pnf=exists([Location],  (happens(greet(Agent1, Agent2), Time)->holds_at(at(Agent1, Location), Time), holds_at(at(Agent2, Location), Time))).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',625).

 /*  not(happens(greet(Agent1, Agent2), Time)) :-
       (   not(holds_at(at(Agent1, Exists_Location), Time))
       ;   not(holds_at(at(Agent2, Exists_Location), Time))
       ),
       some(Exists_Location,
            '$kolem_Fn_50'(Agent1, Agent2, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',625).

 /*  fix_axiom_head(Time) ->
       [ not(happens(greet(Agent1, Agent2), Time)),
          (->),
         not(greet(Agent1, Agent2))
       ].
 */
 %   pl=axiom(not(greet(Agent1, Agent2)), [(not(at(Agent1, Exists_Location));not(at(Agent2, Exists_Location))), some(Exists_Location, '$kolem_Fn_50'(Agent1, Agent2, Time))]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',625).

 /*  (   (   not(at(Agent1, Exists_Location))
       ;   not(at(Agent2, Exists_Location))
       ),
       some(Exists_Location,
            '$kolem_Fn_50'(Agent1, Agent2, Time))
   ->  not(greet(Agent1, Agent2))
   ).
 */
if (not loc_at(Agent1, Exists_Location);not loc_at(Agent2, Exists_Location)), some(Exists_Location, '$kolem_Fn_50'(Agent1, Agent2, Time))then not greet(Agent1, Agent2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',625).

 /*   reactive_rule([  (not(loc_at(Agent1, Exists_Location));not(loc_at(Agent2, Exists_Location))),
                      some(Exists_Location,
                           '$kolem_Fn_50'(Agent1, Agent2, Time))
                    ],
                    [not(greet(Agent1, Agent2))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',625).

 /*   reactive_rule([  (not(loc_at(Agent1, Exists_Location));not(loc_at(Agent2, Exists_Location))),
                      some(Exists_Location,
                           '$kolem_Fn_50'(Agent1, Agent2, Time))
                    ],
                    [not(greet(Agent1, Agent2))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',625).

 /*  holds_at(at(Agent1, Exists_Location), Time) :-
       happens(greet(Agent1, Agent2), Time),
       some(Exists_Location,
            '$kolem_Fn_50'(Agent1, Agent2, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',625).

 /*  fix_axiom_head(Time) ->
       [ holds_at(at(Agent1, Exists_Location), Time),
          (->),
         at(Agent1, Exists_Location)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',625).

 /*  pl=axiom(at(Agent1,Exists_Location),
         [ greet(Agent1,Agent2),
   	some(Exists_Location,
   	     '$kolem_Fn_50'(Agent1,Agent2,Time))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',625).

 /*  (   greet(Agent1, Agent2),
       some(Exists_Location,
            '$kolem_Fn_50'(Agent1, Agent2, Time))
   ->  at(Agent1, Exists_Location)
   ).
 */
if greet(Agent1, Agent2), some(Exists_Location, '$kolem_Fn_50'(Agent1, Agent2, Time))then loc_at(Agent1, Exists_Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',625).

 /*  reactive_rule([ greet(Agent1,Agent2),
   		some(Exists_Location,
   		     '$kolem_Fn_50'(Agent1,Agent2,Time))
   	      ],
   	      [loc_at(Agent1,Exists_Location)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',625).

 /*  reactive_rule([ greet(Agent1,Agent2),
   		some(Exists_Location,
   		     '$kolem_Fn_50'(Agent1,Agent2,Time))
   	      ],
   	      [loc_at(Agent1,Exists_Location)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',625).

 /*  holds_at(at(Agent2, Exists_Location), Time) :-
       happens(greet(Agent1, Agent2), Time),
       some(Exists_Location,
            '$kolem_Fn_50'(Agent1, Agent2, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',625).

 /*  fix_axiom_head(Time) ->
       [ holds_at(at(Agent2, Exists_Location), Time),
          (->),
         at(Agent2, Exists_Location)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',625).

 /*  pl=axiom(at(Agent2,Exists_Location),
         [ greet(Agent1,Agent2),
   	some(Exists_Location,
   	     '$kolem_Fn_50'(Agent1,Agent2,Time))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',625).

 /*  (   greet(Agent1, Agent2),
       some(Exists_Location,
            '$kolem_Fn_50'(Agent1, Agent2, Time))
   ->  at(Agent2, Exists_Location)
   ).
 */
if greet(Agent1, Agent2), some(Exists_Location, '$kolem_Fn_50'(Agent1, Agent2, Time))then loc_at(Agent2, Exists_Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',625).

 /*  reactive_rule([ greet(Agent1,Agent2),
   		some(Exists_Location,
   		     '$kolem_Fn_50'(Agent1,Agent2,Time))
   	      ],
   	      [loc_at(Agent2,Exists_Location)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',625).

 /*  reactive_rule([ greet(Agent1,Agent2),
   		some(Exists_Location,
   		     '$kolem_Fn_50'(Agent1,Agent2,Time))
   	      ],
   	      [loc_at(Agent2,Exists_Location)]).
 */


% [agent1,agent2,time]
% Happens(SayGoodbye(agent1,agent2),time) ->
% {location}% 
% HoldsAt(At(agent1,location),time) &
% HoldsAt(At(agent2,location),time).
 %  clausify_pnf=exists([Location],  (happens(sayGoodbye(Agent1, Agent2), Time)->holds_at(at(Agent1, Location), Time), holds_at(at(Agent2, Location), Time))).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',630).

 /*  not(happens(sayGoodbye(Agent1, Agent2), Time)) :-
       (   not(holds_at(at(Agent1, Exists_Location), Time))
       ;   not(holds_at(at(Agent2, Exists_Location), Time))
       ),
       some(Exists_Location,
            '$kolem_Fn_51'(Agent1, Agent2, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',630).

 /*  fix_axiom_head(Time) ->
       [ not(happens(sayGoodbye(Agent1, Agent2), Time)),
          (->),
         not(sayGoodbye(Agent1, Agent2))
       ].
 */
 %   pl=axiom(not(sayGoodbye(Agent1, Agent2)), [(not(at(Agent1, Exists_Location));not(at(Agent2, Exists_Location))), some(Exists_Location, '$kolem_Fn_51'(Agent1, Agent2, Time))]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',630).

 /*  (   (   not(at(Agent1, Exists_Location))
       ;   not(at(Agent2, Exists_Location))
       ),
       some(Exists_Location,
            '$kolem_Fn_51'(Agent1, Agent2, Time))
   ->  not(sayGoodbye(Agent1, Agent2))
   ).
 */
if (not loc_at(Agent1, Exists_Location);not loc_at(Agent2, Exists_Location)), some(Exists_Location, '$kolem_Fn_51'(Agent1, Agent2, Time))then not sayGoodbye(Agent1, Agent2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',630).

 /*   reactive_rule([  (not(loc_at(Agent1, Exists_Location));not(loc_at(Agent2, Exists_Location))),
                      some(Exists_Location,
                           '$kolem_Fn_51'(Agent1, Agent2, Time))
                    ],
                    [not(sayGoodbye(Agent1, Agent2))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',630).

 /*   reactive_rule([  (not(loc_at(Agent1, Exists_Location));not(loc_at(Agent2, Exists_Location))),
                      some(Exists_Location,
                           '$kolem_Fn_51'(Agent1, Agent2, Time))
                    ],
                    [not(sayGoodbye(Agent1, Agent2))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',630).

 /*  holds_at(at(Agent1, Exists_Location), Time) :-
       happens(sayGoodbye(Agent1, Agent2), Time),
       some(Exists_Location,
            '$kolem_Fn_51'(Agent1, Agent2, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',630).

 /*  fix_axiom_head(Time) ->
       [ holds_at(at(Agent1, Exists_Location), Time),
          (->),
         at(Agent1, Exists_Location)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',630).

 /*  pl=axiom(at(Agent1,Exists_Location),
         [ sayGoodbye(Agent1,Agent2),
   	some(Exists_Location,
   	     '$kolem_Fn_51'(Agent1,Agent2,Time))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',630).

 /*  (   sayGoodbye(Agent1, Agent2),
       some(Exists_Location,
            '$kolem_Fn_51'(Agent1, Agent2, Time))
   ->  at(Agent1, Exists_Location)
   ).
 */
if sayGoodbye(Agent1, Agent2), some(Exists_Location, '$kolem_Fn_51'(Agent1, Agent2, Time))then loc_at(Agent1, Exists_Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',630).

 /*  reactive_rule([ sayGoodbye(Agent1,Agent2),
   		some(Exists_Location,
   		     '$kolem_Fn_51'(Agent1,Agent2,Time))
   	      ],
   	      [loc_at(Agent1,Exists_Location)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',630).

 /*  reactive_rule([ sayGoodbye(Agent1,Agent2),
   		some(Exists_Location,
   		     '$kolem_Fn_51'(Agent1,Agent2,Time))
   	      ],
   	      [loc_at(Agent1,Exists_Location)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',630).

 /*  holds_at(at(Agent2, Exists_Location), Time) :-
       happens(sayGoodbye(Agent1, Agent2), Time),
       some(Exists_Location,
            '$kolem_Fn_51'(Agent1, Agent2, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',630).

 /*  fix_axiom_head(Time) ->
       [ holds_at(at(Agent2, Exists_Location), Time),
          (->),
         at(Agent2, Exists_Location)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',630).

 /*  pl=axiom(at(Agent2,Exists_Location),
         [ sayGoodbye(Agent1,Agent2),
   	some(Exists_Location,
   	     '$kolem_Fn_51'(Agent1,Agent2,Time))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',630).

 /*  (   sayGoodbye(Agent1, Agent2),
       some(Exists_Location,
            '$kolem_Fn_51'(Agent1, Agent2, Time))
   ->  at(Agent2, Exists_Location)
   ).
 */
if sayGoodbye(Agent1, Agent2), some(Exists_Location, '$kolem_Fn_51'(Agent1, Agent2, Time))then loc_at(Agent2, Exists_Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',630).

 /*  reactive_rule([ sayGoodbye(Agent1,Agent2),
   		some(Exists_Location,
   		     '$kolem_Fn_51'(Agent1,Agent2,Time))
   	      ],
   	      [loc_at(Agent2,Exists_Location)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',630).

 /*  reactive_rule([ sayGoodbye(Agent1,Agent2),
   		some(Exists_Location,
   		     '$kolem_Fn_51'(Agent1,Agent2,Time))
   	      ],
   	      [loc_at(Agent2,Exists_Location)]).
 */

% event Order(agent,agent,physobj)
 %  blue=event(order(agent,agent,physobj)).
 %  event(order(agent,agent,physobj)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',634).
actions([order/3]).
 %  actions([order/3]).
mpred_prop(order(agent,agent,physobj),event).
 %  mpred_prop(order(agent,agent,physobj),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',637).
% fluent KnowOrder(agent,agent,physobj)
 %  blue=fluent(knowOrder(agent,agent,physobj)).
 %  fluent(knowOrder(agent,agent,physobj)).
fluents([knowOrder/3]).
 %  fluents([knowOrder/3]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',637).
mpred_prop(knowOrder(agent,agent,physobj),fluent).
 %  mpred_prop(knowOrder(agent,agent,physobj),fluent).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',639).
% [agent1,agent2,physobj,time]
% Initiates(Order(agent1,agent2,physobj),
%           KnowOrder(agent2,agent1,physobj),
%           time).

 /*  pl=axiom(initiates(order(Agent1,Agent2,Physobj),
   		knowOrder(Agent2,Agent1,Physobj),
   		Time),
         []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',639).

 /*  initiates(order(Agent1,Agent2,Physobj),
   	  knowOrder(Agent2,Agent1,Physobj),
   	  Time).
 */
order(Agent1, Agent2, Physobj)initiates knowOrder(Agent2, Agent1, Physobj).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',639).

 /*  initiated(happens(order(Agent1,Agent2,Physobj),
   		  Time_From,
   		  Time_Until),
   	  knowOrder(Agent2,Agent1,Physobj),
   	  []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',639).

 /*  initiated(happens(order(Agent1,Agent2,Physobj),
   		  Time_From,
   		  Time_Until),
   	  knowOrder(Agent2,Agent1,Physobj),
   	  []).
 */


% [agent1,agent2,physobj,time]
% Happens(Order(agent1,agent2,physobj),time) ->
% {location}% 
% HoldsAt(At(agent1,location),time) &
% HoldsAt(At(agent2,location),time).
 %  clausify_pnf=exists([Location],  (happens(order(Agent1, Agent2, Physobj), Time)->holds_at(at(Agent1, Location), Time), holds_at(at(Agent2, Location), Time))).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',645).

 /*  not(happens(order(Agent1, Agent2, Physobj), Time)) :-
       (   not(holds_at(at(Agent1, Exists_Location), Time))
       ;   not(holds_at(at(Agent2, Exists_Location), Time))
       ),
       some(Exists_Location,
            '$kolem_Fn_52'(Agent1, Agent2, Physobj, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',645).

 /*  fix_axiom_head(Time) ->
       [ not(happens(order(Agent1, Agent2, Physobj), Time)),
          (->),
         not(order(Agent1, Agent2, Physobj))
       ].
 */
 %   pl=axiom(not(order(Agent1, Agent2, Physobj)), [(not(at(Agent1, Exists_Location));not(at(Agent2, Exists_Location))), some(Exists_Location, '$kolem_Fn_52'(Agent1, Agent2, Physobj, Time))]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',645).

 /*  (   (   not(at(Agent1, Exists_Location))
       ;   not(at(Agent2, Exists_Location))
       ),
       some(Exists_Location,
            '$kolem_Fn_52'(Agent1, Agent2, Physobj, Time))
   ->  not(order(Agent1, Agent2, Physobj))
   ).
 */
if (not loc_at(Agent1, Exists_Location);not loc_at(Agent2, Exists_Location)), some(Exists_Location, '$kolem_Fn_52'(Agent1, Agent2, Physobj, Time))then not order(Agent1, Agent2, Physobj).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',645).

 /*   reactive_rule([  (not(loc_at(Agent1, Exists_Location));not(loc_at(Agent2, Exists_Location))),
                      some(Exists_Location,
                           '$kolem_Fn_52'(Agent1,
                                          Agent2,
                                          Physobj,
                                          Time))
                    ],
                    [not(order(Agent1, Agent2, Physobj))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',645).

 /*   reactive_rule([  (not(loc_at(Agent1, Exists_Location));not(loc_at(Agent2, Exists_Location))),
                      some(Exists_Location,
                           '$kolem_Fn_52'(Agent1,
                                          Agent2,
                                          Physobj,
                                          Time))
                    ],
                    [not(order(Agent1, Agent2, Physobj))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',645).

 /*  holds_at(at(Agent1, Exists_Location), Time) :-
       happens(order(Agent1, Agent2, Physobj), Time),
       some(Exists_Location,
            '$kolem_Fn_52'(Agent1, Agent2, Physobj, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',645).

 /*  fix_axiom_head(Time) ->
       [ holds_at(at(Agent1, Exists_Location), Time),
          (->),
         at(Agent1, Exists_Location)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',645).

 /*  pl=axiom(at(Agent1,Exists_Location),
         [ order(Agent1,Agent2,Physobj),
   	some(Exists_Location,
   	     '$kolem_Fn_52'(Agent1,
   			    Agent2,
   			    Physobj,
   			    Time))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',645).

 /*  (   order(Agent1, Agent2, Physobj),
       some(Exists_Location,
            '$kolem_Fn_52'(Agent1, Agent2, Physobj, Time))
   ->  at(Agent1, Exists_Location)
   ).
 */
if order(Agent1, Agent2, Physobj), some(Exists_Location, '$kolem_Fn_52'(Agent1, Agent2, Physobj, Time))then loc_at(Agent1, Exists_Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',645).

 /*  reactive_rule([ happens(order(Agent1,Agent2,Physobj),
   			Time_From,
   			Time_Until),
   		some(Exists_Location,
   		     '$kolem_Fn_52'(Agent1,
   				    Agent2,
   				    Physobj,
   				    Time))
   	      ],
   	      [loc_at(Agent1,Exists_Location)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',645).

 /*  reactive_rule([ happens(order(Agent1,Agent2,Physobj),
   			Time_From,
   			Time_Until),
   		some(Exists_Location,
   		     '$kolem_Fn_52'(Agent1,
   				    Agent2,
   				    Physobj,
   				    Time))
   	      ],
   	      [loc_at(Agent1,Exists_Location)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',645).

 /*  holds_at(at(Agent2, Exists_Location), Time) :-
       happens(order(Agent1, Agent2, Physobj), Time),
       some(Exists_Location,
            '$kolem_Fn_52'(Agent1, Agent2, Physobj, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',645).

 /*  fix_axiom_head(Time) ->
       [ holds_at(at(Agent2, Exists_Location), Time),
          (->),
         at(Agent2, Exists_Location)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',645).

 /*  pl=axiom(at(Agent2,Exists_Location),
         [ order(Agent1,Agent2,Physobj),
   	some(Exists_Location,
   	     '$kolem_Fn_52'(Agent1,
   			    Agent2,
   			    Physobj,
   			    Time))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',645).

 /*  (   order(Agent1, Agent2, Physobj),
       some(Exists_Location,
            '$kolem_Fn_52'(Agent1, Agent2, Physobj, Time))
   ->  at(Agent2, Exists_Location)
   ).
 */
if order(Agent1, Agent2, Physobj), some(Exists_Location, '$kolem_Fn_52'(Agent1, Agent2, Physobj, Time))then loc_at(Agent2, Exists_Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',645).

 /*  reactive_rule([ happens(order(Agent1,Agent2,Physobj),
   			Time_From8,
   			Time_Until9),
   		some(Exists_Location,
   		     '$kolem_Fn_52'(Agent1,
   				    Agent2,
   				    Physobj,
   				    Time))
   	      ],
   	      [loc_at(Agent2,Exists_Location)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',645).

 /*  reactive_rule([ happens(order(Agent1,Agent2,Physobj),
   			Time_From8,
   			Time_Until9),
   		some(Exists_Location,
   		     '$kolem_Fn_52'(Agent1,
   				    Agent2,
   				    Physobj,
   				    Time))
   	      ],
   	      [loc_at(Agent2,Exists_Location)]).
 */

% event Request(agent,agent,physobj)
 %  blue=event(request(agent,agent,physobj)).
 %  event(request(agent,agent,physobj)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',649).
actions([request/3]).
 %  actions([request/3]).
mpred_prop(request(agent,agent,physobj),event).
 %  mpred_prop(request(agent,agent,physobj),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',652).
% fluent KnowRequest(agent,agent,physobj)
 %  blue=fluent(knowRequest(agent,agent,physobj)).
 %  fluent(knowRequest(agent,agent,physobj)).
fluents([knowRequest/3]).
 %  fluents([knowRequest/3]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',652).
mpred_prop(knowRequest(agent,agent,physobj),fluent).
 %  mpred_prop(knowRequest(agent,agent,physobj),fluent).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',654).
% [agent1,agent2,physobj,time]
% Initiates(Request(agent1,agent2,physobj),
%           KnowRequest(agent2,agent1,physobj),
%           time).

 /*  pl=axiom(initiates(request(Agent1,Agent2,Physobj),
   		knowRequest(Agent2,Agent1,Physobj),
   		Time),
         []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',654).

 /*  initiates(request(Agent1,Agent2,Physobj),
   	  knowRequest(Agent2,Agent1,Physobj),
   	  Time).
 */
request(Agent1, Agent2, Physobj)initiates knowRequest(Agent2, Agent1, Physobj).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',654).

 /*  initiated(happens(request(Agent1,Agent2,Physobj),
   		  Time_From,
   		  Time_Until),
   	  knowRequest(Agent2,Agent1,Physobj),
   	  []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',654).

 /*  initiated(happens(request(Agent1,Agent2,Physobj),
   		  Time_From,
   		  Time_Until),
   	  knowRequest(Agent2,Agent1,Physobj),
   	  []).
 */


% [agent1,agent2,physobj,time]
% Happens(Request(agent1,agent2,physobj),time) ->
% {location}% 
% HoldsAt(At(agent1,location),time) &
% HoldsAt(At(agent2,location),time).
 %  clausify_pnf=exists([Location],  (happens(request(Agent1, Agent2, Physobj), Time)->holds_at(at(Agent1, Location), Time), holds_at(at(Agent2, Location), Time))).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',660).

 /*  not(happens(request(Agent1, Agent2, Physobj), Time)) :-
       (   not(holds_at(at(Agent1, Exists_Location), Time))
       ;   not(holds_at(at(Agent2, Exists_Location), Time))
       ),
       some(Exists_Location,
            '$kolem_Fn_53'(Agent1, Agent2, Physobj, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',660).

 /*  fix_axiom_head(Time) ->
       [ not(happens(request(Agent1, Agent2, Physobj), Time)),
          (->),
         not(request(Agent1, Agent2, Physobj))
       ].
 */
 %   pl=axiom(not(request(Agent1, Agent2, Physobj)), [(not(at(Agent1, Exists_Location));not(at(Agent2, Exists_Location))), some(Exists_Location, '$kolem_Fn_53'(Agent1, Agent2, Physobj, Time))]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',660).

 /*  (   (   not(at(Agent1, Exists_Location))
       ;   not(at(Agent2, Exists_Location))
       ),
       some(Exists_Location,
            '$kolem_Fn_53'(Agent1, Agent2, Physobj, Time))
   ->  not(request(Agent1, Agent2, Physobj))
   ).
 */
if (not loc_at(Agent1, Exists_Location);not loc_at(Agent2, Exists_Location)), some(Exists_Location, '$kolem_Fn_53'(Agent1, Agent2, Physobj, Time))then not request(Agent1, Agent2, Physobj).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',660).

 /*   reactive_rule([  (not(loc_at(Agent1, Exists_Location));not(loc_at(Agent2, Exists_Location))),
                      some(Exists_Location,
                           '$kolem_Fn_53'(Agent1,
                                          Agent2,
                                          Physobj,
                                          Time))
                    ],
                    [not(request(Agent1, Agent2, Physobj))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',660).

 /*   reactive_rule([  (not(loc_at(Agent1, Exists_Location));not(loc_at(Agent2, Exists_Location))),
                      some(Exists_Location,
                           '$kolem_Fn_53'(Agent1,
                                          Agent2,
                                          Physobj,
                                          Time))
                    ],
                    [not(request(Agent1, Agent2, Physobj))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',660).

 /*  holds_at(at(Agent1, Exists_Location), Time) :-
       happens(request(Agent1, Agent2, Physobj), Time),
       some(Exists_Location,
            '$kolem_Fn_53'(Agent1, Agent2, Physobj, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',660).

 /*  fix_axiom_head(Time) ->
       [ holds_at(at(Agent1, Exists_Location), Time),
          (->),
         at(Agent1, Exists_Location)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',660).

 /*  pl=axiom(at(Agent1,Exists_Location),
         [ request(Agent1,Agent2,Physobj),
   	some(Exists_Location,
   	     '$kolem_Fn_53'(Agent1,
   			    Agent2,
   			    Physobj,
   			    Time))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',660).

 /*  (   request(Agent1, Agent2, Physobj),
       some(Exists_Location,
            '$kolem_Fn_53'(Agent1, Agent2, Physobj, Time))
   ->  at(Agent1, Exists_Location)
   ).
 */
if request(Agent1, Agent2, Physobj), some(Exists_Location, '$kolem_Fn_53'(Agent1, Agent2, Physobj, Time))then loc_at(Agent1, Exists_Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',660).

 /*  reactive_rule([ happens(request(Agent1,
   				Agent2,
   				Physobj),
   			Time_From,
   			Time_Until),
   		some(Exists_Location,
   		     '$kolem_Fn_53'(Agent1,
   				    Agent2,
   				    Physobj,
   				    Time))
   	      ],
   	      [loc_at(Agent1,Exists_Location)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',660).

 /*  reactive_rule([ happens(request(Agent1,
   				Agent2,
   				Physobj),
   			Time_From,
   			Time_Until),
   		some(Exists_Location,
   		     '$kolem_Fn_53'(Agent1,
   				    Agent2,
   				    Physobj,
   				    Time))
   	      ],
   	      [loc_at(Agent1,Exists_Location)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',660).

 /*  holds_at(at(Agent2, Exists_Location), Time) :-
       happens(request(Agent1, Agent2, Physobj), Time),
       some(Exists_Location,
            '$kolem_Fn_53'(Agent1, Agent2, Physobj, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',660).

 /*  fix_axiom_head(Time) ->
       [ holds_at(at(Agent2, Exists_Location), Time),
          (->),
         at(Agent2, Exists_Location)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',660).

 /*  pl=axiom(at(Agent2,Exists_Location),
         [ request(Agent1,Agent2,Physobj),
   	some(Exists_Location,
   	     '$kolem_Fn_53'(Agent1,
   			    Agent2,
   			    Physobj,
   			    Time))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',660).

 /*  (   request(Agent1, Agent2, Physobj),
       some(Exists_Location,
            '$kolem_Fn_53'(Agent1, Agent2, Physobj, Time))
   ->  at(Agent2, Exists_Location)
   ).
 */
if request(Agent1, Agent2, Physobj), some(Exists_Location, '$kolem_Fn_53'(Agent1, Agent2, Physobj, Time))then loc_at(Agent2, Exists_Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',660).

 /*  reactive_rule([ happens(request(Agent1,
   				Agent2,
   				Physobj),
   			Time_From8,
   			Time_Until9),
   		some(Exists_Location,
   		     '$kolem_Fn_53'(Agent1,
   				    Agent2,
   				    Physobj,
   				    Time))
   	      ],
   	      [loc_at(Agent2,Exists_Location)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',660).

 /*  reactive_rule([ happens(request(Agent1,
   				Agent2,
   				Physobj),
   			Time_From8,
   			Time_Until9),
   		some(Exists_Location,
   		     '$kolem_Fn_53'(Agent1,
   				    Agent2,
   				    Physobj,
   				    Time))
   	      ],
   	      [loc_at(Agent2,Exists_Location)]).
 */


%; End of file.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',664).
% translate: ending  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e.lps 
