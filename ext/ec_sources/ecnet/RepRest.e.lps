:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ReadingALetter.e',117).
% translate: unskipped  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e.lps 
:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(lps).
% translate: begining  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e.lps 
% Thu, 08 Oct 2020 21:36:41 GMT File: <stream>(0x55894c219400)%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{Mueller:InPress,
%;   author = "Erik T. Mueller",
%;   year = "in press",
%;   title = "Modelling space and time in narratives about restaurants",
%;   journal = "Literary and Linguistic Computing",
%; }
%;
%;sort boolean
%;sort integer
%;reified sort predicate
%;reified sort function
%;
%;sort time: integer
%;sort offset: integer
%;
%;reified sort fluent
%;reified sort event
%;
%;predicate Happens(event,time)
%;predicate HoldsAt(fluent,time)
%;predicate ReleasedAt(fluent,time)
%;predicate Initiates(event,fluent,time)
%;predicate Terminates(event,fluent,time)
%;predicate Releases(event,fluent,time)
%;
%;sort diameter: integer
%;
%;sort object
%;
%;sort agent: object
%;
%;sort physobj: object
%;sort bed: physobj
%;sort snowflake: physobj
%;sort sky: physobj
%;
%;sort stuff: physobj
%;
%;sort surface: physobj
%;sort ground: surface
%;
%;sort snow: stuff
%;sort ball
%;
%;sort food: physobj
%;sort fruit: food
%;sort orange: fruit
%;sort salad: food
%;
%;sort clothing: physobj
%;sort scarf: clothing
%;sort hat: clothing
%;
%;sort vegetablematter: physobj
%;sort coal: vegetablematter
%;
%;sort bodypart: physobj
%;sort hand: bodypart
%;
%;sort papertowels: physobj
%;sort device: physobj
%;sort electronicdevice: device
%;sort lamp: electronicdevice
%;
%;sort cat: physobj
%;
%;sort weapon: physobj
%;sort gun: weapon
%;sort bomb: weapon
%;sort bullet: weapon
%;
%;sort location
%;sort room: location, outside: location
%;
%;sort portal
%;sort door: portal, staircase: portal
%;sort street: portal
%;
%;sort building
%;
%;sort fire: object
%;
%;sort furniture: physobj
%;sort chair: furniture
%;sort table: furniture
%;
%;sort menu: physobj
%;sort bill: physobj
%;
%;sort script
%;

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',103).
% fluent Holding(agent,physobj)
% fluent(
%    holding(agent,physobj)).
fluents([holding/2]).
% mpred_prop(
%    holding(agent,physobj), 
%    fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',103).
mpred_prop(holding(agent,physobj),fluent).

% event PickUp(agent,physobj)
% event(
%    pickUp(agent,physobj)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',103).
actions([pickUp/2]).
% mpred_prop(
%    pickUp(agent,physobj), 
%    event).
mpred_prop(pickUp(agent,physobj),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',105).
% event LetGoOf(agent,physobj)
% event(
%    letGoOf(agent,physobj)).
actions([letGoOf/2]).
% mpred_prop(
%    letGoOf(agent,physobj), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',105).
mpred_prop(letGoOf(agent,physobj),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',107).
% [agent,physobj,time]
% Initiates(PickUp(agent,physobj),Holding(agent,physobj),time).
% initiates(
%    pickUp(Agent,Physobj), 
%    holding(Agent,Physobj), 
%    Time).
pickUp(Agent, Physobj)initiates holding(Agent, Physobj).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',107).

 /*  initiated(happens(pickUp(Agent,Physobj),
   		  Time_From,
   		  Time_Until),
   	  holding(Agent,Physobj),
   	  []).
 */
 %  "% =================================".


% [agent,physobj,time]
% Happens(PickUp(agent,physobj),time) ->
% {location}% 
%   HoldsAt(At(agent,location),time) &
%   HoldsAt(At(physobj,location),time).
% '->'(
%    ','(
%       ';'(
%          not(
%             at(Agent,Exists_Location)), 
%          not(
%             at(Physobj,Exists_Location))), 
%       some(
%          Exists_Location, 
%          '$kolem_Fn_707'(Agent,Physobj,Time))), 
%    not(
%       pickUp(Agent,Physobj))).
if (not loc_at(Agent, Exists_Location);not loc_at(Physobj, Exists_Location)), some(Exists_Location, '$kolem_Fn_707'(Agent, Physobj, Time))then not pickUp(Agent, Physobj).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',111).

 /*   reactive_rule([  (not(loc_at(Agent, Exists_Location));not(loc_at(Physobj, Exists_Location))),
                      some(Exists_Location,
                           '$kolem_Fn_707'(Agent, Physobj, Time))
                    ],
                    [not(pickUp(Agent, Physobj))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       pickUp(Agent,Physobj), 
%       some(
%          Exists_Location, 
%          '$kolem_Fn_707'(Agent,Physobj,Time))), 
%    at(Agent,Exists_Location)).
if pickUp(Agent, Physobj), some(Exists_Location, '$kolem_Fn_707'(Agent, Physobj, Time))then loc_at(Agent, Exists_Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',111).

 /*  reactive_rule([ happens(pickUp(Agent,Physobj),
   			Time_From,
   			Time_Until),
   		some(Exists_Location,
   		     '$kolem_Fn_707'(Agent,
   				     Physobj,
   				     Time))
   	      ],
   	      [loc_at(Agent,Exists_Location)]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       pickUp(Agent,Physobj), 
%       some(
%          Exists_Location, 
%          '$kolem_Fn_707'(Agent,Physobj,Time))), 
%    at(Physobj,Exists_Location)).
if pickUp(Agent, Physobj), some(Exists_Location, '$kolem_Fn_707'(Agent, Physobj, Time))then loc_at(Physobj, Exists_Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',111).

 /*  reactive_rule([ happens(pickUp(Agent,Physobj),
   			Time_From7,
   			Time_Until8),
   		some(Exists_Location,
   		     '$kolem_Fn_707'(Agent,
   				     Physobj,
   				     Time))
   	      ],
   	      [loc_at(Physobj,Exists_Location)]).
 */
 %  "% =================================".


% [agent,physobj,time]
% Terminates(LetGoOf(agent,physobj),Holding(agent,physobj),time).
% terminates(
%    letGoOf(Agent,Physobj), 
%    holding(Agent,Physobj), 
%    Time).
letGoOf(Agent, Physobj)terminates holding(Agent, Physobj).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',117).

 /*  terminated(happens(letGoOf(Agent,Physobj),
   		   Time_From,
   		   Time_Until),
   	   holding(Agent,Physobj),
   	   []).
 */
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',119).
% [agent,physobj,time]
% Happens(LetGoOf(agent,physobj),time) ->
% HoldsAt(Holding(agent,physobj),time).
% '->'(
%    metreqs(
%       letGoOf(Agent,Physobj)), 
%    requires(
%       letGoOf(Agent,Physobj), 
%       When_Time)).
if letGoOf(Agent, Physobj)then requires(letGoOf(Agent, Physobj), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',119).

 /*  reactive_rule([ happens(letGoOf(Agent,Physobj),
   			Time_From,
   			Time_Until)
   	      ],
   	      [ requires(letGoOf(Agent,Physobj),
   			 When_Time)
   	      ]).
 */
 %  "% =================================".
% '->'(
%    holding(Agent,Physobj), 
%    metreqs(
%       letGoOf(Agent,Physobj))).
letGoOf(Agent, Physobj)if holding(Agent, Physobj).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',119).

 /*  l_events(happens(letGoOf(Agent,Physobj),
   		 Time_From6,
   		 Time_From6),
   	 [holds(holding(Agent,Physobj),Time_From6)]).
 */
 %  "% =================================".
% '->'(
%    not(
%       holding(Agent,Physobj)), 
%    not(
%       letGoOf(Agent,Physobj))).
if not holding(Agent, Physobj)then not letGoOf(Agent, Physobj).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',119).

 /*  reactive_rule([ holds(not(holding(Agent,Physobj)),
   		      Time_At)
   	      ],
   	      [not(letGoOf(Agent,Physobj))]).
 */
 %  "% =================================".


% [agent,physobj,location,time]
% Releases(PickUp(agent,physobj),At(physobj,location),time).
% releases(
%    pickUp(Agent,Physobj), 
%    at(Physobj,Location), 
%    Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',124).
releases(pickUp(Agent,Physobj),
	 loc_at(Physobj,Location),
	 Time).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',126).
% [agent,physobj,location,time]
% HoldsAt(Holding(agent,physobj),time) &
% HoldsAt(At(agent,location),time) ->
% HoldsAt(At(physobj,location),time).
% '->'(
%    ','(
%       holding(Agent,Physobj), 
%       at(Agent,Location)), 
%    at(Physobj,Location)).
if holding(Agent, Physobj), loc_at(Agent, Location)then loc_at(Physobj, Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',126).

 /*  reactive_rule([ holds(holding(Agent,Physobj),Time_At),
   		loc_at(Agent,Location)
   	      ],
   	      [loc_at(Physobj,Location)]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       at(Agent,Location), 
%       not(
%          at(Physobj,Location))), 
%    not(
%       holding(Agent,Physobj))).
not holding(Agent, Physobj)if loc_at(Agent, Location), not loc_at(Physobj, Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',126).

 /*  l_int(holds(not(holding(Agent,Physobj)),Time_At5),
         [ loc_at(Agent,Location),
   	not(loc_at(Physobj,Location))
         ]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       holding(Agent,Physobj), 
%       not(
%          at(Physobj,Location))), 
%    not(
%       at(Agent,Location))).
if holding(Agent, Physobj), not loc_at(Physobj, Location)then not loc_at(Agent, Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',126).

 /*  reactive_rule([ holds(holding(Agent,Physobj),
   		      Time_At6),
   		not(loc_at(Physobj,Location))
   	      ],
   	      [not(loc_at(Agent,Location))]).
 */
 %  "% =================================".


%;[agent,physobj,location1,location2,time]
%;HoldsAt(At(agent,location1),time) &
%;location1!=location2 ->
%;Terminates(LetGoOf(agent,physobj),At(physobj,location2),time).
% [agent,physobj,location,time]
% HoldsAt(At(agent,location),time) ->
% Initiates(LetGoOf(agent,physobj),At(physobj,location),time).
% '->'(
%    at(Agent,Location), 
%    initiates(
%       letGoOf(Agent,Physobj), 
%       at(Physobj,Location), 
%       Time)).
if loc_at(Agent, Location)then initiates(letGoOf(Agent, Physobj), loc_at(Physobj, Location)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',136).

 /*  reactive_rule([loc_at(Agent,Location)],
   	      [ initiates(letGoOf(Agent,Physobj),
   			  at(loc_at(Physobj,Location),
   			     Time),
   			  Initiates)
   	      ]).
 */
 %  "% =================================".

% fluent On(physobj,physobj)
% fluent(
%    on(physobj,physobj)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',139).
fluents([on/2]).
% mpred_prop(
%    on(physobj,physobj), 
%    fluent).
mpred_prop(on(physobj,physobj),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',142).
% event PlaceOn(agent,physobj,physobj)
% event(
%    placeOn(agent,physobj,physobj)).
actions([placeOn/3]).
% mpred_prop(
%    placeOn(agent,physobj,physobj), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',142).
mpred_prop(placeOn(agent,physobj,physobj),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',144).
% event TakeOffOf(agent,physobj,physobj)
% event(
%    takeOffOf(agent,physobj,physobj)).
actions([takeOffOf/3]).
% mpred_prop(
%    takeOffOf(agent,physobj,physobj), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',144).
mpred_prop(takeOffOf(agent,physobj,physobj),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',146).
% [physobj1,physobj2,time]
% HoldsAt(On(physobj1,physobj2),time) ->
% physobj1!=physobj2.
% '->'(
%    equals(Physobj1,Physobj2), 
%    not(
%       on(Physobj1,Physobj2))).
not on(Physobj1, Physobj2)if equals(Physobj1, Physobj2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',146).

 /*  l_int(holds(not(on(Physobj1,Physobj2)),Time_At),
         [equals(Physobj1,Physobj2)]).
 */
 %  "% =================================".


% [physobj1,physobj2,time]
% HoldsAt(On(physobj1,physobj2),time) ->
% !HoldsAt(On(physobj2,physobj1),time).
% '->'(
%    on(Physobj1,Physobj2), 
%    not(
%       on(Physobj2,Physobj1))).
not on(Physobj2, Physobj1)if on(Physobj1, Physobj2).

 /*  l_int(holds(not(on(Physobj2,Physobj1)),Time_At),
         [holds(on(Physobj1,Physobj2),Time_At)]).
 */
 %  "% =================================".
% '->'(
%    not(
%       not(
%          on(Physobj2,Physobj1))), 
%    not(
%       on(Physobj1,Physobj2))).
not on(Physobj1, Physobj2)if not not on(Physobj2, Physobj1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',151).

 /*  l_int(holds(not(on(Physobj1,Physobj2)),Time_At4),
         [ holds(not([ holds(not(on(Physobj2,Physobj1)),
   			  Time_At4)
   		  ]),
   	      Time_At4)
         ]).
 */
 %  "% =================================".


% [agent,physobj1,physobj2,time]
% Initiates(PlaceOn(agent,physobj1,physobj2),
%           On(physobj1,physobj2),time).
% initiates(
%    placeOn(Agent,Physobj1,Physobj2), 
%    on(Physobj1,Physobj2), 
%    Time).
placeOn(Agent, Physobj1, Physobj2)initiates on(Physobj1, Physobj2).

 /*  initiated(happens(placeOn(Agent,Physobj1,Physobj2),
   		  Time_From,
   		  Time_Until),
   	  on(Physobj1,Physobj2),
   	  []).
 */
 %  "% =================================".


% [agent,physobj1,physobj2,time]
% Terminates(PlaceOn(agent,physobj1,physobj2),
%            Holding(agent,physobj1),time).
% terminates(
%    placeOn(Agent,Physobj1,Physobj2), 
%    holding(Agent,Physobj1), 
%    Time).
placeOn(Agent, Physobj1, Physobj2)terminates holding(Agent, Physobj1).

 /*  terminated(happens(placeOn(Agent,Physobj1,Physobj2),
   		   Time_From,
   		   Time_Until),
   	   holding(Agent,Physobj1),
   	   []).
 */
 %  "% =================================".


% [agent,physobj1,physobj2,time]
% Happens(PlaceOn(agent,physobj1,physobj2),time) ->
% HoldsAt(Holding(agent,physobj1),time) &
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',163).
% {location}% 
%  HoldsAt(At(agent,location),time) &
%  HoldsAt(At(physobj2,location),time).
% '->'(
%    ','(
%       ';'(
%          not(
%             holding(Agent,Physobj1)), 
%          ';'(
%             not(
%                at(Agent,Exists_Location)), 
%             not(
%                at(Physobj2,Exists_Location)))), 
%       some(
%          Exists_Location, 
%          '$kolem_Fn_708'(Agent,Physobj1,Physobj2,Time))), 
%    not(
%       placeOn(Agent,Physobj1,Physobj2))).
if (not holding(Agent, Physobj1);not loc_at(Agent, Exists_Location);not loc_at(Physobj2, Exists_Location)), some(Exists_Location, '$kolem_Fn_708'(Agent, Physobj1, Physobj2, Time))then not placeOn(Agent, Physobj1, Physobj2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',165).

 /*   reactive_rule([  (not(holding(Agent, Physobj1));not(loc_at(Agent, Exists_Location));not(loc_at(Physobj2, Exists_Location))),
                      some(Exists_Location,
                           '$kolem_Fn_708'(Agent,
                                           Physobj1,
                                           Physobj2,
                                           Time))
                    ],
                    [not(placeOn(Agent, Physobj1, Physobj2))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       placeOn(Agent,Physobj1,Physobj2), 
%       some(
%          Exists_Location, 
%          '$kolem_Fn_708'(Agent,Physobj1,Physobj2,Time))), 
%    holding(Agent,Physobj1)).
holding(Agent, Physobj1)if placeOn(Agent, Physobj1, Physobj2), some(Exists_Location, '$kolem_Fn_708'(Agent, Physobj1, Physobj2, Time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',165).

 /*  l_int(holds(holding(Agent,Physobj1),Time_At),
         [ happens(placeOn(Agent,Physobj1,Physobj2),
   		Time_At,
   		Time_At),
   	some(Exists_Location,
   	     '$kolem_Fn_708'(Agent,
   			     Physobj1,
   			     Physobj2,
   			     Time))
         ]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       placeOn(Agent,Physobj1,Physobj2), 
%       some(
%          Exists_Location, 
%          '$kolem_Fn_708'(Agent,Physobj1,Physobj2,Time))), 
%    at(Agent,Exists_Location)).
if placeOn(Agent, Physobj1, Physobj2), some(Exists_Location, '$kolem_Fn_708'(Agent, Physobj1, Physobj2, Time))then loc_at(Agent, Exists_Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',165).

 /*  reactive_rule([ happens(placeOn(Agent,
   				Physobj1,
   				Physobj2),
   			Time_From,
   			Time_Until),
   		some(Exists_Location,
   		     '$kolem_Fn_708'(Agent,
   				     Physobj1,
   				     Physobj2,
   				     Time))
   	      ],
   	      [loc_at(Agent,Exists_Location)]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       placeOn(Agent,Physobj1,Physobj2), 
%       some(
%          Exists_Location, 
%          '$kolem_Fn_708'(Agent,Physobj1,Physobj2,Time))), 
%    at(Physobj2,Exists_Location)).
if placeOn(Agent, Physobj1, Physobj2), some(Exists_Location, '$kolem_Fn_708'(Agent, Physobj1, Physobj2, Time))then loc_at(Physobj2, Exists_Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',165).

 /*  reactive_rule([ happens(placeOn(Agent,
   				Physobj1,
   				Physobj2),
   			Time_From9,
   			Time_Until10),
   		some(Exists_Location,
   		     '$kolem_Fn_708'(Agent,
   				     Physobj1,
   				     Physobj2,
   				     Time))
   	      ],
   	      [loc_at(Physobj2,Exists_Location)]).
 */
 %  "% =================================".


% [agent,physobj1,physobj2,time]
% Terminates(TakeOffOf(agent,physobj1,physobj2),
%            On(physobj1,physobj2),time).
% terminates(
%    takeOffOf(Agent,Physobj1,Physobj2), 
%    on(Physobj1,Physobj2), 
%    Time).
takeOffOf(Agent, Physobj1, Physobj2)terminates on(Physobj1, Physobj2).

 /*  terminated(happens(takeOffOf(Agent,Physobj1,Physobj2),
   		   Time_From,
   		   Time_Until),
   	   on(Physobj1,Physobj2),
   	   []).
 */
 %  "% =================================".


% [agent,physobj1,physobj2,time]
% Initiates(TakeOffOf(agent,physobj1,physobj2),
%           Holding(agent,physobj1),time).
% initiates(
%    takeOffOf(Agent,Physobj1,Physobj2), 
%    holding(Agent,Physobj1), 
%    Time).
takeOffOf(Agent, Physobj1, Physobj2)initiates holding(Agent, Physobj1).

 /*  initiated(happens(takeOffOf(Agent,Physobj1,Physobj2),
   		  Time_From,
   		  Time_Until),
   	  holding(Agent,Physobj1),
   	  []).
 */
 %  "% =================================".


% [agent,physobj1,physobj2,location,time]
% Releases(TakeOffOf(agent,physobj1,physobj2),
%          At(physobj1,location),
%          time).
% releases(
%    takeOffOf(Agent,Physobj1,Physobj2), 
%    at(Physobj1,Location), 
%    Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',178).
releases(takeOffOf(Agent,Physobj1,Physobj2),
	 loc_at(Physobj1,Location),
	 Time).


% [agent,physobj1,physobj2,time]
% Happens(TakeOffOf(agent,physobj1,physobj2),time) ->
% HoldsAt(On(physobj1,physobj2),time) &
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',183).
% {location}% 
%  HoldsAt(At(agent,location),time) &
%  HoldsAt(At(physobj1,location),time) &
%  HoldsAt(At(physobj2,location),time).
% '->'(
%    ','(
%       ';'(
%          not(
%             on(Physobj1,Physobj2)), 
%          ';'(
%             not(
%                at(Agent,Exists_Location)), 
%             ';'(
%                not(
%                   at(Physobj1,Exists_Location)), 
%                not(
%                   at(Physobj2,Exists_Location))))), 
%       some(
%          Exists_Location, 
%          '$kolem_Fn_709'(Agent,Physobj1,Physobj2,Time))), 
%    not(
%       takeOffOf(Agent,Physobj1,Physobj2))).
if (not on(Physobj1, Physobj2);not loc_at(Agent, Exists_Location);not loc_at(Physobj1, Exists_Location);not loc_at(Physobj2, Exists_Location)), some(Exists_Location, '$kolem_Fn_709'(Agent, Physobj1, Physobj2, Time))then not takeOffOf(Agent, Physobj1, Physobj2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',185).

 /*   reactive_rule([  (not(on(Physobj1, Physobj2));not(loc_at(Agent, Exists_Location));not(loc_at(Physobj1, Exists_Location));not(loc_at(Physobj2, Exists_Location))),
                      some(Exists_Location,
                           '$kolem_Fn_709'(Agent,
                                           Physobj1,
                                           Physobj2,
                                           Time))
                    ],
                    [not(takeOffOf(Agent, Physobj1, Physobj2))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       takeOffOf(Agent,Physobj1,Physobj2), 
%       some(
%          Exists_Location, 
%          '$kolem_Fn_709'(Agent,Physobj1,Physobj2,Time))), 
%    on(Physobj1,Physobj2)).
on(Physobj1, Physobj2)if takeOffOf(Agent, Physobj1, Physobj2), some(Exists_Location, '$kolem_Fn_709'(Agent, Physobj1, Physobj2, Time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',185).

 /*  l_int(holds(on(Physobj1,Physobj2),Time_At),
         [ happens(takeOffOf(Agent,Physobj1,Physobj2),
   		Time_At,
   		Time_At),
   	some(Exists_Location,
   	     '$kolem_Fn_709'(Agent,
   			     Physobj1,
   			     Physobj2,
   			     Time))
         ]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       takeOffOf(Agent,Physobj1,Physobj2), 
%       some(
%          Exists_Location, 
%          '$kolem_Fn_709'(Agent,Physobj1,Physobj2,Time))), 
%    at(Agent,Exists_Location)).
if takeOffOf(Agent, Physobj1, Physobj2), some(Exists_Location, '$kolem_Fn_709'(Agent, Physobj1, Physobj2, Time))then loc_at(Agent, Exists_Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',185).

 /*  reactive_rule([ happens(takeOffOf(Agent,
   				  Physobj1,
   				  Physobj2),
   			Time_From,
   			Time_Until),
   		some(Exists_Location,
   		     '$kolem_Fn_709'(Agent,
   				     Physobj1,
   				     Physobj2,
   				     Time))
   	      ],
   	      [loc_at(Agent,Exists_Location)]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       takeOffOf(Agent,Physobj1,Physobj2), 
%       some(
%          Exists_Location, 
%          '$kolem_Fn_709'(Agent,Physobj1,Physobj2,Time))), 
%    at(Physobj1,Exists_Location)).
if takeOffOf(Agent, Physobj1, Physobj2), some(Exists_Location, '$kolem_Fn_709'(Agent, Physobj1, Physobj2, Time))then loc_at(Physobj1, Exists_Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',185).

 /*  reactive_rule([ happens(takeOffOf(Agent,
   				  Physobj1,
   				  Physobj2),
   			Time_From9,
   			Time_Until10),
   		some(Exists_Location,
   		     '$kolem_Fn_709'(Agent,
   				     Physobj1,
   				     Physobj2,
   				     Time))
   	      ],
   	      [loc_at(Physobj1,Exists_Location)]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       takeOffOf(Agent,Physobj1,Physobj2), 
%       some(
%          Exists_Location, 
%          '$kolem_Fn_709'(Agent,Physobj1,Physobj2,Time))), 
%    at(Physobj2,Exists_Location)).
if takeOffOf(Agent, Physobj1, Physobj2), some(Exists_Location, '$kolem_Fn_709'(Agent, Physobj1, Physobj2, Time))then loc_at(Physobj2, Exists_Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',185).

 /*  reactive_rule([ happens(takeOffOf(Agent,
   				  Physobj1,
   				  Physobj2),
   			Time_From11,
   			Time_Until12),
   		some(Exists_Location,
   		     '$kolem_Fn_709'(Agent,
   				     Physobj1,
   				     Physobj2,
   				     Time))
   	      ],
   	      [loc_at(Physobj2,Exists_Location)]).
 */
 %  "% =================================".


% [agent,physobj1,physobj2,location,time]
% Releases(PlaceOn(agent,physobj1,physobj2),
%          At(physobj1,location),
%          time).
% releases(
%    placeOn(Agent,Physobj1,Physobj2), 
%    at(Physobj1,Location), 
%    Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',191).
releases(placeOn(Agent,Physobj1,Physobj2),
	 loc_at(Physobj1,Location),
	 Time).


% [physobj1,physobj2,location,time]
% HoldsAt(On(physobj1,physobj2),time) &
% HoldsAt(At(physobj2,location),time) ->
% HoldsAt(At(physobj1,location),time).
% '->'(
%    ','(
%       on(Physobj1,Physobj2), 
%       at(Physobj2,Location)), 
%    at(Physobj1,Location)).
if on(Physobj1, Physobj2), loc_at(Physobj2, Location)then loc_at(Physobj1, Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',196).

 /*  reactive_rule([ holds(on(Physobj1,Physobj2),Time_At),
   		loc_at(Physobj2,Location)
   	      ],
   	      [loc_at(Physobj1,Location)]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       at(Physobj2,Location), 
%       not(
%          at(Physobj1,Location))), 
%    not(
%       on(Physobj1,Physobj2))).
not on(Physobj1, Physobj2)if loc_at(Physobj2, Location), not loc_at(Physobj1, Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',196).

 /*  l_int(holds(not(on(Physobj1,Physobj2)),Time_At5),
         [ loc_at(Physobj2,Location),
   	not(loc_at(Physobj1,Location))
         ]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       on(Physobj1,Physobj2), 
%       not(
%          at(Physobj1,Location))), 
%    not(
%       at(Physobj2,Location))).
if on(Physobj1, Physobj2), not loc_at(Physobj1, Location)then not loc_at(Physobj2, Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',196).

 /*  reactive_rule([ holds(on(Physobj1,Physobj2),Time_At6),
   		not(loc_at(Physobj1,Location))
   	      ],
   	      [not(loc_at(Physobj2,Location))]).
 */
 %  "% =================================".

% fluent At(object,location)
% fluent(
%    at(object,location)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',199).
fluents([loc_at/2]).
% mpred_prop(
%    at(object,location), 
%    fluent).
mpred_prop(loc_at(object,location),fluent).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',202).
% [object,time]
% {location} % HoldsAt(At(object,location),time).
% '->'(
%    some(
%       Exists_Location, 
%       '$kolem_Fn_710'(Object,Time)), 
%    at(Object,Exists_Location)).
if some(Exists_Location, '$kolem_Fn_710'(Object, Time))then loc_at(Object, Exists_Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',202).

 /*  reactive_rule([ some(Exists_Location,
   		     '$kolem_Fn_710'(Object,Time))
   	      ],
   	      [loc_at(Object,Exists_Location)]).
 */
 %  "% =================================".


% [object,location1,location2,time]
% HoldsAt(At(object,location1),time) &
% HoldsAt(At(object,location2),time) ->
% location1=location2.
% '->'(
%    ','(
%       at(Object,Location2), 
%       not(
%          equals(Location1,Location2))), 
%    not(
%       at(Object,Location1))).
if loc_at(Object, Location2), not equals(Location1, Location2)then not loc_at(Object, Location1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',206).

 /*  reactive_rule([ loc_at(Object,Location2),
   		not(equals(Location1,Location2))
   	      ],
   	      [not(loc_at(Object,Location1))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       at(Object,Location1), 
%       not(
%          equals(Location2,Location1))), 
%    not(
%       at(Object,Location2))).
if loc_at(Object, Location1), not equals(Location2, Location1)then not loc_at(Object, Location2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',206).

 /*  reactive_rule([ loc_at(Object,Location1),
   		not(equals(Location2,Location1))
   	      ],
   	      [not(loc_at(Object,Location2))]).
 */
 %  "% =================================".

% function Side1(portal): location
% function(
%    side1(portal)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',209).
functions([side1/1]).
% mpred_prop(
%    side1(portal), 
%    function).
mpred_prop(side1(portal),function).
% predicate(
%    side1Pred(portal,location)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',209).
predicates([side1Pred/2]).
% mpred_prop(
%    side1Pred(portal,location), 
%    predicate).
mpred_prop(side1Pred(portal,location),predicate).
% functional_predicate(side1,side1Pred).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',209).
functional_predicate(side1,side1Pred).
% function_argtypes(
%    side1Pred, 
%    side1(portal), 
%    location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',209).
function_argtypes(side1Pred,side1(portal),location).
% resultIsa(side1,location).
resultIsa(side1,location).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',211).
% function Side2(portal): location
% function(
%    side2(portal)).
functions([side2/1]).
% mpred_prop(
%    side2(portal), 
%    function).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',211).
mpred_prop(side2(portal),function).
% predicate(
%    side2Pred(portal,location)).
predicates([side2Pred/2]).
% mpred_prop(
%    side2Pred(portal,location), 
%    predicate).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',211).
mpred_prop(side2Pred(portal,location),predicate).
% functional_predicate(side2,side2Pred).
functional_predicate(side2,side2Pred).
% function_argtypes(
%    side2Pred, 
%    side2(portal), 
%    location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',211).
function_argtypes(side2Pred,side2(portal),location).
% resultIsa(side2,location).
resultIsa(side2,location).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',213).
% fluent NearPortal(object,portal)
% fluent(
%    nearPortal(object,portal)).
fluents([nearPortal/2]).
% mpred_prop(
%    nearPortal(object,portal), 
%    fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',213).
mpred_prop(nearPortal(object,portal),fluent).

% noninertial NearPortal
% noninertial(nearPortal).
noninertial(nearPortal).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',216).
% [object,portal,time]
% HoldsAt(NearPortal(object,portal),time) <->
% {location}% 
%  (Side1(portal)=location|
%   Side2(portal)=location) &
%  HoldsAt(At(object,location),time).
% '->'(
%    ','(
%       ';'(
%          ','(
%             not(
%                side1Pred(Portal,Exists_Location)), 
%             not(
%                side2Pred(Portal,Exists_Location))), 
%          not(
%             at(Object,Exists_Location))), 
%       some(
%          Exists_Location, 
%          '$kolem_Fn_711'(Object,Portal,Time))), 
%    not(
%       nearPortal(Object,Portal))).
if (not side1Pred(Portal, Exists_Location), not side2Pred(Portal, Exists_Location);not loc_at(Object, Exists_Location)), some(Exists_Location, '$kolem_Fn_711'(Object, Portal, Time))then not nearPortal(Object, Portal).
 %  reactive_rule([(not(side1Pred(Portal, Exists_Location)), not(side2Pred(Portal, Exists_Location));not(loc_at(Object, Exists_Location))), some(Exists_Location, '$kolem_Fn_711'(Object, Portal, Time))], [not(nearPortal(Object, Portal))]).
 %  "% =================================".
% '->'(
%    ','(
%       not(
%          side2Pred(Portal,Exists_Location)), 
%       ','(
%          nearPortal(Object,Portal), 
%          some(
%             Exists_Location, 
%             '$kolem_Fn_711'(Object,Portal,Time)))), 
%    side1Pred(Portal,Exists_Location)).
if not side2Pred(Portal, Exists_Location), nearPortal(Object, Portal), some(Exists_Location, '$kolem_Fn_711'(Object, Portal, Time))then side1Pred(Portal, Exists_Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',218).

 /*  reactive_rule([ not(side2Pred(Portal,Exists_Location)),
   		nearPortal(Object,Portal),
   		some(Exists_Location,
   		     '$kolem_Fn_711'(Object,
   				     Portal,
   				     Time))
   	      ],
   	      [side1Pred(Portal,Exists_Location)]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       not(
%          side1Pred(Portal,Exists_Location)), 
%       ','(
%          nearPortal(Object,Portal), 
%          some(
%             Exists_Location, 
%             '$kolem_Fn_711'(Object,Portal,Time)))), 
%    side2Pred(Portal,Exists_Location)).
if not side1Pred(Portal, Exists_Location), nearPortal(Object, Portal), some(Exists_Location, '$kolem_Fn_711'(Object, Portal, Time))then side2Pred(Portal, Exists_Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',218).

 /*  reactive_rule([ not(side1Pred(Portal,Exists_Location)),
   		nearPortal(Object,Portal),
   		some(Exists_Location,
   		     '$kolem_Fn_711'(Object,
   				     Portal,
   				     Time))
   	      ],
   	      [side2Pred(Portal,Exists_Location)]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       nearPortal(Object,Portal), 
%       some(
%          Exists_Location, 
%          '$kolem_Fn_711'(Object,Portal,Time))), 
%    at(Object,Exists_Location)).
if nearPortal(Object, Portal), some(Exists_Location, '$kolem_Fn_711'(Object, Portal, Time))then loc_at(Object, Exists_Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',218).

 /*  reactive_rule([ nearPortal(Object,Portal),
   		some(Exists_Location,
   		     '$kolem_Fn_711'(Object,
   				     Portal,
   				     Time))
   	      ],
   	      [loc_at(Object,Exists_Location)]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       at(Object,Exists_Location), 
%       ','(
%          ';'(
%             side1Pred(Portal,Exists_Location), 
%             side2Pred(Portal,Exists_Location)), 
%          some(
%             Exists_Location, 
%             '$kolem_Fn_711'(Object,Portal,Time)))), 
%    nearPortal(Object,Portal)).
if loc_at(Object, Exists_Location), (side1Pred(Portal, Exists_Location);side2Pred(Portal, Exists_Location)), some(Exists_Location, '$kolem_Fn_711'(Object, Portal, Time))then nearPortal(Object, Portal).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',218).

 /*   reactive_rule([ loc_at(Object, Exists_Location),
                       (side1Pred(Portal, Exists_Location);side2Pred(Portal, Exists_Location)),
                      some(Exists_Location,
                           '$kolem_Fn_711'(Object, Portal, Time))
                    ],
                    [nearPortal(Object, Portal)]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       ';'(
%          side1Pred(Portal,Exists_Location), 
%          side2Pred(Portal,Exists_Location)), 
%       ','(
%          not(
%             nearPortal(Object,Portal)), 
%          some(
%             Exists_Location, 
%             '$kolem_Fn_711'(Object,Portal,Time)))), 
%    not(
%       at(Object,Exists_Location))).
if (side1Pred(Portal, Exists_Location);side2Pred(Portal, Exists_Location)), not nearPortal(Object, Portal), some(Exists_Location, '$kolem_Fn_711'(Object, Portal, Time))then not loc_at(Object, Exists_Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',218).

 /*   reactive_rule([  (side1Pred(Portal, Exists_Location);side2Pred(Portal, Exists_Location)),
                      not(nearPortal(Object, Portal)),
                      some(Exists_Location,
                           '$kolem_Fn_711'(Object, Portal, Time))
                    ],
                    [not(loc_at(Object, Exists_Location))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       at(Object,Exists_Location), 
%       ','(
%          not(
%             nearPortal(Object,Portal)), 
%          some(
%             Exists_Location, 
%             '$kolem_Fn_711'(Object,Portal,Time)))), 
%    not(
%       side1Pred(Portal,Exists_Location))).
if loc_at(Object, Exists_Location), not nearPortal(Object, Portal), some(Exists_Location, '$kolem_Fn_711'(Object, Portal, Time))then not side1Pred(Portal, Exists_Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',218).

 /*  reactive_rule([ loc_at(Object,Exists_Location),
   		not(nearPortal(Object,Portal)),
   		some(Exists_Location,
   		     '$kolem_Fn_711'(Object,
   				     Portal,
   				     Time))
   	      ],
   	      [not(side1Pred(Portal,Exists_Location))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       at(Object,Exists_Location), 
%       ','(
%          not(
%             nearPortal(Object,Portal)), 
%          some(
%             Exists_Location, 
%             '$kolem_Fn_711'(Object,Portal,Time)))), 
%    not(
%       side2Pred(Portal,Exists_Location))).
if loc_at(Object, Exists_Location), not nearPortal(Object, Portal), some(Exists_Location, '$kolem_Fn_711'(Object, Portal, Time))then not side2Pred(Portal, Exists_Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',218).

 /*  reactive_rule([ loc_at(Object,Exists_Location),
   		not(nearPortal(Object,Portal)),
   		some(Exists_Location,
   		     '$kolem_Fn_711'(Object,
   				     Portal,
   				     Time))
   	      ],
   	      [not(side2Pred(Portal,Exists_Location))]).
 */
 %  "% =================================".

% event WalkThroughDoor12(agent,door)
% event(
%    walkThroughDoor12(agent,door)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',222).
actions([walkThroughDoor12/2]).
% mpred_prop(
%    walkThroughDoor12(agent,door), 
%    event).
mpred_prop(walkThroughDoor12(agent,door),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',224).
% event WalkThroughDoor21(agent,door)
% event(
%    walkThroughDoor21(agent,door)).
actions([walkThroughDoor21/2]).
% mpred_prop(
%    walkThroughDoor21(agent,door), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',224).
mpred_prop(walkThroughDoor21(agent,door),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',226).
% [agent,door,time]
% Happens(WalkThroughDoor12(agent,door),time) ->
% HoldsAt(Standing(agent),time) &
% HoldsAt(At(agent,Side1(door)),time).
% '->'(
%    ';'(
%       not(
%          standing(Agent)), 
%       not(
%          at(
%             Agent, 
%             side1(Door)))), 
%    not(
%       walkThroughDoor12(Agent,Door))).
if not standing(Agent);not loc_at(Agent, side1(Door))then not walkThroughDoor12(Agent, Door).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',226).

 /*   reactive_rule([  (not(standing(Agent));not(loc_at(Agent, side1(Door))))
                    ],
                    [not(walkThroughDoor12(Agent, Door))]).
 */
 %  "% =================================".
% '->'(
%    metreqs(
%       walkThroughDoor12(Agent,Door)), 
%    requires(
%       walkThroughDoor12(Agent,Door), 
%       When_Time)).
if walkThroughDoor12(Agent, Door)then requires(walkThroughDoor12(Agent, Door), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',226).

 /*  reactive_rule([ happens(walkThroughDoor12(Agent,Door),
   			Time_From,
   			Time_Until)
   	      ],
   	      [ requires(walkThroughDoor12(Agent,Door),
   			 When_Time)
   	      ]).
 */
 %  "% =================================".
% '->'(
%    standing(Agent), 
%    metreqs(
%       walkThroughDoor12(Agent,Door))).
walkThroughDoor12(Agent, Door)if standing(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',226).

 /*  l_events(happens(walkThroughDoor12(Agent,Door),
   		 Time_From6,
   		 Time_From6),
   	 [holds(standing(Agent),Time_From6)]).
 */
 %  "% =================================".
% '->'(
%    metreqs(
%       walkThroughDoor12(Agent,Door)), 
%    requires(
%       walkThroughDoor12(Agent,Door), 
%       When_Time)).
if walkThroughDoor12(Agent, Door)then requires(walkThroughDoor12(Agent, Door), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',226).

 /*  reactive_rule([ happens(walkThroughDoor12(Agent,Door),
   			Time_From7,
   			Time_Until8)
   	      ],
   	      [ requires(walkThroughDoor12(Agent,Door),
   			 When_Time)
   	      ]).
 */
 %  "% =================================".
% '->'(
%    at(
%       Agent, 
%       side1(Door)), 
%    metreqs(
%       walkThroughDoor12(Agent,Door))).
walkThroughDoor12(Agent, Door)if loc_at(Agent, side1(Door)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',226).

 /*  l_events(happens(walkThroughDoor12(Agent,Door),
   		 Time_From9,
   		 Time_From9),
   	 [loc_at(Agent,side1(Door))]).
 */
 %  "% =================================".


% [agent,door,time]
% Happens(WalkThroughDoor21(agent,door),time) ->
% HoldsAt(Standing(agent),time) &
% HoldsAt(At(agent,Side2(door)),time).
% '->'(
%    ';'(
%       not(
%          standing(Agent)), 
%       not(
%          at(
%             Agent, 
%             side2(Door)))), 
%    not(
%       walkThroughDoor21(Agent,Door))).
if not standing(Agent);not loc_at(Agent, side2(Door))then not walkThroughDoor21(Agent, Door).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',232).

 /*   reactive_rule([  (not(standing(Agent));not(loc_at(Agent, side2(Door))))
                    ],
                    [not(walkThroughDoor21(Agent, Door))]).
 */
 %  "% =================================".
% '->'(
%    metreqs(
%       walkThroughDoor21(Agent,Door)), 
%    requires(
%       walkThroughDoor21(Agent,Door), 
%       When_Time)).
if walkThroughDoor21(Agent, Door)then requires(walkThroughDoor21(Agent, Door), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',232).

 /*  reactive_rule([ happens(walkThroughDoor21(Agent,Door),
   			Time_From,
   			Time_Until)
   	      ],
   	      [ requires(walkThroughDoor21(Agent,Door),
   			 When_Time)
   	      ]).
 */
 %  "% =================================".
% '->'(
%    standing(Agent), 
%    metreqs(
%       walkThroughDoor21(Agent,Door))).
walkThroughDoor21(Agent, Door)if standing(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',232).

 /*  l_events(happens(walkThroughDoor21(Agent,Door),
   		 Time_From6,
   		 Time_From6),
   	 [holds(standing(Agent),Time_From6)]).
 */
 %  "% =================================".
% '->'(
%    metreqs(
%       walkThroughDoor21(Agent,Door)), 
%    requires(
%       walkThroughDoor21(Agent,Door), 
%       When_Time)).
if walkThroughDoor21(Agent, Door)then requires(walkThroughDoor21(Agent, Door), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',232).

 /*  reactive_rule([ happens(walkThroughDoor21(Agent,Door),
   			Time_From7,
   			Time_Until8)
   	      ],
   	      [ requires(walkThroughDoor21(Agent,Door),
   			 When_Time)
   	      ]).
 */
 %  "% =================================".
% '->'(
%    at(
%       Agent, 
%       side2(Door)), 
%    metreqs(
%       walkThroughDoor21(Agent,Door))).
walkThroughDoor21(Agent, Door)if loc_at(Agent, side2(Door)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',232).

 /*  l_events(happens(walkThroughDoor21(Agent,Door),
   		 Time_From9,
   		 Time_From9),
   	 [loc_at(Agent,side2(Door))]).
 */
 %  "% =================================".


% [agent,door,location,time]
% Side2(door)=location ->
% Initiates(WalkThroughDoor12(agent,door),At(agent,location),time).
% '->'(
%    side2Pred(Door,Location), 
%    initiates(
%       walkThroughDoor12(Agent,Door), 
%       at(Agent,Location), 
%       Time)).
if side2Pred(Door, Location)then initiates(walkThroughDoor12(Agent, Door), loc_at(Agent, Location)at Time, _).

 /*  reactive_rule([side2Pred(Door,Location)],
   	      [ initiates(walkThroughDoor12(Agent,Door),
   			  at(loc_at(Agent,Location),
   			     Time),
   			  Initiates)
   	      ]).
 */
 %  "% =================================".


% [agent,door,location,time]
% Side1(door)=location ->
% Initiates(WalkThroughDoor21(agent,door),At(agent,location),time).
% '->'(
%    side1Pred(Door,Location), 
%    initiates(
%       walkThroughDoor21(Agent,Door), 
%       at(Agent,Location), 
%       Time)).
if side1Pred(Door, Location)then initiates(walkThroughDoor21(Agent, Door), loc_at(Agent, Location)at Time, _).

 /*  reactive_rule([side1Pred(Door,Location)],
   	      [ initiates(walkThroughDoor21(Agent,Door),
   			  at(loc_at(Agent,Location),
   			     Time),
   			  Initiates)
   	      ]).
 */
 %  "% =================================".


% [agent,door,location,time]
% Side1(door)=location ->
% Terminates(WalkThroughDoor12(agent,door),At(agent,location),time).
% '->'(
%    side1Pred(Door,Location), 
%    terminates(
%       walkThroughDoor12(Agent,Door), 
%       at(Agent,Location), 
%       Time)).
if side1Pred(Door, Location)then terminates(walkThroughDoor12(Agent, Door), loc_at(Agent, Location)at Time, _).

 /*  reactive_rule([side1Pred(Door,Location)],
   	      [ terminates(walkThroughDoor12(Agent,Door),
   			   at(loc_at(Agent,Location),
   			      Time),
   			   Terminates)
   	      ]).
 */
 %  "% =================================".


% [agent,door,location,time]
% Side2(door)=location ->
% Terminates(WalkThroughDoor21(agent,door),At(agent,location),time).
% '->'(
%    side2Pred(Door,Location), 
%    terminates(
%       walkThroughDoor21(Agent,Door), 
%       at(Agent,Location), 
%       Time)).
if side2Pred(Door, Location)then terminates(walkThroughDoor21(Agent, Door), loc_at(Agent, Location)at Time, _).

 /*  reactive_rule([side2Pred(Door,Location)],
   	      [ terminates(walkThroughDoor21(Agent,Door),
   			   at(loc_at(Agent,Location),
   			      Time),
   			   Terminates)
   	      ]).
 */
 %  "% =================================".

% fluent Hungry(agent)
% fluent(
%    hungry(agent)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',251).
fluents([hungry/1]).
% mpred_prop(
%    hungry(agent), 
%    fluent).
mpred_prop(hungry(agent),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',254).
% fluent Satiated(agent)
% fluent(
%    satiated(agent)).
fluents([satiated/1]).
% mpred_prop(
%    satiated(agent), 
%    fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',254).
mpred_prop(satiated(agent),fluent).

% noninertial Satiated
% noninertial(satiated).
noninertial(satiated).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',257).
% [agent,time]
 % HoldsAt(Hungry(agent),time) <-> !HoldsAt(Satiated(agent),time).

 /*  holds_at(hungry(Agent), Time) <->
       holds_at(neg(satiated(Agent)), Time).
 */
% '->'(
%    hungry(Agent), 
%    not(
%       satiated(Agent))).
if hungry(Agent)then not satiated(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',257).

 /*  reactive_rule([holds(hungry(Agent),Time_At)],
   	      [not(satiated(Agent))]).
 */
 %  "% =================================".
% '->'(
%    not(
%       not(
%          satiated(Agent))), 
%    not(
%       hungry(Agent))).
not hungry(Agent)if not not satiated(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',257).

 /*  l_int(holds(not(hungry(Agent)),Time_At3),
         [not(not(satiated(Agent)))]).
 */
 %  "% =================================".
% '->'(
%    not(
%       satiated(Agent)), 
%    hungry(Agent)).
hungry(Agent)if not satiated(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',257).

 /*  l_int(holds(hungry(Agent),Time_At4),
         [not(satiated(Agent))]).
 */
 %  "% =================================".
% '->'(
%    not(
%       hungry(Agent)), 
%    not(
%       not(
%          satiated(Agent)))).
if not hungry(Agent)then not not satiated(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',257).

 /*  reactive_rule([holds(not(hungry(Agent)),Time_At5)],
   	      [not(not(satiated(Agent)))]).
 */
 %  "% =================================".

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',259).
% event Eat(agent,food)
% event(
%    eat(agent,food)).
actions([eat/2]).
% mpred_prop(
%    eat(agent,food), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',259).
mpred_prop(eat(agent,food),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',261).
% [agent,food,time]
% Happens(Eat(agent,food),time) ->
% {location}% 
% HoldsAt(At(agent,location),time) &
% HoldsAt(At(food,location),time).
% '->'(
%    ','(
%       ';'(
%          not(
%             at(Agent,Exists_Location)), 
%          not(
%             at(Food,Exists_Location))), 
%       some(
%          Exists_Location, 
%          '$kolem_Fn_712'(Agent,Food,Time))), 
%    not(
%       eat(Agent,Food))).
if (not loc_at(Agent, Exists_Location);not loc_at(Food, Exists_Location)), some(Exists_Location, '$kolem_Fn_712'(Agent, Food, Time))then not eat(Agent, Food).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',263).

 /*   reactive_rule([  (not(loc_at(Agent, Exists_Location));not(loc_at(Food, Exists_Location))),
                      some(Exists_Location,
                           '$kolem_Fn_712'(Agent, Food, Time))
                    ],
                    [not(eat(Agent, Food))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       eat(Agent,Food), 
%       some(
%          Exists_Location, 
%          '$kolem_Fn_712'(Agent,Food,Time))), 
%    at(Agent,Exists_Location)).
if eat(Agent, Food), some(Exists_Location, '$kolem_Fn_712'(Agent, Food, Time))then loc_at(Agent, Exists_Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',263).

 /*  reactive_rule([ happens(eat(Agent,Food),
   			Time_From,
   			Time_Until),
   		some(Exists_Location,
   		     '$kolem_Fn_712'(Agent,Food,Time))
   	      ],
   	      [loc_at(Agent,Exists_Location)]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       eat(Agent,Food), 
%       some(
%          Exists_Location, 
%          '$kolem_Fn_712'(Agent,Food,Time))), 
%    at(Food,Exists_Location)).
if eat(Agent, Food), some(Exists_Location, '$kolem_Fn_712'(Agent, Food, Time))then loc_at(Food, Exists_Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',263).

 /*  reactive_rule([ happens(eat(Agent,Food),
   			Time_From7,
   			Time_Until8),
   		some(Exists_Location,
   		     '$kolem_Fn_712'(Agent,Food,Time))
   	      ],
   	      [loc_at(Food,Exists_Location)]).
 */
 %  "% =================================".


% [agent,food,time]
% Terminates(Eat(agent,food),Hungry(agent),time).
% terminates(
%    eat(Agent,Food), 
%    hungry(Agent), 
%    Time).
eat(Agent, Food)terminates hungry(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',268).

 /*  terminated(happens(eat(Agent,Food),
   		   Time_From,
   		   Time_Until),
   	   hungry(Agent),
   	   []).
 */
 %  "% =================================".

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',270).
% sort restaurant: script
% subsort(restaurant,script).
subsort(restaurant,script).

% sort waiter: agent
% subsort(waiter,agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',270).
subsort(waiter,agent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',272).
% sort cook: agent
% subsort(cook,agent).
subsort(cook,agent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',274).
% function BillOf(restaurant): bill
% function(
%    billOf(restaurant)).
functions([billOf/1]).
% mpred_prop(
%    billOf(restaurant), 
%    function).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',274).
mpred_prop(billOf(restaurant),function).
% predicate(
%    bill(restaurant,bill)).
predicates([bill/2]).
% mpred_prop(
%    bill(restaurant,bill), 
%    predicate).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',274).
mpred_prop(bill(restaurant,bill),predicate).
% functional_predicate(billOf,bill).
functional_predicate(billOf,bill).
% function_argtypes(
%    bill, 
%    billOf(restaurant), 
%    bill).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',274).
function_argtypes(bill,billOf(restaurant),bill).
% resultIsa(billOf,bill).
resultIsa(billOf,bill).

% function CookOf(restaurant): cook
% function(
%    cookOf(restaurant)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',274).
functions([cookOf/1]).
% mpred_prop(
%    cookOf(restaurant), 
%    function).
mpred_prop(cookOf(restaurant),function).
% predicate(
%    cook(restaurant,cook)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',274).
predicates([cook/2]).
% mpred_prop(
%    cook(restaurant,cook), 
%    predicate).
mpred_prop(cook(restaurant,cook),predicate).
% functional_predicate(cookOf,cook).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',274).
functional_predicate(cookOf,cook).
% function_argtypes(
%    cook, 
%    cookOf(restaurant), 
%    cook).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',274).
function_argtypes(cook,cookOf(restaurant),cook).
% resultIsa(cookOf,cook).
resultIsa(cookOf,cook).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',276).
% function TableOf(restaurant): table
% function(
%    tableOf(restaurant)).
functions([tableOf/1]).
% mpred_prop(
%    tableOf(restaurant), 
%    function).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',276).
mpred_prop(tableOf(restaurant),function).
% predicate(
%    table(restaurant,table)).
predicates([(table)/2]).
% mpred_prop(
%    table(restaurant,table), 
%    predicate).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',276).
mpred_prop(table(restaurant,table),predicate).
% functional_predicate(tableOf,table).
functional_predicate(tableOf,table).
% function_argtypes(
%    table, 
%    tableOf(restaurant), 
%    table).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',276).
function_argtypes(table,tableOf(restaurant),table).
% resultIsa(tableOf,table).
resultIsa(tableOf,table).

% function WaiterOf(restaurant): waiter
% function(
%    waiterOf(restaurant)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',276).
functions([waiterOf/1]).
% mpred_prop(
%    waiterOf(restaurant), 
%    function).
mpred_prop(waiterOf(restaurant),function).
% predicate(
%    waiter(restaurant,waiter)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',276).
predicates([waiter/2]).
% mpred_prop(
%    waiter(restaurant,waiter), 
%    predicate).
mpred_prop(waiter(restaurant,waiter),predicate).
% functional_predicate(waiterOf,waiter).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',276).
functional_predicate(waiterOf,waiter).
% function_argtypes(
%    waiter, 
%    waiterOf(restaurant), 
%    waiter).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',276).
function_argtypes(waiter,waiterOf(restaurant),waiter).
% resultIsa(waiterOf,waiter).
resultIsa(waiterOf,waiter).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',278).
% function KitchenDoorOf(restaurant): door
% function(
%    kitchenDoorOf(restaurant)).
functions([kitchenDoorOf/1]).
% mpred_prop(
%    kitchenDoorOf(restaurant), 
%    function).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',278).
mpred_prop(kitchenDoorOf(restaurant),function).
% predicate(
%    kitchenDoor(restaurant,door)).
predicates([kitchenDoor/2]).
% mpred_prop(
%    kitchenDoor(restaurant,door), 
%    predicate).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',278).
mpred_prop(kitchenDoor(restaurant,door),predicate).
% functional_predicate(kitchenDoorOf,kitchenDoor).
functional_predicate(kitchenDoorOf,kitchenDoor).
% function_argtypes(
%    kitchenDoor, 
%    kitchenDoorOf(restaurant), 
%    door).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',278).
function_argtypes(kitchenDoor,kitchenDoorOf(restaurant),door).
% resultIsa(kitchenDoorOf,door).
resultIsa(kitchenDoorOf,door).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',280).
% fluent BeWaiter0(waiter)
% fluent(
%    beWaiter0(waiter)).
fluents([beWaiter0/1]).
% mpred_prop(
%    beWaiter0(waiter), 
%    fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',280).
mpred_prop(beWaiter0(waiter),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',282).
% fluent BeWaiter1(waiter)
% fluent(
%    beWaiter1(waiter)).
fluents([beWaiter1/1]).
% mpred_prop(
%    beWaiter1(waiter), 
%    fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',282).
mpred_prop(beWaiter1(waiter),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',284).
% fluent BeWaiter2(waiter)
% fluent(
%    beWaiter2(waiter)).
fluents([beWaiter2/1]).
% mpred_prop(
%    beWaiter2(waiter), 
%    fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',284).
mpred_prop(beWaiter2(waiter),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',286).
% fluent BeWaiter3(waiter)
% fluent(
%    beWaiter3(waiter)).
fluents([beWaiter3/1]).
% mpred_prop(
%    beWaiter3(waiter), 
%    fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',286).
mpred_prop(beWaiter3(waiter),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',288).
% fluent BeWaiter4(waiter)
% fluent(
%    beWaiter4(waiter)).
fluents([beWaiter4/1]).
% mpred_prop(
%    beWaiter4(waiter), 
%    fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',288).
mpred_prop(beWaiter4(waiter),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',290).
% fluent BeWaiter5(waiter)
% fluent(
%    beWaiter5(waiter)).
fluents([beWaiter5/1]).
% mpred_prop(
%    beWaiter5(waiter), 
%    fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',290).
mpred_prop(beWaiter5(waiter),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',292).
% fluent BeWaiter6(waiter)
% fluent(
%    beWaiter6(waiter)).
fluents([beWaiter6/1]).
% mpred_prop(
%    beWaiter6(waiter), 
%    fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',292).
mpred_prop(beWaiter6(waiter),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',294).
% fluent BeWaiter7(waiter)
% fluent(
%    beWaiter7(waiter)).
fluents([beWaiter7/1]).
% mpred_prop(
%    beWaiter7(waiter), 
%    fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',294).
mpred_prop(beWaiter7(waiter),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',296).
% fluent BeWaiter8(waiter)
% fluent(
%    beWaiter8(waiter)).
fluents([beWaiter8/1]).
% mpred_prop(
%    beWaiter8(waiter), 
%    fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',296).
mpred_prop(beWaiter8(waiter),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',298).
% fluent BeWaiter9(waiter)
% fluent(
%    beWaiter9(waiter)).
fluents([beWaiter9/1]).
% mpred_prop(
%    beWaiter9(waiter), 
%    fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',298).
mpred_prop(beWaiter9(waiter),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',300).
% xor BeWaiter0, BeWaiter1, BeWaiter2, BeWaiter3, BeWaiter4, BeWaiter5, BeWaiter6, BeWaiter7, BeWaiter8, BeWaiter9
% xor(
%    ==>, 
%    [ beWaiter0, 
%      beWaiter1, beWaiter1, beWaiter2, beWaiter3, beWaiter4, 
%                                     beWaiter5, 
%                                     beWaiter6, 
%                                     beWaiter7, 
%                                     beWaiter8, 
%                                     beWaiter9 ]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',300).
==>xor[ beWaiter0,
  beWaiter1,
  beWaiter2,
  beWaiter3,
  beWaiter4,
  beWaiter5,
  beWaiter6,
  beWaiter7,
  beWaiter8,
  beWaiter9
].


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',302).
% [waiter,agent,time]
% HoldsAt(BeWaiter0(waiter),time) ->
% Terminates(Greet(waiter,agent),
%            BeWaiter0(waiter),
%            time).
% '->'(
%    beWaiter0(Waiter), 
%    terminates(
%       greet(Waiter,Agent), 
%       beWaiter0(Waiter), 
%       Time)).
if beWaiter0(Waiter)then terminates(greet(Waiter, Agent), beWaiter0(Waiter)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',302).

 /*  reactive_rule([beWaiter0(Waiter)],
   	      [ terminates(greet(Waiter,Agent),
   			   at(beWaiter0(Waiter),Time),
   			   Terminates)
   	      ]).
 */
 %  "% =================================".


% [waiter,agent,time]
% HoldsAt(BeWaiter0(waiter),time) ->
% Initiates(Greet(waiter,agent),
%           BeWaiter1(waiter),
%           time).
% '->'(
%    beWaiter0(Waiter), 
%    initiates(
%       greet(Waiter,Agent), 
%       beWaiter1(Waiter), 
%       Time)).
if beWaiter0(Waiter)then initiates(greet(Waiter, Agent), beWaiter1(Waiter)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',309).

 /*  reactive_rule([beWaiter0(Waiter)],
   	      [ initiates(greet(Waiter,Agent),
   			  at(beWaiter1(Waiter),Time),
   			  Initiates)
   	      ]).
 */
 %  "% =================================".


% [waiter,agent,food,time]
% HoldsAt(BeWaiter1(waiter),time) ->
% Terminates(Order(agent,waiter,food),
%            BeWaiter1(waiter),
%            time).
% '->'(
%    beWaiter1(Waiter), 
%    terminates(
%       order(Agent,Waiter,Food), 
%       beWaiter1(Waiter), 
%       Time)).
if beWaiter1(Waiter)then terminates(order(Agent, Waiter, Food), beWaiter1(Waiter)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',315).

 /*  reactive_rule([beWaiter1(Waiter)],
   	      [ terminates(order(Agent,Waiter,Food),
   			   at(beWaiter1(Waiter),Time),
   			   Terminates)
   	      ]).
 */
 %  "% =================================".


% [waiter,agent,food,time]
% HoldsAt(BeWaiter1(waiter),time) ->
% Initiates(Order(agent,waiter,food),
%           BeWaiter2(waiter),
%           time).
% '->'(
%    beWaiter1(Waiter), 
%    initiates(
%       order(Agent,Waiter,Food), 
%       beWaiter2(Waiter), 
%       Time)).
if beWaiter1(Waiter)then initiates(order(Agent, Waiter, Food), beWaiter2(Waiter)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',321).

 /*  reactive_rule([beWaiter1(Waiter)],
   	      [ initiates(order(Agent,Waiter,Food),
   			  at(beWaiter2(Waiter),Time),
   			  Initiates)
   	      ]).
 */
 %  "% =================================".


% [restaurant,waiter,time]
% WaiterOf(restaurant)=waiter &
% HoldsAt(BeWaiter2(waiter),time) ->
% Happens(WalkThroughDoor12(waiter,KitchenDoorOf(restaurant)),time).
% '->'(
%    ','(
%       waiter(Restaurant,Waiter), 
%       beWaiter2(Waiter)), 
%    walkThroughDoor12(
%       Waiter, 
%       kitchenDoorOf(Restaurant))).
walkThroughDoor12(Waiter, kitchenDoorOf(Restaurant))if waiter(Restaurant, Waiter), beWaiter2(Waiter).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',327).

 /*  l_events(happens(walkThroughDoor12(Waiter,
   				   kitchenDoorOf(Restaurant)),
   		 Time_From,
   		 Time_From),
   	 [ waiter(Restaurant,Waiter),
   	   beWaiter2(Waiter)
   	 ]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       beWaiter2(Waiter), 
%       not(
%          walkThroughDoor12(
%             Waiter, 
%             kitchenDoorOf(Restaurant)))), 
%    not(
%       waiter(Restaurant,Waiter))).
if beWaiter2(Waiter), not walkThroughDoor12(Waiter, kitchenDoorOf(Restaurant))then not waiter(Restaurant, Waiter).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',327).

 /*  reactive_rule([ beWaiter2(Waiter),
   		not(walkThroughDoor12(Waiter,
   				      kitchenDoorOf(Restaurant)))
   	      ],
   	      [not(waiter(Restaurant,Waiter))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       waiter(Restaurant,Waiter), 
%       not(
%          walkThroughDoor12(
%             Waiter, 
%             kitchenDoorOf(Restaurant)))), 
%    not(
%       beWaiter2(Waiter))).
if waiter(Restaurant, Waiter), not walkThroughDoor12(Waiter, kitchenDoorOf(Restaurant))then not beWaiter2(Waiter).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',327).

 /*  reactive_rule([ waiter(Restaurant,Waiter),
   		not(walkThroughDoor12(Waiter,
   				      kitchenDoorOf(Restaurant)))
   	      ],
   	      [not(beWaiter2(Waiter))]).
 */
 %  "% =================================".


% [restaurant,waiter,door,time]
% HoldsAt(BeWaiter2(waiter),time) &
% WaiterOf(restaurant)=waiter &
% KitchenDoorOf(restaurant)=door ->
% Terminates(WalkThroughDoor12(waiter,door),
%            BeWaiter2(waiter),
%            time).
% '->'(
%    ','(
%       beWaiter2(Waiter), 
%       ','(
%          waiter(Restaurant,Waiter), 
%          kitchenDoor(Restaurant,Door))), 
%    terminates(
%       walkThroughDoor12(Waiter,Door), 
%       beWaiter2(Waiter), 
%       Time)).
if beWaiter2(Waiter), waiter(Restaurant, Waiter), kitchenDoor(Restaurant, Door)then terminates(walkThroughDoor12(Waiter, Door), beWaiter2(Waiter)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',332).

 /*  reactive_rule([ beWaiter2(Waiter),
   		waiter(Restaurant,Waiter),
   		kitchenDoor(Restaurant,Door)
   	      ],
   	      [ terminates(walkThroughDoor12(Waiter,Door),
   			   at(beWaiter2(Waiter),Time),
   			   Terminates)
   	      ]).
 */
 %  "% =================================".


% [restaurant,waiter,door,time]
% HoldsAt(BeWaiter2(waiter),time) &
% WaiterOf(restaurant)=waiter &
% KitchenDoorOf(restaurant)=door ->
% Initiates(WalkThroughDoor12(waiter,door),
%           BeWaiter3(waiter),
%           time).
% '->'(
%    ','(
%       beWaiter2(Waiter), 
%       ','(
%          waiter(Restaurant,Waiter), 
%          kitchenDoor(Restaurant,Door))), 
%    initiates(
%       walkThroughDoor12(Waiter,Door), 
%       beWaiter3(Waiter), 
%       Time)).
if beWaiter2(Waiter), waiter(Restaurant, Waiter), kitchenDoor(Restaurant, Door)then initiates(walkThroughDoor12(Waiter, Door), beWaiter3(Waiter)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',340).

 /*  reactive_rule([ beWaiter2(Waiter),
   		waiter(Restaurant,Waiter),
   		kitchenDoor(Restaurant,Door)
   	      ],
   	      [ initiates(walkThroughDoor12(Waiter,Door),
   			  at(beWaiter3(Waiter),Time),
   			  Initiates)
   	      ]).
 */
 %  "% =================================".


% [restaurant,food,time]
% HoldsAt(BeWaiter3(WaiterOf(restaurant)),time) &
% ({agent} HoldsAt(KnowOrder(WaiterOf(restaurant),agent,food),time)) ->
% Happens(Order(WaiterOf(restaurant),CookOf(restaurant),food),time).
% '->'(
%    ','(
%       beWaiter3(
%          waiterOf(Restaurant)), 
%       knowOrder(
%          waiterOf(Restaurant), 
%          Agent, 
%          Food)), 
%    order(
%       waiterOf(Restaurant), 
%       cookOf(Restaurant), 
%       Food)).
order(waiterOf(Restaurant), cookOf(Restaurant), Food)if beWaiter3(waiterOf(Restaurant)), knowOrder(waiterOf(Restaurant), Agent, Food).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',348).

 /*  l_events(happens(order(waiterOf(Restaurant),
   		       cookOf(Restaurant),
   		       Food),
   		 Time_From,
   		 Time_From),
   	 [ beWaiter3(waiterOf(Restaurant)),
   	   holds(knowOrder(waiterOf(Restaurant),
   			   Agent,
   			   Food),
   		 Time_From)
   	 ]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       knowOrder(
%          waiterOf(Restaurant), 
%          Agent, 
%          Food), 
%       not(
%          order(
%             waiterOf(Restaurant), 
%             cookOf(Restaurant), 
%             Food))), 
%    not(
%       beWaiter3(
%          waiterOf(Restaurant)))).
if knowOrder(waiterOf(Restaurant), Agent, Food), not order(waiterOf(Restaurant), cookOf(Restaurant), Food)then not beWaiter3(waiterOf(Restaurant)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',348).

 /*  reactive_rule([ holds(knowOrder(waiterOf(Restaurant),
   				Agent,
   				Food),
   		      Time_At),
   		not(order(waiterOf(Restaurant),
   			  cookOf(Restaurant),
   			  Food))
   	      ],
   	      [not(beWaiter3(waiterOf(Restaurant)))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       beWaiter3(
%          waiterOf(Restaurant)), 
%       not(
%          order(
%             waiterOf(Restaurant), 
%             cookOf(Restaurant), 
%             Food))), 
%    not(
%       knowOrder(
%          waiterOf(Restaurant), 
%          Agent, 
%          Food))).
not knowOrder(waiterOf(Restaurant), Agent, Food)if beWaiter3(waiterOf(Restaurant)), not order(waiterOf(Restaurant), cookOf(Restaurant), Food).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',348).

 /*  l_int(holds(not(knowOrder(waiterOf(Restaurant),
   			  Agent,
   			  Food)),
   	    Time_At6),
         [ beWaiter3(waiterOf(Restaurant)),
   	not(order(waiterOf(Restaurant),
   		  cookOf(Restaurant),
   		  Food))
         ]).
 */
 %  "% =================================".


% [restaurant,waiter,cook,food,time]
% WaiterOf(restaurant)=waiter &
% CookOf(restaurant)=cook &
% HoldsAt(BeWaiter3(waiter),time) ->
% Terminates(Order(waiter,cook,food),
%            BeWaiter3(waiter),
%            time).
% '->'(
%    ','(
%       waiter(Restaurant,Waiter), 
%       ','(
%          cook(Restaurant,Cook), 
%          beWaiter3(Waiter))), 
%    terminates(
%       order(Waiter,Cook,Food), 
%       beWaiter3(Waiter), 
%       Time)).
if waiter(Restaurant, Waiter), cook(Restaurant, Cook), beWaiter3(Waiter)then terminates(order(Waiter, Cook, Food), beWaiter3(Waiter)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',353).

 /*  reactive_rule([ waiter(Restaurant,Waiter),
   		cook(Restaurant,Cook),
   		beWaiter3(Waiter)
   	      ],
   	      [ terminates(order(Waiter,Cook,Food),
   			   at(beWaiter3(Waiter),Time),
   			   Terminates)
   	      ]).
 */
 %  "% =================================".


% [restaurant,waiter,cook,food,time]
% WaiterOf(restaurant)=waiter &
% CookOf(restaurant)=cook &
% HoldsAt(BeWaiter3(waiter),time) ->
% Initiates(Order(waiter,cook,food),
%           BeWaiter4(waiter),
%           time).
% '->'(
%    ','(
%       waiter(Restaurant,Waiter), 
%       ','(
%          cook(Restaurant,Cook), 
%          beWaiter3(Waiter))), 
%    initiates(
%       order(Waiter,Cook,Food), 
%       beWaiter4(Waiter), 
%       Time)).
if waiter(Restaurant, Waiter), cook(Restaurant, Cook), beWaiter3(Waiter)then initiates(order(Waiter, Cook, Food), beWaiter4(Waiter)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',361).

 /*  reactive_rule([ waiter(Restaurant,Waiter),
   		cook(Restaurant,Cook),
   		beWaiter3(Waiter)
   	      ],
   	      [ initiates(order(Waiter,Cook,Food),
   			  at(beWaiter4(Waiter),Time),
   			  Initiates)
   	      ]).
 */
 %  "% =================================".


% [waiter,food,time]
% HoldsAt(BeWaiter4(waiter),time) &
% ({agent} HoldsAt(KnowOrder(waiter,agent,food),time)) &
% HoldsAt(FoodPrepared(food),time) ->
% Happens(PickUp(waiter,food),time).
% '->'(
%    ','(
%       beWaiter4(Waiter), 
%       ','(
%          knowOrder(Waiter,Agent,Food), 
%          foodPrepared(Food))), 
%    pickUp(Waiter,Food)).
pickUp(Waiter, Food)if beWaiter4(Waiter), knowOrder(Waiter, Agent, Food), foodPrepared(Food).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',369).

 /*  l_events(happens(pickUp(Waiter,Food),
   		 Time_From,
   		 Time_From),
   	 [ beWaiter4(Waiter),
   	   holds(knowOrder(Waiter,Agent,Food),
   		 Time_From),
   	   holds(foodPrepared(Food),Time_From)
   	 ]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       knowOrder(Waiter,Agent,Food), 
%       ','(
%          foodPrepared(Food), 
%          not(
%             pickUp(Waiter,Food)))), 
%    not(
%       beWaiter4(Waiter))).
if knowOrder(Waiter, Agent, Food), foodPrepared(Food), not pickUp(Waiter, Food)then not beWaiter4(Waiter).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',369).

 /*  reactive_rule([ holds(knowOrder(Waiter,Agent,Food),
   		      Time_At),
   		holds(foodPrepared(Food),Time_At),
   		not(pickUp(Waiter,Food))
   	      ],
   	      [not(beWaiter4(Waiter))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       foodPrepared(Food), 
%       ','(
%          beWaiter4(Waiter), 
%          not(
%             pickUp(Waiter,Food)))), 
%    not(
%       knowOrder(Waiter,Agent,Food))).
not knowOrder(Waiter, Agent, Food)if foodPrepared(Food), beWaiter4(Waiter), not pickUp(Waiter, Food).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',369).

 /*  l_int(holds(not(knowOrder(Waiter,Agent,Food)),
   	    Time_At6),
         [ holds(foodPrepared(Food),Time_At6),
   	beWaiter4(Waiter),
   	not(pickUp(Waiter,Food))
         ]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       knowOrder(Waiter,Agent,Food), 
%       ','(
%          beWaiter4(Waiter), 
%          not(
%             pickUp(Waiter,Food)))), 
%    not(
%       foodPrepared(Food))).
not foodPrepared(Food)if knowOrder(Waiter, Agent, Food), beWaiter4(Waiter), not pickUp(Waiter, Food).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',369).

 /*  l_int(holds(not(foodPrepared(Food)),Time_At7),
         [ holds(knowOrder(Waiter,Agent,Food),
   	      Time_At7),
   	beWaiter4(Waiter),
   	not(pickUp(Waiter,Food))
         ]).
 */
 %  "% =================================".


% [waiter,food,time]
% HoldsAt(BeWaiter4(waiter),time) &
% ({agent} HoldsAt(KnowOrder(waiter,agent,food),time)) ->
% Terminates(PickUp(waiter,food),
%            BeWaiter4(waiter),
%            time).
% '->'(
%    ','(
%       beWaiter4(Waiter), 
%       knowOrder(Waiter,Agent,Food)), 
%    terminates(
%       pickUp(Waiter,Food), 
%       beWaiter4(Waiter), 
%       Time)).
if beWaiter4(Waiter), knowOrder(Waiter, Agent, Food)then terminates(pickUp(Waiter, Food), beWaiter4(Waiter)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',375).

 /*  reactive_rule([ beWaiter4(Waiter),
   		holds(knowOrder(Waiter,Agent,Food),
   		      Time_At)
   	      ],
   	      [ terminates(pickUp(Waiter,Food),
   			   at(beWaiter4(Waiter),Time),
   			   Terminates)
   	      ]).
 */
 %  "% =================================".


% [waiter,food,time]
% HoldsAt(BeWaiter4(waiter),time) &
% ({agent} HoldsAt(KnowOrder(waiter,agent,food),time)) ->
% Initiates(PickUp(waiter,food),
%           BeWaiter5(waiter),
%           time).
% '->'(
%    ','(
%       beWaiter4(Waiter), 
%       knowOrder(Waiter,Agent,Food)), 
%    initiates(
%       pickUp(Waiter,Food), 
%       beWaiter5(Waiter), 
%       Time)).
if beWaiter4(Waiter), knowOrder(Waiter, Agent, Food)then initiates(pickUp(Waiter, Food), beWaiter5(Waiter)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',382).

 /*  reactive_rule([ beWaiter4(Waiter),
   		holds(knowOrder(Waiter,Agent,Food),
   		      Time_At)
   	      ],
   	      [ initiates(pickUp(Waiter,Food),
   			  at(beWaiter5(Waiter),Time),
   			  Initiates)
   	      ]).
 */
 %  "% =================================".


% [restaurant,waiter,time]
% WaiterOf(restaurant)=waiter &
% HoldsAt(BeWaiter5(waiter),time) ->
% Happens(WalkThroughDoor21(waiter,KitchenDoorOf(restaurant)),time).
% '->'(
%    ','(
%       waiter(Restaurant,Waiter), 
%       beWaiter5(Waiter)), 
%    walkThroughDoor21(
%       Waiter, 
%       kitchenDoorOf(Restaurant))).
walkThroughDoor21(Waiter, kitchenDoorOf(Restaurant))if waiter(Restaurant, Waiter), beWaiter5(Waiter).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',389).

 /*  l_events(happens(walkThroughDoor21(Waiter,
   				   kitchenDoorOf(Restaurant)),
   		 Time_From,
   		 Time_From),
   	 [ waiter(Restaurant,Waiter),
   	   beWaiter5(Waiter)
   	 ]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       beWaiter5(Waiter), 
%       not(
%          walkThroughDoor21(
%             Waiter, 
%             kitchenDoorOf(Restaurant)))), 
%    not(
%       waiter(Restaurant,Waiter))).
if beWaiter5(Waiter), not walkThroughDoor21(Waiter, kitchenDoorOf(Restaurant))then not waiter(Restaurant, Waiter).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',389).

 /*  reactive_rule([ beWaiter5(Waiter),
   		not(walkThroughDoor21(Waiter,
   				      kitchenDoorOf(Restaurant)))
   	      ],
   	      [not(waiter(Restaurant,Waiter))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       waiter(Restaurant,Waiter), 
%       not(
%          walkThroughDoor21(
%             Waiter, 
%             kitchenDoorOf(Restaurant)))), 
%    not(
%       beWaiter5(Waiter))).
if waiter(Restaurant, Waiter), not walkThroughDoor21(Waiter, kitchenDoorOf(Restaurant))then not beWaiter5(Waiter).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',389).

 /*  reactive_rule([ waiter(Restaurant,Waiter),
   		not(walkThroughDoor21(Waiter,
   				      kitchenDoorOf(Restaurant)))
   	      ],
   	      [not(beWaiter5(Waiter))]).
 */
 %  "% =================================".


% [restaurant,waiter,door,time]
% HoldsAt(BeWaiter5(waiter),time) &
% WaiterOf(restaurant)=waiter &
% KitchenDoorOf(restaurant)=door ->
% Terminates(WalkThroughDoor21(waiter,door),
%            BeWaiter5(waiter),
%            time).
% '->'(
%    ','(
%       beWaiter5(Waiter), 
%       ','(
%          waiter(Restaurant,Waiter), 
%          kitchenDoor(Restaurant,Door))), 
%    terminates(
%       walkThroughDoor21(Waiter,Door), 
%       beWaiter5(Waiter), 
%       Time)).
if beWaiter5(Waiter), waiter(Restaurant, Waiter), kitchenDoor(Restaurant, Door)then terminates(walkThroughDoor21(Waiter, Door), beWaiter5(Waiter)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',394).

 /*  reactive_rule([ beWaiter5(Waiter),
   		waiter(Restaurant,Waiter),
   		kitchenDoor(Restaurant,Door)
   	      ],
   	      [ terminates(walkThroughDoor21(Waiter,Door),
   			   at(beWaiter5(Waiter),Time),
   			   Terminates)
   	      ]).
 */
 %  "% =================================".


% [restaurant,waiter,door,time]
% HoldsAt(BeWaiter5(waiter),time) &
% WaiterOf(restaurant)=waiter &
% KitchenDoorOf(restaurant)=door ->
% Initiates(WalkThroughDoor21(waiter,door),
%           BeWaiter6(waiter),
%           time).
% '->'(
%    ','(
%       beWaiter5(Waiter), 
%       ','(
%          waiter(Restaurant,Waiter), 
%          kitchenDoor(Restaurant,Door))), 
%    initiates(
%       walkThroughDoor21(Waiter,Door), 
%       beWaiter6(Waiter), 
%       Time)).
if beWaiter5(Waiter), waiter(Restaurant, Waiter), kitchenDoor(Restaurant, Door)then initiates(walkThroughDoor21(Waiter, Door), beWaiter6(Waiter)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',402).

 /*  reactive_rule([ beWaiter5(Waiter),
   		waiter(Restaurant,Waiter),
   		kitchenDoor(Restaurant,Door)
   	      ],
   	      [ initiates(walkThroughDoor21(Waiter,Door),
   			  at(beWaiter6(Waiter),Time),
   			  Initiates)
   	      ]).
 */
 %  "% =================================".


% [restaurant,waiter,table,food,time]
% WaiterOf(restaurant)=waiter &
% TableOf(restaurant)=table &
% HoldsAt(BeWaiter6(waiter),time) &
% HoldsAt(Holding(waiter,food),time) ->
% Happens(PlaceOn(waiter,food,table),time).
% '->'(
%    ','(
%       waiter(Restaurant,Waiter), 
%       ','(
%          table(Restaurant,Table), 
%          ','(
%             beWaiter6(Waiter), 
%             holding(Waiter,Food)))), 
%    placeOn(Waiter,Food,Table)).
placeOn(Waiter, Food, Table)if waiter(Restaurant, Waiter), table(Restaurant, Table), beWaiter6(Waiter), holding(Waiter, Food).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',410).

 /*  l_events(happens(placeOn(Waiter,Food,Table),
   		 Time_From,
   		 Time_From),
   	 [ waiter(Restaurant,Waiter),
   	   table(Restaurant,Table),
   	   beWaiter6(Waiter),
   	   holds(holding(Waiter,Food),Time_From)
   	 ]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       table(Restaurant,Table), 
%       ','(
%          beWaiter6(Waiter), 
%          ','(
%             holding(Waiter,Food), 
%             not(
%                placeOn(Waiter,Food,Table))))), 
%    not(
%       waiter(Restaurant,Waiter))).
if table(Restaurant, Table), beWaiter6(Waiter), holding(Waiter, Food), not placeOn(Waiter, Food, Table)then not waiter(Restaurant, Waiter).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',410).

 /*  reactive_rule([ table(Restaurant,Table),
   		beWaiter6(Waiter),
   		holds(holding(Waiter,Food),Time_At),
   		not(placeOn(Waiter,Food,Table))
   	      ],
   	      [not(waiter(Restaurant,Waiter))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       beWaiter6(Waiter), 
%       ','(
%          holding(Waiter,Food), 
%          ','(
%             waiter(Restaurant,Waiter), 
%             not(
%                placeOn(Waiter,Food,Table))))), 
%    not(
%       table(Restaurant,Table))).
if beWaiter6(Waiter), holding(Waiter, Food), waiter(Restaurant, Waiter), not placeOn(Waiter, Food, Table)then not table(Restaurant, Table).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',410).

 /*  reactive_rule([ beWaiter6(Waiter),
   		holds(holding(Waiter,Food),Time_At7),
   		waiter(Restaurant,Waiter),
   		not(placeOn(Waiter,Food,Table))
   	      ],
   	      [not(table(Restaurant,Table))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       holding(Waiter,Food), 
%       ','(
%          table(Restaurant,Table), 
%          ','(
%             waiter(Restaurant,Waiter), 
%             not(
%                placeOn(Waiter,Food,Table))))), 
%    not(
%       beWaiter6(Waiter))).
if holding(Waiter, Food), table(Restaurant, Table), waiter(Restaurant, Waiter), not placeOn(Waiter, Food, Table)then not beWaiter6(Waiter).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',410).

 /*  reactive_rule([ holds(holding(Waiter,Food),Time_At8),
   		table(Restaurant,Table),
   		waiter(Restaurant,Waiter),
   		not(placeOn(Waiter,Food,Table))
   	      ],
   	      [not(beWaiter6(Waiter))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       beWaiter6(Waiter), 
%       ','(
%          table(Restaurant,Table), 
%          ','(
%             waiter(Restaurant,Waiter), 
%             not(
%                placeOn(Waiter,Food,Table))))), 
%    not(
%       holding(Waiter,Food))).
not holding(Waiter, Food)if beWaiter6(Waiter), table(Restaurant, Table), waiter(Restaurant, Waiter), not placeOn(Waiter, Food, Table).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',410).

 /*  l_int(holds(not(holding(Waiter,Food)),Time_At9),
         [ beWaiter6(Waiter),
   	table(Restaurant,Table),
   	waiter(Restaurant,Waiter),
   	not(placeOn(Waiter,Food,Table))
         ]).
 */
 %  "% =================================".


% [waiter,food,table,time]
% HoldsAt(BeWaiter6(waiter),time) ->
% Terminates(PlaceOn(waiter,food,table),
%            BeWaiter6(waiter),
%            time).
% '->'(
%    beWaiter6(Waiter), 
%    terminates(
%       placeOn(Waiter,Food,Table), 
%       beWaiter6(Waiter), 
%       Time)).
if beWaiter6(Waiter)then terminates(placeOn(Waiter, Food, Table), beWaiter6(Waiter)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',417).

 /*  reactive_rule([beWaiter6(Waiter)],
   	      [ terminates(placeOn(Waiter,Food,Table),
   			   at(beWaiter6(Waiter),Time),
   			   Terminates)
   	      ]).
 */
 %  "% =================================".


% [waiter,food,table,time]
% HoldsAt(BeWaiter6(waiter),time) ->
% Initiates(PlaceOn(waiter,food,table),
%           BeWaiter7(waiter),
%           time).
% '->'(
%    beWaiter6(Waiter), 
%    initiates(
%       placeOn(Waiter,Food,Table), 
%       beWaiter7(Waiter), 
%       Time)).
if beWaiter6(Waiter)then initiates(placeOn(Waiter, Food, Table), beWaiter7(Waiter)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',423).

 /*  reactive_rule([beWaiter6(Waiter)],
   	      [ initiates(placeOn(Waiter,Food,Table),
   			  at(beWaiter7(Waiter),Time),
   			  Initiates)
   	      ]).
 */
 %  "% =================================".


% [waiter,agent,bill,time]
% HoldsAt(BeWaiter7(waiter),time) ->
% Terminates(Request(agent,waiter,bill),
%            BeWaiter7(waiter),
%            time).
% '->'(
%    beWaiter7(Waiter), 
%    terminates(
%       request(Agent,Waiter,Bill), 
%       beWaiter7(Waiter), 
%       Time)).
if beWaiter7(Waiter)then terminates(request(Agent, Waiter, Bill), beWaiter7(Waiter)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',429).

 /*  reactive_rule([beWaiter7(Waiter)],
   	      [ terminates(request(Agent,Waiter,Bill),
   			   at(beWaiter7(Waiter),Time),
   			   Terminates)
   	      ]).
 */
 %  "% =================================".


% [waiter,agent,bill,time]
% HoldsAt(BeWaiter7(waiter),time) ->
% Initiates(Request(agent,waiter,bill),
%           BeWaiter8(waiter),
%           time).
% '->'(
%    beWaiter7(Waiter), 
%    initiates(
%       request(Agent,Waiter,Bill), 
%       beWaiter8(Waiter), 
%       Time)).
if beWaiter7(Waiter)then initiates(request(Agent, Waiter, Bill), beWaiter8(Waiter)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',435).

 /*  reactive_rule([beWaiter7(Waiter)],
   	      [ initiates(request(Agent,Waiter,Bill),
   			  at(beWaiter8(Waiter),Time),
   			  Initiates)
   	      ]).
 */
 %  "% =================================".


% [restaurant,waiter,bill,time]
% WaiterOf(restaurant)=waiter &
% BillOf(restaurant)=bill &
% HoldsAt(BeWaiter8(waiter),time) ->
% Happens(PickUp(waiter,bill),time).
% '->'(
%    ','(
%       waiter(Restaurant,Waiter), 
%       ','(
%          bill(Restaurant,Bill), 
%          beWaiter8(Waiter))), 
%    pickUp(Waiter,Bill)).
pickUp(Waiter, Bill)if waiter(Restaurant, Waiter), bill(Restaurant, Bill), beWaiter8(Waiter).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',441).

 /*  l_events(happens(pickUp(Waiter,Bill),
   		 Time_From,
   		 Time_From),
   	 [ waiter(Restaurant,Waiter),
   	   bill(Restaurant,Bill),
   	   beWaiter8(Waiter)
   	 ]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       bill(Restaurant,Bill), 
%       ','(
%          beWaiter8(Waiter), 
%          not(
%             pickUp(Waiter,Bill)))), 
%    not(
%       waiter(Restaurant,Waiter))).
if bill(Restaurant, Bill), beWaiter8(Waiter), not pickUp(Waiter, Bill)then not waiter(Restaurant, Waiter).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',441).

 /*  reactive_rule([ bill(Restaurant,Bill),
   		beWaiter8(Waiter),
   		not(pickUp(Waiter,Bill))
   	      ],
   	      [not(waiter(Restaurant,Waiter))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       beWaiter8(Waiter), 
%       ','(
%          waiter(Restaurant,Waiter), 
%          not(
%             pickUp(Waiter,Bill)))), 
%    not(
%       bill(Restaurant,Bill))).
if beWaiter8(Waiter), waiter(Restaurant, Waiter), not pickUp(Waiter, Bill)then not bill(Restaurant, Bill).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',441).

 /*  reactive_rule([ beWaiter8(Waiter),
   		waiter(Restaurant,Waiter),
   		not(pickUp(Waiter,Bill))
   	      ],
   	      [not(bill(Restaurant,Bill))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       bill(Restaurant,Bill), 
%       ','(
%          waiter(Restaurant,Waiter), 
%          not(
%             pickUp(Waiter,Bill)))), 
%    not(
%       beWaiter8(Waiter))).
if bill(Restaurant, Bill), waiter(Restaurant, Waiter), not pickUp(Waiter, Bill)then not beWaiter8(Waiter).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',441).

 /*  reactive_rule([ bill(Restaurant,Bill),
   		waiter(Restaurant,Waiter),
   		not(pickUp(Waiter,Bill))
   	      ],
   	      [not(beWaiter8(Waiter))]).
 */
 %  "% =================================".


% [waiter,bill,time]
% HoldsAt(BeWaiter8(waiter),time) ->
% Terminates(PickUp(waiter,bill),
%            BeWaiter8(waiter),
%            time).
% '->'(
%    beWaiter8(Waiter), 
%    terminates(
%       pickUp(Waiter,Bill), 
%       beWaiter8(Waiter), 
%       Time)).
if beWaiter8(Waiter)then terminates(pickUp(Waiter, Bill), beWaiter8(Waiter)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',447).

 /*  reactive_rule([beWaiter8(Waiter)],
   	      [ terminates(pickUp(Waiter,Bill),
   			   at(beWaiter8(Waiter),Time),
   			   Terminates)
   	      ]).
 */
 %  "% =================================".


% [waiter,bill,time]
% HoldsAt(BeWaiter8(waiter),time) ->
% Initiates(PickUp(waiter,bill),
%           BeWaiter9(waiter),
%           time).
% '->'(
%    beWaiter8(Waiter), 
%    initiates(
%       pickUp(Waiter,Bill), 
%       beWaiter9(Waiter), 
%       Time)).
if beWaiter8(Waiter)then initiates(pickUp(Waiter, Bill), beWaiter9(Waiter)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',453).

 /*  reactive_rule([beWaiter8(Waiter)],
   	      [ initiates(pickUp(Waiter,Bill),
   			  at(beWaiter9(Waiter),Time),
   			  Initiates)
   	      ]).
 */
 %  "% =================================".


% [restaurant,waiter,bill,table,time]
% WaiterOf(restaurant)=waiter &
% BillOf(restaurant)=bill &
% TableOf(restaurant)=table &
% HoldsAt(BeWaiter9(waiter),time) ->
% Happens(PlaceOn(waiter,bill,table),time).
% '->'(
%    ','(
%       waiter(Restaurant,Waiter), 
%       ','(
%          bill(Restaurant,Bill), 
%          ','(
%             table(Restaurant,Table), 
%             beWaiter9(Waiter)))), 
%    placeOn(Waiter,Bill,Table)).
placeOn(Waiter, Bill, Table)if waiter(Restaurant, Waiter), bill(Restaurant, Bill), table(Restaurant, Table), beWaiter9(Waiter).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',459).

 /*  l_events(happens(placeOn(Waiter,Bill,Table),
   		 Time_From,
   		 Time_From),
   	 [ waiter(Restaurant,Waiter),
   	   bill(Restaurant,Bill),
   	   table(Restaurant,Table),
   	   beWaiter9(Waiter)
   	 ]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       bill(Restaurant,Bill), 
%       ','(
%          table(Restaurant,Table), 
%          ','(
%             beWaiter9(Waiter), 
%             not(
%                placeOn(Waiter,Bill,Table))))), 
%    not(
%       waiter(Restaurant,Waiter))).
if bill(Restaurant, Bill), table(Restaurant, Table), beWaiter9(Waiter), not placeOn(Waiter, Bill, Table)then not waiter(Restaurant, Waiter).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',459).

 /*  reactive_rule([ bill(Restaurant,Bill),
   		table(Restaurant,Table),
   		beWaiter9(Waiter),
   		not(placeOn(Waiter,Bill,Table))
   	      ],
   	      [not(waiter(Restaurant,Waiter))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       table(Restaurant,Table), 
%       ','(
%          beWaiter9(Waiter), 
%          ','(
%             waiter(Restaurant,Waiter), 
%             not(
%                placeOn(Waiter,Bill,Table))))), 
%    not(
%       bill(Restaurant,Bill))).
if table(Restaurant, Table), beWaiter9(Waiter), waiter(Restaurant, Waiter), not placeOn(Waiter, Bill, Table)then not bill(Restaurant, Bill).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',459).

 /*  reactive_rule([ table(Restaurant,Table),
   		beWaiter9(Waiter),
   		waiter(Restaurant,Waiter),
   		not(placeOn(Waiter,Bill,Table))
   	      ],
   	      [not(bill(Restaurant,Bill))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       beWaiter9(Waiter), 
%       ','(
%          bill(Restaurant,Bill), 
%          ','(
%             waiter(Restaurant,Waiter), 
%             not(
%                placeOn(Waiter,Bill,Table))))), 
%    not(
%       table(Restaurant,Table))).
if beWaiter9(Waiter), bill(Restaurant, Bill), waiter(Restaurant, Waiter), not placeOn(Waiter, Bill, Table)then not table(Restaurant, Table).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',459).

 /*  reactive_rule([ beWaiter9(Waiter),
   		bill(Restaurant,Bill),
   		waiter(Restaurant,Waiter),
   		not(placeOn(Waiter,Bill,Table))
   	      ],
   	      [not(table(Restaurant,Table))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       table(Restaurant,Table), 
%       ','(
%          bill(Restaurant,Bill), 
%          ','(
%             waiter(Restaurant,Waiter), 
%             not(
%                placeOn(Waiter,Bill,Table))))), 
%    not(
%       beWaiter9(Waiter))).
if table(Restaurant, Table), bill(Restaurant, Bill), waiter(Restaurant, Waiter), not placeOn(Waiter, Bill, Table)then not beWaiter9(Waiter).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',459).

 /*  reactive_rule([ table(Restaurant,Table),
   		bill(Restaurant,Bill),
   		waiter(Restaurant,Waiter),
   		not(placeOn(Waiter,Bill,Table))
   	      ],
   	      [not(beWaiter9(Waiter))]).
 */
 %  "% =================================".


% [waiter,bill,table,time]
% HoldsAt(BeWaiter9(waiter),time) ->
% Terminates(PlaceOn(waiter,bill,table),
%            BeWaiter9(waiter),
%            time).
% '->'(
%    beWaiter9(Waiter), 
%    terminates(
%       placeOn(Waiter,Bill,Table), 
%       beWaiter9(Waiter), 
%       Time)).
if beWaiter9(Waiter)then terminates(placeOn(Waiter, Bill, Table), beWaiter9(Waiter)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',466).

 /*  reactive_rule([beWaiter9(Waiter)],
   	      [ terminates(placeOn(Waiter,Bill,Table),
   			   at(beWaiter9(Waiter),Time),
   			   Terminates)
   	      ]).
 */
 %  "% =================================".


% [waiter,bill,table,time]
% HoldsAt(BeWaiter9(waiter),time) ->
% Initiates(PlaceOn(waiter,bill,table),
%           BeWaiter0(waiter),
%           time).
% '->'(
%    beWaiter9(Waiter), 
%    initiates(
%       placeOn(Waiter,Bill,Table), 
%       beWaiter0(Waiter), 
%       Time)).
if beWaiter9(Waiter)then initiates(placeOn(Waiter, Bill, Table), beWaiter0(Waiter)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',472).

 /*  reactive_rule([beWaiter9(Waiter)],
   	      [ initiates(placeOn(Waiter,Bill,Table),
   			  at(beWaiter0(Waiter),Time),
   			  Initiates)
   	      ]).
 */
 %  "% =================================".

% fluent BeCook0(cook)
% fluent(
%    beCook0(cook)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',476).
fluents([beCook0/1]).
% mpred_prop(
%    beCook0(cook), 
%    fluent).
mpred_prop(beCook0(cook),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',479).
% fluent BeCook1(cook)
% fluent(
%    beCook1(cook)).
fluents([beCook1/1]).
% mpred_prop(
%    beCook1(cook), 
%    fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',479).
mpred_prop(beCook1(cook),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',481).
% xor BeCook0, BeCook1
% xor(
%    ==>, 
%    [ beCook0, 
%      beCook1 ]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',481).
==>xor[beCook0,beCook1].


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',483).
% [cook,agent,food,time]
% HoldsAt(BeCook0(cook),time) ->
% Terminates(Order(agent,cook,food),
%            BeCook0(cook),
%            time).
% '->'(
%    beCook0(Cook), 
%    terminates(
%       order(Agent,Cook,Food), 
%       beCook0(Cook), 
%       Time)).
if beCook0(Cook)then terminates(order(Agent, Cook, Food), beCook0(Cook)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',483).

 /*  reactive_rule([beCook0(Cook)],
   	      [ terminates(order(Agent,Cook,Food),
   			   at(beCook0(Cook),Time),
   			   Terminates)
   	      ]).
 */
 %  "% =================================".


% [cook,agent,food,time]
% HoldsAt(BeCook0(cook),time) ->
% Initiates(Order(agent,cook,food),
%           BeCook1(cook),
%           time).
% '->'(
%    beCook0(Cook), 
%    initiates(
%       order(Agent,Cook,Food), 
%       beCook1(Cook), 
%       Time)).
if beCook0(Cook)then initiates(order(Agent, Cook, Food), beCook1(Cook)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',490).

 /*  reactive_rule([beCook0(Cook)],
   	      [ initiates(order(Agent,Cook,Food),
   			  at(beCook1(Cook),Time),
   			  Initiates)
   	      ]).
 */
 %  "% =================================".

% event FoodPrepare(agent,food)
% event(
%    foodPrepare(agent,food)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',494).
actions([foodPrepare/2]).
% mpred_prop(
%    foodPrepare(agent,food), 
%    event).
mpred_prop(foodPrepare(agent,food),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',497).
% fluent FoodPrepared(food)
% fluent(
%    foodPrepared(food)).
fluents([foodPrepared/1]).
% mpred_prop(
%    foodPrepared(food), 
%    fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',497).
mpred_prop(foodPrepared(food),fluent).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',499).
% [agent,food,time]
% Initiates(FoodPrepare(agent,food),
%           FoodPrepared(food),
%           time).
% initiates(
%    foodPrepare(Agent,Food), 
%    foodPrepared(Food), 
%    Time).
foodPrepare(Agent, Food)initiates foodPrepared(Food).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',499).

 /*  initiated(happens(foodPrepare(Agent,Food),
   		  Time_From,
   		  Time_Until),
   	  foodPrepared(Food),
   	  []).
 */
 %  "% =================================".


% [agent,food,time]
% Happens(FoodPrepare(agent,food),time) ->
% {location}% 
% HoldsAt(At(agent,location),time) &
% HoldsAt(At(food,location),time).
% '->'(
%    ','(
%       ';'(
%          not(
%             at(Agent,Exists_Location)), 
%          not(
%             at(Food,Exists_Location))), 
%       some(
%          Exists_Location, 
%          '$kolem_Fn_717'(Agent,Food,Time))), 
%    not(
%       foodPrepare(Agent,Food))).
if (not loc_at(Agent, Exists_Location);not loc_at(Food, Exists_Location)), some(Exists_Location, '$kolem_Fn_717'(Agent, Food, Time))then not foodPrepare(Agent, Food).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',505).

 /*   reactive_rule([  (not(loc_at(Agent, Exists_Location));not(loc_at(Food, Exists_Location))),
                      some(Exists_Location,
                           '$kolem_Fn_717'(Agent, Food, Time))
                    ],
                    [not(foodPrepare(Agent, Food))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       foodPrepare(Agent,Food), 
%       some(
%          Exists_Location, 
%          '$kolem_Fn_717'(Agent,Food,Time))), 
%    at(Agent,Exists_Location)).
if foodPrepare(Agent, Food), some(Exists_Location, '$kolem_Fn_717'(Agent, Food, Time))then loc_at(Agent, Exists_Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',505).

 /*  reactive_rule([ happens(foodPrepare(Agent,Food),
   			Time_From,
   			Time_Until),
   		some(Exists_Location,
   		     '$kolem_Fn_717'(Agent,Food,Time))
   	      ],
   	      [loc_at(Agent,Exists_Location)]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       foodPrepare(Agent,Food), 
%       some(
%          Exists_Location, 
%          '$kolem_Fn_717'(Agent,Food,Time))), 
%    at(Food,Exists_Location)).
if foodPrepare(Agent, Food), some(Exists_Location, '$kolem_Fn_717'(Agent, Food, Time))then loc_at(Food, Exists_Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',505).

 /*  reactive_rule([ happens(foodPrepare(Agent,Food),
   			Time_From7,
   			Time_Until8),
   		some(Exists_Location,
   		     '$kolem_Fn_717'(Agent,Food,Time))
   	      ],
   	      [loc_at(Food,Exists_Location)]).
 */
 %  "% =================================".


% [cook,agent,food,time]
% HoldsAt(BeCook1(cook),time) &
% HoldsAt(KnowOrder(cook,agent,food),time) ->
% Happens(FoodPrepare(cook,food),time).
% '->'(
%    ','(
%       beCook1(Cook), 
%       knowOrder(Cook,Agent,Food)), 
%    foodPrepare(Cook,Food)).
foodPrepare(Cook, Food)if beCook1(Cook), knowOrder(Cook, Agent, Food).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',511).

 /*  l_events(happens(foodPrepare(Cook,Food),
   		 Time_From,
   		 Time_From),
   	 [ beCook1(Cook),
   	   holds(knowOrder(Cook,Agent,Food),
   		 Time_From)
   	 ]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       knowOrder(Cook,Agent,Food), 
%       not(
%          foodPrepare(Cook,Food))), 
%    not(
%       beCook1(Cook))).
if knowOrder(Cook, Agent, Food), not foodPrepare(Cook, Food)then not beCook1(Cook).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',511).

 /*  reactive_rule([ holds(knowOrder(Cook,Agent,Food),
   		      Time_At),
   		not(foodPrepare(Cook,Food))
   	      ],
   	      [not(beCook1(Cook))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       beCook1(Cook), 
%       not(
%          foodPrepare(Cook,Food))), 
%    not(
%       knowOrder(Cook,Agent,Food))).
not knowOrder(Cook, Agent, Food)if beCook1(Cook), not foodPrepare(Cook, Food).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',511).

 /*  l_int(holds(not(knowOrder(Cook,Agent,Food)),
   	    Time_At6),
         [beCook1(Cook),not(foodPrepare(Cook,Food))]).
 */
 %  "% =================================".


% [cook,food,time]
% HoldsAt(BeCook1(cook),time) ->
% Terminates(FoodPrepare(cook,food),
%            BeCook1(cook),
%            time).
% '->'(
%    beCook1(Cook), 
%    terminates(
%       foodPrepare(Cook,Food), 
%       beCook1(Cook), 
%       Time)).
if beCook1(Cook)then terminates(foodPrepare(Cook, Food), beCook1(Cook)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',516).

 /*  reactive_rule([beCook1(Cook)],
   	      [ terminates(foodPrepare(Cook,Food),
   			   at(beCook1(Cook),Time),
   			   Terminates)
   	      ]).
 */
 %  "% =================================".


% [cook,food,time]
% HoldsAt(BeCook1(cook),time) ->
% Initiates(FoodPrepare(cook,food),
%           BeCook0(cook),
%           time).
% '->'(
%    beCook1(Cook), 
%    initiates(
%       foodPrepare(Cook,Food), 
%       beCook0(Cook), 
%       Time)).
if beCook1(Cook)then initiates(foodPrepare(Cook, Food), beCook0(Cook)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',522).

 /*  reactive_rule([beCook1(Cook)],
   	      [ initiates(foodPrepare(Cook,Food),
   			  at(beCook0(Cook),Time),
   			  Initiates)
   	      ]).
 */
 %  "% =================================".

% event Pay(agent,agent)
% event(
%    pay(agent,agent)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',526).
actions([pay/2]).
% mpred_prop(
%    pay(agent,agent), 
%    event).
mpred_prop(pay(agent,agent),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',529).
% event Tip(agent,agent)
% event(
%    tip(agent,agent)).
actions([tip/2]).
% mpred_prop(
%    tip(agent,agent), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',529).
mpred_prop(tip(agent,agent),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',531).
% [agent,physobj,time]
% Happens(LieOn(agent,physobj),time) ->
% {room}% 
%  HoldsAt(At(agent,room),time) &
%  HoldsAt(At(physobj,room),time).
% '->'(
%    ','(
%       ';'(
%          not(
%             at(Agent,Exists_Room)), 
%          not(
%             at(Physobj,Exists_Room))), 
%       some(
%          Exists_Room, 
%          '$kolem_Fn_718'(Agent,Physobj,Time))), 
%    not(
%       lieOn(Agent,Physobj))).
if (not loc_at(Agent, Exists_Room);not loc_at(Physobj, Exists_Room)), some(Exists_Room, '$kolem_Fn_718'(Agent, Physobj, Time))then not lieOn(Agent, Physobj).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',533).

 /*   reactive_rule([  (not(loc_at(Agent, Exists_Room));not(loc_at(Physobj, Exists_Room))),
                      some(Exists_Room,
                           '$kolem_Fn_718'(Agent, Physobj, Time))
                    ],
                    [not(lieOn(Agent, Physobj))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       lieOn(Agent,Physobj), 
%       some(
%          Exists_Room, 
%          '$kolem_Fn_718'(Agent,Physobj,Time))), 
%    at(Agent,Exists_Room)).
if lieOn(Agent, Physobj), some(Exists_Room, '$kolem_Fn_718'(Agent, Physobj, Time))then loc_at(Agent, Exists_Room).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',533).

 /*  reactive_rule([ happens(lieOn(Agent,Physobj),
   			Time_From,
   			Time_Until),
   		some(Exists_Room,
   		     '$kolem_Fn_718'(Agent,
   				     Physobj,
   				     Time))
   	      ],
   	      [loc_at(Agent,Exists_Room)]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       lieOn(Agent,Physobj), 
%       some(
%          Exists_Room, 
%          '$kolem_Fn_718'(Agent,Physobj,Time))), 
%    at(Physobj,Exists_Room)).
if lieOn(Agent, Physobj), some(Exists_Room, '$kolem_Fn_718'(Agent, Physobj, Time))then loc_at(Physobj, Exists_Room).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',533).

 /*  reactive_rule([ happens(lieOn(Agent,Physobj),
   			Time_From7,
   			Time_Until8),
   		some(Exists_Room,
   		     '$kolem_Fn_718'(Agent,
   				     Physobj,
   				     Time))
   	      ],
   	      [loc_at(Physobj,Exists_Room)]).
 */
 %  "% =================================".


% [agent,physobj,time]
% Happens(SitOn(agent,physobj),time) ->
% {room}% 
%  HoldsAt(At(agent,room),time) &
%  HoldsAt(At(physobj,room),time).
% '->'(
%    ','(
%       ';'(
%          not(
%             at(Agent,Exists_Room)), 
%          not(
%             at(Physobj,Exists_Room))), 
%       some(
%          Exists_Room, 
%          '$kolem_Fn_719'(Agent,Physobj,Time))), 
%    not(
%       sitOn(Agent,Physobj))).
if (not loc_at(Agent, Exists_Room);not loc_at(Physobj, Exists_Room)), some(Exists_Room, '$kolem_Fn_719'(Agent, Physobj, Time))then not sitOn(Agent, Physobj).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',538).

 /*   reactive_rule([  (not(loc_at(Agent, Exists_Room));not(loc_at(Physobj, Exists_Room))),
                      some(Exists_Room,
                           '$kolem_Fn_719'(Agent, Physobj, Time))
                    ],
                    [not(sitOn(Agent, Physobj))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       sitOn(Agent,Physobj), 
%       some(
%          Exists_Room, 
%          '$kolem_Fn_719'(Agent,Physobj,Time))), 
%    at(Agent,Exists_Room)).
if sitOn(Agent, Physobj), some(Exists_Room, '$kolem_Fn_719'(Agent, Physobj, Time))then loc_at(Agent, Exists_Room).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',538).

 /*  reactive_rule([ happens(sitOn(Agent,Physobj),
   			Time_From,
   			Time_Until),
   		some(Exists_Room,
   		     '$kolem_Fn_719'(Agent,
   				     Physobj,
   				     Time))
   	      ],
   	      [loc_at(Agent,Exists_Room)]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       sitOn(Agent,Physobj), 
%       some(
%          Exists_Room, 
%          '$kolem_Fn_719'(Agent,Physobj,Time))), 
%    at(Physobj,Exists_Room)).
if sitOn(Agent, Physobj), some(Exists_Room, '$kolem_Fn_719'(Agent, Physobj, Time))then loc_at(Physobj, Exists_Room).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',538).

 /*  reactive_rule([ happens(sitOn(Agent,Physobj),
   			Time_From7,
   			Time_Until8),
   		some(Exists_Room,
   		     '$kolem_Fn_719'(Agent,
   				     Physobj,
   				     Time))
   	      ],
   	      [loc_at(Physobj,Exists_Room)]).
 */
 %  "% =================================".

% event LieOn(agent,physobj)
% event(
%    lieOn(agent,physobj)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',542).
actions([lieOn/2]).
% mpred_prop(
%    lieOn(agent,physobj), 
%    event).
mpred_prop(lieOn(agent,physobj),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',545).
% event SitOn(agent,physobj)
% event(
%    sitOn(agent,physobj)).
actions([sitOn/2]).
% mpred_prop(
%    sitOn(agent,physobj), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',545).
mpred_prop(sitOn(agent,physobj),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',547).
% event RiseFrom(agent,physobj)
% event(
%    riseFrom(agent,physobj)).
actions([riseFrom/2]).
% mpred_prop(
%    riseFrom(agent,physobj), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',547).
mpred_prop(riseFrom(agent,physobj),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',549).
% fluent LyingOn(agent,physobj)
% fluent(
%    lyingOn(agent,physobj)).
fluents([lyingOn/2]).
% mpred_prop(
%    lyingOn(agent,physobj), 
%    fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',549).
mpred_prop(lyingOn(agent,physobj),fluent).

% fluent SittingOn(agent,physobj)
% fluent(
%    sittingOn(agent,physobj)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',549).
fluents([sittingOn/2]).
% mpred_prop(
%    sittingOn(agent,physobj), 
%    fluent).
mpred_prop(sittingOn(agent,physobj),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',551).
% fluent Standing(agent)
% fluent(
%    standing(agent)).
fluents([standing/1]).
% mpred_prop(
%    standing(agent), 
%    fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',551).
mpred_prop(standing(agent),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',553).
% fluent Lying(agent)
% fluent(
%    lying(agent)).
fluents([lying/1]).
% mpred_prop(
%    lying(agent), 
%    fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',553).
mpred_prop(lying(agent),fluent).

% fluent Sitting(agent)
% fluent(
%    sitting(agent)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',553).
fluents([sitting/1]).
% mpred_prop(
%    sitting(agent), 
%    fluent).
mpred_prop(sitting(agent),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',555).
% noninertial Lying
% noninertial(lying).
noninertial(lying).

% noninertial Sitting
% noninertial(sitting).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',555).
noninertial(sitting).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',558).
% xor Lying, Sitting, Standing
% xor(
%    ==>, 
%    [ lying, 
%      sitting, 
%      standing ]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',558).
==>xor[lying,sitting,standing].


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',560).
% [agent,physobj,time]
% HoldsAt(LyingOn(agent,physobj),time) ->
% HoldsAt(Lying(agent),time).
% '->'(
%    lyingOn(Agent,Physobj), 
%    lying(Agent)).
if lyingOn(Agent, Physobj)then lying(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',560).

 /*  reactive_rule([lyingOn(Agent,Physobj)],
   	      [lying(Agent)]).
 */
 %  "% =================================".
% '->'(
%    not(
%       lying(Agent)), 
%    not(
%       lyingOn(Agent,Physobj))).
if not lying(Agent)then not lyingOn(Agent, Physobj).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',560).

 /*  reactive_rule([not(lying(Agent))],
   	      [not(lyingOn(Agent,Physobj))]).
 */
 %  "% =================================".


% [agent,physobj,time]
% HoldsAt(SittingOn(agent,physobj),time) ->
% HoldsAt(Sitting(agent),time).
% '->'(
%    sittingOn(Agent,Physobj), 
%    sitting(Agent)).
if sittingOn(Agent, Physobj)then sitting(Agent).

 /*  reactive_rule([sittingOn(Agent,Physobj)],
   	      [sitting(Agent)]).
 */
 %  "% =================================".
% '->'(
%    not(
%       sitting(Agent)), 
%    not(
%       sittingOn(Agent,Physobj))).
if not sitting(Agent)then not sittingOn(Agent, Physobj).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',565).

 /*  reactive_rule([not(sitting(Agent))],
   	      [not(sittingOn(Agent,Physobj))]).
 */
 %  "% =================================".


% [agent,physobj1,physobj2,time]
% HoldsAt(LyingOn(agent,physobj1),time) &
% HoldsAt(LyingOn(agent,physobj2),time) ->
% physobj1=physobj2.
% '->'(
%    ','(
%       lyingOn(Agent,Physobj2), 
%       not(
%          equals(Physobj1,Physobj2))), 
%    not(
%       lyingOn(Agent,Physobj1))).
if lyingOn(Agent, Physobj2), not equals(Physobj1, Physobj2)then not lyingOn(Agent, Physobj1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',569).

 /*  reactive_rule([ lyingOn(Agent,Physobj2),
   		not(equals(Physobj1,Physobj2))
   	      ],
   	      [not(lyingOn(Agent,Physobj1))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       lyingOn(Agent,Physobj1), 
%       not(
%          equals(Physobj2,Physobj1))), 
%    not(
%       lyingOn(Agent,Physobj2))).
if lyingOn(Agent, Physobj1), not equals(Physobj2, Physobj1)then not lyingOn(Agent, Physobj2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',569).

 /*  reactive_rule([ lyingOn(Agent,Physobj1),
   		not(equals(Physobj2,Physobj1))
   	      ],
   	      [not(lyingOn(Agent,Physobj2))]).
 */
 %  "% =================================".


% [agent,physobj1,physobj2,time]
% HoldsAt(SittingOn(agent,physobj1),time) &
% HoldsAt(SittingOn(agent,physobj2),time) ->
% physobj1=physobj2.
% '->'(
%    ','(
%       sittingOn(Agent,Physobj2), 
%       not(
%          equals(Physobj1,Physobj2))), 
%    not(
%       sittingOn(Agent,Physobj1))).
if sittingOn(Agent, Physobj2), not equals(Physobj1, Physobj2)then not sittingOn(Agent, Physobj1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',574).

 /*  reactive_rule([ sittingOn(Agent,Physobj2),
   		not(equals(Physobj1,Physobj2))
   	      ],
   	      [not(sittingOn(Agent,Physobj1))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       sittingOn(Agent,Physobj1), 
%       not(
%          equals(Physobj2,Physobj1))), 
%    not(
%       sittingOn(Agent,Physobj2))).
if sittingOn(Agent, Physobj1), not equals(Physobj2, Physobj1)then not sittingOn(Agent, Physobj2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',574).

 /*  reactive_rule([ sittingOn(Agent,Physobj1),
   		not(equals(Physobj2,Physobj1))
   	      ],
   	      [not(sittingOn(Agent,Physobj2))]).
 */
 %  "% =================================".


% [agent,physobj,time]
% HoldsAt(Standing(agent),time) ->
% Initiates(LieOn(agent,physobj),
%           LyingOn(agent,physobj),
%           time).
% '->'(
%    standing(Agent), 
%    initiates(
%       lieOn(Agent,Physobj), 
%       lyingOn(Agent,Physobj), 
%       Time)).
if standing(Agent)then initiates(lieOn(Agent, Physobj), lyingOn(Agent, Physobj)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',579).

 /*  reactive_rule([holds(standing(Agent),Time_At)],
   	      [ initiates(lieOn(Agent,Physobj),
   			  at(lyingOn(Agent,Physobj),
   			     Time),
   			  Initiates)
   	      ]).
 */
 %  "% =================================".


% [agent,physobj,time]
% Terminates(LieOn(agent,physobj),
%            Standing(agent),
%            time).
% terminates(
%    lieOn(Agent,Physobj), 
%    standing(Agent), 
%    Time).
lieOn(Agent, Physobj)terminates standing(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',585).

 /*  terminated(happens(lieOn(Agent,Physobj),
   		   Time_From,
   		   Time_Until),
   	   standing(Agent),
   	   []).
 */
 %  "% =================================".


% [agent,physobj,time]
% HoldsAt(Standing(agent),time) ->
% Initiates(SitOn(agent,physobj),
%           SittingOn(agent,physobj),
%           time).
% '->'(
%    standing(Agent), 
%    initiates(
%       sitOn(Agent,Physobj), 
%       sittingOn(Agent,Physobj), 
%       Time)).
if standing(Agent)then initiates(sitOn(Agent, Physobj), sittingOn(Agent, Physobj)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',590).

 /*  reactive_rule([holds(standing(Agent),Time_At)],
   	      [ initiates(sitOn(Agent,Physobj),
   			  at(sittingOn(Agent,Physobj),
   			     Time),
   			  Initiates)
   	      ]).
 */
 %  "% =================================".


% [agent,physobj,time]
% Terminates(SitOn(agent,physobj),
%            Standing(agent),
%            time).
% terminates(
%    sitOn(Agent,Physobj), 
%    standing(Agent), 
%    Time).
sitOn(Agent, Physobj)terminates standing(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',596).

 /*  terminated(happens(sitOn(Agent,Physobj),
   		   Time_From,
   		   Time_Until),
   	   standing(Agent),
   	   []).
 */
 %  "% =================================".


% [agent,physobj,time]
% (HoldsAt(SittingOn(agent,physobj),time) |
%  HoldsAt(LyingOn(agent,physobj),time)) ->
% Initiates(RiseFrom(agent,physobj),
%           Standing(agent),
%           time).
% '->'(
%    ';'(
%       sittingOn(Agent,Physobj), 
%       lyingOn(Agent,Physobj)), 
%    initiates(
%       riseFrom(Agent,Physobj), 
%       standing(Agent), 
%       Time)).
if sittingOn(Agent, Physobj);lyingOn(Agent, Physobj)then initiates(riseFrom(Agent, Physobj), standing(Agent)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',601).

 /*   reactive_rule([  (sittingOn(Agent, Physobj);lyingOn(Agent, Physobj))
                    ],
                    [ initiates(riseFrom(Agent, Physobj),
                                at(standing(Agent), Time),
                                Initiates)
                    ]).
 */
 %  "% =================================".


% [agent,physobj,time]
% HoldsAt(LyingOn(agent,physobj),time) ->
% Terminates(RiseFrom(agent,physobj),
%            LyingOn(agent,physobj),
%            time).
% '->'(
%    lyingOn(Agent,Physobj), 
%    terminates(
%       riseFrom(Agent,Physobj), 
%       lyingOn(Agent,Physobj), 
%       Time)).
if lyingOn(Agent, Physobj)then terminates(riseFrom(Agent, Physobj), lyingOn(Agent, Physobj)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',608).

 /*  reactive_rule([lyingOn(Agent,Physobj)],
   	      [ terminates(riseFrom(Agent,Physobj),
   			   at(lyingOn(Agent,Physobj),
   			      Time),
   			   Terminates)
   	      ]).
 */
 %  "% =================================".


% [agent,physobj,time]
% HoldsAt(SittingOn(agent,physobj),time) ->
% Terminates(RiseFrom(agent,physobj),
%            SittingOn(agent,physobj),
%            time).
% '->'(
%    sittingOn(Agent,Physobj), 
%    terminates(
%       riseFrom(Agent,Physobj), 
%       sittingOn(Agent,Physobj), 
%       Time)).
if sittingOn(Agent, Physobj)then terminates(riseFrom(Agent, Physobj), sittingOn(Agent, Physobj)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',614).

 /*  reactive_rule([sittingOn(Agent,Physobj)],
   	      [ terminates(riseFrom(Agent,Physobj),
   			   at(sittingOn(Agent,Physobj),
   			      Time),
   			   Terminates)
   	      ]).
 */
 %  "% =================================".

% event Greet(agent,agent)
% event(
%    greet(agent,agent)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',618).
actions([greet/2]).
% mpred_prop(
%    greet(agent,agent), 
%    event).
mpred_prop(greet(agent,agent),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',621).
% event SayGoodbye(agent,agent)
% event(
%    sayGoodbye(agent,agent)).
actions([sayGoodbye/2]).
% mpred_prop(
%    sayGoodbye(agent,agent), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',621).
mpred_prop(sayGoodbye(agent,agent),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',623).
% [agent1,agent2,time]
% Happens(Greet(agent1,agent2),time) ->
% {location}% 
% HoldsAt(At(agent1,location),time) &
% HoldsAt(At(agent2,location),time).
% '->'(
%    ','(
%       ';'(
%          not(
%             at(Agent1,Exists_Location)), 
%          not(
%             at(Agent2,Exists_Location))), 
%       some(
%          Exists_Location, 
%          '$kolem_Fn_720'(Agent1,Agent2,Time))), 
%    not(
%       greet(Agent1,Agent2))).
if (not loc_at(Agent1, Exists_Location);not loc_at(Agent2, Exists_Location)), some(Exists_Location, '$kolem_Fn_720'(Agent1, Agent2, Time))then not greet(Agent1, Agent2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',625).

 /*   reactive_rule([  (not(loc_at(Agent1, Exists_Location));not(loc_at(Agent2, Exists_Location))),
                      some(Exists_Location,
                           '$kolem_Fn_720'(Agent1, Agent2, Time))
                    ],
                    [not(greet(Agent1, Agent2))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       greet(Agent1,Agent2), 
%       some(
%          Exists_Location, 
%          '$kolem_Fn_720'(Agent1,Agent2,Time))), 
%    at(Agent1,Exists_Location)).
if greet(Agent1, Agent2), some(Exists_Location, '$kolem_Fn_720'(Agent1, Agent2, Time))then loc_at(Agent1, Exists_Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',625).

 /*  reactive_rule([ happens(greet(Agent1,Agent2),
   			Time_From,
   			Time_Until),
   		some(Exists_Location,
   		     '$kolem_Fn_720'(Agent1,
   				     Agent2,
   				     Time))
   	      ],
   	      [loc_at(Agent1,Exists_Location)]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       greet(Agent1,Agent2), 
%       some(
%          Exists_Location, 
%          '$kolem_Fn_720'(Agent1,Agent2,Time))), 
%    at(Agent2,Exists_Location)).
if greet(Agent1, Agent2), some(Exists_Location, '$kolem_Fn_720'(Agent1, Agent2, Time))then loc_at(Agent2, Exists_Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',625).

 /*  reactive_rule([ happens(greet(Agent1,Agent2),
   			Time_From7,
   			Time_Until8),
   		some(Exists_Location,
   		     '$kolem_Fn_720'(Agent1,
   				     Agent2,
   				     Time))
   	      ],
   	      [loc_at(Agent2,Exists_Location)]).
 */
 %  "% =================================".


% [agent1,agent2,time]
% Happens(SayGoodbye(agent1,agent2),time) ->
% {location}% 
% HoldsAt(At(agent1,location),time) &
% HoldsAt(At(agent2,location),time).
% '->'(
%    ','(
%       ';'(
%          not(
%             at(Agent1,Exists_Location)), 
%          not(
%             at(Agent2,Exists_Location))), 
%       some(
%          Exists_Location, 
%          '$kolem_Fn_721'(Agent1,Agent2,Time))), 
%    not(
%       sayGoodbye(Agent1,Agent2))).
if (not loc_at(Agent1, Exists_Location);not loc_at(Agent2, Exists_Location)), some(Exists_Location, '$kolem_Fn_721'(Agent1, Agent2, Time))then not sayGoodbye(Agent1, Agent2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',630).

 /*   reactive_rule([  (not(loc_at(Agent1, Exists_Location));not(loc_at(Agent2, Exists_Location))),
                      some(Exists_Location,
                           '$kolem_Fn_721'(Agent1, Agent2, Time))
                    ],
                    [not(sayGoodbye(Agent1, Agent2))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       sayGoodbye(Agent1,Agent2), 
%       some(
%          Exists_Location, 
%          '$kolem_Fn_721'(Agent1,Agent2,Time))), 
%    at(Agent1,Exists_Location)).
if sayGoodbye(Agent1, Agent2), some(Exists_Location, '$kolem_Fn_721'(Agent1, Agent2, Time))then loc_at(Agent1, Exists_Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',630).

 /*  reactive_rule([ happens(sayGoodbye(Agent1,Agent2),
   			Time_From,
   			Time_Until),
   		some(Exists_Location,
   		     '$kolem_Fn_721'(Agent1,
   				     Agent2,
   				     Time))
   	      ],
   	      [loc_at(Agent1,Exists_Location)]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       sayGoodbye(Agent1,Agent2), 
%       some(
%          Exists_Location, 
%          '$kolem_Fn_721'(Agent1,Agent2,Time))), 
%    at(Agent2,Exists_Location)).
if sayGoodbye(Agent1, Agent2), some(Exists_Location, '$kolem_Fn_721'(Agent1, Agent2, Time))then loc_at(Agent2, Exists_Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',630).

 /*  reactive_rule([ happens(sayGoodbye(Agent1,Agent2),
   			Time_From7,
   			Time_Until8),
   		some(Exists_Location,
   		     '$kolem_Fn_721'(Agent1,
   				     Agent2,
   				     Time))
   	      ],
   	      [loc_at(Agent2,Exists_Location)]).
 */
 %  "% =================================".

% event Order(agent,agent,physobj)
% event(
%    order(agent,agent,physobj)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',634).
actions([order/3]).
% mpred_prop(
%    order(agent,agent,physobj), 
%    event).
mpred_prop(order(agent,agent,physobj),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',637).
% fluent KnowOrder(agent,agent,physobj)
% fluent(
%    knowOrder(agent,agent,physobj)).
fluents([knowOrder/3]).
% mpred_prop(
%    knowOrder(agent,agent,physobj), 
%    fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',637).
mpred_prop(knowOrder(agent,agent,physobj),fluent).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',639).
% [agent1,agent2,physobj,time]
% Initiates(Order(agent1,agent2,physobj),
%           KnowOrder(agent2,agent1,physobj),
%           time).
% initiates(
%    order(Agent1,Agent2,Physobj), 
%    knowOrder(Agent2,Agent1,Physobj), 
%    Time).
order(Agent1, Agent2, Physobj)initiates knowOrder(Agent2, Agent1, Physobj).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',639).

 /*  initiated(happens(order(Agent1,Agent2,Physobj),
   		  Time_From,
   		  Time_Until),
   	  knowOrder(Agent2,Agent1,Physobj),
   	  []).
 */
 %  "% =================================".


% [agent1,agent2,physobj,time]
% Happens(Order(agent1,agent2,physobj),time) ->
% {location}% 
% HoldsAt(At(agent1,location),time) &
% HoldsAt(At(agent2,location),time).
% '->'(
%    ','(
%       ';'(
%          not(
%             at(Agent1,Exists_Location)), 
%          not(
%             at(Agent2,Exists_Location))), 
%       some(
%          Exists_Location, 
%          '$kolem_Fn_722'(Agent1,Agent2,Physobj,Time))), 
%    not(
%       order(Agent1,Agent2,Physobj))).
if (not loc_at(Agent1, Exists_Location);not loc_at(Agent2, Exists_Location)), some(Exists_Location, '$kolem_Fn_722'(Agent1, Agent2, Physobj, Time))then not order(Agent1, Agent2, Physobj).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',645).

 /*   reactive_rule([  (not(loc_at(Agent1, Exists_Location));not(loc_at(Agent2, Exists_Location))),
                      some(Exists_Location,
                           '$kolem_Fn_722'(Agent1,
                                           Agent2,
                                           Physobj,
                                           Time))
                    ],
                    [not(order(Agent1, Agent2, Physobj))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       order(Agent1,Agent2,Physobj), 
%       some(
%          Exists_Location, 
%          '$kolem_Fn_722'(Agent1,Agent2,Physobj,Time))), 
%    at(Agent1,Exists_Location)).
if order(Agent1, Agent2, Physobj), some(Exists_Location, '$kolem_Fn_722'(Agent1, Agent2, Physobj, Time))then loc_at(Agent1, Exists_Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',645).

 /*  reactive_rule([ happens(order(Agent1,Agent2,Physobj),
   			Time_From,
   			Time_Until),
   		some(Exists_Location,
   		     '$kolem_Fn_722'(Agent1,
   				     Agent2,
   				     Physobj,
   				     Time))
   	      ],
   	      [loc_at(Agent1,Exists_Location)]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       order(Agent1,Agent2,Physobj), 
%       some(
%          Exists_Location, 
%          '$kolem_Fn_722'(Agent1,Agent2,Physobj,Time))), 
%    at(Agent2,Exists_Location)).
if order(Agent1, Agent2, Physobj), some(Exists_Location, '$kolem_Fn_722'(Agent1, Agent2, Physobj, Time))then loc_at(Agent2, Exists_Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',645).

 /*  reactive_rule([ happens(order(Agent1,Agent2,Physobj),
   			Time_From8,
   			Time_Until9),
   		some(Exists_Location,
   		     '$kolem_Fn_722'(Agent1,
   				     Agent2,
   				     Physobj,
   				     Time))
   	      ],
   	      [loc_at(Agent2,Exists_Location)]).
 */
 %  "% =================================".

% event Request(agent,agent,physobj)
% event(
%    request(agent,agent,physobj)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',649).
actions([request/3]).
% mpred_prop(
%    request(agent,agent,physobj), 
%    event).
mpred_prop(request(agent,agent,physobj),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',652).
% fluent KnowRequest(agent,agent,physobj)
% fluent(
%    knowRequest(agent,agent,physobj)).
fluents([knowRequest/3]).
% mpred_prop(
%    knowRequest(agent,agent,physobj), 
%    fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',652).
mpred_prop(knowRequest(agent,agent,physobj),fluent).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',654).
% [agent1,agent2,physobj,time]
% Initiates(Request(agent1,agent2,physobj),
%           KnowRequest(agent2,agent1,physobj),
%           time).
% initiates(
%    request(Agent1,Agent2,Physobj), 
%    knowRequest(Agent2,Agent1,Physobj), 
%    Time).
request(Agent1, Agent2, Physobj)initiates knowRequest(Agent2, Agent1, Physobj).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',654).

 /*  initiated(happens(request(Agent1,Agent2,Physobj),
   		  Time_From,
   		  Time_Until),
   	  knowRequest(Agent2,Agent1,Physobj),
   	  []).
 */
 %  "% =================================".


% [agent1,agent2,physobj,time]
% Happens(Request(agent1,agent2,physobj),time) ->
% {location}% 
% HoldsAt(At(agent1,location),time) &
% HoldsAt(At(agent2,location),time).
% '->'(
%    ','(
%       ';'(
%          not(
%             at(Agent1,Exists_Location)), 
%          not(
%             at(Agent2,Exists_Location))), 
%       some(
%          Exists_Location, 
%          '$kolem_Fn_723'(Agent1,Agent2,Physobj,Time))), 
%    not(
%       request(Agent1,Agent2,Physobj))).
if (not loc_at(Agent1, Exists_Location);not loc_at(Agent2, Exists_Location)), some(Exists_Location, '$kolem_Fn_723'(Agent1, Agent2, Physobj, Time))then not request(Agent1, Agent2, Physobj).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',660).

 /*   reactive_rule([  (not(loc_at(Agent1, Exists_Location));not(loc_at(Agent2, Exists_Location))),
                      some(Exists_Location,
                           '$kolem_Fn_723'(Agent1,
                                           Agent2,
                                           Physobj,
                                           Time))
                    ],
                    [not(request(Agent1, Agent2, Physobj))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       request(Agent1,Agent2,Physobj), 
%       some(
%          Exists_Location, 
%          '$kolem_Fn_723'(Agent1,Agent2,Physobj,Time))), 
%    at(Agent1,Exists_Location)).
if request(Agent1, Agent2, Physobj), some(Exists_Location, '$kolem_Fn_723'(Agent1, Agent2, Physobj, Time))then loc_at(Agent1, Exists_Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',660).

 /*  reactive_rule([ happens(request(Agent1,
   				Agent2,
   				Physobj),
   			Time_From,
   			Time_Until),
   		some(Exists_Location,
   		     '$kolem_Fn_723'(Agent1,
   				     Agent2,
   				     Physobj,
   				     Time))
   	      ],
   	      [loc_at(Agent1,Exists_Location)]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       request(Agent1,Agent2,Physobj), 
%       some(
%          Exists_Location, 
%          '$kolem_Fn_723'(Agent1,Agent2,Physobj,Time))), 
%    at(Agent2,Exists_Location)).
if request(Agent1, Agent2, Physobj), some(Exists_Location, '$kolem_Fn_723'(Agent1, Agent2, Physobj, Time))then loc_at(Agent2, Exists_Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',660).

 /*  reactive_rule([ happens(request(Agent1,
   				Agent2,
   				Physobj),
   			Time_From8,
   			Time_Until9),
   		some(Exists_Location,
   		     '$kolem_Fn_723'(Agent1,
   				     Agent2,
   				     Physobj,
   				     Time))
   	      ],
   	      [loc_at(Agent2,Exists_Location)]).
 */
 %  "% =================================".


%; End of file.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',664).
% translate: ending  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e.lps 
