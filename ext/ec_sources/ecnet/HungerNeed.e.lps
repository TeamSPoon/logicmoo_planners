:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/HandTo.e',30).
% translate: unskipped  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/HungerNeed.e.lps 
:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(lps).
% translate: begining  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/HungerNeed.e.lps 
% Thu, 08 Oct 2020 21:36:20 GMT File: <stream>(0x55894c217300)


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/HandTo.e',30).
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; hunger need
%;

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/HungerNeed.e',14).
% fluent Hungry(agent)
% fluent(
%    hungry(agent)).
fluents([hungry/1]).
% mpred_prop(
%    hungry(agent), 
%    fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/HungerNeed.e',14).
mpred_prop(hungry(agent),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/HungerNeed.e',16).
% fluent Satiated(agent)
% fluent(
%    satiated(agent)).
fluents([satiated/1]).
% mpred_prop(
%    satiated(agent), 
%    fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/HungerNeed.e',16).
mpred_prop(satiated(agent),fluent).

% noninertial Satiated
% noninertial(satiated).
noninertial(satiated).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/HungerNeed.e',19).
% [agent,time]
 % HoldsAt(Hungry(agent),time) <-> !HoldsAt(Satiated(agent),time).

 /*  holds_at(hungry(Agent), Time) <->
       holds_at(neg(satiated(Agent)), Time).
 */
% '->'(
%    hungry(Agent), 
%    not(
%       satiated(Agent))).
if hungry(Agent)then not satiated(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/HungerNeed.e',19).

 /*  reactive_rule([holds(hungry(Agent),Time_At)],
   	      [not(satiated(Agent))]).
 */
 %  "% =================================".
% '->'(
%    not(
%       not(
%          satiated(Agent))), 
%    not(
%       hungry(Agent))).
not hungry(Agent)if not not satiated(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/HungerNeed.e',19).

 /*  l_int(holds(not(hungry(Agent)),Time_At3),
         [not(not(satiated(Agent)))]).
 */
 %  "% =================================".
% '->'(
%    not(
%       satiated(Agent)), 
%    hungry(Agent)).
hungry(Agent)if not satiated(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/HungerNeed.e',19).

 /*  l_int(holds(hungry(Agent),Time_At4),
         [not(satiated(Agent))]).
 */
 %  "% =================================".
% '->'(
%    not(
%       hungry(Agent)), 
%    not(
%       not(
%          satiated(Agent)))).
if not hungry(Agent)then not not satiated(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/HungerNeed.e',19).

 /*  reactive_rule([holds(not(hungry(Agent)),Time_At5)],
   	      [not(not(satiated(Agent)))]).
 */
 %  "% =================================".

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/HungerNeed.e',21).
% event Eat(agent,food)
% event(
%    eat(agent,food)).
actions([eat/2]).
% mpred_prop(
%    eat(agent,food), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/HungerNeed.e',21).
mpred_prop(eat(agent,food),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/HungerNeed.e',23).
% [agent,food,time]
% Happens(Eat(agent,food),time) ->
% {location}% 
% HoldsAt(At(agent,location),time) &
% HoldsAt(At(food,location),time).
% '->'(
%    ','(
%       ';'(
%          not(
%             at(Agent,Exists_Location)), 
%          not(
%             at(Food,Exists_Location))), 
%       some(
%          Exists_Location, 
%          '$kolem_Fn_692'(Agent,Food,Time))), 
%    not(
%       eat(Agent,Food))).
if (not loc_at(Agent, Exists_Location);not loc_at(Food, Exists_Location)), some(Exists_Location, '$kolem_Fn_692'(Agent, Food, Time))then not eat(Agent, Food).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/HungerNeed.e',25).

 /*   reactive_rule([  (not(loc_at(Agent, Exists_Location));not(loc_at(Food, Exists_Location))),
                      some(Exists_Location,
                           '$kolem_Fn_692'(Agent, Food, Time))
                    ],
                    [not(eat(Agent, Food))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       eat(Agent,Food), 
%       some(
%          Exists_Location, 
%          '$kolem_Fn_692'(Agent,Food,Time))), 
%    at(Agent,Exists_Location)).
if eat(Agent, Food), some(Exists_Location, '$kolem_Fn_692'(Agent, Food, Time))then loc_at(Agent, Exists_Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/HungerNeed.e',25).

 /*  reactive_rule([ happens(eat(Agent,Food),
   			Time_From,
   			Time_Until),
   		some(Exists_Location,
   		     '$kolem_Fn_692'(Agent,Food,Time))
   	      ],
   	      [loc_at(Agent,Exists_Location)]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       eat(Agent,Food), 
%       some(
%          Exists_Location, 
%          '$kolem_Fn_692'(Agent,Food,Time))), 
%    at(Food,Exists_Location)).
if eat(Agent, Food), some(Exists_Location, '$kolem_Fn_692'(Agent, Food, Time))then loc_at(Food, Exists_Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/HungerNeed.e',25).

 /*  reactive_rule([ happens(eat(Agent,Food),
   			Time_From7,
   			Time_Until8),
   		some(Exists_Location,
   		     '$kolem_Fn_692'(Agent,Food,Time))
   	      ],
   	      [loc_at(Food,Exists_Location)]).
 */
 %  "% =================================".


% [agent,food,time]
% Terminates(Eat(agent,food),Hungry(agent),time).
% terminates(
%    eat(Agent,Food), 
%    hungry(Agent), 
%    Time).
eat(Agent, Food)terminates hungry(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/HungerNeed.e',30).

 /*  terminated(happens(eat(Agent,Food),
   		   Time_From,
   		   Time_Until),
   	   hungry(Agent),
   	   []).
 */
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/HungerNeed.e',32).
%; End of file.
% translate: ending  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/HungerNeed.e.lps 
