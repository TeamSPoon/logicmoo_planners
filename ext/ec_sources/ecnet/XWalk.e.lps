:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/WritingABook.e',97).
% translate: unskipped  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e.lps 
:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(lps).
% translate: begining  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e.lps 
% Thu, 08 Oct 2020 21:37:36 GMT File: <stream>(0x55894c1da600)%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; XWalk: WALK x-schema representation of walking
%;
%; @phdthesis{Narayanan:1997,
%;   author = "Srinivas S. Narayanan",
%;   year = "1997",
%;   title = "Knowledge-based Action Representations for Metaphor and Aspect (\uppercase{KARMA})",
%;   address = "Berkeley, CA",
%;   school = "University of California, Berkeley",
%; }
%;

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',22).
% option trajectory on
:- if(is_e_toplevel).
:- set_ec_option(trajectory, on).
:- endif.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',24).
% sort xschema
% sort(xschema).
sort(xschema).
%; parameters

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',28).
% predicate XWalkAgent(xschema,agent)
% predicate(
%    xWalkAgent(xschema,agent)).
predicates([xWalkAgent/2]).
% mpred_prop(
%    xWalkAgent(xschema,agent), 
%    predicate).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',28).
mpred_prop(xWalkAgent(xschema,agent),predicate).

% function XWalkRate(xschema): offset ; step duration
% function(
%    xWalkRate(xschema)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',28).
functions([xWalkRate/1]).
% mpred_prop(
%    xWalkRate(xschema), 
%    function).
mpred_prop(xWalkRate(xschema),function).
% predicate(
%    xWalkRatePred(
%       xschema, 
%       [ offset, 
%         ;, 
%         step, 
%         duration ])).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',28).
predicates([xWalkRatePred/2]).
% mpred_prop(
%    xWalkRatePred(
%       xschema, 
%       [ offset, 
%         ;, 
%         step, 
%         duration ]), 
%    predicate).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',28).
mpred_prop(xWalkRatePred(xschema,[offset,;,step,duration]),predicate).
% functional_predicate(xWalkRate,xWalkRatePred).
functional_predicate(xWalkRate,xWalkRatePred).
% function_argtypes(
%    xWalkRatePred, 
%    xWalkRate(xschema), 
%    [ offset, 
%      ;, 
%      step, 
%      duration ]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',28).
function_argtypes(xWalkRatePred,
		  xWalkRate(xschema),
		  [offset,;,step,duration]).
% resultIsa(
%    xWalkRate, 
%    [ offset, 
%      ;, 
%      step, 
%      duration ]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',28).
resultIsa(xWalkRate,[offset,;,step,duration]).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',30).
% function XWalkSize(xschema): offset ; step size
% function(
%    xWalkSize(xschema)).
functions([xWalkSize/1]).
% mpred_prop(
%    xWalkSize(xschema), 
%    function).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',30).
mpred_prop(xWalkSize(xschema),function).
% predicate(
%    xWalkSizePred(
%       xschema, 
%       [ offset, 
%         ;, 
%         step, 
%         size ])).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',30).
predicates([xWalkSizePred/2]).
% mpred_prop(
%    xWalkSizePred(
%       xschema, 
%       [ offset, 
%         ;, 
%         step, 
%         size ]), 
%    predicate).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',30).
mpred_prop(xWalkSizePred(xschema,[offset,;,step,size]),predicate).
% functional_predicate(xWalkSize,xWalkSizePred).
functional_predicate(xWalkSize,xWalkSizePred).
% function_argtypes(
%    xWalkSizePred, 
%    xWalkSize(xschema), 
%    [ offset, 
%      ;, 
%      step, 
%      size ]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',30).
function_argtypes(xWalkSizePred,
		  xWalkSize(xschema),
		  [offset,;,step,size]).
% resultIsa(
%    xWalkSize, 
%    [ offset, 
%      ;, 
%      step, 
%      size ]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',30).
resultIsa(xWalkSize,[offset,;,step,size]).
%; TTL input lines

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',34).
% fluent XWalkEnabled(xschema)
% fluent(
%    xWalkEnabled(xschema)).
fluents([xWalkEnabled/1]).
% mpred_prop(
%    xWalkEnabled(xschema), 
%    fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',34).
mpred_prop(xWalkEnabled(xschema),fluent).

% fluent XWalkGroundStable(xschema)
% fluent(
%    xWalkGroundStable(xschema)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',34).
fluents([xWalkGroundStable/1]).
% mpred_prop(
%    xWalkGroundStable(xschema), 
%    fluent).
mpred_prop(xWalkGroundStable(xschema),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',36).
% fluent XWalkPosture(xschema)
% fluent(
%    xWalkPosture(xschema)).
fluents([xWalkPosture/1]).
% mpred_prop(
%    xWalkPosture(xschema), 
%    fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',36).
mpred_prop(xWalkPosture(xschema),fluent).

% fluent XWalkFootingOK(xschema)
% fluent(
%    xWalkFootingOK(xschema)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',36).
fluents([xWalkFootingOK/1]).
% mpred_prop(
%    xWalkFootingOK(xschema), 
%    fluent).
mpred_prop(xWalkFootingOK(xschema),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',38).
% noninertial XWalkEnabled, XWalkGroundStable, XWalkPosture, XWalkFootingOK
% noninertial(xWalkEnabled).
noninertial(xWalkEnabled).
% noninertial(xWalkGroundStable).
noninertial(xWalkGroundStable).
% noninertial(xWalkPosture).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',38).
noninertial(xWalkPosture).
% noninertial(xWalkFootingOK).
noninertial(xWalkFootingOK).
%; fluents

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',42).
% fluent XWalkDistance(xschema,distance)
% fluent(
%    xWalkDistance(xschema,distance)).
fluents([xWalkDistance/2]).
% mpred_prop(
%    xWalkDistance(xschema,distance), 
%    fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',42).
mpred_prop(xWalkDistance(xschema,distance),fluent).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',44).
% [xschema,distance1,distance2,time]
% HoldsAt(XWalkDistance(xschema,distance1),time) &
% HoldsAt(XWalkDistance(xschema,distance2),time) ->
% distance1=distance2.
% '->'(
%    ','(
%       xWalkDistance(Xschema,Distance2), 
%       not(
%          equals(Distance1,Distance2))), 
%    not(
%       xWalkDistance(Xschema,Distance1))).
if xWalkDistance(Xschema, Distance2), not equals(Distance1, Distance2)then not xWalkDistance(Xschema, Distance1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',44).

 /*  reactive_rule([ xWalkDistance(Xschema,Distance2),
   		not(equals(Distance1,Distance2))
   	      ],
   	      [not(xWalkDistance(Xschema,Distance1))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       xWalkDistance(Xschema,Distance1), 
%       not(
%          equals(Distance2,Distance1))), 
%    not(
%       xWalkDistance(Xschema,Distance2))).
if xWalkDistance(Xschema, Distance1), not equals(Distance2, Distance1)then not xWalkDistance(Xschema, Distance2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',44).

 /*  reactive_rule([ xWalkDistance(Xschema,Distance1),
   		not(equals(Distance2,Distance1))
   	      ],
   	      [not(xWalkDistance(Xschema,Distance2))]).
 */
 %  "% =================================".


%; logic gate behavior

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',51).
% fluent XWalkVision(xschema)
% fluent(
%    xWalkVision(xschema)).
fluents([xWalkVision/1]).
% mpred_prop(
%    xWalkVision(xschema), 
%    fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',51).
mpred_prop(xWalkVision(xschema),fluent).

% fluent XWalkVisionOK(xschema)
% fluent(
%    xWalkVisionOK(xschema)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',51).
fluents([xWalkVisionOK/1]).
% mpred_prop(
%    xWalkVisionOK(xschema), 
%    fluent).
mpred_prop(xWalkVisionOK(xschema),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',53).
% fluent XWalkAtDestination(xschema)
% fluent(
%    xWalkAtDestination(xschema)).
fluents([xWalkAtDestination/1]).
% mpred_prop(
%    xWalkAtDestination(xschema), 
%    fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',53).
mpred_prop(xWalkAtDestination(xschema),fluent).

% fluent XWalkDone(xschema)
% fluent(
%    xWalkDone(xschema)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',53).
fluents([xWalkDone/1]).
% mpred_prop(
%    xWalkDone(xschema), 
%    fluent).
mpred_prop(xWalkDone(xschema),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',55).
% noninertial XWalkVision, XWalkVisionOK, XWalkAtDestination, XWalkDone
% noninertial(xWalkVision).
noninertial(xWalkVision).
% noninertial(xWalkVisionOK).
noninertial(xWalkVisionOK).
% noninertial(xWalkAtDestination).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',55).
noninertial(xWalkAtDestination).
% noninertial(xWalkDone).
noninertial(xWalkDone).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',57).
% [xschema,time]
% HoldsAt(XWalkGroundStable(xschema),time) <->
% HoldsAt(XWalkVision(xschema),time).

 /*  holds_at(xWalkGroundStable(Xschema), Time) <->
       holds_at(xWalkVision(Xschema), Time).
 */
% '->'(
%    xWalkGroundStable(Xschema), 
%    xWalkVision(Xschema)).
if xWalkGroundStable(Xschema)then xWalkVision(Xschema).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',57).

 /*  reactive_rule([xWalkGroundStable(Xschema)],
   	      [xWalkVision(Xschema)]).
 */
 %  "% =================================".
% '->'(
%    not(
%       xWalkVision(Xschema)), 
%    not(
%       xWalkGroundStable(Xschema))).
if not xWalkVision(Xschema)then not xWalkGroundStable(Xschema).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',57).

 /*  reactive_rule([not(xWalkVision(Xschema))],
   	      [not(xWalkGroundStable(Xschema))]).
 */
 %  "% =================================".
% '->'(
%    xWalkVision(Xschema), 
%    xWalkGroundStable(Xschema)).
if xWalkVision(Xschema)then xWalkGroundStable(Xschema).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',57).

 /*  reactive_rule([xWalkVision(Xschema)],
   	      [xWalkGroundStable(Xschema)]).
 */
 %  "% =================================".
% '->'(
%    not(
%       xWalkGroundStable(Xschema)), 
%    not(
%       xWalkVision(Xschema))).
if not xWalkGroundStable(Xschema)then not xWalkVision(Xschema).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',57).

 /*  reactive_rule([not(xWalkGroundStable(Xschema))],
   	      [not(xWalkVision(Xschema))]).
 */
 %  "% =================================".


% [xschema,time]
% HoldsAt(XWalkEnabled(xschema),time) &
% HoldsAt(XWalkVision(xschema),time) &
% HoldsAt(XWalkPosture(xschema),time) <->
% HoldsAt(XWalkVisionOK(xschema),time).
 %  <->((holds_at(xWalkEnabled(Xschema), Time), holds_at(xWalkVision(Xschema), Time), holds_at(xWalkPosture(Xschema), Time)), holds_at(xWalkVisionOK(Xschema), Time)).
% '->'(
%    ','(
%       xWalkEnabled(Xschema), 
%       ','(
%          xWalkVision(Xschema), 
%          xWalkPosture(Xschema))), 
%    xWalkVisionOK(Xschema)).
if xWalkEnabled(Xschema), xWalkVision(Xschema), xWalkPosture(Xschema)then xWalkVisionOK(Xschema).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',62).

 /*  reactive_rule([ xWalkEnabled(Xschema),
   		xWalkVision(Xschema),
   		xWalkPosture(Xschema)
   	      ],
   	      [xWalkVisionOK(Xschema)]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       xWalkVision(Xschema), 
%       ','(
%          xWalkPosture(Xschema), 
%          not(
%             xWalkVisionOK(Xschema)))), 
%    not(
%       xWalkEnabled(Xschema))).
if xWalkVision(Xschema), xWalkPosture(Xschema), not xWalkVisionOK(Xschema)then not xWalkEnabled(Xschema).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',62).

 /*  reactive_rule([ xWalkVision(Xschema),
   		xWalkPosture(Xschema),
   		not(xWalkVisionOK(Xschema))
   	      ],
   	      [not(xWalkEnabled(Xschema))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       xWalkPosture(Xschema), 
%       ','(
%          xWalkEnabled(Xschema), 
%          not(
%             xWalkVisionOK(Xschema)))), 
%    not(
%       xWalkVision(Xschema))).
if xWalkPosture(Xschema), xWalkEnabled(Xschema), not xWalkVisionOK(Xschema)then not xWalkVision(Xschema).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',62).

 /*  reactive_rule([ xWalkPosture(Xschema),
   		xWalkEnabled(Xschema),
   		not(xWalkVisionOK(Xschema))
   	      ],
   	      [not(xWalkVision(Xschema))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       xWalkVision(Xschema), 
%       ','(
%          xWalkEnabled(Xschema), 
%          not(
%             xWalkVisionOK(Xschema)))), 
%    not(
%       xWalkPosture(Xschema))).
if xWalkVision(Xschema), xWalkEnabled(Xschema), not xWalkVisionOK(Xschema)then not xWalkPosture(Xschema).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',62).

 /*  reactive_rule([ xWalkVision(Xschema),
   		xWalkEnabled(Xschema),
   		not(xWalkVisionOK(Xschema))
   	      ],
   	      [not(xWalkPosture(Xschema))]).
 */
 %  "% =================================".
% '->'(
%    ';'(
%       not(
%          xWalkEnabled(Xschema)), 
%       ';'(
%          not(
%             xWalkVision(Xschema)), 
%          not(
%             xWalkPosture(Xschema)))), 
%    not(
%       xWalkVisionOK(Xschema))).
if not xWalkEnabled(Xschema);not xWalkVision(Xschema);not xWalkPosture(Xschema)then not xWalkVisionOK(Xschema).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',62).

 /*   reactive_rule([  (not(xWalkEnabled(Xschema));not(xWalkVision(Xschema));not(xWalkPosture(Xschema)))
                    ],
                    [not(xWalkVisionOK(Xschema))]).
 */
 %  "% =================================".
% '->'(
%    xWalkVisionOK(Xschema), 
%    xWalkEnabled(Xschema)).
if xWalkVisionOK(Xschema)then xWalkEnabled(Xschema).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',62).

 /*  reactive_rule([xWalkVisionOK(Xschema)],
   	      [xWalkEnabled(Xschema)]).
 */
 %  "% =================================".
% '->'(
%    xWalkVisionOK(Xschema), 
%    xWalkVision(Xschema)).
if xWalkVisionOK(Xschema)then xWalkVision(Xschema).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',62).

 /*  reactive_rule([xWalkVisionOK(Xschema)],
   	      [xWalkVision(Xschema)]).
 */
 %  "% =================================".
% '->'(
%    xWalkVisionOK(Xschema), 
%    xWalkPosture(Xschema)).
if xWalkVisionOK(Xschema)then xWalkPosture(Xschema).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',62).

 /*  reactive_rule([xWalkVisionOK(Xschema)],
   	      [xWalkPosture(Xschema)]).
 */
 %  "% =================================".


% [xschema,time]
% HoldsAt(XWalkDistance(xschema,0),time) <->
% HoldsAt(XWalkAtDestination(xschema),time).

 /*  holds_at(xWalkDistance(Xschema, 0), Time) <->
       holds_at(xWalkAtDestination(Xschema), Time).
 */
% '->'(
%    xWalkDistance(Xschema,0), 
%    xWalkAtDestination(Xschema)).
if xWalkDistance(Xschema, 0)then xWalkAtDestination(Xschema).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',68).

 /*  reactive_rule([xWalkDistance(Xschema,0)],
   	      [xWalkAtDestination(Xschema)]).
 */
 %  "% =================================".
% '->'(
%    not(
%       xWalkAtDestination(Xschema)), 
%    not(
%       xWalkDistance(Xschema,0))).
if not xWalkAtDestination(Xschema)then not xWalkDistance(Xschema, 0).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',68).

 /*  reactive_rule([not(xWalkAtDestination(Xschema))],
   	      [not(xWalkDistance(Xschema,0))]).
 */
 %  "% =================================".
% '->'(
%    xWalkAtDestination(Xschema), 
%    xWalkDistance(Xschema,0)).
if xWalkAtDestination(Xschema)then xWalkDistance(Xschema, 0).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',68).

 /*  reactive_rule([xWalkAtDestination(Xschema)],
   	      [xWalkDistance(Xschema,0)]).
 */
 %  "% =================================".
% '->'(
%    not(
%       xWalkDistance(Xschema,0)), 
%    not(
%       xWalkAtDestination(Xschema))).
if not xWalkDistance(Xschema, 0)then not xWalkAtDestination(Xschema).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',68).

 /*  reactive_rule([not(xWalkDistance(Xschema,0))],
   	      [not(xWalkAtDestination(Xschema))]).
 */
 %  "% =================================".


% [xschema,time]
% HoldsAt(XWalkAtDestination(xschema),time) <->
% HoldsAt(XWalkDone(xschema),time).

 /*  holds_at(xWalkAtDestination(Xschema), Time) <->
       holds_at(xWalkDone(Xschema), Time).
 */
% '->'(
%    xWalkAtDestination(Xschema), 
%    xWalkDone(Xschema)).
if xWalkAtDestination(Xschema)then xWalkDone(Xschema).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',72).

 /*  reactive_rule([xWalkAtDestination(Xschema)],
   	      [xWalkDone(Xschema)]).
 */
 %  "% =================================".
% '->'(
%    not(
%       xWalkDone(Xschema)), 
%    not(
%       xWalkAtDestination(Xschema))).
if not xWalkDone(Xschema)then not xWalkAtDestination(Xschema).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',72).

 /*  reactive_rule([not(xWalkDone(Xschema))],
   	      [not(xWalkAtDestination(Xschema))]).
 */
 %  "% =================================".
% '->'(
%    xWalkDone(Xschema), 
%    xWalkAtDestination(Xschema)).
if xWalkDone(Xschema)then xWalkAtDestination(Xschema).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',72).

 /*  reactive_rule([xWalkDone(Xschema)],
   	      [xWalkAtDestination(Xschema)]).
 */
 %  "% =================================".
% '->'(
%    not(
%       xWalkAtDestination(Xschema)), 
%    not(
%       xWalkDone(Xschema))).
if not xWalkAtDestination(Xschema)then not xWalkDone(Xschema).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',72).

 /*  reactive_rule([not(xWalkAtDestination(Xschema))],
   	      [not(xWalkDone(Xschema))]).
 */
 %  "% =================================".


%; durative events
%; distance is the goal

% fluent XWalkStepping(xschema,distance) 
% fluent(
%    xWalkStepping(xschema,distance)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',77).
fluents([xWalkStepping/2]).
% mpred_prop(
%    xWalkStepping(xschema,distance), 
%    fluent).
mpred_prop(xWalkStepping(xschema,distance),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',79).
% event XWalkSteppingOn(xschema)
% event(
%    xWalkSteppingOn(xschema)).
events([xWalkSteppingOn/1]).
% mpred_prop(
%    xWalkSteppingOn(xschema), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',79).
mpred_prop(xWalkSteppingOn(xschema),event).

% event XWalkSteppingOff(xschema)
% event(
%    xWalkSteppingOff(xschema)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',79).
events([xWalkSteppingOff/1]).
% mpred_prop(
%    xWalkSteppingOff(xschema), 
%    event).
mpred_prop(xWalkSteppingOff(xschema),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',82).
% [xschema,distance1,distance2,time]
% HoldsAt(XWalkDistance(xschema,distance1),time) &
% distance2 = distance1 - XWalkSize(xschema) ->
% Initiates(XWalkSteppingOn(xschema),XWalkStepping(xschema,distance2),time).
% '->'(
%    ','(
%       xWalkDistance(Xschema,Distance1), 
%       '-Pred'(
%          Distance1, 
%          xWalkSize(Xschema), 
%          Distance2)), 
%    initiates(
%       xWalkSteppingOn(Xschema), 
%       xWalkStepping(Xschema,Distance2), 
%       Time)).
if xWalkDistance(Xschema, Distance1), '-Pred'(Distance1, xWalkSize(Xschema), Distance2)then initiates(xWalkSteppingOn(Xschema), xWalkStepping(Xschema, Distance2)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',82).

 /*  reactive_rule([ xWalkDistance(Xschema,Distance1),
   		'-Pred'(Distance1,
   			xWalkSize(Xschema),
   			Distance2)
   	      ],
   	      [ initiates(xWalkSteppingOn(Xschema),
   			  at(xWalkStepping(Xschema,
   					   Distance2),
   			     Time),
   			  Initiates)
   	      ]).
 */
 %  "% =================================".


% [xschema,distance,time]
% Terminates(XWalkSteppingOff(xschema),XWalkStepping(xschema,distance),time).
% terminates(
%    xWalkSteppingOff(Xschema), 
%    xWalkStepping(Xschema,Distance), 
%    Time).
xWalkSteppingOff(Xschema)terminates xWalkStepping(Xschema, Distance).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',88).

 /*  terminated(happens(xWalkSteppingOff(Xschema),
   		   Time_From,
   		   Time_Until),
   	   xWalkStepping(Xschema,Distance),
   	   []).
 */
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',90).
% [xschema,distance,time]
% Releases(XWalkSteppingOn(xschema),XWalkDistance(xschema,distance),time).
% releases(
%    xWalkSteppingOn(Xschema), 
%    xWalkDistance(Xschema,Distance), 
%    Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',90).
releases(xWalkSteppingOn(Xschema),
	 xWalkDistance(Xschema,Distance),
	 Time).


% [xschema,distance1,distance2,time]
% HoldsAt(XWalkDistance(xschema,distance1),time) &
% distance1 != distance2 ->
% Terminates(XWalkSteppingOff(xschema),XWalkDistance(xschema,distance2),time).
% '->'(
%    ','(
%       xWalkDistance(Xschema,Distance1), 
%       diff(Distance2,Distance1)), 
%    terminates(
%       xWalkSteppingOff(Xschema), 
%       xWalkDistance(Xschema,Distance2), 
%       Time)).
if xWalkDistance(Xschema, Distance1), diff(Distance2, Distance1)then terminates(xWalkSteppingOff(Xschema), xWalkDistance(Xschema, Distance2)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',94).

 /*  reactive_rule([ xWalkDistance(Xschema,Distance1),
   		diff(Distance2,Distance1)
   	      ],
   	      [ terminates(xWalkSteppingOff(Xschema),
   			   at(xWalkDistance(Xschema,
   					    Distance2),
   			      Time),
   			   Terminates)
   	      ]).
 */
 %  "% =================================".


% [xschema,distance,time]
% HoldsAt(XWalkDistance(xschema,distance),time) ->
% Initiates(XWalkSteppingOff(xschema),XWalkDistance(xschema,distance),time).
% '->'(
%    xWalkDistance(Xschema,Distance), 
%    initiates(
%       xWalkSteppingOff(Xschema), 
%       xWalkDistance(Xschema,Distance), 
%       Time)).
if xWalkDistance(Xschema, Distance)then initiates(xWalkSteppingOff(Xschema), xWalkDistance(Xschema, Distance)at Time, _).

 /*  reactive_rule([xWalkDistance(Xschema,Distance)],
   	      [ initiates(xWalkSteppingOff(Xschema),
   			  at(xWalkDistance(Xschema,
   					   Distance),
   			     Time),
   			  Initiates)
   	      ]).
 */
 %  "% =================================".


% [xschema,distance01,distance02,distance03,offset,time]
% HoldsAt(XWalkDistance(xschema,distance01),time) &
% (distance03=(distance01-(offset*(XWalkSize(xschema)/XWalkRate(xschema))))) ->
% Trajectory(XWalkStepping(xschema,distance02),
%            time,
%            XWalkDistance(xschema,distance03),
%            offset).
% '->'(
%    ','(
%       xWalkDistance(Xschema,Distance01), 
%       '-Pred'(
%          Distance01, 
%          '*'(
%             Offset, 
%             '/'(
%                xWalkSize(Xschema), 
%                xWalkRate(Xschema))), 
%          Distance03)), 
%    trajectory(
%       xWalkStepping(Xschema,Distance02), 
%       Time, Time, 
%                xWalkDistance(Xschema,Distance03), 
%                Offset)).
if xWalkDistance(Xschema, Distance01), '-Pred'(Distance01, Offset*(xWalkSize(Xschema)/xWalkRate(Xschema)), Distance03)then trajectory(xWalkStepping(Xschema, Distance02), Time, xWalkDistance(Xschema, Distance03), Offset).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',103).

 /*  reactive_rule([ xWalkDistance(Xschema,Distance01),
   		'-Pred'(Distance01,
   			Offset*(xWalkSize(Xschema)/xWalkRate(Xschema)),
   			Distance03)
   	      ],
   	      [ trajectory(xWalkStepping(Xschema,
   					 Distance02),
   			   Time,
   			   xWalkDistance(Xschema,
   					 Distance03),
   			   Offset)
   	      ]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       '-Pred'(
%          Distance01, 
%          '*'(
%             Offset, 
%             '/'(
%                xWalkSize(Xschema), 
%                xWalkRate(Xschema))), 
%          Distance03), 
%       not(
%          trajectory(
%             xWalkStepping(Xschema,Distance02), 
%             Time, Time, 
%                      xWalkDistance(Xschema,Distance03), 
%                      Offset))), 
%    not(
%       xWalkDistance(Xschema,Distance01))).
if'-Pred'(Distance01, Offset*(xWalkSize(Xschema)/xWalkRate(Xschema)), Distance03), not trajectory(xWalkStepping(Xschema, Distance02), Time, xWalkDistance(Xschema, Distance03), Offset)then not xWalkDistance(Xschema, Distance01).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',103).

 /*  reactive_rule([ '-Pred'(Distance01,
   			Offset*(xWalkSize(Xschema)/xWalkRate(Xschema)),
   			Distance03),
   		not(trajectory(xWalkStepping(Xschema,
   					     Distance02),
   			       Time,
   			       xWalkDistance(Xschema,
   					     Distance03),
   			       Offset))
   	      ],
   	      [not(xWalkDistance(Xschema,Distance01))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       xWalkDistance(Xschema,Distance01), 
%       not(
%          trajectory(
%             xWalkStepping(Xschema,Distance02), 
%             Time, Time, 
%                      xWalkDistance(Xschema,Distance03), 
%                      Offset))), 
%    not(
%       '-Pred'(
%          Distance01, 
%          '*'(
%             Offset, 
%             '/'(
%                xWalkSize(Xschema), 
%                xWalkRate(Xschema))), 
%          Distance03))).
if xWalkDistance(Xschema, Distance01), not trajectory(xWalkStepping(Xschema, Distance02), Time, xWalkDistance(Xschema, Distance03), Offset)then not'-Pred'(Distance01, Offset*(xWalkSize(Xschema)/xWalkRate(Xschema)), Distance03).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',103).

 /*  reactive_rule([ xWalkDistance(Xschema,Distance01),
   		not(trajectory(xWalkStepping(Xschema,
   					     Distance02),
   			       Time,
   			       xWalkDistance(Xschema,
   					     Distance03),
   			       Offset))
   	      ],
   	      [ not('-Pred'(Distance01,
   			    Offset*(xWalkSize(Xschema)/xWalkRate(Xschema)),
   			    Distance03))
   	      ]).
 */
 %  "% =================================".


% [xschema,distance,time]
% HoldsAt(XWalkStepping(xschema,distance),time) &
% HoldsAt(XWalkDistance(xschema,distance),time) ->
% Happens(XWalkSteppingOff(xschema),time).
% '->'(
%    ','(
%       xWalkStepping(Xschema,Distance), 
%       xWalkDistance(Xschema,Distance)), 
%    xWalkSteppingOff(Xschema)).
xWalkSteppingOff(Xschema)if xWalkStepping(Xschema, Distance), xWalkDistance(Xschema, Distance).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',111).

 /*  l_events(happens(xWalkSteppingOff(Xschema),
   		 Time_From,
   		 Time_From),
   	 [ holds(xWalkStepping(Xschema,Distance),
   		 Time_From),
   	   xWalkDistance(Xschema,Distance)
   	 ]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       xWalkDistance(Xschema,Distance), 
%       not(
%          xWalkSteppingOff(Xschema))), 
%    not(
%       xWalkStepping(Xschema,Distance))).
not xWalkStepping(Xschema, Distance)if xWalkDistance(Xschema, Distance), not xWalkSteppingOff(Xschema).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',111).

 /*  l_int(holds(not(xWalkStepping(Xschema,Distance)),
   	    Time_At),
         [ xWalkDistance(Xschema,Distance),
   	not(xWalkSteppingOff(Xschema))
         ]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       xWalkStepping(Xschema,Distance), 
%       not(
%          xWalkSteppingOff(Xschema))), 
%    not(
%       xWalkDistance(Xschema,Distance))).
if xWalkStepping(Xschema, Distance), not xWalkSteppingOff(Xschema)then not xWalkDistance(Xschema, Distance).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',111).

 /*  reactive_rule([ holds(xWalkStepping(Xschema,Distance),
   		      Time_At5),
   		not(xWalkSteppingOff(Xschema))
   	      ],
   	      [not(xWalkDistance(Xschema,Distance))]).
 */
 %  "% =================================".


%; punctual events

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',117).
% event XWalkTestFooting(xschema)
% event(
%    xWalkTestFooting(xschema)).
events([xWalkTestFooting/1]).
% mpred_prop(
%    xWalkTestFooting(xschema), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',117).
mpred_prop(xWalkTestFooting(xschema),event).

% event XWalkMoveFoot(xschema)
% event(
%    xWalkMoveFoot(xschema)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',117).
events([xWalkMoveFoot/1]).
% mpred_prop(
%    xWalkMoveFoot(xschema), 
%    event).
mpred_prop(xWalkMoveFoot(xschema),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',120).
% [xschema,time]
% Happens(XWalkTestFooting(xschema),time) &
% !HoldsAt(XWalkFootingOK(xschema),time) ->
% Happens(XWalkMoveFoot(xschema),time+1).
% '->'(
%    ','(
%       b(Time,When), 
%       ','(
%          xWalkTestFooting(Xschema), 
%          not(
%             xWalkFootingOK(Xschema)))), 
%    happens(
%       xWalkMoveFoot(Xschema), 
%       When)).
if b(Time, A), xWalkTestFooting(Xschema), not xWalkFootingOK(Xschema)then happens(xWalkMoveFoot(Xschema), A).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',120).

 /*  reactive_rule([ b(Time,When),
   		xWalkTestFooting(Xschema),
   		not(xWalkFootingOK(Xschema))
   	      ],
   	      [happens(xWalkMoveFoot(Xschema),When)]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       b(Time,When3), 
%       ','(
%          not(
%             xWalkFootingOK(Xschema)), 
%          not(
%             happens(
%                xWalkMoveFoot(Xschema), 
%                When3)))), 
%    not(
%       xWalkTestFooting(Xschema))).
if b(Time, A), not xWalkFootingOK(Xschema), not happens(xWalkMoveFoot(Xschema), A)then not xWalkTestFooting(Xschema).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',120).

 /*  reactive_rule([ b(Time,When3),
   		not(xWalkFootingOK(Xschema)),
   		not(happens(xWalkMoveFoot(Xschema),When3))
   	      ],
   	      [not(xWalkTestFooting(Xschema))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       b(Time,When4), 
%       ','(
%          xWalkTestFooting(Xschema), 
%          not(
%             happens(
%                xWalkMoveFoot(Xschema), 
%                When4)))), 
%    not(
%       not(
%          xWalkFootingOK(Xschema)))).
if b(Time, A), xWalkTestFooting(Xschema), not happens(xWalkMoveFoot(Xschema), A)then not not xWalkFootingOK(Xschema).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',120).

 /*  reactive_rule([ b(Time,When4),
   		xWalkTestFooting(Xschema),
   		not(happens(xWalkMoveFoot(Xschema),When4))
   	      ],
   	      [not(not(xWalkFootingOK(Xschema)))]).
 */
 %  "% =================================".


% [xschema,time]
% Happens(XWalkMoveFoot(xschema),time) ->
% Happens(XWalkReadyOn(xschema),time+1).
% '->'(
%    ','(
%       b(Time,When), 
%       xWalkMoveFoot(Xschema)), 
%    happens(
%       xWalkReadyOn(Xschema), 
%       When)).
if b(Time, A), xWalkMoveFoot(Xschema)then happens(xWalkReadyOn(Xschema), A).

 /*  reactive_rule([b(Time,When),xWalkMoveFoot(Xschema)],
   	      [happens(xWalkReadyOn(Xschema),When)]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       b(Time,When3), 
%       not(
%          happens(
%             xWalkReadyOn(Xschema), 
%             When3))), 
%    not(
%       xWalkMoveFoot(Xschema))).
if b(Time, A), not happens(xWalkReadyOn(Xschema), A)then not xWalkMoveFoot(Xschema).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',126).

 /*  reactive_rule([ b(Time,When3),
   		not(happens(xWalkReadyOn(Xschema),When3))
   	      ],
   	      [not(xWalkMoveFoot(Xschema))]).
 */
 %  "% =================================".


%; Petri net behavior

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',131).
% fluent XWalkReady(xschema)
% fluent(
%    xWalkReady(xschema)).
fluents([xWalkReady/1]).
% mpred_prop(
%    xWalkReady(xschema), 
%    fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',131).
mpred_prop(xWalkReady(xschema),fluent).

% event XWalkReadyOn(xschema)
% event(
%    xWalkReadyOn(xschema)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',131).
events([xWalkReadyOn/1]).
% mpred_prop(
%    xWalkReadyOn(xschema), 
%    event).
mpred_prop(xWalkReadyOn(xschema),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',133).
% event XWalkReadyOff(xschema)
% event(
%    xWalkReadyOff(xschema)).
events([xWalkReadyOff/1]).
% mpred_prop(
%    xWalkReadyOff(xschema), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',133).
mpred_prop(xWalkReadyOff(xschema),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',135).
% [xschema,time]
% HoldsAt(XWalkEnabled(xschema),time) &
% HoldsAt(XWalkVision(xschema),time) &
% HoldsAt(XWalkPosture(xschema),time) &
% !({distance} HoldsAt(XWalkStepping(xschema,distance),time)) & ; !!! pulse
% !HoldsAt(XWalkReady(xschema),time) ->
% Happens(XWalkReadyOn(xschema),time).
% '->'(
%    ','(
%       xWalkEnabled(Xschema), 
%       ','(
%          xWalkVision(Xschema), 
%          ','(
%             xWalkPosture(Xschema), 
%             ','(
%                not(
%                   xWalkStepping(Xschema,Distance)), 
%                not(
%                   xWalkReady(Xschema)))))), 
%    xWalkReadyOn(Xschema)).
xWalkReadyOn(Xschema)if xWalkEnabled(Xschema), xWalkVision(Xschema), xWalkPosture(Xschema), not xWalkStepping(Xschema, Distance), not xWalkReady(Xschema).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',135).

 /*  l_events(happens(xWalkReadyOn(Xschema),
   		 Time_From,
   		 Time_From),
   	 [ xWalkEnabled(Xschema),
   	   xWalkVision(Xschema),
   	   xWalkPosture(Xschema),
   	   holds(not(xWalkStepping(Xschema,Distance)),
   		 Time_From),
   	   holds(not(xWalkReady(Xschema)),Time_From)
   	 ]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       xWalkVision(Xschema), 
%       ','(
%          xWalkPosture(Xschema), 
%          ','(
%             not(
%                xWalkStepping(Xschema,Distance)), 
%             ','(
%                not(
%                   xWalkReady(Xschema)), 
%                not(
%                   xWalkReadyOn(Xschema)))))), 
%    not(
%       xWalkEnabled(Xschema))).
if xWalkVision(Xschema), xWalkPosture(Xschema), not xWalkStepping(Xschema, Distance), not xWalkReady(Xschema), not xWalkReadyOn(Xschema)then not xWalkEnabled(Xschema).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',135).

 /*  reactive_rule([ xWalkVision(Xschema),
   		xWalkPosture(Xschema),
   		holds(not(xWalkStepping(Xschema,Distance)),
   		      Time_At),
   		holds(not(xWalkReady(Xschema)),Time_At),
   		not(xWalkReadyOn(Xschema))
   	      ],
   	      [not(xWalkEnabled(Xschema))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       xWalkPosture(Xschema), 
%       ','(
%          not(
%             xWalkStepping(Xschema,Distance)), 
%          ','(
%             not(
%                xWalkReady(Xschema)), 
%             ','(
%                xWalkEnabled(Xschema), 
%                not(
%                   xWalkReadyOn(Xschema)))))), 
%    not(
%       xWalkVision(Xschema))).
if xWalkPosture(Xschema), not xWalkStepping(Xschema, Distance), not xWalkReady(Xschema), xWalkEnabled(Xschema), not xWalkReadyOn(Xschema)then not xWalkVision(Xschema).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',135).

 /*  reactive_rule([ xWalkPosture(Xschema),
   		holds(not(xWalkStepping(Xschema,Distance)),
   		      Time_At5),
   		holds(not(xWalkReady(Xschema)),Time_At5),
   		xWalkEnabled(Xschema),
   		not(xWalkReadyOn(Xschema))
   	      ],
   	      [not(xWalkVision(Xschema))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       not(
%          xWalkStepping(Xschema,Distance)), 
%       ','(
%          not(
%             xWalkReady(Xschema)), 
%          ','(
%             xWalkVision(Xschema), 
%             ','(
%                xWalkEnabled(Xschema), 
%                not(
%                   xWalkReadyOn(Xschema)))))), 
%    not(
%       xWalkPosture(Xschema))).
if not xWalkStepping(Xschema, Distance), not xWalkReady(Xschema), xWalkVision(Xschema), xWalkEnabled(Xschema), not xWalkReadyOn(Xschema)then not xWalkPosture(Xschema).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',135).

 /*  reactive_rule([ holds(not(xWalkStepping(Xschema,Distance)),
   		      Time_At6),
   		holds(not(xWalkReady(Xschema)),Time_At6),
   		xWalkVision(Xschema),
   		xWalkEnabled(Xschema),
   		not(xWalkReadyOn(Xschema))
   	      ],
   	      [not(xWalkPosture(Xschema))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       not(
%          xWalkReady(Xschema)), 
%       ','(
%          xWalkPosture(Xschema), 
%          ','(
%             xWalkVision(Xschema), 
%             ','(
%                xWalkEnabled(Xschema), 
%                not(
%                   xWalkReadyOn(Xschema)))))), 
%    xWalkStepping(Xschema,Distance)).
xWalkStepping(Xschema, Distance)if not xWalkReady(Xschema), xWalkPosture(Xschema), xWalkVision(Xschema), xWalkEnabled(Xschema), not xWalkReadyOn(Xschema).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',135).

 /*  l_int(holds(xWalkStepping(Xschema,Distance),Time_At7),
         [ holds(not(xWalkReady(Xschema)),Time_At7),
   	xWalkPosture(Xschema),
   	xWalkVision(Xschema),
   	xWalkEnabled(Xschema),
   	not(xWalkReadyOn(Xschema))
         ]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       not(
%          xWalkStepping(Xschema,Distance)), 
%       ','(
%          xWalkPosture(Xschema), 
%          ','(
%             xWalkVision(Xschema), 
%             ','(
%                xWalkEnabled(Xschema), 
%                not(
%                   xWalkReadyOn(Xschema)))))), 
%    not(
%       not(
%          xWalkReady(Xschema)))).
not not xWalkReady(Xschema)if not xWalkStepping(Xschema, Distance), xWalkPosture(Xschema), xWalkVision(Xschema), xWalkEnabled(Xschema), not xWalkReadyOn(Xschema).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',135).

 /*  l_int(holds(not([holds(not(xWalkReady(Xschema)),Time_At8)]),
   	    Time_At8),
         [ holds(not(xWalkStepping(Xschema,Distance)),
   	      Time_At8),
   	xWalkPosture(Xschema),
   	xWalkVision(Xschema),
   	xWalkEnabled(Xschema),
   	not(xWalkReadyOn(Xschema))
         ]).
 */
 %  "% =================================".


% [xschema,time]
% Initiates(XWalkReadyOn(xschema),XWalkReady(xschema),time).
% initiates(
%    xWalkReadyOn(Xschema), 
%    xWalkReady(Xschema), 
%    Time).
xWalkReadyOn(Xschema)initiates xWalkReady(Xschema).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',144).

 /*  initiated(happens(xWalkReadyOn(Xschema),
   		  Time_From,
   		  Time_Until),
   	  xWalkReady(Xschema),
   	  []).
 */
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',146).
% [xschema,time]
% Terminates(XWalkReadyOff(xschema),XWalkReady(xschema),time).
% terminates(
%    xWalkReadyOff(Xschema), 
%    xWalkReady(Xschema), 
%    Time).
xWalkReadyOff(Xschema)terminates xWalkReady(Xschema).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',146).

 /*  terminated(happens(xWalkReadyOff(Xschema),
   		   Time_From,
   		   Time_Until),
   	   xWalkReady(Xschema),
   	   []).
 */
 %  "% =================================".


%; bypass_ok
% [xschema,time]
% !(% {distance} HoldsAt(XWalkStepping(xschema,distance),time)) &
% HoldsAt(XWalkVisionOK(xschema),time) &
% HoldsAt(XWalkReady(xschema),time) ->
% Happens(XWalkSteppingOn(xschema),time) &
% Happens(XWalkReadyOff(xschema),time).
% '->'(
%    ','(
%       xWalkVisionOK(Xschema), 
%       ','(
%          xWalkReady(Xschema), 
%          ','(
%             ';'(
%                not(
%                   xWalkSteppingOn(Xschema)), 
%                not(
%                   xWalkReadyOff(Xschema))), 
%             some(
%                Exists_Distance, 
%                '$kolem_Fn_744'(Xschema,Time))))), 
%    not(
%       not(
%          xWalkStepping(Xschema,Exists_Distance)))).
not not xWalkStepping(Xschema, Exists_Distance)if xWalkVisionOK(Xschema), xWalkReady(Xschema), (not xWalkSteppingOn(Xschema);not xWalkReadyOff(Xschema)), some(Exists_Distance, '$kolem_Fn_744'(Xschema, Time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',150).

 /*   l_int(holds(not([ holds(not(xWalkStepping(Xschema,
                                                Exists_Distance)),
                              Time_At)
                      ]),
                  Time_At),
            [ xWalkVisionOK(Xschema),
              holds(xWalkReady(Xschema), Time_At),
               (not(xWalkSteppingOn(Xschema));not(xWalkReadyOff(Xschema))),
              some(Exists_Distance, '$kolem_Fn_744'(Xschema, Time))
            ]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       xWalkReady(Xschema), 
%       ','(
%          not(
%             xWalkStepping(Xschema,Exists_Distance)), 
%          ','(
%             ';'(
%                not(
%                   xWalkSteppingOn(Xschema)), 
%                not(
%                   xWalkReadyOff(Xschema))), 
%             some(
%                Exists_Distance, 
%                '$kolem_Fn_744'(Xschema,Time))))), 
%    not(
%       xWalkVisionOK(Xschema))).
if xWalkReady(Xschema), not xWalkStepping(Xschema, Exists_Distance), (not xWalkSteppingOn(Xschema);not xWalkReadyOff(Xschema)), some(Exists_Distance, '$kolem_Fn_744'(Xschema, Time))then not xWalkVisionOK(Xschema).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',150).

 /*   reactive_rule([ holds(xWalkReady(Xschema), Time_At5),
                      holds(not(xWalkStepping(Xschema,
                                              Exists_Distance)),
                            Time_At5),
                       (not(xWalkSteppingOn(Xschema));not(xWalkReadyOff(Xschema))),
                      some(Exists_Distance,
                           '$kolem_Fn_744'(Xschema, Time))
                    ],
                    [not(xWalkVisionOK(Xschema))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       xWalkVisionOK(Xschema), 
%       ','(
%          not(
%             xWalkStepping(Xschema,Exists_Distance)), 
%          ','(
%             ';'(
%                not(
%                   xWalkSteppingOn(Xschema)), 
%                not(
%                   xWalkReadyOff(Xschema))), 
%             some(
%                Exists_Distance, 
%                '$kolem_Fn_744'(Xschema,Time))))), 
%    not(
%       xWalkReady(Xschema))).
not xWalkReady(Xschema)if xWalkVisionOK(Xschema), not xWalkStepping(Xschema, Exists_Distance), (not xWalkSteppingOn(Xschema);not xWalkReadyOff(Xschema)), some(Exists_Distance, '$kolem_Fn_744'(Xschema, Time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',150).

 /*   l_int(holds(not(xWalkReady(Xschema)), Time_At6),
            [ xWalkVisionOK(Xschema),
              holds(not(xWalkStepping(Xschema, Exists_Distance)),
                    Time_At6),
               (not(xWalkSteppingOn(Xschema));not(xWalkReadyOff(Xschema))),
              some(Exists_Distance, '$kolem_Fn_744'(Xschema, Time))
            ]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       not(
%          xWalkStepping(Xschema,Exists_Distance)), 
%       ','(
%          xWalkVisionOK(Xschema), 
%          ','(
%             xWalkReady(Xschema), 
%             some(
%                Exists_Distance, 
%                '$kolem_Fn_744'(Xschema,Time))))), 
%    xWalkSteppingOn(Xschema)).
if not xWalkStepping(Xschema, Exists_Distance), xWalkVisionOK(Xschema), xWalkReady(Xschema), some(Exists_Distance, '$kolem_Fn_744'(Xschema, Time))then xWalkSteppingOn(Xschema).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',150).

 /*  reactive_rule([ holds(not(xWalkStepping(Xschema,
   					Exists_Distance)),
   		      Time_At7),
   		xWalkVisionOK(Xschema),
   		holds(xWalkReady(Xschema),Time_At7),
   		some(Exists_Distance,
   		     '$kolem_Fn_744'(Xschema,Time))
   	      ],
   	      [xWalkSteppingOn(Xschema)]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       not(
%          xWalkStepping(Xschema,Exists_Distance)), 
%       ','(
%          xWalkVisionOK(Xschema), 
%          ','(
%             xWalkReady(Xschema), 
%             some(
%                Exists_Distance, 
%                '$kolem_Fn_744'(Xschema,Time))))), 
%    xWalkReadyOff(Xschema)).
xWalkReadyOff(Xschema)if not xWalkStepping(Xschema, Exists_Distance), xWalkVisionOK(Xschema), xWalkReady(Xschema), some(Exists_Distance, '$kolem_Fn_744'(Xschema, Time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',150).

 /*  l_events(happens(xWalkReadyOff(Xschema),
   		 Time_From,
   		 Time_From),
   	 [ holds(not(xWalkStepping(Xschema,Exists_Distance)),
   		 Time_From),
   	   xWalkVisionOK(Xschema),
   	   holds(xWalkReady(Xschema),Time_From),
   	   some(Exists_Distance,
   		'$kolem_Fn_744'(Xschema,Time))
   	 ]).
 */
 %  "% =================================".


%; !bypass_ok
% [xschema,time]
% !(% {distance} HoldsAt(XWalkStepping(xschema,distance),time)) &
% !HoldsAt(XWalkVisionOK(xschema),time) &
% HoldsAt(XWalkReady(xschema),time) ->
% Happens(XWalkTestFooting(xschema),time) &
% Happens(XWalkReadyOff(xschema),time).
% '->'(
%    ','(
%       not(
%          xWalkVisionOK(Xschema)), 
%       ','(
%          xWalkReady(Xschema), 
%          ','(
%             ';'(
%                not(
%                   xWalkTestFooting(Xschema)), 
%                not(
%                   xWalkReadyOff(Xschema))), 
%             some(
%                Exists_Distance, 
%                '$kolem_Fn_745'(Xschema,Time))))), 
%    not(
%       not(
%          xWalkStepping(Xschema,Exists_Distance)))).
not not xWalkStepping(Xschema, Exists_Distance)if not xWalkVisionOK(Xschema), xWalkReady(Xschema), (not xWalkTestFooting(Xschema);not xWalkReadyOff(Xschema)), some(Exists_Distance, '$kolem_Fn_745'(Xschema, Time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',158).

 /*   l_int(holds(not([ holds(not(xWalkStepping(Xschema,
                                                Exists_Distance)),
                              Time_At)
                      ]),
                  Time_At),
            [ not(xWalkVisionOK(Xschema)),
              holds(xWalkReady(Xschema), Time_At),
               (not(xWalkTestFooting(Xschema));not(xWalkReadyOff(Xschema))),
              some(Exists_Distance, '$kolem_Fn_745'(Xschema, Time))
            ]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       xWalkReady(Xschema), 
%       ','(
%          not(
%             xWalkStepping(Xschema,Exists_Distance)), 
%          ','(
%             ';'(
%                not(
%                   xWalkTestFooting(Xschema)), 
%                not(
%                   xWalkReadyOff(Xschema))), 
%             some(
%                Exists_Distance, 
%                '$kolem_Fn_745'(Xschema,Time))))), 
%    not(
%       not(
%          xWalkVisionOK(Xschema)))).
if xWalkReady(Xschema), not xWalkStepping(Xschema, Exists_Distance), (not xWalkTestFooting(Xschema);not xWalkReadyOff(Xschema)), some(Exists_Distance, '$kolem_Fn_745'(Xschema, Time))then not not xWalkVisionOK(Xschema).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',158).

 /*   reactive_rule([ holds(xWalkReady(Xschema), Time_At5),
                      holds(not(xWalkStepping(Xschema,
                                              Exists_Distance)),
                            Time_At5),
                       (not(xWalkTestFooting(Xschema));not(xWalkReadyOff(Xschema))),
                      some(Exists_Distance,
                           '$kolem_Fn_745'(Xschema, Time))
                    ],
                    [not(not(xWalkVisionOK(Xschema)))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       not(
%          xWalkVisionOK(Xschema)), 
%       ','(
%          not(
%             xWalkStepping(Xschema,Exists_Distance)), 
%          ','(
%             ';'(
%                not(
%                   xWalkTestFooting(Xschema)), 
%                not(
%                   xWalkReadyOff(Xschema))), 
%             some(
%                Exists_Distance, 
%                '$kolem_Fn_745'(Xschema,Time))))), 
%    not(
%       xWalkReady(Xschema))).
not xWalkReady(Xschema)if not xWalkVisionOK(Xschema), not xWalkStepping(Xschema, Exists_Distance), (not xWalkTestFooting(Xschema);not xWalkReadyOff(Xschema)), some(Exists_Distance, '$kolem_Fn_745'(Xschema, Time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',158).

 /*   l_int(holds(not(xWalkReady(Xschema)), Time_At6),
            [ not(xWalkVisionOK(Xschema)),
              holds(not(xWalkStepping(Xschema, Exists_Distance)),
                    Time_At6),
               (not(xWalkTestFooting(Xschema));not(xWalkReadyOff(Xschema))),
              some(Exists_Distance, '$kolem_Fn_745'(Xschema, Time))
            ]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       not(
%          xWalkStepping(Xschema,Exists_Distance)), 
%       ','(
%          not(
%             xWalkVisionOK(Xschema)), 
%          ','(
%             xWalkReady(Xschema), 
%             some(
%                Exists_Distance, 
%                '$kolem_Fn_745'(Xschema,Time))))), 
%    xWalkTestFooting(Xschema)).
if not xWalkStepping(Xschema, Exists_Distance), not xWalkVisionOK(Xschema), xWalkReady(Xschema), some(Exists_Distance, '$kolem_Fn_745'(Xschema, Time))then xWalkTestFooting(Xschema).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',158).

 /*  reactive_rule([ holds(not(xWalkStepping(Xschema,
   					Exists_Distance)),
   		      Time_At7),
   		not(xWalkVisionOK(Xschema)),
   		holds(xWalkReady(Xschema),Time_At7),
   		some(Exists_Distance,
   		     '$kolem_Fn_745'(Xschema,Time))
   	      ],
   	      [xWalkTestFooting(Xschema)]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       not(
%          xWalkStepping(Xschema,Exists_Distance)), 
%       ','(
%          not(
%             xWalkVisionOK(Xschema)), 
%          ','(
%             xWalkReady(Xschema), 
%             some(
%                Exists_Distance, 
%                '$kolem_Fn_745'(Xschema,Time))))), 
%    xWalkReadyOff(Xschema)).
xWalkReadyOff(Xschema)if not xWalkStepping(Xschema, Exists_Distance), not xWalkVisionOK(Xschema), xWalkReady(Xschema), some(Exists_Distance, '$kolem_Fn_745'(Xschema, Time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',158).

 /*  l_events(happens(xWalkReadyOff(Xschema),
   		 Time_From,
   		 Time_From),
   	 [ holds(not(xWalkStepping(Xschema,Exists_Distance)),
   		 Time_From),
   	   not(xWalkVisionOK(Xschema)),
   	   holds(xWalkReady(Xschema),Time_From),
   	   some(Exists_Distance,
   		'$kolem_Fn_745'(Xschema,Time))
   	 ]).
 */
 %  "% =================================".


% [xschema,distance,time]
% HoldsAt(XWalkStepping(xschema,distance),time) &
% HoldsAt(XWalkDistance(xschema,distance),time) &
% (distance > 0) ->
% Happens(XWalkReadyOn(xschema),time).
% '->'(
%    ','(
%       xWalkStepping(Xschema,Distance), 
%       ','(
%          xWalkDistance(Xschema,Distance), 
%          comparison(Distance,0,>))), 
%    xWalkReadyOn(Xschema)).
xWalkReadyOn(Xschema)if xWalkStepping(Xschema, Distance), xWalkDistance(Xschema, Distance), comparison(Distance, 0, >).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',166).

 /*  l_events(happens(xWalkReadyOn(Xschema),
   		 Time_From,
   		 Time_From),
   	 [ holds(xWalkStepping(Xschema,Distance),
   		 Time_From),
   	   xWalkDistance(Xschema,Distance),
   	   comparison(Distance,0,>)
   	 ]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       xWalkDistance(Xschema,Distance), 
%       ','(
%          comparison(Distance,0,>), 
%          not(
%             xWalkReadyOn(Xschema)))), 
%    not(
%       xWalkStepping(Xschema,Distance))).
not xWalkStepping(Xschema, Distance)if xWalkDistance(Xschema, Distance), comparison(Distance, 0, >), not xWalkReadyOn(Xschema).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',166).

 /*  l_int(holds(not(xWalkStepping(Xschema,Distance)),
   	    Time_At),
         [ xWalkDistance(Xschema,Distance),
   	comparison(Distance,0,>),
   	not(xWalkReadyOn(Xschema))
         ]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       comparison(Distance,0,>), 
%       ','(
%          xWalkStepping(Xschema,Distance), 
%          not(
%             xWalkReadyOn(Xschema)))), 
%    not(
%       xWalkDistance(Xschema,Distance))).
if comparison(Distance, 0, >), xWalkStepping(Xschema, Distance), not xWalkReadyOn(Xschema)then not xWalkDistance(Xschema, Distance).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',166).

 /*  reactive_rule([ comparison(Distance,0,>),
   		holds(xWalkStepping(Xschema,Distance),
   		      Time_At5),
   		not(xWalkReadyOn(Xschema))
   	      ],
   	      [not(xWalkDistance(Xschema,Distance))]).
 */
 %  "% =================================".


%; End of file.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',170).
% translate: ending  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e.lps 
