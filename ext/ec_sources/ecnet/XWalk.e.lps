:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/WritingABook.e',97).
% translate: unskipped  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e.lps 
:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(lps).
% translate: begining  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e.lps 
% Thu, 08 Oct 2020 19:07:20 GMT File: <stream>(0x5600a3ae1600)%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; XWalk: WALK x-schema representation of walking
%;
%; @phdthesis{Narayanan:1997,
%;   author = "Srinivas S. Narayanan",
%;   year = "1997",
%;   title = "Knowledge-based Action Representations for Metaphor and Aspect (\uppercase{KARMA})",
%;   address = "Berkeley, CA",
%;   school = "University of California, Berkeley",
%; }
%;

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',22).
% option trajectory on
:- if(is_e_toplevel).
:- set_ec_option(trajectory, on).
:- endif.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',24).
% sort xschema
sort(xschema).
 %  sort(xschema).
%; parameters

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',28).
% predicate XWalkAgent(xschema,agent)
 %  blue=predicate(xWalkAgent(xschema,agent)).
 %  predicate(xWalkAgent(xschema,agent)).
predicates([xWalkAgent/2]).
 %  predicates([xWalkAgent/2]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',28).
mpred_prop(xWalkAgent(xschema,agent),predicate).
 %  mpred_prop(xWalkAgent(xschema,agent),predicate).

% function XWalkRate(xschema): offset ; step duration
 %  blue=function(xWalkRate(xschema)).
 %  function(xWalkRate(xschema)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',28).
functions([xWalkRate/1]).
 %  functions([xWalkRate/1]).
mpred_prop(xWalkRate(xschema),function).
 %  mpred_prop(xWalkRate(xschema),function).
 %  blue=predicate(xWalkRatePred(xschema,[offset,;,step,duration])).
 %  predicate(xWalkRatePred(xschema,[offset,;,step,duration])).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',28).
predicates([xWalkRatePred/2]).
 %  predicates([xWalkRatePred/2]).
mpred_prop(xWalkRatePred(xschema,[offset,;,step,duration]),predicate).
 %  mpred_prop(xWalkRatePred(xschema,[offset,;,step,duration]),predicate).
 %  pl=axiom(functional_predicate(xWalkRate,xWalkRatePred),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',28).
functional_predicate(xWalkRate,xWalkRatePred).
 %  functional_predicate(xWalkRate,xWalkRatePred).

 /*  pl=axiom(function_argtypes(xWalkRatePred,
   			xWalkRate(xschema),
   			[offset,;,step,duration]),
         []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',28).
function_argtypes(xWalkRatePred,
		  xWalkRate(xschema),
		  [offset,;,step,duration]).

 /*  function_argtypes(xWalkRatePred,
   		  xWalkRate(xschema),
   		  [offset,;,step,duration]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',28).
resultIsa(xWalkRate,[offset,;,step,duration]).
 %  resultIsa(xWalkRate,[offset,;,step,duration]).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',30).
% function XWalkSize(xschema): offset ; step size
 %  blue=function(xWalkSize(xschema)).
 %  function(xWalkSize(xschema)).
functions([xWalkSize/1]).
 %  functions([xWalkSize/1]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',30).
mpred_prop(xWalkSize(xschema),function).
 %  mpred_prop(xWalkSize(xschema),function).
 %  blue=predicate(xWalkSizePred(xschema,[offset,;,step,size])).
 %  predicate(xWalkSizePred(xschema,[offset,;,step,size])).
predicates([xWalkSizePred/2]).
 %  predicates([xWalkSizePred/2]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',30).
mpred_prop(xWalkSizePred(xschema,[offset,;,step,size]),predicate).
 %  mpred_prop(xWalkSizePred(xschema,[offset,;,step,size]),predicate).
 %  pl=axiom(functional_predicate(xWalkSize,xWalkSizePred),[]).
functional_predicate(xWalkSize,xWalkSizePred).
 %  functional_predicate(xWalkSize,xWalkSizePred).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',30).

 /*  pl=axiom(function_argtypes(xWalkSizePred,
   			xWalkSize(xschema),
   			[offset,;,step,size]),
         []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',30).
function_argtypes(xWalkSizePred,
		  xWalkSize(xschema),
		  [offset,;,step,size]).

 /*  function_argtypes(xWalkSizePred,
   		  xWalkSize(xschema),
   		  [offset,;,step,size]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',30).
resultIsa(xWalkSize,[offset,;,step,size]).
 %  resultIsa(xWalkSize,[offset,;,step,size]).
%; TTL input lines

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',34).
% fluent XWalkEnabled(xschema)
 %  blue=fluent(xWalkEnabled(xschema)).
 %  fluent(xWalkEnabled(xschema)).
fluents([xWalkEnabled/1]).
 %  fluents([xWalkEnabled/1]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',34).
mpred_prop(xWalkEnabled(xschema),fluent).
 %  mpred_prop(xWalkEnabled(xschema),fluent).

% fluent XWalkGroundStable(xschema)
 %  blue=fluent(xWalkGroundStable(xschema)).
 %  fluent(xWalkGroundStable(xschema)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',34).
fluents([xWalkGroundStable/1]).
 %  fluents([xWalkGroundStable/1]).
mpred_prop(xWalkGroundStable(xschema),fluent).
 %  mpred_prop(xWalkGroundStable(xschema),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',36).
% fluent XWalkPosture(xschema)
 %  blue=fluent(xWalkPosture(xschema)).
 %  fluent(xWalkPosture(xschema)).
fluents([xWalkPosture/1]).
 %  fluents([xWalkPosture/1]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',36).
mpred_prop(xWalkPosture(xschema),fluent).
 %  mpred_prop(xWalkPosture(xschema),fluent).

% fluent XWalkFootingOK(xschema)
 %  blue=fluent(xWalkFootingOK(xschema)).
 %  fluent(xWalkFootingOK(xschema)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',36).
fluents([xWalkFootingOK/1]).
 %  fluents([xWalkFootingOK/1]).
mpred_prop(xWalkFootingOK(xschema),fluent).
 %  mpred_prop(xWalkFootingOK(xschema),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',38).
% noninertial XWalkEnabled, XWalkGroundStable, XWalkPosture, XWalkFootingOK
noninertial(xWalkEnabled).
 %  noninertial(xWalkEnabled).
noninertial(xWalkGroundStable).
 %  noninertial(xWalkGroundStable).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',38).
noninertial(xWalkPosture).
 %  noninertial(xWalkPosture).
noninertial(xWalkFootingOK).
 %  noninertial(xWalkFootingOK).
%; fluents

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',42).
% fluent XWalkDistance(xschema,distance)
 %  blue=fluent(xWalkDistance(xschema,distance)).
 %  fluent(xWalkDistance(xschema,distance)).
fluents([xWalkDistance/2]).
 %  fluents([xWalkDistance/2]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',42).
mpred_prop(xWalkDistance(xschema,distance),fluent).
 %  mpred_prop(xWalkDistance(xschema,distance),fluent).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',44).
% [xschema,distance1,distance2,time]
% HoldsAt(XWalkDistance(xschema,distance1),time) &
% HoldsAt(XWalkDistance(xschema,distance2),time) ->
% distance1=distance2.
 %  clausify_pnf=(holds_at(xWalkDistance(Xschema, Distance1), Time), holds_at(xWalkDistance(Xschema, Distance2), Time)->equals(Distance1, Distance2)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',44).

 /*  not(holds_at(xWalkDistance(Xschema, Distance1), Time)) :-
       holds_at(xWalkDistance(Xschema, Distance2), Time),
       not(equals(Distance1, Distance2)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',44).

 /*  pl=axiom(not(xWalkDistance(Xschema,Distance1)),
         [ xWalkDistance(Xschema,Distance2),
   	not(equals(Distance1,Distance2))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',44).

 /*  (   xWalkDistance(Xschema, Distance2),
       not(equals(Distance1, Distance2))
   ->  not(xWalkDistance(Xschema, Distance1))
   ).
 */
if xWalkDistance(Xschema, Distance2), not equals(Distance1, Distance2)then not xWalkDistance(Xschema, Distance1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',44).

 /*  reactive_rule([ xWalkDistance(Xschema,Distance2),
   		not(equals(Distance1,Distance2))
   	      ],
   	      [not(xWalkDistance(Xschema,Distance1))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',44).

 /*  reactive_rule([ xWalkDistance(Xschema,Distance2),
   		not(equals(Distance1,Distance2))
   	      ],
   	      [not(xWalkDistance(Xschema,Distance1))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',44).

 /*  not(holds_at(xWalkDistance(Xschema, Distance2), Time)) :-
       holds_at(xWalkDistance(Xschema, Distance1), Time),
       not(equals(Distance1, Distance2)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',44).

 /*  pl=axiom(not(xWalkDistance(Xschema,Distance2)),
         [ xWalkDistance(Xschema,Distance1),
   	not(equals(Distance2,Distance1))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',44).

 /*  (   xWalkDistance(Xschema, Distance1),
       not(equals(Distance2, Distance1))
   ->  not(xWalkDistance(Xschema, Distance2))
   ).
 */
if xWalkDistance(Xschema, Distance1), not equals(Distance2, Distance1)then not xWalkDistance(Xschema, Distance2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',44).

 /*  reactive_rule([ xWalkDistance(Xschema,Distance1),
   		not(equals(Distance2,Distance1))
   	      ],
   	      [not(xWalkDistance(Xschema,Distance2))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',44).

 /*  reactive_rule([ xWalkDistance(Xschema,Distance1),
   		not(equals(Distance2,Distance1))
   	      ],
   	      [not(xWalkDistance(Xschema,Distance2))]).
 */


%; logic gate behavior

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',51).
% fluent XWalkVision(xschema)
 %  blue=fluent(xWalkVision(xschema)).
 %  fluent(xWalkVision(xschema)).
fluents([xWalkVision/1]).
 %  fluents([xWalkVision/1]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',51).
mpred_prop(xWalkVision(xschema),fluent).
 %  mpred_prop(xWalkVision(xschema),fluent).

% fluent XWalkVisionOK(xschema)
 %  blue=fluent(xWalkVisionOK(xschema)).
 %  fluent(xWalkVisionOK(xschema)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',51).
fluents([xWalkVisionOK/1]).
 %  fluents([xWalkVisionOK/1]).
mpred_prop(xWalkVisionOK(xschema),fluent).
 %  mpred_prop(xWalkVisionOK(xschema),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',53).
% fluent XWalkAtDestination(xschema)
 %  blue=fluent(xWalkAtDestination(xschema)).
 %  fluent(xWalkAtDestination(xschema)).
fluents([xWalkAtDestination/1]).
 %  fluents([xWalkAtDestination/1]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',53).
mpred_prop(xWalkAtDestination(xschema),fluent).
 %  mpred_prop(xWalkAtDestination(xschema),fluent).

% fluent XWalkDone(xschema)
 %  blue=fluent(xWalkDone(xschema)).
 %  fluent(xWalkDone(xschema)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',53).
fluents([xWalkDone/1]).
 %  fluents([xWalkDone/1]).
mpred_prop(xWalkDone(xschema),fluent).
 %  mpred_prop(xWalkDone(xschema),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',55).
% noninertial XWalkVision, XWalkVisionOK, XWalkAtDestination, XWalkDone
noninertial(xWalkVision).
 %  noninertial(xWalkVision).
noninertial(xWalkVisionOK).
 %  noninertial(xWalkVisionOK).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',55).
noninertial(xWalkAtDestination).
 %  noninertial(xWalkAtDestination).
noninertial(xWalkDone).
 %  noninertial(xWalkDone).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',57).
% [xschema,time]
% HoldsAt(XWalkGroundStable(xschema),time) <->
% HoldsAt(XWalkVision(xschema),time).

 /*  holds_at(xWalkGroundStable(Xschema), Time) <->
       holds_at(xWalkVision(Xschema), Time).
 */
 %  clausify_pnf=(holds_at(xWalkGroundStable(Xschema), Time)->holds_at(xWalkVision(Xschema), Time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',57).

 /*  holds_at(xWalkVision(Xschema), Time) :-
       holds_at(xWalkGroundStable(Xschema), Time).
 */

 /*  fix_axiom_head(Time) ->
       [ holds_at(xWalkVision(Xschema), Time),
          (->),
         xWalkVision(Xschema)
       ].
 */
 %  pl=axiom(xWalkVision(Xschema),[xWalkGroundStable(Xschema)]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',57).

 /*  xWalkGroundStable(Xschema) ->
       xWalkVision(Xschema).
 */
if xWalkGroundStable(Xschema)then xWalkVision(Xschema).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',57).

 /*  reactive_rule([xWalkGroundStable(Xschema)],
   	      [xWalkVision(Xschema)]).
 */

 /*  reactive_rule([xWalkGroundStable(Xschema)],
   	      [xWalkVision(Xschema)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',57).

 /*  not(holds_at(xWalkGroundStable(Xschema), Time)) :-
       not(holds_at(xWalkVision(Xschema), Time)).
 */

 /*  pl=axiom(not(xWalkGroundStable(Xschema)),
         [not(xWalkVision(Xschema))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',57).

 /*  not(xWalkVision(Xschema)) ->
       not(xWalkGroundStable(Xschema)).
 */
if not xWalkVision(Xschema)then not xWalkGroundStable(Xschema).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',57).

 /*  reactive_rule([not(xWalkVision(Xschema))],
   	      [not(xWalkGroundStable(Xschema))]).
 */

 /*  reactive_rule([not(xWalkVision(Xschema))],
   	      [not(xWalkGroundStable(Xschema))]).
 */
 %  clausify_pnf=(holds_at(xWalkVision(Xschema), Time)->holds_at(xWalkGroundStable(Xschema), Time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',57).

 /*  holds_at(xWalkGroundStable(Xschema), Time) :-
       holds_at(xWalkVision(Xschema), Time).
 */

 /*  fix_axiom_head(Time) ->
       [ holds_at(xWalkGroundStable(Xschema), Time),
          (->),
         xWalkGroundStable(Xschema)
       ].
 */
 %  pl=axiom(xWalkGroundStable(Xschema),[xWalkVision(Xschema)]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',57).

 /*  xWalkVision(Xschema) ->
       xWalkGroundStable(Xschema).
 */
if xWalkVision(Xschema)then xWalkGroundStable(Xschema).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',57).

 /*  reactive_rule([xWalkVision(Xschema)],
   	      [xWalkGroundStable(Xschema)]).
 */

 /*  reactive_rule([xWalkVision(Xschema)],
   	      [xWalkGroundStable(Xschema)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',57).

 /*  not(holds_at(xWalkVision(Xschema), Time)) :-
       not(holds_at(xWalkGroundStable(Xschema), Time)).
 */

 /*  pl=axiom(not(xWalkVision(Xschema)),
         [not(xWalkGroundStable(Xschema))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',57).

 /*  not(xWalkGroundStable(Xschema)) ->
       not(xWalkVision(Xschema)).
 */
if not xWalkGroundStable(Xschema)then not xWalkVision(Xschema).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',57).

 /*  reactive_rule([not(xWalkGroundStable(Xschema))],
   	      [not(xWalkVision(Xschema))]).
 */

 /*  reactive_rule([not(xWalkGroundStable(Xschema))],
   	      [not(xWalkVision(Xschema))]).
 */


% [xschema,time]
% HoldsAt(XWalkEnabled(xschema),time) &
% HoldsAt(XWalkVision(xschema),time) &
% HoldsAt(XWalkPosture(xschema),time) <->
% HoldsAt(XWalkVisionOK(xschema),time).
 %  <->((holds_at(xWalkEnabled(Xschema), Time), holds_at(xWalkVision(Xschema), Time), holds_at(xWalkPosture(Xschema), Time)), holds_at(xWalkVisionOK(Xschema), Time)).
 %  clausify_pnf=(holds_at(xWalkEnabled(Xschema), Time), holds_at(xWalkVision(Xschema), Time), holds_at(xWalkPosture(Xschema), Time)->holds_at(xWalkVisionOK(Xschema), Time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',62).

 /*  holds_at(xWalkVisionOK(Xschema), Time) :-
       holds_at(xWalkEnabled(Xschema), Time),
       holds_at(xWalkVision(Xschema), Time),
       holds_at(xWalkPosture(Xschema), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',62).

 /*  fix_axiom_head(Time) ->
       [ holds_at(xWalkVisionOK(Xschema), Time),
          (->),
         xWalkVisionOK(Xschema)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',62).

 /*  pl=axiom(xWalkVisionOK(Xschema),
         [ xWalkEnabled(Xschema),
   	xWalkVision(Xschema),
   	xWalkPosture(Xschema)
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',62).

 /*  (   xWalkEnabled(Xschema),
       xWalkVision(Xschema),
       xWalkPosture(Xschema)
   ->  xWalkVisionOK(Xschema)
   ).
 */
if xWalkEnabled(Xschema), xWalkVision(Xschema), xWalkPosture(Xschema)then xWalkVisionOK(Xschema).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',62).

 /*  reactive_rule([ xWalkEnabled(Xschema),
   		xWalkVision(Xschema),
   		xWalkPosture(Xschema)
   	      ],
   	      [xWalkVisionOK(Xschema)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',62).

 /*  reactive_rule([ xWalkEnabled(Xschema),
   		xWalkVision(Xschema),
   		xWalkPosture(Xschema)
   	      ],
   	      [xWalkVisionOK(Xschema)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',62).

 /*  not(holds_at(xWalkEnabled(Xschema), Time)) :-
       holds_at(xWalkVision(Xschema), Time),
       holds_at(xWalkPosture(Xschema), Time),
       not(holds_at(xWalkVisionOK(Xschema), Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',62).

 /*  pl=axiom(not(xWalkEnabled(Xschema)),
         [ xWalkVision(Xschema),
   	xWalkPosture(Xschema),
   	not(xWalkVisionOK(Xschema))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',62).

 /*  (   xWalkVision(Xschema),
       xWalkPosture(Xschema),
       not(xWalkVisionOK(Xschema))
   ->  not(xWalkEnabled(Xschema))
   ).
 */
if xWalkVision(Xschema), xWalkPosture(Xschema), not xWalkVisionOK(Xschema)then not xWalkEnabled(Xschema).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',62).

 /*  reactive_rule([ xWalkVision(Xschema),
   		xWalkPosture(Xschema),
   		not(xWalkVisionOK(Xschema))
   	      ],
   	      [not(xWalkEnabled(Xschema))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',62).

 /*  reactive_rule([ xWalkVision(Xschema),
   		xWalkPosture(Xschema),
   		not(xWalkVisionOK(Xschema))
   	      ],
   	      [not(xWalkEnabled(Xschema))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',62).

 /*  not(holds_at(xWalkVision(Xschema), Time)) :-
       holds_at(xWalkPosture(Xschema), Time),
       holds_at(xWalkEnabled(Xschema), Time),
       not(holds_at(xWalkVisionOK(Xschema), Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',62).

 /*  pl=axiom(not(xWalkVision(Xschema)),
         [ xWalkPosture(Xschema),
   	xWalkEnabled(Xschema),
   	not(xWalkVisionOK(Xschema))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',62).

 /*  (   xWalkPosture(Xschema),
       xWalkEnabled(Xschema),
       not(xWalkVisionOK(Xschema))
   ->  not(xWalkVision(Xschema))
   ).
 */
if xWalkPosture(Xschema), xWalkEnabled(Xschema), not xWalkVisionOK(Xschema)then not xWalkVision(Xschema).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',62).

 /*  reactive_rule([ xWalkPosture(Xschema),
   		xWalkEnabled(Xschema),
   		not(xWalkVisionOK(Xschema))
   	      ],
   	      [not(xWalkVision(Xschema))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',62).

 /*  reactive_rule([ xWalkPosture(Xschema),
   		xWalkEnabled(Xschema),
   		not(xWalkVisionOK(Xschema))
   	      ],
   	      [not(xWalkVision(Xschema))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',62).

 /*  not(holds_at(xWalkPosture(Xschema), Time)) :-
       holds_at(xWalkVision(Xschema), Time),
       holds_at(xWalkEnabled(Xschema), Time),
       not(holds_at(xWalkVisionOK(Xschema), Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',62).

 /*  pl=axiom(not(xWalkPosture(Xschema)),
         [ xWalkVision(Xschema),
   	xWalkEnabled(Xschema),
   	not(xWalkVisionOK(Xschema))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',62).

 /*  (   xWalkVision(Xschema),
       xWalkEnabled(Xschema),
       not(xWalkVisionOK(Xschema))
   ->  not(xWalkPosture(Xschema))
   ).
 */
if xWalkVision(Xschema), xWalkEnabled(Xschema), not xWalkVisionOK(Xschema)then not xWalkPosture(Xschema).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',62).

 /*  reactive_rule([ xWalkVision(Xschema),
   		xWalkEnabled(Xschema),
   		not(xWalkVisionOK(Xschema))
   	      ],
   	      [not(xWalkPosture(Xschema))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',62).

 /*  reactive_rule([ xWalkVision(Xschema),
   		xWalkEnabled(Xschema),
   		not(xWalkVisionOK(Xschema))
   	      ],
   	      [not(xWalkPosture(Xschema))]).
 */
 %  clausify_pnf=(holds_at(xWalkVisionOK(Xschema), Time)->holds_at(xWalkEnabled(Xschema), Time), holds_at(xWalkVision(Xschema), Time), holds_at(xWalkPosture(Xschema), Time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',62).

 /*  not(holds_at(xWalkVisionOK(Xschema), Time)) :-
       (   not(holds_at(xWalkEnabled(Xschema), Time))
       ;   not(holds_at(xWalkVision(Xschema), Time))
       ;   not(holds_at(xWalkPosture(Xschema), Time))
       ).
 */
 %   pl=axiom(not(xWalkVisionOK(Xschema)), [(not(xWalkEnabled(Xschema));not(xWalkVision(Xschema));not(xWalkPosture(Xschema)))]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',62).

 /*  not(xWalkEnabled(Xschema));not(xWalkVision(Xschema));not(xWalkPosture(Xschema)) ->
       not(xWalkVisionOK(Xschema)).
 */
if not xWalkEnabled(Xschema);not xWalkVision(Xschema);not xWalkPosture(Xschema)then not xWalkVisionOK(Xschema).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',62).

 /*   reactive_rule([  (not(xWalkEnabled(Xschema));not(xWalkVision(Xschema));not(xWalkPosture(Xschema)))
                    ],
                    [not(xWalkVisionOK(Xschema))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',62).

 /*   reactive_rule([  (not(xWalkEnabled(Xschema));not(xWalkVision(Xschema));not(xWalkPosture(Xschema)))
                    ],
                    [not(xWalkVisionOK(Xschema))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',62).

 /*  holds_at(xWalkEnabled(Xschema), Time) :-
       holds_at(xWalkVisionOK(Xschema), Time).
 */

 /*  fix_axiom_head(Time) ->
       [ holds_at(xWalkEnabled(Xschema), Time),
          (->),
         xWalkEnabled(Xschema)
       ].
 */
 %  pl=axiom(xWalkEnabled(Xschema),[xWalkVisionOK(Xschema)]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',62).

 /*  xWalkVisionOK(Xschema) ->
       xWalkEnabled(Xschema).
 */
if xWalkVisionOK(Xschema)then xWalkEnabled(Xschema).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',62).

 /*  reactive_rule([xWalkVisionOK(Xschema)],
   	      [xWalkEnabled(Xschema)]).
 */

 /*  reactive_rule([xWalkVisionOK(Xschema)],
   	      [xWalkEnabled(Xschema)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',62).

 /*  holds_at(xWalkVision(Xschema), Time) :-
       holds_at(xWalkVisionOK(Xschema), Time).
 */

 /*  fix_axiom_head(Time) ->
       [ holds_at(xWalkVision(Xschema), Time),
          (->),
         xWalkVision(Xschema)
       ].
 */
 %  pl=axiom(xWalkVision(Xschema),[xWalkVisionOK(Xschema)]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',62).

 /*  xWalkVisionOK(Xschema) ->
       xWalkVision(Xschema).
 */
if xWalkVisionOK(Xschema)then xWalkVision(Xschema).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',62).

 /*  reactive_rule([xWalkVisionOK(Xschema)],
   	      [xWalkVision(Xschema)]).
 */

 /*  reactive_rule([xWalkVisionOK(Xschema)],
   	      [xWalkVision(Xschema)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',62).

 /*  holds_at(xWalkPosture(Xschema), Time) :-
       holds_at(xWalkVisionOK(Xschema), Time).
 */

 /*  fix_axiom_head(Time) ->
       [ holds_at(xWalkPosture(Xschema), Time),
          (->),
         xWalkPosture(Xschema)
       ].
 */
 %  pl=axiom(xWalkPosture(Xschema),[xWalkVisionOK(Xschema)]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',62).

 /*  xWalkVisionOK(Xschema) ->
       xWalkPosture(Xschema).
 */
if xWalkVisionOK(Xschema)then xWalkPosture(Xschema).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',62).

 /*  reactive_rule([xWalkVisionOK(Xschema)],
   	      [xWalkPosture(Xschema)]).
 */

 /*  reactive_rule([xWalkVisionOK(Xschema)],
   	      [xWalkPosture(Xschema)]).
 */


% [xschema,time]
% HoldsAt(XWalkDistance(xschema,0),time) <->
% HoldsAt(XWalkAtDestination(xschema),time).

 /*  holds_at(xWalkDistance(Xschema, 0), Time) <->
       holds_at(xWalkAtDestination(Xschema), Time).
 */
 %  clausify_pnf=(holds_at(xWalkDistance(Xschema, 0), Time)->holds_at(xWalkAtDestination(Xschema), Time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',68).

 /*  holds_at(xWalkAtDestination(Xschema), Time) :-
       holds_at(xWalkDistance(Xschema, 0), Time).
 */

 /*  fix_axiom_head(Time) ->
       [ holds_at(xWalkAtDestination(Xschema), Time),
          (->),
         xWalkAtDestination(Xschema)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',68).

 /*  pl=axiom(xWalkAtDestination(Xschema),
         [xWalkDistance(Xschema,0)]).
 */

 /*  xWalkDistance(Xschema, 0) ->
       xWalkAtDestination(Xschema).
 */
if xWalkDistance(Xschema, 0)then xWalkAtDestination(Xschema).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',68).

 /*  reactive_rule([xWalkDistance(Xschema,0)],
   	      [xWalkAtDestination(Xschema)]).
 */

 /*  reactive_rule([xWalkDistance(Xschema,0)],
   	      [xWalkAtDestination(Xschema)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',68).

 /*  not(holds_at(xWalkDistance(Xschema, 0), Time)) :-
       not(holds_at(xWalkAtDestination(Xschema), Time)).
 */

 /*  pl=axiom(not(xWalkDistance(Xschema,0)),
         [not(xWalkAtDestination(Xschema))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',68).

 /*  not(xWalkAtDestination(Xschema)) ->
       not(xWalkDistance(Xschema, 0)).
 */
if not xWalkAtDestination(Xschema)then not xWalkDistance(Xschema, 0).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',68).

 /*  reactive_rule([not(xWalkAtDestination(Xschema))],
   	      [not(xWalkDistance(Xschema,0))]).
 */

 /*  reactive_rule([not(xWalkAtDestination(Xschema))],
   	      [not(xWalkDistance(Xschema,0))]).
 */
 %  clausify_pnf=(holds_at(xWalkAtDestination(Xschema), Time)->holds_at(xWalkDistance(Xschema, 0), Time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',68).

 /*  holds_at(xWalkDistance(Xschema, 0), Time) :-
       holds_at(xWalkAtDestination(Xschema), Time).
 */

 /*  fix_axiom_head(Time) ->
       [ holds_at(xWalkDistance(Xschema, 0), Time),
          (->),
         xWalkDistance(Xschema, 0)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',68).

 /*  pl=axiom(xWalkDistance(Xschema,0),
         [xWalkAtDestination(Xschema)]).
 */

 /*  xWalkAtDestination(Xschema) ->
       xWalkDistance(Xschema, 0).
 */
if xWalkAtDestination(Xschema)then xWalkDistance(Xschema, 0).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',68).

 /*  reactive_rule([xWalkAtDestination(Xschema)],
   	      [xWalkDistance(Xschema,0)]).
 */

 /*  reactive_rule([xWalkAtDestination(Xschema)],
   	      [xWalkDistance(Xschema,0)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',68).

 /*  not(holds_at(xWalkAtDestination(Xschema), Time)) :-
       not(holds_at(xWalkDistance(Xschema, 0), Time)).
 */

 /*  pl=axiom(not(xWalkAtDestination(Xschema)),
         [not(xWalkDistance(Xschema,0))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',68).

 /*  not(xWalkDistance(Xschema, 0)) ->
       not(xWalkAtDestination(Xschema)).
 */
if not xWalkDistance(Xschema, 0)then not xWalkAtDestination(Xschema).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',68).

 /*  reactive_rule([not(xWalkDistance(Xschema,0))],
   	      [not(xWalkAtDestination(Xschema))]).
 */

 /*  reactive_rule([not(xWalkDistance(Xschema,0))],
   	      [not(xWalkAtDestination(Xschema))]).
 */


% [xschema,time]
% HoldsAt(XWalkAtDestination(xschema),time) <->
% HoldsAt(XWalkDone(xschema),time).

 /*  holds_at(xWalkAtDestination(Xschema), Time) <->
       holds_at(xWalkDone(Xschema), Time).
 */
 %  clausify_pnf=(holds_at(xWalkAtDestination(Xschema), Time)->holds_at(xWalkDone(Xschema), Time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',72).

 /*  holds_at(xWalkDone(Xschema), Time) :-
       holds_at(xWalkAtDestination(Xschema), Time).
 */

 /*  fix_axiom_head(Time) ->
       [ holds_at(xWalkDone(Xschema), Time),
          (->),
         xWalkDone(Xschema)
       ].
 */
 %  pl=axiom(xWalkDone(Xschema),[xWalkAtDestination(Xschema)]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',72).

 /*  xWalkAtDestination(Xschema) ->
       xWalkDone(Xschema).
 */
if xWalkAtDestination(Xschema)then xWalkDone(Xschema).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',72).

 /*  reactive_rule([xWalkAtDestination(Xschema)],
   	      [xWalkDone(Xschema)]).
 */

 /*  reactive_rule([xWalkAtDestination(Xschema)],
   	      [xWalkDone(Xschema)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',72).

 /*  not(holds_at(xWalkAtDestination(Xschema), Time)) :-
       not(holds_at(xWalkDone(Xschema), Time)).
 */

 /*  pl=axiom(not(xWalkAtDestination(Xschema)),
         [not(xWalkDone(Xschema))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',72).

 /*  not(xWalkDone(Xschema)) ->
       not(xWalkAtDestination(Xschema)).
 */
if not xWalkDone(Xschema)then not xWalkAtDestination(Xschema).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',72).

 /*  reactive_rule([not(xWalkDone(Xschema))],
   	      [not(xWalkAtDestination(Xschema))]).
 */

 /*  reactive_rule([not(xWalkDone(Xschema))],
   	      [not(xWalkAtDestination(Xschema))]).
 */
 %  clausify_pnf=(holds_at(xWalkDone(Xschema), Time)->holds_at(xWalkAtDestination(Xschema), Time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',72).

 /*  holds_at(xWalkAtDestination(Xschema), Time) :-
       holds_at(xWalkDone(Xschema), Time).
 */

 /*  fix_axiom_head(Time) ->
       [ holds_at(xWalkAtDestination(Xschema), Time),
          (->),
         xWalkAtDestination(Xschema)
       ].
 */
 %  pl=axiom(xWalkAtDestination(Xschema),[xWalkDone(Xschema)]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',72).

 /*  xWalkDone(Xschema) ->
       xWalkAtDestination(Xschema).
 */
if xWalkDone(Xschema)then xWalkAtDestination(Xschema).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',72).

 /*  reactive_rule([xWalkDone(Xschema)],
   	      [xWalkAtDestination(Xschema)]).
 */

 /*  reactive_rule([xWalkDone(Xschema)],
   	      [xWalkAtDestination(Xschema)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',72).

 /*  not(holds_at(xWalkDone(Xschema), Time)) :-
       not(holds_at(xWalkAtDestination(Xschema), Time)).
 */

 /*  pl=axiom(not(xWalkDone(Xschema)),
         [not(xWalkAtDestination(Xschema))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',72).

 /*  not(xWalkAtDestination(Xschema)) ->
       not(xWalkDone(Xschema)).
 */
if not xWalkAtDestination(Xschema)then not xWalkDone(Xschema).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',72).

 /*  reactive_rule([not(xWalkAtDestination(Xschema))],
   	      [not(xWalkDone(Xschema))]).
 */

 /*  reactive_rule([not(xWalkAtDestination(Xschema))],
   	      [not(xWalkDone(Xschema))]).
 */


%; durative events
%; distance is the goal

% fluent XWalkStepping(xschema,distance) 
 %  blue=fluent(xWalkStepping(xschema,distance)).
 %  fluent(xWalkStepping(xschema,distance)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',77).
fluents([xWalkStepping/2]).
 %  fluents([xWalkStepping/2]).
mpred_prop(xWalkStepping(xschema,distance),fluent).
 %  mpred_prop(xWalkStepping(xschema,distance),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',79).
% event XWalkSteppingOn(xschema)
 %  blue=event(xWalkSteppingOn(xschema)).
 %  event(xWalkSteppingOn(xschema)).
events([xWalkSteppingOn/1]).
 %  events([xWalkSteppingOn/1]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',79).
mpred_prop(xWalkSteppingOn(xschema),event).
 %  mpred_prop(xWalkSteppingOn(xschema),event).

% event XWalkSteppingOff(xschema)
 %  blue=event(xWalkSteppingOff(xschema)).
 %  event(xWalkSteppingOff(xschema)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',79).
events([xWalkSteppingOff/1]).
 %  events([xWalkSteppingOff/1]).
mpred_prop(xWalkSteppingOff(xschema),event).
 %  mpred_prop(xWalkSteppingOff(xschema),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',82).
% [xschema,distance1,distance2,time]
% HoldsAt(XWalkDistance(xschema,distance1),time) &
% distance2 = distance1 - XWalkSize(xschema) ->
% Initiates(XWalkSteppingOn(xschema),XWalkStepping(xschema,distance2),time).

 /*  pl=axiom(initiates(xWalkSteppingOn(Xschema),
   		xWalkStepping(Xschema,Distance2),
   		Time),
         [ xWalkDistance(Xschema,Distance1),
   	'-Pred'(Distance1,xWalkSize(Xschema),Distance2)
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',82).

 /*  (   xWalkDistance(Xschema, Distance1),
       '-Pred'(Distance1, xWalkSize(Xschema), Distance2)
   ->  initiates(xWalkSteppingOn(Xschema),
                 xWalkStepping(Xschema, Distance2),
                 Time)
   ).
 */
if xWalkDistance(Xschema, Distance1), '-Pred'(Distance1, xWalkSize(Xschema), Distance2)then initiates(xWalkSteppingOn(Xschema), xWalkStepping(Xschema, Distance2)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',82).

 /*  reactive_rule([ xWalkDistance(Xschema,Distance1),
   		'-Pred'(Distance1,
   			xWalkSize(Xschema),
   			Distance2)
   	      ],
   	      [ initiates(xWalkSteppingOn(Xschema),
   			  at(xWalkStepping(Xschema,
   					   Distance2),
   			     Time),
   			  Initiates)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',82).

 /*  reactive_rule([ xWalkDistance(Xschema,Distance1),
   		'-Pred'(Distance1,
   			xWalkSize(Xschema),
   			Distance2)
   	      ],
   	      [ initiates(xWalkSteppingOn(Xschema),
   			  at(xWalkStepping(Xschema,
   					   Distance2),
   			     Time),
   			  Initiates)
   	      ]).
 */


% [xschema,distance,time]
% Terminates(XWalkSteppingOff(xschema),XWalkStepping(xschema,distance),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',88).

 /*  pl=axiom(terminates(xWalkSteppingOff(Xschema),
   		 xWalkStepping(Xschema,Distance),
   		 Time),
         []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',88).

 /*  terminates(xWalkSteppingOff(Xschema),
   	   xWalkStepping(Xschema,Distance),
   	   Time).
 */
xWalkSteppingOff(Xschema)terminates xWalkStepping(Xschema, Distance).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',88).

 /*  terminated(happens(xWalkSteppingOff(Xschema),
   		   Time_From,
   		   Time_Until),
   	   xWalkStepping(Xschema,Distance),
   	   []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',88).

 /*  terminated(happens(xWalkSteppingOff(Xschema),
   		   Time_From,
   		   Time_Until),
   	   xWalkStepping(Xschema,Distance),
   	   []).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',90).
% [xschema,distance,time]
% Releases(XWalkSteppingOn(xschema),XWalkDistance(xschema,distance),time).

 /*  pl=axiom(releases(xWalkSteppingOn(Xschema),
   	       xWalkDistance(Xschema,Distance),
   	       Time),
         []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',90).
releases(xWalkSteppingOn(Xschema),
	 xWalkDistance(Xschema,Distance),
	 Time).

 /*  releases(xWalkSteppingOn(Xschema),
   	 xWalkDistance(Xschema,Distance),
   	 Time).
 */


% [xschema,distance1,distance2,time]
% HoldsAt(XWalkDistance(xschema,distance1),time) &
% distance1 != distance2 ->
% Terminates(XWalkSteppingOff(xschema),XWalkDistance(xschema,distance2),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',94).

 /*  pl=axiom(terminates(xWalkSteppingOff(Xschema),
   		 xWalkDistance(Xschema,Distance2),
   		 Time),
         [ xWalkDistance(Xschema,Distance1),
   	diff(Distance2,Distance1)
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',94).

 /*  (   xWalkDistance(Xschema, Distance1),
       diff(Distance2, Distance1)
   ->  terminates(xWalkSteppingOff(Xschema),
                  xWalkDistance(Xschema, Distance2),
                  Time)
   ).
 */
if xWalkDistance(Xschema, Distance1), diff(Distance2, Distance1)then terminates(xWalkSteppingOff(Xschema), xWalkDistance(Xschema, Distance2)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',94).

 /*  reactive_rule([ xWalkDistance(Xschema,Distance1),
   		diff(Distance2,Distance1)
   	      ],
   	      [ terminates(xWalkSteppingOff(Xschema),
   			   at(xWalkDistance(Xschema,
   					    Distance2),
   			      Time),
   			   Terminates)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',94).

 /*  reactive_rule([ xWalkDistance(Xschema,Distance1),
   		diff(Distance2,Distance1)
   	      ],
   	      [ terminates(xWalkSteppingOff(Xschema),
   			   at(xWalkDistance(Xschema,
   					    Distance2),
   			      Time),
   			   Terminates)
   	      ]).
 */


% [xschema,distance,time]
% HoldsAt(XWalkDistance(xschema,distance),time) ->
% Initiates(XWalkSteppingOff(xschema),XWalkDistance(xschema,distance),time).

 /*  pl=axiom(initiates(xWalkSteppingOff(Xschema),
   		xWalkDistance(Xschema,Distance),
   		Time),
         [xWalkDistance(Xschema,Distance)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',99).

 /*  xWalkDistance(Xschema, Distance) ->
       initiates(xWalkSteppingOff(Xschema),
                 xWalkDistance(Xschema, Distance),
                 Time).
 */
if xWalkDistance(Xschema, Distance)then initiates(xWalkSteppingOff(Xschema), xWalkDistance(Xschema, Distance)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',99).

 /*  reactive_rule([xWalkDistance(Xschema,Distance)],
   	      [ initiates(xWalkSteppingOff(Xschema),
   			  at(xWalkDistance(Xschema,
   					   Distance),
   			     Time),
   			  Initiates)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',99).

 /*  reactive_rule([xWalkDistance(Xschema,Distance)],
   	      [ initiates(xWalkSteppingOff(Xschema),
   			  at(xWalkDistance(Xschema,
   					   Distance),
   			     Time),
   			  Initiates)
   	      ]).
 */


% [xschema,distance01,distance02,distance03,offset,time]
% HoldsAt(XWalkDistance(xschema,distance01),time) &
% (distance03=(distance01-(offset*(XWalkSize(xschema)/XWalkRate(xschema))))) ->
% Trajectory(XWalkStepping(xschema,distance02),
%            time,
%            XWalkDistance(xschema,distance03),
%            offset).
 %  clausify_pnf=(holds_at(xWalkDistance(Xschema, Distance01), Time), '-Pred'(Distance01, Offset*(xWalkSize(Xschema)/xWalkRate(Xschema)), Distance03)->trajectory(xWalkStepping(Xschema, Distance02), Time, xWalkDistance(Xschema, Distance03), Offset)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',103).

 /*  trajectory(xWalkStepping(Xschema, Distance02), Time, xWalkDistance(Xschema, Distance03), Offset) :-
       holds_at(xWalkDistance(Xschema, Distance01), Time),
       '-Pred'(Distance01,
               Offset*(xWalkSize(Xschema)/xWalkRate(Xschema)),
               Distance03).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',103).

 /*  pl=axiom(trajectory(xWalkStepping(Xschema,Distance02),
   		 Time,
   		 xWalkDistance(Xschema,Distance03),
   		 Offset),
         [ xWalkDistance(Xschema,Distance01),
   	'-Pred'(Distance01,
   		Offset*(xWalkSize(Xschema)/xWalkRate(Xschema)),
   		Distance03)
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',103).

 /*  (   xWalkDistance(Xschema, Distance01),
       '-Pred'(Distance01,
               Offset*(xWalkSize(Xschema)/xWalkRate(Xschema)),
               Distance03)
   ->  trajectory(xWalkStepping(Xschema, Distance02),
                  Time,
                  xWalkDistance(Xschema, Distance03),
                  Offset)
   ).
 */
if xWalkDistance(Xschema, Distance01), '-Pred'(Distance01, Offset*(xWalkSize(Xschema)/xWalkRate(Xschema)), Distance03)then trajectory(xWalkStepping(Xschema, Distance02), Time, xWalkDistance(Xschema, Distance03), Offset).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',103).

 /*  reactive_rule([ xWalkDistance(Xschema,Distance01),
   		'-Pred'(Distance01,
   			Offset*(xWalkSize(Xschema)/xWalkRate(Xschema)),
   			Distance03)
   	      ],
   	      [ trajectory(xWalkStepping(Xschema,
   					 Distance02),
   			   Time,
   			   xWalkDistance(Xschema,
   					 Distance03),
   			   Offset)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',103).

 /*  reactive_rule([ xWalkDistance(Xschema,Distance01),
   		'-Pred'(Distance01,
   			Offset*(xWalkSize(Xschema)/xWalkRate(Xschema)),
   			Distance03)
   	      ],
   	      [ trajectory(xWalkStepping(Xschema,
   					 Distance02),
   			   Time,
   			   xWalkDistance(Xschema,
   					 Distance03),
   			   Offset)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',103).

 /*  not(holds_at(xWalkDistance(Xschema, Distance01), Time)) :-
       '-Pred'(Distance01,
               Offset*(xWalkSize(Xschema)/xWalkRate(Xschema)),
               Distance03),
       not(trajectory(xWalkStepping(Xschema, Distance02),
                      Time,
                      xWalkDistance(Xschema, Distance03),
                      Offset)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',103).

 /*  pl=axiom(not(xWalkDistance(Xschema,Distance01)),
         [ '-Pred'(Distance01,
   		Offset*(xWalkSize(Xschema)/xWalkRate(Xschema)),
   		Distance03),
   	not(trajectory(xWalkStepping(Xschema,Distance02),
   		       Time,
   		       xWalkDistance(Xschema,Distance03),
   		       Offset))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',103).

 /*  (   '-Pred'(Distance01,
               Offset*(xWalkSize(Xschema)/xWalkRate(Xschema)),
               Distance03),
       not(trajectory(xWalkStepping(Xschema, Distance02),
                      Time,
                      xWalkDistance(Xschema, Distance03),
                      Offset))
   ->  not(xWalkDistance(Xschema, Distance01))
   ).
 */
if'-Pred'(Distance01, Offset*(xWalkSize(Xschema)/xWalkRate(Xschema)), Distance03), not trajectory(xWalkStepping(Xschema, Distance02), Time, xWalkDistance(Xschema, Distance03), Offset)then not xWalkDistance(Xschema, Distance01).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',103).

 /*  reactive_rule([ '-Pred'(Distance01,
   			Offset*(xWalkSize(Xschema)/xWalkRate(Xschema)),
   			Distance03),
   		not(trajectory(xWalkStepping(Xschema,
   					     Distance02),
   			       Time,
   			       xWalkDistance(Xschema,
   					     Distance03),
   			       Offset))
   	      ],
   	      [not(xWalkDistance(Xschema,Distance01))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',103).

 /*  reactive_rule([ '-Pred'(Distance01,
   			Offset*(xWalkSize(Xschema)/xWalkRate(Xschema)),
   			Distance03),
   		not(trajectory(xWalkStepping(Xschema,
   					     Distance02),
   			       Time,
   			       xWalkDistance(Xschema,
   					     Distance03),
   			       Offset))
   	      ],
   	      [not(xWalkDistance(Xschema,Distance01))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',103).

 /*  not('-Pred'(Distance01, Offset*(xWalkSize(Xschema)/xWalkRate(Xschema)), Distance03)) :-
       holds_at(xWalkDistance(Xschema, Distance01), Time),
       not(trajectory(xWalkStepping(Xschema, Distance02),
                      Time,
                      xWalkDistance(Xschema, Distance03),
                      Offset)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',103).

 /*  fix_axiom_head(Time) ->
       [ holds_at(xWalkDistance(Xschema, Distance01), Time),
          (->),
         xWalkDistance(Xschema, Distance01)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',103).

 /*  pl=axiom(not('-Pred'(Distance01,
   		  Offset*(xWalkSize(Xschema)/xWalkRate(Xschema)),
   		  Distance03)),
         [ xWalkDistance(Xschema,Distance01),
   	not(trajectory(xWalkStepping(Xschema,Distance02),
   		       Time,
   		       xWalkDistance(Xschema,Distance03),
   		       Offset))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',103).

 /*  (   xWalkDistance(Xschema, Distance01),
       not(trajectory(xWalkStepping(Xschema, Distance02),
                      Time,
                      xWalkDistance(Xschema, Distance03),
                      Offset))
   ->  not('-Pred'(Distance01,
                   Offset*(xWalkSize(Xschema)/xWalkRate(Xschema)),
                   Distance03))
   ).
 */
if xWalkDistance(Xschema, Distance01), not trajectory(xWalkStepping(Xschema, Distance02), Time, xWalkDistance(Xschema, Distance03), Offset)then not'-Pred'(Distance01, Offset*(xWalkSize(Xschema)/xWalkRate(Xschema)), Distance03).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',103).

 /*  reactive_rule([ xWalkDistance(Xschema,Distance01),
   		not(trajectory(xWalkStepping(Xschema,
   					     Distance02),
   			       Time,
   			       xWalkDistance(Xschema,
   					     Distance03),
   			       Offset))
   	      ],
   	      [ not('-Pred'(Distance01,
   			    Offset*(xWalkSize(Xschema)/xWalkRate(Xschema)),
   			    Distance03))
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',103).

 /*  reactive_rule([ xWalkDistance(Xschema,Distance01),
   		not(trajectory(xWalkStepping(Xschema,
   					     Distance02),
   			       Time,
   			       xWalkDistance(Xschema,
   					     Distance03),
   			       Offset))
   	      ],
   	      [ not('-Pred'(Distance01,
   			    Offset*(xWalkSize(Xschema)/xWalkRate(Xschema)),
   			    Distance03))
   	      ]).
 */


% [xschema,distance,time]
% HoldsAt(XWalkStepping(xschema,distance),time) &
% HoldsAt(XWalkDistance(xschema,distance),time) ->
% Happens(XWalkSteppingOff(xschema),time).
 %  clausify_pnf=(holds_at(xWalkStepping(Xschema, Distance), Time), holds_at(xWalkDistance(Xschema, Distance), Time)->happens(xWalkSteppingOff(Xschema), Time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',111).

 /*  happens(xWalkSteppingOff(Xschema), Time) :-
       holds_at(xWalkStepping(Xschema, Distance), Time),
       holds_at(xWalkDistance(Xschema, Distance), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',111).

 /*  fix_axiom_head(Time) ->
       [ happens(xWalkSteppingOff(Xschema), Time),
          (->),
         xWalkSteppingOff(Xschema)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',111).

 /*  pl=axiom(xWalkSteppingOff(Xschema),
         [ xWalkStepping(Xschema,Distance),
   	xWalkDistance(Xschema,Distance)
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',111).

 /*  (   xWalkStepping(Xschema, Distance),
       xWalkDistance(Xschema, Distance)
   ->  xWalkSteppingOff(Xschema)
   ).
 */
if xWalkStepping(Xschema, Distance), xWalkDistance(Xschema, Distance)then xWalkSteppingOff(Xschema).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',111).

 /*  reactive_rule([ holds(xWalkStepping(Xschema,Distance),
   		      Holds),
   		xWalkDistance(Xschema,Distance)
   	      ],
   	      [ happens(xWalkSteppingOff(Xschema),
   			Time_From,
   			Time_Until)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',111).

 /*  reactive_rule([ holds(xWalkStepping(Xschema,Distance),
   		      Holds),
   		xWalkDistance(Xschema,Distance)
   	      ],
   	      [ happens(xWalkSteppingOff(Xschema),
   			Time_From,
   			Time_Until)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',111).

 /*  not(holds_at(xWalkStepping(Xschema, Distance), Time)) :-
       holds_at(xWalkDistance(Xschema, Distance), Time),
       not(happens(xWalkSteppingOff(Xschema), Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',111).

 /*  pl=axiom(not(xWalkStepping(Xschema,Distance)),
         [ xWalkDistance(Xschema,Distance),
   	not(xWalkSteppingOff(Xschema))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',111).

 /*  (   xWalkDistance(Xschema, Distance),
       not(xWalkSteppingOff(Xschema))
   ->  not(xWalkStepping(Xschema, Distance))
   ).
 */
if xWalkDistance(Xschema, Distance), not xWalkSteppingOff(Xschema)then not xWalkStepping(Xschema, Distance).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',111).

 /*  reactive_rule([ xWalkDistance(Xschema,Distance),
   		not(xWalkSteppingOff(Xschema))
   	      ],
   	      [ holds(not(xWalkStepping(Xschema,Distance)),
   		      Holds6)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',111).

 /*  reactive_rule([ xWalkDistance(Xschema,Distance),
   		not(xWalkSteppingOff(Xschema))
   	      ],
   	      [ holds(not(xWalkStepping(Xschema,Distance)),
   		      Holds6)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',111).

 /*  not(holds_at(xWalkDistance(Xschema, Distance), Time)) :-
       holds_at(xWalkStepping(Xschema, Distance), Time),
       not(happens(xWalkSteppingOff(Xschema), Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',111).

 /*  pl=axiom(not(xWalkDistance(Xschema,Distance)),
         [ xWalkStepping(Xschema,Distance),
   	not(xWalkSteppingOff(Xschema))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',111).

 /*  (   xWalkStepping(Xschema, Distance),
       not(xWalkSteppingOff(Xschema))
   ->  not(xWalkDistance(Xschema, Distance))
   ).
 */
if xWalkStepping(Xschema, Distance), not xWalkSteppingOff(Xschema)then not xWalkDistance(Xschema, Distance).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',111).

 /*  reactive_rule([ holds(xWalkStepping(Xschema,Distance),
   		      Holds7),
   		not(xWalkSteppingOff(Xschema))
   	      ],
   	      [not(xWalkDistance(Xschema,Distance))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',111).

 /*  reactive_rule([ holds(xWalkStepping(Xschema,Distance),
   		      Holds7),
   		not(xWalkSteppingOff(Xschema))
   	      ],
   	      [not(xWalkDistance(Xschema,Distance))]).
 */


%; punctual events

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',117).
% event XWalkTestFooting(xschema)
 %  blue=event(xWalkTestFooting(xschema)).
 %  event(xWalkTestFooting(xschema)).
events([xWalkTestFooting/1]).
 %  events([xWalkTestFooting/1]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',117).
mpred_prop(xWalkTestFooting(xschema),event).
 %  mpred_prop(xWalkTestFooting(xschema),event).

% event XWalkMoveFoot(xschema)
 %  blue=event(xWalkMoveFoot(xschema)).
 %  event(xWalkMoveFoot(xschema)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',117).
events([xWalkMoveFoot/1]).
 %  events([xWalkMoveFoot/1]).
mpred_prop(xWalkMoveFoot(xschema),event).
 %  mpred_prop(xWalkMoveFoot(xschema),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',120).
% [xschema,time]
% Happens(XWalkTestFooting(xschema),time) &
% !HoldsAt(XWalkFootingOK(xschema),time) ->
% Happens(XWalkMoveFoot(xschema),time+1).
 %  clausify_pnf=(happens(xWalkTestFooting(Xschema), Time), holds_at(neg(xWalkFootingOK(Xschema)), Time)->happens(xWalkMoveFoot(Xschema), Time+1)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',120).

 /*  happens(xWalkMoveFoot(Xschema), Time+1) :-
       happens(xWalkTestFooting(Xschema), Time),
       holds_at(neg(xWalkFootingOK(Xschema)), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',120).

 /*  fix_axiom_head(Time) ->
       [ happens(xWalkTestFooting(Xschema), Time),
          (->),
         xWalkTestFooting(Xschema)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',120).

 /*  fix_axiom_head(Time) ->
       [ holds_at(neg(xWalkFootingOK(Xschema)), Time),
          (->),
         not(xWalkFootingOK(Xschema))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',120).

 /*  pl=axiom(happens(xWalkMoveFoot(Xschema),When),
         [ xWalkTestFooting(Xschema),
   	not(xWalkFootingOK(Xschema)),
   	b(Time,When)
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',120).

 /*  (   xWalkTestFooting(Xschema),
       not(xWalkFootingOK(Xschema)),
       b(Time, When)
   ->  happens(xWalkMoveFoot(Xschema), When)
   ).
 */
if xWalkTestFooting(Xschema), not xWalkFootingOK(Xschema), b(Time, When)then happens(xWalkMoveFoot(Xschema), When).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',120).

 /*  reactive_rule([ xWalkTestFooting(Xschema),
   		not(xWalkFootingOK(Xschema)),
   		b(Time,When)
   	      ],
   	      [happens(xWalkMoveFoot(Xschema),When)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',120).

 /*  reactive_rule([ xWalkTestFooting(Xschema),
   		not(xWalkFootingOK(Xschema)),
   		b(Time,When)
   	      ],
   	      [happens(xWalkMoveFoot(Xschema),When)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',120).

 /*  not(happens(xWalkTestFooting(Xschema), Time)) :-
       holds_at(neg(xWalkFootingOK(Xschema)), Time),
       not(happens(xWalkMoveFoot(Xschema), Time+1)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',120).

 /*  fix_axiom_head(Time) ->
       [ not(happens(xWalkTestFooting(Xschema), Time)),
          (->),
         not(xWalkTestFooting(Xschema))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',120).

 /*  pl=axiom(not(xWalkTestFooting(Xschema)),
         [ not(xWalkFootingOK(Xschema)),
   	not(happens(xWalkMoveFoot(Xschema),When3)),
   	b(Time,When3)
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',120).

 /*  (   not(xWalkFootingOK(Xschema)),
       not(happens(xWalkMoveFoot(Xschema), When3)),
       b(Time, When3)
   ->  not(xWalkTestFooting(Xschema))
   ).
 */
if not xWalkFootingOK(Xschema), not happens(xWalkMoveFoot(Xschema), When3), b(Time, When3)then not xWalkTestFooting(Xschema).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',120).

 /*  reactive_rule([ not(xWalkFootingOK(Xschema)),
   		not(happens(xWalkMoveFoot(Xschema),When3)),
   		b(Time,When3)
   	      ],
   	      [not(xWalkTestFooting(Xschema))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',120).

 /*  reactive_rule([ not(xWalkFootingOK(Xschema)),
   		not(happens(xWalkMoveFoot(Xschema),When3)),
   		b(Time,When3)
   	      ],
   	      [not(xWalkTestFooting(Xschema))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',120).

 /*  not(holds_at(neg(xWalkFootingOK(Xschema)), Time)) :-
       happens(xWalkTestFooting(Xschema), Time),
       not(happens(xWalkMoveFoot(Xschema), Time+1)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',120).

 /*  pl=axiom(not(not(xWalkFootingOK(Xschema))),
         [ xWalkTestFooting(Xschema),
   	not(happens(xWalkMoveFoot(Xschema),When4)),
   	b(Time,When4)
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',120).

 /*  (   xWalkTestFooting(Xschema),
       not(happens(xWalkMoveFoot(Xschema), When4)),
       b(Time, When4)
   ->  not(not(xWalkFootingOK(Xschema)))
   ).
 */
if xWalkTestFooting(Xschema), not happens(xWalkMoveFoot(Xschema), When4), b(Time, When4)then not not xWalkFootingOK(Xschema).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',120).

 /*  reactive_rule([ xWalkTestFooting(Xschema),
   		not(happens(xWalkMoveFoot(Xschema),When4)),
   		b(Time,When4)
   	      ],
   	      [not(not(xWalkFootingOK(Xschema)))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',120).

 /*  reactive_rule([ xWalkTestFooting(Xschema),
   		not(happens(xWalkMoveFoot(Xschema),When4)),
   		b(Time,When4)
   	      ],
   	      [not(not(xWalkFootingOK(Xschema)))]).
 */


% [xschema,time]
% Happens(XWalkMoveFoot(xschema),time) ->
% Happens(XWalkReadyOn(xschema),time+1).
 %  clausify_pnf=(happens(xWalkMoveFoot(Xschema), Time)->happens(xWalkReadyOn(Xschema), Time+1)).

 /*  happens(xWalkReadyOn(Xschema), Time+1) :-
       happens(xWalkMoveFoot(Xschema), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',126).

 /*  fix_axiom_head(Time) ->
       [ happens(xWalkMoveFoot(Xschema), Time),
          (->),
         xWalkMoveFoot(Xschema)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',126).

 /*  pl=axiom(happens(xWalkReadyOn(Xschema),When),
         [xWalkMoveFoot(Xschema),b(Time,When)]).
 */

 /*  (   xWalkMoveFoot(Xschema),
       b(Time, When)
   ->  happens(xWalkReadyOn(Xschema), When)
   ).
 */
if xWalkMoveFoot(Xschema), b(Time, When)then happens(xWalkReadyOn(Xschema), When).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',126).

 /*  reactive_rule([xWalkMoveFoot(Xschema),b(Time,When)],
   	      [happens(xWalkReadyOn(Xschema),When)]).
 */

 /*  reactive_rule([xWalkMoveFoot(Xschema),b(Time,When)],
   	      [happens(xWalkReadyOn(Xschema),When)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',126).

 /*  not(happens(xWalkMoveFoot(Xschema), Time)) :-
       not(happens(xWalkReadyOn(Xschema), Time+1)).
 */

 /*  fix_axiom_head(Time) ->
       [ not(happens(xWalkMoveFoot(Xschema), Time)),
          (->),
         not(xWalkMoveFoot(Xschema))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',126).

 /*  pl=axiom(not(xWalkMoveFoot(Xschema)),
         [ not(happens(xWalkReadyOn(Xschema),When3)),
   	b(Time,When3)
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',126).

 /*  (   not(happens(xWalkReadyOn(Xschema), When3)),
       b(Time, When3)
   ->  not(xWalkMoveFoot(Xschema))
   ).
 */
if not happens(xWalkReadyOn(Xschema), When3), b(Time, When3)then not xWalkMoveFoot(Xschema).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',126).

 /*  reactive_rule([ not(happens(xWalkReadyOn(Xschema),When3)),
   		b(Time,When3)
   	      ],
   	      [not(xWalkMoveFoot(Xschema))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',126).

 /*  reactive_rule([ not(happens(xWalkReadyOn(Xschema),When3)),
   		b(Time,When3)
   	      ],
   	      [not(xWalkMoveFoot(Xschema))]).
 */


%; Petri net behavior

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',131).
% fluent XWalkReady(xschema)
 %  blue=fluent(xWalkReady(xschema)).
 %  fluent(xWalkReady(xschema)).
fluents([xWalkReady/1]).
 %  fluents([xWalkReady/1]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',131).
mpred_prop(xWalkReady(xschema),fluent).
 %  mpred_prop(xWalkReady(xschema),fluent).

% event XWalkReadyOn(xschema)
 %  blue=event(xWalkReadyOn(xschema)).
 %  event(xWalkReadyOn(xschema)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',131).
events([xWalkReadyOn/1]).
 %  events([xWalkReadyOn/1]).
mpred_prop(xWalkReadyOn(xschema),event).
 %  mpred_prop(xWalkReadyOn(xschema),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',133).
% event XWalkReadyOff(xschema)
 %  blue=event(xWalkReadyOff(xschema)).
 %  event(xWalkReadyOff(xschema)).
events([xWalkReadyOff/1]).
 %  events([xWalkReadyOff/1]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',133).
mpred_prop(xWalkReadyOff(xschema),event).
 %  mpred_prop(xWalkReadyOff(xschema),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',135).
% [xschema,time]
% HoldsAt(XWalkEnabled(xschema),time) &
% HoldsAt(XWalkVision(xschema),time) &
% HoldsAt(XWalkPosture(xschema),time) &
% !({distance} HoldsAt(XWalkStepping(xschema,distance),time)) & ; !!! pulse
% !HoldsAt(XWalkReady(xschema),time) ->
% Happens(XWalkReadyOn(xschema),time).
 %  clausify_pnf=(holds_at(xWalkEnabled(Xschema), Time), holds_at(xWalkVision(Xschema), Time), holds_at(xWalkPosture(Xschema), Time), not(exists([Distance], holds_at(xWalkStepping(Xschema, Distance), Time))), holds_at(neg(xWalkReady(Xschema)), Time)->happens(xWalkReadyOn(Xschema), Time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',135).

 /*  happens(xWalkReadyOn(Xschema), Time) :-
       holds_at(xWalkEnabled(Xschema), Time),
       holds_at(xWalkVision(Xschema), Time),
       holds_at(xWalkPosture(Xschema), Time),
       not(holds_at(xWalkStepping(Xschema, Distance), Time)),
       holds_at(neg(xWalkReady(Xschema)), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',135).

 /*  fix_axiom_head(Time) ->
       [ happens(xWalkReadyOn(Xschema), Time),
          (->),
         xWalkReadyOn(Xschema)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',135).

 /*  pl=axiom(xWalkReadyOn(Xschema),
         [ xWalkEnabled(Xschema),
   	xWalkVision(Xschema),
   	xWalkPosture(Xschema),
   	not(xWalkStepping(Xschema,Distance)),
   	not(xWalkReady(Xschema))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',135).

 /*  (   xWalkEnabled(Xschema),
       xWalkVision(Xschema),
       xWalkPosture(Xschema),
       not(xWalkStepping(Xschema, Distance)),
       not(xWalkReady(Xschema))
   ->  xWalkReadyOn(Xschema)
   ).
 */
if xWalkEnabled(Xschema), xWalkVision(Xschema), xWalkPosture(Xschema), not xWalkStepping(Xschema, Distance), not xWalkReady(Xschema)then xWalkReadyOn(Xschema).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',135).

 /*  reactive_rule([ xWalkEnabled(Xschema),
   		xWalkVision(Xschema),
   		xWalkPosture(Xschema),
   		holds(not(xWalkStepping(Xschema,Distance)),
   		      Holds),
   		not(xWalkReady(Xschema))
   	      ],
   	      [xWalkReadyOn(Xschema)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',135).

 /*  reactive_rule([ xWalkEnabled(Xschema),
   		xWalkVision(Xschema),
   		xWalkPosture(Xschema),
   		holds(not(xWalkStepping(Xschema,Distance)),
   		      Holds),
   		not(xWalkReady(Xschema))
   	      ],
   	      [xWalkReadyOn(Xschema)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',135).

 /*  not(holds_at(xWalkEnabled(Xschema), Time)) :-
       holds_at(xWalkVision(Xschema), Time),
       holds_at(xWalkPosture(Xschema), Time),
       not(holds_at(xWalkStepping(Xschema, Distance), Time)),
       holds_at(neg(xWalkReady(Xschema)), Time),
       not(happens(xWalkReadyOn(Xschema), Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',135).

 /*  pl=axiom(not(xWalkEnabled(Xschema)),
         [ xWalkVision(Xschema),
   	xWalkPosture(Xschema),
   	not(xWalkStepping(Xschema,Distance)),
   	not(xWalkReady(Xschema)),
   	not(xWalkReadyOn(Xschema))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',135).

 /*  (   xWalkVision(Xschema),
       xWalkPosture(Xschema),
       not(xWalkStepping(Xschema, Distance)),
       not(xWalkReady(Xschema)),
       not(xWalkReadyOn(Xschema))
   ->  not(xWalkEnabled(Xschema))
   ).
 */
if xWalkVision(Xschema), xWalkPosture(Xschema), not xWalkStepping(Xschema, Distance), not xWalkReady(Xschema), not xWalkReadyOn(Xschema)then not xWalkEnabled(Xschema).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',135).

 /*  reactive_rule([ xWalkVision(Xschema),
   		xWalkPosture(Xschema),
   		holds(not(xWalkStepping(Xschema,Distance)),
   		      Holds4),
   		not(xWalkReady(Xschema)),
   		not(xWalkReadyOn(Xschema))
   	      ],
   	      [not(xWalkEnabled(Xschema))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',135).

 /*  reactive_rule([ xWalkVision(Xschema),
   		xWalkPosture(Xschema),
   		holds(not(xWalkStepping(Xschema,Distance)),
   		      Holds4),
   		not(xWalkReady(Xschema)),
   		not(xWalkReadyOn(Xschema))
   	      ],
   	      [not(xWalkEnabled(Xschema))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',135).

 /*  not(holds_at(xWalkVision(Xschema), Time)) :-
       holds_at(xWalkPosture(Xschema), Time),
       not(holds_at(xWalkStepping(Xschema, Distance), Time)),
       holds_at(neg(xWalkReady(Xschema)), Time),
       holds_at(xWalkEnabled(Xschema), Time),
       not(happens(xWalkReadyOn(Xschema), Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',135).

 /*  pl=axiom(not(xWalkVision(Xschema)),
         [ xWalkPosture(Xschema),
   	not(xWalkStepping(Xschema,Distance)),
   	not(xWalkReady(Xschema)),
   	xWalkEnabled(Xschema),
   	not(xWalkReadyOn(Xschema))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',135).

 /*  (   xWalkPosture(Xschema),
       not(xWalkStepping(Xschema, Distance)),
       not(xWalkReady(Xschema)),
       xWalkEnabled(Xschema),
       not(xWalkReadyOn(Xschema))
   ->  not(xWalkVision(Xschema))
   ).
 */
if xWalkPosture(Xschema), not xWalkStepping(Xschema, Distance), not xWalkReady(Xschema), xWalkEnabled(Xschema), not xWalkReadyOn(Xschema)then not xWalkVision(Xschema).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',135).

 /*  reactive_rule([ xWalkPosture(Xschema),
   		holds(not(xWalkStepping(Xschema,Distance)),
   		      Holds5),
   		not(xWalkReady(Xschema)),
   		xWalkEnabled(Xschema),
   		not(xWalkReadyOn(Xschema))
   	      ],
   	      [not(xWalkVision(Xschema))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',135).

 /*  reactive_rule([ xWalkPosture(Xschema),
   		holds(not(xWalkStepping(Xschema,Distance)),
   		      Holds5),
   		not(xWalkReady(Xschema)),
   		xWalkEnabled(Xschema),
   		not(xWalkReadyOn(Xschema))
   	      ],
   	      [not(xWalkVision(Xschema))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',135).

 /*  not(holds_at(xWalkPosture(Xschema), Time)) :-
       not(holds_at(xWalkStepping(Xschema, Distance), Time)),
       holds_at(neg(xWalkReady(Xschema)), Time),
       holds_at(xWalkVision(Xschema), Time),
       holds_at(xWalkEnabled(Xschema), Time),
       not(happens(xWalkReadyOn(Xschema), Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',135).

 /*  pl=axiom(not(xWalkPosture(Xschema)),
         [ not(xWalkStepping(Xschema,Distance)),
   	not(xWalkReady(Xschema)),
   	xWalkVision(Xschema),
   	xWalkEnabled(Xschema),
   	not(xWalkReadyOn(Xschema))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',135).

 /*  (   not(xWalkStepping(Xschema, Distance)),
       not(xWalkReady(Xschema)),
       xWalkVision(Xschema),
       xWalkEnabled(Xschema),
       not(xWalkReadyOn(Xschema))
   ->  not(xWalkPosture(Xschema))
   ).
 */
if not xWalkStepping(Xschema, Distance), not xWalkReady(Xschema), xWalkVision(Xschema), xWalkEnabled(Xschema), not xWalkReadyOn(Xschema)then not xWalkPosture(Xschema).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',135).

 /*  reactive_rule([ holds(not(xWalkStepping(Xschema,Distance)),
   		      Holds6),
   		not(xWalkReady(Xschema)),
   		xWalkVision(Xschema),
   		xWalkEnabled(Xschema),
   		not(xWalkReadyOn(Xschema))
   	      ],
   	      [not(xWalkPosture(Xschema))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',135).

 /*  reactive_rule([ holds(not(xWalkStepping(Xschema,Distance)),
   		      Holds6),
   		not(xWalkReady(Xschema)),
   		xWalkVision(Xschema),
   		xWalkEnabled(Xschema),
   		not(xWalkReadyOn(Xschema))
   	      ],
   	      [not(xWalkPosture(Xschema))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',135).

 /*  holds_at(xWalkStepping(Xschema, Distance), Time) :-
       holds_at(neg(xWalkReady(Xschema)), Time),
       holds_at(xWalkPosture(Xschema), Time),
       holds_at(xWalkVision(Xschema), Time),
       holds_at(xWalkEnabled(Xschema), Time),
       not(happens(xWalkReadyOn(Xschema), Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',135).

 /*  fix_axiom_head(Time) ->
       [ holds_at(xWalkStepping(Xschema, Distance), Time),
          (->),
         xWalkStepping(Xschema, Distance)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',135).

 /*  pl=axiom(xWalkStepping(Xschema,Distance),
         [ not(xWalkReady(Xschema)),
   	xWalkPosture(Xschema),
   	xWalkVision(Xschema),
   	xWalkEnabled(Xschema),
   	not(xWalkReadyOn(Xschema))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',135).

 /*  (   not(xWalkReady(Xschema)),
       xWalkPosture(Xschema),
       xWalkVision(Xschema),
       xWalkEnabled(Xschema),
       not(xWalkReadyOn(Xschema))
   ->  xWalkStepping(Xschema, Distance)
   ).
 */
if not xWalkReady(Xschema), xWalkPosture(Xschema), xWalkVision(Xschema), xWalkEnabled(Xschema), not xWalkReadyOn(Xschema)then xWalkStepping(Xschema, Distance).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',135).

 /*  reactive_rule([ not(xWalkReady(Xschema)),
   		xWalkPosture(Xschema),
   		xWalkVision(Xschema),
   		xWalkEnabled(Xschema),
   		not(xWalkReadyOn(Xschema))
   	      ],
   	      [ holds(xWalkStepping(Xschema,Distance),
   		      Holds7)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',135).

 /*  reactive_rule([ not(xWalkReady(Xschema)),
   		xWalkPosture(Xschema),
   		xWalkVision(Xschema),
   		xWalkEnabled(Xschema),
   		not(xWalkReadyOn(Xschema))
   	      ],
   	      [ holds(xWalkStepping(Xschema,Distance),
   		      Holds7)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',135).

 /*  not(holds_at(neg(xWalkReady(Xschema)), Time)) :-
       not(holds_at(xWalkStepping(Xschema, Distance), Time)),
       holds_at(xWalkPosture(Xschema), Time),
       holds_at(xWalkVision(Xschema), Time),
       holds_at(xWalkEnabled(Xschema), Time),
       not(happens(xWalkReadyOn(Xschema), Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',135).

 /*  pl=axiom(not(not(xWalkReady(Xschema))),
         [ not(xWalkStepping(Xschema,Distance)),
   	xWalkPosture(Xschema),
   	xWalkVision(Xschema),
   	xWalkEnabled(Xschema),
   	not(xWalkReadyOn(Xschema))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',135).

 /*  (   not(xWalkStepping(Xschema, Distance)),
       xWalkPosture(Xschema),
       xWalkVision(Xschema),
       xWalkEnabled(Xschema),
       not(xWalkReadyOn(Xschema))
   ->  not(not(xWalkReady(Xschema)))
   ).
 */
if not xWalkStepping(Xschema, Distance), xWalkPosture(Xschema), xWalkVision(Xschema), xWalkEnabled(Xschema), not xWalkReadyOn(Xschema)then not not xWalkReady(Xschema).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',135).

 /*  reactive_rule([ holds(not(xWalkStepping(Xschema,Distance)),
   		      Holds8),
   		xWalkPosture(Xschema),
   		xWalkVision(Xschema),
   		xWalkEnabled(Xschema),
   		not(xWalkReadyOn(Xschema))
   	      ],
   	      [not(not(xWalkReady(Xschema)))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',135).

 /*  reactive_rule([ holds(not(xWalkStepping(Xschema,Distance)),
   		      Holds8),
   		xWalkPosture(Xschema),
   		xWalkVision(Xschema),
   		xWalkEnabled(Xschema),
   		not(xWalkReadyOn(Xschema))
   	      ],
   	      [not(not(xWalkReady(Xschema)))]).
 */


% [xschema,time]
% Initiates(XWalkReadyOn(xschema),XWalkReady(xschema),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',144).

 /*  pl=axiom(initiates(xWalkReadyOn(Xschema),
   		xWalkReady(Xschema),
   		Time),
         []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',144).

 /*  initiates(xWalkReadyOn(Xschema),
   	  xWalkReady(Xschema),
   	  Time).
 */
xWalkReadyOn(Xschema)initiates xWalkReady(Xschema).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',144).

 /*  initiated(happens(xWalkReadyOn(Xschema),
   		  Time_From,
   		  Time_Until),
   	  xWalkReady(Xschema),
   	  []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',144).

 /*  initiated(happens(xWalkReadyOn(Xschema),
   		  Time_From,
   		  Time_Until),
   	  xWalkReady(Xschema),
   	  []).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',146).
% [xschema,time]
% Terminates(XWalkReadyOff(xschema),XWalkReady(xschema),time).

 /*  pl=axiom(terminates(xWalkReadyOff(Xschema),
   		 xWalkReady(Xschema),
   		 Time),
         []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',146).

 /*  terminates(xWalkReadyOff(Xschema),
   	   xWalkReady(Xschema),
   	   Time).
 */
xWalkReadyOff(Xschema)terminates xWalkReady(Xschema).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',146).

 /*  terminated(happens(xWalkReadyOff(Xschema),
   		   Time_From,
   		   Time_Until),
   	   xWalkReady(Xschema),
   	   []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',146).

 /*  terminated(happens(xWalkReadyOff(Xschema),
   		   Time_From,
   		   Time_Until),
   	   xWalkReady(Xschema),
   	   []).
 */


%; bypass_ok
% [xschema,time]
% !(% {distance} HoldsAt(XWalkStepping(xschema,distance),time)) &
% HoldsAt(XWalkVisionOK(xschema),time) &
% HoldsAt(XWalkReady(xschema),time) ->
% Happens(XWalkSteppingOn(xschema),time) &
% Happens(XWalkReadyOff(xschema),time).
 %  clausify_pnf=exists([Distance],  (holds_at(neg(xWalkStepping(Xschema, Distance)), Time), holds_at(xWalkVisionOK(Xschema), Time), holds_at(xWalkReady(Xschema), Time)->happens(xWalkSteppingOn(Xschema), Time), happens(xWalkReadyOff(Xschema), Time))).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',150).

 /*  not(holds_at(neg(xWalkStepping(Xschema, Exists_Distance)), Time)) :-
       holds_at(xWalkVisionOK(Xschema), Time),
       holds_at(xWalkReady(Xschema), Time),
       (   not(happens(xWalkSteppingOn(Xschema), Time))
       ;   not(happens(xWalkReadyOff(Xschema), Time))
       ),
       some(Exists_Distance, '$kolem_Fn_74'(Xschema, Time)).
 */
 %   pl=axiom(not(not(xWalkStepping(Xschema, Exists_Distance))), [xWalkVisionOK(Xschema), xWalkReady(Xschema),  (not(xWalkSteppingOn(Xschema));not(xWalkReadyOff(Xschema))), some(Exists_Distance, '$kolem_Fn_74'(Xschema, Time))]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',150).

 /*  (   xWalkVisionOK(Xschema),
       xWalkReady(Xschema),
       (   not(xWalkSteppingOn(Xschema))
       ;   not(xWalkReadyOff(Xschema))
       ),
       some(Exists_Distance, '$kolem_Fn_74'(Xschema, Time))
   ->  not(not(xWalkStepping(Xschema, Exists_Distance)))
   ).
 */
if xWalkVisionOK(Xschema), xWalkReady(Xschema), (not xWalkSteppingOn(Xschema);not xWalkReadyOff(Xschema)), some(Exists_Distance, '$kolem_Fn_74'(Xschema, Time))then not not xWalkStepping(Xschema, Exists_Distance).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',150).

 /*   reactive_rule([ xWalkVisionOK(Xschema),
                      holds(xWalkReady(Xschema), Holds),
                       (not(xWalkSteppingOn(Xschema));not(xWalkReadyOff(Xschema))),
                      some(Exists_Distance,
                           '$kolem_Fn_74'(Xschema, Time))
                    ],
                    [ holds(not([ holds(not(xWalkStepping(Xschema,
                                                          Exists_Distance)),
                                        Holds5)
                                ]),
                            Holds5)
                    ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',150).

 /*   reactive_rule([ xWalkVisionOK(Xschema),
                      holds(xWalkReady(Xschema), Holds),
                       (not(xWalkSteppingOn(Xschema));not(xWalkReadyOff(Xschema))),
                      some(Exists_Distance,
                           '$kolem_Fn_74'(Xschema, Time))
                    ],
                    [ holds(not([ holds(not(xWalkStepping(Xschema,
                                                          Exists_Distance)),
                                        Holds5)
                                ]),
                            Holds5)
                    ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',150).

 /*  not(holds_at(xWalkVisionOK(Xschema), Time)) :-
       holds_at(xWalkReady(Xschema), Time),
       holds_at(neg(xWalkStepping(Xschema, Exists_Distance)),
                Time),
       (   not(happens(xWalkSteppingOn(Xschema), Time))
       ;   not(happens(xWalkReadyOff(Xschema), Time))
       ),
       some(Exists_Distance, '$kolem_Fn_74'(Xschema, Time)).
 */
 %   pl=axiom(not(xWalkVisionOK(Xschema)), [xWalkReady(Xschema), not(xWalkStepping(Xschema, Exists_Distance)),  (not(xWalkSteppingOn(Xschema));not(xWalkReadyOff(Xschema))), some(Exists_Distance, '$kolem_Fn_74'(Xschema, Time))]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',150).

 /*  (   xWalkReady(Xschema),
       not(xWalkStepping(Xschema, Exists_Distance)),
       (   not(xWalkSteppingOn(Xschema))
       ;   not(xWalkReadyOff(Xschema))
       ),
       some(Exists_Distance, '$kolem_Fn_74'(Xschema, Time))
   ->  not(xWalkVisionOK(Xschema))
   ).
 */
if xWalkReady(Xschema), not xWalkStepping(Xschema, Exists_Distance), (not xWalkSteppingOn(Xschema);not xWalkReadyOff(Xschema)), some(Exists_Distance, '$kolem_Fn_74'(Xschema, Time))then not xWalkVisionOK(Xschema).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',150).

 /*   reactive_rule([ holds(xWalkReady(Xschema), Holds6),
                      holds(not(xWalkStepping(Xschema,
                                              Exists_Distance)),
                            Holds6),
                       (not(xWalkSteppingOn(Xschema));not(xWalkReadyOff(Xschema))),
                      some(Exists_Distance,
                           '$kolem_Fn_74'(Xschema, Time))
                    ],
                    [not(xWalkVisionOK(Xschema))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',150).

 /*   reactive_rule([ holds(xWalkReady(Xschema), Holds6),
                      holds(not(xWalkStepping(Xschema,
                                              Exists_Distance)),
                            Holds6),
                       (not(xWalkSteppingOn(Xschema));not(xWalkReadyOff(Xschema))),
                      some(Exists_Distance,
                           '$kolem_Fn_74'(Xschema, Time))
                    ],
                    [not(xWalkVisionOK(Xschema))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',150).

 /*  not(holds_at(xWalkReady(Xschema), Time)) :-
       holds_at(xWalkVisionOK(Xschema), Time),
       holds_at(neg(xWalkStepping(Xschema, Exists_Distance)),
                Time),
       (   not(happens(xWalkSteppingOn(Xschema), Time))
       ;   not(happens(xWalkReadyOff(Xschema), Time))
       ),
       some(Exists_Distance, '$kolem_Fn_74'(Xschema, Time)).
 */
 %   pl=axiom(not(xWalkReady(Xschema)), [xWalkVisionOK(Xschema), not(xWalkStepping(Xschema, Exists_Distance)),  (not(xWalkSteppingOn(Xschema));not(xWalkReadyOff(Xschema))), some(Exists_Distance, '$kolem_Fn_74'(Xschema, Time))]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',150).

 /*  (   xWalkVisionOK(Xschema),
       not(xWalkStepping(Xschema, Exists_Distance)),
       (   not(xWalkSteppingOn(Xschema))
       ;   not(xWalkReadyOff(Xschema))
       ),
       some(Exists_Distance, '$kolem_Fn_74'(Xschema, Time))
   ->  not(xWalkReady(Xschema))
   ).
 */
if xWalkVisionOK(Xschema), not xWalkStepping(Xschema, Exists_Distance), (not xWalkSteppingOn(Xschema);not xWalkReadyOff(Xschema)), some(Exists_Distance, '$kolem_Fn_74'(Xschema, Time))then not xWalkReady(Xschema).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',150).

 /*   reactive_rule([ xWalkVisionOK(Xschema),
                      holds(not(xWalkStepping(Xschema,
                                              Exists_Distance)),
                            Holds7),
                       (not(xWalkSteppingOn(Xschema));not(xWalkReadyOff(Xschema))),
                      some(Exists_Distance,
                           '$kolem_Fn_74'(Xschema, Time))
                    ],
                    [holds(not(xWalkReady(Xschema)), Holds8)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',150).

 /*   reactive_rule([ xWalkVisionOK(Xschema),
                      holds(not(xWalkStepping(Xschema,
                                              Exists_Distance)),
                            Holds7),
                       (not(xWalkSteppingOn(Xschema));not(xWalkReadyOff(Xschema))),
                      some(Exists_Distance,
                           '$kolem_Fn_74'(Xschema, Time))
                    ],
                    [holds(not(xWalkReady(Xschema)), Holds8)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',150).

 /*  happens(xWalkSteppingOn(Xschema), Time) :-
       holds_at(neg(xWalkStepping(Xschema, Exists_Distance)),
                Time),
       holds_at(xWalkVisionOK(Xschema), Time),
       holds_at(xWalkReady(Xschema), Time),
       some(Exists_Distance, '$kolem_Fn_74'(Xschema, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',150).

 /*  fix_axiom_head(Time) ->
       [ happens(xWalkSteppingOn(Xschema), Time),
          (->),
         xWalkSteppingOn(Xschema)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',150).

 /*  pl=axiom(xWalkSteppingOn(Xschema),
         [ not(xWalkStepping(Xschema,Exists_Distance)),
   	xWalkVisionOK(Xschema),
   	xWalkReady(Xschema),
   	some(Exists_Distance,
   	     '$kolem_Fn_74'(Xschema,Time))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',150).

 /*  (   not(xWalkStepping(Xschema, Exists_Distance)),
       xWalkVisionOK(Xschema),
       xWalkReady(Xschema),
       some(Exists_Distance, '$kolem_Fn_74'(Xschema, Time))
   ->  xWalkSteppingOn(Xschema)
   ).
 */
if not xWalkStepping(Xschema, Exists_Distance), xWalkVisionOK(Xschema), xWalkReady(Xschema), some(Exists_Distance, '$kolem_Fn_74'(Xschema, Time))then xWalkSteppingOn(Xschema).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',150).

 /*  reactive_rule([ holds(not(xWalkStepping(Xschema,
   					Exists_Distance)),
   		      Holds9),
   		xWalkVisionOK(Xschema),
   		holds(xWalkReady(Xschema),Holds9),
   		some(Exists_Distance,
   		     '$kolem_Fn_74'(Xschema,Time))
   	      ],
   	      [xWalkSteppingOn(Xschema)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',150).

 /*  reactive_rule([ holds(not(xWalkStepping(Xschema,
   					Exists_Distance)),
   		      Holds9),
   		xWalkVisionOK(Xschema),
   		holds(xWalkReady(Xschema),Holds9),
   		some(Exists_Distance,
   		     '$kolem_Fn_74'(Xschema,Time))
   	      ],
   	      [xWalkSteppingOn(Xschema)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',150).

 /*  happens(xWalkReadyOff(Xschema), Time) :-
       holds_at(neg(xWalkStepping(Xschema, Exists_Distance)),
                Time),
       holds_at(xWalkVisionOK(Xschema), Time),
       holds_at(xWalkReady(Xschema), Time),
       some(Exists_Distance, '$kolem_Fn_74'(Xschema, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',150).

 /*  fix_axiom_head(Time) ->
       [ happens(xWalkReadyOff(Xschema), Time),
          (->),
         xWalkReadyOff(Xschema)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',150).

 /*  pl=axiom(xWalkReadyOff(Xschema),
         [ not(xWalkStepping(Xschema,Exists_Distance)),
   	xWalkVisionOK(Xschema),
   	xWalkReady(Xschema),
   	some(Exists_Distance,
   	     '$kolem_Fn_74'(Xschema,Time))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',150).

 /*  (   not(xWalkStepping(Xschema, Exists_Distance)),
       xWalkVisionOK(Xschema),
       xWalkReady(Xschema),
       some(Exists_Distance, '$kolem_Fn_74'(Xschema, Time))
   ->  xWalkReadyOff(Xschema)
   ).
 */
if not xWalkStepping(Xschema, Exists_Distance), xWalkVisionOK(Xschema), xWalkReady(Xschema), some(Exists_Distance, '$kolem_Fn_74'(Xschema, Time))then xWalkReadyOff(Xschema).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',150).

 /*  reactive_rule([ holds(not(xWalkStepping(Xschema,
   					Exists_Distance)),
   		      Holds12),
   		xWalkVisionOK(Xschema),
   		holds(xWalkReady(Xschema),Holds12),
   		some(Exists_Distance,
   		     '$kolem_Fn_74'(Xschema,Time))
   	      ],
   	      [ happens(xWalkReadyOff(Xschema),
   			Time_From,
   			Time_Until)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',150).

 /*  reactive_rule([ holds(not(xWalkStepping(Xschema,
   					Exists_Distance)),
   		      Holds12),
   		xWalkVisionOK(Xschema),
   		holds(xWalkReady(Xschema),Holds12),
   		some(Exists_Distance,
   		     '$kolem_Fn_74'(Xschema,Time))
   	      ],
   	      [ happens(xWalkReadyOff(Xschema),
   			Time_From,
   			Time_Until)
   	      ]).
 */


%; !bypass_ok
% [xschema,time]
% !(% {distance} HoldsAt(XWalkStepping(xschema,distance),time)) &
% !HoldsAt(XWalkVisionOK(xschema),time) &
% HoldsAt(XWalkReady(xschema),time) ->
% Happens(XWalkTestFooting(xschema),time) &
% Happens(XWalkReadyOff(xschema),time).
 %  clausify_pnf=exists([Distance],  (holds_at(neg(xWalkStepping(Xschema, Distance)), Time), holds_at(neg(xWalkVisionOK(Xschema)), Time), holds_at(xWalkReady(Xschema), Time)->happens(xWalkTestFooting(Xschema), Time), happens(xWalkReadyOff(Xschema), Time))).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',158).

 /*  not(holds_at(neg(xWalkStepping(Xschema, Exists_Distance)), Time)) :-
       holds_at(neg(xWalkVisionOK(Xschema)), Time),
       holds_at(xWalkReady(Xschema), Time),
       (   not(happens(xWalkTestFooting(Xschema), Time))
       ;   not(happens(xWalkReadyOff(Xschema), Time))
       ),
       some(Exists_Distance, '$kolem_Fn_75'(Xschema, Time)).
 */
 %   pl=axiom(not(not(xWalkStepping(Xschema, Exists_Distance))), [not(xWalkVisionOK(Xschema)), xWalkReady(Xschema),  (not(xWalkTestFooting(Xschema));not(xWalkReadyOff(Xschema))), some(Exists_Distance, '$kolem_Fn_75'(Xschema, Time))]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',158).

 /*  (   not(xWalkVisionOK(Xschema)),
       xWalkReady(Xschema),
       (   not(xWalkTestFooting(Xschema))
       ;   not(xWalkReadyOff(Xschema))
       ),
       some(Exists_Distance, '$kolem_Fn_75'(Xschema, Time))
   ->  not(not(xWalkStepping(Xschema, Exists_Distance)))
   ).
 */
if not xWalkVisionOK(Xschema), xWalkReady(Xschema), (not xWalkTestFooting(Xschema);not xWalkReadyOff(Xschema)), some(Exists_Distance, '$kolem_Fn_75'(Xschema, Time))then not not xWalkStepping(Xschema, Exists_Distance).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',158).

 /*   reactive_rule([ not(xWalkVisionOK(Xschema)),
                      holds(xWalkReady(Xschema), Holds),
                       (not(xWalkTestFooting(Xschema));not(xWalkReadyOff(Xschema))),
                      some(Exists_Distance,
                           '$kolem_Fn_75'(Xschema, Time))
                    ],
                    [ holds(not([ holds(not(xWalkStepping(Xschema,
                                                          Exists_Distance)),
                                        Holds5)
                                ]),
                            Holds5)
                    ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',158).

 /*   reactive_rule([ not(xWalkVisionOK(Xschema)),
                      holds(xWalkReady(Xschema), Holds),
                       (not(xWalkTestFooting(Xschema));not(xWalkReadyOff(Xschema))),
                      some(Exists_Distance,
                           '$kolem_Fn_75'(Xschema, Time))
                    ],
                    [ holds(not([ holds(not(xWalkStepping(Xschema,
                                                          Exists_Distance)),
                                        Holds5)
                                ]),
                            Holds5)
                    ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',158).

 /*  not(holds_at(neg(xWalkVisionOK(Xschema)), Time)) :-
       holds_at(xWalkReady(Xschema), Time),
       holds_at(neg(xWalkStepping(Xschema, Exists_Distance)),
                Time),
       (   not(happens(xWalkTestFooting(Xschema), Time))
       ;   not(happens(xWalkReadyOff(Xschema), Time))
       ),
       some(Exists_Distance, '$kolem_Fn_75'(Xschema, Time)).
 */
 %   pl=axiom(not(not(xWalkVisionOK(Xschema))), [xWalkReady(Xschema), not(xWalkStepping(Xschema, Exists_Distance)),  (not(xWalkTestFooting(Xschema));not(xWalkReadyOff(Xschema))), some(Exists_Distance, '$kolem_Fn_75'(Xschema, Time))]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',158).

 /*  (   xWalkReady(Xschema),
       not(xWalkStepping(Xschema, Exists_Distance)),
       (   not(xWalkTestFooting(Xschema))
       ;   not(xWalkReadyOff(Xschema))
       ),
       some(Exists_Distance, '$kolem_Fn_75'(Xschema, Time))
   ->  not(not(xWalkVisionOK(Xschema)))
   ).
 */
if xWalkReady(Xschema), not xWalkStepping(Xschema, Exists_Distance), (not xWalkTestFooting(Xschema);not xWalkReadyOff(Xschema)), some(Exists_Distance, '$kolem_Fn_75'(Xschema, Time))then not not xWalkVisionOK(Xschema).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',158).

 /*   reactive_rule([ holds(xWalkReady(Xschema), Holds6),
                      holds(not(xWalkStepping(Xschema,
                                              Exists_Distance)),
                            Holds6),
                       (not(xWalkTestFooting(Xschema));not(xWalkReadyOff(Xschema))),
                      some(Exists_Distance,
                           '$kolem_Fn_75'(Xschema, Time))
                    ],
                    [not(not(xWalkVisionOK(Xschema)))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',158).

 /*   reactive_rule([ holds(xWalkReady(Xschema), Holds6),
                      holds(not(xWalkStepping(Xschema,
                                              Exists_Distance)),
                            Holds6),
                       (not(xWalkTestFooting(Xschema));not(xWalkReadyOff(Xschema))),
                      some(Exists_Distance,
                           '$kolem_Fn_75'(Xschema, Time))
                    ],
                    [not(not(xWalkVisionOK(Xschema)))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',158).

 /*  not(holds_at(xWalkReady(Xschema), Time)) :-
       holds_at(neg(xWalkVisionOK(Xschema)), Time),
       holds_at(neg(xWalkStepping(Xschema, Exists_Distance)),
                Time),
       (   not(happens(xWalkTestFooting(Xschema), Time))
       ;   not(happens(xWalkReadyOff(Xschema), Time))
       ),
       some(Exists_Distance, '$kolem_Fn_75'(Xschema, Time)).
 */
 %   pl=axiom(not(xWalkReady(Xschema)), [not(xWalkVisionOK(Xschema)), not(xWalkStepping(Xschema, Exists_Distance)),  (not(xWalkTestFooting(Xschema));not(xWalkReadyOff(Xschema))), some(Exists_Distance, '$kolem_Fn_75'(Xschema, Time))]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',158).

 /*  (   not(xWalkVisionOK(Xschema)),
       not(xWalkStepping(Xschema, Exists_Distance)),
       (   not(xWalkTestFooting(Xschema))
       ;   not(xWalkReadyOff(Xschema))
       ),
       some(Exists_Distance, '$kolem_Fn_75'(Xschema, Time))
   ->  not(xWalkReady(Xschema))
   ).
 */
if not xWalkVisionOK(Xschema), not xWalkStepping(Xschema, Exists_Distance), (not xWalkTestFooting(Xschema);not xWalkReadyOff(Xschema)), some(Exists_Distance, '$kolem_Fn_75'(Xschema, Time))then not xWalkReady(Xschema).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',158).

 /*   reactive_rule([ not(xWalkVisionOK(Xschema)),
                      holds(not(xWalkStepping(Xschema,
                                              Exists_Distance)),
                            Holds7),
                       (not(xWalkTestFooting(Xschema));not(xWalkReadyOff(Xschema))),
                      some(Exists_Distance,
                           '$kolem_Fn_75'(Xschema, Time))
                    ],
                    [holds(not(xWalkReady(Xschema)), Holds8)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',158).

 /*   reactive_rule([ not(xWalkVisionOK(Xschema)),
                      holds(not(xWalkStepping(Xschema,
                                              Exists_Distance)),
                            Holds7),
                       (not(xWalkTestFooting(Xschema));not(xWalkReadyOff(Xschema))),
                      some(Exists_Distance,
                           '$kolem_Fn_75'(Xschema, Time))
                    ],
                    [holds(not(xWalkReady(Xschema)), Holds8)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',158).

 /*  happens(xWalkTestFooting(Xschema), Time) :-
       holds_at(neg(xWalkStepping(Xschema, Exists_Distance)),
                Time),
       holds_at(neg(xWalkVisionOK(Xschema)), Time),
       holds_at(xWalkReady(Xschema), Time),
       some(Exists_Distance, '$kolem_Fn_75'(Xschema, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',158).

 /*  fix_axiom_head(Time) ->
       [ happens(xWalkTestFooting(Xschema), Time),
          (->),
         xWalkTestFooting(Xschema)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',158).

 /*  pl=axiom(xWalkTestFooting(Xschema),
         [ not(xWalkStepping(Xschema,Exists_Distance)),
   	not(xWalkVisionOK(Xschema)),
   	xWalkReady(Xschema),
   	some(Exists_Distance,
   	     '$kolem_Fn_75'(Xschema,Time))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',158).

 /*  (   not(xWalkStepping(Xschema, Exists_Distance)),
       not(xWalkVisionOK(Xschema)),
       xWalkReady(Xschema),
       some(Exists_Distance, '$kolem_Fn_75'(Xschema, Time))
   ->  xWalkTestFooting(Xschema)
   ).
 */
if not xWalkStepping(Xschema, Exists_Distance), not xWalkVisionOK(Xschema), xWalkReady(Xschema), some(Exists_Distance, '$kolem_Fn_75'(Xschema, Time))then xWalkTestFooting(Xschema).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',158).

 /*  reactive_rule([ holds(not(xWalkStepping(Xschema,
   					Exists_Distance)),
   		      Holds9),
   		not(xWalkVisionOK(Xschema)),
   		holds(xWalkReady(Xschema),Holds9),
   		some(Exists_Distance,
   		     '$kolem_Fn_75'(Xschema,Time))
   	      ],
   	      [xWalkTestFooting(Xschema)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',158).

 /*  reactive_rule([ holds(not(xWalkStepping(Xschema,
   					Exists_Distance)),
   		      Holds9),
   		not(xWalkVisionOK(Xschema)),
   		holds(xWalkReady(Xschema),Holds9),
   		some(Exists_Distance,
   		     '$kolem_Fn_75'(Xschema,Time))
   	      ],
   	      [xWalkTestFooting(Xschema)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',158).

 /*  happens(xWalkReadyOff(Xschema), Time) :-
       holds_at(neg(xWalkStepping(Xschema, Exists_Distance)),
                Time),
       holds_at(neg(xWalkVisionOK(Xschema)), Time),
       holds_at(xWalkReady(Xschema), Time),
       some(Exists_Distance, '$kolem_Fn_75'(Xschema, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',158).

 /*  fix_axiom_head(Time) ->
       [ happens(xWalkReadyOff(Xschema), Time),
          (->),
         xWalkReadyOff(Xschema)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',158).

 /*  pl=axiom(xWalkReadyOff(Xschema),
         [ not(xWalkStepping(Xschema,Exists_Distance)),
   	not(xWalkVisionOK(Xschema)),
   	xWalkReady(Xschema),
   	some(Exists_Distance,
   	     '$kolem_Fn_75'(Xschema,Time))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',158).

 /*  (   not(xWalkStepping(Xschema, Exists_Distance)),
       not(xWalkVisionOK(Xschema)),
       xWalkReady(Xschema),
       some(Exists_Distance, '$kolem_Fn_75'(Xschema, Time))
   ->  xWalkReadyOff(Xschema)
   ).
 */
if not xWalkStepping(Xschema, Exists_Distance), not xWalkVisionOK(Xschema), xWalkReady(Xschema), some(Exists_Distance, '$kolem_Fn_75'(Xschema, Time))then xWalkReadyOff(Xschema).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',158).

 /*  reactive_rule([ holds(not(xWalkStepping(Xschema,
   					Exists_Distance)),
   		      Holds12),
   		not(xWalkVisionOK(Xschema)),
   		holds(xWalkReady(Xschema),Holds12),
   		some(Exists_Distance,
   		     '$kolem_Fn_75'(Xschema,Time))
   	      ],
   	      [ happens(xWalkReadyOff(Xschema),
   			Time_From,
   			Time_Until)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',158).

 /*  reactive_rule([ holds(not(xWalkStepping(Xschema,
   					Exists_Distance)),
   		      Holds12),
   		not(xWalkVisionOK(Xschema)),
   		holds(xWalkReady(Xschema),Holds12),
   		some(Exists_Distance,
   		     '$kolem_Fn_75'(Xschema,Time))
   	      ],
   	      [ happens(xWalkReadyOff(Xschema),
   			Time_From,
   			Time_Until)
   	      ]).
 */


% [xschema,distance,time]
% HoldsAt(XWalkStepping(xschema,distance),time) &
% HoldsAt(XWalkDistance(xschema,distance),time) &
% (distance > 0) ->
% Happens(XWalkReadyOn(xschema),time).
 %  clausify_pnf=(holds_at(xWalkStepping(Xschema, Distance), Time), holds_at(xWalkDistance(Xschema, Distance), Time), Distance>0->happens(xWalkReadyOn(Xschema), Time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',166).

 /*  happens(xWalkReadyOn(Xschema), Time) :-
       holds_at(xWalkStepping(Xschema, Distance), Time),
       holds_at(xWalkDistance(Xschema, Distance), Time),
       comparison(Distance, 0, >).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',166).

 /*  fix_axiom_head(Time) ->
       [ happens(xWalkReadyOn(Xschema), Time),
          (->),
         xWalkReadyOn(Xschema)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',166).

 /*  pl=axiom(xWalkReadyOn(Xschema),
         [ xWalkStepping(Xschema,Distance),
   	xWalkDistance(Xschema,Distance),
   	comparison(Distance,0,>)
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',166).

 /*  (   xWalkStepping(Xschema, Distance),
       xWalkDistance(Xschema, Distance),
       comparison(Distance, 0, >)
   ->  xWalkReadyOn(Xschema)
   ).
 */
if xWalkStepping(Xschema, Distance), xWalkDistance(Xschema, Distance), comparison(Distance, 0, >)then xWalkReadyOn(Xschema).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',166).

 /*  reactive_rule([ holds(xWalkStepping(Xschema,Distance),
   		      Holds),
   		xWalkDistance(Xschema,Distance),
   		comparison(Distance,0,>)
   	      ],
   	      [ happens(xWalkReadyOn(Xschema),
   			Time_From,
   			Time_Until)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',166).

 /*  reactive_rule([ holds(xWalkStepping(Xschema,Distance),
   		      Holds),
   		xWalkDistance(Xschema,Distance),
   		comparison(Distance,0,>)
   	      ],
   	      [ happens(xWalkReadyOn(Xschema),
   			Time_From,
   			Time_Until)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',166).

 /*  not(holds_at(xWalkStepping(Xschema, Distance), Time)) :-
       holds_at(xWalkDistance(Xschema, Distance), Time),
       comparison(Distance, 0, >),
       not(happens(xWalkReadyOn(Xschema), Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',166).

 /*  pl=axiom(not(xWalkStepping(Xschema,Distance)),
         [ xWalkDistance(Xschema,Distance),
   	comparison(Distance,0,>),
   	not(xWalkReadyOn(Xschema))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',166).

 /*  (   xWalkDistance(Xschema, Distance),
       comparison(Distance, 0, >),
       not(xWalkReadyOn(Xschema))
   ->  not(xWalkStepping(Xschema, Distance))
   ).
 */
if xWalkDistance(Xschema, Distance), comparison(Distance, 0, >), not xWalkReadyOn(Xschema)then not xWalkStepping(Xschema, Distance).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',166).

 /*  reactive_rule([ xWalkDistance(Xschema,Distance),
   		comparison(Distance,0,>),
   		not(xWalkReadyOn(Xschema))
   	      ],
   	      [ holds(not(xWalkStepping(Xschema,Distance)),
   		      Holds6)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',166).

 /*  reactive_rule([ xWalkDistance(Xschema,Distance),
   		comparison(Distance,0,>),
   		not(xWalkReadyOn(Xschema))
   	      ],
   	      [ holds(not(xWalkStepping(Xschema,Distance)),
   		      Holds6)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',166).

 /*  not(holds_at(xWalkDistance(Xschema, Distance), Time)) :-
       comparison(Distance, 0, >),
       holds_at(xWalkStepping(Xschema, Distance), Time),
       not(happens(xWalkReadyOn(Xschema), Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',166).

 /*  pl=axiom(not(xWalkDistance(Xschema,Distance)),
         [ comparison(Distance,0,>),
   	xWalkStepping(Xschema,Distance),
   	not(xWalkReadyOn(Xschema))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',166).

 /*  (   comparison(Distance, 0, >),
       xWalkStepping(Xschema, Distance),
       not(xWalkReadyOn(Xschema))
   ->  not(xWalkDistance(Xschema, Distance))
   ).
 */
if comparison(Distance, 0, >), xWalkStepping(Xschema, Distance), not xWalkReadyOn(Xschema)then not xWalkDistance(Xschema, Distance).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',166).

 /*  reactive_rule([ comparison(Distance,0,>),
   		holds(xWalkStepping(Xschema,Distance),
   		      Holds7),
   		not(xWalkReadyOn(Xschema))
   	      ],
   	      [not(xWalkDistance(Xschema,Distance))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',166).

 /*  reactive_rule([ comparison(Distance,0,>),
   		holds(xWalkStepping(Xschema,Distance),
   		      Holds7),
   		not(xWalkReadyOn(Xschema))
   	      ],
   	      [not(xWalkDistance(Xschema,Distance))]).
 */


%; End of file.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',170).
% translate: ending  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e.lps 
