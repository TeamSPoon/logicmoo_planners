:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TimeDelayBombing.e',147).
% translate: unskipped  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e.lps 
:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(lps).
% translate: begining  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e.lps 
% Thu, 08 Oct 2020 19:07:14 GMT File: <stream>(0x5600a3b2af00)%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; Vehicle: transportation vehicles
%;

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',14).
% sort vehicle: physobj
subsort(vehicle,physobj).
 %  subsort(vehicle,physobj).

% sort vehiclein: vehicle
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',14).
subsort(vehiclein,vehicle).
 %  subsort(vehiclein,vehicle).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',16).
% sort vehicleon: vehicle
subsort(vehicleon,vehicle).
 %  subsort(vehicleon,vehicle).

% sort train: vehicleon
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',16).
subsort(train,vehicleon).
 %  subsort(train,vehicleon).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',18).
% sort carriage: vehiclein
subsort(carriage,vehiclein).
 %  subsort(carriage,vehiclein).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',20).
% sort vehicledoor
sort(vehicledoor).
 %  sort(vehicledoor).
%; RideTrack

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',24).
% event RideTrack12(train,track)
 %  blue=event(rideTrack12(train,track)).
 %  event(rideTrack12(train,track)).
events([rideTrack12/2]).
 %  events([rideTrack12/2]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',24).
mpred_prop(rideTrack12(train,track),event).
 %  mpred_prop(rideTrack12(train,track),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',26).
% event RideTrack21(train,track)
 %  blue=event(rideTrack21(train,track)).
 %  event(rideTrack21(train,track)).
events([rideTrack21/2]).
 %  events([rideTrack21/2]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',26).
mpred_prop(rideTrack21(train,track),event).
 %  mpred_prop(rideTrack21(train,track),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',28).
% [train,track,time]
% Happens(RideTrack12(train,track),time) ->
% HoldsAt(At(train,Side1(track)),time).
 %  clausify_pnf=(happens(rideTrack12(Train, Track), Time)->holds_at(at(Train, side1(Track)), Time)).

 /*  holds_at(at(Train, side1(Track)), Time) :-
       happens(rideTrack12(Train, Track), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',28).

 /*  pl=axiom(requires(rideTrack12(Train,Track),When_Time),
         [metreqs(rideTrack12(Train,Track))]).
 */

 /*  metreqs(rideTrack12(Train, Track)) ->
       requires(rideTrack12(Train, Track), When_Time).
 */
if metreqs(rideTrack12(Train, Track))then requires(rideTrack12(Train, Track), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',28).

 /*  reactive_rule([metreqs(rideTrack12(Train,Track))],
   	      [ requires(rideTrack12(Train,Track),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',28).

 /*  reactive_rule([metreqs(rideTrack12(Train,Track))],
   	      [ requires(rideTrack12(Train,Track),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',28).

 /*  fix_axiom_head(When_Time) ->
       [ holds_at(metreqs(rideTrack12(Train, Track)), When_Time),
          (->),
         metreqs(rideTrack12(Train, Track))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',28).

 /*  pl=axiom(metreqs(rideTrack12(Train,Track)),
         [at(Train,side1(Track))]).
 */

 /*  at(Train, side1(Track)) ->
       metreqs(rideTrack12(Train, Track)).
 */
if loc_at(Train, side1(Track))then metreqs(rideTrack12(Train, Track)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',28).

 /*  reactive_rule([loc_at(Train,side1(Track))],
   	      [metreqs(rideTrack12(Train,Track))]).
 */

 /*  reactive_rule([loc_at(Train,side1(Track))],
   	      [metreqs(rideTrack12(Train,Track))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',28).

 /*  not(happens(rideTrack12(Train, Track), When_Time)) :-
       not(holds_at(at(Train, side1(Track)), When_Time)).
 */

 /*  fix_axiom_head(When_Time) ->
       [ not(happens(rideTrack12(Train, Track), When_Time)),
          (->),
         not(rideTrack12(Train, Track))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',28).

 /*  pl=axiom(not(rideTrack12(Train,Track)),
         [not(at(Train,side1(Track)))]).
 */

 /*  not(at(Train, side1(Track))) ->
       not(rideTrack12(Train, Track)).
 */
if not loc_at(Train, side1(Track))then not rideTrack12(Train, Track).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',28).

 /*  reactive_rule([not(loc_at(Train,side1(Track)))],
   	      [not(rideTrack12(Train,Track))]).
 */

 /*  reactive_rule([not(loc_at(Train,side1(Track)))],
   	      [not(rideTrack12(Train,Track))]).
 */


% [train,track,time]
% Happens(RideTrack21(train,track),time) ->
% HoldsAt(At(train,Side2(track)),time).
 %  clausify_pnf=(happens(rideTrack21(Train, Track), Time)->holds_at(at(Train, side2(Track)), Time)).

 /*  holds_at(at(Train, side2(Track)), Time) :-
       happens(rideTrack21(Train, Track), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',33).

 /*  pl=axiom(requires(rideTrack21(Train,Track),When_Time),
         [metreqs(rideTrack21(Train,Track))]).
 */

 /*  metreqs(rideTrack21(Train, Track)) ->
       requires(rideTrack21(Train, Track), When_Time).
 */
if metreqs(rideTrack21(Train, Track))then requires(rideTrack21(Train, Track), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',33).

 /*  reactive_rule([metreqs(rideTrack21(Train,Track))],
   	      [ requires(rideTrack21(Train,Track),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',33).

 /*  reactive_rule([metreqs(rideTrack21(Train,Track))],
   	      [ requires(rideTrack21(Train,Track),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',33).

 /*  fix_axiom_head(When_Time) ->
       [ holds_at(metreqs(rideTrack21(Train, Track)), When_Time),
          (->),
         metreqs(rideTrack21(Train, Track))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',33).

 /*  pl=axiom(metreqs(rideTrack21(Train,Track)),
         [at(Train,side2(Track))]).
 */

 /*  at(Train, side2(Track)) ->
       metreqs(rideTrack21(Train, Track)).
 */
if loc_at(Train, side2(Track))then metreqs(rideTrack21(Train, Track)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',33).

 /*  reactive_rule([loc_at(Train,side2(Track))],
   	      [metreqs(rideTrack21(Train,Track))]).
 */

 /*  reactive_rule([loc_at(Train,side2(Track))],
   	      [metreqs(rideTrack21(Train,Track))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',33).

 /*  not(happens(rideTrack21(Train, Track), When_Time)) :-
       not(holds_at(at(Train, side2(Track)), When_Time)).
 */

 /*  fix_axiom_head(When_Time) ->
       [ not(happens(rideTrack21(Train, Track), When_Time)),
          (->),
         not(rideTrack21(Train, Track))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',33).

 /*  pl=axiom(not(rideTrack21(Train,Track)),
         [not(at(Train,side2(Track)))]).
 */

 /*  not(at(Train, side2(Track))) ->
       not(rideTrack21(Train, Track)).
 */
if not loc_at(Train, side2(Track))then not rideTrack21(Train, Track).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',33).

 /*  reactive_rule([not(loc_at(Train,side2(Track)))],
   	      [not(rideTrack21(Train,Track))]).
 */

 /*  reactive_rule([not(loc_at(Train,side2(Track)))],
   	      [not(rideTrack21(Train,Track))]).
 */


% [train,track,location,time]
% Side2(track)=location ->
% Initiates(RideTrack12(train,track),At(train,location),time).

 /*  pl=axiom(initiates(rideTrack12(Train,Track),
   		at(Train,Location),
   		Time),
         [side2Pred(Track,Location)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',37).

 /*  side2Pred(Track, Location) ->
       initiates(rideTrack12(Train, Track),
                 at(Train, Location),
                 Time).
 */
if side2Pred(Track, Location)then initiates(rideTrack12(Train, Track), loc_at(Train, Location)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',37).

 /*  reactive_rule([side2Pred(Track,Location)],
   	      [ initiates(rideTrack12(Train,Track),
   			  at(loc_at(Train,Location),
   			     Time),
   			  Initiates)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',37).

 /*  reactive_rule([side2Pred(Track,Location)],
   	      [ initiates(rideTrack12(Train,Track),
   			  at(loc_at(Train,Location),
   			     Time),
   			  Initiates)
   	      ]).
 */


% [train,track,location,time]
% Side1(track)=location ->
% Initiates(RideTrack21(train,track),At(train,location),time).

 /*  pl=axiom(initiates(rideTrack21(Train,Track),
   		at(Train,Location),
   		Time),
         [side1Pred(Track,Location)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',41).

 /*  side1Pred(Track, Location) ->
       initiates(rideTrack21(Train, Track),
                 at(Train, Location),
                 Time).
 */
if side1Pred(Track, Location)then initiates(rideTrack21(Train, Track), loc_at(Train, Location)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',41).

 /*  reactive_rule([side1Pred(Track,Location)],
   	      [ initiates(rideTrack21(Train,Track),
   			  at(loc_at(Train,Location),
   			     Time),
   			  Initiates)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',41).

 /*  reactive_rule([side1Pred(Track,Location)],
   	      [ initiates(rideTrack21(Train,Track),
   			  at(loc_at(Train,Location),
   			     Time),
   			  Initiates)
   	      ]).
 */


% [train,track,location,time]
% Side1(track)=location ->
% Terminates(RideTrack12(train,track),At(train,location),time).

 /*  pl=axiom(terminates(rideTrack12(Train,Track),
   		 at(Train,Location),
   		 Time),
         [side1Pred(Track,Location)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',45).

 /*  side1Pred(Track, Location) ->
       terminates(rideTrack12(Train, Track),
                  at(Train, Location),
                  Time).
 */
if side1Pred(Track, Location)then terminates(rideTrack12(Train, Track), loc_at(Train, Location)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',45).

 /*  reactive_rule([side1Pred(Track,Location)],
   	      [ terminates(rideTrack12(Train,Track),
   			   at(loc_at(Train,Location),
   			      Time),
   			   Terminates)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',45).

 /*  reactive_rule([side1Pred(Track,Location)],
   	      [ terminates(rideTrack12(Train,Track),
   			   at(loc_at(Train,Location),
   			      Time),
   			   Terminates)
   	      ]).
 */


% [train,track,location,time]
% Side2(track)=location ->
% Terminates(RideTrack21(train,track),At(train,location),time).

 /*  pl=axiom(terminates(rideTrack21(Train,Track),
   		 at(Train,Location),
   		 Time),
         [side2Pred(Track,Location)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',49).

 /*  side2Pred(Track, Location) ->
       terminates(rideTrack21(Train, Track),
                  at(Train, Location),
                  Time).
 */
if side2Pred(Track, Location)then terminates(rideTrack21(Train, Track), loc_at(Train, Location)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',49).

 /*  reactive_rule([side2Pred(Track,Location)],
   	      [ terminates(rideTrack21(Train,Track),
   			   at(loc_at(Train,Location),
   			      Time),
   			   Terminates)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',49).

 /*  reactive_rule([side2Pred(Track,Location)],
   	      [ terminates(rideTrack21(Train,Track),
   			   at(loc_at(Train,Location),
   			      Time),
   			   Terminates)
   	      ]).
 */


%; DriveStreet

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',54).
% event DriveStreet12(vehicle,street)
 %  blue=event(driveStreet12(vehicle,street)).
 %  event(driveStreet12(vehicle,street)).
events([driveStreet12/2]).
 %  events([driveStreet12/2]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',54).
mpred_prop(driveStreet12(vehicle,street),event).
 %  mpred_prop(driveStreet12(vehicle,street),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',56).
% event DriveStreet21(vehicle,street)
 %  blue=event(driveStreet21(vehicle,street)).
 %  event(driveStreet21(vehicle,street)).
events([driveStreet21/2]).
 %  events([driveStreet21/2]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',56).
mpred_prop(driveStreet21(vehicle,street),event).
 %  mpred_prop(driveStreet21(vehicle,street),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',58).
% [vehicle,street,time]
% Happens(DriveStreet12(vehicle,street),time) ->
% HoldsAt(At(vehicle,Side1(street)),time).
 %  clausify_pnf=(happens(driveStreet12(Vehicle, Street), Time)->holds_at(at(Vehicle, side1(Street)), Time)).

 /*  holds_at(at(Vehicle, side1(Street)), Time) :-
       happens(driveStreet12(Vehicle, Street), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',58).

 /*  pl=axiom(requires(driveStreet12(Vehicle,Street),
   	       When_Time),
         [metreqs(driveStreet12(Vehicle,Street))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',58).

 /*  metreqs(driveStreet12(Vehicle, Street)) ->
       requires(driveStreet12(Vehicle, Street), When_Time).
 */
if metreqs(driveStreet12(Vehicle, Street))then requires(driveStreet12(Vehicle, Street), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',58).

 /*  reactive_rule([metreqs(driveStreet12(Vehicle,Street))],
   	      [ requires(driveStreet12(Vehicle,Street),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',58).

 /*  reactive_rule([metreqs(driveStreet12(Vehicle,Street))],
   	      [ requires(driveStreet12(Vehicle,Street),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',58).

 /*  fix_axiom_head(When_Time) ->
       [ holds_at(metreqs(driveStreet12(Vehicle, Street)),
                  When_Time),
          (->),
         metreqs(driveStreet12(Vehicle, Street))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',58).

 /*  pl=axiom(metreqs(driveStreet12(Vehicle,Street)),
         [at(Vehicle,side1(Street))]).
 */

 /*  at(Vehicle, side1(Street)) ->
       metreqs(driveStreet12(Vehicle, Street)).
 */
if loc_at(Vehicle, side1(Street))then metreqs(driveStreet12(Vehicle, Street)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',58).

 /*  reactive_rule([loc_at(Vehicle,side1(Street))],
   	      [metreqs(driveStreet12(Vehicle,Street))]).
 */

 /*  reactive_rule([loc_at(Vehicle,side1(Street))],
   	      [metreqs(driveStreet12(Vehicle,Street))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',58).

 /*  not(happens(driveStreet12(Vehicle, Street), When_Time)) :-
       not(holds_at(at(Vehicle, side1(Street)), When_Time)).
 */

 /*  fix_axiom_head(When_Time) ->
       [ not(happens(driveStreet12(Vehicle, Street), When_Time)),
          (->),
         not(driveStreet12(Vehicle, Street))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',58).

 /*  pl=axiom(not(driveStreet12(Vehicle,Street)),
         [not(at(Vehicle,side1(Street)))]).
 */

 /*  not(at(Vehicle, side1(Street))) ->
       not(driveStreet12(Vehicle, Street)).
 */
if not loc_at(Vehicle, side1(Street))then not driveStreet12(Vehicle, Street).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',58).

 /*  reactive_rule([not(loc_at(Vehicle,side1(Street)))],
   	      [not(driveStreet12(Vehicle,Street))]).
 */

 /*  reactive_rule([not(loc_at(Vehicle,side1(Street)))],
   	      [not(driveStreet12(Vehicle,Street))]).
 */


% [vehicle,street,time]
% Happens(DriveStreet21(vehicle,street),time) ->
% HoldsAt(At(vehicle,Side2(street)),time).
 %  clausify_pnf=(happens(driveStreet21(Vehicle, Street), Time)->holds_at(at(Vehicle, side2(Street)), Time)).

 /*  holds_at(at(Vehicle, side2(Street)), Time) :-
       happens(driveStreet21(Vehicle, Street), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',63).

 /*  pl=axiom(requires(driveStreet21(Vehicle,Street),
   	       When_Time),
         [metreqs(driveStreet21(Vehicle,Street))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',63).

 /*  metreqs(driveStreet21(Vehicle, Street)) ->
       requires(driveStreet21(Vehicle, Street), When_Time).
 */
if metreqs(driveStreet21(Vehicle, Street))then requires(driveStreet21(Vehicle, Street), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',63).

 /*  reactive_rule([metreqs(driveStreet21(Vehicle,Street))],
   	      [ requires(driveStreet21(Vehicle,Street),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',63).

 /*  reactive_rule([metreqs(driveStreet21(Vehicle,Street))],
   	      [ requires(driveStreet21(Vehicle,Street),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',63).

 /*  fix_axiom_head(When_Time) ->
       [ holds_at(metreqs(driveStreet21(Vehicle, Street)),
                  When_Time),
          (->),
         metreqs(driveStreet21(Vehicle, Street))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',63).

 /*  pl=axiom(metreqs(driveStreet21(Vehicle,Street)),
         [at(Vehicle,side2(Street))]).
 */

 /*  at(Vehicle, side2(Street)) ->
       metreqs(driveStreet21(Vehicle, Street)).
 */
if loc_at(Vehicle, side2(Street))then metreqs(driveStreet21(Vehicle, Street)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',63).

 /*  reactive_rule([loc_at(Vehicle,side2(Street))],
   	      [metreqs(driveStreet21(Vehicle,Street))]).
 */

 /*  reactive_rule([loc_at(Vehicle,side2(Street))],
   	      [metreqs(driveStreet21(Vehicle,Street))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',63).

 /*  not(happens(driveStreet21(Vehicle, Street), When_Time)) :-
       not(holds_at(at(Vehicle, side2(Street)), When_Time)).
 */

 /*  fix_axiom_head(When_Time) ->
       [ not(happens(driveStreet21(Vehicle, Street), When_Time)),
          (->),
         not(driveStreet21(Vehicle, Street))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',63).

 /*  pl=axiom(not(driveStreet21(Vehicle,Street)),
         [not(at(Vehicle,side2(Street)))]).
 */

 /*  not(at(Vehicle, side2(Street))) ->
       not(driveStreet21(Vehicle, Street)).
 */
if not loc_at(Vehicle, side2(Street))then not driveStreet21(Vehicle, Street).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',63).

 /*  reactive_rule([not(loc_at(Vehicle,side2(Street)))],
   	      [not(driveStreet21(Vehicle,Street))]).
 */

 /*  reactive_rule([not(loc_at(Vehicle,side2(Street)))],
   	      [not(driveStreet21(Vehicle,Street))]).
 */


% [vehicle,street,location,time]
% Side2(street)=location ->
% Initiates(DriveStreet12(vehicle,street),At(vehicle,location),time).

 /*  pl=axiom(initiates(driveStreet12(Vehicle,Street),
   		at(Vehicle,Location),
   		Time),
         [side2Pred(Street,Location)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',67).

 /*  side2Pred(Street, Location) ->
       initiates(driveStreet12(Vehicle, Street),
                 at(Vehicle, Location),
                 Time).
 */
if side2Pred(Street, Location)then initiates(driveStreet12(Vehicle, Street), loc_at(Vehicle, Location)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',67).

 /*  reactive_rule([side2Pred(Street,Location)],
   	      [ initiates(driveStreet12(Vehicle,Street),
   			  at(loc_at(Vehicle,Location),
   			     Time),
   			  Initiates)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',67).

 /*  reactive_rule([side2Pred(Street,Location)],
   	      [ initiates(driveStreet12(Vehicle,Street),
   			  at(loc_at(Vehicle,Location),
   			     Time),
   			  Initiates)
   	      ]).
 */


% [vehicle,street,location,time]
% Side1(street)=location ->
% Initiates(DriveStreet21(vehicle,street),At(vehicle,location),time).

 /*  pl=axiom(initiates(driveStreet21(Vehicle,Street),
   		at(Vehicle,Location),
   		Time),
         [side1Pred(Street,Location)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',71).

 /*  side1Pred(Street, Location) ->
       initiates(driveStreet21(Vehicle, Street),
                 at(Vehicle, Location),
                 Time).
 */
if side1Pred(Street, Location)then initiates(driveStreet21(Vehicle, Street), loc_at(Vehicle, Location)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',71).

 /*  reactive_rule([side1Pred(Street,Location)],
   	      [ initiates(driveStreet21(Vehicle,Street),
   			  at(loc_at(Vehicle,Location),
   			     Time),
   			  Initiates)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',71).

 /*  reactive_rule([side1Pred(Street,Location)],
   	      [ initiates(driveStreet21(Vehicle,Street),
   			  at(loc_at(Vehicle,Location),
   			     Time),
   			  Initiates)
   	      ]).
 */


% [vehicle,street,location,time]
% Side1(street)=location ->
% Terminates(DriveStreet12(vehicle,street),At(vehicle,location),time).

 /*  pl=axiom(terminates(driveStreet12(Vehicle,Street),
   		 at(Vehicle,Location),
   		 Time),
         [side1Pred(Street,Location)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',75).

 /*  side1Pred(Street, Location) ->
       terminates(driveStreet12(Vehicle, Street),
                  at(Vehicle, Location),
                  Time).
 */
if side1Pred(Street, Location)then terminates(driveStreet12(Vehicle, Street), loc_at(Vehicle, Location)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',75).

 /*  reactive_rule([side1Pred(Street,Location)],
   	      [ terminates(driveStreet12(Vehicle,Street),
   			   at(loc_at(Vehicle,Location),
   			      Time),
   			   Terminates)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',75).

 /*  reactive_rule([side1Pred(Street,Location)],
   	      [ terminates(driveStreet12(Vehicle,Street),
   			   at(loc_at(Vehicle,Location),
   			      Time),
   			   Terminates)
   	      ]).
 */


% [vehicle,street,location,time]
% Side2(street)=location ->
% Terminates(DriveStreet21(vehicle,street),At(vehicle,location),time).

 /*  pl=axiom(terminates(driveStreet21(Vehicle,Street),
   		 at(Vehicle,Location),
   		 Time),
         [side2Pred(Street,Location)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',79).

 /*  side2Pred(Street, Location) ->
       terminates(driveStreet21(Vehicle, Street),
                  at(Vehicle, Location),
                  Time).
 */
if side2Pred(Street, Location)then terminates(driveStreet21(Vehicle, Street), loc_at(Vehicle, Location)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',79).

 /*  reactive_rule([side2Pred(Street,Location)],
   	      [ terminates(driveStreet21(Vehicle,Street),
   			   at(loc_at(Vehicle,Location),
   			      Time),
   			   Terminates)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',79).

 /*  reactive_rule([side2Pred(Street,Location)],
   	      [ terminates(driveStreet21(Vehicle,Street),
   			   at(loc_at(Vehicle,Location),
   			      Time),
   			   Terminates)
   	      ]).
 */


%; Pulling

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',84).
% event PointToward(agent,horse,street)
 %  blue=event(pointToward(agent,horse,street)).
 %  event(pointToward(agent,horse,street)).
actions([pointToward/3]).
 %  actions([pointToward/3]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',84).
mpred_prop(pointToward(agent,horse,street),event).
 %  mpred_prop(pointToward(agent,horse,street),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',86).
% fluent PointedToward(horse,street)
 %  blue=fluent(pointedToward(horse,street)).
 %  fluent(pointedToward(horse,street)).
fluents([pointedToward/2]).
 %  fluents([pointedToward/2]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',86).
mpred_prop(pointedToward(horse,street),fluent).
 %  mpred_prop(pointedToward(horse,street),fluent).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',88).
% [horse,street1,street2,time]
% HoldsAt(PointedToward(horse,street1),time) &
% HoldsAt(PointedToward(horse,street2),time) ->
% street1=street2.
 %  clausify_pnf=(holds_at(pointedToward(Horse, Street1), Time), holds_at(pointedToward(Horse, Street2), Time)->equals(Street1, Street2)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',88).

 /*  not(holds_at(pointedToward(Horse, Street1), Time)) :-
       holds_at(pointedToward(Horse, Street2), Time),
       not(equals(Street1, Street2)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',88).

 /*  pl=axiom(not(pointedToward(Horse,Street1)),
         [ pointedToward(Horse,Street2),
   	not(equals(Street1,Street2))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',88).

 /*  (   pointedToward(Horse, Street2),
       not(equals(Street1, Street2))
   ->  not(pointedToward(Horse, Street1))
   ).
 */
if pointedToward(Horse, Street2), not equals(Street1, Street2)then not pointedToward(Horse, Street1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',88).

 /*  reactive_rule([ pointedToward(Horse,Street2),
   		not(equals(Street1,Street2))
   	      ],
   	      [not(pointedToward(Horse,Street1))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',88).

 /*  reactive_rule([ pointedToward(Horse,Street2),
   		not(equals(Street1,Street2))
   	      ],
   	      [not(pointedToward(Horse,Street1))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',88).

 /*  not(holds_at(pointedToward(Horse, Street2), Time)) :-
       holds_at(pointedToward(Horse, Street1), Time),
       not(equals(Street1, Street2)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',88).

 /*  pl=axiom(not(pointedToward(Horse,Street2)),
         [ pointedToward(Horse,Street1),
   	not(equals(Street2,Street1))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',88).

 /*  (   pointedToward(Horse, Street1),
       not(equals(Street2, Street1))
   ->  not(pointedToward(Horse, Street2))
   ).
 */
if pointedToward(Horse, Street1), not equals(Street2, Street1)then not pointedToward(Horse, Street2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',88).

 /*  reactive_rule([ pointedToward(Horse,Street1),
   		not(equals(Street2,Street1))
   	      ],
   	      [not(pointedToward(Horse,Street2))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',88).

 /*  reactive_rule([ pointedToward(Horse,Street1),
   		not(equals(Street2,Street1))
   	      ],
   	      [not(pointedToward(Horse,Street2))]).
 */


% [agent,horse,street,time]
% Initiates(PointToward(agent,horse,street),
%           PointedToward(horse,street),
%           time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',94).

 /*  pl=axiom(initiates(pointToward(Agent,Horse,Street),
   		pointedToward(Horse,Street),
   		Time),
         []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',94).

 /*  initiates(pointToward(Agent,Horse,Street),
   	  pointedToward(Horse,Street),
   	  Time).
 */
pointToward(Agent, Horse, Street)initiates pointedToward(Horse, Street).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',94).

 /*  initiated(happens(pointToward(Agent,Horse,Street),
   		  Time_From,
   		  Time_Until),
   	  pointedToward(Horse,Street),
   	  []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',94).

 /*  initiated(happens(pointToward(Agent,Horse,Street),
   		  Time_From,
   		  Time_Until),
   	  pointedToward(Horse,Street),
   	  []).
 */


% [agent,horse,street1,street2,time]
% HoldsAt(PointedToward(horse,street1),time) ->
% Terminates(PointToward(agent,horse,street2),
%            PointedToward(horse,street1),
%            time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',99).

 /*  pl=axiom(terminates(pointToward(Agent,Horse,Street2),
   		 pointedToward(Horse,Street1),
   		 Time),
         [pointedToward(Horse,Street1)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',99).

 /*  pointedToward(Horse, Street1) ->
       terminates(pointToward(Agent, Horse, Street2),
                  pointedToward(Horse, Street1),
                  Time).
 */
if pointedToward(Horse, Street1)then terminates(pointToward(Agent, Horse, Street2), pointedToward(Horse, Street1)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',99).

 /*  reactive_rule([ holds(pointedToward(Horse,Street1),
   		      Holds)
   	      ],
   	      [ terminates(pointToward(Agent,
   				       Horse,
   				       Street2),
   			   at(pointedToward(Horse,Street1),
   			      Time),
   			   Terminates)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',99).

 /*  reactive_rule([ holds(pointedToward(Horse,Street1),
   		      Holds)
   	      ],
   	      [ terminates(pointToward(Agent,
   				       Horse,
   				       Street2),
   			   at(pointedToward(Horse,Street1),
   			      Time),
   			   Terminates)
   	      ]).
 */


% [horse,vehicle,street,time]
% Terminates(PullStreet12(horse,vehicle,street),
%            PointedToward(horse,street),
%            time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',105).

 /*  pl=axiom(terminates(pullStreet12(Horse,Vehicle,Street),
   		 pointedToward(Horse,Street),
   		 Time),
         []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',105).

 /*  terminates(pullStreet12(Horse,Vehicle,Street),
   	   pointedToward(Horse,Street),
   	   Time).
 */
pullStreet12(Horse, Vehicle, Street)terminates pointedToward(Horse, Street).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',105).

 /*  terminated(happens(pullStreet12(Horse,Vehicle,Street),
   		   Time_From,
   		   Time_Until),
   	   pointedToward(Horse,Street),
   	   []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',105).

 /*  terminated(happens(pullStreet12(Horse,Vehicle,Street),
   		   Time_From,
   		   Time_Until),
   	   pointedToward(Horse,Street),
   	   []).
 */


% [horse,vehicle,street,time]
% Terminates(PullStreet21(horse,vehicle,street),
%            PointedToward(horse,street),
%            time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',110).

 /*  pl=axiom(terminates(pullStreet21(Horse,Vehicle,Street),
   		 pointedToward(Horse,Street),
   		 Time),
         []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',110).

 /*  terminates(pullStreet21(Horse,Vehicle,Street),
   	   pointedToward(Horse,Street),
   	   Time).
 */
pullStreet21(Horse, Vehicle, Street)terminates pointedToward(Horse, Street).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',110).

 /*  terminated(happens(pullStreet21(Horse,Vehicle,Street),
   		   Time_From,
   		   Time_Until),
   	   pointedToward(Horse,Street),
   	   []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',110).

 /*  terminated(happens(pullStreet21(Horse,Vehicle,Street),
   		   Time_From,
   		   Time_Until),
   	   pointedToward(Horse,Street),
   	   []).
 */


% [horse,street,time]
% HoldsAt(PointedToward(horse,street),time) ->
% HoldsAt(NearPortal(horse,street),time).
 %  clausify_pnf=(holds_at(pointedToward(Horse, Street), Time)->holds_at(nearPortal(Horse, Street), Time)).

 /*  holds_at(nearPortal(Horse, Street), Time) :-
       holds_at(pointedToward(Horse, Street), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',115).

 /*  fix_axiom_head(Time) ->
       [ holds_at(nearPortal(Horse, Street), Time),
          (->),
         nearPortal(Horse, Street)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',115).

 /*  pl=axiom(nearPortal(Horse,Street),
         [pointedToward(Horse,Street)]).
 */

 /*  pointedToward(Horse, Street) ->
       nearPortal(Horse, Street).
 */
if pointedToward(Horse, Street)then nearPortal(Horse, Street).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',115).

 /*  reactive_rule([ holds(pointedToward(Horse,Street),
   		      Holds)
   	      ],
   	      [nearPortal(Horse,Street)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',115).

 /*  reactive_rule([ holds(pointedToward(Horse,Street),
   		      Holds)
   	      ],
   	      [nearPortal(Horse,Street)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',115).

 /*  not(holds_at(pointedToward(Horse, Street), Time)) :-
       not(holds_at(nearPortal(Horse, Street), Time)).
 */

 /*  pl=axiom(not(pointedToward(Horse,Street)),
         [not(nearPortal(Horse,Street))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',115).

 /*  not(nearPortal(Horse, Street)) ->
       not(pointedToward(Horse, Street)).
 */
if not nearPortal(Horse, Street)then not pointedToward(Horse, Street).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',115).

 /*  reactive_rule([not(nearPortal(Horse,Street))],
   	      [ holds(not(pointedToward(Horse,Street)),
   		      Holds4)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',115).

 /*  reactive_rule([not(nearPortal(Horse,Street))],
   	      [ holds(not(pointedToward(Horse,Street)),
   		      Holds4)
   	      ]).
 */

% event Lash(agent,horse)
 %  blue=event(lash(agent,horse)).
 %  event(lash(agent,horse)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',117).
actions([lash/2]).
 %  actions([lash/2]).
mpred_prop(lash(agent,horse),event).
 %  mpred_prop(lash(agent,horse),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',120).
% fluent HitchedTo(horse,vehicle)
 %  blue=fluent(hitchedTo(horse,vehicle)).
 %  fluent(hitchedTo(horse,vehicle)).
fluents([hitchedTo/2]).
 %  fluents([hitchedTo/2]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',120).
mpred_prop(hitchedTo(horse,vehicle),fluent).
 %  mpred_prop(hitchedTo(horse,vehicle),fluent).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',122).
% [horse,vehicle,location,time]
% HoldsAt(HitchedTo(horse,vehicle),time) &
% HoldsAt(At(vehicle,location),time) ->
% HoldsAt(At(horse,location),time).
 %  clausify_pnf=(holds_at(hitchedTo(Horse, Vehicle), Time), holds_at(at(Vehicle, Location), Time)->holds_at(at(Horse, Location), Time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',122).

 /*  holds_at(at(Horse, Location), Time) :-
       holds_at(hitchedTo(Horse, Vehicle), Time),
       holds_at(at(Vehicle, Location), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',122).

 /*  fix_axiom_head(Time) ->
       [ holds_at(at(Horse, Location), Time),
          (->),
         at(Horse, Location)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',122).

 /*  pl=axiom(at(Horse,Location),
         [ hitchedTo(Horse,Vehicle),
   	at(Vehicle,Location)
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',122).

 /*  (   hitchedTo(Horse, Vehicle),
       at(Vehicle, Location)
   ->  at(Horse, Location)
   ).
 */
if hitchedTo(Horse, Vehicle), loc_at(Vehicle, Location)then loc_at(Horse, Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',122).

 /*  reactive_rule([ hitchedTo(Horse,Vehicle),
   		loc_at(Vehicle,Location)
   	      ],
   	      [loc_at(Horse,Location)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',122).

 /*  reactive_rule([ hitchedTo(Horse,Vehicle),
   		loc_at(Vehicle,Location)
   	      ],
   	      [loc_at(Horse,Location)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',122).

 /*  not(holds_at(hitchedTo(Horse, Vehicle), Time)) :-
       holds_at(at(Vehicle, Location), Time),
       not(holds_at(at(Horse, Location), Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',122).

 /*  pl=axiom(not(hitchedTo(Horse,Vehicle)),
         [ at(Vehicle,Location),
   	not(at(Horse,Location))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',122).

 /*  (   at(Vehicle, Location),
       not(at(Horse, Location))
   ->  not(hitchedTo(Horse, Vehicle))
   ).
 */
if loc_at(Vehicle, Location), not loc_at(Horse, Location)then not hitchedTo(Horse, Vehicle).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',122).

 /*  reactive_rule([ loc_at(Vehicle,Location),
   		not(loc_at(Horse,Location))
   	      ],
   	      [not(hitchedTo(Horse,Vehicle))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',122).

 /*  reactive_rule([ loc_at(Vehicle,Location),
   		not(loc_at(Horse,Location))
   	      ],
   	      [not(hitchedTo(Horse,Vehicle))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',122).

 /*  not(holds_at(at(Vehicle, Location), Time)) :-
       holds_at(hitchedTo(Horse, Vehicle), Time),
       not(holds_at(at(Horse, Location), Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',122).

 /*  pl=axiom(not(at(Vehicle,Location)),
         [ hitchedTo(Horse,Vehicle),
   	not(at(Horse,Location))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',122).

 /*  (   hitchedTo(Horse, Vehicle),
       not(at(Horse, Location))
   ->  not(at(Vehicle, Location))
   ).
 */
if hitchedTo(Horse, Vehicle), not loc_at(Horse, Location)then not loc_at(Vehicle, Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',122).

 /*  reactive_rule([ hitchedTo(Horse,Vehicle),
   		not(loc_at(Horse,Location))
   	      ],
   	      [not(loc_at(Vehicle,Location))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',122).

 /*  reactive_rule([ hitchedTo(Horse,Vehicle),
   		not(loc_at(Horse,Location))
   	      ],
   	      [not(loc_at(Vehicle,Location))]).
 */


% [agent,horse,vehicle,street,time]
% Happens(Lash(agent,horse),time) &
% HoldsAt(PointedToward(horse,street),time) &
% HoldsAt(HitchedTo(horse,vehicle),time) &
% HoldsAt(At(horse,Side1(street)),time) ->
% Happens(PullStreet12(horse,vehicle,street),time).
 %  clausify_pnf=(happens(lash(Agent, Horse), Time), holds_at(pointedToward(Horse, Street), Time), holds_at(hitchedTo(Horse, Vehicle), Time), holds_at(at(Horse, side1(Street)), Time)->happens(pullStreet12(Horse, Vehicle, Street), Time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',128).

 /*  happens(pullStreet12(Horse, Vehicle, Street), Time) :-
       happens(lash(Agent, Horse), Time),
       holds_at(pointedToward(Horse, Street), Time),
       holds_at(hitchedTo(Horse, Vehicle), Time),
       holds_at(at(Horse, side1(Street)), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',128).

 /*  fix_axiom_head(Time) ->
       [ happens(pullStreet12(Horse, Vehicle, Street), Time),
          (->),
         pullStreet12(Horse, Vehicle, Street)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',128).

 /*  pl=axiom(pullStreet12(Horse,Vehicle,Street),
         [ lash(Agent,Horse),
   	pointedToward(Horse,Street),
   	hitchedTo(Horse,Vehicle),
   	at(Horse,side1(Street))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',128).

 /*  (   lash(Agent, Horse),
       pointedToward(Horse, Street),
       hitchedTo(Horse, Vehicle),
       at(Horse, side1(Street))
   ->  pullStreet12(Horse, Vehicle, Street)
   ).
 */
if lash(Agent, Horse), pointedToward(Horse, Street), hitchedTo(Horse, Vehicle), loc_at(Horse, side1(Street))then pullStreet12(Horse, Vehicle, Street).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',128).

 /*  reactive_rule([ lash(Agent,Horse),
   		holds(pointedToward(Horse,Street),
   		      Holds),
   		hitchedTo(Horse,Vehicle),
   		loc_at(Horse,side1(Street))
   	      ],
   	      [ happens(pullStreet12(Horse,
   				     Vehicle,
   				     Street),
   			Time_From,
   			Time_Until)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',128).

 /*  reactive_rule([ lash(Agent,Horse),
   		holds(pointedToward(Horse,Street),
   		      Holds),
   		hitchedTo(Horse,Vehicle),
   		loc_at(Horse,side1(Street))
   	      ],
   	      [ happens(pullStreet12(Horse,
   				     Vehicle,
   				     Street),
   			Time_From,
   			Time_Until)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',128).

 /*  not(happens(lash(Agent, Horse), Time)) :-
       holds_at(pointedToward(Horse, Street), Time),
       holds_at(hitchedTo(Horse, Vehicle), Time),
       holds_at(at(Horse, side1(Street)), Time),
       not(happens(pullStreet12(Horse, Vehicle, Street),
                   Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',128).

 /*  fix_axiom_head(Time) ->
       [ not(happens(lash(Agent, Horse), Time)),
          (->),
         not(lash(Agent, Horse))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',128).

 /*  pl=axiom(not(lash(Agent,Horse)),
         [ pointedToward(Horse,Street),
   	hitchedTo(Horse,Vehicle),
   	at(Horse,side1(Street)),
   	not(pullStreet12(Horse,Vehicle,Street))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',128).

 /*  (   pointedToward(Horse, Street),
       hitchedTo(Horse, Vehicle),
       at(Horse, side1(Street)),
       not(pullStreet12(Horse, Vehicle, Street))
   ->  not(lash(Agent, Horse))
   ).
 */
if pointedToward(Horse, Street), hitchedTo(Horse, Vehicle), loc_at(Horse, side1(Street)), not pullStreet12(Horse, Vehicle, Street)then not lash(Agent, Horse).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',128).

 /*  reactive_rule([ holds(pointedToward(Horse,Street),
   		      Holds8),
   		hitchedTo(Horse,Vehicle),
   		loc_at(Horse,side1(Street)),
   		not(pullStreet12(Horse,
   				 Vehicle,
   				 Street))
   	      ],
   	      [not(lash(Agent,Horse))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',128).

 /*  reactive_rule([ holds(pointedToward(Horse,Street),
   		      Holds8),
   		hitchedTo(Horse,Vehicle),
   		loc_at(Horse,side1(Street)),
   		not(pullStreet12(Horse,
   				 Vehicle,
   				 Street))
   	      ],
   	      [not(lash(Agent,Horse))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',128).

 /*  not(holds_at(pointedToward(Horse, Street), Time)) :-
       holds_at(hitchedTo(Horse, Vehicle), Time),
       holds_at(at(Horse, side1(Street)), Time),
       happens(lash(Agent, Horse), Time),
       not(happens(pullStreet12(Horse, Vehicle, Street),
                   Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',128).

 /*  pl=axiom(not(pointedToward(Horse,Street)),
         [ hitchedTo(Horse,Vehicle),
   	at(Horse,side1(Street)),
   	lash(Agent,Horse),
   	not(pullStreet12(Horse,Vehicle,Street))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',128).

 /*  (   hitchedTo(Horse, Vehicle),
       at(Horse, side1(Street)),
       lash(Agent, Horse),
       not(pullStreet12(Horse, Vehicle, Street))
   ->  not(pointedToward(Horse, Street))
   ).
 */
if hitchedTo(Horse, Vehicle), loc_at(Horse, side1(Street)), lash(Agent, Horse), not pullStreet12(Horse, Vehicle, Street)then not pointedToward(Horse, Street).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',128).

 /*  reactive_rule([ hitchedTo(Horse,Vehicle),
   		loc_at(Horse,side1(Street)),
   		lash(Agent,Horse),
   		not(pullStreet12(Horse,
   				 Vehicle,
   				 Street))
   	      ],
   	      [ holds(not(pointedToward(Horse,Street)),
   		      Holds9)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',128).

 /*  reactive_rule([ hitchedTo(Horse,Vehicle),
   		loc_at(Horse,side1(Street)),
   		lash(Agent,Horse),
   		not(pullStreet12(Horse,
   				 Vehicle,
   				 Street))
   	      ],
   	      [ holds(not(pointedToward(Horse,Street)),
   		      Holds9)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',128).

 /*  not(holds_at(hitchedTo(Horse, Vehicle), Time)) :-
       holds_at(at(Horse, side1(Street)), Time),
       holds_at(pointedToward(Horse, Street), Time),
       happens(lash(Agent, Horse), Time),
       not(happens(pullStreet12(Horse, Vehicle, Street),
                   Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',128).

 /*  pl=axiom(not(hitchedTo(Horse,Vehicle)),
         [ at(Horse,side1(Street)),
   	pointedToward(Horse,Street),
   	lash(Agent,Horse),
   	not(pullStreet12(Horse,Vehicle,Street))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',128).

 /*  (   at(Horse, side1(Street)),
       pointedToward(Horse, Street),
       lash(Agent, Horse),
       not(pullStreet12(Horse, Vehicle, Street))
   ->  not(hitchedTo(Horse, Vehicle))
   ).
 */
if loc_at(Horse, side1(Street)), pointedToward(Horse, Street), lash(Agent, Horse), not pullStreet12(Horse, Vehicle, Street)then not hitchedTo(Horse, Vehicle).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',128).

 /*  reactive_rule([ loc_at(Horse,side1(Street)),
   		holds(pointedToward(Horse,Street),
   		      Holds10),
   		lash(Agent,Horse),
   		not(pullStreet12(Horse,
   				 Vehicle,
   				 Street))
   	      ],
   	      [not(hitchedTo(Horse,Vehicle))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',128).

 /*  reactive_rule([ loc_at(Horse,side1(Street)),
   		holds(pointedToward(Horse,Street),
   		      Holds10),
   		lash(Agent,Horse),
   		not(pullStreet12(Horse,
   				 Vehicle,
   				 Street))
   	      ],
   	      [not(hitchedTo(Horse,Vehicle))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',128).

 /*  not(holds_at(at(Horse, side1(Street)), Time)) :-
       holds_at(hitchedTo(Horse, Vehicle), Time),
       holds_at(pointedToward(Horse, Street), Time),
       happens(lash(Agent, Horse), Time),
       not(happens(pullStreet12(Horse, Vehicle, Street),
                   Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',128).

 /*  pl=axiom(not(at(Horse,side1(Street))),
         [ hitchedTo(Horse,Vehicle),
   	pointedToward(Horse,Street),
   	lash(Agent,Horse),
   	not(pullStreet12(Horse,Vehicle,Street))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',128).

 /*  (   hitchedTo(Horse, Vehicle),
       pointedToward(Horse, Street),
       lash(Agent, Horse),
       not(pullStreet12(Horse, Vehicle, Street))
   ->  not(at(Horse, side1(Street)))
   ).
 */
if hitchedTo(Horse, Vehicle), pointedToward(Horse, Street), lash(Agent, Horse), not pullStreet12(Horse, Vehicle, Street)then not loc_at(Horse, side1(Street)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',128).

 /*  reactive_rule([ hitchedTo(Horse,Vehicle),
   		holds(pointedToward(Horse,Street),
   		      Holds11),
   		lash(Agent,Horse),
   		not(pullStreet12(Horse,
   				 Vehicle,
   				 Street))
   	      ],
   	      [not(loc_at(Horse,side1(Street)))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',128).

 /*  reactive_rule([ hitchedTo(Horse,Vehicle),
   		holds(pointedToward(Horse,Street),
   		      Holds11),
   		lash(Agent,Horse),
   		not(pullStreet12(Horse,
   				 Vehicle,
   				 Street))
   	      ],
   	      [not(loc_at(Horse,side1(Street)))]).
 */


% [agent,horse,vehicle,street,time]
% Happens(Lash(agent,horse),time) &
% HoldsAt(PointedToward(horse,street),time) &
% HoldsAt(HitchedTo(horse,vehicle),time) &
% HoldsAt(At(horse,Side2(street)),time) ->
% Happens(PullStreet21(horse,vehicle,street),time).
 %  clausify_pnf=(happens(lash(Agent, Horse), Time), holds_at(pointedToward(Horse, Street), Time), holds_at(hitchedTo(Horse, Vehicle), Time), holds_at(at(Horse, side2(Street)), Time)->happens(pullStreet21(Horse, Vehicle, Street), Time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',135).

 /*  happens(pullStreet21(Horse, Vehicle, Street), Time) :-
       happens(lash(Agent, Horse), Time),
       holds_at(pointedToward(Horse, Street), Time),
       holds_at(hitchedTo(Horse, Vehicle), Time),
       holds_at(at(Horse, side2(Street)), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',135).

 /*  fix_axiom_head(Time) ->
       [ happens(pullStreet21(Horse, Vehicle, Street), Time),
          (->),
         pullStreet21(Horse, Vehicle, Street)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',135).

 /*  pl=axiom(pullStreet21(Horse,Vehicle,Street),
         [ lash(Agent,Horse),
   	pointedToward(Horse,Street),
   	hitchedTo(Horse,Vehicle),
   	at(Horse,side2(Street))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',135).

 /*  (   lash(Agent, Horse),
       pointedToward(Horse, Street),
       hitchedTo(Horse, Vehicle),
       at(Horse, side2(Street))
   ->  pullStreet21(Horse, Vehicle, Street)
   ).
 */
if lash(Agent, Horse), pointedToward(Horse, Street), hitchedTo(Horse, Vehicle), loc_at(Horse, side2(Street))then pullStreet21(Horse, Vehicle, Street).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',135).

 /*  reactive_rule([ lash(Agent,Horse),
   		holds(pointedToward(Horse,Street),
   		      Holds),
   		hitchedTo(Horse,Vehicle),
   		loc_at(Horse,side2(Street))
   	      ],
   	      [ happens(pullStreet21(Horse,
   				     Vehicle,
   				     Street),
   			Time_From,
   			Time_Until)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',135).

 /*  reactive_rule([ lash(Agent,Horse),
   		holds(pointedToward(Horse,Street),
   		      Holds),
   		hitchedTo(Horse,Vehicle),
   		loc_at(Horse,side2(Street))
   	      ],
   	      [ happens(pullStreet21(Horse,
   				     Vehicle,
   				     Street),
   			Time_From,
   			Time_Until)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',135).

 /*  not(happens(lash(Agent, Horse), Time)) :-
       holds_at(pointedToward(Horse, Street), Time),
       holds_at(hitchedTo(Horse, Vehicle), Time),
       holds_at(at(Horse, side2(Street)), Time),
       not(happens(pullStreet21(Horse, Vehicle, Street),
                   Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',135).

 /*  fix_axiom_head(Time) ->
       [ not(happens(lash(Agent, Horse), Time)),
          (->),
         not(lash(Agent, Horse))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',135).

 /*  pl=axiom(not(lash(Agent,Horse)),
         [ pointedToward(Horse,Street),
   	hitchedTo(Horse,Vehicle),
   	at(Horse,side2(Street)),
   	not(pullStreet21(Horse,Vehicle,Street))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',135).

 /*  (   pointedToward(Horse, Street),
       hitchedTo(Horse, Vehicle),
       at(Horse, side2(Street)),
       not(pullStreet21(Horse, Vehicle, Street))
   ->  not(lash(Agent, Horse))
   ).
 */
if pointedToward(Horse, Street), hitchedTo(Horse, Vehicle), loc_at(Horse, side2(Street)), not pullStreet21(Horse, Vehicle, Street)then not lash(Agent, Horse).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',135).

 /*  reactive_rule([ holds(pointedToward(Horse,Street),
   		      Holds8),
   		hitchedTo(Horse,Vehicle),
   		loc_at(Horse,side2(Street)),
   		not(pullStreet21(Horse,
   				 Vehicle,
   				 Street))
   	      ],
   	      [not(lash(Agent,Horse))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',135).

 /*  reactive_rule([ holds(pointedToward(Horse,Street),
   		      Holds8),
   		hitchedTo(Horse,Vehicle),
   		loc_at(Horse,side2(Street)),
   		not(pullStreet21(Horse,
   				 Vehicle,
   				 Street))
   	      ],
   	      [not(lash(Agent,Horse))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',135).

 /*  not(holds_at(pointedToward(Horse, Street), Time)) :-
       holds_at(hitchedTo(Horse, Vehicle), Time),
       holds_at(at(Horse, side2(Street)), Time),
       happens(lash(Agent, Horse), Time),
       not(happens(pullStreet21(Horse, Vehicle, Street),
                   Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',135).

 /*  pl=axiom(not(pointedToward(Horse,Street)),
         [ hitchedTo(Horse,Vehicle),
   	at(Horse,side2(Street)),
   	lash(Agent,Horse),
   	not(pullStreet21(Horse,Vehicle,Street))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',135).

 /*  (   hitchedTo(Horse, Vehicle),
       at(Horse, side2(Street)),
       lash(Agent, Horse),
       not(pullStreet21(Horse, Vehicle, Street))
   ->  not(pointedToward(Horse, Street))
   ).
 */
if hitchedTo(Horse, Vehicle), loc_at(Horse, side2(Street)), lash(Agent, Horse), not pullStreet21(Horse, Vehicle, Street)then not pointedToward(Horse, Street).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',135).

 /*  reactive_rule([ hitchedTo(Horse,Vehicle),
   		loc_at(Horse,side2(Street)),
   		lash(Agent,Horse),
   		not(pullStreet21(Horse,
   				 Vehicle,
   				 Street))
   	      ],
   	      [ holds(not(pointedToward(Horse,Street)),
   		      Holds9)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',135).

 /*  reactive_rule([ hitchedTo(Horse,Vehicle),
   		loc_at(Horse,side2(Street)),
   		lash(Agent,Horse),
   		not(pullStreet21(Horse,
   				 Vehicle,
   				 Street))
   	      ],
   	      [ holds(not(pointedToward(Horse,Street)),
   		      Holds9)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',135).

 /*  not(holds_at(hitchedTo(Horse, Vehicle), Time)) :-
       holds_at(at(Horse, side2(Street)), Time),
       holds_at(pointedToward(Horse, Street), Time),
       happens(lash(Agent, Horse), Time),
       not(happens(pullStreet21(Horse, Vehicle, Street),
                   Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',135).

 /*  pl=axiom(not(hitchedTo(Horse,Vehicle)),
         [ at(Horse,side2(Street)),
   	pointedToward(Horse,Street),
   	lash(Agent,Horse),
   	not(pullStreet21(Horse,Vehicle,Street))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',135).

 /*  (   at(Horse, side2(Street)),
       pointedToward(Horse, Street),
       lash(Agent, Horse),
       not(pullStreet21(Horse, Vehicle, Street))
   ->  not(hitchedTo(Horse, Vehicle))
   ).
 */
if loc_at(Horse, side2(Street)), pointedToward(Horse, Street), lash(Agent, Horse), not pullStreet21(Horse, Vehicle, Street)then not hitchedTo(Horse, Vehicle).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',135).

 /*  reactive_rule([ loc_at(Horse,side2(Street)),
   		holds(pointedToward(Horse,Street),
   		      Holds10),
   		lash(Agent,Horse),
   		not(pullStreet21(Horse,
   				 Vehicle,
   				 Street))
   	      ],
   	      [not(hitchedTo(Horse,Vehicle))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',135).

 /*  reactive_rule([ loc_at(Horse,side2(Street)),
   		holds(pointedToward(Horse,Street),
   		      Holds10),
   		lash(Agent,Horse),
   		not(pullStreet21(Horse,
   				 Vehicle,
   				 Street))
   	      ],
   	      [not(hitchedTo(Horse,Vehicle))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',135).

 /*  not(holds_at(at(Horse, side2(Street)), Time)) :-
       holds_at(hitchedTo(Horse, Vehicle), Time),
       holds_at(pointedToward(Horse, Street), Time),
       happens(lash(Agent, Horse), Time),
       not(happens(pullStreet21(Horse, Vehicle, Street),
                   Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',135).

 /*  pl=axiom(not(at(Horse,side2(Street))),
         [ hitchedTo(Horse,Vehicle),
   	pointedToward(Horse,Street),
   	lash(Agent,Horse),
   	not(pullStreet21(Horse,Vehicle,Street))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',135).

 /*  (   hitchedTo(Horse, Vehicle),
       pointedToward(Horse, Street),
       lash(Agent, Horse),
       not(pullStreet21(Horse, Vehicle, Street))
   ->  not(at(Horse, side2(Street)))
   ).
 */
if hitchedTo(Horse, Vehicle), pointedToward(Horse, Street), lash(Agent, Horse), not pullStreet21(Horse, Vehicle, Street)then not loc_at(Horse, side2(Street)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',135).

 /*  reactive_rule([ hitchedTo(Horse,Vehicle),
   		holds(pointedToward(Horse,Street),
   		      Holds11),
   		lash(Agent,Horse),
   		not(pullStreet21(Horse,
   				 Vehicle,
   				 Street))
   	      ],
   	      [not(loc_at(Horse,side2(Street)))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',135).

 /*  reactive_rule([ hitchedTo(Horse,Vehicle),
   		holds(pointedToward(Horse,Street),
   		      Holds11),
   		lash(Agent,Horse),
   		not(pullStreet21(Horse,
   				 Vehicle,
   				 Street))
   	      ],
   	      [not(loc_at(Horse,side2(Street)))]).
 */

% event PullStreet12(horse,vehicle,street)
 %  blue=event(pullStreet12(horse,vehicle,street)).
 %  event(pullStreet12(horse,vehicle,street)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',140).
events([pullStreet12/3]).
 %  events([pullStreet12/3]).
mpred_prop(pullStreet12(horse,vehicle,street),event).
 %  mpred_prop(pullStreet12(horse,vehicle,street),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',143).
% event PullStreet21(horse,vehicle,street)
 %  blue=event(pullStreet21(horse,vehicle,street)).
 %  event(pullStreet21(horse,vehicle,street)).
events([pullStreet21/3]).
 %  events([pullStreet21/3]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',143).
mpred_prop(pullStreet21(horse,vehicle,street),event).
 %  mpred_prop(pullStreet21(horse,vehicle,street),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',145).
% [horse,vehicle,street,time]
% Happens(PullStreet12(horse,vehicle,street),time) ->
% Happens(DriveStreet12(vehicle,street),time).
 %  clausify_pnf=(happens(pullStreet12(Horse, Vehicle, Street), Time)->happens(driveStreet12(Vehicle, Street), Time)).

 /*  happens(driveStreet12(Vehicle, Street), Time) :-
       happens(pullStreet12(Horse, Vehicle, Street), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',145).

 /*  fix_axiom_head(Time) ->
       [ happens(driveStreet12(Vehicle, Street), Time),
          (->),
         driveStreet12(Vehicle, Street)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',145).

 /*  pl=axiom(driveStreet12(Vehicle,Street),
         [pullStreet12(Horse,Vehicle,Street)]).
 */

 /*  pullStreet12(Horse, Vehicle, Street) ->
       driveStreet12(Vehicle, Street).
 */
if pullStreet12(Horse, Vehicle, Street)then driveStreet12(Vehicle, Street).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',145).

 /*  reactive_rule([ happens(pullStreet12(Horse,
   				     Vehicle,
   				     Street),
   			Time_From,
   			Time_Until)
   	      ],
   	      [driveStreet12(Vehicle,Street)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',145).

 /*  reactive_rule([ happens(pullStreet12(Horse,
   				     Vehicle,
   				     Street),
   			Time_From,
   			Time_Until)
   	      ],
   	      [driveStreet12(Vehicle,Street)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',145).

 /*  not(happens(pullStreet12(Horse, Vehicle, Street), Time)) :-
       not(happens(driveStreet12(Vehicle, Street), Time)).
 */

 /*  fix_axiom_head(Time) ->
       [ not(happens(pullStreet12(Horse, Vehicle, Street),
                     Time)),
          (->),
         not(pullStreet12(Horse, Vehicle, Street))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',145).

 /*  pl=axiom(not(pullStreet12(Horse,Vehicle,Street)),
         [not(driveStreet12(Vehicle,Street))]).
 */

 /*  not(driveStreet12(Vehicle, Street)) ->
       not(pullStreet12(Horse, Vehicle, Street)).
 */
if not driveStreet12(Vehicle, Street)then not pullStreet12(Horse, Vehicle, Street).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',145).

 /*  reactive_rule([not(driveStreet12(Vehicle,Street))],
   	      [ not(pullStreet12(Horse,
   				 Vehicle,
   				 Street))
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',145).

 /*  reactive_rule([not(driveStreet12(Vehicle,Street))],
   	      [ not(pullStreet12(Horse,
   				 Vehicle,
   				 Street))
   	      ]).
 */


% [horse,vehicle,street,time]
% Happens(PullStreet21(horse,vehicle,street),time) ->
% Happens(DriveStreet21(vehicle,street),time).
 %  clausify_pnf=(happens(pullStreet21(Horse, Vehicle, Street), Time)->happens(driveStreet21(Vehicle, Street), Time)).

 /*  happens(driveStreet21(Vehicle, Street), Time) :-
       happens(pullStreet21(Horse, Vehicle, Street), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',150).

 /*  fix_axiom_head(Time) ->
       [ happens(driveStreet21(Vehicle, Street), Time),
          (->),
         driveStreet21(Vehicle, Street)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',150).

 /*  pl=axiom(driveStreet21(Vehicle,Street),
         [pullStreet21(Horse,Vehicle,Street)]).
 */

 /*  pullStreet21(Horse, Vehicle, Street) ->
       driveStreet21(Vehicle, Street).
 */
if pullStreet21(Horse, Vehicle, Street)then driveStreet21(Vehicle, Street).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',150).

 /*  reactive_rule([ happens(pullStreet21(Horse,
   				     Vehicle,
   				     Street),
   			Time_From,
   			Time_Until)
   	      ],
   	      [driveStreet21(Vehicle,Street)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',150).

 /*  reactive_rule([ happens(pullStreet21(Horse,
   				     Vehicle,
   				     Street),
   			Time_From,
   			Time_Until)
   	      ],
   	      [driveStreet21(Vehicle,Street)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',150).

 /*  not(happens(pullStreet21(Horse, Vehicle, Street), Time)) :-
       not(happens(driveStreet21(Vehicle, Street), Time)).
 */

 /*  fix_axiom_head(Time) ->
       [ not(happens(pullStreet21(Horse, Vehicle, Street),
                     Time)),
          (->),
         not(pullStreet21(Horse, Vehicle, Street))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',150).

 /*  pl=axiom(not(pullStreet21(Horse,Vehicle,Street)),
         [not(driveStreet21(Vehicle,Street))]).
 */

 /*  not(driveStreet21(Vehicle, Street)) ->
       not(pullStreet21(Horse, Vehicle, Street)).
 */
if not driveStreet21(Vehicle, Street)then not pullStreet21(Horse, Vehicle, Street).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',150).

 /*  reactive_rule([not(driveStreet21(Vehicle,Street))],
   	      [ not(pullStreet21(Horse,
   				 Vehicle,
   				 Street))
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',150).

 /*  reactive_rule([not(driveStreet21(Vehicle,Street))],
   	      [ not(pullStreet21(Horse,
   				 Vehicle,
   				 Street))
   	      ]).
 */


% [horse,vehicle,street,time]
% Happens(PullStreet12(horse,vehicle,street),time) ->
% HoldsAt(At(horse,Side1(street)),time).
 %  clausify_pnf=(happens(pullStreet12(Horse, Vehicle, Street), Time)->holds_at(at(Horse, side1(Street)), Time)).

 /*  holds_at(at(Horse, side1(Street)), Time) :-
       happens(pullStreet12(Horse, Vehicle, Street), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',154).

 /*  pl=axiom(requires(pullStreet12(Horse,Vehicle,Street),
   	       When_Time),
         [metreqs(pullStreet12(Horse,Vehicle,Street))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',154).

 /*  metreqs(pullStreet12(Horse, Vehicle, Street)) ->
       requires(pullStreet12(Horse, Vehicle, Street),
                When_Time).
 */
if metreqs(pullStreet12(Horse, Vehicle, Street))then requires(pullStreet12(Horse, Vehicle, Street), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',154).

 /*  reactive_rule([ metreqs(pullStreet12(Horse,
   				     Vehicle,
   				     Street))
   	      ],
   	      [ requires(pullStreet12(Horse,
   				      Vehicle,
   				      Street),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',154).

 /*  reactive_rule([ metreqs(pullStreet12(Horse,
   				     Vehicle,
   				     Street))
   	      ],
   	      [ requires(pullStreet12(Horse,
   				      Vehicle,
   				      Street),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',154).

 /*  fix_axiom_head(When_Time) ->
       [ holds_at(metreqs(pullStreet12(Horse, Vehicle, Street)),
                  When_Time),
          (->),
         metreqs(pullStreet12(Horse, Vehicle, Street))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',154).

 /*  pl=axiom(metreqs(pullStreet12(Horse,Vehicle,Street)),
         [at(Horse,side1(Street))]).
 */

 /*  at(Horse, side1(Street)) ->
       metreqs(pullStreet12(Horse, Vehicle, Street)).
 */
if loc_at(Horse, side1(Street))then metreqs(pullStreet12(Horse, Vehicle, Street)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',154).

 /*  reactive_rule([loc_at(Horse,side1(Street))],
   	      [ metreqs(pullStreet12(Horse,
   				     Vehicle,
   				     Street))
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',154).

 /*  reactive_rule([loc_at(Horse,side1(Street))],
   	      [ metreqs(pullStreet12(Horse,
   				     Vehicle,
   				     Street))
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',154).

 /*  not(happens(pullStreet12(Horse, Vehicle, Street), When_Time)) :-
       not(holds_at(at(Horse, side1(Street)), When_Time)).
 */

 /*  fix_axiom_head(When_Time) ->
       [ not(happens(pullStreet12(Horse, Vehicle, Street),
                     When_Time)),
          (->),
         not(pullStreet12(Horse, Vehicle, Street))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',154).

 /*  pl=axiom(not(pullStreet12(Horse,Vehicle,Street)),
         [not(at(Horse,side1(Street)))]).
 */

 /*  not(at(Horse, side1(Street))) ->
       not(pullStreet12(Horse, Vehicle, Street)).
 */
if not loc_at(Horse, side1(Street))then not pullStreet12(Horse, Vehicle, Street).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',154).

 /*  reactive_rule([not(loc_at(Horse,side1(Street)))],
   	      [ not(pullStreet12(Horse,
   				 Vehicle,
   				 Street))
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',154).

 /*  reactive_rule([not(loc_at(Horse,side1(Street)))],
   	      [ not(pullStreet12(Horse,
   				 Vehicle,
   				 Street))
   	      ]).
 */


% [horse,vehicle,street,time]
% Happens(PullStreet21(horse,vehicle,street),time) ->
% HoldsAt(At(horse,Side2(street)),time).
 %  clausify_pnf=(happens(pullStreet21(Horse, Vehicle, Street), Time)->holds_at(at(Horse, side2(Street)), Time)).

 /*  holds_at(at(Horse, side2(Street)), Time) :-
       happens(pullStreet21(Horse, Vehicle, Street), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',158).

 /*  pl=axiom(requires(pullStreet21(Horse,Vehicle,Street),
   	       When_Time),
         [metreqs(pullStreet21(Horse,Vehicle,Street))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',158).

 /*  metreqs(pullStreet21(Horse, Vehicle, Street)) ->
       requires(pullStreet21(Horse, Vehicle, Street),
                When_Time).
 */
if metreqs(pullStreet21(Horse, Vehicle, Street))then requires(pullStreet21(Horse, Vehicle, Street), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',158).

 /*  reactive_rule([ metreqs(pullStreet21(Horse,
   				     Vehicle,
   				     Street))
   	      ],
   	      [ requires(pullStreet21(Horse,
   				      Vehicle,
   				      Street),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',158).

 /*  reactive_rule([ metreqs(pullStreet21(Horse,
   				     Vehicle,
   				     Street))
   	      ],
   	      [ requires(pullStreet21(Horse,
   				      Vehicle,
   				      Street),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',158).

 /*  fix_axiom_head(When_Time) ->
       [ holds_at(metreqs(pullStreet21(Horse, Vehicle, Street)),
                  When_Time),
          (->),
         metreqs(pullStreet21(Horse, Vehicle, Street))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',158).

 /*  pl=axiom(metreqs(pullStreet21(Horse,Vehicle,Street)),
         [at(Horse,side2(Street))]).
 */

 /*  at(Horse, side2(Street)) ->
       metreqs(pullStreet21(Horse, Vehicle, Street)).
 */
if loc_at(Horse, side2(Street))then metreqs(pullStreet21(Horse, Vehicle, Street)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',158).

 /*  reactive_rule([loc_at(Horse,side2(Street))],
   	      [ metreqs(pullStreet21(Horse,
   				     Vehicle,
   				     Street))
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',158).

 /*  reactive_rule([loc_at(Horse,side2(Street))],
   	      [ metreqs(pullStreet21(Horse,
   				     Vehicle,
   				     Street))
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',158).

 /*  not(happens(pullStreet21(Horse, Vehicle, Street), When_Time)) :-
       not(holds_at(at(Horse, side2(Street)), When_Time)).
 */

 /*  fix_axiom_head(When_Time) ->
       [ not(happens(pullStreet21(Horse, Vehicle, Street),
                     When_Time)),
          (->),
         not(pullStreet21(Horse, Vehicle, Street))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',158).

 /*  pl=axiom(not(pullStreet21(Horse,Vehicle,Street)),
         [not(at(Horse,side2(Street)))]).
 */

 /*  not(at(Horse, side2(Street))) ->
       not(pullStreet21(Horse, Vehicle, Street)).
 */
if not loc_at(Horse, side2(Street))then not pullStreet21(Horse, Vehicle, Street).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',158).

 /*  reactive_rule([not(loc_at(Horse,side2(Street)))],
   	      [ not(pullStreet21(Horse,
   				 Vehicle,
   				 Street))
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',158).

 /*  reactive_rule([not(loc_at(Horse,side2(Street)))],
   	      [ not(pullStreet21(Horse,
   				 Vehicle,
   				 Street))
   	      ]).
 */


% [horse,vehicle,street,location,time]
% Side2(street)=location ->
% Initiates(PullStreet12(horse,vehicle,street),At(horse,location),time).

 /*  pl=axiom(initiates(pullStreet12(Horse,Vehicle,Street),
   		at(Horse,Location),
   		Time),
         [side2Pred(Street,Location)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',162).

 /*  side2Pred(Street, Location) ->
       initiates(pullStreet12(Horse, Vehicle, Street),
                 at(Horse, Location),
                 Time).
 */
if side2Pred(Street, Location)then initiates(pullStreet12(Horse, Vehicle, Street), loc_at(Horse, Location)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',162).

 /*  reactive_rule([side2Pred(Street,Location)],
   	      [ initiates(pullStreet12(Horse,
   				       Vehicle,
   				       Street),
   			  at(loc_at(Horse,Location),
   			     Time),
   			  Initiates)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',162).

 /*  reactive_rule([side2Pred(Street,Location)],
   	      [ initiates(pullStreet12(Horse,
   				       Vehicle,
   				       Street),
   			  at(loc_at(Horse,Location),
   			     Time),
   			  Initiates)
   	      ]).
 */


% [horse,vehicle,street,location,time]
% Side1(street)=location ->
% Initiates(PullStreet21(horse,vehicle,street),At(horse,location),time).

 /*  pl=axiom(initiates(pullStreet21(Horse,Vehicle,Street),
   		at(Horse,Location),
   		Time),
         [side1Pred(Street,Location)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',166).

 /*  side1Pred(Street, Location) ->
       initiates(pullStreet21(Horse, Vehicle, Street),
                 at(Horse, Location),
                 Time).
 */
if side1Pred(Street, Location)then initiates(pullStreet21(Horse, Vehicle, Street), loc_at(Horse, Location)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',166).

 /*  reactive_rule([side1Pred(Street,Location)],
   	      [ initiates(pullStreet21(Horse,
   				       Vehicle,
   				       Street),
   			  at(loc_at(Horse,Location),
   			     Time),
   			  Initiates)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',166).

 /*  reactive_rule([side1Pred(Street,Location)],
   	      [ initiates(pullStreet21(Horse,
   				       Vehicle,
   				       Street),
   			  at(loc_at(Horse,Location),
   			     Time),
   			  Initiates)
   	      ]).
 */


% [horse,vehicle,street,location,time]
% Side1(street)=location ->
% Terminates(PullStreet12(horse,vehicle,street),At(horse,location),time).

 /*  pl=axiom(terminates(pullStreet12(Horse,Vehicle,Street),
   		 at(Horse,Location),
   		 Time),
         [side1Pred(Street,Location)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',170).

 /*  side1Pred(Street, Location) ->
       terminates(pullStreet12(Horse, Vehicle, Street),
                  at(Horse, Location),
                  Time).
 */
if side1Pred(Street, Location)then terminates(pullStreet12(Horse, Vehicle, Street), loc_at(Horse, Location)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',170).

 /*  reactive_rule([side1Pred(Street,Location)],
   	      [ terminates(pullStreet12(Horse,
   					Vehicle,
   					Street),
   			   at(loc_at(Horse,Location),
   			      Time),
   			   Terminates)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',170).

 /*  reactive_rule([side1Pred(Street,Location)],
   	      [ terminates(pullStreet12(Horse,
   					Vehicle,
   					Street),
   			   at(loc_at(Horse,Location),
   			      Time),
   			   Terminates)
   	      ]).
 */


% [horse,vehicle,street,location,time]
% Side2(street)=location ->
% Terminates(PullStreet21(horse,vehicle,street),At(horse,location),time).

 /*  pl=axiom(terminates(pullStreet21(Horse,Vehicle,Street),
   		 at(Horse,Location),
   		 Time),
         [side2Pred(Street,Location)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',174).

 /*  side2Pred(Street, Location) ->
       terminates(pullStreet21(Horse, Vehicle, Street),
                  at(Horse, Location),
                  Time).
 */
if side2Pred(Street, Location)then terminates(pullStreet21(Horse, Vehicle, Street), loc_at(Horse, Location)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',174).

 /*  reactive_rule([side2Pred(Street,Location)],
   	      [ terminates(pullStreet21(Horse,
   					Vehicle,
   					Street),
   			   at(loc_at(Horse,Location),
   			      Time),
   			   Terminates)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',174).

 /*  reactive_rule([side2Pred(Street,Location)],
   	      [ terminates(pullStreet21(Horse,
   					Vehicle,
   					Street),
   			   at(loc_at(Horse,Location),
   			      Time),
   			   Terminates)
   	      ]).
 */


%; OnVehicle

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',179).
% fluent OnVehicle(object,vehicleon)
 %  blue=fluent(onVehicle(object,vehicleon)).
 %  fluent(onVehicle(object,vehicleon)).
fluents([onVehicle/2]).
 %  fluents([onVehicle/2]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',179).
mpred_prop(onVehicle(object,vehicleon),fluent).
 %  mpred_prop(onVehicle(object,vehicleon),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',181).
% event GetOnVehicle(agent,vehicleon)
 %  blue=event(getOnVehicle(agent,vehicleon)).
 %  event(getOnVehicle(agent,vehicleon)).
actions([getOnVehicle/2]).
 %  actions([getOnVehicle/2]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',181).
mpred_prop(getOnVehicle(agent,vehicleon),event).
 %  mpred_prop(getOnVehicle(agent,vehicleon),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',183).
% event GetOffVehicle(agent,vehicleon)
 %  blue=event(getOffVehicle(agent,vehicleon)).
 %  event(getOffVehicle(agent,vehicleon)).
actions([getOffVehicle/2]).
 %  actions([getOffVehicle/2]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',183).
mpred_prop(getOffVehicle(agent,vehicleon),event).
 %  mpred_prop(getOffVehicle(agent,vehicleon),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',185).
% [vehicleon1,vehicleon2,time]
% HoldsAt(OnVehicle(vehicleon1,vehicleon2),time) ->
% vehicleon1!=vehicleon2.
 %  clausify_pnf=(holds_at(onVehicle(Vehicleon1, Vehicleon2), Time)->diff(Vehicleon1, Vehicleon2)).

 /*  not(holds_at(onVehicle(Vehicleon1, Vehicleon2), Time)) :-
       not(diff(Vehicleon1, Vehicleon2)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',185).

 /*  pl=axiom(not(onVehicle(Vehicleon1,Vehicleon2)),
         [equals(Vehicleon1,Vehicleon2)]).
 */

 /*  equals(Vehicleon1, Vehicleon2) ->
       not(onVehicle(Vehicleon1, Vehicleon2)).
 */
if equals(Vehicleon1, Vehicleon2)then not onVehicle(Vehicleon1, Vehicleon2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',185).

 /*  reactive_rule([equals(Vehicleon1,Vehicleon2)],
   	      [not(onVehicle(Vehicleon1,Vehicleon2))]).
 */

 /*  reactive_rule([equals(Vehicleon1,Vehicleon2)],
   	      [not(onVehicle(Vehicleon1,Vehicleon2))]).
 */


% [vehicleon1,vehicleon2,time]
% HoldsAt(OnVehicle(vehicleon1,vehicleon2),time) ->
% !HoldsAt(OnVehicle(vehicleon2,vehicleon1),time).
 %  clausify_pnf=(holds_at(onVehicle(Vehicleon1, Vehicleon2), Time)->holds_at(neg(onVehicle(Vehicleon2, Vehicleon1)), Time)).

 /*  holds_at(neg(onVehicle(Vehicleon2, Vehicleon1)), Time) :-
       holds_at(onVehicle(Vehicleon1, Vehicleon2), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',190).

 /*  fix_axiom_head(Time) ->
       [ holds_at(neg(onVehicle(Vehicleon2, Vehicleon1)), Time),
          (->),
         not(onVehicle(Vehicleon2, Vehicleon1))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',190).

 /*  pl=axiom(not(onVehicle(Vehicleon2,Vehicleon1)),
         [onVehicle(Vehicleon1,Vehicleon2)]).
 */

 /*  onVehicle(Vehicleon1, Vehicleon2) ->
       not(onVehicle(Vehicleon2, Vehicleon1)).
 */
if onVehicle(Vehicleon1, Vehicleon2)then not onVehicle(Vehicleon2, Vehicleon1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',190).

 /*  reactive_rule([onVehicle(Vehicleon1,Vehicleon2)],
   	      [not(onVehicle(Vehicleon2,Vehicleon1))]).
 */

 /*  reactive_rule([onVehicle(Vehicleon1,Vehicleon2)],
   	      [not(onVehicle(Vehicleon2,Vehicleon1))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',190).

 /*  not(holds_at(onVehicle(Vehicleon1, Vehicleon2), Time)) :-
       not(holds_at(neg(onVehicle(Vehicleon2, Vehicleon1)), Time)).
 */

 /*  pl=axiom(not(onVehicle(Vehicleon1,Vehicleon2)),
         [not(not(onVehicle(Vehicleon2,Vehicleon1)))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',190).

 /*  not(not(onVehicle(Vehicleon2, Vehicleon1))) ->
       not(onVehicle(Vehicleon1, Vehicleon2)).
 */
if not not onVehicle(Vehicleon2, Vehicleon1)then not onVehicle(Vehicleon1, Vehicleon2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',190).

 /*  reactive_rule([not(not(onVehicle(Vehicleon2,Vehicleon1)))],
   	      [not(onVehicle(Vehicleon1,Vehicleon2))]).
 */

 /*  reactive_rule([not(not(onVehicle(Vehicleon2,Vehicleon1)))],
   	      [not(onVehicle(Vehicleon1,Vehicleon2))]).
 */


% [agent,vehicleon,time]
% Initiates(GetOnVehicle(agent,vehicleon),OnVehicle(agent,vehicleon),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',194).

 /*  pl=axiom(initiates(getOnVehicle(Agent,Vehicleon),
   		onVehicle(Agent,Vehicleon),
   		Time),
         []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',194).

 /*  initiates(getOnVehicle(Agent,Vehicleon),
   	  onVehicle(Agent,Vehicleon),
   	  Time).
 */
getOnVehicle(Agent, Vehicleon)initiates onVehicle(Agent, Vehicleon).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',194).

 /*  initiated(happens(getOnVehicle(Agent,Vehicleon),
   		  Time_From,
   		  Time_Until),
   	  onVehicle(Agent,Vehicleon),
   	  []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',194).

 /*  initiated(happens(getOnVehicle(Agent,Vehicleon),
   		  Time_From,
   		  Time_Until),
   	  onVehicle(Agent,Vehicleon),
   	  []).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',196).
% [agent,vehicleon,time]
% Happens(GetOnVehicle(agent,vehicleon),time) ->
% {location}% 
%  HoldsAt(At(agent,location),time) &
%  HoldsAt(At(vehicleon,location),time).
 %  clausify_pnf=exists([Location],  (happens(getOnVehicle(Agent, Vehicleon), Time)->holds_at(at(Agent, Location), Time), holds_at(at(Vehicleon, Location), Time))).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',198).

 /*  not(happens(getOnVehicle(Agent, Vehicleon), Time)) :-
       (   not(holds_at(at(Agent, Exists_Location), Time))
       ;   not(holds_at(at(Vehicleon, Exists_Location), Time))
       ),
       some(Exists_Location,
            '$kolem_Fn_71'(Agent, Vehicleon, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',198).

 /*  fix_axiom_head(Time) ->
       [ not(happens(getOnVehicle(Agent, Vehicleon), Time)),
          (->),
         not(getOnVehicle(Agent, Vehicleon))
       ].
 */
 %   pl=axiom(not(getOnVehicle(Agent, Vehicleon)), [(not(at(Agent, Exists_Location));not(at(Vehicleon, Exists_Location))), some(Exists_Location, '$kolem_Fn_71'(Agent, Vehicleon, Time))]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',198).

 /*  (   (   not(at(Agent, Exists_Location))
       ;   not(at(Vehicleon, Exists_Location))
       ),
       some(Exists_Location,
            '$kolem_Fn_71'(Agent, Vehicleon, Time))
   ->  not(getOnVehicle(Agent, Vehicleon))
   ).
 */
if (not loc_at(Agent, Exists_Location);not loc_at(Vehicleon, Exists_Location)), some(Exists_Location, '$kolem_Fn_71'(Agent, Vehicleon, Time))then not getOnVehicle(Agent, Vehicleon).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',198).

 /*   reactive_rule([  (not(loc_at(Agent, Exists_Location));not(loc_at(Vehicleon, Exists_Location))),
                      some(Exists_Location,
                           '$kolem_Fn_71'(Agent, Vehicleon, Time))
                    ],
                    [not(getOnVehicle(Agent, Vehicleon))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',198).

 /*   reactive_rule([  (not(loc_at(Agent, Exists_Location));not(loc_at(Vehicleon, Exists_Location))),
                      some(Exists_Location,
                           '$kolem_Fn_71'(Agent, Vehicleon, Time))
                    ],
                    [not(getOnVehicle(Agent, Vehicleon))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',198).

 /*  holds_at(at(Agent, Exists_Location), Time) :-
       happens(getOnVehicle(Agent, Vehicleon), Time),
       some(Exists_Location,
            '$kolem_Fn_71'(Agent, Vehicleon, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',198).

 /*  fix_axiom_head(Time) ->
       [ holds_at(at(Agent, Exists_Location), Time),
          (->),
         at(Agent, Exists_Location)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',198).

 /*  pl=axiom(at(Agent,Exists_Location),
         [ getOnVehicle(Agent,Vehicleon),
   	some(Exists_Location,
   	     '$kolem_Fn_71'(Agent,Vehicleon,Time))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',198).

 /*  (   getOnVehicle(Agent, Vehicleon),
       some(Exists_Location,
            '$kolem_Fn_71'(Agent, Vehicleon, Time))
   ->  at(Agent, Exists_Location)
   ).
 */
if getOnVehicle(Agent, Vehicleon), some(Exists_Location, '$kolem_Fn_71'(Agent, Vehicleon, Time))then loc_at(Agent, Exists_Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',198).

 /*  reactive_rule([ happens(getOnVehicle(Agent,Vehicleon),
   			Time_From,
   			Time_Until),
   		some(Exists_Location,
   		     '$kolem_Fn_71'(Agent,
   				    Vehicleon,
   				    Time))
   	      ],
   	      [loc_at(Agent,Exists_Location)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',198).

 /*  reactive_rule([ happens(getOnVehicle(Agent,Vehicleon),
   			Time_From,
   			Time_Until),
   		some(Exists_Location,
   		     '$kolem_Fn_71'(Agent,
   				    Vehicleon,
   				    Time))
   	      ],
   	      [loc_at(Agent,Exists_Location)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',198).

 /*  holds_at(at(Vehicleon, Exists_Location), Time) :-
       happens(getOnVehicle(Agent, Vehicleon), Time),
       some(Exists_Location,
            '$kolem_Fn_71'(Agent, Vehicleon, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',198).

 /*  fix_axiom_head(Time) ->
       [ holds_at(at(Vehicleon, Exists_Location), Time),
          (->),
         at(Vehicleon, Exists_Location)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',198).

 /*  pl=axiom(at(Vehicleon,Exists_Location),
         [ getOnVehicle(Agent,Vehicleon),
   	some(Exists_Location,
   	     '$kolem_Fn_71'(Agent,Vehicleon,Time))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',198).

 /*  (   getOnVehicle(Agent, Vehicleon),
       some(Exists_Location,
            '$kolem_Fn_71'(Agent, Vehicleon, Time))
   ->  at(Vehicleon, Exists_Location)
   ).
 */
if getOnVehicle(Agent, Vehicleon), some(Exists_Location, '$kolem_Fn_71'(Agent, Vehicleon, Time))then loc_at(Vehicleon, Exists_Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',198).

 /*  reactive_rule([ happens(getOnVehicle(Agent,Vehicleon),
   			Time_From7,
   			Time_Until8),
   		some(Exists_Location,
   		     '$kolem_Fn_71'(Agent,
   				    Vehicleon,
   				    Time))
   	      ],
   	      [loc_at(Vehicleon,Exists_Location)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',198).

 /*  reactive_rule([ happens(getOnVehicle(Agent,Vehicleon),
   			Time_From7,
   			Time_Until8),
   		some(Exists_Location,
   		     '$kolem_Fn_71'(Agent,
   				    Vehicleon,
   				    Time))
   	      ],
   	      [loc_at(Vehicleon,Exists_Location)]).
 */


% [agent,vehicleon,time]
% Terminates(GetOffVehicle(agent,vehicleon),OnVehicle(agent,vehicleon),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',203).

 /*  pl=axiom(terminates(getOffVehicle(Agent,Vehicleon),
   		 onVehicle(Agent,Vehicleon),
   		 Time),
         []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',203).

 /*  terminates(getOffVehicle(Agent,Vehicleon),
   	   onVehicle(Agent,Vehicleon),
   	   Time).
 */
getOffVehicle(Agent, Vehicleon)terminates onVehicle(Agent, Vehicleon).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',203).

 /*  terminated(happens(getOffVehicle(Agent,Vehicleon),
   		   Time_From,
   		   Time_Until),
   	   onVehicle(Agent,Vehicleon),
   	   []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',203).

 /*  terminated(happens(getOffVehicle(Agent,Vehicleon),
   		   Time_From,
   		   Time_Until),
   	   onVehicle(Agent,Vehicleon),
   	   []).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',205).
% [agent,vehicleon,time]
% Happens(GetOffVehicle(agent,vehicleon),time) ->
% HoldsAt(OnVehicle(agent,vehicleon),time).
 %  clausify_pnf=(happens(getOffVehicle(Agent, Vehicleon), Time)->holds_at(onVehicle(Agent, Vehicleon), Time)).

 /*  holds_at(onVehicle(Agent, Vehicleon), Time) :-
       happens(getOffVehicle(Agent, Vehicleon), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',205).

 /*  pl=axiom(requires(getOffVehicle(Agent,Vehicleon),
   	       When_Time),
         [metreqs(getOffVehicle(Agent,Vehicleon))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',205).

 /*  metreqs(getOffVehicle(Agent, Vehicleon)) ->
       requires(getOffVehicle(Agent, Vehicleon), When_Time).
 */
if metreqs(getOffVehicle(Agent, Vehicleon))then requires(getOffVehicle(Agent, Vehicleon), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',205).

 /*  reactive_rule([metreqs(getOffVehicle(Agent,Vehicleon))],
   	      [ requires(getOffVehicle(Agent,Vehicleon),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',205).

 /*  reactive_rule([metreqs(getOffVehicle(Agent,Vehicleon))],
   	      [ requires(getOffVehicle(Agent,Vehicleon),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',205).

 /*  fix_axiom_head(When_Time) ->
       [ holds_at(metreqs(getOffVehicle(Agent, Vehicleon)),
                  When_Time),
          (->),
         metreqs(getOffVehicle(Agent, Vehicleon))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',205).

 /*  pl=axiom(metreqs(getOffVehicle(Agent,Vehicleon)),
         [onVehicle(Agent,Vehicleon)]).
 */

 /*  onVehicle(Agent, Vehicleon) ->
       metreqs(getOffVehicle(Agent, Vehicleon)).
 */
if onVehicle(Agent, Vehicleon)then metreqs(getOffVehicle(Agent, Vehicleon)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',205).

 /*  reactive_rule([ holds(onVehicle(Agent,Vehicleon),
   		      Holds)
   	      ],
   	      [metreqs(getOffVehicle(Agent,Vehicleon))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',205).

 /*  reactive_rule([ holds(onVehicle(Agent,Vehicleon),
   		      Holds)
   	      ],
   	      [metreqs(getOffVehicle(Agent,Vehicleon))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',205).

 /*  not(happens(getOffVehicle(Agent, Vehicleon), When_Time)) :-
       not(holds_at(onVehicle(Agent, Vehicleon), When_Time)).
 */

 /*  fix_axiom_head(When_Time) ->
       [ not(happens(getOffVehicle(Agent, Vehicleon), When_Time)),
          (->),
         not(getOffVehicle(Agent, Vehicleon))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',205).

 /*  pl=axiom(not(getOffVehicle(Agent,Vehicleon)),
         [not(onVehicle(Agent,Vehicleon))]).
 */

 /*  not(onVehicle(Agent, Vehicleon)) ->
       not(getOffVehicle(Agent, Vehicleon)).
 */
if not onVehicle(Agent, Vehicleon)then not getOffVehicle(Agent, Vehicleon).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',205).

 /*  reactive_rule([ holds(not(onVehicle(Agent,Vehicleon)),
   		      Holds5)
   	      ],
   	      [not(getOffVehicle(Agent,Vehicleon))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',205).

 /*  reactive_rule([ holds(not(onVehicle(Agent,Vehicleon)),
   		      Holds5)
   	      ],
   	      [not(getOffVehicle(Agent,Vehicleon))]).
 */


% [agent,vehicleon,location,time]
% Releases(GetOnVehicle(agent,vehicleon),
%          At(agent,location),
%          time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',210).

 /*  pl=axiom(releases(getOnVehicle(Agent,Vehicleon),
   	       at(Agent,Location),
   	       Time),
         []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',210).

 /*  releases(getOnVehicle(Agent,Vehicleon),
   	 at(Agent,Location),
   	 Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',210).
releases(getOnVehicle(Agent,Vehicleon),
	 loc_at(Agent,Location),
	 Time).

 /*  releases(getOnVehicle(Agent,Vehicleon),
   	 loc_at(Agent,Location),
   	 Time).
 */


%;[agent,vehicleon,location1,location2,time]
%;HoldsAt(At(vehicleon,location1),time) &
%;location1 != location2 ->
%;Terminates(GetOffVehicle(agent,vehicleon),
%;           At(agent,location2),
%;           time).
% [agent,vehicleon,location,time]
% HoldsAt(At(vehicleon,location),time) ->
% Initiates(GetOffVehicle(agent,vehicleon),
%           At(agent,location),
%           time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',221).

 /*  pl=axiom(initiates(getOffVehicle(Agent,Vehicleon),
   		at(Agent,Location),
   		Time),
         [at(Vehicleon,Location)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',221).

 /*  at(Vehicleon, Location) ->
       initiates(getOffVehicle(Agent, Vehicleon),
                 at(Agent, Location),
                 Time).
 */
if loc_at(Vehicleon, Location)then initiates(getOffVehicle(Agent, Vehicleon), loc_at(Agent, Location)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',221).

 /*  reactive_rule([loc_at(Vehicleon,Location)],
   	      [ initiates(getOffVehicle(Agent,Vehicleon),
   			  at(loc_at(Agent,Location),
   			     Time),
   			  Initiates)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',221).

 /*  reactive_rule([loc_at(Vehicleon,Location)],
   	      [ initiates(getOffVehicle(Agent,Vehicleon),
   			  at(loc_at(Agent,Location),
   			     Time),
   			  Initiates)
   	      ]).
 */


% [object,vehicleon,location,time]
% HoldsAt(OnVehicle(object,vehicleon),time) &
% HoldsAt(At(vehicleon,location),time) ->
% HoldsAt(At(object,location),time).
 %  clausify_pnf=(holds_at(onVehicle(Object, Vehicleon), Time), holds_at(at(Vehicleon, Location), Time)->holds_at(at(Object, Location), Time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',228).

 /*  holds_at(at(Object, Location), Time) :-
       holds_at(onVehicle(Object, Vehicleon), Time),
       holds_at(at(Vehicleon, Location), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',228).

 /*  fix_axiom_head(Time) ->
       [ holds_at(at(Object, Location), Time),
          (->),
         at(Object, Location)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',228).

 /*  pl=axiom(at(Object,Location),
         [ onVehicle(Object,Vehicleon),
   	at(Vehicleon,Location)
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',228).

 /*  (   onVehicle(Object, Vehicleon),
       at(Vehicleon, Location)
   ->  at(Object, Location)
   ).
 */
if onVehicle(Object, Vehicleon), loc_at(Vehicleon, Location)then loc_at(Object, Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',228).

 /*  reactive_rule([ holds(onVehicle(Object,Vehicleon),
   		      Holds),
   		loc_at(Vehicleon,Location)
   	      ],
   	      [loc_at(Object,Location)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',228).

 /*  reactive_rule([ holds(onVehicle(Object,Vehicleon),
   		      Holds),
   		loc_at(Vehicleon,Location)
   	      ],
   	      [loc_at(Object,Location)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',228).

 /*  not(holds_at(onVehicle(Object, Vehicleon), Time)) :-
       holds_at(at(Vehicleon, Location), Time),
       not(holds_at(at(Object, Location), Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',228).

 /*  pl=axiom(not(onVehicle(Object,Vehicleon)),
         [ at(Vehicleon,Location),
   	not(at(Object,Location))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',228).

 /*  (   at(Vehicleon, Location),
       not(at(Object, Location))
   ->  not(onVehicle(Object, Vehicleon))
   ).
 */
if loc_at(Vehicleon, Location), not loc_at(Object, Location)then not onVehicle(Object, Vehicleon).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',228).

 /*  reactive_rule([ loc_at(Vehicleon,Location),
   		not(loc_at(Object,Location))
   	      ],
   	      [ holds(not(onVehicle(Object,Vehicleon)),
   		      Holds5)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',228).

 /*  reactive_rule([ loc_at(Vehicleon,Location),
   		not(loc_at(Object,Location))
   	      ],
   	      [ holds(not(onVehicle(Object,Vehicleon)),
   		      Holds5)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',228).

 /*  not(holds_at(at(Vehicleon, Location), Time)) :-
       holds_at(onVehicle(Object, Vehicleon), Time),
       not(holds_at(at(Object, Location), Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',228).

 /*  pl=axiom(not(at(Vehicleon,Location)),
         [ onVehicle(Object,Vehicleon),
   	not(at(Object,Location))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',228).

 /*  (   onVehicle(Object, Vehicleon),
       not(at(Object, Location))
   ->  not(at(Vehicleon, Location))
   ).
 */
if onVehicle(Object, Vehicleon), not loc_at(Object, Location)then not loc_at(Vehicleon, Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',228).

 /*  reactive_rule([ holds(onVehicle(Object,Vehicleon),
   		      Holds6),
   		not(loc_at(Object,Location))
   	      ],
   	      [not(loc_at(Vehicleon,Location))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',228).

 /*  reactive_rule([ holds(onVehicle(Object,Vehicleon),
   		      Holds6),
   		not(loc_at(Object,Location))
   	      ],
   	      [not(loc_at(Vehicleon,Location))]).
 */


%; InVehicle

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',234).
% fluent InVehicle(object,vehiclein)
 %  blue=fluent(inVehicle(object,vehiclein)).
 %  fluent(inVehicle(object,vehiclein)).
fluents([inVehicle/2]).
 %  fluents([inVehicle/2]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',234).
mpred_prop(inVehicle(object,vehiclein),fluent).
 %  mpred_prop(inVehicle(object,vehiclein),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',236).
% event GetInVehicle(agent,vehiclein)
 %  blue=event(getInVehicle(agent,vehiclein)).
 %  event(getInVehicle(agent,vehiclein)).
actions([getInVehicle/2]).
 %  actions([getInVehicle/2]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',236).
mpred_prop(getInVehicle(agent,vehiclein),event).
 %  mpred_prop(getInVehicle(agent,vehiclein),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',238).
% event GetOutOfVehicle(agent,vehiclein)
 %  blue=event(getOutOfVehicle(agent,vehiclein)).
 %  event(getOutOfVehicle(agent,vehiclein)).
actions([getOutOfVehicle/2]).
 %  actions([getOutOfVehicle/2]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',238).
mpred_prop(getOutOfVehicle(agent,vehiclein),event).
 %  mpred_prop(getOutOfVehicle(agent,vehiclein),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',240).
% [vehiclein1,vehiclein2,time]
% HoldsAt(InVehicle(vehiclein1,vehiclein2),time) ->
% vehiclein1!=vehiclein2.
 %  clausify_pnf=(holds_at(inVehicle(Vehiclein1, Vehiclein2), Time)->diff(Vehiclein1, Vehiclein2)).

 /*  not(holds_at(inVehicle(Vehiclein1, Vehiclein2), Time)) :-
       not(diff(Vehiclein1, Vehiclein2)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',240).

 /*  pl=axiom(not(inVehicle(Vehiclein1,Vehiclein2)),
         [equals(Vehiclein1,Vehiclein2)]).
 */

 /*  equals(Vehiclein1, Vehiclein2) ->
       not(inVehicle(Vehiclein1, Vehiclein2)).
 */
if equals(Vehiclein1, Vehiclein2)then not inVehicle(Vehiclein1, Vehiclein2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',240).

 /*  reactive_rule([equals(Vehiclein1,Vehiclein2)],
   	      [not(inVehicle(Vehiclein1,Vehiclein2))]).
 */

 /*  reactive_rule([equals(Vehiclein1,Vehiclein2)],
   	      [not(inVehicle(Vehiclein1,Vehiclein2))]).
 */


% [vehiclein1,vehiclein2,time]
% HoldsAt(InVehicle(vehiclein1,vehiclein2),time) ->
% !HoldsAt(InVehicle(vehiclein2,vehiclein1),time).
 %  clausify_pnf=(holds_at(inVehicle(Vehiclein1, Vehiclein2), Time)->holds_at(neg(inVehicle(Vehiclein2, Vehiclein1)), Time)).

 /*  holds_at(neg(inVehicle(Vehiclein2, Vehiclein1)), Time) :-
       holds_at(inVehicle(Vehiclein1, Vehiclein2), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',245).

 /*  fix_axiom_head(Time) ->
       [ holds_at(neg(inVehicle(Vehiclein2, Vehiclein1)), Time),
          (->),
         not(inVehicle(Vehiclein2, Vehiclein1))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',245).

 /*  pl=axiom(not(inVehicle(Vehiclein2,Vehiclein1)),
         [inVehicle(Vehiclein1,Vehiclein2)]).
 */

 /*  inVehicle(Vehiclein1, Vehiclein2) ->
       not(inVehicle(Vehiclein2, Vehiclein1)).
 */
if inVehicle(Vehiclein1, Vehiclein2)then not inVehicle(Vehiclein2, Vehiclein1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',245).

 /*  reactive_rule([inVehicle(Vehiclein1,Vehiclein2)],
   	      [not(inVehicle(Vehiclein2,Vehiclein1))]).
 */

 /*  reactive_rule([inVehicle(Vehiclein1,Vehiclein2)],
   	      [not(inVehicle(Vehiclein2,Vehiclein1))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',245).

 /*  not(holds_at(inVehicle(Vehiclein1, Vehiclein2), Time)) :-
       not(holds_at(neg(inVehicle(Vehiclein2, Vehiclein1)), Time)).
 */

 /*  pl=axiom(not(inVehicle(Vehiclein1,Vehiclein2)),
         [not(not(inVehicle(Vehiclein2,Vehiclein1)))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',245).

 /*  not(not(inVehicle(Vehiclein2, Vehiclein1))) ->
       not(inVehicle(Vehiclein1, Vehiclein2)).
 */
if not not inVehicle(Vehiclein2, Vehiclein1)then not inVehicle(Vehiclein1, Vehiclein2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',245).

 /*  reactive_rule([not(not(inVehicle(Vehiclein2,Vehiclein1)))],
   	      [not(inVehicle(Vehiclein1,Vehiclein2))]).
 */

 /*  reactive_rule([not(not(inVehicle(Vehiclein2,Vehiclein1)))],
   	      [not(inVehicle(Vehiclein1,Vehiclein2))]).
 */


% [agent,vehiclein,time]
% Initiates(GetInVehicle(agent,vehiclein),InVehicle(agent,vehiclein),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',249).

 /*  pl=axiom(initiates(getInVehicle(Agent,Vehiclein),
   		inVehicle(Agent,Vehiclein),
   		Time),
         []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',249).

 /*  initiates(getInVehicle(Agent,Vehiclein),
   	  inVehicle(Agent,Vehiclein),
   	  Time).
 */
getInVehicle(Agent, Vehiclein)initiates inVehicle(Agent, Vehiclein).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',249).

 /*  initiated(happens(getInVehicle(Agent,Vehiclein),
   		  Time_From,
   		  Time_Until),
   	  inVehicle(Agent,Vehiclein),
   	  []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',249).

 /*  initiated(happens(getInVehicle(Agent,Vehiclein),
   		  Time_From,
   		  Time_Until),
   	  inVehicle(Agent,Vehiclein),
   	  []).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',251).
% [agent,vehiclein,time]
% Happens(GetInVehicle(agent,vehiclein),time) ->
% {location}% 
%  HoldsAt(At(agent,location),time) &
%  HoldsAt(At(vehiclein,location),time).
 %  clausify_pnf=exists([Location],  (happens(getInVehicle(Agent, Vehiclein), Time)->holds_at(at(Agent, Location), Time), holds_at(at(Vehiclein, Location), Time))).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',253).

 /*  not(happens(getInVehicle(Agent, Vehiclein), Time)) :-
       (   not(holds_at(at(Agent, Exists_Location), Time))
       ;   not(holds_at(at(Vehiclein, Exists_Location), Time))
       ),
       some(Exists_Location,
            '$kolem_Fn_72'(Agent, Vehiclein, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',253).

 /*  fix_axiom_head(Time) ->
       [ not(happens(getInVehicle(Agent, Vehiclein), Time)),
          (->),
         not(getInVehicle(Agent, Vehiclein))
       ].
 */
 %   pl=axiom(not(getInVehicle(Agent, Vehiclein)), [(not(at(Agent, Exists_Location));not(at(Vehiclein, Exists_Location))), some(Exists_Location, '$kolem_Fn_72'(Agent, Vehiclein, Time))]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',253).

 /*  (   (   not(at(Agent, Exists_Location))
       ;   not(at(Vehiclein, Exists_Location))
       ),
       some(Exists_Location,
            '$kolem_Fn_72'(Agent, Vehiclein, Time))
   ->  not(getInVehicle(Agent, Vehiclein))
   ).
 */
if (not loc_at(Agent, Exists_Location);not loc_at(Vehiclein, Exists_Location)), some(Exists_Location, '$kolem_Fn_72'(Agent, Vehiclein, Time))then not getInVehicle(Agent, Vehiclein).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',253).

 /*   reactive_rule([  (not(loc_at(Agent, Exists_Location));not(loc_at(Vehiclein, Exists_Location))),
                      some(Exists_Location,
                           '$kolem_Fn_72'(Agent, Vehiclein, Time))
                    ],
                    [not(getInVehicle(Agent, Vehiclein))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',253).

 /*   reactive_rule([  (not(loc_at(Agent, Exists_Location));not(loc_at(Vehiclein, Exists_Location))),
                      some(Exists_Location,
                           '$kolem_Fn_72'(Agent, Vehiclein, Time))
                    ],
                    [not(getInVehicle(Agent, Vehiclein))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',253).

 /*  holds_at(at(Agent, Exists_Location), Time) :-
       happens(getInVehicle(Agent, Vehiclein), Time),
       some(Exists_Location,
            '$kolem_Fn_72'(Agent, Vehiclein, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',253).

 /*  fix_axiom_head(Time) ->
       [ holds_at(at(Agent, Exists_Location), Time),
          (->),
         at(Agent, Exists_Location)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',253).

 /*  pl=axiom(at(Agent,Exists_Location),
         [ getInVehicle(Agent,Vehiclein),
   	some(Exists_Location,
   	     '$kolem_Fn_72'(Agent,Vehiclein,Time))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',253).

 /*  (   getInVehicle(Agent, Vehiclein),
       some(Exists_Location,
            '$kolem_Fn_72'(Agent, Vehiclein, Time))
   ->  at(Agent, Exists_Location)
   ).
 */
if getInVehicle(Agent, Vehiclein), some(Exists_Location, '$kolem_Fn_72'(Agent, Vehiclein, Time))then loc_at(Agent, Exists_Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',253).

 /*  reactive_rule([ happens(getInVehicle(Agent,Vehiclein),
   			Time_From,
   			Time_Until),
   		some(Exists_Location,
   		     '$kolem_Fn_72'(Agent,
   				    Vehiclein,
   				    Time))
   	      ],
   	      [loc_at(Agent,Exists_Location)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',253).

 /*  reactive_rule([ happens(getInVehicle(Agent,Vehiclein),
   			Time_From,
   			Time_Until),
   		some(Exists_Location,
   		     '$kolem_Fn_72'(Agent,
   				    Vehiclein,
   				    Time))
   	      ],
   	      [loc_at(Agent,Exists_Location)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',253).

 /*  holds_at(at(Vehiclein, Exists_Location), Time) :-
       happens(getInVehicle(Agent, Vehiclein), Time),
       some(Exists_Location,
            '$kolem_Fn_72'(Agent, Vehiclein, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',253).

 /*  fix_axiom_head(Time) ->
       [ holds_at(at(Vehiclein, Exists_Location), Time),
          (->),
         at(Vehiclein, Exists_Location)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',253).

 /*  pl=axiom(at(Vehiclein,Exists_Location),
         [ getInVehicle(Agent,Vehiclein),
   	some(Exists_Location,
   	     '$kolem_Fn_72'(Agent,Vehiclein,Time))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',253).

 /*  (   getInVehicle(Agent, Vehiclein),
       some(Exists_Location,
            '$kolem_Fn_72'(Agent, Vehiclein, Time))
   ->  at(Vehiclein, Exists_Location)
   ).
 */
if getInVehicle(Agent, Vehiclein), some(Exists_Location, '$kolem_Fn_72'(Agent, Vehiclein, Time))then loc_at(Vehiclein, Exists_Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',253).

 /*  reactive_rule([ happens(getInVehicle(Agent,Vehiclein),
   			Time_From7,
   			Time_Until8),
   		some(Exists_Location,
   		     '$kolem_Fn_72'(Agent,
   				    Vehiclein,
   				    Time))
   	      ],
   	      [loc_at(Vehiclein,Exists_Location)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',253).

 /*  reactive_rule([ happens(getInVehicle(Agent,Vehiclein),
   			Time_From7,
   			Time_Until8),
   		some(Exists_Location,
   		     '$kolem_Fn_72'(Agent,
   				    Vehiclein,
   				    Time))
   	      ],
   	      [loc_at(Vehiclein,Exists_Location)]).
 */


% [agent,vehiclein,time]
% Terminates(GetOutOfVehicle(agent,vehiclein),InVehicle(agent,vehiclein),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',258).

 /*  pl=axiom(terminates(getOutOfVehicle(Agent,Vehiclein),
   		 inVehicle(Agent,Vehiclein),
   		 Time),
         []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',258).

 /*  terminates(getOutOfVehicle(Agent,Vehiclein),
   	   inVehicle(Agent,Vehiclein),
   	   Time).
 */
getOutOfVehicle(Agent, Vehiclein)terminates inVehicle(Agent, Vehiclein).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',258).

 /*  terminated(happens(getOutOfVehicle(Agent,Vehiclein),
   		   Time_From,
   		   Time_Until),
   	   inVehicle(Agent,Vehiclein),
   	   []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',258).

 /*  terminated(happens(getOutOfVehicle(Agent,Vehiclein),
   		   Time_From,
   		   Time_Until),
   	   inVehicle(Agent,Vehiclein),
   	   []).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',260).
% [agent,vehiclein,time]
% Happens(GetOutOfVehicle(agent,vehiclein),time) ->
% HoldsAt(InVehicle(agent,vehiclein),time).
 %  clausify_pnf=(happens(getOutOfVehicle(Agent, Vehiclein), Time)->holds_at(inVehicle(Agent, Vehiclein), Time)).

 /*  holds_at(inVehicle(Agent, Vehiclein), Time) :-
       happens(getOutOfVehicle(Agent, Vehiclein), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',260).

 /*  pl=axiom(requires(getOutOfVehicle(Agent,Vehiclein),
   	       When_Time),
         [metreqs(getOutOfVehicle(Agent,Vehiclein))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',260).

 /*  metreqs(getOutOfVehicle(Agent, Vehiclein)) ->
       requires(getOutOfVehicle(Agent, Vehiclein), When_Time).
 */
if metreqs(getOutOfVehicle(Agent, Vehiclein))then requires(getOutOfVehicle(Agent, Vehiclein), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',260).

 /*  reactive_rule([metreqs(getOutOfVehicle(Agent,Vehiclein))],
   	      [ requires(getOutOfVehicle(Agent,Vehiclein),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',260).

 /*  reactive_rule([metreqs(getOutOfVehicle(Agent,Vehiclein))],
   	      [ requires(getOutOfVehicle(Agent,Vehiclein),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',260).

 /*  fix_axiom_head(When_Time) ->
       [ holds_at(metreqs(getOutOfVehicle(Agent, Vehiclein)),
                  When_Time),
          (->),
         metreqs(getOutOfVehicle(Agent, Vehiclein))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',260).

 /*  pl=axiom(metreqs(getOutOfVehicle(Agent,Vehiclein)),
         [inVehicle(Agent,Vehiclein)]).
 */

 /*  inVehicle(Agent, Vehiclein) ->
       metreqs(getOutOfVehicle(Agent, Vehiclein)).
 */
if inVehicle(Agent, Vehiclein)then metreqs(getOutOfVehicle(Agent, Vehiclein)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',260).

 /*  reactive_rule([ holds(inVehicle(Agent,Vehiclein),
   		      Holds)
   	      ],
   	      [metreqs(getOutOfVehicle(Agent,Vehiclein))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',260).

 /*  reactive_rule([ holds(inVehicle(Agent,Vehiclein),
   		      Holds)
   	      ],
   	      [metreqs(getOutOfVehicle(Agent,Vehiclein))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',260).

 /*  not(happens(getOutOfVehicle(Agent, Vehiclein), When_Time)) :-
       not(holds_at(inVehicle(Agent, Vehiclein), When_Time)).
 */

 /*  fix_axiom_head(When_Time) ->
       [ not(happens(getOutOfVehicle(Agent, Vehiclein),
                     When_Time)),
          (->),
         not(getOutOfVehicle(Agent, Vehiclein))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',260).

 /*  pl=axiom(not(getOutOfVehicle(Agent,Vehiclein)),
         [not(inVehicle(Agent,Vehiclein))]).
 */

 /*  not(inVehicle(Agent, Vehiclein)) ->
       not(getOutOfVehicle(Agent, Vehiclein)).
 */
if not inVehicle(Agent, Vehiclein)then not getOutOfVehicle(Agent, Vehiclein).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',260).

 /*  reactive_rule([ holds(not(inVehicle(Agent,Vehiclein)),
   		      Holds5)
   	      ],
   	      [not(getOutOfVehicle(Agent,Vehiclein))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',260).

 /*  reactive_rule([ holds(not(inVehicle(Agent,Vehiclein)),
   		      Holds5)
   	      ],
   	      [not(getOutOfVehicle(Agent,Vehiclein))]).
 */


% [agent,vehiclein,location,time]
% Releases(GetInVehicle(agent,vehiclein),
%          At(agent,location),
%          time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',265).

 /*  pl=axiom(releases(getInVehicle(Agent,Vehiclein),
   	       at(Agent,Location),
   	       Time),
         []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',265).

 /*  releases(getInVehicle(Agent,Vehiclein),
   	 at(Agent,Location),
   	 Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',265).
releases(getInVehicle(Agent,Vehiclein),
	 loc_at(Agent,Location),
	 Time).

 /*  releases(getInVehicle(Agent,Vehiclein),
   	 loc_at(Agent,Location),
   	 Time).
 */


%;[agent,vehiclein,location1,location2,time]
%;HoldsAt(At(vehiclein,location1),time) &
%;location1 != location2 ->
%;Terminates(GetOutOfVehicle(agent,vehiclein),
%;           At(agent,location2),
%;           time).
% [agent,vehiclein,location,time]
% HoldsAt(At(vehiclein,location),time) ->
% Initiates(GetOutOfVehicle(agent,vehiclein),
%           At(agent,location),
%           time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',276).

 /*  pl=axiom(initiates(getOutOfVehicle(Agent,Vehiclein),
   		at(Agent,Location),
   		Time),
         [at(Vehiclein,Location)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',276).

 /*  at(Vehiclein, Location) ->
       initiates(getOutOfVehicle(Agent, Vehiclein),
                 at(Agent, Location),
                 Time).
 */
if loc_at(Vehiclein, Location)then initiates(getOutOfVehicle(Agent, Vehiclein), loc_at(Agent, Location)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',276).

 /*  reactive_rule([loc_at(Vehiclein,Location)],
   	      [ initiates(getOutOfVehicle(Agent,Vehiclein),
   			  at(loc_at(Agent,Location),
   			     Time),
   			  Initiates)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',276).

 /*  reactive_rule([loc_at(Vehiclein,Location)],
   	      [ initiates(getOutOfVehicle(Agent,Vehiclein),
   			  at(loc_at(Agent,Location),
   			     Time),
   			  Initiates)
   	      ]).
 */


% [object,vehiclein,location,time]
% HoldsAt(InVehicle(object,vehiclein),time) &
% HoldsAt(At(vehiclein,location),time) ->
% HoldsAt(At(object,location),time).
 %  clausify_pnf=(holds_at(inVehicle(Object, Vehiclein), Time), holds_at(at(Vehiclein, Location), Time)->holds_at(at(Object, Location), Time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',283).

 /*  holds_at(at(Object, Location), Time) :-
       holds_at(inVehicle(Object, Vehiclein), Time),
       holds_at(at(Vehiclein, Location), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',283).

 /*  fix_axiom_head(Time) ->
       [ holds_at(at(Object, Location), Time),
          (->),
         at(Object, Location)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',283).

 /*  pl=axiom(at(Object,Location),
         [ inVehicle(Object,Vehiclein),
   	at(Vehiclein,Location)
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',283).

 /*  (   inVehicle(Object, Vehiclein),
       at(Vehiclein, Location)
   ->  at(Object, Location)
   ).
 */
if inVehicle(Object, Vehiclein), loc_at(Vehiclein, Location)then loc_at(Object, Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',283).

 /*  reactive_rule([ holds(inVehicle(Object,Vehiclein),
   		      Holds),
   		loc_at(Vehiclein,Location)
   	      ],
   	      [loc_at(Object,Location)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',283).

 /*  reactive_rule([ holds(inVehicle(Object,Vehiclein),
   		      Holds),
   		loc_at(Vehiclein,Location)
   	      ],
   	      [loc_at(Object,Location)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',283).

 /*  not(holds_at(inVehicle(Object, Vehiclein), Time)) :-
       holds_at(at(Vehiclein, Location), Time),
       not(holds_at(at(Object, Location), Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',283).

 /*  pl=axiom(not(inVehicle(Object,Vehiclein)),
         [ at(Vehiclein,Location),
   	not(at(Object,Location))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',283).

 /*  (   at(Vehiclein, Location),
       not(at(Object, Location))
   ->  not(inVehicle(Object, Vehiclein))
   ).
 */
if loc_at(Vehiclein, Location), not loc_at(Object, Location)then not inVehicle(Object, Vehiclein).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',283).

 /*  reactive_rule([ loc_at(Vehiclein,Location),
   		not(loc_at(Object,Location))
   	      ],
   	      [ holds(not(inVehicle(Object,Vehiclein)),
   		      Holds5)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',283).

 /*  reactive_rule([ loc_at(Vehiclein,Location),
   		not(loc_at(Object,Location))
   	      ],
   	      [ holds(not(inVehicle(Object,Vehiclein)),
   		      Holds5)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',283).

 /*  not(holds_at(at(Vehiclein, Location), Time)) :-
       holds_at(inVehicle(Object, Vehiclein), Time),
       not(holds_at(at(Object, Location), Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',283).

 /*  pl=axiom(not(at(Vehiclein,Location)),
         [ inVehicle(Object,Vehiclein),
   	not(at(Object,Location))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',283).

 /*  (   inVehicle(Object, Vehiclein),
       not(at(Object, Location))
   ->  not(at(Vehiclein, Location))
   ).
 */
if inVehicle(Object, Vehiclein), not loc_at(Object, Location)then not loc_at(Vehiclein, Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',283).

 /*  reactive_rule([ holds(inVehicle(Object,Vehiclein),
   		      Holds6),
   		not(loc_at(Object,Location))
   	      ],
   	      [not(loc_at(Vehiclein,Location))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',283).

 /*  reactive_rule([ holds(inVehicle(Object,Vehiclein),
   		      Holds6),
   		not(loc_at(Object,Location))
   	      ],
   	      [not(loc_at(Vehiclein,Location))]).
 */


%; vehicle door
%; door does not have to be open for entry; passenger can jump in

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',290).
% event VehicleDoorOpen(agent,vehicledoor)
 %  blue=event(vehicleDoorOpen(agent,vehicledoor)).
 %  event(vehicleDoorOpen(agent,vehicledoor)).
actions([vehicleDoorOpen/2]).
 %  actions([vehicleDoorOpen/2]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',290).
mpred_prop(vehicleDoorOpen(agent,vehicledoor),event).
 %  mpred_prop(vehicleDoorOpen(agent,vehicledoor),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',292).
% event VehicleDoorClose(agent,vehicledoor)
 %  blue=event(vehicleDoorClose(agent,vehicledoor)).
 %  event(vehicleDoorClose(agent,vehicledoor)).
actions([vehicleDoorClose/2]).
 %  actions([vehicleDoorClose/2]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',292).
mpred_prop(vehicleDoorClose(agent,vehicledoor),event).
 %  mpred_prop(vehicleDoorClose(agent,vehicledoor),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',294).
% fluent VehicleDoorIsOpen(vehicledoor)
 %  blue=fluent(vehicleDoorIsOpen(vehicledoor)).
 %  fluent(vehicleDoorIsOpen(vehicledoor)).
fluents([vehicleDoorIsOpen/1]).
 %  fluents([vehicleDoorIsOpen/1]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',294).
mpred_prop(vehicleDoorIsOpen(vehicledoor),fluent).
 %  mpred_prop(vehicleDoorIsOpen(vehicledoor),fluent).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',296).
% [agent,vehicledoor,time]
% Happens(VehicleDoorOpen(agent,vehicledoor),time) ->
% HoldsAt(Awake(agent),time) &
% !HoldsAt(VehicleDoorIsOpen(vehicledoor),time).
 %  clausify_pnf=(happens(vehicleDoorOpen(Agent, Vehicledoor), Time)->holds_at(awake(Agent), Time), holds_at(neg(vehicleDoorIsOpen(Vehicledoor)), Time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',296).

 /*  not(happens(vehicleDoorOpen(Agent, Vehicledoor), Time)) :-
       (   not(holds_at(awake(Agent), Time))
       ;   not(holds_at(neg(vehicleDoorIsOpen(Vehicledoor)), Time))
       ).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',296).

 /*  fix_axiom_head(Time) ->
       [ not(happens(vehicleDoorOpen(Agent, Vehicledoor), Time)),
          (->),
         not(vehicleDoorOpen(Agent, Vehicledoor))
       ].
 */
 %   pl=axiom(not(vehicleDoorOpen(Agent, Vehicledoor)), [(not(awake(Agent));not(not(vehicleDoorIsOpen(Vehicledoor))))]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',296).

 /*  not(awake(Agent));not(not(vehicleDoorIsOpen(Vehicledoor))) ->
       not(vehicleDoorOpen(Agent, Vehicledoor)).
 */
if not awake(Agent);not not vehicleDoorIsOpen(Vehicledoor)then not vehicleDoorOpen(Agent, Vehicledoor).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',296).

 /*   reactive_rule([  (not(awake(Agent));not(not(vehicleDoorIsOpen(Vehicledoor))))
                    ],
                    [not(vehicleDoorOpen(Agent, Vehicledoor))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',296).

 /*   reactive_rule([  (not(awake(Agent));not(not(vehicleDoorIsOpen(Vehicledoor))))
                    ],
                    [not(vehicleDoorOpen(Agent, Vehicledoor))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',296).

 /*  holds_at(awake(Agent), Time) :-
       happens(vehicleDoorOpen(Agent, Vehicledoor), Time).
 */

 /*  pl=axiom(requires(vehicleDoorOpen(Agent,Vehicledoor),
   	       When_Time),
         [metreqs(vehicleDoorOpen(Agent,Vehicledoor))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',296).

 /*  metreqs(vehicleDoorOpen(Agent, Vehicledoor)) ->
       requires(vehicleDoorOpen(Agent, Vehicledoor), When_Time).
 */
if metreqs(vehicleDoorOpen(Agent, Vehicledoor))then requires(vehicleDoorOpen(Agent, Vehicledoor), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',296).

 /*  reactive_rule([metreqs(vehicleDoorOpen(Agent,Vehicledoor))],
   	      [ requires(vehicleDoorOpen(Agent,Vehicledoor),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',296).

 /*  reactive_rule([metreqs(vehicleDoorOpen(Agent,Vehicledoor))],
   	      [ requires(vehicleDoorOpen(Agent,Vehicledoor),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',296).

 /*  fix_axiom_head(When_Time) ->
       [ holds_at(metreqs(vehicleDoorOpen(Agent, Vehicledoor)),
                  When_Time),
          (->),
         metreqs(vehicleDoorOpen(Agent, Vehicledoor))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',296).

 /*  pl=axiom(metreqs(vehicleDoorOpen(Agent,Vehicledoor)),
         [awake(Agent)]).
 */

 /*  awake(Agent) ->
       metreqs(vehicleDoorOpen(Agent, Vehicledoor)).
 */
if awake(Agent)then metreqs(vehicleDoorOpen(Agent, Vehicledoor)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',296).

 /*  reactive_rule([awake(Agent)],
   	      [metreqs(vehicleDoorOpen(Agent,Vehicledoor))]).
 */

 /*  reactive_rule([awake(Agent)],
   	      [metreqs(vehicleDoorOpen(Agent,Vehicledoor))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',296).

 /*  holds_at(neg(vehicleDoorIsOpen(Vehicledoor)), When_Time) :-
       happens(vehicleDoorOpen(Agent, Vehicledoor), When_Time).
 */

 /*  pl=axiom(requires(vehicleDoorOpen(Agent,Vehicledoor),
   	       When_Time),
         [metreqs(vehicleDoorOpen(Agent,Vehicledoor))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',296).

 /*  metreqs(vehicleDoorOpen(Agent, Vehicledoor)) ->
       requires(vehicleDoorOpen(Agent, Vehicledoor), When_Time).
 */
if metreqs(vehicleDoorOpen(Agent, Vehicledoor))then requires(vehicleDoorOpen(Agent, Vehicledoor), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',296).

 /*  reactive_rule([metreqs(vehicleDoorOpen(Agent,Vehicledoor))],
   	      [ requires(vehicleDoorOpen(Agent,Vehicledoor),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',296).

 /*  reactive_rule([metreqs(vehicleDoorOpen(Agent,Vehicledoor))],
   	      [ requires(vehicleDoorOpen(Agent,Vehicledoor),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',296).

 /*  fix_axiom_head(When_Time) ->
       [ holds_at(metreqs(vehicleDoorOpen(Agent, Vehicledoor)),
                  When_Time),
          (->),
         metreqs(vehicleDoorOpen(Agent, Vehicledoor))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',296).

 /*  pl=axiom(metreqs(vehicleDoorOpen(Agent,Vehicledoor)),
         [not(vehicleDoorIsOpen(Vehicledoor))]).
 */

 /*  not(vehicleDoorIsOpen(Vehicledoor)) ->
       metreqs(vehicleDoorOpen(Agent, Vehicledoor)).
 */
if not vehicleDoorIsOpen(Vehicledoor)then metreqs(vehicleDoorOpen(Agent, Vehicledoor)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',296).

 /*  reactive_rule([not(vehicleDoorIsOpen(Vehicledoor))],
   	      [metreqs(vehicleDoorOpen(Agent,Vehicledoor))]).
 */

 /*  reactive_rule([not(vehicleDoorIsOpen(Vehicledoor))],
   	      [metreqs(vehicleDoorOpen(Agent,Vehicledoor))]).
 */


% [agent,vehicledoor,time]
% Initiates(VehicleDoorOpen(agent,vehicledoor),
%           VehicleDoorIsOpen(vehicledoor),
%           time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',302).

 /*  pl=axiom(initiates(vehicleDoorOpen(Agent,Vehicledoor),
   		vehicleDoorIsOpen(Vehicledoor),
   		Time),
         []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',302).

 /*  initiates(vehicleDoorOpen(Agent,Vehicledoor),
   	  vehicleDoorIsOpen(Vehicledoor),
   	  Time).
 */
vehicleDoorOpen(Agent, Vehicledoor)initiates vehicleDoorIsOpen(Vehicledoor).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',302).

 /*  initiated(happens(vehicleDoorOpen(Agent,Vehicledoor),
   		  Time_From,
   		  Time_Until),
   	  vehicleDoorIsOpen(Vehicledoor),
   	  []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',302).

 /*  initiated(happens(vehicleDoorOpen(Agent,Vehicledoor),
   		  Time_From,
   		  Time_Until),
   	  vehicleDoorIsOpen(Vehicledoor),
   	  []).
 */


% [agent,vehicledoor,time]
% Happens(VehicleDoorClose(agent,vehicledoor),time) ->
% HoldsAt(Awake(agent),time) &
% HoldsAt(VehicleDoorIsOpen(vehicledoor),time).
 %  clausify_pnf=(happens(vehicleDoorClose(Agent, Vehicledoor), Time)->holds_at(awake(Agent), Time), holds_at(vehicleDoorIsOpen(Vehicledoor), Time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',307).

 /*  not(happens(vehicleDoorClose(Agent, Vehicledoor), Time)) :-
       (   not(holds_at(awake(Agent), Time))
       ;   not(holds_at(vehicleDoorIsOpen(Vehicledoor), Time))
       ).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',307).

 /*  fix_axiom_head(Time) ->
       [ not(happens(vehicleDoorClose(Agent, Vehicledoor), Time)),
          (->),
         not(vehicleDoorClose(Agent, Vehicledoor))
       ].
 */
 %   pl=axiom(not(vehicleDoorClose(Agent, Vehicledoor)), [(not(awake(Agent));not(vehicleDoorIsOpen(Vehicledoor)))]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',307).

 /*  not(awake(Agent));not(vehicleDoorIsOpen(Vehicledoor)) ->
       not(vehicleDoorClose(Agent, Vehicledoor)).
 */
if not awake(Agent);not vehicleDoorIsOpen(Vehicledoor)then not vehicleDoorClose(Agent, Vehicledoor).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',307).

 /*   reactive_rule([  (not(awake(Agent));not(vehicleDoorIsOpen(Vehicledoor)))
                    ],
                    [not(vehicleDoorClose(Agent, Vehicledoor))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',307).

 /*   reactive_rule([  (not(awake(Agent));not(vehicleDoorIsOpen(Vehicledoor)))
                    ],
                    [not(vehicleDoorClose(Agent, Vehicledoor))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',307).

 /*  holds_at(awake(Agent), Time) :-
       happens(vehicleDoorClose(Agent, Vehicledoor), Time).
 */

 /*  pl=axiom(requires(vehicleDoorClose(Agent,Vehicledoor),
   	       When_Time),
         [metreqs(vehicleDoorClose(Agent,Vehicledoor))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',307).

 /*  metreqs(vehicleDoorClose(Agent, Vehicledoor)) ->
       requires(vehicleDoorClose(Agent, Vehicledoor), When_Time).
 */
if metreqs(vehicleDoorClose(Agent, Vehicledoor))then requires(vehicleDoorClose(Agent, Vehicledoor), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',307).

 /*  reactive_rule([ metreqs(vehicleDoorClose(Agent,Vehicledoor))
   	      ],
   	      [ requires(vehicleDoorClose(Agent,
   					  Vehicledoor),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',307).

 /*  reactive_rule([ metreqs(vehicleDoorClose(Agent,Vehicledoor))
   	      ],
   	      [ requires(vehicleDoorClose(Agent,
   					  Vehicledoor),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',307).

 /*  fix_axiom_head(When_Time) ->
       [ holds_at(metreqs(vehicleDoorClose(Agent, Vehicledoor)),
                  When_Time),
          (->),
         metreqs(vehicleDoorClose(Agent, Vehicledoor))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',307).

 /*  pl=axiom(metreqs(vehicleDoorClose(Agent,Vehicledoor)),
         [awake(Agent)]).
 */

 /*  awake(Agent) ->
       metreqs(vehicleDoorClose(Agent, Vehicledoor)).
 */
if awake(Agent)then metreqs(vehicleDoorClose(Agent, Vehicledoor)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',307).

 /*  reactive_rule([awake(Agent)],
   	      [ metreqs(vehicleDoorClose(Agent,Vehicledoor))
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',307).

 /*  reactive_rule([awake(Agent)],
   	      [ metreqs(vehicleDoorClose(Agent,Vehicledoor))
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',307).

 /*  holds_at(vehicleDoorIsOpen(Vehicledoor), When_Time) :-
       happens(vehicleDoorClose(Agent, Vehicledoor), When_Time).
 */

 /*  pl=axiom(requires(vehicleDoorClose(Agent,Vehicledoor),
   	       When_Time),
         [metreqs(vehicleDoorClose(Agent,Vehicledoor))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',307).

 /*  metreqs(vehicleDoorClose(Agent, Vehicledoor)) ->
       requires(vehicleDoorClose(Agent, Vehicledoor), When_Time).
 */
if metreqs(vehicleDoorClose(Agent, Vehicledoor))then requires(vehicleDoorClose(Agent, Vehicledoor), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',307).

 /*  reactive_rule([ metreqs(vehicleDoorClose(Agent,Vehicledoor))
   	      ],
   	      [ requires(vehicleDoorClose(Agent,
   					  Vehicledoor),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',307).

 /*  reactive_rule([ metreqs(vehicleDoorClose(Agent,Vehicledoor))
   	      ],
   	      [ requires(vehicleDoorClose(Agent,
   					  Vehicledoor),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',307).

 /*  fix_axiom_head(When_Time) ->
       [ holds_at(metreqs(vehicleDoorClose(Agent, Vehicledoor)),
                  When_Time),
          (->),
         metreqs(vehicleDoorClose(Agent, Vehicledoor))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',307).

 /*  pl=axiom(metreqs(vehicleDoorClose(Agent,Vehicledoor)),
         [vehicleDoorIsOpen(Vehicledoor)]).
 */

 /*  vehicleDoorIsOpen(Vehicledoor) ->
       metreqs(vehicleDoorClose(Agent, Vehicledoor)).
 */
if vehicleDoorIsOpen(Vehicledoor)then metreqs(vehicleDoorClose(Agent, Vehicledoor)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',307).

 /*  reactive_rule([holds(vehicleDoorIsOpen(Vehicledoor),Holds)],
   	      [ metreqs(vehicleDoorClose(Agent,Vehicledoor))
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',307).

 /*  reactive_rule([holds(vehicleDoorIsOpen(Vehicledoor),Holds)],
   	      [ metreqs(vehicleDoorClose(Agent,Vehicledoor))
   	      ]).
 */


% [agent,vehicledoor,time]
% Terminates(VehicleDoorClose(agent,vehicledoor),
%            VehicleDoorIsOpen(vehicledoor),
%            time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',312).

 /*  pl=axiom(terminates(vehicleDoorClose(Agent,Vehicledoor),
   		 vehicleDoorIsOpen(Vehicledoor),
   		 Time),
         []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',312).

 /*  terminates(vehicleDoorClose(Agent,Vehicledoor),
   	   vehicleDoorIsOpen(Vehicledoor),
   	   Time).
 */
vehicleDoorClose(Agent, Vehicledoor)terminates vehicleDoorIsOpen(Vehicledoor).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',312).

 /*  terminated(happens(vehicleDoorClose(Agent,Vehicledoor),
   		   Time_From,
   		   Time_Until),
   	   vehicleDoorIsOpen(Vehicledoor),
   	   []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',312).

 /*  terminated(happens(vehicleDoorClose(Agent,Vehicledoor),
   		   Time_From,
   		   Time_Until),
   	   vehicleDoorIsOpen(Vehicledoor),
   	   []).
 */


%; ticketagent

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',318).
% sort ticketagent: agent
subsort(ticketagent,agent).
 %  subsort(ticketagent,agent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',320).
% fluent BeTicketAgent0(ticketagent)
 %  blue=fluent(beTicketAgent0(ticketagent)).
 %  fluent(beTicketAgent0(ticketagent)).
fluents([beTicketAgent0/1]).
 %  fluents([beTicketAgent0/1]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',320).
mpred_prop(beTicketAgent0(ticketagent),fluent).
 %  mpred_prop(beTicketAgent0(ticketagent),fluent).

% fluent BeTicketAgent1(ticketagent)
 %  blue=fluent(beTicketAgent1(ticketagent)).
 %  fluent(beTicketAgent1(ticketagent)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',320).
fluents([beTicketAgent1/1]).
 %  fluents([beTicketAgent1/1]).
mpred_prop(beTicketAgent1(ticketagent),fluent).
 %  mpred_prop(beTicketAgent1(ticketagent),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',322).
% fluent BeTicketAgent2(ticketagent)
 %  blue=fluent(beTicketAgent2(ticketagent)).
 %  fluent(beTicketAgent2(ticketagent)).
fluents([beTicketAgent2/1]).
 %  fluents([beTicketAgent2/1]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',322).
mpred_prop(beTicketAgent2(ticketagent),fluent).
 %  mpred_prop(beTicketAgent2(ticketagent),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',324).
% xor BeTicketAgent0, BeTicketAgent1, BeTicketAgent2
 %  red = ==>xor[beTicketAgent0,beTicketAgent1,beTicketAgent2].
==>xor[beTicketAgent0,beTicketAgent1,beTicketAgent2].
 %  ==>xor[beTicketAgent0,beTicketAgent1,beTicketAgent2].


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',326).
% [ticketagent,agent,ticket,time]
% HoldsAt(BeTicketAgent0(ticketagent),time) ->
% Terminates(Request(agent,ticketagent,ticket),
%            BeTicketAgent0(ticketagent),
%            time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',326).

 /*  pl=axiom(terminates(request(Agent,Ticketagent,Ticket),
   		 beTicketAgent0(Ticketagent),
   		 Time),
         [beTicketAgent0(Ticketagent)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',326).

 /*  beTicketAgent0(Ticketagent) ->
       terminates(request(Agent, Ticketagent, Ticket),
                  beTicketAgent0(Ticketagent),
                  Time).
 */
if beTicketAgent0(Ticketagent)then terminates(request(Agent, Ticketagent, Ticket), beTicketAgent0(Ticketagent)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',326).

 /*  reactive_rule([beTicketAgent0(Ticketagent)],
   	      [ terminates(request(Agent,
   				   Ticketagent,
   				   Ticket),
   			   at(beTicketAgent0(Ticketagent),
   			      Time),
   			   Terminates)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',326).

 /*  reactive_rule([beTicketAgent0(Ticketagent)],
   	      [ terminates(request(Agent,
   				   Ticketagent,
   				   Ticket),
   			   at(beTicketAgent0(Ticketagent),
   			      Time),
   			   Terminates)
   	      ]).
 */


% [ticketagent,agent,ticket,time]
% HoldsAt(BeTicketAgent0(ticketagent),time) ->
% Initiates(Request(agent,ticketagent,ticket),
%           BeTicketAgent1(ticketagent),
%           time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',333).

 /*  pl=axiom(initiates(request(Agent,Ticketagent,Ticket),
   		beTicketAgent1(Ticketagent),
   		Time),
         [beTicketAgent0(Ticketagent)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',333).

 /*  beTicketAgent0(Ticketagent) ->
       initiates(request(Agent, Ticketagent, Ticket),
                 beTicketAgent1(Ticketagent),
                 Time).
 */
if beTicketAgent0(Ticketagent)then initiates(request(Agent, Ticketagent, Ticket), beTicketAgent1(Ticketagent)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',333).

 /*  reactive_rule([beTicketAgent0(Ticketagent)],
   	      [ initiates(request(Agent,
   				  Ticketagent,
   				  Ticket),
   			  at(beTicketAgent1(Ticketagent),
   			     Time),
   			  Initiates)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',333).

 /*  reactive_rule([beTicketAgent0(Ticketagent)],
   	      [ initiates(request(Agent,
   				  Ticketagent,
   				  Ticket),
   			  at(beTicketAgent1(Ticketagent),
   			     Time),
   			  Initiates)
   	      ]).
 */


% [ticketagent,agent,ticket,time]
% HoldsAt(BeTicketAgent1(ticketagent),time) &
% HoldsAt(KnowRequest(ticketagent,agent,ticket),time) ->
% Happens(PickUp(ticketagent,ticket),time).
 %  clausify_pnf=(holds_at(beTicketAgent1(Ticketagent), Time), holds_at(knowRequest(Ticketagent, Agent, Ticket), Time)->happens(pickUp(Ticketagent, Ticket), Time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',339).

 /*  happens(pickUp(Ticketagent, Ticket), Time) :-
       holds_at(beTicketAgent1(Ticketagent), Time),
       holds_at(knowRequest(Ticketagent, Agent, Ticket),
                Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',339).

 /*  fix_axiom_head(Time) ->
       [ happens(pickUp(Ticketagent, Ticket), Time),
          (->),
         pickUp(Ticketagent, Ticket)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',339).

 /*  pl=axiom(pickUp(Ticketagent,Ticket),
         [ beTicketAgent1(Ticketagent),
   	knowRequest(Ticketagent,Agent,Ticket)
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',339).

 /*  (   beTicketAgent1(Ticketagent),
       knowRequest(Ticketagent, Agent, Ticket)
   ->  pickUp(Ticketagent, Ticket)
   ).
 */
if beTicketAgent1(Ticketagent), knowRequest(Ticketagent, Agent, Ticket)then pickUp(Ticketagent, Ticket).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',339).

 /*  reactive_rule([ beTicketAgent1(Ticketagent),
   		holds(knowRequest(Ticketagent,
   				  Agent,
   				  Ticket),
   		      Holds)
   	      ],
   	      [ happens(pickUp(Ticketagent,Ticket),
   			Time_From,
   			Time_Until)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',339).

 /*  reactive_rule([ beTicketAgent1(Ticketagent),
   		holds(knowRequest(Ticketagent,
   				  Agent,
   				  Ticket),
   		      Holds)
   	      ],
   	      [ happens(pickUp(Ticketagent,Ticket),
   			Time_From,
   			Time_Until)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',339).

 /*  not(holds_at(beTicketAgent1(Ticketagent), Time)) :-
       holds_at(knowRequest(Ticketagent, Agent, Ticket),
                Time),
       not(happens(pickUp(Ticketagent, Ticket), Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',339).

 /*  pl=axiom(not(beTicketAgent1(Ticketagent)),
         [ knowRequest(Ticketagent,Agent,Ticket),
   	not(pickUp(Ticketagent,Ticket))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',339).

 /*  (   knowRequest(Ticketagent, Agent, Ticket),
       not(pickUp(Ticketagent, Ticket))
   ->  not(beTicketAgent1(Ticketagent))
   ).
 */
if knowRequest(Ticketagent, Agent, Ticket), not pickUp(Ticketagent, Ticket)then not beTicketAgent1(Ticketagent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',339).

 /*  reactive_rule([ holds(knowRequest(Ticketagent,
   				  Agent,
   				  Ticket),
   		      Holds7),
   		not(pickUp(Ticketagent,Ticket))
   	      ],
   	      [not(beTicketAgent1(Ticketagent))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',339).

 /*  reactive_rule([ holds(knowRequest(Ticketagent,
   				  Agent,
   				  Ticket),
   		      Holds7),
   		not(pickUp(Ticketagent,Ticket))
   	      ],
   	      [not(beTicketAgent1(Ticketagent))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',339).

 /*  not(holds_at(knowRequest(Ticketagent, Agent, Ticket), Time)) :-
       holds_at(beTicketAgent1(Ticketagent), Time),
       not(happens(pickUp(Ticketagent, Ticket), Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',339).

 /*  pl=axiom(not(knowRequest(Ticketagent,Agent,Ticket)),
         [ beTicketAgent1(Ticketagent),
   	not(pickUp(Ticketagent,Ticket))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',339).

 /*  (   beTicketAgent1(Ticketagent),
       not(pickUp(Ticketagent, Ticket))
   ->  not(knowRequest(Ticketagent, Agent, Ticket))
   ).
 */
if beTicketAgent1(Ticketagent), not pickUp(Ticketagent, Ticket)then not knowRequest(Ticketagent, Agent, Ticket).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',339).

 /*  reactive_rule([ beTicketAgent1(Ticketagent),
   		not(pickUp(Ticketagent,Ticket))
   	      ],
   	      [ holds(not(knowRequest(Ticketagent,
   				      Agent,
   				      Ticket)),
   		      Holds8)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',339).

 /*  reactive_rule([ beTicketAgent1(Ticketagent),
   		not(pickUp(Ticketagent,Ticket))
   	      ],
   	      [ holds(not(knowRequest(Ticketagent,
   				      Agent,
   				      Ticket)),
   		      Holds8)
   	      ]).
 */


% [ticketagent,ticket,time]
% HoldsAt(BeTicketAgent1(ticketagent),time) ->
% Terminates(PickUp(ticketagent,ticket),
%            BeTicketAgent1(ticketagent),
%            time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',344).

 /*  pl=axiom(terminates(pickUp(Ticketagent,Ticket),
   		 beTicketAgent1(Ticketagent),
   		 Time),
         [beTicketAgent1(Ticketagent)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',344).

 /*  beTicketAgent1(Ticketagent) ->
       terminates(pickUp(Ticketagent, Ticket),
                  beTicketAgent1(Ticketagent),
                  Time).
 */
if beTicketAgent1(Ticketagent)then terminates(pickUp(Ticketagent, Ticket), beTicketAgent1(Ticketagent)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',344).

 /*  reactive_rule([beTicketAgent1(Ticketagent)],
   	      [ terminates(pickUp(Ticketagent,Ticket),
   			   at(beTicketAgent1(Ticketagent),
   			      Time),
   			   Terminates)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',344).

 /*  reactive_rule([beTicketAgent1(Ticketagent)],
   	      [ terminates(pickUp(Ticketagent,Ticket),
   			   at(beTicketAgent1(Ticketagent),
   			      Time),
   			   Terminates)
   	      ]).
 */


% [ticketagent,ticket,time]
% HoldsAt(BeTicketAgent1(ticketagent),time) ->
% Initiates(PickUp(ticketagent,ticket),
%           BeTicketAgent2(ticketagent),
%           time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',350).

 /*  pl=axiom(initiates(pickUp(Ticketagent,Ticket),
   		beTicketAgent2(Ticketagent),
   		Time),
         [beTicketAgent1(Ticketagent)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',350).

 /*  beTicketAgent1(Ticketagent) ->
       initiates(pickUp(Ticketagent, Ticket),
                 beTicketAgent2(Ticketagent),
                 Time).
 */
if beTicketAgent1(Ticketagent)then initiates(pickUp(Ticketagent, Ticket), beTicketAgent2(Ticketagent)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',350).

 /*  reactive_rule([beTicketAgent1(Ticketagent)],
   	      [ initiates(pickUp(Ticketagent,Ticket),
   			  at(beTicketAgent2(Ticketagent),
   			     Time),
   			  Initiates)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',350).

 /*  reactive_rule([beTicketAgent1(Ticketagent)],
   	      [ initiates(pickUp(Ticketagent,Ticket),
   			  at(beTicketAgent2(Ticketagent),
   			     Time),
   			  Initiates)
   	      ]).
 */


% [ticketagent,agent,ticket,time]
% HoldsAt(BeTicketAgent2(ticketagent),time) &
% HoldsAt(KnowRequest(ticketagent,agent,ticket),time) ->
% Happens(HandTo(ticketagent,agent,ticket),time).
 %  clausify_pnf=(holds_at(beTicketAgent2(Ticketagent), Time), holds_at(knowRequest(Ticketagent, Agent, Ticket), Time)->happens(handTo(Ticketagent, Agent, Ticket), Time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',356).

 /*  happens(handTo(Ticketagent, Agent, Ticket), Time) :-
       holds_at(beTicketAgent2(Ticketagent), Time),
       holds_at(knowRequest(Ticketagent, Agent, Ticket),
                Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',356).

 /*  fix_axiom_head(Time) ->
       [ happens(handTo(Ticketagent, Agent, Ticket), Time),
          (->),
         handTo(Ticketagent, Agent, Ticket)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',356).

 /*  pl=axiom(handTo(Ticketagent,Agent,Ticket),
         [ beTicketAgent2(Ticketagent),
   	knowRequest(Ticketagent,Agent,Ticket)
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',356).

 /*  (   beTicketAgent2(Ticketagent),
       knowRequest(Ticketagent, Agent, Ticket)
   ->  handTo(Ticketagent, Agent, Ticket)
   ).
 */
if beTicketAgent2(Ticketagent), knowRequest(Ticketagent, Agent, Ticket)then handTo(Ticketagent, Agent, Ticket).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',356).

 /*  reactive_rule([ beTicketAgent2(Ticketagent),
   		holds(knowRequest(Ticketagent,
   				  Agent,
   				  Ticket),
   		      Holds)
   	      ],
   	      [ happens(handTo(Ticketagent,
   			       Agent,
   			       Ticket),
   			Time_From,
   			Time_Until)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',356).

 /*  reactive_rule([ beTicketAgent2(Ticketagent),
   		holds(knowRequest(Ticketagent,
   				  Agent,
   				  Ticket),
   		      Holds)
   	      ],
   	      [ happens(handTo(Ticketagent,
   			       Agent,
   			       Ticket),
   			Time_From,
   			Time_Until)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',356).

 /*  not(holds_at(beTicketAgent2(Ticketagent), Time)) :-
       holds_at(knowRequest(Ticketagent, Agent, Ticket),
                Time),
       not(happens(handTo(Ticketagent, Agent, Ticket), Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',356).

 /*  pl=axiom(not(beTicketAgent2(Ticketagent)),
         [ knowRequest(Ticketagent,Agent,Ticket),
   	not(handTo(Ticketagent,Agent,Ticket))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',356).

 /*  (   knowRequest(Ticketagent, Agent, Ticket),
       not(handTo(Ticketagent, Agent, Ticket))
   ->  not(beTicketAgent2(Ticketagent))
   ).
 */
if knowRequest(Ticketagent, Agent, Ticket), not handTo(Ticketagent, Agent, Ticket)then not beTicketAgent2(Ticketagent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',356).

 /*  reactive_rule([ holds(knowRequest(Ticketagent,
   				  Agent,
   				  Ticket),
   		      Holds7),
   		not(handTo(Ticketagent,Agent,Ticket))
   	      ],
   	      [not(beTicketAgent2(Ticketagent))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',356).

 /*  reactive_rule([ holds(knowRequest(Ticketagent,
   				  Agent,
   				  Ticket),
   		      Holds7),
   		not(handTo(Ticketagent,Agent,Ticket))
   	      ],
   	      [not(beTicketAgent2(Ticketagent))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',356).

 /*  not(holds_at(knowRequest(Ticketagent, Agent, Ticket), Time)) :-
       holds_at(beTicketAgent2(Ticketagent), Time),
       not(happens(handTo(Ticketagent, Agent, Ticket), Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',356).

 /*  pl=axiom(not(knowRequest(Ticketagent,Agent,Ticket)),
         [ beTicketAgent2(Ticketagent),
   	not(handTo(Ticketagent,Agent,Ticket))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',356).

 /*  (   beTicketAgent2(Ticketagent),
       not(handTo(Ticketagent, Agent, Ticket))
   ->  not(knowRequest(Ticketagent, Agent, Ticket))
   ).
 */
if beTicketAgent2(Ticketagent), not handTo(Ticketagent, Agent, Ticket)then not knowRequest(Ticketagent, Agent, Ticket).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',356).

 /*  reactive_rule([ beTicketAgent2(Ticketagent),
   		not(handTo(Ticketagent,Agent,Ticket))
   	      ],
   	      [ holds(not(knowRequest(Ticketagent,
   				      Agent,
   				      Ticket)),
   		      Holds8)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',356).

 /*  reactive_rule([ beTicketAgent2(Ticketagent),
   		not(handTo(Ticketagent,Agent,Ticket))
   	      ],
   	      [ holds(not(knowRequest(Ticketagent,
   				      Agent,
   				      Ticket)),
   		      Holds8)
   	      ]).
 */


% [ticketagent,ticket,agent,time]
% HoldsAt(BeTicketAgent2(ticketagent),time) ->
% Terminates(HandTo(ticketagent,agent,ticket),
%            BeTicketAgent2(ticketagent),
%            time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',361).

 /*  pl=axiom(terminates(handTo(Ticketagent,Agent,Ticket),
   		 beTicketAgent2(Ticketagent),
   		 Time),
         [beTicketAgent2(Ticketagent)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',361).

 /*  beTicketAgent2(Ticketagent) ->
       terminates(handTo(Ticketagent, Agent, Ticket),
                  beTicketAgent2(Ticketagent),
                  Time).
 */
if beTicketAgent2(Ticketagent)then terminates(handTo(Ticketagent, Agent, Ticket), beTicketAgent2(Ticketagent)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',361).

 /*  reactive_rule([beTicketAgent2(Ticketagent)],
   	      [ terminates(handTo(Ticketagent,
   				  Agent,
   				  Ticket),
   			   at(beTicketAgent2(Ticketagent),
   			      Time),
   			   Terminates)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',361).

 /*  reactive_rule([beTicketAgent2(Ticketagent)],
   	      [ terminates(handTo(Ticketagent,
   				  Agent,
   				  Ticket),
   			   at(beTicketAgent2(Ticketagent),
   			      Time),
   			   Terminates)
   	      ]).
 */


% [ticketagent,ticket,agent,time]
% HoldsAt(BeTicketAgent2(ticketagent),time) ->
% Initiates(HandTo(ticketagent,agent,ticket),
%           BeTicketAgent0(ticketagent),
%           time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',367).

 /*  pl=axiom(initiates(handTo(Ticketagent,Agent,Ticket),
   		beTicketAgent0(Ticketagent),
   		Time),
         [beTicketAgent2(Ticketagent)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',367).

 /*  beTicketAgent2(Ticketagent) ->
       initiates(handTo(Ticketagent, Agent, Ticket),
                 beTicketAgent0(Ticketagent),
                 Time).
 */
if beTicketAgent2(Ticketagent)then initiates(handTo(Ticketagent, Agent, Ticket), beTicketAgent0(Ticketagent)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',367).

 /*  reactive_rule([beTicketAgent2(Ticketagent)],
   	      [ initiates(handTo(Ticketagent,
   				 Agent,
   				 Ticket),
   			  at(beTicketAgent0(Ticketagent),
   			     Time),
   			  Initiates)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',367).

 /*  reactive_rule([beTicketAgent2(Ticketagent)],
   	      [ initiates(handTo(Ticketagent,
   				 Agent,
   				 Ticket),
   			  at(beTicketAgent0(Ticketagent),
   			     Time),
   			  Initiates)
   	      ]).
 */


%; End of file.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',371).
% translate: ending  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e.lps 
