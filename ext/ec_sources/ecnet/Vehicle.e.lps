:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TimeDelayBombing.e',147).
% translate: unskipped  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e.lps 
:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(lps).
% translate: begining  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e.lps 
% Thu, 08 Oct 2020 21:37:29 GMT File: <stream>(0x55894c1dd400)%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; Vehicle: transportation vehicles
%;

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',14).
% sort vehicle: physobj
% subsort(vehicle,physobj).
subsort(vehicle,physobj).

% sort vehiclein: vehicle
% subsort(vehiclein,vehicle).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',14).
subsort(vehiclein,vehicle).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',16).
% sort vehicleon: vehicle
% subsort(vehicleon,vehicle).
subsort(vehicleon,vehicle).

% sort train: vehicleon
% subsort(train,vehicleon).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',16).
subsort(train,vehicleon).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',18).
% sort carriage: vehiclein
% subsort(carriage,vehiclein).
subsort(carriage,vehiclein).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',20).
% sort vehicledoor
% sort(vehicledoor).
sort(vehicledoor).
%; RideTrack

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',24).
% event RideTrack12(train,track)
% event(
%    rideTrack12(train,track)).
events([rideTrack12/2]).
% mpred_prop(
%    rideTrack12(train,track), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',24).
mpred_prop(rideTrack12(train,track),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',26).
% event RideTrack21(train,track)
% event(
%    rideTrack21(train,track)).
events([rideTrack21/2]).
% mpred_prop(
%    rideTrack21(train,track), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',26).
mpred_prop(rideTrack21(train,track),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',28).
% [train,track,time]
% Happens(RideTrack12(train,track),time) ->
% HoldsAt(At(train,Side1(track)),time).
% '->'(
%    metreqs(
%       rideTrack12(Train,Track)), 
%    requires(
%       rideTrack12(Train,Track), 
%       When_Time)).
if rideTrack12(Train, Track)then requires(rideTrack12(Train, Track), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',28).

 /*  reactive_rule([ happens(rideTrack12(Train,Track),
   			Time_From,
   			Time_Until)
   	      ],
   	      [ requires(rideTrack12(Train,Track),
   			 When_Time)
   	      ]).
 */
 %  "% =================================".
% '->'(
%    at(
%       Train, 
%       side1(Track)), 
%    metreqs(
%       rideTrack12(Train,Track))).
rideTrack12(Train, Track)if loc_at(Train, side1(Track)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',28).

 /*  l_events(happens(rideTrack12(Train,Track),
   		 Time_From6,
   		 Time_From6),
   	 [loc_at(Train,side1(Track))]).
 */
 %  "% =================================".
% '->'(
%    not(
%       at(
%          Train, 
%          side1(Track))), 
%    not(
%       rideTrack12(Train,Track))).
if not loc_at(Train, side1(Track))then not rideTrack12(Train, Track).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',28).

 /*  reactive_rule([not(loc_at(Train,side1(Track)))],
   	      [not(rideTrack12(Train,Track))]).
 */
 %  "% =================================".


% [train,track,time]
% Happens(RideTrack21(train,track),time) ->
% HoldsAt(At(train,Side2(track)),time).
% '->'(
%    metreqs(
%       rideTrack21(Train,Track)), 
%    requires(
%       rideTrack21(Train,Track), 
%       When_Time)).
if rideTrack21(Train, Track)then requires(rideTrack21(Train, Track), When_Time).

 /*  reactive_rule([rideTrack21(Train,Track)],
   	      [ requires(rideTrack21(Train,Track),
   			 When_Time)
   	      ]).
 */
 %  "% =================================".
% '->'(
%    at(
%       Train, 
%       side2(Track)), 
%    metreqs(
%       rideTrack21(Train,Track))).
if loc_at(Train, side2(Track))then rideTrack21(Train, Track).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',33).

 /*  reactive_rule([loc_at(Train,side2(Track))],
   	      [rideTrack21(Train,Track)]).
 */
 %  "% =================================".
% '->'(
%    not(
%       at(
%          Train, 
%          side2(Track))), 
%    not(
%       rideTrack21(Train,Track))).
if not loc_at(Train, side2(Track))then not rideTrack21(Train, Track).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',33).

 /*  reactive_rule([not(loc_at(Train,side2(Track)))],
   	      [not(rideTrack21(Train,Track))]).
 */
 %  "% =================================".


% [train,track,location,time]
% Side2(track)=location ->
% Initiates(RideTrack12(train,track),At(train,location),time).
% '->'(
%    side2Pred(Track,Location), 
%    initiates(
%       rideTrack12(Train,Track), 
%       at(Train,Location), 
%       Time)).
if side2Pred(Track, Location)then initiates(rideTrack12(Train, Track), loc_at(Train, Location)at Time, _).

 /*  reactive_rule([side2Pred(Track,Location)],
   	      [ initiates(rideTrack12(Train,Track),
   			  at(loc_at(Train,Location),
   			     Time),
   			  Initiates)
   	      ]).
 */
 %  "% =================================".


% [train,track,location,time]
% Side1(track)=location ->
% Initiates(RideTrack21(train,track),At(train,location),time).
% '->'(
%    side1Pred(Track,Location), 
%    initiates(
%       rideTrack21(Train,Track), 
%       at(Train,Location), 
%       Time)).
if side1Pred(Track, Location)then initiates(rideTrack21(Train, Track), loc_at(Train, Location)at Time, _).

 /*  reactive_rule([side1Pred(Track,Location)],
   	      [ initiates(rideTrack21(Train,Track),
   			  at(loc_at(Train,Location),
   			     Time),
   			  Initiates)
   	      ]).
 */
 %  "% =================================".


% [train,track,location,time]
% Side1(track)=location ->
% Terminates(RideTrack12(train,track),At(train,location),time).
% '->'(
%    side1Pred(Track,Location), 
%    terminates(
%       rideTrack12(Train,Track), 
%       at(Train,Location), 
%       Time)).
if side1Pred(Track, Location)then terminates(rideTrack12(Train, Track), loc_at(Train, Location)at Time, _).

 /*  reactive_rule([side1Pred(Track,Location)],
   	      [ terminates(rideTrack12(Train,Track),
   			   at(loc_at(Train,Location),
   			      Time),
   			   Terminates)
   	      ]).
 */
 %  "% =================================".


% [train,track,location,time]
% Side2(track)=location ->
% Terminates(RideTrack21(train,track),At(train,location),time).
% '->'(
%    side2Pred(Track,Location), 
%    terminates(
%       rideTrack21(Train,Track), 
%       at(Train,Location), 
%       Time)).
if side2Pred(Track, Location)then terminates(rideTrack21(Train, Track), loc_at(Train, Location)at Time, _).

 /*  reactive_rule([side2Pred(Track,Location)],
   	      [ terminates(rideTrack21(Train,Track),
   			   at(loc_at(Train,Location),
   			      Time),
   			   Terminates)
   	      ]).
 */
 %  "% =================================".


%; DriveStreet

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',54).
% event DriveStreet12(vehicle,street)
% event(
%    driveStreet12(vehicle,street)).
events([driveStreet12/2]).
% mpred_prop(
%    driveStreet12(vehicle,street), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',54).
mpred_prop(driveStreet12(vehicle,street),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',56).
% event DriveStreet21(vehicle,street)
% event(
%    driveStreet21(vehicle,street)).
events([driveStreet21/2]).
% mpred_prop(
%    driveStreet21(vehicle,street), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',56).
mpred_prop(driveStreet21(vehicle,street),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',58).
% [vehicle,street,time]
% Happens(DriveStreet12(vehicle,street),time) ->
% HoldsAt(At(vehicle,Side1(street)),time).
% '->'(
%    metreqs(
%       driveStreet12(Vehicle,Street)), 
%    requires(
%       driveStreet12(Vehicle,Street), 
%       When_Time)).
if driveStreet12(Vehicle, Street)then requires(driveStreet12(Vehicle, Street), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',58).

 /*  reactive_rule([driveStreet12(Vehicle,Street)],
   	      [ requires(driveStreet12(Vehicle,Street),
   			 When_Time)
   	      ]).
 */
 %  "% =================================".
% '->'(
%    at(
%       Vehicle, 
%       side1(Street)), 
%    metreqs(
%       driveStreet12(Vehicle,Street))).
if loc_at(Vehicle, side1(Street))then driveStreet12(Vehicle, Street).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',58).

 /*  reactive_rule([loc_at(Vehicle,side1(Street))],
   	      [driveStreet12(Vehicle,Street)]).
 */
 %  "% =================================".
% '->'(
%    not(
%       at(
%          Vehicle, 
%          side1(Street))), 
%    not(
%       driveStreet12(Vehicle,Street))).
if not loc_at(Vehicle, side1(Street))then not driveStreet12(Vehicle, Street).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',58).

 /*  reactive_rule([not(loc_at(Vehicle,side1(Street)))],
   	      [not(driveStreet12(Vehicle,Street))]).
 */
 %  "% =================================".


% [vehicle,street,time]
% Happens(DriveStreet21(vehicle,street),time) ->
% HoldsAt(At(vehicle,Side2(street)),time).
% '->'(
%    metreqs(
%       driveStreet21(Vehicle,Street)), 
%    requires(
%       driveStreet21(Vehicle,Street), 
%       When_Time)).
if driveStreet21(Vehicle, Street)then requires(driveStreet21(Vehicle, Street), When_Time).

 /*  reactive_rule([driveStreet21(Vehicle,Street)],
   	      [ requires(driveStreet21(Vehicle,Street),
   			 When_Time)
   	      ]).
 */
 %  "% =================================".
% '->'(
%    at(
%       Vehicle, 
%       side2(Street)), 
%    metreqs(
%       driveStreet21(Vehicle,Street))).
if loc_at(Vehicle, side2(Street))then driveStreet21(Vehicle, Street).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',63).

 /*  reactive_rule([loc_at(Vehicle,side2(Street))],
   	      [driveStreet21(Vehicle,Street)]).
 */
 %  "% =================================".
% '->'(
%    not(
%       at(
%          Vehicle, 
%          side2(Street))), 
%    not(
%       driveStreet21(Vehicle,Street))).
if not loc_at(Vehicle, side2(Street))then not driveStreet21(Vehicle, Street).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',63).

 /*  reactive_rule([not(loc_at(Vehicle,side2(Street)))],
   	      [not(driveStreet21(Vehicle,Street))]).
 */
 %  "% =================================".


% [vehicle,street,location,time]
% Side2(street)=location ->
% Initiates(DriveStreet12(vehicle,street),At(vehicle,location),time).
% '->'(
%    side2Pred(Street,Location), 
%    initiates(
%       driveStreet12(Vehicle,Street), 
%       at(Vehicle,Location), 
%       Time)).
if side2Pred(Street, Location)then initiates(driveStreet12(Vehicle, Street), loc_at(Vehicle, Location)at Time, _).

 /*  reactive_rule([side2Pred(Street,Location)],
   	      [ initiates(driveStreet12(Vehicle,Street),
   			  at(loc_at(Vehicle,Location),
   			     Time),
   			  Initiates)
   	      ]).
 */
 %  "% =================================".


% [vehicle,street,location,time]
% Side1(street)=location ->
% Initiates(DriveStreet21(vehicle,street),At(vehicle,location),time).
% '->'(
%    side1Pred(Street,Location), 
%    initiates(
%       driveStreet21(Vehicle,Street), 
%       at(Vehicle,Location), 
%       Time)).
if side1Pred(Street, Location)then initiates(driveStreet21(Vehicle, Street), loc_at(Vehicle, Location)at Time, _).

 /*  reactive_rule([side1Pred(Street,Location)],
   	      [ initiates(driveStreet21(Vehicle,Street),
   			  at(loc_at(Vehicle,Location),
   			     Time),
   			  Initiates)
   	      ]).
 */
 %  "% =================================".


% [vehicle,street,location,time]
% Side1(street)=location ->
% Terminates(DriveStreet12(vehicle,street),At(vehicle,location),time).
% '->'(
%    side1Pred(Street,Location), 
%    terminates(
%       driveStreet12(Vehicle,Street), 
%       at(Vehicle,Location), 
%       Time)).
if side1Pred(Street, Location)then terminates(driveStreet12(Vehicle, Street), loc_at(Vehicle, Location)at Time, _).

 /*  reactive_rule([side1Pred(Street,Location)],
   	      [ terminates(driveStreet12(Vehicle,Street),
   			   at(loc_at(Vehicle,Location),
   			      Time),
   			   Terminates)
   	      ]).
 */
 %  "% =================================".


% [vehicle,street,location,time]
% Side2(street)=location ->
% Terminates(DriveStreet21(vehicle,street),At(vehicle,location),time).
% '->'(
%    side2Pred(Street,Location), 
%    terminates(
%       driveStreet21(Vehicle,Street), 
%       at(Vehicle,Location), 
%       Time)).
if side2Pred(Street, Location)then terminates(driveStreet21(Vehicle, Street), loc_at(Vehicle, Location)at Time, _).

 /*  reactive_rule([side2Pred(Street,Location)],
   	      [ terminates(driveStreet21(Vehicle,Street),
   			   at(loc_at(Vehicle,Location),
   			      Time),
   			   Terminates)
   	      ]).
 */
 %  "% =================================".


%; Pulling

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',84).
% event PointToward(agent,horse,street)
% event(
%    pointToward(agent,horse,street)).
actions([pointToward/3]).
% mpred_prop(
%    pointToward(agent,horse,street), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',84).
mpred_prop(pointToward(agent,horse,street),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',86).
% fluent PointedToward(horse,street)
% fluent(
%    pointedToward(horse,street)).
fluents([pointedToward/2]).
% mpred_prop(
%    pointedToward(horse,street), 
%    fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',86).
mpred_prop(pointedToward(horse,street),fluent).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',88).
% [horse,street1,street2,time]
% HoldsAt(PointedToward(horse,street1),time) &
% HoldsAt(PointedToward(horse,street2),time) ->
% street1=street2.
% '->'(
%    ','(
%       pointedToward(Horse,Street2), 
%       not(
%          equals(Street1,Street2))), 
%    not(
%       pointedToward(Horse,Street1))).
not pointedToward(Horse, Street1)if pointedToward(Horse, Street2), not equals(Street1, Street2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',88).

 /*  l_int(holds(not(pointedToward(Horse,Street1)),
   	    Time_At),
         [ holds(pointedToward(Horse,Street2),Time_At),
   	not(equals(Street1,Street2))
         ]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       pointedToward(Horse,Street1), 
%       not(
%          equals(Street2,Street1))), 
%    not(
%       pointedToward(Horse,Street2))).
not pointedToward(Horse, Street2)if pointedToward(Horse, Street1), not equals(Street2, Street1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',88).

 /*  l_int(holds(not(pointedToward(Horse,Street2)),
   	    Time_At5),
         [ holds(pointedToward(Horse,Street1),Time_At5),
   	not(equals(Street2,Street1))
         ]).
 */
 %  "% =================================".


% [agent,horse,street,time]
% Initiates(PointToward(agent,horse,street),
%           PointedToward(horse,street),
%           time).
% initiates(
%    pointToward(Agent,Horse,Street), 
%    pointedToward(Horse,Street), 
%    Time).
pointToward(Agent, Horse, Street)initiates pointedToward(Horse, Street).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',94).

 /*  initiated(happens(pointToward(Agent,Horse,Street),
   		  Time_From,
   		  Time_Until),
   	  pointedToward(Horse,Street),
   	  []).
 */
 %  "% =================================".


% [agent,horse,street1,street2,time]
% HoldsAt(PointedToward(horse,street1),time) ->
% Terminates(PointToward(agent,horse,street2),
%            PointedToward(horse,street1),
%            time).
% '->'(
%    pointedToward(Horse,Street1), 
%    terminates(
%       pointToward(Agent,Horse,Street2), 
%       pointedToward(Horse,Street1), 
%       Time)).
if pointedToward(Horse, Street1)then terminates(pointToward(Agent, Horse, Street2), pointedToward(Horse, Street1)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',99).

 /*  reactive_rule([ holds(pointedToward(Horse,Street1),
   		      Time_At)
   	      ],
   	      [ terminates(pointToward(Agent,
   				       Horse,
   				       Street2),
   			   at(pointedToward(Horse,Street1),
   			      Time),
   			   Terminates)
   	      ]).
 */
 %  "% =================================".


% [horse,vehicle,street,time]
% Terminates(PullStreet12(horse,vehicle,street),
%            PointedToward(horse,street),
%            time).
% terminates(
%    pullStreet12(Horse,Vehicle,Street), 
%    pointedToward(Horse,Street), 
%    Time).
pullStreet12(Horse, Vehicle, Street)terminates pointedToward(Horse, Street).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',105).

 /*  terminated(happens(pullStreet12(Horse,Vehicle,Street),
   		   Time_From,
   		   Time_Until),
   	   pointedToward(Horse,Street),
   	   []).
 */
 %  "% =================================".


% [horse,vehicle,street,time]
% Terminates(PullStreet21(horse,vehicle,street),
%            PointedToward(horse,street),
%            time).
% terminates(
%    pullStreet21(Horse,Vehicle,Street), 
%    pointedToward(Horse,Street), 
%    Time).
pullStreet21(Horse, Vehicle, Street)terminates pointedToward(Horse, Street).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',110).

 /*  terminated(happens(pullStreet21(Horse,Vehicle,Street),
   		   Time_From,
   		   Time_Until),
   	   pointedToward(Horse,Street),
   	   []).
 */
 %  "% =================================".


% [horse,street,time]
% HoldsAt(PointedToward(horse,street),time) ->
% HoldsAt(NearPortal(horse,street),time).
% '->'(
%    pointedToward(Horse,Street), 
%    nearPortal(Horse,Street)).
if pointedToward(Horse, Street)then nearPortal(Horse, Street).

 /*  reactive_rule([ holds(pointedToward(Horse,Street),
   		      Time_At)
   	      ],
   	      [nearPortal(Horse,Street)]).
 */
 %  "% =================================".
% '->'(
%    not(
%       nearPortal(Horse,Street)), 
%    not(
%       pointedToward(Horse,Street))).
not pointedToward(Horse, Street)if not nearPortal(Horse, Street).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',115).

 /*  l_int(holds(not(pointedToward(Horse,Street)),
   	    Time_At4),
         [not(nearPortal(Horse,Street))]).
 */
 %  "% =================================".

% event Lash(agent,horse)
% event(
%    lash(agent,horse)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',117).
actions([lash/2]).
% mpred_prop(
%    lash(agent,horse), 
%    event).
mpred_prop(lash(agent,horse),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',120).
% fluent HitchedTo(horse,vehicle)
% fluent(
%    hitchedTo(horse,vehicle)).
fluents([hitchedTo/2]).
% mpred_prop(
%    hitchedTo(horse,vehicle), 
%    fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',120).
mpred_prop(hitchedTo(horse,vehicle),fluent).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',122).
% [horse,vehicle,location,time]
% HoldsAt(HitchedTo(horse,vehicle),time) &
% HoldsAt(At(vehicle,location),time) ->
% HoldsAt(At(horse,location),time).
% '->'(
%    ','(
%       hitchedTo(Horse,Vehicle), 
%       at(Vehicle,Location)), 
%    at(Horse,Location)).
if hitchedTo(Horse, Vehicle), loc_at(Vehicle, Location)then loc_at(Horse, Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',122).

 /*  reactive_rule([ hitchedTo(Horse,Vehicle),
   		loc_at(Vehicle,Location)
   	      ],
   	      [loc_at(Horse,Location)]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       at(Vehicle,Location), 
%       not(
%          at(Horse,Location))), 
%    not(
%       hitchedTo(Horse,Vehicle))).
if loc_at(Vehicle, Location), not loc_at(Horse, Location)then not hitchedTo(Horse, Vehicle).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',122).

 /*  reactive_rule([ loc_at(Vehicle,Location),
   		not(loc_at(Horse,Location))
   	      ],
   	      [not(hitchedTo(Horse,Vehicle))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       hitchedTo(Horse,Vehicle), 
%       not(
%          at(Horse,Location))), 
%    not(
%       at(Vehicle,Location))).
if hitchedTo(Horse, Vehicle), not loc_at(Horse, Location)then not loc_at(Vehicle, Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',122).

 /*  reactive_rule([ hitchedTo(Horse,Vehicle),
   		not(loc_at(Horse,Location))
   	      ],
   	      [not(loc_at(Vehicle,Location))]).
 */
 %  "% =================================".


% [agent,horse,vehicle,street,time]
% Happens(Lash(agent,horse),time) &
% HoldsAt(PointedToward(horse,street),time) &
% HoldsAt(HitchedTo(horse,vehicle),time) &
% HoldsAt(At(horse,Side1(street)),time) ->
% Happens(PullStreet12(horse,vehicle,street),time).
% '->'(
%    ','(
%       lash(Agent,Horse), 
%       ','(
%          pointedToward(Horse,Street), 
%          ','(
%             hitchedTo(Horse,Vehicle), 
%             at(
%                Horse, 
%                side1(Street))))), 
%    pullStreet12(Horse,Vehicle,Street)).
pullStreet12(Horse, Vehicle, Street)if lash(Agent, Horse), pointedToward(Horse, Street), hitchedTo(Horse, Vehicle), loc_at(Horse, side1(Street)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',128).

 /*  l_events(happens(pullStreet12(Horse,Vehicle,Street),
   		 Time_From,
   		 Time_Until),
   	 [ happens(lash(Agent,Horse),
   		   Time_From,
   		   Time_Until),
   	   holds(pointedToward(Horse,Street),
   		 Time_Until),
   	   hitchedTo(Horse,Vehicle),
   	   loc_at(Horse,side1(Street))
   	 ]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       pointedToward(Horse,Street), 
%       ','(
%          hitchedTo(Horse,Vehicle), 
%          ','(
%             at(
%                Horse, 
%                side1(Street)), 
%             not(
%                pullStreet12(Horse,Vehicle,Street))))), 
%    not(
%       lash(Agent,Horse))).
if pointedToward(Horse, Street), hitchedTo(Horse, Vehicle), loc_at(Horse, side1(Street)), not pullStreet12(Horse, Vehicle, Street)then not lash(Agent, Horse).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',128).

 /*  reactive_rule([ holds(pointedToward(Horse,Street),
   		      Time_At),
   		hitchedTo(Horse,Vehicle),
   		loc_at(Horse,side1(Street)),
   		not(pullStreet12(Horse,
   				 Vehicle,
   				 Street))
   	      ],
   	      [not(lash(Agent,Horse))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       hitchedTo(Horse,Vehicle), 
%       ','(
%          at(
%             Horse, 
%             side1(Street)), 
%          ','(
%             lash(Agent,Horse), 
%             not(
%                pullStreet12(Horse,Vehicle,Street))))), 
%    not(
%       pointedToward(Horse,Street))).
not pointedToward(Horse, Street)if hitchedTo(Horse, Vehicle), loc_at(Horse, side1(Street)), lash(Agent, Horse), not pullStreet12(Horse, Vehicle, Street).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',128).

 /*  l_int(holds(not(pointedToward(Horse,Street)),
   	    Time_At8),
         [ hitchedTo(Horse,Vehicle),
   	loc_at(Horse,side1(Street)),
   	happens(lash(Agent,Horse),
   		Time_At8,
   		Time_At8),
   	not(pullStreet12(Horse,Vehicle,Street))
         ]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       at(
%          Horse, 
%          side1(Street)), 
%       ','(
%          pointedToward(Horse,Street), 
%          ','(
%             lash(Agent,Horse), 
%             not(
%                pullStreet12(Horse,Vehicle,Street))))), 
%    not(
%       hitchedTo(Horse,Vehicle))).
if loc_at(Horse, side1(Street)), pointedToward(Horse, Street), lash(Agent, Horse), not pullStreet12(Horse, Vehicle, Street)then not hitchedTo(Horse, Vehicle).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',128).

 /*  reactive_rule([ loc_at(Horse,side1(Street)),
   		holds(pointedToward(Horse,Street),
   		      Time_At9),
   		happens(lash(Agent,Horse),
   			Time_At9,
   			Time_Until10),
   		not(pullStreet12(Horse,
   				 Vehicle,
   				 Street))
   	      ],
   	      [not(hitchedTo(Horse,Vehicle))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       hitchedTo(Horse,Vehicle), 
%       ','(
%          pointedToward(Horse,Street), 
%          ','(
%             lash(Agent,Horse), 
%             not(
%                pullStreet12(Horse,Vehicle,Street))))), 
%    not(
%       at(
%          Horse, 
%          side1(Street)))).
if hitchedTo(Horse, Vehicle), pointedToward(Horse, Street), lash(Agent, Horse), not pullStreet12(Horse, Vehicle, Street)then not loc_at(Horse, side1(Street)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',128).

 /*  reactive_rule([ hitchedTo(Horse,Vehicle),
   		holds(pointedToward(Horse,Street),
   		      Time_At11),
   		happens(lash(Agent,Horse),
   			Time_At11,
   			Time_Until12),
   		not(pullStreet12(Horse,
   				 Vehicle,
   				 Street))
   	      ],
   	      [not(loc_at(Horse,side1(Street)))]).
 */
 %  "% =================================".


% [agent,horse,vehicle,street,time]
% Happens(Lash(agent,horse),time) &
% HoldsAt(PointedToward(horse,street),time) &
% HoldsAt(HitchedTo(horse,vehicle),time) &
% HoldsAt(At(horse,Side2(street)),time) ->
% Happens(PullStreet21(horse,vehicle,street),time).
% '->'(
%    ','(
%       lash(Agent,Horse), 
%       ','(
%          pointedToward(Horse,Street), 
%          ','(
%             hitchedTo(Horse,Vehicle), 
%             at(
%                Horse, 
%                side2(Street))))), 
%    pullStreet21(Horse,Vehicle,Street)).
pullStreet21(Horse, Vehicle, Street)if lash(Agent, Horse), pointedToward(Horse, Street), hitchedTo(Horse, Vehicle), loc_at(Horse, side2(Street)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',135).

 /*  l_events(happens(pullStreet21(Horse,Vehicle,Street),
   		 Time_From,
   		 Time_Until),
   	 [ happens(lash(Agent,Horse),
   		   Time_From,
   		   Time_Until),
   	   holds(pointedToward(Horse,Street),
   		 Time_Until),
   	   hitchedTo(Horse,Vehicle),
   	   loc_at(Horse,side2(Street))
   	 ]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       pointedToward(Horse,Street), 
%       ','(
%          hitchedTo(Horse,Vehicle), 
%          ','(
%             at(
%                Horse, 
%                side2(Street)), 
%             not(
%                pullStreet21(Horse,Vehicle,Street))))), 
%    not(
%       lash(Agent,Horse))).
if pointedToward(Horse, Street), hitchedTo(Horse, Vehicle), loc_at(Horse, side2(Street)), not pullStreet21(Horse, Vehicle, Street)then not lash(Agent, Horse).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',135).

 /*  reactive_rule([ holds(pointedToward(Horse,Street),
   		      Time_At),
   		hitchedTo(Horse,Vehicle),
   		loc_at(Horse,side2(Street)),
   		not(pullStreet21(Horse,
   				 Vehicle,
   				 Street))
   	      ],
   	      [not(lash(Agent,Horse))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       hitchedTo(Horse,Vehicle), 
%       ','(
%          at(
%             Horse, 
%             side2(Street)), 
%          ','(
%             lash(Agent,Horse), 
%             not(
%                pullStreet21(Horse,Vehicle,Street))))), 
%    not(
%       pointedToward(Horse,Street))).
not pointedToward(Horse, Street)if hitchedTo(Horse, Vehicle), loc_at(Horse, side2(Street)), lash(Agent, Horse), not pullStreet21(Horse, Vehicle, Street).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',135).

 /*  l_int(holds(not(pointedToward(Horse,Street)),
   	    Time_At8),
         [ hitchedTo(Horse,Vehicle),
   	loc_at(Horse,side2(Street)),
   	happens(lash(Agent,Horse),
   		Time_At8,
   		Time_At8),
   	not(pullStreet21(Horse,Vehicle,Street))
         ]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       at(
%          Horse, 
%          side2(Street)), 
%       ','(
%          pointedToward(Horse,Street), 
%          ','(
%             lash(Agent,Horse), 
%             not(
%                pullStreet21(Horse,Vehicle,Street))))), 
%    not(
%       hitchedTo(Horse,Vehicle))).
if loc_at(Horse, side2(Street)), pointedToward(Horse, Street), lash(Agent, Horse), not pullStreet21(Horse, Vehicle, Street)then not hitchedTo(Horse, Vehicle).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',135).

 /*  reactive_rule([ loc_at(Horse,side2(Street)),
   		holds(pointedToward(Horse,Street),
   		      Time_At9),
   		happens(lash(Agent,Horse),
   			Time_At9,
   			Time_Until10),
   		not(pullStreet21(Horse,
   				 Vehicle,
   				 Street))
   	      ],
   	      [not(hitchedTo(Horse,Vehicle))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       hitchedTo(Horse,Vehicle), 
%       ','(
%          pointedToward(Horse,Street), 
%          ','(
%             lash(Agent,Horse), 
%             not(
%                pullStreet21(Horse,Vehicle,Street))))), 
%    not(
%       at(
%          Horse, 
%          side2(Street)))).
if hitchedTo(Horse, Vehicle), pointedToward(Horse, Street), lash(Agent, Horse), not pullStreet21(Horse, Vehicle, Street)then not loc_at(Horse, side2(Street)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',135).

 /*  reactive_rule([ hitchedTo(Horse,Vehicle),
   		holds(pointedToward(Horse,Street),
   		      Time_At11),
   		happens(lash(Agent,Horse),
   			Time_At11,
   			Time_Until12),
   		not(pullStreet21(Horse,
   				 Vehicle,
   				 Street))
   	      ],
   	      [not(loc_at(Horse,side2(Street)))]).
 */
 %  "% =================================".

% event PullStreet12(horse,vehicle,street)
% event(
%    pullStreet12(horse,vehicle,street)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',140).
events([pullStreet12/3]).
% mpred_prop(
%    pullStreet12(horse,vehicle,street), 
%    event).
mpred_prop(pullStreet12(horse,vehicle,street),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',143).
% event PullStreet21(horse,vehicle,street)
% event(
%    pullStreet21(horse,vehicle,street)).
events([pullStreet21/3]).
% mpred_prop(
%    pullStreet21(horse,vehicle,street), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',143).
mpred_prop(pullStreet21(horse,vehicle,street),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',145).
% [horse,vehicle,street,time]
% Happens(PullStreet12(horse,vehicle,street),time) ->
% Happens(DriveStreet12(vehicle,street),time).
% '->'(
%    pullStreet12(Horse,Vehicle,Street), 
%    driveStreet12(Vehicle,Street)).
if pullStreet12(Horse, Vehicle, Street)then driveStreet12(Vehicle, Street).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',145).

 /*  reactive_rule([ happens(pullStreet12(Horse,
   				     Vehicle,
   				     Street),
   			Time_From,
   			Time_Until)
   	      ],
   	      [driveStreet12(Vehicle,Street)]).
 */
 %  "% =================================".
% '->'(
%    not(
%       driveStreet12(Vehicle,Street)), 
%    not(
%       pullStreet12(Horse,Vehicle,Street))).
if not driveStreet12(Vehicle, Street)then not pullStreet12(Horse, Vehicle, Street).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',145).

 /*  reactive_rule([not(driveStreet12(Vehicle,Street))],
   	      [ not(pullStreet12(Horse,
   				 Vehicle,
   				 Street))
   	      ]).
 */
 %  "% =================================".


% [horse,vehicle,street,time]
% Happens(PullStreet21(horse,vehicle,street),time) ->
% Happens(DriveStreet21(vehicle,street),time).
% '->'(
%    pullStreet21(Horse,Vehicle,Street), 
%    driveStreet21(Vehicle,Street)).
if pullStreet21(Horse, Vehicle, Street)then driveStreet21(Vehicle, Street).

 /*  reactive_rule([ happens(pullStreet21(Horse,
   				     Vehicle,
   				     Street),
   			Time_From,
   			Time_Until)
   	      ],
   	      [driveStreet21(Vehicle,Street)]).
 */
 %  "% =================================".
% '->'(
%    not(
%       driveStreet21(Vehicle,Street)), 
%    not(
%       pullStreet21(Horse,Vehicle,Street))).
if not driveStreet21(Vehicle, Street)then not pullStreet21(Horse, Vehicle, Street).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',150).

 /*  reactive_rule([not(driveStreet21(Vehicle,Street))],
   	      [ not(pullStreet21(Horse,
   				 Vehicle,
   				 Street))
   	      ]).
 */
 %  "% =================================".


% [horse,vehicle,street,time]
% Happens(PullStreet12(horse,vehicle,street),time) ->
% HoldsAt(At(horse,Side1(street)),time).
% '->'(
%    metreqs(
%       pullStreet12(Horse,Vehicle,Street)), 
%    requires(
%       pullStreet12(Horse,Vehicle,Street), 
%       When_Time)).
if pullStreet12(Horse, Vehicle, Street)then requires(pullStreet12(Horse, Vehicle, Street), When_Time).

 /*  reactive_rule([ happens(pullStreet12(Horse,
   				     Vehicle,
   				     Street),
   			Time_From,
   			Time_Until)
   	      ],
   	      [ requires(pullStreet12(Horse,
   				      Vehicle,
   				      Street),
   			 When_Time)
   	      ]).
 */
 %  "% =================================".
% '->'(
%    at(
%       Horse, 
%       side1(Street)), 
%    metreqs(
%       pullStreet12(Horse,Vehicle,Street))).
pullStreet12(Horse, Vehicle, Street)if loc_at(Horse, side1(Street)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',154).

 /*  l_events(happens(pullStreet12(Horse,Vehicle,Street),
   		 Time_From7,
   		 Time_From7),
   	 [loc_at(Horse,side1(Street))]).
 */
 %  "% =================================".
% '->'(
%    not(
%       at(
%          Horse, 
%          side1(Street))), 
%    not(
%       pullStreet12(Horse,Vehicle,Street))).
if not loc_at(Horse, side1(Street))then not pullStreet12(Horse, Vehicle, Street).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',154).

 /*  reactive_rule([not(loc_at(Horse,side1(Street)))],
   	      [ not(pullStreet12(Horse,
   				 Vehicle,
   				 Street))
   	      ]).
 */
 %  "% =================================".


% [horse,vehicle,street,time]
% Happens(PullStreet21(horse,vehicle,street),time) ->
% HoldsAt(At(horse,Side2(street)),time).
% '->'(
%    metreqs(
%       pullStreet21(Horse,Vehicle,Street)), 
%    requires(
%       pullStreet21(Horse,Vehicle,Street), 
%       When_Time)).
if pullStreet21(Horse, Vehicle, Street)then requires(pullStreet21(Horse, Vehicle, Street), When_Time).

 /*  reactive_rule([ happens(pullStreet21(Horse,
   				     Vehicle,
   				     Street),
   			Time_From,
   			Time_Until)
   	      ],
   	      [ requires(pullStreet21(Horse,
   				      Vehicle,
   				      Street),
   			 When_Time)
   	      ]).
 */
 %  "% =================================".
% '->'(
%    at(
%       Horse, 
%       side2(Street)), 
%    metreqs(
%       pullStreet21(Horse,Vehicle,Street))).
pullStreet21(Horse, Vehicle, Street)if loc_at(Horse, side2(Street)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',158).

 /*  l_events(happens(pullStreet21(Horse,Vehicle,Street),
   		 Time_From7,
   		 Time_From7),
   	 [loc_at(Horse,side2(Street))]).
 */
 %  "% =================================".
% '->'(
%    not(
%       at(
%          Horse, 
%          side2(Street))), 
%    not(
%       pullStreet21(Horse,Vehicle,Street))).
if not loc_at(Horse, side2(Street))then not pullStreet21(Horse, Vehicle, Street).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',158).

 /*  reactive_rule([not(loc_at(Horse,side2(Street)))],
   	      [ not(pullStreet21(Horse,
   				 Vehicle,
   				 Street))
   	      ]).
 */
 %  "% =================================".


% [horse,vehicle,street,location,time]
% Side2(street)=location ->
% Initiates(PullStreet12(horse,vehicle,street),At(horse,location),time).
% '->'(
%    side2Pred(Street,Location), 
%    initiates(
%       pullStreet12(Horse,Vehicle,Street), 
%       at(Horse,Location), 
%       Time)).
if side2Pred(Street, Location)then initiates(pullStreet12(Horse, Vehicle, Street), loc_at(Horse, Location)at Time, _).

 /*  reactive_rule([side2Pred(Street,Location)],
   	      [ initiates(pullStreet12(Horse,
   				       Vehicle,
   				       Street),
   			  at(loc_at(Horse,Location),
   			     Time),
   			  Initiates)
   	      ]).
 */
 %  "% =================================".


% [horse,vehicle,street,location,time]
% Side1(street)=location ->
% Initiates(PullStreet21(horse,vehicle,street),At(horse,location),time).
% '->'(
%    side1Pred(Street,Location), 
%    initiates(
%       pullStreet21(Horse,Vehicle,Street), 
%       at(Horse,Location), 
%       Time)).
if side1Pred(Street, Location)then initiates(pullStreet21(Horse, Vehicle, Street), loc_at(Horse, Location)at Time, _).

 /*  reactive_rule([side1Pred(Street,Location)],
   	      [ initiates(pullStreet21(Horse,
   				       Vehicle,
   				       Street),
   			  at(loc_at(Horse,Location),
   			     Time),
   			  Initiates)
   	      ]).
 */
 %  "% =================================".


% [horse,vehicle,street,location,time]
% Side1(street)=location ->
% Terminates(PullStreet12(horse,vehicle,street),At(horse,location),time).
% '->'(
%    side1Pred(Street,Location), 
%    terminates(
%       pullStreet12(Horse,Vehicle,Street), 
%       at(Horse,Location), 
%       Time)).
if side1Pred(Street, Location)then terminates(pullStreet12(Horse, Vehicle, Street), loc_at(Horse, Location)at Time, _).

 /*  reactive_rule([side1Pred(Street,Location)],
   	      [ terminates(pullStreet12(Horse,
   					Vehicle,
   					Street),
   			   at(loc_at(Horse,Location),
   			      Time),
   			   Terminates)
   	      ]).
 */
 %  "% =================================".


% [horse,vehicle,street,location,time]
% Side2(street)=location ->
% Terminates(PullStreet21(horse,vehicle,street),At(horse,location),time).
% '->'(
%    side2Pred(Street,Location), 
%    terminates(
%       pullStreet21(Horse,Vehicle,Street), 
%       at(Horse,Location), 
%       Time)).
if side2Pred(Street, Location)then terminates(pullStreet21(Horse, Vehicle, Street), loc_at(Horse, Location)at Time, _).

 /*  reactive_rule([side2Pred(Street,Location)],
   	      [ terminates(pullStreet21(Horse,
   					Vehicle,
   					Street),
   			   at(loc_at(Horse,Location),
   			      Time),
   			   Terminates)
   	      ]).
 */
 %  "% =================================".


%; OnVehicle

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',179).
% fluent OnVehicle(object,vehicleon)
% fluent(
%    onVehicle(object,vehicleon)).
fluents([onVehicle/2]).
% mpred_prop(
%    onVehicle(object,vehicleon), 
%    fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',179).
mpred_prop(onVehicle(object,vehicleon),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',181).
% event GetOnVehicle(agent,vehicleon)
% event(
%    getOnVehicle(agent,vehicleon)).
actions([getOnVehicle/2]).
% mpred_prop(
%    getOnVehicle(agent,vehicleon), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',181).
mpred_prop(getOnVehicle(agent,vehicleon),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',183).
% event GetOffVehicle(agent,vehicleon)
% event(
%    getOffVehicle(agent,vehicleon)).
actions([getOffVehicle/2]).
% mpred_prop(
%    getOffVehicle(agent,vehicleon), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',183).
mpred_prop(getOffVehicle(agent,vehicleon),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',185).
% [vehicleon1,vehicleon2,time]
% HoldsAt(OnVehicle(vehicleon1,vehicleon2),time) ->
% vehicleon1!=vehicleon2.
% '->'(
%    equals(Vehicleon1,Vehicleon2), 
%    not(
%       onVehicle(Vehicleon1,Vehicleon2))).
not onVehicle(Vehicleon1, Vehicleon2)if equals(Vehicleon1, Vehicleon2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',185).

 /*  l_int(holds(not(onVehicle(Vehicleon1,Vehicleon2)),
   	    Time_At),
         [equals(Vehicleon1,Vehicleon2)]).
 */
 %  "% =================================".


% [vehicleon1,vehicleon2,time]
% HoldsAt(OnVehicle(vehicleon1,vehicleon2),time) ->
% !HoldsAt(OnVehicle(vehicleon2,vehicleon1),time).
% '->'(
%    onVehicle(Vehicleon1,Vehicleon2), 
%    not(
%       onVehicle(Vehicleon2,Vehicleon1))).
not onVehicle(Vehicleon2, Vehicleon1)if onVehicle(Vehicleon1, Vehicleon2).

 /*  l_int(holds(not(onVehicle(Vehicleon2,Vehicleon1)),
   	    Time_At),
         [ holds(onVehicle(Vehicleon1,Vehicleon2),
   	      Time_At)
         ]).
 */
 %  "% =================================".
% '->'(
%    not(
%       not(
%          onVehicle(Vehicleon2,Vehicleon1))), 
%    not(
%       onVehicle(Vehicleon1,Vehicleon2))).
not onVehicle(Vehicleon1, Vehicleon2)if not not onVehicle(Vehicleon2, Vehicleon1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',190).

 /*  l_int(holds(not(onVehicle(Vehicleon1,Vehicleon2)),
   	    Time_At4),
         [ holds(not([ holds(not(onVehicle(Vehicleon2,
   					Vehicleon1)),
   			  Time_At4)
   		  ]),
   	      Time_At4)
         ]).
 */
 %  "% =================================".


% [agent,vehicleon,time]
% Initiates(GetOnVehicle(agent,vehicleon),OnVehicle(agent,vehicleon),time).
% initiates(
%    getOnVehicle(Agent,Vehicleon), 
%    onVehicle(Agent,Vehicleon), 
%    Time).
getOnVehicle(Agent, Vehicleon)initiates onVehicle(Agent, Vehicleon).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',194).

 /*  initiated(happens(getOnVehicle(Agent,Vehicleon),
   		  Time_From,
   		  Time_Until),
   	  onVehicle(Agent,Vehicleon),
   	  []).
 */
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',196).
% [agent,vehicleon,time]
% Happens(GetOnVehicle(agent,vehicleon),time) ->
% {location}% 
%  HoldsAt(At(agent,location),time) &
%  HoldsAt(At(vehicleon,location),time).
% '->'(
%    ','(
%       ';'(
%          not(
%             at(Agent,Exists_Location)), 
%          not(
%             at(Vehicleon,Exists_Location))), 
%       some(
%          Exists_Location, 
%          '$kolem_Fn_741'(Agent,Vehicleon,Time))), 
%    not(
%       getOnVehicle(Agent,Vehicleon))).
if (not loc_at(Agent, Exists_Location);not loc_at(Vehicleon, Exists_Location)), some(Exists_Location, '$kolem_Fn_741'(Agent, Vehicleon, Time))then not getOnVehicle(Agent, Vehicleon).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',198).

 /*   reactive_rule([  (not(loc_at(Agent, Exists_Location));not(loc_at(Vehicleon, Exists_Location))),
                      some(Exists_Location,
                           '$kolem_Fn_741'(Agent, Vehicleon, Time))
                    ],
                    [not(getOnVehicle(Agent, Vehicleon))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       getOnVehicle(Agent,Vehicleon), 
%       some(
%          Exists_Location, 
%          '$kolem_Fn_741'(Agent,Vehicleon,Time))), 
%    at(Agent,Exists_Location)).
if getOnVehicle(Agent, Vehicleon), some(Exists_Location, '$kolem_Fn_741'(Agent, Vehicleon, Time))then loc_at(Agent, Exists_Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',198).

 /*  reactive_rule([ happens(getOnVehicle(Agent,Vehicleon),
   			Time_From,
   			Time_Until),
   		some(Exists_Location,
   		     '$kolem_Fn_741'(Agent,
   				     Vehicleon,
   				     Time))
   	      ],
   	      [loc_at(Agent,Exists_Location)]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       getOnVehicle(Agent,Vehicleon), 
%       some(
%          Exists_Location, 
%          '$kolem_Fn_741'(Agent,Vehicleon,Time))), 
%    at(Vehicleon,Exists_Location)).
if getOnVehicle(Agent, Vehicleon), some(Exists_Location, '$kolem_Fn_741'(Agent, Vehicleon, Time))then loc_at(Vehicleon, Exists_Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',198).

 /*  reactive_rule([ happens(getOnVehicle(Agent,Vehicleon),
   			Time_From7,
   			Time_Until8),
   		some(Exists_Location,
   		     '$kolem_Fn_741'(Agent,
   				     Vehicleon,
   				     Time))
   	      ],
   	      [loc_at(Vehicleon,Exists_Location)]).
 */
 %  "% =================================".


% [agent,vehicleon,time]
% Terminates(GetOffVehicle(agent,vehicleon),OnVehicle(agent,vehicleon),time).
% terminates(
%    getOffVehicle(Agent,Vehicleon), 
%    onVehicle(Agent,Vehicleon), 
%    Time).
getOffVehicle(Agent, Vehicleon)terminates onVehicle(Agent, Vehicleon).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',203).

 /*  terminated(happens(getOffVehicle(Agent,Vehicleon),
   		   Time_From,
   		   Time_Until),
   	   onVehicle(Agent,Vehicleon),
   	   []).
 */
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',205).
% [agent,vehicleon,time]
% Happens(GetOffVehicle(agent,vehicleon),time) ->
% HoldsAt(OnVehicle(agent,vehicleon),time).
% '->'(
%    metreqs(
%       getOffVehicle(Agent,Vehicleon)), 
%    requires(
%       getOffVehicle(Agent,Vehicleon), 
%       When_Time)).
if getOffVehicle(Agent, Vehicleon)then requires(getOffVehicle(Agent, Vehicleon), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',205).

 /*  reactive_rule([ happens(getOffVehicle(Agent,Vehicleon),
   			Time_From,
   			Time_Until)
   	      ],
   	      [ requires(getOffVehicle(Agent,Vehicleon),
   			 When_Time)
   	      ]).
 */
 %  "% =================================".
% '->'(
%    onVehicle(Agent,Vehicleon), 
%    metreqs(
%       getOffVehicle(Agent,Vehicleon))).
getOffVehicle(Agent, Vehicleon)if onVehicle(Agent, Vehicleon).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',205).

 /*  l_events(happens(getOffVehicle(Agent,Vehicleon),
   		 Time_From6,
   		 Time_From6),
   	 [ holds(onVehicle(Agent,Vehicleon),
   		 Time_From6)
   	 ]).
 */
 %  "% =================================".
% '->'(
%    not(
%       onVehicle(Agent,Vehicleon)), 
%    not(
%       getOffVehicle(Agent,Vehicleon))).
if not onVehicle(Agent, Vehicleon)then not getOffVehicle(Agent, Vehicleon).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',205).

 /*  reactive_rule([ holds(not(onVehicle(Agent,Vehicleon)),
   		      Time_At)
   	      ],
   	      [not(getOffVehicle(Agent,Vehicleon))]).
 */
 %  "% =================================".


% [agent,vehicleon,location,time]
% Releases(GetOnVehicle(agent,vehicleon),
%          At(agent,location),
%          time).
% releases(
%    getOnVehicle(Agent,Vehicleon), 
%    at(Agent,Location), 
%    Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',210).
releases(getOnVehicle(Agent,Vehicleon),
	 loc_at(Agent,Location),
	 Time).


%;[agent,vehicleon,location1,location2,time]
%;HoldsAt(At(vehicleon,location1),time) &
%;location1 != location2 ->
%;Terminates(GetOffVehicle(agent,vehicleon),
%;           At(agent,location2),
%;           time).
% [agent,vehicleon,location,time]
% HoldsAt(At(vehicleon,location),time) ->
% Initiates(GetOffVehicle(agent,vehicleon),
%           At(agent,location),
%           time).
% '->'(
%    at(Vehicleon,Location), 
%    initiates(
%       getOffVehicle(Agent,Vehicleon), 
%       at(Agent,Location), 
%       Time)).
if loc_at(Vehicleon, Location)then initiates(getOffVehicle(Agent, Vehicleon), loc_at(Agent, Location)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',221).

 /*  reactive_rule([loc_at(Vehicleon,Location)],
   	      [ initiates(getOffVehicle(Agent,Vehicleon),
   			  at(loc_at(Agent,Location),
   			     Time),
   			  Initiates)
   	      ]).
 */
 %  "% =================================".


% [object,vehicleon,location,time]
% HoldsAt(OnVehicle(object,vehicleon),time) &
% HoldsAt(At(vehicleon,location),time) ->
% HoldsAt(At(object,location),time).
% '->'(
%    ','(
%       onVehicle(Object,Vehicleon), 
%       at(Vehicleon,Location)), 
%    at(Object,Location)).
if onVehicle(Object, Vehicleon), loc_at(Vehicleon, Location)then loc_at(Object, Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',228).

 /*  reactive_rule([ holds(onVehicle(Object,Vehicleon),
   		      Time_At),
   		loc_at(Vehicleon,Location)
   	      ],
   	      [loc_at(Object,Location)]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       at(Vehicleon,Location), 
%       not(
%          at(Object,Location))), 
%    not(
%       onVehicle(Object,Vehicleon))).
not onVehicle(Object, Vehicleon)if loc_at(Vehicleon, Location), not loc_at(Object, Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',228).

 /*  l_int(holds(not(onVehicle(Object,Vehicleon)),
   	    Time_At5),
         [ loc_at(Vehicleon,Location),
   	not(loc_at(Object,Location))
         ]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       onVehicle(Object,Vehicleon), 
%       not(
%          at(Object,Location))), 
%    not(
%       at(Vehicleon,Location))).
if onVehicle(Object, Vehicleon), not loc_at(Object, Location)then not loc_at(Vehicleon, Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',228).

 /*  reactive_rule([ holds(onVehicle(Object,Vehicleon),
   		      Time_At6),
   		not(loc_at(Object,Location))
   	      ],
   	      [not(loc_at(Vehicleon,Location))]).
 */
 %  "% =================================".


%; InVehicle

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',234).
% fluent InVehicle(object,vehiclein)
% fluent(
%    inVehicle(object,vehiclein)).
fluents([inVehicle/2]).
% mpred_prop(
%    inVehicle(object,vehiclein), 
%    fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',234).
mpred_prop(inVehicle(object,vehiclein),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',236).
% event GetInVehicle(agent,vehiclein)
% event(
%    getInVehicle(agent,vehiclein)).
actions([getInVehicle/2]).
% mpred_prop(
%    getInVehicle(agent,vehiclein), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',236).
mpred_prop(getInVehicle(agent,vehiclein),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',238).
% event GetOutOfVehicle(agent,vehiclein)
% event(
%    getOutOfVehicle(agent,vehiclein)).
actions([getOutOfVehicle/2]).
% mpred_prop(
%    getOutOfVehicle(agent,vehiclein), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',238).
mpred_prop(getOutOfVehicle(agent,vehiclein),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',240).
% [vehiclein1,vehiclein2,time]
% HoldsAt(InVehicle(vehiclein1,vehiclein2),time) ->
% vehiclein1!=vehiclein2.
% '->'(
%    equals(Vehiclein1,Vehiclein2), 
%    not(
%       inVehicle(Vehiclein1,Vehiclein2))).
not inVehicle(Vehiclein1, Vehiclein2)if equals(Vehiclein1, Vehiclein2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',240).

 /*  l_int(holds(not(inVehicle(Vehiclein1,Vehiclein2)),
   	    Time_At),
         [equals(Vehiclein1,Vehiclein2)]).
 */
 %  "% =================================".


% [vehiclein1,vehiclein2,time]
% HoldsAt(InVehicle(vehiclein1,vehiclein2),time) ->
% !HoldsAt(InVehicle(vehiclein2,vehiclein1),time).
% '->'(
%    inVehicle(Vehiclein1,Vehiclein2), 
%    not(
%       inVehicle(Vehiclein2,Vehiclein1))).
not inVehicle(Vehiclein2, Vehiclein1)if inVehicle(Vehiclein1, Vehiclein2).

 /*  l_int(holds(not(inVehicle(Vehiclein2,Vehiclein1)),
   	    Time_At),
         [ holds(inVehicle(Vehiclein1,Vehiclein2),
   	      Time_At)
         ]).
 */
 %  "% =================================".
% '->'(
%    not(
%       not(
%          inVehicle(Vehiclein2,Vehiclein1))), 
%    not(
%       inVehicle(Vehiclein1,Vehiclein2))).
not inVehicle(Vehiclein1, Vehiclein2)if not not inVehicle(Vehiclein2, Vehiclein1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',245).

 /*  l_int(holds(not(inVehicle(Vehiclein1,Vehiclein2)),
   	    Time_At4),
         [ holds(not([ holds(not(inVehicle(Vehiclein2,
   					Vehiclein1)),
   			  Time_At4)
   		  ]),
   	      Time_At4)
         ]).
 */
 %  "% =================================".


% [agent,vehiclein,time]
% Initiates(GetInVehicle(agent,vehiclein),InVehicle(agent,vehiclein),time).
% initiates(
%    getInVehicle(Agent,Vehiclein), 
%    inVehicle(Agent,Vehiclein), 
%    Time).
getInVehicle(Agent, Vehiclein)initiates inVehicle(Agent, Vehiclein).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',249).

 /*  initiated(happens(getInVehicle(Agent,Vehiclein),
   		  Time_From,
   		  Time_Until),
   	  inVehicle(Agent,Vehiclein),
   	  []).
 */
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',251).
% [agent,vehiclein,time]
% Happens(GetInVehicle(agent,vehiclein),time) ->
% {location}% 
%  HoldsAt(At(agent,location),time) &
%  HoldsAt(At(vehiclein,location),time).
% '->'(
%    ','(
%       ';'(
%          not(
%             at(Agent,Exists_Location)), 
%          not(
%             at(Vehiclein,Exists_Location))), 
%       some(
%          Exists_Location, 
%          '$kolem_Fn_742'(Agent,Vehiclein,Time))), 
%    not(
%       getInVehicle(Agent,Vehiclein))).
if (not loc_at(Agent, Exists_Location);not loc_at(Vehiclein, Exists_Location)), some(Exists_Location, '$kolem_Fn_742'(Agent, Vehiclein, Time))then not getInVehicle(Agent, Vehiclein).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',253).

 /*   reactive_rule([  (not(loc_at(Agent, Exists_Location));not(loc_at(Vehiclein, Exists_Location))),
                      some(Exists_Location,
                           '$kolem_Fn_742'(Agent, Vehiclein, Time))
                    ],
                    [not(getInVehicle(Agent, Vehiclein))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       getInVehicle(Agent,Vehiclein), 
%       some(
%          Exists_Location, 
%          '$kolem_Fn_742'(Agent,Vehiclein,Time))), 
%    at(Agent,Exists_Location)).
if getInVehicle(Agent, Vehiclein), some(Exists_Location, '$kolem_Fn_742'(Agent, Vehiclein, Time))then loc_at(Agent, Exists_Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',253).

 /*  reactive_rule([ happens(getInVehicle(Agent,Vehiclein),
   			Time_From,
   			Time_Until),
   		some(Exists_Location,
   		     '$kolem_Fn_742'(Agent,
   				     Vehiclein,
   				     Time))
   	      ],
   	      [loc_at(Agent,Exists_Location)]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       getInVehicle(Agent,Vehiclein), 
%       some(
%          Exists_Location, 
%          '$kolem_Fn_742'(Agent,Vehiclein,Time))), 
%    at(Vehiclein,Exists_Location)).
if getInVehicle(Agent, Vehiclein), some(Exists_Location, '$kolem_Fn_742'(Agent, Vehiclein, Time))then loc_at(Vehiclein, Exists_Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',253).

 /*  reactive_rule([ happens(getInVehicle(Agent,Vehiclein),
   			Time_From7,
   			Time_Until8),
   		some(Exists_Location,
   		     '$kolem_Fn_742'(Agent,
   				     Vehiclein,
   				     Time))
   	      ],
   	      [loc_at(Vehiclein,Exists_Location)]).
 */
 %  "% =================================".


% [agent,vehiclein,time]
% Terminates(GetOutOfVehicle(agent,vehiclein),InVehicle(agent,vehiclein),time).
% terminates(
%    getOutOfVehicle(Agent,Vehiclein), 
%    inVehicle(Agent,Vehiclein), 
%    Time).
getOutOfVehicle(Agent, Vehiclein)terminates inVehicle(Agent, Vehiclein).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',258).

 /*  terminated(happens(getOutOfVehicle(Agent,Vehiclein),
   		   Time_From,
   		   Time_Until),
   	   inVehicle(Agent,Vehiclein),
   	   []).
 */
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',260).
% [agent,vehiclein,time]
% Happens(GetOutOfVehicle(agent,vehiclein),time) ->
% HoldsAt(InVehicle(agent,vehiclein),time).
% '->'(
%    metreqs(
%       getOutOfVehicle(Agent,Vehiclein)), 
%    requires(
%       getOutOfVehicle(Agent,Vehiclein), 
%       When_Time)).
if getOutOfVehicle(Agent, Vehiclein)then requires(getOutOfVehicle(Agent, Vehiclein), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',260).

 /*  reactive_rule([ happens(getOutOfVehicle(Agent,Vehiclein),
   			Time_From,
   			Time_Until)
   	      ],
   	      [ requires(getOutOfVehicle(Agent,Vehiclein),
   			 When_Time)
   	      ]).
 */
 %  "% =================================".
% '->'(
%    inVehicle(Agent,Vehiclein), 
%    metreqs(
%       getOutOfVehicle(Agent,Vehiclein))).
getOutOfVehicle(Agent, Vehiclein)if inVehicle(Agent, Vehiclein).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',260).

 /*  l_events(happens(getOutOfVehicle(Agent,Vehiclein),
   		 Time_From6,
   		 Time_From6),
   	 [ holds(inVehicle(Agent,Vehiclein),
   		 Time_From6)
   	 ]).
 */
 %  "% =================================".
% '->'(
%    not(
%       inVehicle(Agent,Vehiclein)), 
%    not(
%       getOutOfVehicle(Agent,Vehiclein))).
if not inVehicle(Agent, Vehiclein)then not getOutOfVehicle(Agent, Vehiclein).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',260).

 /*  reactive_rule([ holds(not(inVehicle(Agent,Vehiclein)),
   		      Time_At)
   	      ],
   	      [not(getOutOfVehicle(Agent,Vehiclein))]).
 */
 %  "% =================================".


% [agent,vehiclein,location,time]
% Releases(GetInVehicle(agent,vehiclein),
%          At(agent,location),
%          time).
% releases(
%    getInVehicle(Agent,Vehiclein), 
%    at(Agent,Location), 
%    Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',265).
releases(getInVehicle(Agent,Vehiclein),
	 loc_at(Agent,Location),
	 Time).


%;[agent,vehiclein,location1,location2,time]
%;HoldsAt(At(vehiclein,location1),time) &
%;location1 != location2 ->
%;Terminates(GetOutOfVehicle(agent,vehiclein),
%;           At(agent,location2),
%;           time).
% [agent,vehiclein,location,time]
% HoldsAt(At(vehiclein,location),time) ->
% Initiates(GetOutOfVehicle(agent,vehiclein),
%           At(agent,location),
%           time).
% '->'(
%    at(Vehiclein,Location), 
%    initiates(
%       getOutOfVehicle(Agent,Vehiclein), 
%       at(Agent,Location), 
%       Time)).
if loc_at(Vehiclein, Location)then initiates(getOutOfVehicle(Agent, Vehiclein), loc_at(Agent, Location)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',276).

 /*  reactive_rule([loc_at(Vehiclein,Location)],
   	      [ initiates(getOutOfVehicle(Agent,Vehiclein),
   			  at(loc_at(Agent,Location),
   			     Time),
   			  Initiates)
   	      ]).
 */
 %  "% =================================".


% [object,vehiclein,location,time]
% HoldsAt(InVehicle(object,vehiclein),time) &
% HoldsAt(At(vehiclein,location),time) ->
% HoldsAt(At(object,location),time).
% '->'(
%    ','(
%       inVehicle(Object,Vehiclein), 
%       at(Vehiclein,Location)), 
%    at(Object,Location)).
if inVehicle(Object, Vehiclein), loc_at(Vehiclein, Location)then loc_at(Object, Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',283).

 /*  reactive_rule([ holds(inVehicle(Object,Vehiclein),
   		      Time_At),
   		loc_at(Vehiclein,Location)
   	      ],
   	      [loc_at(Object,Location)]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       at(Vehiclein,Location), 
%       not(
%          at(Object,Location))), 
%    not(
%       inVehicle(Object,Vehiclein))).
not inVehicle(Object, Vehiclein)if loc_at(Vehiclein, Location), not loc_at(Object, Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',283).

 /*  l_int(holds(not(inVehicle(Object,Vehiclein)),
   	    Time_At5),
         [ loc_at(Vehiclein,Location),
   	not(loc_at(Object,Location))
         ]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       inVehicle(Object,Vehiclein), 
%       not(
%          at(Object,Location))), 
%    not(
%       at(Vehiclein,Location))).
if inVehicle(Object, Vehiclein), not loc_at(Object, Location)then not loc_at(Vehiclein, Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',283).

 /*  reactive_rule([ holds(inVehicle(Object,Vehiclein),
   		      Time_At6),
   		not(loc_at(Object,Location))
   	      ],
   	      [not(loc_at(Vehiclein,Location))]).
 */
 %  "% =================================".


%; vehicle door
%; door does not have to be open for entry; passenger can jump in

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',290).
% event VehicleDoorOpen(agent,vehicledoor)
% event(
%    vehicleDoorOpen(agent,vehicledoor)).
actions([vehicleDoorOpen/2]).
% mpred_prop(
%    vehicleDoorOpen(agent,vehicledoor), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',290).
mpred_prop(vehicleDoorOpen(agent,vehicledoor),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',292).
% event VehicleDoorClose(agent,vehicledoor)
% event(
%    vehicleDoorClose(agent,vehicledoor)).
actions([vehicleDoorClose/2]).
% mpred_prop(
%    vehicleDoorClose(agent,vehicledoor), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',292).
mpred_prop(vehicleDoorClose(agent,vehicledoor),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',294).
% fluent VehicleDoorIsOpen(vehicledoor)
% fluent(
%    vehicleDoorIsOpen(vehicledoor)).
fluents([vehicleDoorIsOpen/1]).
% mpred_prop(
%    vehicleDoorIsOpen(vehicledoor), 
%    fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',294).
mpred_prop(vehicleDoorIsOpen(vehicledoor),fluent).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',296).
% [agent,vehicledoor,time]
% Happens(VehicleDoorOpen(agent,vehicledoor),time) ->
% HoldsAt(Awake(agent),time) &
% !HoldsAt(VehicleDoorIsOpen(vehicledoor),time).
% '->'(
%    ';'(
%       not(
%          awake(Agent)), 
%       not(
%          not(
%             vehicleDoorIsOpen(Vehicledoor)))), 
%    not(
%       vehicleDoorOpen(Agent,Vehicledoor))).
if not awake(Agent);not not vehicleDoorIsOpen(Vehicledoor)then not vehicleDoorOpen(Agent, Vehicledoor).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',296).

 /*   reactive_rule([  (not(awake(Agent));not(not(vehicleDoorIsOpen(Vehicledoor))))
                    ],
                    [not(vehicleDoorOpen(Agent, Vehicledoor))]).
 */
 %  "% =================================".
% '->'(
%    metreqs(
%       vehicleDoorOpen(Agent,Vehicledoor)), 
%    requires(
%       vehicleDoorOpen(Agent,Vehicledoor), 
%       When_Time)).
if vehicleDoorOpen(Agent, Vehicledoor)then requires(vehicleDoorOpen(Agent, Vehicledoor), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',296).

 /*  reactive_rule([ happens(vehicleDoorOpen(Agent,Vehicledoor),
   			Time_From,
   			Time_Until)
   	      ],
   	      [ requires(vehicleDoorOpen(Agent,Vehicledoor),
   			 When_Time)
   	      ]).
 */
 %  "% =================================".
% '->'(
%    awake(Agent), 
%    metreqs(
%       vehicleDoorOpen(Agent,Vehicledoor))).
vehicleDoorOpen(Agent, Vehicledoor)if awake(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',296).

 /*  l_events(happens(vehicleDoorOpen(Agent,Vehicledoor),
   		 Time_From6,
   		 Time_From6),
   	 [awake(Agent)]).
 */
 %  "% =================================".
% '->'(
%    metreqs(
%       vehicleDoorOpen(Agent,Vehicledoor)), 
%    requires(
%       vehicleDoorOpen(Agent,Vehicledoor), 
%       When_Time)).
if vehicleDoorOpen(Agent, Vehicledoor)then requires(vehicleDoorOpen(Agent, Vehicledoor), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',296).

 /*  reactive_rule([ happens(vehicleDoorOpen(Agent,Vehicledoor),
   			Time_From7,
   			Time_Until8)
   	      ],
   	      [ requires(vehicleDoorOpen(Agent,Vehicledoor),
   			 When_Time)
   	      ]).
 */
 %  "% =================================".
% '->'(
%    not(
%       vehicleDoorIsOpen(Vehicledoor)), 
%    metreqs(
%       vehicleDoorOpen(Agent,Vehicledoor))).
vehicleDoorOpen(Agent, Vehicledoor)if not vehicleDoorIsOpen(Vehicledoor).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',296).

 /*  l_events(happens(vehicleDoorOpen(Agent,Vehicledoor),
   		 Time_From9,
   		 Time_From9),
   	 [ holds(not(vehicleDoorIsOpen(Vehicledoor)),
   		 Time_From9)
   	 ]).
 */
 %  "% =================================".


% [agent,vehicledoor,time]
% Initiates(VehicleDoorOpen(agent,vehicledoor),
%           VehicleDoorIsOpen(vehicledoor),
%           time).
% initiates(
%    vehicleDoorOpen(Agent,Vehicledoor), 
%    vehicleDoorIsOpen(Vehicledoor), 
%    Time).
vehicleDoorOpen(Agent, Vehicledoor)initiates vehicleDoorIsOpen(Vehicledoor).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',302).

 /*  initiated(happens(vehicleDoorOpen(Agent,Vehicledoor),
   		  Time_From,
   		  Time_Until),
   	  vehicleDoorIsOpen(Vehicledoor),
   	  []).
 */
 %  "% =================================".


% [agent,vehicledoor,time]
% Happens(VehicleDoorClose(agent,vehicledoor),time) ->
% HoldsAt(Awake(agent),time) &
% HoldsAt(VehicleDoorIsOpen(vehicledoor),time).
% '->'(
%    ';'(
%       not(
%          awake(Agent)), 
%       not(
%          vehicleDoorIsOpen(Vehicledoor))), 
%    not(
%       vehicleDoorClose(Agent,Vehicledoor))).
if not awake(Agent);not vehicleDoorIsOpen(Vehicledoor)then not vehicleDoorClose(Agent, Vehicledoor).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',307).

 /*   reactive_rule([  (not(awake(Agent));not(vehicleDoorIsOpen(Vehicledoor)))
                    ],
                    [not(vehicleDoorClose(Agent, Vehicledoor))]).
 */
 %  "% =================================".
% '->'(
%    metreqs(
%       vehicleDoorClose(Agent,Vehicledoor)), 
%    requires(
%       vehicleDoorClose(Agent,Vehicledoor), 
%       When_Time)).
if vehicleDoorClose(Agent, Vehicledoor)then requires(vehicleDoorClose(Agent, Vehicledoor), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',307).

 /*  reactive_rule([ happens(vehicleDoorClose(Agent,Vehicledoor),
   			Time_From,
   			Time_Until)
   	      ],
   	      [ requires(vehicleDoorClose(Agent,
   					  Vehicledoor),
   			 When_Time)
   	      ]).
 */
 %  "% =================================".
% '->'(
%    awake(Agent), 
%    metreqs(
%       vehicleDoorClose(Agent,Vehicledoor))).
vehicleDoorClose(Agent, Vehicledoor)if awake(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',307).

 /*  l_events(happens(vehicleDoorClose(Agent,Vehicledoor),
   		 Time_From6,
   		 Time_From6),
   	 [awake(Agent)]).
 */
 %  "% =================================".
% '->'(
%    metreqs(
%       vehicleDoorClose(Agent,Vehicledoor)), 
%    requires(
%       vehicleDoorClose(Agent,Vehicledoor), 
%       When_Time)).
if vehicleDoorClose(Agent, Vehicledoor)then requires(vehicleDoorClose(Agent, Vehicledoor), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',307).

 /*  reactive_rule([ happens(vehicleDoorClose(Agent,Vehicledoor),
   			Time_From7,
   			Time_Until8)
   	      ],
   	      [ requires(vehicleDoorClose(Agent,
   					  Vehicledoor),
   			 When_Time)
   	      ]).
 */
 %  "% =================================".
% '->'(
%    vehicleDoorIsOpen(Vehicledoor), 
%    metreqs(
%       vehicleDoorClose(Agent,Vehicledoor))).
vehicleDoorClose(Agent, Vehicledoor)if vehicleDoorIsOpen(Vehicledoor).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',307).

 /*  l_events(happens(vehicleDoorClose(Agent,Vehicledoor),
   		 Time_From9,
   		 Time_From9),
   	 [holds(vehicleDoorIsOpen(Vehicledoor),Time_From9)]).
 */
 %  "% =================================".


% [agent,vehicledoor,time]
% Terminates(VehicleDoorClose(agent,vehicledoor),
%            VehicleDoorIsOpen(vehicledoor),
%            time).
% terminates(
%    vehicleDoorClose(Agent,Vehicledoor), 
%    vehicleDoorIsOpen(Vehicledoor), 
%    Time).
vehicleDoorClose(Agent, Vehicledoor)terminates vehicleDoorIsOpen(Vehicledoor).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',312).

 /*  terminated(happens(vehicleDoorClose(Agent,Vehicledoor),
   		   Time_From,
   		   Time_Until),
   	   vehicleDoorIsOpen(Vehicledoor),
   	   []).
 */
 %  "% =================================".


%; ticketagent

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',318).
% sort ticketagent: agent
% subsort(ticketagent,agent).
subsort(ticketagent,agent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',320).
% fluent BeTicketAgent0(ticketagent)
% fluent(
%    beTicketAgent0(ticketagent)).
fluents([beTicketAgent0/1]).
% mpred_prop(
%    beTicketAgent0(ticketagent), 
%    fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',320).
mpred_prop(beTicketAgent0(ticketagent),fluent).

% fluent BeTicketAgent1(ticketagent)
% fluent(
%    beTicketAgent1(ticketagent)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',320).
fluents([beTicketAgent1/1]).
% mpred_prop(
%    beTicketAgent1(ticketagent), 
%    fluent).
mpred_prop(beTicketAgent1(ticketagent),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',322).
% fluent BeTicketAgent2(ticketagent)
% fluent(
%    beTicketAgent2(ticketagent)).
fluents([beTicketAgent2/1]).
% mpred_prop(
%    beTicketAgent2(ticketagent), 
%    fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',322).
mpred_prop(beTicketAgent2(ticketagent),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',324).
% xor BeTicketAgent0, BeTicketAgent1, BeTicketAgent2
% xor(
%    ==>, 
%    [ beTicketAgent0, 
%      beTicketAgent1, 
%      beTicketAgent2 ]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',324).
==>xor[beTicketAgent0,beTicketAgent1,beTicketAgent2].


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',326).
% [ticketagent,agent,ticket,time]
% HoldsAt(BeTicketAgent0(ticketagent),time) ->
% Terminates(Request(agent,ticketagent,ticket),
%            BeTicketAgent0(ticketagent),
%            time).
% '->'(
%    beTicketAgent0(Ticketagent), 
%    terminates(
%       request(Agent,Ticketagent,Ticket), 
%       beTicketAgent0(Ticketagent), 
%       Time)).
if beTicketAgent0(Ticketagent)then terminates(request(Agent, Ticketagent, Ticket), beTicketAgent0(Ticketagent)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',326).

 /*  reactive_rule([beTicketAgent0(Ticketagent)],
   	      [ terminates(request(Agent,
   				   Ticketagent,
   				   Ticket),
   			   at(beTicketAgent0(Ticketagent),
   			      Time),
   			   Terminates)
   	      ]).
 */
 %  "% =================================".


% [ticketagent,agent,ticket,time]
% HoldsAt(BeTicketAgent0(ticketagent),time) ->
% Initiates(Request(agent,ticketagent,ticket),
%           BeTicketAgent1(ticketagent),
%           time).
% '->'(
%    beTicketAgent0(Ticketagent), 
%    initiates(
%       request(Agent,Ticketagent,Ticket), 
%       beTicketAgent1(Ticketagent), 
%       Time)).
if beTicketAgent0(Ticketagent)then initiates(request(Agent, Ticketagent, Ticket), beTicketAgent1(Ticketagent)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',333).

 /*  reactive_rule([beTicketAgent0(Ticketagent)],
   	      [ initiates(request(Agent,
   				  Ticketagent,
   				  Ticket),
   			  at(beTicketAgent1(Ticketagent),
   			     Time),
   			  Initiates)
   	      ]).
 */
 %  "% =================================".


% [ticketagent,agent,ticket,time]
% HoldsAt(BeTicketAgent1(ticketagent),time) &
% HoldsAt(KnowRequest(ticketagent,agent,ticket),time) ->
% Happens(PickUp(ticketagent,ticket),time).
% '->'(
%    ','(
%       beTicketAgent1(Ticketagent), 
%       knowRequest(Ticketagent,Agent,Ticket)), 
%    pickUp(Ticketagent,Ticket)).
pickUp(Ticketagent, Ticket)if beTicketAgent1(Ticketagent), knowRequest(Ticketagent, Agent, Ticket).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',339).

 /*  l_events(happens(pickUp(Ticketagent,Ticket),
   		 Time_From,
   		 Time_From),
   	 [ beTicketAgent1(Ticketagent),
   	   holds(knowRequest(Ticketagent,
   			     Agent,
   			     Ticket),
   		 Time_From)
   	 ]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       knowRequest(Ticketagent,Agent,Ticket), 
%       not(
%          pickUp(Ticketagent,Ticket))), 
%    not(
%       beTicketAgent1(Ticketagent))).
if knowRequest(Ticketagent, Agent, Ticket), not pickUp(Ticketagent, Ticket)then not beTicketAgent1(Ticketagent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',339).

 /*  reactive_rule([ holds(knowRequest(Ticketagent,
   				  Agent,
   				  Ticket),
   		      Time_At),
   		not(pickUp(Ticketagent,Ticket))
   	      ],
   	      [not(beTicketAgent1(Ticketagent))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       beTicketAgent1(Ticketagent), 
%       not(
%          pickUp(Ticketagent,Ticket))), 
%    not(
%       knowRequest(Ticketagent,Agent,Ticket))).
not knowRequest(Ticketagent, Agent, Ticket)if beTicketAgent1(Ticketagent), not pickUp(Ticketagent, Ticket).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',339).

 /*  l_int(holds(not(knowRequest(Ticketagent,Agent,Ticket)),
   	    Time_At6),
         [ beTicketAgent1(Ticketagent),
   	not(pickUp(Ticketagent,Ticket))
         ]).
 */
 %  "% =================================".


% [ticketagent,ticket,time]
% HoldsAt(BeTicketAgent1(ticketagent),time) ->
% Terminates(PickUp(ticketagent,ticket),
%            BeTicketAgent1(ticketagent),
%            time).
% '->'(
%    beTicketAgent1(Ticketagent), 
%    terminates(
%       pickUp(Ticketagent,Ticket), 
%       beTicketAgent1(Ticketagent), 
%       Time)).
if beTicketAgent1(Ticketagent)then terminates(pickUp(Ticketagent, Ticket), beTicketAgent1(Ticketagent)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',344).

 /*  reactive_rule([beTicketAgent1(Ticketagent)],
   	      [ terminates(pickUp(Ticketagent,Ticket),
   			   at(beTicketAgent1(Ticketagent),
   			      Time),
   			   Terminates)
   	      ]).
 */
 %  "% =================================".


% [ticketagent,ticket,time]
% HoldsAt(BeTicketAgent1(ticketagent),time) ->
% Initiates(PickUp(ticketagent,ticket),
%           BeTicketAgent2(ticketagent),
%           time).
% '->'(
%    beTicketAgent1(Ticketagent), 
%    initiates(
%       pickUp(Ticketagent,Ticket), 
%       beTicketAgent2(Ticketagent), 
%       Time)).
if beTicketAgent1(Ticketagent)then initiates(pickUp(Ticketagent, Ticket), beTicketAgent2(Ticketagent)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',350).

 /*  reactive_rule([beTicketAgent1(Ticketagent)],
   	      [ initiates(pickUp(Ticketagent,Ticket),
   			  at(beTicketAgent2(Ticketagent),
   			     Time),
   			  Initiates)
   	      ]).
 */
 %  "% =================================".


% [ticketagent,agent,ticket,time]
% HoldsAt(BeTicketAgent2(ticketagent),time) &
% HoldsAt(KnowRequest(ticketagent,agent,ticket),time) ->
% Happens(HandTo(ticketagent,agent,ticket),time).
% '->'(
%    ','(
%       beTicketAgent2(Ticketagent), 
%       knowRequest(Ticketagent,Agent,Ticket)), 
%    handTo(Ticketagent,Agent,Ticket)).
handTo(Ticketagent, Agent, Ticket)if beTicketAgent2(Ticketagent), knowRequest(Ticketagent, Agent, Ticket).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',356).

 /*  l_events(happens(handTo(Ticketagent,Agent,Ticket),
   		 Time_From,
   		 Time_From),
   	 [ beTicketAgent2(Ticketagent),
   	   holds(knowRequest(Ticketagent,
   			     Agent,
   			     Ticket),
   		 Time_From)
   	 ]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       knowRequest(Ticketagent,Agent,Ticket), 
%       not(
%          handTo(Ticketagent,Agent,Ticket))), 
%    not(
%       beTicketAgent2(Ticketagent))).
if knowRequest(Ticketagent, Agent, Ticket), not handTo(Ticketagent, Agent, Ticket)then not beTicketAgent2(Ticketagent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',356).

 /*  reactive_rule([ holds(knowRequest(Ticketagent,
   				  Agent,
   				  Ticket),
   		      Time_At),
   		not(handTo(Ticketagent,Agent,Ticket))
   	      ],
   	      [not(beTicketAgent2(Ticketagent))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       beTicketAgent2(Ticketagent), 
%       not(
%          handTo(Ticketagent,Agent,Ticket))), 
%    not(
%       knowRequest(Ticketagent,Agent,Ticket))).
not knowRequest(Ticketagent, Agent, Ticket)if beTicketAgent2(Ticketagent), not handTo(Ticketagent, Agent, Ticket).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',356).

 /*  l_int(holds(not(knowRequest(Ticketagent,Agent,Ticket)),
   	    Time_At6),
         [ beTicketAgent2(Ticketagent),
   	not(handTo(Ticketagent,Agent,Ticket))
         ]).
 */
 %  "% =================================".


% [ticketagent,ticket,agent,time]
% HoldsAt(BeTicketAgent2(ticketagent),time) ->
% Terminates(HandTo(ticketagent,agent,ticket),
%            BeTicketAgent2(ticketagent),
%            time).
% '->'(
%    beTicketAgent2(Ticketagent), 
%    terminates(
%       handTo(Ticketagent,Agent,Ticket), 
%       beTicketAgent2(Ticketagent), 
%       Time)).
if beTicketAgent2(Ticketagent)then terminates(handTo(Ticketagent, Agent, Ticket), beTicketAgent2(Ticketagent)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',361).

 /*  reactive_rule([beTicketAgent2(Ticketagent)],
   	      [ terminates(handTo(Ticketagent,
   				  Agent,
   				  Ticket),
   			   at(beTicketAgent2(Ticketagent),
   			      Time),
   			   Terminates)
   	      ]).
 */
 %  "% =================================".


% [ticketagent,ticket,agent,time]
% HoldsAt(BeTicketAgent2(ticketagent),time) ->
% Initiates(HandTo(ticketagent,agent,ticket),
%           BeTicketAgent0(ticketagent),
%           time).
% '->'(
%    beTicketAgent2(Ticketagent), 
%    initiates(
%       handTo(Ticketagent,Agent,Ticket), 
%       beTicketAgent0(Ticketagent), 
%       Time)).
if beTicketAgent2(Ticketagent)then initiates(handTo(Ticketagent, Agent, Ticket), beTicketAgent0(Ticketagent)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',367).

 /*  reactive_rule([beTicketAgent2(Ticketagent)],
   	      [ initiates(handTo(Ticketagent,
   				 Agent,
   				 Ticket),
   			  at(beTicketAgent0(Ticketagent),
   			     Time),
   			  Initiates)
   	      ]).
 */
 %  "% =================================".


%; End of file.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',371).
% translate: ending  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e.lps 
