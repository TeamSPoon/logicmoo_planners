:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',157).
% From E: 
% 
% :-call_pel_directive(translate(unskipped,'/pack/logicmoo_ec/ext/ec_sources/ecnet/Bomb.e.lps')).
:- call_pel_directive(translate(unskipped,
                                '/pack/logicmoo_ec/ext/ec_sources/ecnet/Bomb.e.lps')).
:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(lps).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',157).
% From E: 
% 
% :-call_pel_directive(translate(begining,'/pack/logicmoo_ec/ext/ec_sources/ecnet/Bomb.e.lps')).
:- call_pel_directive(translate(begining,
                                '/pack/logicmoo_ec/ext/ec_sources/ecnet/Bomb.e.lps')).
% Sat, 10 Oct 2020 14:56:00 GMT File: <stream>(0x5597f2b8f700)%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; bomb
%; agent is nondeterministically killed.

% fluent KilledDeterminingFluent(agent)
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Bomb.e',13).
% From E: 
% 
% fluent(killedDeterminingFluent(agent)).
mpred_prop(killedDeterminingFluent(agent),fluent).
fluents([killedDeterminingFluent/1]).

% noninertial KilledDeterminingFluent
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Bomb.e',15).
% From E: 
% 
% :-call_pel_directive(noninertial(killedDeterminingFluent)).
:- call_pel_directive(noninertial(killedDeterminingFluent)).
%; agent is nondeterministically injured.

% fluent InjuredDeterminingFluent(agent)
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Bomb.e',17).
% From E: 
% 
% fluent(injuredDeterminingFluent(agent)).
mpred_prop(injuredDeterminingFluent(agent),fluent).
fluents([injuredDeterminingFluent/1]).

% noninertial InjuredDeterminingFluent
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Bomb.e',19).
% From E: 
% 
% :-call_pel_directive(noninertial(injuredDeterminingFluent)).
:- call_pel_directive(noninertial(injuredDeterminingFluent)).
%; physobj is nondeterministically destroyed.

% fluent DestroyedDeterminingFluent(physobj)
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Bomb.e',21).
% From E: 
% 
% fluent(destroyedDeterminingFluent(physobj)).
mpred_prop(destroyedDeterminingFluent(physobj),fluent).
fluents([destroyedDeterminingFluent/1]).

% noninertial DestroyedDeterminingFluent
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Bomb.e',23).
% From E: 
% 
% :-call_pel_directive(noninertial(destroyedDeterminingFluent)).
:- call_pel_directive(noninertial(destroyedDeterminingFluent)).
%; physobj is nondeterministically damaged.

% fluent DamagedDeterminingFluent(physobj)
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Bomb.e',25).
% From E: 
% 
% fluent(damagedDeterminingFluent(physobj)).
mpred_prop(damagedDeterminingFluent(physobj),fluent).
fluents([damagedDeterminingFluent/1]).

% noninertial DamagedDeterminingFluent
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Bomb.e',27).
% From E: 
% 
% :-call_pel_directive(noninertial(damagedDeterminingFluent)).
:- call_pel_directive(noninertial(damagedDeterminingFluent)).
%; agent activates bomb.

% event BombActivate(agent,bomb)
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Bomb.e',29).
% From E: 
% 
% event(bombActivate(agent,bomb)).
events([bombActivate/2]).
mpred_prop(bombActivate(agent,bomb),action).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Bomb.e',29).
actions([bombActivate/2]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Bomb.e',32).
%; agent deactivates bomb.

% event BombDeactivate(agent,bomb)
% From E: 
% 
% event(bombDeactivate(agent,bomb)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Bomb.e',32).
events([bombDeactivate/2]).
mpred_prop(bombDeactivate(agent,bomb),action).
actions([bombDeactivate/2]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Bomb.e',35).
%; bomb explodes.

% event BombExplode(bomb)
% From E: 
% 
% event(bombExplode(bomb)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Bomb.e',35).
mpred_prop(bombExplode(bomb),event).
events([bombExplode/1]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Bomb.e',38).
%; bomb is activated.

% fluent BombActivated(bomb)
% From E: 
% 
% fluent(bombActivated(bomb)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Bomb.e',38).
mpred_prop(bombActivated(bomb),fluent).
fluents([bombActivated/1]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Bomb.e',41).
%; The timer value of bomb is offset.

% fluent BombTimerValue(bomb,offset)
% From E: 
% 
% fluent(bombTimerValue(bomb,offset)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Bomb.e',41).
mpred_prop(bombTimerValue(bomb,offset),fluent).
fluents([bombTimerValue/2]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Bomb.e',44).
%; The timer value of bomb is decremented.

% event BombDecrementTimer(bomb)
% From E: 
% 
% event(bombDecrementTimer(bomb)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Bomb.e',44).
mpred_prop(bombDecrementTimer(bomb),event).
events([bombDecrementTimer/1]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Bomb.e',47).
%; The time delay of bomb is offset.

% function BombTimeDelay(bomb): offset
% From E: 
% 
% function(bombTimeDelay(bomb),offset).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Bomb.e',47).
function(bombTimeDelay(bomb),offset).
%; A state constraint says that a bomb has one timer
%; value at a time:
% [bomb,offset1,offset2,time]
% HoldsAt(BombTimerValue(bomb,offset1),time) &
% HoldsAt(BombTimerValue(bomb,offset2),time) ->
% offset1=offset2.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Bomb.e',52).
% From E: 
% 
% '->'(
%    (holds_at(bombTimerValue(Bomb,Offset1),Time) , 
%     holds_at(bombTimerValue(Bomb,Offset2),Time)), 
%    Offset1=Offset2).
 %   [Time].
false not equals(Offset1, Offset2), bombTimerValue(Bomb, Offset1), bombTimerValue(Bomb, Offset2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Bomb.e',52).

 /*  d_pre([ not(equals(Offset1,Offset2)),
   	holds(bombTimerValue(Bomb,Offset1),Time_At),
   	holds(bombTimerValue(Bomb,Offset2),Time_At)
         ]).
 */
 %  "% =================================".


%; An effect axiom states that if a bomb is intact and
%; an agent activates the bomb,
%; the bomb will be activated:
% [agent,bomb,time]
% HoldsAt(Intact(bomb),time) ->
% Initiates(BombActivate(agent,bomb),
%           BombActivated(bomb),
%           time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Bomb.e',60).
% From E: 
% 
% '->'(
%    holds_at(intact(Bomb),Time), 
%    initiates_at(
%       bombActivate(Agent,Bomb), 
%       bombActivated(Bomb), 
%       Time)).
 %   [Time].
bombActivate(Agent, Bomb)initiates bombActivated(Bomb)if intact(Bomb).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Bomb.e',60).

 /*  initiated(happens(bombActivate(Agent,Bomb),
   		  Time_From,
   		  Time_Until),
   	  bombActivated(Bomb),
   	  [holds(intact(Bomb),Time_From)]).
 */
 %  "% =================================".


%; A precondition axiom states that
%; for an agent to activate a bomb,
%; the agent must be holding the bomb:
% [agent,bomb,time]
% Happens(BombActivate(agent,bomb),time) ->
% HoldsAt(Holding(agent,bomb),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Bomb.e',69).
% From E: 
% 
% '->'(
%    happens_at(bombActivate(Agent,Bomb),Time), 
%    holds_at(holding(Agent,Bomb),Time)).
 %   [Time].
holding(Agent, Bomb)if bombActivate(Agent, Bomb).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Bomb.e',69).

 /*  l_int(holds(holding(Agent,Bomb),Time_At),
         [ happens(bombActivate(Agent,Bomb),
   		Time_At,
   		Time_At)
         ]).
 */
 %  "% =================================".


%; An effect axiom states that if a bomb is intact and
%; an agent deactivates the bomb,
%; the bomb will no longer be activated:
% [agent,bomb,time]
% HoldsAt(Intact(bomb),time) ->
% Terminates(BombDeactivate(agent,bomb),
%            BombActivated(bomb),
%            time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Bomb.e',76).
% From E: 
% 
% '->'(
%    holds_at(intact(Bomb),Time), 
%    terminates_at(
%       bombDeactivate(Agent,Bomb), 
%       bombActivated(Bomb), 
%       Time)).
 %   [Time].
bombDeactivate(Agent, Bomb)terminates bombActivated(Bomb)if intact(Bomb).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Bomb.e',76).

 /*  terminated(happens(bombDeactivate(Agent,Bomb),
   		   Time_From,
   		   Time_Until),
   	   bombActivated(Bomb),
   	   [holds(intact(Bomb),Time_From)]).
 */
 %  "% =================================".


%; An axiom states that if a bomb explodes, the
%; bomb destroys the bomb:
% [bomb,time]
% Happens(BombExplode(bomb),time) ->
% Happens(Destroy(bomb,bomb),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Bomb.e',84).
% From E: 
% 
% '->'(
%    happens_at(bombExplode(Bomb),Time), 
%    happens_at(destroy(Bomb,Bomb),Time)).
 %   [Time].
destroy(Bomb, Bomb)if bombExplode(Bomb).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Bomb.e',84).

 /*  l_events(happens(destroy(Bomb,Bomb),
   		 Time_From,
   		 Time_Until),
   	 [ happens(bombExplode(Bomb),
   		   Time_From,
   		   Time_Until)
   	 ]).
 */
 %  "% =================================".


%; An effect axiom states that if a bomb explodes,
%; the bomb is no longer activated:
% [bomb,time]
% Terminates(BombExplode(bomb),BombActivated(bomb),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Bomb.e',90).
% From E: 
% 
% terminates_at(
%    bombExplode(Bomb), 
%    bombActivated(Bomb), 
%    Time).
 %   [Time].
bombExplode(Bomb)terminates bombActivated(Bomb).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Bomb.e',90).

 /*  terminated(happens(bombExplode(Bomb),
   		   Time_From,
   		   Time_Until),
   	   bombActivated(Bomb),
   	   []).
 */
 %  "% =================================".


%; A trigger axiom states that
%; if a bomb is activated,
%; the timer value of the bomb is a timer value, and
%; the timer value is greater than zero,
%; the timer value of the bomb will be decremented:
% [bomb,offset,time]
% HoldsAt(BombActivated(bomb),time) &
% HoldsAt(BombTimerValue(bomb,offset),time) &
% (offset > 0) ->
% Happens(BombDecrementTimer(bomb),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Bomb.e',98).
% From E: 
% 
% '->'(
%    (holds_at(bombActivated(Bomb),Time) , 
%      holds_at(bombTimerValue(Bomb,Offset),Time) , 
%     Offset>0), 
%    happens_at(bombDecrementTimer(Bomb),Time)).
 %   [Time].
false not bombDecrementTimer(Bomb), bombActivated(Bomb), bombTimerValue(Bomb, Offset), comparison(Offset, 0, >).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Bomb.e',98).

 /*  d_pre([ not(bombDecrementTimer(Bomb)),
   	holds(bombActivated(Bomb),Time_At),
   	holds(bombTimerValue(Bomb,Offset),Time_At),
   	comparison(Offset,0,>)
         ]).
 */
 %  "% =================================".


%; An effect axiom states that
%; if the timer value of the bomb is a timer value and
%; the timer value of the bomb is decremented,
%; the timer value of the bomb will be the timer value minus one:
% [bomb,offset1,offset2,time]
% HoldsAt(BombTimerValue(bomb,offset1),time) &
% offset2 = offset1-1 ->
% Initiates(BombDecrementTimer(bomb),
%           BombTimerValue(bomb,offset2),
%           time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Bomb.e',108).
% From E: 
% 
% '->'(
%    (holds_at(bombTimerValue(Bomb,Offset1),Time) , 
%     Offset2=Offset1-1), 
%    initiates_at(
%       bombDecrementTimer(Bomb), 
%       bombTimerValue(Bomb,Offset2), 
%       Time)).
 %   [Time].
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Bomb.e',108).
bombTimerValue(Bomb, Offset1), Offset2=Offset1-1 ->
    initiates(bombDecrementTimer(Bomb),
              bombTimerValue(Bomb, Offset2)).


%; An effect axiom states that
%; if the timer value of the bomb is a timer value and
%; the timer value of the bomb is decremented,
%; the timer value of the bomb will no longer be the timer value:
% [bomb,offset,time]
% HoldsAt(BombTimerValue(bomb,offset),time) ->
% Terminates(BombDecrementTimer(bomb),
%            BombTimerValue(bomb,offset),
%            time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Bomb.e',119).
% From E: 
% 
% '->'(
%    holds_at(bombTimerValue(Bomb,Offset),Time), 
%    terminates_at(
%       bombDecrementTimer(Bomb), 
%       bombTimerValue(Bomb,Offset), 
%       Time)).
 %   [Time].
bombDecrementTimer(Bomb)terminates bombTimerValue(Bomb, Offset)if bombTimerValue(Bomb, Offset).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Bomb.e',119).

 /*  terminated(happens(bombDecrementTimer(Bomb),
   		   Time_From,
   		   Time_Until),
   	   bombTimerValue(Bomb,Offset),
   	   [ holds(bombTimerValue(Bomb,Offset),
   		   Time_From)
   	   ]).
 */
 %  "% =================================".


%; An effect axiom states that if a bomb explodes,
%; the bomb will no longer be activated:
% [bomb,time]
% Terminates(BombExplode(bomb),BombActivated(bomb),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Bomb.e',127).
% From E: 
% 
% terminates_at(
%    bombExplode(Bomb), 
%    bombActivated(Bomb), 
%    Time).
 %   [Time].
bombExplode(Bomb)terminates bombActivated(Bomb).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Bomb.e',127).

 /*  terminated(happens(bombExplode(Bomb),
   		   Time_From,
   		   Time_Until),
   	   bombActivated(Bomb),
   	   []).
 */
 %  "% =================================".


%; A trigger axiom states that if the timer value
%; of a bomb is zero, the bomb will explode:
% [bomb,time]
% HoldsAt(BombTimerValue(bomb,0),time) ->
% Happens(BombExplode(bomb),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Bomb.e',132).
% From E: 
% 
% '->'(
%    holds_at(bombTimerValue(Bomb,0),Time), 
%    happens_at(bombExplode(Bomb),Time)).
 %   [Time].
bombExplode(Bomb)if bombTimerValue(Bomb, 0).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Bomb.e',132).

 /*  l_events(happens(bombExplode(Bomb),
   		 Time_From,
   		 Time_From),
   	 [holds(bombTimerValue(Bomb,0),Time_From)]).
 */
 %  "% =================================".


%; An axiom states that if an agent is at a location,
%; a bomb is at the location,
%; the agent is nondeterministically injured, and
%; the bomb explodes, then
%; the bomb will injure the agent:
% [agent,location,bomb,time]
% HoldsAt(At(agent,location),time) &
% HoldsAt(At(bomb,location),time) &
% HoldsAt(InjuredDeterminingFluent(agent),time) &
% Happens(BombExplode(bomb),time) ->
% Happens(Injure(bomb,agent),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Bomb.e',141).
% From E: 
% 
% '->'(
%    (holds_at(at_loc(Agent,Location),Time) , 
%      holds_at(at_loc(Bomb,Location),Time) , 
%      holds_at(injuredDeterminingFluent(Agent),Time) , 
%     happens_at(bombExplode(Bomb),Time)), 
%    happens_at(injure(Bomb,Agent),Time)).
 %   [Time].
injure(Bomb, Agent)if at_loc(Agent, Location), at_loc(Bomb, Location), injuredDeterminingFluent(Agent), bombExplode(Bomb).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Bomb.e',141).

 /*  l_events(happens(injure(Bomb,Agent),
   		 Time_From,
   		 Time_Until),
   	 [ holds(at_loc(Agent,Location),Time_From),
   	   holds(at_loc(Bomb,Location),Time_From),
   	   injuredDeterminingFluent(Agent),
   	   happens(bombExplode(Bomb),
   		   Time_From,
   		   Time_Until)
   	 ]).
 */
 %  "% =================================".


%; An axiom states that if an agent is at a location,
%; a bomb is at the location,
%; the agent is nondeterministically killed, and
%; the bomb explodes, then
%; the bomb will kill the agent:
% [agent,location,bomb,time]
% HoldsAt(At(agent,location),time) &
% HoldsAt(At(bomb,location),time) &
% HoldsAt(KilledDeterminingFluent(agent),time) &
% Happens(BombExplode(bomb),time) ->
% Happens(Kill(bomb,agent),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Bomb.e',153).
% From E: 
% 
% '->'(
%    (holds_at(at_loc(Agent,Location),Time) , 
%      holds_at(at_loc(Bomb,Location),Time) , 
%      holds_at(killedDeterminingFluent(Agent),Time) , 
%     happens_at(bombExplode(Bomb),Time)), 
%    happens_at(kill(Bomb,Agent),Time)).
 %   [Time].
kill(Bomb, Agent)if at_loc(Agent, Location), at_loc(Bomb, Location), killedDeterminingFluent(Agent), bombExplode(Bomb).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Bomb.e',153).

 /*  l_events(happens(kill(Bomb,Agent),
   		 Time_From,
   		 Time_Until),
   	 [ holds(at_loc(Agent,Location),Time_From),
   	   holds(at_loc(Bomb,Location),Time_From),
   	   killedDeterminingFluent(Agent),
   	   happens(bombExplode(Bomb),
   		   Time_From,
   		   Time_Until)
   	 ]).
 */
 %  "% =================================".


%; An axiom states that if an physical object is at a location,
%; a bomb is at the location,
%; the physical object is nondeterministically damaged, and
%; the bomb explodes, then
%; the bomb will damage the physical object:
% [physobj,location,bomb,time]
% HoldsAt(At(physobj,location),time) &
% HoldsAt(At(bomb,location),time) &
% HoldsAt(DamagedDeterminingFluent(physobj),time) &
% Happens(BombExplode(bomb),time) ->
% Happens(Damage(bomb,physobj),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Bomb.e',165).
% From E: 
% 
% '->'(
%    (holds_at(at_loc(Physobj,Location),Time) , 
%      holds_at(at_loc(Bomb,Location),Time) , 
%      holds_at(damagedDeterminingFluent(Physobj),Time) , 
%     happens_at(bombExplode(Bomb),Time)), 
%    happens_at(damage(Bomb,Physobj),Time)).
 %   [Time].
damage(Bomb, Physobj)if at_loc(Physobj, Location), at_loc(Bomb, Location), damagedDeterminingFluent(Physobj), bombExplode(Bomb).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Bomb.e',165).

 /*  l_events(happens(damage(Bomb,Physobj),
   		 Time_From,
   		 Time_Until),
   	 [ holds(at_loc(Physobj,Location),Time_From),
   	   holds(at_loc(Bomb,Location),Time_From),
   	   damagedDeterminingFluent(Physobj),
   	   happens(bombExplode(Bomb),
   		   Time_From,
   		   Time_Until)
   	 ]).
 */
 %  "% =================================".


%; An axiom states that if an physical object is at a location,
%; a bomb is at the location,
%; the physical object is nondeterministically destroyed, and
%; the bomb explodes, then
%; the bomb will destroy the physical object:
% [physobj,location,bomb,time]
% HoldsAt(At(physobj,location),time) &
% HoldsAt(At(bomb,location),time) &
% HoldsAt(DestroyedDeterminingFluent(physobj),time) &
% Happens(BombExplode(bomb),time) ->
% Happens(Destroy(bomb,physobj),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Bomb.e',177).
% From E: 
% 
% '->'(
%    (holds_at(at_loc(Physobj,Location),Time) , 
%      holds_at(at_loc(Bomb,Location),Time) , 
%      holds_at(destroyedDeterminingFluent(Physobj),Time) , 
%     happens_at(bombExplode(Bomb),Time)), 
%    happens_at(destroy(Bomb,Physobj),Time)).
 %   [Time].
destroy(Bomb, Physobj)if at_loc(Physobj, Location), at_loc(Bomb, Location), destroyedDeterminingFluent(Physobj), bombExplode(Bomb).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Bomb.e',177).

 /*  l_events(happens(destroy(Bomb,Physobj),
   		 Time_From,
   		 Time_Until),
   	 [ holds(at_loc(Physobj,Location),Time_From),
   	   holds(at_loc(Bomb,Location),Time_From),
   	   destroyedDeterminingFluent(Physobj),
   	   happens(bombExplode(Bomb),
   		   Time_From,
   		   Time_Until)
   	 ]).
 */
 %  "% =================================".


%; End of file.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Bomb.e',183).
% From E: 
% 
% :-call_pel_directive(translate(ending,'/pack/logicmoo_ec/ext/ec_sources/ecnet/Bomb.e.lps')).
:- call_pel_directive(translate(ending,
                                '/pack/logicmoo_ec/ext/ec_sources/ecnet/Bomb.e.lps')).
