:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Baseball.e',157).
% translate: unskipped  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/Bomb.e.lps 
:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(lps).
% translate: begining  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/Bomb.e.lps 
% Thu, 08 Oct 2020 21:35:53 GMT File: <stream>(0x55894c2e2700)%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; bomb
%; agent is nondeterministically killed.

% fluent KilledDeterminingFluent(agent)
% fluent(
%    killedDeterminingFluent(agent)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Bomb.e',13).
fluents([killedDeterminingFluent/1]).
% mpred_prop(
%    killedDeterminingFluent(agent), 
%    fluent).
mpred_prop(killedDeterminingFluent(agent),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Bomb.e',15).
% noninertial KilledDeterminingFluent
% noninertial(killedDeterminingFluent).
noninertial(killedDeterminingFluent).
%; agent is nondeterministically injured.

% fluent InjuredDeterminingFluent(agent)
% fluent(
%    injuredDeterminingFluent(agent)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Bomb.e',17).
fluents([injuredDeterminingFluent/1]).
% mpred_prop(
%    injuredDeterminingFluent(agent), 
%    fluent).
mpred_prop(injuredDeterminingFluent(agent),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Bomb.e',19).
% noninertial InjuredDeterminingFluent
% noninertial(injuredDeterminingFluent).
noninertial(injuredDeterminingFluent).
%; physobj is nondeterministically destroyed.

% fluent DestroyedDeterminingFluent(physobj)
% fluent(
%    destroyedDeterminingFluent(physobj)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Bomb.e',21).
fluents([destroyedDeterminingFluent/1]).
% mpred_prop(
%    destroyedDeterminingFluent(physobj), 
%    fluent).
mpred_prop(destroyedDeterminingFluent(physobj),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Bomb.e',23).
% noninertial DestroyedDeterminingFluent
% noninertial(destroyedDeterminingFluent).
noninertial(destroyedDeterminingFluent).
%; physobj is nondeterministically damaged.

% fluent DamagedDeterminingFluent(physobj)
% fluent(
%    damagedDeterminingFluent(physobj)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Bomb.e',25).
fluents([damagedDeterminingFluent/1]).
% mpred_prop(
%    damagedDeterminingFluent(physobj), 
%    fluent).
mpred_prop(damagedDeterminingFluent(physobj),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Bomb.e',27).
% noninertial DamagedDeterminingFluent
% noninertial(damagedDeterminingFluent).
noninertial(damagedDeterminingFluent).
%; agent activates bomb.

% event BombActivate(agent,bomb)
% event(
%    bombActivate(agent,bomb)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Bomb.e',29).
actions([bombActivate/2]).
% mpred_prop(
%    bombActivate(agent,bomb), 
%    event).
mpred_prop(bombActivate(agent,bomb),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Bomb.e',32).
%; agent deactivates bomb.

% event BombDeactivate(agent,bomb)
% event(
%    bombDeactivate(agent,bomb)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Bomb.e',32).
actions([bombDeactivate/2]).
% mpred_prop(
%    bombDeactivate(agent,bomb), 
%    event).
mpred_prop(bombDeactivate(agent,bomb),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Bomb.e',35).
%; bomb explodes.

% event BombExplode(bomb)
% event(
%    bombExplode(bomb)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Bomb.e',35).
events([bombExplode/1]).
% mpred_prop(
%    bombExplode(bomb), 
%    event).
mpred_prop(bombExplode(bomb),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Bomb.e',38).
%; bomb is activated.

% fluent BombActivated(bomb)
% fluent(
%    bombActivated(bomb)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Bomb.e',38).
fluents([bombActivated/1]).
% mpred_prop(
%    bombActivated(bomb), 
%    fluent).
mpred_prop(bombActivated(bomb),fluent).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Bomb.e',41).
%; The timer value of bomb is offset.

% fluent BombTimerValue(bomb,offset)
% fluent(
%    bombTimerValue(bomb,offset)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Bomb.e',41).
fluents([bombTimerValue/2]).
% mpred_prop(
%    bombTimerValue(bomb,offset), 
%    fluent).
mpred_prop(bombTimerValue(bomb,offset),fluent).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Bomb.e',44).
%; The timer value of bomb is decremented.

% event BombDecrementTimer(bomb)
% event(
%    bombDecrementTimer(bomb)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Bomb.e',44).
events([bombDecrementTimer/1]).
% mpred_prop(
%    bombDecrementTimer(bomb), 
%    event).
mpred_prop(bombDecrementTimer(bomb),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Bomb.e',47).
%; The time delay of bomb is offset.

% function BombTimeDelay(bomb): offset
% function(
%    bombTimeDelay(bomb)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Bomb.e',47).
functions([bombTimeDelay/1]).
% mpred_prop(
%    bombTimeDelay(bomb), 
%    function).
mpred_prop(bombTimeDelay(bomb),function).
% predicate(
%    bombTimeDelayPred(bomb,offset)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Bomb.e',47).
predicates([bombTimeDelayPred/2]).
% mpred_prop(
%    bombTimeDelayPred(bomb,offset), 
%    predicate).
mpred_prop(bombTimeDelayPred(bomb,offset),predicate).
% functional_predicate(bombTimeDelay,bombTimeDelayPred).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Bomb.e',47).
functional_predicate(bombTimeDelay,bombTimeDelayPred).
% function_argtypes(
%    bombTimeDelayPred, 
%    bombTimeDelay(bomb), 
%    offset).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Bomb.e',47).
function_argtypes(bombTimeDelayPred,bombTimeDelay(bomb),offset).
% resultIsa(bombTimeDelay,offset).
resultIsa(bombTimeDelay,offset).
%; A state constraint says that a bomb has one timer
%; value at a time:
% [bomb,offset1,offset2,time]
% HoldsAt(BombTimerValue(bomb,offset1),time) &
% HoldsAt(BombTimerValue(bomb,offset2),time) ->
% offset1=offset2.
% '->'(
%    ','(
%       bombTimerValue(Bomb,Offset2), 
%       not(
%          equals(Offset1,Offset2))), 
%    not(
%       bombTimerValue(Bomb,Offset1))).
if bombTimerValue(Bomb, Offset2), not equals(Offset1, Offset2)then not bombTimerValue(Bomb, Offset1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Bomb.e',52).

 /*  reactive_rule([ bombTimerValue(Bomb,Offset2),
   		not(equals(Offset1,Offset2))
   	      ],
   	      [not(bombTimerValue(Bomb,Offset1))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       bombTimerValue(Bomb,Offset1), 
%       not(
%          equals(Offset2,Offset1))), 
%    not(
%       bombTimerValue(Bomb,Offset2))).
if bombTimerValue(Bomb, Offset1), not equals(Offset2, Offset1)then not bombTimerValue(Bomb, Offset2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Bomb.e',52).

 /*  reactive_rule([ bombTimerValue(Bomb,Offset1),
   		not(equals(Offset2,Offset1))
   	      ],
   	      [not(bombTimerValue(Bomb,Offset2))]).
 */
 %  "% =================================".


%; An effect axiom states that if a bomb is intact and
%; an agent activates the bomb,
%; the bomb will be activated:
% [agent,bomb,time]
% HoldsAt(Intact(bomb),time) ->
% Initiates(BombActivate(agent,bomb),
%           BombActivated(bomb),
%           time).
% '->'(
%    intact(Bomb), 
%    initiates(
%       bombActivate(Agent,Bomb), 
%       bombActivated(Bomb), 
%       Time)).
if intact(Bomb)then initiates(bombActivate(Agent, Bomb), bombActivated(Bomb)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Bomb.e',60).

 /*  reactive_rule([holds(intact(Bomb),Time_At)],
   	      [ initiates(bombActivate(Agent,Bomb),
   			  at(bombActivated(Bomb),Time),
   			  Initiates)
   	      ]).
 */
 %  "% =================================".


%; A precondition axiom states that
%; for an agent to activate a bomb,
%; the agent must be holding the bomb:
% [agent,bomb,time]
% Happens(BombActivate(agent,bomb),time) ->
% HoldsAt(Holding(agent,bomb),time).
% '->'(
%    metreqs(
%       bombActivate(Agent,Bomb)), 
%    requires(
%       bombActivate(Agent,Bomb), 
%       When_Time)).
if bombActivate(Agent, Bomb)then requires(bombActivate(Agent, Bomb), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Bomb.e',69).

 /*  reactive_rule([ happens(bombActivate(Agent,Bomb),
   			Time_From,
   			Time_Until)
   	      ],
   	      [ requires(bombActivate(Agent,Bomb),
   			 When_Time)
   	      ]).
 */
 %  "% =================================".
% '->'(
%    holding(Agent,Bomb), 
%    metreqs(
%       bombActivate(Agent,Bomb))).
bombActivate(Agent, Bomb)if holding(Agent, Bomb).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Bomb.e',69).

 /*  l_events(happens(bombActivate(Agent,Bomb),
   		 Time_From6,
   		 Time_From6),
   	 [holds(holding(Agent,Bomb),Time_From6)]).
 */
 %  "% =================================".
% '->'(
%    not(
%       holding(Agent,Bomb)), 
%    not(
%       bombActivate(Agent,Bomb))).
if not holding(Agent, Bomb)then not bombActivate(Agent, Bomb).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Bomb.e',69).

 /*  reactive_rule([ holds(not(holding(Agent,Bomb)),
   		      Time_At)
   	      ],
   	      [not(bombActivate(Agent,Bomb))]).
 */
 %  "% =================================".


%; An effect axiom states that if a bomb is intact and
%; an agent deactivates the bomb,
%; the bomb will no longer be activated:
% [agent,bomb,time]
% HoldsAt(Intact(bomb),time) ->
% Terminates(BombDeactivate(agent,bomb),
%            BombActivated(bomb),
%            time).
% '->'(
%    intact(Bomb), 
%    terminates(
%       bombDeactivate(Agent,Bomb), 
%       bombActivated(Bomb), 
%       Time)).
if intact(Bomb)then terminates(bombDeactivate(Agent, Bomb), bombActivated(Bomb)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Bomb.e',76).

 /*  reactive_rule([holds(intact(Bomb),Time_At)],
   	      [ terminates(bombDeactivate(Agent,Bomb),
   			   at(bombActivated(Bomb),Time),
   			   Terminates)
   	      ]).
 */
 %  "% =================================".


%; An axiom states that if a bomb explodes, the
%; bomb destroys the bomb:
% [bomb,time]
% Happens(BombExplode(bomb),time) ->
% Happens(Destroy(bomb,bomb),time).
% '->'(
%    bombExplode(Bomb), 
%    destroy(Bomb,Bomb)).
destroy(Bomb, Bomb)if bombExplode(Bomb).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Bomb.e',84).

 /*  l_events(happens(destroy(Bomb,Bomb),
   		 Time_From,
   		 Time_Until),
   	 [ happens(bombExplode(Bomb),
   		   Time_From,
   		   Time_Until)
   	 ]).
 */
 %  "% =================================".
% '->'(
%    not(
%       destroy(Bomb,Bomb)), 
%    not(
%       bombExplode(Bomb))).
if not destroy(Bomb, Bomb)then not bombExplode(Bomb).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Bomb.e',84).

 /*  reactive_rule([not(destroy(Bomb,Bomb))],
   	      [not(bombExplode(Bomb))]).
 */
 %  "% =================================".


%; An effect axiom states that if a bomb explodes,
%; the bomb is no longer activated:
% [bomb,time]
% Terminates(BombExplode(bomb),BombActivated(bomb),time).
% terminates(
%    bombExplode(Bomb), 
%    bombActivated(Bomb), 
%    Time).
bombExplode(Bomb)terminates bombActivated(Bomb).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Bomb.e',90).

 /*  terminated(happens(bombExplode(Bomb),
   		   Time_From,
   		   Time_Until),
   	   bombActivated(Bomb),
   	   []).
 */
 %  "% =================================".


%; A trigger axiom states that
%; if a bomb is activated,
%; the timer value of the bomb is a timer value, and
%; the timer value is greater than zero,
%; the timer value of the bomb will be decremented:
% [bomb,offset,time]
% HoldsAt(BombActivated(bomb),time) &
% HoldsAt(BombTimerValue(bomb,offset),time) &
% (offset > 0) ->
% Happens(BombDecrementTimer(bomb),time).
% '->'(
%    ','(
%       bombActivated(Bomb), 
%       ','(
%          bombTimerValue(Bomb,Offset), 
%          comparison(Offset,0,>))), 
%    bombDecrementTimer(Bomb)).
if bombActivated(Bomb), bombTimerValue(Bomb, Offset), comparison(Offset, 0, >)then bombDecrementTimer(Bomb).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Bomb.e',98).

 /*  reactive_rule([ holds(bombActivated(Bomb),Time_At),
   		bombTimerValue(Bomb,Offset),
   		comparison(Offset,0,>)
   	      ],
   	      [bombDecrementTimer(Bomb)]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       bombTimerValue(Bomb,Offset), 
%       ','(
%          comparison(Offset,0,>), 
%          not(
%             bombDecrementTimer(Bomb)))), 
%    not(
%       bombActivated(Bomb))).
not bombActivated(Bomb)if bombTimerValue(Bomb, Offset), comparison(Offset, 0, >), not bombDecrementTimer(Bomb).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Bomb.e',98).

 /*  l_int(holds(not(bombActivated(Bomb)),Time_At4),
         [ bombTimerValue(Bomb,Offset),
   	comparison(Offset,0,>),
   	not(bombDecrementTimer(Bomb))
         ]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       comparison(Offset,0,>), 
%       ','(
%          bombActivated(Bomb), 
%          not(
%             bombDecrementTimer(Bomb)))), 
%    not(
%       bombTimerValue(Bomb,Offset))).
if comparison(Offset, 0, >), bombActivated(Bomb), not bombDecrementTimer(Bomb)then not bombTimerValue(Bomb, Offset).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Bomb.e',98).

 /*  reactive_rule([ comparison(Offset,0,>),
   		holds(bombActivated(Bomb),Time_At5),
   		not(bombDecrementTimer(Bomb))
   	      ],
   	      [not(bombTimerValue(Bomb,Offset))]).
 */
 %  "% =================================".


%; An effect axiom states that
%; if the timer value of the bomb is a timer value and
%; the timer value of the bomb is decremented,
%; the timer value of the bomb will be the timer value minus one:
% [bomb,offset1,offset2,time]
% HoldsAt(BombTimerValue(bomb,offset1),time) &
% offset2 = offset1-1 ->
% Initiates(BombDecrementTimer(bomb),
%           BombTimerValue(bomb,offset2),
%           time).
% '->'(
%    ','(
%       bombTimerValue(Bomb,Offset1), 
%       '-Pred'(Offset1,1,Offset2)), 
%    initiates(
%       bombDecrementTimer(Bomb), 
%       bombTimerValue(Bomb,Offset2), 
%       Time)).
if bombTimerValue(Bomb, Offset1), '-Pred'(Offset1, 1, Offset2)then initiates(bombDecrementTimer(Bomb), bombTimerValue(Bomb, Offset2)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Bomb.e',108).

 /*  reactive_rule([ bombTimerValue(Bomb,Offset1),
   		'-Pred'(Offset1,1,Offset2)
   	      ],
   	      [ initiates(bombDecrementTimer(Bomb),
   			  at(bombTimerValue(Bomb,Offset2),
   			     Time),
   			  Initiates)
   	      ]).
 */
 %  "% =================================".


%; An effect axiom states that
%; if the timer value of the bomb is a timer value and
%; the timer value of the bomb is decremented,
%; the timer value of the bomb will no longer be the timer value:
% [bomb,offset,time]
% HoldsAt(BombTimerValue(bomb,offset),time) ->
% Terminates(BombDecrementTimer(bomb),
%            BombTimerValue(bomb,offset),
%            time).
% '->'(
%    bombTimerValue(Bomb,Offset), 
%    terminates(
%       bombDecrementTimer(Bomb), 
%       bombTimerValue(Bomb,Offset), 
%       Time)).
if bombTimerValue(Bomb, Offset)then terminates(bombDecrementTimer(Bomb), bombTimerValue(Bomb, Offset)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Bomb.e',119).

 /*  reactive_rule([bombTimerValue(Bomb,Offset)],
   	      [ terminates(bombDecrementTimer(Bomb),
   			   at(bombTimerValue(Bomb,Offset),
   			      Time),
   			   Terminates)
   	      ]).
 */
 %  "% =================================".


%; An effect axiom states that if a bomb explodes,
%; the bomb will no longer be activated:
% [bomb,time]
% Terminates(BombExplode(bomb),BombActivated(bomb),time).
% terminates(
%    bombExplode(Bomb), 
%    bombActivated(Bomb), 
%    Time).
bombExplode(Bomb)terminates bombActivated(Bomb).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Bomb.e',127).

 /*  terminated(happens(bombExplode(Bomb),
   		   Time_From,
   		   Time_Until),
   	   bombActivated(Bomb),
   	   []).
 */
 %  "% =================================".


%; A trigger axiom states that if the timer value
%; of a bomb is zero, the bomb will explode:
% [bomb,time]
% HoldsAt(BombTimerValue(bomb,0),time) ->
% Happens(BombExplode(bomb),time).
% '->'(
%    bombTimerValue(Bomb,0), 
%    bombExplode(Bomb)).
bombExplode(Bomb)if bombTimerValue(Bomb, 0).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Bomb.e',132).

 /*  l_events(happens(bombExplode(Bomb),
   		 Time_From,
   		 Time_From),
   	 [bombTimerValue(Bomb,0)]).
 */
 %  "% =================================".
% '->'(
%    not(
%       bombExplode(Bomb)), 
%    not(
%       bombTimerValue(Bomb,0))).
if not bombExplode(Bomb)then not bombTimerValue(Bomb, 0).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Bomb.e',132).

 /*  reactive_rule([not(bombExplode(Bomb))],
   	      [not(bombTimerValue(Bomb,0))]).
 */
 %  "% =================================".


%; An axiom states that if an agent is at a location,
%; a bomb is at the location,
%; the agent is nondeterministically injured, and
%; the bomb explodes, then
%; the bomb will injure the agent:
% [agent,location,bomb,time]
% HoldsAt(At(agent,location),time) &
% HoldsAt(At(bomb,location),time) &
% HoldsAt(InjuredDeterminingFluent(agent),time) &
% Happens(BombExplode(bomb),time) ->
% Happens(Injure(bomb,agent),time).
% '->'(
%    ','(
%       at(Agent,Location), 
%       ','(
%          at(Bomb,Location), 
%          ','(
%             injuredDeterminingFluent(Agent), 
%             bombExplode(Bomb)))), 
%    injure(Bomb,Agent)).
injure(Bomb, Agent)if loc_at(Agent, Location), loc_at(Bomb, Location), injuredDeterminingFluent(Agent), bombExplode(Bomb).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Bomb.e',141).

 /*  l_events(happens(injure(Bomb,Agent),
   		 Time_From,
   		 Time_Until),
   	 [ loc_at(Agent,Location),
   	   loc_at(Bomb,Location),
   	   injuredDeterminingFluent(Agent),
   	   happens(bombExplode(Bomb),
   		   Time_From,
   		   Time_Until)
   	 ]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       at(Bomb,Location), 
%       ','(
%          injuredDeterminingFluent(Agent), 
%          ','(
%             bombExplode(Bomb), 
%             not(
%                injure(Bomb,Agent))))), 
%    not(
%       at(Agent,Location))).
if loc_at(Bomb, Location), injuredDeterminingFluent(Agent), bombExplode(Bomb), not injure(Bomb, Agent)then not loc_at(Agent, Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Bomb.e',141).

 /*  reactive_rule([ loc_at(Bomb,Location),
   		injuredDeterminingFluent(Agent),
   		happens(bombExplode(Bomb),
   			Time_From6,
   			Time_Until7),
   		not(injure(Bomb,Agent))
   	      ],
   	      [not(loc_at(Agent,Location))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       injuredDeterminingFluent(Agent), 
%       ','(
%          bombExplode(Bomb), 
%          ','(
%             at(Agent,Location), 
%             not(
%                injure(Bomb,Agent))))), 
%    not(
%       at(Bomb,Location))).
if injuredDeterminingFluent(Agent), bombExplode(Bomb), loc_at(Agent, Location), not injure(Bomb, Agent)then not loc_at(Bomb, Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Bomb.e',141).

 /*  reactive_rule([ injuredDeterminingFluent(Agent),
   		happens(bombExplode(Bomb),
   			Time_From8,
   			Time_Until9),
   		loc_at(Agent,Location),
   		not(injure(Bomb,Agent))
   	      ],
   	      [not(loc_at(Bomb,Location))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       bombExplode(Bomb), 
%       ','(
%          at(Bomb,Location), 
%          ','(
%             at(Agent,Location), 
%             not(
%                injure(Bomb,Agent))))), 
%    not(
%       injuredDeterminingFluent(Agent))).
if bombExplode(Bomb), loc_at(Bomb, Location), loc_at(Agent, Location), not injure(Bomb, Agent)then not injuredDeterminingFluent(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Bomb.e',141).

 /*  reactive_rule([ happens(bombExplode(Bomb),
   			Time_From10,
   			Time_Until11),
   		loc_at(Bomb,Location),
   		loc_at(Agent,Location),
   		not(injure(Bomb,Agent))
   	      ],
   	      [not(injuredDeterminingFluent(Agent))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       injuredDeterminingFluent(Agent), 
%       ','(
%          at(Bomb,Location), 
%          ','(
%             at(Agent,Location), 
%             not(
%                injure(Bomb,Agent))))), 
%    not(
%       bombExplode(Bomb))).
if injuredDeterminingFluent(Agent), loc_at(Bomb, Location), loc_at(Agent, Location), not injure(Bomb, Agent)then not bombExplode(Bomb).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Bomb.e',141).

 /*  reactive_rule([ injuredDeterminingFluent(Agent),
   		loc_at(Bomb,Location),
   		loc_at(Agent,Location),
   		not(injure(Bomb,Agent))
   	      ],
   	      [not(bombExplode(Bomb))]).
 */
 %  "% =================================".


%; An axiom states that if an agent is at a location,
%; a bomb is at the location,
%; the agent is nondeterministically killed, and
%; the bomb explodes, then
%; the bomb will kill the agent:
% [agent,location,bomb,time]
% HoldsAt(At(agent,location),time) &
% HoldsAt(At(bomb,location),time) &
% HoldsAt(KilledDeterminingFluent(agent),time) &
% Happens(BombExplode(bomb),time) ->
% Happens(Kill(bomb,agent),time).
% '->'(
%    ','(
%       at(Agent,Location), 
%       ','(
%          at(Bomb,Location), 
%          ','(
%             killedDeterminingFluent(Agent), 
%             bombExplode(Bomb)))), 
%    call(
%       kill(Bomb,Agent))).
if loc_at(Agent, Location), loc_at(Bomb, Location), killedDeterminingFluent(Agent), bombExplode(Bomb)then call(kill(Bomb, Agent)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Bomb.e',153).

 /*  reactive_rule([ loc_at(Agent,Location),
   		loc_at(Bomb,Location),
   		killedDeterminingFluent(Agent),
   		happens(bombExplode(Bomb),
   			Time_From,
   			Time_Until)
   	      ],
   	      [call(kill(Bomb,Agent))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       at(Bomb,Location), 
%       ','(
%          killedDeterminingFluent(Agent), 
%          ','(
%             bombExplode(Bomb), 
%             not(
%                call(
%                   kill(Bomb,Agent)))))), 
%    not(
%       at(Agent,Location))).
if loc_at(Bomb, Location), killedDeterminingFluent(Agent), bombExplode(Bomb), not call(kill(Bomb, Agent))then not loc_at(Agent, Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Bomb.e',153).

 /*  reactive_rule([ loc_at(Bomb,Location),
   		killedDeterminingFluent(Agent),
   		happens(bombExplode(Bomb),
   			Time_From6,
   			Time_Until7),
   		not(call(kill(Bomb,Agent)))
   	      ],
   	      [not(loc_at(Agent,Location))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       killedDeterminingFluent(Agent), 
%       ','(
%          bombExplode(Bomb), 
%          ','(
%             at(Agent,Location), 
%             not(
%                call(
%                   kill(Bomb,Agent)))))), 
%    not(
%       at(Bomb,Location))).
if killedDeterminingFluent(Agent), bombExplode(Bomb), loc_at(Agent, Location), not call(kill(Bomb, Agent))then not loc_at(Bomb, Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Bomb.e',153).

 /*  reactive_rule([ killedDeterminingFluent(Agent),
   		happens(bombExplode(Bomb),
   			Time_From8,
   			Time_Until9),
   		loc_at(Agent,Location),
   		not(call(kill(Bomb,Agent)))
   	      ],
   	      [not(loc_at(Bomb,Location))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       bombExplode(Bomb), 
%       ','(
%          at(Bomb,Location), 
%          ','(
%             at(Agent,Location), 
%             not(
%                call(
%                   kill(Bomb,Agent)))))), 
%    not(
%       killedDeterminingFluent(Agent))).
if bombExplode(Bomb), loc_at(Bomb, Location), loc_at(Agent, Location), not call(kill(Bomb, Agent))then not killedDeterminingFluent(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Bomb.e',153).

 /*  reactive_rule([ happens(bombExplode(Bomb),
   			Time_From10,
   			Time_Until11),
   		loc_at(Bomb,Location),
   		loc_at(Agent,Location),
   		not(call(kill(Bomb,Agent)))
   	      ],
   	      [not(killedDeterminingFluent(Agent))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       killedDeterminingFluent(Agent), 
%       ','(
%          at(Bomb,Location), 
%          ','(
%             at(Agent,Location), 
%             not(
%                call(
%                   kill(Bomb,Agent)))))), 
%    not(
%       bombExplode(Bomb))).
if killedDeterminingFluent(Agent), loc_at(Bomb, Location), loc_at(Agent, Location), not call(kill(Bomb, Agent))then not bombExplode(Bomb).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Bomb.e',153).

 /*  reactive_rule([ killedDeterminingFluent(Agent),
   		loc_at(Bomb,Location),
   		loc_at(Agent,Location),
   		not(call(kill(Bomb,Agent)))
   	      ],
   	      [not(bombExplode(Bomb))]).
 */
 %  "% =================================".


%; An axiom states that if an physical object is at a location,
%; a bomb is at the location,
%; the physical object is nondeterministically damaged, and
%; the bomb explodes, then
%; the bomb will damage the physical object:
% [physobj,location,bomb,time]
% HoldsAt(At(physobj,location),time) &
% HoldsAt(At(bomb,location),time) &
% HoldsAt(DamagedDeterminingFluent(physobj),time) &
% Happens(BombExplode(bomb),time) ->
% Happens(Damage(bomb,physobj),time).
% '->'(
%    ','(
%       at(Physobj,Location), 
%       ','(
%          at(Bomb,Location), 
%          ','(
%             damagedDeterminingFluent(Physobj), 
%             bombExplode(Bomb)))), 
%    damage(Bomb,Physobj)).
damage(Bomb, Physobj)if loc_at(Physobj, Location), loc_at(Bomb, Location), damagedDeterminingFluent(Physobj), bombExplode(Bomb).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Bomb.e',165).

 /*  l_events(happens(damage(Bomb,Physobj),
   		 Time_From,
   		 Time_Until),
   	 [ loc_at(Physobj,Location),
   	   loc_at(Bomb,Location),
   	   damagedDeterminingFluent(Physobj),
   	   happens(bombExplode(Bomb),
   		   Time_From,
   		   Time_Until)
   	 ]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       at(Bomb,Location), 
%       ','(
%          damagedDeterminingFluent(Physobj), 
%          ','(
%             bombExplode(Bomb), 
%             not(
%                damage(Bomb,Physobj))))), 
%    not(
%       at(Physobj,Location))).
if loc_at(Bomb, Location), damagedDeterminingFluent(Physobj), bombExplode(Bomb), not damage(Bomb, Physobj)then not loc_at(Physobj, Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Bomb.e',165).

 /*  reactive_rule([ loc_at(Bomb,Location),
   		damagedDeterminingFluent(Physobj),
   		happens(bombExplode(Bomb),
   			Time_From6,
   			Time_Until7),
   		not(damage(Bomb,Physobj))
   	      ],
   	      [not(loc_at(Physobj,Location))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       damagedDeterminingFluent(Physobj), 
%       ','(
%          bombExplode(Bomb), 
%          ','(
%             at(Physobj,Location), 
%             not(
%                damage(Bomb,Physobj))))), 
%    not(
%       at(Bomb,Location))).
if damagedDeterminingFluent(Physobj), bombExplode(Bomb), loc_at(Physobj, Location), not damage(Bomb, Physobj)then not loc_at(Bomb, Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Bomb.e',165).

 /*  reactive_rule([ damagedDeterminingFluent(Physobj),
   		happens(bombExplode(Bomb),
   			Time_From8,
   			Time_Until9),
   		loc_at(Physobj,Location),
   		not(damage(Bomb,Physobj))
   	      ],
   	      [not(loc_at(Bomb,Location))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       bombExplode(Bomb), 
%       ','(
%          at(Bomb,Location), 
%          ','(
%             at(Physobj,Location), 
%             not(
%                damage(Bomb,Physobj))))), 
%    not(
%       damagedDeterminingFluent(Physobj))).
if bombExplode(Bomb), loc_at(Bomb, Location), loc_at(Physobj, Location), not damage(Bomb, Physobj)then not damagedDeterminingFluent(Physobj).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Bomb.e',165).

 /*  reactive_rule([ happens(bombExplode(Bomb),
   			Time_From10,
   			Time_Until11),
   		loc_at(Bomb,Location),
   		loc_at(Physobj,Location),
   		not(damage(Bomb,Physobj))
   	      ],
   	      [not(damagedDeterminingFluent(Physobj))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       damagedDeterminingFluent(Physobj), 
%       ','(
%          at(Bomb,Location), 
%          ','(
%             at(Physobj,Location), 
%             not(
%                damage(Bomb,Physobj))))), 
%    not(
%       bombExplode(Bomb))).
if damagedDeterminingFluent(Physobj), loc_at(Bomb, Location), loc_at(Physobj, Location), not damage(Bomb, Physobj)then not bombExplode(Bomb).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Bomb.e',165).

 /*  reactive_rule([ damagedDeterminingFluent(Physobj),
   		loc_at(Bomb,Location),
   		loc_at(Physobj,Location),
   		not(damage(Bomb,Physobj))
   	      ],
   	      [not(bombExplode(Bomb))]).
 */
 %  "% =================================".


%; An axiom states that if an physical object is at a location,
%; a bomb is at the location,
%; the physical object is nondeterministically destroyed, and
%; the bomb explodes, then
%; the bomb will destroy the physical object:
% [physobj,location,bomb,time]
% HoldsAt(At(physobj,location),time) &
% HoldsAt(At(bomb,location),time) &
% HoldsAt(DestroyedDeterminingFluent(physobj),time) &
% Happens(BombExplode(bomb),time) ->
% Happens(Destroy(bomb,physobj),time).
% '->'(
%    ','(
%       at(Physobj,Location), 
%       ','(
%          at(Bomb,Location), 
%          ','(
%             destroyedDeterminingFluent(Physobj), 
%             bombExplode(Bomb)))), 
%    destroy(Bomb,Physobj)).
destroy(Bomb, Physobj)if loc_at(Physobj, Location), loc_at(Bomb, Location), destroyedDeterminingFluent(Physobj), bombExplode(Bomb).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Bomb.e',177).

 /*  l_events(happens(destroy(Bomb,Physobj),
   		 Time_From,
   		 Time_Until),
   	 [ loc_at(Physobj,Location),
   	   loc_at(Bomb,Location),
   	   destroyedDeterminingFluent(Physobj),
   	   happens(bombExplode(Bomb),
   		   Time_From,
   		   Time_Until)
   	 ]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       at(Bomb,Location), 
%       ','(
%          destroyedDeterminingFluent(Physobj), 
%          ','(
%             bombExplode(Bomb), 
%             not(
%                destroy(Bomb,Physobj))))), 
%    not(
%       at(Physobj,Location))).
if loc_at(Bomb, Location), destroyedDeterminingFluent(Physobj), bombExplode(Bomb), not destroy(Bomb, Physobj)then not loc_at(Physobj, Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Bomb.e',177).

 /*  reactive_rule([ loc_at(Bomb,Location),
   		destroyedDeterminingFluent(Physobj),
   		happens(bombExplode(Bomb),
   			Time_From6,
   			Time_Until7),
   		not(destroy(Bomb,Physobj))
   	      ],
   	      [not(loc_at(Physobj,Location))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       destroyedDeterminingFluent(Physobj), 
%       ','(
%          bombExplode(Bomb), 
%          ','(
%             at(Physobj,Location), 
%             not(
%                destroy(Bomb,Physobj))))), 
%    not(
%       at(Bomb,Location))).
if destroyedDeterminingFluent(Physobj), bombExplode(Bomb), loc_at(Physobj, Location), not destroy(Bomb, Physobj)then not loc_at(Bomb, Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Bomb.e',177).

 /*  reactive_rule([ destroyedDeterminingFluent(Physobj),
   		happens(bombExplode(Bomb),
   			Time_From8,
   			Time_Until9),
   		loc_at(Physobj,Location),
   		not(destroy(Bomb,Physobj))
   	      ],
   	      [not(loc_at(Bomb,Location))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       bombExplode(Bomb), 
%       ','(
%          at(Bomb,Location), 
%          ','(
%             at(Physobj,Location), 
%             not(
%                destroy(Bomb,Physobj))))), 
%    not(
%       destroyedDeterminingFluent(Physobj))).
if bombExplode(Bomb), loc_at(Bomb, Location), loc_at(Physobj, Location), not destroy(Bomb, Physobj)then not destroyedDeterminingFluent(Physobj).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Bomb.e',177).

 /*  reactive_rule([ happens(bombExplode(Bomb),
   			Time_From10,
   			Time_Until11),
   		loc_at(Bomb,Location),
   		loc_at(Physobj,Location),
   		not(destroy(Bomb,Physobj))
   	      ],
   	      [not(destroyedDeterminingFluent(Physobj))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       destroyedDeterminingFluent(Physobj), 
%       ','(
%          at(Bomb,Location), 
%          ','(
%             at(Physobj,Location), 
%             not(
%                destroy(Bomb,Physobj))))), 
%    not(
%       bombExplode(Bomb))).
if destroyedDeterminingFluent(Physobj), loc_at(Bomb, Location), loc_at(Physobj, Location), not destroy(Bomb, Physobj)then not bombExplode(Bomb).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Bomb.e',177).

 /*  reactive_rule([ destroyedDeterminingFluent(Physobj),
   		loc_at(Bomb,Location),
   		loc_at(Physobj,Location),
   		not(destroy(Bomb,Physobj))
   	      ],
   	      [not(bombExplode(Bomb))]).
 */
 %  "% =================================".


%; End of file.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Bomb.e',183).
% translate: ending  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/Bomb.e.lps 
