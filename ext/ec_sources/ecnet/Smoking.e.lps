:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoke.e',40).
% translate: unskipped  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/Smoking.e.lps 
:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(lps).
% translate: begining  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/Smoking.e.lps 
% Thu, 08 Oct 2020 19:07:01 GMT File: <stream>(0x5600a3adf500)%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{Mueller:2004c,
%;   author = "Erik T. Mueller",
%;   year = "2004",
%;   title = "Understanding script-based stories using commonsense reasoning",
%;   journal = "Cognitive Systems Research",
%;   volume = "5",
%;   number = "4",
%;   pages = "307--340",
%; }
%;

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoking.e',22).
% option modeldiff on
:- if(is_e_toplevel).
:- set_ec_option(modeldiff, on).
:- endif.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoking.e',24).
% ignore Love, ThreatenedBy
 %  pl=axiom(ignore(love),[]).
ignore(love).
 %  ignore(love).
 %  pl=axiom(ignore(threatenedBy),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoking.e',24).
ignore(threatenedBy).
 %  ignore(threatenedBy).

% ignore LookOutOnto, Floor, BuildingOf, SkyOf, GroundOf
 %  pl=axiom(ignore(lookOutOnto),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoking.e',24).
ignore(lookOutOnto).
 %  ignore(lookOutOnto).
 %  pl=axiom(ignore(floor),[]).
ignore(floor).
 %  ignore(floor).
 %  pl=axiom(ignore(buildingOf),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoking.e',24).
ignore(buildingOf).
 %  ignore(buildingOf).
 %  pl=axiom(ignore(skyOf),[]).
ignore(skyOf).
 %  ignore(skyOf).
 %  pl=axiom(ignore(groundOf),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoking.e',24).
ignore(groundOf).
 %  ignore(groundOf).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoking.e',26).
% ignore Near, WalkFrom, WalkFromTo, RunFromTo
 %  pl=axiom(ignore(near),[]).
ignore(near).
 %  ignore(near).
 %  pl=axiom(ignore(walkFrom),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoking.e',26).
ignore(walkFrom).
 %  ignore(walkFrom).
 %  pl=axiom(ignore(walkFromTo),[]).
ignore(walkFromTo).
 %  ignore(walkFromTo).
 %  pl=axiom(ignore(runFromTo),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoking.e',26).
ignore(runFromTo).
 %  ignore(runFromTo).

% ignore Side1, Side2
 %  pl=axiom(ignore(side1),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoking.e',26).
ignore(side1).
 %  ignore(side1).
 %  pl=axiom(ignore(side2),[]).
ignore(side2).
 %  ignore(side2).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoking.e',29).
% load foundations/Root.e
:- if(is_e_toplevel).
:- load_e_cond('foundations/Root.e', changed).
 %  load('/pack/logicmoo_ec/ext/ec_sources/foundations/Root.e',changed).
:- endif.

% load foundations/EC.e
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoking.e',29).
:- if(is_e_toplevel).
:- load_e_cond('foundations/EC.e', changed).
 %  load('/pack/logicmoo_ec/ext/ec_sources/foundations/EC.e',changed).
:- endif.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoking.e',31).
% load answers/Mueller2003/Ontology.e
:- if(is_e_toplevel).
:- load_e_cond('answers/Mueller2003/Ontology.e', changed).
 %  load('/pack/logicmoo_ec/ext/ec_sources/ecnet/Ontology.e',changed).
:- endif.

% load answers/Mueller2004c/RTSpaceM.e
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoking.e',31).
:- if(is_e_toplevel).
:- load_e_cond('answers/Mueller2004c/RTSpaceM.e', changed).
 %  load('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',changed).
:- endif.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoking.e',33).
% load answers/Mueller2004c/OTSpaceM.e
:- if(is_e_toplevel).
:- load_e_cond('answers/Mueller2004c/OTSpaceM.e', changed).
 %  load('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',changed).
:- endif.

% load answers/Mueller2004c/Container.e
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoking.e',33).
:- if(is_e_toplevel).
:- load_e_cond('answers/Mueller2004c/Container.e', changed).
 %  load('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',changed).
:- endif.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoking.e',35).
% load answers/Mueller2003/Sleep.e
:- if(is_e_toplevel).
:- load_e_cond('answers/Mueller2003/Sleep.e', changed).
 %  load('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',changed).
:- endif.

% load answers/Mueller2004c/SmallFire.e
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoking.e',35).
:- if(is_e_toplevel).
:- load_e_cond('answers/Mueller2004c/SmallFire.e', changed).
 %  load('/pack/logicmoo_ec/ext/ec_sources/ecnet/SmallFire.e',changed).
:- endif.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoking.e',37).
% load answers/Mueller2004c/Smoke.e
:- if(is_e_toplevel).
:- load_e_cond('answers/Mueller2004c/Smoke.e', changed).
 %  load('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoke.e',changed).
:- endif.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoking.e',39).
% location Location1
 %  t(location,location1).
location(location1).
 %  location(location1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoking.e',41).
% portal DummyPortal1
 %  t(portal,dummyPortal1).
portal(dummyPortal1).
 %  portal(dummyPortal1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoking.e',43).
% agent Smoker1
 %  t(agent,smoker1).
agent(smoker1).
 %  agent(smoker1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoking.e',45).
% cigarette Cigarette1
 %  t(cigarette,cigarette1).
cigarette(cigarette1).
 %  cigarette(cigarette1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoking.e',47).
% container Package1
 %  t(container,package1).
container(package1).
 %  container(package1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoking.e',49).
% physobj Surface1
 %  t(physobj,surface1).
physobj(surface1).
 %  physobj(surface1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoking.e',51).
% physobj LightingDevice1
 %  t(physobj,lightingDevice1).
physobj(lightingDevice1).
 %  physobj(lightingDevice1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoking.e',53).
% ashtray AshTray1
 %  t(ashtray,ashTray1).
ashtray(ashTray1).
 %  ashtray(ashTray1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoking.e',55).
% physobj Trash1
 %  t(physobj,trash1).
physobj(trash1).
 %  physobj(trash1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoking.e',57).
% smoke Smoke1
 %  t(smoke,smoke1).
smoke(smoke1).
 %  smoke(smoke1).
%; prune

% sort ona, onb
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoking.e',59).
sort(ona).
 %  sort(ona).
sort(onb).
 %  sort(onb).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoking.e',61).
% fluent! On(ona,onb)
 %  blue=fluent(on(ona,onb)).
 %  fluent(on(ona,onb)).
fluents([on/2]).
 %  fluents([on/2]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoking.e',61).
mpred_prop(on(ona,onb),fluent).
 %  mpred_prop(on(ona,onb),fluent).

% event! PlaceOn(agent,ona,onb)
 %  blue=event(placeOn(agent,ona,onb)).
 %  event(placeOn(agent,ona,onb)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoking.e',61).
actions([placeOn/3]).
 %  actions([placeOn/3]).
mpred_prop(placeOn(agent,ona,onb),event).
 %  mpred_prop(placeOn(agent,ona,onb),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoking.e',63).
% event! TakeOffOf(agent,ona,onb)
 %  blue=event(takeOffOf(agent,ona,onb)).
 %  event(takeOffOf(agent,ona,onb)).
actions([takeOffOf/3]).
 %  actions([takeOffOf/3]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoking.e',63).
mpred_prop(takeOffOf(agent,ona,onb),event).
 %  mpred_prop(takeOffOf(agent,ona,onb),event).

% ona! LightingDevice1, Package1, Cigarette1
 %  t(ona,lightingDevice1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoking.e',63).
ona(lightingDevice1).
 %  ona(lightingDevice1).
 %  t(ona,package1).
ona(package1).
 %  ona(package1).
 %  t(ona,cigarette1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoking.e',63).
ona(cigarette1).
 %  ona(cigarette1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoking.e',65).
% onb! Surface1, AshTray1
 %  t(onb,surface1).
onb(surface1).
 %  onb(surface1).
 %  t(onb,ashTray1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoking.e',65).
onb(ashTray1).
 %  onb(ashTray1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoking.e',67).
% sort insidea, insideb
sort(insidea).
 %  sort(insidea).
sort(insideb).
 %  sort(insideb).

% fluent! Inside(insidea,insideb)
 %  blue=fluent(inside(insidea,insideb)).
 %  fluent(inside(insidea,insideb)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoking.e',67).
fluents([inside/2]).
 %  fluents([inside/2]).
mpred_prop(inside(insidea,insideb),fluent).
 %  mpred_prop(inside(insidea,insideb),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoking.e',69).
% event! PutInside(agent,insidea,insideb)
 %  blue=event(putInside(agent,insidea,insideb)).
 %  event(putInside(agent,insidea,insideb)).
actions([putInside/3]).
 %  actions([putInside/3]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoking.e',69).
mpred_prop(putInside(agent,insidea,insideb),event).
 %  mpred_prop(putInside(agent,insidea,insideb),event).

% event! TakeOutOf(agent,insidea,insideb)
 %  blue=event(takeOutOf(agent,insidea,insideb)).
 %  event(takeOutOf(agent,insidea,insideb)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoking.e',69).
actions([takeOutOf/3]).
 %  actions([takeOutOf/3]).
mpred_prop(takeOutOf(agent,insidea,insideb),event).
 %  mpred_prop(takeOutOf(agent,insidea,insideb),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoking.e',71).
% insidea! Cigarette1
 %  t(insidea,cigarette1).
insidea(cigarette1).
 %  insidea(cigarette1).

% insideb! Package1, Trash1
 %  t(insideb,package1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoking.e',71).
insideb(package1).
 %  insideb(package1).
 %  t(insideb,trash1).
insideb(trash1).
 %  insideb(trash1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoking.e',74).
% sort lighta, lightb, lightc
sort(lighta).
 %  sort(lighta).
sort(lightb).
 %  sort(lightb).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoking.e',74).
sort(lightc).
 %  sort(lightc).

% event! LightWith(lighta,lightb,lightc)
 %  blue=event(lightWith(lighta,lightb,lightc)).
 %  event(lightWith(lighta,lightb,lightc)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoking.e',74).
events([lightWith/3]).
 %  events([lightWith/3]).
mpred_prop(lightWith(lighta,lightb,lightc),event).
 %  mpred_prop(lightWith(lighta,lightb,lightc),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoking.e',76).
% lighta! Smoker1
 %  t(lighta,smoker1).
lighta(smoker1).
 %  lighta(smoker1).

% lightb! Cigarette1
 %  t(lightb,cigarette1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoking.e',76).
lightb(cigarette1).
 %  lightb(cigarette1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoking.e',78).
% lightc! LightingDevice1
 %  t(lightc,lightingDevice1).
lightc(lightingDevice1).
 %  lightc(lightingDevice1).
%; initial state
% [agent,object]
 % !HoldsAt(Holding(agent,object),0).
 %  pl=axiom(initially(neg(holding(Agent,Object))),[]).
 %  initially(neg(holding(Agent,Object))).
initially not holding(Agent, Object).
 %  initial_state([not(holding(Agent,Object))]).
 %  initial_state([not(holding(Agent,Object))]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoking.e',82).
% [agent,physobj]
 % !HoldsAt(SittingOn(agent,physobj),0).
 %  pl=axiom(initially(neg(sittingOn(Agent,Physobj))),[]).
 %  initially(neg(sittingOn(Agent,Physobj))).
initially not sittingOn(Agent, Physobj).
 %  initial_state([not(sittingOn(Agent,Physobj))]).
 %  initial_state([not(sittingOn(Agent,Physobj))]).


% [agent,physobj]
 % !HoldsAt(LyingOn(agent,physobj),0).
 %  pl=axiom(initially(neg(lyingOn(Agent,Physobj))),[]).
 %  initially(neg(lyingOn(Agent,Physobj))).
initially not lyingOn(Agent, Physobj).
 %  initial_state([not(lyingOn(Agent,Physobj))]).
 %  initial_state([not(lyingOn(Agent,Physobj))]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoking.e',84).
% HoldsAt(On(Package1,Surface1),0).
 %  pl=axiom(initially(on(package1,surface1)),[]).
initially on(package1, surface1).
 %  initial_state([on(package1,surface1)]).
 %  initial_state([on(package1,surface1)]).


% [physobj1,physobj2]
% !(physobj1=Package1 & physobj2=Surface1) ->
% !HoldsAt(On(physobj1, physobj2),0).
 %  clausify_pnf=(not((equals(package1, Physobj1), equals(surface1, Physobj2)))->initially(neg(on(Physobj1, Physobj2)))).

 /*  initially(neg(on(Physobj1, Physobj2))) :-
       (   not(equals(package1, Physobj1))
       ;   not(equals(surface1, Physobj2))
       ).
 */
 %   pl=axiom(initially(neg(on(Physobj1, Physobj2))), [(not(equals(Physobj1, package1));not(equals(Physobj2, surface1)))]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoking.e',86).

 /*  not(equals(Physobj1, package1));not(equals(Physobj2, surface1)) ->
       initially(neg(on(Physobj1, Physobj2))).
 */
if not equals(package1, Physobj1);not equals(surface1, Physobj2)then initially not on(Physobj1, Physobj2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoking.e',86).

 /*   reactive_rule([  (not(equals(package1, Physobj1));not(equals(surface1, Physobj2)))
                    ],
                    [initially(not(on(Physobj1, Physobj2)))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoking.e',86).

 /*   reactive_rule([  (not(equals(package1, Physobj1));not(equals(surface1, Physobj2)))
                    ],
                    [initially(not(on(Physobj1, Physobj2)))]).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoking.e',88).
% HoldsAt(Dressed(Smoker1),0).
 %  pl=axiom(initially(dressed(smoker1)),[]).
initially dressed(smoker1).
 %  initial_state([dressed(smoker1)]).
 %  initial_state([dressed(smoker1)]).


% HoldsAt(Awake(Smoker1),0).
 %  pl=axiom(initially(awake(smoker1)),[]).
initially awake(smoker1).
 %  initial_state([awake(smoker1)]).
 %  initial_state([awake(smoker1)]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoking.e',90).
% HoldsAt(Sleep3(Smoker1),0).
 %  pl=axiom(initially(sleep3(smoker1)),[]).
initially sleep3(smoker1).
 %  initial_state([sleep3(smoker1)]).
 %  initial_state([sleep3(smoker1)]).


% HoldsAt(Standing(Smoker1),0).
 %  pl=axiom(initially(standing(smoker1)),[]).
initially standing(smoker1).
 %  initial_state([standing(smoker1)]).
 %  initial_state([standing(smoker1)]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoking.e',92).
% HoldsAt(CraveNicotine(Smoker1),0).
 %  pl=axiom(initially(craveNicotine(smoker1)),[]).
initially craveNicotine(smoker1).
 %  initial_state([craveNicotine(smoker1)]).
 %  initial_state([craveNicotine(smoker1)]).


% HoldsAt(ContainerClosed(Package1),0).
 %  pl=axiom(initially(containerClosed(package1)),[]).
initially containerClosed(package1).
 %  initial_state([containerClosed(package1)]).
 %  initial_state([containerClosed(package1)]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoking.e',94).
% [physobj]
 % !HoldsAt(IsBurning(physobj),0).
 %  pl=axiom(initially(neg(isBurning(Physobj))),[]).
 %  initially(neg(isBurning(Physobj))).
initially not isBurning(Physobj).
 %  initial_state([not(isBurning(Physobj))]).
 %  initial_state([not(isBurning(Physobj))]).


% HoldsAt(Inside(Cigarette1,Package1),0).
 %  pl=axiom(initially(inside(cigarette1,package1)),[]).
initially inside(cigarette1, package1).
 %  initial_state([inside(cigarette1,package1)]).
 %  initial_state([inside(cigarette1,package1)]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoking.e',96).
% [physobj1,physobj2]
% !(physobj1=Cigarette1 & physobj2=Package1) ->
% !HoldsAt(Inside(physobj1, physobj2),0).
 %  clausify_pnf=(not((equals(cigarette1, Physobj1), equals(package1, Physobj2)))->initially(neg(inside(Physobj1, Physobj2)))).

 /*  initially(neg(inside(Physobj1, Physobj2))) :-
       (   not(equals(cigarette1, Physobj1))
       ;   not(equals(package1, Physobj2))
       ).
 */
 %   pl=axiom(initially(neg(inside(Physobj1, Physobj2))), [(not(equals(Physobj1, cigarette1));not(equals(Physobj2, package1)))]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoking.e',96).

 /*  not(equals(Physobj1, cigarette1));not(equals(Physobj2, package1)) ->
       initially(neg(inside(Physobj1, Physobj2))).
 */
if not equals(cigarette1, Physobj1);not equals(package1, Physobj2)then initially not inside(Physobj1, Physobj2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoking.e',96).

 /*   reactive_rule([  (not(equals(cigarette1, Physobj1));not(equals(package1, Physobj2)))
                    ],
                    [initially(not(inside(Physobj1, Physobj2)))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoking.e',96).

 /*   reactive_rule([  (not(equals(cigarette1, Physobj1));not(equals(package1, Physobj2)))
                    ],
                    [initially(not(inside(Physobj1, Physobj2)))]).
 */


%; narrative


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoking.e',101).
% Happens(TakeOffOf(Smoker1,Package1,Surface1),0).
 %  pl=axiom(happens(takeOffOf(smoker1,package1,surface1),start),[]).
 %  happens(takeOffOf(smoker1,package1,surface1),start).
observe(at(takeOffOf(smoker1,package1,surface1),start)).
 %  observe(at(takeOffOf(smoker1,package1,surface1),start)).


% Happens(ContainerOpen(Smoker1,Package1),1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoking.e',101).

 /*  pl=axiom(happens(containerOpen(smoker1,package1),When),
         [b(start,When)]).
 */

 /*  b(start, When) ->
       happens(containerOpen(smoker1, package1), When).
 */
if b(start, When)then happens(containerOpen(smoker1, package1), When).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoking.e',101).

 /*  reactive_rule([b(start,When)],
   	      [happens(containerOpen(smoker1,package1),When)]).
 */

 /*  reactive_rule([b(start,When)],
   	      [happens(containerOpen(smoker1,package1),When)]).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoking.e',103).
% Happens(TakeOutOf(Smoker1,Cigarette1,Package1),2).

 /*  pl=axiom(happens(takeOutOf(smoker1,cigarette1,package1),Start_Num2),
         [b(start,Start_Num2),toffset(start,2,Start_Num2)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoking.e',103).

 /*  (   b(start, Start_Num2),
       toffset(start, 2, Start_Num2)
   ->  happens(takeOutOf(smoker1, cigarette1, package1), Start_Num2)
   ).
 */
if b(start, Start_Num2), toffset(start, 2, Start_Num2)then happens(takeOutOf(smoker1, cigarette1, package1), Start_Num2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoking.e',103).

 /*  reactive_rule([ b(start,Start_Num2),
   		toffset(start,2,Start_Num2)
   	      ],
   	      [ happens(takeOutOf(smoker1,cigarette1,package1),
   			Start_Num2)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoking.e',103).

 /*  reactive_rule([ b(start,Start_Num2),
   		toffset(start,2,Start_Num2)
   	      ],
   	      [ happens(takeOutOf(smoker1,cigarette1,package1),
   			Start_Num2)
   	      ]).
 */


% Happens(PickUp(Smoker1,LightingDevice1),3).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoking.e',103).

 /*  pl=axiom(happens(pickUp(smoker1,lightingDevice1),Start_Num3),
         [b(start,Start_Num3),toffset(start,3,Start_Num3)]).
 */

 /*  (   b(start, Start_Num3),
       toffset(start, 3, Start_Num3)
   ->  happens(pickUp(smoker1, lightingDevice1), Start_Num3)
   ).
 */
if b(start, Start_Num3), toffset(start, 3, Start_Num3)then happens(pickUp(smoker1, lightingDevice1), Start_Num3).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoking.e',103).

 /*  reactive_rule([ b(start,Start_Num3),
   		toffset(start,3,Start_Num3)
   	      ],
   	      [ happens(pickUp(smoker1,lightingDevice1),
   			Start_Num3)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoking.e',103).

 /*  reactive_rule([ b(start,Start_Num3),
   		toffset(start,3,Start_Num3)
   	      ],
   	      [ happens(pickUp(smoker1,lightingDevice1),
   			Start_Num3)
   	      ]).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoking.e',105).
% Happens(Light(Smoker1,LightingDevice1),4).

 /*  pl=axiom(happens(light(smoker1,lightingDevice1),Start_Num4),
         [b(start,Start_Num4),toffset(start,4,Start_Num4)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoking.e',105).

 /*  (   b(start, Start_Num4),
       toffset(start, 4, Start_Num4)
   ->  happens(light(smoker1, lightingDevice1), Start_Num4)
   ).
 */
if b(start, Start_Num4), toffset(start, 4, Start_Num4)then happens(light(smoker1, lightingDevice1), Start_Num4).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoking.e',105).

 /*  reactive_rule([ b(start,Start_Num4),
   		toffset(start,4,Start_Num4)
   	      ],
   	      [ happens(light(smoker1,lightingDevice1),
   			Start_Num4)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoking.e',105).

 /*  reactive_rule([ b(start,Start_Num4),
   		toffset(start,4,Start_Num4)
   	      ],
   	      [ happens(light(smoker1,lightingDevice1),
   			Start_Num4)
   	      ]).
 */


% Happens(LightWith(Smoker1,Cigarette1,LightingDevice1),5).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoking.e',105).

 /*  pl=axiom(happens(lightWith(smoker1,cigarette1,lightingDevice1),
   	      Start_Num5),
         [b(start,Start_Num5),toffset(start,5,Start_Num5)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoking.e',105).

 /*  (   b(start, Start_Num5),
       toffset(start, 5, Start_Num5)
   ->  happens(lightWith(smoker1, cigarette1, lightingDevice1), Start_Num5)
   ).
 */
if b(start, Start_Num5), toffset(start, 5, Start_Num5)then happens(lightWith(smoker1, cigarette1, lightingDevice1), Start_Num5).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoking.e',105).

 /*  reactive_rule([ b(start,Start_Num5),
   		toffset(start,5,Start_Num5)
   	      ],
   	      [ happens(lightWith(smoker1,cigarette1,lightingDevice1),
   			Start_Num5)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoking.e',105).

 /*  reactive_rule([ b(start,Start_Num5),
   		toffset(start,5,Start_Num5)
   	      ],
   	      [ happens(lightWith(smoker1,cigarette1,lightingDevice1),
   			Start_Num5)
   	      ]).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoking.e',107).
% Happens(BlowOut(Smoker1,LightingDevice1),6).

 /*  pl=axiom(happens(blowOut(smoker1,lightingDevice1),Start_Num6),
         [b(start,Start_Num6),toffset(start,6,Start_Num6)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoking.e',107).

 /*  (   b(start, Start_Num6),
       toffset(start, 6, Start_Num6)
   ->  happens(blowOut(smoker1, lightingDevice1), Start_Num6)
   ).
 */
if b(start, Start_Num6), toffset(start, 6, Start_Num6)then happens(blowOut(smoker1, lightingDevice1), Start_Num6).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoking.e',107).

 /*  reactive_rule([ b(start,Start_Num6),
   		toffset(start,6,Start_Num6)
   	      ],
   	      [ happens(blowOut(smoker1,lightingDevice1),
   			Start_Num6)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoking.e',107).

 /*  reactive_rule([ b(start,Start_Num6),
   		toffset(start,6,Start_Num6)
   	      ],
   	      [ happens(blowOut(smoker1,lightingDevice1),
   			Start_Num6)
   	      ]).
 */


% Happens(PlaceOn(Smoker1,LightingDevice1,Surface1),7).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoking.e',107).

 /*  pl=axiom(happens(placeOn(smoker1,lightingDevice1,surface1),
   	      Start_Num7),
         [b(start,Start_Num7),toffset(start,7,Start_Num7)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoking.e',107).

 /*  (   b(start, Start_Num7),
       toffset(start, 7, Start_Num7)
   ->  happens(placeOn(smoker1, lightingDevice1, surface1), Start_Num7)
   ).
 */
if b(start, Start_Num7), toffset(start, 7, Start_Num7)then happens(placeOn(smoker1, lightingDevice1, surface1), Start_Num7).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoking.e',107).

 /*  reactive_rule([ b(start,Start_Num7),
   		toffset(start,7,Start_Num7)
   	      ],
   	      [ happens(placeOn(smoker1,lightingDevice1,surface1),
   			Start_Num7)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoking.e',107).

 /*  reactive_rule([ b(start,Start_Num7),
   		toffset(start,7,Start_Num7)
   	      ],
   	      [ happens(placeOn(smoker1,lightingDevice1,surface1),
   			Start_Num7)
   	      ]).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoking.e',109).
% Happens(PlaceOn(Smoker1,Package1,Surface1),8).

 /*  pl=axiom(happens(placeOn(smoker1,package1,surface1),Start_Num8),
         [b(start,Start_Num8),toffset(start,8,Start_Num8)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoking.e',109).

 /*  (   b(start, Start_Num8),
       toffset(start, 8, Start_Num8)
   ->  happens(placeOn(smoker1, package1, surface1), Start_Num8)
   ).
 */
if b(start, Start_Num8), toffset(start, 8, Start_Num8)then happens(placeOn(smoker1, package1, surface1), Start_Num8).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoking.e',109).

 /*  reactive_rule([ b(start,Start_Num8),
   		toffset(start,8,Start_Num8)
   	      ],
   	      [ happens(placeOn(smoker1,package1,surface1),
   			Start_Num8)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoking.e',109).

 /*  reactive_rule([ b(start,Start_Num8),
   		toffset(start,8,Start_Num8)
   	      ],
   	      [ happens(placeOn(smoker1,package1,surface1),
   			Start_Num8)
   	      ]).
 */


% Happens(Puff(Smoker1,Cigarette1),9).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoking.e',109).

 /*  pl=axiom(happens(puff(smoker1,cigarette1),Start_Num9),
         [b(start,Start_Num9),toffset(start,9,Start_Num9)]).
 */

 /*  (   b(start, Start_Num9),
       toffset(start, 9, Start_Num9)
   ->  happens(puff(smoker1, cigarette1), Start_Num9)
   ).
 */
if b(start, Start_Num9), toffset(start, 9, Start_Num9)then happens(puff(smoker1, cigarette1), Start_Num9).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoking.e',109).

 /*  reactive_rule([ b(start,Start_Num9),
   		toffset(start,9,Start_Num9)
   	      ],
   	      [happens(puff(smoker1,cigarette1),Start_Num9)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoking.e',109).

 /*  reactive_rule([ b(start,Start_Num9),
   		toffset(start,9,Start_Num9)
   	      ],
   	      [happens(puff(smoker1,cigarette1),Start_Num9)]).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoking.e',111).
% Happens(BlowOutSmoke(Smoker1,Smoke1),10).

 /*  pl=axiom(happens(blowOutSmoke(smoker1,smoke1),Start_Num10),
         [b(start,Start_Num10),toffset(start,10,Start_Num10)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoking.e',111).

 /*  (   b(start, Start_Num10),
       toffset(start, 10, Start_Num10)
   ->  happens(blowOutSmoke(smoker1, smoke1), Start_Num10)
   ).
 */
if b(start, Start_Num10), toffset(start, 10, Start_Num10)then happens(blowOutSmoke(smoker1, smoke1), Start_Num10).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoking.e',111).

 /*  reactive_rule([ b(start,Start_Num10),
   		toffset(start,10,Start_Num10)
   	      ],
   	      [happens(blowOutSmoke(smoker1,smoke1),Start_Num10)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoking.e',111).

 /*  reactive_rule([ b(start,Start_Num10),
   		toffset(start,10,Start_Num10)
   	      ],
   	      [happens(blowOutSmoke(smoker1,smoke1),Start_Num10)]).
 */


% Happens(PlaceOn(Smoker1,Cigarette1,AshTray1),11).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoking.e',111).

 /*  pl=axiom(happens(placeOn(smoker1,cigarette1,ashTray1),Start_Num11),
         [b(start,Start_Num11),toffset(start,11,Start_Num11)]).
 */

 /*  (   b(start, Start_Num11),
       toffset(start, 11, Start_Num11)
   ->  happens(placeOn(smoker1, cigarette1, ashTray1), Start_Num11)
   ).
 */
if b(start, Start_Num11), toffset(start, 11, Start_Num11)then happens(placeOn(smoker1, cigarette1, ashTray1), Start_Num11).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoking.e',111).

 /*  reactive_rule([ b(start,Start_Num11),
   		toffset(start,11,Start_Num11)
   	      ],
   	      [ happens(placeOn(smoker1,cigarette1,ashTray1),
   			Start_Num11)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoking.e',111).

 /*  reactive_rule([ b(start,Start_Num11),
   		toffset(start,11,Start_Num11)
   	      ],
   	      [ happens(placeOn(smoker1,cigarette1,ashTray1),
   			Start_Num11)
   	      ]).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoking.e',113).
% Happens(TakeOffOf(Smoker1,Cigarette1,AshTray1),12).

 /*  pl=axiom(happens(takeOffOf(smoker1,cigarette1,ashTray1),Start_Num12),
         [b(start,Start_Num12),toffset(start,12,Start_Num12)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoking.e',113).

 /*  (   b(start, Start_Num12),
       toffset(start, 12, Start_Num12)
   ->  happens(takeOffOf(smoker1, cigarette1, ashTray1), Start_Num12)
   ).
 */
if b(start, Start_Num12), toffset(start, 12, Start_Num12)then happens(takeOffOf(smoker1, cigarette1, ashTray1), Start_Num12).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoking.e',113).

 /*  reactive_rule([ b(start,Start_Num12),
   		toffset(start,12,Start_Num12)
   	      ],
   	      [ happens(takeOffOf(smoker1,cigarette1,ashTray1),
   			Start_Num12)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoking.e',113).

 /*  reactive_rule([ b(start,Start_Num12),
   		toffset(start,12,Start_Num12)
   	      ],
   	      [ happens(takeOffOf(smoker1,cigarette1,ashTray1),
   			Start_Num12)
   	      ]).
 */


% Happens(Puff(Smoker1,Cigarette1),13).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoking.e',113).

 /*  pl=axiom(happens(puff(smoker1,cigarette1),Start_Num13),
         [b(start,Start_Num13),toffset(start,13,Start_Num13)]).
 */

 /*  (   b(start, Start_Num13),
       toffset(start, 13, Start_Num13)
   ->  happens(puff(smoker1, cigarette1), Start_Num13)
   ).
 */
if b(start, Start_Num13), toffset(start, 13, Start_Num13)then happens(puff(smoker1, cigarette1), Start_Num13).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoking.e',113).

 /*  reactive_rule([ b(start,Start_Num13),
   		toffset(start,13,Start_Num13)
   	      ],
   	      [happens(puff(smoker1,cigarette1),Start_Num13)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoking.e',113).

 /*  reactive_rule([ b(start,Start_Num13),
   		toffset(start,13,Start_Num13)
   	      ],
   	      [happens(puff(smoker1,cigarette1),Start_Num13)]).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoking.e',115).
% Happens(PutOut(Smoker1,Cigarette1),14).

 /*  pl=axiom(happens(putOut(smoker1,cigarette1),Start_Num14),
         [b(start,Start_Num14),toffset(start,14,Start_Num14)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoking.e',115).

 /*  (   b(start, Start_Num14),
       toffset(start, 14, Start_Num14)
   ->  happens(putOut(smoker1, cigarette1), Start_Num14)
   ).
 */
if b(start, Start_Num14), toffset(start, 14, Start_Num14)then happens(putOut(smoker1, cigarette1), Start_Num14).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoking.e',115).

 /*  reactive_rule([ b(start,Start_Num14),
   		toffset(start,14,Start_Num14)
   	      ],
   	      [happens(putOut(smoker1,cigarette1),Start_Num14)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoking.e',115).

 /*  reactive_rule([ b(start,Start_Num14),
   		toffset(start,14,Start_Num14)
   	      ],
   	      [happens(putOut(smoker1,cigarette1),Start_Num14)]).
 */


% Happens(PutInside(Smoker1,Cigarette1,Trash1),15).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoking.e',115).

 /*  pl=axiom(happens(putInside(smoker1,cigarette1,trash1),Start_Num15),
         [b(start,Start_Num15),toffset(start,15,Start_Num15)]).
 */

 /*  (   b(start, Start_Num15),
       toffset(start, 15, Start_Num15)
   ->  happens(putInside(smoker1, cigarette1, trash1), Start_Num15)
   ).
 */
if b(start, Start_Num15), toffset(start, 15, Start_Num15)then happens(putInside(smoker1, cigarette1, trash1), Start_Num15).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoking.e',115).

 /*  reactive_rule([ b(start,Start_Num15),
   		toffset(start,15,Start_Num15)
   	      ],
   	      [ happens(putInside(smoker1,cigarette1,trash1),
   			Start_Num15)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoking.e',115).

 /*  reactive_rule([ b(start,Start_Num15),
   		toffset(start,15,Start_Num15)
   	      ],
   	      [ happens(putInside(smoker1,cigarette1,trash1),
   			Start_Num15)
   	      ]).
 */

% range time 0 16
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoking.e',117).
range(time,0,16).
 %  range(time,0,16).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoking.e',119).
% range offset 0 0
range(offset,0,0).
 %  range(offset,0,0).

% range diameter 0 0
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoking.e',119).
range(diameter,0,0).
 %  range(diameter,0,0).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoking.e',122).
% completion Happens
completion(happens).
 %  completion(happens).
%; End of file.
% translate: ending  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/Smoking.e.lps 
