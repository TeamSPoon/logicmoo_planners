:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Cognition.e',20).
% translate: unskipped  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/Condition.e.lps 
:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(lps).
% translate: begining  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/Condition.e.lps 
% Thu, 08 Oct 2020 21:35:57 GMT File: <stream>(0x55894c2fee00)


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Cognition.e',20).
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; human health

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Condition.e',13).
% fluent Alive(agent)
% fluent(
%    alive(agent)).
fluents([alive/1]).
% mpred_prop(
%    alive(agent), 
%    fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Condition.e',13).
mpred_prop(alive(agent),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Condition.e',15).
% fluent Dead(agent)
% fluent(
%    dead(agent)).
fluents([dead/1]).
% mpred_prop(
%    dead(agent), 
%    fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Condition.e',15).
mpred_prop(dead(agent),fluent).

% noninertial Dead
% noninertial(dead).
noninertial(dead).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Condition.e',18).
% fluent Injured(agent)
% fluent(
%    injured(agent)).
fluents([injured/1]).
% mpred_prop(
%    injured(agent), 
%    fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Condition.e',18).
mpred_prop(injured(agent),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Condition.e',20).
% event Kill(object,agent)
% event(
%    kill(object,agent)).
events([kill/2]).
% mpred_prop(
%    kill(object,agent), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Condition.e',20).
mpred_prop(kill(object,agent),event).

% event Injure(object,agent)
% event(
%    injure(object,agent)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Condition.e',20).
events([injure/2]).
% mpred_prop(
%    injure(object,agent), 
%    event).
mpred_prop(injure(object,agent),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Condition.e',22).
% event HealInjured(agent)
% event(
%    healInjured(agent)).
actions([healInjured/1]).
% mpred_prop(
%    healInjured(agent), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Condition.e',22).
mpred_prop(healInjured(agent),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Condition.e',24).
% [agent,time]
 % HoldsAt(Alive(agent),time) <-> !HoldsAt(Dead(agent),time).

 /*  holds_at(alive(Agent), Time) <->
       holds_at(neg(dead(Agent)), Time).
 */
% '->'(
%    alive(Agent), 
%    not(
%       dead(Agent))).
if alive(Agent)then not dead(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Condition.e',24).

 /*  reactive_rule([holds(alive(Agent),Time_At)],
   	      [not(dead(Agent))]).
 */
 %  "% =================================".
% '->'(
%    not(
%       not(
%          dead(Agent))), 
%    not(
%       alive(Agent))).
not alive(Agent)if not not dead(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Condition.e',24).

 /*  l_int(holds(not(alive(Agent)),Time_At3),
         [not(not(dead(Agent)))]).
 */
 %  "% =================================".
% '->'(
%    not(
%       dead(Agent)), 
%    alive(Agent)).
alive(Agent)if not dead(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Condition.e',24).

 /*  l_int(holds(alive(Agent),Time_At4),
         [not(dead(Agent))]).
 */
 %  "% =================================".
% '->'(
%    not(
%       alive(Agent)), 
%    not(
%       not(
%          dead(Agent)))).
if not alive(Agent)then not not dead(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Condition.e',24).

 /*  reactive_rule([holds(not(alive(Agent)),Time_At5)],
   	      [not(not(dead(Agent)))]).
 */
 %  "% =================================".


% [agent,time]
 % HoldsAt(Injured(agent),time) -> HoldsAt(Alive(agent),time).
% '->'(
%    injured(Agent), 
%    alive(Agent)).
alive(Agent)if injured(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Condition.e',24).

 /*  l_int(holds(alive(Agent),Time_At),
         [holds(injured(Agent),Time_At)]).
 */
 %  "% =================================".
% '->'(
%    not(
%       alive(Agent)), 
%    not(
%       injured(Agent))).
not injured(Agent)if not alive(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Condition.e',24).

 /*  l_int(holds(not(injured(Agent)),Time_At3),
         [holds(not(alive(Agent)),Time_At3)]).
 */
 %  "% =================================".


% [object,agent,time]
% Terminates(Kill(object,agent),Alive(agent),time).
% terminates(
%    kill(Object,Agent), 
%    alive(Agent), 
%    Time).
kill(Object, Agent)terminates alive(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Condition.e',28).

 /*  terminated(happens(kill(Object,Agent),
   		   Time_From,
   		   Time_Until),
   	   alive(Agent),
   	   []).
 */
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Condition.e',30).
% [object,agent,time]
% Initiates(Injure(object,agent),Injured(agent),time).
% initiates(
%    injure(Object,Agent), 
%    injured(Agent), 
%    Time).
injure(Object, Agent)initiates injured(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Condition.e',30).

 /*  initiated(happens(injure(Object,Agent),
   		  Time_From,
   		  Time_Until),
   	  injured(Agent),
   	  []).
 */
 %  "% =================================".


% [agent,time]
% Terminates(HealInjured(agent),Injured(agent),time).
% terminates(
%    healInjured(Agent), 
%    injured(Agent), 
%    Time).
healInjured(Agent)terminates injured(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Condition.e',34).

 /*  terminated(happens(healInjured(Agent),
   		   Time_From,
   		   Time_Until),
   	   injured(Agent),
   	   []).
 */
 %  "% =================================".

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Condition.e',36).
% fluent Intact(physobj)
% fluent(
%    intact(physobj)).
fluents([intact/1]).
% mpred_prop(
%    intact(physobj), 
%    fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Condition.e',36).
mpred_prop(intact(physobj),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Condition.e',38).
% fluent Damaged(physobj)
% fluent(
%    damaged(physobj)).
fluents([damaged/1]).
% mpred_prop(
%    damaged(physobj), 
%    fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Condition.e',38).
mpred_prop(damaged(physobj),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Condition.e',40).
% fluent Destroyed(physobj)
% fluent(
%    destroyed(physobj)).
fluents([destroyed/1]).
% mpred_prop(
%    destroyed(physobj), 
%    fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Condition.e',40).
mpred_prop(destroyed(physobj),fluent).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Condition.e',42).
%; At any time, a physical object is either intact, damaged, or destroyed:

% xor Intact, Damaged, Destroyed
% xor(
%    ==>, 
%    [ intact, 
%      damaged, 
%      destroyed ]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Condition.e',42).
==>xor[intact,damaged,destroyed].

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Condition.e',45).
% event Damage(object,physobj)
% event(
%    damage(object,physobj)).
events([damage/2]).
% mpred_prop(
%    damage(object,physobj), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Condition.e',45).
mpred_prop(damage(object,physobj),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Condition.e',47).
% event Destroy(object,physobj)
% event(
%    destroy(object,physobj)).
events([destroy/2]).
% mpred_prop(
%    destroy(object,physobj), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Condition.e',47).
mpred_prop(destroy(object,physobj),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Condition.e',49).
% event Repair(object,physobj)
% event(
%    repair(object,physobj)).
events([repair/2]).
% mpred_prop(
%    repair(object,physobj), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Condition.e',49).
mpred_prop(repair(object,physobj),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Condition.e',51).
% [object,physobj,time]
% Happens(Damage(object,physobj),time) ->
% HoldsAt(Intact(physobj),time).
% '->'(
%    metreqs(
%       damage(Object,Physobj)), 
%    requires(
%       damage(Object,Physobj), 
%       When_Time)).
if damage(Object, Physobj)then requires(damage(Object, Physobj), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Condition.e',51).

 /*  reactive_rule([ happens(damage(Object,Physobj),
   			Time_From,
   			Time_Until)
   	      ],
   	      [ requires(damage(Object,Physobj),
   			 When_Time)
   	      ]).
 */
 %  "% =================================".
% '->'(
%    intact(Physobj), 
%    metreqs(
%       damage(Object,Physobj))).
damage(Object, Physobj)if intact(Physobj).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Condition.e',51).

 /*  l_events(happens(damage(Object,Physobj),
   		 Time_From6,
   		 Time_From6),
   	 [holds(intact(Physobj),Time_From6)]).
 */
 %  "% =================================".
% '->'(
%    not(
%       intact(Physobj)), 
%    not(
%       damage(Object,Physobj))).
if not intact(Physobj)then not damage(Object, Physobj).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Condition.e',51).

 /*  reactive_rule([holds(not(intact(Physobj)),Time_At)],
   	      [not(damage(Object,Physobj))]).
 */
 %  "% =================================".


% [object,physobj,time]
% Initiates(Damage(object,physobj),Damaged(physobj),time).
% initiates(
%    damage(Object,Physobj), 
%    damaged(Physobj), 
%    Time).
damage(Object, Physobj)initiates damaged(Physobj).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Condition.e',56).

 /*  initiated(happens(damage(Object,Physobj),
   		  Time_From,
   		  Time_Until),
   	  damaged(Physobj),
   	  []).
 */
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Condition.e',58).
% [object,physobj,time]
% Terminates(Damage(object,physobj),Intact(physobj),time).
% terminates(
%    damage(Object,Physobj), 
%    intact(Physobj), 
%    Time).
damage(Object, Physobj)terminates intact(Physobj).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Condition.e',58).

 /*  terminated(happens(damage(Object,Physobj),
   		   Time_From,
   		   Time_Until),
   	   intact(Physobj),
   	   []).
 */
 %  "% =================================".


% [object,physobj,time]
% Happens(Destroy(object,physobj),time) ->
% (HoldsAt(Intact(physobj),time)|
%  HoldsAt(Damaged(physobj),time)).
% '->'(
%    ','(
%       not(
%          damaged(Physobj)), 
%       destroy(Object,Physobj)), 
%    intact(Physobj)).
intact(Physobj)if not damaged(Physobj), destroy(Object, Physobj).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Condition.e',62).

 /*  l_int(holds(intact(Physobj),Time_At),
         [ holds(not(damaged(Physobj)),Time_At),
   	happens(destroy(Object,Physobj),
   		Time_At,
   		Time_At)
         ]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       not(
%          intact(Physobj)), 
%       destroy(Object,Physobj)), 
%    damaged(Physobj)).
damaged(Physobj)if not intact(Physobj), destroy(Object, Physobj).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Condition.e',62).

 /*  l_int(holds(damaged(Physobj),Time_At4),
         [ holds(not(intact(Physobj)),Time_At4),
   	happens(destroy(Object,Physobj),
   		Time_At4,
   		Time_At4)
         ]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       not(
%          intact(Physobj)), 
%       not(
%          damaged(Physobj))), 
%    not(
%       destroy(Object,Physobj))).
if not intact(Physobj), not damaged(Physobj)then not destroy(Object, Physobj).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Condition.e',62).

 /*  reactive_rule([ holds(not(intact(Physobj)),Time_At5),
   		holds(not(damaged(Physobj)),Time_At5)
   	      ],
   	      [not(destroy(Object,Physobj))]).
 */
 %  "% =================================".


% [object,physobj,time]
% Initiates(Destroy(object,physobj),Destroyed(physobj),time).
% initiates(
%    destroy(Object,Physobj), 
%    destroyed(Physobj), 
%    Time).
destroy(Object, Physobj)initiates destroyed(Physobj).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Condition.e',67).

 /*  initiated(happens(destroy(Object,Physobj),
   		  Time_From,
   		  Time_Until),
   	  destroyed(Physobj),
   	  []).
 */
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Condition.e',69).
% [object,physobj,time]
% Terminates(Destroy(object,physobj),Intact(physobj),time).
% terminates(
%    destroy(Object,Physobj), 
%    intact(Physobj), 
%    Time).
destroy(Object, Physobj)terminates intact(Physobj).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Condition.e',69).

 /*  terminated(happens(destroy(Object,Physobj),
   		   Time_From,
   		   Time_Until),
   	   intact(Physobj),
   	   []).
 */
 %  "% =================================".


% [object,physobj,time]
% Terminates(Destroy(object,physobj),Damaged(physobj),time).
% terminates(
%    destroy(Object,Physobj), 
%    damaged(Physobj), 
%    Time).
destroy(Object, Physobj)terminates damaged(Physobj).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Condition.e',73).

 /*  terminated(happens(destroy(Object,Physobj),
   		   Time_From,
   		   Time_Until),
   	   damaged(Physobj),
   	   []).
 */
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Condition.e',75).
% [object,physobj,time]
% Initiates(Repair(object,physobj),Intact(physobj),time).
% initiates(
%    repair(Object,Physobj), 
%    intact(Physobj), 
%    Time).
repair(Object, Physobj)initiates intact(Physobj).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Condition.e',75).

 /*  initiated(happens(repair(Object,Physobj),
   		  Time_From,
   		  Time_Until),
   	  intact(Physobj),
   	  []).
 */
 %  "% =================================".


%; end of file.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Condition.e',77).
% translate: ending  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/Condition.e.lps 
