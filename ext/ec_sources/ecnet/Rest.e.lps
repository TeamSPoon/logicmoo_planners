:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',279).
% translate: unskipped  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e.lps 
:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(lps).
% translate: begining  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e.lps 
% Wed, 07 Oct 2020 11:03:07 GMT File: <stream>(0x55afad9b5200)%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{Mueller:InPress,
%;   author = "Erik T. Mueller",
%;   year = "in press",
%;   title = "Modelling space and time in narratives about restaurants",
%;   journal = "Literary and Linguistic Computing",
%; }
%;

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',19).
% option renaming off
:- if(is_e_toplevel).
:- set_ec_option(renaming, off).
:- endif.

% option encoding 3
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',19).
:- if(is_e_toplevel).
:- set_ec_option(encoding, 3).
:- endif.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',22).
% load foundations/Root.e
:- if(is_e_toplevel).
:- cond_convert_e(changed, 'foundations/Root.e').
:- endif.

% load foundations/EC.e
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',22).
:- if(is_e_toplevel).
:- cond_convert_e(changed, 'foundations/EC.e').
:- endif.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',24).
% load answers/Mueller2003/Ontology.e
:- if(is_e_toplevel).
:- cond_convert_e(changed, 'answers/Mueller2003/Ontology.e').
 %  loading(changed,'/pack/logicmoo_ec/ext/ec_sources/ecnet/Ontology.e').
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; integer
%;

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Ontology.e',14).
% sort diameter: integer
subsort(diameter,integer).
%; object

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Ontology.e',18).
% sort object
sort(object).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Ontology.e',20).
% sort agent: object
subsort(agent,object).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Ontology.e',22).
% sort physobj: object
subsort(physobj,object).

% sort bed: physobj
subsort(bed,physobj).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Ontology.e',24).
% sort snowflake: physobj
subsort(snowflake,physobj).

% sort sky: physobj
subsort(sky,physobj).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Ontology.e',27).
% sort stuff: physobj
subsort(stuff,physobj).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Ontology.e',29).
% sort surface: physobj
subsort(surface,physobj).

% sort ground: surface
subsort(ground,surface).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Ontology.e',32).
% sort snow: stuff
subsort(snow,stuff).

% sort ball
sort(ball).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Ontology.e',35).
% sort food: physobj
subsort(food,physobj).

% sort fruit: food
subsort(fruit,food).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Ontology.e',37).
% sort orange: fruit
subsort(orange,fruit).

% sort salad: food
subsort(salad,food).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Ontology.e',40).
% sort clothing: physobj
subsort(clothing,physobj).

% sort scarf: clothing
subsort(scarf,clothing).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Ontology.e',42).
% sort hat: clothing
subsort(hat,clothing).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Ontology.e',44).
% sort vegetablematter: physobj
subsort(vegetablematter,physobj).

% sort coal: vegetablematter
subsort(coal,vegetablematter).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Ontology.e',47).
% sort bodypart: physobj
subsort(bodypart,physobj).

% sort hand: bodypart
subsort(hand,bodypart).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Ontology.e',50).
% sort papertowels: physobj
subsort(papertowels,physobj).

% sort device: physobj
subsort(device,physobj).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Ontology.e',52).
% sort electronicdevice: device
subsort(electronicdevice,device).

% sort lamp: electronicdevice
subsort(lamp,electronicdevice).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Ontology.e',55).
% sort cat: physobj
subsort(cat,physobj).

% sort horse: physobj
subsort(horse,physobj).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Ontology.e',58).
% sort weapon: physobj
subsort(weapon,physobj).

% sort gun: weapon
subsort(gun,weapon).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Ontology.e',60).
% sort bomb: weapon
subsort(bomb,weapon).

% sort bullet: weapon
subsort(bullet,weapon).
%; location

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Ontology.e',65).
% sort location
sort(location).

% sort room: location, outside: location
subsort(room,location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Ontology.e',65).
subsort(outside,location).
%; portal

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Ontology.e',70).
% sort portal
sort(portal).

% sort door: portal, staircase: portal
subsort(door,portal).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Ontology.e',70).
subsort(staircase,portal).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Ontology.e',72).
% sort street: portal
subsort(street,portal).

% sort track: portal
subsort(track,portal).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Ontology.e',75).
% sort building
sort(building).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Ontology.e',77).
% sort fire: object
subsort(fire,object).

% sort smoke: physobj
subsort(smoke,physobj).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Ontology.e',80).
% sort furniture: physobj
subsort(furniture,physobj).

% sort chair: furniture
subsort(chair,furniture).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Ontology.e',82).
% sort table: furniture
subsort(table,furniture).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Ontology.e',84).
% sort bill: physobj
subsort(bill,physobj).

% sort ticket: physobj
subsort(ticket,physobj).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Ontology.e',86).
% sort envelope: physobj
subsort(envelope,physobj).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Ontology.e',88).
% sort text: physobj
subsort(text,physobj).

% sort book: text
subsort(book,text).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Ontology.e',90).
% sort letter: text
subsort(letter,text).

% sort menu: text
subsort(menu,text).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Ontology.e',93).
% sort paper: physobj
subsort(paper,physobj).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Ontology.e',95).
% sort content
sort(content).

% sort script
sort(script).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Ontology.e',98).
% sort container: physobj
subsort(container,physobj).

% sort cigarette: physobj
subsort(cigarette,physobj).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Ontology.e',100).
% sort ashtray: physobj
subsort(ashtray,physobj).

% sort umbrella: physobj
subsort(umbrella,physobj).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Ontology.e',103).
% sort pen: physobj
subsort(pen,physobj).
%; End of file.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Ontology.e',105).
:- endif.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',25).
% load answers/MuellerInPress/RepRest.e
:- if(is_e_toplevel).
:- cond_convert_e(changed, 'answers/MuellerInPress/RepRest.e').
 %  loading(changed,'/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e').
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{Mueller:InPress,
%;   author = "Erik T. Mueller",
%;   year = "in press",
%;   title = "Modelling space and time in narratives about restaurants",
%;   journal = "Literary and Linguistic Computing",
%; }
%;
%;sort boolean
%;sort integer
%;reified sort predicate
%;reified sort function
%;
%;sort time: integer
%;sort offset: integer
%;
%;reified sort fluent
%;reified sort event
%;
%;predicate Happens(event,time)
%;predicate HoldsAt(fluent,time)
%;predicate ReleasedAt(fluent,time)
%;predicate Initiates(event,fluent,time)
%;predicate Terminates(event,fluent,time)
%;predicate Releases(event,fluent,time)
%;
%;sort diameter: integer
%;
%;sort object
%;
%;sort agent: object
%;
%;sort physobj: object
%;sort bed: physobj
%;sort snowflake: physobj
%;sort sky: physobj
%;
%;sort stuff: physobj
%;
%;sort surface: physobj
%;sort ground: surface
%;
%;sort snow: stuff
%;sort ball
%;
%;sort food: physobj
%;sort fruit: food
%;sort orange: fruit
%;sort salad: food
%;
%;sort clothing: physobj
%;sort scarf: clothing
%;sort hat: clothing
%;
%;sort vegetablematter: physobj
%;sort coal: vegetablematter
%;
%;sort bodypart: physobj
%;sort hand: bodypart
%;
%;sort papertowels: physobj
%;sort device: physobj
%;sort electronicdevice: device
%;sort lamp: electronicdevice
%;
%;sort cat: physobj
%;
%;sort weapon: physobj
%;sort gun: weapon
%;sort bomb: weapon
%;sort bullet: weapon
%;
%;sort location
%;sort room: location, outside: location
%;
%;sort portal
%;sort door: portal, staircase: portal
%;sort street: portal
%;
%;sort building
%;
%;sort fire: object
%;
%;sort furniture: physobj
%;sort chair: furniture
%;sort table: furniture
%;
%;sort menu: physobj
%;sort bill: physobj
%;
%;sort script
%;

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',103).
% fluent Holding(agent,physobj)
 %  fluent(holding(agent,physobj)).
 %  fluent(holding(agent,physobj)).
fluents([holding/2]).
mpred_prop(holding(agent,physobj),fluent).

% event PickUp(agent,physobj)
 %  event(pickUp(agent,physobj)).
 %  event(pickUp(agent,physobj)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',103).
actions([pickUp/2]).
mpred_prop(pickUp(agent,physobj),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',105).
% event LetGoOf(agent,physobj)
 %  event(letGoOf(agent,physobj)).
 %  event(letGoOf(agent,physobj)).
actions([letGoOf/2]).
mpred_prop(letGoOf(agent,physobj),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',107).
% [agent,physobj,time]
% Initiates(PickUp(agent,physobj),Holding(agent,physobj),time).

 /*  axiom(initiates(pickUp(Agent, Physobj), holding(Agent, Physobj), Time),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',107).

 /*  initiates(pickUp(A,Pickup),
   	  holding(A,Pickup),
   	  Initiates).
 */
pickUp(A, Pickup)initiates holding(A, Pickup).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',107).

 /*  initiated(happens(pickUp(A,Pickup),
   		  Time_From,
   		  Time_Until),
   	  holding(A,Pickup),
   	  []).
 */


% [agent,physobj,time]
% Happens(PickUp(agent,physobj),time) ->
% {location}% 
%   HoldsAt(At(agent,location),time) &
%   HoldsAt(At(physobj,location),time).
 %  clausify_pnf=exists([Location],  (happens(pickUp(Agent, Physobj), Time)->holds_at(at(Agent, Location), Time), holds_at(at(Physobj, Location), Time))).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',111).

 /*  not(happens(pickUp(Agent, Physobj), Time)) :-
       (   not(holds_at(at(Agent, Exists_Location), Time))
       ;   not(holds_at(at(Physobj, Exists_Location), Time))
       ),
       some(Exists_Location,
            '$kolem_Fn_4'(Agent, Physobj, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',111).

 /*  fix_axiom_head(Time) ->
       [ not(happens(pickUp(Agent, Physobj), Time)),
          (->),
         not(pickUp(Agent, Physobj))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',111).

 /*  axiom(not(pickUp(Agent, Physobj)),
       [  (not(at(Agent, Exists_Location));not(at(Physobj, Exists_Location))),
         some(Exists_Location,
              '$kolem_Fn_4'(Agent, Physobj, Time))
       ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',111).

 /*  (   (   not(at(Kolem_Fn_4P_Num3_V, Tloc))
       ;   not(at(Pickup, Tloc))
       ),
       some(Tloc,
            '$kolem_Fn_4'(Kolem_Fn_4P_Num3_V, Pickup, Kolem_Fn_4))
   ->  not(pickUp(Kolem_Fn_4P_Num3_V, Pickup))
   ).
 */
if (not loc_at(Kolem_Fn_4P_Num3_V, Tloc);not loc_at(Pickup, Tloc)), some(Tloc, '$kolem_Fn_4'(Kolem_Fn_4P_Num3_V, Pickup, Kolem_Fn_4))then not pickUp(Kolem_Fn_4P_Num3_V, Pickup).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',111).

 /*   reactive_rule([  (not(loc_at(Kolem_Fn_4P_Num3_V, Tloc));not(loc_at(Pickup, Tloc))),
                      some(Tloc,
                           '$kolem_Fn_4'(Kolem_Fn_4P_Num3_V,
                                         Pickup,
                                         Kolem_Fn_4))
                    ],
                    [not(pickUp(Kolem_Fn_4P_Num3_V, Pickup))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',111).

 /*  holds_at(at(Agent, Exists_Location), Time) :-
       happens(pickUp(Agent, Physobj), Time),
       some(Exists_Location,
            '$kolem_Fn_4'(Agent, Physobj, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',111).

 /*  fix_axiom_head(Time) ->
       [ holds_at(at(Agent, Exists_Location), Time),
          (->),
         at(Agent, Exists_Location)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',111).

 /*  axiom(at(Agent, Exists_Location),
       [ pickUp(Agent, Physobj),
         some(Exists_Location,
              '$kolem_Fn_4'(Agent, Physobj, Time))
       ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',111).

 /*  (   pickUp(Kolem_Fn_4P_Num3_V12, Pickup10),
       some(Tloc9,
            '$kolem_Fn_4'(Kolem_Fn_4P_Num3_V12,
                          Pickup10,
                          Kolem_Fn_411))
   ->  at(Kolem_Fn_4P_Num3_V12, Tloc9)
   ).
 */
if pickUp(Kolem_Fn_4P_Num3_V12, Pickup10), some(Tloc9, '$kolem_Fn_4'(Kolem_Fn_4P_Num3_V12, Pickup10, Kolem_Fn_411))then loc_at(Kolem_Fn_4P_Num3_V12, Tloc9).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',111).

 /*  reactive_rule([ happens(pickUp(Kolem_Fn_4P_Num3_V12,
   			       Pickup10),
   			Time_From,
   			Time_Until),
   		some(Tloc9,
   		     '$kolem_Fn_4'(Kolem_Fn_4P_Num3_V12,
   				   Pickup10,
   				   Kolem_Fn_411))
   	      ],
   	      [loc_at(Kolem_Fn_4P_Num3_V12,Tloc9)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',111).

 /*  holds_at(at(Physobj, Exists_Location), Time) :-
       happens(pickUp(Agent, Physobj), Time),
       some(Exists_Location,
            '$kolem_Fn_4'(Agent, Physobj, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',111).

 /*  fix_axiom_head(Time) ->
       [ holds_at(at(Physobj, Exists_Location), Time),
          (->),
         at(Physobj, Exists_Location)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',111).

 /*  axiom(at(Physobj, Exists_Location),
       [ pickUp(Agent, Physobj),
         some(Exists_Location,
              '$kolem_Fn_4'(Agent, Physobj, Time))
       ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',111).

 /*  (   pickUp(Kolem_Fn_4P_Num3_V18, Pickup16),
       some(Tloc15,
            '$kolem_Fn_4'(Kolem_Fn_4P_Num3_V18,
                          Pickup16,
                          Kolem_Fn_417))
   ->  at(Pickup16, Tloc15)
   ).
 */
if pickUp(Kolem_Fn_4P_Num3_V18, Pickup16), some(Tloc15, '$kolem_Fn_4'(Kolem_Fn_4P_Num3_V18, Pickup16, Kolem_Fn_417))then loc_at(Pickup16, Tloc15).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',111).

 /*  reactive_rule([ happens(pickUp(Kolem_Fn_4P_Num3_V18,
   			       Pickup16),
   			Time_From19,
   			Time_Until20),
   		some(Tloc15,
   		     '$kolem_Fn_4'(Kolem_Fn_4P_Num3_V18,
   				   Pickup16,
   				   Kolem_Fn_417))
   	      ],
   	      [loc_at(Pickup16,Tloc15)]).
 */


% [agent,physobj,time]
% Terminates(LetGoOf(agent,physobj),Holding(agent,physobj),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',117).

 /*  axiom(terminates(letGoOf(Agent, Physobj), holding(Agent, Physobj), Time),
       []).
 */

 /*  terminates(letGoOf(A,Letgoof),
   	   holding(A,Letgoof),
   	   Terminates).
 */
letGoOf(A, Letgoof)terminates holding(A, Letgoof).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',117).

 /*  terminated(happens(letGoOf(A,Letgoof),
   		   Time_From,
   		   Time_Until),
   	   holding(A,Letgoof),
   	   []).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',119).
% [agent,physobj,time]
% Happens(LetGoOf(agent,physobj),time) ->
% HoldsAt(Holding(agent,physobj),time).

 /*  happens(letGoOf(Agent, Physobj), Time) ->
       holds_at(holding(Agent, Physobj), Time).
 */
if happens(letGoOf(Agent, Physobj), Time)then holding(Agent, Physobj)at Time.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',119).

 /*  reactive_rule([happens(letGoOf(Agent,Physobj),Time)],
   	      [holds(holding(Agent,Physobj),Time)]).
 */


% [agent,physobj,location,time]
% Releases(PickUp(agent,physobj),At(physobj,location),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',124).

 /*  axiom(releases(pickUp(Agent, Physobj), at(Physobj, Location), Time),
       []).
 */

 /*  releases(pickUp(_,Pickup),
   	 at(Pickup,Tloc),
   	 Releases).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',124).
releases(pickUp(_,Pickup),
	 loc_at(Pickup,Tloc),
	 Releases).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',126).
% [agent,physobj,location,time]
% HoldsAt(Holding(agent,physobj),time) &
% HoldsAt(At(agent,location),time) ->
% HoldsAt(At(physobj,location),time).

 /*  (   holds_at(holding(Agent, Physobj), Time),
       holds_at(at(Agent, Location), Time)
   ->  holds_at(at(Physobj, Location), Time)
   ).
 */
if holding(Agent, Physobj)at Time, loc_at(Agent, Location)at Time then loc_at(Physobj, Location)at Time.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',126).

 /*  reactive_rule([ holds(holding(Agent,Physobj),Time),
   		holds(loc_at(Agent,Location),Time)
   	      ],
   	      [holds(loc_at(Physobj,Location),Time)]).
 */


%;[agent,physobj,location1,location2,time]
%;HoldsAt(At(agent,location1),time) &
%;location1!=location2 ->
%;Terminates(LetGoOf(agent,physobj),At(physobj,location2),time).
% [agent,physobj,location,time]
% HoldsAt(At(agent,location),time) ->
% Initiates(LetGoOf(agent,physobj),At(physobj,location),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',136).

 /*  axiom(initiates(letGoOf(Agent, Physobj), at(Physobj, Location), Time),
       [at(Agent, Location)]).
 */

 /*  at(A, Tloc) ->
       initiates(letGoOf(A, Letgoof),
                 at(Letgoof, Tloc),
                 Initiates).
 */
if loc_at(A, Tloc)then initiates(letGoOf(A, Letgoof), loc_at(Letgoof, Tloc)at Initiates, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',136).

 /*  reactive_rule([holds(loc_at(A,Tloc),Holds)],
   	      [ initiates(letGoOf(A,Letgoof),
   			  at(loc_at(Letgoof,Tloc),
   			     Initiates),
   			  Initiates8)
   	      ]).
 */

% fluent On(physobj,physobj)
 %  fluent(on(physobj,physobj)).
 %  fluent(on(physobj,physobj)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',139).
fluents([on/2]).
mpred_prop(on(physobj,physobj),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',142).
% event PlaceOn(agent,physobj,physobj)
 %  event(placeOn(agent,physobj,physobj)).
 %  event(placeOn(agent,physobj,physobj)).
actions([placeOn/3]).
mpred_prop(placeOn(agent,physobj,physobj),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',144).
% event TakeOffOf(agent,physobj,physobj)
 %  event(takeOffOf(agent,physobj,physobj)).
 %  event(takeOffOf(agent,physobj,physobj)).
actions([takeOffOf/3]).
mpred_prop(takeOffOf(agent,physobj,physobj),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',146).
% [physobj1,physobj2,time]
% HoldsAt(On(physobj1,physobj2),time) ->
% physobj1!=physobj2.

 /*  holds_at(on(Physobj1, Physobj2), Time) ->
       diff(Physobj1, Physobj2).
 */
if on(Physobj1, Physobj2)at Time then diff(Physobj1, Physobj2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',146).

 /*  reactive_rule([holds(on(Physobj1,Physobj2),Time)],
   	      [diff(Physobj1,Physobj2)]).
 */


% [physobj1,physobj2,time]
% HoldsAt(On(physobj1,physobj2),time) ->
% !HoldsAt(On(physobj2,physobj1),time).

 /*  holds_at(on(Physobj1, Physobj2), Time) ->
       holds_at(neg(on(Physobj2, Physobj1)), Time).
 */
if on(Physobj1, Physobj2)at Time then not on(Physobj2, Physobj1)at Time.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',151).

 /*  reactive_rule([holds(on(Physobj1,Physobj2),Time)],
   	      [ holds(not(on(Physobj2,Physobj1)),
   		      Time)
   	      ]).
 */


% [agent,physobj1,physobj2,time]
% Initiates(PlaceOn(agent,physobj1,physobj2),
%           On(physobj1,physobj2),time).

 /*  axiom(initiates(placeOn(Agent, Physobj1, Physobj2), on(Physobj1, Physobj2), Time),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',155).

 /*  initiates(placeOn(PlaceonP_Num3_V,A,Placeon),
   	  on(A,Placeon),
   	  Initiates).
 */
placeOn(PlaceonP_Num3_V, A, Placeon)initiates on(A, Placeon).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',155).

 /*  initiated(happens(placeOn(PlaceonP_Num3_V,A,Placeon),
   		  Time_From,
   		  Time_Until),
   	  on(A,Placeon),
   	  []).
 */


% [agent,physobj1,physobj2,time]
% Terminates(PlaceOn(agent,physobj1,physobj2),
%            Holding(agent,physobj1),time).

 /*  axiom(terminates(placeOn(Agent, Physobj1, Physobj2), holding(Agent, Physobj1), Time),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',159).

 /*  terminates(placeOn(PlaceonP_Num3_V,Holding,Placeon),
   	   holding(PlaceonP_Num3_V,Holding),
   	   Terminates).
 */
placeOn(PlaceonP_Num3_V, Holding, Placeon)terminates holding(PlaceonP_Num3_V, Holding).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',159).

 /*  terminated(happens(placeOn(PlaceonP_Num3_V,
   			   Holding,
   			   Placeon),
   		   Time_From,
   		   Time_Until),
   	   holding(PlaceonP_Num3_V,Holding),
   	   []).
 */


% [agent,physobj1,physobj2,time]
% Happens(PlaceOn(agent,physobj1,physobj2),time) ->
% HoldsAt(Holding(agent,physobj1),time) &
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',163).
% {location}% 
%  HoldsAt(At(agent,location),time) &
%  HoldsAt(At(physobj2,location),time).
 %  clausify_pnf=exists([Location],  (happens(placeOn(Agent, Physobj1, Physobj2), Time)->holds_at(holding(Agent, Physobj1), Time), holds_at(at(Agent, Location), Time), holds_at(at(Physobj2, Location), Time))).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',165).

 /*  not(happens(placeOn(Agent, Physobj1, Physobj2), Time)) :-
       (   not(holds_at(holding(Agent, Physobj1), Time))
       ;   not(holds_at(at(Agent, Exists_Location), Time))
       ;   not(holds_at(at(Physobj2, Exists_Location), Time))
       ),
       some(Exists_Location,
            '$kolem_Fn_5'(Agent, Physobj1, Physobj2, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',165).

 /*  fix_axiom_head(Time) ->
       [ not(happens(placeOn(Agent, Physobj1, Physobj2),
                     Time)),
          (->),
         not(placeOn(Agent, Physobj1, Physobj2))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',165).

 /*  axiom(not(placeOn(Agent, Physobj1, Physobj2)),
       [  (not(holding(Agent, Physobj1));not(at(Agent, Exists_Location));not(at(Physobj2, Exists_Location))),
         some(Exists_Location,
              '$kolem_Fn_5'(Agent, Physobj1, Physobj2, Time))
       ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',165).

 /*  (   (   not(holding(Kolem_Fn_5P_Num4_V, Holding))
       ;   not(at(Kolem_Fn_5P_Num4_V, Tloc))
       ;   not(at(Placeon, Tloc))
       ),
       some(Tloc,
            '$kolem_Fn_5'(Kolem_Fn_5P_Num4_V,
                          Holding,
                          Placeon,
                          Kolem_Fn_5))
   ->  not(placeOn(Kolem_Fn_5P_Num4_V, Holding, Placeon))
   ).
 */
if (not holding(Kolem_Fn_5P_Num4_V, Holding);not loc_at(Kolem_Fn_5P_Num4_V, Tloc);not loc_at(Placeon, Tloc)), some(Tloc, '$kolem_Fn_5'(Kolem_Fn_5P_Num4_V, Holding, Placeon, Kolem_Fn_5))then not placeOn(Kolem_Fn_5P_Num4_V, Holding, Placeon).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',165).

 /*   reactive_rule([  (not(holding(Kolem_Fn_5P_Num4_V, Holding));not(loc_at(Kolem_Fn_5P_Num4_V, Tloc));not(loc_at(Placeon, Tloc))),
                      some(Tloc,
                           '$kolem_Fn_5'(Kolem_Fn_5P_Num4_V,
                                         Holding,
                                         Placeon,
                                         Kolem_Fn_5))
                    ],
                    [ not(placeOn(Kolem_Fn_5P_Num4_V,
                                  Holding,
                                  Placeon))
                    ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',165).

 /*  holds_at(holding(Agent, Physobj1), Time) :-
       happens(placeOn(Agent, Physobj1, Physobj2), Time),
       some(Exists_Location,
            '$kolem_Fn_5'(Agent, Physobj1, Physobj2, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',165).

 /*  fix_axiom_head(Time) ->
       [ holds_at(holding(Agent, Physobj1), Time),
          (->),
         holding(Agent, Physobj1)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',165).

 /*  axiom(holding(Agent, Physobj1),
       [ placeOn(Agent, Physobj1, Physobj2),
         some(Exists_Location,
              '$kolem_Fn_5'(Agent, Physobj1, Physobj2, Time))
       ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',165).

 /*  (   placeOn(PlaceonP_Num3_V, Holding14, Placeon11),
       some(_,
            '$kolem_Fn_5'(PlaceonP_Num3_V,
                          Holding14,
                          Placeon11,
                          Kolem_Fn_513))
   ->  holding(PlaceonP_Num3_V, Holding14)
   ).
 */
if placeOn(PlaceonP_Num3_V, Holding14, Placeon11), some(_, '$kolem_Fn_5'(PlaceonP_Num3_V, Holding14, Placeon11, Kolem_Fn_513))then holding(PlaceonP_Num3_V, Holding14).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',165).

 /*  reactive_rule([ happens(placeOn(PlaceonP_Num3_V,
   				Holding14,
   				Placeon11),
   			Time_From,
   			Time_Until),
   		some(_,
   		     '$kolem_Fn_5'(PlaceonP_Num3_V,
   				   Holding14,
   				   Placeon11,
   				   Kolem_Fn_513))
   	      ],
   	      [ holds(holding(PlaceonP_Num3_V,Holding14),
   		      Holds)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',165).

 /*  holds_at(at(Agent, Exists_Location), Time) :-
       happens(placeOn(Agent, Physobj1, Physobj2), Time),
       some(Exists_Location,
            '$kolem_Fn_5'(Agent, Physobj1, Physobj2, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',165).

 /*  fix_axiom_head(Time) ->
       [ holds_at(at(Agent, Exists_Location), Time),
          (->),
         at(Agent, Exists_Location)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',165).

 /*  axiom(at(Agent, Exists_Location),
       [ placeOn(Agent, Physobj1, Physobj2),
         some(Exists_Location,
              '$kolem_Fn_5'(Agent, Physobj1, Physobj2, Time))
       ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',165).

 /*  (   placeOn(PlaceonP_Num3_V20, A, Placeon19),
       some(Tloc18,
            '$kolem_Fn_5'(PlaceonP_Num3_V20,
                          A,
                          Placeon19,
                          Kolem_Fn_521))
   ->  at(PlaceonP_Num3_V20, Tloc18)
   ).
 */
if placeOn(PlaceonP_Num3_V20, A, Placeon19), some(Tloc18, '$kolem_Fn_5'(PlaceonP_Num3_V20, A, Placeon19, Kolem_Fn_521))then loc_at(PlaceonP_Num3_V20, Tloc18).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',165).

 /*  reactive_rule([ happens(placeOn(PlaceonP_Num3_V20,
   				A,
   				Placeon19),
   			Time_From22,
   			Time_Until23),
   		some(Tloc18,
   		     '$kolem_Fn_5'(PlaceonP_Num3_V20,
   				   A,
   				   Placeon19,
   				   Kolem_Fn_521))
   	      ],
   	      [ holds(loc_at(PlaceonP_Num3_V20,Tloc18),
   		      Holds24)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',165).

 /*  holds_at(at(Physobj2, Exists_Location), Time) :-
       happens(placeOn(Agent, Physobj1, Physobj2), Time),
       some(Exists_Location,
            '$kolem_Fn_5'(Agent, Physobj1, Physobj2, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',165).

 /*  fix_axiom_head(Time) ->
       [ holds_at(at(Physobj2, Exists_Location), Time),
          (->),
         at(Physobj2, Exists_Location)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',165).

 /*  axiom(at(Physobj2, Exists_Location),
       [ placeOn(Agent, Physobj1, Physobj2),
         some(Exists_Location,
              '$kolem_Fn_5'(Agent, Physobj1, Physobj2, Time))
       ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',165).

 /*  (   placeOn(PlaceonP_Num3_V27, A, Placeon26),
       some(Tloc25,
            '$kolem_Fn_5'(PlaceonP_Num3_V27,
                          A,
                          Placeon26,
                          Kolem_Fn_528))
   ->  at(Placeon26, Tloc25)
   ).
 */
if placeOn(PlaceonP_Num3_V27, A, Placeon26), some(Tloc25, '$kolem_Fn_5'(PlaceonP_Num3_V27, A, Placeon26, Kolem_Fn_528))then loc_at(Placeon26, Tloc25).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',165).

 /*  reactive_rule([ happens(placeOn(PlaceonP_Num3_V27,
   				A,
   				Placeon26),
   			Time_From29,
   			Time_Until30),
   		some(Tloc25,
   		     '$kolem_Fn_5'(PlaceonP_Num3_V27,
   				   A,
   				   Placeon26,
   				   Kolem_Fn_528))
   	      ],
   	      [ holds(loc_at(Placeon26,Tloc25),
   		      Holds31)
   	      ]).
 */


% [agent,physobj1,physobj2,time]
% Terminates(TakeOffOf(agent,physobj1,physobj2),
%            On(physobj1,physobj2),time).

 /*  axiom(terminates(takeOffOf(Agent, Physobj1, Physobj2), on(Physobj1, Physobj2), Time),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',170).

 /*  terminates(takeOffOf(TakeoffofP_Num3_V,A,Takeoffof),
   	   on(A,Takeoffof),
   	   Terminates).
 */
takeOffOf(TakeoffofP_Num3_V, A, Takeoffof)terminates on(A, Takeoffof).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',170).

 /*  terminated(happens(takeOffOf(TakeoffofP_Num3_V,
   			     A,
   			     Takeoffof),
   		   Time_From,
   		   Time_Until),
   	   on(A,Takeoffof),
   	   []).
 */


% [agent,physobj1,physobj2,time]
% Initiates(TakeOffOf(agent,physobj1,physobj2),
%           Holding(agent,physobj1),time).

 /*  axiom(initiates(takeOffOf(Agent, Physobj1, Physobj2), holding(Agent, Physobj1), Time),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',174).

 /*  initiates(takeOffOf(TakeoffofP_Num3_V,
   		    Holding,
   		    Takeoffof),
   	  holding(TakeoffofP_Num3_V,Holding),
   	  Initiates).
 */
takeOffOf(TakeoffofP_Num3_V, Holding, Takeoffof)initiates holding(TakeoffofP_Num3_V, Holding).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',174).

 /*  initiated(happens(takeOffOf(TakeoffofP_Num3_V,
   			    Holding,
   			    Takeoffof),
   		  Time_From,
   		  Time_Until),
   	  holding(TakeoffofP_Num3_V,Holding),
   	  []).
 */


% [agent,physobj1,physobj2,location,time]
% Releases(TakeOffOf(agent,physobj1,physobj2),
%          At(physobj1,location),
%          time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',178).

 /*  axiom(releases(takeOffOf(Agent, Physobj1, Physobj2), at(Physobj1, Location), Time),
       []).
 */

 /*  releases(takeOffOf(TakeoffofP_Num3_V,A,Takeoffof),
   	 at(A,Tloc),
   	 Releases).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',178).
releases(takeOffOf(TakeoffofP_Num3_V,A,Takeoffof),
	 loc_at(A,Tloc),
	 Releases).


% [agent,physobj1,physobj2,time]
% Happens(TakeOffOf(agent,physobj1,physobj2),time) ->
% HoldsAt(On(physobj1,physobj2),time) &
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',183).
% {location}% 
%  HoldsAt(At(agent,location),time) &
%  HoldsAt(At(physobj1,location),time) &
%  HoldsAt(At(physobj2,location),time).
 %  clausify_pnf=exists([Location],  (happens(takeOffOf(Agent, Physobj1, Physobj2), Time)->holds_at(on(Physobj1, Physobj2), Time), holds_at(at(Agent, Location), Time), holds_at(at(Physobj1, Location), Time), holds_at(at(Physobj2, Location), Time))).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',185).

 /*  not(happens(takeOffOf(Agent, Physobj1, Physobj2), Time)) :-
       (   not(holds_at(on(Physobj1, Physobj2), Time))
       ;   not(holds_at(at(Agent, Exists_Location), Time))
       ;   not(holds_at(at(Physobj1, Exists_Location), Time))
       ;   not(holds_at(at(Physobj2, Exists_Location), Time))
       ),
       some(Exists_Location,
            '$kolem_Fn_6'(Agent, Physobj1, Physobj2, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',185).

 /*  fix_axiom_head(Time) ->
       [ not(happens(takeOffOf(Agent, Physobj1, Physobj2),
                     Time)),
          (->),
         not(takeOffOf(Agent, Physobj1, Physobj2))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',185).

 /*  axiom(not(takeOffOf(Agent, Physobj1, Physobj2)),
       [  (not(on(Physobj1, Physobj2));not(at(Agent, Exists_Location));not(at(Physobj1, Exists_Location));not(at(Physobj2, Exists_Location))),
         some(Exists_Location,
              '$kolem_Fn_6'(Agent, Physobj1, Physobj2, Time))
       ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',185).

 /*  (   (   not(on(A, On))
       ;   not(at(Kolem_Fn_6P_Num4_V, Tloc))
       ;   not(at(A, Tloc))
       ;   not(at(On, Tloc))
       ),
       some(Tloc,
            '$kolem_Fn_6'(Kolem_Fn_6P_Num4_V,
                          A,
                          On,
                          Kolem_Fn_6))
   ->  not(takeOffOf(Kolem_Fn_6P_Num4_V, A, On))
   ).
 */
if (not on(A, On);not loc_at(Kolem_Fn_6P_Num4_V, Tloc);not loc_at(A, Tloc);not loc_at(On, Tloc)), some(Tloc, '$kolem_Fn_6'(Kolem_Fn_6P_Num4_V, A, On, Kolem_Fn_6))then not takeOffOf(Kolem_Fn_6P_Num4_V, A, On).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',185).

 /*   reactive_rule([  (not(on(A, On));not(loc_at(Kolem_Fn_6P_Num4_V, Tloc));not(loc_at(A, Tloc));not(loc_at(On, Tloc))),
                      some(Tloc,
                           '$kolem_Fn_6'(Kolem_Fn_6P_Num4_V,
                                         A,
                                         On,
                                         Kolem_Fn_6))
                    ],
                    [not(takeOffOf(Kolem_Fn_6P_Num4_V, A, On))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',185).

 /*  holds_at(on(Physobj1, Physobj2), Time) :-
       happens(takeOffOf(Agent, Physobj1, Physobj2), Time),
       some(Exists_Location,
            '$kolem_Fn_6'(Agent, Physobj1, Physobj2, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',185).

 /*  fix_axiom_head(Time) ->
       [ holds_at(on(Physobj1, Physobj2), Time),
          (->),
         on(Physobj1, Physobj2)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',185).

 /*  axiom(on(Physobj1, Physobj2),
       [ takeOffOf(Agent, Physobj1, Physobj2),
         some(Exists_Location,
              '$kolem_Fn_6'(Agent, Physobj1, Physobj2, Time))
       ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',185).

 /*  (   takeOffOf(TakeoffofP_Num3_V, A, Takeoffof),
       some(_,
            '$kolem_Fn_6'(TakeoffofP_Num3_V,
                          A,
                          Takeoffof,
                          Kolem_Fn_612))
   ->  on(A, Takeoffof)
   ).
 */
if takeOffOf(TakeoffofP_Num3_V, A, Takeoffof), some(_, '$kolem_Fn_6'(TakeoffofP_Num3_V, A, Takeoffof, Kolem_Fn_612))then on(A, Takeoffof).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',185).

 /*  reactive_rule([ happens(takeOffOf(TakeoffofP_Num3_V,
   				  A,
   				  Takeoffof),
   			Time_From,
   			Time_Until),
   		some(_,
   		     '$kolem_Fn_6'(TakeoffofP_Num3_V,
   				   A,
   				   Takeoffof,
   				   Kolem_Fn_612))
   	      ],
   	      [holds(on(A,Takeoffof),Holds)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',185).

 /*  holds_at(at(Agent, Exists_Location), Time) :-
       happens(takeOffOf(Agent, Physobj1, Physobj2), Time),
       some(Exists_Location,
            '$kolem_Fn_6'(Agent, Physobj1, Physobj2, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',185).

 /*  fix_axiom_head(Time) ->
       [ holds_at(at(Agent, Exists_Location), Time),
          (->),
         at(Agent, Exists_Location)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',185).

 /*  axiom(at(Agent, Exists_Location),
       [ takeOffOf(Agent, Physobj1, Physobj2),
         some(Exists_Location,
              '$kolem_Fn_6'(Agent, Physobj1, Physobj2, Time))
       ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',185).

 /*  (   takeOffOf(TakeoffofP_Num3_V18, A, Takeoffof17),
       some(Tloc16,
            '$kolem_Fn_6'(TakeoffofP_Num3_V18,
                          A,
                          Takeoffof17,
                          Kolem_Fn_619))
   ->  at(TakeoffofP_Num3_V18, Tloc16)
   ).
 */
if takeOffOf(TakeoffofP_Num3_V18, A, Takeoffof17), some(Tloc16, '$kolem_Fn_6'(TakeoffofP_Num3_V18, A, Takeoffof17, Kolem_Fn_619))then loc_at(TakeoffofP_Num3_V18, Tloc16).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',185).

 /*  reactive_rule([ happens(takeOffOf(TakeoffofP_Num3_V18,
   				  A,
   				  Takeoffof17),
   			Time_From20,
   			Time_Until21),
   		some(Tloc16,
   		     '$kolem_Fn_6'(TakeoffofP_Num3_V18,
   				   A,
   				   Takeoffof17,
   				   Kolem_Fn_619))
   	      ],
   	      [ holds(loc_at(TakeoffofP_Num3_V18,Tloc16),
   		      Holds22)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',185).

 /*  holds_at(at(Physobj1, Exists_Location), Time) :-
       happens(takeOffOf(Agent, Physobj1, Physobj2), Time),
       some(Exists_Location,
            '$kolem_Fn_6'(Agent, Physobj1, Physobj2, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',185).

 /*  fix_axiom_head(Time) ->
       [ holds_at(at(Physobj1, Exists_Location), Time),
          (->),
         at(Physobj1, Exists_Location)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',185).

 /*  axiom(at(Physobj1, Exists_Location),
       [ takeOffOf(Agent, Physobj1, Physobj2),
         some(Exists_Location,
              '$kolem_Fn_6'(Agent, Physobj1, Physobj2, Time))
       ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',185).

 /*  (   takeOffOf(TakeoffofP_Num3_V25, A, Takeoffof24),
       some(Tloc23,
            '$kolem_Fn_6'(TakeoffofP_Num3_V25,
                          A,
                          Takeoffof24,
                          Kolem_Fn_626))
   ->  at(A, Tloc23)
   ).
 */
if takeOffOf(TakeoffofP_Num3_V25, A, Takeoffof24), some(Tloc23, '$kolem_Fn_6'(TakeoffofP_Num3_V25, A, Takeoffof24, Kolem_Fn_626))then loc_at(A, Tloc23).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',185).

 /*  reactive_rule([ happens(takeOffOf(TakeoffofP_Num3_V25,
   				  A,
   				  Takeoffof24),
   			Time_From27,
   			Time_Until28),
   		some(Tloc23,
   		     '$kolem_Fn_6'(TakeoffofP_Num3_V25,
   				   A,
   				   Takeoffof24,
   				   Kolem_Fn_626))
   	      ],
   	      [holds(loc_at(A,Tloc23),Holds29)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',185).

 /*  holds_at(at(Physobj2, Exists_Location), Time) :-
       happens(takeOffOf(Agent, Physobj1, Physobj2), Time),
       some(Exists_Location,
            '$kolem_Fn_6'(Agent, Physobj1, Physobj2, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',185).

 /*  fix_axiom_head(Time) ->
       [ holds_at(at(Physobj2, Exists_Location), Time),
          (->),
         at(Physobj2, Exists_Location)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',185).

 /*  axiom(at(Physobj2, Exists_Location),
       [ takeOffOf(Agent, Physobj1, Physobj2),
         some(Exists_Location,
              '$kolem_Fn_6'(Agent, Physobj1, Physobj2, Time))
       ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',185).

 /*  (   takeOffOf(TakeoffofP_Num3_V32, A, Takeoffof31),
       some(Tloc30,
            '$kolem_Fn_6'(TakeoffofP_Num3_V32,
                          A,
                          Takeoffof31,
                          Kolem_Fn_633))
   ->  at(Takeoffof31, Tloc30)
   ).
 */
if takeOffOf(TakeoffofP_Num3_V32, A, Takeoffof31), some(Tloc30, '$kolem_Fn_6'(TakeoffofP_Num3_V32, A, Takeoffof31, Kolem_Fn_633))then loc_at(Takeoffof31, Tloc30).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',185).

 /*  reactive_rule([ happens(takeOffOf(TakeoffofP_Num3_V32,
   				  A,
   				  Takeoffof31),
   			Time_From34,
   			Time_Until35),
   		some(Tloc30,
   		     '$kolem_Fn_6'(TakeoffofP_Num3_V32,
   				   A,
   				   Takeoffof31,
   				   Kolem_Fn_633))
   	      ],
   	      [ holds(loc_at(Takeoffof31,Tloc30),
   		      Holds36)
   	      ]).
 */


% [agent,physobj1,physobj2,location,time]
% Releases(PlaceOn(agent,physobj1,physobj2),
%          At(physobj1,location),
%          time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',191).

 /*  axiom(releases(placeOn(Agent, Physobj1, Physobj2), at(Physobj1, Location), Time),
       []).
 */

 /*  releases(placeOn(PlaceonP_Num3_V,A,Placeon),
   	 at(A,Tloc),
   	 Releases).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',191).
releases(placeOn(PlaceonP_Num3_V,A,Placeon),
	 loc_at(A,Tloc),
	 Releases).


% [physobj1,physobj2,location,time]
% HoldsAt(On(physobj1,physobj2),time) &
% HoldsAt(At(physobj2,location),time) ->
% HoldsAt(At(physobj1,location),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',196).

 /*  (   holds_at(on(Physobj1, Physobj2), Time),
       holds_at(at(Physobj2, Location), Time)
   ->  holds_at(at(Physobj1, Location), Time)
   ).
 */
if on(Physobj1, Physobj2)at Time, loc_at(Physobj2, Location)at Time then loc_at(Physobj1, Location)at Time.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',196).

 /*  reactive_rule([ holds(on(Physobj1,Physobj2),Time),
   		holds(loc_at(Physobj2,Location),Time)
   	      ],
   	      [holds(loc_at(Physobj1,Location),Time)]).
 */

% fluent At(object,location)
 %  fluent(at(object,location)).
 %  fluent(at(object,location)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',199).
fluents([loc_at/2]).
 %  mpred_prop(at(object,location),fluent).
mpred_prop(loc_at(object,location),fluent).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',202).
% [object,time]
% {location} % HoldsAt(At(object,location),time).

 /*  clausify_pnf=exists([Location],
          holds_at(at(Object,Location),Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',202).

 /*  holds_at(at(Object, Exists_Location), Time) :-
       some(Exists_Location, '$kolem_Fn_7'(Object, Time)).
 */

 /*  fix_axiom_head(Time) ->
       [ holds_at(at(Object, Exists_Location), Time),
          (->),
         at(Object, Exists_Location)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',202).

 /*  axiom(at(Object, Exists_Location),
       [some(Exists_Location, '$kolem_Fn_7'(Object, Time))]).
 */

 /*  some(Tloc, '$kolem_Fn_7'(A, Kolem_Fn_7)) ->
       at(A, Tloc).
 */
if some(Tloc, '$kolem_Fn_7'(A, Kolem_Fn_7))then loc_at(A, Tloc).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',202).

 /*  reactive_rule([some(Tloc,'$kolem_Fn_7'(A,Kolem_Fn_7))],
   	      [holds(loc_at(A,Tloc),Holds)]).
 */


% [object,location1,location2,time]
% HoldsAt(At(object,location1),time) &
% HoldsAt(At(object,location2),time) ->
% location1=location2.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',206).

 /*  (   holds_at(at(Object, Location1), Time),
       holds_at(at(Object, Location2), Time)
   ->  equals(Location1, Location2)
   ).
 */
if loc_at(Object, Location1)at Time, loc_at(Object, Location2)at Time then equals(Location1, Location2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',206).

 /*  reactive_rule([ holds(loc_at(Object,Location1),Time),
   		holds(loc_at(Object,Location2),Time)
   	      ],
   	      [equals(Location1,Location2)]).
 */

% function Side1(portal): location
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',209).

 /*  axiom(function_argtypes(Function_ArgtypesP_Num3_V, side1(portal), location),
       []).
 */
function_argtypes(Function_ArgtypesP_Num3_V1,
		  side1(portal),
		  location).
 %  predicate(side1Pred(portal,location)).
 %  predicate(side1Pred(portal,location)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',209).
predicates([side1Pred/2]).
mpred_prop(side1Pred(portal,location),predicate).

 /*  axiom(functional_predicate(side1, side1Pred),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',209).
functional_predicate(side1,side1Pred).
resultIsa(side1,location).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',211).
% function Side2(portal): location

 /*  axiom(function_argtypes(Function_ArgtypesP_Num3_V, side2(portal), location),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',211).
function_argtypes(Function_ArgtypesP_Num3_V1,
		  side2(portal),
		  location).
 %  predicate(side2Pred(portal,location)).
 %  predicate(side2Pred(portal,location)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',211).
predicates([side2Pred/2]).
mpred_prop(side2Pred(portal,location),predicate).

 /*  axiom(functional_predicate(side2, side2Pred),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',211).
functional_predicate(side2,side2Pred).
resultIsa(side2,location).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',213).
% fluent NearPortal(object,portal)
 %  fluent(nearPortal(object,portal)).
 %  fluent(nearPortal(object,portal)).
fluents([nearPortal/2]).
mpred_prop(nearPortal(object,portal),fluent).

% noninertial NearPortal
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',213).
noninertial(nearPortal).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',216).
% [object,portal,time]
% HoldsAt(NearPortal(object,portal),time) <->
% {location}% 
%  (Side1(portal)=location|
%   Side2(portal)=location) &
%  HoldsAt(At(object,location),time).
 %  clausify_pnf=exists([Location], <->(holds_at(nearPortal(Object, Portal), Time),  ((side1Pred(Portal, Location);side2Pred(Portal, Location)), holds_at(at(Object, Location), Time)))).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',218).

 /*  not(holds_at(nearPortal(Object, Portal), Time)) :-
       (   not(side1Pred(Portal, Exists_Location)),
           not(side2Pred(Portal, Exists_Location))
       ;   not(holds_at(at(Object, Exists_Location), Time))
       ),
       some(Exists_Location,
            '$kolem_Fn_8'(Object, Portal, Time)).
 */
 %  axiom(not(nearPortal(Object, Portal)), [(not(side1Pred(Portal, Exists_Location)), not(side2Pred(Portal, Exists_Location));not(at(Object, Exists_Location))), some(Exists_Location, '$kolem_Fn_8'(Object, Portal, Time))]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',218).

 /*  (   (   not(side1Pred(Nearportal, Tloc)),
           not(side2Pred(Nearportal, Tloc))
       ;   not(at(Kolem_Fn_8P_Num3_V, Tloc))
       ),
       some(Tloc,
            '$kolem_Fn_8'(Kolem_Fn_8P_Num3_V,
                          Nearportal,
                          Kolem_Fn_8))
   ->  not(nearPortal(Kolem_Fn_8P_Num3_V, Nearportal))
   ).
 */
if (not side1Pred(Nearportal, Tloc), not side2Pred(Nearportal, Tloc);not loc_at(Kolem_Fn_8P_Num3_V, Tloc)), some(Tloc, '$kolem_Fn_8'(Kolem_Fn_8P_Num3_V, Nearportal, Kolem_Fn_8))then not nearPortal(Kolem_Fn_8P_Num3_V, Nearportal).
 %  reactive_rule([(not(side1Pred(Nearportal, Tloc)), not(side2Pred(Nearportal, Tloc));not(loc_at(Kolem_Fn_8P_Num3_V, Tloc))), some(Tloc, '$kolem_Fn_8'(Kolem_Fn_8P_Num3_V, Nearportal, Kolem_Fn_8))], [not(nearPortal(Kolem_Fn_8P_Num3_V, Nearportal))]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',218).

 /*  side1Pred(Portal, Exists_Location) :-
       not(side2Pred(Portal, Exists_Location)),
       holds_at(nearPortal(Object, Portal), Time),
       some(Exists_Location,
            '$kolem_Fn_8'(Object, Portal, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',218).

 /*  fix_axiom_head(Time) ->
       [ holds_at(nearPortal(Object, Portal), Time),
          (->),
         nearPortal(Object, Portal)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',218).

 /*  axiom(side1Pred(Portal, Exists_Location),
       [ not(side2Pred(Portal, Exists_Location)),
         nearPortal(Object, Portal),
         some(Exists_Location,
              '$kolem_Fn_8'(Object, Portal, Time))
       ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',218).

 /*  (   not(side2Pred(Nearportal10, Side2pred)),
       nearPortal(Kolem_Fn_8P_Num3_V12, Nearportal10),
       some(Side2pred,
            '$kolem_Fn_8'(Kolem_Fn_8P_Num3_V12,
                          Nearportal10,
                          Kolem_Fn_811))
   ->  side1Pred(Nearportal10, Side2pred)
   ).
 */
if not side2Pred(Nearportal10, Side2pred), nearPortal(Kolem_Fn_8P_Num3_V12, Nearportal10), some(Side2pred, '$kolem_Fn_8'(Kolem_Fn_8P_Num3_V12, Nearportal10, Kolem_Fn_811))then side1Pred(Nearportal10, Side2pred).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',218).

 /*  reactive_rule([ not(side2Pred(Nearportal10,Side2pred)),
   		nearPortal(Kolem_Fn_8P_Num3_V12,
   			   Nearportal10),
   		some(Side2pred,
   		     '$kolem_Fn_8'(Kolem_Fn_8P_Num3_V12,
   				   Nearportal10,
   				   Kolem_Fn_811))
   	      ],
   	      [side1Pred(Nearportal10,Side2pred)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',218).

 /*  side2Pred(Portal, Exists_Location) :-
       not(side1Pred(Portal, Exists_Location)),
       holds_at(nearPortal(Object, Portal), Time),
       some(Exists_Location,
            '$kolem_Fn_8'(Object, Portal, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',218).

 /*  fix_axiom_head(Time) ->
       [ holds_at(nearPortal(Object, Portal), Time),
          (->),
         nearPortal(Object, Portal)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',218).

 /*  axiom(side2Pred(Portal, Exists_Location),
       [ not(side1Pred(Portal, Exists_Location)),
         nearPortal(Object, Portal),
         some(Exists_Location,
              '$kolem_Fn_8'(Object, Portal, Time))
       ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',218).

 /*  (   not(side1Pred(Nearportal14, Side1pred)),
       nearPortal(Kolem_Fn_8P_Num3_V16, Nearportal14),
       some(Side1pred,
            '$kolem_Fn_8'(Kolem_Fn_8P_Num3_V16,
                          Nearportal14,
                          Kolem_Fn_815))
   ->  side2Pred(Nearportal14, Side1pred)
   ).
 */
if not side1Pred(Nearportal14, Side1pred), nearPortal(Kolem_Fn_8P_Num3_V16, Nearportal14), some(Side1pred, '$kolem_Fn_8'(Kolem_Fn_8P_Num3_V16, Nearportal14, Kolem_Fn_815))then side2Pred(Nearportal14, Side1pred).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',218).

 /*  reactive_rule([ not(side1Pred(Nearportal14,Side1pred)),
   		nearPortal(Kolem_Fn_8P_Num3_V16,
   			   Nearportal14),
   		some(Side1pred,
   		     '$kolem_Fn_8'(Kolem_Fn_8P_Num3_V16,
   				   Nearportal14,
   				   Kolem_Fn_815))
   	      ],
   	      [side2Pred(Nearportal14,Side1pred)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',218).

 /*  holds_at(at(Object, Exists_Location), Time) :-
       holds_at(nearPortal(Object, Portal), Time),
       some(Exists_Location,
            '$kolem_Fn_8'(Object, Portal, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',218).

 /*  fix_axiom_head(Time) ->
       [ holds_at(at(Object, Exists_Location), Time),
          (->),
         at(Object, Exists_Location)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',218).

 /*  axiom(at(Object, Exists_Location),
       [ nearPortal(Object, Portal),
         some(Exists_Location,
              '$kolem_Fn_8'(Object, Portal, Time))
       ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',218).

 /*  (   nearPortal(Kolem_Fn_8P_Num3_V20, Nearportal18),
       some(Tloc17,
            '$kolem_Fn_8'(Kolem_Fn_8P_Num3_V20,
                          Nearportal18,
                          Kolem_Fn_819))
   ->  at(Kolem_Fn_8P_Num3_V20, Tloc17)
   ).
 */
if nearPortal(Kolem_Fn_8P_Num3_V20, Nearportal18), some(Tloc17, '$kolem_Fn_8'(Kolem_Fn_8P_Num3_V20, Nearportal18, Kolem_Fn_819))then loc_at(Kolem_Fn_8P_Num3_V20, Tloc17).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',218).

 /*  reactive_rule([ nearPortal(Kolem_Fn_8P_Num3_V20,
   			   Nearportal18),
   		some(Tloc17,
   		     '$kolem_Fn_8'(Kolem_Fn_8P_Num3_V20,
   				   Nearportal18,
   				   Kolem_Fn_819))
   	      ],
   	      [ holds(loc_at(Kolem_Fn_8P_Num3_V20,Tloc17),
   		      Holds)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',218).

 /*  holds_at(nearPortal(Object, Portal), Time) :-
       holds_at(at(Object, Exists_Location), Time),
       (   side1Pred(Portal, Exists_Location)
       ;   side2Pred(Portal, Exists_Location)
       ),
       some(Exists_Location,
            '$kolem_Fn_8'(Object, Portal, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',218).

 /*  fix_axiom_head(Time) ->
       [ holds_at(nearPortal(Object, Portal), Time),
          (->),
         nearPortal(Object, Portal)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',218).

 /*  axiom(nearPortal(Object, Portal),
       [ at(Object, Exists_Location),
          (side1Pred(Portal, Exists_Location);side2Pred(Portal, Exists_Location)),
         some(Exists_Location,
              '$kolem_Fn_8'(Object, Portal, Time))
       ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',218).

 /*  (   at(Kolem_Fn_8P_Num3_V24, Tloc22),
       (   side1Pred(Nearportal25, Tloc22)
       ;   side2Pred(Nearportal25, Tloc22)
       ),
       some(Tloc22,
            '$kolem_Fn_8'(Kolem_Fn_8P_Num3_V24,
                          Nearportal25,
                          Kolem_Fn_823))
   ->  nearPortal(Kolem_Fn_8P_Num3_V24, Nearportal25)
   ).
 */
if loc_at(Kolem_Fn_8P_Num3_V24, Tloc22), (side1Pred(Nearportal25, Tloc22);side2Pred(Nearportal25, Tloc22)), some(Tloc22, '$kolem_Fn_8'(Kolem_Fn_8P_Num3_V24, Nearportal25, Kolem_Fn_823))then nearPortal(Kolem_Fn_8P_Num3_V24, Nearportal25).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',218).

 /*   reactive_rule([ holds(loc_at(Kolem_Fn_8P_Num3_V24, Tloc22),
                            Holds26),
                       (side1Pred(Nearportal25, Tloc22);side2Pred(Nearportal25, Tloc22)),
                      some(Tloc22,
                           '$kolem_Fn_8'(Kolem_Fn_8P_Num3_V24,
                                         Nearportal25,
                                         Kolem_Fn_823))
                    ],
                    [nearPortal(Kolem_Fn_8P_Num3_V24, Nearportal25)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',218).

 /*  not(holds_at(at(Object, Exists_Location), Time)) :-
       (   side1Pred(Portal, Exists_Location)
       ;   side2Pred(Portal, Exists_Location)
       ),
       not(holds_at(nearPortal(Object, Portal), Time)),
       some(Exists_Location,
            '$kolem_Fn_8'(Object, Portal, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',218).

 /*  axiom(not(at(Object, Exists_Location)),
       [  (side1Pred(Portal, Exists_Location);side2Pred(Portal, Exists_Location)),
         not(nearPortal(Object, Portal)),
         some(Exists_Location,
              '$kolem_Fn_8'(Object, Portal, Time))
       ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',218).

 /*  (   (   side1Pred(Nearportal28, Tloc27)
       ;   side2Pred(Nearportal28, Tloc27)
       ),
       not(nearPortal(Kolem_Fn_8P_Num3_V30, Nearportal28)),
       some(Tloc27,
            '$kolem_Fn_8'(Kolem_Fn_8P_Num3_V30,
                          Nearportal28,
                          Kolem_Fn_829))
   ->  not(at(Kolem_Fn_8P_Num3_V30, Tloc27))
   ).
 */
if (side1Pred(Nearportal28, Tloc27);side2Pred(Nearportal28, Tloc27)), not nearPortal(Kolem_Fn_8P_Num3_V30, Nearportal28), some(Tloc27, '$kolem_Fn_8'(Kolem_Fn_8P_Num3_V30, Nearportal28, Kolem_Fn_829))then not loc_at(Kolem_Fn_8P_Num3_V30, Tloc27).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',218).

 /*   reactive_rule([  (side1Pred(Nearportal28, Tloc27);side2Pred(Nearportal28, Tloc27)),
                      not(nearPortal(Kolem_Fn_8P_Num3_V30,
                                     Nearportal28)),
                      some(Tloc27,
                           '$kolem_Fn_8'(Kolem_Fn_8P_Num3_V30,
                                         Nearportal28,
                                         Kolem_Fn_829))
                    ],
                    [ holds(not(loc_at(Kolem_Fn_8P_Num3_V30, Tloc27)),
                            Holds31)
                    ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',218).

 /*  not(side1Pred(Portal, Exists_Location)) :-
       holds_at(at(Object, Exists_Location), Time),
       not(holds_at(nearPortal(Object, Portal), Time)),
       some(Exists_Location,
            '$kolem_Fn_8'(Object, Portal, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',218).

 /*  fix_axiom_head(Time) ->
       [ holds_at(at(Object, Exists_Location), Time),
          (->),
         at(Object, Exists_Location)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',218).

 /*  axiom(not(side1Pred(Portal, Exists_Location)),
       [ at(Object, Exists_Location),
         not(nearPortal(Object, Portal)),
         some(Exists_Location,
              '$kolem_Fn_8'(Object, Portal, Time))
       ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',218).

 /*  (   at(Kolem_Fn_8P_Num3_V35, Tloc32),
       not(nearPortal(Kolem_Fn_8P_Num3_V35, Nearportal33)),
       some(Tloc32,
            '$kolem_Fn_8'(Kolem_Fn_8P_Num3_V35,
                          Nearportal33,
                          Kolem_Fn_834))
   ->  not(side1Pred(Nearportal33, Tloc32))
   ).
 */
if loc_at(Kolem_Fn_8P_Num3_V35, Tloc32), not nearPortal(Kolem_Fn_8P_Num3_V35, Nearportal33), some(Tloc32, '$kolem_Fn_8'(Kolem_Fn_8P_Num3_V35, Nearportal33, Kolem_Fn_834))then not side1Pred(Nearportal33, Tloc32).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',218).

 /*  reactive_rule([ holds(loc_at(Kolem_Fn_8P_Num3_V35,Tloc32),
   		      Holds36),
   		not(nearPortal(Kolem_Fn_8P_Num3_V35,
   			       Nearportal33)),
   		some(Tloc32,
   		     '$kolem_Fn_8'(Kolem_Fn_8P_Num3_V35,
   				   Nearportal33,
   				   Kolem_Fn_834))
   	      ],
   	      [not(side1Pred(Nearportal33,Tloc32))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',218).

 /*  not(side2Pred(Portal, Exists_Location)) :-
       holds_at(at(Object, Exists_Location), Time),
       not(holds_at(nearPortal(Object, Portal), Time)),
       some(Exists_Location,
            '$kolem_Fn_8'(Object, Portal, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',218).

 /*  fix_axiom_head(Time) ->
       [ holds_at(at(Object, Exists_Location), Time),
          (->),
         at(Object, Exists_Location)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',218).

 /*  axiom(not(side2Pred(Portal, Exists_Location)),
       [ at(Object, Exists_Location),
         not(nearPortal(Object, Portal)),
         some(Exists_Location,
              '$kolem_Fn_8'(Object, Portal, Time))
       ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',218).

 /*  (   at(Kolem_Fn_8P_Num3_V40, Tloc37),
       not(nearPortal(Kolem_Fn_8P_Num3_V40, Nearportal38)),
       some(Tloc37,
            '$kolem_Fn_8'(Kolem_Fn_8P_Num3_V40,
                          Nearportal38,
                          Kolem_Fn_839))
   ->  not(side2Pred(Nearportal38, Tloc37))
   ).
 */
if loc_at(Kolem_Fn_8P_Num3_V40, Tloc37), not nearPortal(Kolem_Fn_8P_Num3_V40, Nearportal38), some(Tloc37, '$kolem_Fn_8'(Kolem_Fn_8P_Num3_V40, Nearportal38, Kolem_Fn_839))then not side2Pred(Nearportal38, Tloc37).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',218).

 /*  reactive_rule([ holds(loc_at(Kolem_Fn_8P_Num3_V40,Tloc37),
   		      Holds41),
   		not(nearPortal(Kolem_Fn_8P_Num3_V40,
   			       Nearportal38)),
   		some(Tloc37,
   		     '$kolem_Fn_8'(Kolem_Fn_8P_Num3_V40,
   				   Nearportal38,
   				   Kolem_Fn_839))
   	      ],
   	      [not(side2Pred(Nearportal38,Tloc37))]).
 */

% event WalkThroughDoor12(agent,door)
 %  event(walkThroughDoor12(agent,door)).
 %  event(walkThroughDoor12(agent,door)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',222).
actions([walkThroughDoor12/2]).
mpred_prop(walkThroughDoor12(agent,door),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',224).
% event WalkThroughDoor21(agent,door)
 %  event(walkThroughDoor21(agent,door)).
 %  event(walkThroughDoor21(agent,door)).
actions([walkThroughDoor21/2]).
mpred_prop(walkThroughDoor21(agent,door),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',226).
% [agent,door,time]
% Happens(WalkThroughDoor12(agent,door),time) ->
% HoldsAt(Standing(agent),time) &
% HoldsAt(At(agent,Side1(door)),time).

 /*  (   happens(walkThroughDoor12(Agent, Door), Time)
   ->  holds_at(standing(Agent), Time),
       holds_at(at(Agent, side1(Door)), Time)
   ).
 */
if happens(walkThroughDoor12(Agent, Door), Time)then standing(Agent)at Time, loc_at(Agent, side1(Door))at Time.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',226).

 /*  reactive_rule([ happens(walkThroughDoor12(Agent,Door),
   			Time)
   	      ],
   	      [ holds(standing(Agent),Time),
   		holds(loc_at(Agent,side1(Door)),Time)
   	      ]).
 */


% [agent,door,time]
% Happens(WalkThroughDoor21(agent,door),time) ->
% HoldsAt(Standing(agent),time) &
% HoldsAt(At(agent,Side2(door)),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',232).

 /*  (   happens(walkThroughDoor21(Agent, Door), Time)
   ->  holds_at(standing(Agent), Time),
       holds_at(at(Agent, side2(Door)), Time)
   ).
 */
if happens(walkThroughDoor21(Agent, Door), Time)then standing(Agent)at Time, loc_at(Agent, side2(Door))at Time.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',232).

 /*  reactive_rule([ happens(walkThroughDoor21(Agent,Door),
   			Time)
   	      ],
   	      [ holds(standing(Agent),Time),
   		holds(loc_at(Agent,side2(Door)),Time)
   	      ]).
 */


% [agent,door,location,time]
% Side2(door)=location ->
% Initiates(WalkThroughDoor12(agent,door),At(agent,location),time).

 /*  axiom(initiates(walkThroughDoor12(Agent, Door), at(Agent, Location), Time),
       [side2Pred(Door, Location)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',237).

 /*  side2Pred(Walkthroughdoor12, Tloc) ->
       initiates(walkThroughDoor12(A, Walkthroughdoor12),
                 at(A, Tloc),
                 Initiates).
 */
if side2Pred(Walkthroughdoor12, Tloc)then initiates(walkThroughDoor12(A, Walkthroughdoor12), loc_at(A, Tloc)at Initiates, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',237).

 /*  reactive_rule([side2Pred(Walkthroughdoor12,Tloc)],
   	      [ initiates(walkThroughDoor12(A,
   					    Walkthroughdoor12),
   			  at(loc_at(A,Tloc),
   			     Initiates),
   			  Initiates7)
   	      ]).
 */


% [agent,door,location,time]
% Side1(door)=location ->
% Initiates(WalkThroughDoor21(agent,door),At(agent,location),time).

 /*  axiom(initiates(walkThroughDoor21(Agent, Door), at(Agent, Location), Time),
       [side1Pred(Door, Location)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',241).

 /*  side1Pred(Walkthroughdoor21, Tloc) ->
       initiates(walkThroughDoor21(A, Walkthroughdoor21),
                 at(A, Tloc),
                 Initiates).
 */
if side1Pred(Walkthroughdoor21, Tloc)then initiates(walkThroughDoor21(A, Walkthroughdoor21), loc_at(A, Tloc)at Initiates, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',241).

 /*  reactive_rule([side1Pred(Walkthroughdoor21,Tloc)],
   	      [ initiates(walkThroughDoor21(A,
   					    Walkthroughdoor21),
   			  at(loc_at(A,Tloc),
   			     Initiates),
   			  Initiates7)
   	      ]).
 */


% [agent,door,location,time]
% Side1(door)=location ->
% Terminates(WalkThroughDoor12(agent,door),At(agent,location),time).

 /*  axiom(terminates(walkThroughDoor12(Agent, Door), at(Agent, Location), Time),
       [side1Pred(Door, Location)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',245).

 /*  side1Pred(Walkthroughdoor12, Tloc) ->
       terminates(walkThroughDoor12(A, Walkthroughdoor12),
                  at(A, Tloc),
                  Terminates).
 */
if side1Pred(Walkthroughdoor12, Tloc)then terminates(walkThroughDoor12(A, Walkthroughdoor12), loc_at(A, Tloc)at Terminates, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',245).

 /*  reactive_rule([side1Pred(Walkthroughdoor12,Tloc)],
   	      [ terminates(walkThroughDoor12(A,
   					     Walkthroughdoor12),
   			   at(loc_at(A,Tloc),
   			      Terminates),
   			   Terminates7)
   	      ]).
 */


% [agent,door,location,time]
% Side2(door)=location ->
% Terminates(WalkThroughDoor21(agent,door),At(agent,location),time).

 /*  axiom(terminates(walkThroughDoor21(Agent, Door), at(Agent, Location), Time),
       [side2Pred(Door, Location)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',249).

 /*  side2Pred(Walkthroughdoor21, Tloc) ->
       terminates(walkThroughDoor21(A, Walkthroughdoor21),
                  at(A, Tloc),
                  Terminates).
 */
if side2Pred(Walkthroughdoor21, Tloc)then terminates(walkThroughDoor21(A, Walkthroughdoor21), loc_at(A, Tloc)at Terminates, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',249).

 /*  reactive_rule([side2Pred(Walkthroughdoor21,Tloc)],
   	      [ terminates(walkThroughDoor21(A,
   					     Walkthroughdoor21),
   			   at(loc_at(A,Tloc),
   			      Terminates),
   			   Terminates7)
   	      ]).
 */

% fluent Hungry(agent)
 %  fluent(hungry(agent)).
 %  fluent(hungry(agent)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',251).
fluents([hungry/1]).
mpred_prop(hungry(agent),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',254).
% fluent Satiated(agent)
 %  fluent(satiated(agent)).
 %  fluent(satiated(agent)).
fluents([satiated/1]).
mpred_prop(satiated(agent),fluent).

% noninertial Satiated
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',254).
noninertial(satiated).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',257).
% [agent,time]
 % HoldsAt(Hungry(agent),time) <-> !HoldsAt(Satiated(agent),time).

 /*  holds_at(hungry(Agent), Time) <->
       holds_at(neg(satiated(Agent)), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',257).

 /*  holds_at(hungry(Agent), Time) ->
       holds_at(neg(satiated(Agent)), Time).
 */
if hungry(Agent)at Time then not satiated(Agent)at Time.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',257).

 /*  reactive_rule([holds(hungry(Agent),Time)],
   	      [holds(not(satiated(Agent)),Time)]).
 */

 /*  holds_at(neg(satiated(Agent)), Time) ->
       holds_at(hungry(Agent), Time).
 */
if not satiated(Agent)at Time then hungry(Agent)at Time.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',257).

 /*  reactive_rule([holds(not(satiated(Agent)),Time)],
   	      [holds(hungry(Agent),Time)]).
 */

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',259).
% event Eat(agent,food)
 %  event(eat(agent,food)).
 %  event(eat(agent,food)).
actions([eat/2]).
mpred_prop(eat(agent,food),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',261).
% [agent,food,time]
% Happens(Eat(agent,food),time) ->
% {location}% 
% HoldsAt(At(agent,location),time) &
% HoldsAt(At(food,location),time).
 %  clausify_pnf=exists([Location],  (happens(eat(Agent, Food), Time)->holds_at(at(Agent, Location), Time), holds_at(at(Food, Location), Time))).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',263).

 /*  not(happens(eat(Agent, Food), Time)) :-
       (   not(holds_at(at(Agent, Exists_Location), Time))
       ;   not(holds_at(at(Food, Exists_Location), Time))
       ),
       some(Exists_Location, '$kolem_Fn_9'(Agent, Food, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',263).

 /*  fix_axiom_head(Time) ->
       [ not(happens(eat(Agent, Food), Time)),
          (->),
         not(eat(Agent, Food))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',263).

 /*  axiom(not(eat(Agent, Food)),
       [  (not(at(Agent, Exists_Location));not(at(Food, Exists_Location))),
         some(Exists_Location,
              '$kolem_Fn_9'(Agent, Food, Time))
       ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',263).

 /*  (   (   not(at(Kolem_Fn_9P_Num3_V, Tloc))
       ;   not(at(Eat, Tloc))
       ),
       some(Tloc,
            '$kolem_Fn_9'(Kolem_Fn_9P_Num3_V, Eat, Kolem_Fn_9))
   ->  not(eat(Kolem_Fn_9P_Num3_V, Eat))
   ).
 */
if (not loc_at(Kolem_Fn_9P_Num3_V, Tloc);not loc_at(Eat, Tloc)), some(Tloc, '$kolem_Fn_9'(Kolem_Fn_9P_Num3_V, Eat, Kolem_Fn_9))then not eat(Kolem_Fn_9P_Num3_V, Eat).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',263).

 /*   reactive_rule([  (not(loc_at(Kolem_Fn_9P_Num3_V, Tloc));not(loc_at(Eat, Tloc))),
                      some(Tloc,
                           '$kolem_Fn_9'(Kolem_Fn_9P_Num3_V,
                                         Eat,
                                         Kolem_Fn_9))
                    ],
                    [not(eat(Kolem_Fn_9P_Num3_V, Eat))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',263).

 /*  holds_at(at(Agent, Exists_Location), Time) :-
       happens(eat(Agent, Food), Time),
       some(Exists_Location, '$kolem_Fn_9'(Agent, Food, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',263).

 /*  fix_axiom_head(Time) ->
       [ holds_at(at(Agent, Exists_Location), Time),
          (->),
         at(Agent, Exists_Location)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',263).

 /*  axiom(at(Agent, Exists_Location),
       [ eat(Agent, Food),
         some(Exists_Location,
              '$kolem_Fn_9'(Agent, Food, Time))
       ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',263).

 /*  (   eat(Kolem_Fn_9P_Num3_V12, Eat10),
       some(Tloc9,
            '$kolem_Fn_9'(Kolem_Fn_9P_Num3_V12,
                          Eat10,
                          Kolem_Fn_911))
   ->  at(Kolem_Fn_9P_Num3_V12, Tloc9)
   ).
 */
if eat(Kolem_Fn_9P_Num3_V12, Eat10), some(Tloc9, '$kolem_Fn_9'(Kolem_Fn_9P_Num3_V12, Eat10, Kolem_Fn_911))then loc_at(Kolem_Fn_9P_Num3_V12, Tloc9).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',263).

 /*  reactive_rule([ eat(Kolem_Fn_9P_Num3_V12,Eat10),
   		some(Tloc9,
   		     '$kolem_Fn_9'(Kolem_Fn_9P_Num3_V12,
   				   Eat10,
   				   Kolem_Fn_911))
   	      ],
   	      [ holds(loc_at(Kolem_Fn_9P_Num3_V12,Tloc9),
   		      Holds)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',263).

 /*  holds_at(at(Food, Exists_Location), Time) :-
       happens(eat(Agent, Food), Time),
       some(Exists_Location, '$kolem_Fn_9'(Agent, Food, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',263).

 /*  fix_axiom_head(Time) ->
       [ holds_at(at(Food, Exists_Location), Time),
          (->),
         at(Food, Exists_Location)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',263).

 /*  axiom(at(Food, Exists_Location),
       [ eat(Agent, Food),
         some(Exists_Location,
              '$kolem_Fn_9'(Agent, Food, Time))
       ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',263).

 /*  (   eat(Kolem_Fn_9P_Num3_V17, Eat15),
       some(Tloc14,
            '$kolem_Fn_9'(Kolem_Fn_9P_Num3_V17,
                          Eat15,
                          Kolem_Fn_916))
   ->  at(Eat15, Tloc14)
   ).
 */
if eat(Kolem_Fn_9P_Num3_V17, Eat15), some(Tloc14, '$kolem_Fn_9'(Kolem_Fn_9P_Num3_V17, Eat15, Kolem_Fn_916))then loc_at(Eat15, Tloc14).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',263).

 /*  reactive_rule([ eat(Kolem_Fn_9P_Num3_V17,Eat15),
   		some(Tloc14,
   		     '$kolem_Fn_9'(Kolem_Fn_9P_Num3_V17,
   				   Eat15,
   				   Kolem_Fn_916))
   	      ],
   	      [holds(loc_at(Eat15,Tloc14),Holds18)]).
 */


% [agent,food,time]
% Terminates(Eat(agent,food),Hungry(agent),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',268).

 /*  axiom(terminates(eat(Agent, Food), hungry(Agent), Time),
       []).
 */

 /*  terminates(eat(Hungry,Eat),
   	   hungry(Hungry),
   	   Terminates).
 */
eat(Hungry, Eat)terminates hungry(Hungry).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',268).

 /*  terminated(happens(eat(Hungry,Eat),
   		   Time_From,
   		   Time_Until),
   	   hungry(Hungry),
   	   []).
 */

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',270).
% sort restaurant: script
subsort(restaurant,script).

% sort waiter: agent
subsort(waiter,agent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',272).
% sort cook: agent
subsort(cook,agent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',274).
% function BillOf(restaurant): bill

 /*  axiom(function_argtypes(Function_ArgtypesP_Num3_V, billOf(restaurant), bill),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',274).
function_argtypes(Function_ArgtypesP_Num3_V1,
		  billOf(restaurant),
		  bill).
 %  predicate(bill(restaurant,bill)).
 %  predicate(bill(restaurant,bill)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',274).
predicates([bill/2]).
mpred_prop(bill(restaurant,bill),predicate).

 /*  axiom(functional_predicate(billOf, bill),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',274).
functional_predicate(billOf,bill).
resultIsa(billOf,bill).

% function CookOf(restaurant): cook

 /*  axiom(function_argtypes(Function_ArgtypesP_Num3_V, cookOf(restaurant), cook),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',274).
function_argtypes(Function_ArgtypesP_Num3_V1,
		  cookOf(restaurant),
		  cook).
 %  predicate(cook(restaurant,cook)).
 %  predicate(cook(restaurant,cook)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',274).
predicates([cook/2]).
mpred_prop(cook(restaurant,cook),predicate).

 /*  axiom(functional_predicate(cookOf, cook),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',274).
functional_predicate(cookOf,cook).
resultIsa(cookOf,cook).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',276).
% function TableOf(restaurant): table

 /*  axiom(function_argtypes(Function_ArgtypesP_Num3_V, tableOf(restaurant), table),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',276).
function_argtypes(Function_ArgtypesP_Num3_V1,
		  tableOf(restaurant),
		  table).
 %  predicate(table(restaurant,table)).
 %  predicate(table(restaurant,table)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',276).
predicates([(table)/2]).
mpred_prop(table(restaurant,table),predicate).

 /*  axiom(functional_predicate(tableOf, table),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',276).
functional_predicate(tableOf,table).
resultIsa(tableOf,table).

% function WaiterOf(restaurant): waiter

 /*  axiom(function_argtypes(Function_ArgtypesP_Num3_V, waiterOf(restaurant), waiter),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',276).
function_argtypes(Function_ArgtypesP_Num3_V1,
		  waiterOf(restaurant),
		  waiter).
 %  predicate(waiter(restaurant,waiter)).
 %  predicate(waiter(restaurant,waiter)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',276).
predicates([waiter/2]).
mpred_prop(waiter(restaurant,waiter),predicate).

 /*  axiom(functional_predicate(waiterOf, waiter),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',276).
functional_predicate(waiterOf,waiter).
resultIsa(waiterOf,waiter).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',278).
% function KitchenDoorOf(restaurant): door

 /*  axiom(function_argtypes(Function_ArgtypesP_Num3_V, kitchenDoorOf(restaurant), door),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',278).
function_argtypes(Function_ArgtypesP_Num3_V1,
		  kitchenDoorOf(restaurant),
		  door).
 %  predicate(kitchenDoor(restaurant,door)).
 %  predicate(kitchenDoor(restaurant,door)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',278).
predicates([kitchenDoor/2]).
mpred_prop(kitchenDoor(restaurant,door),predicate).

 /*  axiom(functional_predicate(kitchenDoorOf, kitchenDoor),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',278).
functional_predicate(kitchenDoorOf,kitchenDoor).
resultIsa(kitchenDoorOf,door).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',280).
% fluent BeWaiter0(waiter)
 %  fluent(beWaiter0(waiter)).
 %  fluent(beWaiter0(waiter)).
fluents([beWaiter0/1]).
mpred_prop(beWaiter0(waiter),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',282).
% fluent BeWaiter1(waiter)
 %  fluent(beWaiter1(waiter)).
 %  fluent(beWaiter1(waiter)).
fluents([beWaiter1/1]).
mpred_prop(beWaiter1(waiter),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',284).
% fluent BeWaiter2(waiter)
 %  fluent(beWaiter2(waiter)).
 %  fluent(beWaiter2(waiter)).
fluents([beWaiter2/1]).
mpred_prop(beWaiter2(waiter),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',286).
% fluent BeWaiter3(waiter)
 %  fluent(beWaiter3(waiter)).
 %  fluent(beWaiter3(waiter)).
fluents([beWaiter3/1]).
mpred_prop(beWaiter3(waiter),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',288).
% fluent BeWaiter4(waiter)
 %  fluent(beWaiter4(waiter)).
 %  fluent(beWaiter4(waiter)).
fluents([beWaiter4/1]).
mpred_prop(beWaiter4(waiter),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',290).
% fluent BeWaiter5(waiter)
 %  fluent(beWaiter5(waiter)).
 %  fluent(beWaiter5(waiter)).
fluents([beWaiter5/1]).
mpred_prop(beWaiter5(waiter),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',292).
% fluent BeWaiter6(waiter)
 %  fluent(beWaiter6(waiter)).
 %  fluent(beWaiter6(waiter)).
fluents([beWaiter6/1]).
mpred_prop(beWaiter6(waiter),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',294).
% fluent BeWaiter7(waiter)
 %  fluent(beWaiter7(waiter)).
 %  fluent(beWaiter7(waiter)).
fluents([beWaiter7/1]).
mpred_prop(beWaiter7(waiter),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',296).
% fluent BeWaiter8(waiter)
 %  fluent(beWaiter8(waiter)).
 %  fluent(beWaiter8(waiter)).
fluents([beWaiter8/1]).
mpred_prop(beWaiter8(waiter),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',298).
% fluent BeWaiter9(waiter)
 %  fluent(beWaiter9(waiter)).
 %  fluent(beWaiter9(waiter)).
fluents([beWaiter9/1]).
mpred_prop(beWaiter9(waiter),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',300).
% xor BeWaiter0, BeWaiter1, BeWaiter2, BeWaiter3, BeWaiter4, BeWaiter5, BeWaiter6, BeWaiter7, BeWaiter8, BeWaiter9

 /*  ==>xor[ beWaiter0,
     beWaiter1,
     beWaiter2,
     beWaiter3,
     beWaiter4,
     beWaiter5,
     beWaiter6,
     beWaiter7,
     beWaiter8,
     beWaiter9
   ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',300).
==>xor[ beWaiter0,
  beWaiter1,
  beWaiter2,
  beWaiter3,
  beWaiter4,
  beWaiter5,
  beWaiter6,
  beWaiter7,
  beWaiter8,
  beWaiter9
].


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',302).
% [waiter,agent,time]
% HoldsAt(BeWaiter0(waiter),time) ->
% Terminates(Greet(waiter,agent),
%            BeWaiter0(waiter),
%            time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',302).

 /*  axiom(terminates(greet(Waiter, Agent), beWaiter0(Waiter), Time),
       [beWaiter0(Waiter)]).
 */

 /*  beWaiter0(Bewaiter0) ->
       terminates(greet(Bewaiter0, Greet),
                  beWaiter0(Bewaiter0),
                  Terminates).
 */
if beWaiter0(Bewaiter0)then terminates(greet(Bewaiter0, Greet), beWaiter0(Bewaiter0)at Terminates, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',302).

 /*  reactive_rule([beWaiter0(Bewaiter0)],
   	      [ terminates(greet(Bewaiter0,Greet),
   			   at(beWaiter0(Bewaiter0),
   			      Terminates),
   			   Terminates6)
   	      ]).
 */


% [waiter,agent,time]
% HoldsAt(BeWaiter0(waiter),time) ->
% Initiates(Greet(waiter,agent),
%           BeWaiter1(waiter),
%           time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',309).

 /*  axiom(initiates(greet(Waiter, Agent), beWaiter1(Waiter), Time),
       [beWaiter0(Waiter)]).
 */

 /*  beWaiter0(Bewaiter0) ->
       initiates(greet(Bewaiter0, Greet),
                 beWaiter1(Bewaiter0),
                 Initiates).
 */
if beWaiter0(Bewaiter0)then initiates(greet(Bewaiter0, Greet), beWaiter1(Bewaiter0)at Initiates, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',309).

 /*  reactive_rule([beWaiter0(Bewaiter0)],
   	      [ initiates(greet(Bewaiter0,Greet),
   			  at(beWaiter1(Bewaiter0),
   			     Initiates),
   			  Initiates6)
   	      ]).
 */


% [waiter,agent,food,time]
% HoldsAt(BeWaiter1(waiter),time) ->
% Terminates(Order(agent,waiter,food),
%            BeWaiter1(waiter),
%            time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',315).

 /*  axiom(terminates(order(Agent, Waiter, Food), beWaiter1(Waiter), Time),
       [beWaiter1(Waiter)]).
 */

 /*  beWaiter1(Bewaiter1) ->
       terminates(order(OrderP_Num3_V, Bewaiter1, Order),
                  beWaiter1(Bewaiter1),
                  Terminates).
 */
if beWaiter1(Bewaiter1)then terminates(order(OrderP_Num3_V, Bewaiter1, Order), beWaiter1(Bewaiter1)at Terminates, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',315).

 /*  reactive_rule([beWaiter1(Bewaiter1)],
   	      [ terminates(order(OrderP_Num3_V,
   				 Bewaiter1,
   				 Order),
   			   at(beWaiter1(Bewaiter1),
   			      Terminates),
   			   Terminates8)
   	      ]).
 */


% [waiter,agent,food,time]
% HoldsAt(BeWaiter1(waiter),time) ->
% Initiates(Order(agent,waiter,food),
%           BeWaiter2(waiter),
%           time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',321).

 /*  axiom(initiates(order(Agent, Waiter, Food), beWaiter2(Waiter), Time),
       [beWaiter1(Waiter)]).
 */

 /*  beWaiter1(Bewaiter1) ->
       initiates(order(OrderP_Num3_V, Bewaiter1, Order),
                 beWaiter2(Bewaiter1),
                 Initiates).
 */
if beWaiter1(Bewaiter1)then initiates(order(OrderP_Num3_V, Bewaiter1, Order), beWaiter2(Bewaiter1)at Initiates, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',321).

 /*  reactive_rule([beWaiter1(Bewaiter1)],
   	      [ initiates(order(OrderP_Num3_V,
   				Bewaiter1,
   				Order),
   			  at(beWaiter2(Bewaiter1),
   			     Initiates),
   			  Initiates8)
   	      ]).
 */


% [restaurant,waiter,time]
% WaiterOf(restaurant)=waiter &
% HoldsAt(BeWaiter2(waiter),time) ->
% Happens(WalkThroughDoor12(waiter,KitchenDoorOf(restaurant)),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',327).

 /*  (   waiter(Restaurant, Waiter),
       holds_at(beWaiter2(Waiter), Time)
   ->  happens(walkThroughDoor12(Waiter, kitchenDoorOf(Restaurant)),
               Time)
   ).
 */
if waiter(Restaurant, Waiter), beWaiter2(Waiter)at Time then happens(walkThroughDoor12(Waiter, kitchenDoorOf(Restaurant)), Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',327).

 /*  reactive_rule([ waiter(Restaurant,Waiter),
   		holds(beWaiter2(Waiter),Time)
   	      ],
   	      [ happens(walkThroughDoor12(Waiter,
   					  kitchenDoorOf(Restaurant)),
   			Time)
   	      ]).
 */


% [restaurant,waiter,door,time]
% HoldsAt(BeWaiter2(waiter),time) &
% WaiterOf(restaurant)=waiter &
% KitchenDoorOf(restaurant)=door ->
% Terminates(WalkThroughDoor12(waiter,door),
%            BeWaiter2(waiter),
%            time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',332).

 /*  axiom(terminates(walkThroughDoor12(Waiter, Door), beWaiter2(Waiter), Time),
       [ beWaiter2(Waiter),
         waiter(Restaurant, Waiter),
         kitchenDoor(Restaurant, Door)
       ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',332).

 /*  (   beWaiter2(Bewaiter2),
       waiter(A, Bewaiter2),
       kitchenDoor(A, Kitchendoor)
   ->  terminates(walkThroughDoor12(Bewaiter2, Kitchendoor),
                  beWaiter2(Bewaiter2),
                  Terminates)
   ).
 */
if beWaiter2(Bewaiter2), waiter(A, Bewaiter2), kitchenDoor(A, Kitchendoor)then terminates(walkThroughDoor12(Bewaiter2, Kitchendoor), beWaiter2(Bewaiter2)at Terminates, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',332).

 /*  reactive_rule([ holds(beWaiter2(Bewaiter2),Holds),
   		waiter(A,Bewaiter2),
   		kitchenDoor(A,Kitchendoor)
   	      ],
   	      [ terminates(walkThroughDoor12(Bewaiter2,
   					     Kitchendoor),
   			   at(beWaiter2(Bewaiter2),
   			      Terminates),
   			   Terminates8)
   	      ]).
 */


% [restaurant,waiter,door,time]
% HoldsAt(BeWaiter2(waiter),time) &
% WaiterOf(restaurant)=waiter &
% KitchenDoorOf(restaurant)=door ->
% Initiates(WalkThroughDoor12(waiter,door),
%           BeWaiter3(waiter),
%           time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',340).

 /*  axiom(initiates(walkThroughDoor12(Waiter, Door), beWaiter3(Waiter), Time),
       [ beWaiter2(Waiter),
         waiter(Restaurant, Waiter),
         kitchenDoor(Restaurant, Door)
       ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',340).

 /*  (   beWaiter2(Bewaiter2),
       waiter(A, Bewaiter2),
       kitchenDoor(A, Kitchendoor)
   ->  initiates(walkThroughDoor12(Bewaiter2, Kitchendoor),
                 beWaiter3(Bewaiter2),
                 Initiates)
   ).
 */
if beWaiter2(Bewaiter2), waiter(A, Bewaiter2), kitchenDoor(A, Kitchendoor)then initiates(walkThroughDoor12(Bewaiter2, Kitchendoor), beWaiter3(Bewaiter2)at Initiates, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',340).

 /*  reactive_rule([ holds(beWaiter2(Bewaiter2),Holds),
   		waiter(A,Bewaiter2),
   		kitchenDoor(A,Kitchendoor)
   	      ],
   	      [ initiates(walkThroughDoor12(Bewaiter2,
   					    Kitchendoor),
   			  at(beWaiter3(Bewaiter2),
   			     Initiates),
   			  Initiates8)
   	      ]).
 */


% [restaurant,food,time]
% HoldsAt(BeWaiter3(WaiterOf(restaurant)),time) &
% ({agent} HoldsAt(KnowOrder(WaiterOf(restaurant),agent,food),time)) ->
% Happens(Order(WaiterOf(restaurant),CookOf(restaurant),food),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',348).

 /*  (   holds_at(beWaiter3(waiterOf(Restaurant)), Time),
       exists([Agent],
              holds_at(knowOrder(waiterOf(Restaurant),
                                 Agent,
                                 Food),
                       Time))
   ->  happens(order(waiterOf(Restaurant),
                     cookOf(Restaurant),
                     Food),
               Time)
   ).
 */
if beWaiter3(waiterOf(Restaurant))at Time, exists([Agent], knowOrder(waiterOf(Restaurant), Agent, Food)at Time)then happens(order(waiterOf(Restaurant), cookOf(Restaurant), Food), Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',348).

 /*  reactive_rule([ holds(beWaiter3(waiterOf(Restaurant)),Time),
   		exists([Agent],
   		       at(knowOrder(waiterOf(Restaurant),
   				    Agent,
   				    Food),
   			  Time))
   	      ],
   	      [ happens(order(waiterOf(Restaurant),
   			      cookOf(Restaurant),
   			      Food),
   			Time)
   	      ]).
 */


% [restaurant,waiter,cook,food,time]
% WaiterOf(restaurant)=waiter &
% CookOf(restaurant)=cook &
% HoldsAt(BeWaiter3(waiter),time) ->
% Terminates(Order(waiter,cook,food),
%            BeWaiter3(waiter),
%            time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',353).

 /*  axiom(terminates(order(Waiter, Cook, Food), beWaiter3(Waiter), Time),
       [ waiter(Restaurant, Waiter),
         cook(Restaurant, Cook),
         beWaiter3(Waiter)
       ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',353).

 /*  (   waiter(A, Waiter5),
       cook(A, Cook6),
       beWaiter3(Waiter5)
   ->  terminates(order(Waiter5, Cook6, Order),
                  beWaiter3(Waiter5),
                  Terminates)
   ).
 */
if waiter(A, Waiter5), cook(A, Cook6), beWaiter3(Waiter5)then terminates(order(Waiter5, Cook6, Order), beWaiter3(Waiter5)at Terminates, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',353).

 /*  reactive_rule([ waiter(A,Waiter5),
   		cook(A,Cook6),
   		holds(beWaiter3(Waiter5),Holds)
   	      ],
   	      [ terminates(order(Waiter5,Cook6,Order),
   			   at(beWaiter3(Waiter5),
   			      Terminates),
   			   Terminates10)
   	      ]).
 */


% [restaurant,waiter,cook,food,time]
% WaiterOf(restaurant)=waiter &
% CookOf(restaurant)=cook &
% HoldsAt(BeWaiter3(waiter),time) ->
% Initiates(Order(waiter,cook,food),
%           BeWaiter4(waiter),
%           time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',361).

 /*  axiom(initiates(order(Waiter, Cook, Food), beWaiter4(Waiter), Time),
       [ waiter(Restaurant, Waiter),
         cook(Restaurant, Cook),
         beWaiter3(Waiter)
       ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',361).

 /*  (   waiter(A, Waiter5),
       cook(A, Cook6),
       beWaiter3(Waiter5)
   ->  initiates(order(Waiter5, Cook6, Order),
                 beWaiter4(Waiter5),
                 Initiates)
   ).
 */
if waiter(A, Waiter5), cook(A, Cook6), beWaiter3(Waiter5)then initiates(order(Waiter5, Cook6, Order), beWaiter4(Waiter5)at Initiates, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',361).

 /*  reactive_rule([ waiter(A,Waiter5),
   		cook(A,Cook6),
   		holds(beWaiter3(Waiter5),Holds)
   	      ],
   	      [ initiates(order(Waiter5,Cook6,Order),
   			  at(beWaiter4(Waiter5),Initiates),
   			  Initiates10)
   	      ]).
 */


% [waiter,food,time]
% HoldsAt(BeWaiter4(waiter),time) &
% ({agent} HoldsAt(KnowOrder(waiter,agent,food),time)) &
% HoldsAt(FoodPrepared(food),time) ->
% Happens(PickUp(waiter,food),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',369).

 /*  (   holds_at(beWaiter4(Waiter), Time),
       exists([Agent],
              holds_at(knowOrder(Waiter, Agent, Food), Time)),
       holds_at(foodPrepared(Food), Time)
   ->  happens(pickUp(Waiter, Food), Time)
   ).
 */
if beWaiter4(Waiter)at Time, exists([Agent], knowOrder(Waiter, Agent, Food)at Time), foodPrepared(Food)at Time then happens(pickUp(Waiter, Food), Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',369).

 /*  reactive_rule([ holds(beWaiter4(Waiter),Time),
   		exists([Agent],
   		       at(knowOrder(Waiter,
   				    Agent,
   				    Food),
   			  Time)),
   		holds(foodPrepared(Food),Time)
   	      ],
   	      [happens(pickUp(Waiter,Food),Time)]).
 */


% [waiter,food,time]
% HoldsAt(BeWaiter4(waiter),time) &
% ({agent} HoldsAt(KnowOrder(waiter,agent,food),time)) ->
% Terminates(PickUp(waiter,food),
%            BeWaiter4(waiter),
%            time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',375).

 /*  axiom(terminates(pickUp(Waiter, Food), beWaiter4(Waiter), Time),
       [beWaiter4(Waiter), knowOrder(Waiter, Agent, Food)]).
 */

 /*  (   beWaiter4(Bewaiter4),
       knowOrder(Bewaiter4, _, Knoworder)
   ->  terminates(pickUp(Bewaiter4, Knoworder),
                  beWaiter4(Bewaiter4),
                  Terminates)
   ).
 */
if beWaiter4(Bewaiter4), knowOrder(Bewaiter4, _, Knoworder)then terminates(pickUp(Bewaiter4, Knoworder), beWaiter4(Bewaiter4)at Terminates, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',375).

 /*  reactive_rule([ holds(beWaiter4(Bewaiter4),Holds),
   		holds(knowOrder(Bewaiter4,
   				_,
   				Knoworder),
   		      Holds)
   	      ],
   	      [ terminates(pickUp(Bewaiter4,Knoworder),
   			   at(beWaiter4(Bewaiter4),
   			      Terminates),
   			   Terminates8)
   	      ]).
 */


% [waiter,food,time]
% HoldsAt(BeWaiter4(waiter),time) &
% ({agent} HoldsAt(KnowOrder(waiter,agent,food),time)) ->
% Initiates(PickUp(waiter,food),
%           BeWaiter5(waiter),
%           time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',382).

 /*  axiom(initiates(pickUp(Waiter, Food), beWaiter5(Waiter), Time),
       [beWaiter4(Waiter), knowOrder(Waiter, Agent, Food)]).
 */

 /*  (   beWaiter4(Bewaiter4),
       knowOrder(Bewaiter4, _, Knoworder)
   ->  initiates(pickUp(Bewaiter4, Knoworder),
                 beWaiter5(Bewaiter4),
                 Initiates)
   ).
 */
if beWaiter4(Bewaiter4), knowOrder(Bewaiter4, _, Knoworder)then initiates(pickUp(Bewaiter4, Knoworder), beWaiter5(Bewaiter4)at Initiates, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',382).

 /*  reactive_rule([ holds(beWaiter4(Bewaiter4),Holds),
   		holds(knowOrder(Bewaiter4,
   				_,
   				Knoworder),
   		      Holds)
   	      ],
   	      [ initiates(pickUp(Bewaiter4,Knoworder),
   			  at(beWaiter5(Bewaiter4),
   			     Initiates),
   			  Initiates8)
   	      ]).
 */


% [restaurant,waiter,time]
% WaiterOf(restaurant)=waiter &
% HoldsAt(BeWaiter5(waiter),time) ->
% Happens(WalkThroughDoor21(waiter,KitchenDoorOf(restaurant)),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',389).

 /*  (   waiter(Restaurant, Waiter),
       holds_at(beWaiter5(Waiter), Time)
   ->  happens(walkThroughDoor21(Waiter, kitchenDoorOf(Restaurant)),
               Time)
   ).
 */
if waiter(Restaurant, Waiter), beWaiter5(Waiter)at Time then happens(walkThroughDoor21(Waiter, kitchenDoorOf(Restaurant)), Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',389).

 /*  reactive_rule([ waiter(Restaurant,Waiter),
   		holds(beWaiter5(Waiter),Time)
   	      ],
   	      [ happens(walkThroughDoor21(Waiter,
   					  kitchenDoorOf(Restaurant)),
   			Time)
   	      ]).
 */


% [restaurant,waiter,door,time]
% HoldsAt(BeWaiter5(waiter),time) &
% WaiterOf(restaurant)=waiter &
% KitchenDoorOf(restaurant)=door ->
% Terminates(WalkThroughDoor21(waiter,door),
%            BeWaiter5(waiter),
%            time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',394).

 /*  axiom(terminates(walkThroughDoor21(Waiter, Door), beWaiter5(Waiter), Time),
       [ beWaiter5(Waiter),
         waiter(Restaurant, Waiter),
         kitchenDoor(Restaurant, Door)
       ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',394).

 /*  (   beWaiter5(Bewaiter5),
       waiter(A, Bewaiter5),
       kitchenDoor(A, Kitchendoor)
   ->  terminates(walkThroughDoor21(Bewaiter5, Kitchendoor),
                  beWaiter5(Bewaiter5),
                  Terminates)
   ).
 */
if beWaiter5(Bewaiter5), waiter(A, Bewaiter5), kitchenDoor(A, Kitchendoor)then terminates(walkThroughDoor21(Bewaiter5, Kitchendoor), beWaiter5(Bewaiter5)at Terminates, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',394).

 /*  reactive_rule([ holds(beWaiter5(Bewaiter5),Holds),
   		waiter(A,Bewaiter5),
   		kitchenDoor(A,Kitchendoor)
   	      ],
   	      [ terminates(walkThroughDoor21(Bewaiter5,
   					     Kitchendoor),
   			   at(beWaiter5(Bewaiter5),
   			      Terminates),
   			   Terminates8)
   	      ]).
 */


% [restaurant,waiter,door,time]
% HoldsAt(BeWaiter5(waiter),time) &
% WaiterOf(restaurant)=waiter &
% KitchenDoorOf(restaurant)=door ->
% Initiates(WalkThroughDoor21(waiter,door),
%           BeWaiter6(waiter),
%           time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',402).

 /*  axiom(initiates(walkThroughDoor21(Waiter, Door), beWaiter6(Waiter), Time),
       [ beWaiter5(Waiter),
         waiter(Restaurant, Waiter),
         kitchenDoor(Restaurant, Door)
       ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',402).

 /*  (   beWaiter5(Bewaiter5),
       waiter(A, Bewaiter5),
       kitchenDoor(A, Kitchendoor)
   ->  initiates(walkThroughDoor21(Bewaiter5, Kitchendoor),
                 beWaiter6(Bewaiter5),
                 Initiates)
   ).
 */
if beWaiter5(Bewaiter5), waiter(A, Bewaiter5), kitchenDoor(A, Kitchendoor)then initiates(walkThroughDoor21(Bewaiter5, Kitchendoor), beWaiter6(Bewaiter5)at Initiates, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',402).

 /*  reactive_rule([ holds(beWaiter5(Bewaiter5),Holds),
   		waiter(A,Bewaiter5),
   		kitchenDoor(A,Kitchendoor)
   	      ],
   	      [ initiates(walkThroughDoor21(Bewaiter5,
   					    Kitchendoor),
   			  at(beWaiter6(Bewaiter5),
   			     Initiates),
   			  Initiates8)
   	      ]).
 */


% [restaurant,waiter,table,food,time]
% WaiterOf(restaurant)=waiter &
% TableOf(restaurant)=table &
% HoldsAt(BeWaiter6(waiter),time) &
% HoldsAt(Holding(waiter,food),time) ->
% Happens(PlaceOn(waiter,food,table),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',410).

 /*  (   waiter(Restaurant, Waiter),
       ( table(Restaurant, Table)
       ),
       holds_at(beWaiter6(Waiter), Time),
       holds_at(holding(Waiter, Food), Time)
   ->  happens(placeOn(Waiter, Food, Table), Time)
   ).
 */
if waiter(Restaurant, Waiter), table(Restaurant, Table), beWaiter6(Waiter)at Time, holding(Waiter, Food)at Time then happens(placeOn(Waiter, Food, Table), Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',410).

 /*  reactive_rule([ waiter(Restaurant,Waiter),
   		table(Restaurant,Table),
   		holds(beWaiter6(Waiter),Time),
   		holds(holding(Waiter,Food),Time)
   	      ],
   	      [ happens(placeOn(Waiter,Food,Table),
   			Time)
   	      ]).
 */


% [waiter,food,table,time]
% HoldsAt(BeWaiter6(waiter),time) ->
% Terminates(PlaceOn(waiter,food,table),
%            BeWaiter6(waiter),
%            time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',417).

 /*  axiom(terminates(placeOn(Waiter, Food, Table), beWaiter6(Waiter), Time),
       [beWaiter6(Waiter)]).
 */

 /*  beWaiter6(Bewaiter6) ->
       terminates(placeOn(Bewaiter6, _, Placeon),
                  beWaiter6(Bewaiter6),
                  Terminates).
 */
if beWaiter6(Bewaiter6)then terminates(placeOn(Bewaiter6, _, Placeon), beWaiter6(Bewaiter6)at Terminates, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',417).

 /*  reactive_rule([holds(beWaiter6(Bewaiter6),Holds)],
   	      [ terminates(placeOn(Bewaiter6,
   				   _,
   				   Placeon),
   			   at(beWaiter6(Bewaiter6),
   			      Terminates),
   			   Terminates8)
   	      ]).
 */


% [waiter,food,table,time]
% HoldsAt(BeWaiter6(waiter),time) ->
% Initiates(PlaceOn(waiter,food,table),
%           BeWaiter7(waiter),
%           time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',423).

 /*  axiom(initiates(placeOn(Waiter, Food, Table), beWaiter7(Waiter), Time),
       [beWaiter6(Waiter)]).
 */

 /*  beWaiter6(Bewaiter6) ->
       initiates(placeOn(Bewaiter6, _, Placeon),
                 beWaiter7(Bewaiter6),
                 Initiates).
 */
if beWaiter6(Bewaiter6)then initiates(placeOn(Bewaiter6, _, Placeon), beWaiter7(Bewaiter6)at Initiates, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',423).

 /*  reactive_rule([holds(beWaiter6(Bewaiter6),Holds)],
   	      [ initiates(placeOn(Bewaiter6,
   				  _,
   				  Placeon),
   			  at(beWaiter7(Bewaiter6),
   			     Initiates),
   			  Initiates8)
   	      ]).
 */


% [waiter,agent,bill,time]
% HoldsAt(BeWaiter7(waiter),time) ->
% Terminates(Request(agent,waiter,bill),
%            BeWaiter7(waiter),
%            time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',429).

 /*  axiom(terminates(request(Agent, Waiter, Bill), beWaiter7(Waiter), Time),
       [beWaiter7(Waiter)]).
 */

 /*  beWaiter7(Bewaiter7) ->
       terminates(request(RequestP_Num3_V, Bewaiter7, Request),
                  beWaiter7(Bewaiter7),
                  Terminates).
 */
if beWaiter7(Bewaiter7)then terminates(request(RequestP_Num3_V, Bewaiter7, Request), beWaiter7(Bewaiter7)at Terminates, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',429).

 /*  reactive_rule([beWaiter7(Bewaiter7)],
   	      [ terminates(request(RequestP_Num3_V,
   				   Bewaiter7,
   				   Request),
   			   at(beWaiter7(Bewaiter7),
   			      Terminates),
   			   Terminates8)
   	      ]).
 */


% [waiter,agent,bill,time]
% HoldsAt(BeWaiter7(waiter),time) ->
% Initiates(Request(agent,waiter,bill),
%           BeWaiter8(waiter),
%           time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',435).

 /*  axiom(initiates(request(Agent, Waiter, Bill), beWaiter8(Waiter), Time),
       [beWaiter7(Waiter)]).
 */

 /*  beWaiter7(Bewaiter7) ->
       initiates(request(RequestP_Num3_V, Bewaiter7, Request),
                 beWaiter8(Bewaiter7),
                 Initiates).
 */
if beWaiter7(Bewaiter7)then initiates(request(RequestP_Num3_V, Bewaiter7, Request), beWaiter8(Bewaiter7)at Initiates, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',435).

 /*  reactive_rule([beWaiter7(Bewaiter7)],
   	      [ initiates(request(RequestP_Num3_V,
   				  Bewaiter7,
   				  Request),
   			  at(beWaiter8(Bewaiter7),
   			     Initiates),
   			  Initiates8)
   	      ]).
 */


% [restaurant,waiter,bill,time]
% WaiterOf(restaurant)=waiter &
% BillOf(restaurant)=bill &
% HoldsAt(BeWaiter8(waiter),time) ->
% Happens(PickUp(waiter,bill),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',441).

 /*  (   waiter(Restaurant, Waiter),
       bill(Restaurant, Bill),
       holds_at(beWaiter8(Waiter), Time)
   ->  happens(pickUp(Waiter, Bill), Time)
   ).
 */
if waiter(Restaurant, Waiter), bill(Restaurant, Bill), beWaiter8(Waiter)at Time then happens(pickUp(Waiter, Bill), Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',441).

 /*  reactive_rule([ waiter(Restaurant,Waiter),
   		bill(Restaurant,Bill),
   		holds(beWaiter8(Waiter),Time)
   	      ],
   	      [happens(pickUp(Waiter,Bill),Time)]).
 */


% [waiter,bill,time]
% HoldsAt(BeWaiter8(waiter),time) ->
% Terminates(PickUp(waiter,bill),
%            BeWaiter8(waiter),
%            time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',447).

 /*  axiom(terminates(pickUp(Waiter, Bill), beWaiter8(Waiter), Time),
       [beWaiter8(Waiter)]).
 */

 /*  beWaiter8(Bewaiter8) ->
       terminates(pickUp(Bewaiter8, Pickup),
                  beWaiter8(Bewaiter8),
                  Terminates).
 */
if beWaiter8(Bewaiter8)then terminates(pickUp(Bewaiter8, Pickup), beWaiter8(Bewaiter8)at Terminates, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',447).

 /*  reactive_rule([holds(beWaiter8(Bewaiter8),Holds)],
   	      [ terminates(pickUp(Bewaiter8,Pickup),
   			   at(beWaiter8(Bewaiter8),
   			      Terminates),
   			   Terminates7)
   	      ]).
 */


% [waiter,bill,time]
% HoldsAt(BeWaiter8(waiter),time) ->
% Initiates(PickUp(waiter,bill),
%           BeWaiter9(waiter),
%           time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',453).

 /*  axiom(initiates(pickUp(Waiter, Bill), beWaiter9(Waiter), Time),
       [beWaiter8(Waiter)]).
 */

 /*  beWaiter8(Bewaiter8) ->
       initiates(pickUp(Bewaiter8, Pickup),
                 beWaiter9(Bewaiter8),
                 Initiates).
 */
if beWaiter8(Bewaiter8)then initiates(pickUp(Bewaiter8, Pickup), beWaiter9(Bewaiter8)at Initiates, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',453).

 /*  reactive_rule([holds(beWaiter8(Bewaiter8),Holds)],
   	      [ initiates(pickUp(Bewaiter8,Pickup),
   			  at(beWaiter9(Bewaiter8),
   			     Initiates),
   			  Initiates7)
   	      ]).
 */


% [restaurant,waiter,bill,table,time]
% WaiterOf(restaurant)=waiter &
% BillOf(restaurant)=bill &
% TableOf(restaurant)=table &
% HoldsAt(BeWaiter9(waiter),time) ->
% Happens(PlaceOn(waiter,bill,table),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',459).

 /*  (   waiter(Restaurant, Waiter),
       bill(Restaurant, Bill),
       ( table(Restaurant, Table)
       ),
       holds_at(beWaiter9(Waiter), Time)
   ->  happens(placeOn(Waiter, Bill, Table), Time)
   ).
 */
if waiter(Restaurant, Waiter), bill(Restaurant, Bill), table(Restaurant, Table), beWaiter9(Waiter)at Time then happens(placeOn(Waiter, Bill, Table), Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',459).

 /*  reactive_rule([ waiter(Restaurant,Waiter),
   		bill(Restaurant,Bill),
   		table(Restaurant,Table),
   		holds(beWaiter9(Waiter),Time)
   	      ],
   	      [ happens(placeOn(Waiter,Bill,Table),
   			Time)
   	      ]).
 */


% [waiter,bill,table,time]
% HoldsAt(BeWaiter9(waiter),time) ->
% Terminates(PlaceOn(waiter,bill,table),
%            BeWaiter9(waiter),
%            time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',466).

 /*  axiom(terminates(placeOn(Waiter, Bill, Table), beWaiter9(Waiter), Time),
       [beWaiter9(Waiter)]).
 */

 /*  beWaiter9(Bewaiter9) ->
       terminates(placeOn(Bewaiter9, _, Placeon),
                  beWaiter9(Bewaiter9),
                  Terminates).
 */
if beWaiter9(Bewaiter9)then terminates(placeOn(Bewaiter9, _, Placeon), beWaiter9(Bewaiter9)at Terminates, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',466).

 /*  reactive_rule([holds(beWaiter9(Bewaiter9),Holds)],
   	      [ terminates(placeOn(Bewaiter9,
   				   _,
   				   Placeon),
   			   at(beWaiter9(Bewaiter9),
   			      Terminates),
   			   Terminates8)
   	      ]).
 */


% [waiter,bill,table,time]
% HoldsAt(BeWaiter9(waiter),time) ->
% Initiates(PlaceOn(waiter,bill,table),
%           BeWaiter0(waiter),
%           time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',472).

 /*  axiom(initiates(placeOn(Waiter, Bill, Table), beWaiter0(Waiter), Time),
       [beWaiter9(Waiter)]).
 */

 /*  beWaiter9(Bewaiter9) ->
       initiates(placeOn(Bewaiter9, _, Placeon),
                 beWaiter0(Bewaiter9),
                 Initiates).
 */
if beWaiter9(Bewaiter9)then initiates(placeOn(Bewaiter9, _, Placeon), beWaiter0(Bewaiter9)at Initiates, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',472).

 /*  reactive_rule([holds(beWaiter9(Bewaiter9),Holds)],
   	      [ initiates(placeOn(Bewaiter9,
   				  _,
   				  Placeon),
   			  at(beWaiter0(Bewaiter9),
   			     Initiates),
   			  Initiates8)
   	      ]).
 */

% fluent BeCook0(cook)
 %  fluent(beCook0(cook)).
 %  fluent(beCook0(cook)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',476).
fluents([beCook0/1]).
mpred_prop(beCook0(cook),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',479).
% fluent BeCook1(cook)
 %  fluent(beCook1(cook)).
 %  fluent(beCook1(cook)).
fluents([beCook1/1]).
mpred_prop(beCook1(cook),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',481).
% xor BeCook0, BeCook1
 %  ==>xor[beCook0,beCook1].
==>xor[beCook0,beCook1].


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',483).
% [cook,agent,food,time]
% HoldsAt(BeCook0(cook),time) ->
% Terminates(Order(agent,cook,food),
%            BeCook0(cook),
%            time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',483).

 /*  axiom(terminates(order(Agent, Cook, Food), beCook0(Cook), Time),
       [beCook0(Cook)]).
 */

 /*  beCook0(Becook0) ->
       terminates(order(OrderP_Num3_V, Becook0, Order),
                  beCook0(Becook0),
                  Terminates).
 */
if beCook0(Becook0)then terminates(order(OrderP_Num3_V, Becook0, Order), beCook0(Becook0)at Terminates, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',483).

 /*  reactive_rule([beCook0(Becook0)],
   	      [ terminates(order(OrderP_Num3_V,
   				 Becook0,
   				 Order),
   			   at(beCook0(Becook0),Terminates),
   			   Terminates8)
   	      ]).
 */


% [cook,agent,food,time]
% HoldsAt(BeCook0(cook),time) ->
% Initiates(Order(agent,cook,food),
%           BeCook1(cook),
%           time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',490).

 /*  axiom(initiates(order(Agent, Cook, Food), beCook1(Cook), Time),
       [beCook0(Cook)]).
 */

 /*  beCook0(Becook0) ->
       initiates(order(OrderP_Num3_V, Becook0, Order),
                 beCook1(Becook0),
                 Initiates).
 */
if beCook0(Becook0)then initiates(order(OrderP_Num3_V, Becook0, Order), beCook1(Becook0)at Initiates, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',490).

 /*  reactive_rule([beCook0(Becook0)],
   	      [ initiates(order(OrderP_Num3_V,
   				Becook0,
   				Order),
   			  at(beCook1(Becook0),Initiates),
   			  Initiates8)
   	      ]).
 */

% event FoodPrepare(agent,food)
 %  event(foodPrepare(agent,food)).
 %  event(foodPrepare(agent,food)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',494).
actions([foodPrepare/2]).
mpred_prop(foodPrepare(agent,food),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',497).
% fluent FoodPrepared(food)
 %  fluent(foodPrepared(food)).
 %  fluent(foodPrepared(food)).
fluents([foodPrepared/1]).
mpred_prop(foodPrepared(food),fluent).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',499).
% [agent,food,time]
% Initiates(FoodPrepare(agent,food),
%           FoodPrepared(food),
%           time).

 /*  axiom(initiates(foodPrepare(Agent, Food), foodPrepared(Food), Time),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',499).

 /*  initiates(foodPrepare(_,Foodprepare),
   	  foodPrepared(Foodprepare),
   	  Initiates).
 */
foodPrepare(_, Foodprepare)initiates foodPrepared(Foodprepare).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',499).

 /*  initiated(happens(foodPrepare(_,Foodprepare),
   		  Time_From,
   		  Time_Until),
   	  foodPrepared(Foodprepare),
   	  []).
 */


% [agent,food,time]
% Happens(FoodPrepare(agent,food),time) ->
% {location}% 
% HoldsAt(At(agent,location),time) &
% HoldsAt(At(food,location),time).
 %  clausify_pnf=exists([Location],  (happens(foodPrepare(Agent, Food), Time)->holds_at(at(Agent, Location), Time), holds_at(at(Food, Location), Time))).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',505).

 /*  not(happens(foodPrepare(Agent, Food), Time)) :-
       (   not(holds_at(at(Agent, Exists_Location), Time))
       ;   not(holds_at(at(Food, Exists_Location), Time))
       ),
       some(Exists_Location,
            '$kolem_Fn_12'(Agent, Food, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',505).

 /*  fix_axiom_head(Time) ->
       [ not(happens(foodPrepare(Agent, Food), Time)),
          (->),
         not(foodPrepare(Agent, Food))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',505).

 /*  axiom(not(foodPrepare(Agent, Food)),
       [  (not(at(Agent, Exists_Location));not(at(Food, Exists_Location))),
         some(Exists_Location,
              '$kolem_Fn_12'(Agent, Food, Time))
       ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',505).

 /*  (   (   not(at(Kolem_Fn_12P_Num3_V, Tloc))
       ;   not(at(Foodprepare, Tloc))
       ),
       some(Tloc,
            '$kolem_Fn_12'(Kolem_Fn_12P_Num3_V,
                           Foodprepare,
                           Kolem_Fn_12))
   ->  not(foodPrepare(Kolem_Fn_12P_Num3_V, Foodprepare))
   ).
 */
if (not loc_at(Kolem_Fn_12P_Num3_V, Tloc);not loc_at(Foodprepare, Tloc)), some(Tloc, '$kolem_Fn_12'(Kolem_Fn_12P_Num3_V, Foodprepare, Kolem_Fn_12))then not foodPrepare(Kolem_Fn_12P_Num3_V, Foodprepare).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',505).

 /*   reactive_rule([  (not(loc_at(Kolem_Fn_12P_Num3_V, Tloc));not(loc_at(Foodprepare, Tloc))),
                      some(Tloc,
                           '$kolem_Fn_12'(Kolem_Fn_12P_Num3_V,
                                          Foodprepare,
                                          Kolem_Fn_12))
                    ],
                    [ not(foodPrepare(Kolem_Fn_12P_Num3_V,
                                      Foodprepare))
                    ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',505).

 /*  holds_at(at(Agent, Exists_Location), Time) :-
       happens(foodPrepare(Agent, Food), Time),
       some(Exists_Location,
            '$kolem_Fn_12'(Agent, Food, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',505).

 /*  fix_axiom_head(Time) ->
       [ holds_at(at(Agent, Exists_Location), Time),
          (->),
         at(Agent, Exists_Location)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',505).

 /*  axiom(at(Agent, Exists_Location),
       [ foodPrepare(Agent, Food),
         some(Exists_Location,
              '$kolem_Fn_12'(Agent, Food, Time))
       ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',505).

 /*  (   foodPrepare(Kolem_Fn_12P_Num3_V12, Foodprepare10),
       some(Tloc9,
            '$kolem_Fn_12'(Kolem_Fn_12P_Num3_V12,
                           Foodprepare10,
                           Kolem_Fn_1211))
   ->  at(Kolem_Fn_12P_Num3_V12, Tloc9)
   ).
 */
if foodPrepare(Kolem_Fn_12P_Num3_V12, Foodprepare10), some(Tloc9, '$kolem_Fn_12'(Kolem_Fn_12P_Num3_V12, Foodprepare10, Kolem_Fn_1211))then loc_at(Kolem_Fn_12P_Num3_V12, Tloc9).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',505).

 /*  reactive_rule([ happens(foodPrepare(Kolem_Fn_12P_Num3_V12,
   				    Foodprepare10),
   			Time_From,
   			Time_Until),
   		some(Tloc9,
   		     '$kolem_Fn_12'(Kolem_Fn_12P_Num3_V12,
   				    Foodprepare10,
   				    Kolem_Fn_1211))
   	      ],
   	      [ holds(loc_at(Kolem_Fn_12P_Num3_V12,Tloc9),
   		      Holds)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',505).

 /*  holds_at(at(Food, Exists_Location), Time) :-
       happens(foodPrepare(Agent, Food), Time),
       some(Exists_Location,
            '$kolem_Fn_12'(Agent, Food, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',505).

 /*  fix_axiom_head(Time) ->
       [ holds_at(at(Food, Exists_Location), Time),
          (->),
         at(Food, Exists_Location)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',505).

 /*  axiom(at(Food, Exists_Location),
       [ foodPrepare(Agent, Food),
         some(Exists_Location,
              '$kolem_Fn_12'(Agent, Food, Time))
       ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',505).

 /*  (   foodPrepare(Kolem_Fn_12P_Num3_V19, Foodprepare17),
       some(Tloc16,
            '$kolem_Fn_12'(Kolem_Fn_12P_Num3_V19,
                           Foodprepare17,
                           Kolem_Fn_1218))
   ->  at(Foodprepare17, Tloc16)
   ).
 */
if foodPrepare(Kolem_Fn_12P_Num3_V19, Foodprepare17), some(Tloc16, '$kolem_Fn_12'(Kolem_Fn_12P_Num3_V19, Foodprepare17, Kolem_Fn_1218))then loc_at(Foodprepare17, Tloc16).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',505).

 /*  reactive_rule([ happens(foodPrepare(Kolem_Fn_12P_Num3_V19,
   				    Foodprepare17),
   			Time_From20,
   			Time_Until21),
   		some(Tloc16,
   		     '$kolem_Fn_12'(Kolem_Fn_12P_Num3_V19,
   				    Foodprepare17,
   				    Kolem_Fn_1218))
   	      ],
   	      [ holds(loc_at(Foodprepare17,Tloc16),
   		      Holds22)
   	      ]).
 */


% [cook,agent,food,time]
% HoldsAt(BeCook1(cook),time) &
% HoldsAt(KnowOrder(cook,agent,food),time) ->
% Happens(FoodPrepare(cook,food),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',511).

 /*  (   holds_at(beCook1(Cook), Time),
       holds_at(knowOrder(Cook, Agent, Food), Time)
   ->  happens(foodPrepare(Cook, Food), Time)
   ).
 */
if beCook1(Cook)at Time, knowOrder(Cook, Agent, Food)at Time then happens(foodPrepare(Cook, Food), Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',511).

 /*  reactive_rule([ holds(beCook1(Cook),Time),
   		holds(knowOrder(Cook,Agent,Food),
   		      Time)
   	      ],
   	      [happens(foodPrepare(Cook,Food),Time)]).
 */


% [cook,food,time]
% HoldsAt(BeCook1(cook),time) ->
% Terminates(FoodPrepare(cook,food),
%            BeCook1(cook),
%            time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',516).

 /*  axiom(terminates(foodPrepare(Cook, Food), beCook1(Cook), Time),
       [beCook1(Cook)]).
 */

 /*  beCook1(Becook1) ->
       terminates(foodPrepare(Becook1, Foodprepare),
                  beCook1(Becook1),
                  Terminates).
 */
if beCook1(Becook1)then terminates(foodPrepare(Becook1, Foodprepare), beCook1(Becook1)at Terminates, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',516).

 /*  reactive_rule([holds(beCook1(Becook1),Holds)],
   	      [ terminates(foodPrepare(Becook1,Foodprepare),
   			   at(beCook1(Becook1),Terminates),
   			   Terminates7)
   	      ]).
 */


% [cook,food,time]
% HoldsAt(BeCook1(cook),time) ->
% Initiates(FoodPrepare(cook,food),
%           BeCook0(cook),
%           time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',522).

 /*  axiom(initiates(foodPrepare(Cook, Food), beCook0(Cook), Time),
       [beCook1(Cook)]).
 */

 /*  beCook1(Becook1) ->
       initiates(foodPrepare(Becook1, Foodprepare),
                 beCook0(Becook1),
                 Initiates).
 */
if beCook1(Becook1)then initiates(foodPrepare(Becook1, Foodprepare), beCook0(Becook1)at Initiates, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',522).

 /*  reactive_rule([holds(beCook1(Becook1),Holds)],
   	      [ initiates(foodPrepare(Becook1,Foodprepare),
   			  at(beCook0(Becook1),Initiates),
   			  Initiates7)
   	      ]).
 */

% event Pay(agent,agent)
 %  event(pay(agent,agent)).
 %  event(pay(agent,agent)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',526).
actions([pay/2]).
mpred_prop(pay(agent,agent),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',529).
% event Tip(agent,agent)
 %  event(tip(agent,agent)).
 %  event(tip(agent,agent)).
actions([tip/2]).
mpred_prop(tip(agent,agent),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',531).
% [agent,physobj,time]
% Happens(LieOn(agent,physobj),time) ->
% {room}% 
%  HoldsAt(At(agent,room),time) &
%  HoldsAt(At(physobj,room),time).
 %  clausify_pnf=exists([Room],  (happens(lieOn(Agent, Physobj), Time)->holds_at(at(Agent, Room), Time), holds_at(at(Physobj, Room), Time))).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',533).

 /*  not(happens(lieOn(Agent, Physobj), Time)) :-
       (   not(holds_at(at(Agent, Exists_Room), Time))
       ;   not(holds_at(at(Physobj, Exists_Room), Time))
       ),
       some(Exists_Room, '$kolem_Fn_13'(Agent, Physobj, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',533).

 /*  fix_axiom_head(Time) ->
       [ not(happens(lieOn(Agent, Physobj), Time)),
          (->),
         not(lieOn(Agent, Physobj))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',533).

 /*  axiom(not(lieOn(Agent, Physobj)),
       [  (not(at(Agent, Exists_Room));not(at(Physobj, Exists_Room))),
         some(Exists_Room,
              '$kolem_Fn_13'(Agent, Physobj, Time))
       ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',533).

 /*  (   (   not(at(Kolem_Fn_13P_Num3_V, Tloc))
       ;   not(at(Lieon, Tloc))
       ),
       some(Tloc,
            '$kolem_Fn_13'(Kolem_Fn_13P_Num3_V, Lieon, Kolem_Fn_13))
   ->  not(lieOn(Kolem_Fn_13P_Num3_V, Lieon))
   ).
 */
if (not loc_at(Kolem_Fn_13P_Num3_V, Tloc);not loc_at(Lieon, Tloc)), some(Tloc, '$kolem_Fn_13'(Kolem_Fn_13P_Num3_V, Lieon, Kolem_Fn_13))then not lieOn(Kolem_Fn_13P_Num3_V, Lieon).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',533).

 /*   reactive_rule([  (not(loc_at(Kolem_Fn_13P_Num3_V, Tloc));not(loc_at(Lieon, Tloc))),
                      some(Tloc,
                           '$kolem_Fn_13'(Kolem_Fn_13P_Num3_V,
                                          Lieon,
                                          Kolem_Fn_13))
                    ],
                    [not(lieOn(Kolem_Fn_13P_Num3_V, Lieon))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',533).

 /*  holds_at(at(Agent, Exists_Room), Time) :-
       happens(lieOn(Agent, Physobj), Time),
       some(Exists_Room, '$kolem_Fn_13'(Agent, Physobj, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',533).

 /*  fix_axiom_head(Time) ->
       [ holds_at(at(Agent, Exists_Room), Time),
          (->),
         at(Agent, Exists_Room)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',533).

 /*  axiom(at(Agent, Exists_Room),
       [ lieOn(Agent, Physobj),
         some(Exists_Room,
              '$kolem_Fn_13'(Agent, Physobj, Time))
       ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',533).

 /*  (   lieOn(Kolem_Fn_13P_Num3_V12, Lieon10),
       some(Tloc9,
            '$kolem_Fn_13'(Kolem_Fn_13P_Num3_V12,
                           Lieon10,
                           Kolem_Fn_1311))
   ->  at(Kolem_Fn_13P_Num3_V12, Tloc9)
   ).
 */
if lieOn(Kolem_Fn_13P_Num3_V12, Lieon10), some(Tloc9, '$kolem_Fn_13'(Kolem_Fn_13P_Num3_V12, Lieon10, Kolem_Fn_1311))then loc_at(Kolem_Fn_13P_Num3_V12, Tloc9).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',533).

 /*  reactive_rule([ lieOn(Kolem_Fn_13P_Num3_V12,Lieon10),
   		some(Tloc9,
   		     '$kolem_Fn_13'(Kolem_Fn_13P_Num3_V12,
   				    Lieon10,
   				    Kolem_Fn_1311))
   	      ],
   	      [ holds(loc_at(Kolem_Fn_13P_Num3_V12,Tloc9),
   		      Holds)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',533).

 /*  holds_at(at(Physobj, Exists_Room), Time) :-
       happens(lieOn(Agent, Physobj), Time),
       some(Exists_Room, '$kolem_Fn_13'(Agent, Physobj, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',533).

 /*  fix_axiom_head(Time) ->
       [ holds_at(at(Physobj, Exists_Room), Time),
          (->),
         at(Physobj, Exists_Room)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',533).

 /*  axiom(at(Physobj, Exists_Room),
       [ lieOn(Agent, Physobj),
         some(Exists_Room,
              '$kolem_Fn_13'(Agent, Physobj, Time))
       ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',533).

 /*  (   lieOn(Kolem_Fn_13P_Num3_V17, Lieon15),
       some(Tloc14,
            '$kolem_Fn_13'(Kolem_Fn_13P_Num3_V17,
                           Lieon15,
                           Kolem_Fn_1316))
   ->  at(Lieon15, Tloc14)
   ).
 */
if lieOn(Kolem_Fn_13P_Num3_V17, Lieon15), some(Tloc14, '$kolem_Fn_13'(Kolem_Fn_13P_Num3_V17, Lieon15, Kolem_Fn_1316))then loc_at(Lieon15, Tloc14).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',533).

 /*  reactive_rule([ lieOn(Kolem_Fn_13P_Num3_V17,Lieon15),
   		some(Tloc14,
   		     '$kolem_Fn_13'(Kolem_Fn_13P_Num3_V17,
   				    Lieon15,
   				    Kolem_Fn_1316))
   	      ],
   	      [holds(loc_at(Lieon15,Tloc14),Holds18)]).
 */


% [agent,physobj,time]
% Happens(SitOn(agent,physobj),time) ->
% {room}% 
%  HoldsAt(At(agent,room),time) &
%  HoldsAt(At(physobj,room),time).
 %  clausify_pnf=exists([Room],  (happens(sitOn(Agent, Physobj), Time)->holds_at(at(Agent, Room), Time), holds_at(at(Physobj, Room), Time))).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',538).

 /*  not(happens(sitOn(Agent, Physobj), Time)) :-
       (   not(holds_at(at(Agent, Exists_Room), Time))
       ;   not(holds_at(at(Physobj, Exists_Room), Time))
       ),
       some(Exists_Room, '$kolem_Fn_14'(Agent, Physobj, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',538).

 /*  fix_axiom_head(Time) ->
       [ not(happens(sitOn(Agent, Physobj), Time)),
          (->),
         not(sitOn(Agent, Physobj))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',538).

 /*  axiom(not(sitOn(Agent, Physobj)),
       [  (not(at(Agent, Exists_Room));not(at(Physobj, Exists_Room))),
         some(Exists_Room,
              '$kolem_Fn_14'(Agent, Physobj, Time))
       ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',538).

 /*  (   (   not(at(Kolem_Fn_14P_Num3_V, Tloc))
       ;   not(at(Siton, Tloc))
       ),
       some(Tloc,
            '$kolem_Fn_14'(Kolem_Fn_14P_Num3_V, Siton, Kolem_Fn_14))
   ->  not(sitOn(Kolem_Fn_14P_Num3_V, Siton))
   ).
 */
if (not loc_at(Kolem_Fn_14P_Num3_V, Tloc);not loc_at(Siton, Tloc)), some(Tloc, '$kolem_Fn_14'(Kolem_Fn_14P_Num3_V, Siton, Kolem_Fn_14))then not sitOn(Kolem_Fn_14P_Num3_V, Siton).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',538).

 /*   reactive_rule([  (not(loc_at(Kolem_Fn_14P_Num3_V, Tloc));not(loc_at(Siton, Tloc))),
                      some(Tloc,
                           '$kolem_Fn_14'(Kolem_Fn_14P_Num3_V,
                                          Siton,
                                          Kolem_Fn_14))
                    ],
                    [not(sitOn(Kolem_Fn_14P_Num3_V, Siton))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',538).

 /*  holds_at(at(Agent, Exists_Room), Time) :-
       happens(sitOn(Agent, Physobj), Time),
       some(Exists_Room, '$kolem_Fn_14'(Agent, Physobj, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',538).

 /*  fix_axiom_head(Time) ->
       [ holds_at(at(Agent, Exists_Room), Time),
          (->),
         at(Agent, Exists_Room)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',538).

 /*  axiom(at(Agent, Exists_Room),
       [ sitOn(Agent, Physobj),
         some(Exists_Room,
              '$kolem_Fn_14'(Agent, Physobj, Time))
       ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',538).

 /*  (   sitOn(Kolem_Fn_14P_Num3_V12, Siton10),
       some(Tloc9,
            '$kolem_Fn_14'(Kolem_Fn_14P_Num3_V12,
                           Siton10,
                           Kolem_Fn_1411))
   ->  at(Kolem_Fn_14P_Num3_V12, Tloc9)
   ).
 */
if sitOn(Kolem_Fn_14P_Num3_V12, Siton10), some(Tloc9, '$kolem_Fn_14'(Kolem_Fn_14P_Num3_V12, Siton10, Kolem_Fn_1411))then loc_at(Kolem_Fn_14P_Num3_V12, Tloc9).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',538).

 /*  reactive_rule([ sitOn(Kolem_Fn_14P_Num3_V12,Siton10),
   		some(Tloc9,
   		     '$kolem_Fn_14'(Kolem_Fn_14P_Num3_V12,
   				    Siton10,
   				    Kolem_Fn_1411))
   	      ],
   	      [ holds(loc_at(Kolem_Fn_14P_Num3_V12,Tloc9),
   		      Holds)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',538).

 /*  holds_at(at(Physobj, Exists_Room), Time) :-
       happens(sitOn(Agent, Physobj), Time),
       some(Exists_Room, '$kolem_Fn_14'(Agent, Physobj, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',538).

 /*  fix_axiom_head(Time) ->
       [ holds_at(at(Physobj, Exists_Room), Time),
          (->),
         at(Physobj, Exists_Room)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',538).

 /*  axiom(at(Physobj, Exists_Room),
       [ sitOn(Agent, Physobj),
         some(Exists_Room,
              '$kolem_Fn_14'(Agent, Physobj, Time))
       ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',538).

 /*  (   sitOn(Kolem_Fn_14P_Num3_V17, Siton15),
       some(Tloc14,
            '$kolem_Fn_14'(Kolem_Fn_14P_Num3_V17,
                           Siton15,
                           Kolem_Fn_1416))
   ->  at(Siton15, Tloc14)
   ).
 */
if sitOn(Kolem_Fn_14P_Num3_V17, Siton15), some(Tloc14, '$kolem_Fn_14'(Kolem_Fn_14P_Num3_V17, Siton15, Kolem_Fn_1416))then loc_at(Siton15, Tloc14).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',538).

 /*  reactive_rule([ sitOn(Kolem_Fn_14P_Num3_V17,Siton15),
   		some(Tloc14,
   		     '$kolem_Fn_14'(Kolem_Fn_14P_Num3_V17,
   				    Siton15,
   				    Kolem_Fn_1416))
   	      ],
   	      [holds(loc_at(Siton15,Tloc14),Holds18)]).
 */

% event LieOn(agent,physobj)
 %  event(lieOn(agent,physobj)).
 %  event(lieOn(agent,physobj)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',542).
actions([lieOn/2]).
mpred_prop(lieOn(agent,physobj),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',545).
% event SitOn(agent,physobj)
 %  event(sitOn(agent,physobj)).
 %  event(sitOn(agent,physobj)).
actions([sitOn/2]).
mpred_prop(sitOn(agent,physobj),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',547).
% event RiseFrom(agent,physobj)
 %  event(riseFrom(agent,physobj)).
 %  event(riseFrom(agent,physobj)).
actions([riseFrom/2]).
mpred_prop(riseFrom(agent,physobj),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',549).
% fluent LyingOn(agent,physobj)
 %  fluent(lyingOn(agent,physobj)).
 %  fluent(lyingOn(agent,physobj)).
fluents([lyingOn/2]).
mpred_prop(lyingOn(agent,physobj),fluent).

% fluent SittingOn(agent,physobj)
 %  fluent(sittingOn(agent,physobj)).
 %  fluent(sittingOn(agent,physobj)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',549).
fluents([sittingOn/2]).
mpred_prop(sittingOn(agent,physobj),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',551).
% fluent Standing(agent)
 %  fluent(standing(agent)).
 %  fluent(standing(agent)).
fluents([standing/1]).
mpred_prop(standing(agent),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',553).
% fluent Lying(agent)
 %  fluent(lying(agent)).
 %  fluent(lying(agent)).
fluents([lying/1]).
mpred_prop(lying(agent),fluent).

% fluent Sitting(agent)
 %  fluent(sitting(agent)).
 %  fluent(sitting(agent)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',553).
fluents([sitting/1]).
mpred_prop(sitting(agent),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',555).
% noninertial Lying
noninertial(lying).

% noninertial Sitting
noninertial(sitting).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',558).
% xor Lying, Sitting, Standing
 %  ==>xor[lying,sitting,standing].
==>xor[lying,sitting,standing].


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',560).
% [agent,physobj,time]
% HoldsAt(LyingOn(agent,physobj),time) ->
% HoldsAt(Lying(agent),time).

 /*  holds_at(lyingOn(Agent, Physobj), Time) ->
       holds_at(lying(Agent), Time).
 */
if lyingOn(Agent, Physobj)at Time then lying(Agent)at Time.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',560).

 /*  reactive_rule([holds(lyingOn(Agent,Physobj),Time)],
   	      [holds(lying(Agent),Time)]).
 */


% [agent,physobj,time]
% HoldsAt(SittingOn(agent,physobj),time) ->
% HoldsAt(Sitting(agent),time).

 /*  holds_at(sittingOn(Agent, Physobj), Time) ->
       holds_at(sitting(Agent), Time).
 */
if sittingOn(Agent, Physobj)at Time then sitting(Agent)at Time.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',565).

 /*  reactive_rule([holds(sittingOn(Agent,Physobj),Time)],
   	      [holds(sitting(Agent),Time)]).
 */


% [agent,physobj1,physobj2,time]
% HoldsAt(LyingOn(agent,physobj1),time) &
% HoldsAt(LyingOn(agent,physobj2),time) ->
% physobj1=physobj2.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',569).

 /*  (   holds_at(lyingOn(Agent, Physobj1), Time),
       holds_at(lyingOn(Agent, Physobj2), Time)
   ->  equals(Physobj1, Physobj2)
   ).
 */
if lyingOn(Agent, Physobj1)at Time, lyingOn(Agent, Physobj2)at Time then equals(Physobj1, Physobj2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',569).

 /*  reactive_rule([ holds(lyingOn(Agent,Physobj1),Time),
   		holds(lyingOn(Agent,Physobj2),Time)
   	      ],
   	      [equals(Physobj1,Physobj2)]).
 */


% [agent,physobj1,physobj2,time]
% HoldsAt(SittingOn(agent,physobj1),time) &
% HoldsAt(SittingOn(agent,physobj2),time) ->
% physobj1=physobj2.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',574).

 /*  (   holds_at(sittingOn(Agent, Physobj1), Time),
       holds_at(sittingOn(Agent, Physobj2), Time)
   ->  equals(Physobj1, Physobj2)
   ).
 */
if sittingOn(Agent, Physobj1)at Time, sittingOn(Agent, Physobj2)at Time then equals(Physobj1, Physobj2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',574).

 /*  reactive_rule([ holds(sittingOn(Agent,Physobj1),Time),
   		holds(sittingOn(Agent,Physobj2),Time)
   	      ],
   	      [equals(Physobj1,Physobj2)]).
 */


% [agent,physobj,time]
% HoldsAt(Standing(agent),time) ->
% Initiates(LieOn(agent,physobj),
%           LyingOn(agent,physobj),
%           time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',579).

 /*  axiom(initiates(lieOn(Agent, Physobj), lyingOn(Agent, Physobj), Time),
       [standing(Agent)]).
 */

 /*  standing(Standing) ->
       initiates(lieOn(Standing, Lieon),
                 lyingOn(Standing, Lieon),
                 Initiates).
 */
if standing(Standing)then initiates(lieOn(Standing, Lieon), lyingOn(Standing, Lieon)at Initiates, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',579).

 /*  reactive_rule([holds(standing(Standing),Holds)],
   	      [ initiates(lieOn(Standing,Lieon),
   			  at(lyingOn(Standing,Lieon),
   			     Initiates),
   			  Initiates7)
   	      ]).
 */


% [agent,physobj,time]
% Terminates(LieOn(agent,physobj),
%            Standing(agent),
%            time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',585).

 /*  axiom(terminates(lieOn(Agent, Physobj), standing(Agent), Time),
       []).
 */

 /*  terminates(lieOn(Standing,Lieon),
   	   standing(Standing),
   	   Terminates).
 */
lieOn(Standing, Lieon)terminates standing(Standing).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',585).

 /*  terminated(happens(lieOn(Standing,Lieon),
   		   Time_From,
   		   Time_Until),
   	   standing(Standing),
   	   []).
 */


% [agent,physobj,time]
% HoldsAt(Standing(agent),time) ->
% Initiates(SitOn(agent,physobj),
%           SittingOn(agent,physobj),
%           time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',590).

 /*  axiom(initiates(sitOn(Agent, Physobj), sittingOn(Agent, Physobj), Time),
       [standing(Agent)]).
 */

 /*  standing(Standing) ->
       initiates(sitOn(Standing, Siton),
                 sittingOn(Standing, Siton),
                 Initiates).
 */
if standing(Standing)then initiates(sitOn(Standing, Siton), sittingOn(Standing, Siton)at Initiates, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',590).

 /*  reactive_rule([holds(standing(Standing),Holds)],
   	      [ initiates(sitOn(Standing,Siton),
   			  at(sittingOn(Standing,Siton),
   			     Initiates),
   			  Initiates7)
   	      ]).
 */


% [agent,physobj,time]
% Terminates(SitOn(agent,physobj),
%            Standing(agent),
%            time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',596).

 /*  axiom(terminates(sitOn(Agent, Physobj), standing(Agent), Time),
       []).
 */

 /*  terminates(sitOn(Standing,Siton),
   	   standing(Standing),
   	   Terminates).
 */
sitOn(Standing, Siton)terminates standing(Standing).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',596).

 /*  terminated(happens(sitOn(Standing,Siton),
   		   Time_From,
   		   Time_Until),
   	   standing(Standing),
   	   []).
 */


% [agent,physobj,time]
% (HoldsAt(SittingOn(agent,physobj),time) |
%  HoldsAt(LyingOn(agent,physobj),time)) ->
% Initiates(RiseFrom(agent,physobj),
%           Standing(agent),
%           time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',601).

 /*  axiom(initiates(riseFrom(Agent, Physobj), standing(Agent), Time),
       [  (sittingOn(Agent, Physobj);lyingOn(Agent, Physobj))
       ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',601).

 /*  sittingOn(Standing, Sittingon);lyingOn(Standing, Sittingon) ->
       initiates(riseFrom(Standing, Sittingon),
                 standing(Standing),
                 Initiates).
 */
if sittingOn(Standing, Sittingon);lyingOn(Standing, Sittingon)then initiates(riseFrom(Standing, Sittingon), standing(Standing)at Initiates, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',601).

 /*   reactive_rule([  (sittingOn(Standing, Sittingon);lyingOn(Standing, Sittingon))
                    ],
                    [ initiates(riseFrom(Standing, Sittingon),
                                at(standing(Standing), Initiates),
                                Initiates6)
                    ]).
 */


% [agent,physobj,time]
% HoldsAt(LyingOn(agent,physobj),time) ->
% Terminates(RiseFrom(agent,physobj),
%            LyingOn(agent,physobj),
%            time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',608).

 /*  axiom(terminates(riseFrom(Agent, Physobj), lyingOn(Agent, Physobj), Time),
       [lyingOn(Agent, Physobj)]).
 */

 /*  lyingOn(A, Lyingon) ->
       terminates(riseFrom(A, Lyingon),
                  lyingOn(A, Lyingon),
                  Terminates).
 */
if lyingOn(A, Lyingon)then terminates(riseFrom(A, Lyingon), lyingOn(A, Lyingon)at Terminates, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',608).

 /*  reactive_rule([holds(lyingOn(A,Lyingon),Holds)],
   	      [ terminates(riseFrom(A,Lyingon),
   			   at(lyingOn(A,Lyingon),
   			      Terminates),
   			   Terminates6)
   	      ]).
 */


% [agent,physobj,time]
% HoldsAt(SittingOn(agent,physobj),time) ->
% Terminates(RiseFrom(agent,physobj),
%            SittingOn(agent,physobj),
%            time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',614).

 /*  axiom(terminates(riseFrom(Agent, Physobj), sittingOn(Agent, Physobj), Time),
       [sittingOn(Agent, Physobj)]).
 */

 /*  sittingOn(A, Sittingon) ->
       terminates(riseFrom(A, Sittingon),
                  sittingOn(A, Sittingon),
                  Terminates).
 */
if sittingOn(A, Sittingon)then terminates(riseFrom(A, Sittingon), sittingOn(A, Sittingon)at Terminates, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',614).

 /*  reactive_rule([holds(sittingOn(A,Sittingon),Holds)],
   	      [ terminates(riseFrom(A,Sittingon),
   			   at(sittingOn(A,Sittingon),
   			      Terminates),
   			   Terminates6)
   	      ]).
 */

% event Greet(agent,agent)
 %  event(greet(agent,agent)).
 %  event(greet(agent,agent)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',618).
actions([greet/2]).
mpred_prop(greet(agent,agent),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',621).
% event SayGoodbye(agent,agent)
 %  event(sayGoodbye(agent,agent)).
 %  event(sayGoodbye(agent,agent)).
actions([sayGoodbye/2]).
mpred_prop(sayGoodbye(agent,agent),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',623).
% [agent1,agent2,time]
% Happens(Greet(agent1,agent2),time) ->
% {location}% 
% HoldsAt(At(agent1,location),time) &
% HoldsAt(At(agent2,location),time).
 %  clausify_pnf=exists([Location],  (happens(greet(Agent1, Agent2), Time)->holds_at(at(Agent1, Location), Time), holds_at(at(Agent2, Location), Time))).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',625).

 /*  not(happens(greet(Agent1, Agent2), Time)) :-
       (   not(holds_at(at(Agent1, Exists_Location), Time))
       ;   not(holds_at(at(Agent2, Exists_Location), Time))
       ),
       some(Exists_Location,
            '$kolem_Fn_15'(Agent1, Agent2, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',625).

 /*  fix_axiom_head(Time) ->
       [ not(happens(greet(Agent1, Agent2), Time)),
          (->),
         not(greet(Agent1, Agent2))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',625).

 /*  axiom(not(greet(Agent1, Agent2)),
       [  (not(at(Agent1, Exists_Location));not(at(Agent2, Exists_Location))),
         some(Exists_Location,
              '$kolem_Fn_15'(Agent1, Agent2, Time))
       ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',625).

 /*  (   (   not(at(Kolem_Fn_15P_Num3_V, Tloc))
       ;   not(at(Greet, Tloc))
       ),
       some(Tloc,
            '$kolem_Fn_15'(Kolem_Fn_15P_Num3_V, Greet, Kolem_Fn_15))
   ->  not(greet(Kolem_Fn_15P_Num3_V, Greet))
   ).
 */
if (not loc_at(Kolem_Fn_15P_Num3_V, Tloc);not loc_at(Greet, Tloc)), some(Tloc, '$kolem_Fn_15'(Kolem_Fn_15P_Num3_V, Greet, Kolem_Fn_15))then not greet(Kolem_Fn_15P_Num3_V, Greet).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',625).

 /*   reactive_rule([  (not(loc_at(Kolem_Fn_15P_Num3_V, Tloc));not(loc_at(Greet, Tloc))),
                      some(Tloc,
                           '$kolem_Fn_15'(Kolem_Fn_15P_Num3_V,
                                          Greet,
                                          Kolem_Fn_15))
                    ],
                    [not(greet(Kolem_Fn_15P_Num3_V, Greet))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',625).

 /*  holds_at(at(Agent1, Exists_Location), Time) :-
       happens(greet(Agent1, Agent2), Time),
       some(Exists_Location,
            '$kolem_Fn_15'(Agent1, Agent2, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',625).

 /*  fix_axiom_head(Time) ->
       [ holds_at(at(Agent1, Exists_Location), Time),
          (->),
         at(Agent1, Exists_Location)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',625).

 /*  axiom(at(Agent1, Exists_Location),
       [ greet(Agent1, Agent2),
         some(Exists_Location,
              '$kolem_Fn_15'(Agent1, Agent2, Time))
       ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',625).

 /*  (   greet(Kolem_Fn_15P_Num3_V12, Greet10),
       some(Tloc9,
            '$kolem_Fn_15'(Kolem_Fn_15P_Num3_V12,
                           Greet10,
                           Kolem_Fn_1511))
   ->  at(Kolem_Fn_15P_Num3_V12, Tloc9)
   ).
 */
if greet(Kolem_Fn_15P_Num3_V12, Greet10), some(Tloc9, '$kolem_Fn_15'(Kolem_Fn_15P_Num3_V12, Greet10, Kolem_Fn_1511))then loc_at(Kolem_Fn_15P_Num3_V12, Tloc9).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',625).

 /*  reactive_rule([ greet(Kolem_Fn_15P_Num3_V12,Greet10),
   		some(Tloc9,
   		     '$kolem_Fn_15'(Kolem_Fn_15P_Num3_V12,
   				    Greet10,
   				    Kolem_Fn_1511))
   	      ],
   	      [ holds(loc_at(Kolem_Fn_15P_Num3_V12,Tloc9),
   		      Holds)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',625).

 /*  holds_at(at(Agent2, Exists_Location), Time) :-
       happens(greet(Agent1, Agent2), Time),
       some(Exists_Location,
            '$kolem_Fn_15'(Agent1, Agent2, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',625).

 /*  fix_axiom_head(Time) ->
       [ holds_at(at(Agent2, Exists_Location), Time),
          (->),
         at(Agent2, Exists_Location)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',625).

 /*  axiom(at(Agent2, Exists_Location),
       [ greet(Agent1, Agent2),
         some(Exists_Location,
              '$kolem_Fn_15'(Agent1, Agent2, Time))
       ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',625).

 /*  (   greet(Kolem_Fn_15P_Num3_V17, Greet15),
       some(Tloc14,
            '$kolem_Fn_15'(Kolem_Fn_15P_Num3_V17,
                           Greet15,
                           Kolem_Fn_1516))
   ->  at(Greet15, Tloc14)
   ).
 */
if greet(Kolem_Fn_15P_Num3_V17, Greet15), some(Tloc14, '$kolem_Fn_15'(Kolem_Fn_15P_Num3_V17, Greet15, Kolem_Fn_1516))then loc_at(Greet15, Tloc14).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',625).

 /*  reactive_rule([ greet(Kolem_Fn_15P_Num3_V17,Greet15),
   		some(Tloc14,
   		     '$kolem_Fn_15'(Kolem_Fn_15P_Num3_V17,
   				    Greet15,
   				    Kolem_Fn_1516))
   	      ],
   	      [holds(loc_at(Greet15,Tloc14),Holds18)]).
 */


% [agent1,agent2,time]
% Happens(SayGoodbye(agent1,agent2),time) ->
% {location}% 
% HoldsAt(At(agent1,location),time) &
% HoldsAt(At(agent2,location),time).
 %  clausify_pnf=exists([Location],  (happens(sayGoodbye(Agent1, Agent2), Time)->holds_at(at(Agent1, Location), Time), holds_at(at(Agent2, Location), Time))).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',630).

 /*  not(happens(sayGoodbye(Agent1, Agent2), Time)) :-
       (   not(holds_at(at(Agent1, Exists_Location), Time))
       ;   not(holds_at(at(Agent2, Exists_Location), Time))
       ),
       some(Exists_Location,
            '$kolem_Fn_16'(Agent1, Agent2, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',630).

 /*  fix_axiom_head(Time) ->
       [ not(happens(sayGoodbye(Agent1, Agent2), Time)),
          (->),
         not(sayGoodbye(Agent1, Agent2))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',630).

 /*  axiom(not(sayGoodbye(Agent1, Agent2)),
       [  (not(at(Agent1, Exists_Location));not(at(Agent2, Exists_Location))),
         some(Exists_Location,
              '$kolem_Fn_16'(Agent1, Agent2, Time))
       ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',630).

 /*  (   (   not(at(Kolem_Fn_16P_Num3_V, Tloc))
       ;   not(at(Saygoodbye, Tloc))
       ),
       some(Tloc,
            '$kolem_Fn_16'(Kolem_Fn_16P_Num3_V,
                           Saygoodbye,
                           Kolem_Fn_16))
   ->  not(sayGoodbye(Kolem_Fn_16P_Num3_V, Saygoodbye))
   ).
 */
if (not loc_at(Kolem_Fn_16P_Num3_V, Tloc);not loc_at(Saygoodbye, Tloc)), some(Tloc, '$kolem_Fn_16'(Kolem_Fn_16P_Num3_V, Saygoodbye, Kolem_Fn_16))then not sayGoodbye(Kolem_Fn_16P_Num3_V, Saygoodbye).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',630).

 /*   reactive_rule([  (not(loc_at(Kolem_Fn_16P_Num3_V, Tloc));not(loc_at(Saygoodbye, Tloc))),
                      some(Tloc,
                           '$kolem_Fn_16'(Kolem_Fn_16P_Num3_V,
                                          Saygoodbye,
                                          Kolem_Fn_16))
                    ],
                    [not(sayGoodbye(Kolem_Fn_16P_Num3_V, Saygoodbye))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',630).

 /*  holds_at(at(Agent1, Exists_Location), Time) :-
       happens(sayGoodbye(Agent1, Agent2), Time),
       some(Exists_Location,
            '$kolem_Fn_16'(Agent1, Agent2, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',630).

 /*  fix_axiom_head(Time) ->
       [ holds_at(at(Agent1, Exists_Location), Time),
          (->),
         at(Agent1, Exists_Location)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',630).

 /*  axiom(at(Agent1, Exists_Location),
       [ sayGoodbye(Agent1, Agent2),
         some(Exists_Location,
              '$kolem_Fn_16'(Agent1, Agent2, Time))
       ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',630).

 /*  (   sayGoodbye(Kolem_Fn_16P_Num3_V12, Saygoodbye10),
       some(Tloc9,
            '$kolem_Fn_16'(Kolem_Fn_16P_Num3_V12,
                           Saygoodbye10,
                           Kolem_Fn_1611))
   ->  at(Kolem_Fn_16P_Num3_V12, Tloc9)
   ).
 */
if sayGoodbye(Kolem_Fn_16P_Num3_V12, Saygoodbye10), some(Tloc9, '$kolem_Fn_16'(Kolem_Fn_16P_Num3_V12, Saygoodbye10, Kolem_Fn_1611))then loc_at(Kolem_Fn_16P_Num3_V12, Tloc9).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',630).

 /*  reactive_rule([ sayGoodbye(Kolem_Fn_16P_Num3_V12,
   			   Saygoodbye10),
   		some(Tloc9,
   		     '$kolem_Fn_16'(Kolem_Fn_16P_Num3_V12,
   				    Saygoodbye10,
   				    Kolem_Fn_1611))
   	      ],
   	      [ holds(loc_at(Kolem_Fn_16P_Num3_V12,Tloc9),
   		      Holds)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',630).

 /*  holds_at(at(Agent2, Exists_Location), Time) :-
       happens(sayGoodbye(Agent1, Agent2), Time),
       some(Exists_Location,
            '$kolem_Fn_16'(Agent1, Agent2, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',630).

 /*  fix_axiom_head(Time) ->
       [ holds_at(at(Agent2, Exists_Location), Time),
          (->),
         at(Agent2, Exists_Location)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',630).

 /*  axiom(at(Agent2, Exists_Location),
       [ sayGoodbye(Agent1, Agent2),
         some(Exists_Location,
              '$kolem_Fn_16'(Agent1, Agent2, Time))
       ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',630).

 /*  (   sayGoodbye(Kolem_Fn_16P_Num3_V17, Saygoodbye15),
       some(Tloc14,
            '$kolem_Fn_16'(Kolem_Fn_16P_Num3_V17,
                           Saygoodbye15,
                           Kolem_Fn_1616))
   ->  at(Saygoodbye15, Tloc14)
   ).
 */
if sayGoodbye(Kolem_Fn_16P_Num3_V17, Saygoodbye15), some(Tloc14, '$kolem_Fn_16'(Kolem_Fn_16P_Num3_V17, Saygoodbye15, Kolem_Fn_1616))then loc_at(Saygoodbye15, Tloc14).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',630).

 /*  reactive_rule([ sayGoodbye(Kolem_Fn_16P_Num3_V17,
   			   Saygoodbye15),
   		some(Tloc14,
   		     '$kolem_Fn_16'(Kolem_Fn_16P_Num3_V17,
   				    Saygoodbye15,
   				    Kolem_Fn_1616))
   	      ],
   	      [ holds(loc_at(Saygoodbye15,Tloc14),
   		      Holds18)
   	      ]).
 */

% event Order(agent,agent,physobj)
 %  event(order(agent,agent,physobj)).
 %  event(order(agent,agent,physobj)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',634).
actions([order/3]).
mpred_prop(order(agent,agent,physobj),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',637).
% fluent KnowOrder(agent,agent,physobj)
 %  fluent(knowOrder(agent,agent,physobj)).
 %  fluent(knowOrder(agent,agent,physobj)).
fluents([knowOrder/3]).
mpred_prop(knowOrder(agent,agent,physobj),fluent).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',639).
% [agent1,agent2,physobj,time]
% Initiates(Order(agent1,agent2,physobj),
%           KnowOrder(agent2,agent1,physobj),
%           time).

 /*  axiom(initiates(order(Agent1, Agent2, Physobj), knowOrder(Agent2, Agent1, Physobj), Time),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',639).

 /*  initiates(order(OrderP_Num3_V,
   		KnoworderP_Num3_V,
   		Order),
   	  knowOrder(KnoworderP_Num3_V,
   		    OrderP_Num3_V,
   		    Order),
   	  Initiates).
 */
order(OrderP_Num3_V, KnoworderP_Num3_V, Order)initiates knowOrder(KnoworderP_Num3_V, OrderP_Num3_V, Order).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',639).

 /*  initiated(happens(order(OrderP_Num3_V,
   			KnoworderP_Num3_V,
   			Order),
   		  Time_From,
   		  Time_Until),
   	  knowOrder(KnoworderP_Num3_V,
   		    OrderP_Num3_V,
   		    Order),
   	  []).
 */


% [agent1,agent2,physobj,time]
% Happens(Order(agent1,agent2,physobj),time) ->
% {location}% 
% HoldsAt(At(agent1,location),time) &
% HoldsAt(At(agent2,location),time).
 %  clausify_pnf=exists([Location],  (happens(order(Agent1, Agent2, Physobj), Time)->holds_at(at(Agent1, Location), Time), holds_at(at(Agent2, Location), Time))).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',645).

 /*  not(happens(order(Agent1, Agent2, Physobj), Time)) :-
       (   not(holds_at(at(Agent1, Exists_Location), Time))
       ;   not(holds_at(at(Agent2, Exists_Location), Time))
       ),
       some(Exists_Location,
            '$kolem_Fn_17'(Agent1, Agent2, Physobj, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',645).

 /*  fix_axiom_head(Time) ->
       [ not(happens(order(Agent1, Agent2, Physobj), Time)),
          (->),
         not(order(Agent1, Agent2, Physobj))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',645).

 /*  axiom(not(order(Agent1, Agent2, Physobj)),
       [  (not(at(Agent1, Exists_Location));not(at(Agent2, Exists_Location))),
         some(Exists_Location,
              '$kolem_Fn_17'(Agent1, Agent2, Physobj, Time))
       ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',645).

 /*  (   (   not(at(Kolem_Fn_17P_Num4_V, Tloc))
       ;   not(at(A, Tloc))
       ),
       some(Tloc,
            '$kolem_Fn_17'(Kolem_Fn_17P_Num4_V,
                           A,
                           Order,
                           Kolem_Fn_17))
   ->  not(order(Kolem_Fn_17P_Num4_V, A, Order))
   ).
 */
if (not loc_at(Kolem_Fn_17P_Num4_V, Tloc);not loc_at(A, Tloc)), some(Tloc, '$kolem_Fn_17'(Kolem_Fn_17P_Num4_V, A, Order, Kolem_Fn_17))then not order(Kolem_Fn_17P_Num4_V, A, Order).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',645).

 /*   reactive_rule([  (not(loc_at(Kolem_Fn_17P_Num4_V, Tloc));not(loc_at(A, Tloc))),
                      some(Tloc,
                           '$kolem_Fn_17'(Kolem_Fn_17P_Num4_V,
                                          A,
                                          Order,
                                          Kolem_Fn_17))
                    ],
                    [not(order(Kolem_Fn_17P_Num4_V, A, Order))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',645).

 /*  holds_at(at(Agent1, Exists_Location), Time) :-
       happens(order(Agent1, Agent2, Physobj), Time),
       some(Exists_Location,
            '$kolem_Fn_17'(Agent1, Agent2, Physobj, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',645).

 /*  fix_axiom_head(Time) ->
       [ holds_at(at(Agent1, Exists_Location), Time),
          (->),
         at(Agent1, Exists_Location)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',645).

 /*  axiom(at(Agent1, Exists_Location),
       [ order(Agent1, Agent2, Physobj),
         some(Exists_Location,
              '$kolem_Fn_17'(Agent1, Agent2, Physobj, Time))
       ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',645).

 /*  (   order(OrderP_Num3_V, A, Order11),
       some(Tloc10,
            '$kolem_Fn_17'(OrderP_Num3_V,
                           A,
                           Order11,
                           Kolem_Fn_1713))
   ->  at(OrderP_Num3_V, Tloc10)
   ).
 */
if order(OrderP_Num3_V, A, Order11), some(Tloc10, '$kolem_Fn_17'(OrderP_Num3_V, A, Order11, Kolem_Fn_1713))then loc_at(OrderP_Num3_V, Tloc10).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',645).

 /*  reactive_rule([ happens(order(OrderP_Num3_V,
   			      A,
   			      Order11),
   			Time_From,
   			Time_Until),
   		some(Tloc10,
   		     '$kolem_Fn_17'(OrderP_Num3_V,
   				    A,
   				    Order11,
   				    Kolem_Fn_1713))
   	      ],
   	      [ holds(loc_at(OrderP_Num3_V,Tloc10),
   		      Holds)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',645).

 /*  holds_at(at(Agent2, Exists_Location), Time) :-
       happens(order(Agent1, Agent2, Physobj), Time),
       some(Exists_Location,
            '$kolem_Fn_17'(Agent1, Agent2, Physobj, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',645).

 /*  fix_axiom_head(Time) ->
       [ holds_at(at(Agent2, Exists_Location), Time),
          (->),
         at(Agent2, Exists_Location)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',645).

 /*  axiom(at(Agent2, Exists_Location),
       [ order(Agent1, Agent2, Physobj),
         some(Exists_Location,
              '$kolem_Fn_17'(Agent1, Agent2, Physobj, Time))
       ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',645).

 /*  (   order(OrderP_Num3_V19, A, Order18),
       some(Tloc17,
            '$kolem_Fn_17'(OrderP_Num3_V19,
                           A,
                           Order18,
                           Kolem_Fn_1720))
   ->  at(A, Tloc17)
   ).
 */
if order(OrderP_Num3_V19, A, Order18), some(Tloc17, '$kolem_Fn_17'(OrderP_Num3_V19, A, Order18, Kolem_Fn_1720))then loc_at(A, Tloc17).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',645).

 /*  reactive_rule([ happens(order(OrderP_Num3_V19,
   			      A,
   			      Order18),
   			Time_From21,
   			Time_Until22),
   		some(Tloc17,
   		     '$kolem_Fn_17'(OrderP_Num3_V19,
   				    A,
   				    Order18,
   				    Kolem_Fn_1720))
   	      ],
   	      [holds(loc_at(A,Tloc17),Holds23)]).
 */

% event Request(agent,agent,physobj)
 %  event(request(agent,agent,physobj)).
 %  event(request(agent,agent,physobj)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',649).
actions([request/3]).
mpred_prop(request(agent,agent,physobj),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',652).
% fluent KnowRequest(agent,agent,physobj)
 %  fluent(knowRequest(agent,agent,physobj)).
 %  fluent(knowRequest(agent,agent,physobj)).
fluents([knowRequest/3]).
mpred_prop(knowRequest(agent,agent,physobj),fluent).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',654).
% [agent1,agent2,physobj,time]
% Initiates(Request(agent1,agent2,physobj),
%           KnowRequest(agent2,agent1,physobj),
%           time).

 /*  axiom(initiates(request(Agent1, Agent2, Physobj), knowRequest(Agent2, Agent1, Physobj), Time),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',654).

 /*  initiates(request(RequestP_Num3_V,
   		  KnowrequestP_Num3_V,
   		  Request),
   	  knowRequest(KnowrequestP_Num3_V,
   		      RequestP_Num3_V,
   		      Request),
   	  Initiates).
 */
request(RequestP_Num3_V, KnowrequestP_Num3_V, Request)initiates knowRequest(KnowrequestP_Num3_V, RequestP_Num3_V, Request).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',654).

 /*  initiated(happens(request(RequestP_Num3_V,
   			  KnowrequestP_Num3_V,
   			  Request),
   		  Time_From,
   		  Time_Until),
   	  knowRequest(KnowrequestP_Num3_V,
   		      RequestP_Num3_V,
   		      Request),
   	  []).
 */


% [agent1,agent2,physobj,time]
% Happens(Request(agent1,agent2,physobj),time) ->
% {location}% 
% HoldsAt(At(agent1,location),time) &
% HoldsAt(At(agent2,location),time).
 %  clausify_pnf=exists([Location],  (happens(request(Agent1, Agent2, Physobj), Time)->holds_at(at(Agent1, Location), Time), holds_at(at(Agent2, Location), Time))).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',660).

 /*  not(happens(request(Agent1, Agent2, Physobj), Time)) :-
       (   not(holds_at(at(Agent1, Exists_Location), Time))
       ;   not(holds_at(at(Agent2, Exists_Location), Time))
       ),
       some(Exists_Location,
            '$kolem_Fn_18'(Agent1, Agent2, Physobj, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',660).

 /*  fix_axiom_head(Time) ->
       [ not(happens(request(Agent1, Agent2, Physobj), Time)),
          (->),
         not(request(Agent1, Agent2, Physobj))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',660).

 /*  axiom(not(request(Agent1, Agent2, Physobj)),
       [  (not(at(Agent1, Exists_Location));not(at(Agent2, Exists_Location))),
         some(Exists_Location,
              '$kolem_Fn_18'(Agent1, Agent2, Physobj, Time))
       ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',660).

 /*  (   (   not(at(Kolem_Fn_18P_Num4_V, Tloc))
       ;   not(at(A, Tloc))
       ),
       some(Tloc,
            '$kolem_Fn_18'(Kolem_Fn_18P_Num4_V,
                           A,
                           Request,
                           Kolem_Fn_18))
   ->  not(request(Kolem_Fn_18P_Num4_V, A, Request))
   ).
 */
if (not loc_at(Kolem_Fn_18P_Num4_V, Tloc);not loc_at(A, Tloc)), some(Tloc, '$kolem_Fn_18'(Kolem_Fn_18P_Num4_V, A, Request, Kolem_Fn_18))then not request(Kolem_Fn_18P_Num4_V, A, Request).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',660).

 /*   reactive_rule([  (not(loc_at(Kolem_Fn_18P_Num4_V, Tloc));not(loc_at(A, Tloc))),
                      some(Tloc,
                           '$kolem_Fn_18'(Kolem_Fn_18P_Num4_V,
                                          A,
                                          Request,
                                          Kolem_Fn_18))
                    ],
                    [ not(request(Kolem_Fn_18P_Num4_V,
                                  A,
                                  Request))
                    ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',660).

 /*  holds_at(at(Agent1, Exists_Location), Time) :-
       happens(request(Agent1, Agent2, Physobj), Time),
       some(Exists_Location,
            '$kolem_Fn_18'(Agent1, Agent2, Physobj, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',660).

 /*  fix_axiom_head(Time) ->
       [ holds_at(at(Agent1, Exists_Location), Time),
          (->),
         at(Agent1, Exists_Location)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',660).

 /*  axiom(at(Agent1, Exists_Location),
       [ request(Agent1, Agent2, Physobj),
         some(Exists_Location,
              '$kolem_Fn_18'(Agent1, Agent2, Physobj, Time))
       ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',660).

 /*  (   request(RequestP_Num3_V, A, Request11),
       some(Tloc10,
            '$kolem_Fn_18'(RequestP_Num3_V,
                           A,
                           Request11,
                           Kolem_Fn_1813))
   ->  at(RequestP_Num3_V, Tloc10)
   ).
 */
if request(RequestP_Num3_V, A, Request11), some(Tloc10, '$kolem_Fn_18'(RequestP_Num3_V, A, Request11, Kolem_Fn_1813))then loc_at(RequestP_Num3_V, Tloc10).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',660).

 /*  reactive_rule([ happens(request(RequestP_Num3_V,
   				A,
   				Request11),
   			Time_From,
   			Time_Until),
   		some(Tloc10,
   		     '$kolem_Fn_18'(RequestP_Num3_V,
   				    A,
   				    Request11,
   				    Kolem_Fn_1813))
   	      ],
   	      [ holds(loc_at(RequestP_Num3_V,Tloc10),
   		      Holds)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',660).

 /*  holds_at(at(Agent2, Exists_Location), Time) :-
       happens(request(Agent1, Agent2, Physobj), Time),
       some(Exists_Location,
            '$kolem_Fn_18'(Agent1, Agent2, Physobj, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',660).

 /*  fix_axiom_head(Time) ->
       [ holds_at(at(Agent2, Exists_Location), Time),
          (->),
         at(Agent2, Exists_Location)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',660).

 /*  axiom(at(Agent2, Exists_Location),
       [ request(Agent1, Agent2, Physobj),
         some(Exists_Location,
              '$kolem_Fn_18'(Agent1, Agent2, Physobj, Time))
       ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',660).

 /*  (   request(RequestP_Num3_V19, A, Request18),
       some(Tloc17,
            '$kolem_Fn_18'(RequestP_Num3_V19,
                           A,
                           Request18,
                           Kolem_Fn_1820))
   ->  at(A, Tloc17)
   ).
 */
if request(RequestP_Num3_V19, A, Request18), some(Tloc17, '$kolem_Fn_18'(RequestP_Num3_V19, A, Request18, Kolem_Fn_1820))then loc_at(A, Tloc17).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',660).

 /*  reactive_rule([ happens(request(RequestP_Num3_V19,
   				A,
   				Request18),
   			Time_From21,
   			Time_Until22),
   		some(Tloc17,
   		     '$kolem_Fn_18'(RequestP_Num3_V19,
   				    A,
   				    Request18,
   				    Kolem_Fn_1820))
   	      ],
   	      [holds(loc_at(A,Tloc17),Holds23)]).
 */


%; End of file.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',664).
:- endif.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',27).
% door MainEntrance1
 %  t(door,mainEntrance1).
door(mainEntrance1).
%; room-scale topological space

% outside Street1
 %  t(outside,street1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',29).
outside(street1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',31).
% room DiningRoom1
 %  t(room,diningRoom1).
room(diningRoom1).

% door KitchenDoor1
 %  t(door,kitchenDoor1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',31).
door(kitchenDoor1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',33).
% room Kitchen1
 %  t(room,kitchen1).
room(kitchen1).


% Side1(MainEntrance1)=Street1.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',33).

 /*  axiom(side1Pred(mainEntrance1, street1),
       []).
 */
side1Pred(mainEntrance1,street1).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',35).
% Side2(MainEntrance1)=DiningRoom1.

 /*  axiom(side2Pred(mainEntrance1, diningRoom1),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',35).
side2Pred(mainEntrance1,diningRoom1).


% Side1(KitchenDoor1)=DiningRoom1.

 /*  axiom(side1Pred(kitchenDoor1, diningRoom1),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',35).
side1Pred(kitchenDoor1,diningRoom1).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',37).
% Side2(KitchenDoor1)=Kitchen1.

 /*  axiom(side2Pred(kitchenDoor1, kitchen1),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',37).
side2Pred(kitchenDoor1,kitchen1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',39).
% agent Customer1
 %  t(agent,customer1).
agent(customer1).

% menu Menu1
 %  t(menu,menu1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',39).
menu(menu1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',41).
% chair Chair1
 %  t(chair,chair1).
chair(chair1).

% food Food1
 %  t(food,food1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',41).
food(food1).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',43).
% HoldsAt(At(Customer1,Street1),0).

 /*  axiom(initially(at(customer1, street1)),
       []).
 */
 %  initially(at(customer1,street1)).
initially loc_at(customer1, street1).
 %  initial_state([loc_at(customer1,street1)]).


% HoldsAt(Hungry(Customer1),0).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',43).

 /*  axiom(initially(hungry(customer1)),
       []).
 */
initially hungry(customer1).
 %  initial_state([hungry(customer1)]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',45).
% HoldsAt(At(Chair1,DiningRoom1),0).

 /*  axiom(initially(at(chair1, diningRoom1)),
       []).
 */
 %  initially(at(chair1,diningRoom1)).
initially loc_at(chair1, diningRoom1).
 %  initial_state([loc_at(chair1,diningRoom1)]).


% HoldsAt(At(Menu1,DiningRoom1),0).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',45).

 /*  axiom(initially(at(menu1, diningRoom1)),
       []).
 */
 %  initially(at(menu1,diningRoom1)).
initially loc_at(menu1, diningRoom1).
 %  initial_state([loc_at(menu1,diningRoom1)]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',47).
% HoldsAt(On(Menu1,Table1),0).

 /*  axiom(initially(on(menu1, table1)),
       []).
 */
initially on(menu1, table1).
 %  initial_state([on(menu1,table1)]).


% HoldsAt(At(Food1,Kitchen1),0).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',47).

 /*  axiom(initially(at(food1, kitchen1)),
       []).
 */
 %  initially(at(food1,kitchen1)).
initially loc_at(food1, kitchen1).
 %  initial_state([loc_at(food1,kitchen1)]).

% waiter Waiter1
 %  t(waiter,waiter1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',49).
waiter(waiter1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',51).
% cook Cook1
 %  t(cook,cook1).
cook(cook1).
%; props

% table Table1
 %  t(table,table1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',53).
table table1.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',55).
% bill Bill1
 %  t(bill,bill1).
bill(bill1).
%; restaurant

% restaurant Restaurant1
 %  t(restaurant,restaurant1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',57).
restaurant(restaurant1).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',59).
% CookOf(Restaurant1)=Cook1.

 /*  axiom(cook(restaurant1, cook1),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',59).
cook(restaurant1,cook1).


% TableOf(Restaurant1)=Table1.

 /*  axiom(table(restaurant1, table1),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',59).
table(restaurant1,table1).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',61).
% WaiterOf(Restaurant1)=Waiter1.

 /*  axiom(waiter(restaurant1, waiter1),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',61).
waiter(restaurant1,waiter1).


% KitchenDoorOf(Restaurant1)=KitchenDoor1.

 /*  axiom(kitchenDoor(restaurant1, kitchenDoor1),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',61).
kitchenDoor(restaurant1,kitchenDoor1).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',63).
% BillOf(Restaurant1)=Bill1.

 /*  axiom(bill(restaurant1, bill1),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',63).
bill(restaurant1,bill1).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',65).
%; prune

% sort ona, onb
sort(ona).
sort(onb).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',67).
% fluent! On(ona,onb)
 %  fluent(on(ona,onb)).
 %  fluent(on(ona,onb)).
fluents([on/2]).
mpred_prop(on(ona,onb),fluent).

% event! PlaceOn(agent,ona,onb)
 %  event(placeOn(agent,ona,onb)).
 %  event(placeOn(agent,ona,onb)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',67).
actions([placeOn/3]).
mpred_prop(placeOn(agent,ona,onb),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',69).
% event! TakeOffOf(agent,ona,onb)
 %  event(takeOffOf(agent,ona,onb)).
 %  event(takeOffOf(agent,ona,onb)).
actions([takeOffOf/3]).
mpred_prop(takeOffOf(agent,ona,onb),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',71).
% sort ordera, orderb, orderc
sort(ordera).
sort(orderb).
sort(orderc).

% event! Order(ordera,orderb,orderc)
 %  event(order(ordera,orderb,orderc)).
 %  event(order(ordera,orderb,orderc)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',71).
events([order/3]).
mpred_prop(order(ordera,orderb,orderc),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',73).
% fluent! KnowOrder(orderb,ordera,orderc)
 %  fluent(knowOrder(orderb,ordera,orderc)).
 %  fluent(knowOrder(orderb,ordera,orderc)).
fluents([knowOrder/3]).
mpred_prop(knowOrder(orderb,ordera,orderc),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',75).
% sort requesta, requestb, requestc
sort(requesta).
sort(requestb).
sort(requestc).

% event! Request(requesta,requestb,requestc)
 %  event(request(requesta,requestb,requestc)).
 %  event(request(requesta,requestb,requestc)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',75).
events([request/3]).
mpred_prop(request(requesta,requestb,requestc),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',77).
% fluent! KnowRequest(requestb,requesta,requestc)
 %  fluent(knowRequest(requestb,requesta,requestc)).
 %  fluent(knowRequest(requestb,requesta,requestc)).
fluents([knowRequest/3]).
mpred_prop(knowRequest(requestb,requesta,requestc),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',79).
% sort holda, holdb, holdc
sort(holda).
sort(holdb).
sort(holdc).

% event! TakeOffOf(holda,holdb,holdc)
 %  event(takeOffOf(holda,holdb,holdc)).
 %  event(takeOffOf(holda,holdb,holdc)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',79).
events([takeOffOf/3]).
mpred_prop(takeOffOf(holda,holdb,holdc),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',81).
% event! PickUp(holda,holdb)
 %  event(pickUp(holda,holdb)).
 %  event(pickUp(holda,holdb)).
events([pickUp/2]).
mpred_prop(pickUp(holda,holdb),event).

% event! LetGoOf(holda,holdb)
 %  event(letGoOf(holda,holdb)).
 %  event(letGoOf(holda,holdb)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',81).
events([letGoOf/2]).
mpred_prop(letGoOf(holda,holdb),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',83).
% event! Hold(holda,holdb)
 %  event(hold(holda,holdb)).
 %  event(hold(holda,holdb)).
events([hold/2]).
mpred_prop(hold(holda,holdb),event).

% fluent! Holding(holda,holdb)
 %  fluent(holding(holda,holdb)).
 %  fluent(holding(holda,holdb)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',83).
fluents([holding/2]).
mpred_prop(holding(holda,holdb),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',86).
% sort sita, sitb
sort(sita).
sort(sitb).

% event! LieOn(sita,sitb)
 %  event(lieOn(sita,sitb)).
 %  event(lieOn(sita,sitb)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',86).
events([lieOn/2]).
mpred_prop(lieOn(sita,sitb),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',88).
% event! SitOn(sita,sitb)
 %  event(sitOn(sita,sitb)).
 %  event(sitOn(sita,sitb)).
events([sitOn/2]).
mpred_prop(sitOn(sita,sitb),event).

% event! RiseFrom(sita,sitb)
 %  event(riseFrom(sita,sitb)).
 %  event(riseFrom(sita,sitb)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',88).
events([riseFrom/2]).
mpred_prop(riseFrom(sita,sitb),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',90).
% fluent! LyingOn(sita,sitb)
 %  fluent(lyingOn(sita,sitb)).
 %  fluent(lyingOn(sita,sitb)).
fluents([lyingOn/2]).
mpred_prop(lyingOn(sita,sitb),fluent).

% fluent! SittingOn(sita,sitb)
 %  fluent(sittingOn(sita,sitb)).
 %  fluent(sittingOn(sita,sitb)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',90).
fluents([sittingOn/2]).
mpred_prop(sittingOn(sita,sitb),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',93).
% sort greeta, greetb
sort(greeta).
sort(greetb).

% event! Greet(greeta,greetb)
 %  event(greet(greeta,greetb)).
 %  event(greet(greeta,greetb)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',93).
events([greet/2]).
mpred_prop(greet(greeta,greetb),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',96).
% ona! Menu1, Food1, Bill1
 %  t(ona,menu1).
ona(menu1).
 %  t(ona,food1).
ona(food1).
 %  t(ona,bill1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',96).
ona(bill1).

% onb! Table1
 %  t(onb,table1).
onb(table1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',98).
% ordera! Customer1, Waiter1
 %  t(ordera,customer1).
ordera(customer1).
 %  t(ordera,waiter1).
ordera(waiter1).

% orderb! Waiter1, Cook1
 %  t(orderb,waiter1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',98).
orderb(waiter1).
 %  t(orderb,cook1).
orderb(cook1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',100).
% orderc! Food1
 %  t(orderc,food1).
orderc(food1).

% requesta! Customer1
 %  t(requesta,customer1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',100).
requesta(customer1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',102).
% requestb! Waiter1
 %  t(requestb,waiter1).
requestb(waiter1).

% requestc! Bill1
 %  t(requestc,bill1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',102).
requestc(bill1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',104).
% holda! Customer1, Waiter1
 %  t(holda,customer1).
holda(customer1).
 %  t(holda,waiter1).
holda(waiter1).

% holdb! Menu1, Food1, Bill1
 %  t(holdb,menu1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',104).
holdb(menu1).
 %  t(holdb,food1).
holdb(food1).
 %  t(holdb,bill1).
holdb(bill1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',106).
% holdc! Table1
 %  t(holdc,table1).
holdc(table1).

% sita! Customer1
 %  t(sita,customer1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',106).
sita(customer1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',108).
% sitb! Chair1
 %  t(sitb,chair1).
sitb(chair1).

% greeta! Customer1, Waiter1
 %  t(greeta,customer1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',108).
greeta(customer1).
 %  t(greeta,waiter1).
greeta(waiter1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',110).
% greetb! Customer1, Waiter1
 %  t(greetb,customer1).
greetb(customer1).
 %  t(greetb,waiter1).
greetb(waiter1).
%; initial situation


% HoldsAt(At(Waiter1,DiningRoom1),0).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',112).

 /*  axiom(initially(at(waiter1, diningRoom1)),
       []).
 */
 %  initially(at(waiter1,diningRoom1)).
initially loc_at(waiter1, diningRoom1).
 %  initial_state([loc_at(waiter1,diningRoom1)]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',114).
% HoldsAt(At(Cook1,Kitchen1),0).

 /*  axiom(initially(at(cook1, kitchen1)),
       []).
 */
 %  initially(at(cook1,kitchen1)).
initially loc_at(cook1, kitchen1).
 %  initial_state([loc_at(cook1,kitchen1)]).


% HoldsAt(At(Table1,DiningRoom1),0).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',114).

 /*  axiom(initially(at(table1, diningRoom1)),
       []).
 */
 %  initially(at(table1,diningRoom1)).
initially loc_at(table1, diningRoom1).
 %  initial_state([loc_at(table1,diningRoom1)]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',116).
% !HoldsAt(On(Bill1,Table1),0).

 /*  axiom(initially(neg(on(bill1, table1))),
       []).
 */
 %  initially(neg(on(bill1,table1))).
initially not on(bill1, table1).
 %  initial_state([not(on(bill1,table1))]).


% HoldsAt(At(Bill1,DiningRoom1),0).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',116).

 /*  axiom(initially(at(bill1, diningRoom1)),
       []).
 */
 %  initially(at(bill1,diningRoom1)).
initially loc_at(bill1, diningRoom1).
 %  initial_state([loc_at(bill1,diningRoom1)]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',118).
% [agent]
 % HoldsAt(Standing(agent),0).

 /*  axiom(initially(standing(Agent)),
       []).
 */
initially standing(_).
 %  initial_state([standing(Standing)]).


% [agent,object]
 % !HoldsAt(Holding(agent,object),0).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',118).

 /*  axiom(initially(neg(holding(Agent, Object))),
       []).
 */
 %  initially(neg(holding(_,Holding))).
initially not holding(_, Holding).
 %  initial_state([not(holding(_,Holding))]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',120).
% [agent1,agent2,physobj]
 % !HoldsAt(KnowOrder(agent1,agent2,physobj),0).

 /*  axiom(initially(neg(knowOrder(Agent1, Agent2, Physobj))),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',120).

 /*  initially(neg(knowOrder(KnoworderP_Num3_V,
   			_,
   			Knoworder))).
 */
initially not knowOrder(KnoworderP_Num3_V, _, Knoworder).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',120).

 /*  initial_state([ not(knowOrder(KnoworderP_Num3_V,
   			      _,
   			      Knoworder))
   	      ]).
 */


% [agent1,agent2,physobj]
 % !HoldsAt(KnowRequest(agent1,agent2,physobj),0).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',120).

 /*  axiom(initially(neg(knowRequest(Agent1, Agent2, Physobj))),
       []).
 */

 /*  initially(neg(knowRequest(KnowrequestP_Num3_V,
   			  _,
   			  Knowrequest))).
 */
initially not knowRequest(KnowrequestP_Num3_V, _, Knowrequest).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',120).

 /*  initial_state([ not(knowRequest(KnowrequestP_Num3_V,
   				_,
   				Knowrequest))
   	      ]).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',122).
% HoldsAt(BeWaiter0(Waiter1),0).

 /*  axiom(initially(beWaiter0(waiter1)),
       []).
 */
initially beWaiter0(waiter1).
 %  initial_state([beWaiter0(waiter1)]).


% HoldsAt(BeCook0(Cook1),0).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',122).

 /*  axiom(initially(beCook0(cook1)),
       []).
 */
initially beCook0(cook1).
 %  initial_state([beCook0(cook1)]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',124).
% [food]
 % !HoldsAt(FoodPrepared(food),0).

 /*  axiom(initially(neg(foodPrepared(Food))),
       []).
 */
 %  initially(neg(foodPrepared(Foodprepared))).
initially not foodPrepared(Foodprepared).
 %  initial_state([not(foodPrepared(Foodprepared))]).


% !HoldsAt(Hungry(Cook1),0).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',124).

 /*  axiom(initially(neg(hungry(cook1))),
       []).
 */
 %  initially(neg(hungry(cook1))).
initially not hungry(cook1).
 %  initial_state([not(hungry(cook1))]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',126).
% !HoldsAt(Hungry(Waiter1),0).

 /*  axiom(initially(neg(hungry(waiter1))),
       []).
 */
 %  initially(neg(hungry(waiter1))).
initially not hungry(waiter1).
 %  initial_state([not(hungry(waiter1))]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',128).
% Happens(WalkThroughDoor12(Customer1,MainEntrance1),0).

 /*  axiom(happens(walkThroughDoor12(customer1, mainEntrance1), start),
       []).
 */
 %  happens(walkThroughDoor12(customer1,mainEntrance1),start).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',128).
observe(at(walkThroughDoor12(customer1,mainEntrance1),start)).


% Happens(Greet(Waiter1,Customer1),1).

 /*  axiom(happens(greet(waiter1, customer1), When),
       [b(start, When)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',128).

 /*  b(start, When1) ->
       happens(greet(waiter1, customer1), When1).
 */
if b(start, When1)then happens(greet(waiter1, customer1), When1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',128).

 /*  reactive_rule([b(start,When1)],
   	      [happens(greet(waiter1,customer1),When1)]).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',130).
% Happens(SitOn(Customer1,Chair1),2).

 /*  axiom(happens(sitOn(customer1, chair1), Start_Num2),
       [b(start, Start_Num2), toffset(start, 2, Start_Num2)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',130).

 /*  (   b(start, When),
       toffset(start, 2, When)
   ->  happens(sitOn(customer1, chair1), When)
   ).
 */
if b(start, When), toffset(start, 2, When)then happens(sitOn(customer1, chair1), When).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',130).

 /*  reactive_rule([b(start,When),toffset(start,2,When)],
   	      [happens(sitOn(customer1,chair1),When)]).
 */


% Happens(TakeOffOf(Customer1,Menu1,Table1),3).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',130).

 /*  axiom(happens(takeOffOf(customer1, menu1, table1), Start_Num3),
       [b(start, Start_Num3), toffset(start, 3, Start_Num3)]).
 */

 /*  (   b(start, When),
       toffset(start, 3, When)
   ->  happens(takeOffOf(customer1, menu1, table1), When)
   ).
 */
if b(start, When), toffset(start, 3, When)then happens(takeOffOf(customer1, menu1, table1), When).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',130).

 /*  reactive_rule([b(start,When),toffset(start,3,When)],
   	      [happens(takeOffOf(customer1,menu1,table1),When)]).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',132).
% Happens(Order(Customer1,Waiter1,Food1),4).

 /*  axiom(happens(order(customer1, waiter1, food1), Start_Num4),
       [b(start, Start_Num4), toffset(start, 4, Start_Num4)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',132).

 /*  (   b(start, When),
       toffset(start, 4, When)
   ->  happens(order(customer1, waiter1, food1), When)
   ).
 */
if b(start, When), toffset(start, 4, When)then happens(order(customer1, waiter1, food1), When).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',132).

 /*  reactive_rule([b(start,When),toffset(start,4,When)],
   	      [happens(order(customer1,waiter1,food1),When)]).
 */


% Happens(PlaceOn(Customer1,Menu1,Table1),5).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',132).

 /*  axiom(happens(placeOn(customer1, menu1, table1), Start_Num5),
       [b(start, Start_Num5), toffset(start, 5, Start_Num5)]).
 */

 /*  (   b(start, When),
       toffset(start, 5, When)
   ->  happens(placeOn(customer1, menu1, table1), When)
   ).
 */
if b(start, When), toffset(start, 5, When)then happens(placeOn(customer1, menu1, table1), When).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',132).

 /*  reactive_rule([b(start,When),toffset(start,5,When)],
   	      [happens(placeOn(customer1,menu1,table1),When)]).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',134).
% Happens(Eat(Customer1,Food1),11).

 /*  axiom(happens(eat(customer1, food1), Start_Num11),
       [b(start, Start_Num11), toffset(start, 11, Start_Num11)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',134).

 /*  (   b(start, When),
       toffset(start, 11, When)
   ->  happens(eat(customer1, food1), When)
   ).
 */
if b(start, When), toffset(start, 11, When)then happens(eat(customer1, food1), When).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',134).

 /*  reactive_rule([b(start,When),toffset(start,11,When)],
   	      [happens(eat(customer1,food1),When)]).
 */


% Happens(Request(Customer1,Waiter1,Bill1),12).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',134).

 /*  axiom(happens(request(customer1, waiter1, bill1), Start_Num12),
       [b(start, Start_Num12), toffset(start, 12, Start_Num12)]).
 */

 /*  (   b(start, When),
       toffset(start, 12, When)
   ->  happens(request(customer1, waiter1, bill1), When)
   ).
 */
if b(start, When), toffset(start, 12, When)then happens(request(customer1, waiter1, bill1), When).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',134).

 /*  reactive_rule([b(start,When),toffset(start,12,When)],
   	      [happens(request(customer1,waiter1,bill1),When)]).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',136).
% Happens(Pay(Customer1,Waiter1),15).

 /*  axiom(happens(pay(customer1, waiter1), Start_Num15),
       [b(start, Start_Num15), toffset(start, 15, Start_Num15)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',136).

 /*  (   b(start, When),
       toffset(start, 15, When)
   ->  happens(pay(customer1, waiter1), When)
   ).
 */
if b(start, When), toffset(start, 15, When)then happens(pay(customer1, waiter1), When).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',136).

 /*  reactive_rule([b(start,When),toffset(start,15,When)],
   	      [happens(pay(customer1,waiter1),When)]).
 */


% Happens(Tip(Customer1,Waiter1),15).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',136).

 /*  axiom(happens(tip(customer1, waiter1), Start_Num15),
       [b(start, Start_Num15), toffset(start, 15, Start_Num15)]).
 */

 /*  (   b(start, When),
       toffset(start, 15, When)
   ->  happens(tip(customer1, waiter1), When)
   ).
 */
if b(start, When), toffset(start, 15, When)then happens(tip(customer1, waiter1), When).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',136).

 /*  reactive_rule([b(start,When),toffset(start,15,When)],
   	      [happens(tip(customer1,waiter1),When)]).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',138).
% Happens(RiseFrom(Customer1,Chair1),16).

 /*  axiom(happens(riseFrom(customer1, chair1), Start_Num16),
       [b(start, Start_Num16), toffset(start, 16, Start_Num16)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',138).

 /*  (   b(start, When),
       toffset(start, 16, When)
   ->  happens(riseFrom(customer1, chair1), When)
   ).
 */
if b(start, When), toffset(start, 16, When)then happens(riseFrom(customer1, chair1), When).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',138).

 /*  reactive_rule([b(start,When),toffset(start,16,When)],
   	      [happens(riseFrom(customer1,chair1),When)]).
 */


% Happens(SayGoodbye(Customer1,Waiter1),17).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',138).

 /*  axiom(happens(sayGoodbye(customer1, waiter1), Start_Num17),
       [b(start, Start_Num17), toffset(start, 17, Start_Num17)]).
 */

 /*  (   b(start, When),
       toffset(start, 17, When)
   ->  happens(sayGoodbye(customer1, waiter1), When)
   ).
 */
if b(start, When), toffset(start, 17, When)then happens(sayGoodbye(customer1, waiter1), When).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',138).

 /*  reactive_rule([b(start,When),toffset(start,17,When)],
   	      [happens(sayGoodbye(customer1,waiter1),When)]).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',140).
% Happens(WalkThroughDoor21(Customer1,MainEntrance1),18).

 /*  axiom(happens(walkThroughDoor21(customer1, mainEntrance1), Start_Num18),
       [b(start, Start_Num18), toffset(start, 18, Start_Num18)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',140).

 /*  (   b(start, When),
       toffset(start, 18, When)
   ->  happens(walkThroughDoor21(customer1, mainEntrance1), When)
   ).
 */
if b(start, When), toffset(start, 18, When)then happens(walkThroughDoor21(customer1, mainEntrance1), When).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',140).

 /*  reactive_rule([b(start,When),toffset(start,18,When)],
   	      [ happens(walkThroughDoor21(customer1,mainEntrance1),
   			When)
   	      ]).
 */

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',142).
% range time 0 19
range(time,0,19).

% range offset 0 0
range(offset,0,0).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',144).
% range diameter 0 0
range(diameter,0,0).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e',146).
% completion Happens
completion(happens).
%; End of file.
% translate: ending  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/Rest.e.lps 
