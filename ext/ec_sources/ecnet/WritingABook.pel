:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vision.e',75).
:- call_pel_directive(translate(unskipped,
                                '/pack/logicmoo_ec/ext/ec_sources/ecnet/WritingABook.pel')).
:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(ecalc).
:- call_pel_directive(translate(begining,
                                '/pack/logicmoo_ec/ext/ec_sources/ecnet/WritingABook.pel')).
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{Mueller:2004c,
%;   author = "Erik T. Mueller",
%;   year = "2004",
%;   title = "Understanding script-based stories using commonsense reasoning",
%;   journal = "Cognitive Systems Research",
%;   volume = "5",
%;   number = "4",
%;   pages = "307--340",
%; }
%;

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/WritingABook.e',22).
% option modeldiff on
:- call_pel_directive(option(modeldiff, on)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/WritingABook.e',24).
% ignore Love, ThreatenedBy
:- call_pel_directive(ignore(love)).
:- call_pel_directive(ignore(threatenedBy)).

% ignore LookOutOnto, Floor, BuildingOf, SkyOf, GroundOf
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/WritingABook.e',24).
:- call_pel_directive(ignore(lookOutOnto)).
:- call_pel_directive(ignore(floor)).
:- call_pel_directive(ignore(buildingOf)).
:- call_pel_directive(ignore(skyOf)).
:- call_pel_directive(ignore(groundOf)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/WritingABook.e',26).
% ignore Inside
:- call_pel_directive(ignore(inside)).

% ignore Near, WalkFrom, WalkFromTo, RunFromTo
:- call_pel_directive(ignore(near)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/WritingABook.e',26).
:- call_pel_directive(ignore(walkFrom)).
:- call_pel_directive(ignore(walkFromTo)).
:- call_pel_directive(ignore(runFromTo)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/WritingABook.e',28).
% ignore See
:- call_pel_directive(ignore(see)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/WritingABook.e',30).
% option renaming off
:- call_pel_directive(option(renaming, off)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/WritingABook.e',32).
% load foundations/Root.e
:- call_pel_directive(load('foundations/Root.e')).

% load foundations/EC.e
:- call_pel_directive(load('foundations/EC.e')).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/WritingABook.e',34).
% load answers/Mueller2003/Ontology.e
:- call_pel_directive(load('answers/Mueller2003/Ontology.e')).

% load answers/Mueller2004c/RTSpaceM.e
:- call_pel_directive(load('answers/Mueller2004c/RTSpaceM.e')).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/WritingABook.e',36).
% load answers/Mueller2004c/OTSpaceM.e
:- call_pel_directive(load('answers/Mueller2004c/OTSpaceM.e')).

% load answers/Mueller2004c/HandTo.e
:- call_pel_directive(load('answers/Mueller2004c/HandTo.e')).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/WritingABook.e',38).
% load answers/Mueller2003/Sleep.e
:- call_pel_directive(load('answers/Mueller2003/Sleep.e')).

% load answers/Mueller2004c/Cognition.e
:- call_pel_directive(load('answers/Mueller2004c/Cognition.e')).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/WritingABook.e',41).
% door Door1
t(door,door1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/WritingABook.e',43).
% room Room0
t(room,room0).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/WritingABook.e',45).
% room Room1
t(room,room1).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/WritingABook.e',47).
% Side1(Door1)=Room0.
side1(door1)=room0.


% Side2(Door1)=Room1.
side2(door1)=room1.

% agent Writer1
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/WritingABook.e',49).
t(agent,writer1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/WritingABook.e',52).
% paper Paper1
t(paper,paper1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/WritingABook.e',54).
% pen Pen1
t(pen,pen1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/WritingABook.e',56).
% chair Chair1
t(chair,chair1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/WritingABook.e',58).
% physobj Desk1
t(physobj,desk1).
%; initial state
% [agent,object]
 % !HoldsAt(Holding(agent,object),0).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/WritingABook.e',60).
holds_at(not(holding(Agent,Object)),0).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/WritingABook.e',62).
% [agent,physobj]
 % !HoldsAt(SittingOn(agent,physobj),0).
holds_at(not(sittingOn(Agent,Physobj)),0).


% [agent,physobj]
 % !HoldsAt(LyingOn(agent,physobj),0).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/WritingABook.e',62).
holds_at(not(lyingOn(Agent,Physobj)),0).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/WritingABook.e',64).
% [physobj1,physobj2]
% !(physobj1=Pen1 & physobj2=Desk1) &
% !(physobj1=Paper1 & physobj2=Desk1) ->
% !HoldsAt(On(physobj1, physobj2),0).
not((Physobj1=pen1, Physobj2=desk1)), not((Physobj1=paper1, Physobj2=desk1)) ->
    holds_at(not(on(Physobj1, Physobj2)), 0).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/WritingABook.e',68).
% HoldsAt(On(Paper1,Desk1),0).
holds_at(on(paper1,desk1),0).


% HoldsAt(On(Pen1,Desk1),0).
holds_at(on(pen1,desk1),0).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/WritingABook.e',70).
% HoldsAt(Dressed(Writer1),0).
holds_at(dressed(writer1),0).


% HoldsAt(Awake(Writer1),0).
holds_at(awake(writer1),0).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/WritingABook.e',72).
% HoldsAt(Sleep3(Writer1),0).
holds_at(sleep3(writer1),0).


% HoldsAt(Standing(Writer1),0).
holds_at(standing(writer1),0).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/WritingABook.e',74).
% HoldsAt(DoorUnlocked(Door1),0).
holds_at(doorUnlocked(door1),0).


% HoldsAt(DoorIsOpen(Door1),0).
holds_at(doorIsOpen(door1),0).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/WritingABook.e',76).
% HoldsAt(At(Writer1,Room0),0).
holds_at(at_loc(writer1,room0),0).


% HoldsAt(At(Chair1,Room1),0).
holds_at(at_loc(chair1,room1),0).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/WritingABook.e',78).
% HoldsAt(At(Desk1,Room1),0).
holds_at(at_loc(desk1,room1),0).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/WritingABook.e',80).
%; narrative


% Happens(WalkThroughDoor12(Writer1,Door1),0).
happens_at(walkThroughDoor12(writer1,door1),0).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/WritingABook.e',82).
% Happens(SitOn(Writer1,Chair1),1).
happens_at(sitOn(writer1,chair1),1).


% Happens(TakeOffOf(Writer1,Pen1,Desk1),2).
happens_at(takeOffOf(writer1,pen1,desk1),2).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/WritingABook.e',84).
% Happens(Think(Writer1),3).
happens_at(think(writer1),3).


% Happens(WriteOn(Writer1,Paper1,Pen1),4).
happens_at(writeOn(writer1,paper1,pen1),4).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/WritingABook.e',86).
% Happens(WriteOn(Writer1,Paper1,Pen1),5).
happens_at(writeOn(writer1,paper1,pen1),5).


% Happens(PlaceOn(Writer1,Pen1,Desk1),6).
happens_at(placeOn(writer1,pen1,desk1),6).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/WritingABook.e',88).
% Happens(RiseFrom(Writer1,Chair1),7).
happens_at(riseFrom(writer1,chair1),7).


% Happens(WalkThroughDoor21(Writer1,Door1),8).
happens_at(walkThroughDoor21(writer1,door1),8).

% range time 0 9
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/WritingABook.e',90).
:- call_pel_directive(range(time, 0, 9)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/WritingABook.e',92).
% range offset 0 0
:- call_pel_directive(range(offset, 0, 0)).

% range diameter 0 0
:- call_pel_directive(range(diameter, 0, 0)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/WritingABook.e',95).
% completion Happens
:- call_pel_directive(completion(happens_at)).
%; End of file.
:- call_pel_directive(translate(ending,
                                '/pack/logicmoo_ec/ext/ec_sources/ecnet/WritingABook.pel')).
