:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleeping.e',87).
:- call_pel_directive(translate(unskipped,
                                '/pack/logicmoo_ec/ext/ec_sources/ecnet/SmallFire.pel')).
:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(ecalc).
:- call_pel_directive(translate(begining,
                                '/pack/logicmoo_ec/ext/ec_sources/ecnet/SmallFire.pel')).
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; SmallFire: matches, lighters, cigarettes, etc.
%;

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SmallFire.e',14).
% event Light(agent,physobj)
event(light(agent,physobj)).

% event LightWith(agent,physobj,physobj)
event(lightWith(agent,physobj,physobj)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SmallFire.e',16).
% event PutOut(agent,physobj)
event(putOut(agent,physobj)).

% event BlowOut(agent,physobj)
event(blowOut(agent,physobj)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SmallFire.e',18).
% fluent IsBurning(physobj)
fluent(isBurning(physobj)).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SmallFire.e',20).
% [agent,physobj1,physobj2,time]
% HoldsAt(IsBurning(physobj2),time) ->
% Initiates(LightWith(agent,physobj1,physobj2),
%           IsBurning(physobj1),
%           time).
holds_at(isBurning(Physobj2), Time) ->
    initiates_at(lightWith(Agent, Physobj1, Physobj2),
                 isBurning(Physobj1),
                 Time).


% [agent,physobj1,physobj2,time]
% Happens(LightWith(agent,physobj1,physobj2),time) ->
% HoldsAt(Holding(agent,physobj1),time) &
% HoldsAt(Holding(agent,physobj2),time) &
% !HoldsAt(IsBurning(physobj1),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SmallFire.e',27).
happens_at(lightWith(Agent, Physobj1, Physobj2), Time) ->
    holds_at(holding(Agent, Physobj1), Time),
    holds_at(holding(Agent, Physobj2), Time),
    holds_at(not(isBurning(Physobj1)), Time).


% [agent,physobj,time]
% Initiates(Light(agent,physobj),
%           IsBurning(physobj),
%           time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SmallFire.e',33).
initiates_at(light(Agent,Physobj),
	     isBurning(Physobj),
	     Time).


% [agent,physobj,time]
% Happens(Light(agent,physobj),time) ->
% HoldsAt(Holding(agent,physobj),time) &
% !HoldsAt(IsBurning(physobj),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SmallFire.e',38).
happens_at(light(Agent, Physobj), Time) ->
    holds_at(holding(Agent, Physobj), Time),
    holds_at(not(isBurning(Physobj)), Time).


% [agent,physobj,time]
% Terminates(PutOut(agent,physobj),
%            IsBurning(physobj),
%            time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SmallFire.e',43).
terminates_at(putOut(Agent,Physobj),
	      isBurning(Physobj),
	      Time).


% [agent,physobj,time]
% Happens(PutOut(agent,physobj),time) ->
% HoldsAt(Holding(agent,physobj),time) &
% HoldsAt(IsBurning(physobj),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SmallFire.e',48).
happens_at(putOut(Agent, Physobj), Time) ->
    holds_at(holding(Agent, Physobj), Time),
    holds_at(isBurning(Physobj), Time).


% [agent,physobj,time]
% Terminates(BlowOut(agent,physobj),
%            IsBurning(physobj),
%            time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SmallFire.e',53).
terminates_at(blowOut(Agent,Physobj),
	      isBurning(Physobj),
	      Time).


% [agent,physobj,time]
% Happens(BlowOut(agent,physobj),time) ->
% HoldsAt(Holding(agent,physobj),time) &
% HoldsAt(IsBurning(physobj),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SmallFire.e',58).
happens_at(blowOut(Agent, Physobj), Time) ->
    holds_at(holding(Agent, Physobj), Time),
    holds_at(isBurning(Physobj), Time).


%; End of file.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SmallFire.e',61).
:- call_pel_directive(translate(ending,
                                '/pack/logicmoo_ec/ext/ec_sources/ecnet/SmallFire.pel')).
