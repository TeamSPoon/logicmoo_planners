:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',107).
% translate: unskipped  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e.lps 
:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(lps).
% translate: begining  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e.lps 
% Wed, 07 Oct 2020 09:37:57 GMT File: <stream>(0x5557c8fe5200)%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; The Sleep representation deals with the activity of sleeping and
%; body posture.
%; It is similar to the finite automaton representation of sleep
%; used in ThoughtTreasure \fullcite[chap. 7]{Mueller:1998}.
%;
%; @book{Mueller:1998,
%;   author = "Erik T. Mueller",
%;   year = "1998",
%;   title = "Natural Language Processing with \uppercase{T}hought\uppercase{T}reasure",
%;   address = "New York",
%;   publisher = "Signiform",
%; }
%;
%; sleep
%; agent wakes up.

% event WakeUp(agent)
 %  event(wakeUp(agent)).
 %  event(wakeUp(agent)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',27).
actions([wakeUp/1]).
mpred_prop(wakeUp(agent),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',30).
%; agent gets tired.

% event GetTired(agent)
 %  event(getTired(agent)).
 %  event(getTired(agent)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',30).
actions([getTired/1]).
mpred_prop(getTired(agent),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',33).
%; agent falls asleep.

% event FallAsleep(agent)
 %  event(fallAsleep(agent)).
 %  event(fallAsleep(agent)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',33).
actions([fallAsleep/1]).
mpred_prop(fallAsleep(agent),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',36).
%; agent is asleep.

% fluent Sleep0(agent)
 %  fluent(sleep0(agent)).
 %  fluent(sleep0(agent)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',36).
fluents([sleep0/1]).
mpred_prop(sleep0(agent),fluent).


%; agent is awake and in bed.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',39).
% fluent Sleep1(agent)
 %  fluent(sleep1(agent)).
 %  fluent(sleep1(agent)).
fluents([sleep1/1]).
mpred_prop(sleep1(agent),fluent).


%; agent is awake, out of bed, and undressed.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',41).
% fluent Sleep2(agent)
 %  fluent(sleep2(agent)).
 %  fluent(sleep2(agent)).
fluents([sleep2/1]).
mpred_prop(sleep2(agent),fluent).


%; agent is awake and dressed.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',43).
% fluent Sleep3(agent)
 %  fluent(sleep3(agent)).
 %  fluent(sleep3(agent)).
fluents([sleep3/1]).
mpred_prop(sleep3(agent),fluent).


%; agent is tired and dressed.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',45).
% fluent Sleep4(agent)
 %  fluent(sleep4(agent)).
 %  fluent(sleep4(agent)).
fluents([sleep4/1]).
mpred_prop(sleep4(agent),fluent).


%; agent is tired and undressed.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',47).
% fluent Sleep5(agent)
 %  fluent(sleep5(agent)).
 %  fluent(sleep5(agent)).
fluents([sleep5/1]).
mpred_prop(sleep5(agent),fluent).


%; agent is in bed, waiting to fall asleep.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',49).
% fluent Sleep6(agent)
 %  fluent(sleep6(agent)).
 %  fluent(sleep6(agent)).
fluents([sleep6/1]).
mpred_prop(sleep6(agent),fluent).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',51).
%; At any time, an agent is in one of seven sleep states:

% xor Sleep0, Sleep1, Sleep2, Sleep3, Sleep4, Sleep5, Sleep6
 %  ==>xor[sleep0,sleep1,sleep2,sleep3,sleep4,sleep5,sleep6].
==>xor[sleep0,sleep1,sleep2,sleep3,sleep4,sleep5,sleep6].
%; constraints
%; agent is asleep.

% fluent Asleep(agent)
 %  fluent(asleep(agent)).
 %  fluent(asleep(agent)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',56).
fluents([asleep/1]).
mpred_prop(asleep(agent),fluent).


%; agent is awake.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',59).
% fluent Awake(agent)
 %  fluent(awake(agent)).
 %  fluent(awake(agent)).
fluents([awake/1]).
mpred_prop(awake(agent),fluent).

% noninertial Asleep
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',59).
noninertial(asleep).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',61).
% noninertial Awake
noninertial(awake).
%; Sleep0 indicates that the agent is asleep:
% [agent,time]
 % HoldsAt(Asleep(agent),time) <-> HoldsAt(Sleep0(agent),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',63).

 /*  holds_at(asleep(Agent), Time) <->
       holds_at(sleep0(Agent), Time).
 */

 /*  holds_at(asleep(Agent), Time) ->
       holds_at(sleep0(Agent), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',63).
then(if(at(asleep(Agent),Time)),
     at(sleep0(Agent),Time)).

 /*  reactive_rule([holds(asleep(Agent),Time)],
   	      [holds(sleep0(Agent),Time)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',63).

 /*  holds_at(sleep0(Agent), Time) ->
       holds_at(asleep(Agent), Time).
 */
then(if(at(sleep0(Agent),Time)),
     at(asleep(Agent),Time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',63).

 /*  reactive_rule([holds(sleep0(Agent),Time)],
   	      [holds(asleep(Agent),Time)]).
 */


%; In all other sleep states, the agent is awake:
% [agent,time]
% HoldsAt(Awake(agent),time) <->
% HoldsAt(Sleep1(agent),time) |
% HoldsAt(Sleep2(agent),time) |
% HoldsAt(Sleep3(agent),time) |
% HoldsAt(Sleep4(agent),time) |
% HoldsAt(Sleep5(agent),time) |
% HoldsAt(Sleep6(agent),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',67).

 /*  holds_at(awake(Agent), Time) <->
       (   holds_at(sleep1(Agent), Time)
       ;   holds_at(sleep2(Agent), Time)
       ;   holds_at(sleep3(Agent), Time)
       ;   holds_at(sleep4(Agent), Time)
       ;   holds_at(sleep5(Agent), Time)
       ;   holds_at(sleep6(Agent), Time)
       ).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',67).

 /*  holds_at(awake(Agent), Time) ->
       (   holds_at(sleep1(Agent), Time)
       ;   holds_at(sleep2(Agent), Time)
       ;   holds_at(sleep3(Agent), Time)
       ;   holds_at(sleep4(Agent), Time)
       ;   holds_at(sleep5(Agent), Time)
       ;   holds_at(sleep6(Agent), Time)
       ).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',67).
 then(if(at(awake(Agent), Time)),
         (at(sleep1(Agent), Time);at(sleep2(Agent), Time);at(sleep3(Agent), Time);at(sleep4(Agent), Time);at(sleep5(Agent), Time);at(sleep6(Agent), Time))).

 /*   reactive_rule([holds(awake(Agent), Time)],
                    [  (at(sleep1(Agent), Time);at(sleep2(Agent), Time);at(sleep3(Agent), Time);at(sleep4(Agent), Time);at(sleep5(Agent), Time);at(sleep6(Agent), Time))
                    ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',67).

 /*  holds_at(sleep1(Agent), Time);holds_at(sleep2(Agent), Time);holds_at(sleep3(Agent), Time);holds_at(sleep4(Agent), Time);holds_at(sleep5(Agent), Time);holds_at(sleep6(Agent), Time) ->
       holds_at(awake(Agent), Time).
 */
 then(if((at(sleep1(Agent), Time);at(sleep2(Agent), Time);at(sleep3(Agent), Time);at(sleep4(Agent), Time);at(sleep5(Agent), Time);at(sleep6(Agent), Time))),
        at(awake(Agent), Time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',67).

 /*   reactive_rule([  (at(sleep1(Agent), Time);at(sleep2(Agent), Time);at(sleep3(Agent), Time);at(sleep4(Agent), Time);at(sleep5(Agent), Time);at(sleep6(Agent), Time))
                    ],
                    [holds(awake(Agent), Time)]).
 */


%; A number of axioms are used to specify the transitions of
%; a finite automaton.
%;--
%; Waking up causes a transition from Sleep0
%; to Sleep1:
% [agent,time]
 
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',82).
% Terminates(WakeUp(agent),Sleep0(agent),time).

 /*  axiom(terminates(wakeUp(Agent), sleep0(Agent), Time),
       []).
 */
 %  terminates(wakeUp(Wakeup),sleep0(Wakeup),Terminates).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',82).
terminates(wakeUp(Wakeup),sleep0(Wakeup)).

 /*  terminated(happens(wakeUp(Wakeup),
   		   Time_From,
   		   Time_Until),
   	   sleep0(Wakeup),
   	   []).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',84).
% [agent,time]
 % Initiates(WakeUp(agent),Sleep1(agent),time).

 /*  axiom(initiates(wakeUp(Agent), sleep1(Agent), Time),
       []).
 */
 %  initiates(wakeUp(Wakeup),sleep1(Wakeup),Initiates).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',84).
initiates(wakeUp(Wakeup),sleep1(Wakeup)).

 /*  initiated(happens(wakeUp(Wakeup),
   		  Time_From,
   		  Time_Until),
   	  sleep1(Wakeup),
   	  []).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',86).
% [agent,time]
 % Happens(WakeUp(agent),time) -> HoldsAt(Sleep0(agent),time).

 /*  happens(wakeUp(Agent), Time) ->
       holds_at(sleep0(Agent), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',86).
then(if(happens(wakeUp(Agent),Time)),
     at(sleep0(Agent),Time)).

 /*  reactive_rule([happens(wakeUp(Agent),Time)],
   	      [holds(sleep0(Agent),Time)]).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',88).
%;--
%; Getting out of bed causes a transition from Sleep1
%; to Sleep2:
% [agent,bed,time]
 
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',92).
% Terminates(RiseFrom(agent,bed),Sleep1(agent),time).

 /*  axiom(terminates(riseFrom(Agent, Bed), sleep1(Agent), Time),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',92).

 /*  terminates(riseFrom(Sleep1,Risefrom),
   	   sleep1(Sleep1),
   	   Terminates).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',92).
terminates(riseFrom(Sleep1,Risefrom),sleep1(Sleep1)).

 /*  terminated(happens(riseFrom(Sleep1,Risefrom),
   		   Time_From,
   		   Time_Until),
   	   sleep1(Sleep1),
   	   []).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',94).
% [agent,bed,time]
 % Initiates(RiseFrom(agent,bed),Sleep2(agent),time).

 /*  axiom(initiates(riseFrom(Agent, Bed), sleep2(Agent), Time),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',94).

 /*  initiates(riseFrom(Sleep2,Risefrom),
   	  sleep2(Sleep2),
   	  Initiates).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',94).
initiates(riseFrom(Sleep2,Risefrom),sleep2(Sleep2)).

 /*  initiated(happens(riseFrom(Sleep2,Risefrom),
   		  Time_From,
   		  Time_Until),
   	  sleep2(Sleep2),
   	  []).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',96).
% [agent,bed,time]
% Happens(RiseFrom(agent,bed),time) -> HoldsAt(Sleep1(agent),time).

 /*  happens(riseFrom(Agent, Bed), Time) ->
       holds_at(sleep1(Agent), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',96).
then(if(happens(riseFrom(Agent,Bed),Time)),
     at(sleep1(Agent),Time)).

 /*  reactive_rule([happens(riseFrom(Agent,Bed),Time)],
   	      [holds(sleep1(Agent),Time)]).
 */


%;--
%; Getting dressed causes a transition from Sleep2
%; to Sleep3, the normal state of awakeness:
% [agent,time]
 
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',103).
% Terminates(GetDressed(agent),Sleep2(agent),time).

 /*  axiom(terminates(getDressed(Agent), sleep2(Agent), Time),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',103).

 /*  terminates(getDressed(Getdressed),
   	   sleep2(Getdressed),
   	   Terminates).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',103).
terminates(getDressed(Getdressed),sleep2(Getdressed)).

 /*  terminated(happens(getDressed(Getdressed),
   		   Time_From,
   		   Time_Until),
   	   sleep2(Getdressed),
   	   []).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',105).
% [agent,time]
 % Initiates(GetDressed(agent),Sleep3(agent),time).

 /*  axiom(initiates(getDressed(Agent), sleep3(Agent), Time),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',105).

 /*  initiates(getDressed(Getdressed),
   	  sleep3(Getdressed),
   	  Initiates).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',105).
initiates(getDressed(Getdressed),sleep3(Getdressed)).

 /*  initiated(happens(getDressed(Getdressed),
   		  Time_From,
   		  Time_Until),
   	  sleep3(Getdressed),
   	  []).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',107).
% [agent,time]
 % Happens(GetDressed(agent),time) -> HoldsAt(Sleep2(agent),time).

 /*  happens(getDressed(Agent), Time) ->
       holds_at(sleep2(Agent), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',107).
then(if(happens(getDressed(Agent),Time)),
     at(sleep2(Agent),Time)).

 /*  reactive_rule([happens(getDressed(Agent),Time)],
   	      [holds(sleep2(Agent),Time)]).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',109).
%;--
%; Getting tired causes a transition from Sleep3
%; to Sleep4:
% [agent,time]
 
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',113).
% Terminates(GetTired(agent),Sleep3(agent),time).

 /*  axiom(terminates(getTired(Agent), sleep3(Agent), Time),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',113).

 /*  terminates(getTired(Gettired),
   	   sleep3(Gettired),
   	   Terminates).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',113).
terminates(getTired(Gettired),sleep3(Gettired)).

 /*  terminated(happens(getTired(Gettired),
   		   Time_From,
   		   Time_Until),
   	   sleep3(Gettired),
   	   []).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',115).
% [agent,time]
 % Initiates(GetTired(agent),Sleep4(agent),time).

 /*  axiom(initiates(getTired(Agent), sleep4(Agent), Time),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',115).

 /*  initiates(getTired(Gettired),
   	  sleep4(Gettired),
   	  Initiates).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',115).
initiates(getTired(Gettired),sleep4(Gettired)).

 /*  initiated(happens(getTired(Gettired),
   		  Time_From,
   		  Time_Until),
   	  sleep4(Gettired),
   	  []).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',117).
% [agent,time]
 % Happens(GetTired(agent),time) -> HoldsAt(Sleep3(agent),time).

 /*  happens(getTired(Agent), Time) ->
       holds_at(sleep3(Agent), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',117).
then(if(happens(getTired(Agent),Time)),
     at(sleep3(Agent),Time)).

 /*  reactive_rule([happens(getTired(Agent),Time)],
   	      [holds(sleep3(Agent),Time)]).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',119).
%;--
%; Getting undressed causes a transition from Sleep4
%; to Sleep5:
% [agent,time]
 
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',123).
% Terminates(GetUndressed(agent),Sleep4(agent),time).

 /*  axiom(terminates(getUndressed(Agent), sleep4(Agent), Time),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',123).

 /*  terminates(getUndressed(Getundressed),
   	   sleep4(Getundressed),
   	   Terminates).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',123).
terminates(getUndressed(Getundressed),sleep4(Getundressed)).

 /*  terminated(happens(getUndressed(Getundressed),
   		   Time_From,
   		   Time_Until),
   	   sleep4(Getundressed),
   	   []).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',125).
% [agent,time]
 % Initiates(GetUndressed(agent),Sleep5(agent),time).

 /*  axiom(initiates(getUndressed(Agent), sleep5(Agent), Time),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',125).

 /*  initiates(getUndressed(Getundressed),
   	  sleep5(Getundressed),
   	  Initiates).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',125).
initiates(getUndressed(Getundressed),sleep5(Getundressed)).

 /*  initiated(happens(getUndressed(Getundressed),
   		  Time_From,
   		  Time_Until),
   	  sleep5(Getundressed),
   	  []).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',127).
% [agent,time]
 % Happens(GetUndressed(agent),time) -> HoldsAt(Sleep4(agent),time).

 /*  happens(getUndressed(Agent), Time) ->
       holds_at(sleep4(Agent), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',127).
then(if(happens(getUndressed(Agent),Time)),
     at(sleep4(Agent),Time)).

 /*  reactive_rule([happens(getUndressed(Agent),Time)],
   	      [holds(sleep4(Agent),Time)]).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',129).
%;--
%; Lying on a bed causes a transition from Sleep5
%; to Sleep6:
% [agent,bed,time]
 
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',133).
% Terminates(LieOn(agent,bed),Sleep5(agent),time).

 /*  axiom(terminates(lieOn(Agent, Bed), sleep5(Agent), Time),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',133).

 /*  terminates(lieOn(Sleep5,Lieon),
   	   sleep5(Sleep5),
   	   Terminates).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',133).
terminates(lieOn(Sleep5,Lieon),sleep5(Sleep5)).

 /*  terminated(happens(lieOn(Sleep5,Lieon),
   		   Time_From,
   		   Time_Until),
   	   sleep5(Sleep5),
   	   []).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',135).
% [agent,bed,time]
 % Initiates(LieOn(agent,bed),Sleep6(agent),time).

 /*  axiom(initiates(lieOn(Agent, Bed), sleep6(Agent), Time),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',135).

 /*  initiates(lieOn(Sleep6,Lieon),
   	  sleep6(Sleep6),
   	  Initiates).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',135).
initiates(lieOn(Sleep6,Lieon),sleep6(Sleep6)).

 /*  initiated(happens(lieOn(Sleep6,Lieon),
   		  Time_From,
   		  Time_Until),
   	  sleep6(Sleep6),
   	  []).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',137).
% [agent,bed,time]
 % Happens(LieOn(agent,bed),time) -> HoldsAt(Sleep5(agent),time).

 /*  happens(lieOn(Agent, Bed), Time) ->
       holds_at(sleep5(Agent), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',137).
then(if(happens(lieOn(Agent,Bed),Time)),
     at(sleep5(Agent),Time)).

 /*  reactive_rule([happens(lieOn(Agent,Bed),Time)],
   	      [holds(sleep5(Agent),Time)]).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',139).
%;--
%; Falling asleep causes a transition from Sleep6
%; to Sleep0:
% [agent,time]
 
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',143).
% Terminates(FallAsleep(agent),Sleep6(agent),time).

 /*  axiom(terminates(fallAsleep(Agent), sleep6(Agent), Time),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',143).

 /*  terminates(fallAsleep(Fallasleep),
   	   sleep6(Fallasleep),
   	   Terminates).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',143).
terminates(fallAsleep(Fallasleep),sleep6(Fallasleep)).

 /*  terminated(happens(fallAsleep(Fallasleep),
   		   Time_From,
   		   Time_Until),
   	   sleep6(Fallasleep),
   	   []).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',145).
% [agent,time]
 % Initiates(FallAsleep(agent),Sleep0(agent),time).

 /*  axiom(initiates(fallAsleep(Agent), sleep0(Agent), Time),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',145).

 /*  initiates(fallAsleep(Fallasleep),
   	  sleep0(Fallasleep),
   	  Initiates).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',145).
initiates(fallAsleep(Fallasleep),sleep0(Fallasleep)).

 /*  initiated(happens(fallAsleep(Fallasleep),
   		  Time_From,
   		  Time_Until),
   	  sleep0(Fallasleep),
   	  []).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',147).
% [agent,time]
 % Happens(FallAsleep(agent),time) -> HoldsAt(Sleep6(agent),time).

 /*  happens(fallAsleep(Agent), Time) ->
       holds_at(sleep6(Agent), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',147).
then(if(happens(fallAsleep(Agent),Time)),
     at(sleep6(Agent),Time)).

 /*  reactive_rule([happens(fallAsleep(Agent),Time)],
   	      [holds(sleep6(Agent),Time)]).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',149).
%;--
%; agent acts on being in state Sleep5.

% fluent ActOnSleep5(agent)
 %  fluent(actOnSleep5(agent)).
 %  fluent(actOnSleep5(agent)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',151).
fluents([actOnSleep5/1]).
mpred_prop(actOnSleep5(agent),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',153).
% noninertial ActOnSleep5
noninertial(actOnSleep5).
%; We reduce the number of models by asserting that
%; an agent only acts on being in state Sleep5 while in
%; that state:
% [agent,time]
% !HoldsAt(Sleep5(agent),time) ->
% !HoldsAt(ActOnSleep5(agent),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',158).

 /*  holds_at(neg(sleep5(Agent)), Time) ->
       holds_at(neg(actOnSleep5(Agent)), Time).
 */
then(if(at(not(sleep5(Agent)),Time)),
     at(not(actOnSleep5(Agent)),Time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',158).

 /*  reactive_rule([holds(not(sleep5(Agent)),Time)],
   	      [holds(not(actOnSleep5(Agent)),Time)]).
 */


%; Undressed is like IntentionToPlay
%; ActOnSleep5 is like ActOnIntentionToPlay
%; A trigger axiom states that if an agent is in state Sleep5,
%; the agent acts on this state, the agent is in a room, and
%; a bed is at the room, the agent lies on the bed:
% [agent,room,bed,time]
% HoldsAt(Sleep5(agent),time) &
% HoldsAt(ActOnSleep5(agent),time) &
% HoldsAt(At(agent,room),time) &
% HoldsAt(At(bed,room),time) ->
% Happens(LieOn(agent,bed),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',168).

 /*  (   holds_at(sleep5(Agent), Time),
       holds_at(actOnSleep5(Agent), Time),
       holds_at(at(Agent, Room), Time),
       holds_at(at(Bed, Room), Time)
   ->  happens(lieOn(Agent, Bed), Time)
   ).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',168).
then(if((at(sleep5(Agent), Time), at(actOnSleep5(Agent), Time), at(loc_at(Agent, Room), Time), at(loc_at(Bed, Room), Time))), happens(lieOn(Agent, Bed), Time)).

 /*  reactive_rule([ holds(sleep5(Agent),Time),
   		holds(actOnSleep5(Agent),Time),
   		holds(loc_at(Agent,Room),Time),
   		holds(loc_at(Bed,Room),Time)
   	      ],
   	      [happens(lieOn(Agent,Bed),Time)]).
 */


%; A precondition axiom states that for
%; an agent to lie on a bed,
%; the agent must be in state Sleep5,
%; the agent must act on this state, and
%; there must be a room such that
%; the agent is in the room and the bed is in the room:
% [agent,bed,time]
% Happens(LieOn(agent,bed),time) ->
% HoldsAt(Sleep5(agent),time) &
% HoldsAt(ActOnSleep5(agent),time) &
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',181).
% {room}% 
%  HoldsAt(At(agent,room),time) &
%  HoldsAt(At(bed,room),time).
 %  clausify_pnf=exists([Room],  (happens(lieOn(Agent, Bed), Time)->holds_at(sleep5(Agent), Time), holds_at(actOnSleep5(Agent), Time), holds_at(at(Agent, Room), Time), holds_at(at(Bed, Room), Time))).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',185).

 /*  not(happens(lieOn(Agent, Bed), Time)) :-
       (   not(holds_at(sleep5(Agent), Time))
       ;   not(holds_at(actOnSleep5(Agent), Time))
       ;   not(holds_at(at(Agent, Exists_Room), Time))
       ;   not(holds_at(at(Bed, Exists_Room), Time))
       ),
       some(Exists_Room, '$kolem_Fn_178'(Agent, Bed, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',185).

 /*  fix_axiom_head(Time) ->
       [ not(happens(lieOn(Agent, Bed), Time)),
          (->),
         not(lieOn(Agent, Bed))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',185).

 /*  axiom(not(lieOn(Agent, Bed)),
       [  (not(sleep5(Agent));not(actOnSleep5(Agent));not(at(Agent, Exists_Room));not(at(Bed, Exists_Room))),
         some(Exists_Room, '$kolem_Fn_178'(Agent, Bed, Time))
       ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',185).

 /*  (   (   not(sleep5(Sleep5))
       ;   not(actOnSleep5(Sleep5))
       ;   not(at(Sleep5, Tloc))
       ;   not(at(Lieon, Tloc))
       ),
       some(Tloc,
            '$kolem_Fn_178'(Sleep5, Lieon, Kolem_Fn_178))
   ->  not(lieOn(Sleep5, Lieon))
   ).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',185).
then(if(((not(sleep5(Sleep5));not(actOnSleep5(Sleep5));not(loc_at(Sleep5, Tloc));not(loc_at(Lieon, Tloc))), some(Tloc, '$kolem_Fn_178'(Sleep5, Lieon, Kolem_Fn_178)))), not(lieOn(Sleep5, Lieon))).

 /*   reactive_rule([  (not(sleep5(Sleep5));not(actOnSleep5(Sleep5));not(loc_at(Sleep5, Tloc));not(loc_at(Lieon, Tloc))),
                      some(Tloc,
                           '$kolem_Fn_178'(Sleep5,
                                           Lieon,
                                           Kolem_Fn_178))
                    ],
                    [not(lieOn(Sleep5, Lieon))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',185).

 /*  holds_at(sleep5(Agent), Time) :-
       happens(lieOn(Agent, Bed), Time),
       some(Exists_Room, '$kolem_Fn_178'(Agent, Bed, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',185).

 /*  fix_axiom_head(Time) ->
       [holds_at(sleep5(Agent), Time), ->, sleep5(Agent)].
 */

 /*  axiom(sleep5(Agent),
       [ lieOn(Agent, Bed),
         some(Exists_Room, '$kolem_Fn_178'(Agent, Bed, Time))
       ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',185).

 /*  (   lieOn(Kolem_Fn_178P_Num3_V, Lieon9),
       some(_,
            '$kolem_Fn_178'(Kolem_Fn_178P_Num3_V,
                            Lieon9,
                            Kolem_Fn_17810))
   ->  sleep5(Kolem_Fn_178P_Num3_V)
   ).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',185).
then(if((lieOn(Kolem_Fn_178P_Num3_V, Lieon9), some(_, '$kolem_Fn_178'(Kolem_Fn_178P_Num3_V, Lieon9, Kolem_Fn_17810)))), sleep5(Kolem_Fn_178P_Num3_V)).

 /*  reactive_rule([ happens(lieOn(Kolem_Fn_178P_Num3_V,Lieon9),
   			Time_From,
   			Time_Until),
   		some(_,
   		     '$kolem_Fn_178'(Kolem_Fn_178P_Num3_V,
   				     Lieon9,
   				     Kolem_Fn_17810))
   	      ],
   	      [holds(sleep5(Kolem_Fn_178P_Num3_V),Holds)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',185).

 /*  holds_at(actOnSleep5(Agent), Time) :-
       happens(lieOn(Agent, Bed), Time),
       some(Exists_Room, '$kolem_Fn_178'(Agent, Bed, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',185).

 /*  fix_axiom_head(Time) ->
       [ holds_at(actOnSleep5(Agent), Time),
          (->),
         actOnSleep5(Agent)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',185).

 /*  axiom(actOnSleep5(Agent),
       [ lieOn(Agent, Bed),
         some(Exists_Room, '$kolem_Fn_178'(Agent, Bed, Time))
       ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',185).

 /*  (   lieOn(Kolem_Fn_178P_Num3_V17, Lieon15),
       some(_,
            '$kolem_Fn_178'(Kolem_Fn_178P_Num3_V17,
                            Lieon15,
                            Kolem_Fn_17816))
   ->  actOnSleep5(Kolem_Fn_178P_Num3_V17)
   ).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',185).
then(if((lieOn(Kolem_Fn_178P_Num3_V17, Lieon15), some(_, '$kolem_Fn_178'(Kolem_Fn_178P_Num3_V17, Lieon15, Kolem_Fn_17816)))), actOnSleep5(Kolem_Fn_178P_Num3_V17)).

 /*  reactive_rule([ happens(lieOn(Kolem_Fn_178P_Num3_V17,
   			      Lieon15),
   			Time_From18,
   			Time_Until19),
   		some(_,
   		     '$kolem_Fn_178'(Kolem_Fn_178P_Num3_V17,
   				     Lieon15,
   				     Kolem_Fn_17816))
   	      ],
   	      [ holds(actOnSleep5(Kolem_Fn_178P_Num3_V17),
   		      Holds20)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',185).

 /*  holds_at(at(Agent, Exists_Room), Time) :-
       happens(lieOn(Agent, Bed), Time),
       some(Exists_Room, '$kolem_Fn_178'(Agent, Bed, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',185).

 /*  fix_axiom_head(Time) ->
       [ holds_at(at(Agent, Exists_Room), Time),
          (->),
         at(Agent, Exists_Room)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',185).

 /*  axiom(at(Agent, Exists_Room),
       [ lieOn(Agent, Bed),
         some(Exists_Room, '$kolem_Fn_178'(Agent, Bed, Time))
       ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',185).

 /*  (   lieOn(Kolem_Fn_178P_Num3_V24, Lieon22),
       some(Tloc21,
            '$kolem_Fn_178'(Kolem_Fn_178P_Num3_V24,
                            Lieon22,
                            Kolem_Fn_17823))
   ->  at(Kolem_Fn_178P_Num3_V24, Tloc21)
   ).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',185).
then(if((lieOn(Kolem_Fn_178P_Num3_V24, Lieon22), some(Tloc21, '$kolem_Fn_178'(Kolem_Fn_178P_Num3_V24, Lieon22, Kolem_Fn_17823)))), loc_at(Kolem_Fn_178P_Num3_V24, Tloc21)).

 /*  reactive_rule([ happens(lieOn(Kolem_Fn_178P_Num3_V24,
   			      Lieon22),
   			Time_From25,
   			Time_Until26),
   		some(Tloc21,
   		     '$kolem_Fn_178'(Kolem_Fn_178P_Num3_V24,
   				     Lieon22,
   				     Kolem_Fn_17823))
   	      ],
   	      [ holds(loc_at(Kolem_Fn_178P_Num3_V24,Tloc21),
   		      Holds27)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',185).

 /*  holds_at(at(Bed, Exists_Room), Time) :-
       happens(lieOn(Agent, Bed), Time),
       some(Exists_Room, '$kolem_Fn_178'(Agent, Bed, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',185).

 /*  fix_axiom_head(Time) ->
       [ holds_at(at(Bed, Exists_Room), Time),
          (->),
         at(Bed, Exists_Room)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',185).

 /*  axiom(at(Bed, Exists_Room),
       [ lieOn(Agent, Bed),
         some(Exists_Room, '$kolem_Fn_178'(Agent, Bed, Time))
       ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',185).

 /*  (   lieOn(Kolem_Fn_178P_Num3_V31, Lieon29),
       some(Tloc28,
            '$kolem_Fn_178'(Kolem_Fn_178P_Num3_V31,
                            Lieon29,
                            Kolem_Fn_17830))
   ->  at(Lieon29, Tloc28)
   ).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',185).
then(if((lieOn(Kolem_Fn_178P_Num3_V31, Lieon29), some(Tloc28, '$kolem_Fn_178'(Kolem_Fn_178P_Num3_V31, Lieon29, Kolem_Fn_17830)))), loc_at(Lieon29, Tloc28)).

 /*  reactive_rule([ happens(lieOn(Kolem_Fn_178P_Num3_V31,
   			      Lieon29),
   			Time_From32,
   			Time_Until33),
   		some(Tloc28,
   		     '$kolem_Fn_178'(Kolem_Fn_178P_Num3_V31,
   				     Lieon29,
   				     Kolem_Fn_17830))
   	      ],
   	      [holds(loc_at(Lieon29,Tloc28),Holds34)]).
 */


%; (body) posture
%; agent lies on physobj.

% event LieOn(agent,physobj)
 %  event(lieOn(agent,physobj)).
 %  event(lieOn(agent,physobj)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',191).
actions([lieOn/2]).
mpred_prop(lieOn(agent,physobj),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',194).
%; agent sits on physobj.

% event SitOn(agent,physobj)
 %  event(sitOn(agent,physobj)).
 %  event(sitOn(agent,physobj)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',194).
actions([sitOn/2]).
mpred_prop(sitOn(agent,physobj),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',197).
% [agent,physobj,time]
% Happens(SitOn(agent,physobj),time) ->
% {location}% 
%  HoldsAt(At(agent,location),time) &
%  HoldsAt(At(physobj,location),time).
 %  clausify_pnf=exists([Location],  (happens(sitOn(Agent, Physobj), Time)->holds_at(at(Agent, Location), Time), holds_at(at(Physobj, Location), Time))).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',199).

 /*  not(happens(sitOn(Agent, Physobj), Time)) :-
       (   not(holds_at(at(Agent, Exists_Location), Time))
       ;   not(holds_at(at(Physobj, Exists_Location), Time))
       ),
       some(Exists_Location,
            '$kolem_Fn_179'(Agent, Physobj, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',199).

 /*  fix_axiom_head(Time) ->
       [ not(happens(sitOn(Agent, Physobj), Time)),
          (->),
         not(sitOn(Agent, Physobj))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',199).

 /*  axiom(not(sitOn(Agent, Physobj)),
       [  (not(at(Agent, Exists_Location));not(at(Physobj, Exists_Location))),
         some(Exists_Location,
              '$kolem_Fn_179'(Agent, Physobj, Time))
       ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',199).

 /*  (   (   not(at(Kolem_Fn_179P_Num3_V, Tloc))
       ;   not(at(Siton, Tloc))
       ),
       some(Tloc,
            '$kolem_Fn_179'(Kolem_Fn_179P_Num3_V,
                            Siton,
                            Kolem_Fn_179))
   ->  not(sitOn(Kolem_Fn_179P_Num3_V, Siton))
   ).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',199).
then(if(((not(loc_at(Kolem_Fn_179P_Num3_V, Tloc));not(loc_at(Siton, Tloc))), some(Tloc, '$kolem_Fn_179'(Kolem_Fn_179P_Num3_V, Siton, Kolem_Fn_179)))), not(sitOn(Kolem_Fn_179P_Num3_V, Siton))).

 /*   reactive_rule([  (not(loc_at(Kolem_Fn_179P_Num3_V, Tloc));not(loc_at(Siton, Tloc))),
                      some(Tloc,
                           '$kolem_Fn_179'(Kolem_Fn_179P_Num3_V,
                                           Siton,
                                           Kolem_Fn_179))
                    ],
                    [not(sitOn(Kolem_Fn_179P_Num3_V, Siton))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',199).

 /*  holds_at(at(Agent, Exists_Location), Time) :-
       happens(sitOn(Agent, Physobj), Time),
       some(Exists_Location,
            '$kolem_Fn_179'(Agent, Physobj, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',199).

 /*  fix_axiom_head(Time) ->
       [ holds_at(at(Agent, Exists_Location), Time),
          (->),
         at(Agent, Exists_Location)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',199).

 /*  axiom(at(Agent, Exists_Location),
       [ sitOn(Agent, Physobj),
         some(Exists_Location,
              '$kolem_Fn_179'(Agent, Physobj, Time))
       ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',199).

 /*  (   sitOn(Kolem_Fn_179P_Num3_V12, Siton10),
       some(Tloc9,
            '$kolem_Fn_179'(Kolem_Fn_179P_Num3_V12,
                            Siton10,
                            Kolem_Fn_17911))
   ->  at(Kolem_Fn_179P_Num3_V12, Tloc9)
   ).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',199).
then(if((sitOn(Kolem_Fn_179P_Num3_V12, Siton10), some(Tloc9, '$kolem_Fn_179'(Kolem_Fn_179P_Num3_V12, Siton10, Kolem_Fn_17911)))), loc_at(Kolem_Fn_179P_Num3_V12, Tloc9)).

 /*  reactive_rule([ happens(sitOn(Kolem_Fn_179P_Num3_V12,
   			      Siton10),
   			Time_From,
   			Time_Until),
   		some(Tloc9,
   		     '$kolem_Fn_179'(Kolem_Fn_179P_Num3_V12,
   				     Siton10,
   				     Kolem_Fn_17911))
   	      ],
   	      [ holds(loc_at(Kolem_Fn_179P_Num3_V12,Tloc9),
   		      Holds)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',199).

 /*  holds_at(at(Physobj, Exists_Location), Time) :-
       happens(sitOn(Agent, Physobj), Time),
       some(Exists_Location,
            '$kolem_Fn_179'(Agent, Physobj, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',199).

 /*  fix_axiom_head(Time) ->
       [ holds_at(at(Physobj, Exists_Location), Time),
          (->),
         at(Physobj, Exists_Location)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',199).

 /*  axiom(at(Physobj, Exists_Location),
       [ sitOn(Agent, Physobj),
         some(Exists_Location,
              '$kolem_Fn_179'(Agent, Physobj, Time))
       ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',199).

 /*  (   sitOn(Kolem_Fn_179P_Num3_V19, Siton17),
       some(Tloc16,
            '$kolem_Fn_179'(Kolem_Fn_179P_Num3_V19,
                            Siton17,
                            Kolem_Fn_17918))
   ->  at(Siton17, Tloc16)
   ).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',199).
then(if((sitOn(Kolem_Fn_179P_Num3_V19, Siton17), some(Tloc16, '$kolem_Fn_179'(Kolem_Fn_179P_Num3_V19, Siton17, Kolem_Fn_17918)))), loc_at(Siton17, Tloc16)).

 /*  reactive_rule([ happens(sitOn(Kolem_Fn_179P_Num3_V19,
   			      Siton17),
   			Time_From20,
   			Time_Until21),
   		some(Tloc16,
   		     '$kolem_Fn_179'(Kolem_Fn_179P_Num3_V19,
   				     Siton17,
   				     Kolem_Fn_17918))
   	      ],
   	      [holds(loc_at(Siton17,Tloc16),Holds22)]).
 */


%; agent rises from physobj.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',204).
% event RiseFrom(agent,physobj)
 %  event(riseFrom(agent,physobj)).
 %  event(riseFrom(agent,physobj)).
actions([riseFrom/2]).
mpred_prop(riseFrom(agent,physobj),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',206).
%; agent is lying on physobj.

% fluent LyingOn(agent,physobj)
 %  fluent(lyingOn(agent,physobj)).
 %  fluent(lyingOn(agent,physobj)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',206).
fluents([lyingOn/2]).
mpred_prop(lyingOn(agent,physobj),fluent).


%; agent is sitting on physobj.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',209).
% fluent SittingOn(agent,physobj)
 %  fluent(sittingOn(agent,physobj)).
 %  fluent(sittingOn(agent,physobj)).
fluents([sittingOn/2]).
mpred_prop(sittingOn(agent,physobj),fluent).


%; agent is standing.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',211).
% fluent Standing(agent)
 %  fluent(standing(agent)).
 %  fluent(standing(agent)).
fluents([standing/1]).
mpred_prop(standing(agent),fluent).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',213).
%; agent is lying down.

% fluent Lying(agent)
 %  fluent(lying(agent)).
 %  fluent(lying(agent)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',213).
fluents([lying/1]).
mpred_prop(lying(agent),fluent).


%; agent is sitting.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',216).
% fluent Sitting(agent)
 %  fluent(sitting(agent)).
 %  fluent(sitting(agent)).
fluents([sitting/1]).
mpred_prop(sitting(agent),fluent).

% noninertial Lying
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',216).
noninertial(lying).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',218).
% noninertial Sitting
noninertial(sitting).
%; At any time, an agent is either lying, sitting, or standing:

% xor Lying, Sitting, Standing
 %  ==>xor[lying,sitting,standing].
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',220).
==>xor[lying,sitting,standing].


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',223).
% [agent,physobj,time]
% HoldsAt(LyingOn(agent,physobj),time) ->
% HoldsAt(Lying(agent),time).

 /*  holds_at(lyingOn(Agent, Physobj), Time) ->
       holds_at(lying(Agent), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',223).
then(if(at(lyingOn(Agent,Physobj),Time)),
     at(lying(Agent),Time)).

 /*  reactive_rule([holds(lyingOn(Agent,Physobj),Time)],
   	      [holds(lying(Agent),Time)]).
 */


% [agent,physobj,time]
% HoldsAt(SittingOn(agent,physobj),time) ->
% HoldsAt(Sitting(agent),time).

 /*  holds_at(sittingOn(Agent, Physobj), Time) ->
       holds_at(sitting(Agent), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',228).
then(if(at(sittingOn(Agent,Physobj),Time)),
     at(sitting(Agent),Time)).

 /*  reactive_rule([holds(sittingOn(Agent,Physobj),Time)],
   	      [holds(sitting(Agent),Time)]).
 */


%; State constraints represent that an agent can lie or sit
%; on at most one object at a time:
% [agent,physobj1,physobj2,time]
% HoldsAt(LyingOn(agent,physobj1),time) &
% HoldsAt(LyingOn(agent,physobj2),time) ->
% physobj1=physobj2.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',233).

 /*  (   holds_at(lyingOn(Agent, Physobj1), Time),
       holds_at(lyingOn(Agent, Physobj2), Time)
   ->  equals(Physobj1, Physobj2)
   ).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',233).
then(if((at(lyingOn(Agent, Physobj1), Time), at(lyingOn(Agent, Physobj2), Time))), equals(Physobj1, Physobj2)).

 /*  reactive_rule([ holds(lyingOn(Agent,Physobj1),Time),
   		holds(lyingOn(Agent,Physobj2),Time)
   	      ],
   	      [equals(Physobj1,Physobj2)]).
 */


% [agent,physobj1,physobj2,time]
% HoldsAt(SittingOn(agent,physobj1),time) &
% HoldsAt(SittingOn(agent,physobj2),time) ->
% physobj1=physobj2.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',239).

 /*  (   holds_at(sittingOn(Agent, Physobj1), Time),
       holds_at(sittingOn(Agent, Physobj2), Time)
   ->  equals(Physobj1, Physobj2)
   ).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',239).
then(if((at(sittingOn(Agent, Physobj1), Time), at(sittingOn(Agent, Physobj2), Time))), equals(Physobj1, Physobj2)).

 /*  reactive_rule([ holds(sittingOn(Agent,Physobj1),Time),
   		holds(sittingOn(Agent,Physobj2),Time)
   	      ],
   	      [equals(Physobj1,Physobj2)]).
 */


%; An effect axiom states that if an agent is standing and
%; lies on a physical object, the agent will be lying on
%; the physical object:
% [agent,physobj,time]
% HoldsAt(Standing(agent),time) ->
% Initiates(LieOn(agent,physobj),
%           LyingOn(agent,physobj),
%           time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',246).

 /*  axiom(initiates(lieOn(Agent, Physobj), lyingOn(Agent, Physobj), Time),
       [standing(Agent)]).
 */

 /*  standing(Standing) ->
       initiates(lieOn(Standing, Lieon),
                 lyingOn(Standing, Lieon),
                 Initiates).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',246).
then(if(standing(Standing)),
     initiates(lieOn(Standing,Lieon),
	       at(lyingOn(Standing,Lieon),Initiates),
	       Initiates6)).

 /*  reactive_rule([holds(standing(Standing),Holds)],
   	      [ initiates(lieOn(Standing,Lieon),
   			  at(lyingOn(Standing,Lieon),
   			     Initiates),
   			  Initiates6)
   	      ]).
 */


%; An effect axiom states that if an agent
%; lies on a physical object, the agent will no longer
%; be standing:
% [agent,physobj,time]
% Terminates(LieOn(agent,physobj),
%            Standing(agent),
%            time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',255).

 /*  axiom(terminates(lieOn(Agent, Physobj), standing(Agent), Time),
       []).
 */

 /*  terminates(lieOn(Standing,Lieon),
   	   standing(Standing),
   	   Terminates).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',255).
terminates(lieOn(Standing,Lieon),standing(Standing)).

 /*  terminated(happens(lieOn(Standing,Lieon),
   		   Time_From,
   		   Time_Until),
   	   standing(Standing),
   	   []).
 */


%; An effect axiom states that if an agent is standing and
%; sits on a physical object, the agent will be sitting on
%; the physical object:
% [agent,physobj,time]
% HoldsAt(Standing(agent),time) ->
% Initiates(SitOn(agent,physobj),
%           SittingOn(agent,physobj),
%           time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',263).

 /*  axiom(initiates(sitOn(Agent, Physobj), sittingOn(Agent, Physobj), Time),
       [standing(Agent)]).
 */

 /*  standing(Standing) ->
       initiates(sitOn(Standing, Siton),
                 sittingOn(Standing, Siton),
                 Initiates).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',263).
then(if(standing(Standing)),
     initiates(sitOn(Standing,Siton),
	       at(sittingOn(Standing,Siton),
		  Initiates),
	       Initiates6)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',263).

 /*  reactive_rule([holds(standing(Standing),Holds)],
   	      [ initiates(sitOn(Standing,Siton),
   			  at(sittingOn(Standing,Siton),
   			     Initiates),
   			  Initiates6)
   	      ]).
 */


%; An effect axiom states that if an agent
%; sits on a physical object, the agent will no longer
%; be standing:
% [agent,physobj,time]
% Terminates(SitOn(agent,physobj),
%            Standing(agent),
%            time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',272).

 /*  axiom(terminates(sitOn(Agent, Physobj), standing(Agent), Time),
       []).
 */

 /*  terminates(sitOn(Standing,Siton),
   	   standing(Standing),
   	   Terminates).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',272).
terminates(sitOn(Standing,Siton),standing(Standing)).

 /*  terminated(happens(sitOn(Standing,Siton),
   		   Time_From,
   		   Time_Until),
   	   standing(Standing),
   	   []).
 */


%; An effect axiom states that if an agent
%; is sitting or lying on a physical object and
%; the agent rises from the physical object,
%; the agent will be standing:
% [agent,physobj,time]
% (HoldsAt(SittingOn(agent,physobj),time) |
%  HoldsAt(LyingOn(agent,physobj),time)) ->
% Initiates(RiseFrom(agent,physobj),
%           Standing(agent),
%           time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',281).

 /*  axiom(initiates(riseFrom(Agent, Physobj), standing(Agent), Time),
       [  (sittingOn(Agent, Physobj);lyingOn(Agent, Physobj))
       ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',281).

 /*  sittingOn(Standing, Sittingon);lyingOn(Standing, Sittingon) ->
       initiates(riseFrom(Standing, Sittingon),
                 standing(Standing),
                 Initiates).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',281).
 then(if((sittingOn(Standing, Sittingon);lyingOn(Standing, Sittingon))),
        initiates(riseFrom(Standing, Sittingon),
                  at(standing(Standing), Initiates),
                  Initiates6)).

 /*   reactive_rule([  (sittingOn(Standing, Sittingon);lyingOn(Standing, Sittingon))
                    ],
                    [ initiates(riseFrom(Standing, Sittingon),
                                at(standing(Standing), Initiates),
                                Initiates6)
                    ]).
 */


%; An effect axiom states that if an agent is sitting on
%; a physical object and the agent rises from the physical
%; object, the agent will no longer be sitting on the
%; physical object:
% [agent,physobj,time]
% HoldsAt(SittingOn(agent,physobj),time) ->
% Terminates(RiseFrom(agent,physobj),
%            SittingOn(agent,physobj),
%            time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',292).

 /*  axiom(terminates(riseFrom(Agent, Physobj), sittingOn(Agent, Physobj), Time),
       [sittingOn(Agent, Physobj)]).
 */

 /*  sittingOn(A, Sittingon) ->
       terminates(riseFrom(A, Sittingon),
                  sittingOn(A, Sittingon),
                  Terminates).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',292).
then(if(sittingOn(A,Sittingon)),
     terminates(riseFrom(A,Sittingon),
		at(sittingOn(A,Sittingon),Terminates),
		Terminates5)).

 /*  reactive_rule([holds(sittingOn(A,Sittingon),Holds)],
   	      [ terminates(riseFrom(A,Sittingon),
   			   at(sittingOn(A,Sittingon),
   			      Terminates),
   			   Terminates5)
   	      ]).
 */


%; An effect axiom states that if an agent is lying on
%; a physical object and the agent rises from the physical
%; object, the agent will no longer be lying on the
%; physical object:
% [agent,physobj,time]
% HoldsAt(LyingOn(agent,physobj),time) ->
% Terminates(RiseFrom(agent,physobj),
%            LyingOn(agent,physobj),
%            time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',302).

 /*  axiom(terminates(riseFrom(Agent, Physobj), lyingOn(Agent, Physobj), Time),
       [lyingOn(Agent, Physobj)]).
 */

 /*  lyingOn(A, Lyingon) ->
       terminates(riseFrom(A, Lyingon),
                  lyingOn(A, Lyingon),
                  Terminates).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',302).
then(if(lyingOn(A,Lyingon)),
     terminates(riseFrom(A,Lyingon),
		at(lyingOn(A,Lyingon),Terminates),
		Terminates5)).

 /*  reactive_rule([holds(lyingOn(A,Lyingon),Holds)],
   	      [ terminates(riseFrom(A,Lyingon),
   			   at(lyingOn(A,Lyingon),
   			      Terminates),
   			   Terminates5)
   	      ]).
 */


%; dressing
%; agent gets undressed.

% event GetDressed(agent)
 %  event(getDressed(agent)).
 %  event(getDressed(agent)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',310).
actions([getDressed/1]).
mpred_prop(getDressed(agent),event).


%; agent gets dressed.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',313).
% event GetUndressed(agent)
 %  event(getUndressed(agent)).
 %  event(getUndressed(agent)).
actions([getUndressed/1]).
mpred_prop(getUndressed(agent),event).


%; agent is dressed.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',315).
% fluent Dressed(agent)
 %  fluent(dressed(agent)).
 %  fluent(dressed(agent)).
fluents([dressed/1]).
mpred_prop(dressed(agent),fluent).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',317).
%; Effect axioms deal with getting dressed and undressed:
% [agent,time]
 % Initiates(GetDressed(agent),Dressed(agent),time).

 /*  axiom(initiates(getDressed(Agent), dressed(Agent), Time),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',317).

 /*  initiates(getDressed(Getdressed),
   	  dressed(Getdressed),
   	  Initiates).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',317).
initiates(getDressed(Getdressed),dressed(Getdressed)).

 /*  initiated(happens(getDressed(Getdressed),
   		  Time_From,
   		  Time_Until),
   	  dressed(Getdressed),
   	  []).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',319).
% [agent,time]
 % Terminates(GetUndressed(agent),Dressed(agent),time).

 /*  axiom(terminates(getUndressed(Agent), dressed(Agent), Time),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',319).

 /*  terminates(getUndressed(Getundressed),
   	   dressed(Getundressed),
   	   Terminates).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',319).
terminates(getUndressed(Getundressed),
	   dressed(Getundressed)).

 /*  terminated(happens(getUndressed(Getundressed),
   		   Time_From,
   		   Time_Until),
   	   dressed(Getundressed),
   	   []).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',321).
%; End of file.
% translate: ending  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e.lps 
