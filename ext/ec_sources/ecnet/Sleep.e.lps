:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',107).
% translate: unskipped  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e.lps 
:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(lps).
% translate: begining  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e.lps 
% Thu, 08 Oct 2020 21:37:08 GMT File: <stream>(0x55894c1dde00)%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; The Sleep representation deals with the activity of sleeping and
%; body posture.
%; It is similar to the finite automaton representation of sleep
%; used in ThoughtTreasure \fullcite[chap. 7]{Mueller:1998}.
%;
%; @book{Mueller:1998,
%;   author = "Erik T. Mueller",
%;   year = "1998",
%;   title = "Natural Language Processing with \uppercase{T}hought\uppercase{T}reasure",
%;   address = "New York",
%;   publisher = "Signiform",
%; }
%;
%; sleep
%; agent wakes up.

% event WakeUp(agent)
% event(
%    wakeUp(agent)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',27).
actions([wakeUp/1]).
% mpred_prop(
%    wakeUp(agent), 
%    event).
mpred_prop(wakeUp(agent),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',30).
%; agent gets tired.

% event GetTired(agent)
% event(
%    getTired(agent)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',30).
actions([getTired/1]).
% mpred_prop(
%    getTired(agent), 
%    event).
mpred_prop(getTired(agent),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',33).
%; agent falls asleep.

% event FallAsleep(agent)
% event(
%    fallAsleep(agent)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',33).
actions([fallAsleep/1]).
% mpred_prop(
%    fallAsleep(agent), 
%    event).
mpred_prop(fallAsleep(agent),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',36).
%; agent is asleep.

% fluent Sleep0(agent)
% fluent(
%    sleep0(agent)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',36).
fluents([sleep0/1]).
% mpred_prop(
%    sleep0(agent), 
%    fluent).
mpred_prop(sleep0(agent),fluent).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',36).
%; agent is awake and in bed.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',39).
% fluent Sleep1(agent)
% fluent(
%    sleep1(agent)).
fluents([sleep1/1]).
% mpred_prop(
%    sleep1(agent), 
%    fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',39).
mpred_prop(sleep1(agent),fluent).


%; agent is awake, out of bed, and undressed.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',41).
% fluent Sleep2(agent)
% fluent(
%    sleep2(agent)).
fluents([sleep2/1]).
% mpred_prop(
%    sleep2(agent), 
%    fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',41).
mpred_prop(sleep2(agent),fluent).


%; agent is awake and dressed.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',43).
% fluent Sleep3(agent)
% fluent(
%    sleep3(agent)).
fluents([sleep3/1]).
% mpred_prop(
%    sleep3(agent), 
%    fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',43).
mpred_prop(sleep3(agent),fluent).


%; agent is tired and dressed.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',45).
% fluent Sleep4(agent)
% fluent(
%    sleep4(agent)).
fluents([sleep4/1]).
% mpred_prop(
%    sleep4(agent), 
%    fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',45).
mpred_prop(sleep4(agent),fluent).


%; agent is tired and undressed.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',47).
% fluent Sleep5(agent)
% fluent(
%    sleep5(agent)).
fluents([sleep5/1]).
% mpred_prop(
%    sleep5(agent), 
%    fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',47).
mpred_prop(sleep5(agent),fluent).


%; agent is in bed, waiting to fall asleep.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',49).
% fluent Sleep6(agent)
% fluent(
%    sleep6(agent)).
fluents([sleep6/1]).
% mpred_prop(
%    sleep6(agent), 
%    fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',49).
mpred_prop(sleep6(agent),fluent).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',51).
%; At any time, an agent is in one of seven sleep states:

% xor Sleep0, Sleep1, Sleep2, Sleep3, Sleep4, Sleep5, Sleep6
% xor(
%    ==>, 
%    [ sleep0, 
%      sleep1, sleep1, sleep2, sleep3, sleep4, 
%                             sleep5, 
%                             sleep6 ]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',51).
==>xor[sleep0,sleep1,sleep2,sleep3,sleep4,sleep5,sleep6].
%; constraints
%; agent is asleep.

% fluent Asleep(agent)
% fluent(
%    asleep(agent)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',56).
fluents([asleep/1]).
% mpred_prop(
%    asleep(agent), 
%    fluent).
mpred_prop(asleep(agent),fluent).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',56).
%; agent is awake.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',59).
% fluent Awake(agent)
% fluent(
%    awake(agent)).
fluents([awake/1]).
% mpred_prop(
%    awake(agent), 
%    fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',59).
mpred_prop(awake(agent),fluent).

% noninertial Asleep
% noninertial(asleep).
noninertial(asleep).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',61).
% noninertial Awake
% noninertial(awake).
noninertial(awake).
%; Sleep0 indicates that the agent is asleep:
% [agent,time]
 % HoldsAt(Asleep(agent),time) <-> HoldsAt(Sleep0(agent),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',63).

 /*  holds_at(asleep(Agent), Time) <->
       holds_at(sleep0(Agent), Time).
 */
% '->'(
%    asleep(Agent), 
%    sleep0(Agent)).
sleep0(Agent)if asleep(Agent).
 %  l_int(holds(sleep0(Agent),Time_At),[asleep(Agent)]).
 %  "% =================================".
% '->'(
%    not(
%       sleep0(Agent)), 
%    not(
%       asleep(Agent))).
if not sleep0(Agent)then not asleep(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',63).

 /*  reactive_rule([holds(not(sleep0(Agent)),Time_At3)],
   	      [not(asleep(Agent))]).
 */
 %  "% =================================".
% '->'(
%    sleep0(Agent), 
%    asleep(Agent)).
if sleep0(Agent)then asleep(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',63).

 /*  reactive_rule([holds(sleep0(Agent),Time_At4)],
   	      [asleep(Agent)]).
 */
 %  "% =================================".
% '->'(
%    not(
%       asleep(Agent)), 
%    not(
%       sleep0(Agent))).
not sleep0(Agent)if not asleep(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',63).

 /*  l_int(holds(not(sleep0(Agent)),Time_At5),
         [not(asleep(Agent))]).
 */
 %  "% =================================".


%; In all other sleep states, the agent is awake:
% [agent,time]
% HoldsAt(Awake(agent),time) <->
% HoldsAt(Sleep1(agent),time) |
% HoldsAt(Sleep2(agent),time) |
% HoldsAt(Sleep3(agent),time) |
% HoldsAt(Sleep4(agent),time) |
% HoldsAt(Sleep5(agent),time) |
% HoldsAt(Sleep6(agent),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',67).

 /*  holds_at(awake(Agent), Time) <->
       (   holds_at(sleep1(Agent), Time)
       ;   holds_at(sleep2(Agent), Time)
       ;   holds_at(sleep3(Agent), Time)
       ;   holds_at(sleep4(Agent), Time)
       ;   holds_at(sleep5(Agent), Time)
       ;   holds_at(sleep6(Agent), Time)
       ).
 */
% '->'(
%    ','(
%       not(
%          sleep2(Agent)), 
%       ','(
%          not(
%             sleep3(Agent)), 
%          ','(
%             not(
%                sleep4(Agent)), 
%             ','(
%                not(
%                   sleep5(Agent)), 
%                ','(
%                   not(
%                      sleep6(Agent)), 
%                   awake(Agent)))))), 
%    sleep1(Agent)).
sleep1(Agent)if not sleep2(Agent), not sleep3(Agent), not sleep4(Agent), not sleep5(Agent), not sleep6(Agent), awake(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',67).

 /*  l_int(holds(sleep1(Agent),Time_At),
         [ holds(not(sleep2(Agent)),Time_At),
   	holds(not(sleep3(Agent)),Time_At),
   	holds(not(sleep4(Agent)),Time_At),
   	holds(not(sleep5(Agent)),Time_At),
   	holds(not(sleep6(Agent)),Time_At),
   	awake(Agent)
         ]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       not(
%          sleep3(Agent)), 
%       ','(
%          not(
%             sleep4(Agent)), 
%          ','(
%             not(
%                sleep5(Agent)), 
%             ','(
%                not(
%                   sleep6(Agent)), 
%                ','(
%                   not(
%                      sleep1(Agent)), 
%                   awake(Agent)))))), 
%    sleep2(Agent)).
sleep2(Agent)if not sleep3(Agent), not sleep4(Agent), not sleep5(Agent), not sleep6(Agent), not sleep1(Agent), awake(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',67).

 /*  l_int(holds(sleep2(Agent),Time_At3),
         [ holds(not(sleep3(Agent)),Time_At3),
   	holds(not(sleep4(Agent)),Time_At3),
   	holds(not(sleep5(Agent)),Time_At3),
   	holds(not(sleep6(Agent)),Time_At3),
   	holds(not(sleep1(Agent)),Time_At3),
   	awake(Agent)
         ]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       not(
%          sleep4(Agent)), 
%       ','(
%          not(
%             sleep5(Agent)), 
%          ','(
%             not(
%                sleep6(Agent)), 
%             ','(
%                not(
%                   sleep2(Agent)), 
%                ','(
%                   not(
%                      sleep1(Agent)), 
%                   awake(Agent)))))), 
%    sleep3(Agent)).
sleep3(Agent)if not sleep4(Agent), not sleep5(Agent), not sleep6(Agent), not sleep2(Agent), not sleep1(Agent), awake(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',67).

 /*  l_int(holds(sleep3(Agent),Time_At4),
         [ holds(not(sleep4(Agent)),Time_At4),
   	holds(not(sleep5(Agent)),Time_At4),
   	holds(not(sleep6(Agent)),Time_At4),
   	holds(not(sleep2(Agent)),Time_At4),
   	holds(not(sleep1(Agent)),Time_At4),
   	awake(Agent)
         ]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       not(
%          sleep5(Agent)), 
%       ','(
%          not(
%             sleep6(Agent)), 
%          ','(
%             not(
%                sleep3(Agent)), 
%             ','(
%                not(
%                   sleep2(Agent)), 
%                ','(
%                   not(
%                      sleep1(Agent)), 
%                   awake(Agent)))))), 
%    sleep4(Agent)).
sleep4(Agent)if not sleep5(Agent), not sleep6(Agent), not sleep3(Agent), not sleep2(Agent), not sleep1(Agent), awake(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',67).

 /*  l_int(holds(sleep4(Agent),Time_At5),
         [ holds(not(sleep5(Agent)),Time_At5),
   	holds(not(sleep6(Agent)),Time_At5),
   	holds(not(sleep3(Agent)),Time_At5),
   	holds(not(sleep2(Agent)),Time_At5),
   	holds(not(sleep1(Agent)),Time_At5),
   	awake(Agent)
         ]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       not(
%          sleep6(Agent)), 
%       ','(
%          not(
%             sleep4(Agent)), 
%          ','(
%             not(
%                sleep3(Agent)), 
%             ','(
%                not(
%                   sleep2(Agent)), 
%                ','(
%                   not(
%                      sleep1(Agent)), 
%                   awake(Agent)))))), 
%    sleep5(Agent)).
sleep5(Agent)if not sleep6(Agent), not sleep4(Agent), not sleep3(Agent), not sleep2(Agent), not sleep1(Agent), awake(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',67).

 /*  l_int(holds(sleep5(Agent),Time_At6),
         [ holds(not(sleep6(Agent)),Time_At6),
   	holds(not(sleep4(Agent)),Time_At6),
   	holds(not(sleep3(Agent)),Time_At6),
   	holds(not(sleep2(Agent)),Time_At6),
   	holds(not(sleep1(Agent)),Time_At6),
   	awake(Agent)
         ]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       not(
%          sleep5(Agent)), 
%       ','(
%          not(
%             sleep4(Agent)), 
%          ','(
%             not(
%                sleep3(Agent)), 
%             ','(
%                not(
%                   sleep2(Agent)), 
%                ','(
%                   not(
%                      sleep1(Agent)), 
%                   awake(Agent)))))), 
%    sleep6(Agent)).
sleep6(Agent)if not sleep5(Agent), not sleep4(Agent), not sleep3(Agent), not sleep2(Agent), not sleep1(Agent), awake(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',67).

 /*  l_int(holds(sleep6(Agent),Time_At7),
         [ holds(not(sleep5(Agent)),Time_At7),
   	holds(not(sleep4(Agent)),Time_At7),
   	holds(not(sleep3(Agent)),Time_At7),
   	holds(not(sleep2(Agent)),Time_At7),
   	holds(not(sleep1(Agent)),Time_At7),
   	awake(Agent)
         ]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       not(
%          sleep1(Agent)), 
%       ','(
%          not(
%             sleep2(Agent)), 
%          ','(
%             not(
%                sleep3(Agent)), 
%             ','(
%                not(
%                   sleep4(Agent)), 
%                ','(
%                   not(
%                      sleep5(Agent)), 
%                   not(
%                      sleep6(Agent))))))), 
%    not(
%       awake(Agent))).
if not sleep1(Agent), not sleep2(Agent), not sleep3(Agent), not sleep4(Agent), not sleep5(Agent), not sleep6(Agent)then not awake(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',67).

 /*  reactive_rule([ holds(not(sleep1(Agent)),Time_At8),
   		holds(not(sleep2(Agent)),Time_At8),
   		holds(not(sleep3(Agent)),Time_At8),
   		holds(not(sleep4(Agent)),Time_At8),
   		holds(not(sleep5(Agent)),Time_At8),
   		holds(not(sleep6(Agent)),Time_At8)
   	      ],
   	      [not(awake(Agent))]).
 */
 %  "% =================================".
% '->'(
%    ';'(
%       sleep1(Agent), 
%       ';'(
%          sleep2(Agent), 
%          ';'(
%             sleep3(Agent), 
%             ';'(
%                sleep4(Agent), 
%                ';'(
%                   sleep5(Agent), 
%                   sleep6(Agent)))))), 
%    awake(Agent)).
if sleep1(Agent);sleep2(Agent);sleep3(Agent);sleep4(Agent);sleep5(Agent);sleep6(Agent)then awake(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',67).

 /*   reactive_rule([  (sleep1(Agent);sleep2(Agent);sleep3(Agent);sleep4(Agent);sleep5(Agent);sleep6(Agent))
                    ],
                    [awake(Agent)]).
 */
 %  "% =================================".
% '->'(
%    not(
%       awake(Agent)), 
%    not(
%       sleep1(Agent))).
not sleep1(Agent)if not awake(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',67).

 /*  l_int(holds(not(sleep1(Agent)),Time_At9),
         [not(awake(Agent))]).
 */
 %  "% =================================".
% '->'(
%    not(
%       awake(Agent)), 
%    not(
%       sleep2(Agent))).
not sleep2(Agent)if not awake(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',67).

 /*  l_int(holds(not(sleep2(Agent)),Time_At10),
         [not(awake(Agent))]).
 */
 %  "% =================================".
% '->'(
%    not(
%       awake(Agent)), 
%    not(
%       sleep3(Agent))).
not sleep3(Agent)if not awake(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',67).

 /*  l_int(holds(not(sleep3(Agent)),Time_At11),
         [not(awake(Agent))]).
 */
 %  "% =================================".
% '->'(
%    not(
%       awake(Agent)), 
%    not(
%       sleep4(Agent))).
not sleep4(Agent)if not awake(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',67).

 /*  l_int(holds(not(sleep4(Agent)),Time_At12),
         [not(awake(Agent))]).
 */
 %  "% =================================".
% '->'(
%    not(
%       awake(Agent)), 
%    not(
%       sleep5(Agent))).
not sleep5(Agent)if not awake(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',67).

 /*  l_int(holds(not(sleep5(Agent)),Time_At13),
         [not(awake(Agent))]).
 */
 %  "% =================================".
% '->'(
%    not(
%       awake(Agent)), 
%    not(
%       sleep6(Agent))).
not sleep6(Agent)if not awake(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',67).

 /*  l_int(holds(not(sleep6(Agent)),Time_At14),
         [not(awake(Agent))]).
 */
 %  "% =================================".


%; A number of axioms are used to specify the transitions of
%; a finite automaton.
%;--
%; Waking up causes a transition from Sleep0
%; to Sleep1:
% [agent,time]
 
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',82).
% Terminates(WakeUp(agent),Sleep0(agent),time).
% terminates(
%    wakeUp(Agent), 
%    sleep0(Agent), 
%    Time).
wakeUp(Agent)terminates sleep0(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',82).

 /*  terminated(happens(wakeUp(Agent),
   		   Time_From,
   		   Time_Until),
   	   sleep0(Agent),
   	   []).
 */
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',84).
% [agent,time]
 % Initiates(WakeUp(agent),Sleep1(agent),time).
% initiates(
%    wakeUp(Agent), 
%    sleep1(Agent), 
%    Time).
wakeUp(Agent)initiates sleep1(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',84).

 /*  initiated(happens(wakeUp(Agent),Time_From,Time_Until),
   	  sleep1(Agent),
   	  []).
 */
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',86).
% [agent,time]
 % Happens(WakeUp(agent),time) -> HoldsAt(Sleep0(agent),time).
% '->'(
%    metreqs(
%       wakeUp(Agent)), 
%    requires(
%       wakeUp(Agent), 
%       When_Time)).
if wakeUp(Agent)then requires(wakeUp(Agent), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',86).

 /*  reactive_rule([ happens(wakeUp(Agent),
   			Time_From,
   			Time_Until)
   	      ],
   	      [requires(wakeUp(Agent),When_Time)]).
 */
 %  "% =================================".
% '->'(
%    sleep0(Agent), 
%    metreqs(
%       wakeUp(Agent))).
wakeUp(Agent)if sleep0(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',86).

 /*  l_events(happens(wakeUp(Agent),Time_From5,Time_From5),
   	 [holds(sleep0(Agent),Time_From5)]).
 */
 %  "% =================================".
% '->'(
%    not(
%       sleep0(Agent)), 
%    not(
%       wakeUp(Agent))).
if not sleep0(Agent)then not wakeUp(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',86).

 /*  reactive_rule([holds(not(sleep0(Agent)),Time_At)],
   	      [not(wakeUp(Agent))]).
 */
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',88).
%;--
%; Getting out of bed causes a transition from Sleep1
%; to Sleep2:
% [agent,bed,time]
 
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',92).
% Terminates(RiseFrom(agent,bed),Sleep1(agent),time).
% terminates(
%    riseFrom(Agent,Bed), 
%    sleep1(Agent), 
%    Time).
riseFrom(Agent, Bed)terminates sleep1(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',92).

 /*  terminated(happens(riseFrom(Agent,Bed),
   		   Time_From,
   		   Time_Until),
   	   sleep1(Agent),
   	   []).
 */
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',94).
% [agent,bed,time]
 % Initiates(RiseFrom(agent,bed),Sleep2(agent),time).
% initiates(
%    riseFrom(Agent,Bed), 
%    sleep2(Agent), 
%    Time).
riseFrom(Agent, Bed)initiates sleep2(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',94).

 /*  initiated(happens(riseFrom(Agent,Bed),
   		  Time_From,
   		  Time_Until),
   	  sleep2(Agent),
   	  []).
 */
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',96).
% [agent,bed,time]
% Happens(RiseFrom(agent,bed),time) -> HoldsAt(Sleep1(agent),time).
% '->'(
%    metreqs(
%       riseFrom(Agent,Bed)), 
%    requires(
%       riseFrom(Agent,Bed), 
%       When_Time)).
if riseFrom(Agent, Bed)then requires(riseFrom(Agent, Bed), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',96).

 /*  reactive_rule([ happens(riseFrom(Agent,Bed),
   			Time_From,
   			Time_Until)
   	      ],
   	      [ requires(riseFrom(Agent,Bed),
   			 When_Time)
   	      ]).
 */
 %  "% =================================".
% '->'(
%    sleep1(Agent), 
%    metreqs(
%       riseFrom(Agent,Bed))).
riseFrom(Agent, Bed)if sleep1(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',96).

 /*  l_events(happens(riseFrom(Agent,Bed),
   		 Time_From6,
   		 Time_From6),
   	 [holds(sleep1(Agent),Time_From6)]).
 */
 %  "% =================================".
% '->'(
%    not(
%       sleep1(Agent)), 
%    not(
%       riseFrom(Agent,Bed))).
if not sleep1(Agent)then not riseFrom(Agent, Bed).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',96).

 /*  reactive_rule([holds(not(sleep1(Agent)),Time_At)],
   	      [not(riseFrom(Agent,Bed))]).
 */
 %  "% =================================".


%;--
%; Getting dressed causes a transition from Sleep2
%; to Sleep3, the normal state of awakeness:
% [agent,time]
 
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',103).
% Terminates(GetDressed(agent),Sleep2(agent),time).
% terminates(
%    getDressed(Agent), 
%    sleep2(Agent), 
%    Time).
getDressed(Agent)terminates sleep2(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',103).

 /*  terminated(happens(getDressed(Agent),
   		   Time_From,
   		   Time_Until),
   	   sleep2(Agent),
   	   []).
 */
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',105).
% [agent,time]
 % Initiates(GetDressed(agent),Sleep3(agent),time).
% initiates(
%    getDressed(Agent), 
%    sleep3(Agent), 
%    Time).
getDressed(Agent)initiates sleep3(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',105).

 /*  initiated(happens(getDressed(Agent),
   		  Time_From,
   		  Time_Until),
   	  sleep3(Agent),
   	  []).
 */
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',107).
% [agent,time]
 % Happens(GetDressed(agent),time) -> HoldsAt(Sleep2(agent),time).
% '->'(
%    metreqs(
%       getDressed(Agent)), 
%    requires(
%       getDressed(Agent), 
%       When_Time)).
if getDressed(Agent)then requires(getDressed(Agent), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',107).

 /*  reactive_rule([ happens(getDressed(Agent),
   			Time_From,
   			Time_Until)
   	      ],
   	      [requires(getDressed(Agent),When_Time)]).
 */
 %  "% =================================".
% '->'(
%    sleep2(Agent), 
%    metreqs(
%       getDressed(Agent))).
getDressed(Agent)if sleep2(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',107).

 /*  l_events(happens(getDressed(Agent),
   		 Time_From5,
   		 Time_From5),
   	 [holds(sleep2(Agent),Time_From5)]).
 */
 %  "% =================================".
% '->'(
%    not(
%       sleep2(Agent)), 
%    not(
%       getDressed(Agent))).
if not sleep2(Agent)then not getDressed(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',107).

 /*  reactive_rule([holds(not(sleep2(Agent)),Time_At)],
   	      [not(getDressed(Agent))]).
 */
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',109).
%;--
%; Getting tired causes a transition from Sleep3
%; to Sleep4:
% [agent,time]
 
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',113).
% Terminates(GetTired(agent),Sleep3(agent),time).
% terminates(
%    getTired(Agent), 
%    sleep3(Agent), 
%    Time).
getTired(Agent)terminates sleep3(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',113).

 /*  terminated(happens(getTired(Agent),
   		   Time_From,
   		   Time_Until),
   	   sleep3(Agent),
   	   []).
 */
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',115).
% [agent,time]
 % Initiates(GetTired(agent),Sleep4(agent),time).
% initiates(
%    getTired(Agent), 
%    sleep4(Agent), 
%    Time).
getTired(Agent)initiates sleep4(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',115).

 /*  initiated(happens(getTired(Agent),
   		  Time_From,
   		  Time_Until),
   	  sleep4(Agent),
   	  []).
 */
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',117).
% [agent,time]
 % Happens(GetTired(agent),time) -> HoldsAt(Sleep3(agent),time).
% '->'(
%    metreqs(
%       getTired(Agent)), 
%    requires(
%       getTired(Agent), 
%       When_Time)).
if getTired(Agent)then requires(getTired(Agent), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',117).

 /*  reactive_rule([ happens(getTired(Agent),
   			Time_From,
   			Time_Until)
   	      ],
   	      [requires(getTired(Agent),When_Time)]).
 */
 %  "% =================================".
% '->'(
%    sleep3(Agent), 
%    metreqs(
%       getTired(Agent))).
getTired(Agent)if sleep3(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',117).

 /*  l_events(happens(getTired(Agent),
   		 Time_From5,
   		 Time_From5),
   	 [holds(sleep3(Agent),Time_From5)]).
 */
 %  "% =================================".
% '->'(
%    not(
%       sleep3(Agent)), 
%    not(
%       getTired(Agent))).
if not sleep3(Agent)then not getTired(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',117).

 /*  reactive_rule([holds(not(sleep3(Agent)),Time_At)],
   	      [not(getTired(Agent))]).
 */
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',119).
%;--
%; Getting undressed causes a transition from Sleep4
%; to Sleep5:
% [agent,time]
 
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',123).
% Terminates(GetUndressed(agent),Sleep4(agent),time).
% terminates(
%    getUndressed(Agent), 
%    sleep4(Agent), 
%    Time).
getUndressed(Agent)terminates sleep4(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',123).

 /*  terminated(happens(getUndressed(Agent),
   		   Time_From,
   		   Time_Until),
   	   sleep4(Agent),
   	   []).
 */
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',125).
% [agent,time]
 % Initiates(GetUndressed(agent),Sleep5(agent),time).
% initiates(
%    getUndressed(Agent), 
%    sleep5(Agent), 
%    Time).
getUndressed(Agent)initiates sleep5(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',125).

 /*  initiated(happens(getUndressed(Agent),
   		  Time_From,
   		  Time_Until),
   	  sleep5(Agent),
   	  []).
 */
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',127).
% [agent,time]
 % Happens(GetUndressed(agent),time) -> HoldsAt(Sleep4(agent),time).
% '->'(
%    metreqs(
%       getUndressed(Agent)), 
%    requires(
%       getUndressed(Agent), 
%       When_Time)).
if getUndressed(Agent)then requires(getUndressed(Agent), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',127).

 /*  reactive_rule([ happens(getUndressed(Agent),
   			Time_From,
   			Time_Until)
   	      ],
   	      [requires(getUndressed(Agent),When_Time)]).
 */
 %  "% =================================".
% '->'(
%    sleep4(Agent), 
%    metreqs(
%       getUndressed(Agent))).
getUndressed(Agent)if sleep4(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',127).

 /*  l_events(happens(getUndressed(Agent),
   		 Time_From5,
   		 Time_From5),
   	 [holds(sleep4(Agent),Time_From5)]).
 */
 %  "% =================================".
% '->'(
%    not(
%       sleep4(Agent)), 
%    not(
%       getUndressed(Agent))).
if not sleep4(Agent)then not getUndressed(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',127).

 /*  reactive_rule([holds(not(sleep4(Agent)),Time_At)],
   	      [not(getUndressed(Agent))]).
 */
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',129).
%;--
%; Lying on a bed causes a transition from Sleep5
%; to Sleep6:
% [agent,bed,time]
 
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',133).
% Terminates(LieOn(agent,bed),Sleep5(agent),time).
% terminates(
%    lieOn(Agent,Bed), 
%    sleep5(Agent), 
%    Time).
lieOn(Agent, Bed)terminates sleep5(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',133).

 /*  terminated(happens(lieOn(Agent,Bed),
   		   Time_From,
   		   Time_Until),
   	   sleep5(Agent),
   	   []).
 */
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',135).
% [agent,bed,time]
 % Initiates(LieOn(agent,bed),Sleep6(agent),time).
% initiates(
%    lieOn(Agent,Bed), 
%    sleep6(Agent), 
%    Time).
lieOn(Agent, Bed)initiates sleep6(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',135).

 /*  initiated(happens(lieOn(Agent,Bed),
   		  Time_From,
   		  Time_Until),
   	  sleep6(Agent),
   	  []).
 */
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',137).
% [agent,bed,time]
 % Happens(LieOn(agent,bed),time) -> HoldsAt(Sleep5(agent),time).
% '->'(
%    metreqs(
%       lieOn(Agent,Bed)), 
%    requires(
%       lieOn(Agent,Bed), 
%       When_Time)).
if lieOn(Agent, Bed)then requires(lieOn(Agent, Bed), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',137).

 /*  reactive_rule([ happens(lieOn(Agent,Bed),
   			Time_From,
   			Time_Until)
   	      ],
   	      [requires(lieOn(Agent,Bed),When_Time)]).
 */
 %  "% =================================".
% '->'(
%    sleep5(Agent), 
%    metreqs(
%       lieOn(Agent,Bed))).
lieOn(Agent, Bed)if sleep5(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',137).

 /*  l_events(happens(lieOn(Agent,Bed),
   		 Time_From6,
   		 Time_From6),
   	 [holds(sleep5(Agent),Time_From6)]).
 */
 %  "% =================================".
% '->'(
%    not(
%       sleep5(Agent)), 
%    not(
%       lieOn(Agent,Bed))).
if not sleep5(Agent)then not lieOn(Agent, Bed).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',137).

 /*  reactive_rule([holds(not(sleep5(Agent)),Time_At)],
   	      [not(lieOn(Agent,Bed))]).
 */
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',139).
%;--
%; Falling asleep causes a transition from Sleep6
%; to Sleep0:
% [agent,time]
 
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',143).
% Terminates(FallAsleep(agent),Sleep6(agent),time).
% terminates(
%    fallAsleep(Agent), 
%    sleep6(Agent), 
%    Time).
fallAsleep(Agent)terminates sleep6(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',143).

 /*  terminated(happens(fallAsleep(Agent),
   		   Time_From,
   		   Time_Until),
   	   sleep6(Agent),
   	   []).
 */
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',145).
% [agent,time]
 % Initiates(FallAsleep(agent),Sleep0(agent),time).
% initiates(
%    fallAsleep(Agent), 
%    sleep0(Agent), 
%    Time).
fallAsleep(Agent)initiates sleep0(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',145).

 /*  initiated(happens(fallAsleep(Agent),
   		  Time_From,
   		  Time_Until),
   	  sleep0(Agent),
   	  []).
 */
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',147).
% [agent,time]
 % Happens(FallAsleep(agent),time) -> HoldsAt(Sleep6(agent),time).
% '->'(
%    metreqs(
%       fallAsleep(Agent)), 
%    requires(
%       fallAsleep(Agent), 
%       When_Time)).
if fallAsleep(Agent)then requires(fallAsleep(Agent), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',147).

 /*  reactive_rule([ happens(fallAsleep(Agent),
   			Time_From,
   			Time_Until)
   	      ],
   	      [requires(fallAsleep(Agent),When_Time)]).
 */
 %  "% =================================".
% '->'(
%    sleep6(Agent), 
%    metreqs(
%       fallAsleep(Agent))).
fallAsleep(Agent)if sleep6(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',147).

 /*  l_events(happens(fallAsleep(Agent),
   		 Time_From5,
   		 Time_From5),
   	 [holds(sleep6(Agent),Time_From5)]).
 */
 %  "% =================================".
% '->'(
%    not(
%       sleep6(Agent)), 
%    not(
%       fallAsleep(Agent))).
if not sleep6(Agent)then not fallAsleep(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',147).

 /*  reactive_rule([holds(not(sleep6(Agent)),Time_At)],
   	      [not(fallAsleep(Agent))]).
 */
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',149).
%;--
%; agent acts on being in state Sleep5.

% fluent ActOnSleep5(agent)
% fluent(
%    actOnSleep5(agent)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',151).
fluents([actOnSleep5/1]).
% mpred_prop(
%    actOnSleep5(agent), 
%    fluent).
mpred_prop(actOnSleep5(agent),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',153).
% noninertial ActOnSleep5
% noninertial(actOnSleep5).
noninertial(actOnSleep5).
%; We reduce the number of models by asserting that
%; an agent only acts on being in state Sleep5 while in
%; that state:
% [agent,time]
% !HoldsAt(Sleep5(agent),time) ->
% !HoldsAt(ActOnSleep5(agent),time).
% '->'(
%    not(
%       sleep5(Agent)), 
%    not(
%       actOnSleep5(Agent))).
if not sleep5(Agent)then not actOnSleep5(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',158).

 /*  reactive_rule([holds(not(sleep5(Agent)),Time_At)],
   	      [not(actOnSleep5(Agent))]).
 */
 %  "% =================================".
% '->'(
%    not(
%       not(
%          actOnSleep5(Agent))), 
%    not(
%       not(
%          sleep5(Agent)))).
not not sleep5(Agent)if not not actOnSleep5(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',158).

 /*  l_int(holds(not([holds(not(sleep5(Agent)),Time_At3)]),
   	    Time_At3),
         [not(not(actOnSleep5(Agent)))]).
 */
 %  "% =================================".


%; Undressed is like IntentionToPlay
%; ActOnSleep5 is like ActOnIntentionToPlay
%; A trigger axiom states that if an agent is in state Sleep5,
%; the agent acts on this state, the agent is in a room, and
%; a bed is at the room, the agent lies on the bed:
% [agent,room,bed,time]
% HoldsAt(Sleep5(agent),time) &
% HoldsAt(ActOnSleep5(agent),time) &
% HoldsAt(At(agent,room),time) &
% HoldsAt(At(bed,room),time) ->
% Happens(LieOn(agent,bed),time).
% '->'(
%    ','(
%       sleep5(Agent), 
%       ','(
%          actOnSleep5(Agent), 
%          ','(
%             at(Agent,Room), 
%             at(Bed,Room)))), 
%    lieOn(Agent,Bed)).
lieOn(Agent, Bed)if sleep5(Agent), actOnSleep5(Agent), loc_at(Agent, Room), loc_at(Bed, Room).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',168).

 /*  l_events(happens(lieOn(Agent,Bed),
   		 Time_From,
   		 Time_From),
   	 [ holds(sleep5(Agent),Time_From),
   	   actOnSleep5(Agent),
   	   loc_at(Agent,Room),
   	   loc_at(Bed,Room)
   	 ]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       actOnSleep5(Agent), 
%       ','(
%          at(Agent,Room), 
%          ','(
%             at(Bed,Room), 
%             not(
%                lieOn(Agent,Bed))))), 
%    not(
%       sleep5(Agent))).
not sleep5(Agent)if actOnSleep5(Agent), loc_at(Agent, Room), loc_at(Bed, Room), not lieOn(Agent, Bed).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',168).

 /*  l_int(holds(not(sleep5(Agent)),Time_At),
         [ actOnSleep5(Agent),
   	loc_at(Agent,Room),
   	loc_at(Bed,Room),
   	not(lieOn(Agent,Bed))
         ]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       at(Agent,Room), 
%       ','(
%          at(Bed,Room), 
%          ','(
%             sleep5(Agent), 
%             not(
%                lieOn(Agent,Bed))))), 
%    not(
%       actOnSleep5(Agent))).
if loc_at(Agent, Room), loc_at(Bed, Room), sleep5(Agent), not lieOn(Agent, Bed)then not actOnSleep5(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',168).

 /*  reactive_rule([ loc_at(Agent,Room),
   		loc_at(Bed,Room),
   		holds(sleep5(Agent),Time_At6),
   		not(lieOn(Agent,Bed))
   	      ],
   	      [not(actOnSleep5(Agent))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       at(Bed,Room), 
%       ','(
%          actOnSleep5(Agent), 
%          ','(
%             sleep5(Agent), 
%             not(
%                lieOn(Agent,Bed))))), 
%    not(
%       at(Agent,Room))).
if loc_at(Bed, Room), actOnSleep5(Agent), sleep5(Agent), not lieOn(Agent, Bed)then not loc_at(Agent, Room).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',168).

 /*  reactive_rule([ loc_at(Bed,Room),
   		actOnSleep5(Agent),
   		holds(sleep5(Agent),Time_At7),
   		not(lieOn(Agent,Bed))
   	      ],
   	      [not(loc_at(Agent,Room))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       at(Agent,Room), 
%       ','(
%          actOnSleep5(Agent), 
%          ','(
%             sleep5(Agent), 
%             not(
%                lieOn(Agent,Bed))))), 
%    not(
%       at(Bed,Room))).
if loc_at(Agent, Room), actOnSleep5(Agent), sleep5(Agent), not lieOn(Agent, Bed)then not loc_at(Bed, Room).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',168).

 /*  reactive_rule([ loc_at(Agent,Room),
   		actOnSleep5(Agent),
   		holds(sleep5(Agent),Time_At8),
   		not(lieOn(Agent,Bed))
   	      ],
   	      [not(loc_at(Bed,Room))]).
 */
 %  "% =================================".


%; A precondition axiom states that for
%; an agent to lie on a bed,
%; the agent must be in state Sleep5,
%; the agent must act on this state, and
%; there must be a room such that
%; the agent is in the room and the bed is in the room:
% [agent,bed,time]
% Happens(LieOn(agent,bed),time) ->
% HoldsAt(Sleep5(agent),time) &
% HoldsAt(ActOnSleep5(agent),time) &
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',181).
% {room}% 
%  HoldsAt(At(agent,room),time) &
%  HoldsAt(At(bed,room),time).
% '->'(
%    ','(
%       ';'(
%          not(
%             sleep5(Agent)), 
%          ';'(
%             not(
%                actOnSleep5(Agent)), 
%             ';'(
%                not(
%                   at(Agent,Exists_Room)), 
%                not(
%                   at(Bed,Exists_Room))))), 
%       some(
%          Exists_Room, 
%          '$kolem_Fn_732'(Agent,Bed,Time))), 
%    not(
%       lieOn(Agent,Bed))).
if (not sleep5(Agent);not actOnSleep5(Agent);not loc_at(Agent, Exists_Room);not loc_at(Bed, Exists_Room)), some(Exists_Room, '$kolem_Fn_732'(Agent, Bed, Time))then not lieOn(Agent, Bed).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',185).

 /*   reactive_rule([  (not(sleep5(Agent));not(actOnSleep5(Agent));not(loc_at(Agent, Exists_Room));not(loc_at(Bed, Exists_Room))),
                      some(Exists_Room,
                           '$kolem_Fn_732'(Agent, Bed, Time))
                    ],
                    [not(lieOn(Agent, Bed))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       lieOn(Agent,Bed), 
%       some(
%          Exists_Room, 
%          '$kolem_Fn_732'(Agent,Bed,Time))), 
%    sleep5(Agent)).
sleep5(Agent)if lieOn(Agent, Bed), some(Exists_Room, '$kolem_Fn_732'(Agent, Bed, Time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',185).

 /*  l_int(holds(sleep5(Agent),Time_At),
         [ happens(lieOn(Agent,Bed),
   		Time_At,
   		Time_At),
   	some(Exists_Room,
   	     '$kolem_Fn_732'(Agent,Bed,Time))
         ]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       lieOn(Agent,Bed), 
%       some(
%          Exists_Room, 
%          '$kolem_Fn_732'(Agent,Bed,Time))), 
%    actOnSleep5(Agent)).
if lieOn(Agent, Bed), some(Exists_Room, '$kolem_Fn_732'(Agent, Bed, Time))then actOnSleep5(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',185).

 /*  reactive_rule([ happens(lieOn(Agent,Bed),
   			Time_From,
   			Time_Until),
   		some(Exists_Room,
   		     '$kolem_Fn_732'(Agent,Bed,Time))
   	      ],
   	      [actOnSleep5(Agent)]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       lieOn(Agent,Bed), 
%       some(
%          Exists_Room, 
%          '$kolem_Fn_732'(Agent,Bed,Time))), 
%    at(Agent,Exists_Room)).
if lieOn(Agent, Bed), some(Exists_Room, '$kolem_Fn_732'(Agent, Bed, Time))then loc_at(Agent, Exists_Room).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',185).

 /*  reactive_rule([ happens(lieOn(Agent,Bed),
   			Time_From8,
   			Time_Until9),
   		some(Exists_Room,
   		     '$kolem_Fn_732'(Agent,Bed,Time))
   	      ],
   	      [loc_at(Agent,Exists_Room)]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       lieOn(Agent,Bed), 
%       some(
%          Exists_Room, 
%          '$kolem_Fn_732'(Agent,Bed,Time))), 
%    at(Bed,Exists_Room)).
if lieOn(Agent, Bed), some(Exists_Room, '$kolem_Fn_732'(Agent, Bed, Time))then loc_at(Bed, Exists_Room).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',185).

 /*  reactive_rule([ happens(lieOn(Agent,Bed),
   			Time_From10,
   			Time_Until11),
   		some(Exists_Room,
   		     '$kolem_Fn_732'(Agent,Bed,Time))
   	      ],
   	      [loc_at(Bed,Exists_Room)]).
 */
 %  "% =================================".


%; (body) posture
%; agent lies on physobj.

% event LieOn(agent,physobj)
% event(
%    lieOn(agent,physobj)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',191).
actions([lieOn/2]).
% mpred_prop(
%    lieOn(agent,physobj), 
%    event).
mpred_prop(lieOn(agent,physobj),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',194).
%; agent sits on physobj.

% event SitOn(agent,physobj)
% event(
%    sitOn(agent,physobj)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',194).
actions([sitOn/2]).
% mpred_prop(
%    sitOn(agent,physobj), 
%    event).
mpred_prop(sitOn(agent,physobj),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',197).
% [agent,physobj,time]
% Happens(SitOn(agent,physobj),time) ->
% {location}% 
%  HoldsAt(At(agent,location),time) &
%  HoldsAt(At(physobj,location),time).
% '->'(
%    ','(
%       ';'(
%          not(
%             at(Agent,Exists_Location)), 
%          not(
%             at(Physobj,Exists_Location))), 
%       some(
%          Exists_Location, 
%          '$kolem_Fn_733'(Agent,Physobj,Time))), 
%    not(
%       sitOn(Agent,Physobj))).
if (not loc_at(Agent, Exists_Location);not loc_at(Physobj, Exists_Location)), some(Exists_Location, '$kolem_Fn_733'(Agent, Physobj, Time))then not sitOn(Agent, Physobj).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',199).

 /*   reactive_rule([  (not(loc_at(Agent, Exists_Location));not(loc_at(Physobj, Exists_Location))),
                      some(Exists_Location,
                           '$kolem_Fn_733'(Agent, Physobj, Time))
                    ],
                    [not(sitOn(Agent, Physobj))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       sitOn(Agent,Physobj), 
%       some(
%          Exists_Location, 
%          '$kolem_Fn_733'(Agent,Physobj,Time))), 
%    at(Agent,Exists_Location)).
if sitOn(Agent, Physobj), some(Exists_Location, '$kolem_Fn_733'(Agent, Physobj, Time))then loc_at(Agent, Exists_Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',199).

 /*  reactive_rule([ happens(sitOn(Agent,Physobj),
   			Time_From,
   			Time_Until),
   		some(Exists_Location,
   		     '$kolem_Fn_733'(Agent,
   				     Physobj,
   				     Time))
   	      ],
   	      [loc_at(Agent,Exists_Location)]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       sitOn(Agent,Physobj), 
%       some(
%          Exists_Location, 
%          '$kolem_Fn_733'(Agent,Physobj,Time))), 
%    at(Physobj,Exists_Location)).
if sitOn(Agent, Physobj), some(Exists_Location, '$kolem_Fn_733'(Agent, Physobj, Time))then loc_at(Physobj, Exists_Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',199).

 /*  reactive_rule([ happens(sitOn(Agent,Physobj),
   			Time_From7,
   			Time_Until8),
   		some(Exists_Location,
   		     '$kolem_Fn_733'(Agent,
   				     Physobj,
   				     Time))
   	      ],
   	      [loc_at(Physobj,Exists_Location)]).
 */
 %  "% =================================".


%; agent rises from physobj.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',204).
% event RiseFrom(agent,physobj)
% event(
%    riseFrom(agent,physobj)).
actions([riseFrom/2]).
% mpred_prop(
%    riseFrom(agent,physobj), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',204).
mpred_prop(riseFrom(agent,physobj),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',206).
%; agent is lying on physobj.

% fluent LyingOn(agent,physobj)
% fluent(
%    lyingOn(agent,physobj)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',206).
fluents([lyingOn/2]).
% mpred_prop(
%    lyingOn(agent,physobj), 
%    fluent).
mpred_prop(lyingOn(agent,physobj),fluent).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',206).
%; agent is sitting on physobj.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',209).
% fluent SittingOn(agent,physobj)
% fluent(
%    sittingOn(agent,physobj)).
fluents([sittingOn/2]).
% mpred_prop(
%    sittingOn(agent,physobj), 
%    fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',209).
mpred_prop(sittingOn(agent,physobj),fluent).


%; agent is standing.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',211).
% fluent Standing(agent)
% fluent(
%    standing(agent)).
fluents([standing/1]).
% mpred_prop(
%    standing(agent), 
%    fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',211).
mpred_prop(standing(agent),fluent).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',213).
%; agent is lying down.

% fluent Lying(agent)
% fluent(
%    lying(agent)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',213).
fluents([lying/1]).
% mpred_prop(
%    lying(agent), 
%    fluent).
mpred_prop(lying(agent),fluent).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',213).
%; agent is sitting.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',216).
% fluent Sitting(agent)
% fluent(
%    sitting(agent)).
fluents([sitting/1]).
% mpred_prop(
%    sitting(agent), 
%    fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',216).
mpred_prop(sitting(agent),fluent).

% noninertial Lying
% noninertial(lying).
noninertial(lying).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',218).
% noninertial Sitting
% noninertial(sitting).
noninertial(sitting).
%; At any time, an agent is either lying, sitting, or standing:

% xor Lying, Sitting, Standing
% xor(
%    ==>, 
%    [ lying, 
%      sitting, 
%      standing ]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',220).
==>xor[lying,sitting,standing].


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',223).
% [agent,physobj,time]
% HoldsAt(LyingOn(agent,physobj),time) ->
% HoldsAt(Lying(agent),time).
% '->'(
%    lyingOn(Agent,Physobj), 
%    lying(Agent)).
if lyingOn(Agent, Physobj)then lying(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',223).

 /*  reactive_rule([lyingOn(Agent,Physobj)],
   	      [lying(Agent)]).
 */
 %  "% =================================".
% '->'(
%    not(
%       lying(Agent)), 
%    not(
%       lyingOn(Agent,Physobj))).
if not lying(Agent)then not lyingOn(Agent, Physobj).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',223).

 /*  reactive_rule([not(lying(Agent))],
   	      [not(lyingOn(Agent,Physobj))]).
 */
 %  "% =================================".


% [agent,physobj,time]
% HoldsAt(SittingOn(agent,physobj),time) ->
% HoldsAt(Sitting(agent),time).
% '->'(
%    sittingOn(Agent,Physobj), 
%    sitting(Agent)).
if sittingOn(Agent, Physobj)then sitting(Agent).

 /*  reactive_rule([sittingOn(Agent,Physobj)],
   	      [sitting(Agent)]).
 */
 %  "% =================================".
% '->'(
%    not(
%       sitting(Agent)), 
%    not(
%       sittingOn(Agent,Physobj))).
if not sitting(Agent)then not sittingOn(Agent, Physobj).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',228).

 /*  reactive_rule([not(sitting(Agent))],
   	      [not(sittingOn(Agent,Physobj))]).
 */
 %  "% =================================".


%; State constraints represent that an agent can lie or sit
%; on at most one object at a time:
% [agent,physobj1,physobj2,time]
% HoldsAt(LyingOn(agent,physobj1),time) &
% HoldsAt(LyingOn(agent,physobj2),time) ->
% physobj1=physobj2.
% '->'(
%    ','(
%       lyingOn(Agent,Physobj2), 
%       not(
%          equals(Physobj1,Physobj2))), 
%    not(
%       lyingOn(Agent,Physobj1))).
if lyingOn(Agent, Physobj2), not equals(Physobj1, Physobj2)then not lyingOn(Agent, Physobj1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',233).

 /*  reactive_rule([ lyingOn(Agent,Physobj2),
   		not(equals(Physobj1,Physobj2))
   	      ],
   	      [not(lyingOn(Agent,Physobj1))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       lyingOn(Agent,Physobj1), 
%       not(
%          equals(Physobj2,Physobj1))), 
%    not(
%       lyingOn(Agent,Physobj2))).
if lyingOn(Agent, Physobj1), not equals(Physobj2, Physobj1)then not lyingOn(Agent, Physobj2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',233).

 /*  reactive_rule([ lyingOn(Agent,Physobj1),
   		not(equals(Physobj2,Physobj1))
   	      ],
   	      [not(lyingOn(Agent,Physobj2))]).
 */
 %  "% =================================".


% [agent,physobj1,physobj2,time]
% HoldsAt(SittingOn(agent,physobj1),time) &
% HoldsAt(SittingOn(agent,physobj2),time) ->
% physobj1=physobj2.
% '->'(
%    ','(
%       sittingOn(Agent,Physobj2), 
%       not(
%          equals(Physobj1,Physobj2))), 
%    not(
%       sittingOn(Agent,Physobj1))).
if sittingOn(Agent, Physobj2), not equals(Physobj1, Physobj2)then not sittingOn(Agent, Physobj1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',239).

 /*  reactive_rule([ sittingOn(Agent,Physobj2),
   		not(equals(Physobj1,Physobj2))
   	      ],
   	      [not(sittingOn(Agent,Physobj1))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       sittingOn(Agent,Physobj1), 
%       not(
%          equals(Physobj2,Physobj1))), 
%    not(
%       sittingOn(Agent,Physobj2))).
if sittingOn(Agent, Physobj1), not equals(Physobj2, Physobj1)then not sittingOn(Agent, Physobj2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',239).

 /*  reactive_rule([ sittingOn(Agent,Physobj1),
   		not(equals(Physobj2,Physobj1))
   	      ],
   	      [not(sittingOn(Agent,Physobj2))]).
 */
 %  "% =================================".


%; An effect axiom states that if an agent is standing and
%; lies on a physical object, the agent will be lying on
%; the physical object:
% [agent,physobj,time]
% HoldsAt(Standing(agent),time) ->
% Initiates(LieOn(agent,physobj),
%           LyingOn(agent,physobj),
%           time).
% '->'(
%    standing(Agent), 
%    initiates(
%       lieOn(Agent,Physobj), 
%       lyingOn(Agent,Physobj), 
%       Time)).
if standing(Agent)then initiates(lieOn(Agent, Physobj), lyingOn(Agent, Physobj)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',246).

 /*  reactive_rule([holds(standing(Agent),Time_At)],
   	      [ initiates(lieOn(Agent,Physobj),
   			  at(lyingOn(Agent,Physobj),
   			     Time),
   			  Initiates)
   	      ]).
 */
 %  "% =================================".


%; An effect axiom states that if an agent
%; lies on a physical object, the agent will no longer
%; be standing:
% [agent,physobj,time]
% Terminates(LieOn(agent,physobj),
%            Standing(agent),
%            time).
% terminates(
%    lieOn(Agent,Physobj), 
%    standing(Agent), 
%    Time).
lieOn(Agent, Physobj)terminates standing(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',255).

 /*  terminated(happens(lieOn(Agent,Physobj),
   		   Time_From,
   		   Time_Until),
   	   standing(Agent),
   	   []).
 */
 %  "% =================================".


%; An effect axiom states that if an agent is standing and
%; sits on a physical object, the agent will be sitting on
%; the physical object:
% [agent,physobj,time]
% HoldsAt(Standing(agent),time) ->
% Initiates(SitOn(agent,physobj),
%           SittingOn(agent,physobj),
%           time).
% '->'(
%    standing(Agent), 
%    initiates(
%       sitOn(Agent,Physobj), 
%       sittingOn(Agent,Physobj), 
%       Time)).
if standing(Agent)then initiates(sitOn(Agent, Physobj), sittingOn(Agent, Physobj)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',263).

 /*  reactive_rule([holds(standing(Agent),Time_At)],
   	      [ initiates(sitOn(Agent,Physobj),
   			  at(sittingOn(Agent,Physobj),
   			     Time),
   			  Initiates)
   	      ]).
 */
 %  "% =================================".


%; An effect axiom states that if an agent
%; sits on a physical object, the agent will no longer
%; be standing:
% [agent,physobj,time]
% Terminates(SitOn(agent,physobj),
%            Standing(agent),
%            time).
% terminates(
%    sitOn(Agent,Physobj), 
%    standing(Agent), 
%    Time).
sitOn(Agent, Physobj)terminates standing(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',272).

 /*  terminated(happens(sitOn(Agent,Physobj),
   		   Time_From,
   		   Time_Until),
   	   standing(Agent),
   	   []).
 */
 %  "% =================================".


%; An effect axiom states that if an agent
%; is sitting or lying on a physical object and
%; the agent rises from the physical object,
%; the agent will be standing:
% [agent,physobj,time]
% (HoldsAt(SittingOn(agent,physobj),time) |
%  HoldsAt(LyingOn(agent,physobj),time)) ->
% Initiates(RiseFrom(agent,physobj),
%           Standing(agent),
%           time).
% '->'(
%    ';'(
%       sittingOn(Agent,Physobj), 
%       lyingOn(Agent,Physobj)), 
%    initiates(
%       riseFrom(Agent,Physobj), 
%       standing(Agent), 
%       Time)).
if sittingOn(Agent, Physobj);lyingOn(Agent, Physobj)then initiates(riseFrom(Agent, Physobj), standing(Agent)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',281).

 /*   reactive_rule([  (sittingOn(Agent, Physobj);lyingOn(Agent, Physobj))
                    ],
                    [ initiates(riseFrom(Agent, Physobj),
                                at(standing(Agent), Time),
                                Initiates)
                    ]).
 */
 %  "% =================================".


%; An effect axiom states that if an agent is sitting on
%; a physical object and the agent rises from the physical
%; object, the agent will no longer be sitting on the
%; physical object:
% [agent,physobj,time]
% HoldsAt(SittingOn(agent,physobj),time) ->
% Terminates(RiseFrom(agent,physobj),
%            SittingOn(agent,physobj),
%            time).
% '->'(
%    sittingOn(Agent,Physobj), 
%    terminates(
%       riseFrom(Agent,Physobj), 
%       sittingOn(Agent,Physobj), 
%       Time)).
if sittingOn(Agent, Physobj)then terminates(riseFrom(Agent, Physobj), sittingOn(Agent, Physobj)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',292).

 /*  reactive_rule([sittingOn(Agent,Physobj)],
   	      [ terminates(riseFrom(Agent,Physobj),
   			   at(sittingOn(Agent,Physobj),
   			      Time),
   			   Terminates)
   	      ]).
 */
 %  "% =================================".


%; An effect axiom states that if an agent is lying on
%; a physical object and the agent rises from the physical
%; object, the agent will no longer be lying on the
%; physical object:
% [agent,physobj,time]
% HoldsAt(LyingOn(agent,physobj),time) ->
% Terminates(RiseFrom(agent,physobj),
%            LyingOn(agent,physobj),
%            time).
% '->'(
%    lyingOn(Agent,Physobj), 
%    terminates(
%       riseFrom(Agent,Physobj), 
%       lyingOn(Agent,Physobj), 
%       Time)).
if lyingOn(Agent, Physobj)then terminates(riseFrom(Agent, Physobj), lyingOn(Agent, Physobj)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',302).

 /*  reactive_rule([lyingOn(Agent,Physobj)],
   	      [ terminates(riseFrom(Agent,Physobj),
   			   at(lyingOn(Agent,Physobj),
   			      Time),
   			   Terminates)
   	      ]).
 */
 %  "% =================================".


%; dressing
%; agent gets undressed.

% event GetDressed(agent)
% event(
%    getDressed(agent)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',310).
actions([getDressed/1]).
% mpred_prop(
%    getDressed(agent), 
%    event).
mpred_prop(getDressed(agent),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',310).
%; agent gets dressed.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',313).
% event GetUndressed(agent)
% event(
%    getUndressed(agent)).
actions([getUndressed/1]).
% mpred_prop(
%    getUndressed(agent), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',313).
mpred_prop(getUndressed(agent),event).


%; agent is dressed.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',315).
% fluent Dressed(agent)
% fluent(
%    dressed(agent)).
fluents([dressed/1]).
% mpred_prop(
%    dressed(agent), 
%    fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',315).
mpred_prop(dressed(agent),fluent).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',317).
%; Effect axioms deal with getting dressed and undressed:
% [agent,time]
 % Initiates(GetDressed(agent),Dressed(agent),time).
% initiates(
%    getDressed(Agent), 
%    dressed(Agent), 
%    Time).
getDressed(Agent)initiates dressed(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',317).

 /*  initiated(happens(getDressed(Agent),
   		  Time_From,
   		  Time_Until),
   	  dressed(Agent),
   	  []).
 */
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',319).
% [agent,time]
 % Terminates(GetUndressed(agent),Dressed(agent),time).
% terminates(
%    getUndressed(Agent), 
%    dressed(Agent), 
%    Time).
getUndressed(Agent)terminates dressed(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',319).

 /*  terminated(happens(getUndressed(Agent),
   		   Time_From,
   		   Time_Until),
   	   dressed(Agent),
   	   []).
 */
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',321).
%; End of file.
% translate: ending  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e.lps 
