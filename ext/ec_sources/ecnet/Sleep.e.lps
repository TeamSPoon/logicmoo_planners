:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/ShootingAttack.e',107).
% translate: unskipped  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e.lps 
:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(lps).
% translate: begining  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e.lps 
% Thu, 08 Oct 2020 19:06:55 GMT File: <stream>(0x5600a3ab6a00)%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; The Sleep representation deals with the activity of sleeping and
%; body posture.
%; It is similar to the finite automaton representation of sleep
%; used in ThoughtTreasure \fullcite[chap. 7]{Mueller:1998}.
%;
%; @book{Mueller:1998,
%;   author = "Erik T. Mueller",
%;   year = "1998",
%;   title = "Natural Language Processing with \uppercase{T}hought\uppercase{T}reasure",
%;   address = "New York",
%;   publisher = "Signiform",
%; }
%;
%; sleep
%; agent wakes up.

% event WakeUp(agent)
 %  blue=event(wakeUp(agent)).
 %  event(wakeUp(agent)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',27).
actions([wakeUp/1]).
 %  actions([wakeUp/1]).
mpred_prop(wakeUp(agent),event).
 %  mpred_prop(wakeUp(agent),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',30).
%; agent gets tired.

% event GetTired(agent)
 %  blue=event(getTired(agent)).
 %  event(getTired(agent)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',30).
actions([getTired/1]).
 %  actions([getTired/1]).
mpred_prop(getTired(agent),event).
 %  mpred_prop(getTired(agent),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',33).
%; agent falls asleep.

% event FallAsleep(agent)
 %  blue=event(fallAsleep(agent)).
 %  event(fallAsleep(agent)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',33).
actions([fallAsleep/1]).
 %  actions([fallAsleep/1]).
mpred_prop(fallAsleep(agent),event).
 %  mpred_prop(fallAsleep(agent),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',36).
%; agent is asleep.

% fluent Sleep0(agent)
 %  blue=fluent(sleep0(agent)).
 %  fluent(sleep0(agent)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',36).
fluents([sleep0/1]).
 %  fluents([sleep0/1]).
mpred_prop(sleep0(agent),fluent).
 %  mpred_prop(sleep0(agent),fluent).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',36).
%; agent is awake and in bed.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',39).
% fluent Sleep1(agent)
 %  blue=fluent(sleep1(agent)).
 %  fluent(sleep1(agent)).
fluents([sleep1/1]).
 %  fluents([sleep1/1]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',39).
mpred_prop(sleep1(agent),fluent).
 %  mpred_prop(sleep1(agent),fluent).


%; agent is awake, out of bed, and undressed.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',41).
% fluent Sleep2(agent)
 %  blue=fluent(sleep2(agent)).
 %  fluent(sleep2(agent)).
fluents([sleep2/1]).
 %  fluents([sleep2/1]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',41).
mpred_prop(sleep2(agent),fluent).
 %  mpred_prop(sleep2(agent),fluent).


%; agent is awake and dressed.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',43).
% fluent Sleep3(agent)
 %  blue=fluent(sleep3(agent)).
 %  fluent(sleep3(agent)).
fluents([sleep3/1]).
 %  fluents([sleep3/1]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',43).
mpred_prop(sleep3(agent),fluent).
 %  mpred_prop(sleep3(agent),fluent).


%; agent is tired and dressed.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',45).
% fluent Sleep4(agent)
 %  blue=fluent(sleep4(agent)).
 %  fluent(sleep4(agent)).
fluents([sleep4/1]).
 %  fluents([sleep4/1]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',45).
mpred_prop(sleep4(agent),fluent).
 %  mpred_prop(sleep4(agent),fluent).


%; agent is tired and undressed.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',47).
% fluent Sleep5(agent)
 %  blue=fluent(sleep5(agent)).
 %  fluent(sleep5(agent)).
fluents([sleep5/1]).
 %  fluents([sleep5/1]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',47).
mpred_prop(sleep5(agent),fluent).
 %  mpred_prop(sleep5(agent),fluent).


%; agent is in bed, waiting to fall asleep.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',49).
% fluent Sleep6(agent)
 %  blue=fluent(sleep6(agent)).
 %  fluent(sleep6(agent)).
fluents([sleep6/1]).
 %  fluents([sleep6/1]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',49).
mpred_prop(sleep6(agent),fluent).
 %  mpred_prop(sleep6(agent),fluent).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',51).
%; At any time, an agent is in one of seven sleep states:

% xor Sleep0, Sleep1, Sleep2, Sleep3, Sleep4, Sleep5, Sleep6
 %  red = ==>xor[sleep0,sleep1,sleep2,sleep3,sleep4,sleep5,sleep6].
==>xor[sleep0,sleep1,sleep2,sleep3,sleep4,sleep5,sleep6].
 %  ==>xor[sleep0,sleep1,sleep2,sleep3,sleep4,sleep5,sleep6].
%; constraints
%; agent is asleep.

% fluent Asleep(agent)
 %  blue=fluent(asleep(agent)).
 %  fluent(asleep(agent)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',56).
fluents([asleep/1]).
 %  fluents([asleep/1]).
mpred_prop(asleep(agent),fluent).
 %  mpred_prop(asleep(agent),fluent).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',56).
%; agent is awake.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',59).
% fluent Awake(agent)
 %  blue=fluent(awake(agent)).
 %  fluent(awake(agent)).
fluents([awake/1]).
 %  fluents([awake/1]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',59).
mpred_prop(awake(agent),fluent).
 %  mpred_prop(awake(agent),fluent).

% noninertial Asleep
noninertial(asleep).
 %  noninertial(asleep).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',61).
% noninertial Awake
noninertial(awake).
 %  noninertial(awake).
%; Sleep0 indicates that the agent is asleep:
% [agent,time]
 % HoldsAt(Asleep(agent),time) <-> HoldsAt(Sleep0(agent),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',63).

 /*  holds_at(asleep(Agent), Time) <->
       holds_at(sleep0(Agent), Time).
 */
 %  clausify_pnf=(holds_at(asleep(Agent), Time)->holds_at(sleep0(Agent), Time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',63).

 /*  holds_at(sleep0(Agent), Time) :-
       holds_at(asleep(Agent), Time).
 */

 /*  fix_axiom_head(Time) ->
       [holds_at(sleep0(Agent), Time), ->, sleep0(Agent)].
 */
 %  pl=axiom(sleep0(Agent),[asleep(Agent)]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',63).

 /*  asleep(Agent) ->
       sleep0(Agent).
 */
if asleep(Agent)then sleep0(Agent).
 %  reactive_rule([asleep(Agent)],[sleep0(Agent)]).
 %  reactive_rule([asleep(Agent)],[sleep0(Agent)]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',63).

 /*  not(holds_at(asleep(Agent), Time)) :-
       not(holds_at(sleep0(Agent), Time)).
 */
 %  pl=axiom(not(asleep(Agent)),[not(sleep0(Agent))]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',63).

 /*  not(sleep0(Agent)) ->
       not(asleep(Agent)).
 */
if not sleep0(Agent)then not asleep(Agent).
 %  reactive_rule([not(sleep0(Agent))],[not(asleep(Agent))]).
 %  reactive_rule([not(sleep0(Agent))],[not(asleep(Agent))]).
 %  clausify_pnf=(holds_at(sleep0(Agent), Time)->holds_at(asleep(Agent), Time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',63).

 /*  holds_at(asleep(Agent), Time) :-
       holds_at(sleep0(Agent), Time).
 */

 /*  fix_axiom_head(Time) ->
       [holds_at(asleep(Agent), Time), ->, asleep(Agent)].
 */
 %  pl=axiom(asleep(Agent),[sleep0(Agent)]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',63).

 /*  sleep0(Agent) ->
       asleep(Agent).
 */
if sleep0(Agent)then asleep(Agent).
 %  reactive_rule([sleep0(Agent)],[asleep(Agent)]).
 %  reactive_rule([sleep0(Agent)],[asleep(Agent)]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',63).

 /*  not(holds_at(sleep0(Agent), Time)) :-
       not(holds_at(asleep(Agent), Time)).
 */
 %  pl=axiom(not(sleep0(Agent)),[not(asleep(Agent))]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',63).

 /*  not(asleep(Agent)) ->
       not(sleep0(Agent)).
 */
if not asleep(Agent)then not sleep0(Agent).
 %  reactive_rule([not(asleep(Agent))],[not(sleep0(Agent))]).
 %  reactive_rule([not(asleep(Agent))],[not(sleep0(Agent))]).


%; In all other sleep states, the agent is awake:
% [agent,time]
% HoldsAt(Awake(agent),time) <->
% HoldsAt(Sleep1(agent),time) |
% HoldsAt(Sleep2(agent),time) |
% HoldsAt(Sleep3(agent),time) |
% HoldsAt(Sleep4(agent),time) |
% HoldsAt(Sleep5(agent),time) |
% HoldsAt(Sleep6(agent),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',67).

 /*  holds_at(awake(Agent), Time) <->
       (   holds_at(sleep1(Agent), Time)
       ;   holds_at(sleep2(Agent), Time)
       ;   holds_at(sleep3(Agent), Time)
       ;   holds_at(sleep4(Agent), Time)
       ;   holds_at(sleep5(Agent), Time)
       ;   holds_at(sleep6(Agent), Time)
       ).
 */
 %  clausify_pnf=(holds_at(awake(Agent), Time)->holds_at(sleep1(Agent), Time);holds_at(sleep2(Agent), Time);holds_at(sleep3(Agent), Time);holds_at(sleep4(Agent), Time);holds_at(sleep5(Agent), Time);holds_at(sleep6(Agent), Time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',67).

 /*  holds_at(sleep1(Agent), Time) :-
       not(holds_at(sleep2(Agent), Time)),
       not(holds_at(sleep3(Agent), Time)),
       not(holds_at(sleep4(Agent), Time)),
       not(holds_at(sleep5(Agent), Time)),
       not(holds_at(sleep6(Agent), Time)),
       holds_at(awake(Agent), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',67).

 /*  fix_axiom_head(Time) ->
       [holds_at(sleep1(Agent), Time), ->, sleep1(Agent)].
 */

 /*  pl=axiom(sleep1(Agent),
         [ not(sleep2(Agent)),
   	not(sleep3(Agent)),
   	not(sleep4(Agent)),
   	not(sleep5(Agent)),
   	not(sleep6(Agent)),
   	awake(Agent)
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',67).

 /*  (   not(sleep2(Agent)),
       not(sleep3(Agent)),
       not(sleep4(Agent)),
       not(sleep5(Agent)),
       not(sleep6(Agent)),
       awake(Agent)
   ->  sleep1(Agent)
   ).
 */
if not sleep2(Agent), not sleep3(Agent), not sleep4(Agent), not sleep5(Agent), not sleep6(Agent), awake(Agent)then sleep1(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',67).

 /*  reactive_rule([ not(sleep2(Agent)),
   		not(sleep3(Agent)),
   		not(sleep4(Agent)),
   		not(sleep5(Agent)),
   		not(sleep6(Agent)),
   		awake(Agent)
   	      ],
   	      [sleep1(Agent)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',67).

 /*  reactive_rule([ not(sleep2(Agent)),
   		not(sleep3(Agent)),
   		not(sleep4(Agent)),
   		not(sleep5(Agent)),
   		not(sleep6(Agent)),
   		awake(Agent)
   	      ],
   	      [sleep1(Agent)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',67).

 /*  holds_at(sleep2(Agent), Time) :-
       not(holds_at(sleep3(Agent), Time)),
       not(holds_at(sleep4(Agent), Time)),
       not(holds_at(sleep5(Agent), Time)),
       not(holds_at(sleep6(Agent), Time)),
       not(holds_at(sleep1(Agent), Time)),
       holds_at(awake(Agent), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',67).

 /*  fix_axiom_head(Time) ->
       [holds_at(sleep2(Agent), Time), ->, sleep2(Agent)].
 */

 /*  pl=axiom(sleep2(Agent),
         [ not(sleep3(Agent)),
   	not(sleep4(Agent)),
   	not(sleep5(Agent)),
   	not(sleep6(Agent)),
   	not(sleep1(Agent)),
   	awake(Agent)
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',67).

 /*  (   not(sleep3(Agent)),
       not(sleep4(Agent)),
       not(sleep5(Agent)),
       not(sleep6(Agent)),
       not(sleep1(Agent)),
       awake(Agent)
   ->  sleep2(Agent)
   ).
 */
if not sleep3(Agent), not sleep4(Agent), not sleep5(Agent), not sleep6(Agent), not sleep1(Agent), awake(Agent)then sleep2(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',67).

 /*  reactive_rule([ not(sleep3(Agent)),
   		not(sleep4(Agent)),
   		not(sleep5(Agent)),
   		not(sleep6(Agent)),
   		not(sleep1(Agent)),
   		awake(Agent)
   	      ],
   	      [sleep2(Agent)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',67).

 /*  reactive_rule([ not(sleep3(Agent)),
   		not(sleep4(Agent)),
   		not(sleep5(Agent)),
   		not(sleep6(Agent)),
   		not(sleep1(Agent)),
   		awake(Agent)
   	      ],
   	      [sleep2(Agent)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',67).

 /*  holds_at(sleep3(Agent), Time) :-
       not(holds_at(sleep4(Agent), Time)),
       not(holds_at(sleep5(Agent), Time)),
       not(holds_at(sleep6(Agent), Time)),
       not(holds_at(sleep2(Agent), Time)),
       not(holds_at(sleep1(Agent), Time)),
       holds_at(awake(Agent), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',67).

 /*  fix_axiom_head(Time) ->
       [holds_at(sleep3(Agent), Time), ->, sleep3(Agent)].
 */

 /*  pl=axiom(sleep3(Agent),
         [ not(sleep4(Agent)),
   	not(sleep5(Agent)),
   	not(sleep6(Agent)),
   	not(sleep2(Agent)),
   	not(sleep1(Agent)),
   	awake(Agent)
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',67).

 /*  (   not(sleep4(Agent)),
       not(sleep5(Agent)),
       not(sleep6(Agent)),
       not(sleep2(Agent)),
       not(sleep1(Agent)),
       awake(Agent)
   ->  sleep3(Agent)
   ).
 */
if not sleep4(Agent), not sleep5(Agent), not sleep6(Agent), not sleep2(Agent), not sleep1(Agent), awake(Agent)then sleep3(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',67).

 /*  reactive_rule([ not(sleep4(Agent)),
   		not(sleep5(Agent)),
   		not(sleep6(Agent)),
   		not(sleep2(Agent)),
   		not(sleep1(Agent)),
   		awake(Agent)
   	      ],
   	      [sleep3(Agent)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',67).

 /*  reactive_rule([ not(sleep4(Agent)),
   		not(sleep5(Agent)),
   		not(sleep6(Agent)),
   		not(sleep2(Agent)),
   		not(sleep1(Agent)),
   		awake(Agent)
   	      ],
   	      [sleep3(Agent)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',67).

 /*  holds_at(sleep4(Agent), Time) :-
       not(holds_at(sleep5(Agent), Time)),
       not(holds_at(sleep6(Agent), Time)),
       not(holds_at(sleep3(Agent), Time)),
       not(holds_at(sleep2(Agent), Time)),
       not(holds_at(sleep1(Agent), Time)),
       holds_at(awake(Agent), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',67).

 /*  fix_axiom_head(Time) ->
       [holds_at(sleep4(Agent), Time), ->, sleep4(Agent)].
 */

 /*  pl=axiom(sleep4(Agent),
         [ not(sleep5(Agent)),
   	not(sleep6(Agent)),
   	not(sleep3(Agent)),
   	not(sleep2(Agent)),
   	not(sleep1(Agent)),
   	awake(Agent)
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',67).

 /*  (   not(sleep5(Agent)),
       not(sleep6(Agent)),
       not(sleep3(Agent)),
       not(sleep2(Agent)),
       not(sleep1(Agent)),
       awake(Agent)
   ->  sleep4(Agent)
   ).
 */
if not sleep5(Agent), not sleep6(Agent), not sleep3(Agent), not sleep2(Agent), not sleep1(Agent), awake(Agent)then sleep4(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',67).

 /*  reactive_rule([ not(sleep5(Agent)),
   		not(sleep6(Agent)),
   		not(sleep3(Agent)),
   		not(sleep2(Agent)),
   		not(sleep1(Agent)),
   		awake(Agent)
   	      ],
   	      [sleep4(Agent)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',67).

 /*  reactive_rule([ not(sleep5(Agent)),
   		not(sleep6(Agent)),
   		not(sleep3(Agent)),
   		not(sleep2(Agent)),
   		not(sleep1(Agent)),
   		awake(Agent)
   	      ],
   	      [sleep4(Agent)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',67).

 /*  holds_at(sleep5(Agent), Time) :-
       not(holds_at(sleep6(Agent), Time)),
       not(holds_at(sleep4(Agent), Time)),
       not(holds_at(sleep3(Agent), Time)),
       not(holds_at(sleep2(Agent), Time)),
       not(holds_at(sleep1(Agent), Time)),
       holds_at(awake(Agent), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',67).

 /*  fix_axiom_head(Time) ->
       [holds_at(sleep5(Agent), Time), ->, sleep5(Agent)].
 */

 /*  pl=axiom(sleep5(Agent),
         [ not(sleep6(Agent)),
   	not(sleep4(Agent)),
   	not(sleep3(Agent)),
   	not(sleep2(Agent)),
   	not(sleep1(Agent)),
   	awake(Agent)
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',67).

 /*  (   not(sleep6(Agent)),
       not(sleep4(Agent)),
       not(sleep3(Agent)),
       not(sleep2(Agent)),
       not(sleep1(Agent)),
       awake(Agent)
   ->  sleep5(Agent)
   ).
 */
if not sleep6(Agent), not sleep4(Agent), not sleep3(Agent), not sleep2(Agent), not sleep1(Agent), awake(Agent)then sleep5(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',67).

 /*  reactive_rule([ not(sleep6(Agent)),
   		not(sleep4(Agent)),
   		not(sleep3(Agent)),
   		not(sleep2(Agent)),
   		not(sleep1(Agent)),
   		awake(Agent)
   	      ],
   	      [sleep5(Agent)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',67).

 /*  reactive_rule([ not(sleep6(Agent)),
   		not(sleep4(Agent)),
   		not(sleep3(Agent)),
   		not(sleep2(Agent)),
   		not(sleep1(Agent)),
   		awake(Agent)
   	      ],
   	      [sleep5(Agent)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',67).

 /*  holds_at(sleep6(Agent), Time) :-
       not(holds_at(sleep5(Agent), Time)),
       not(holds_at(sleep4(Agent), Time)),
       not(holds_at(sleep3(Agent), Time)),
       not(holds_at(sleep2(Agent), Time)),
       not(holds_at(sleep1(Agent), Time)),
       holds_at(awake(Agent), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',67).

 /*  fix_axiom_head(Time) ->
       [holds_at(sleep6(Agent), Time), ->, sleep6(Agent)].
 */

 /*  pl=axiom(sleep6(Agent),
         [ not(sleep5(Agent)),
   	not(sleep4(Agent)),
   	not(sleep3(Agent)),
   	not(sleep2(Agent)),
   	not(sleep1(Agent)),
   	awake(Agent)
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',67).

 /*  (   not(sleep5(Agent)),
       not(sleep4(Agent)),
       not(sleep3(Agent)),
       not(sleep2(Agent)),
       not(sleep1(Agent)),
       awake(Agent)
   ->  sleep6(Agent)
   ).
 */
if not sleep5(Agent), not sleep4(Agent), not sleep3(Agent), not sleep2(Agent), not sleep1(Agent), awake(Agent)then sleep6(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',67).

 /*  reactive_rule([ not(sleep5(Agent)),
   		not(sleep4(Agent)),
   		not(sleep3(Agent)),
   		not(sleep2(Agent)),
   		not(sleep1(Agent)),
   		awake(Agent)
   	      ],
   	      [sleep6(Agent)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',67).

 /*  reactive_rule([ not(sleep5(Agent)),
   		not(sleep4(Agent)),
   		not(sleep3(Agent)),
   		not(sleep2(Agent)),
   		not(sleep1(Agent)),
   		awake(Agent)
   	      ],
   	      [sleep6(Agent)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',67).

 /*  not(holds_at(awake(Agent), Time)) :-
       not(holds_at(sleep1(Agent), Time)),
       not(holds_at(sleep2(Agent), Time)),
       not(holds_at(sleep3(Agent), Time)),
       not(holds_at(sleep4(Agent), Time)),
       not(holds_at(sleep5(Agent), Time)),
       not(holds_at(sleep6(Agent), Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',67).

 /*  pl=axiom(not(awake(Agent)),
         [ not(sleep1(Agent)),
   	not(sleep2(Agent)),
   	not(sleep3(Agent)),
   	not(sleep4(Agent)),
   	not(sleep5(Agent)),
   	not(sleep6(Agent))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',67).

 /*  (   not(sleep1(Agent)),
       not(sleep2(Agent)),
       not(sleep3(Agent)),
       not(sleep4(Agent)),
       not(sleep5(Agent)),
       not(sleep6(Agent))
   ->  not(awake(Agent))
   ).
 */
if not sleep1(Agent), not sleep2(Agent), not sleep3(Agent), not sleep4(Agent), not sleep5(Agent), not sleep6(Agent)then not awake(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',67).

 /*  reactive_rule([ not(sleep1(Agent)),
   		not(sleep2(Agent)),
   		not(sleep3(Agent)),
   		not(sleep4(Agent)),
   		not(sleep5(Agent)),
   		not(sleep6(Agent))
   	      ],
   	      [not(awake(Agent))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',67).

 /*  reactive_rule([ not(sleep1(Agent)),
   		not(sleep2(Agent)),
   		not(sleep3(Agent)),
   		not(sleep4(Agent)),
   		not(sleep5(Agent)),
   		not(sleep6(Agent))
   	      ],
   	      [not(awake(Agent))]).
 */
 %  clausify_pnf=(holds_at(sleep1(Agent), Time);holds_at(sleep2(Agent), Time);holds_at(sleep3(Agent), Time);holds_at(sleep4(Agent), Time);holds_at(sleep5(Agent), Time);holds_at(sleep6(Agent), Time)->holds_at(awake(Agent), Time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',67).

 /*  holds_at(awake(Agent), Time) :-
       (   holds_at(sleep1(Agent), Time)
       ;   holds_at(sleep2(Agent), Time)
       ;   holds_at(sleep3(Agent), Time)
       ;   holds_at(sleep4(Agent), Time)
       ;   holds_at(sleep5(Agent), Time)
       ;   holds_at(sleep6(Agent), Time)
       ).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',67).

 /*  fix_axiom_head(Time) ->
       [holds_at(awake(Agent), Time), ->, awake(Agent)].
 */
 %   pl=axiom(awake(Agent), [(sleep1(Agent);sleep2(Agent);sleep3(Agent);sleep4(Agent);sleep5(Agent);sleep6(Agent))]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',67).

 /*  sleep1(Agent);sleep2(Agent);sleep3(Agent);sleep4(Agent);sleep5(Agent);sleep6(Agent) ->
       awake(Agent).
 */
if sleep1(Agent);sleep2(Agent);sleep3(Agent);sleep4(Agent);sleep5(Agent);sleep6(Agent)then awake(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',67).

 /*   reactive_rule([  (sleep1(Agent);sleep2(Agent);sleep3(Agent);sleep4(Agent);sleep5(Agent);sleep6(Agent))
                    ],
                    [awake(Agent)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',67).

 /*   reactive_rule([  (sleep1(Agent);sleep2(Agent);sleep3(Agent);sleep4(Agent);sleep5(Agent);sleep6(Agent))
                    ],
                    [awake(Agent)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',67).

 /*  not(holds_at(sleep1(Agent), Time)) :-
       not(holds_at(awake(Agent), Time)).
 */
 %  pl=axiom(not(sleep1(Agent)),[not(awake(Agent))]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',67).

 /*  not(awake(Agent)) ->
       not(sleep1(Agent)).
 */
if not awake(Agent)then not sleep1(Agent).
 %  reactive_rule([not(awake(Agent))],[not(sleep1(Agent))]).
 %  reactive_rule([not(awake(Agent))],[not(sleep1(Agent))]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',67).

 /*  not(holds_at(sleep2(Agent), Time)) :-
       not(holds_at(awake(Agent), Time)).
 */
 %  pl=axiom(not(sleep2(Agent)),[not(awake(Agent))]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',67).

 /*  not(awake(Agent)) ->
       not(sleep2(Agent)).
 */
if not awake(Agent)then not sleep2(Agent).
 %  reactive_rule([not(awake(Agent))],[not(sleep2(Agent))]).
 %  reactive_rule([not(awake(Agent))],[not(sleep2(Agent))]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',67).

 /*  not(holds_at(sleep3(Agent), Time)) :-
       not(holds_at(awake(Agent), Time)).
 */
 %  pl=axiom(not(sleep3(Agent)),[not(awake(Agent))]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',67).

 /*  not(awake(Agent)) ->
       not(sleep3(Agent)).
 */
if not awake(Agent)then not sleep3(Agent).
 %  reactive_rule([not(awake(Agent))],[not(sleep3(Agent))]).
 %  reactive_rule([not(awake(Agent))],[not(sleep3(Agent))]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',67).

 /*  not(holds_at(sleep4(Agent), Time)) :-
       not(holds_at(awake(Agent), Time)).
 */
 %  pl=axiom(not(sleep4(Agent)),[not(awake(Agent))]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',67).

 /*  not(awake(Agent)) ->
       not(sleep4(Agent)).
 */
if not awake(Agent)then not sleep4(Agent).
 %  reactive_rule([not(awake(Agent))],[not(sleep4(Agent))]).
 %  reactive_rule([not(awake(Agent))],[not(sleep4(Agent))]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',67).

 /*  not(holds_at(sleep5(Agent), Time)) :-
       not(holds_at(awake(Agent), Time)).
 */
 %  pl=axiom(not(sleep5(Agent)),[not(awake(Agent))]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',67).

 /*  not(awake(Agent)) ->
       not(sleep5(Agent)).
 */
if not awake(Agent)then not sleep5(Agent).
 %  reactive_rule([not(awake(Agent))],[not(sleep5(Agent))]).
 %  reactive_rule([not(awake(Agent))],[not(sleep5(Agent))]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',67).

 /*  not(holds_at(sleep6(Agent), Time)) :-
       not(holds_at(awake(Agent), Time)).
 */
 %  pl=axiom(not(sleep6(Agent)),[not(awake(Agent))]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',67).

 /*  not(awake(Agent)) ->
       not(sleep6(Agent)).
 */
if not awake(Agent)then not sleep6(Agent).
 %  reactive_rule([not(awake(Agent))],[not(sleep6(Agent))]).
 %  reactive_rule([not(awake(Agent))],[not(sleep6(Agent))]).


%; A number of axioms are used to specify the transitions of
%; a finite automaton.
%;--
%; Waking up causes a transition from Sleep0
%; to Sleep1:
% [agent,time]
 
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',82).
% Terminates(WakeUp(agent),Sleep0(agent),time).

 /*  pl=axiom(terminates(wakeUp(Agent),sleep0(Agent),Time),
         []).
 */
 %  terminates(wakeUp(Agent),sleep0(Agent),Time).
wakeUp(Agent)terminates sleep0(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',82).

 /*  terminated(happens(wakeUp(Agent),
   		   Time_From,
   		   Time_Until),
   	   sleep0(Agent),
   	   []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',82).

 /*  terminated(happens(wakeUp(Agent),
   		   Time_From,
   		   Time_Until),
   	   sleep0(Agent),
   	   []).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',84).
% [agent,time]
 % Initiates(WakeUp(agent),Sleep1(agent),time).
 %  pl=axiom(initiates(wakeUp(Agent),sleep1(Agent),Time),[]).
 %  initiates(wakeUp(Agent),sleep1(Agent),Time).
wakeUp(Agent)initiates sleep1(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',84).

 /*  initiated(happens(wakeUp(Agent),Time_From,Time_Until),
   	  sleep1(Agent),
   	  []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',84).

 /*  initiated(happens(wakeUp(Agent),Time_From,Time_Until),
   	  sleep1(Agent),
   	  []).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',86).
% [agent,time]
 % Happens(WakeUp(agent),time) -> HoldsAt(Sleep0(agent),time).
 %  clausify_pnf=(happens(wakeUp(Agent), Time)->holds_at(sleep0(Agent), Time)).

 /*  holds_at(sleep0(Agent), Time) :-
       happens(wakeUp(Agent), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',86).

 /*  pl=axiom(requires(wakeUp(Agent),When_Time),
         [metreqs(wakeUp(Agent))]).
 */

 /*  metreqs(wakeUp(Agent)) ->
       requires(wakeUp(Agent), When_Time).
 */
if metreqs(wakeUp(Agent))then requires(wakeUp(Agent), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',86).

 /*  reactive_rule([metreqs(wakeUp(Agent))],
   	      [requires(wakeUp(Agent),When_Time)]).
 */

 /*  reactive_rule([metreqs(wakeUp(Agent))],
   	      [requires(wakeUp(Agent),When_Time)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',86).

 /*  fix_axiom_head(When_Time) ->
       [ holds_at(metreqs(wakeUp(Agent)), When_Time),
          (->),
         metreqs(wakeUp(Agent))
       ].
 */
 %  pl=axiom(metreqs(wakeUp(Agent)),[sleep0(Agent)]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',86).

 /*  sleep0(Agent) ->
       metreqs(wakeUp(Agent)).
 */
if sleep0(Agent)then metreqs(wakeUp(Agent)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',86).

 /*  reactive_rule([holds(sleep0(Agent),Holds)],
   	      [metreqs(wakeUp(Agent))]).
 */

 /*  reactive_rule([holds(sleep0(Agent),Holds)],
   	      [metreqs(wakeUp(Agent))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',86).

 /*  not(happens(wakeUp(Agent), When_Time)) :-
       not(holds_at(sleep0(Agent), When_Time)).
 */

 /*  fix_axiom_head(When_Time) ->
       [ not(happens(wakeUp(Agent), When_Time)),
          (->),
         not(wakeUp(Agent))
       ].
 */
 %  pl=axiom(not(wakeUp(Agent)),[not(sleep0(Agent))]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',86).

 /*  not(sleep0(Agent)) ->
       not(wakeUp(Agent)).
 */
if not sleep0(Agent)then not wakeUp(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',86).

 /*  reactive_rule([holds(not(sleep0(Agent)),Holds4)],
   	      [not(wakeUp(Agent))]).
 */

 /*  reactive_rule([holds(not(sleep0(Agent)),Holds4)],
   	      [not(wakeUp(Agent))]).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',88).
%;--
%; Getting out of bed causes a transition from Sleep1
%; to Sleep2:
% [agent,bed,time]
 
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',92).
% Terminates(RiseFrom(agent,bed),Sleep1(agent),time).

 /*  pl=axiom(terminates(riseFrom(Agent,Bed),
   		 sleep1(Agent),
   		 Time),
         []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',92).

 /*  terminates(riseFrom(Agent,Bed),
   	   sleep1(Agent),
   	   Time).
 */
riseFrom(Agent, Bed)terminates sleep1(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',92).

 /*  terminated(happens(riseFrom(Agent,Bed),
   		   Time_From,
   		   Time_Until),
   	   sleep1(Agent),
   	   []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',92).

 /*  terminated(happens(riseFrom(Agent,Bed),
   		   Time_From,
   		   Time_Until),
   	   sleep1(Agent),
   	   []).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',94).
% [agent,bed,time]
 % Initiates(RiseFrom(agent,bed),Sleep2(agent),time).

 /*  pl=axiom(initiates(riseFrom(Agent,Bed),
   		sleep2(Agent),
   		Time),
         []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',94).

 /*  initiates(riseFrom(Agent,Bed),
   	  sleep2(Agent),
   	  Time).
 */
riseFrom(Agent, Bed)initiates sleep2(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',94).

 /*  initiated(happens(riseFrom(Agent,Bed),
   		  Time_From,
   		  Time_Until),
   	  sleep2(Agent),
   	  []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',94).

 /*  initiated(happens(riseFrom(Agent,Bed),
   		  Time_From,
   		  Time_Until),
   	  sleep2(Agent),
   	  []).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',96).
% [agent,bed,time]
% Happens(RiseFrom(agent,bed),time) -> HoldsAt(Sleep1(agent),time).
 %  clausify_pnf=(happens(riseFrom(Agent, Bed), Time)->holds_at(sleep1(Agent), Time)).

 /*  holds_at(sleep1(Agent), Time) :-
       happens(riseFrom(Agent, Bed), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',96).

 /*  pl=axiom(requires(riseFrom(Agent,Bed),When_Time),
         [metreqs(riseFrom(Agent,Bed))]).
 */

 /*  metreqs(riseFrom(Agent, Bed)) ->
       requires(riseFrom(Agent, Bed), When_Time).
 */
if metreqs(riseFrom(Agent, Bed))then requires(riseFrom(Agent, Bed), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',96).

 /*  reactive_rule([metreqs(riseFrom(Agent,Bed))],
   	      [ requires(riseFrom(Agent,Bed),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',96).

 /*  reactive_rule([metreqs(riseFrom(Agent,Bed))],
   	      [ requires(riseFrom(Agent,Bed),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',96).

 /*  fix_axiom_head(When_Time) ->
       [ holds_at(metreqs(riseFrom(Agent, Bed)), When_Time),
          (->),
         metreqs(riseFrom(Agent, Bed))
       ].
 */
 %  pl=axiom(metreqs(riseFrom(Agent,Bed)),[sleep1(Agent)]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',96).

 /*  sleep1(Agent) ->
       metreqs(riseFrom(Agent, Bed)).
 */
if sleep1(Agent)then metreqs(riseFrom(Agent, Bed)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',96).

 /*  reactive_rule([holds(sleep1(Agent),Holds)],
   	      [metreqs(riseFrom(Agent,Bed))]).
 */

 /*  reactive_rule([holds(sleep1(Agent),Holds)],
   	      [metreqs(riseFrom(Agent,Bed))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',96).

 /*  not(happens(riseFrom(Agent, Bed), When_Time)) :-
       not(holds_at(sleep1(Agent), When_Time)).
 */

 /*  fix_axiom_head(When_Time) ->
       [ not(happens(riseFrom(Agent, Bed), When_Time)),
          (->),
         not(riseFrom(Agent, Bed))
       ].
 */
 %  pl=axiom(not(riseFrom(Agent,Bed)),[not(sleep1(Agent))]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',96).

 /*  not(sleep1(Agent)) ->
       not(riseFrom(Agent, Bed)).
 */
if not sleep1(Agent)then not riseFrom(Agent, Bed).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',96).

 /*  reactive_rule([holds(not(sleep1(Agent)),Holds5)],
   	      [not(riseFrom(Agent,Bed))]).
 */

 /*  reactive_rule([holds(not(sleep1(Agent)),Holds5)],
   	      [not(riseFrom(Agent,Bed))]).
 */


%;--
%; Getting dressed causes a transition from Sleep2
%; to Sleep3, the normal state of awakeness:
% [agent,time]
 
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',103).
% Terminates(GetDressed(agent),Sleep2(agent),time).

 /*  pl=axiom(terminates(getDressed(Agent),
   		 sleep2(Agent),
   		 Time),
         []).
 */
 %  terminates(getDressed(Agent),sleep2(Agent),Time).
getDressed(Agent)terminates sleep2(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',103).

 /*  terminated(happens(getDressed(Agent),
   		   Time_From,
   		   Time_Until),
   	   sleep2(Agent),
   	   []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',103).

 /*  terminated(happens(getDressed(Agent),
   		   Time_From,
   		   Time_Until),
   	   sleep2(Agent),
   	   []).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',105).
% [agent,time]
 % Initiates(GetDressed(agent),Sleep3(agent),time).

 /*  pl=axiom(initiates(getDressed(Agent),sleep3(Agent),Time),
         []).
 */
 %  initiates(getDressed(Agent),sleep3(Agent),Time).
getDressed(Agent)initiates sleep3(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',105).

 /*  initiated(happens(getDressed(Agent),
   		  Time_From,
   		  Time_Until),
   	  sleep3(Agent),
   	  []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',105).

 /*  initiated(happens(getDressed(Agent),
   		  Time_From,
   		  Time_Until),
   	  sleep3(Agent),
   	  []).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',107).
% [agent,time]
 % Happens(GetDressed(agent),time) -> HoldsAt(Sleep2(agent),time).
 %  clausify_pnf=(happens(getDressed(Agent), Time)->holds_at(sleep2(Agent), Time)).

 /*  holds_at(sleep2(Agent), Time) :-
       happens(getDressed(Agent), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',107).

 /*  pl=axiom(requires(getDressed(Agent),When_Time),
         [metreqs(getDressed(Agent))]).
 */

 /*  metreqs(getDressed(Agent)) ->
       requires(getDressed(Agent), When_Time).
 */
if metreqs(getDressed(Agent))then requires(getDressed(Agent), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',107).

 /*  reactive_rule([metreqs(getDressed(Agent))],
   	      [requires(getDressed(Agent),When_Time)]).
 */

 /*  reactive_rule([metreqs(getDressed(Agent))],
   	      [requires(getDressed(Agent),When_Time)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',107).

 /*  fix_axiom_head(When_Time) ->
       [ holds_at(metreqs(getDressed(Agent)), When_Time),
          (->),
         metreqs(getDressed(Agent))
       ].
 */
 %  pl=axiom(metreqs(getDressed(Agent)),[sleep2(Agent)]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',107).

 /*  sleep2(Agent) ->
       metreqs(getDressed(Agent)).
 */
if sleep2(Agent)then metreqs(getDressed(Agent)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',107).

 /*  reactive_rule([holds(sleep2(Agent),Holds)],
   	      [metreqs(getDressed(Agent))]).
 */

 /*  reactive_rule([holds(sleep2(Agent),Holds)],
   	      [metreqs(getDressed(Agent))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',107).

 /*  not(happens(getDressed(Agent), When_Time)) :-
       not(holds_at(sleep2(Agent), When_Time)).
 */

 /*  fix_axiom_head(When_Time) ->
       [ not(happens(getDressed(Agent), When_Time)),
          (->),
         not(getDressed(Agent))
       ].
 */
 %  pl=axiom(not(getDressed(Agent)),[not(sleep2(Agent))]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',107).

 /*  not(sleep2(Agent)) ->
       not(getDressed(Agent)).
 */
if not sleep2(Agent)then not getDressed(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',107).

 /*  reactive_rule([holds(not(sleep2(Agent)),Holds4)],
   	      [not(getDressed(Agent))]).
 */

 /*  reactive_rule([holds(not(sleep2(Agent)),Holds4)],
   	      [not(getDressed(Agent))]).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',109).
%;--
%; Getting tired causes a transition from Sleep3
%; to Sleep4:
% [agent,time]
 
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',113).
% Terminates(GetTired(agent),Sleep3(agent),time).

 /*  pl=axiom(terminates(getTired(Agent),sleep3(Agent),Time),
         []).
 */
 %  terminates(getTired(Agent),sleep3(Agent),Time).
getTired(Agent)terminates sleep3(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',113).

 /*  terminated(happens(getTired(Agent),
   		   Time_From,
   		   Time_Until),
   	   sleep3(Agent),
   	   []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',113).

 /*  terminated(happens(getTired(Agent),
   		   Time_From,
   		   Time_Until),
   	   sleep3(Agent),
   	   []).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',115).
% [agent,time]
 % Initiates(GetTired(agent),Sleep4(agent),time).

 /*  pl=axiom(initiates(getTired(Agent),sleep4(Agent),Time),
         []).
 */
 %  initiates(getTired(Agent),sleep4(Agent),Time).
getTired(Agent)initiates sleep4(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',115).

 /*  initiated(happens(getTired(Agent),
   		  Time_From,
   		  Time_Until),
   	  sleep4(Agent),
   	  []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',115).

 /*  initiated(happens(getTired(Agent),
   		  Time_From,
   		  Time_Until),
   	  sleep4(Agent),
   	  []).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',117).
% [agent,time]
 % Happens(GetTired(agent),time) -> HoldsAt(Sleep3(agent),time).
 %  clausify_pnf=(happens(getTired(Agent), Time)->holds_at(sleep3(Agent), Time)).

 /*  holds_at(sleep3(Agent), Time) :-
       happens(getTired(Agent), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',117).

 /*  pl=axiom(requires(getTired(Agent),When_Time),
         [metreqs(getTired(Agent))]).
 */

 /*  metreqs(getTired(Agent)) ->
       requires(getTired(Agent), When_Time).
 */
if metreqs(getTired(Agent))then requires(getTired(Agent), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',117).

 /*  reactive_rule([metreqs(getTired(Agent))],
   	      [requires(getTired(Agent),When_Time)]).
 */

 /*  reactive_rule([metreqs(getTired(Agent))],
   	      [requires(getTired(Agent),When_Time)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',117).

 /*  fix_axiom_head(When_Time) ->
       [ holds_at(metreqs(getTired(Agent)), When_Time),
          (->),
         metreqs(getTired(Agent))
       ].
 */
 %  pl=axiom(metreqs(getTired(Agent)),[sleep3(Agent)]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',117).

 /*  sleep3(Agent) ->
       metreqs(getTired(Agent)).
 */
if sleep3(Agent)then metreqs(getTired(Agent)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',117).

 /*  reactive_rule([holds(sleep3(Agent),Holds)],
   	      [metreqs(getTired(Agent))]).
 */

 /*  reactive_rule([holds(sleep3(Agent),Holds)],
   	      [metreqs(getTired(Agent))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',117).

 /*  not(happens(getTired(Agent), When_Time)) :-
       not(holds_at(sleep3(Agent), When_Time)).
 */

 /*  fix_axiom_head(When_Time) ->
       [ not(happens(getTired(Agent), When_Time)),
          (->),
         not(getTired(Agent))
       ].
 */
 %  pl=axiom(not(getTired(Agent)),[not(sleep3(Agent))]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',117).

 /*  not(sleep3(Agent)) ->
       not(getTired(Agent)).
 */
if not sleep3(Agent)then not getTired(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',117).

 /*  reactive_rule([holds(not(sleep3(Agent)),Holds4)],
   	      [not(getTired(Agent))]).
 */

 /*  reactive_rule([holds(not(sleep3(Agent)),Holds4)],
   	      [not(getTired(Agent))]).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',119).
%;--
%; Getting undressed causes a transition from Sleep4
%; to Sleep5:
% [agent,time]
 
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',123).
% Terminates(GetUndressed(agent),Sleep4(agent),time).

 /*  pl=axiom(terminates(getUndressed(Agent),
   		 sleep4(Agent),
   		 Time),
         []).
 */
 %  terminates(getUndressed(Agent),sleep4(Agent),Time).
getUndressed(Agent)terminates sleep4(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',123).

 /*  terminated(happens(getUndressed(Agent),
   		   Time_From,
   		   Time_Until),
   	   sleep4(Agent),
   	   []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',123).

 /*  terminated(happens(getUndressed(Agent),
   		   Time_From,
   		   Time_Until),
   	   sleep4(Agent),
   	   []).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',125).
% [agent,time]
 % Initiates(GetUndressed(agent),Sleep5(agent),time).

 /*  pl=axiom(initiates(getUndressed(Agent),
   		sleep5(Agent),
   		Time),
         []).
 */
 %  initiates(getUndressed(Agent),sleep5(Agent),Time).
getUndressed(Agent)initiates sleep5(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',125).

 /*  initiated(happens(getUndressed(Agent),
   		  Time_From,
   		  Time_Until),
   	  sleep5(Agent),
   	  []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',125).

 /*  initiated(happens(getUndressed(Agent),
   		  Time_From,
   		  Time_Until),
   	  sleep5(Agent),
   	  []).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',127).
% [agent,time]
 % Happens(GetUndressed(agent),time) -> HoldsAt(Sleep4(agent),time).
 %  clausify_pnf=(happens(getUndressed(Agent), Time)->holds_at(sleep4(Agent), Time)).

 /*  holds_at(sleep4(Agent), Time) :-
       happens(getUndressed(Agent), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',127).

 /*  pl=axiom(requires(getUndressed(Agent),When_Time),
         [metreqs(getUndressed(Agent))]).
 */

 /*  metreqs(getUndressed(Agent)) ->
       requires(getUndressed(Agent), When_Time).
 */
if metreqs(getUndressed(Agent))then requires(getUndressed(Agent), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',127).

 /*  reactive_rule([metreqs(getUndressed(Agent))],
   	      [requires(getUndressed(Agent),When_Time)]).
 */

 /*  reactive_rule([metreqs(getUndressed(Agent))],
   	      [requires(getUndressed(Agent),When_Time)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',127).

 /*  fix_axiom_head(When_Time) ->
       [ holds_at(metreqs(getUndressed(Agent)), When_Time),
          (->),
         metreqs(getUndressed(Agent))
       ].
 */
 %  pl=axiom(metreqs(getUndressed(Agent)),[sleep4(Agent)]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',127).

 /*  sleep4(Agent) ->
       metreqs(getUndressed(Agent)).
 */
if sleep4(Agent)then metreqs(getUndressed(Agent)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',127).

 /*  reactive_rule([holds(sleep4(Agent),Holds)],
   	      [metreqs(getUndressed(Agent))]).
 */

 /*  reactive_rule([holds(sleep4(Agent),Holds)],
   	      [metreqs(getUndressed(Agent))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',127).

 /*  not(happens(getUndressed(Agent), When_Time)) :-
       not(holds_at(sleep4(Agent), When_Time)).
 */

 /*  fix_axiom_head(When_Time) ->
       [ not(happens(getUndressed(Agent), When_Time)),
          (->),
         not(getUndressed(Agent))
       ].
 */
 %  pl=axiom(not(getUndressed(Agent)),[not(sleep4(Agent))]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',127).

 /*  not(sleep4(Agent)) ->
       not(getUndressed(Agent)).
 */
if not sleep4(Agent)then not getUndressed(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',127).

 /*  reactive_rule([holds(not(sleep4(Agent)),Holds4)],
   	      [not(getUndressed(Agent))]).
 */

 /*  reactive_rule([holds(not(sleep4(Agent)),Holds4)],
   	      [not(getUndressed(Agent))]).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',129).
%;--
%; Lying on a bed causes a transition from Sleep5
%; to Sleep6:
% [agent,bed,time]
 
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',133).
% Terminates(LieOn(agent,bed),Sleep5(agent),time).

 /*  pl=axiom(terminates(lieOn(Agent,Bed),
   		 sleep5(Agent),
   		 Time),
         []).
 */
 %  terminates(lieOn(Agent,Bed),sleep5(Agent),Time).
lieOn(Agent, Bed)terminates sleep5(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',133).

 /*  terminated(happens(lieOn(Agent,Bed),
   		   Time_From,
   		   Time_Until),
   	   sleep5(Agent),
   	   []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',133).

 /*  terminated(happens(lieOn(Agent,Bed),
   		   Time_From,
   		   Time_Until),
   	   sleep5(Agent),
   	   []).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',135).
% [agent,bed,time]
 % Initiates(LieOn(agent,bed),Sleep6(agent),time).

 /*  pl=axiom(initiates(lieOn(Agent,Bed),
   		sleep6(Agent),
   		Time),
         []).
 */
 %  initiates(lieOn(Agent,Bed),sleep6(Agent),Time).
lieOn(Agent, Bed)initiates sleep6(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',135).

 /*  initiated(happens(lieOn(Agent,Bed),
   		  Time_From,
   		  Time_Until),
   	  sleep6(Agent),
   	  []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',135).

 /*  initiated(happens(lieOn(Agent,Bed),
   		  Time_From,
   		  Time_Until),
   	  sleep6(Agent),
   	  []).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',137).
% [agent,bed,time]
 % Happens(LieOn(agent,bed),time) -> HoldsAt(Sleep5(agent),time).
 %  clausify_pnf=(happens(lieOn(Agent, Bed), Time)->holds_at(sleep5(Agent), Time)).

 /*  holds_at(sleep5(Agent), Time) :-
       happens(lieOn(Agent, Bed), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',137).

 /*  pl=axiom(requires(lieOn(Agent,Bed),When_Time),
         [metreqs(lieOn(Agent,Bed))]).
 */

 /*  metreqs(lieOn(Agent, Bed)) ->
       requires(lieOn(Agent, Bed), When_Time).
 */
if metreqs(lieOn(Agent, Bed))then requires(lieOn(Agent, Bed), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',137).

 /*  reactive_rule([metreqs(lieOn(Agent,Bed))],
   	      [requires(lieOn(Agent,Bed),When_Time)]).
 */

 /*  reactive_rule([metreqs(lieOn(Agent,Bed))],
   	      [requires(lieOn(Agent,Bed),When_Time)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',137).

 /*  fix_axiom_head(When_Time) ->
       [ holds_at(metreqs(lieOn(Agent, Bed)), When_Time),
          (->),
         metreqs(lieOn(Agent, Bed))
       ].
 */
 %  pl=axiom(metreqs(lieOn(Agent,Bed)),[sleep5(Agent)]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',137).

 /*  sleep5(Agent) ->
       metreqs(lieOn(Agent, Bed)).
 */
if sleep5(Agent)then metreqs(lieOn(Agent, Bed)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',137).

 /*  reactive_rule([holds(sleep5(Agent),Holds)],
   	      [metreqs(lieOn(Agent,Bed))]).
 */

 /*  reactive_rule([holds(sleep5(Agent),Holds)],
   	      [metreqs(lieOn(Agent,Bed))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',137).

 /*  not(happens(lieOn(Agent, Bed), When_Time)) :-
       not(holds_at(sleep5(Agent), When_Time)).
 */

 /*  fix_axiom_head(When_Time) ->
       [ not(happens(lieOn(Agent, Bed), When_Time)),
          (->),
         not(lieOn(Agent, Bed))
       ].
 */
 %  pl=axiom(not(lieOn(Agent,Bed)),[not(sleep5(Agent))]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',137).

 /*  not(sleep5(Agent)) ->
       not(lieOn(Agent, Bed)).
 */
if not sleep5(Agent)then not lieOn(Agent, Bed).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',137).

 /*  reactive_rule([holds(not(sleep5(Agent)),Holds5)],
   	      [not(lieOn(Agent,Bed))]).
 */

 /*  reactive_rule([holds(not(sleep5(Agent)),Holds5)],
   	      [not(lieOn(Agent,Bed))]).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',139).
%;--
%; Falling asleep causes a transition from Sleep6
%; to Sleep0:
% [agent,time]
 
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',143).
% Terminates(FallAsleep(agent),Sleep6(agent),time).

 /*  pl=axiom(terminates(fallAsleep(Agent),
   		 sleep6(Agent),
   		 Time),
         []).
 */
 %  terminates(fallAsleep(Agent),sleep6(Agent),Time).
fallAsleep(Agent)terminates sleep6(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',143).

 /*  terminated(happens(fallAsleep(Agent),
   		   Time_From,
   		   Time_Until),
   	   sleep6(Agent),
   	   []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',143).

 /*  terminated(happens(fallAsleep(Agent),
   		   Time_From,
   		   Time_Until),
   	   sleep6(Agent),
   	   []).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',145).
% [agent,time]
 % Initiates(FallAsleep(agent),Sleep0(agent),time).

 /*  pl=axiom(initiates(fallAsleep(Agent),sleep0(Agent),Time),
         []).
 */
 %  initiates(fallAsleep(Agent),sleep0(Agent),Time).
fallAsleep(Agent)initiates sleep0(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',145).

 /*  initiated(happens(fallAsleep(Agent),
   		  Time_From,
   		  Time_Until),
   	  sleep0(Agent),
   	  []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',145).

 /*  initiated(happens(fallAsleep(Agent),
   		  Time_From,
   		  Time_Until),
   	  sleep0(Agent),
   	  []).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',147).
% [agent,time]
 % Happens(FallAsleep(agent),time) -> HoldsAt(Sleep6(agent),time).
 %  clausify_pnf=(happens(fallAsleep(Agent), Time)->holds_at(sleep6(Agent), Time)).

 /*  holds_at(sleep6(Agent), Time) :-
       happens(fallAsleep(Agent), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',147).

 /*  pl=axiom(requires(fallAsleep(Agent),When_Time),
         [metreqs(fallAsleep(Agent))]).
 */

 /*  metreqs(fallAsleep(Agent)) ->
       requires(fallAsleep(Agent), When_Time).
 */
if metreqs(fallAsleep(Agent))then requires(fallAsleep(Agent), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',147).

 /*  reactive_rule([metreqs(fallAsleep(Agent))],
   	      [requires(fallAsleep(Agent),When_Time)]).
 */

 /*  reactive_rule([metreqs(fallAsleep(Agent))],
   	      [requires(fallAsleep(Agent),When_Time)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',147).

 /*  fix_axiom_head(When_Time) ->
       [ holds_at(metreqs(fallAsleep(Agent)), When_Time),
          (->),
         metreqs(fallAsleep(Agent))
       ].
 */
 %  pl=axiom(metreqs(fallAsleep(Agent)),[sleep6(Agent)]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',147).

 /*  sleep6(Agent) ->
       metreqs(fallAsleep(Agent)).
 */
if sleep6(Agent)then metreqs(fallAsleep(Agent)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',147).

 /*  reactive_rule([holds(sleep6(Agent),Holds)],
   	      [metreqs(fallAsleep(Agent))]).
 */

 /*  reactive_rule([holds(sleep6(Agent),Holds)],
   	      [metreqs(fallAsleep(Agent))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',147).

 /*  not(happens(fallAsleep(Agent), When_Time)) :-
       not(holds_at(sleep6(Agent), When_Time)).
 */

 /*  fix_axiom_head(When_Time) ->
       [ not(happens(fallAsleep(Agent), When_Time)),
          (->),
         not(fallAsleep(Agent))
       ].
 */
 %  pl=axiom(not(fallAsleep(Agent)),[not(sleep6(Agent))]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',147).

 /*  not(sleep6(Agent)) ->
       not(fallAsleep(Agent)).
 */
if not sleep6(Agent)then not fallAsleep(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',147).

 /*  reactive_rule([holds(not(sleep6(Agent)),Holds4)],
   	      [not(fallAsleep(Agent))]).
 */

 /*  reactive_rule([holds(not(sleep6(Agent)),Holds4)],
   	      [not(fallAsleep(Agent))]).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',149).
%;--
%; agent acts on being in state Sleep5.

% fluent ActOnSleep5(agent)
 %  blue=fluent(actOnSleep5(agent)).
 %  fluent(actOnSleep5(agent)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',151).
fluents([actOnSleep5/1]).
 %  fluents([actOnSleep5/1]).
mpred_prop(actOnSleep5(agent),fluent).
 %  mpred_prop(actOnSleep5(agent),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',153).
% noninertial ActOnSleep5
noninertial(actOnSleep5).
 %  noninertial(actOnSleep5).
%; We reduce the number of models by asserting that
%; an agent only acts on being in state Sleep5 while in
%; that state:
% [agent,time]
% !HoldsAt(Sleep5(agent),time) ->
% !HoldsAt(ActOnSleep5(agent),time).
 %  clausify_pnf=(holds_at(neg(sleep5(Agent)), Time)->holds_at(neg(actOnSleep5(Agent)), Time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',158).

 /*  holds_at(neg(actOnSleep5(Agent)), Time) :-
       holds_at(neg(sleep5(Agent)), Time).
 */

 /*  fix_axiom_head(Time) ->
       [ holds_at(neg(actOnSleep5(Agent)), Time),
          (->),
         not(actOnSleep5(Agent))
       ].
 */
 %  pl=axiom(not(actOnSleep5(Agent)),[not(sleep5(Agent))]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',158).

 /*  not(sleep5(Agent)) ->
       not(actOnSleep5(Agent)).
 */
if not sleep5(Agent)then not actOnSleep5(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',158).

 /*  reactive_rule([holds(not(sleep5(Agent)),Holds)],
   	      [not(actOnSleep5(Agent))]).
 */

 /*  reactive_rule([holds(not(sleep5(Agent)),Holds)],
   	      [not(actOnSleep5(Agent))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',158).

 /*  not(holds_at(neg(sleep5(Agent)), Time)) :-
       not(holds_at(neg(actOnSleep5(Agent)), Time)).
 */

 /*  pl=axiom(not(not(sleep5(Agent))),
         [not(not(actOnSleep5(Agent)))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',158).

 /*  not(not(actOnSleep5(Agent))) ->
       not(not(sleep5(Agent))).
 */
if not not actOnSleep5(Agent)then not not sleep5(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',158).

 /*  reactive_rule([not(not(actOnSleep5(Agent)))],
   	      [ holds(not([ holds(not(sleep5(Agent)),
   				  Holds3)
   			  ]),
   		      Holds3)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',158).

 /*  reactive_rule([not(not(actOnSleep5(Agent)))],
   	      [ holds(not([ holds(not(sleep5(Agent)),
   				  Holds3)
   			  ]),
   		      Holds3)
   	      ]).
 */


%; Undressed is like IntentionToPlay
%; ActOnSleep5 is like ActOnIntentionToPlay
%; A trigger axiom states that if an agent is in state Sleep5,
%; the agent acts on this state, the agent is in a room, and
%; a bed is at the room, the agent lies on the bed:
% [agent,room,bed,time]
% HoldsAt(Sleep5(agent),time) &
% HoldsAt(ActOnSleep5(agent),time) &
% HoldsAt(At(agent,room),time) &
% HoldsAt(At(bed,room),time) ->
% Happens(LieOn(agent,bed),time).
 %  clausify_pnf=(holds_at(sleep5(Agent), Time), holds_at(actOnSleep5(Agent), Time), holds_at(at(Agent, Room), Time), holds_at(at(Bed, Room), Time)->happens(lieOn(Agent, Bed), Time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',168).

 /*  happens(lieOn(Agent, Bed), Time) :-
       holds_at(sleep5(Agent), Time),
       holds_at(actOnSleep5(Agent), Time),
       holds_at(at(Agent, Room), Time),
       holds_at(at(Bed, Room), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',168).

 /*  fix_axiom_head(Time) ->
       [ happens(lieOn(Agent, Bed), Time),
          (->),
         lieOn(Agent, Bed)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',168).

 /*  pl=axiom(lieOn(Agent,Bed),
         [ sleep5(Agent),
   	actOnSleep5(Agent),
   	at(Agent,Room),
   	at(Bed,Room)
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',168).

 /*  (   sleep5(Agent),
       actOnSleep5(Agent),
       at(Agent, Room),
       at(Bed, Room)
   ->  lieOn(Agent, Bed)
   ).
 */
if sleep5(Agent), actOnSleep5(Agent), loc_at(Agent, Room), loc_at(Bed, Room)then lieOn(Agent, Bed).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',168).

 /*  reactive_rule([ holds(sleep5(Agent),Holds),
   		actOnSleep5(Agent),
   		loc_at(Agent,Room),
   		loc_at(Bed,Room)
   	      ],
   	      [ happens(lieOn(Agent,Bed),
   			Time_From,
   			Time_Until)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',168).

 /*  reactive_rule([ holds(sleep5(Agent),Holds),
   		actOnSleep5(Agent),
   		loc_at(Agent,Room),
   		loc_at(Bed,Room)
   	      ],
   	      [ happens(lieOn(Agent,Bed),
   			Time_From,
   			Time_Until)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',168).

 /*  not(holds_at(sleep5(Agent), Time)) :-
       holds_at(actOnSleep5(Agent), Time),
       holds_at(at(Agent, Room), Time),
       holds_at(at(Bed, Room), Time),
       not(happens(lieOn(Agent, Bed), Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',168).

 /*  pl=axiom(not(sleep5(Agent)),
         [ actOnSleep5(Agent),
   	at(Agent,Room),
   	at(Bed,Room),
   	not(lieOn(Agent,Bed))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',168).

 /*  (   actOnSleep5(Agent),
       at(Agent, Room),
       at(Bed, Room),
       not(lieOn(Agent, Bed))
   ->  not(sleep5(Agent))
   ).
 */
if actOnSleep5(Agent), loc_at(Agent, Room), loc_at(Bed, Room), not lieOn(Agent, Bed)then not sleep5(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',168).

 /*  reactive_rule([ actOnSleep5(Agent),
   		loc_at(Agent,Room),
   		loc_at(Bed,Room),
   		not(lieOn(Agent,Bed))
   	      ],
   	      [holds(not(sleep5(Agent)),Holds7)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',168).

 /*  reactive_rule([ actOnSleep5(Agent),
   		loc_at(Agent,Room),
   		loc_at(Bed,Room),
   		not(lieOn(Agent,Bed))
   	      ],
   	      [holds(not(sleep5(Agent)),Holds7)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',168).

 /*  not(holds_at(actOnSleep5(Agent), Time)) :-
       holds_at(at(Agent, Room), Time),
       holds_at(at(Bed, Room), Time),
       holds_at(sleep5(Agent), Time),
       not(happens(lieOn(Agent, Bed), Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',168).

 /*  pl=axiom(not(actOnSleep5(Agent)),
         [ at(Agent,Room),
   	at(Bed,Room),
   	sleep5(Agent),
   	not(lieOn(Agent,Bed))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',168).

 /*  (   at(Agent, Room),
       at(Bed, Room),
       sleep5(Agent),
       not(lieOn(Agent, Bed))
   ->  not(actOnSleep5(Agent))
   ).
 */
if loc_at(Agent, Room), loc_at(Bed, Room), sleep5(Agent), not lieOn(Agent, Bed)then not actOnSleep5(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',168).

 /*  reactive_rule([ loc_at(Agent,Room),
   		loc_at(Bed,Room),
   		holds(sleep5(Agent),Holds8),
   		not(lieOn(Agent,Bed))
   	      ],
   	      [not(actOnSleep5(Agent))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',168).

 /*  reactive_rule([ loc_at(Agent,Room),
   		loc_at(Bed,Room),
   		holds(sleep5(Agent),Holds8),
   		not(lieOn(Agent,Bed))
   	      ],
   	      [not(actOnSleep5(Agent))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',168).

 /*  not(holds_at(at(Agent, Room), Time)) :-
       holds_at(at(Bed, Room), Time),
       holds_at(actOnSleep5(Agent), Time),
       holds_at(sleep5(Agent), Time),
       not(happens(lieOn(Agent, Bed), Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',168).

 /*  pl=axiom(not(at(Agent,Room)),
         [ at(Bed,Room),
   	actOnSleep5(Agent),
   	sleep5(Agent),
   	not(lieOn(Agent,Bed))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',168).

 /*  (   at(Bed, Room),
       actOnSleep5(Agent),
       sleep5(Agent),
       not(lieOn(Agent, Bed))
   ->  not(at(Agent, Room))
   ).
 */
if loc_at(Bed, Room), actOnSleep5(Agent), sleep5(Agent), not lieOn(Agent, Bed)then not loc_at(Agent, Room).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',168).

 /*  reactive_rule([ loc_at(Bed,Room),
   		actOnSleep5(Agent),
   		holds(sleep5(Agent),Holds9),
   		not(lieOn(Agent,Bed))
   	      ],
   	      [not(loc_at(Agent,Room))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',168).

 /*  reactive_rule([ loc_at(Bed,Room),
   		actOnSleep5(Agent),
   		holds(sleep5(Agent),Holds9),
   		not(lieOn(Agent,Bed))
   	      ],
   	      [not(loc_at(Agent,Room))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',168).

 /*  not(holds_at(at(Bed, Room), Time)) :-
       holds_at(at(Agent, Room), Time),
       holds_at(actOnSleep5(Agent), Time),
       holds_at(sleep5(Agent), Time),
       not(happens(lieOn(Agent, Bed), Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',168).

 /*  pl=axiom(not(at(Bed,Room)),
         [ at(Agent,Room),
   	actOnSleep5(Agent),
   	sleep5(Agent),
   	not(lieOn(Agent,Bed))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',168).

 /*  (   at(Agent, Room),
       actOnSleep5(Agent),
       sleep5(Agent),
       not(lieOn(Agent, Bed))
   ->  not(at(Bed, Room))
   ).
 */
if loc_at(Agent, Room), actOnSleep5(Agent), sleep5(Agent), not lieOn(Agent, Bed)then not loc_at(Bed, Room).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',168).

 /*  reactive_rule([ loc_at(Agent,Room),
   		actOnSleep5(Agent),
   		holds(sleep5(Agent),Holds10),
   		not(lieOn(Agent,Bed))
   	      ],
   	      [not(loc_at(Bed,Room))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',168).

 /*  reactive_rule([ loc_at(Agent,Room),
   		actOnSleep5(Agent),
   		holds(sleep5(Agent),Holds10),
   		not(lieOn(Agent,Bed))
   	      ],
   	      [not(loc_at(Bed,Room))]).
 */


%; A precondition axiom states that for
%; an agent to lie on a bed,
%; the agent must be in state Sleep5,
%; the agent must act on this state, and
%; there must be a room such that
%; the agent is in the room and the bed is in the room:
% [agent,bed,time]
% Happens(LieOn(agent,bed),time) ->
% HoldsAt(Sleep5(agent),time) &
% HoldsAt(ActOnSleep5(agent),time) &
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',181).
% {room}% 
%  HoldsAt(At(agent,room),time) &
%  HoldsAt(At(bed,room),time).
 %  clausify_pnf=exists([Room],  (happens(lieOn(Agent, Bed), Time)->holds_at(sleep5(Agent), Time), holds_at(actOnSleep5(Agent), Time), holds_at(at(Agent, Room), Time), holds_at(at(Bed, Room), Time))).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',185).

 /*  not(happens(lieOn(Agent, Bed), Time)) :-
       (   not(holds_at(sleep5(Agent), Time))
       ;   not(holds_at(actOnSleep5(Agent), Time))
       ;   not(holds_at(at(Agent, Exists_Room), Time))
       ;   not(holds_at(at(Bed, Exists_Room), Time))
       ),
       some(Exists_Room, '$kolem_Fn_62'(Agent, Bed, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',185).

 /*  fix_axiom_head(Time) ->
       [ not(happens(lieOn(Agent, Bed), Time)),
          (->),
         not(lieOn(Agent, Bed))
       ].
 */
 %   pl=axiom(not(lieOn(Agent, Bed)), [(not(sleep5(Agent));not(actOnSleep5(Agent));not(at(Agent, Exists_Room));not(at(Bed, Exists_Room))), some(Exists_Room, '$kolem_Fn_62'(Agent, Bed, Time))]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',185).

 /*  (   (   not(sleep5(Agent))
       ;   not(actOnSleep5(Agent))
       ;   not(at(Agent, Exists_Room))
       ;   not(at(Bed, Exists_Room))
       ),
       some(Exists_Room, '$kolem_Fn_62'(Agent, Bed, Time))
   ->  not(lieOn(Agent, Bed))
   ).
 */
if (not sleep5(Agent);not actOnSleep5(Agent);not loc_at(Agent, Exists_Room);not loc_at(Bed, Exists_Room)), some(Exists_Room, '$kolem_Fn_62'(Agent, Bed, Time))then not lieOn(Agent, Bed).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',185).

 /*   reactive_rule([  (not(sleep5(Agent));not(actOnSleep5(Agent));not(loc_at(Agent, Exists_Room));not(loc_at(Bed, Exists_Room))),
                      some(Exists_Room,
                           '$kolem_Fn_62'(Agent, Bed, Time))
                    ],
                    [not(lieOn(Agent, Bed))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',185).

 /*   reactive_rule([  (not(sleep5(Agent));not(actOnSleep5(Agent));not(loc_at(Agent, Exists_Room));not(loc_at(Bed, Exists_Room))),
                      some(Exists_Room,
                           '$kolem_Fn_62'(Agent, Bed, Time))
                    ],
                    [not(lieOn(Agent, Bed))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',185).

 /*  holds_at(sleep5(Agent), Time) :-
       happens(lieOn(Agent, Bed), Time),
       some(Exists_Room, '$kolem_Fn_62'(Agent, Bed, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',185).

 /*  fix_axiom_head(Time) ->
       [holds_at(sleep5(Agent), Time), ->, sleep5(Agent)].
 */

 /*  pl=axiom(sleep5(Agent),
         [ lieOn(Agent,Bed),
   	some(Exists_Room,
   	     '$kolem_Fn_62'(Agent,Bed,Time))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',185).

 /*  (   lieOn(Agent, Bed),
       some(Exists_Room, '$kolem_Fn_62'(Agent, Bed, Time))
   ->  sleep5(Agent)
   ).
 */
if lieOn(Agent, Bed), some(Exists_Room, '$kolem_Fn_62'(Agent, Bed, Time))then sleep5(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',185).

 /*  reactive_rule([ happens(lieOn(Agent,Bed),
   			Time_From,
   			Time_Until),
   		some(Exists_Room,
   		     '$kolem_Fn_62'(Agent,Bed,Time))
   	      ],
   	      [holds(sleep5(Agent),Holds)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',185).

 /*  reactive_rule([ happens(lieOn(Agent,Bed),
   			Time_From,
   			Time_Until),
   		some(Exists_Room,
   		     '$kolem_Fn_62'(Agent,Bed,Time))
   	      ],
   	      [holds(sleep5(Agent),Holds)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',185).

 /*  holds_at(actOnSleep5(Agent), Time) :-
       happens(lieOn(Agent, Bed), Time),
       some(Exists_Room, '$kolem_Fn_62'(Agent, Bed, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',185).

 /*  fix_axiom_head(Time) ->
       [ holds_at(actOnSleep5(Agent), Time),
          (->),
         actOnSleep5(Agent)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',185).

 /*  pl=axiom(actOnSleep5(Agent),
         [ lieOn(Agent,Bed),
   	some(Exists_Room,
   	     '$kolem_Fn_62'(Agent,Bed,Time))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',185).

 /*  (   lieOn(Agent, Bed),
       some(Exists_Room, '$kolem_Fn_62'(Agent, Bed, Time))
   ->  actOnSleep5(Agent)
   ).
 */
if lieOn(Agent, Bed), some(Exists_Room, '$kolem_Fn_62'(Agent, Bed, Time))then actOnSleep5(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',185).

 /*  reactive_rule([ happens(lieOn(Agent,Bed),
   			Time_From8,
   			Time_Until9),
   		some(Exists_Room,
   		     '$kolem_Fn_62'(Agent,Bed,Time))
   	      ],
   	      [actOnSleep5(Agent)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',185).

 /*  reactive_rule([ happens(lieOn(Agent,Bed),
   			Time_From8,
   			Time_Until9),
   		some(Exists_Room,
   		     '$kolem_Fn_62'(Agent,Bed,Time))
   	      ],
   	      [actOnSleep5(Agent)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',185).

 /*  holds_at(at(Agent, Exists_Room), Time) :-
       happens(lieOn(Agent, Bed), Time),
       some(Exists_Room, '$kolem_Fn_62'(Agent, Bed, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',185).

 /*  fix_axiom_head(Time) ->
       [ holds_at(at(Agent, Exists_Room), Time),
          (->),
         at(Agent, Exists_Room)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',185).

 /*  pl=axiom(at(Agent,Exists_Room),
         [ lieOn(Agent,Bed),
   	some(Exists_Room,
   	     '$kolem_Fn_62'(Agent,Bed,Time))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',185).

 /*  (   lieOn(Agent, Bed),
       some(Exists_Room, '$kolem_Fn_62'(Agent, Bed, Time))
   ->  at(Agent, Exists_Room)
   ).
 */
if lieOn(Agent, Bed), some(Exists_Room, '$kolem_Fn_62'(Agent, Bed, Time))then loc_at(Agent, Exists_Room).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',185).

 /*  reactive_rule([ happens(lieOn(Agent,Bed),
   			Time_From10,
   			Time_Until11),
   		some(Exists_Room,
   		     '$kolem_Fn_62'(Agent,Bed,Time))
   	      ],
   	      [loc_at(Agent,Exists_Room)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',185).

 /*  reactive_rule([ happens(lieOn(Agent,Bed),
   			Time_From10,
   			Time_Until11),
   		some(Exists_Room,
   		     '$kolem_Fn_62'(Agent,Bed,Time))
   	      ],
   	      [loc_at(Agent,Exists_Room)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',185).

 /*  holds_at(at(Bed, Exists_Room), Time) :-
       happens(lieOn(Agent, Bed), Time),
       some(Exists_Room, '$kolem_Fn_62'(Agent, Bed, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',185).

 /*  fix_axiom_head(Time) ->
       [ holds_at(at(Bed, Exists_Room), Time),
          (->),
         at(Bed, Exists_Room)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',185).

 /*  pl=axiom(at(Bed,Exists_Room),
         [ lieOn(Agent,Bed),
   	some(Exists_Room,
   	     '$kolem_Fn_62'(Agent,Bed,Time))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',185).

 /*  (   lieOn(Agent, Bed),
       some(Exists_Room, '$kolem_Fn_62'(Agent, Bed, Time))
   ->  at(Bed, Exists_Room)
   ).
 */
if lieOn(Agent, Bed), some(Exists_Room, '$kolem_Fn_62'(Agent, Bed, Time))then loc_at(Bed, Exists_Room).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',185).

 /*  reactive_rule([ happens(lieOn(Agent,Bed),
   			Time_From12,
   			Time_Until13),
   		some(Exists_Room,
   		     '$kolem_Fn_62'(Agent,Bed,Time))
   	      ],
   	      [loc_at(Bed,Exists_Room)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',185).

 /*  reactive_rule([ happens(lieOn(Agent,Bed),
   			Time_From12,
   			Time_Until13),
   		some(Exists_Room,
   		     '$kolem_Fn_62'(Agent,Bed,Time))
   	      ],
   	      [loc_at(Bed,Exists_Room)]).
 */


%; (body) posture
%; agent lies on physobj.

% event LieOn(agent,physobj)
 %  blue=event(lieOn(agent,physobj)).
 %  event(lieOn(agent,physobj)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',191).
actions([lieOn/2]).
 %  actions([lieOn/2]).
mpred_prop(lieOn(agent,physobj),event).
 %  mpred_prop(lieOn(agent,physobj),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',194).
%; agent sits on physobj.

% event SitOn(agent,physobj)
 %  blue=event(sitOn(agent,physobj)).
 %  event(sitOn(agent,physobj)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',194).
actions([sitOn/2]).
 %  actions([sitOn/2]).
mpred_prop(sitOn(agent,physobj),event).
 %  mpred_prop(sitOn(agent,physobj),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',197).
% [agent,physobj,time]
% Happens(SitOn(agent,physobj),time) ->
% {location}% 
%  HoldsAt(At(agent,location),time) &
%  HoldsAt(At(physobj,location),time).
 %  clausify_pnf=exists([Location],  (happens(sitOn(Agent, Physobj), Time)->holds_at(at(Agent, Location), Time), holds_at(at(Physobj, Location), Time))).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',199).

 /*  not(happens(sitOn(Agent, Physobj), Time)) :-
       (   not(holds_at(at(Agent, Exists_Location), Time))
       ;   not(holds_at(at(Physobj, Exists_Location), Time))
       ),
       some(Exists_Location,
            '$kolem_Fn_63'(Agent, Physobj, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',199).

 /*  fix_axiom_head(Time) ->
       [ not(happens(sitOn(Agent, Physobj), Time)),
          (->),
         not(sitOn(Agent, Physobj))
       ].
 */
 %   pl=axiom(not(sitOn(Agent, Physobj)), [(not(at(Agent, Exists_Location));not(at(Physobj, Exists_Location))), some(Exists_Location, '$kolem_Fn_63'(Agent, Physobj, Time))]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',199).

 /*  (   (   not(at(Agent, Exists_Location))
       ;   not(at(Physobj, Exists_Location))
       ),
       some(Exists_Location,
            '$kolem_Fn_63'(Agent, Physobj, Time))
   ->  not(sitOn(Agent, Physobj))
   ).
 */
if (not loc_at(Agent, Exists_Location);not loc_at(Physobj, Exists_Location)), some(Exists_Location, '$kolem_Fn_63'(Agent, Physobj, Time))then not sitOn(Agent, Physobj).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',199).

 /*   reactive_rule([  (not(loc_at(Agent, Exists_Location));not(loc_at(Physobj, Exists_Location))),
                      some(Exists_Location,
                           '$kolem_Fn_63'(Agent, Physobj, Time))
                    ],
                    [not(sitOn(Agent, Physobj))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',199).

 /*   reactive_rule([  (not(loc_at(Agent, Exists_Location));not(loc_at(Physobj, Exists_Location))),
                      some(Exists_Location,
                           '$kolem_Fn_63'(Agent, Physobj, Time))
                    ],
                    [not(sitOn(Agent, Physobj))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',199).

 /*  holds_at(at(Agent, Exists_Location), Time) :-
       happens(sitOn(Agent, Physobj), Time),
       some(Exists_Location,
            '$kolem_Fn_63'(Agent, Physobj, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',199).

 /*  fix_axiom_head(Time) ->
       [ holds_at(at(Agent, Exists_Location), Time),
          (->),
         at(Agent, Exists_Location)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',199).

 /*  pl=axiom(at(Agent,Exists_Location),
         [ sitOn(Agent,Physobj),
   	some(Exists_Location,
   	     '$kolem_Fn_63'(Agent,Physobj,Time))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',199).

 /*  (   sitOn(Agent, Physobj),
       some(Exists_Location,
            '$kolem_Fn_63'(Agent, Physobj, Time))
   ->  at(Agent, Exists_Location)
   ).
 */
if sitOn(Agent, Physobj), some(Exists_Location, '$kolem_Fn_63'(Agent, Physobj, Time))then loc_at(Agent, Exists_Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',199).

 /*  reactive_rule([ happens(sitOn(Agent,Physobj),
   			Time_From,
   			Time_Until),
   		some(Exists_Location,
   		     '$kolem_Fn_63'(Agent,Physobj,Time))
   	      ],
   	      [loc_at(Agent,Exists_Location)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',199).

 /*  reactive_rule([ happens(sitOn(Agent,Physobj),
   			Time_From,
   			Time_Until),
   		some(Exists_Location,
   		     '$kolem_Fn_63'(Agent,Physobj,Time))
   	      ],
   	      [loc_at(Agent,Exists_Location)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',199).

 /*  holds_at(at(Physobj, Exists_Location), Time) :-
       happens(sitOn(Agent, Physobj), Time),
       some(Exists_Location,
            '$kolem_Fn_63'(Agent, Physobj, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',199).

 /*  fix_axiom_head(Time) ->
       [ holds_at(at(Physobj, Exists_Location), Time),
          (->),
         at(Physobj, Exists_Location)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',199).

 /*  pl=axiom(at(Physobj,Exists_Location),
         [ sitOn(Agent,Physobj),
   	some(Exists_Location,
   	     '$kolem_Fn_63'(Agent,Physobj,Time))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',199).

 /*  (   sitOn(Agent, Physobj),
       some(Exists_Location,
            '$kolem_Fn_63'(Agent, Physobj, Time))
   ->  at(Physobj, Exists_Location)
   ).
 */
if sitOn(Agent, Physobj), some(Exists_Location, '$kolem_Fn_63'(Agent, Physobj, Time))then loc_at(Physobj, Exists_Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',199).

 /*  reactive_rule([ happens(sitOn(Agent,Physobj),
   			Time_From7,
   			Time_Until8),
   		some(Exists_Location,
   		     '$kolem_Fn_63'(Agent,Physobj,Time))
   	      ],
   	      [loc_at(Physobj,Exists_Location)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',199).

 /*  reactive_rule([ happens(sitOn(Agent,Physobj),
   			Time_From7,
   			Time_Until8),
   		some(Exists_Location,
   		     '$kolem_Fn_63'(Agent,Physobj,Time))
   	      ],
   	      [loc_at(Physobj,Exists_Location)]).
 */


%; agent rises from physobj.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',204).
% event RiseFrom(agent,physobj)
 %  blue=event(riseFrom(agent,physobj)).
 %  event(riseFrom(agent,physobj)).
actions([riseFrom/2]).
 %  actions([riseFrom/2]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',204).
mpred_prop(riseFrom(agent,physobj),event).
 %  mpred_prop(riseFrom(agent,physobj),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',206).
%; agent is lying on physobj.

% fluent LyingOn(agent,physobj)
 %  blue=fluent(lyingOn(agent,physobj)).
 %  fluent(lyingOn(agent,physobj)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',206).
fluents([lyingOn/2]).
 %  fluents([lyingOn/2]).
mpred_prop(lyingOn(agent,physobj),fluent).
 %  mpred_prop(lyingOn(agent,physobj),fluent).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',206).
%; agent is sitting on physobj.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',209).
% fluent SittingOn(agent,physobj)
 %  blue=fluent(sittingOn(agent,physobj)).
 %  fluent(sittingOn(agent,physobj)).
fluents([sittingOn/2]).
 %  fluents([sittingOn/2]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',209).
mpred_prop(sittingOn(agent,physobj),fluent).
 %  mpred_prop(sittingOn(agent,physobj),fluent).


%; agent is standing.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',211).
% fluent Standing(agent)
 %  blue=fluent(standing(agent)).
 %  fluent(standing(agent)).
fluents([standing/1]).
 %  fluents([standing/1]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',211).
mpred_prop(standing(agent),fluent).
 %  mpred_prop(standing(agent),fluent).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',213).
%; agent is lying down.

% fluent Lying(agent)
 %  blue=fluent(lying(agent)).
 %  fluent(lying(agent)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',213).
fluents([lying/1]).
 %  fluents([lying/1]).
mpred_prop(lying(agent),fluent).
 %  mpred_prop(lying(agent),fluent).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',213).
%; agent is sitting.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',216).
% fluent Sitting(agent)
 %  blue=fluent(sitting(agent)).
 %  fluent(sitting(agent)).
fluents([sitting/1]).
 %  fluents([sitting/1]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',216).
mpred_prop(sitting(agent),fluent).
 %  mpred_prop(sitting(agent),fluent).

% noninertial Lying
noninertial(lying).
 %  noninertial(lying).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',218).
% noninertial Sitting
noninertial(sitting).
 %  noninertial(sitting).
%; At any time, an agent is either lying, sitting, or standing:

% xor Lying, Sitting, Standing
 %  red = ==>xor[lying,sitting,standing].
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',220).
==>xor[lying,sitting,standing].
 %  ==>xor[lying,sitting,standing].


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',223).
% [agent,physobj,time]
% HoldsAt(LyingOn(agent,physobj),time) ->
% HoldsAt(Lying(agent),time).
 %  clausify_pnf=(holds_at(lyingOn(Agent, Physobj), Time)->holds_at(lying(Agent), Time)).

 /*  holds_at(lying(Agent), Time) :-
       holds_at(lyingOn(Agent, Physobj), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',223).

 /*  fix_axiom_head(Time) ->
       [holds_at(lying(Agent), Time), ->, lying(Agent)].
 */
 %  pl=axiom(lying(Agent),[lyingOn(Agent,Physobj)]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',223).

 /*  lyingOn(Agent, Physobj) ->
       lying(Agent).
 */
if lyingOn(Agent, Physobj)then lying(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',223).

 /*  reactive_rule([lyingOn(Agent,Physobj)],
   	      [lying(Agent)]).
 */

 /*  reactive_rule([lyingOn(Agent,Physobj)],
   	      [lying(Agent)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',223).

 /*  not(holds_at(lyingOn(Agent, Physobj), Time)) :-
       not(holds_at(lying(Agent), Time)).
 */

 /*  pl=axiom(not(lyingOn(Agent,Physobj)),
         [not(lying(Agent))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',223).

 /*  not(lying(Agent)) ->
       not(lyingOn(Agent, Physobj)).
 */
if not lying(Agent)then not lyingOn(Agent, Physobj).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',223).

 /*  reactive_rule([not(lying(Agent))],
   	      [not(lyingOn(Agent,Physobj))]).
 */

 /*  reactive_rule([not(lying(Agent))],
   	      [not(lyingOn(Agent,Physobj))]).
 */


% [agent,physobj,time]
% HoldsAt(SittingOn(agent,physobj),time) ->
% HoldsAt(Sitting(agent),time).
 %  clausify_pnf=(holds_at(sittingOn(Agent, Physobj), Time)->holds_at(sitting(Agent), Time)).

 /*  holds_at(sitting(Agent), Time) :-
       holds_at(sittingOn(Agent, Physobj), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',228).

 /*  fix_axiom_head(Time) ->
       [holds_at(sitting(Agent), Time), ->, sitting(Agent)].
 */
 %  pl=axiom(sitting(Agent),[sittingOn(Agent,Physobj)]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',228).

 /*  sittingOn(Agent, Physobj) ->
       sitting(Agent).
 */
if sittingOn(Agent, Physobj)then sitting(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',228).

 /*  reactive_rule([sittingOn(Agent,Physobj)],
   	      [sitting(Agent)]).
 */

 /*  reactive_rule([sittingOn(Agent,Physobj)],
   	      [sitting(Agent)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',228).

 /*  not(holds_at(sittingOn(Agent, Physobj), Time)) :-
       not(holds_at(sitting(Agent), Time)).
 */

 /*  pl=axiom(not(sittingOn(Agent,Physobj)),
         [not(sitting(Agent))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',228).

 /*  not(sitting(Agent)) ->
       not(sittingOn(Agent, Physobj)).
 */
if not sitting(Agent)then not sittingOn(Agent, Physobj).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',228).

 /*  reactive_rule([not(sitting(Agent))],
   	      [not(sittingOn(Agent,Physobj))]).
 */

 /*  reactive_rule([not(sitting(Agent))],
   	      [not(sittingOn(Agent,Physobj))]).
 */


%; State constraints represent that an agent can lie or sit
%; on at most one object at a time:
% [agent,physobj1,physobj2,time]
% HoldsAt(LyingOn(agent,physobj1),time) &
% HoldsAt(LyingOn(agent,physobj2),time) ->
% physobj1=physobj2.
 %  clausify_pnf=(holds_at(lyingOn(Agent, Physobj1), Time), holds_at(lyingOn(Agent, Physobj2), Time)->equals(Physobj1, Physobj2)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',233).

 /*  not(holds_at(lyingOn(Agent, Physobj1), Time)) :-
       holds_at(lyingOn(Agent, Physobj2), Time),
       not(equals(Physobj1, Physobj2)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',233).

 /*  pl=axiom(not(lyingOn(Agent,Physobj1)),
         [ lyingOn(Agent,Physobj2),
   	not(equals(Physobj1,Physobj2))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',233).

 /*  (   lyingOn(Agent, Physobj2),
       not(equals(Physobj1, Physobj2))
   ->  not(lyingOn(Agent, Physobj1))
   ).
 */
if lyingOn(Agent, Physobj2), not equals(Physobj1, Physobj2)then not lyingOn(Agent, Physobj1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',233).

 /*  reactive_rule([ lyingOn(Agent,Physobj2),
   		not(equals(Physobj1,Physobj2))
   	      ],
   	      [not(lyingOn(Agent,Physobj1))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',233).

 /*  reactive_rule([ lyingOn(Agent,Physobj2),
   		not(equals(Physobj1,Physobj2))
   	      ],
   	      [not(lyingOn(Agent,Physobj1))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',233).

 /*  not(holds_at(lyingOn(Agent, Physobj2), Time)) :-
       holds_at(lyingOn(Agent, Physobj1), Time),
       not(equals(Physobj1, Physobj2)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',233).

 /*  pl=axiom(not(lyingOn(Agent,Physobj2)),
         [ lyingOn(Agent,Physobj1),
   	not(equals(Physobj2,Physobj1))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',233).

 /*  (   lyingOn(Agent, Physobj1),
       not(equals(Physobj2, Physobj1))
   ->  not(lyingOn(Agent, Physobj2))
   ).
 */
if lyingOn(Agent, Physobj1), not equals(Physobj2, Physobj1)then not lyingOn(Agent, Physobj2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',233).

 /*  reactive_rule([ lyingOn(Agent,Physobj1),
   		not(equals(Physobj2,Physobj1))
   	      ],
   	      [not(lyingOn(Agent,Physobj2))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',233).

 /*  reactive_rule([ lyingOn(Agent,Physobj1),
   		not(equals(Physobj2,Physobj1))
   	      ],
   	      [not(lyingOn(Agent,Physobj2))]).
 */


% [agent,physobj1,physobj2,time]
% HoldsAt(SittingOn(agent,physobj1),time) &
% HoldsAt(SittingOn(agent,physobj2),time) ->
% physobj1=physobj2.
 %  clausify_pnf=(holds_at(sittingOn(Agent, Physobj1), Time), holds_at(sittingOn(Agent, Physobj2), Time)->equals(Physobj1, Physobj2)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',239).

 /*  not(holds_at(sittingOn(Agent, Physobj1), Time)) :-
       holds_at(sittingOn(Agent, Physobj2), Time),
       not(equals(Physobj1, Physobj2)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',239).

 /*  pl=axiom(not(sittingOn(Agent,Physobj1)),
         [ sittingOn(Agent,Physobj2),
   	not(equals(Physobj1,Physobj2))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',239).

 /*  (   sittingOn(Agent, Physobj2),
       not(equals(Physobj1, Physobj2))
   ->  not(sittingOn(Agent, Physobj1))
   ).
 */
if sittingOn(Agent, Physobj2), not equals(Physobj1, Physobj2)then not sittingOn(Agent, Physobj1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',239).

 /*  reactive_rule([ sittingOn(Agent,Physobj2),
   		not(equals(Physobj1,Physobj2))
   	      ],
   	      [not(sittingOn(Agent,Physobj1))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',239).

 /*  reactive_rule([ sittingOn(Agent,Physobj2),
   		not(equals(Physobj1,Physobj2))
   	      ],
   	      [not(sittingOn(Agent,Physobj1))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',239).

 /*  not(holds_at(sittingOn(Agent, Physobj2), Time)) :-
       holds_at(sittingOn(Agent, Physobj1), Time),
       not(equals(Physobj1, Physobj2)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',239).

 /*  pl=axiom(not(sittingOn(Agent,Physobj2)),
         [ sittingOn(Agent,Physobj1),
   	not(equals(Physobj2,Physobj1))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',239).

 /*  (   sittingOn(Agent, Physobj1),
       not(equals(Physobj2, Physobj1))
   ->  not(sittingOn(Agent, Physobj2))
   ).
 */
if sittingOn(Agent, Physobj1), not equals(Physobj2, Physobj1)then not sittingOn(Agent, Physobj2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',239).

 /*  reactive_rule([ sittingOn(Agent,Physobj1),
   		not(equals(Physobj2,Physobj1))
   	      ],
   	      [not(sittingOn(Agent,Physobj2))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',239).

 /*  reactive_rule([ sittingOn(Agent,Physobj1),
   		not(equals(Physobj2,Physobj1))
   	      ],
   	      [not(sittingOn(Agent,Physobj2))]).
 */


%; An effect axiom states that if an agent is standing and
%; lies on a physical object, the agent will be lying on
%; the physical object:
% [agent,physobj,time]
% HoldsAt(Standing(agent),time) ->
% Initiates(LieOn(agent,physobj),
%           LyingOn(agent,physobj),
%           time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',246).

 /*  pl=axiom(initiates(lieOn(Agent,Physobj),
   		lyingOn(Agent,Physobj),
   		Time),
         [standing(Agent)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',246).

 /*  standing(Agent) ->
       initiates(lieOn(Agent, Physobj),
                 lyingOn(Agent, Physobj),
                 Time).
 */
if standing(Agent)then initiates(lieOn(Agent, Physobj), lyingOn(Agent, Physobj)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',246).

 /*  reactive_rule([holds(standing(Agent),Holds)],
   	      [ initiates(lieOn(Agent,Physobj),
   			  at(lyingOn(Agent,Physobj),
   			     Time),
   			  Initiates)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',246).

 /*  reactive_rule([holds(standing(Agent),Holds)],
   	      [ initiates(lieOn(Agent,Physobj),
   			  at(lyingOn(Agent,Physobj),
   			     Time),
   			  Initiates)
   	      ]).
 */


%; An effect axiom states that if an agent
%; lies on a physical object, the agent will no longer
%; be standing:
% [agent,physobj,time]
% Terminates(LieOn(agent,physobj),
%            Standing(agent),
%            time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',255).

 /*  pl=axiom(terminates(lieOn(Agent,Physobj),
   		 standing(Agent),
   		 Time),
         []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',255).

 /*  terminates(lieOn(Agent,Physobj),
   	   standing(Agent),
   	   Time).
 */
lieOn(Agent, Physobj)terminates standing(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',255).

 /*  terminated(happens(lieOn(Agent,Physobj),
   		   Time_From,
   		   Time_Until),
   	   standing(Agent),
   	   []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',255).

 /*  terminated(happens(lieOn(Agent,Physobj),
   		   Time_From,
   		   Time_Until),
   	   standing(Agent),
   	   []).
 */


%; An effect axiom states that if an agent is standing and
%; sits on a physical object, the agent will be sitting on
%; the physical object:
% [agent,physobj,time]
% HoldsAt(Standing(agent),time) ->
% Initiates(SitOn(agent,physobj),
%           SittingOn(agent,physobj),
%           time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',263).

 /*  pl=axiom(initiates(sitOn(Agent,Physobj),
   		sittingOn(Agent,Physobj),
   		Time),
         [standing(Agent)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',263).

 /*  standing(Agent) ->
       initiates(sitOn(Agent, Physobj),
                 sittingOn(Agent, Physobj),
                 Time).
 */
if standing(Agent)then initiates(sitOn(Agent, Physobj), sittingOn(Agent, Physobj)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',263).

 /*  reactive_rule([holds(standing(Agent),Holds)],
   	      [ initiates(sitOn(Agent,Physobj),
   			  at(sittingOn(Agent,Physobj),
   			     Time),
   			  Initiates)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',263).

 /*  reactive_rule([holds(standing(Agent),Holds)],
   	      [ initiates(sitOn(Agent,Physobj),
   			  at(sittingOn(Agent,Physobj),
   			     Time),
   			  Initiates)
   	      ]).
 */


%; An effect axiom states that if an agent
%; sits on a physical object, the agent will no longer
%; be standing:
% [agent,physobj,time]
% Terminates(SitOn(agent,physobj),
%            Standing(agent),
%            time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',272).

 /*  pl=axiom(terminates(sitOn(Agent,Physobj),
   		 standing(Agent),
   		 Time),
         []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',272).

 /*  terminates(sitOn(Agent,Physobj),
   	   standing(Agent),
   	   Time).
 */
sitOn(Agent, Physobj)terminates standing(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',272).

 /*  terminated(happens(sitOn(Agent,Physobj),
   		   Time_From,
   		   Time_Until),
   	   standing(Agent),
   	   []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',272).

 /*  terminated(happens(sitOn(Agent,Physobj),
   		   Time_From,
   		   Time_Until),
   	   standing(Agent),
   	   []).
 */


%; An effect axiom states that if an agent
%; is sitting or lying on a physical object and
%; the agent rises from the physical object,
%; the agent will be standing:
% [agent,physobj,time]
% (HoldsAt(SittingOn(agent,physobj),time) |
%  HoldsAt(LyingOn(agent,physobj),time)) ->
% Initiates(RiseFrom(agent,physobj),
%           Standing(agent),
%           time).
 %   pl=axiom(initiates(riseFrom(Agent, Physobj), standing(Agent), Time), [(sittingOn(Agent, Physobj);lyingOn(Agent, Physobj))]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',281).

 /*  sittingOn(Agent, Physobj);lyingOn(Agent, Physobj) ->
       initiates(riseFrom(Agent, Physobj),
                 standing(Agent),
                 Time).
 */
if sittingOn(Agent, Physobj);lyingOn(Agent, Physobj)then initiates(riseFrom(Agent, Physobj), standing(Agent)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',281).

 /*   reactive_rule([  (sittingOn(Agent, Physobj);lyingOn(Agent, Physobj))
                    ],
                    [ initiates(riseFrom(Agent, Physobj),
                                at(standing(Agent), Time),
                                Initiates)
                    ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',281).

 /*   reactive_rule([  (sittingOn(Agent, Physobj);lyingOn(Agent, Physobj))
                    ],
                    [ initiates(riseFrom(Agent, Physobj),
                                at(standing(Agent), Time),
                                Initiates)
                    ]).
 */


%; An effect axiom states that if an agent is sitting on
%; a physical object and the agent rises from the physical
%; object, the agent will no longer be sitting on the
%; physical object:
% [agent,physobj,time]
% HoldsAt(SittingOn(agent,physobj),time) ->
% Terminates(RiseFrom(agent,physobj),
%            SittingOn(agent,physobj),
%            time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',292).

 /*  pl=axiom(terminates(riseFrom(Agent,Physobj),
   		 sittingOn(Agent,Physobj),
   		 Time),
         [sittingOn(Agent,Physobj)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',292).

 /*  sittingOn(Agent, Physobj) ->
       terminates(riseFrom(Agent, Physobj),
                  sittingOn(Agent, Physobj),
                  Time).
 */
if sittingOn(Agent, Physobj)then terminates(riseFrom(Agent, Physobj), sittingOn(Agent, Physobj)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',292).

 /*  reactive_rule([sittingOn(Agent,Physobj)],
   	      [ terminates(riseFrom(Agent,Physobj),
   			   at(sittingOn(Agent,Physobj),
   			      Time),
   			   Terminates)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',292).

 /*  reactive_rule([sittingOn(Agent,Physobj)],
   	      [ terminates(riseFrom(Agent,Physobj),
   			   at(sittingOn(Agent,Physobj),
   			      Time),
   			   Terminates)
   	      ]).
 */


%; An effect axiom states that if an agent is lying on
%; a physical object and the agent rises from the physical
%; object, the agent will no longer be lying on the
%; physical object:
% [agent,physobj,time]
% HoldsAt(LyingOn(agent,physobj),time) ->
% Terminates(RiseFrom(agent,physobj),
%            LyingOn(agent,physobj),
%            time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',302).

 /*  pl=axiom(terminates(riseFrom(Agent,Physobj),
   		 lyingOn(Agent,Physobj),
   		 Time),
         [lyingOn(Agent,Physobj)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',302).

 /*  lyingOn(Agent, Physobj) ->
       terminates(riseFrom(Agent, Physobj),
                  lyingOn(Agent, Physobj),
                  Time).
 */
if lyingOn(Agent, Physobj)then terminates(riseFrom(Agent, Physobj), lyingOn(Agent, Physobj)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',302).

 /*  reactive_rule([lyingOn(Agent,Physobj)],
   	      [ terminates(riseFrom(Agent,Physobj),
   			   at(lyingOn(Agent,Physobj),
   			      Time),
   			   Terminates)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',302).

 /*  reactive_rule([lyingOn(Agent,Physobj)],
   	      [ terminates(riseFrom(Agent,Physobj),
   			   at(lyingOn(Agent,Physobj),
   			      Time),
   			   Terminates)
   	      ]).
 */


%; dressing
%; agent gets undressed.

% event GetDressed(agent)
 %  blue=event(getDressed(agent)).
 %  event(getDressed(agent)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',310).
actions([getDressed/1]).
 %  actions([getDressed/1]).
mpred_prop(getDressed(agent),event).
 %  mpred_prop(getDressed(agent),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',310).
%; agent gets dressed.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',313).
% event GetUndressed(agent)
 %  blue=event(getUndressed(agent)).
 %  event(getUndressed(agent)).
actions([getUndressed/1]).
 %  actions([getUndressed/1]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',313).
mpred_prop(getUndressed(agent),event).
 %  mpred_prop(getUndressed(agent),event).


%; agent is dressed.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',315).
% fluent Dressed(agent)
 %  blue=fluent(dressed(agent)).
 %  fluent(dressed(agent)).
fluents([dressed/1]).
 %  fluents([dressed/1]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',315).
mpred_prop(dressed(agent),fluent).
 %  mpred_prop(dressed(agent),fluent).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',317).
%; Effect axioms deal with getting dressed and undressed:
% [agent,time]
 % Initiates(GetDressed(agent),Dressed(agent),time).

 /*  pl=axiom(initiates(getDressed(Agent),
   		dressed(Agent),
   		Time),
         []).
 */
 %  initiates(getDressed(Agent),dressed(Agent),Time).
getDressed(Agent)initiates dressed(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',317).

 /*  initiated(happens(getDressed(Agent),
   		  Time_From,
   		  Time_Until),
   	  dressed(Agent),
   	  []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',317).

 /*  initiated(happens(getDressed(Agent),
   		  Time_From,
   		  Time_Until),
   	  dressed(Agent),
   	  []).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',319).
% [agent,time]
 % Terminates(GetUndressed(agent),Dressed(agent),time).

 /*  pl=axiom(terminates(getUndressed(Agent),
   		 dressed(Agent),
   		 Time),
         []).
 */
 %  terminates(getUndressed(Agent),dressed(Agent),Time).
getUndressed(Agent)terminates dressed(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',319).

 /*  terminated(happens(getUndressed(Agent),
   		   Time_From,
   		   Time_Until),
   	   dressed(Agent),
   	   []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',319).

 /*  terminated(happens(getUndressed(Agent),
   		   Time_From,
   		   Time_Until),
   	   dressed(Agent),
   	   []).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',321).
%; End of file.
% translate: ending  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e.lps 
