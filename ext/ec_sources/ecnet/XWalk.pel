:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/WritingABook.e',97).
:- call_pel_directive(translate(unskipped,
                                '/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.pel')).
:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(ecalc).
:- call_pel_directive(translate(begining,
                                '/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.pel')).
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; XWalk: WALK x-schema representation of walking
%;
%; @phdthesis{Narayanan:1997,
%;   author = "Srinivas S. Narayanan",
%;   year = "1997",
%;   title = "Knowledge-based Action Representations for Metaphor and Aspect (\uppercase{KARMA})",
%;   address = "Berkeley, CA",
%;   school = "University of California, Berkeley",
%; }
%;

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',22).
% option trajectory on
:- call_pel_directive(option(trajectory, on)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',24).
% sort xschema
sort(xschema).
%; parameters

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',28).
% predicate XWalkAgent(xschema,agent)
predicate(xWalkAgent(xschema,agent)).

% function XWalkRate(xschema): offset ; step duration
function(xWalkRate(xschema),[offset,;,step,duration]).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',30).
% function XWalkSize(xschema): offset ; step size
function(xWalkSize(xschema),[offset,;,step,size]).
%; TTL input lines

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',34).
% fluent XWalkEnabled(xschema)
fluent(xWalkEnabled(xschema)).

% fluent XWalkGroundStable(xschema)
fluent(xWalkGroundStable(xschema)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',36).
% fluent XWalkPosture(xschema)
fluent(xWalkPosture(xschema)).

% fluent XWalkFootingOK(xschema)
fluent(xWalkFootingOK(xschema)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',38).
% noninertial XWalkEnabled, XWalkGroundStable, XWalkPosture, XWalkFootingOK
:- call_pel_directive(noninertial(xWalkEnabled)).
:- call_pel_directive(noninertial(xWalkGroundStable)).
:- call_pel_directive(noninertial(xWalkPosture)).
:- call_pel_directive(noninertial(xWalkFootingOK)).
%; fluents

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',42).
% fluent XWalkDistance(xschema,distance)
fluent(xWalkDistance(xschema,distance)).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',44).
% [xschema,distance1,distance2,time]
% HoldsAt(XWalkDistance(xschema,distance1),time) &
% HoldsAt(XWalkDistance(xschema,distance2),time) ->
% distance1=distance2.
holds_at(xWalkDistance(Xschema, Distance1), Time), holds_at(xWalkDistance(Xschema, Distance2), Time) ->
    Distance1=Distance2.


%; logic gate behavior

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',51).
% fluent XWalkVision(xschema)
fluent(xWalkVision(xschema)).

% fluent XWalkVisionOK(xschema)
fluent(xWalkVisionOK(xschema)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',53).
% fluent XWalkAtDestination(xschema)
fluent(xWalkAtDestination(xschema)).

% fluent XWalkDone(xschema)
fluent(xWalkDone(xschema)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',55).
% noninertial XWalkVision, XWalkVisionOK, XWalkAtDestination, XWalkDone
:- call_pel_directive(noninertial(xWalkVision)).
:- call_pel_directive(noninertial(xWalkVisionOK)).
:- call_pel_directive(noninertial(xWalkAtDestination)).
:- call_pel_directive(noninertial(xWalkDone)).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',57).
% [xschema,time]
% HoldsAt(XWalkGroundStable(xschema),time) <->
% HoldsAt(XWalkVision(xschema),time).
holds_at(xWalkGroundStable(Xschema), Time) <->
    holds_at(xWalkVision(Xschema), Time).


% [xschema,time]
% HoldsAt(XWalkEnabled(xschema),time) &
% HoldsAt(XWalkVision(xschema),time) &
% HoldsAt(XWalkPosture(xschema),time) <->
% HoldsAt(XWalkVisionOK(xschema),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',62).
holds_at(xWalkEnabled(Xschema), Time), holds_at(xWalkVision(Xschema), Time), holds_at(xWalkPosture(Xschema), Time) <->
    holds_at(xWalkVisionOK(Xschema), Time).


% [xschema,time]
% HoldsAt(XWalkDistance(xschema,0),time) <->
% HoldsAt(XWalkAtDestination(xschema),time).
holds_at(xWalkDistance(Xschema, 0), Time) <->
    holds_at(xWalkAtDestination(Xschema), Time).


% [xschema,time]
% HoldsAt(XWalkAtDestination(xschema),time) <->
% HoldsAt(XWalkDone(xschema),time).
holds_at(xWalkAtDestination(Xschema), Time) <->
    holds_at(xWalkDone(Xschema), Time).


%; durative events
%; distance is the goal

% fluent XWalkStepping(xschema,distance) 
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',77).
fluent(xWalkStepping(xschema,distance)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',79).
% event XWalkSteppingOn(xschema)
event(xWalkSteppingOn(xschema)).

% event XWalkSteppingOff(xschema)
event(xWalkSteppingOff(xschema)).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',82).
% [xschema,distance1,distance2,time]
% HoldsAt(XWalkDistance(xschema,distance1),time) &
% distance2 = distance1 - XWalkSize(xschema) ->
% Initiates(XWalkSteppingOn(xschema),XWalkStepping(xschema,distance2),time).
holds_at(xWalkDistance(Xschema, Distance1), Time), Distance2=Distance1-xWalkSize(Xschema) ->
    initiates_at(xWalkSteppingOn(Xschema),
                 xWalkStepping(Xschema, Distance2),
                 Time).


% [xschema,distance,time]
% Terminates(XWalkSteppingOff(xschema),XWalkStepping(xschema,distance),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',88).
terminates_at(xWalkSteppingOff(Xschema),
	      xWalkStepping(Xschema,Distance),
	      Time).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',90).
% [xschema,distance,time]
% Releases(XWalkSteppingOn(xschema),XWalkDistance(xschema,distance),time).
releases_at(xWalkSteppingOn(Xschema),
	    xWalkDistance(Xschema,Distance),
	    Time).


% [xschema,distance1,distance2,time]
% HoldsAt(XWalkDistance(xschema,distance1),time) &
% distance1 != distance2 ->
% Terminates(XWalkSteppingOff(xschema),XWalkDistance(xschema,distance2),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',94).
holds_at(xWalkDistance(Xschema, Distance1), Time), Distance1\=Distance2 ->
    terminates_at(xWalkSteppingOff(Xschema),
                  xWalkDistance(Xschema, Distance2),
                  Time).


% [xschema,distance,time]
% HoldsAt(XWalkDistance(xschema,distance),time) ->
% Initiates(XWalkSteppingOff(xschema),XWalkDistance(xschema,distance),time).
holds_at(xWalkDistance(Xschema, Distance), Time) ->
    initiates_at(xWalkSteppingOff(Xschema),
                 xWalkDistance(Xschema, Distance),
                 Time).


% [xschema,distance01,distance02,distance03,offset,time]
% HoldsAt(XWalkDistance(xschema,distance01),time) &
% (distance03=(distance01-(offset*(XWalkSize(xschema)/XWalkRate(xschema))))) ->
% Trajectory(XWalkStepping(xschema,distance02),
%            time,
%            XWalkDistance(xschema,distance03),
%            offset).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',103).
holds_at(xWalkDistance(Xschema, Distance01), Time), Distance03=Distance01-Offset*(xWalkSize(Xschema)/xWalkRate(Xschema)) ->
    trajectory(xWalkStepping(Xschema, Distance02),
               Time,
               xWalkDistance(Xschema, Distance03),
               Offset).


% [xschema,distance,time]
% HoldsAt(XWalkStepping(xschema,distance),time) &
% HoldsAt(XWalkDistance(xschema,distance),time) ->
% Happens(XWalkSteppingOff(xschema),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',111).
holds_at(xWalkStepping(Xschema, Distance), Time), holds_at(xWalkDistance(Xschema, Distance), Time) ->
    happens_at(xWalkSteppingOff(Xschema), Time).


%; punctual events

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',117).
% event XWalkTestFooting(xschema)
event(xWalkTestFooting(xschema)).

% event XWalkMoveFoot(xschema)
event(xWalkMoveFoot(xschema)).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',120).
% [xschema,time]
% Happens(XWalkTestFooting(xschema),time) &
% !HoldsAt(XWalkFootingOK(xschema),time) ->
% Happens(XWalkMoveFoot(xschema),time+1).
happens_at(xWalkTestFooting(Xschema), Time), holds_at(not(xWalkFootingOK(Xschema)), Time) ->
    happens_at(xWalkMoveFoot(Xschema), Time+1).


% [xschema,time]
% Happens(XWalkMoveFoot(xschema),time) ->
% Happens(XWalkReadyOn(xschema),time+1).
happens_at(xWalkMoveFoot(Xschema), Time) ->
    happens_at(xWalkReadyOn(Xschema), Time+1).


%; Petri net behavior

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',131).
% fluent XWalkReady(xschema)
fluent(xWalkReady(xschema)).

% event XWalkReadyOn(xschema)
event(xWalkReadyOn(xschema)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',133).
% event XWalkReadyOff(xschema)
event(xWalkReadyOff(xschema)).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',135).
% [xschema,time]
% HoldsAt(XWalkEnabled(xschema),time) &
% HoldsAt(XWalkVision(xschema),time) &
% HoldsAt(XWalkPosture(xschema),time) &
% !({distance} HoldsAt(XWalkStepping(xschema,distance),time)) & ; !!! pulse
% !HoldsAt(XWalkReady(xschema),time) ->
% Happens(XWalkReadyOn(xschema),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',135).
holds_at(xWalkEnabled(Xschema), Time), holds_at(xWalkVision(Xschema), Time), holds_at(xWalkPosture(Xschema), Time), not(exists([Distance], holds_at(xWalkStepping(Xschema, Distance), Time))), holds_at(not(xWalkReady(Xschema)), Time) ->
    happens_at(xWalkReadyOn(Xschema), Time).


% [xschema,time]
% Initiates(XWalkReadyOn(xschema),XWalkReady(xschema),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',144).
initiates_at(xWalkReadyOn(Xschema),
	     xWalkReady(Xschema),
	     Time).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',146).
% [xschema,time]
% Terminates(XWalkReadyOff(xschema),XWalkReady(xschema),time).
terminates_at(xWalkReadyOff(Xschema),
	      xWalkReady(Xschema),
	      Time).


%; bypass_ok
% [xschema,time]
% !(% {distance} HoldsAt(XWalkStepping(xschema,distance),time)) &
% HoldsAt(XWalkVisionOK(xschema),time) &
% HoldsAt(XWalkReady(xschema),time) ->
% Happens(XWalkSteppingOn(xschema),time) &
% Happens(XWalkReadyOff(xschema),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',150).
exists([Distance],  (holds_at(not(xWalkStepping(Xschema, Distance)), Time), holds_at(xWalkVisionOK(Xschema), Time), holds_at(xWalkReady(Xschema), Time)->happens_at(xWalkSteppingOn(Xschema), Time), happens_at(xWalkReadyOff(Xschema), Time))).


%; !bypass_ok
% [xschema,time]
% !(% {distance} HoldsAt(XWalkStepping(xschema,distance),time)) &
% !HoldsAt(XWalkVisionOK(xschema),time) &
% HoldsAt(XWalkReady(xschema),time) ->
% Happens(XWalkTestFooting(xschema),time) &
% Happens(XWalkReadyOff(xschema),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',158).
exists([Distance],  (holds_at(not(xWalkStepping(Xschema, Distance)), Time), holds_at(not(xWalkVisionOK(Xschema)), Time), holds_at(xWalkReady(Xschema), Time)->happens_at(xWalkTestFooting(Xschema), Time), happens_at(xWalkReadyOff(Xschema), Time))).


% [xschema,distance,time]
% HoldsAt(XWalkStepping(xschema,distance),time) &
% HoldsAt(XWalkDistance(xschema,distance),time) &
% (distance > 0) ->
% Happens(XWalkReadyOn(xschema),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',166).
holds_at(xWalkStepping(Xschema, Distance), Time), holds_at(xWalkDistance(Xschema, Distance), Time), Distance>0 ->
    happens_at(xWalkReadyOn(Xschema), Time).


%; End of file.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',170).
:- call_pel_directive(translate(ending,
                                '/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.pel')).
