:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Condition.e',77).
:- call_pel_directive(translate(unskipped,
                                '/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.pel')).
:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(ecalc).
:- call_pel_directive(translate(begining,
                                '/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.pel')).
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%;
%; Container: container
%;
%; linkage to OTSpace(M):
% [agent,container1,container2,time]
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',17).
% Happens(TakeOutOf(agent,container1,container2),time) ->
% HoldsAt(ContainerIsOpen(container2),time).
happens_at(takeOutOf(Agent, Container1, Container2), Time) ->
    holds_at(containerIsOpen(Container2), Time).


% [agent,container1,container2,time]
% Happens(PutInside(agent,container1,container2),time) ->
% HoldsAt(ContainerIsOpen(container2),time).
happens_at(putInside(Agent, Container1, Container2), Time) ->
    holds_at(containerIsOpen(Container2), Time).


%; agent opens container.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',25).
% event ContainerOpen(agent,container)
event(containerOpen(agent,container)).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',27).
%; agent closes container.

% event ContainerClose(agent,container)
event(containerClose(agent,container)).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',30).
%; container is open.

% fluent ContainerIsOpen(container)
fluent(containerIsOpen(container)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',33).
% fluent ContainerClosed(container)
fluent(containerClosed(container)).

% noninertial ContainerClosed
:- call_pel_directive(noninertial(containerClosed)).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',36).
% [container,time]
% HoldsAt(ContainerClosed(container),time) <->
% !HoldsAt(ContainerIsOpen(container),time).
holds_at(containerClosed(Container), Time) <->
    holds_at(not(containerIsOpen(Container)), Time).


%; A precondition axiom states that
%; for an agent to open a container,
%; the agent must be awake,
%; the container must not already be open, and
%; the agent must be holding the container.
% [agent,container,time]
% Happens(ContainerOpen(agent,container),time) ->
% HoldsAt(Awake(agent),time) &
% !HoldsAt(ContainerIsOpen(container),time) &
% HoldsAt(Holding(agent,container),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',45).
happens_at(containerOpen(Agent, Container), Time) ->
    holds_at(awake(Agent), Time),
    holds_at(not(containerIsOpen(Container)), Time),
    holds_at(holding(Agent, Container), Time).


%; An effect axiom states that
%; if an agent opens a container,
%; the container will be open:
% [agent,container,time]
% Initiates(ContainerOpen(agent,container),ContainerIsOpen(container),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',54).
initiates_at(containerOpen(Agent,Container),
	     containerIsOpen(Container),
	     Time).


%; A precondition axiom states that
%; for an agent to close a container,
%; the agent must be awake,
%; the container must be open, and
%; the agent must be holding the container.
% [agent,container,time]
% Happens(ContainerClose(agent,container),time) ->
% HoldsAt(Awake(agent),time) &
% HoldsAt(ContainerIsOpen(container),time) &
% HoldsAt(Holding(agent,container),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',62).
happens_at(containerClose(Agent, Container), Time) ->
    holds_at(awake(Agent), Time),
    holds_at(containerIsOpen(Container), Time),
    holds_at(holding(Agent, Container), Time).


%; An effect axiom states that
%; if an agent closes a container,
%; the container will no longer be open:
% [agent,container,time]
% Terminates(ContainerClose(agent,container),ContainerIsOpen(container),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',71).
terminates_at(containerClose(Agent,Container),
	      containerIsOpen(Container),
	      Time).


%; End of file.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.e',73).
:- call_pel_directive(translate(ending,
                                '/pack/logicmoo_ec/ext/ec_sources/ecnet/Container.pel')).
