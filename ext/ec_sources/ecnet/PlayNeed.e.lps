:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',481).
% translate: unskipped  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/PlayNeed.e.lps 
:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(lps).
% translate: begining  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/PlayNeed.e.lps 
% Thu, 08 Oct 2020 19:06:23 GMT File: <stream>(0x5600a39e0e00)%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; A complete story understanding program will require representations
%; of common human needs \fullcite{SchankAbelson:1977}.
%;
%; @book{SchankAbelson:1977,
%;   author = "Schank, Roger C. and Abelson, Robert P.",
%;   year = "1977",
%;   title = "Scripts, Plans, Goals, and Understanding: An Inquiry into Human Knowledge Structures",
%;   address = "Hillsdale, NJ",
%;   publisher = "Lawrence Erlbaum",
%; }
%;
%; The PlayNeed representation deals with one type of need, the need
%; to play.
%; Our underlying theory of human needs consists of the following sequence:
%; (1) A need is unsatisfied.
%; (2) Given certain stimuli and an unsatisfied need, an intention
%; to satisfy the need is activated.
%; (3) The intention is acted upon.
%; (4) The need is satisfied.
%; agent has an unsatisfied need to play.

% fluent HungryToPlay(agent)
 %  blue=fluent(hungryToPlay(agent)).
 %  fluent(hungryToPlay(agent)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PlayNeed.e',32).
fluents([hungryToPlay/1]).
 %  fluents([hungryToPlay/1]).
mpred_prop(hungryToPlay(agent),fluent).
 %  mpred_prop(hungryToPlay(agent),fluent).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PlayNeed.e',32).
%; agent has the intention to play outside.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PlayNeed.e',35).
% fluent IntentionToPlay(agent,outside)
 %  blue=fluent(intentionToPlay(agent,outside)).
 %  fluent(intentionToPlay(agent,outside)).
fluents([intentionToPlay/2]).
 %  fluents([intentionToPlay/2]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PlayNeed.e',35).
mpred_prop(intentionToPlay(agent,outside),fluent).
 %  mpred_prop(intentionToPlay(agent,outside),fluent).


%; agent has a satisfied need to play.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PlayNeed.e',37).
% fluent SatiatedFromPlay(agent)
 %  blue=fluent(satiatedFromPlay(agent)).
 %  fluent(satiatedFromPlay(agent)).
fluents([satiatedFromPlay/1]).
 %  fluents([satiatedFromPlay/1]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PlayNeed.e',37).
mpred_prop(satiatedFromPlay(agent),fluent).
 %  mpred_prop(satiatedFromPlay(agent),fluent).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PlayNeed.e',39).
%; At any time, an agent is in one of three states with respect
%; to the need to play:

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PlayNeed.e',41).
% xor HungryToPlay, IntentionToPlay, SatiatedFromPlay
 %  red = ==>xor[hungryToPlay,intentionToPlay,satiatedFromPlay].
==>xor[hungryToPlay,intentionToPlay,satiatedFromPlay].
 %  ==>xor[hungryToPlay,intentionToPlay,satiatedFromPlay].
%; agent intends to play at location outside.

% event IntendToPlay(agent,outside)
 %  blue=event(intendToPlay(agent,outside)).
 %  event(intendToPlay(agent,outside)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PlayNeed.e',43).
actions([intendToPlay/2]).
 %  actions([intendToPlay/2]).
mpred_prop(intendToPlay(agent,outside),event).
 %  mpred_prop(intendToPlay(agent,outside),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PlayNeed.e',43).
%; agent plays at location outside.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PlayNeed.e',46).
% event Play(agent,outside)
 %  blue=event(play(agent,outside)).
 %  event(play(agent,outside)).
actions([play/2]).
 %  actions([play/2]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PlayNeed.e',46).
mpred_prop(play(agent,outside),event).
 %  mpred_prop(play(agent,outside),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PlayNeed.e',48).
%; agent acts on the intention to play outside.

% fluent ActOnIntentionToPlay(agent,outside)
 %  blue=fluent(actOnIntentionToPlay(agent,outside)).
 %  fluent(actOnIntentionToPlay(agent,outside)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PlayNeed.e',48).
fluents([actOnIntentionToPlay/2]).
 %  fluents([actOnIntentionToPlay/2]).
mpred_prop(actOnIntentionToPlay(agent,outside),fluent).
 %  mpred_prop(actOnIntentionToPlay(agent,outside),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PlayNeed.e',50).
% noninertial ActOnIntentionToPlay
noninertial(actOnIntentionToPlay).
 %  noninertial(actOnIntentionToPlay).
%; A trigger axiom activates an intention for an agent to play when
%; the agent has an unsatisfied need for play, the agent likes snow,
%; the agent is awake, and
%; the agent is in a room that looks out onto an outside area where it
%; is snowing:
% [agent,room,outside,time]
% HoldsAt(HungryToPlay(agent),time) &
% HoldsAt(LikeSnow(agent),time) &
% HoldsAt(At(agent,room),time) &
% LookOutOnto(room)=outside &
% HoldsAt(Awake(agent),time) &
% HoldsAt(Snowing(outside),time) ->
% Happens(IntendToPlay(agent,outside),time).
 %  clausify_pnf=(holds_at(hungryToPlay(Agent), Time), holds_at(likeSnow(Agent), Time), holds_at(at(Agent, Room), Time), lookOutOntoPred(Room, Outside), holds_at(awake(Agent), Time), holds_at(snowing(Outside), Time)->happens(intendToPlay(Agent, Outside), Time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PlayNeed.e',57).

 /*  happens(intendToPlay(Agent, Outside), Time) :-
       holds_at(hungryToPlay(Agent), Time),
       holds_at(likeSnow(Agent), Time),
       holds_at(at(Agent, Room), Time),
       lookOutOntoPred(Room, Outside),
       holds_at(awake(Agent), Time),
       holds_at(snowing(Outside), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PlayNeed.e',57).

 /*  fix_axiom_head(Time) ->
       [ happens(intendToPlay(Agent, Outside), Time),
          (->),
         intendToPlay(Agent, Outside)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PlayNeed.e',57).

 /*  pl=axiom(intendToPlay(Agent,Outside),
         [ hungryToPlay(Agent),
   	likeSnow(Agent),
   	at(Agent,Room),
   	lookOutOntoPred(Room,Outside),
   	awake(Agent),
   	snowing(Outside)
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PlayNeed.e',57).

 /*  (   hungryToPlay(Agent),
       likeSnow(Agent),
       at(Agent, Room),
       lookOutOntoPred(Room, Outside),
       awake(Agent),
       snowing(Outside)
   ->  intendToPlay(Agent, Outside)
   ).
 */
if hungryToPlay(Agent), likeSnow(Agent), loc_at(Agent, Room), lookOutOntoPred(Room, Outside), awake(Agent), snowing(Outside)then intendToPlay(Agent, Outside).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PlayNeed.e',57).

 /*  reactive_rule([ hungryToPlay(Agent),
   		likeSnow(Agent),
   		loc_at(Agent,Room),
   		lookOutOntoPred(Room,Outside),
   		awake(Agent),
   		snowing(Outside)
   	      ],
   	      [intendToPlay(Agent,Outside)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PlayNeed.e',57).

 /*  reactive_rule([ hungryToPlay(Agent),
   		likeSnow(Agent),
   		loc_at(Agent,Room),
   		lookOutOntoPred(Room,Outside),
   		awake(Agent),
   		snowing(Outside)
   	      ],
   	      [intendToPlay(Agent,Outside)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PlayNeed.e',57).

 /*  not(holds_at(hungryToPlay(Agent), Time)) :-
       holds_at(likeSnow(Agent), Time),
       holds_at(at(Agent, Room), Time),
       lookOutOntoPred(Room, Outside),
       holds_at(awake(Agent), Time),
       holds_at(snowing(Outside), Time),
       not(happens(intendToPlay(Agent, Outside), Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PlayNeed.e',57).

 /*  pl=axiom(not(hungryToPlay(Agent)),
         [ likeSnow(Agent),
   	at(Agent,Room),
   	lookOutOntoPred(Room,Outside),
   	awake(Agent),
   	snowing(Outside),
   	not(intendToPlay(Agent,Outside))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PlayNeed.e',57).

 /*  (   likeSnow(Agent),
       at(Agent, Room),
       lookOutOntoPred(Room, Outside),
       awake(Agent),
       snowing(Outside),
       not(intendToPlay(Agent, Outside))
   ->  not(hungryToPlay(Agent))
   ).
 */
if likeSnow(Agent), loc_at(Agent, Room), lookOutOntoPred(Room, Outside), awake(Agent), snowing(Outside), not intendToPlay(Agent, Outside)then not hungryToPlay(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PlayNeed.e',57).

 /*  reactive_rule([ likeSnow(Agent),
   		loc_at(Agent,Room),
   		lookOutOntoPred(Room,Outside),
   		awake(Agent),
   		snowing(Outside),
   		not(intendToPlay(Agent,Outside))
   	      ],
   	      [not(hungryToPlay(Agent))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PlayNeed.e',57).

 /*  reactive_rule([ likeSnow(Agent),
   		loc_at(Agent,Room),
   		lookOutOntoPred(Room,Outside),
   		awake(Agent),
   		snowing(Outside),
   		not(intendToPlay(Agent,Outside))
   	      ],
   	      [not(hungryToPlay(Agent))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PlayNeed.e',57).

 /*  not(holds_at(likeSnow(Agent), Time)) :-
       holds_at(at(Agent, Room), Time),
       lookOutOntoPred(Room, Outside),
       holds_at(awake(Agent), Time),
       holds_at(snowing(Outside), Time),
       holds_at(hungryToPlay(Agent), Time),
       not(happens(intendToPlay(Agent, Outside), Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PlayNeed.e',57).

 /*  pl=axiom(not(likeSnow(Agent)),
         [ at(Agent,Room),
   	lookOutOntoPred(Room,Outside),
   	awake(Agent),
   	snowing(Outside),
   	hungryToPlay(Agent),
   	not(intendToPlay(Agent,Outside))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PlayNeed.e',57).

 /*  (   at(Agent, Room),
       lookOutOntoPred(Room, Outside),
       awake(Agent),
       snowing(Outside),
       hungryToPlay(Agent),
       not(intendToPlay(Agent, Outside))
   ->  not(likeSnow(Agent))
   ).
 */
if loc_at(Agent, Room), lookOutOntoPred(Room, Outside), awake(Agent), snowing(Outside), hungryToPlay(Agent), not intendToPlay(Agent, Outside)then not likeSnow(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PlayNeed.e',57).

 /*  reactive_rule([ loc_at(Agent,Room),
   		lookOutOntoPred(Room,Outside),
   		awake(Agent),
   		snowing(Outside),
   		hungryToPlay(Agent),
   		not(intendToPlay(Agent,Outside))
   	      ],
   	      [not(likeSnow(Agent))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PlayNeed.e',57).

 /*  reactive_rule([ loc_at(Agent,Room),
   		lookOutOntoPred(Room,Outside),
   		awake(Agent),
   		snowing(Outside),
   		hungryToPlay(Agent),
   		not(intendToPlay(Agent,Outside))
   	      ],
   	      [not(likeSnow(Agent))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PlayNeed.e',57).

 /*  not(holds_at(at(Agent, Room), Time)) :-
       lookOutOntoPred(Room, Outside),
       holds_at(awake(Agent), Time),
       holds_at(snowing(Outside), Time),
       holds_at(likeSnow(Agent), Time),
       holds_at(hungryToPlay(Agent), Time),
       not(happens(intendToPlay(Agent, Outside), Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PlayNeed.e',57).

 /*  pl=axiom(not(at(Agent,Room)),
         [ lookOutOntoPred(Room,Outside),
   	awake(Agent),
   	snowing(Outside),
   	likeSnow(Agent),
   	hungryToPlay(Agent),
   	not(intendToPlay(Agent,Outside))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PlayNeed.e',57).

 /*  (   lookOutOntoPred(Room, Outside),
       awake(Agent),
       snowing(Outside),
       likeSnow(Agent),
       hungryToPlay(Agent),
       not(intendToPlay(Agent, Outside))
   ->  not(at(Agent, Room))
   ).
 */
if lookOutOntoPred(Room, Outside), awake(Agent), snowing(Outside), likeSnow(Agent), hungryToPlay(Agent), not intendToPlay(Agent, Outside)then not loc_at(Agent, Room).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PlayNeed.e',57).

 /*  reactive_rule([ lookOutOntoPred(Room,Outside),
   		awake(Agent),
   		snowing(Outside),
   		likeSnow(Agent),
   		hungryToPlay(Agent),
   		not(intendToPlay(Agent,Outside))
   	      ],
   	      [not(loc_at(Agent,Room))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PlayNeed.e',57).

 /*  reactive_rule([ lookOutOntoPred(Room,Outside),
   		awake(Agent),
   		snowing(Outside),
   		likeSnow(Agent),
   		hungryToPlay(Agent),
   		not(intendToPlay(Agent,Outside))
   	      ],
   	      [not(loc_at(Agent,Room))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PlayNeed.e',57).

 /*  not(lookOutOntoPred(Room, Outside)) :-
       holds_at(awake(Agent), Time),
       holds_at(snowing(Outside), Time),
       holds_at(at(Agent, Room), Time),
       holds_at(likeSnow(Agent), Time),
       holds_at(hungryToPlay(Agent), Time),
       not(happens(intendToPlay(Agent, Outside), Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PlayNeed.e',57).

 /*  fix_axiom_head(Time) ->
       [holds_at(awake(Agent), Time), ->, awake(Agent)].
 */

 /*  fix_axiom_head(Time) ->
       [holds_at(snowing(Outside), Time), ->, snowing(Outside)].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PlayNeed.e',57).

 /*  fix_axiom_head(Time) ->
       [ holds_at(at(Agent, Room), Time),
          (->),
         at(Agent, Room)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PlayNeed.e',57).

 /*  fix_axiom_head(Time) ->
       [holds_at(likeSnow(Agent), Time), ->, likeSnow(Agent)].
 */

 /*  fix_axiom_head(Time) ->
       [ holds_at(hungryToPlay(Agent), Time),
          (->),
         hungryToPlay(Agent)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PlayNeed.e',57).

 /*  fix_axiom_head(Time) ->
       [ not(happens(intendToPlay(Agent, Outside), Time)),
          (->),
         not(intendToPlay(Agent, Outside))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PlayNeed.e',57).

 /*  pl=axiom(not(lookOutOntoPred(Room,Outside)),
         [ awake(Agent),
   	snowing(Outside),
   	at(Agent,Room),
   	likeSnow(Agent),
   	hungryToPlay(Agent),
   	not(intendToPlay(Agent,Outside))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PlayNeed.e',57).

 /*  (   awake(Agent),
       snowing(Outside),
       at(Agent, Room),
       likeSnow(Agent),
       hungryToPlay(Agent),
       not(intendToPlay(Agent, Outside))
   ->  not(lookOutOntoPred(Room, Outside))
   ).
 */
if awake(Agent), snowing(Outside), loc_at(Agent, Room), likeSnow(Agent), hungryToPlay(Agent), not intendToPlay(Agent, Outside)then not lookOutOntoPred(Room, Outside).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PlayNeed.e',57).

 /*  reactive_rule([ awake(Agent),
   		snowing(Outside),
   		loc_at(Agent,Room),
   		likeSnow(Agent),
   		hungryToPlay(Agent),
   		not(intendToPlay(Agent,Outside))
   	      ],
   	      [not(lookOutOntoPred(Room,Outside))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PlayNeed.e',57).

 /*  reactive_rule([ awake(Agent),
   		snowing(Outside),
   		loc_at(Agent,Room),
   		likeSnow(Agent),
   		hungryToPlay(Agent),
   		not(intendToPlay(Agent,Outside))
   	      ],
   	      [not(lookOutOntoPred(Room,Outside))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PlayNeed.e',57).

 /*  not(holds_at(awake(Agent), Time)) :-
       holds_at(snowing(Outside), Time),
       lookOutOntoPred(Room, Outside),
       holds_at(at(Agent, Room), Time),
       holds_at(likeSnow(Agent), Time),
       holds_at(hungryToPlay(Agent), Time),
       not(happens(intendToPlay(Agent, Outside), Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PlayNeed.e',57).

 /*  pl=axiom(not(awake(Agent)),
         [ snowing(Outside),
   	lookOutOntoPred(Room,Outside),
   	at(Agent,Room),
   	likeSnow(Agent),
   	hungryToPlay(Agent),
   	not(intendToPlay(Agent,Outside))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PlayNeed.e',57).

 /*  (   snowing(Outside),
       lookOutOntoPred(Room, Outside),
       at(Agent, Room),
       likeSnow(Agent),
       hungryToPlay(Agent),
       not(intendToPlay(Agent, Outside))
   ->  not(awake(Agent))
   ).
 */
if snowing(Outside), lookOutOntoPred(Room, Outside), loc_at(Agent, Room), likeSnow(Agent), hungryToPlay(Agent), not intendToPlay(Agent, Outside)then not awake(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PlayNeed.e',57).

 /*  reactive_rule([ snowing(Outside),
   		lookOutOntoPred(Room,Outside),
   		loc_at(Agent,Room),
   		likeSnow(Agent),
   		hungryToPlay(Agent),
   		not(intendToPlay(Agent,Outside))
   	      ],
   	      [not(awake(Agent))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PlayNeed.e',57).

 /*  reactive_rule([ snowing(Outside),
   		lookOutOntoPred(Room,Outside),
   		loc_at(Agent,Room),
   		likeSnow(Agent),
   		hungryToPlay(Agent),
   		not(intendToPlay(Agent,Outside))
   	      ],
   	      [not(awake(Agent))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PlayNeed.e',57).

 /*  not(holds_at(snowing(Outside), Time)) :-
       holds_at(awake(Agent), Time),
       lookOutOntoPred(Room, Outside),
       holds_at(at(Agent, Room), Time),
       holds_at(likeSnow(Agent), Time),
       holds_at(hungryToPlay(Agent), Time),
       not(happens(intendToPlay(Agent, Outside), Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PlayNeed.e',57).

 /*  pl=axiom(not(snowing(Outside)),
         [ awake(Agent),
   	lookOutOntoPred(Room,Outside),
   	at(Agent,Room),
   	likeSnow(Agent),
   	hungryToPlay(Agent),
   	not(intendToPlay(Agent,Outside))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PlayNeed.e',57).

 /*  (   awake(Agent),
       lookOutOntoPred(Room, Outside),
       at(Agent, Room),
       likeSnow(Agent),
       hungryToPlay(Agent),
       not(intendToPlay(Agent, Outside))
   ->  not(snowing(Outside))
   ).
 */
if awake(Agent), lookOutOntoPred(Room, Outside), loc_at(Agent, Room), likeSnow(Agent), hungryToPlay(Agent), not intendToPlay(Agent, Outside)then not snowing(Outside).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PlayNeed.e',57).

 /*  reactive_rule([ awake(Agent),
   		lookOutOntoPred(Room,Outside),
   		loc_at(Agent,Room),
   		likeSnow(Agent),
   		hungryToPlay(Agent),
   		not(intendToPlay(Agent,Outside))
   	      ],
   	      [not(snowing(Outside))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PlayNeed.e',57).

 /*  reactive_rule([ awake(Agent),
   		lookOutOntoPred(Room,Outside),
   		loc_at(Agent,Room),
   		likeSnow(Agent),
   		hungryToPlay(Agent),
   		not(intendToPlay(Agent,Outside))
   	      ],
   	      [not(snowing(Outside))]).
 */


%; A story understanding program will need a detailed representation
%; of intention \fullcite{CohenLevesque:1990}.
%;
%; @article{CohenLevesque:1990,
%;   author = "Philip R. Cohen and Hector J. Levesque",
%;   year = "1990",
%;   title = "Intention is choice with commitment",
%;   journal = "Artificial Intelligence",
%;   volume = "42",
%;   pages = "213--261",
%; }
%;
%; In our simplified representation, once an intention to
%; perform $e$ is activated, it persists until it is acted
%; upon. Intentions are represented by inertial fluents.
%; If an intention to perform $e$ is active at time point $t$,
%; the agent may or may not perform $e$ at time point $t$.
%; That is, we do not know exactly when the agent will act on the
%; intention.
%; This is a case of nondeterminism,
%; which we handle by introducing a noninertial fluent corresponding
%; to each intention fluent that
%; indicates whether the agent does or does not in fact act
%; on an intention at a given time.
%; Since each ground term of the new noninertial fluent multiplies the
%; number of models by $2^{n}$ where $n$ is the number of time points,
%; in practice we may constrain the truth value of the fluent
%; at various time points.
%; In the case of the need to play,
%; HoldsAt(ActOnIntentionToPlay(agent, outside), time)
%; represents that
%; HoldsAt(IntentionToPlay(agent, outside), time) is acted
%; upon at time.
%; Effect axioms state that
%; if an agent intends to play in an outside area,
%; the agent will have an intention to play in the outside area
%; and will no longer be in the hungry-to-play state:
% [agent,outside,time]
% Initiates(IntendToPlay(agent,outside),IntentionToPlay(agent,outside),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PlayNeed.e',104).

 /*  pl=axiom(initiates(intendToPlay(Agent,Outside),
   		intentionToPlay(Agent,Outside),
   		Time),
         []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PlayNeed.e',104).

 /*  initiates(intendToPlay(Agent,Outside),
   	  intentionToPlay(Agent,Outside),
   	  Time).
 */
intendToPlay(Agent, Outside)initiates intentionToPlay(Agent, Outside).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PlayNeed.e',104).

 /*  initiated(happens(intendToPlay(Agent,Outside),
   		  Time_From,
   		  Time_Until),
   	  intentionToPlay(Agent,Outside),
   	  []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PlayNeed.e',104).

 /*  initiated(happens(intendToPlay(Agent,Outside),
   		  Time_From,
   		  Time_Until),
   	  intentionToPlay(Agent,Outside),
   	  []).
 */


% [agent,outside,time]
% Terminates(IntendToPlay(agent,outside),HungryToPlay(agent),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PlayNeed.e',108).

 /*  pl=axiom(terminates(intendToPlay(Agent,Outside),
   		 hungryToPlay(Agent),
   		 Time),
         []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PlayNeed.e',108).

 /*  terminates(intendToPlay(Agent,Outside),
   	   hungryToPlay(Agent),
   	   Time).
 */
intendToPlay(Agent, Outside)terminates hungryToPlay(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PlayNeed.e',108).

 /*  terminated(happens(intendToPlay(Agent,Outside),
   		   Time_From,
   		   Time_Until),
   	   hungryToPlay(Agent),
   	   []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PlayNeed.e',108).

 /*  terminated(happens(intendToPlay(Agent,Outside),
   		   Time_From,
   		   Time_Until),
   	   hungryToPlay(Agent),
   	   []).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PlayNeed.e',110).
%; A trigger axiom states that if an agent has the intention
%; to play in an outside area,
%; the agent acts on the intention to play in the outside area, and
%; the agent is at the outside area,
%; the agent plays in the outside area:
% [agent,outside,time]
% HoldsAt(IntentionToPlay(agent,outside),time) &
% HoldsAt(ActOnIntentionToPlay(agent,outside),time) &
% HoldsAt(At(agent,outside),time) ->
% Happens(Play(agent,outside),time).
 %  clausify_pnf=(holds_at(intentionToPlay(Agent, Outside), Time), holds_at(actOnIntentionToPlay(Agent, Outside), Time), holds_at(at(Agent, Outside), Time)->happens(play(Agent, Outside), Time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PlayNeed.e',115).

 /*  happens(play(Agent, Outside), Time) :-
       holds_at(intentionToPlay(Agent, Outside), Time),
       holds_at(actOnIntentionToPlay(Agent, Outside), Time),
       holds_at(at(Agent, Outside), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PlayNeed.e',115).

 /*  fix_axiom_head(Time) ->
       [ happens(play(Agent, Outside), Time),
          (->),
         play(Agent, Outside)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PlayNeed.e',115).

 /*  pl=axiom(play(Agent,Outside),
         [ intentionToPlay(Agent,Outside),
   	actOnIntentionToPlay(Agent,Outside),
   	at(Agent,Outside)
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PlayNeed.e',115).

 /*  (   intentionToPlay(Agent, Outside),
       actOnIntentionToPlay(Agent, Outside),
       at(Agent, Outside)
   ->  play(Agent, Outside)
   ).
 */
if intentionToPlay(Agent, Outside), actOnIntentionToPlay(Agent, Outside), loc_at(Agent, Outside)then play(Agent, Outside).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PlayNeed.e',115).

 /*  reactive_rule([ holds(intentionToPlay(Agent,Outside),
   		      Holds),
   		actOnIntentionToPlay(Agent,Outside),
   		loc_at(Agent,Outside)
   	      ],
   	      [play(Agent,Outside)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PlayNeed.e',115).

 /*  reactive_rule([ holds(intentionToPlay(Agent,Outside),
   		      Holds),
   		actOnIntentionToPlay(Agent,Outside),
   		loc_at(Agent,Outside)
   	      ],
   	      [play(Agent,Outside)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PlayNeed.e',115).

 /*  not(holds_at(intentionToPlay(Agent, Outside), Time)) :-
       holds_at(actOnIntentionToPlay(Agent, Outside), Time),
       holds_at(at(Agent, Outside), Time),
       not(happens(play(Agent, Outside), Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PlayNeed.e',115).

 /*  pl=axiom(not(intentionToPlay(Agent,Outside)),
         [ actOnIntentionToPlay(Agent,Outside),
   	at(Agent,Outside),
   	not(play(Agent,Outside))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PlayNeed.e',115).

 /*  (   actOnIntentionToPlay(Agent, Outside),
       at(Agent, Outside),
       not(play(Agent, Outside))
   ->  not(intentionToPlay(Agent, Outside))
   ).
 */
if actOnIntentionToPlay(Agent, Outside), loc_at(Agent, Outside), not play(Agent, Outside)then not intentionToPlay(Agent, Outside).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PlayNeed.e',115).

 /*  reactive_rule([ actOnIntentionToPlay(Agent,Outside),
   		loc_at(Agent,Outside),
   		not(play(Agent,Outside))
   	      ],
   	      [ holds(not(intentionToPlay(Agent,Outside)),
   		      Holds4)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PlayNeed.e',115).

 /*  reactive_rule([ actOnIntentionToPlay(Agent,Outside),
   		loc_at(Agent,Outside),
   		not(play(Agent,Outside))
   	      ],
   	      [ holds(not(intentionToPlay(Agent,Outside)),
   		      Holds4)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PlayNeed.e',115).

 /*  not(holds_at(actOnIntentionToPlay(Agent, Outside), Time)) :-
       holds_at(at(Agent, Outside), Time),
       holds_at(intentionToPlay(Agent, Outside), Time),
       not(happens(play(Agent, Outside), Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PlayNeed.e',115).

 /*  pl=axiom(not(actOnIntentionToPlay(Agent,Outside)),
         [ at(Agent,Outside),
   	intentionToPlay(Agent,Outside),
   	not(play(Agent,Outside))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PlayNeed.e',115).

 /*  (   at(Agent, Outside),
       intentionToPlay(Agent, Outside),
       not(play(Agent, Outside))
   ->  not(actOnIntentionToPlay(Agent, Outside))
   ).
 */
if loc_at(Agent, Outside), intentionToPlay(Agent, Outside), not play(Agent, Outside)then not actOnIntentionToPlay(Agent, Outside).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PlayNeed.e',115).

 /*  reactive_rule([ loc_at(Agent,Outside),
   		holds(intentionToPlay(Agent,Outside),
   		      Holds5),
   		not(play(Agent,Outside))
   	      ],
   	      [not(actOnIntentionToPlay(Agent,Outside))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PlayNeed.e',115).

 /*  reactive_rule([ loc_at(Agent,Outside),
   		holds(intentionToPlay(Agent,Outside),
   		      Holds5),
   		not(play(Agent,Outside))
   	      ],
   	      [not(actOnIntentionToPlay(Agent,Outside))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PlayNeed.e',115).

 /*  not(holds_at(at(Agent, Outside), Time)) :-
       holds_at(actOnIntentionToPlay(Agent, Outside), Time),
       holds_at(intentionToPlay(Agent, Outside), Time),
       not(happens(play(Agent, Outside), Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PlayNeed.e',115).

 /*  pl=axiom(not(at(Agent,Outside)),
         [ actOnIntentionToPlay(Agent,Outside),
   	intentionToPlay(Agent,Outside),
   	not(play(Agent,Outside))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PlayNeed.e',115).

 /*  (   actOnIntentionToPlay(Agent, Outside),
       intentionToPlay(Agent, Outside),
       not(play(Agent, Outside))
   ->  not(at(Agent, Outside))
   ).
 */
if actOnIntentionToPlay(Agent, Outside), intentionToPlay(Agent, Outside), not play(Agent, Outside)then not loc_at(Agent, Outside).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PlayNeed.e',115).

 /*  reactive_rule([ actOnIntentionToPlay(Agent,Outside),
   		holds(intentionToPlay(Agent,Outside),
   		      Holds6),
   		not(play(Agent,Outside))
   	      ],
   	      [not(loc_at(Agent,Outside))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PlayNeed.e',115).

 /*  reactive_rule([ actOnIntentionToPlay(Agent,Outside),
   		holds(intentionToPlay(Agent,Outside),
   		      Holds6),
   		not(play(Agent,Outside))
   	      ],
   	      [not(loc_at(Agent,Outside))]).
 */


%; Effect axioms state that if an agent plays in an
%; outside area, the agent will be satiated from play
%; and will no longer have an intention to play in
%; the outside area:
% [agent,outside,time]
% Initiates(Play(agent,outside),SatiatedFromPlay(agent),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PlayNeed.e',125).

 /*  pl=axiom(initiates(play(Agent,Outside),
   		satiatedFromPlay(Agent),
   		Time),
         []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PlayNeed.e',125).

 /*  initiates(play(Agent,Outside),
   	  satiatedFromPlay(Agent),
   	  Time).
 */
play(Agent, Outside)initiates satiatedFromPlay(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PlayNeed.e',125).

 /*  initiated(happens(play(Agent,Outside),
   		  Time_From,
   		  Time_Until),
   	  satiatedFromPlay(Agent),
   	  []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PlayNeed.e',125).

 /*  initiated(happens(play(Agent,Outside),
   		  Time_From,
   		  Time_Until),
   	  satiatedFromPlay(Agent),
   	  []).
 */


% [agent,outside,time]
% Terminates(Play(agent,outside),IntentionToPlay(agent,outside),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PlayNeed.e',129).

 /*  pl=axiom(terminates(play(Agent,Outside),
   		 intentionToPlay(Agent,Outside),
   		 Time),
         []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PlayNeed.e',129).

 /*  terminates(play(Agent,Outside),
   	   intentionToPlay(Agent,Outside),
   	   Time).
 */
play(Agent, Outside)terminates intentionToPlay(Agent, Outside).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PlayNeed.e',129).

 /*  terminated(happens(play(Agent,Outside),
   		   Time_From,
   		   Time_Until),
   	   intentionToPlay(Agent,Outside),
   	   []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PlayNeed.e',129).

 /*  terminated(happens(play(Agent,Outside),
   		   Time_From,
   		   Time_Until),
   	   intentionToPlay(Agent,Outside),
   	   []).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/PlayNeed.e',131).
%; End of file.
% translate: ending  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/PlayNeed.e.lps 
