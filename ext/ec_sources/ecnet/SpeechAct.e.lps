:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoking.e',124).
% translate: unskipped  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e.lps 
:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(lps).
% translate: begining  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e.lps 
% Thu, 08 Oct 2020 19:07:03 GMT File: <stream>(0x5600a3adf800)%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; The SpeechAct representation deals with a few speech acts
%; \fullcite{Searle:1969}.
%;
%; @book{Searle:1969,
%;   author = "John R. Searle",
%;   year = "1969",
%;   title = "Speech Acts: An Essay in the Philosophy of Language",
%;   address = "Cambridge",
%;   publisher = "Cambridge University Press",
%; }
%;
%; We handle
%; the illocutionary acts of
%; inviting someone into one's house (a form of request) and
%; greeting someone,
%; and the expressive speech act of crying for joy.
%;
%; inviting in
%; agent1 invites agent2 into room.

% event InviteIn(agent,agent,room)
 %  blue=event(inviteIn(agent,agent,room)).
 %  event(inviteIn(agent,agent,room)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',31).
actions([inviteIn/3]).
 %  actions([inviteIn/3]).
mpred_prop(inviteIn(agent,agent,room),event).
 %  mpred_prop(inviteIn(agent,agent,room),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',31).
%; agent1 is invited into room by agent2.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',34).
% fluent InvitedIn(agent,room,agent)
 %  blue=fluent(invitedIn(agent,room,agent)).
 %  fluent(invitedIn(agent,room,agent)).
fluents([invitedIn/3]).
 %  fluents([invitedIn/3]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',34).
mpred_prop(invitedIn(agent,room,agent),fluent).
 %  mpred_prop(invitedIn(agent,room,agent),fluent).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',36).
%; A precondition axiom states that for
%; an agent to invite another agent into a room,
%; the first agent must be in the room and
%; there must be an outside area such that
%; the second agent is at the outside area and
%; the outside area is adjacent to the room:
% [agent1,agent2,room,time]
% Happens(InviteIn(agent1,agent2,room),time) ->
% HoldsAt(At(agent1,room),time) &
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',42).
% {outside}% 
% HoldsAt(At(agent2,outside),time) &
% Adjacent(room,outside).
 %  clausify_pnf=exists([Outside],  (happens(inviteIn(Agent1, Agent2, Room), Time)->holds_at(at(Agent1, Room), Time), holds_at(at(Agent2, Outside), Time), adjacent(Room, Outside))).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',45).

 /*  not(happens(inviteIn(Agent1, Agent2, Room), Time)) :-
       (   not(holds_at(at(Agent1, Room), Time))
       ;   not(holds_at(at(Agent2, Exists_Outside), Time))
       ;   not(adjacent(Room, Exists_Outside))
       ),
       some(Exists_Outside,
            '$kolem_Fn_64'(Agent1, Agent2, Room, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',45).

 /*  fix_axiom_head(Time) ->
       [ not(happens(inviteIn(Agent1, Agent2, Room), Time)),
          (->),
         not(inviteIn(Agent1, Agent2, Room))
       ].
 */
 %   pl=axiom(not(inviteIn(Agent1, Agent2, Room)), [(not(at(Agent1, Room));not(at(Agent2, Exists_Outside));not(adjacent(Room, Exists_Outside))), some(Exists_Outside, '$kolem_Fn_64'(Agent1, Agent2, Room, Time))]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',45).

 /*  (   (   not(at(Agent1, Room))
       ;   not(at(Agent2, Exists_Outside))
       ;   not(adjacent(Room, Exists_Outside))
       ),
       some(Exists_Outside,
            '$kolem_Fn_64'(Agent1, Agent2, Room, Time))
   ->  not(inviteIn(Agent1, Agent2, Room))
   ).
 */
if (not loc_at(Agent1, Room);not loc_at(Agent2, Exists_Outside);not adjacent(Room, Exists_Outside)), some(Exists_Outside, '$kolem_Fn_64'(Agent1, Agent2, Room, Time))then not inviteIn(Agent1, Agent2, Room).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',45).

 /*   reactive_rule([  (not(loc_at(Agent1, Room));not(loc_at(Agent2, Exists_Outside));not(adjacent(Room, Exists_Outside))),
                      some(Exists_Outside,
                           '$kolem_Fn_64'(Agent1,
                                          Agent2,
                                          Room,
                                          Time))
                    ],
                    [not(inviteIn(Agent1, Agent2, Room))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',45).

 /*   reactive_rule([  (not(loc_at(Agent1, Room));not(loc_at(Agent2, Exists_Outside));not(adjacent(Room, Exists_Outside))),
                      some(Exists_Outside,
                           '$kolem_Fn_64'(Agent1,
                                          Agent2,
                                          Room,
                                          Time))
                    ],
                    [not(inviteIn(Agent1, Agent2, Room))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',45).

 /*  holds_at(at(Agent1, Room), Time) :-
       happens(inviteIn(Agent1, Agent2, Room), Time),
       some(Exists_Outside,
            '$kolem_Fn_64'(Agent1, Agent2, Room, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',45).

 /*  fix_axiom_head(Time) ->
       [ holds_at(at(Agent1, Room), Time),
          (->),
         at(Agent1, Room)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',45).

 /*  pl=axiom(at(Agent1,Room),
         [ inviteIn(Agent1,Agent2,Room),
   	some(Exists_Outside,
   	     '$kolem_Fn_64'(Agent1,
   			    Agent2,
   			    Room,
   			    Time))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',45).

 /*  (   inviteIn(Agent1, Agent2, Room),
       some(Exists_Outside,
            '$kolem_Fn_64'(Agent1, Agent2, Room, Time))
   ->  at(Agent1, Room)
   ).
 */
if inviteIn(Agent1, Agent2, Room), some(Exists_Outside, '$kolem_Fn_64'(Agent1, Agent2, Room, Time))then loc_at(Agent1, Room).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',45).

 /*  reactive_rule([ inviteIn(Agent1,Agent2,Room),
   		some(Exists_Outside,
   		     '$kolem_Fn_64'(Agent1,
   				    Agent2,
   				    Room,
   				    Time))
   	      ],
   	      [loc_at(Agent1,Room)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',45).

 /*  reactive_rule([ inviteIn(Agent1,Agent2,Room),
   		some(Exists_Outside,
   		     '$kolem_Fn_64'(Agent1,
   				    Agent2,
   				    Room,
   				    Time))
   	      ],
   	      [loc_at(Agent1,Room)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',45).

 /*  holds_at(at(Agent2, Exists_Outside), Time) :-
       happens(inviteIn(Agent1, Agent2, Room), Time),
       some(Exists_Outside,
            '$kolem_Fn_64'(Agent1, Agent2, Room, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',45).

 /*  fix_axiom_head(Time) ->
       [ holds_at(at(Agent2, Exists_Outside), Time),
          (->),
         at(Agent2, Exists_Outside)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',45).

 /*  pl=axiom(at(Agent2,Exists_Outside),
         [ inviteIn(Agent1,Agent2,Room),
   	some(Exists_Outside,
   	     '$kolem_Fn_64'(Agent1,
   			    Agent2,
   			    Room,
   			    Time))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',45).

 /*  (   inviteIn(Agent1, Agent2, Room),
       some(Exists_Outside,
            '$kolem_Fn_64'(Agent1, Agent2, Room, Time))
   ->  at(Agent2, Exists_Outside)
   ).
 */
if inviteIn(Agent1, Agent2, Room), some(Exists_Outside, '$kolem_Fn_64'(Agent1, Agent2, Room, Time))then loc_at(Agent2, Exists_Outside).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',45).

 /*  reactive_rule([ inviteIn(Agent1,Agent2,Room),
   		some(Exists_Outside,
   		     '$kolem_Fn_64'(Agent1,
   				    Agent2,
   				    Room,
   				    Time))
   	      ],
   	      [loc_at(Agent2,Exists_Outside)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',45).

 /*  reactive_rule([ inviteIn(Agent1,Agent2,Room),
   		some(Exists_Outside,
   		     '$kolem_Fn_64'(Agent1,
   				    Agent2,
   				    Room,
   				    Time))
   	      ],
   	      [loc_at(Agent2,Exists_Outside)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',45).

 /*  adjacent(Room, Exists_Outside) :-
       happens(inviteIn(Agent1, Agent2, Room), Time),
       some(Exists_Outside,
            '$kolem_Fn_64'(Agent1, Agent2, Room, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',45).

 /*  fix_axiom_head(Time) ->
       [ happens(inviteIn(Agent1, Agent2, Room), Time),
          (->),
         inviteIn(Agent1, Agent2, Room)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',45).

 /*  pl=axiom(adjacent(Room,Exists_Outside),
         [ inviteIn(Agent1,Agent2,Room),
   	some(Exists_Outside,
   	     '$kolem_Fn_64'(Agent1,
   			    Agent2,
   			    Room,
   			    Time))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',45).

 /*  (   inviteIn(Agent1, Agent2, Room),
       some(Exists_Outside,
            '$kolem_Fn_64'(Agent1, Agent2, Room, Time))
   ->  adjacent(Room, Exists_Outside)
   ).
 */
if inviteIn(Agent1, Agent2, Room), some(Exists_Outside, '$kolem_Fn_64'(Agent1, Agent2, Room, Time))then adjacent(Room, Exists_Outside).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',45).

 /*  reactive_rule([ inviteIn(Agent1,Agent2,Room),
   		some(Exists_Outside,
   		     '$kolem_Fn_64'(Agent1,
   				    Agent2,
   				    Room,
   				    Time))
   	      ],
   	      [adjacent(Room,Exists_Outside)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',45).

 /*  reactive_rule([ inviteIn(Agent1,Agent2,Room),
   		some(Exists_Outside,
   		     '$kolem_Fn_64'(Agent1,
   				    Agent2,
   				    Room,
   				    Time))
   	      ],
   	      [adjacent(Room,Exists_Outside)]).
 */


%; An effect axiom states that if
%; an agent invites another agent into a room,
%; the second agent will be invited into the room by the first agent:
% [agent1,agent2,room,time]
% Initiates(InviteIn(agent1,agent2,room),
%           InvitedIn(agent2,room,agent1),
%           time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',52).

 /*  pl=axiom(initiates(inviteIn(Agent1,Agent2,Room),
   		invitedIn(Agent2,Room,Agent1),
   		Time),
         []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',52).

 /*  initiates(inviteIn(Agent1,Agent2,Room),
   	  invitedIn(Agent2,Room,Agent1),
   	  Time).
 */
inviteIn(Agent1, Agent2, Room)initiates invitedIn(Agent2, Room, Agent1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',52).

 /*  initiated(happens(inviteIn(Agent1,Agent2,Room),
   		  Time_From,
   		  Time_Until),
   	  invitedIn(Agent2,Room,Agent1),
   	  []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',52).

 /*  initiated(happens(inviteIn(Agent1,Agent2,Room),
   		  Time_From,
   		  Time_Until),
   	  invitedIn(Agent2,Room,Agent1),
   	  []).
 */


%; agent intends to walk into room.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',58).
% event IntendToWalkIn(agent,room)
 %  blue=event(intendToWalkIn(agent,room)).
 %  event(intendToWalkIn(agent,room)).
actions([intendToWalkIn/2]).
 %  actions([intendToWalkIn/2]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',58).
mpred_prop(intendToWalkIn(agent,room),event).
 %  mpred_prop(intendToWalkIn(agent,room),event).


%; agent has the intention to walk into room.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',60).
% fluent IntentionToWalkIn(agent,room)
 %  blue=fluent(intentionToWalkIn(agent,room)).
 %  fluent(intentionToWalkIn(agent,room)).
fluents([intentionToWalkIn/2]).
 %  fluents([intentionToWalkIn/2]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',60).
mpred_prop(intentionToWalkIn(agent,room),fluent).
 %  mpred_prop(intentionToWalkIn(agent,room),fluent).


%; agent acts on the intention to walk into room.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',62).
% fluent ActOnIntentionToWalkIn(agent,room)
 %  blue=fluent(actOnIntentionToWalkIn(agent,room)).
 %  fluent(actOnIntentionToWalkIn(agent,room)).
fluents([actOnIntentionToWalkIn/2]).
 %  fluents([actOnIntentionToWalkIn/2]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',62).
mpred_prop(actOnIntentionToWalkIn(agent,room),fluent).
 %  mpred_prop(actOnIntentionToWalkIn(agent,room),fluent).

% noninertial ActOnIntentionToWalkIn
noninertial(actOnIntentionToWalkIn).
 %  noninertial(actOnIntentionToWalkIn).
%; A trigger axiom states that
%; if an agent is invited into a room by another agent,
%; the first agent likes the second agent, and
%; the first agent does not already have the intention to
%; walk into the room,
%; the first agent intends to walk into the room:
% [agent1,agent2,room,time]
% HoldsAt(InvitedIn(agent1,room,agent2),time) &
% HoldsAt(Like(agent1,agent2),time) &
% !HoldsAt(IntentionToWalkIn(agent1,room),time) ->
% Happens(IntendToWalkIn(agent1,room),time).
 %  clausify_pnf=(holds_at(invitedIn(Agent1, Room, Agent2), Time), holds_at(like(Agent1, Agent2), Time), holds_at(neg(intentionToWalkIn(Agent1, Room)), Time)->happens(intendToWalkIn(Agent1, Room), Time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',71).

 /*  happens(intendToWalkIn(Agent1, Room), Time) :-
       holds_at(invitedIn(Agent1, Room, Agent2), Time),
       holds_at(like(Agent1, Agent2), Time),
       holds_at(neg(intentionToWalkIn(Agent1, Room)), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',71).

 /*  fix_axiom_head(Time) ->
       [ happens(intendToWalkIn(Agent1, Room), Time),
          (->),
         intendToWalkIn(Agent1, Room)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',71).

 /*  pl=axiom(intendToWalkIn(Agent1,Room),
         [ invitedIn(Agent1,Room,Agent2),
   	like(Agent1,Agent2),
   	not(intentionToWalkIn(Agent1,Room))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',71).

 /*  (   invitedIn(Agent1, Room, Agent2),
       like(Agent1, Agent2),
       not(intentionToWalkIn(Agent1, Room))
   ->  intendToWalkIn(Agent1, Room)
   ).
 */
if invitedIn(Agent1, Room, Agent2), like(Agent1, Agent2), not intentionToWalkIn(Agent1, Room)then intendToWalkIn(Agent1, Room).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',71).

 /*  reactive_rule([ holds(invitedIn(Agent1,Room,Agent2),
   		      Holds),
   		like(Agent1,Agent2),
   		not(intentionToWalkIn(Agent1,Room))
   	      ],
   	      [intendToWalkIn(Agent1,Room)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',71).

 /*  reactive_rule([ holds(invitedIn(Agent1,Room,Agent2),
   		      Holds),
   		like(Agent1,Agent2),
   		not(intentionToWalkIn(Agent1,Room))
   	      ],
   	      [intendToWalkIn(Agent1,Room)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',71).

 /*  not(holds_at(invitedIn(Agent1, Room, Agent2), Time)) :-
       holds_at(like(Agent1, Agent2), Time),
       holds_at(neg(intentionToWalkIn(Agent1, Room)), Time),
       not(happens(intendToWalkIn(Agent1, Room), Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',71).

 /*  pl=axiom(not(invitedIn(Agent1,Room,Agent2)),
         [ like(Agent1,Agent2),
   	not(intentionToWalkIn(Agent1,Room)),
   	not(intendToWalkIn(Agent1,Room))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',71).

 /*  (   like(Agent1, Agent2),
       not(intentionToWalkIn(Agent1, Room)),
       not(intendToWalkIn(Agent1, Room))
   ->  not(invitedIn(Agent1, Room, Agent2))
   ).
 */
if like(Agent1, Agent2), not intentionToWalkIn(Agent1, Room), not intendToWalkIn(Agent1, Room)then not invitedIn(Agent1, Room, Agent2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',71).

 /*  reactive_rule([ like(Agent1,Agent2),
   		not(intentionToWalkIn(Agent1,Room)),
   		not(intendToWalkIn(Agent1,Room))
   	      ],
   	      [ holds(not(invitedIn(Agent1,
   				    Room,
   				    Agent2)),
   		      Holds5)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',71).

 /*  reactive_rule([ like(Agent1,Agent2),
   		not(intentionToWalkIn(Agent1,Room)),
   		not(intendToWalkIn(Agent1,Room))
   	      ],
   	      [ holds(not(invitedIn(Agent1,
   				    Room,
   				    Agent2)),
   		      Holds5)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',71).

 /*  not(holds_at(like(Agent1, Agent2), Time)) :-
       holds_at(neg(intentionToWalkIn(Agent1, Room)), Time),
       holds_at(invitedIn(Agent1, Room, Agent2), Time),
       not(happens(intendToWalkIn(Agent1, Room), Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',71).

 /*  pl=axiom(not(like(Agent1,Agent2)),
         [ not(intentionToWalkIn(Agent1,Room)),
   	invitedIn(Agent1,Room,Agent2),
   	not(intendToWalkIn(Agent1,Room))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',71).

 /*  (   not(intentionToWalkIn(Agent1, Room)),
       invitedIn(Agent1, Room, Agent2),
       not(intendToWalkIn(Agent1, Room))
   ->  not(like(Agent1, Agent2))
   ).
 */
if not intentionToWalkIn(Agent1, Room), invitedIn(Agent1, Room, Agent2), not intendToWalkIn(Agent1, Room)then not like(Agent1, Agent2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',71).

 /*  reactive_rule([ not(intentionToWalkIn(Agent1,Room)),
   		holds(invitedIn(Agent1,Room,Agent2),
   		      Holds6),
   		not(intendToWalkIn(Agent1,Room))
   	      ],
   	      [not(like(Agent1,Agent2))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',71).

 /*  reactive_rule([ not(intentionToWalkIn(Agent1,Room)),
   		holds(invitedIn(Agent1,Room,Agent2),
   		      Holds6),
   		not(intendToWalkIn(Agent1,Room))
   	      ],
   	      [not(like(Agent1,Agent2))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',71).

 /*  not(holds_at(neg(intentionToWalkIn(Agent1, Room)), Time)) :-
       holds_at(like(Agent1, Agent2), Time),
       holds_at(invitedIn(Agent1, Room, Agent2), Time),
       not(happens(intendToWalkIn(Agent1, Room), Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',71).

 /*  pl=axiom(not(not(intentionToWalkIn(Agent1,Room))),
         [ like(Agent1,Agent2),
   	invitedIn(Agent1,Room,Agent2),
   	not(intendToWalkIn(Agent1,Room))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',71).

 /*  (   like(Agent1, Agent2),
       invitedIn(Agent1, Room, Agent2),
       not(intendToWalkIn(Agent1, Room))
   ->  not(not(intentionToWalkIn(Agent1, Room)))
   ).
 */
if like(Agent1, Agent2), invitedIn(Agent1, Room, Agent2), not intendToWalkIn(Agent1, Room)then not not intentionToWalkIn(Agent1, Room).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',71).

 /*  reactive_rule([ like(Agent1,Agent2),
   		holds(invitedIn(Agent1,Room,Agent2),
   		      Holds7),
   		not(intendToWalkIn(Agent1,Room))
   	      ],
   	      [not(not(intentionToWalkIn(Agent1,Room)))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',71).

 /*  reactive_rule([ like(Agent1,Agent2),
   		holds(invitedIn(Agent1,Room,Agent2),
   		      Holds7),
   		not(intendToWalkIn(Agent1,Room))
   	      ],
   	      [not(not(intentionToWalkIn(Agent1,Room)))]).
 */


%; An effect axiom states that
%; if an agent intends to walk into a room,
%; the agent will have the intention to walk into the room:
% [agent,room,time]
% Initiates(IntendToWalkIn(agent,room),
%           IntentionToWalkIn(agent,room),
%           time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',80).

 /*  pl=axiom(initiates(intendToWalkIn(Agent,Room),
   		intentionToWalkIn(Agent,Room),
   		Time),
         []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',80).

 /*  initiates(intendToWalkIn(Agent,Room),
   	  intentionToWalkIn(Agent,Room),
   	  Time).
 */
intendToWalkIn(Agent, Room)initiates intentionToWalkIn(Agent, Room).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',80).

 /*  initiated(happens(intendToWalkIn(Agent,Room),
   		  Time_From,
   		  Time_Until),
   	  intentionToWalkIn(Agent,Room),
   	  []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',80).

 /*  initiated(happens(intendToWalkIn(Agent,Room),
   		  Time_From,
   		  Time_Until),
   	  intentionToWalkIn(Agent,Room),
   	  []).
 */


%; Two trigger axioms state that
%; if an agent has the intention to walk into a room,
%; the agent acts on the intention to walk into the room,
%; the agent is at a location,
%; side one (two) of a door is the room,
%; side two (one) of the door is the location,
%; agent will walk through side two (one) of the door:
% [agent,room,location,door,time]
% HoldsAt(IntentionToWalkIn(agent,room),time) &
% HoldsAt(ActOnIntentionToWalkIn(agent,room),time) &
% HoldsAt(At(agent,location),time) &
% Side1(door)=room &
% Side2(door)=location ->
% Happens(WalkThroughDoor21(agent,door),time).
 %  clausify_pnf=(holds_at(intentionToWalkIn(Agent, Room), Time), holds_at(actOnIntentionToWalkIn(Agent, Room), Time), holds_at(at(Agent, Location), Time), side1Pred(Door, Room), side2Pred(Door, Location)->happens(walkThroughDoor21(Agent, Door), Time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',92).

 /*  happens(walkThroughDoor21(Agent, Door), Time) :-
       holds_at(intentionToWalkIn(Agent, Room), Time),
       holds_at(actOnIntentionToWalkIn(Agent, Room), Time),
       holds_at(at(Agent, Location), Time),
       side1Pred(Door, Room),
       side2Pred(Door, Location).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',92).

 /*  fix_axiom_head(Time) ->
       [ happens(walkThroughDoor21(Agent, Door), Time),
          (->),
         walkThroughDoor21(Agent, Door)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',92).

 /*  pl=axiom(walkThroughDoor21(Agent,Door),
         [ intentionToWalkIn(Agent,Room),
   	actOnIntentionToWalkIn(Agent,Room),
   	at(Agent,Location),
   	side1Pred(Door,Room),
   	side2Pred(Door,Location)
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',92).

 /*  (   intentionToWalkIn(Agent, Room),
       actOnIntentionToWalkIn(Agent, Room),
       at(Agent, Location),
       side1Pred(Door, Room),
       side2Pred(Door, Location)
   ->  walkThroughDoor21(Agent, Door)
   ).
 */
if intentionToWalkIn(Agent, Room), actOnIntentionToWalkIn(Agent, Room), loc_at(Agent, Location), side1Pred(Door, Room), side2Pred(Door, Location)then walkThroughDoor21(Agent, Door).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',92).

 /*  reactive_rule([ holds(intentionToWalkIn(Agent,Room),
   		      Holds),
   		actOnIntentionToWalkIn(Agent,Room),
   		loc_at(Agent,Location),
   		side1Pred(Door,Room),
   		side2Pred(Door,Location)
   	      ],
   	      [walkThroughDoor21(Agent,Door)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',92).

 /*  reactive_rule([ holds(intentionToWalkIn(Agent,Room),
   		      Holds),
   		actOnIntentionToWalkIn(Agent,Room),
   		loc_at(Agent,Location),
   		side1Pred(Door,Room),
   		side2Pred(Door,Location)
   	      ],
   	      [walkThroughDoor21(Agent,Door)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',92).

 /*  not(holds_at(intentionToWalkIn(Agent, Room), Time)) :-
       holds_at(actOnIntentionToWalkIn(Agent, Room), Time),
       holds_at(at(Agent, Location), Time),
       side1Pred(Door, Room),
       side2Pred(Door, Location),
       not(happens(walkThroughDoor21(Agent, Door), Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',92).

 /*  pl=axiom(not(intentionToWalkIn(Agent,Room)),
         [ actOnIntentionToWalkIn(Agent,Room),
   	at(Agent,Location),
   	side1Pred(Door,Room),
   	side2Pred(Door,Location),
   	not(walkThroughDoor21(Agent,Door))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',92).

 /*  (   actOnIntentionToWalkIn(Agent, Room),
       at(Agent, Location),
       side1Pred(Door, Room),
       side2Pred(Door, Location),
       not(walkThroughDoor21(Agent, Door))
   ->  not(intentionToWalkIn(Agent, Room))
   ).
 */
if actOnIntentionToWalkIn(Agent, Room), loc_at(Agent, Location), side1Pred(Door, Room), side2Pred(Door, Location), not walkThroughDoor21(Agent, Door)then not intentionToWalkIn(Agent, Room).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',92).

 /*  reactive_rule([ actOnIntentionToWalkIn(Agent,Room),
   		loc_at(Agent,Location),
   		side1Pred(Door,Room),
   		side2Pred(Door,Location),
   		not(walkThroughDoor21(Agent,Door))
   	      ],
   	      [ holds(not(intentionToWalkIn(Agent,Room)),
   		      Holds6)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',92).

 /*  reactive_rule([ actOnIntentionToWalkIn(Agent,Room),
   		loc_at(Agent,Location),
   		side1Pred(Door,Room),
   		side2Pred(Door,Location),
   		not(walkThroughDoor21(Agent,Door))
   	      ],
   	      [ holds(not(intentionToWalkIn(Agent,Room)),
   		      Holds6)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',92).

 /*  not(holds_at(actOnIntentionToWalkIn(Agent, Room), Time)) :-
       holds_at(at(Agent, Location), Time),
       side1Pred(Door, Room),
       side2Pred(Door, Location),
       holds_at(intentionToWalkIn(Agent, Room), Time),
       not(happens(walkThroughDoor21(Agent, Door), Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',92).

 /*  pl=axiom(not(actOnIntentionToWalkIn(Agent,Room)),
         [ at(Agent,Location),
   	side1Pred(Door,Room),
   	side2Pred(Door,Location),
   	intentionToWalkIn(Agent,Room),
   	not(walkThroughDoor21(Agent,Door))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',92).

 /*  (   at(Agent, Location),
       side1Pred(Door, Room),
       side2Pred(Door, Location),
       intentionToWalkIn(Agent, Room),
       not(walkThroughDoor21(Agent, Door))
   ->  not(actOnIntentionToWalkIn(Agent, Room))
   ).
 */
if loc_at(Agent, Location), side1Pred(Door, Room), side2Pred(Door, Location), intentionToWalkIn(Agent, Room), not walkThroughDoor21(Agent, Door)then not actOnIntentionToWalkIn(Agent, Room).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',92).

 /*  reactive_rule([ loc_at(Agent,Location),
   		side1Pred(Door,Room),
   		side2Pred(Door,Location),
   		holds(intentionToWalkIn(Agent,Room),
   		      Holds7),
   		not(walkThroughDoor21(Agent,Door))
   	      ],
   	      [not(actOnIntentionToWalkIn(Agent,Room))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',92).

 /*  reactive_rule([ loc_at(Agent,Location),
   		side1Pred(Door,Room),
   		side2Pred(Door,Location),
   		holds(intentionToWalkIn(Agent,Room),
   		      Holds7),
   		not(walkThroughDoor21(Agent,Door))
   	      ],
   	      [not(actOnIntentionToWalkIn(Agent,Room))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',92).

 /*  not(holds_at(at(Agent, Location), Time)) :-
       side1Pred(Door, Room),
       side2Pred(Door, Location),
       holds_at(actOnIntentionToWalkIn(Agent, Room), Time),
       holds_at(intentionToWalkIn(Agent, Room), Time),
       not(happens(walkThroughDoor21(Agent, Door), Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',92).

 /*  pl=axiom(not(at(Agent,Location)),
         [ side1Pred(Door,Room),
   	side2Pred(Door,Location),
   	actOnIntentionToWalkIn(Agent,Room),
   	intentionToWalkIn(Agent,Room),
   	not(walkThroughDoor21(Agent,Door))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',92).

 /*  (   side1Pred(Door, Room),
       side2Pred(Door, Location),
       actOnIntentionToWalkIn(Agent, Room),
       intentionToWalkIn(Agent, Room),
       not(walkThroughDoor21(Agent, Door))
   ->  not(at(Agent, Location))
   ).
 */
if side1Pred(Door, Room), side2Pred(Door, Location), actOnIntentionToWalkIn(Agent, Room), intentionToWalkIn(Agent, Room), not walkThroughDoor21(Agent, Door)then not loc_at(Agent, Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',92).

 /*  reactive_rule([ side1Pred(Door,Room),
   		side2Pred(Door,Location),
   		actOnIntentionToWalkIn(Agent,Room),
   		holds(intentionToWalkIn(Agent,Room),
   		      Holds8),
   		not(walkThroughDoor21(Agent,Door))
   	      ],
   	      [not(loc_at(Agent,Location))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',92).

 /*  reactive_rule([ side1Pred(Door,Room),
   		side2Pred(Door,Location),
   		actOnIntentionToWalkIn(Agent,Room),
   		holds(intentionToWalkIn(Agent,Room),
   		      Holds8),
   		not(walkThroughDoor21(Agent,Door))
   	      ],
   	      [not(loc_at(Agent,Location))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',92).

 /*  not(side1Pred(Door, Room)) :-
       side2Pred(Door, Location),
       holds_at(at(Agent, Location), Time),
       holds_at(actOnIntentionToWalkIn(Agent, Room), Time),
       holds_at(intentionToWalkIn(Agent, Room), Time),
       not(happens(walkThroughDoor21(Agent, Door), Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',92).

 /*  fix_axiom_head(Time) ->
       [ holds_at(at(Agent, Location), Time),
          (->),
         at(Agent, Location)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',92).

 /*  fix_axiom_head(Time) ->
       [ holds_at(actOnIntentionToWalkIn(Agent, Room), Time),
          (->),
         actOnIntentionToWalkIn(Agent, Room)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',92).

 /*  fix_axiom_head(Time) ->
       [ holds_at(intentionToWalkIn(Agent, Room), Time),
          (->),
         intentionToWalkIn(Agent, Room)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',92).

 /*  fix_axiom_head(Time) ->
       [ not(happens(walkThroughDoor21(Agent, Door), Time)),
          (->),
         not(walkThroughDoor21(Agent, Door))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',92).

 /*  pl=axiom(not(side1Pred(Door,Room)),
         [ side2Pred(Door,Location),
   	at(Agent,Location),
   	actOnIntentionToWalkIn(Agent,Room),
   	intentionToWalkIn(Agent,Room),
   	not(walkThroughDoor21(Agent,Door))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',92).

 /*  (   side2Pred(Door, Location),
       at(Agent, Location),
       actOnIntentionToWalkIn(Agent, Room),
       intentionToWalkIn(Agent, Room),
       not(walkThroughDoor21(Agent, Door))
   ->  not(side1Pred(Door, Room))
   ).
 */
if side2Pred(Door, Location), loc_at(Agent, Location), actOnIntentionToWalkIn(Agent, Room), intentionToWalkIn(Agent, Room), not walkThroughDoor21(Agent, Door)then not side1Pred(Door, Room).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',92).

 /*  reactive_rule([ side2Pred(Door,Location),
   		loc_at(Agent,Location),
   		actOnIntentionToWalkIn(Agent,Room),
   		holds(intentionToWalkIn(Agent,Room),
   		      Holds9),
   		not(walkThroughDoor21(Agent,Door))
   	      ],
   	      [not(side1Pred(Door,Room))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',92).

 /*  reactive_rule([ side2Pred(Door,Location),
   		loc_at(Agent,Location),
   		actOnIntentionToWalkIn(Agent,Room),
   		holds(intentionToWalkIn(Agent,Room),
   		      Holds9),
   		not(walkThroughDoor21(Agent,Door))
   	      ],
   	      [not(side1Pred(Door,Room))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',92).

 /*  not(side2Pred(Door, Location)) :-
       side1Pred(Door, Room),
       holds_at(at(Agent, Location), Time),
       holds_at(actOnIntentionToWalkIn(Agent, Room), Time),
       holds_at(intentionToWalkIn(Agent, Room), Time),
       not(happens(walkThroughDoor21(Agent, Door), Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',92).

 /*  fix_axiom_head(Time) ->
       [ holds_at(at(Agent, Location), Time),
          (->),
         at(Agent, Location)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',92).

 /*  fix_axiom_head(Time) ->
       [ holds_at(actOnIntentionToWalkIn(Agent, Room), Time),
          (->),
         actOnIntentionToWalkIn(Agent, Room)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',92).

 /*  fix_axiom_head(Time) ->
       [ holds_at(intentionToWalkIn(Agent, Room), Time),
          (->),
         intentionToWalkIn(Agent, Room)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',92).

 /*  fix_axiom_head(Time) ->
       [ not(happens(walkThroughDoor21(Agent, Door), Time)),
          (->),
         not(walkThroughDoor21(Agent, Door))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',92).

 /*  pl=axiom(not(side2Pred(Door,Location)),
         [ side1Pred(Door,Room),
   	at(Agent,Location),
   	actOnIntentionToWalkIn(Agent,Room),
   	intentionToWalkIn(Agent,Room),
   	not(walkThroughDoor21(Agent,Door))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',92).

 /*  (   side1Pred(Door, Room),
       at(Agent, Location),
       actOnIntentionToWalkIn(Agent, Room),
       intentionToWalkIn(Agent, Room),
       not(walkThroughDoor21(Agent, Door))
   ->  not(side2Pred(Door, Location))
   ).
 */
if side1Pred(Door, Room), loc_at(Agent, Location), actOnIntentionToWalkIn(Agent, Room), intentionToWalkIn(Agent, Room), not walkThroughDoor21(Agent, Door)then not side2Pred(Door, Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',92).

 /*  reactive_rule([ side1Pred(Door,Room),
   		loc_at(Agent,Location),
   		actOnIntentionToWalkIn(Agent,Room),
   		holds(intentionToWalkIn(Agent,Room),
   		      Holds10),
   		not(walkThroughDoor21(Agent,Door))
   	      ],
   	      [not(side2Pred(Door,Location))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',92).

 /*  reactive_rule([ side1Pred(Door,Room),
   		loc_at(Agent,Location),
   		actOnIntentionToWalkIn(Agent,Room),
   		holds(intentionToWalkIn(Agent,Room),
   		      Holds10),
   		not(walkThroughDoor21(Agent,Door))
   	      ],
   	      [not(side2Pred(Door,Location))]).
 */


% [agent,room,location,door,time]
% HoldsAt(IntentionToWalkIn(agent,room),time) &
% HoldsAt(ActOnIntentionToWalkIn(agent,room),time) &
% HoldsAt(At(agent,location),time) &
% Side2(door)=room &
% Side1(door)=location ->
% Happens(WalkThroughDoor12(agent,door),time).
 %  clausify_pnf=(holds_at(intentionToWalkIn(Agent, Room), Time), holds_at(actOnIntentionToWalkIn(Agent, Room), Time), holds_at(at(Agent, Location), Time), side2Pred(Door, Room), side1Pred(Door, Location)->happens(walkThroughDoor12(Agent, Door), Time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',101).

 /*  happens(walkThroughDoor12(Agent, Door), Time) :-
       holds_at(intentionToWalkIn(Agent, Room), Time),
       holds_at(actOnIntentionToWalkIn(Agent, Room), Time),
       holds_at(at(Agent, Location), Time),
       side2Pred(Door, Room),
       side1Pred(Door, Location).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',101).

 /*  fix_axiom_head(Time) ->
       [ happens(walkThroughDoor12(Agent, Door), Time),
          (->),
         walkThroughDoor12(Agent, Door)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',101).

 /*  pl=axiom(walkThroughDoor12(Agent,Door),
         [ intentionToWalkIn(Agent,Room),
   	actOnIntentionToWalkIn(Agent,Room),
   	at(Agent,Location),
   	side2Pred(Door,Room),
   	side1Pred(Door,Location)
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',101).

 /*  (   intentionToWalkIn(Agent, Room),
       actOnIntentionToWalkIn(Agent, Room),
       at(Agent, Location),
       side2Pred(Door, Room),
       side1Pred(Door, Location)
   ->  walkThroughDoor12(Agent, Door)
   ).
 */
if intentionToWalkIn(Agent, Room), actOnIntentionToWalkIn(Agent, Room), loc_at(Agent, Location), side2Pred(Door, Room), side1Pred(Door, Location)then walkThroughDoor12(Agent, Door).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',101).

 /*  reactive_rule([ holds(intentionToWalkIn(Agent,Room),
   		      Holds),
   		actOnIntentionToWalkIn(Agent,Room),
   		loc_at(Agent,Location),
   		side2Pred(Door,Room),
   		side1Pred(Door,Location)
   	      ],
   	      [walkThroughDoor12(Agent,Door)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',101).

 /*  reactive_rule([ holds(intentionToWalkIn(Agent,Room),
   		      Holds),
   		actOnIntentionToWalkIn(Agent,Room),
   		loc_at(Agent,Location),
   		side2Pred(Door,Room),
   		side1Pred(Door,Location)
   	      ],
   	      [walkThroughDoor12(Agent,Door)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',101).

 /*  not(holds_at(intentionToWalkIn(Agent, Room), Time)) :-
       holds_at(actOnIntentionToWalkIn(Agent, Room), Time),
       holds_at(at(Agent, Location), Time),
       side2Pred(Door, Room),
       side1Pred(Door, Location),
       not(happens(walkThroughDoor12(Agent, Door), Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',101).

 /*  pl=axiom(not(intentionToWalkIn(Agent,Room)),
         [ actOnIntentionToWalkIn(Agent,Room),
   	at(Agent,Location),
   	side2Pred(Door,Room),
   	side1Pred(Door,Location),
   	not(walkThroughDoor12(Agent,Door))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',101).

 /*  (   actOnIntentionToWalkIn(Agent, Room),
       at(Agent, Location),
       side2Pred(Door, Room),
       side1Pred(Door, Location),
       not(walkThroughDoor12(Agent, Door))
   ->  not(intentionToWalkIn(Agent, Room))
   ).
 */
if actOnIntentionToWalkIn(Agent, Room), loc_at(Agent, Location), side2Pred(Door, Room), side1Pred(Door, Location), not walkThroughDoor12(Agent, Door)then not intentionToWalkIn(Agent, Room).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',101).

 /*  reactive_rule([ actOnIntentionToWalkIn(Agent,Room),
   		loc_at(Agent,Location),
   		side2Pred(Door,Room),
   		side1Pred(Door,Location),
   		not(walkThroughDoor12(Agent,Door))
   	      ],
   	      [ holds(not(intentionToWalkIn(Agent,Room)),
   		      Holds6)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',101).

 /*  reactive_rule([ actOnIntentionToWalkIn(Agent,Room),
   		loc_at(Agent,Location),
   		side2Pred(Door,Room),
   		side1Pred(Door,Location),
   		not(walkThroughDoor12(Agent,Door))
   	      ],
   	      [ holds(not(intentionToWalkIn(Agent,Room)),
   		      Holds6)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',101).

 /*  not(holds_at(actOnIntentionToWalkIn(Agent, Room), Time)) :-
       holds_at(at(Agent, Location), Time),
       side2Pred(Door, Room),
       side1Pred(Door, Location),
       holds_at(intentionToWalkIn(Agent, Room), Time),
       not(happens(walkThroughDoor12(Agent, Door), Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',101).

 /*  pl=axiom(not(actOnIntentionToWalkIn(Agent,Room)),
         [ at(Agent,Location),
   	side2Pred(Door,Room),
   	side1Pred(Door,Location),
   	intentionToWalkIn(Agent,Room),
   	not(walkThroughDoor12(Agent,Door))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',101).

 /*  (   at(Agent, Location),
       side2Pred(Door, Room),
       side1Pred(Door, Location),
       intentionToWalkIn(Agent, Room),
       not(walkThroughDoor12(Agent, Door))
   ->  not(actOnIntentionToWalkIn(Agent, Room))
   ).
 */
if loc_at(Agent, Location), side2Pred(Door, Room), side1Pred(Door, Location), intentionToWalkIn(Agent, Room), not walkThroughDoor12(Agent, Door)then not actOnIntentionToWalkIn(Agent, Room).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',101).

 /*  reactive_rule([ loc_at(Agent,Location),
   		side2Pred(Door,Room),
   		side1Pred(Door,Location),
   		holds(intentionToWalkIn(Agent,Room),
   		      Holds7),
   		not(walkThroughDoor12(Agent,Door))
   	      ],
   	      [not(actOnIntentionToWalkIn(Agent,Room))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',101).

 /*  reactive_rule([ loc_at(Agent,Location),
   		side2Pred(Door,Room),
   		side1Pred(Door,Location),
   		holds(intentionToWalkIn(Agent,Room),
   		      Holds7),
   		not(walkThroughDoor12(Agent,Door))
   	      ],
   	      [not(actOnIntentionToWalkIn(Agent,Room))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',101).

 /*  not(holds_at(at(Agent, Location), Time)) :-
       side2Pred(Door, Room),
       side1Pred(Door, Location),
       holds_at(actOnIntentionToWalkIn(Agent, Room), Time),
       holds_at(intentionToWalkIn(Agent, Room), Time),
       not(happens(walkThroughDoor12(Agent, Door), Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',101).

 /*  pl=axiom(not(at(Agent,Location)),
         [ side2Pred(Door,Room),
   	side1Pred(Door,Location),
   	actOnIntentionToWalkIn(Agent,Room),
   	intentionToWalkIn(Agent,Room),
   	not(walkThroughDoor12(Agent,Door))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',101).

 /*  (   side2Pred(Door, Room),
       side1Pred(Door, Location),
       actOnIntentionToWalkIn(Agent, Room),
       intentionToWalkIn(Agent, Room),
       not(walkThroughDoor12(Agent, Door))
   ->  not(at(Agent, Location))
   ).
 */
if side2Pred(Door, Room), side1Pred(Door, Location), actOnIntentionToWalkIn(Agent, Room), intentionToWalkIn(Agent, Room), not walkThroughDoor12(Agent, Door)then not loc_at(Agent, Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',101).

 /*  reactive_rule([ side2Pred(Door,Room),
   		side1Pred(Door,Location),
   		actOnIntentionToWalkIn(Agent,Room),
   		holds(intentionToWalkIn(Agent,Room),
   		      Holds8),
   		not(walkThroughDoor12(Agent,Door))
   	      ],
   	      [not(loc_at(Agent,Location))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',101).

 /*  reactive_rule([ side2Pred(Door,Room),
   		side1Pred(Door,Location),
   		actOnIntentionToWalkIn(Agent,Room),
   		holds(intentionToWalkIn(Agent,Room),
   		      Holds8),
   		not(walkThroughDoor12(Agent,Door))
   	      ],
   	      [not(loc_at(Agent,Location))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',101).

 /*  not(side2Pred(Door, Room)) :-
       side1Pred(Door, Location),
       holds_at(at(Agent, Location), Time),
       holds_at(actOnIntentionToWalkIn(Agent, Room), Time),
       holds_at(intentionToWalkIn(Agent, Room), Time),
       not(happens(walkThroughDoor12(Agent, Door), Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',101).

 /*  fix_axiom_head(Time) ->
       [ holds_at(at(Agent, Location), Time),
          (->),
         at(Agent, Location)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',101).

 /*  fix_axiom_head(Time) ->
       [ holds_at(actOnIntentionToWalkIn(Agent, Room), Time),
          (->),
         actOnIntentionToWalkIn(Agent, Room)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',101).

 /*  fix_axiom_head(Time) ->
       [ holds_at(intentionToWalkIn(Agent, Room), Time),
          (->),
         intentionToWalkIn(Agent, Room)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',101).

 /*  fix_axiom_head(Time) ->
       [ not(happens(walkThroughDoor12(Agent, Door), Time)),
          (->),
         not(walkThroughDoor12(Agent, Door))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',101).

 /*  pl=axiom(not(side2Pred(Door,Room)),
         [ side1Pred(Door,Location),
   	at(Agent,Location),
   	actOnIntentionToWalkIn(Agent,Room),
   	intentionToWalkIn(Agent,Room),
   	not(walkThroughDoor12(Agent,Door))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',101).

 /*  (   side1Pred(Door, Location),
       at(Agent, Location),
       actOnIntentionToWalkIn(Agent, Room),
       intentionToWalkIn(Agent, Room),
       not(walkThroughDoor12(Agent, Door))
   ->  not(side2Pred(Door, Room))
   ).
 */
if side1Pred(Door, Location), loc_at(Agent, Location), actOnIntentionToWalkIn(Agent, Room), intentionToWalkIn(Agent, Room), not walkThroughDoor12(Agent, Door)then not side2Pred(Door, Room).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',101).

 /*  reactive_rule([ side1Pred(Door,Location),
   		loc_at(Agent,Location),
   		actOnIntentionToWalkIn(Agent,Room),
   		holds(intentionToWalkIn(Agent,Room),
   		      Holds9),
   		not(walkThroughDoor12(Agent,Door))
   	      ],
   	      [not(side2Pred(Door,Room))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',101).

 /*  reactive_rule([ side1Pred(Door,Location),
   		loc_at(Agent,Location),
   		actOnIntentionToWalkIn(Agent,Room),
   		holds(intentionToWalkIn(Agent,Room),
   		      Holds9),
   		not(walkThroughDoor12(Agent,Door))
   	      ],
   	      [not(side2Pred(Door,Room))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',101).

 /*  not(side1Pred(Door, Location)) :-
       side2Pred(Door, Room),
       holds_at(at(Agent, Location), Time),
       holds_at(actOnIntentionToWalkIn(Agent, Room), Time),
       holds_at(intentionToWalkIn(Agent, Room), Time),
       not(happens(walkThroughDoor12(Agent, Door), Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',101).

 /*  fix_axiom_head(Time) ->
       [ holds_at(at(Agent, Location), Time),
          (->),
         at(Agent, Location)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',101).

 /*  fix_axiom_head(Time) ->
       [ holds_at(actOnIntentionToWalkIn(Agent, Room), Time),
          (->),
         actOnIntentionToWalkIn(Agent, Room)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',101).

 /*  fix_axiom_head(Time) ->
       [ holds_at(intentionToWalkIn(Agent, Room), Time),
          (->),
         intentionToWalkIn(Agent, Room)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',101).

 /*  fix_axiom_head(Time) ->
       [ not(happens(walkThroughDoor12(Agent, Door), Time)),
          (->),
         not(walkThroughDoor12(Agent, Door))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',101).

 /*  pl=axiom(not(side1Pred(Door,Location)),
         [ side2Pred(Door,Room),
   	at(Agent,Location),
   	actOnIntentionToWalkIn(Agent,Room),
   	intentionToWalkIn(Agent,Room),
   	not(walkThroughDoor12(Agent,Door))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',101).

 /*  (   side2Pred(Door, Room),
       at(Agent, Location),
       actOnIntentionToWalkIn(Agent, Room),
       intentionToWalkIn(Agent, Room),
       not(walkThroughDoor12(Agent, Door))
   ->  not(side1Pred(Door, Location))
   ).
 */
if side2Pred(Door, Room), loc_at(Agent, Location), actOnIntentionToWalkIn(Agent, Room), intentionToWalkIn(Agent, Room), not walkThroughDoor12(Agent, Door)then not side1Pred(Door, Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',101).

 /*  reactive_rule([ side2Pred(Door,Room),
   		loc_at(Agent,Location),
   		actOnIntentionToWalkIn(Agent,Room),
   		holds(intentionToWalkIn(Agent,Room),
   		      Holds10),
   		not(walkThroughDoor12(Agent,Door))
   	      ],
   	      [not(side1Pred(Door,Location))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',101).

 /*  reactive_rule([ side2Pred(Door,Room),
   		loc_at(Agent,Location),
   		actOnIntentionToWalkIn(Agent,Room),
   		holds(intentionToWalkIn(Agent,Room),
   		      Holds10),
   		not(walkThroughDoor12(Agent,Door))
   	      ],
   	      [not(side1Pred(Door,Location))]).
 */


%; Two effect axioms state that
%; if side one (two) of a door is a room and
%; an agent walks through side two (one) of the door,
%; the agent will no longer have the intention to
%; walk into the room:
% [agent,room,door,time]
% Side1(door)=room ->
% Terminates(WalkThroughDoor21(agent,door),
%            IntentionToWalkIn(agent,room),
%            time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',113).

 /*  pl=axiom(terminates(walkThroughDoor21(Agent,Door),
   		 intentionToWalkIn(Agent,Room),
   		 Time),
         [side1Pred(Door,Room)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',113).

 /*  side1Pred(Door, Room) ->
       terminates(walkThroughDoor21(Agent, Door),
                  intentionToWalkIn(Agent, Room),
                  Time).
 */
if side1Pred(Door, Room)then terminates(walkThroughDoor21(Agent, Door), intentionToWalkIn(Agent, Room)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',113).

 /*  reactive_rule([side1Pred(Door,Room)],
   	      [ terminates(walkThroughDoor21(Agent,Door),
   			   at(intentionToWalkIn(Agent,Room),
   			      Time),
   			   Terminates)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',113).

 /*  reactive_rule([side1Pred(Door,Room)],
   	      [ terminates(walkThroughDoor21(Agent,Door),
   			   at(intentionToWalkIn(Agent,Room),
   			      Time),
   			   Terminates)
   	      ]).
 */


% [agent,room,door,time]
% Side2(door)=room ->
% Terminates(WalkThroughDoor12(agent,door),
%            IntentionToWalkIn(agent,room),
%            time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',120).

 /*  pl=axiom(terminates(walkThroughDoor12(Agent,Door),
   		 intentionToWalkIn(Agent,Room),
   		 Time),
         [side2Pred(Door,Room)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',120).

 /*  side2Pred(Door, Room) ->
       terminates(walkThroughDoor12(Agent, Door),
                  intentionToWalkIn(Agent, Room),
                  Time).
 */
if side2Pred(Door, Room)then terminates(walkThroughDoor12(Agent, Door), intentionToWalkIn(Agent, Room)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',120).

 /*  reactive_rule([side2Pred(Door,Room)],
   	      [ terminates(walkThroughDoor12(Agent,Door),
   			   at(intentionToWalkIn(Agent,Room),
   			      Time),
   			   Terminates)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',120).

 /*  reactive_rule([side2Pred(Door,Room)],
   	      [ terminates(walkThroughDoor12(Agent,Door),
   			   at(intentionToWalkIn(Agent,Room),
   			      Time),
   			   Terminates)
   	      ]).
 */


%; agent greets object.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',126).
% event Greet(agent,object)
 %  blue=event(greet(agent,object)).
 %  event(greet(agent,object)).
actions([greet/2]).
 %  actions([greet/2]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',126).
mpred_prop(greet(agent,object),event).
 %  mpred_prop(greet(agent,object),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',128).
% event SayPleasedToMeet(agent,agent)
 %  blue=event(sayPleasedToMeet(agent,agent)).
 %  event(sayPleasedToMeet(agent,agent)).
actions([sayPleasedToMeet/2]).
 %  actions([sayPleasedToMeet/2]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',128).
mpred_prop(sayPleasedToMeet(agent,agent),event).
 %  mpred_prop(sayPleasedToMeet(agent,agent),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',130).
%; agent says goodbye to object.

% event SayGoodbye(agent,object)
 %  blue=event(sayGoodbye(agent,object)).
 %  event(sayGoodbye(agent,object)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',130).
actions([sayGoodbye/2]).
 %  actions([sayGoodbye/2]).
mpred_prop(sayGoodbye(agent,object),event).
 %  mpred_prop(sayGoodbye(agent,object),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',133).
% event TalkAbout(agent,content)
 %  blue=event(talkAbout(agent,content)).
 %  event(talkAbout(agent,content)).
actions([talkAbout/2]).
 %  actions([talkAbout/2]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',133).
mpred_prop(talkAbout(agent,content),event).
 %  mpred_prop(talkAbout(agent,content),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',135).
% event Converse(agent,agent)
 %  blue=event(converse(agent,agent)).
 %  event(converse(agent,agent)).
actions([converse/2]).
 %  actions([converse/2]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',135).
mpred_prop(converse(agent,agent),event).
 %  mpred_prop(converse(agent,agent),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',137).
% [agent1,agent2,time]
% Happens(Converse(agent1,agent2),time) ->
% {location}% 
% HoldsAt(At(agent1,location),time) &
% HoldsAt(At(agent2,location),time).
 %  clausify_pnf=exists([Location],  (happens(converse(Agent1, Agent2), Time)->holds_at(at(Agent1, Location), Time), holds_at(at(Agent2, Location), Time))).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',139).

 /*  not(happens(converse(Agent1, Agent2), Time)) :-
       (   not(holds_at(at(Agent1, Exists_Location), Time))
       ;   not(holds_at(at(Agent2, Exists_Location), Time))
       ),
       some(Exists_Location,
            '$kolem_Fn_65'(Agent1, Agent2, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',139).

 /*  fix_axiom_head(Time) ->
       [ not(happens(converse(Agent1, Agent2), Time)),
          (->),
         not(converse(Agent1, Agent2))
       ].
 */
 %   pl=axiom(not(converse(Agent1, Agent2)), [(not(at(Agent1, Exists_Location));not(at(Agent2, Exists_Location))), some(Exists_Location, '$kolem_Fn_65'(Agent1, Agent2, Time))]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',139).

 /*  (   (   not(at(Agent1, Exists_Location))
       ;   not(at(Agent2, Exists_Location))
       ),
       some(Exists_Location,
            '$kolem_Fn_65'(Agent1, Agent2, Time))
   ->  not(converse(Agent1, Agent2))
   ).
 */
if (not loc_at(Agent1, Exists_Location);not loc_at(Agent2, Exists_Location)), some(Exists_Location, '$kolem_Fn_65'(Agent1, Agent2, Time))then not converse(Agent1, Agent2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',139).

 /*   reactive_rule([  (not(loc_at(Agent1, Exists_Location));not(loc_at(Agent2, Exists_Location))),
                      some(Exists_Location,
                           '$kolem_Fn_65'(Agent1, Agent2, Time))
                    ],
                    [not(converse(Agent1, Agent2))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',139).

 /*   reactive_rule([  (not(loc_at(Agent1, Exists_Location));not(loc_at(Agent2, Exists_Location))),
                      some(Exists_Location,
                           '$kolem_Fn_65'(Agent1, Agent2, Time))
                    ],
                    [not(converse(Agent1, Agent2))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',139).

 /*  holds_at(at(Agent1, Exists_Location), Time) :-
       happens(converse(Agent1, Agent2), Time),
       some(Exists_Location,
            '$kolem_Fn_65'(Agent1, Agent2, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',139).

 /*  fix_axiom_head(Time) ->
       [ holds_at(at(Agent1, Exists_Location), Time),
          (->),
         at(Agent1, Exists_Location)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',139).

 /*  pl=axiom(at(Agent1,Exists_Location),
         [ converse(Agent1,Agent2),
   	some(Exists_Location,
   	     '$kolem_Fn_65'(Agent1,Agent2,Time))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',139).

 /*  (   converse(Agent1, Agent2),
       some(Exists_Location,
            '$kolem_Fn_65'(Agent1, Agent2, Time))
   ->  at(Agent1, Exists_Location)
   ).
 */
if converse(Agent1, Agent2), some(Exists_Location, '$kolem_Fn_65'(Agent1, Agent2, Time))then loc_at(Agent1, Exists_Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',139).

 /*  reactive_rule([ converse(Agent1,Agent2),
   		some(Exists_Location,
   		     '$kolem_Fn_65'(Agent1,Agent2,Time))
   	      ],
   	      [loc_at(Agent1,Exists_Location)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',139).

 /*  reactive_rule([ converse(Agent1,Agent2),
   		some(Exists_Location,
   		     '$kolem_Fn_65'(Agent1,Agent2,Time))
   	      ],
   	      [loc_at(Agent1,Exists_Location)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',139).

 /*  holds_at(at(Agent2, Exists_Location), Time) :-
       happens(converse(Agent1, Agent2), Time),
       some(Exists_Location,
            '$kolem_Fn_65'(Agent1, Agent2, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',139).

 /*  fix_axiom_head(Time) ->
       [ holds_at(at(Agent2, Exists_Location), Time),
          (->),
         at(Agent2, Exists_Location)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',139).

 /*  pl=axiom(at(Agent2,Exists_Location),
         [ converse(Agent1,Agent2),
   	some(Exists_Location,
   	     '$kolem_Fn_65'(Agent1,Agent2,Time))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',139).

 /*  (   converse(Agent1, Agent2),
       some(Exists_Location,
            '$kolem_Fn_65'(Agent1, Agent2, Time))
   ->  at(Agent2, Exists_Location)
   ).
 */
if converse(Agent1, Agent2), some(Exists_Location, '$kolem_Fn_65'(Agent1, Agent2, Time))then loc_at(Agent2, Exists_Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',139).

 /*  reactive_rule([ converse(Agent1,Agent2),
   		some(Exists_Location,
   		     '$kolem_Fn_65'(Agent1,Agent2,Time))
   	      ],
   	      [loc_at(Agent2,Exists_Location)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',139).

 /*  reactive_rule([ converse(Agent1,Agent2),
   		some(Exists_Location,
   		     '$kolem_Fn_65'(Agent1,Agent2,Time))
   	      ],
   	      [loc_at(Agent2,Exists_Location)]).
 */


%; A precondition axiom states that for
%; an agent to greet an object,
%; there must be a location such that
%; the agent is at the location and
%; the object is at the location:
% [agent,object,time]
% Happens(Greet(agent,object),time) ->
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',148).
% {location}% 
% HoldsAt(At(agent,location),time) &
% HoldsAt(At(object,location),time).
 %  clausify_pnf=exists([Location],  (happens(greet(Agent, Object), Time)->holds_at(at(Agent, Location), Time), holds_at(at(Object, Location), Time))).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',150).

 /*  not(happens(greet(Agent, Object), Time)) :-
       (   not(holds_at(at(Agent, Exists_Location), Time))
       ;   not(holds_at(at(Object, Exists_Location), Time))
       ),
       some(Exists_Location,
            '$kolem_Fn_66'(Agent, Object, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',150).

 /*  fix_axiom_head(Time) ->
       [ not(happens(greet(Agent, Object), Time)),
          (->),
         not(greet(Agent, Object))
       ].
 */
 %   pl=axiom(not(greet(Agent, Object)), [(not(at(Agent, Exists_Location));not(at(Object, Exists_Location))), some(Exists_Location, '$kolem_Fn_66'(Agent, Object, Time))]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',150).

 /*  (   (   not(at(Agent, Exists_Location))
       ;   not(at(Object, Exists_Location))
       ),
       some(Exists_Location,
            '$kolem_Fn_66'(Agent, Object, Time))
   ->  not(greet(Agent, Object))
   ).
 */
if (not loc_at(Agent, Exists_Location);not loc_at(Object, Exists_Location)), some(Exists_Location, '$kolem_Fn_66'(Agent, Object, Time))then not greet(Agent, Object).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',150).

 /*   reactive_rule([  (not(loc_at(Agent, Exists_Location));not(loc_at(Object, Exists_Location))),
                      some(Exists_Location,
                           '$kolem_Fn_66'(Agent, Object, Time))
                    ],
                    [not(greet(Agent, Object))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',150).

 /*   reactive_rule([  (not(loc_at(Agent, Exists_Location));not(loc_at(Object, Exists_Location))),
                      some(Exists_Location,
                           '$kolem_Fn_66'(Agent, Object, Time))
                    ],
                    [not(greet(Agent, Object))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',150).

 /*  holds_at(at(Agent, Exists_Location), Time) :-
       happens(greet(Agent, Object), Time),
       some(Exists_Location,
            '$kolem_Fn_66'(Agent, Object, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',150).

 /*  fix_axiom_head(Time) ->
       [ holds_at(at(Agent, Exists_Location), Time),
          (->),
         at(Agent, Exists_Location)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',150).

 /*  pl=axiom(at(Agent,Exists_Location),
         [ greet(Agent,Object),
   	some(Exists_Location,
   	     '$kolem_Fn_66'(Agent,Object,Time))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',150).

 /*  (   greet(Agent, Object),
       some(Exists_Location,
            '$kolem_Fn_66'(Agent, Object, Time))
   ->  at(Agent, Exists_Location)
   ).
 */
if greet(Agent, Object), some(Exists_Location, '$kolem_Fn_66'(Agent, Object, Time))then loc_at(Agent, Exists_Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',150).

 /*  reactive_rule([ greet(Agent,Object),
   		some(Exists_Location,
   		     '$kolem_Fn_66'(Agent,Object,Time))
   	      ],
   	      [loc_at(Agent,Exists_Location)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',150).

 /*  reactive_rule([ greet(Agent,Object),
   		some(Exists_Location,
   		     '$kolem_Fn_66'(Agent,Object,Time))
   	      ],
   	      [loc_at(Agent,Exists_Location)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',150).

 /*  holds_at(at(Object, Exists_Location), Time) :-
       happens(greet(Agent, Object), Time),
       some(Exists_Location,
            '$kolem_Fn_66'(Agent, Object, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',150).

 /*  fix_axiom_head(Time) ->
       [ holds_at(at(Object, Exists_Location), Time),
          (->),
         at(Object, Exists_Location)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',150).

 /*  pl=axiom(at(Object,Exists_Location),
         [ greet(Agent,Object),
   	some(Exists_Location,
   	     '$kolem_Fn_66'(Agent,Object,Time))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',150).

 /*  (   greet(Agent, Object),
       some(Exists_Location,
            '$kolem_Fn_66'(Agent, Object, Time))
   ->  at(Object, Exists_Location)
   ).
 */
if greet(Agent, Object), some(Exists_Location, '$kolem_Fn_66'(Agent, Object, Time))then loc_at(Object, Exists_Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',150).

 /*  reactive_rule([ greet(Agent,Object),
   		some(Exists_Location,
   		     '$kolem_Fn_66'(Agent,Object,Time))
   	      ],
   	      [loc_at(Object,Exists_Location)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',150).

 /*  reactive_rule([ greet(Agent,Object),
   		some(Exists_Location,
   		     '$kolem_Fn_66'(Agent,Object,Time))
   	      ],
   	      [loc_at(Object,Exists_Location)]).
 */


% [agent,object,time]
% Happens(SayGoodbye(agent,object),time) ->
% {location}% 
% HoldsAt(At(agent,location),time) &
% HoldsAt(At(object,location),time).
 %  clausify_pnf=exists([Location],  (happens(sayGoodbye(Agent, Object), Time)->holds_at(at(Agent, Location), Time), holds_at(at(Object, Location), Time))).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',155).

 /*  not(happens(sayGoodbye(Agent, Object), Time)) :-
       (   not(holds_at(at(Agent, Exists_Location), Time))
       ;   not(holds_at(at(Object, Exists_Location), Time))
       ),
       some(Exists_Location,
            '$kolem_Fn_67'(Agent, Object, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',155).

 /*  fix_axiom_head(Time) ->
       [ not(happens(sayGoodbye(Agent, Object), Time)),
          (->),
         not(sayGoodbye(Agent, Object))
       ].
 */
 %   pl=axiom(not(sayGoodbye(Agent, Object)), [(not(at(Agent, Exists_Location));not(at(Object, Exists_Location))), some(Exists_Location, '$kolem_Fn_67'(Agent, Object, Time))]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',155).

 /*  (   (   not(at(Agent, Exists_Location))
       ;   not(at(Object, Exists_Location))
       ),
       some(Exists_Location,
            '$kolem_Fn_67'(Agent, Object, Time))
   ->  not(sayGoodbye(Agent, Object))
   ).
 */
if (not loc_at(Agent, Exists_Location);not loc_at(Object, Exists_Location)), some(Exists_Location, '$kolem_Fn_67'(Agent, Object, Time))then not sayGoodbye(Agent, Object).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',155).

 /*   reactive_rule([  (not(loc_at(Agent, Exists_Location));not(loc_at(Object, Exists_Location))),
                      some(Exists_Location,
                           '$kolem_Fn_67'(Agent, Object, Time))
                    ],
                    [not(sayGoodbye(Agent, Object))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',155).

 /*   reactive_rule([  (not(loc_at(Agent, Exists_Location));not(loc_at(Object, Exists_Location))),
                      some(Exists_Location,
                           '$kolem_Fn_67'(Agent, Object, Time))
                    ],
                    [not(sayGoodbye(Agent, Object))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',155).

 /*  holds_at(at(Agent, Exists_Location), Time) :-
       happens(sayGoodbye(Agent, Object), Time),
       some(Exists_Location,
            '$kolem_Fn_67'(Agent, Object, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',155).

 /*  fix_axiom_head(Time) ->
       [ holds_at(at(Agent, Exists_Location), Time),
          (->),
         at(Agent, Exists_Location)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',155).

 /*  pl=axiom(at(Agent,Exists_Location),
         [ sayGoodbye(Agent,Object),
   	some(Exists_Location,
   	     '$kolem_Fn_67'(Agent,Object,Time))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',155).

 /*  (   sayGoodbye(Agent, Object),
       some(Exists_Location,
            '$kolem_Fn_67'(Agent, Object, Time))
   ->  at(Agent, Exists_Location)
   ).
 */
if sayGoodbye(Agent, Object), some(Exists_Location, '$kolem_Fn_67'(Agent, Object, Time))then loc_at(Agent, Exists_Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',155).

 /*  reactive_rule([ sayGoodbye(Agent,Object),
   		some(Exists_Location,
   		     '$kolem_Fn_67'(Agent,Object,Time))
   	      ],
   	      [loc_at(Agent,Exists_Location)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',155).

 /*  reactive_rule([ sayGoodbye(Agent,Object),
   		some(Exists_Location,
   		     '$kolem_Fn_67'(Agent,Object,Time))
   	      ],
   	      [loc_at(Agent,Exists_Location)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',155).

 /*  holds_at(at(Object, Exists_Location), Time) :-
       happens(sayGoodbye(Agent, Object), Time),
       some(Exists_Location,
            '$kolem_Fn_67'(Agent, Object, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',155).

 /*  fix_axiom_head(Time) ->
       [ holds_at(at(Object, Exists_Location), Time),
          (->),
         at(Object, Exists_Location)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',155).

 /*  pl=axiom(at(Object,Exists_Location),
         [ sayGoodbye(Agent,Object),
   	some(Exists_Location,
   	     '$kolem_Fn_67'(Agent,Object,Time))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',155).

 /*  (   sayGoodbye(Agent, Object),
       some(Exists_Location,
            '$kolem_Fn_67'(Agent, Object, Time))
   ->  at(Object, Exists_Location)
   ).
 */
if sayGoodbye(Agent, Object), some(Exists_Location, '$kolem_Fn_67'(Agent, Object, Time))then loc_at(Object, Exists_Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',155).

 /*  reactive_rule([ sayGoodbye(Agent,Object),
   		some(Exists_Location,
   		     '$kolem_Fn_67'(Agent,Object,Time))
   	      ],
   	      [loc_at(Object,Exists_Location)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',155).

 /*  reactive_rule([ sayGoodbye(Agent,Object),
   		some(Exists_Location,
   		     '$kolem_Fn_67'(Agent,Object,Time))
   	      ],
   	      [loc_at(Object,Exists_Location)]).
 */


%; speech: expression of emotions
%; agent cries for joy.

% event CryForJoy(agent)
 %  blue=event(cryForJoy(agent)).
 %  event(cryForJoy(agent)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',162).
actions([cryForJoy/1]).
 %  actions([cryForJoy/1]).
mpred_prop(cryForJoy(agent),event).
 %  mpred_prop(cryForJoy(agent),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',165).
%; A precondition axiom states that for
%; an agent to cry for joy,
%; the agent must be happy:
% [agent,time]
% Happens(CryForJoy(agent),time) ->
% HoldsAt(Happy(agent),time).
 %  clausify_pnf=(happens(cryForJoy(Agent), Time)->holds_at(happy(Agent), Time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',168).

 /*  holds_at(happy(Agent), Time) :-
       happens(cryForJoy(Agent), Time).
 */

 /*  pl=axiom(requires(cryForJoy(Agent),When_Time),
         [metreqs(cryForJoy(Agent))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',168).

 /*  metreqs(cryForJoy(Agent)) ->
       requires(cryForJoy(Agent), When_Time).
 */
if metreqs(cryForJoy(Agent))then requires(cryForJoy(Agent), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',168).

 /*  reactive_rule([metreqs(cryForJoy(Agent))],
   	      [requires(cryForJoy(Agent),When_Time)]).
 */

 /*  reactive_rule([metreqs(cryForJoy(Agent))],
   	      [requires(cryForJoy(Agent),When_Time)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',168).

 /*  fix_axiom_head(When_Time) ->
       [ holds_at(metreqs(cryForJoy(Agent)), When_Time),
          (->),
         metreqs(cryForJoy(Agent))
       ].
 */
 %  pl=axiom(metreqs(cryForJoy(Agent)),[happy(Agent)]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',168).

 /*  happy(Agent) ->
       metreqs(cryForJoy(Agent)).
 */
if happy(Agent)then metreqs(cryForJoy(Agent)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',168).

 /*  reactive_rule([holds(happy(Agent),Holds)],
   	      [metreqs(cryForJoy(Agent))]).
 */

 /*  reactive_rule([holds(happy(Agent),Holds)],
   	      [metreqs(cryForJoy(Agent))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',168).

 /*  not(happens(cryForJoy(Agent), When_Time)) :-
       not(holds_at(happy(Agent), When_Time)).
 */

 /*  fix_axiom_head(When_Time) ->
       [ not(happens(cryForJoy(Agent), When_Time)),
          (->),
         not(cryForJoy(Agent))
       ].
 */
 %  pl=axiom(not(cryForJoy(Agent)),[not(happy(Agent))]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',168).

 /*  not(happy(Agent)) ->
       not(cryForJoy(Agent)).
 */
if not happy(Agent)then not cryForJoy(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',168).

 /*  reactive_rule([holds(not(happy(Agent)),Holds4)],
   	      [not(cryForJoy(Agent))]).
 */

 /*  reactive_rule([holds(not(happy(Agent)),Holds4)],
   	      [not(cryForJoy(Agent))]).
 */

% event Threaten(agent,agent,weapon)
 %  blue=event(threaten(agent,agent,weapon)).
 %  event(threaten(agent,agent,weapon)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',171).
actions([threaten/3]).
 %  actions([threaten/3]).
mpred_prop(threaten(agent,agent,weapon),event).
 %  mpred_prop(threaten(agent,agent,weapon),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',174).
% event ReleaseFromThreat(agent,agent)
 %  blue=event(releaseFromThreat(agent,agent)).
 %  event(releaseFromThreat(agent,agent)).
actions([releaseFromThreat/2]).
 %  actions([releaseFromThreat/2]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',174).
mpred_prop(releaseFromThreat(agent,agent),event).
 %  mpred_prop(releaseFromThreat(agent,agent),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',176).
% fluent ThreatenedBy(agent,agent)
 %  blue=fluent(threatenedBy(agent,agent)).
 %  fluent(threatenedBy(agent,agent)).
fluents([threatenedBy/2]).
 %  fluents([threatenedBy/2]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',176).
mpred_prop(threatenedBy(agent,agent),fluent).
 %  mpred_prop(threatenedBy(agent,agent),fluent).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',178).
% [agent1,agent2,weapon,time]
% Happens(Threaten(agent1,agent2,weapon), time) ->
% HoldsAt(Holding(agent1,weapon),time) &
% {location}% 
% HoldsAt(At(agent1,location),time) &
% HoldsAt(At(agent2,location),time).
 %  clausify_pnf=exists([Location],  (happens(threaten(Agent1, Agent2, Weapon), Time)->holds_at(holding(Agent1, Weapon), Time), holds_at(at(Agent1, Location), Time), holds_at(at(Agent2, Location), Time))).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',181).

 /*  not(happens(threaten(Agent1, Agent2, Weapon), Time)) :-
       (   not(holds_at(holding(Agent1, Weapon), Time))
       ;   not(holds_at(at(Agent1, Exists_Location), Time))
       ;   not(holds_at(at(Agent2, Exists_Location), Time))
       ),
       some(Exists_Location,
            '$kolem_Fn_68'(Agent1, Agent2, Weapon, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',181).

 /*  fix_axiom_head(Time) ->
       [ not(happens(threaten(Agent1, Agent2, Weapon), Time)),
          (->),
         not(threaten(Agent1, Agent2, Weapon))
       ].
 */
 %   pl=axiom(not(threaten(Agent1, Agent2, Weapon)), [(not(holding(Agent1, Weapon));not(at(Agent1, Exists_Location));not(at(Agent2, Exists_Location))), some(Exists_Location, '$kolem_Fn_68'(Agent1, Agent2, Weapon, Time))]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',181).

 /*  (   (   not(holding(Agent1, Weapon))
       ;   not(at(Agent1, Exists_Location))
       ;   not(at(Agent2, Exists_Location))
       ),
       some(Exists_Location,
            '$kolem_Fn_68'(Agent1, Agent2, Weapon, Time))
   ->  not(threaten(Agent1, Agent2, Weapon))
   ).
 */
if (not holding(Agent1, Weapon);not loc_at(Agent1, Exists_Location);not loc_at(Agent2, Exists_Location)), some(Exists_Location, '$kolem_Fn_68'(Agent1, Agent2, Weapon, Time))then not threaten(Agent1, Agent2, Weapon).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',181).

 /*   reactive_rule([  (not(holding(Agent1, Weapon));not(loc_at(Agent1, Exists_Location));not(loc_at(Agent2, Exists_Location))),
                      some(Exists_Location,
                           '$kolem_Fn_68'(Agent1,
                                          Agent2,
                                          Weapon,
                                          Time))
                    ],
                    [not(threaten(Agent1, Agent2, Weapon))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',181).

 /*   reactive_rule([  (not(holding(Agent1, Weapon));not(loc_at(Agent1, Exists_Location));not(loc_at(Agent2, Exists_Location))),
                      some(Exists_Location,
                           '$kolem_Fn_68'(Agent1,
                                          Agent2,
                                          Weapon,
                                          Time))
                    ],
                    [not(threaten(Agent1, Agent2, Weapon))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',181).

 /*  holds_at(holding(Agent1, Weapon), Time) :-
       happens(threaten(Agent1, Agent2, Weapon), Time),
       some(Exists_Location,
            '$kolem_Fn_68'(Agent1, Agent2, Weapon, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',181).

 /*  fix_axiom_head(Time) ->
       [ holds_at(holding(Agent1, Weapon), Time),
          (->),
         holding(Agent1, Weapon)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',181).

 /*  pl=axiom(holding(Agent1,Weapon),
         [ threaten(Agent1,Agent2,Weapon),
   	some(Exists_Location,
   	     '$kolem_Fn_68'(Agent1,
   			    Agent2,
   			    Weapon,
   			    Time))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',181).

 /*  (   threaten(Agent1, Agent2, Weapon),
       some(Exists_Location,
            '$kolem_Fn_68'(Agent1, Agent2, Weapon, Time))
   ->  holding(Agent1, Weapon)
   ).
 */
if threaten(Agent1, Agent2, Weapon), some(Exists_Location, '$kolem_Fn_68'(Agent1, Agent2, Weapon, Time))then holding(Agent1, Weapon).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',181).

 /*  reactive_rule([ threaten(Agent1,Agent2,Weapon),
   		some(Exists_Location,
   		     '$kolem_Fn_68'(Agent1,
   				    Agent2,
   				    Weapon,
   				    Time))
   	      ],
   	      [holds(holding(Agent1,Weapon),Holds)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',181).

 /*  reactive_rule([ threaten(Agent1,Agent2,Weapon),
   		some(Exists_Location,
   		     '$kolem_Fn_68'(Agent1,
   				    Agent2,
   				    Weapon,
   				    Time))
   	      ],
   	      [holds(holding(Agent1,Weapon),Holds)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',181).

 /*  holds_at(at(Agent1, Exists_Location), Time) :-
       happens(threaten(Agent1, Agent2, Weapon), Time),
       some(Exists_Location,
            '$kolem_Fn_68'(Agent1, Agent2, Weapon, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',181).

 /*  fix_axiom_head(Time) ->
       [ holds_at(at(Agent1, Exists_Location), Time),
          (->),
         at(Agent1, Exists_Location)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',181).

 /*  pl=axiom(at(Agent1,Exists_Location),
         [ threaten(Agent1,Agent2,Weapon),
   	some(Exists_Location,
   	     '$kolem_Fn_68'(Agent1,
   			    Agent2,
   			    Weapon,
   			    Time))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',181).

 /*  (   threaten(Agent1, Agent2, Weapon),
       some(Exists_Location,
            '$kolem_Fn_68'(Agent1, Agent2, Weapon, Time))
   ->  at(Agent1, Exists_Location)
   ).
 */
if threaten(Agent1, Agent2, Weapon), some(Exists_Location, '$kolem_Fn_68'(Agent1, Agent2, Weapon, Time))then loc_at(Agent1, Exists_Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',181).

 /*  reactive_rule([ threaten(Agent1,Agent2,Weapon),
   		some(Exists_Location,
   		     '$kolem_Fn_68'(Agent1,
   				    Agent2,
   				    Weapon,
   				    Time))
   	      ],
   	      [loc_at(Agent1,Exists_Location)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',181).

 /*  reactive_rule([ threaten(Agent1,Agent2,Weapon),
   		some(Exists_Location,
   		     '$kolem_Fn_68'(Agent1,
   				    Agent2,
   				    Weapon,
   				    Time))
   	      ],
   	      [loc_at(Agent1,Exists_Location)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',181).

 /*  holds_at(at(Agent2, Exists_Location), Time) :-
       happens(threaten(Agent1, Agent2, Weapon), Time),
       some(Exists_Location,
            '$kolem_Fn_68'(Agent1, Agent2, Weapon, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',181).

 /*  fix_axiom_head(Time) ->
       [ holds_at(at(Agent2, Exists_Location), Time),
          (->),
         at(Agent2, Exists_Location)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',181).

 /*  pl=axiom(at(Agent2,Exists_Location),
         [ threaten(Agent1,Agent2,Weapon),
   	some(Exists_Location,
   	     '$kolem_Fn_68'(Agent1,
   			    Agent2,
   			    Weapon,
   			    Time))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',181).

 /*  (   threaten(Agent1, Agent2, Weapon),
       some(Exists_Location,
            '$kolem_Fn_68'(Agent1, Agent2, Weapon, Time))
   ->  at(Agent2, Exists_Location)
   ).
 */
if threaten(Agent1, Agent2, Weapon), some(Exists_Location, '$kolem_Fn_68'(Agent1, Agent2, Weapon, Time))then loc_at(Agent2, Exists_Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',181).

 /*  reactive_rule([ threaten(Agent1,Agent2,Weapon),
   		some(Exists_Location,
   		     '$kolem_Fn_68'(Agent1,
   				    Agent2,
   				    Weapon,
   				    Time))
   	      ],
   	      [loc_at(Agent2,Exists_Location)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',181).

 /*  reactive_rule([ threaten(Agent1,Agent2,Weapon),
   		some(Exists_Location,
   		     '$kolem_Fn_68'(Agent1,
   				    Agent2,
   				    Weapon,
   				    Time))
   	      ],
   	      [loc_at(Agent2,Exists_Location)]).
 */


% [agent1,agent2,weapon,time]
% Happens(Threaten(agent1,agent2,weapon), time) ->
% Happens(BecomeAngryAt(agent2,agent1),time).
 %  clausify_pnf=(happens(threaten(Agent1, Agent2, Weapon), Time)->happens(becomeAngryAt(Agent2, Agent1), Time)).

 /*  happens(becomeAngryAt(Agent2, Agent1), Time) :-
       happens(threaten(Agent1, Agent2, Weapon), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',186).

 /*  fix_axiom_head(Time) ->
       [ happens(becomeAngryAt(Agent2, Agent1), Time),
          (->),
         becomeAngryAt(Agent2, Agent1)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',186).

 /*  pl=axiom(becomeAngryAt(Agent2,Agent1),
         [threaten(Agent1,Agent2,Weapon)]).
 */

 /*  threaten(Agent1, Agent2, Weapon) ->
       becomeAngryAt(Agent2, Agent1).
 */
if threaten(Agent1, Agent2, Weapon)then becomeAngryAt(Agent2, Agent1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',186).

 /*  reactive_rule([threaten(Agent1,Agent2,Weapon)],
   	      [ happens(becomeAngryAt(Agent2,Agent1),
   			Time_From,
   			Time_Until)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',186).

 /*  reactive_rule([threaten(Agent1,Agent2,Weapon)],
   	      [ happens(becomeAngryAt(Agent2,Agent1),
   			Time_From,
   			Time_Until)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',186).

 /*  not(happens(threaten(Agent1, Agent2, Weapon), Time)) :-
       not(happens(becomeAngryAt(Agent2, Agent1), Time)).
 */

 /*  fix_axiom_head(Time) ->
       [ not(happens(threaten(Agent1, Agent2, Weapon), Time)),
          (->),
         not(threaten(Agent1, Agent2, Weapon))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',186).

 /*  pl=axiom(not(threaten(Agent1,Agent2,Weapon)),
         [not(becomeAngryAt(Agent2,Agent1))]).
 */

 /*  not(becomeAngryAt(Agent2, Agent1)) ->
       not(threaten(Agent1, Agent2, Weapon)).
 */
if not becomeAngryAt(Agent2, Agent1)then not threaten(Agent1, Agent2, Weapon).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',186).

 /*  reactive_rule([not(becomeAngryAt(Agent2,Agent1))],
   	      [not(threaten(Agent1,Agent2,Weapon))]).
 */

 /*  reactive_rule([not(becomeAngryAt(Agent2,Agent1))],
   	      [not(threaten(Agent1,Agent2,Weapon))]).
 */


% [agent1,agent2,weapon,time]
% Initiates(Threaten(agent1,agent2,weapon),
%           ThreatenedBy(agent2,agent1),
%           time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',190).

 /*  pl=axiom(initiates(threaten(Agent1,Agent2,Weapon),
   		threatenedBy(Agent2,Agent1),
   		Time),
         []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',190).

 /*  initiates(threaten(Agent1,Agent2,Weapon),
   	  threatenedBy(Agent2,Agent1),
   	  Time).
 */
threaten(Agent1, Agent2, Weapon)initiates threatenedBy(Agent2, Agent1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',190).

 /*  initiated(happens(threaten(Agent1,Agent2,Weapon),
   		  Time_From,
   		  Time_Until),
   	  threatenedBy(Agent2,Agent1),
   	  []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',190).

 /*  initiated(happens(threaten(Agent1,Agent2,Weapon),
   		  Time_From,
   		  Time_Until),
   	  threatenedBy(Agent2,Agent1),
   	  []).
 */


% [agent1,agent2,time]
% Terminates(ReleaseFromThreat(agent1,agent2),
%            ThreatenedBy(agent2,agent1),
%            time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',195).

 /*  pl=axiom(terminates(releaseFromThreat(Agent1,Agent2),
   		 threatenedBy(Agent2,Agent1),
   		 Time),
         []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',195).

 /*  terminates(releaseFromThreat(Agent1,Agent2),
   	   threatenedBy(Agent2,Agent1),
   	   Time).
 */
releaseFromThreat(Agent1, Agent2)terminates threatenedBy(Agent2, Agent1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',195).

 /*  terminated(happens(releaseFromThreat(Agent1,Agent2),
   		   Time_From,
   		   Time_Until),
   	   threatenedBy(Agent2,Agent1),
   	   []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',195).

 /*  terminated(happens(releaseFromThreat(Agent1,Agent2),
   		   Time_From,
   		   Time_Until),
   	   threatenedBy(Agent2,Agent1),
   	   []).
 */

% event Order(agent,agent,physobj)
 %  blue=event(order(agent,agent,physobj)).
 %  event(order(agent,agent,physobj)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',198).
actions([order/3]).
 %  actions([order/3]).
mpred_prop(order(agent,agent,physobj),event).
 %  mpred_prop(order(agent,agent,physobj),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',201).
% fluent KnowOrder(agent,agent,physobj)
 %  blue=fluent(knowOrder(agent,agent,physobj)).
 %  fluent(knowOrder(agent,agent,physobj)).
fluents([knowOrder/3]).
 %  fluents([knowOrder/3]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',201).
mpred_prop(knowOrder(agent,agent,physobj),fluent).
 %  mpred_prop(knowOrder(agent,agent,physobj),fluent).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',203).
% [agent1,agent2,physobj,time]
% Initiates(Order(agent1,agent2,physobj),
%           KnowOrder(agent2,agent1,physobj),
%           time).

 /*  pl=axiom(initiates(order(Agent1,Agent2,Physobj),
   		knowOrder(Agent2,Agent1,Physobj),
   		Time),
         []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',203).

 /*  initiates(order(Agent1,Agent2,Physobj),
   	  knowOrder(Agent2,Agent1,Physobj),
   	  Time).
 */
order(Agent1, Agent2, Physobj)initiates knowOrder(Agent2, Agent1, Physobj).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',203).

 /*  initiated(happens(order(Agent1,Agent2,Physobj),
   		  Time_From,
   		  Time_Until),
   	  knowOrder(Agent2,Agent1,Physobj),
   	  []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',203).

 /*  initiated(happens(order(Agent1,Agent2,Physobj),
   		  Time_From,
   		  Time_Until),
   	  knowOrder(Agent2,Agent1,Physobj),
   	  []).
 */


% [agent1,agent2,physobj,time]
% Happens(Order(agent1,agent2,physobj),time) ->
% {location}% 
% HoldsAt(At(agent1,location),time) &
% HoldsAt(At(agent2,location),time).
 %  clausify_pnf=exists([Location],  (happens(order(Agent1, Agent2, Physobj), Time)->holds_at(at(Agent1, Location), Time), holds_at(at(Agent2, Location), Time))).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',209).

 /*  not(happens(order(Agent1, Agent2, Physobj), Time)) :-
       (   not(holds_at(at(Agent1, Exists_Location), Time))
       ;   not(holds_at(at(Agent2, Exists_Location), Time))
       ),
       some(Exists_Location,
            '$kolem_Fn_69'(Agent1, Agent2, Physobj, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',209).

 /*  fix_axiom_head(Time) ->
       [ not(happens(order(Agent1, Agent2, Physobj), Time)),
          (->),
         not(order(Agent1, Agent2, Physobj))
       ].
 */
 %   pl=axiom(not(order(Agent1, Agent2, Physobj)), [(not(at(Agent1, Exists_Location));not(at(Agent2, Exists_Location))), some(Exists_Location, '$kolem_Fn_69'(Agent1, Agent2, Physobj, Time))]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',209).

 /*  (   (   not(at(Agent1, Exists_Location))
       ;   not(at(Agent2, Exists_Location))
       ),
       some(Exists_Location,
            '$kolem_Fn_69'(Agent1, Agent2, Physobj, Time))
   ->  not(order(Agent1, Agent2, Physobj))
   ).
 */
if (not loc_at(Agent1, Exists_Location);not loc_at(Agent2, Exists_Location)), some(Exists_Location, '$kolem_Fn_69'(Agent1, Agent2, Physobj, Time))then not order(Agent1, Agent2, Physobj).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',209).

 /*   reactive_rule([  (not(loc_at(Agent1, Exists_Location));not(loc_at(Agent2, Exists_Location))),
                      some(Exists_Location,
                           '$kolem_Fn_69'(Agent1,
                                          Agent2,
                                          Physobj,
                                          Time))
                    ],
                    [not(order(Agent1, Agent2, Physobj))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',209).

 /*   reactive_rule([  (not(loc_at(Agent1, Exists_Location));not(loc_at(Agent2, Exists_Location))),
                      some(Exists_Location,
                           '$kolem_Fn_69'(Agent1,
                                          Agent2,
                                          Physobj,
                                          Time))
                    ],
                    [not(order(Agent1, Agent2, Physobj))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',209).

 /*  holds_at(at(Agent1, Exists_Location), Time) :-
       happens(order(Agent1, Agent2, Physobj), Time),
       some(Exists_Location,
            '$kolem_Fn_69'(Agent1, Agent2, Physobj, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',209).

 /*  fix_axiom_head(Time) ->
       [ holds_at(at(Agent1, Exists_Location), Time),
          (->),
         at(Agent1, Exists_Location)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',209).

 /*  pl=axiom(at(Agent1,Exists_Location),
         [ order(Agent1,Agent2,Physobj),
   	some(Exists_Location,
   	     '$kolem_Fn_69'(Agent1,
   			    Agent2,
   			    Physobj,
   			    Time))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',209).

 /*  (   order(Agent1, Agent2, Physobj),
       some(Exists_Location,
            '$kolem_Fn_69'(Agent1, Agent2, Physobj, Time))
   ->  at(Agent1, Exists_Location)
   ).
 */
if order(Agent1, Agent2, Physobj), some(Exists_Location, '$kolem_Fn_69'(Agent1, Agent2, Physobj, Time))then loc_at(Agent1, Exists_Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',209).

 /*  reactive_rule([ happens(order(Agent1,Agent2,Physobj),
   			Time_From,
   			Time_Until),
   		some(Exists_Location,
   		     '$kolem_Fn_69'(Agent1,
   				    Agent2,
   				    Physobj,
   				    Time))
   	      ],
   	      [loc_at(Agent1,Exists_Location)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',209).

 /*  reactive_rule([ happens(order(Agent1,Agent2,Physobj),
   			Time_From,
   			Time_Until),
   		some(Exists_Location,
   		     '$kolem_Fn_69'(Agent1,
   				    Agent2,
   				    Physobj,
   				    Time))
   	      ],
   	      [loc_at(Agent1,Exists_Location)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',209).

 /*  holds_at(at(Agent2, Exists_Location), Time) :-
       happens(order(Agent1, Agent2, Physobj), Time),
       some(Exists_Location,
            '$kolem_Fn_69'(Agent1, Agent2, Physobj, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',209).

 /*  fix_axiom_head(Time) ->
       [ holds_at(at(Agent2, Exists_Location), Time),
          (->),
         at(Agent2, Exists_Location)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',209).

 /*  pl=axiom(at(Agent2,Exists_Location),
         [ order(Agent1,Agent2,Physobj),
   	some(Exists_Location,
   	     '$kolem_Fn_69'(Agent1,
   			    Agent2,
   			    Physobj,
   			    Time))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',209).

 /*  (   order(Agent1, Agent2, Physobj),
       some(Exists_Location,
            '$kolem_Fn_69'(Agent1, Agent2, Physobj, Time))
   ->  at(Agent2, Exists_Location)
   ).
 */
if order(Agent1, Agent2, Physobj), some(Exists_Location, '$kolem_Fn_69'(Agent1, Agent2, Physobj, Time))then loc_at(Agent2, Exists_Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',209).

 /*  reactive_rule([ happens(order(Agent1,Agent2,Physobj),
   			Time_From8,
   			Time_Until9),
   		some(Exists_Location,
   		     '$kolem_Fn_69'(Agent1,
   				    Agent2,
   				    Physobj,
   				    Time))
   	      ],
   	      [loc_at(Agent2,Exists_Location)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',209).

 /*  reactive_rule([ happens(order(Agent1,Agent2,Physobj),
   			Time_From8,
   			Time_Until9),
   		some(Exists_Location,
   		     '$kolem_Fn_69'(Agent1,
   				    Agent2,
   				    Physobj,
   				    Time))
   	      ],
   	      [loc_at(Agent2,Exists_Location)]).
 */

% event Request(agent,agent,physobj)
 %  blue=event(request(agent,agent,physobj)).
 %  event(request(agent,agent,physobj)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',213).
actions([request/3]).
 %  actions([request/3]).
mpred_prop(request(agent,agent,physobj),event).
 %  mpred_prop(request(agent,agent,physobj),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',216).
% fluent KnowRequest(agent,agent,physobj)
 %  blue=fluent(knowRequest(agent,agent,physobj)).
 %  fluent(knowRequest(agent,agent,physobj)).
fluents([knowRequest/3]).
 %  fluents([knowRequest/3]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',216).
mpred_prop(knowRequest(agent,agent,physobj),fluent).
 %  mpred_prop(knowRequest(agent,agent,physobj),fluent).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',218).
% [agent1,agent2,physobj,time]
% Initiates(Request(agent1,agent2,physobj),
%           KnowRequest(agent2,agent1,physobj),
%           time).

 /*  pl=axiom(initiates(request(Agent1,Agent2,Physobj),
   		knowRequest(Agent2,Agent1,Physobj),
   		Time),
         []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',218).

 /*  initiates(request(Agent1,Agent2,Physobj),
   	  knowRequest(Agent2,Agent1,Physobj),
   	  Time).
 */
request(Agent1, Agent2, Physobj)initiates knowRequest(Agent2, Agent1, Physobj).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',218).

 /*  initiated(happens(request(Agent1,Agent2,Physobj),
   		  Time_From,
   		  Time_Until),
   	  knowRequest(Agent2,Agent1,Physobj),
   	  []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',218).

 /*  initiated(happens(request(Agent1,Agent2,Physobj),
   		  Time_From,
   		  Time_Until),
   	  knowRequest(Agent2,Agent1,Physobj),
   	  []).
 */


% [agent1,agent2,physobj,time]
% Happens(Request(agent1,agent2,physobj),time) ->
% {location}% 
% HoldsAt(At(agent1,location),time) &
% HoldsAt(At(agent2,location),time).
 %  clausify_pnf=exists([Location],  (happens(request(Agent1, Agent2, Physobj), Time)->holds_at(at(Agent1, Location), Time), holds_at(at(Agent2, Location), Time))).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',224).

 /*  not(happens(request(Agent1, Agent2, Physobj), Time)) :-
       (   not(holds_at(at(Agent1, Exists_Location), Time))
       ;   not(holds_at(at(Agent2, Exists_Location), Time))
       ),
       some(Exists_Location,
            '$kolem_Fn_70'(Agent1, Agent2, Physobj, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',224).

 /*  fix_axiom_head(Time) ->
       [ not(happens(request(Agent1, Agent2, Physobj), Time)),
          (->),
         not(request(Agent1, Agent2, Physobj))
       ].
 */
 %   pl=axiom(not(request(Agent1, Agent2, Physobj)), [(not(at(Agent1, Exists_Location));not(at(Agent2, Exists_Location))), some(Exists_Location, '$kolem_Fn_70'(Agent1, Agent2, Physobj, Time))]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',224).

 /*  (   (   not(at(Agent1, Exists_Location))
       ;   not(at(Agent2, Exists_Location))
       ),
       some(Exists_Location,
            '$kolem_Fn_70'(Agent1, Agent2, Physobj, Time))
   ->  not(request(Agent1, Agent2, Physobj))
   ).
 */
if (not loc_at(Agent1, Exists_Location);not loc_at(Agent2, Exists_Location)), some(Exists_Location, '$kolem_Fn_70'(Agent1, Agent2, Physobj, Time))then not request(Agent1, Agent2, Physobj).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',224).

 /*   reactive_rule([  (not(loc_at(Agent1, Exists_Location));not(loc_at(Agent2, Exists_Location))),
                      some(Exists_Location,
                           '$kolem_Fn_70'(Agent1,
                                          Agent2,
                                          Physobj,
                                          Time))
                    ],
                    [not(request(Agent1, Agent2, Physobj))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',224).

 /*   reactive_rule([  (not(loc_at(Agent1, Exists_Location));not(loc_at(Agent2, Exists_Location))),
                      some(Exists_Location,
                           '$kolem_Fn_70'(Agent1,
                                          Agent2,
                                          Physobj,
                                          Time))
                    ],
                    [not(request(Agent1, Agent2, Physobj))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',224).

 /*  holds_at(at(Agent1, Exists_Location), Time) :-
       happens(request(Agent1, Agent2, Physobj), Time),
       some(Exists_Location,
            '$kolem_Fn_70'(Agent1, Agent2, Physobj, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',224).

 /*  fix_axiom_head(Time) ->
       [ holds_at(at(Agent1, Exists_Location), Time),
          (->),
         at(Agent1, Exists_Location)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',224).

 /*  pl=axiom(at(Agent1,Exists_Location),
         [ request(Agent1,Agent2,Physobj),
   	some(Exists_Location,
   	     '$kolem_Fn_70'(Agent1,
   			    Agent2,
   			    Physobj,
   			    Time))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',224).

 /*  (   request(Agent1, Agent2, Physobj),
       some(Exists_Location,
            '$kolem_Fn_70'(Agent1, Agent2, Physobj, Time))
   ->  at(Agent1, Exists_Location)
   ).
 */
if request(Agent1, Agent2, Physobj), some(Exists_Location, '$kolem_Fn_70'(Agent1, Agent2, Physobj, Time))then loc_at(Agent1, Exists_Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',224).

 /*  reactive_rule([ happens(request(Agent1,
   				Agent2,
   				Physobj),
   			Time_From,
   			Time_Until),
   		some(Exists_Location,
   		     '$kolem_Fn_70'(Agent1,
   				    Agent2,
   				    Physobj,
   				    Time))
   	      ],
   	      [loc_at(Agent1,Exists_Location)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',224).

 /*  reactive_rule([ happens(request(Agent1,
   				Agent2,
   				Physobj),
   			Time_From,
   			Time_Until),
   		some(Exists_Location,
   		     '$kolem_Fn_70'(Agent1,
   				    Agent2,
   				    Physobj,
   				    Time))
   	      ],
   	      [loc_at(Agent1,Exists_Location)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',224).

 /*  holds_at(at(Agent2, Exists_Location), Time) :-
       happens(request(Agent1, Agent2, Physobj), Time),
       some(Exists_Location,
            '$kolem_Fn_70'(Agent1, Agent2, Physobj, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',224).

 /*  fix_axiom_head(Time) ->
       [ holds_at(at(Agent2, Exists_Location), Time),
          (->),
         at(Agent2, Exists_Location)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',224).

 /*  pl=axiom(at(Agent2,Exists_Location),
         [ request(Agent1,Agent2,Physobj),
   	some(Exists_Location,
   	     '$kolem_Fn_70'(Agent1,
   			    Agent2,
   			    Physobj,
   			    Time))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',224).

 /*  (   request(Agent1, Agent2, Physobj),
       some(Exists_Location,
            '$kolem_Fn_70'(Agent1, Agent2, Physobj, Time))
   ->  at(Agent2, Exists_Location)
   ).
 */
if request(Agent1, Agent2, Physobj), some(Exists_Location, '$kolem_Fn_70'(Agent1, Agent2, Physobj, Time))then loc_at(Agent2, Exists_Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',224).

 /*  reactive_rule([ happens(request(Agent1,
   				Agent2,
   				Physobj),
   			Time_From8,
   			Time_Until9),
   		some(Exists_Location,
   		     '$kolem_Fn_70'(Agent1,
   				    Agent2,
   				    Physobj,
   				    Time))
   	      ],
   	      [loc_at(Agent2,Exists_Location)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',224).

 /*  reactive_rule([ happens(request(Agent1,
   				Agent2,
   				Physobj),
   			Time_From8,
   			Time_Until9),
   		some(Exists_Location,
   		     '$kolem_Fn_70'(Agent1,
   				    Agent2,
   				    Physobj,
   				    Time))
   	      ],
   	      [loc_at(Agent2,Exists_Location)]).
 */


%; End of file.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',228).
% translate: ending  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e.lps 
