:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoking.e',124).
% translate: unskipped  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e.lps 
:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(lps).
% translate: begining  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e.lps 
% Thu, 08 Oct 2020 21:37:17 GMT File: <stream>(0x55894c1e3b00)%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; The SpeechAct representation deals with a few speech acts
%; \fullcite{Searle:1969}.
%;
%; @book{Searle:1969,
%;   author = "John R. Searle",
%;   year = "1969",
%;   title = "Speech Acts: An Essay in the Philosophy of Language",
%;   address = "Cambridge",
%;   publisher = "Cambridge University Press",
%; }
%;
%; We handle
%; the illocutionary acts of
%; inviting someone into one's house (a form of request) and
%; greeting someone,
%; and the expressive speech act of crying for joy.
%;
%; inviting in
%; agent1 invites agent2 into room.

% event InviteIn(agent,agent,room)
% event(
%    inviteIn(agent,agent,room)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',31).
actions([inviteIn/3]).
% mpred_prop(
%    inviteIn(agent,agent,room), 
%    event).
mpred_prop(inviteIn(agent,agent,room),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',31).
%; agent1 is invited into room by agent2.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',34).
% fluent InvitedIn(agent,room,agent)
% fluent(
%    invitedIn(agent,room,agent)).
fluents([invitedIn/3]).
% mpred_prop(
%    invitedIn(agent,room,agent), 
%    fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',34).
mpred_prop(invitedIn(agent,room,agent),fluent).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',36).
%; A precondition axiom states that for
%; an agent to invite another agent into a room,
%; the first agent must be in the room and
%; there must be an outside area such that
%; the second agent is at the outside area and
%; the outside area is adjacent to the room:
% [agent1,agent2,room,time]
% Happens(InviteIn(agent1,agent2,room),time) ->
% HoldsAt(At(agent1,room),time) &
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',42).
% {outside}% 
% HoldsAt(At(agent2,outside),time) &
% Adjacent(room,outside).
% '->'(
%    ','(
%       ';'(
%          not(
%             at(Agent1,Room)), 
%          ';'(
%             not(
%                at(Agent2,Exists_Outside)), 
%             not(
%                adjacent(Room,Exists_Outside)))), 
%       some(
%          Exists_Outside, 
%          '$kolem_Fn_734'(Agent1,Agent2,Room,Time))), 
%    not(
%       inviteIn(Agent1,Agent2,Room))).
if (not loc_at(Agent1, Room);not loc_at(Agent2, Exists_Outside);not adjacent(Room, Exists_Outside)), some(Exists_Outside, '$kolem_Fn_734'(Agent1, Agent2, Room, Time))then not inviteIn(Agent1, Agent2, Room).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',45).

 /*   reactive_rule([  (not(loc_at(Agent1, Room));not(loc_at(Agent2, Exists_Outside));not(adjacent(Room, Exists_Outside))),
                      some(Exists_Outside,
                           '$kolem_Fn_734'(Agent1,
                                           Agent2,
                                           Room,
                                           Time))
                    ],
                    [not(inviteIn(Agent1, Agent2, Room))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       inviteIn(Agent1,Agent2,Room), 
%       some(
%          Exists_Outside, 
%          '$kolem_Fn_734'(Agent1,Agent2,Room,Time))), 
%    at(Agent1,Room)).
if inviteIn(Agent1, Agent2, Room), some(Exists_Outside, '$kolem_Fn_734'(Agent1, Agent2, Room, Time))then loc_at(Agent1, Room).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',45).

 /*  reactive_rule([ happens(inviteIn(Agent1,Agent2,Room),
   			Time_From,
   			Time_Until),
   		some(Exists_Outside,
   		     '$kolem_Fn_734'(Agent1,
   				     Agent2,
   				     Room,
   				     Time))
   	      ],
   	      [loc_at(Agent1,Room)]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       inviteIn(Agent1,Agent2,Room), 
%       some(
%          Exists_Outside, 
%          '$kolem_Fn_734'(Agent1,Agent2,Room,Time))), 
%    at(Agent2,Exists_Outside)).
if inviteIn(Agent1, Agent2, Room), some(Exists_Outside, '$kolem_Fn_734'(Agent1, Agent2, Room, Time))then loc_at(Agent2, Exists_Outside).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',45).

 /*  reactive_rule([ happens(inviteIn(Agent1,Agent2,Room),
   			Time_From8,
   			Time_Until9),
   		some(Exists_Outside,
   		     '$kolem_Fn_734'(Agent1,
   				     Agent2,
   				     Room,
   				     Time))
   	      ],
   	      [loc_at(Agent2,Exists_Outside)]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       inviteIn(Agent1,Agent2,Room), 
%       some(
%          Exists_Outside, 
%          '$kolem_Fn_734'(Agent1,Agent2,Room,Time))), 
%    adjacent(Room,Exists_Outside)).
if inviteIn(Agent1, Agent2, Room), some(Exists_Outside, '$kolem_Fn_734'(Agent1, Agent2, Room, Time))then adjacent(Room, Exists_Outside).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',45).

 /*  reactive_rule([ happens(inviteIn(Agent1,Agent2,Room),
   			Time_From10,
   			Time_Until11),
   		some(Exists_Outside,
   		     '$kolem_Fn_734'(Agent1,
   				     Agent2,
   				     Room,
   				     Time))
   	      ],
   	      [adjacent(Room,Exists_Outside)]).
 */
 %  "% =================================".


%; An effect axiom states that if
%; an agent invites another agent into a room,
%; the second agent will be invited into the room by the first agent:
% [agent1,agent2,room,time]
% Initiates(InviteIn(agent1,agent2,room),
%           InvitedIn(agent2,room,agent1),
%           time).
% initiates(
%    inviteIn(Agent1,Agent2,Room), 
%    invitedIn(Agent2,Room,Agent1), 
%    Time).
inviteIn(Agent1, Agent2, Room)initiates invitedIn(Agent2, Room, Agent1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',52).

 /*  initiated(happens(inviteIn(Agent1,Agent2,Room),
   		  Time_From,
   		  Time_Until),
   	  invitedIn(Agent2,Room,Agent1),
   	  []).
 */
 %  "% =================================".


%; agent intends to walk into room.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',58).
% event IntendToWalkIn(agent,room)
% event(
%    intendToWalkIn(agent,room)).
actions([intendToWalkIn/2]).
% mpred_prop(
%    intendToWalkIn(agent,room), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',58).
mpred_prop(intendToWalkIn(agent,room),event).


%; agent has the intention to walk into room.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',60).
% fluent IntentionToWalkIn(agent,room)
% fluent(
%    intentionToWalkIn(agent,room)).
fluents([intentionToWalkIn/2]).
% mpred_prop(
%    intentionToWalkIn(agent,room), 
%    fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',60).
mpred_prop(intentionToWalkIn(agent,room),fluent).


%; agent acts on the intention to walk into room.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',62).
% fluent ActOnIntentionToWalkIn(agent,room)
% fluent(
%    actOnIntentionToWalkIn(agent,room)).
fluents([actOnIntentionToWalkIn/2]).
% mpred_prop(
%    actOnIntentionToWalkIn(agent,room), 
%    fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',62).
mpred_prop(actOnIntentionToWalkIn(agent,room),fluent).

% noninertial ActOnIntentionToWalkIn
% noninertial(actOnIntentionToWalkIn).
noninertial(actOnIntentionToWalkIn).
%; A trigger axiom states that
%; if an agent is invited into a room by another agent,
%; the first agent likes the second agent, and
%; the first agent does not already have the intention to
%; walk into the room,
%; the first agent intends to walk into the room:
% [agent1,agent2,room,time]
% HoldsAt(InvitedIn(agent1,room,agent2),time) &
% HoldsAt(Like(agent1,agent2),time) &
% !HoldsAt(IntentionToWalkIn(agent1,room),time) ->
% Happens(IntendToWalkIn(agent1,room),time).
% '->'(
%    ','(
%       invitedIn(Agent1,Room,Agent2), 
%       ','(
%          like(Agent1,Agent2), 
%          not(
%             intentionToWalkIn(Agent1,Room)))), 
%    intendToWalkIn(Agent1,Room)).
intendToWalkIn(Agent1, Room)if invitedIn(Agent1, Room, Agent2), like(Agent1, Agent2), not intentionToWalkIn(Agent1, Room).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',71).

 /*  l_events(happens(intendToWalkIn(Agent1,Room),
   		 Time_From,
   		 Time_From),
   	 [ holds(invitedIn(Agent1,Room,Agent2),
   		 Time_From),
   	   like(Agent1,Agent2),
   	   holds(not(intentionToWalkIn(Agent1,Room)),
   		 Time_From)
   	 ]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       like(Agent1,Agent2), 
%       ','(
%          not(
%             intentionToWalkIn(Agent1,Room)), 
%          not(
%             intendToWalkIn(Agent1,Room)))), 
%    not(
%       invitedIn(Agent1,Room,Agent2))).
not invitedIn(Agent1, Room, Agent2)if like(Agent1, Agent2), not intentionToWalkIn(Agent1, Room), not intendToWalkIn(Agent1, Room).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',71).

 /*  l_int(holds(not(invitedIn(Agent1,Room,Agent2)),
   	    Time_At),
         [ like(Agent1,Agent2),
   	holds(not(intentionToWalkIn(Agent1,Room)),
   	      Time_At),
   	not(intendToWalkIn(Agent1,Room))
         ]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       not(
%          intentionToWalkIn(Agent1,Room)), 
%       ','(
%          invitedIn(Agent1,Room,Agent2), 
%          not(
%             intendToWalkIn(Agent1,Room)))), 
%    not(
%       like(Agent1,Agent2))).
if not intentionToWalkIn(Agent1, Room), invitedIn(Agent1, Room, Agent2), not intendToWalkIn(Agent1, Room)then not like(Agent1, Agent2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',71).

 /*  reactive_rule([ holds(not(intentionToWalkIn(Agent1,Room)),
   		      Time_At6),
   		holds(invitedIn(Agent1,Room,Agent2),
   		      Time_At6),
   		not(intendToWalkIn(Agent1,Room))
   	      ],
   	      [not(like(Agent1,Agent2))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       like(Agent1,Agent2), 
%       ','(
%          invitedIn(Agent1,Room,Agent2), 
%          not(
%             intendToWalkIn(Agent1,Room)))), 
%    not(
%       not(
%          intentionToWalkIn(Agent1,Room)))).
not not intentionToWalkIn(Agent1, Room)if like(Agent1, Agent2), invitedIn(Agent1, Room, Agent2), not intendToWalkIn(Agent1, Room).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',71).

 /*  l_int(holds(not([ holds(not(intentionToWalkIn(Agent1,Room)),
   			Time_At7)
   		]),
   	    Time_At7),
         [ like(Agent1,Agent2),
   	holds(invitedIn(Agent1,Room,Agent2),
   	      Time_At7),
   	not(intendToWalkIn(Agent1,Room))
         ]).
 */
 %  "% =================================".


%; An effect axiom states that
%; if an agent intends to walk into a room,
%; the agent will have the intention to walk into the room:
% [agent,room,time]
% Initiates(IntendToWalkIn(agent,room),
%           IntentionToWalkIn(agent,room),
%           time).
% initiates(
%    intendToWalkIn(Agent,Room), 
%    intentionToWalkIn(Agent,Room), 
%    Time).
intendToWalkIn(Agent, Room)initiates intentionToWalkIn(Agent, Room).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',80).

 /*  initiated(happens(intendToWalkIn(Agent,Room),
   		  Time_From,
   		  Time_Until),
   	  intentionToWalkIn(Agent,Room),
   	  []).
 */
 %  "% =================================".


%; Two trigger axioms state that
%; if an agent has the intention to walk into a room,
%; the agent acts on the intention to walk into the room,
%; the agent is at a location,
%; side one (two) of a door is the room,
%; side two (one) of the door is the location,
%; agent will walk through side two (one) of the door:
% [agent,room,location,door,time]
% HoldsAt(IntentionToWalkIn(agent,room),time) &
% HoldsAt(ActOnIntentionToWalkIn(agent,room),time) &
% HoldsAt(At(agent,location),time) &
% Side1(door)=room &
% Side2(door)=location ->
% Happens(WalkThroughDoor21(agent,door),time).
% '->'(
%    ','(
%       intentionToWalkIn(Agent,Room), 
%       ','(
%          actOnIntentionToWalkIn(Agent,Room), 
%          ','(
%             at(Agent,Location), 
%             ','(
%                side1Pred(Door,Room), 
%                side2Pred(Door,Location))))), 
%    walkThroughDoor21(Agent,Door)).
walkThroughDoor21(Agent, Door)if intentionToWalkIn(Agent, Room), actOnIntentionToWalkIn(Agent, Room), loc_at(Agent, Location), side1Pred(Door, Room), side2Pred(Door, Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',92).

 /*  l_events(happens(walkThroughDoor21(Agent,Door),
   		 Time_From,
   		 Time_From),
   	 [ holds(intentionToWalkIn(Agent,Room),
   		 Time_From),
   	   actOnIntentionToWalkIn(Agent,Room),
   	   loc_at(Agent,Location),
   	   side1Pred(Door,Room),
   	   side2Pred(Door,Location)
   	 ]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       actOnIntentionToWalkIn(Agent,Room), 
%       ','(
%          at(Agent,Location), 
%          ','(
%             side1Pred(Door,Room), 
%             ','(
%                side2Pred(Door,Location), 
%                not(
%                   walkThroughDoor21(Agent,Door)))))), 
%    not(
%       intentionToWalkIn(Agent,Room))).
not intentionToWalkIn(Agent, Room)if actOnIntentionToWalkIn(Agent, Room), loc_at(Agent, Location), side1Pred(Door, Room), side2Pred(Door, Location), not walkThroughDoor21(Agent, Door).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',92).

 /*  l_int(holds(not(intentionToWalkIn(Agent,Room)),
   	    Time_At),
         [ actOnIntentionToWalkIn(Agent,Room),
   	loc_at(Agent,Location),
   	side1Pred(Door,Room),
   	side2Pred(Door,Location),
   	not(walkThroughDoor21(Agent,Door))
         ]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       at(Agent,Location), 
%       ','(
%          side1Pred(Door,Room), 
%          ','(
%             side2Pred(Door,Location), 
%             ','(
%                intentionToWalkIn(Agent,Room), 
%                not(
%                   walkThroughDoor21(Agent,Door)))))), 
%    not(
%       actOnIntentionToWalkIn(Agent,Room))).
if loc_at(Agent, Location), side1Pred(Door, Room), side2Pred(Door, Location), intentionToWalkIn(Agent, Room), not walkThroughDoor21(Agent, Door)then not actOnIntentionToWalkIn(Agent, Room).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',92).

 /*  reactive_rule([ loc_at(Agent,Location),
   		side1Pred(Door,Room),
   		side2Pred(Door,Location),
   		holds(intentionToWalkIn(Agent,Room),
   		      Time_At7),
   		not(walkThroughDoor21(Agent,Door))
   	      ],
   	      [not(actOnIntentionToWalkIn(Agent,Room))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       side1Pred(Door,Room), 
%       ','(
%          side2Pred(Door,Location), 
%          ','(
%             actOnIntentionToWalkIn(Agent,Room), 
%             ','(
%                intentionToWalkIn(Agent,Room), 
%                not(
%                   walkThroughDoor21(Agent,Door)))))), 
%    not(
%       at(Agent,Location))).
if side1Pred(Door, Room), side2Pred(Door, Location), actOnIntentionToWalkIn(Agent, Room), intentionToWalkIn(Agent, Room), not walkThroughDoor21(Agent, Door)then not loc_at(Agent, Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',92).

 /*  reactive_rule([ side1Pred(Door,Room),
   		side2Pred(Door,Location),
   		actOnIntentionToWalkIn(Agent,Room),
   		holds(intentionToWalkIn(Agent,Room),
   		      Time_At8),
   		not(walkThroughDoor21(Agent,Door))
   	      ],
   	      [not(loc_at(Agent,Location))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       side2Pred(Door,Location), 
%       ','(
%          at(Agent,Location), 
%          ','(
%             actOnIntentionToWalkIn(Agent,Room), 
%             ','(
%                intentionToWalkIn(Agent,Room), 
%                not(
%                   walkThroughDoor21(Agent,Door)))))), 
%    not(
%       side1Pred(Door,Room))).
if side2Pred(Door, Location), loc_at(Agent, Location), actOnIntentionToWalkIn(Agent, Room), intentionToWalkIn(Agent, Room), not walkThroughDoor21(Agent, Door)then not side1Pred(Door, Room).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',92).

 /*  reactive_rule([ side2Pred(Door,Location),
   		loc_at(Agent,Location),
   		actOnIntentionToWalkIn(Agent,Room),
   		holds(intentionToWalkIn(Agent,Room),
   		      Time_At9),
   		not(walkThroughDoor21(Agent,Door))
   	      ],
   	      [not(side1Pred(Door,Room))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       side1Pred(Door,Room), 
%       ','(
%          at(Agent,Location), 
%          ','(
%             actOnIntentionToWalkIn(Agent,Room), 
%             ','(
%                intentionToWalkIn(Agent,Room), 
%                not(
%                   walkThroughDoor21(Agent,Door)))))), 
%    not(
%       side2Pred(Door,Location))).
if side1Pred(Door, Room), loc_at(Agent, Location), actOnIntentionToWalkIn(Agent, Room), intentionToWalkIn(Agent, Room), not walkThroughDoor21(Agent, Door)then not side2Pred(Door, Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',92).

 /*  reactive_rule([ side1Pred(Door,Room),
   		loc_at(Agent,Location),
   		actOnIntentionToWalkIn(Agent,Room),
   		holds(intentionToWalkIn(Agent,Room),
   		      Time_At10),
   		not(walkThroughDoor21(Agent,Door))
   	      ],
   	      [not(side2Pred(Door,Location))]).
 */
 %  "% =================================".


% [agent,room,location,door,time]
% HoldsAt(IntentionToWalkIn(agent,room),time) &
% HoldsAt(ActOnIntentionToWalkIn(agent,room),time) &
% HoldsAt(At(agent,location),time) &
% Side2(door)=room &
% Side1(door)=location ->
% Happens(WalkThroughDoor12(agent,door),time).
% '->'(
%    ','(
%       intentionToWalkIn(Agent,Room), 
%       ','(
%          actOnIntentionToWalkIn(Agent,Room), 
%          ','(
%             at(Agent,Location), 
%             ','(
%                side2Pred(Door,Room), 
%                side1Pred(Door,Location))))), 
%    walkThroughDoor12(Agent,Door)).
walkThroughDoor12(Agent, Door)if intentionToWalkIn(Agent, Room), actOnIntentionToWalkIn(Agent, Room), loc_at(Agent, Location), side2Pred(Door, Room), side1Pred(Door, Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',101).

 /*  l_events(happens(walkThroughDoor12(Agent,Door),
   		 Time_From,
   		 Time_From),
   	 [ holds(intentionToWalkIn(Agent,Room),
   		 Time_From),
   	   actOnIntentionToWalkIn(Agent,Room),
   	   loc_at(Agent,Location),
   	   side2Pred(Door,Room),
   	   side1Pred(Door,Location)
   	 ]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       actOnIntentionToWalkIn(Agent,Room), 
%       ','(
%          at(Agent,Location), 
%          ','(
%             side2Pred(Door,Room), 
%             ','(
%                side1Pred(Door,Location), 
%                not(
%                   walkThroughDoor12(Agent,Door)))))), 
%    not(
%       intentionToWalkIn(Agent,Room))).
not intentionToWalkIn(Agent, Room)if actOnIntentionToWalkIn(Agent, Room), loc_at(Agent, Location), side2Pred(Door, Room), side1Pred(Door, Location), not walkThroughDoor12(Agent, Door).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',101).

 /*  l_int(holds(not(intentionToWalkIn(Agent,Room)),
   	    Time_At),
         [ actOnIntentionToWalkIn(Agent,Room),
   	loc_at(Agent,Location),
   	side2Pred(Door,Room),
   	side1Pred(Door,Location),
   	not(walkThroughDoor12(Agent,Door))
         ]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       at(Agent,Location), 
%       ','(
%          side2Pred(Door,Room), 
%          ','(
%             side1Pred(Door,Location), 
%             ','(
%                intentionToWalkIn(Agent,Room), 
%                not(
%                   walkThroughDoor12(Agent,Door)))))), 
%    not(
%       actOnIntentionToWalkIn(Agent,Room))).
if loc_at(Agent, Location), side2Pred(Door, Room), side1Pred(Door, Location), intentionToWalkIn(Agent, Room), not walkThroughDoor12(Agent, Door)then not actOnIntentionToWalkIn(Agent, Room).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',101).

 /*  reactive_rule([ loc_at(Agent,Location),
   		side2Pred(Door,Room),
   		side1Pred(Door,Location),
   		holds(intentionToWalkIn(Agent,Room),
   		      Time_At7),
   		not(walkThroughDoor12(Agent,Door))
   	      ],
   	      [not(actOnIntentionToWalkIn(Agent,Room))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       side2Pred(Door,Room), 
%       ','(
%          side1Pred(Door,Location), 
%          ','(
%             actOnIntentionToWalkIn(Agent,Room), 
%             ','(
%                intentionToWalkIn(Agent,Room), 
%                not(
%                   walkThroughDoor12(Agent,Door)))))), 
%    not(
%       at(Agent,Location))).
if side2Pred(Door, Room), side1Pred(Door, Location), actOnIntentionToWalkIn(Agent, Room), intentionToWalkIn(Agent, Room), not walkThroughDoor12(Agent, Door)then not loc_at(Agent, Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',101).

 /*  reactive_rule([ side2Pred(Door,Room),
   		side1Pred(Door,Location),
   		actOnIntentionToWalkIn(Agent,Room),
   		holds(intentionToWalkIn(Agent,Room),
   		      Time_At8),
   		not(walkThroughDoor12(Agent,Door))
   	      ],
   	      [not(loc_at(Agent,Location))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       side1Pred(Door,Location), 
%       ','(
%          at(Agent,Location), 
%          ','(
%             actOnIntentionToWalkIn(Agent,Room), 
%             ','(
%                intentionToWalkIn(Agent,Room), 
%                not(
%                   walkThroughDoor12(Agent,Door)))))), 
%    not(
%       side2Pred(Door,Room))).
if side1Pred(Door, Location), loc_at(Agent, Location), actOnIntentionToWalkIn(Agent, Room), intentionToWalkIn(Agent, Room), not walkThroughDoor12(Agent, Door)then not side2Pred(Door, Room).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',101).

 /*  reactive_rule([ side1Pred(Door,Location),
   		loc_at(Agent,Location),
   		actOnIntentionToWalkIn(Agent,Room),
   		holds(intentionToWalkIn(Agent,Room),
   		      Time_At9),
   		not(walkThroughDoor12(Agent,Door))
   	      ],
   	      [not(side2Pred(Door,Room))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       side2Pred(Door,Room), 
%       ','(
%          at(Agent,Location), 
%          ','(
%             actOnIntentionToWalkIn(Agent,Room), 
%             ','(
%                intentionToWalkIn(Agent,Room), 
%                not(
%                   walkThroughDoor12(Agent,Door)))))), 
%    not(
%       side1Pred(Door,Location))).
if side2Pred(Door, Room), loc_at(Agent, Location), actOnIntentionToWalkIn(Agent, Room), intentionToWalkIn(Agent, Room), not walkThroughDoor12(Agent, Door)then not side1Pred(Door, Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',101).

 /*  reactive_rule([ side2Pred(Door,Room),
   		loc_at(Agent,Location),
   		actOnIntentionToWalkIn(Agent,Room),
   		holds(intentionToWalkIn(Agent,Room),
   		      Time_At10),
   		not(walkThroughDoor12(Agent,Door))
   	      ],
   	      [not(side1Pred(Door,Location))]).
 */
 %  "% =================================".


%; Two effect axioms state that
%; if side one (two) of a door is a room and
%; an agent walks through side two (one) of the door,
%; the agent will no longer have the intention to
%; walk into the room:
% [agent,room,door,time]
% Side1(door)=room ->
% Terminates(WalkThroughDoor21(agent,door),
%            IntentionToWalkIn(agent,room),
%            time).
% '->'(
%    side1Pred(Door,Room), 
%    terminates(
%       walkThroughDoor21(Agent,Door), 
%       intentionToWalkIn(Agent,Room), 
%       Time)).
if side1Pred(Door, Room)then terminates(walkThroughDoor21(Agent, Door), intentionToWalkIn(Agent, Room)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',113).

 /*  reactive_rule([side1Pred(Door,Room)],
   	      [ terminates(walkThroughDoor21(Agent,Door),
   			   at(intentionToWalkIn(Agent,Room),
   			      Time),
   			   Terminates)
   	      ]).
 */
 %  "% =================================".


% [agent,room,door,time]
% Side2(door)=room ->
% Terminates(WalkThroughDoor12(agent,door),
%            IntentionToWalkIn(agent,room),
%            time).
% '->'(
%    side2Pred(Door,Room), 
%    terminates(
%       walkThroughDoor12(Agent,Door), 
%       intentionToWalkIn(Agent,Room), 
%       Time)).
if side2Pred(Door, Room)then terminates(walkThroughDoor12(Agent, Door), intentionToWalkIn(Agent, Room)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',120).

 /*  reactive_rule([side2Pred(Door,Room)],
   	      [ terminates(walkThroughDoor12(Agent,Door),
   			   at(intentionToWalkIn(Agent,Room),
   			      Time),
   			   Terminates)
   	      ]).
 */
 %  "% =================================".


%; agent greets object.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',126).
% event Greet(agent,object)
% event(
%    greet(agent,object)).
actions([greet/2]).
% mpred_prop(
%    greet(agent,object), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',126).
mpred_prop(greet(agent,object),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',128).
% event SayPleasedToMeet(agent,agent)
% event(
%    sayPleasedToMeet(agent,agent)).
actions([sayPleasedToMeet/2]).
% mpred_prop(
%    sayPleasedToMeet(agent,agent), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',128).
mpred_prop(sayPleasedToMeet(agent,agent),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',130).
%; agent says goodbye to object.

% event SayGoodbye(agent,object)
% event(
%    sayGoodbye(agent,object)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',130).
actions([sayGoodbye/2]).
% mpred_prop(
%    sayGoodbye(agent,object), 
%    event).
mpred_prop(sayGoodbye(agent,object),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',133).
% event TalkAbout(agent,content)
% event(
%    talkAbout(agent,content)).
actions([talkAbout/2]).
% mpred_prop(
%    talkAbout(agent,content), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',133).
mpred_prop(talkAbout(agent,content),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',135).
% event Converse(agent,agent)
% event(
%    converse(agent,agent)).
actions([converse/2]).
% mpred_prop(
%    converse(agent,agent), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',135).
mpred_prop(converse(agent,agent),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',137).
% [agent1,agent2,time]
% Happens(Converse(agent1,agent2),time) ->
% {location}% 
% HoldsAt(At(agent1,location),time) &
% HoldsAt(At(agent2,location),time).
% '->'(
%    ','(
%       ';'(
%          not(
%             at(Agent1,Exists_Location)), 
%          not(
%             at(Agent2,Exists_Location))), 
%       some(
%          Exists_Location, 
%          '$kolem_Fn_735'(Agent1,Agent2,Time))), 
%    not(
%       converse(Agent1,Agent2))).
if (not loc_at(Agent1, Exists_Location);not loc_at(Agent2, Exists_Location)), some(Exists_Location, '$kolem_Fn_735'(Agent1, Agent2, Time))then not converse(Agent1, Agent2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',139).

 /*   reactive_rule([  (not(loc_at(Agent1, Exists_Location));not(loc_at(Agent2, Exists_Location))),
                      some(Exists_Location,
                           '$kolem_Fn_735'(Agent1, Agent2, Time))
                    ],
                    [not(converse(Agent1, Agent2))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       converse(Agent1,Agent2), 
%       some(
%          Exists_Location, 
%          '$kolem_Fn_735'(Agent1,Agent2,Time))), 
%    at(Agent1,Exists_Location)).
if converse(Agent1, Agent2), some(Exists_Location, '$kolem_Fn_735'(Agent1, Agent2, Time))then loc_at(Agent1, Exists_Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',139).

 /*  reactive_rule([ happens(converse(Agent1,Agent2),
   			Time_From,
   			Time_Until),
   		some(Exists_Location,
   		     '$kolem_Fn_735'(Agent1,
   				     Agent2,
   				     Time))
   	      ],
   	      [loc_at(Agent1,Exists_Location)]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       converse(Agent1,Agent2), 
%       some(
%          Exists_Location, 
%          '$kolem_Fn_735'(Agent1,Agent2,Time))), 
%    at(Agent2,Exists_Location)).
if converse(Agent1, Agent2), some(Exists_Location, '$kolem_Fn_735'(Agent1, Agent2, Time))then loc_at(Agent2, Exists_Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',139).

 /*  reactive_rule([ happens(converse(Agent1,Agent2),
   			Time_From7,
   			Time_Until8),
   		some(Exists_Location,
   		     '$kolem_Fn_735'(Agent1,
   				     Agent2,
   				     Time))
   	      ],
   	      [loc_at(Agent2,Exists_Location)]).
 */
 %  "% =================================".


%; A precondition axiom states that for
%; an agent to greet an object,
%; there must be a location such that
%; the agent is at the location and
%; the object is at the location:
% [agent,object,time]
% Happens(Greet(agent,object),time) ->
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',148).
% {location}% 
% HoldsAt(At(agent,location),time) &
% HoldsAt(At(object,location),time).
% '->'(
%    ','(
%       ';'(
%          not(
%             at(Agent,Exists_Location)), 
%          not(
%             at(Object,Exists_Location))), 
%       some(
%          Exists_Location, 
%          '$kolem_Fn_736'(Agent,Object,Time))), 
%    not(
%       greet(Agent,Object))).
if (not loc_at(Agent, Exists_Location);not loc_at(Object, Exists_Location)), some(Exists_Location, '$kolem_Fn_736'(Agent, Object, Time))then not greet(Agent, Object).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',150).

 /*   reactive_rule([  (not(loc_at(Agent, Exists_Location));not(loc_at(Object, Exists_Location))),
                      some(Exists_Location,
                           '$kolem_Fn_736'(Agent, Object, Time))
                    ],
                    [not(greet(Agent, Object))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       greet(Agent,Object), 
%       some(
%          Exists_Location, 
%          '$kolem_Fn_736'(Agent,Object,Time))), 
%    at(Agent,Exists_Location)).
if greet(Agent, Object), some(Exists_Location, '$kolem_Fn_736'(Agent, Object, Time))then loc_at(Agent, Exists_Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',150).

 /*  reactive_rule([ happens(greet(Agent,Object),
   			Time_From,
   			Time_Until),
   		some(Exists_Location,
   		     '$kolem_Fn_736'(Agent,Object,Time))
   	      ],
   	      [loc_at(Agent,Exists_Location)]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       greet(Agent,Object), 
%       some(
%          Exists_Location, 
%          '$kolem_Fn_736'(Agent,Object,Time))), 
%    at(Object,Exists_Location)).
if greet(Agent, Object), some(Exists_Location, '$kolem_Fn_736'(Agent, Object, Time))then loc_at(Object, Exists_Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',150).

 /*  reactive_rule([ happens(greet(Agent,Object),
   			Time_From7,
   			Time_Until8),
   		some(Exists_Location,
   		     '$kolem_Fn_736'(Agent,Object,Time))
   	      ],
   	      [loc_at(Object,Exists_Location)]).
 */
 %  "% =================================".


% [agent,object,time]
% Happens(SayGoodbye(agent,object),time) ->
% {location}% 
% HoldsAt(At(agent,location),time) &
% HoldsAt(At(object,location),time).
% '->'(
%    ','(
%       ';'(
%          not(
%             at(Agent,Exists_Location)), 
%          not(
%             at(Object,Exists_Location))), 
%       some(
%          Exists_Location, 
%          '$kolem_Fn_737'(Agent,Object,Time))), 
%    not(
%       sayGoodbye(Agent,Object))).
if (not loc_at(Agent, Exists_Location);not loc_at(Object, Exists_Location)), some(Exists_Location, '$kolem_Fn_737'(Agent, Object, Time))then not sayGoodbye(Agent, Object).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',155).

 /*   reactive_rule([  (not(loc_at(Agent, Exists_Location));not(loc_at(Object, Exists_Location))),
                      some(Exists_Location,
                           '$kolem_Fn_737'(Agent, Object, Time))
                    ],
                    [not(sayGoodbye(Agent, Object))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       sayGoodbye(Agent,Object), 
%       some(
%          Exists_Location, 
%          '$kolem_Fn_737'(Agent,Object,Time))), 
%    at(Agent,Exists_Location)).
if sayGoodbye(Agent, Object), some(Exists_Location, '$kolem_Fn_737'(Agent, Object, Time))then loc_at(Agent, Exists_Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',155).

 /*  reactive_rule([ happens(sayGoodbye(Agent,Object),
   			Time_From,
   			Time_Until),
   		some(Exists_Location,
   		     '$kolem_Fn_737'(Agent,Object,Time))
   	      ],
   	      [loc_at(Agent,Exists_Location)]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       sayGoodbye(Agent,Object), 
%       some(
%          Exists_Location, 
%          '$kolem_Fn_737'(Agent,Object,Time))), 
%    at(Object,Exists_Location)).
if sayGoodbye(Agent, Object), some(Exists_Location, '$kolem_Fn_737'(Agent, Object, Time))then loc_at(Object, Exists_Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',155).

 /*  reactive_rule([ happens(sayGoodbye(Agent,Object),
   			Time_From7,
   			Time_Until8),
   		some(Exists_Location,
   		     '$kolem_Fn_737'(Agent,Object,Time))
   	      ],
   	      [loc_at(Object,Exists_Location)]).
 */
 %  "% =================================".


%; speech: expression of emotions
%; agent cries for joy.

% event CryForJoy(agent)
% event(
%    cryForJoy(agent)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',162).
actions([cryForJoy/1]).
% mpred_prop(
%    cryForJoy(agent), 
%    event).
mpred_prop(cryForJoy(agent),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',165).
%; A precondition axiom states that for
%; an agent to cry for joy,
%; the agent must be happy:
% [agent,time]
% Happens(CryForJoy(agent),time) ->
% HoldsAt(Happy(agent),time).
% '->'(
%    metreqs(
%       cryForJoy(Agent)), 
%    requires(
%       cryForJoy(Agent), 
%       When_Time)).
if cryForJoy(Agent)then requires(cryForJoy(Agent), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',168).

 /*  reactive_rule([cryForJoy(Agent)],
   	      [requires(cryForJoy(Agent),When_Time)]).
 */
 %  "% =================================".
% '->'(
%    happy(Agent), 
%    metreqs(
%       cryForJoy(Agent))).
if happy(Agent)then cryForJoy(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',168).

 /*  reactive_rule([holds(happy(Agent),Time_At)],
   	      [cryForJoy(Agent)]).
 */
 %  "% =================================".
% '->'(
%    not(
%       happy(Agent)), 
%    not(
%       cryForJoy(Agent))).
if not happy(Agent)then not cryForJoy(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',168).

 /*  reactive_rule([holds(not(happy(Agent)),Time_At4)],
   	      [not(cryForJoy(Agent))]).
 */
 %  "% =================================".

% event Threaten(agent,agent,weapon)
% event(
%    threaten(agent,agent,weapon)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',171).
actions([threaten/3]).
% mpred_prop(
%    threaten(agent,agent,weapon), 
%    event).
mpred_prop(threaten(agent,agent,weapon),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',174).
% event ReleaseFromThreat(agent,agent)
% event(
%    releaseFromThreat(agent,agent)).
actions([releaseFromThreat/2]).
% mpred_prop(
%    releaseFromThreat(agent,agent), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',174).
mpred_prop(releaseFromThreat(agent,agent),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',176).
% fluent ThreatenedBy(agent,agent)
% fluent(
%    threatenedBy(agent,agent)).
fluents([threatenedBy/2]).
% mpred_prop(
%    threatenedBy(agent,agent), 
%    fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',176).
mpred_prop(threatenedBy(agent,agent),fluent).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',178).
% [agent1,agent2,weapon,time]
% Happens(Threaten(agent1,agent2,weapon), time) ->
% HoldsAt(Holding(agent1,weapon),time) &
% {location}% 
% HoldsAt(At(agent1,location),time) &
% HoldsAt(At(agent2,location),time).
% '->'(
%    ','(
%       ';'(
%          not(
%             holding(Agent1,Weapon)), 
%          ';'(
%             not(
%                at(Agent1,Exists_Location)), 
%             not(
%                at(Agent2,Exists_Location)))), 
%       some(
%          Exists_Location, 
%          '$kolem_Fn_738'(Agent1,Agent2,Weapon,Time))), 
%    not(
%       threaten(Agent1,Agent2,Weapon))).
if (not holding(Agent1, Weapon);not loc_at(Agent1, Exists_Location);not loc_at(Agent2, Exists_Location)), some(Exists_Location, '$kolem_Fn_738'(Agent1, Agent2, Weapon, Time))then not threaten(Agent1, Agent2, Weapon).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',181).

 /*   reactive_rule([  (not(holding(Agent1, Weapon));not(loc_at(Agent1, Exists_Location));not(loc_at(Agent2, Exists_Location))),
                      some(Exists_Location,
                           '$kolem_Fn_738'(Agent1,
                                           Agent2,
                                           Weapon,
                                           Time))
                    ],
                    [not(threaten(Agent1, Agent2, Weapon))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       threaten(Agent1,Agent2,Weapon), 
%       some(
%          Exists_Location, 
%          '$kolem_Fn_738'(Agent1,Agent2,Weapon,Time))), 
%    holding(Agent1,Weapon)).
holding(Agent1, Weapon)if threaten(Agent1, Agent2, Weapon), some(Exists_Location, '$kolem_Fn_738'(Agent1, Agent2, Weapon, Time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',181).

 /*  l_int(holds(holding(Agent1,Weapon),Time_At),
         [ happens(threaten(Agent1,Agent2,Weapon),
   		Time_At,
   		Time_At),
   	some(Exists_Location,
   	     '$kolem_Fn_738'(Agent1,
   			     Agent2,
   			     Weapon,
   			     Time))
         ]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       threaten(Agent1,Agent2,Weapon), 
%       some(
%          Exists_Location, 
%          '$kolem_Fn_738'(Agent1,Agent2,Weapon,Time))), 
%    at(Agent1,Exists_Location)).
if threaten(Agent1, Agent2, Weapon), some(Exists_Location, '$kolem_Fn_738'(Agent1, Agent2, Weapon, Time))then loc_at(Agent1, Exists_Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',181).

 /*  reactive_rule([ happens(threaten(Agent1,
   				 Agent2,
   				 Weapon),
   			Time_From,
   			Time_Until),
   		some(Exists_Location,
   		     '$kolem_Fn_738'(Agent1,
   				     Agent2,
   				     Weapon,
   				     Time))
   	      ],
   	      [loc_at(Agent1,Exists_Location)]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       threaten(Agent1,Agent2,Weapon), 
%       some(
%          Exists_Location, 
%          '$kolem_Fn_738'(Agent1,Agent2,Weapon,Time))), 
%    at(Agent2,Exists_Location)).
if threaten(Agent1, Agent2, Weapon), some(Exists_Location, '$kolem_Fn_738'(Agent1, Agent2, Weapon, Time))then loc_at(Agent2, Exists_Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',181).

 /*  reactive_rule([ happens(threaten(Agent1,
   				 Agent2,
   				 Weapon),
   			Time_From9,
   			Time_Until10),
   		some(Exists_Location,
   		     '$kolem_Fn_738'(Agent1,
   				     Agent2,
   				     Weapon,
   				     Time))
   	      ],
   	      [loc_at(Agent2,Exists_Location)]).
 */
 %  "% =================================".


% [agent1,agent2,weapon,time]
% Happens(Threaten(agent1,agent2,weapon), time) ->
% Happens(BecomeAngryAt(agent2,agent1),time).
% '->'(
%    threaten(Agent1,Agent2,Weapon), 
%    becomeAngryAt(Agent2,Agent1)).
becomeAngryAt(Agent2, Agent1)if threaten(Agent1, Agent2, Weapon).

 /*  l_events(happens(becomeAngryAt(Agent2,Agent1),
   		 Time_From,
   		 Time_Until),
   	 [ happens(threaten(Agent1,Agent2,Weapon),
   		   Time_From,
   		   Time_Until)
   	 ]).
 */
 %  "% =================================".
% '->'(
%    not(
%       becomeAngryAt(Agent2,Agent1)), 
%    not(
%       threaten(Agent1,Agent2,Weapon))).
if not becomeAngryAt(Agent2, Agent1)then not threaten(Agent1, Agent2, Weapon).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',186).

 /*  reactive_rule([not(becomeAngryAt(Agent2,Agent1))],
   	      [not(threaten(Agent1,Agent2,Weapon))]).
 */
 %  "% =================================".


% [agent1,agent2,weapon,time]
% Initiates(Threaten(agent1,agent2,weapon),
%           ThreatenedBy(agent2,agent1),
%           time).
% initiates(
%    threaten(Agent1,Agent2,Weapon), 
%    threatenedBy(Agent2,Agent1), 
%    Time).
threaten(Agent1, Agent2, Weapon)initiates threatenedBy(Agent2, Agent1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',190).

 /*  initiated(happens(threaten(Agent1,Agent2,Weapon),
   		  Time_From,
   		  Time_Until),
   	  threatenedBy(Agent2,Agent1),
   	  []).
 */
 %  "% =================================".


% [agent1,agent2,time]
% Terminates(ReleaseFromThreat(agent1,agent2),
%            ThreatenedBy(agent2,agent1),
%            time).
% terminates(
%    releaseFromThreat(Agent1,Agent2), 
%    threatenedBy(Agent2,Agent1), 
%    Time).
releaseFromThreat(Agent1, Agent2)terminates threatenedBy(Agent2, Agent1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',195).

 /*  terminated(happens(releaseFromThreat(Agent1,Agent2),
   		   Time_From,
   		   Time_Until),
   	   threatenedBy(Agent2,Agent1),
   	   []).
 */
 %  "% =================================".

% event Order(agent,agent,physobj)
% event(
%    order(agent,agent,physobj)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',198).
actions([order/3]).
% mpred_prop(
%    order(agent,agent,physobj), 
%    event).
mpred_prop(order(agent,agent,physobj),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',201).
% fluent KnowOrder(agent,agent,physobj)
% fluent(
%    knowOrder(agent,agent,physobj)).
fluents([knowOrder/3]).
% mpred_prop(
%    knowOrder(agent,agent,physobj), 
%    fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',201).
mpred_prop(knowOrder(agent,agent,physobj),fluent).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',203).
% [agent1,agent2,physobj,time]
% Initiates(Order(agent1,agent2,physobj),
%           KnowOrder(agent2,agent1,physobj),
%           time).
% initiates(
%    order(Agent1,Agent2,Physobj), 
%    knowOrder(Agent2,Agent1,Physobj), 
%    Time).
order(Agent1, Agent2, Physobj)initiates knowOrder(Agent2, Agent1, Physobj).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',203).

 /*  initiated(happens(order(Agent1,Agent2,Physobj),
   		  Time_From,
   		  Time_Until),
   	  knowOrder(Agent2,Agent1,Physobj),
   	  []).
 */
 %  "% =================================".


% [agent1,agent2,physobj,time]
% Happens(Order(agent1,agent2,physobj),time) ->
% {location}% 
% HoldsAt(At(agent1,location),time) &
% HoldsAt(At(agent2,location),time).
% '->'(
%    ','(
%       ';'(
%          not(
%             at(Agent1,Exists_Location)), 
%          not(
%             at(Agent2,Exists_Location))), 
%       some(
%          Exists_Location, 
%          '$kolem_Fn_739'(Agent1,Agent2,Physobj,Time))), 
%    not(
%       order(Agent1,Agent2,Physobj))).
if (not loc_at(Agent1, Exists_Location);not loc_at(Agent2, Exists_Location)), some(Exists_Location, '$kolem_Fn_739'(Agent1, Agent2, Physobj, Time))then not order(Agent1, Agent2, Physobj).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',209).

 /*   reactive_rule([  (not(loc_at(Agent1, Exists_Location));not(loc_at(Agent2, Exists_Location))),
                      some(Exists_Location,
                           '$kolem_Fn_739'(Agent1,
                                           Agent2,
                                           Physobj,
                                           Time))
                    ],
                    [not(order(Agent1, Agent2, Physobj))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       order(Agent1,Agent2,Physobj), 
%       some(
%          Exists_Location, 
%          '$kolem_Fn_739'(Agent1,Agent2,Physobj,Time))), 
%    at(Agent1,Exists_Location)).
if order(Agent1, Agent2, Physobj), some(Exists_Location, '$kolem_Fn_739'(Agent1, Agent2, Physobj, Time))then loc_at(Agent1, Exists_Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',209).

 /*  reactive_rule([ happens(order(Agent1,Agent2,Physobj),
   			Time_From,
   			Time_Until),
   		some(Exists_Location,
   		     '$kolem_Fn_739'(Agent1,
   				     Agent2,
   				     Physobj,
   				     Time))
   	      ],
   	      [loc_at(Agent1,Exists_Location)]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       order(Agent1,Agent2,Physobj), 
%       some(
%          Exists_Location, 
%          '$kolem_Fn_739'(Agent1,Agent2,Physobj,Time))), 
%    at(Agent2,Exists_Location)).
if order(Agent1, Agent2, Physobj), some(Exists_Location, '$kolem_Fn_739'(Agent1, Agent2, Physobj, Time))then loc_at(Agent2, Exists_Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',209).

 /*  reactive_rule([ happens(order(Agent1,Agent2,Physobj),
   			Time_From8,
   			Time_Until9),
   		some(Exists_Location,
   		     '$kolem_Fn_739'(Agent1,
   				     Agent2,
   				     Physobj,
   				     Time))
   	      ],
   	      [loc_at(Agent2,Exists_Location)]).
 */
 %  "% =================================".

% event Request(agent,agent,physobj)
% event(
%    request(agent,agent,physobj)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',213).
actions([request/3]).
% mpred_prop(
%    request(agent,agent,physobj), 
%    event).
mpred_prop(request(agent,agent,physobj),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',216).
% fluent KnowRequest(agent,agent,physobj)
% fluent(
%    knowRequest(agent,agent,physobj)).
fluents([knowRequest/3]).
% mpred_prop(
%    knowRequest(agent,agent,physobj), 
%    fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',216).
mpred_prop(knowRequest(agent,agent,physobj),fluent).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',218).
% [agent1,agent2,physobj,time]
% Initiates(Request(agent1,agent2,physobj),
%           KnowRequest(agent2,agent1,physobj),
%           time).
% initiates(
%    request(Agent1,Agent2,Physobj), 
%    knowRequest(Agent2,Agent1,Physobj), 
%    Time).
request(Agent1, Agent2, Physobj)initiates knowRequest(Agent2, Agent1, Physobj).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',218).

 /*  initiated(happens(request(Agent1,Agent2,Physobj),
   		  Time_From,
   		  Time_Until),
   	  knowRequest(Agent2,Agent1,Physobj),
   	  []).
 */
 %  "% =================================".


% [agent1,agent2,physobj,time]
% Happens(Request(agent1,agent2,physobj),time) ->
% {location}% 
% HoldsAt(At(agent1,location),time) &
% HoldsAt(At(agent2,location),time).
% '->'(
%    ','(
%       ';'(
%          not(
%             at(Agent1,Exists_Location)), 
%          not(
%             at(Agent2,Exists_Location))), 
%       some(
%          Exists_Location, 
%          '$kolem_Fn_740'(Agent1,Agent2,Physobj,Time))), 
%    not(
%       request(Agent1,Agent2,Physobj))).
if (not loc_at(Agent1, Exists_Location);not loc_at(Agent2, Exists_Location)), some(Exists_Location, '$kolem_Fn_740'(Agent1, Agent2, Physobj, Time))then not request(Agent1, Agent2, Physobj).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',224).

 /*   reactive_rule([  (not(loc_at(Agent1, Exists_Location));not(loc_at(Agent2, Exists_Location))),
                      some(Exists_Location,
                           '$kolem_Fn_740'(Agent1,
                                           Agent2,
                                           Physobj,
                                           Time))
                    ],
                    [not(request(Agent1, Agent2, Physobj))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       request(Agent1,Agent2,Physobj), 
%       some(
%          Exists_Location, 
%          '$kolem_Fn_740'(Agent1,Agent2,Physobj,Time))), 
%    at(Agent1,Exists_Location)).
if request(Agent1, Agent2, Physobj), some(Exists_Location, '$kolem_Fn_740'(Agent1, Agent2, Physobj, Time))then loc_at(Agent1, Exists_Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',224).

 /*  reactive_rule([ happens(request(Agent1,
   				Agent2,
   				Physobj),
   			Time_From,
   			Time_Until),
   		some(Exists_Location,
   		     '$kolem_Fn_740'(Agent1,
   				     Agent2,
   				     Physobj,
   				     Time))
   	      ],
   	      [loc_at(Agent1,Exists_Location)]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       request(Agent1,Agent2,Physobj), 
%       some(
%          Exists_Location, 
%          '$kolem_Fn_740'(Agent1,Agent2,Physobj,Time))), 
%    at(Agent2,Exists_Location)).
if request(Agent1, Agent2, Physobj), some(Exists_Location, '$kolem_Fn_740'(Agent1, Agent2, Physobj, Time))then loc_at(Agent2, Exists_Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',224).

 /*  reactive_rule([ happens(request(Agent1,
   				Agent2,
   				Physobj),
   			Time_From8,
   			Time_Until9),
   		some(Exists_Location,
   		     '$kolem_Fn_740'(Agent1,
   				     Agent2,
   				     Physobj,
   				     Time))
   	      ],
   	      [loc_at(Agent2,Exists_Location)]).
 */
 %  "% =================================".


%; End of file.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',228).
% translate: ending  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e.lps 
