:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/EatingInAHouse.e',183).
:- call_pel_directive(translate(unskipped,
                                '/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.pel')).
:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(ecalc).
:- call_pel_directive(translate(begining,
                                '/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.pel')).
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; feeling = emotion, attitude, ...
%;
%; The Feeling representation includes simple positive, neutral, and
%; negative emotions, and positive, neutral, and negative attitudes
%; toward objects.
%;
%; emotions
%; agent is happy.

% fluent Happy(agent)
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',20).
fluent(happy(agent)).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',23).
%; agent is emotionally neutral or calm.

% fluent Calm(agent)
fluent(calm(agent)).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',26).
%; agent is unhappy.

% fluent Unhappy(agent)
fluent(unhappy(agent)).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',29).
%; At any moment, an agent is in one of three emotional states:

% xor Happy, Calm, Unhappy
xor([happy,calm,unhappy]).
%; agent becomes happy.

% event BecomeHappy(agent)
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',32).
event(becomeHappy(agent)).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',35).
%; agent becomes calm.

% event BecomeCalm(agent)
event(becomeCalm(agent)).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',38).
%; agent becomes unhappy.

% event BecomeUnhappy(agent)
event(becomeUnhappy(agent)).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',41).
%; A number of effect and precondition axioms deal with the transitions
%; from one emotional state to another:
% [agent,time]
% Initiates(BecomeHappy(agent),Happy(agent),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',43).
initiates_at(becomeHappy(Agent),happy(Agent),Time).


% [agent,time]
% HoldsAt(Calm(agent),time) ->
% Terminates(BecomeHappy(agent),Calm(agent),time).
holds_at(calm(Agent), Time) ->
    terminates_at(becomeHappy(Agent), calm(Agent), Time).


% [agent,time]
% HoldsAt(Unhappy(agent),time) ->
% Terminates(BecomeHappy(agent),Unhappy(agent),time).
holds_at(unhappy(Agent), Time) ->
    terminates_at(becomeHappy(Agent), unhappy(Agent), Time).


% [agent,time]
% Happens(BecomeHappy(agent),time) ->
% !HoldsAt(Happy(agent),time).
happens_at(becomeHappy(Agent), Time) ->
    holds_at(not(happy(Agent)), Time).


% [agent,time]
% Initiates(BecomeCalm(agent),Calm(agent),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',59).
initiates_at(becomeCalm(Agent),calm(Agent),Time).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',61).
% [agent,time]
% HoldsAt(Happy(agent),time) ->
% Terminates(BecomeCalm(agent),Happy(agent),time).
holds_at(happy(Agent), Time) ->
    terminates_at(becomeCalm(Agent), happy(Agent), Time).


% [agent,time]
% HoldsAt(Unhappy(agent),time) ->
% Terminates(BecomeCalm(agent),Unhappy(agent),time).
holds_at(unhappy(Agent), Time) ->
    terminates_at(becomeCalm(Agent), unhappy(Agent), Time).


% [agent,time]
% Happens(BecomeCalm(agent),time) -> !HoldsAt(Calm(agent),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',70).
happens_at(becomeCalm(Agent), Time) ->
    holds_at(not(calm(Agent)), Time).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',72).
% [agent,time]
% Initiates(BecomeUnhappy(agent),Unhappy(agent),time).
initiates_at(becomeUnhappy(Agent),
	     unhappy(Agent),
	     Time).


% [agent,time]
% HoldsAt(Happy(agent),time) ->
% Terminates(BecomeUnhappy(agent),Happy(agent),time).
holds_at(happy(Agent), Time) ->
    terminates_at(becomeUnhappy(Agent), happy(Agent), Time).


% [agent,time]
% HoldsAt(Calm(agent),time) ->
% Terminates(BecomeUnhappy(agent),Calm(agent),time).
holds_at(calm(Agent), Time) ->
    terminates_at(becomeUnhappy(Agent), calm(Agent), Time).


% [agent,time]
% Happens(BecomeUnhappy(agent),time) -> !HoldsAt(Unhappy(agent),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',84).
happens_at(becomeUnhappy(Agent), Time) ->
    holds_at(not(unhappy(Agent)), Time).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',86).
%; anger

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',88).
% fluent AngryAt(agent,agent)
fluent(angryAt(agent,agent)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',90).
% event BecomeAngryAt(agent,agent)
event(becomeAngryAt(agent,agent)).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',92).
% [agent1,agent2,time]
% Initiates(BecomeAngryAt(agent1,agent2),AngryAt(agent1,agent2),time).
initiates_at(becomeAngryAt(Agent1,Agent2),
	     angryAt(Agent1,Agent2),
	     Time).


% [agent1,agent2,time]
% Terminates(BecomeHappy(agent1),AngryAt(agent1,agent2),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',96).
terminates_at(becomeHappy(Agent1),
	      angryAt(Agent1,Agent2),
	      Time).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',98).
% [agent1,agent2,time]
% Happens(BecomeAngryAt(agent1,agent2),time) ->
% Happens(BecomeUnhappy(agent1),time).
happens_at(becomeAngryAt(Agent1, Agent2), Time) ->
    happens_at(becomeUnhappy(Agent1), Time).


%; attitudes
%; agent likes object.

% fluent Like(agent,object)
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',104).
fluent(like(agent,object)).


%; agent loves object.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',107).
% fluent Love(agent,object)
fluent(love(agent,object)).


%; agent dislikes object.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',109).
% fluent Dislike(agent,object)
fluent(dislike(agent,object)).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',111).
%; agent likes snow.

% fluent LikeSnow(agent)
fluent(likeSnow(agent)).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',114).
%; A trigger axiom states that
%; if an agent is awake, likes snow, and is in a room that
%; looks out onto a location where it is snowing, that agent
%; becomes happy:
% [agent,room,outside,time]
% !HoldsAt(Happy(agent),time) &
% HoldsAt(Awake(agent),time) &
% HoldsAt(LikeSnow(agent),time) &
% HoldsAt(At(agent,room),time) &
% LookOutOnto(room)=outside &
% HoldsAt(Snowing(outside),time) ->
% Happens(BecomeHappy(agent),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',118).
holds_at(not(happy(Agent)), Time), holds_at(awake(Agent), Time), holds_at(likeSnow(Agent), Time), holds_at(at_loc(Agent, Room), Time), lookOutOnto(Room)=Outside, holds_at(snowing(Outside), Time) ->
    happens_at(becomeHappy(Agent), Time).


%; We introduced LikeSnow above since Like
%; can only be used to represent that an agent likes a
%; particular object, not snow in general.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',131).
% event Smile(agent)
event(smile(agent)).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.e',133).
%; End of file.
:- call_pel_directive(translate(ending,
                                '/pack/logicmoo_ec/ext/ec_sources/ecnet/Feeling.pel')).
