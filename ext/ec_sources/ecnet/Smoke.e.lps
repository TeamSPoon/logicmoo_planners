:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SmallFire.e',61).
% translate: unskipped  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/Smoke.e.lps 
:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(lps).
% translate: begining  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/Smoke.e.lps 
% Thu, 08 Oct 2020 21:37:15 GMT File: <stream>(0x55894c1db000)%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; Smoking: smoking cigarettes and cigars
%;

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoke.e',14).
% fluent CraveNicotine(agent)
% fluent(
%    craveNicotine(agent)).
fluents([craveNicotine/1]).
% mpred_prop(
%    craveNicotine(agent), 
%    fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoke.e',14).
mpred_prop(craveNicotine(agent),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoke.e',16).
% fluent NicotineCravingSatisfied(agent)
% fluent(
%    nicotineCravingSatisfied(agent)).
fluents([nicotineCravingSatisfied/1]).
% mpred_prop(
%    nicotineCravingSatisfied(agent), 
%    fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoke.e',16).
mpred_prop(nicotineCravingSatisfied(agent),fluent).

% noninertial NicotineCravingSatisfied
% noninertial(nicotineCravingSatisfied).
noninertial(nicotineCravingSatisfied).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoke.e',19).
% [agent,time]
% HoldsAt(CraveNicotine(agent),time) <->
% !HoldsAt(NicotineCravingSatisfied(agent),time).

 /*  holds_at(craveNicotine(Agent), Time) <->
       holds_at(neg(nicotineCravingSatisfied(Agent)), Time).
 */
% '->'(
%    craveNicotine(Agent), 
%    not(
%       nicotineCravingSatisfied(Agent))).
if craveNicotine(Agent)then not nicotineCravingSatisfied(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoke.e',19).

 /*  reactive_rule([holds(craveNicotine(Agent),Time_At)],
   	      [not(nicotineCravingSatisfied(Agent))]).
 */
 %  "% =================================".
% '->'(
%    not(
%       not(
%          nicotineCravingSatisfied(Agent))), 
%    not(
%       craveNicotine(Agent))).
not craveNicotine(Agent)if not not nicotineCravingSatisfied(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoke.e',19).

 /*  l_int(holds(not(craveNicotine(Agent)),Time_At3),
         [not(not(nicotineCravingSatisfied(Agent)))]).
 */
 %  "% =================================".
% '->'(
%    not(
%       nicotineCravingSatisfied(Agent)), 
%    craveNicotine(Agent)).
craveNicotine(Agent)if not nicotineCravingSatisfied(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoke.e',19).

 /*  l_int(holds(craveNicotine(Agent),Time_At4),
         [not(nicotineCravingSatisfied(Agent))]).
 */
 %  "% =================================".
% '->'(
%    not(
%       craveNicotine(Agent)), 
%    not(
%       not(
%          nicotineCravingSatisfied(Agent)))).
if not craveNicotine(Agent)then not not nicotineCravingSatisfied(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoke.e',19).

 /*  reactive_rule([holds(not(craveNicotine(Agent)),Time_At5)],
   	      [not(not(nicotineCravingSatisfied(Agent)))]).
 */
 %  "% =================================".

% event Smoke(agent,cigarette)
% event(
%    smoke(agent,cigarette)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoke.e',22).
actions([smoke/2]).
% mpred_prop(
%    smoke(agent,cigarette), 
%    event).
mpred_prop(smoke(agent,cigarette),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoke.e',25).
% [agent,cigarette,time]
% Happens(Smoke(agent,cigarette),time) ->
% HoldsAt(Holding(agent,cigarette),time).
% '->'(
%    metreqs(
%       smoke(Agent,Cigarette)), 
%    requires(
%       smoke(Agent,Cigarette), 
%       When_Time)).
if smoke(Agent, Cigarette)then requires(smoke(Agent, Cigarette), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoke.e',25).

 /*  reactive_rule([ happens(smoke(Agent,Cigarette),
   			Time_From,
   			Time_Until)
   	      ],
   	      [ requires(smoke(Agent,Cigarette),
   			 When_Time)
   	      ]).
 */
 %  "% =================================".
% '->'(
%    holding(Agent,Cigarette), 
%    metreqs(
%       smoke(Agent,Cigarette))).
smoke(Agent, Cigarette)if holding(Agent, Cigarette).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoke.e',25).

 /*  l_events(happens(smoke(Agent,Cigarette),
   		 Time_From6,
   		 Time_From6),
   	 [holds(holding(Agent,Cigarette),Time_From6)]).
 */
 %  "% =================================".
% '->'(
%    not(
%       holding(Agent,Cigarette)), 
%    not(
%       smoke(Agent,Cigarette))).
if not holding(Agent, Cigarette)then not smoke(Agent, Cigarette).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoke.e',25).

 /*  reactive_rule([ holds(not(holding(Agent,Cigarette)),
   		      Time_At)
   	      ],
   	      [not(smoke(Agent,Cigarette))]).
 */
 %  "% =================================".


% [agent,cigarette,time]
% Terminates(Smoke(agent,cigarette),CraveNicotine(agent),time).
% terminates(
%    smoke(Agent,Cigarette), 
%    craveNicotine(Agent), 
%    Time).
smoke(Agent, Cigarette)terminates craveNicotine(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoke.e',30).

 /*  terminated(happens(smoke(Agent,Cigarette),
   		   Time_From,
   		   Time_Until),
   	   craveNicotine(Agent),
   	   []).
 */
 %  "% =================================".

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoke.e',32).
% event Puff(agent,cigarette)
% event(
%    puff(agent,cigarette)).
actions([puff/2]).
% mpred_prop(
%    puff(agent,cigarette), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoke.e',32).
mpred_prop(puff(agent,cigarette),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoke.e',34).
% [agent,cigarette,time]
% Happens(Puff(agent,cigarette),time) ->
% Happens(Smoke(agent,cigarette),time).
% '->'(
%    puff(Agent,Cigarette), 
%    smoke(Agent,Cigarette)).
smoke(Agent, Cigarette)if puff(Agent, Cigarette).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoke.e',34).

 /*  l_events(happens(smoke(Agent,Cigarette),
   		 Time_From,
   		 Time_Until),
   	 [ happens(puff(Agent,Cigarette),
   		   Time_From,
   		   Time_Until)
   	 ]).
 */
 %  "% =================================".
% '->'(
%    not(
%       smoke(Agent,Cigarette)), 
%    not(
%       puff(Agent,Cigarette))).
if not smoke(Agent, Cigarette)then not puff(Agent, Cigarette).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoke.e',34).

 /*  reactive_rule([not(smoke(Agent,Cigarette))],
   	      [not(puff(Agent,Cigarette))]).
 */
 %  "% =================================".

% event BlowOutSmoke(agent,smoke)
% event(
%    blowOutSmoke(agent,smoke)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoke.e',37).
actions([blowOutSmoke/2]).
% mpred_prop(
%    blowOutSmoke(agent,smoke), 
%    event).
mpred_prop(blowOutSmoke(agent,smoke),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoke.e',40).
%; End of file.
% translate: ending  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/Smoke.e.lps 
