:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SmallFire.e',61).
% From E: 
% 
% :-call_pel_directive(translate(unskipped,'/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoke.e.lps')).
:- call_pel_directive(translate(unskipped,
                                '/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoke.e.lps')).
:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(lps).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SmallFire.e',61).
% From E: 
% 
% :-call_pel_directive(translate(begining,'/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoke.e.lps')).
:- call_pel_directive(translate(begining,
                                '/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoke.e.lps')).
% Sat, 10 Oct 2020 15:31:44 GMT File: <stream>(0x559e4b39e900)%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; Smoking: smoking cigarettes and cigars
%;

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoke.e',14).
% fluent CraveNicotine(agent)
% From E: 
% 
% fluent(craveNicotine(agent)).
mpred_prop(craveNicotine(agent),fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoke.e',14).
fluents([craveNicotine/1]).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoke.e',16).
% fluent NicotineCravingSatisfied(agent)
% From E: 
% 
% fluent(nicotineCravingSatisfied(agent)).
mpred_prop(nicotineCravingSatisfied(agent),fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoke.e',16).
fluents([nicotineCravingSatisfied/1]).

% noninertial NicotineCravingSatisfied
% From E: 
% 
% :-call_pel_directive(noninertial(nicotineCravingSatisfied)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoke.e',16).
:- call_pel_directive(noninertial(nicotineCravingSatisfied)).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoke.e',19).
% [agent,time]
% HoldsAt(CraveNicotine(agent),time) <->
% !HoldsAt(NicotineCravingSatisfied(agent),time).
% From E: 
% 
% <->(
%    holds_at(craveNicotine(Agent),Time), 
%    holds_at(not(nicotineCravingSatisfied(Agent)),Time)).
 %   [Time].
if craveNicotine(Agent)then not nicotineCravingSatisfied(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoke.e',19).

 /*  reactive_rule([craveNicotine(Agent)],
   	      [not(nicotineCravingSatisfied(Agent))]).
 */
 %  "% =================================".
if not nicotineCravingSatisfied(Agent)then craveNicotine(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoke.e',19).

 /*  reactive_rule([not(nicotineCravingSatisfied(Agent))],
   	      [craveNicotine(Agent)]).
 */
 %  "% =================================".

% event Smoke(agent,cigarette)
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoke.e',22).
% From E: 
% 
% event(smoke(agent,cigarette)).
events([smoke/2]).
mpred_prop(smoke(agent,cigarette),action).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoke.e',22).
actions([smoke/2]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoke.e',25).
% [agent,cigarette,time]
% Happens(Smoke(agent,cigarette),time) ->
% HoldsAt(Holding(agent,cigarette),time).
% From E: 
% 
% '->'(
%    happens_at(smoke(Agent,Cigarette),Time), 
%    holds_at(holding(Agent,Cigarette),Time)).
 %   [Time].
holding(Agent, Cigarette)if smoke(Agent, Cigarette).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoke.e',25).

 /*  l_int(holds(holding(Agent,Cigarette),Time_At),
         [smoke(Agent,Cigarette)]).
 */
 %  "% =================================".


% [agent,cigarette,time]
% Terminates(Smoke(agent,cigarette),CraveNicotine(agent),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoke.e',30).
% From E: 
% 
% terminates_at(
%    smoke(Agent,Cigarette), 
%    craveNicotine(Agent), 
%    Time).
 %   [Time].
smoke(Agent, Cigarette)terminates craveNicotine(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoke.e',30).

 /*  terminated(happens(smoke(Agent,Cigarette),
   		   Time_From,
   		   Time_Until),
   	   craveNicotine(Agent),
   	   []).
 */
 %  "% =================================".

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoke.e',32).
% event Puff(agent,cigarette)
% From E: 
% 
% event(puff(agent,cigarette)).
events([puff/2]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoke.e',32).
mpred_prop(puff(agent,cigarette),action).
actions([puff/2]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoke.e',34).
% [agent,cigarette,time]
% Happens(Puff(agent,cigarette),time) ->
% Happens(Smoke(agent,cigarette),time).
% From E: 
% 
% '->'(
%    happens_at(puff(Agent,Cigarette),Time), 
%    happens_at(smoke(Agent,Cigarette),Time)).
 %   [Time].
smoke(Agent, Cigarette)if puff(Agent, Cigarette).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoke.e',34).

 /*  l_events(happens(smoke(Agent,Cigarette),
   		 Time_From,
   		 Time_From),
   	 [puff(Agent,Cigarette)]).
 */
 %  "% =================================".

% event BlowOutSmoke(agent,smoke)
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoke.e',37).
% From E: 
% 
% event(blowOutSmoke(agent,smoke)).
events([blowOutSmoke/2]).
mpred_prop(blowOutSmoke(agent,smoke),action).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoke.e',37).
actions([blowOutSmoke/2]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoke.e',40).
%; End of file.
% From E: 
% 
% :-call_pel_directive(translate(ending,'/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoke.e.lps')).
:- call_pel_directive(translate(ending,
                                '/pack/logicmoo_ec/ext/ec_sources/ecnet/Smoke.e.lps')).
