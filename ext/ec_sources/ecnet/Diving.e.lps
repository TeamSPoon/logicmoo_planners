:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/CTime.e',43).
% translate: unskipped  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e.lps 
:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(lps).
% translate: begining  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e.lps 
% Thu, 08 Oct 2020 19:05:49 GMT File: <stream>(0x5600a387b800)%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; scuba diving
%;

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',14).
% sort object
sort(object).
 %  sort(object).

% sort agent: object
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',14).
subsort(agent,object).
 %  subsort(agent,object).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',16).
% sort diver: agent
subsort(diver,agent).
 %  subsort(diver,agent).

% sort depth: integer
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',16).
subsort(depth,integer).
 %  subsort(depth,integer).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',18).
% sort boat: object
subsort(boat,object).
 %  subsort(boat,object).
%; reference line, anchor line, shotline, SMB line, ...

% sort line: object
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',20).
subsort(line,object).
 %  subsort(line,object).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',23).
% sort equipment: object
subsort(equipment,object).
 %  subsort(equipment,object).

% sort weight: equipment
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',23).
subsort(weight,equipment).
 %  subsort(weight,equipment).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',25).
% sort fin: equipment
subsort(fin,equipment).
 %  subsort(fin,equipment).

% sort airtank: equipment
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',25).
subsort(airtank,equipment).
 %  subsort(airtank,equipment).
%; buoyancy compensator (BC)
%; buoyancy control device (BCD)

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',30).
% sort computer: equipment
subsort(computer,equipment).
 %  subsort(computer,equipment).

% sort bc: equipment
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',30).
subsort(bc,equipment).
 %  subsort(bc,equipment).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',33).
% fluent AtDepth(object,depth)
 %  blue=fluent(atDepth(object,depth)).
 %  fluent(atDepth(object,depth)).
fluents([atDepth/2]).
 %  fluents([atDepth/2]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',33).
mpred_prop(atDepth(object,depth),fluent).
 %  mpred_prop(atDepth(object,depth),fluent).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',35).
% [object,depth1,depth2,time]
% HoldsAt(AtDepth(object,depth1),time) &
% HoldsAt(AtDepth(object,depth2),time) ->
% depth1 = depth2.
 %  clausify_pnf=(holds_at(atDepth(Object, Depth1), Time), holds_at(atDepth(Object, Depth2), Time)->equals(Depth1, Depth2)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',35).

 /*  not(holds_at(atDepth(Object, Depth1), Time)) :-
       holds_at(atDepth(Object, Depth2), Time),
       not(equals(Depth1, Depth2)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',35).

 /*  pl=axiom(not(atDepth(Object,Depth1)),
         [ atDepth(Object,Depth2),
   	not(equals(Depth1,Depth2))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',35).

 /*  (   atDepth(Object, Depth2),
       not(equals(Depth1, Depth2))
   ->  not(atDepth(Object, Depth1))
   ).
 */
if atDepth(Object, Depth2), not equals(Depth1, Depth2)then not atDepth(Object, Depth1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',35).

 /*  reactive_rule([ atDepth(Object,Depth2),
   		not(equals(Depth1,Depth2))
   	      ],
   	      [not(atDepth(Object,Depth1))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',35).

 /*  reactive_rule([ atDepth(Object,Depth2),
   		not(equals(Depth1,Depth2))
   	      ],
   	      [not(atDepth(Object,Depth1))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',35).

 /*  not(holds_at(atDepth(Object, Depth2), Time)) :-
       holds_at(atDepth(Object, Depth1), Time),
       not(equals(Depth1, Depth2)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',35).

 /*  pl=axiom(not(atDepth(Object,Depth2)),
         [ atDepth(Object,Depth1),
   	not(equals(Depth2,Depth1))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',35).

 /*  (   atDepth(Object, Depth1),
       not(equals(Depth2, Depth1))
   ->  not(atDepth(Object, Depth2))
   ).
 */
if atDepth(Object, Depth1), not equals(Depth2, Depth1)then not atDepth(Object, Depth2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',35).

 /*  reactive_rule([ atDepth(Object,Depth1),
   		not(equals(Depth2,Depth1))
   	      ],
   	      [not(atDepth(Object,Depth2))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',35).

 /*  reactive_rule([ atDepth(Object,Depth1),
   		not(equals(Depth2,Depth1))
   	      ],
   	      [not(atDepth(Object,Depth2))]).
 */

% event Ascend(diver,depth)
 %  blue=event(ascend(diver,depth)).
 %  event(ascend(diver,depth)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',39).
events([ascend/2]).
 %  events([ascend/2]).
mpred_prop(ascend(diver,depth),event).
 %  mpred_prop(ascend(diver,depth),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',42).
% event Descend(diver,depth)
 %  blue=event(descend(diver,depth)).
 %  event(descend(diver,depth)).
events([descend/2]).
 %  events([descend/2]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',42).
mpred_prop(descend(diver,depth),event).
 %  mpred_prop(descend(diver,depth),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',44).
% [diver,depth1,depth2,time]
% HoldsAt(AtDepth(diver,depth1),time) &
% Happens(Descend(diver,depth2),time) ->
% depth2>depth1.
 %  clausify_pnf=(holds_at(atDepth(Diver, Depth1), Time), happens(descend(Diver, Depth2), Time)->Depth2>Depth1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',44).

 /*  comparison(Depth2, Depth1, >) :-
       holds_at(atDepth(Diver, Depth1), Time),
       happens(descend(Diver, Depth2), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',44).

 /*  fix_axiom_head(Time) ->
       [ holds_at(atDepth(Diver, Depth1), Time),
          (->),
         atDepth(Diver, Depth1)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',44).

 /*  fix_axiom_head(Time) ->
       [ happens(descend(Diver, Depth2), Time),
          (->),
         descend(Diver, Depth2)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',44).

 /*  pl=axiom(comparison(Depth2,Depth1,>),
         [ atDepth(Diver,Depth1),
   	descend(Diver,Depth2)
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',44).

 /*  (   atDepth(Diver, Depth1),
       descend(Diver, Depth2)
   ->  comparison(Depth2, Depth1, >)
   ).
 */
if atDepth(Diver, Depth1), descend(Diver, Depth2)then comparison(Depth2, Depth1, >).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',44).

 /*  reactive_rule([ atDepth(Diver,Depth1),
   		descend(Diver,Depth2)
   	      ],
   	      [comparison(Depth2,Depth1,>)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',44).

 /*  reactive_rule([ atDepth(Diver,Depth1),
   		descend(Diver,Depth2)
   	      ],
   	      [comparison(Depth2,Depth1,>)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',44).

 /*  not(holds_at(atDepth(Diver, Depth1), Time)) :-
       happens(descend(Diver, Depth2), Time),
       not(comparison(Depth2, Depth1, >)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',44).

 /*  pl=axiom(not(atDepth(Diver,Depth1)),
         [ descend(Diver,Depth2),
   	not(comparison(Depth2,Depth1,>))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',44).

 /*  (   descend(Diver, Depth2),
       not(comparison(Depth2, Depth1, >))
   ->  not(atDepth(Diver, Depth1))
   ).
 */
if descend(Diver, Depth2), not comparison(Depth2, Depth1, >)then not atDepth(Diver, Depth1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',44).

 /*  reactive_rule([ descend(Diver,Depth2),
   		not(comparison(Depth2,Depth1,>))
   	      ],
   	      [not(atDepth(Diver,Depth1))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',44).

 /*  reactive_rule([ descend(Diver,Depth2),
   		not(comparison(Depth2,Depth1,>))
   	      ],
   	      [not(atDepth(Diver,Depth1))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',44).

 /*  not(happens(descend(Diver, Depth2), Time)) :-
       holds_at(atDepth(Diver, Depth1), Time),
       not(comparison(Depth2, Depth1, >)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',44).

 /*  fix_axiom_head(Time) ->
       [ not(happens(descend(Diver, Depth2), Time)),
          (->),
         not(descend(Diver, Depth2))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',44).

 /*  pl=axiom(not(descend(Diver,Depth2)),
         [ atDepth(Diver,Depth1),
   	not(comparison(Depth2,Depth1,>))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',44).

 /*  (   atDepth(Diver, Depth1),
       not(comparison(Depth2, Depth1, >))
   ->  not(descend(Diver, Depth2))
   ).
 */
if atDepth(Diver, Depth1), not comparison(Depth2, Depth1, >)then not descend(Diver, Depth2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',44).

 /*  reactive_rule([ atDepth(Diver,Depth1),
   		not(comparison(Depth2,Depth1,>))
   	      ],
   	      [not(descend(Diver,Depth2))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',44).

 /*  reactive_rule([ atDepth(Diver,Depth1),
   		not(comparison(Depth2,Depth1,>))
   	      ],
   	      [not(descend(Diver,Depth2))]).
 */


% [diver,depth1,depth2,time]
% HoldsAt(AtDepth(diver,depth1),time) &
% Happens(Ascend(diver,depth2),time) ->
% depth2<depth1.
 %  clausify_pnf=(holds_at(atDepth(Diver, Depth1), Time), happens(ascend(Diver, Depth2), Time)->Depth2<Depth1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',50).

 /*  comparison(Depth2, Depth1, <) :-
       holds_at(atDepth(Diver, Depth1), Time),
       happens(ascend(Diver, Depth2), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',50).

 /*  fix_axiom_head(Time) ->
       [ holds_at(atDepth(Diver, Depth1), Time),
          (->),
         atDepth(Diver, Depth1)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',50).

 /*  fix_axiom_head(Time) ->
       [ happens(ascend(Diver, Depth2), Time),
          (->),
         ascend(Diver, Depth2)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',50).

 /*  pl=axiom(comparison(Depth2,Depth1,<),
         [ atDepth(Diver,Depth1),
   	ascend(Diver,Depth2)
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',50).

 /*  (   atDepth(Diver, Depth1),
       ascend(Diver, Depth2)
   ->  comparison(Depth2, Depth1, <)
   ).
 */
if atDepth(Diver, Depth1), ascend(Diver, Depth2)then comparison(Depth2, Depth1, <).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',50).

 /*  reactive_rule([ atDepth(Diver,Depth1),
   		ascend(Diver,Depth2)
   	      ],
   	      [comparison(Depth2,Depth1,<)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',50).

 /*  reactive_rule([ atDepth(Diver,Depth1),
   		ascend(Diver,Depth2)
   	      ],
   	      [comparison(Depth2,Depth1,<)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',50).

 /*  not(holds_at(atDepth(Diver, Depth1), Time)) :-
       happens(ascend(Diver, Depth2), Time),
       not(comparison(Depth2, Depth1, <)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',50).

 /*  pl=axiom(not(atDepth(Diver,Depth1)),
         [ ascend(Diver,Depth2),
   	not(comparison(Depth2,Depth1,<))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',50).

 /*  (   ascend(Diver, Depth2),
       not(comparison(Depth2, Depth1, <))
   ->  not(atDepth(Diver, Depth1))
   ).
 */
if ascend(Diver, Depth2), not comparison(Depth2, Depth1, <)then not atDepth(Diver, Depth1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',50).

 /*  reactive_rule([ ascend(Diver,Depth2),
   		not(comparison(Depth2,Depth1,<))
   	      ],
   	      [not(atDepth(Diver,Depth1))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',50).

 /*  reactive_rule([ ascend(Diver,Depth2),
   		not(comparison(Depth2,Depth1,<))
   	      ],
   	      [not(atDepth(Diver,Depth1))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',50).

 /*  not(happens(ascend(Diver, Depth2), Time)) :-
       holds_at(atDepth(Diver, Depth1), Time),
       not(comparison(Depth2, Depth1, <)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',50).

 /*  fix_axiom_head(Time) ->
       [ not(happens(ascend(Diver, Depth2), Time)),
          (->),
         not(ascend(Diver, Depth2))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',50).

 /*  pl=axiom(not(ascend(Diver,Depth2)),
         [ atDepth(Diver,Depth1),
   	not(comparison(Depth2,Depth1,<))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',50).

 /*  (   atDepth(Diver, Depth1),
       not(comparison(Depth2, Depth1, <))
   ->  not(ascend(Diver, Depth2))
   ).
 */
if atDepth(Diver, Depth1), not comparison(Depth2, Depth1, <)then not ascend(Diver, Depth2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',50).

 /*  reactive_rule([ atDepth(Diver,Depth1),
   		not(comparison(Depth2,Depth1,<))
   	      ],
   	      [not(ascend(Diver,Depth2))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',50).

 /*  reactive_rule([ atDepth(Diver,Depth1),
   		not(comparison(Depth2,Depth1,<))
   	      ],
   	      [not(ascend(Diver,Depth2))]).
 */


% [diver,depth,time]
% Initiates(Descend(diver,depth),AtDepth(diver,depth),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',55).

 /*  pl=axiom(initiates(descend(Diver,Depth),
   		atDepth(Diver,Depth),
   		Time),
         []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',55).

 /*  initiates(descend(Diver,Depth),
   	  atDepth(Diver,Depth),
   	  Time).
 */
descend(Diver, Depth)initiates atDepth(Diver, Depth).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',55).

 /*  initiated(happens(descend(Diver,Depth),
   		  Time_From,
   		  Time_Until),
   	  atDepth(Diver,Depth),
   	  []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',55).

 /*  initiated(happens(descend(Diver,Depth),
   		  Time_From,
   		  Time_Until),
   	  atDepth(Diver,Depth),
   	  []).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',57).
% [diver,depth1,depth2,time]
% HoldsAt(AtDepth(diver,depth1),time) ->
% Terminates(Descend(diver,depth2),AtDepth(diver,depth1),time).

 /*  pl=axiom(terminates(descend(Diver,Depth2),
   		 atDepth(Diver,Depth1),
   		 Time),
         [atDepth(Diver,Depth1)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',57).

 /*  atDepth(Diver, Depth1) ->
       terminates(descend(Diver, Depth2),
                  atDepth(Diver, Depth1),
                  Time).
 */
if atDepth(Diver, Depth1)then terminates(descend(Diver, Depth2), atDepth(Diver, Depth1)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',57).

 /*  reactive_rule([holds(atDepth(Diver,Depth1),Holds)],
   	      [ terminates(descend(Diver,Depth2),
   			   at(atDepth(Diver,Depth1),
   			      Time),
   			   Terminates)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',57).

 /*  reactive_rule([holds(atDepth(Diver,Depth1),Holds)],
   	      [ terminates(descend(Diver,Depth2),
   			   at(atDepth(Diver,Depth1),
   			      Time),
   			   Terminates)
   	      ]).
 */


% [diver,depth,time]
% Initiates(Ascend(diver,depth),AtDepth(diver,depth),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',62).

 /*  pl=axiom(initiates(ascend(Diver,Depth),
   		atDepth(Diver,Depth),
   		Time),
         []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',62).

 /*  initiates(ascend(Diver,Depth),
   	  atDepth(Diver,Depth),
   	  Time).
 */
ascend(Diver, Depth)initiates atDepth(Diver, Depth).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',62).

 /*  initiated(happens(ascend(Diver,Depth),
   		  Time_From,
   		  Time_Until),
   	  atDepth(Diver,Depth),
   	  []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',62).

 /*  initiated(happens(ascend(Diver,Depth),
   		  Time_From,
   		  Time_Until),
   	  atDepth(Diver,Depth),
   	  []).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',64).
% [diver,depth1,depth2,time]
% HoldsAt(AtDepth(diver,depth1),time) ->
% Terminates(Ascend(diver,depth2),AtDepth(diver,depth1),time).

 /*  pl=axiom(terminates(ascend(Diver,Depth2),
   		 atDepth(Diver,Depth1),
   		 Time),
         [atDepth(Diver,Depth1)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',64).

 /*  atDepth(Diver, Depth1) ->
       terminates(ascend(Diver, Depth2),
                  atDepth(Diver, Depth1),
                  Time).
 */
if atDepth(Diver, Depth1)then terminates(ascend(Diver, Depth2), atDepth(Diver, Depth1)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',64).

 /*  reactive_rule([holds(atDepth(Diver,Depth1),Holds)],
   	      [ terminates(ascend(Diver,Depth2),
   			   at(atDepth(Diver,Depth1),
   			      Time),
   			   Terminates)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',64).

 /*  reactive_rule([holds(atDepth(Diver,Depth1),Holds)],
   	      [ terminates(ascend(Diver,Depth2),
   			   at(atDepth(Diver,Depth1),
   			      Time),
   			   Terminates)
   	      ]).
 */

% fluent Wearing(diver,equipment)
 %  blue=fluent(wearing(diver,equipment)).
 %  fluent(wearing(diver,equipment)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',67).
fluents([wearing/2]).
 %  fluents([wearing/2]).
mpred_prop(wearing(diver,equipment),fluent).
 %  mpred_prop(wearing(diver,equipment),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',70).
% event PutOn(diver,equipment)
 %  blue=event(putOn(diver,equipment)).
 %  event(putOn(diver,equipment)).
events([putOn/2]).
 %  events([putOn/2]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',70).
mpred_prop(putOn(diver,equipment),event).
 %  mpred_prop(putOn(diver,equipment),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',72).
% event TakeOff(diver,equipment)
 %  blue=event(takeOff(diver,equipment)).
 %  event(takeOff(diver,equipment)).
events([takeOff/2]).
 %  events([takeOff/2]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',72).
mpred_prop(takeOff(diver,equipment),event).
 %  mpred_prop(takeOff(diver,equipment),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',74).
% event Lose(diver,equipment)
 %  blue=event(lose(diver,equipment)).
 %  event(lose(diver,equipment)).
events([lose/2]).
 %  events([lose/2]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',74).
mpred_prop(lose(diver,equipment),event).
 %  mpred_prop(lose(diver,equipment),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',76).
% [diver,equipment,depth,time]
% Releases(PutOn(diver,equipment),AtDepth(equipment,depth),time).

 /*  pl=axiom(releases(putOn(Diver,Equipment),
   	       atDepth(Equipment,Depth),
   	       Time),
         []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',76).
releases(putOn(Diver,Equipment),
	 atDepth(Equipment,Depth),
	 Time).

 /*  releases(putOn(Diver,Equipment),
   	 atDepth(Equipment,Depth),
   	 Time).
 */


% [diver,equipment,time]
% Releases(PutOn(diver,equipment),UnderWater(equipment),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',80).

 /*  pl=axiom(releases(putOn(Diver,Equipment),
   	       underWater(Equipment),
   	       Time),
         []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',80).
releases(putOn(Diver,Equipment),
	 underWater(Equipment),
	 Time).

 /*  releases(putOn(Diver,Equipment),
   	 underWater(Equipment),
   	 Time).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',82).
% [diver,equipment,time]
% Happens(PutOn(diver,equipment),time) ->
% !{diver1} HoldsAt(Wearing(diver1,equipment),time).
 %  clausify_pnf=(happens(putOn(Diver, Equipment), Time)->not(exists([Diver1], holds_at(wearing(Diver1, Equipment), Time)))).

 /*  not(holds_at(wearing(Diver1, Equipment), Time)) :-
       happens(putOn(Diver, Equipment), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',82).

 /*  pl=axiom(requires(putOn(Diver,Equipment),When_Time),
         [metreqs(putOn(Diver,Equipment))]).
 */

 /*  metreqs(putOn(Diver, Equipment)) ->
       requires(putOn(Diver, Equipment), When_Time).
 */
if metreqs(putOn(Diver, Equipment))then requires(putOn(Diver, Equipment), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',82).

 /*  reactive_rule([metreqs(putOn(Diver,Equipment))],
   	      [ requires(putOn(Diver,Equipment),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',82).

 /*  reactive_rule([metreqs(putOn(Diver,Equipment))],
   	      [ requires(putOn(Diver,Equipment),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',82).

 /*  fix_axiom_head(When_Time) ->
       [ holds_at(metreqs(putOn(Diver, Equipment)), When_Time),
          (->),
         metreqs(putOn(Diver, Equipment))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',82).

 /*  pl=axiom(metreqs(putOn(Diver,Equipment)),
         [not(wearing(Diver1,Equipment))]).
 */

 /*  not(wearing(Diver1, Equipment)) ->
       metreqs(putOn(Diver, Equipment)).
 */
if not wearing(Diver1, Equipment)then metreqs(putOn(Diver, Equipment)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',82).

 /*  reactive_rule([not(wearing(Diver1,Equipment))],
   	      [metreqs(putOn(Diver,Equipment))]).
 */

 /*  reactive_rule([not(wearing(Diver1,Equipment))],
   	      [metreqs(putOn(Diver,Equipment))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',82).

 /*  not(happens(putOn(Diver, Equipment), When_Time)) :-
       holds_at(wearing(Diver1, Equipment), When_Time).
 */

 /*  fix_axiom_head(When_Time) ->
       [ not(happens(putOn(Diver, Equipment), When_Time)),
          (->),
         not(putOn(Diver, Equipment))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',82).

 /*  pl=axiom(not(putOn(Diver,Equipment)),
         [wearing(Diver1,Equipment)]).
 */

 /*  wearing(Diver1, Equipment) ->
       not(putOn(Diver, Equipment)).
 */
if wearing(Diver1, Equipment)then not putOn(Diver, Equipment).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',82).

 /*  reactive_rule([wearing(Diver1,Equipment)],
   	      [not(putOn(Diver,Equipment))]).
 */

 /*  reactive_rule([wearing(Diver1,Equipment)],
   	      [not(putOn(Diver,Equipment))]).
 */


% [diver,depth,equipment,time]
% HoldsAt(Wearing(diver,equipment),time) ->
% (HoldsAt(AtDepth(diver,depth),time) <->
%  HoldsAt(AtDepth(equipment,depth),time)).
 %  clausify_pnf=(holds_at(wearing(Diver, Equipment), Time)->(holds_at(atDepth(Diver, Depth), Time)<->holds_at(atDepth(Equipment, Depth), Time))).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',87).

 /*  not(holds_at(wearing(Diver, Equipment), Time)) :-
       (   not(holds_at(atDepth(Equipment, Depth), Time)),
           holds_at(atDepth(Diver, Depth), Time)
       ;   not(holds_at(atDepth(Diver, Depth), Time)),
           holds_at(atDepth(Equipment, Depth), Time)
       ).
 */
 %  pl=axiom(not(wearing(Diver, Equipment)), [(not(atDepth(Equipment, Depth)), atDepth(Diver, Depth);not(atDepth(Diver, Depth)), atDepth(Equipment, Depth))]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',87).

 /*  (   (   not(atDepth(Equipment, Depth)),
           atDepth(Diver, Depth)
       ;   not(atDepth(Diver, Depth)),
           atDepth(Equipment, Depth)
       )
   ->  not(wearing(Diver, Equipment))
   ).
 */
if not atDepth(Equipment, Depth), atDepth(Diver, Depth);not atDepth(Diver, Depth), atDepth(Equipment, Depth)then not wearing(Diver, Equipment).
 %  reactive_rule([(not(atDepth(Equipment, Depth)), atDepth(Diver, Depth);not(atDepth(Diver, Depth)), atDepth(Equipment, Depth))], [not(wearing(Diver, Equipment))]).
 %  reactive_rule([(not(atDepth(Equipment, Depth)), atDepth(Diver, Depth);not(atDepth(Diver, Depth)), atDepth(Equipment, Depth))], [not(wearing(Diver, Equipment))]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',87).

 /*  holds_at(atDepth(Equipment, Depth), Time) :-
       holds_at(atDepth(Diver, Depth), Time),
       holds_at(wearing(Diver, Equipment), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',87).

 /*  fix_axiom_head(Time) ->
       [ holds_at(atDepth(Equipment, Depth), Time),
          (->),
         atDepth(Equipment, Depth)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',87).

 /*  pl=axiom(atDepth(Equipment,Depth),
         [ atDepth(Diver,Depth),
   	wearing(Diver,Equipment)
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',87).

 /*  (   atDepth(Diver, Depth),
       wearing(Diver, Equipment)
   ->  atDepth(Equipment, Depth)
   ).
 */
if atDepth(Diver, Depth), wearing(Diver, Equipment)then atDepth(Equipment, Depth).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',87).

 /*  reactive_rule([ holds(atDepth(Diver,Depth),Holds),
   		wearing(Diver,Equipment)
   	      ],
   	      [ holds(atDepth(Equipment,Depth),
   		      Holds5)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',87).

 /*  reactive_rule([ holds(atDepth(Diver,Depth),Holds),
   		wearing(Diver,Equipment)
   	      ],
   	      [ holds(atDepth(Equipment,Depth),
   		      Holds5)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',87).

 /*  not(holds_at(atDepth(Diver, Depth), Time)) :-
       not(holds_at(atDepth(Equipment, Depth), Time)),
       holds_at(wearing(Diver, Equipment), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',87).

 /*  pl=axiom(not(atDepth(Diver,Depth)),
         [ not(atDepth(Equipment,Depth)),
   	wearing(Diver,Equipment)
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',87).

 /*  (   not(atDepth(Equipment, Depth)),
       wearing(Diver, Equipment)
   ->  not(atDepth(Diver, Depth))
   ).
 */
if not atDepth(Equipment, Depth), wearing(Diver, Equipment)then not atDepth(Diver, Depth).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',87).

 /*  reactive_rule([ holds(not(atDepth(Equipment,Depth)),
   		      Holds6),
   		wearing(Diver,Equipment)
   	      ],
   	      [ holds(not(atDepth(Diver,Depth)),
   		      Holds7)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',87).

 /*  reactive_rule([ holds(not(atDepth(Equipment,Depth)),
   		      Holds6),
   		wearing(Diver,Equipment)
   	      ],
   	      [ holds(not(atDepth(Diver,Depth)),
   		      Holds7)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',87).

 /*  holds_at(atDepth(Diver, Depth), Time) :-
       holds_at(atDepth(Equipment, Depth), Time),
       holds_at(wearing(Diver, Equipment), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',87).

 /*  fix_axiom_head(Time) ->
       [ holds_at(atDepth(Diver, Depth), Time),
          (->),
         atDepth(Diver, Depth)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',87).

 /*  pl=axiom(atDepth(Diver,Depth),
         [ atDepth(Equipment,Depth),
   	wearing(Diver,Equipment)
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',87).

 /*  (   atDepth(Equipment, Depth),
       wearing(Diver, Equipment)
   ->  atDepth(Diver, Depth)
   ).
 */
if atDepth(Equipment, Depth), wearing(Diver, Equipment)then atDepth(Diver, Depth).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',87).

 /*  reactive_rule([ holds(atDepth(Equipment,Depth),
   		      Holds8),
   		wearing(Diver,Equipment)
   	      ],
   	      [holds(atDepth(Diver,Depth),Holds9)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',87).

 /*  reactive_rule([ holds(atDepth(Equipment,Depth),
   		      Holds8),
   		wearing(Diver,Equipment)
   	      ],
   	      [holds(atDepth(Diver,Depth),Holds9)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',87).

 /*  not(holds_at(atDepth(Equipment, Depth), Time)) :-
       not(holds_at(atDepth(Diver, Depth), Time)),
       holds_at(wearing(Diver, Equipment), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',87).

 /*  pl=axiom(not(atDepth(Equipment,Depth)),
         [ not(atDepth(Diver,Depth)),
   	wearing(Diver,Equipment)
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',87).

 /*  (   not(atDepth(Diver, Depth)),
       wearing(Diver, Equipment)
   ->  not(atDepth(Equipment, Depth))
   ).
 */
if not atDepth(Diver, Depth), wearing(Diver, Equipment)then not atDepth(Equipment, Depth).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',87).

 /*  reactive_rule([ holds(not(atDepth(Diver,Depth)),
   		      Holds10),
   		wearing(Diver,Equipment)
   	      ],
   	      [ holds(not(atDepth(Equipment,Depth)),
   		      Holds11)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',87).

 /*  reactive_rule([ holds(not(atDepth(Diver,Depth)),
   		      Holds10),
   		wearing(Diver,Equipment)
   	      ],
   	      [ holds(not(atDepth(Equipment,Depth)),
   		      Holds11)
   	      ]).
 */


% [diver,depth,object,time]
% HoldsAt(Holding(diver,object),time) ->
% (HoldsAt(AtDepth(diver,depth),time) <->
%  HoldsAt(AtDepth(object,depth),time)).
 %  clausify_pnf=(holds_at(holding(Diver, Object), Time)->(holds_at(atDepth(Diver, Depth), Time)<->holds_at(atDepth(Object, Depth), Time))).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',92).

 /*  not(holds_at(holding(Diver, Object), Time)) :-
       (   not(holds_at(atDepth(Object, Depth), Time)),
           holds_at(atDepth(Diver, Depth), Time)
       ;   not(holds_at(atDepth(Diver, Depth), Time)),
           holds_at(atDepth(Object, Depth), Time)
       ).
 */
 %  pl=axiom(not(holding(Diver, Object)), [(not(atDepth(Object, Depth)), atDepth(Diver, Depth);not(atDepth(Diver, Depth)), atDepth(Object, Depth))]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',92).

 /*  (   (   not(atDepth(Object, Depth)),
           atDepth(Diver, Depth)
       ;   not(atDepth(Diver, Depth)),
           atDepth(Object, Depth)
       )
   ->  not(holding(Diver, Object))
   ).
 */
if not atDepth(Object, Depth), atDepth(Diver, Depth);not atDepth(Diver, Depth), atDepth(Object, Depth)then not holding(Diver, Object).
 %  reactive_rule([(not(atDepth(Object, Depth)), atDepth(Diver, Depth);not(atDepth(Diver, Depth)), atDepth(Object, Depth))], [not(holding(Diver, Object))]).
 %  reactive_rule([(not(atDepth(Object, Depth)), atDepth(Diver, Depth);not(atDepth(Diver, Depth)), atDepth(Object, Depth))], [not(holding(Diver, Object))]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',92).

 /*  holds_at(atDepth(Object, Depth), Time) :-
       holds_at(atDepth(Diver, Depth), Time),
       holds_at(holding(Diver, Object), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',92).

 /*  fix_axiom_head(Time) ->
       [ holds_at(atDepth(Object, Depth), Time),
          (->),
         atDepth(Object, Depth)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',92).

 /*  pl=axiom(atDepth(Object,Depth),
         [ atDepth(Diver,Depth),
   	holding(Diver,Object)
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',92).

 /*  (   atDepth(Diver, Depth),
       holding(Diver, Object)
   ->  atDepth(Object, Depth)
   ).
 */
if atDepth(Diver, Depth), holding(Diver, Object)then atDepth(Object, Depth).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',92).

 /*  reactive_rule([ holds(atDepth(Diver,Depth),Holds),
   		holding(Diver,Object)
   	      ],
   	      [holds(atDepth(Object,Depth),Holds5)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',92).

 /*  reactive_rule([ holds(atDepth(Diver,Depth),Holds),
   		holding(Diver,Object)
   	      ],
   	      [holds(atDepth(Object,Depth),Holds5)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',92).

 /*  not(holds_at(atDepth(Diver, Depth), Time)) :-
       not(holds_at(atDepth(Object, Depth), Time)),
       holds_at(holding(Diver, Object), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',92).

 /*  pl=axiom(not(atDepth(Diver,Depth)),
         [ not(atDepth(Object,Depth)),
   	holding(Diver,Object)
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',92).

 /*  (   not(atDepth(Object, Depth)),
       holding(Diver, Object)
   ->  not(atDepth(Diver, Depth))
   ).
 */
if not atDepth(Object, Depth), holding(Diver, Object)then not atDepth(Diver, Depth).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',92).

 /*  reactive_rule([ holds(not(atDepth(Object,Depth)),
   		      Holds6),
   		holding(Diver,Object)
   	      ],
   	      [ holds(not(atDepth(Diver,Depth)),
   		      Holds7)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',92).

 /*  reactive_rule([ holds(not(atDepth(Object,Depth)),
   		      Holds6),
   		holding(Diver,Object)
   	      ],
   	      [ holds(not(atDepth(Diver,Depth)),
   		      Holds7)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',92).

 /*  holds_at(atDepth(Diver, Depth), Time) :-
       holds_at(atDepth(Object, Depth), Time),
       holds_at(holding(Diver, Object), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',92).

 /*  fix_axiom_head(Time) ->
       [ holds_at(atDepth(Diver, Depth), Time),
          (->),
         atDepth(Diver, Depth)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',92).

 /*  pl=axiom(atDepth(Diver,Depth),
         [ atDepth(Object,Depth),
   	holding(Diver,Object)
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',92).

 /*  (   atDepth(Object, Depth),
       holding(Diver, Object)
   ->  atDepth(Diver, Depth)
   ).
 */
if atDepth(Object, Depth), holding(Diver, Object)then atDepth(Diver, Depth).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',92).

 /*  reactive_rule([ holds(atDepth(Object,Depth),Holds8),
   		holding(Diver,Object)
   	      ],
   	      [holds(atDepth(Diver,Depth),Holds9)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',92).

 /*  reactive_rule([ holds(atDepth(Object,Depth),Holds8),
   		holding(Diver,Object)
   	      ],
   	      [holds(atDepth(Diver,Depth),Holds9)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',92).

 /*  not(holds_at(atDepth(Object, Depth), Time)) :-
       not(holds_at(atDepth(Diver, Depth), Time)),
       holds_at(holding(Diver, Object), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',92).

 /*  pl=axiom(not(atDepth(Object,Depth)),
         [ not(atDepth(Diver,Depth)),
   	holding(Diver,Object)
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',92).

 /*  (   not(atDepth(Diver, Depth)),
       holding(Diver, Object)
   ->  not(atDepth(Object, Depth))
   ).
 */
if not atDepth(Diver, Depth), holding(Diver, Object)then not atDepth(Object, Depth).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',92).

 /*  reactive_rule([ holds(not(atDepth(Diver,Depth)),
   		      Holds10),
   		holding(Diver,Object)
   	      ],
   	      [ holds(not(atDepth(Object,Depth)),
   		      Holds11)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',92).

 /*  reactive_rule([ holds(not(atDepth(Diver,Depth)),
   		      Holds10),
   		holding(Diver,Object)
   	      ],
   	      [ holds(not(atDepth(Object,Depth)),
   		      Holds11)
   	      ]).
 */


% [diver,equipment,time]
% HoldsAt(Wearing(diver,equipment),time) ->
% (HoldsAt(UnderWater(diver),time) <->
%  HoldsAt(UnderWater(equipment),time)).
 %  clausify_pnf=(holds_at(wearing(Diver, Equipment), Time)->(holds_at(underWater(Diver), Time)<->holds_at(underWater(Equipment), Time))).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',97).

 /*  not(holds_at(wearing(Diver, Equipment), Time)) :-
       (   not(holds_at(underWater(Equipment), Time)),
           holds_at(underWater(Diver), Time)
       ;   not(holds_at(underWater(Diver), Time)),
           holds_at(underWater(Equipment), Time)
       ).
 */
 %  pl=axiom(not(wearing(Diver, Equipment)), [(not(underWater(Equipment)), underWater(Diver);not(underWater(Diver)), underWater(Equipment))]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',97).

 /*  (   (   not(underWater(Equipment)),
           underWater(Diver)
       ;   not(underWater(Diver)),
           underWater(Equipment)
       )
   ->  not(wearing(Diver, Equipment))
   ).
 */
if not underWater(Equipment), underWater(Diver);not underWater(Diver), underWater(Equipment)then not wearing(Diver, Equipment).
 %  reactive_rule([(not(underWater(Equipment)), underWater(Diver);not(underWater(Diver)), underWater(Equipment))], [not(wearing(Diver, Equipment))]).
 %  reactive_rule([(not(underWater(Equipment)), underWater(Diver);not(underWater(Diver)), underWater(Equipment))], [not(wearing(Diver, Equipment))]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',97).

 /*  holds_at(underWater(Equipment), Time) :-
       holds_at(underWater(Diver), Time),
       holds_at(wearing(Diver, Equipment), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',97).

 /*  fix_axiom_head(Time) ->
       [ holds_at(underWater(Equipment), Time),
          (->),
         underWater(Equipment)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',97).

 /*  pl=axiom(underWater(Equipment),
         [underWater(Diver),wearing(Diver,Equipment)]).
 */

 /*  (   underWater(Diver),
       wearing(Diver, Equipment)
   ->  underWater(Equipment)
   ).
 */
if underWater(Diver), wearing(Diver, Equipment)then underWater(Equipment).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',97).

 /*  reactive_rule([ underWater(Diver),
   		wearing(Diver,Equipment)
   	      ],
   	      [underWater(Equipment)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',97).

 /*  reactive_rule([ underWater(Diver),
   		wearing(Diver,Equipment)
   	      ],
   	      [underWater(Equipment)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',97).

 /*  not(holds_at(underWater(Diver), Time)) :-
       not(holds_at(underWater(Equipment), Time)),
       holds_at(wearing(Diver, Equipment), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',97).

 /*  pl=axiom(not(underWater(Diver)),
         [ not(underWater(Equipment)),
   	wearing(Diver,Equipment)
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',97).

 /*  (   not(underWater(Equipment)),
       wearing(Diver, Equipment)
   ->  not(underWater(Diver))
   ).
 */
if not underWater(Equipment), wearing(Diver, Equipment)then not underWater(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',97).

 /*  reactive_rule([ not(underWater(Equipment)),
   		wearing(Diver,Equipment)
   	      ],
   	      [not(underWater(Diver))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',97).

 /*  reactive_rule([ not(underWater(Equipment)),
   		wearing(Diver,Equipment)
   	      ],
   	      [not(underWater(Diver))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',97).

 /*  holds_at(underWater(Diver), Time) :-
       holds_at(underWater(Equipment), Time),
       holds_at(wearing(Diver, Equipment), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',97).

 /*  fix_axiom_head(Time) ->
       [holds_at(underWater(Diver), Time), ->, underWater(Diver)].
 */

 /*  pl=axiom(underWater(Diver),
         [ underWater(Equipment),
   	wearing(Diver,Equipment)
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',97).

 /*  (   underWater(Equipment),
       wearing(Diver, Equipment)
   ->  underWater(Diver)
   ).
 */
if underWater(Equipment), wearing(Diver, Equipment)then underWater(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',97).

 /*  reactive_rule([ underWater(Equipment),
   		wearing(Diver,Equipment)
   	      ],
   	      [underWater(Diver)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',97).

 /*  reactive_rule([ underWater(Equipment),
   		wearing(Diver,Equipment)
   	      ],
   	      [underWater(Diver)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',97).

 /*  not(holds_at(underWater(Equipment), Time)) :-
       not(holds_at(underWater(Diver), Time)),
       holds_at(wearing(Diver, Equipment), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',97).

 /*  pl=axiom(not(underWater(Equipment)),
         [ not(underWater(Diver)),
   	wearing(Diver,Equipment)
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',97).

 /*  (   not(underWater(Diver)),
       wearing(Diver, Equipment)
   ->  not(underWater(Equipment))
   ).
 */
if not underWater(Diver), wearing(Diver, Equipment)then not underWater(Equipment).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',97).

 /*  reactive_rule([ not(underWater(Diver)),
   		wearing(Diver,Equipment)
   	      ],
   	      [not(underWater(Equipment))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',97).

 /*  reactive_rule([ not(underWater(Diver)),
   		wearing(Diver,Equipment)
   	      ],
   	      [not(underWater(Equipment))]).
 */


% [diver,object,time]
% HoldsAt(Holding(diver,object),time) ->
% (HoldsAt(UnderWater(diver),time) <->
%  HoldsAt(UnderWater(object),time)).
 %  clausify_pnf=(holds_at(holding(Diver, Object), Time)->(holds_at(underWater(Diver), Time)<->holds_at(underWater(Object), Time))).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',102).

 /*  not(holds_at(holding(Diver, Object), Time)) :-
       (   not(holds_at(underWater(Object), Time)),
           holds_at(underWater(Diver), Time)
       ;   not(holds_at(underWater(Diver), Time)),
           holds_at(underWater(Object), Time)
       ).
 */
 %  pl=axiom(not(holding(Diver, Object)), [(not(underWater(Object)), underWater(Diver);not(underWater(Diver)), underWater(Object))]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',102).

 /*  (   (   not(underWater(Object)),
           underWater(Diver)
       ;   not(underWater(Diver)),
           underWater(Object)
       )
   ->  not(holding(Diver, Object))
   ).
 */
if not underWater(Object), underWater(Diver);not underWater(Diver), underWater(Object)then not holding(Diver, Object).
 %  reactive_rule([(not(underWater(Object)), underWater(Diver);not(underWater(Diver)), underWater(Object))], [not(holding(Diver, Object))]).
 %  reactive_rule([(not(underWater(Object)), underWater(Diver);not(underWater(Diver)), underWater(Object))], [not(holding(Diver, Object))]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',102).

 /*  holds_at(underWater(Object), Time) :-
       holds_at(underWater(Diver), Time),
       holds_at(holding(Diver, Object), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',102).

 /*  fix_axiom_head(Time) ->
       [ holds_at(underWater(Object), Time),
          (->),
         underWater(Object)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',102).

 /*  pl=axiom(underWater(Object),
         [underWater(Diver),holding(Diver,Object)]).
 */

 /*  (   underWater(Diver),
       holding(Diver, Object)
   ->  underWater(Object)
   ).
 */
if underWater(Diver), holding(Diver, Object)then underWater(Object).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',102).

 /*  reactive_rule([ underWater(Diver),
   		holding(Diver,Object)
   	      ],
   	      [underWater(Object)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',102).

 /*  reactive_rule([ underWater(Diver),
   		holding(Diver,Object)
   	      ],
   	      [underWater(Object)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',102).

 /*  not(holds_at(underWater(Diver), Time)) :-
       not(holds_at(underWater(Object), Time)),
       holds_at(holding(Diver, Object), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',102).

 /*  pl=axiom(not(underWater(Diver)),
         [not(underWater(Object)),holding(Diver,Object)]).
 */

 /*  (   not(underWater(Object)),
       holding(Diver, Object)
   ->  not(underWater(Diver))
   ).
 */
if not underWater(Object), holding(Diver, Object)then not underWater(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',102).

 /*  reactive_rule([ not(underWater(Object)),
   		holding(Diver,Object)
   	      ],
   	      [not(underWater(Diver))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',102).

 /*  reactive_rule([ not(underWater(Object)),
   		holding(Diver,Object)
   	      ],
   	      [not(underWater(Diver))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',102).

 /*  holds_at(underWater(Diver), Time) :-
       holds_at(underWater(Object), Time),
       holds_at(holding(Diver, Object), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',102).

 /*  fix_axiom_head(Time) ->
       [holds_at(underWater(Diver), Time), ->, underWater(Diver)].
 */

 /*  pl=axiom(underWater(Diver),
         [underWater(Object),holding(Diver,Object)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',102).

 /*  (   underWater(Object),
       holding(Diver, Object)
   ->  underWater(Diver)
   ).
 */
if underWater(Object), holding(Diver, Object)then underWater(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',102).

 /*  reactive_rule([ underWater(Object),
   		holding(Diver,Object)
   	      ],
   	      [underWater(Diver)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',102).

 /*  reactive_rule([ underWater(Object),
   		holding(Diver,Object)
   	      ],
   	      [underWater(Diver)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',102).

 /*  not(holds_at(underWater(Object), Time)) :-
       not(holds_at(underWater(Diver), Time)),
       holds_at(holding(Diver, Object), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',102).

 /*  pl=axiom(not(underWater(Object)),
         [not(underWater(Diver)),holding(Diver,Object)]).
 */

 /*  (   not(underWater(Diver)),
       holding(Diver, Object)
   ->  not(underWater(Object))
   ).
 */
if not underWater(Diver), holding(Diver, Object)then not underWater(Object).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',102).

 /*  reactive_rule([ not(underWater(Diver)),
   		holding(Diver,Object)
   	      ],
   	      [not(underWater(Object))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',102).

 /*  reactive_rule([ not(underWater(Diver)),
   		holding(Diver,Object)
   	      ],
   	      [not(underWater(Object))]).
 */


% [diver,depth,equipment,time]
% HoldsAt(AtDepth(diver,depth),time) &
% HoldsAt(Wearing(diver,equipment),time) ->
% Initiates(TakeOff(diver,equipment),AtDepth(equipment,depth),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',107).

 /*  pl=axiom(initiates(takeOff(Diver,Equipment),
   		atDepth(Equipment,Depth),
   		Time),
         [ atDepth(Diver,Depth),
   	wearing(Diver,Equipment)
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',107).

 /*  (   atDepth(Diver, Depth),
       wearing(Diver, Equipment)
   ->  initiates(takeOff(Diver, Equipment),
                 atDepth(Equipment, Depth),
                 Time)
   ).
 */
if atDepth(Diver, Depth), wearing(Diver, Equipment)then initiates(takeOff(Diver, Equipment), atDepth(Equipment, Depth)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',107).

 /*  reactive_rule([ holds(atDepth(Diver,Depth),Holds),
   		wearing(Diver,Equipment)
   	      ],
   	      [ initiates(takeOff(Diver,Equipment),
   			  at(atDepth(Equipment,Depth),
   			     Time),
   			  Initiates)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',107).

 /*  reactive_rule([ holds(atDepth(Diver,Depth),Holds),
   		wearing(Diver,Equipment)
   	      ],
   	      [ initiates(takeOff(Diver,Equipment),
   			  at(atDepth(Equipment,Depth),
   			     Time),
   			  Initiates)
   	      ]).
 */


% [diver,depth,equipment,time]
% !HoldsAt(AtDepth(diver,depth),time) &
% HoldsAt(Wearing(diver,equipment),time) ->
% Terminates(TakeOff(diver,equipment),AtDepth(equipment,depth),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',112).

 /*  pl=axiom(terminates(takeOff(Diver,Equipment),
   		 atDepth(Equipment,Depth),
   		 Time),
         [ not(atDepth(Diver,Depth)),
   	wearing(Diver,Equipment)
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',112).

 /*  (   not(atDepth(Diver, Depth)),
       wearing(Diver, Equipment)
   ->  terminates(takeOff(Diver, Equipment),
                  atDepth(Equipment, Depth),
                  Time)
   ).
 */
if not atDepth(Diver, Depth), wearing(Diver, Equipment)then terminates(takeOff(Diver, Equipment), atDepth(Equipment, Depth)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',112).

 /*  reactive_rule([ holds(not(atDepth(Diver,Depth)),
   		      Holds),
   		wearing(Diver,Equipment)
   	      ],
   	      [ terminates(takeOff(Diver,Equipment),
   			   at(atDepth(Equipment,Depth),
   			      Time),
   			   Terminates)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',112).

 /*  reactive_rule([ holds(not(atDepth(Diver,Depth)),
   		      Holds),
   		wearing(Diver,Equipment)
   	      ],
   	      [ terminates(takeOff(Diver,Equipment),
   			   at(atDepth(Equipment,Depth),
   			      Time),
   			   Terminates)
   	      ]).
 */


% [diver,equipment,time]
% HoldsAt(UnderWater(diver),time) ->
% Initiates(TakeOff(diver,equipment),UnderWater(equipment),time).

 /*  pl=axiom(initiates(takeOff(Diver,Equipment),
   		underWater(Equipment),
   		Time),
         [underWater(Diver)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',117).

 /*  underWater(Diver) ->
       initiates(takeOff(Diver, Equipment),
                 underWater(Equipment),
                 Time).
 */
if underWater(Diver)then initiates(takeOff(Diver, Equipment), underWater(Equipment)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',117).

 /*  reactive_rule([underWater(Diver)],
   	      [ initiates(takeOff(Diver,Equipment),
   			  at(underWater(Equipment),Time),
   			  Initiates)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',117).

 /*  reactive_rule([underWater(Diver)],
   	      [ initiates(takeOff(Diver,Equipment),
   			  at(underWater(Equipment),Time),
   			  Initiates)
   	      ]).
 */


% [diver,equipment,time]
% !HoldsAt(UnderWater(diver),time) ->
% Terminates(TakeOff(diver,equipment),UnderWater(equipment),time).

 /*  pl=axiom(terminates(takeOff(Diver,Equipment),
   		 underWater(Equipment),
   		 Time),
         [not(underWater(Diver))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',121).

 /*  not(underWater(Diver)) ->
       terminates(takeOff(Diver, Equipment),
                  underWater(Equipment),
                  Time).
 */
if not underWater(Diver)then terminates(takeOff(Diver, Equipment), underWater(Equipment)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',121).

 /*  reactive_rule([not(underWater(Diver))],
   	      [ terminates(takeOff(Diver,Equipment),
   			   at(underWater(Equipment),Time),
   			   Terminates)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',121).

 /*  reactive_rule([not(underWater(Diver))],
   	      [ terminates(takeOff(Diver,Equipment),
   			   at(underWater(Equipment),Time),
   			   Terminates)
   	      ]).
 */


% [diver,equipment,depth,time]
% HoldsAt(AtDepth(diver,depth),time) &
% HoldsAt(Wearing(diver,equipment),time) ->
% Initiates(Lose(diver,equipment),AtDepth(equipment,depth),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',125).

 /*  pl=axiom(initiates(lose(Diver,Equipment),
   		atDepth(Equipment,Depth),
   		Time),
         [ atDepth(Diver,Depth),
   	wearing(Diver,Equipment)
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',125).

 /*  (   atDepth(Diver, Depth),
       wearing(Diver, Equipment)
   ->  initiates(lose(Diver, Equipment),
                 atDepth(Equipment, Depth),
                 Time)
   ).
 */
if atDepth(Diver, Depth), wearing(Diver, Equipment)then initiates(lose(Diver, Equipment), atDepth(Equipment, Depth)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',125).

 /*  reactive_rule([ holds(atDepth(Diver,Depth),Holds),
   		wearing(Diver,Equipment)
   	      ],
   	      [ initiates(lose(Diver,Equipment),
   			  at(atDepth(Equipment,Depth),
   			     Time),
   			  Initiates)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',125).

 /*  reactive_rule([ holds(atDepth(Diver,Depth),Holds),
   		wearing(Diver,Equipment)
   	      ],
   	      [ initiates(lose(Diver,Equipment),
   			  at(atDepth(Equipment,Depth),
   			     Time),
   			  Initiates)
   	      ]).
 */


% [diver,equipment,depth,time]
% !HoldsAt(AtDepth(diver,depth),time) &
% HoldsAt(Wearing(diver,equipment),time) ->
% Terminates(Lose(diver,equipment),AtDepth(equipment,depth),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',130).

 /*  pl=axiom(terminates(lose(Diver,Equipment),
   		 atDepth(Equipment,Depth),
   		 Time),
         [ not(atDepth(Diver,Depth)),
   	wearing(Diver,Equipment)
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',130).

 /*  (   not(atDepth(Diver, Depth)),
       wearing(Diver, Equipment)
   ->  terminates(lose(Diver, Equipment),
                  atDepth(Equipment, Depth),
                  Time)
   ).
 */
if not atDepth(Diver, Depth), wearing(Diver, Equipment)then terminates(lose(Diver, Equipment), atDepth(Equipment, Depth)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',130).

 /*  reactive_rule([ holds(not(atDepth(Diver,Depth)),
   		      Holds),
   		wearing(Diver,Equipment)
   	      ],
   	      [ terminates(lose(Diver,Equipment),
   			   at(atDepth(Equipment,Depth),
   			      Time),
   			   Terminates)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',130).

 /*  reactive_rule([ holds(not(atDepth(Diver,Depth)),
   		      Holds),
   		wearing(Diver,Equipment)
   	      ],
   	      [ terminates(lose(Diver,Equipment),
   			   at(atDepth(Equipment,Depth),
   			      Time),
   			   Terminates)
   	      ]).
 */


% [diver,equipment,time]
% HoldsAt(UnderWater(diver),time) ->
% Initiates(Lose(diver,equipment),UnderWater(equipment),time).

 /*  pl=axiom(initiates(lose(Diver,Equipment),
   		underWater(Equipment),
   		Time),
         [underWater(Diver)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',135).

 /*  underWater(Diver) ->
       initiates(lose(Diver, Equipment),
                 underWater(Equipment),
                 Time).
 */
if underWater(Diver)then initiates(lose(Diver, Equipment), underWater(Equipment)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',135).

 /*  reactive_rule([underWater(Diver)],
   	      [ initiates(lose(Diver,Equipment),
   			  at(underWater(Equipment),Time),
   			  Initiates)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',135).

 /*  reactive_rule([underWater(Diver)],
   	      [ initiates(lose(Diver,Equipment),
   			  at(underWater(Equipment),Time),
   			  Initiates)
   	      ]).
 */


% [diver,equipment,time]
% !HoldsAt(UnderWater(diver),time) ->
% Terminates(Lose(diver,equipment),UnderWater(equipment),time).

 /*  pl=axiom(terminates(lose(Diver,Equipment),
   		 underWater(Equipment),
   		 Time),
         [not(underWater(Diver))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',139).

 /*  not(underWater(Diver)) ->
       terminates(lose(Diver, Equipment),
                  underWater(Equipment),
                  Time).
 */
if not underWater(Diver)then terminates(lose(Diver, Equipment), underWater(Equipment)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',139).

 /*  reactive_rule([not(underWater(Diver))],
   	      [ terminates(lose(Diver,Equipment),
   			   at(underWater(Equipment),Time),
   			   Terminates)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',139).

 /*  reactive_rule([not(underWater(Diver))],
   	      [ terminates(lose(Diver,Equipment),
   			   at(underWater(Equipment),Time),
   			   Terminates)
   	      ]).
 */

% fluent Holding(diver,object)
 %  blue=fluent(holding(diver,object)).
 %  fluent(holding(diver,object)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',141).
fluents([holding/2]).
 %  fluents([holding/2]).
mpred_prop(holding(diver,object),fluent).
 %  mpred_prop(holding(diver,object),fluent).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',144).
% [diver1,diver2,time]
% HoldsAt(Holding(diver1,diver2),time) ->
% !HoldsAt(Holding(diver2,diver1),time).
 %  clausify_pnf=(holds_at(holding(Diver1, Diver2), Time)->holds_at(neg(holding(Diver2, Diver1)), Time)).

 /*  holds_at(neg(holding(Diver2, Diver1)), Time) :-
       holds_at(holding(Diver1, Diver2), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',144).

 /*  fix_axiom_head(Time) ->
       [ holds_at(neg(holding(Diver2, Diver1)), Time),
          (->),
         not(holding(Diver2, Diver1))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',144).

 /*  pl=axiom(not(holding(Diver2,Diver1)),
         [holding(Diver1,Diver2)]).
 */

 /*  holding(Diver1, Diver2) ->
       not(holding(Diver2, Diver1)).
 */
if holding(Diver1, Diver2)then not holding(Diver2, Diver1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',144).

 /*  reactive_rule([holding(Diver1,Diver2)],
   	      [not(holding(Diver2,Diver1))]).
 */

 /*  reactive_rule([holding(Diver1,Diver2)],
   	      [not(holding(Diver2,Diver1))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',144).

 /*  not(holds_at(holding(Diver1, Diver2), Time)) :-
       not(holds_at(neg(holding(Diver2, Diver1)), Time)).
 */

 /*  pl=axiom(not(holding(Diver1,Diver2)),
         [not(not(holding(Diver2,Diver1)))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',144).

 /*  not(not(holding(Diver2, Diver1))) ->
       not(holding(Diver1, Diver2)).
 */
if not not holding(Diver2, Diver1)then not holding(Diver1, Diver2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',144).

 /*  reactive_rule([not(not(holding(Diver2,Diver1)))],
   	      [not(holding(Diver1,Diver2))]).
 */

 /*  reactive_rule([not(not(holding(Diver2,Diver1)))],
   	      [not(holding(Diver1,Diver2))]).
 */

% event Grab(diver,object)
 %  blue=event(grab(diver,object)).
 %  event(grab(diver,object)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',147).
events([grab/2]).
 %  events([grab/2]).
mpred_prop(grab(diver,object),event).
 %  mpred_prop(grab(diver,object),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',150).
% event LetGoOf(diver,object)
 %  blue=event(letGoOf(diver,object)).
 %  event(letGoOf(diver,object)).
events([letGoOf/2]).
 %  events([letGoOf/2]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',150).
mpred_prop(letGoOf(diver,object),event).
 %  mpred_prop(letGoOf(diver,object),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',152).
% [diver,object,time]
% Initiates(Grab(diver,object),Holding(diver,object),time).

 /*  pl=axiom(initiates(grab(Diver,Object),
   		holding(Diver,Object),
   		Time),
         []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',152).

 /*  initiates(grab(Diver,Object),
   	  holding(Diver,Object),
   	  Time).
 */
grab(Diver, Object)initiates holding(Diver, Object).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',152).

 /*  initiated(happens(grab(Diver,Object),
   		  Time_From,
   		  Time_Until),
   	  holding(Diver,Object),
   	  []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',152).

 /*  initiated(happens(grab(Diver,Object),
   		  Time_From,
   		  Time_Until),
   	  holding(Diver,Object),
   	  []).
 */


% [diver,object,time]
% Terminates(LetGoOf(diver,object),Holding(diver,object),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',156).

 /*  pl=axiom(terminates(letGoOf(Diver,Object),
   		 holding(Diver,Object),
   		 Time),
         []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',156).

 /*  terminates(letGoOf(Diver,Object),
   	   holding(Diver,Object),
   	   Time).
 */
letGoOf(Diver, Object)terminates holding(Diver, Object).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',156).

 /*  terminated(happens(letGoOf(Diver,Object),
   		   Time_From,
   		   Time_Until),
   	   holding(Diver,Object),
   	   []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',156).

 /*  terminated(happens(letGoOf(Diver,Object),
   		   Time_From,
   		   Time_Until),
   	   holding(Diver,Object),
   	   []).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',158).
% [diver,object,depth,time]
% Releases(Grab(diver,object),AtDepth(object,depth),time).

 /*  pl=axiom(releases(grab(Diver,Object),
   	       atDepth(Object,Depth),
   	       Time),
         []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',158).
releases(grab(Diver,Object),
	 atDepth(Object,Depth),
	 Time).

 /*  releases(grab(Diver,Object),
   	 atDepth(Object,Depth),
   	 Time).
 */


% [diver,object,time]
% Releases(Grab(diver,object),UnderWater(object),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',162).

 /*  pl=axiom(releases(grab(Diver,Object),
   	       underWater(Object),
   	       Time),
         []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',162).
releases(grab(Diver,Object),
	 underWater(Object),
	 Time).

 /*  releases(grab(Diver,Object),
   	 underWater(Object),
   	 Time).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',164).
% [diver,object,depth,time]
% HoldsAt(AtDepth(diver,depth),time) &
% HoldsAt(Holding(diver,object),time) ->
% Initiates(LetGoOf(diver,object),AtDepth(object,depth),time).

 /*  pl=axiom(initiates(letGoOf(Diver,Object),
   		atDepth(Object,Depth),
   		Time),
         [ atDepth(Diver,Depth),
   	holding(Diver,Object)
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',164).

 /*  (   atDepth(Diver, Depth),
       holding(Diver, Object)
   ->  initiates(letGoOf(Diver, Object),
                 atDepth(Object, Depth),
                 Time)
   ).
 */
if atDepth(Diver, Depth), holding(Diver, Object)then initiates(letGoOf(Diver, Object), atDepth(Object, Depth)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',164).

 /*  reactive_rule([ holds(atDepth(Diver,Depth),Holds),
   		holds(holding(Diver,Object),Holds)
   	      ],
   	      [ initiates(letGoOf(Diver,Object),
   			  at(atDepth(Object,Depth),
   			     Time),
   			  Initiates)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',164).

 /*  reactive_rule([ holds(atDepth(Diver,Depth),Holds),
   		holds(holding(Diver,Object),Holds)
   	      ],
   	      [ initiates(letGoOf(Diver,Object),
   			  at(atDepth(Object,Depth),
   			     Time),
   			  Initiates)
   	      ]).
 */


% [diver,object,depth,time]
% !HoldsAt(AtDepth(diver,depth),time) &
% HoldsAt(Holding(diver,object),time) ->
% Terminates(LetGoOf(diver,object),AtDepth(object,depth),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',170).

 /*  pl=axiom(terminates(letGoOf(Diver,Object),
   		 atDepth(Object,Depth),
   		 Time),
         [ not(atDepth(Diver,Depth)),
   	holding(Diver,Object)
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',170).

 /*  (   not(atDepth(Diver, Depth)),
       holding(Diver, Object)
   ->  terminates(letGoOf(Diver, Object),
                  atDepth(Object, Depth),
                  Time)
   ).
 */
if not atDepth(Diver, Depth), holding(Diver, Object)then terminates(letGoOf(Diver, Object), atDepth(Object, Depth)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',170).

 /*  reactive_rule([ holds(not(atDepth(Diver,Depth)),
   		      Holds),
   		holds(holding(Diver,Object),Holds)
   	      ],
   	      [ terminates(letGoOf(Diver,Object),
   			   at(atDepth(Object,Depth),
   			      Time),
   			   Terminates)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',170).

 /*  reactive_rule([ holds(not(atDepth(Diver,Depth)),
   		      Holds),
   		holds(holding(Diver,Object),Holds)
   	      ],
   	      [ terminates(letGoOf(Diver,Object),
   			   at(atDepth(Object,Depth),
   			      Time),
   			   Terminates)
   	      ]).
 */


% [diver,object,time]
% HoldsAt(UnderWater(diver),time) ->
% Initiates(LetGoOf(diver,object),UnderWater(object),time).

 /*  pl=axiom(initiates(letGoOf(Diver,Object),
   		underWater(Object),
   		Time),
         [underWater(Diver)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',175).

 /*  underWater(Diver) ->
       initiates(letGoOf(Diver, Object),
                 underWater(Object),
                 Time).
 */
if underWater(Diver)then initiates(letGoOf(Diver, Object), underWater(Object)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',175).

 /*  reactive_rule([underWater(Diver)],
   	      [ initiates(letGoOf(Diver,Object),
   			  at(underWater(Object),Time),
   			  Initiates)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',175).

 /*  reactive_rule([underWater(Diver)],
   	      [ initiates(letGoOf(Diver,Object),
   			  at(underWater(Object),Time),
   			  Initiates)
   	      ]).
 */


% [diver,object,time]
% !HoldsAt(UnderWater(diver),time) ->
% Terminates(LetGoOf(diver,object),UnderWater(object),time).

 /*  pl=axiom(terminates(letGoOf(Diver,Object),
   		 underWater(Object),
   		 Time),
         [not(underWater(Diver))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',179).

 /*  not(underWater(Diver)) ->
       terminates(letGoOf(Diver, Object),
                  underWater(Object),
                  Time).
 */
if not underWater(Diver)then terminates(letGoOf(Diver, Object), underWater(Object)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',179).

 /*  reactive_rule([not(underWater(Diver))],
   	      [ terminates(letGoOf(Diver,Object),
   			   at(underWater(Object),Time),
   			   Terminates)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',179).

 /*  reactive_rule([not(underWater(Diver))],
   	      [ terminates(letGoOf(Diver,Object),
   			   at(underWater(Object),Time),
   			   Terminates)
   	      ]).
 */


% [diver,equipment,time]
% Initiates(PutOn(diver,equipment),Wearing(diver,equipment),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',183).

 /*  pl=axiom(initiates(putOn(Diver,Equipment),
   		wearing(Diver,Equipment),
   		Time),
         []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',183).

 /*  initiates(putOn(Diver,Equipment),
   	  wearing(Diver,Equipment),
   	  Time).
 */
putOn(Diver, Equipment)initiates wearing(Diver, Equipment).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',183).

 /*  initiated(happens(putOn(Diver,Equipment),
   		  Time_From,
   		  Time_Until),
   	  wearing(Diver,Equipment),
   	  []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',183).

 /*  initiated(happens(putOn(Diver,Equipment),
   		  Time_From,
   		  Time_Until),
   	  wearing(Diver,Equipment),
   	  []).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',185).
% [diver,equipment,time]
% Happens(PutOn(diver,equipment),time) ->
% !HoldsAt(UnderWater(diver),time).
 %  clausify_pnf=(happens(putOn(Diver, Equipment), Time)->holds_at(neg(underWater(Diver)), Time)).

 /*  holds_at(neg(underWater(Diver)), Time) :-
       happens(putOn(Diver, Equipment), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',185).

 /*  pl=axiom(requires(putOn(Diver,Equipment),When_Time),
         [metreqs(putOn(Diver,Equipment))]).
 */

 /*  metreqs(putOn(Diver, Equipment)) ->
       requires(putOn(Diver, Equipment), When_Time).
 */
if metreqs(putOn(Diver, Equipment))then requires(putOn(Diver, Equipment), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',185).

 /*  reactive_rule([metreqs(putOn(Diver,Equipment))],
   	      [ requires(putOn(Diver,Equipment),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',185).

 /*  reactive_rule([metreqs(putOn(Diver,Equipment))],
   	      [ requires(putOn(Diver,Equipment),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',185).

 /*  fix_axiom_head(When_Time) ->
       [ holds_at(metreqs(putOn(Diver, Equipment)), When_Time),
          (->),
         metreqs(putOn(Diver, Equipment))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',185).

 /*  pl=axiom(metreqs(putOn(Diver,Equipment)),
         [not(underWater(Diver))]).
 */

 /*  not(underWater(Diver)) ->
       metreqs(putOn(Diver, Equipment)).
 */
if not underWater(Diver)then metreqs(putOn(Diver, Equipment)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',185).

 /*  reactive_rule([not(underWater(Diver))],
   	      [metreqs(putOn(Diver,Equipment))]).
 */

 /*  reactive_rule([not(underWater(Diver))],
   	      [metreqs(putOn(Diver,Equipment))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',185).

 /*  not(happens(putOn(Diver, Equipment), When_Time)) :-
       not(holds_at(neg(underWater(Diver)), When_Time)).
 */

 /*  fix_axiom_head(When_Time) ->
       [ not(happens(putOn(Diver, Equipment), When_Time)),
          (->),
         not(putOn(Diver, Equipment))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',185).

 /*  pl=axiom(not(putOn(Diver,Equipment)),
         [not(not(underWater(Diver)))]).
 */

 /*  not(not(underWater(Diver))) ->
       not(putOn(Diver, Equipment)).
 */
if not not underWater(Diver)then not putOn(Diver, Equipment).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',185).

 /*  reactive_rule([not(not(underWater(Diver)))],
   	      [not(putOn(Diver,Equipment))]).
 */

 /*  reactive_rule([not(not(underWater(Diver)))],
   	      [not(putOn(Diver,Equipment))]).
 */


% [diver,equipment,time]
% Terminates(TakeOff(diver,equipment),Wearing(diver,equipment),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',190).

 /*  pl=axiom(terminates(takeOff(Diver,Equipment),
   		 wearing(Diver,Equipment),
   		 Time),
         []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',190).

 /*  terminates(takeOff(Diver,Equipment),
   	   wearing(Diver,Equipment),
   	   Time).
 */
takeOff(Diver, Equipment)terminates wearing(Diver, Equipment).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',190).

 /*  terminated(happens(takeOff(Diver,Equipment),
   		   Time_From,
   		   Time_Until),
   	   wearing(Diver,Equipment),
   	   []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',190).

 /*  terminated(happens(takeOff(Diver,Equipment),
   		   Time_From,
   		   Time_Until),
   	   wearing(Diver,Equipment),
   	   []).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',192).
% [diver,equipment,time]
% Terminates(Lose(diver,equipment),Wearing(diver,equipment),time).

 /*  pl=axiom(terminates(lose(Diver,Equipment),
   		 wearing(Diver,Equipment),
   		 Time),
         []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',192).

 /*  terminates(lose(Diver,Equipment),
   	   wearing(Diver,Equipment),
   	   Time).
 */
lose(Diver, Equipment)terminates wearing(Diver, Equipment).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',192).

 /*  terminated(happens(lose(Diver,Equipment),
   		   Time_From,
   		   Time_Until),
   	   wearing(Diver,Equipment),
   	   []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',192).

 /*  terminated(happens(lose(Diver,Equipment),
   		   Time_From,
   		   Time_Until),
   	   wearing(Diver,Equipment),
   	   []).
 */

% fluent Vertical(diver)
 %  blue=fluent(vertical(diver)).
 %  fluent(vertical(diver)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',194).
fluents([vertical/1]).
 %  fluents([vertical/1]).
mpred_prop(vertical(diver),fluent).
 %  mpred_prop(vertical(diver),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',197).
% fluent HorizontalDown(diver)
 %  blue=fluent(horizontalDown(diver)).
 %  fluent(horizontalDown(diver)).
fluents([horizontalDown/1]).
 %  fluents([horizontalDown/1]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',197).
mpred_prop(horizontalDown(diver),fluent).
 %  mpred_prop(horizontalDown(diver),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',199).
% fluent Inverted(diver)
 %  blue=fluent(inverted(diver)).
 %  fluent(inverted(diver)).
fluents([inverted/1]).
 %  fluents([inverted/1]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',199).
mpred_prop(inverted(diver),fluent).
 %  mpred_prop(inverted(diver),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',201).
% fluent HorizontalUp(diver)
 %  blue=fluent(horizontalUp(diver)).
 %  fluent(horizontalUp(diver)).
fluents([horizontalUp/1]).
 %  fluents([horizontalUp/1]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',201).
mpred_prop(horizontalUp(diver),fluent).
 %  mpred_prop(horizontalUp(diver),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',203).
% xor Vertical, HorizontalDown, Inverted, HorizontalUp
 %  red = ==>xor[vertical,horizontalDown,inverted,horizontalUp].
==>xor[vertical,horizontalDown,inverted,horizontalUp].
 %  ==>xor[vertical,horizontalDown,inverted,horizontalUp].

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',205).
% event RotatePitch(diver)
 %  blue=event(rotatePitch(diver)).
 %  event(rotatePitch(diver)).
events([rotatePitch/1]).
 %  events([rotatePitch/1]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',205).
mpred_prop(rotatePitch(diver),event).
 %  mpred_prop(rotatePitch(diver),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',207).
% [diver,time]
% HoldsAt(Vertical(diver),time) ->
% Initiates(RotatePitch(diver),HorizontalDown(diver),time).

 /*  pl=axiom(initiates(rotatePitch(Diver),
   		horizontalDown(Diver),
   		Time),
         [vertical(Diver)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',207).

 /*  vertical(Diver) ->
       initiates(rotatePitch(Diver), horizontalDown(Diver), Time).
 */
if vertical(Diver)then initiates(rotatePitch(Diver), horizontalDown(Diver)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',207).

 /*  reactive_rule([vertical(Diver)],
   	      [ initiates(rotatePitch(Diver),
   			  at(horizontalDown(Diver),Time),
   			  Initiates)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',207).

 /*  reactive_rule([vertical(Diver)],
   	      [ initiates(rotatePitch(Diver),
   			  at(horizontalDown(Diver),Time),
   			  Initiates)
   	      ]).
 */


% [diver,time]
% HoldsAt(HorizontalDown(diver),time) ->
% Initiates(RotatePitch(diver),Inverted(diver),time).

 /*  pl=axiom(initiates(rotatePitch(Diver),
   		inverted(Diver),
   		Time),
         [horizontalDown(Diver)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',212).

 /*  horizontalDown(Diver) ->
       initiates(rotatePitch(Diver), inverted(Diver), Time).
 */
if horizontalDown(Diver)then initiates(rotatePitch(Diver), inverted(Diver)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',212).

 /*  reactive_rule([horizontalDown(Diver)],
   	      [ initiates(rotatePitch(Diver),
   			  at(inverted(Diver),Time),
   			  Initiates)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',212).

 /*  reactive_rule([horizontalDown(Diver)],
   	      [ initiates(rotatePitch(Diver),
   			  at(inverted(Diver),Time),
   			  Initiates)
   	      ]).
 */


% [diver,time]
% HoldsAt(HorizontalDown(diver),time) ->
% Terminates(RotatePitch(diver),HorizontalDown(diver),time).

 /*  pl=axiom(terminates(rotatePitch(Diver),
   		 horizontalDown(Diver),
   		 Time),
         [horizontalDown(Diver)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',216).

 /*  horizontalDown(Diver) ->
       terminates(rotatePitch(Diver),
                  horizontalDown(Diver),
                  Time).
 */
if horizontalDown(Diver)then terminates(rotatePitch(Diver), horizontalDown(Diver)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',216).

 /*  reactive_rule([horizontalDown(Diver)],
   	      [ terminates(rotatePitch(Diver),
   			   at(horizontalDown(Diver),Time),
   			   Terminates)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',216).

 /*  reactive_rule([horizontalDown(Diver)],
   	      [ terminates(rotatePitch(Diver),
   			   at(horizontalDown(Diver),Time),
   			   Terminates)
   	      ]).
 */


% [diver,time]
% HoldsAt(Inverted(diver),time) ->
% Initiates(RotatePitch(diver),HorizontalUp(diver),time).

 /*  pl=axiom(initiates(rotatePitch(Diver),
   		horizontalUp(Diver),
   		Time),
         [inverted(Diver)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',220).

 /*  inverted(Diver) ->
       initiates(rotatePitch(Diver), horizontalUp(Diver), Time).
 */
if inverted(Diver)then initiates(rotatePitch(Diver), horizontalUp(Diver)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',220).

 /*  reactive_rule([inverted(Diver)],
   	      [ initiates(rotatePitch(Diver),
   			  at(horizontalUp(Diver),Time),
   			  Initiates)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',220).

 /*  reactive_rule([inverted(Diver)],
   	      [ initiates(rotatePitch(Diver),
   			  at(horizontalUp(Diver),Time),
   			  Initiates)
   	      ]).
 */


% [diver,time]
% HoldsAt(Inverted(diver),time) ->
% Terminates(RotatePitch(diver),Inverted(diver),time).

 /*  pl=axiom(terminates(rotatePitch(Diver),
   		 inverted(Diver),
   		 Time),
         [inverted(Diver)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',224).

 /*  inverted(Diver) ->
       terminates(rotatePitch(Diver), inverted(Diver), Time).
 */
if inverted(Diver)then terminates(rotatePitch(Diver), inverted(Diver)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',224).

 /*  reactive_rule([inverted(Diver)],
   	      [ terminates(rotatePitch(Diver),
   			   at(inverted(Diver),Time),
   			   Terminates)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',224).

 /*  reactive_rule([inverted(Diver)],
   	      [ terminates(rotatePitch(Diver),
   			   at(inverted(Diver),Time),
   			   Terminates)
   	      ]).
 */


% [diver,time]
% HoldsAt(HorizontalUp(diver),time) ->
% Initiates(RotatePitch(diver),Vertical(diver),time).

 /*  pl=axiom(initiates(rotatePitch(Diver),
   		vertical(Diver),
   		Time),
         [horizontalUp(Diver)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',228).

 /*  horizontalUp(Diver) ->
       initiates(rotatePitch(Diver), vertical(Diver), Time).
 */
if horizontalUp(Diver)then initiates(rotatePitch(Diver), vertical(Diver)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',228).

 /*  reactive_rule([horizontalUp(Diver)],
   	      [ initiates(rotatePitch(Diver),
   			  at(vertical(Diver),Time),
   			  Initiates)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',228).

 /*  reactive_rule([horizontalUp(Diver)],
   	      [ initiates(rotatePitch(Diver),
   			  at(vertical(Diver),Time),
   			  Initiates)
   	      ]).
 */


% [diver,time]
% HoldsAt(HorizontalUp(diver),time) ->
% Terminates(RotatePitch(diver),HorizontalUp(diver),time).

 /*  pl=axiom(terminates(rotatePitch(Diver),
   		 horizontalUp(Diver),
   		 Time),
         [horizontalUp(Diver)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',232).

 /*  horizontalUp(Diver) ->
       terminates(rotatePitch(Diver), horizontalUp(Diver), Time).
 */
if horizontalUp(Diver)then terminates(rotatePitch(Diver), horizontalUp(Diver)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',232).

 /*  reactive_rule([horizontalUp(Diver)],
   	      [ terminates(rotatePitch(Diver),
   			   at(horizontalUp(Diver),Time),
   			   Terminates)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',232).

 /*  reactive_rule([horizontalUp(Diver)],
   	      [ terminates(rotatePitch(Diver),
   			   at(horizontalUp(Diver),Time),
   			   Terminates)
   	      ]).
 */

% event RotateYaw(diver)
 %  blue=event(rotateYaw(diver)).
 %  event(rotateYaw(diver)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',234).
events([rotateYaw/1]).
 %  events([rotateYaw/1]).
mpred_prop(rotateYaw(diver),event).
 %  mpred_prop(rotateYaw(diver),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',237).
%; try taking out Holding condition here
% [diver,time]
% Happens(Ascend1(diver),time) &
% !Happens(RapidAscendToSurface(diver),time) &
% !({diver1} HoldsAt(Holding(diver,diver1),time)) ->
% Happens(RotateYaw(diver),time).
 %  clausify_pnf=(happens(ascend1(Diver), Time), not(happens(rapidAscendToSurface(Diver), Time)), not(exists([Diver1], holds_at(holding(Diver, Diver1), Time)))->happens(rotateYaw(Diver), Time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',239).

 /*  happens(rotateYaw(Diver), Time) :-
       happens(ascend1(Diver), Time),
       not(happens(rapidAscendToSurface(Diver), Time)),
       not(holds_at(holding(Diver, Diver1), Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',239).

 /*  fix_axiom_head(Time) ->
       [happens(rotateYaw(Diver), Time), ->, rotateYaw(Diver)].
 */

 /*  pl=axiom(rotateYaw(Diver),
         [ ascend1(Diver),
   	not(rapidAscendToSurface(Diver)),
   	not(holding(Diver,Diver1))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',239).

 /*  (   ascend1(Diver),
       not(rapidAscendToSurface(Diver)),
       not(holding(Diver, Diver1))
   ->  rotateYaw(Diver)
   ).
 */
if ascend1(Diver), not rapidAscendToSurface(Diver), not holding(Diver, Diver1)then rotateYaw(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',239).

 /*  reactive_rule([ ascend1(Diver),
   		not(rapidAscendToSurface(Diver)),
   		holds(not(holding(Diver,Diver1)),
   		      Holds)
   	      ],
   	      [rotateYaw(Diver)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',239).

 /*  reactive_rule([ ascend1(Diver),
   		not(rapidAscendToSurface(Diver)),
   		holds(not(holding(Diver,Diver1)),
   		      Holds)
   	      ],
   	      [rotateYaw(Diver)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',239).

 /*  not(happens(ascend1(Diver), Time)) :-
       not(happens(rapidAscendToSurface(Diver), Time)),
       not(holds_at(holding(Diver, Diver1), Time)),
       not(happens(rotateYaw(Diver), Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',239).

 /*  fix_axiom_head(Time) ->
       [ not(happens(ascend1(Diver), Time)),
          (->),
         not(ascend1(Diver))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',239).

 /*  pl=axiom(not(ascend1(Diver)),
         [ not(rapidAscendToSurface(Diver)),
   	not(holding(Diver,Diver1)),
   	not(rotateYaw(Diver))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',239).

 /*  (   not(rapidAscendToSurface(Diver)),
       not(holding(Diver, Diver1)),
       not(rotateYaw(Diver))
   ->  not(ascend1(Diver))
   ).
 */
if not rapidAscendToSurface(Diver), not holding(Diver, Diver1), not rotateYaw(Diver)then not ascend1(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',239).

 /*  reactive_rule([ not(rapidAscendToSurface(Diver)),
   		holds(not(holding(Diver,Diver1)),
   		      Holds4),
   		not(rotateYaw(Diver))
   	      ],
   	      [not(ascend1(Diver))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',239).

 /*  reactive_rule([ not(rapidAscendToSurface(Diver)),
   		holds(not(holding(Diver,Diver1)),
   		      Holds4),
   		not(rotateYaw(Diver))
   	      ],
   	      [not(ascend1(Diver))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',239).

 /*  happens(rapidAscendToSurface(Diver), Time) :-
       not(holds_at(holding(Diver, Diver1), Time)),
       happens(ascend1(Diver), Time),
       not(happens(rotateYaw(Diver), Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',239).

 /*  fix_axiom_head(Time) ->
       [ happens(rapidAscendToSurface(Diver), Time),
          (->),
         rapidAscendToSurface(Diver)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',239).

 /*  pl=axiom(rapidAscendToSurface(Diver),
         [ not(holding(Diver,Diver1)),
   	ascend1(Diver),
   	not(rotateYaw(Diver))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',239).

 /*  (   not(holding(Diver, Diver1)),
       ascend1(Diver),
       not(rotateYaw(Diver))
   ->  rapidAscendToSurface(Diver)
   ).
 */
if not holding(Diver, Diver1), ascend1(Diver), not rotateYaw(Diver)then rapidAscendToSurface(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',239).

 /*  reactive_rule([ holds(not(holding(Diver,Diver1)),
   		      Holds5),
   		ascend1(Diver),
   		not(rotateYaw(Diver))
   	      ],
   	      [rapidAscendToSurface(Diver)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',239).

 /*  reactive_rule([ holds(not(holding(Diver,Diver1)),
   		      Holds5),
   		ascend1(Diver),
   		not(rotateYaw(Diver))
   	      ],
   	      [rapidAscendToSurface(Diver)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',239).

 /*  holds_at(holding(Diver, Diver1), Time) :-
       not(happens(rapidAscendToSurface(Diver), Time)),
       happens(ascend1(Diver), Time),
       not(happens(rotateYaw(Diver), Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',239).

 /*  fix_axiom_head(Time) ->
       [ holds_at(holding(Diver, Diver1), Time),
          (->),
         holding(Diver, Diver1)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',239).

 /*  pl=axiom(holding(Diver,Diver1),
         [ not(rapidAscendToSurface(Diver)),
   	ascend1(Diver),
   	not(rotateYaw(Diver))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',239).

 /*  (   not(rapidAscendToSurface(Diver)),
       ascend1(Diver),
       not(rotateYaw(Diver))
   ->  holding(Diver, Diver1)
   ).
 */
if not rapidAscendToSurface(Diver), ascend1(Diver), not rotateYaw(Diver)then holding(Diver, Diver1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',239).

 /*  reactive_rule([ not(rapidAscendToSurface(Diver)),
   		ascend1(Diver),
   		not(rotateYaw(Diver))
   	      ],
   	      [holds(holding(Diver,Diver1),Holds6)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',239).

 /*  reactive_rule([ not(rapidAscendToSurface(Diver)),
   		ascend1(Diver),
   		not(rotateYaw(Diver))
   	      ],
   	      [holds(holding(Diver,Diver1),Holds6)]).
 */

% fluent UnderWater(object)
 %  blue=fluent(underWater(object)).
 %  fluent(underWater(object)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',243).
fluents([underWater/1]).
 %  fluents([underWater/1]).
mpred_prop(underWater(object),fluent).
 %  mpred_prop(underWater(object),fluent).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',246).
% [object,depth,time]
% depth>% 0 &
% HoldsAt(AtDepth(object,depth),time) ->
% HoldsAt(UnderWater(object),time).
 %  clausify_pnf=(Depth>0, holds_at(atDepth(Object, Depth), Time)->holds_at(underWater(Object), Time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',246).

 /*  holds_at(underWater(Object), Time) :-
       comparison(Depth, 0, >),
       holds_at(atDepth(Object, Depth), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',246).

 /*  fix_axiom_head(Time) ->
       [ holds_at(underWater(Object), Time),
          (->),
         underWater(Object)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',246).

 /*  pl=axiom(underWater(Object),
         [comparison(Depth,0,>),atDepth(Object,Depth)]).
 */

 /*  (   comparison(Depth, 0, >),
       atDepth(Object, Depth)
   ->  underWater(Object)
   ).
 */
if comparison(Depth, 0, >), atDepth(Object, Depth)then underWater(Object).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',246).

 /*  reactive_rule([ comparison(Depth,0,>),
   		holds(atDepth(Object,Depth),Holds)
   	      ],
   	      [underWater(Object)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',246).

 /*  reactive_rule([ comparison(Depth,0,>),
   		holds(atDepth(Object,Depth),Holds)
   	      ],
   	      [underWater(Object)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',246).

 /*  not(holds_at(atDepth(Object, Depth), Time)) :-
       comparison(Depth, 0, >),
       not(holds_at(underWater(Object), Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',246).

 /*  pl=axiom(not(atDepth(Object,Depth)),
         [comparison(Depth,0,>),not(underWater(Object))]).
 */

 /*  (   comparison(Depth, 0, >),
       not(underWater(Object))
   ->  not(atDepth(Object, Depth))
   ).
 */
if comparison(Depth, 0, >), not underWater(Object)then not atDepth(Object, Depth).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',246).

 /*  reactive_rule([ comparison(Depth,0,>),
   		not(underWater(Object))
   	      ],
   	      [ holds(not(atDepth(Object,Depth)),
   		      Holds4)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',246).

 /*  reactive_rule([ comparison(Depth,0,>),
   		not(underWater(Object))
   	      ],
   	      [ holds(not(atDepth(Object,Depth)),
   		      Holds4)
   	      ]).
 */

% event EnterWater(object)
 %  blue=event(enterWater(object)).
 %  event(enterWater(object)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',250).
events([enterWater/1]).
 %  events([enterWater/1]).
mpred_prop(enterWater(object),event).
 %  mpred_prop(enterWater(object),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',253).
% event Surface(object)
 %  blue=event(surface(object)).
 %  event(surface(object)).
events([surface/1]).
 %  events([surface/1]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',253).
mpred_prop(surface(object),event).
 %  mpred_prop(surface(object),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',255).
% [object,time]
% Initiates(EnterWater(object),UnderWater(object),time).

 /*  pl=axiom(initiates(enterWater(Object),
   		underWater(Object),
   		Time),
         []).
 */
 %  initiates(enterWater(Object),underWater(Object),Time).
enterWater(Object)initiates underWater(Object).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',255).

 /*  initiated(happens(enterWater(Object),
   		  Time_From,
   		  Time_Until),
   	  underWater(Object),
   	  []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',255).

 /*  initiated(happens(enterWater(Object),
   		  Time_From,
   		  Time_Until),
   	  underWater(Object),
   	  []).
 */


% [diver,time]
% Happens(EnterWater(diver),time) ->
% !{diver1} HoldsAt(Holding(diver1,diver),time).
 %  clausify_pnf=(happens(enterWater(Diver), Time)->not(exists([Diver1], holds_at(holding(Diver1, Diver), Time)))).

 /*  not(holds_at(holding(Diver1, Diver), Time)) :-
       happens(enterWater(Diver), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',259).

 /*  pl=axiom(requires(enterWater(Diver),When_Time),
         [metreqs(enterWater(Diver))]).
 */

 /*  metreqs(enterWater(Diver)) ->
       requires(enterWater(Diver), When_Time).
 */
if metreqs(enterWater(Diver))then requires(enterWater(Diver), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',259).

 /*  reactive_rule([metreqs(enterWater(Diver))],
   	      [requires(enterWater(Diver),When_Time)]).
 */

 /*  reactive_rule([metreqs(enterWater(Diver))],
   	      [requires(enterWater(Diver),When_Time)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',259).

 /*  fix_axiom_head(When_Time) ->
       [ holds_at(metreqs(enterWater(Diver)), When_Time),
          (->),
         metreqs(enterWater(Diver))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',259).

 /*  pl=axiom(metreqs(enterWater(Diver)),
         [not(holding(Diver1,Diver))]).
 */

 /*  not(holding(Diver1, Diver)) ->
       metreqs(enterWater(Diver)).
 */
if not holding(Diver1, Diver)then metreqs(enterWater(Diver)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',259).

 /*  reactive_rule([ holds(not(holding(Diver1,Diver)),
   		      Holds)
   	      ],
   	      [metreqs(enterWater(Diver))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',259).

 /*  reactive_rule([ holds(not(holding(Diver1,Diver)),
   		      Holds)
   	      ],
   	      [metreqs(enterWater(Diver))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',259).

 /*  not(happens(enterWater(Diver), When_Time)) :-
       holds_at(holding(Diver1, Diver), When_Time).
 */

 /*  fix_axiom_head(When_Time) ->
       [ not(happens(enterWater(Diver), When_Time)),
          (->),
         not(enterWater(Diver))
       ].
 */
 %  pl=axiom(not(enterWater(Diver)),[holding(Diver1,Diver)]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',259).

 /*  holding(Diver1, Diver) ->
       not(enterWater(Diver)).
 */
if holding(Diver1, Diver)then not enterWater(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',259).

 /*  reactive_rule([holds(holding(Diver1,Diver),Holds5)],
   	      [not(enterWater(Diver))]).
 */

 /*  reactive_rule([holds(holding(Diver1,Diver),Holds5)],
   	      [not(enterWater(Diver))]).
 */


% [object,depth,time]
% depth=% 0 ->
% Initiates(EnterWater(object),AtDepth(object,depth),time).

 /*  pl=axiom(initiates(enterWater(Object),
   		atDepth(Object,Depth),
   		Time),
         [equals(Depth,0)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',263).

 /*  equals(Depth, 0) ->
       initiates(enterWater(Object),
                 atDepth(Object, Depth),
                 Time).
 */
if equals(0, Depth)then initiates(enterWater(Object), atDepth(Object, Depth)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',263).

 /*  reactive_rule([equals(0,Depth)],
   	      [ initiates(enterWater(Object),
   			  at(atDepth(Object,Depth),
   			     Time),
   			  Initiates)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',263).

 /*  reactive_rule([equals(0,Depth)],
   	      [ initiates(enterWater(Object),
   			  at(atDepth(Object,Depth),
   			     Time),
   			  Initiates)
   	      ]).
 */


% [object,time]
% Terminates(Surface(object),UnderWater(object),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',267).

 /*  pl=axiom(terminates(surface(Object),
   		 underWater(Object),
   		 Time),
         []).
 */
 %  terminates(surface(Object),underWater(Object),Time).
surface(Object)terminates underWater(Object).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',267).

 /*  terminated(happens(surface(Object),
   		   Time_From,
   		   Time_Until),
   	   underWater(Object),
   	   []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',267).

 /*  terminated(happens(surface(Object),
   		   Time_From,
   		   Time_Until),
   	   underWater(Object),
   	   []).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',269).
% [diver,time]
% Terminates(Surface(diver),PositivelyBuoyant(diver),time).

 /*  pl=axiom(terminates(surface(Diver),
   		 positivelyBuoyant(Diver),
   		 Time),
         []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',269).

 /*  terminates(surface(Diver),
   	   positivelyBuoyant(Diver),
   	   Time).
 */
surface(Diver)terminates positivelyBuoyant(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',269).

 /*  terminated(happens(surface(Diver),
   		   Time_From,
   		   Time_Until),
   	   positivelyBuoyant(Diver),
   	   []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',269).

 /*  terminated(happens(surface(Diver),
   		   Time_From,
   		   Time_Until),
   	   positivelyBuoyant(Diver),
   	   []).
 */


% [diver,time]
% Terminates(Surface(diver),NegativelyBuoyant(diver),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',273).

 /*  pl=axiom(terminates(surface(Diver),
   		 negativelyBuoyant(Diver),
   		 Time),
         []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',273).

 /*  terminates(surface(Diver),
   	   negativelyBuoyant(Diver),
   	   Time).
 */
surface(Diver)terminates negativelyBuoyant(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',273).

 /*  terminated(happens(surface(Diver),
   		   Time_From,
   		   Time_Until),
   	   negativelyBuoyant(Diver),
   	   []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',273).

 /*  terminated(happens(surface(Diver),
   		   Time_From,
   		   Time_Until),
   	   negativelyBuoyant(Diver),
   	   []).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',275).
% [diver,time]
% Terminates(Surface(diver),NeutrallyBuoyant(diver),time).

 /*  pl=axiom(terminates(surface(Diver),
   		 neutrallyBuoyant(Diver),
   		 Time),
         []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',275).

 /*  terminates(surface(Diver),
   	   neutrallyBuoyant(Diver),
   	   Time).
 */
surface(Diver)terminates neutrallyBuoyant(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',275).

 /*  terminated(happens(surface(Diver),
   		   Time_From,
   		   Time_Until),
   	   neutrallyBuoyant(Diver),
   	   []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',275).

 /*  terminated(happens(surface(Diver),
   		   Time_From,
   		   Time_Until),
   	   neutrallyBuoyant(Diver),
   	   []).
 */


% [object,depth,time]
% Terminates(Surface(object),AtDepth(object,depth),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',279).

 /*  pl=axiom(terminates(surface(Object),
   		 atDepth(Object,Depth),
   		 Time),
         []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',279).

 /*  terminates(surface(Object),
   	   atDepth(Object,Depth),
   	   Time).
 */
surface(Object)terminates atDepth(Object, Depth).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',279).

 /*  terminated(happens(surface(Object),
   		   Time_From,
   		   Time_Until),
   	   atDepth(Object,Depth),
   	   []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',279).

 /*  terminated(happens(surface(Object),
   		   Time_From,
   		   Time_Until),
   	   atDepth(Object,Depth),
   	   []).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',281).
% [diver,time]
 % Happens(EnterWater(diver),time) ->
% HoldsAt(Vertical(diver),time).
 %  clausify_pnf=(happens(enterWater(Diver), Time)->holds_at(vertical(Diver), Time)).

 /*  holds_at(vertical(Diver), Time) :-
       happens(enterWater(Diver), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',281).

 /*  pl=axiom(requires(enterWater(Diver),When_Time),
         [metreqs(enterWater(Diver))]).
 */

 /*  metreqs(enterWater(Diver)) ->
       requires(enterWater(Diver), When_Time).
 */
if metreqs(enterWater(Diver))then requires(enterWater(Diver), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',281).

 /*  reactive_rule([metreqs(enterWater(Diver))],
   	      [requires(enterWater(Diver),When_Time)]).
 */

 /*  reactive_rule([metreqs(enterWater(Diver))],
   	      [requires(enterWater(Diver),When_Time)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',281).

 /*  fix_axiom_head(When_Time) ->
       [ holds_at(metreqs(enterWater(Diver)), When_Time),
          (->),
         metreqs(enterWater(Diver))
       ].
 */
 %  pl=axiom(metreqs(enterWater(Diver)),[vertical(Diver)]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',281).

 /*  vertical(Diver) ->
       metreqs(enterWater(Diver)).
 */
if vertical(Diver)then metreqs(enterWater(Diver)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',281).

 /*  reactive_rule([vertical(Diver)],
   	      [metreqs(enterWater(Diver))]).
 */

 /*  reactive_rule([vertical(Diver)],
   	      [metreqs(enterWater(Diver))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',281).

 /*  not(happens(enterWater(Diver), When_Time)) :-
       not(holds_at(vertical(Diver), When_Time)).
 */

 /*  fix_axiom_head(When_Time) ->
       [ not(happens(enterWater(Diver), When_Time)),
          (->),
         not(enterWater(Diver))
       ].
 */
 %  pl=axiom(not(enterWater(Diver)),[not(vertical(Diver))]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',281).

 /*  not(vertical(Diver)) ->
       not(enterWater(Diver)).
 */
if not vertical(Diver)then not enterWater(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',281).

 /*  reactive_rule([not(vertical(Diver))],
   	      [not(enterWater(Diver))]).
 */

 /*  reactive_rule([not(vertical(Diver))],
   	      [not(enterWater(Diver))]).
 */

% fluent StandingOn(diver,boat)
 %  blue=fluent(standingOn(diver,boat)).
 %  fluent(standingOn(diver,boat)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',283).
fluents([standingOn/2]).
 %  fluents([standingOn/2]).
mpred_prop(standingOn(diver,boat),fluent).
 %  mpred_prop(standingOn(diver,boat),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',286).
% event StandOn(diver,boat)
 %  blue=event(standOn(diver,boat)).
 %  event(standOn(diver,boat)).
events([standOn/2]).
 %  events([standOn/2]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',286).
mpred_prop(standOn(diver,boat),event).
 %  mpred_prop(standOn(diver,boat),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',288).
% [diver,boat,time]
% Terminates(EnterWater(diver),StandingOn(diver,boat),time).

 /*  pl=axiom(terminates(enterWater(Diver),
   		 standingOn(Diver,Boat),
   		 Time),
         []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',288).

 /*  terminates(enterWater(Diver),
   	   standingOn(Diver,Boat),
   	   Time).
 */
enterWater(Diver)terminates standingOn(Diver, Boat).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',288).

 /*  terminated(happens(enterWater(Diver),
   		   Time_From,
   		   Time_Until),
   	   standingOn(Diver,Boat),
   	   []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',288).

 /*  terminated(happens(enterWater(Diver),
   		   Time_From,
   		   Time_Until),
   	   standingOn(Diver,Boat),
   	   []).
 */


% [diver,boat,time]
% Initiates(StandOn(diver,boat),StandingOn(diver,boat),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',292).

 /*  pl=axiom(initiates(standOn(Diver,Boat),
   		standingOn(Diver,Boat),
   		Time),
         []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',292).

 /*  initiates(standOn(Diver,Boat),
   	  standingOn(Diver,Boat),
   	  Time).
 */
standOn(Diver, Boat)initiates standingOn(Diver, Boat).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',292).

 /*  initiated(happens(standOn(Diver,Boat),
   		  Time_From,
   		  Time_Until),
   	  standingOn(Diver,Boat),
   	  []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',292).

 /*  initiated(happens(standOn(Diver,Boat),
   		  Time_From,
   		  Time_Until),
   	  standingOn(Diver,Boat),
   	  []).
 */

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',294).
% fluent PositivelyBuoyant(diver)
 %  blue=fluent(positivelyBuoyant(diver)).
 %  fluent(positivelyBuoyant(diver)).
fluents([positivelyBuoyant/1]).
 %  fluents([positivelyBuoyant/1]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',294).
mpred_prop(positivelyBuoyant(diver),fluent).
 %  mpred_prop(positivelyBuoyant(diver),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',296).
% fluent NeutrallyBuoyant(diver)
 %  blue=fluent(neutrallyBuoyant(diver)).
 %  fluent(neutrallyBuoyant(diver)).
fluents([neutrallyBuoyant/1]).
 %  fluents([neutrallyBuoyant/1]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',296).
mpred_prop(neutrallyBuoyant(diver),fluent).
 %  mpred_prop(neutrallyBuoyant(diver),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',298).
% fluent NegativelyBuoyant(diver)
 %  blue=fluent(negativelyBuoyant(diver)).
 %  fluent(negativelyBuoyant(diver)).
fluents([negativelyBuoyant/1]).
 %  fluents([negativelyBuoyant/1]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',298).
mpred_prop(negativelyBuoyant(diver),fluent).
 %  mpred_prop(negativelyBuoyant(diver),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',300).
% mutex PositivelyBuoyant, NeutrallyBuoyant, NegativelyBuoyant
 %  pl=axiom(mutex(positivelyBuoyant),[]).
mutex(positivelyBuoyant).
 %  mutex(positivelyBuoyant).
 %  pl=axiom(mutex(neutrallyBuoyant),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',300).
mutex(neutrallyBuoyant).
 %  mutex(neutrallyBuoyant).
 %  pl=axiom(mutex(negativelyBuoyant),[]).
mutex(negativelyBuoyant).
 %  mutex(negativelyBuoyant).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',302).
% [diver,time]
% HoldsAt(PositivelyBuoyant(diver),time) ->
% HoldsAt(UnderWater(diver),time).
 %  clausify_pnf=(holds_at(positivelyBuoyant(Diver), Time)->holds_at(underWater(Diver), Time)).

 /*  holds_at(underWater(Diver), Time) :-
       holds_at(positivelyBuoyant(Diver), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',302).

 /*  fix_axiom_head(Time) ->
       [holds_at(underWater(Diver), Time), ->, underWater(Diver)].
 */
 %  pl=axiom(underWater(Diver),[positivelyBuoyant(Diver)]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',302).

 /*  positivelyBuoyant(Diver) ->
       underWater(Diver).
 */
if positivelyBuoyant(Diver)then underWater(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',302).

 /*  reactive_rule([holds(positivelyBuoyant(Diver),Holds)],
   	      [holds(underWater(Diver),Holds3)]).
 */

 /*  reactive_rule([holds(positivelyBuoyant(Diver),Holds)],
   	      [holds(underWater(Diver),Holds3)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',302).

 /*  not(holds_at(positivelyBuoyant(Diver), Time)) :-
       not(holds_at(underWater(Diver), Time)).
 */

 /*  pl=axiom(not(positivelyBuoyant(Diver)),
         [not(underWater(Diver))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',302).

 /*  not(underWater(Diver)) ->
       not(positivelyBuoyant(Diver)).
 */
if not underWater(Diver)then not positivelyBuoyant(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',302).

 /*  reactive_rule([holds(not(underWater(Diver)),Holds4)],
   	      [holds(not(positivelyBuoyant(Diver)),Holds5)]).
 */

 /*  reactive_rule([holds(not(underWater(Diver)),Holds4)],
   	      [holds(not(positivelyBuoyant(Diver)),Holds5)]).
 */


% [diver,time]
% HoldsAt(NeutrallyBuoyant(diver),time) ->
% HoldsAt(UnderWater(diver),time).
 %  clausify_pnf=(holds_at(neutrallyBuoyant(Diver), Time)->holds_at(underWater(Diver), Time)).

 /*  holds_at(underWater(Diver), Time) :-
       holds_at(neutrallyBuoyant(Diver), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',307).

 /*  fix_axiom_head(Time) ->
       [holds_at(underWater(Diver), Time), ->, underWater(Diver)].
 */
 %  pl=axiom(underWater(Diver),[neutrallyBuoyant(Diver)]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',307).

 /*  neutrallyBuoyant(Diver) ->
       underWater(Diver).
 */
if neutrallyBuoyant(Diver)then underWater(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',307).

 /*  reactive_rule([holds(neutrallyBuoyant(Diver),Holds)],
   	      [holds(underWater(Diver),Holds3)]).
 */

 /*  reactive_rule([holds(neutrallyBuoyant(Diver),Holds)],
   	      [holds(underWater(Diver),Holds3)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',307).

 /*  not(holds_at(neutrallyBuoyant(Diver), Time)) :-
       not(holds_at(underWater(Diver), Time)).
 */

 /*  pl=axiom(not(neutrallyBuoyant(Diver)),
         [not(underWater(Diver))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',307).

 /*  not(underWater(Diver)) ->
       not(neutrallyBuoyant(Diver)).
 */
if not underWater(Diver)then not neutrallyBuoyant(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',307).

 /*  reactive_rule([holds(not(underWater(Diver)),Holds4)],
   	      [holds(not(neutrallyBuoyant(Diver)),Holds5)]).
 */

 /*  reactive_rule([holds(not(underWater(Diver)),Holds4)],
   	      [holds(not(neutrallyBuoyant(Diver)),Holds5)]).
 */


% [diver,time]
% HoldsAt(NegativelyBuoyant(diver),time) ->
% HoldsAt(UnderWater(diver),time).
 %  clausify_pnf=(holds_at(negativelyBuoyant(Diver), Time)->holds_at(underWater(Diver), Time)).

 /*  holds_at(underWater(Diver), Time) :-
       holds_at(negativelyBuoyant(Diver), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',311).

 /*  fix_axiom_head(Time) ->
       [holds_at(underWater(Diver), Time), ->, underWater(Diver)].
 */
 %  pl=axiom(underWater(Diver),[negativelyBuoyant(Diver)]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',311).

 /*  negativelyBuoyant(Diver) ->
       underWater(Diver).
 */
if negativelyBuoyant(Diver)then underWater(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',311).

 /*  reactive_rule([holds(negativelyBuoyant(Diver),Holds)],
   	      [holds(underWater(Diver),Holds3)]).
 */

 /*  reactive_rule([holds(negativelyBuoyant(Diver),Holds)],
   	      [holds(underWater(Diver),Holds3)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',311).

 /*  not(holds_at(negativelyBuoyant(Diver), Time)) :-
       not(holds_at(underWater(Diver), Time)).
 */

 /*  pl=axiom(not(negativelyBuoyant(Diver)),
         [not(underWater(Diver))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',311).

 /*  not(underWater(Diver)) ->
       not(negativelyBuoyant(Diver)).
 */
if not underWater(Diver)then not negativelyBuoyant(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',311).

 /*  reactive_rule([holds(not(underWater(Diver)),Holds4)],
   	      [holds(not(negativelyBuoyant(Diver)),Holds5)]).
 */

 /*  reactive_rule([holds(not(underWater(Diver)),Holds4)],
   	      [holds(not(negativelyBuoyant(Diver)),Holds5)]).
 */

% event PressDeflateButton(diver,bc)
 %  blue=event(pressDeflateButton(diver,bc)).
 %  event(pressDeflateButton(diver,bc)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',313).
events([pressDeflateButton/2]).
 %  events([pressDeflateButton/2]).
mpred_prop(pressDeflateButton(diver,bc),event).
 %  mpred_prop(pressDeflateButton(diver,bc),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',316).
% event PressDumpButton(diver,bc)
 %  blue=event(pressDumpButton(diver,bc)).
 %  event(pressDumpButton(diver,bc)).
events([pressDumpButton/2]).
 %  events([pressDumpButton/2]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',316).
mpred_prop(pressDumpButton(diver,bc),event).
 %  mpred_prop(pressDumpButton(diver,bc),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',318).
% event PressInflateButton(diver,bc)
 %  blue=event(pressInflateButton(diver,bc)).
 %  event(pressInflateButton(diver,bc)).
events([pressInflateButton/2]).
 %  events([pressInflateButton/2]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',318).
mpred_prop(pressInflateButton(diver,bc),event).
 %  mpred_prop(pressInflateButton(diver,bc),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',320).
% [diver,bc,time]
% Happens(PressDeflateButton(diver,bc),time) ->
% HoldsAt(Vertical(diver),time) &
% HoldsAt(UnderWater(bc),time).
 %  clausify_pnf=(happens(pressDeflateButton(Diver, Bc), Time)->holds_at(vertical(Diver), Time), holds_at(underWater(Bc), Time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',320).

 /*  not(happens(pressDeflateButton(Diver, Bc), Time)) :-
       (   not(holds_at(vertical(Diver), Time))
       ;   not(holds_at(underWater(Bc), Time))
       ).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',320).

 /*  fix_axiom_head(Time) ->
       [ not(happens(pressDeflateButton(Diver, Bc), Time)),
          (->),
         not(pressDeflateButton(Diver, Bc))
       ].
 */
 %   pl=axiom(not(pressDeflateButton(Diver, Bc)), [(not(vertical(Diver));not(underWater(Bc)))]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',320).

 /*  not(vertical(Diver));not(underWater(Bc)) ->
       not(pressDeflateButton(Diver, Bc)).
 */
if not vertical(Diver);not underWater(Bc)then not pressDeflateButton(Diver, Bc).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',320).

 /*   reactive_rule([(not(vertical(Diver));not(underWater(Bc)))],
                    [not(pressDeflateButton(Diver, Bc))]).
 */

 /*   reactive_rule([(not(vertical(Diver));not(underWater(Bc)))],
                    [not(pressDeflateButton(Diver, Bc))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',320).

 /*  holds_at(vertical(Diver), Time) :-
       happens(pressDeflateButton(Diver, Bc), Time).
 */

 /*  pl=axiom(requires(pressDeflateButton(Diver,Bc),
   	       When_Time),
         [metreqs(pressDeflateButton(Diver,Bc))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',320).

 /*  metreqs(pressDeflateButton(Diver, Bc)) ->
       requires(pressDeflateButton(Diver, Bc), When_Time).
 */
if metreqs(pressDeflateButton(Diver, Bc))then requires(pressDeflateButton(Diver, Bc), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',320).

 /*  reactive_rule([metreqs(pressDeflateButton(Diver,Bc))],
   	      [ requires(pressDeflateButton(Diver,Bc),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',320).

 /*  reactive_rule([metreqs(pressDeflateButton(Diver,Bc))],
   	      [ requires(pressDeflateButton(Diver,Bc),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',320).

 /*  fix_axiom_head(When_Time) ->
       [ holds_at(metreqs(pressDeflateButton(Diver, Bc)),
                  When_Time),
          (->),
         metreqs(pressDeflateButton(Diver, Bc))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',320).

 /*  pl=axiom(metreqs(pressDeflateButton(Diver,Bc)),
         [vertical(Diver)]).
 */

 /*  vertical(Diver) ->
       metreqs(pressDeflateButton(Diver, Bc)).
 */
if vertical(Diver)then metreqs(pressDeflateButton(Diver, Bc)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',320).

 /*  reactive_rule([vertical(Diver)],
   	      [metreqs(pressDeflateButton(Diver,Bc))]).
 */

 /*  reactive_rule([vertical(Diver)],
   	      [metreqs(pressDeflateButton(Diver,Bc))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',320).

 /*  holds_at(underWater(Bc), When_Time) :-
       happens(pressDeflateButton(Diver, Bc), When_Time).
 */

 /*  pl=axiom(requires(pressDeflateButton(Diver,Bc),
   	       When_Time),
         [metreqs(pressDeflateButton(Diver,Bc))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',320).

 /*  metreqs(pressDeflateButton(Diver, Bc)) ->
       requires(pressDeflateButton(Diver, Bc), When_Time).
 */
if metreqs(pressDeflateButton(Diver, Bc))then requires(pressDeflateButton(Diver, Bc), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',320).

 /*  reactive_rule([metreqs(pressDeflateButton(Diver,Bc))],
   	      [ requires(pressDeflateButton(Diver,Bc),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',320).

 /*  reactive_rule([metreqs(pressDeflateButton(Diver,Bc))],
   	      [ requires(pressDeflateButton(Diver,Bc),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',320).

 /*  fix_axiom_head(When_Time) ->
       [ holds_at(metreqs(pressDeflateButton(Diver, Bc)),
                  When_Time),
          (->),
         metreqs(pressDeflateButton(Diver, Bc))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',320).

 /*  pl=axiom(metreqs(pressDeflateButton(Diver,Bc)),
         [underWater(Bc)]).
 */

 /*  underWater(Bc) ->
       metreqs(pressDeflateButton(Diver, Bc)).
 */
if underWater(Bc)then metreqs(pressDeflateButton(Diver, Bc)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',320).

 /*  reactive_rule([holds(underWater(Bc),Holds)],
   	      [metreqs(pressDeflateButton(Diver,Bc))]).
 */

 /*  reactive_rule([holds(underWater(Bc),Holds)],
   	      [metreqs(pressDeflateButton(Diver,Bc))]).
 */


% [diver,bc,time]
% Happens(PressDumpButton(diver,bc),time) ->
% HoldsAt(Vertical(diver),time) &
% HoldsAt(UnderWater(bc),time).
 %  clausify_pnf=(happens(pressDumpButton(Diver, Bc), Time)->holds_at(vertical(Diver), Time), holds_at(underWater(Bc), Time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',326).

 /*  not(happens(pressDumpButton(Diver, Bc), Time)) :-
       (   not(holds_at(vertical(Diver), Time))
       ;   not(holds_at(underWater(Bc), Time))
       ).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',326).

 /*  fix_axiom_head(Time) ->
       [ not(happens(pressDumpButton(Diver, Bc), Time)),
          (->),
         not(pressDumpButton(Diver, Bc))
       ].
 */
 %   pl=axiom(not(pressDumpButton(Diver, Bc)), [(not(vertical(Diver));not(underWater(Bc)))]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',326).

 /*  not(vertical(Diver));not(underWater(Bc)) ->
       not(pressDumpButton(Diver, Bc)).
 */
if not vertical(Diver);not underWater(Bc)then not pressDumpButton(Diver, Bc).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',326).

 /*   reactive_rule([(not(vertical(Diver));not(underWater(Bc)))],
                    [not(pressDumpButton(Diver, Bc))]).
 */

 /*   reactive_rule([(not(vertical(Diver));not(underWater(Bc)))],
                    [not(pressDumpButton(Diver, Bc))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',326).

 /*  holds_at(vertical(Diver), Time) :-
       happens(pressDumpButton(Diver, Bc), Time).
 */

 /*  pl=axiom(requires(pressDumpButton(Diver,Bc),When_Time),
         [metreqs(pressDumpButton(Diver,Bc))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',326).

 /*  metreqs(pressDumpButton(Diver, Bc)) ->
       requires(pressDumpButton(Diver, Bc), When_Time).
 */
if metreqs(pressDumpButton(Diver, Bc))then requires(pressDumpButton(Diver, Bc), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',326).

 /*  reactive_rule([metreqs(pressDumpButton(Diver,Bc))],
   	      [ requires(pressDumpButton(Diver,Bc),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',326).

 /*  reactive_rule([metreqs(pressDumpButton(Diver,Bc))],
   	      [ requires(pressDumpButton(Diver,Bc),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',326).

 /*  fix_axiom_head(When_Time) ->
       [ holds_at(metreqs(pressDumpButton(Diver, Bc)), When_Time),
          (->),
         metreqs(pressDumpButton(Diver, Bc))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',326).

 /*  pl=axiom(metreqs(pressDumpButton(Diver,Bc)),
         [vertical(Diver)]).
 */

 /*  vertical(Diver) ->
       metreqs(pressDumpButton(Diver, Bc)).
 */
if vertical(Diver)then metreqs(pressDumpButton(Diver, Bc)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',326).

 /*  reactive_rule([vertical(Diver)],
   	      [metreqs(pressDumpButton(Diver,Bc))]).
 */

 /*  reactive_rule([vertical(Diver)],
   	      [metreqs(pressDumpButton(Diver,Bc))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',326).

 /*  holds_at(underWater(Bc), When_Time) :-
       happens(pressDumpButton(Diver, Bc), When_Time).
 */

 /*  pl=axiom(requires(pressDumpButton(Diver,Bc),When_Time),
         [metreqs(pressDumpButton(Diver,Bc))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',326).

 /*  metreqs(pressDumpButton(Diver, Bc)) ->
       requires(pressDumpButton(Diver, Bc), When_Time).
 */
if metreqs(pressDumpButton(Diver, Bc))then requires(pressDumpButton(Diver, Bc), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',326).

 /*  reactive_rule([metreqs(pressDumpButton(Diver,Bc))],
   	      [ requires(pressDumpButton(Diver,Bc),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',326).

 /*  reactive_rule([metreqs(pressDumpButton(Diver,Bc))],
   	      [ requires(pressDumpButton(Diver,Bc),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',326).

 /*  fix_axiom_head(When_Time) ->
       [ holds_at(metreqs(pressDumpButton(Diver, Bc)), When_Time),
          (->),
         metreqs(pressDumpButton(Diver, Bc))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',326).

 /*  pl=axiom(metreqs(pressDumpButton(Diver,Bc)),
         [underWater(Bc)]).
 */

 /*  underWater(Bc) ->
       metreqs(pressDumpButton(Diver, Bc)).
 */
if underWater(Bc)then metreqs(pressDumpButton(Diver, Bc)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',326).

 /*  reactive_rule([holds(underWater(Bc),Holds)],
   	      [metreqs(pressDumpButton(Diver,Bc))]).
 */

 /*  reactive_rule([holds(underWater(Bc),Holds)],
   	      [metreqs(pressDumpButton(Diver,Bc))]).
 */


% [diver,bc,time]
 % Happens(PressDumpButton(diver,bc),time) ->
% HoldsAt(UncontrolledBuoyancy(diver),time).
 %  clausify_pnf=(happens(pressDumpButton(Diver, Bc), Time)->holds_at(uncontrolledBuoyancy(Diver), Time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',329).

 /*  holds_at(uncontrolledBuoyancy(Diver), Time) :-
       happens(pressDumpButton(Diver, Bc), Time).
 */

 /*  pl=axiom(requires(pressDumpButton(Diver,Bc),When_Time),
         [metreqs(pressDumpButton(Diver,Bc))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',329).

 /*  metreqs(pressDumpButton(Diver, Bc)) ->
       requires(pressDumpButton(Diver, Bc), When_Time).
 */
if metreqs(pressDumpButton(Diver, Bc))then requires(pressDumpButton(Diver, Bc), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',329).

 /*  reactive_rule([metreqs(pressDumpButton(Diver,Bc))],
   	      [ requires(pressDumpButton(Diver,Bc),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',329).

 /*  reactive_rule([metreqs(pressDumpButton(Diver,Bc))],
   	      [ requires(pressDumpButton(Diver,Bc),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',329).

 /*  fix_axiom_head(When_Time) ->
       [ holds_at(metreqs(pressDumpButton(Diver, Bc)), When_Time),
          (->),
         metreqs(pressDumpButton(Diver, Bc))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',329).

 /*  pl=axiom(metreqs(pressDumpButton(Diver,Bc)),
         [uncontrolledBuoyancy(Diver)]).
 */

 /*  uncontrolledBuoyancy(Diver) ->
       metreqs(pressDumpButton(Diver, Bc)).
 */
if uncontrolledBuoyancy(Diver)then metreqs(pressDumpButton(Diver, Bc)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',329).

 /*  reactive_rule([uncontrolledBuoyancy(Diver)],
   	      [metreqs(pressDumpButton(Diver,Bc))]).
 */

 /*  reactive_rule([uncontrolledBuoyancy(Diver)],
   	      [metreqs(pressDumpButton(Diver,Bc))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',329).

 /*  not(happens(pressDumpButton(Diver, Bc), When_Time)) :-
       not(holds_at(uncontrolledBuoyancy(Diver), When_Time)).
 */

 /*  fix_axiom_head(When_Time) ->
       [ not(happens(pressDumpButton(Diver, Bc), When_Time)),
          (->),
         not(pressDumpButton(Diver, Bc))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',329).

 /*  pl=axiom(not(pressDumpButton(Diver,Bc)),
         [not(uncontrolledBuoyancy(Diver))]).
 */

 /*  not(uncontrolledBuoyancy(Diver)) ->
       not(pressDumpButton(Diver, Bc)).
 */
if not uncontrolledBuoyancy(Diver)then not pressDumpButton(Diver, Bc).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',329).

 /*  reactive_rule([not(uncontrolledBuoyancy(Diver))],
   	      [not(pressDumpButton(Diver,Bc))]).
 */

 /*  reactive_rule([not(uncontrolledBuoyancy(Diver))],
   	      [not(pressDumpButton(Diver,Bc))]).
 */


% [diver,bc,time]
% HoldsAt(Wearing(diver,bc),time) ->
% Initiates(PressDeflateButton(diver,bc),NegativelyBuoyant(diver),time).

 /*  pl=axiom(initiates(pressDeflateButton(Diver,Bc),
   		negativelyBuoyant(Diver),
   		Time),
         [wearing(Diver,Bc)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',334).

 /*  wearing(Diver, Bc) ->
       initiates(pressDeflateButton(Diver, Bc),
                 negativelyBuoyant(Diver),
                 Time).
 */
if wearing(Diver, Bc)then initiates(pressDeflateButton(Diver, Bc), negativelyBuoyant(Diver)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',334).

 /*  reactive_rule([holds(wearing(Diver,Bc),Holds)],
   	      [ initiates(pressDeflateButton(Diver,Bc),
   			  at(negativelyBuoyant(Diver),Time),
   			  Initiates)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',334).

 /*  reactive_rule([holds(wearing(Diver,Bc),Holds)],
   	      [ initiates(pressDeflateButton(Diver,Bc),
   			  at(negativelyBuoyant(Diver),Time),
   			  Initiates)
   	      ]).
 */


% [diver,bc,time]
% HoldsAt(Wearing(diver,bc),time) ->
% Terminates(PressDeflateButton(diver,bc),NeutrallyBuoyant(diver),time).

 /*  pl=axiom(terminates(pressDeflateButton(Diver,Bc),
   		 neutrallyBuoyant(Diver),
   		 Time),
         [wearing(Diver,Bc)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',338).

 /*  wearing(Diver, Bc) ->
       terminates(pressDeflateButton(Diver, Bc),
                  neutrallyBuoyant(Diver),
                  Time).
 */
if wearing(Diver, Bc)then terminates(pressDeflateButton(Diver, Bc), neutrallyBuoyant(Diver)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',338).

 /*  reactive_rule([holds(wearing(Diver,Bc),Holds)],
   	      [ terminates(pressDeflateButton(Diver,Bc),
   			   at(neutrallyBuoyant(Diver),Time),
   			   Terminates)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',338).

 /*  reactive_rule([holds(wearing(Diver,Bc),Holds)],
   	      [ terminates(pressDeflateButton(Diver,Bc),
   			   at(neutrallyBuoyant(Diver),Time),
   			   Terminates)
   	      ]).
 */


% [diver,bc,time]
% HoldsAt(Wearing(diver,bc),time) ->
% Terminates(PressDeflateButton(diver,bc),PositivelyBuoyant(diver),time).

 /*  pl=axiom(terminates(pressDeflateButton(Diver,Bc),
   		 positivelyBuoyant(Diver),
   		 Time),
         [wearing(Diver,Bc)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',342).

 /*  wearing(Diver, Bc) ->
       terminates(pressDeflateButton(Diver, Bc),
                  positivelyBuoyant(Diver),
                  Time).
 */
if wearing(Diver, Bc)then terminates(pressDeflateButton(Diver, Bc), positivelyBuoyant(Diver)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',342).

 /*  reactive_rule([holds(wearing(Diver,Bc),Holds)],
   	      [ terminates(pressDeflateButton(Diver,Bc),
   			   at(positivelyBuoyant(Diver),
   			      Time),
   			   Terminates)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',342).

 /*  reactive_rule([holds(wearing(Diver,Bc),Holds)],
   	      [ terminates(pressDeflateButton(Diver,Bc),
   			   at(positivelyBuoyant(Diver),
   			      Time),
   			   Terminates)
   	      ]).
 */


% [diver,bc,time]
% HoldsAt(Wearing(diver,bc),time) ->
% Initiates(PressDumpButton(diver,bc),NegativelyBuoyant(diver),time).

 /*  pl=axiom(initiates(pressDumpButton(Diver,Bc),
   		negativelyBuoyant(Diver),
   		Time),
         [wearing(Diver,Bc)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',346).

 /*  wearing(Diver, Bc) ->
       initiates(pressDumpButton(Diver, Bc),
                 negativelyBuoyant(Diver),
                 Time).
 */
if wearing(Diver, Bc)then initiates(pressDumpButton(Diver, Bc), negativelyBuoyant(Diver)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',346).

 /*  reactive_rule([holds(wearing(Diver,Bc),Holds)],
   	      [ initiates(pressDumpButton(Diver,Bc),
   			  at(negativelyBuoyant(Diver),Time),
   			  Initiates)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',346).

 /*  reactive_rule([holds(wearing(Diver,Bc),Holds)],
   	      [ initiates(pressDumpButton(Diver,Bc),
   			  at(negativelyBuoyant(Diver),Time),
   			  Initiates)
   	      ]).
 */


% [diver,bc,time]
% HoldsAt(Wearing(diver,bc),time) ->
% Terminates(PressDumpButton(diver,bc),NeutrallyBuoyant(diver),time).

 /*  pl=axiom(terminates(pressDumpButton(Diver,Bc),
   		 neutrallyBuoyant(Diver),
   		 Time),
         [wearing(Diver,Bc)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',350).

 /*  wearing(Diver, Bc) ->
       terminates(pressDumpButton(Diver, Bc),
                  neutrallyBuoyant(Diver),
                  Time).
 */
if wearing(Diver, Bc)then terminates(pressDumpButton(Diver, Bc), neutrallyBuoyant(Diver)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',350).

 /*  reactive_rule([holds(wearing(Diver,Bc),Holds)],
   	      [ terminates(pressDumpButton(Diver,Bc),
   			   at(neutrallyBuoyant(Diver),Time),
   			   Terminates)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',350).

 /*  reactive_rule([holds(wearing(Diver,Bc),Holds)],
   	      [ terminates(pressDumpButton(Diver,Bc),
   			   at(neutrallyBuoyant(Diver),Time),
   			   Terminates)
   	      ]).
 */


% [diver,bc,time]
% HoldsAt(Wearing(diver,bc),time) ->
% Terminates(PressDumpButton(diver,bc),PositivelyBuoyant(diver),time).

 /*  pl=axiom(terminates(pressDumpButton(Diver,Bc),
   		 positivelyBuoyant(Diver),
   		 Time),
         [wearing(Diver,Bc)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',354).

 /*  wearing(Diver, Bc) ->
       terminates(pressDumpButton(Diver, Bc),
                  positivelyBuoyant(Diver),
                  Time).
 */
if wearing(Diver, Bc)then terminates(pressDumpButton(Diver, Bc), positivelyBuoyant(Diver)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',354).

 /*  reactive_rule([holds(wearing(Diver,Bc),Holds)],
   	      [ terminates(pressDumpButton(Diver,Bc),
   			   at(positivelyBuoyant(Diver),
   			      Time),
   			   Terminates)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',354).

 /*  reactive_rule([holds(wearing(Diver,Bc),Holds)],
   	      [ terminates(pressDumpButton(Diver,Bc),
   			   at(positivelyBuoyant(Diver),
   			      Time),
   			   Terminates)
   	      ]).
 */


% [diver,bc,time]
% HoldsAt(Wearing(diver,bc),time) ->
% Initiates(PressInflateButton(diver,bc),NeutrallyBuoyant(diver),time).

 /*  pl=axiom(initiates(pressInflateButton(Diver,Bc),
   		neutrallyBuoyant(Diver),
   		Time),
         [wearing(Diver,Bc)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',358).

 /*  wearing(Diver, Bc) ->
       initiates(pressInflateButton(Diver, Bc),
                 neutrallyBuoyant(Diver),
                 Time).
 */
if wearing(Diver, Bc)then initiates(pressInflateButton(Diver, Bc), neutrallyBuoyant(Diver)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',358).

 /*  reactive_rule([holds(wearing(Diver,Bc),Holds)],
   	      [ initiates(pressInflateButton(Diver,Bc),
   			  at(neutrallyBuoyant(Diver),Time),
   			  Initiates)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',358).

 /*  reactive_rule([holds(wearing(Diver,Bc),Holds)],
   	      [ initiates(pressInflateButton(Diver,Bc),
   			  at(neutrallyBuoyant(Diver),Time),
   			  Initiates)
   	      ]).
 */


% [diver,bc,time]
% HoldsAt(Wearing(diver,bc),time) ->
% Terminates(PressInflateButton(diver,bc),PositivelyBuoyant(diver),time).

 /*  pl=axiom(terminates(pressInflateButton(Diver,Bc),
   		 positivelyBuoyant(Diver),
   		 Time),
         [wearing(Diver,Bc)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',362).

 /*  wearing(Diver, Bc) ->
       terminates(pressInflateButton(Diver, Bc),
                  positivelyBuoyant(Diver),
                  Time).
 */
if wearing(Diver, Bc)then terminates(pressInflateButton(Diver, Bc), positivelyBuoyant(Diver)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',362).

 /*  reactive_rule([holds(wearing(Diver,Bc),Holds)],
   	      [ terminates(pressInflateButton(Diver,Bc),
   			   at(positivelyBuoyant(Diver),
   			      Time),
   			   Terminates)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',362).

 /*  reactive_rule([holds(wearing(Diver,Bc),Holds)],
   	      [ terminates(pressInflateButton(Diver,Bc),
   			   at(positivelyBuoyant(Diver),
   			      Time),
   			   Terminates)
   	      ]).
 */


% [diver,bc,time]
% HoldsAt(Wearing(diver,bc),time) ->
% Terminates(PressInflateButton(diver,bc),NegativelyBuoyant(diver),time).

 /*  pl=axiom(terminates(pressInflateButton(Diver,Bc),
   		 negativelyBuoyant(Diver),
   		 Time),
         [wearing(Diver,Bc)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',366).

 /*  wearing(Diver, Bc) ->
       terminates(pressInflateButton(Diver, Bc),
                  negativelyBuoyant(Diver),
                  Time).
 */
if wearing(Diver, Bc)then terminates(pressInflateButton(Diver, Bc), negativelyBuoyant(Diver)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',366).

 /*  reactive_rule([holds(wearing(Diver,Bc),Holds)],
   	      [ terminates(pressInflateButton(Diver,Bc),
   			   at(negativelyBuoyant(Diver),
   			      Time),
   			   Terminates)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',366).

 /*  reactive_rule([holds(wearing(Diver,Bc),Holds)],
   	      [ terminates(pressInflateButton(Diver,Bc),
   			   at(negativelyBuoyant(Diver),
   			      Time),
   			   Terminates)
   	      ]).
 */


% [diver,weight,time]
% HoldsAt(Wearing(diver,weight),time) ->
% Initiates(TakeOff(diver,weight),PositivelyBuoyant(diver),time).

 /*  pl=axiom(initiates(takeOff(Diver,Weight),
   		positivelyBuoyant(Diver),
   		Time),
         [wearing(Diver,Weight)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',370).

 /*  wearing(Diver, Weight) ->
       initiates(takeOff(Diver, Weight),
                 positivelyBuoyant(Diver),
                 Time).
 */
if wearing(Diver, Weight)then initiates(takeOff(Diver, Weight), positivelyBuoyant(Diver)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',370).

 /*  reactive_rule([holds(wearing(Diver,Weight),Holds)],
   	      [ initiates(takeOff(Diver,Weight),
   			  at(positivelyBuoyant(Diver),Time),
   			  Initiates)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',370).

 /*  reactive_rule([holds(wearing(Diver,Weight),Holds)],
   	      [ initiates(takeOff(Diver,Weight),
   			  at(positivelyBuoyant(Diver),Time),
   			  Initiates)
   	      ]).
 */


% [diver,weight,time]
% HoldsAt(Wearing(diver,weight),time) ->
% Terminates(TakeOff(diver,weight),NegativelyBuoyant(diver),time).

 /*  pl=axiom(terminates(takeOff(Diver,Weight),
   		 negativelyBuoyant(Diver),
   		 Time),
         [wearing(Diver,Weight)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',374).

 /*  wearing(Diver, Weight) ->
       terminates(takeOff(Diver, Weight),
                  negativelyBuoyant(Diver),
                  Time).
 */
if wearing(Diver, Weight)then terminates(takeOff(Diver, Weight), negativelyBuoyant(Diver)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',374).

 /*  reactive_rule([holds(wearing(Diver,Weight),Holds)],
   	      [ terminates(takeOff(Diver,Weight),
   			   at(negativelyBuoyant(Diver),
   			      Time),
   			   Terminates)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',374).

 /*  reactive_rule([holds(wearing(Diver,Weight),Holds)],
   	      [ terminates(takeOff(Diver,Weight),
   			   at(negativelyBuoyant(Diver),
   			      Time),
   			   Terminates)
   	      ]).
 */


% [diver,weight,time]
% HoldsAt(Wearing(diver,weight),time) ->
% Terminates(TakeOff(diver,weight),NeutrallyBuoyant(diver),time).

 /*  pl=axiom(terminates(takeOff(Diver,Weight),
   		 neutrallyBuoyant(Diver),
   		 Time),
         [wearing(Diver,Weight)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',378).

 /*  wearing(Diver, Weight) ->
       terminates(takeOff(Diver, Weight),
                  neutrallyBuoyant(Diver),
                  Time).
 */
if wearing(Diver, Weight)then terminates(takeOff(Diver, Weight), neutrallyBuoyant(Diver)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',378).

 /*  reactive_rule([holds(wearing(Diver,Weight),Holds)],
   	      [ terminates(takeOff(Diver,Weight),
   			   at(neutrallyBuoyant(Diver),Time),
   			   Terminates)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',378).

 /*  reactive_rule([holds(wearing(Diver,Weight),Holds)],
   	      [ terminates(takeOff(Diver,Weight),
   			   at(neutrallyBuoyant(Diver),Time),
   			   Terminates)
   	      ]).
 */

% fluent UncontrolledBuoyancy(diver)
 %  blue=fluent(uncontrolledBuoyancy(diver)).
 %  fluent(uncontrolledBuoyancy(diver)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',380).
fluents([uncontrolledBuoyancy/1]).
 %  fluents([uncontrolledBuoyancy/1]).
mpred_prop(uncontrolledBuoyancy(diver),fluent).
 %  mpred_prop(uncontrolledBuoyancy(diver),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',383).
% event LoseBuoyancyControl(diver)
 %  blue=event(loseBuoyancyControl(diver)).
 %  event(loseBuoyancyControl(diver)).
events([loseBuoyancyControl/1]).
 %  events([loseBuoyancyControl/1]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',383).
mpred_prop(loseBuoyancyControl(diver),event).
 %  mpred_prop(loseBuoyancyControl(diver),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',385).
% predicate IsInexperiencedDiver(diver)
 %  blue=predicate(isInexperiencedDiver(diver)).
 %  predicate(isInexperiencedDiver(diver)).
predicates([isInexperiencedDiver/1]).
 %  predicates([isInexperiencedDiver/1]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',385).
mpred_prop(isInexperiencedDiver(diver),predicate).
 %  mpred_prop(isInexperiencedDiver(diver),predicate).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',387).
% [diver,time]
% Happens(LoseBuoyancyControl(diver),time) ->
% IsInexperiencedDiver(diver).
 %  clausify_pnf=(happens(loseBuoyancyControl(Diver), Time)->isInexperiencedDiver(Diver)).

 /*  isInexperiencedDiver(Diver) :-
       happens(loseBuoyancyControl(Diver), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',387).

 /*  pl=axiom(requires(loseBuoyancyControl(Diver),When_Time),
         [metreqs(loseBuoyancyControl(Diver))]).
 */

 /*  metreqs(loseBuoyancyControl(Diver)) ->
       requires(loseBuoyancyControl(Diver), When_Time).
 */
if metreqs(loseBuoyancyControl(Diver))then requires(loseBuoyancyControl(Diver), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',387).

 /*  reactive_rule([metreqs(loseBuoyancyControl(Diver))],
   	      [ requires(loseBuoyancyControl(Diver),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',387).

 /*  reactive_rule([metreqs(loseBuoyancyControl(Diver))],
   	      [ requires(loseBuoyancyControl(Diver),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',387).

 /*  fix_axiom_head(When_Time) ->
       [ holds_at(metreqs(loseBuoyancyControl(Diver)), When_Time),
          (->),
         metreqs(loseBuoyancyControl(Diver))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',387).

 /*  pl=axiom(metreqs(loseBuoyancyControl(Diver)),
         [isInexperiencedDiver(Diver)]).
 */

 /*  isInexperiencedDiver(Diver) ->
       metreqs(loseBuoyancyControl(Diver)).
 */
if isInexperiencedDiver(Diver)then metreqs(loseBuoyancyControl(Diver)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',387).

 /*  reactive_rule([isInexperiencedDiver(Diver)],
   	      [metreqs(loseBuoyancyControl(Diver))]).
 */

 /*  reactive_rule([isInexperiencedDiver(Diver)],
   	      [metreqs(loseBuoyancyControl(Diver))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',387).

 /*  not(happens(loseBuoyancyControl(Diver), When_Time)) :-
       not(isInexperiencedDiver(Diver)).
 */

 /*  fix_axiom_head(When_Time) ->
       [ not(happens(loseBuoyancyControl(Diver), When_Time)),
          (->),
         not(loseBuoyancyControl(Diver))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',387).

 /*  pl=axiom(not(loseBuoyancyControl(Diver)),
         [not(isInexperiencedDiver(Diver))]).
 */

 /*  not(isInexperiencedDiver(Diver)) ->
       not(loseBuoyancyControl(Diver)).
 */
if not isInexperiencedDiver(Diver)then not loseBuoyancyControl(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',387).

 /*  reactive_rule([not(isInexperiencedDiver(Diver))],
   	      [not(loseBuoyancyControl(Diver))]).
 */

 /*  reactive_rule([not(isInexperiencedDiver(Diver))],
   	      [not(loseBuoyancyControl(Diver))]).
 */


% [diver,time]
% Initiates(LoseBuoyancyControl(diver),UncontrolledBuoyancy(diver),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',392).

 /*  pl=axiom(initiates(loseBuoyancyControl(Diver),
   		uncontrolledBuoyancy(Diver),
   		Time),
         []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',392).

 /*  initiates(loseBuoyancyControl(Diver),
   	  uncontrolledBuoyancy(Diver),
   	  Time).
 */
loseBuoyancyControl(Diver)initiates uncontrolledBuoyancy(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',392).

 /*  initiated(happens(loseBuoyancyControl(Diver),
   		  Time_From,
   		  Time_Until),
   	  uncontrolledBuoyancy(Diver),
   	  []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',392).

 /*  initiated(happens(loseBuoyancyControl(Diver),
   		  Time_From,
   		  Time_Until),
   	  uncontrolledBuoyancy(Diver),
   	  []).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',394).
% [diver,time]
% Initiates(LoseBuoyancyControl(diver),PositivelyBuoyant(diver),time).

 /*  pl=axiom(initiates(loseBuoyancyControl(Diver),
   		positivelyBuoyant(Diver),
   		Time),
         []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',394).

 /*  initiates(loseBuoyancyControl(Diver),
   	  positivelyBuoyant(Diver),
   	  Time).
 */
loseBuoyancyControl(Diver)initiates positivelyBuoyant(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',394).

 /*  initiated(happens(loseBuoyancyControl(Diver),
   		  Time_From,
   		  Time_Until),
   	  positivelyBuoyant(Diver),
   	  []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',394).

 /*  initiated(happens(loseBuoyancyControl(Diver),
   		  Time_From,
   		  Time_Until),
   	  positivelyBuoyant(Diver),
   	  []).
 */


% [diver,time]
% Terminates(LoseBuoyancyControl(diver),NegativelyBuoyant(diver),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',398).

 /*  pl=axiom(terminates(loseBuoyancyControl(Diver),
   		 negativelyBuoyant(Diver),
   		 Time),
         []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',398).

 /*  terminates(loseBuoyancyControl(Diver),
   	   negativelyBuoyant(Diver),
   	   Time).
 */
loseBuoyancyControl(Diver)terminates negativelyBuoyant(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',398).

 /*  terminated(happens(loseBuoyancyControl(Diver),
   		   Time_From,
   		   Time_Until),
   	   negativelyBuoyant(Diver),
   	   []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',398).

 /*  terminated(happens(loseBuoyancyControl(Diver),
   		   Time_From,
   		   Time_Until),
   	   negativelyBuoyant(Diver),
   	   []).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',400).
% [diver,time]
% Terminates(LoseBuoyancyControl(diver),NeutrallyBuoyant(diver),time).

 /*  pl=axiom(terminates(loseBuoyancyControl(Diver),
   		 neutrallyBuoyant(Diver),
   		 Time),
         []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',400).

 /*  terminates(loseBuoyancyControl(Diver),
   	   neutrallyBuoyant(Diver),
   	   Time).
 */
loseBuoyancyControl(Diver)terminates neutrallyBuoyant(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',400).

 /*  terminated(happens(loseBuoyancyControl(Diver),
   		   Time_From,
   		   Time_Until),
   	   neutrallyBuoyant(Diver),
   	   []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',400).

 /*  terminated(happens(loseBuoyancyControl(Diver),
   		   Time_From,
   		   Time_Until),
   	   neutrallyBuoyant(Diver),
   	   []).
 */


%; determining fluent

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',404).
% fluent AscendDescendAmount(diver,depth)
 %  blue=fluent(ascendDescendAmount(diver,depth)).
 %  fluent(ascendDescendAmount(diver,depth)).
fluents([ascendDescendAmount/2]).
 %  fluents([ascendDescendAmount/2]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',404).
mpred_prop(ascendDescendAmount(diver,depth),fluent).
 %  mpred_prop(ascendDescendAmount(diver,depth),fluent).

% noninertial AscendDescendAmount
noninertial(ascendDescendAmount).
 %  noninertial(ascendDescendAmount).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',407).
% [diver,depth1,depth2,time]
% HoldsAt(AscendDescendAmount(diver,depth1),time) &
% HoldsAt(AscendDescendAmount(diver,depth2),time) ->
% depth1=depth2.
 %  clausify_pnf=(holds_at(ascendDescendAmount(Diver, Depth1), Time), holds_at(ascendDescendAmount(Diver, Depth2), Time)->equals(Depth1, Depth2)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',407).

 /*  not(holds_at(ascendDescendAmount(Diver, Depth1), Time)) :-
       holds_at(ascendDescendAmount(Diver, Depth2), Time),
       not(equals(Depth1, Depth2)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',407).

 /*  pl=axiom(not(ascendDescendAmount(Diver,Depth1)),
         [ ascendDescendAmount(Diver,Depth2),
   	not(equals(Depth1,Depth2))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',407).

 /*  (   ascendDescendAmount(Diver, Depth2),
       not(equals(Depth1, Depth2))
   ->  not(ascendDescendAmount(Diver, Depth1))
   ).
 */
if ascendDescendAmount(Diver, Depth2), not equals(Depth1, Depth2)then not ascendDescendAmount(Diver, Depth1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',407).

 /*  reactive_rule([ ascendDescendAmount(Diver,Depth2),
   		not(equals(Depth1,Depth2))
   	      ],
   	      [not(ascendDescendAmount(Diver,Depth1))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',407).

 /*  reactive_rule([ ascendDescendAmount(Diver,Depth2),
   		not(equals(Depth1,Depth2))
   	      ],
   	      [not(ascendDescendAmount(Diver,Depth1))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',407).

 /*  not(holds_at(ascendDescendAmount(Diver, Depth2), Time)) :-
       holds_at(ascendDescendAmount(Diver, Depth1), Time),
       not(equals(Depth1, Depth2)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',407).

 /*  pl=axiom(not(ascendDescendAmount(Diver,Depth2)),
         [ ascendDescendAmount(Diver,Depth1),
   	not(equals(Depth2,Depth1))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',407).

 /*  (   ascendDescendAmount(Diver, Depth1),
       not(equals(Depth2, Depth1))
   ->  not(ascendDescendAmount(Diver, Depth2))
   ).
 */
if ascendDescendAmount(Diver, Depth1), not equals(Depth2, Depth1)then not ascendDescendAmount(Diver, Depth2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',407).

 /*  reactive_rule([ ascendDescendAmount(Diver,Depth1),
   		not(equals(Depth2,Depth1))
   	      ],
   	      [not(ascendDescendAmount(Diver,Depth2))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',407).

 /*  reactive_rule([ ascendDescendAmount(Diver,Depth1),
   		not(equals(Depth2,Depth1))
   	      ],
   	      [not(ascendDescendAmount(Diver,Depth2))]).
 */


% [diver,depth,time]
% Happens(Descend(diver,depth),time) ->
% HoldsAt(NegativelyBuoyant(diver),time) &
% ({depth1}
%  HoldsAt(AscendDescendAmount(diver,depth1),time) &
%  HoldsAt(AtDepth(diver,depth-depth1),time)).
 %  clausify_pnf=(happens(descend(Diver, Depth), Time)->holds_at(negativelyBuoyant(Diver), Time), exists([Depth1],  (holds_at(ascendDescendAmount(Diver, Depth1), Time), holds_at(atDepth(Diver, Depth-Depth1), Time)))).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',413).

 /*  not(happens(descend(Diver, Depth), Time)) :-
       (   not(holds_at(negativelyBuoyant(Diver), Time))
       ;   not(holds_at(ascendDescendAmount(Diver, Depth1), Time))
       ;   not(holds_at(atDepth(Diver, Depth-Depth1),
                        Time))
       ).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',413).

 /*  fix_axiom_head(Time) ->
       [ not(happens(descend(Diver, Depth), Time)),
          (->),
         not(descend(Diver, Depth))
       ].
 */
 %   pl=axiom(not(descend(Diver, Depth)), [(not(negativelyBuoyant(Diver));not(ascendDescendAmount(Diver, Depth1));not(atDepth(Diver, Depth-Depth1)))]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',413).

 /*  not(negativelyBuoyant(Diver));not(ascendDescendAmount(Diver, Depth1));not(atDepth(Diver, Depth-Depth1)) ->
       not(descend(Diver, Depth)).
 */
if not negativelyBuoyant(Diver);not ascendDescendAmount(Diver, Depth1);not atDepth(Diver, Depth-Depth1)then not descend(Diver, Depth).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',413).

 /*   reactive_rule([  (not(negativelyBuoyant(Diver));not(ascendDescendAmount(Diver, Depth1));not(atDepth(Diver, Depth-Depth1)))
                    ],
                    [not(descend(Diver, Depth))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',413).

 /*   reactive_rule([  (not(negativelyBuoyant(Diver));not(ascendDescendAmount(Diver, Depth1));not(atDepth(Diver, Depth-Depth1)))
                    ],
                    [not(descend(Diver, Depth))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',413).

 /*  holds_at(negativelyBuoyant(Diver), Time) :-
       happens(descend(Diver, Depth), Time).
 */

 /*  pl=axiom(requires(descend(Diver,Depth),When_Time),
         [metreqs(descend(Diver,Depth))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',413).

 /*  metreqs(descend(Diver, Depth)) ->
       requires(descend(Diver, Depth), When_Time).
 */
if metreqs(descend(Diver, Depth))then requires(descend(Diver, Depth), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',413).

 /*  reactive_rule([metreqs(descend(Diver,Depth))],
   	      [ requires(descend(Diver,Depth),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',413).

 /*  reactive_rule([metreqs(descend(Diver,Depth))],
   	      [ requires(descend(Diver,Depth),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',413).

 /*  fix_axiom_head(When_Time) ->
       [ holds_at(metreqs(descend(Diver, Depth)), When_Time),
          (->),
         metreqs(descend(Diver, Depth))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',413).

 /*  pl=axiom(metreqs(descend(Diver,Depth)),
         [negativelyBuoyant(Diver)]).
 */

 /*  negativelyBuoyant(Diver) ->
       metreqs(descend(Diver, Depth)).
 */
if negativelyBuoyant(Diver)then metreqs(descend(Diver, Depth)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',413).

 /*  reactive_rule([holds(negativelyBuoyant(Diver),Holds)],
   	      [metreqs(descend(Diver,Depth))]).
 */

 /*  reactive_rule([holds(negativelyBuoyant(Diver),Holds)],
   	      [metreqs(descend(Diver,Depth))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',413).

 /*  holds_at(ascendDescendAmount(Diver, Depth1), When_Time) :-
       happens(descend(Diver, Depth), When_Time).
 */

 /*  pl=axiom(requires(descend(Diver,Depth),When_Time),
         [metreqs(descend(Diver,Depth))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',413).

 /*  metreqs(descend(Diver, Depth)) ->
       requires(descend(Diver, Depth), When_Time).
 */
if metreqs(descend(Diver, Depth))then requires(descend(Diver, Depth), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',413).

 /*  reactive_rule([metreqs(descend(Diver,Depth))],
   	      [ requires(descend(Diver,Depth),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',413).

 /*  reactive_rule([metreqs(descend(Diver,Depth))],
   	      [ requires(descend(Diver,Depth),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',413).

 /*  fix_axiom_head(When_Time) ->
       [ holds_at(metreqs(descend(Diver, Depth)), When_Time),
          (->),
         metreqs(descend(Diver, Depth))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',413).

 /*  pl=axiom(metreqs(descend(Diver,Depth)),
         [ascendDescendAmount(Diver,Depth1)]).
 */

 /*  ascendDescendAmount(Diver, Depth1) ->
       metreqs(descend(Diver, Depth)).
 */
if ascendDescendAmount(Diver, Depth1)then metreqs(descend(Diver, Depth)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',413).

 /*  reactive_rule([ascendDescendAmount(Diver,Depth1)],
   	      [metreqs(descend(Diver,Depth))]).
 */

 /*  reactive_rule([ascendDescendAmount(Diver,Depth1)],
   	      [metreqs(descend(Diver,Depth))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',413).

 /*  holds_at(atDepth(Diver, Depth-Depth1), When_Time) :-
       happens(descend(Diver, Depth), When_Time).
 */

 /*  pl=axiom(requires(descend(Diver,Depth),When_Time),
         [metreqs(descend(Diver,Depth))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',413).

 /*  metreqs(descend(Diver, Depth)) ->
       requires(descend(Diver, Depth), When_Time).
 */
if metreqs(descend(Diver, Depth))then requires(descend(Diver, Depth), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',413).

 /*  reactive_rule([metreqs(descend(Diver,Depth))],
   	      [ requires(descend(Diver,Depth),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',413).

 /*  reactive_rule([metreqs(descend(Diver,Depth))],
   	      [ requires(descend(Diver,Depth),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',413).

 /*  fix_axiom_head(When_Time) ->
       [ holds_at(metreqs(descend(Diver, Depth)), When_Time),
          (->),
         metreqs(descend(Diver, Depth))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',413).

 /*  pl=axiom(metreqs(descend(Diver,Depth)),
         [atDepth(Diver,Depth-Depth1)]).
 */

 /*  atDepth(Diver, Depth-Depth1) ->
       metreqs(descend(Diver, Depth)).
 */
if atDepth(Diver, Depth-Depth1)then metreqs(descend(Diver, Depth)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',413).

 /*  reactive_rule([ holds(atDepth(Diver,Depth-Depth1),
   		      Holds6)
   	      ],
   	      [metreqs(descend(Diver,Depth))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',413).

 /*  reactive_rule([ holds(atDepth(Diver,Depth-Depth1),
   		      Holds6)
   	      ],
   	      [metreqs(descend(Diver,Depth))]).
 */

% event KickUp(diver)
 %  blue=event(kickUp(diver)).
 %  event(kickUp(diver)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',418).
events([kickUp/1]).
 %  events([kickUp/1]).
mpred_prop(kickUp(diver),event).
 %  mpred_prop(kickUp(diver),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',421).
% [diver,depth,time]
% Happens(Ascend(diver,depth),time) ->
% (HoldsAt(PositivelyBuoyant(diver),time) |
%  (HoldsAt(NeutrallyBuoyant(diver),time) & Happens(KickUp(diver),time))) &
% ({depth1}
%  HoldsAt(AscendDescendAmount(diver,depth1),time) &
%  HoldsAt(AtDepth(diver,depth+depth1),time)).
 %  clausify_pnf=(happens(ascend(Diver, Depth), Time)->(holds_at(positivelyBuoyant(Diver), Time);holds_at(neutrallyBuoyant(Diver), Time), happens(kickUp(Diver), Time)), exists([Depth1],  (holds_at(ascendDescendAmount(Diver, Depth1), Time), holds_at(atDepth(Diver, Depth+Depth1), Time)))).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',421).

 /*  not(happens(ascend(Diver, Depth), Time)) :-
       (   not(holds_at(positivelyBuoyant(Diver), Time)),
           (   not(holds_at(neutrallyBuoyant(Diver), Time))
           ;   not(happens(kickUp(Diver), Time))
           )
       ;   not(holds_at(ascendDescendAmount(Diver, Depth1), Time))
       ;   not(holds_at(atDepth(Diver, Depth+Depth1),
                        Time))
       ).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',421).

 /*  fix_axiom_head(Time) ->
       [ not(happens(ascend(Diver, Depth), Time)),
          (->),
         not(ascend(Diver, Depth))
       ].
 */
 %  pl=axiom(not(ascend(Diver, Depth)), [(not(positivelyBuoyant(Diver)), (not(neutrallyBuoyant(Diver));not(kickUp(Diver)));not(ascendDescendAmount(Diver, Depth1));not(atDepth(Diver, Depth+Depth1)))]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',421).

 /*  (   (   not(positivelyBuoyant(Diver)),
           (   not(neutrallyBuoyant(Diver))
           ;   not(kickUp(Diver))
           )
       ;   not(ascendDescendAmount(Diver, Depth1))
       ;   not(atDepth(Diver, Depth+Depth1))
       )
   ->  not(ascend(Diver, Depth))
   ).
 */
if not positivelyBuoyant(Diver), (not neutrallyBuoyant(Diver);not kickUp(Diver));not ascendDescendAmount(Diver, Depth1);not atDepth(Diver, Depth+Depth1)then not ascend(Diver, Depth).
 %  reactive_rule([(not(positivelyBuoyant(Diver)), (not(neutrallyBuoyant(Diver));not(kickUp(Diver)));not(ascendDescendAmount(Diver, Depth1));not(atDepth(Diver, Depth+Depth1)))], [not(ascend(Diver, Depth))]).
 %  reactive_rule([(not(positivelyBuoyant(Diver)), (not(neutrallyBuoyant(Diver));not(kickUp(Diver)));not(ascendDescendAmount(Diver, Depth1));not(atDepth(Diver, Depth+Depth1)))], [not(ascend(Diver, Depth))]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',421).

 /*  holds_at(positivelyBuoyant(Diver), Time) :-
       (   not(holds_at(neutrallyBuoyant(Diver), Time))
       ;   not(happens(kickUp(Diver), Time))
       ),
       happens(ascend(Diver, Depth), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',421).

 /*  fix_axiom_head(Time) ->
       [ holds_at(positivelyBuoyant(Diver), Time),
          (->),
         positivelyBuoyant(Diver)
       ].
 */
 %   pl=axiom(positivelyBuoyant(Diver), [(not(neutrallyBuoyant(Diver));not(kickUp(Diver))), ascend(Diver, Depth)]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',421).

 /*  (   (   not(neutrallyBuoyant(Diver))
       ;   not(kickUp(Diver))
       ),
       ascend(Diver, Depth)
   ->  positivelyBuoyant(Diver)
   ).
 */
if (not neutrallyBuoyant(Diver);not kickUp(Diver)), ascend(Diver, Depth)then positivelyBuoyant(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',421).

 /*   reactive_rule([  (not(neutrallyBuoyant(Diver));not(kickUp(Diver))),
                      happens(ascend(Diver, Depth),
                              Time_From,
                              Time_Until)
                    ],
                    [holds(positivelyBuoyant(Diver), Holds)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',421).

 /*   reactive_rule([  (not(neutrallyBuoyant(Diver));not(kickUp(Diver))),
                      happens(ascend(Diver, Depth),
                              Time_From,
                              Time_Until)
                    ],
                    [holds(positivelyBuoyant(Diver), Holds)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',421).

 /*  holds_at(neutrallyBuoyant(Diver), Time) :-
       not(holds_at(positivelyBuoyant(Diver), Time)),
       happens(ascend(Diver, Depth), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',421).

 /*  fix_axiom_head(Time) ->
       [ holds_at(neutrallyBuoyant(Diver), Time),
          (->),
         neutrallyBuoyant(Diver)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',421).

 /*  pl=axiom(neutrallyBuoyant(Diver),
         [ not(positivelyBuoyant(Diver)),
   	ascend(Diver,Depth)
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',421).

 /*  (   not(positivelyBuoyant(Diver)),
       ascend(Diver, Depth)
   ->  neutrallyBuoyant(Diver)
   ).
 */
if not positivelyBuoyant(Diver), ascend(Diver, Depth)then neutrallyBuoyant(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',421).

 /*  reactive_rule([ holds(not(positivelyBuoyant(Diver)),
   		      Time_From7),
   		happens(ascend(Diver,Depth),
   			Time_From7,
   			Time_Until8)
   	      ],
   	      [holds(neutrallyBuoyant(Diver),Holds9)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',421).

 /*  reactive_rule([ holds(not(positivelyBuoyant(Diver)),
   		      Time_From7),
   		happens(ascend(Diver,Depth),
   			Time_From7,
   			Time_Until8)
   	      ],
   	      [holds(neutrallyBuoyant(Diver),Holds9)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',421).

 /*  happens(kickUp(Diver), Time) :-
       not(holds_at(positivelyBuoyant(Diver), Time)),
       happens(ascend(Diver, Depth), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',421).

 /*  fix_axiom_head(Time) ->
       [happens(kickUp(Diver), Time), ->, kickUp(Diver)].
 */

 /*  pl=axiom(kickUp(Diver),
         [ not(positivelyBuoyant(Diver)),
   	ascend(Diver,Depth)
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',421).

 /*  (   not(positivelyBuoyant(Diver)),
       ascend(Diver, Depth)
   ->  kickUp(Diver)
   ).
 */
if not positivelyBuoyant(Diver), ascend(Diver, Depth)then kickUp(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',421).

 /*  reactive_rule([ holds(not(positivelyBuoyant(Diver)),
   		      Time_From10),
   		happens(ascend(Diver,Depth),
   			Time_From10,
   			Time_Until11)
   	      ],
   	      [kickUp(Diver)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',421).

 /*  reactive_rule([ holds(not(positivelyBuoyant(Diver)),
   		      Time_From10),
   		happens(ascend(Diver,Depth),
   			Time_From10,
   			Time_Until11)
   	      ],
   	      [kickUp(Diver)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',421).

 /*  holds_at(ascendDescendAmount(Diver, Depth1), Time) :-
       happens(ascend(Diver, Depth), Time).
 */

 /*  pl=axiom(requires(ascend(Diver,Depth),When_Time),
         [metreqs(ascend(Diver,Depth))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',421).

 /*  metreqs(ascend(Diver, Depth)) ->
       requires(ascend(Diver, Depth), When_Time).
 */
if metreqs(ascend(Diver, Depth))then requires(ascend(Diver, Depth), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',421).

 /*  reactive_rule([metreqs(ascend(Diver,Depth))],
   	      [ requires(ascend(Diver,Depth),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',421).

 /*  reactive_rule([metreqs(ascend(Diver,Depth))],
   	      [ requires(ascend(Diver,Depth),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',421).

 /*  fix_axiom_head(When_Time) ->
       [ holds_at(metreqs(ascend(Diver, Depth)), When_Time),
          (->),
         metreqs(ascend(Diver, Depth))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',421).

 /*  pl=axiom(metreqs(ascend(Diver,Depth)),
         [ascendDescendAmount(Diver,Depth1)]).
 */

 /*  ascendDescendAmount(Diver, Depth1) ->
       metreqs(ascend(Diver, Depth)).
 */
if ascendDescendAmount(Diver, Depth1)then metreqs(ascend(Diver, Depth)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',421).

 /*  reactive_rule([ascendDescendAmount(Diver,Depth1)],
   	      [metreqs(ascend(Diver,Depth))]).
 */

 /*  reactive_rule([ascendDescendAmount(Diver,Depth1)],
   	      [metreqs(ascend(Diver,Depth))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',421).

 /*  holds_at(atDepth(Diver, Depth+Depth1), When_Time) :-
       happens(ascend(Diver, Depth), When_Time).
 */

 /*  pl=axiom(requires(ascend(Diver,Depth),When_Time),
         [metreqs(ascend(Diver,Depth))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',421).

 /*  metreqs(ascend(Diver, Depth)) ->
       requires(ascend(Diver, Depth), When_Time).
 */
if metreqs(ascend(Diver, Depth))then requires(ascend(Diver, Depth), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',421).

 /*  reactive_rule([metreqs(ascend(Diver,Depth))],
   	      [ requires(ascend(Diver,Depth),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',421).

 /*  reactive_rule([metreqs(ascend(Diver,Depth))],
   	      [ requires(ascend(Diver,Depth),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',421).

 /*  fix_axiom_head(When_Time) ->
       [ holds_at(metreqs(ascend(Diver, Depth)), When_Time),
          (->),
         metreqs(ascend(Diver, Depth))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',421).

 /*  pl=axiom(metreqs(ascend(Diver,Depth)),
         [atDepth(Diver,Depth+Depth1)]).
 */

 /*  atDepth(Diver, Depth+Depth1) ->
       metreqs(ascend(Diver, Depth)).
 */
if atDepth(Diver, Depth+Depth1)then metreqs(ascend(Diver, Depth)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',421).

 /*  reactive_rule([ holds(atDepth(Diver,Depth+Depth1),
   		      Holds13)
   	      ],
   	      [metreqs(ascend(Diver,Depth))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',421).

 /*  reactive_rule([ holds(atDepth(Diver,Depth+Depth1),
   		      Holds13)
   	      ],
   	      [metreqs(ascend(Diver,Depth))]).
 */


% [diver,time]
% Happens(KickUp(diver),time) ->
% HoldsAt(Vertical(diver),time).
 %  clausify_pnf=(happens(kickUp(Diver), Time)->holds_at(vertical(Diver), Time)).

 /*  holds_at(vertical(Diver), Time) :-
       happens(kickUp(Diver), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',430).

 /*  pl=axiom(requires(kickUp(Diver),When_Time),
         [metreqs(kickUp(Diver))]).
 */

 /*  metreqs(kickUp(Diver)) ->
       requires(kickUp(Diver), When_Time).
 */
if metreqs(kickUp(Diver))then requires(kickUp(Diver), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',430).

 /*  reactive_rule([metreqs(kickUp(Diver))],
   	      [requires(kickUp(Diver),When_Time)]).
 */

 /*  reactive_rule([metreqs(kickUp(Diver))],
   	      [requires(kickUp(Diver),When_Time)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',430).

 /*  fix_axiom_head(When_Time) ->
       [ holds_at(metreqs(kickUp(Diver)), When_Time),
          (->),
         metreqs(kickUp(Diver))
       ].
 */
 %  pl=axiom(metreqs(kickUp(Diver)),[vertical(Diver)]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',430).

 /*  vertical(Diver) ->
       metreqs(kickUp(Diver)).
 */
if vertical(Diver)then metreqs(kickUp(Diver)).
 %  reactive_rule([vertical(Diver)],[metreqs(kickUp(Diver))]).
 %  reactive_rule([vertical(Diver)],[metreqs(kickUp(Diver))]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',430).

 /*  not(happens(kickUp(Diver), When_Time)) :-
       not(holds_at(vertical(Diver), When_Time)).
 */

 /*  fix_axiom_head(When_Time) ->
       [ not(happens(kickUp(Diver), When_Time)),
          (->),
         not(kickUp(Diver))
       ].
 */
 %  pl=axiom(not(kickUp(Diver)),[not(vertical(Diver))]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',430).

 /*  not(vertical(Diver)) ->
       not(kickUp(Diver)).
 */
if not vertical(Diver)then not kickUp(Diver).
 %  reactive_rule([not(vertical(Diver))],[not(kickUp(Diver))]).
 %  reactive_rule([not(vertical(Diver))],[not(kickUp(Diver))]).

% event SwimAround(diver)
 %  blue=event(swimAround(diver)).
 %  event(swimAround(diver)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',432).
events([swimAround/1]).
 %  events([swimAround/1]).
mpred_prop(swimAround(diver),event).
 %  mpred_prop(swimAround(diver),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',435).
% [diver,time]
% Happens(SwimAround(diver),time) ->
% HoldsAt(HorizontalDown(diver),time).
 %  clausify_pnf=(happens(swimAround(Diver), Time)->holds_at(horizontalDown(Diver), Time)).

 /*  holds_at(horizontalDown(Diver), Time) :-
       happens(swimAround(Diver), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',435).

 /*  pl=axiom(requires(swimAround(Diver),When_Time),
         [metreqs(swimAround(Diver))]).
 */

 /*  metreqs(swimAround(Diver)) ->
       requires(swimAround(Diver), When_Time).
 */
if metreqs(swimAround(Diver))then requires(swimAround(Diver), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',435).

 /*  reactive_rule([metreqs(swimAround(Diver))],
   	      [requires(swimAround(Diver),When_Time)]).
 */

 /*  reactive_rule([metreqs(swimAround(Diver))],
   	      [requires(swimAround(Diver),When_Time)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',435).

 /*  fix_axiom_head(When_Time) ->
       [ holds_at(metreqs(swimAround(Diver)), When_Time),
          (->),
         metreqs(swimAround(Diver))
       ].
 */
 %  pl=axiom(metreqs(swimAround(Diver)),[horizontalDown(Diver)]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',435).

 /*  horizontalDown(Diver) ->
       metreqs(swimAround(Diver)).
 */
if horizontalDown(Diver)then metreqs(swimAround(Diver)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',435).

 /*  reactive_rule([horizontalDown(Diver)],
   	      [metreqs(swimAround(Diver))]).
 */

 /*  reactive_rule([horizontalDown(Diver)],
   	      [metreqs(swimAround(Diver))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',435).

 /*  not(happens(swimAround(Diver), When_Time)) :-
       not(holds_at(horizontalDown(Diver), When_Time)).
 */

 /*  fix_axiom_head(When_Time) ->
       [ not(happens(swimAround(Diver), When_Time)),
          (->),
         not(swimAround(Diver))
       ].
 */
 %  pl=axiom(not(swimAround(Diver)),[not(horizontalDown(Diver))]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',435).

 /*  not(horizontalDown(Diver)) ->
       not(swimAround(Diver)).
 */
if not horizontalDown(Diver)then not swimAround(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',435).

 /*  reactive_rule([not(horizontalDown(Diver))],
   	      [not(swimAround(Diver))]).
 */

 /*  reactive_rule([not(horizontalDown(Diver))],
   	      [not(swimAround(Diver))]).
 */


%; signaling

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',441).
% event SignalDescend(diver,diver)
 %  blue=event(signalDescend(diver,diver)).
 %  event(signalDescend(diver,diver)).
events([signalDescend/2]).
 %  events([signalDescend/2]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',441).
mpred_prop(signalDescend(diver,diver),event).
 %  mpred_prop(signalDescend(diver,diver),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',443).
% event SignalOutOfTime(diver,diver)
 %  blue=event(signalOutOfTime(diver,diver)).
 %  event(signalOutOfTime(diver,diver)).
events([signalOutOfTime/2]).
 %  events([signalOutOfTime/2]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',443).
mpred_prop(signalOutOfTime(diver,diver),event).
 %  mpred_prop(signalOutOfTime(diver,diver),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',445).
% event SignalAscend(diver,diver)
 %  blue=event(signalAscend(diver,diver)).
 %  event(signalAscend(diver,diver)).
events([signalAscend/2]).
 %  events([signalAscend/2]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',445).
mpred_prop(signalAscend(diver,diver),event).
 %  mpred_prop(signalAscend(diver,diver),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',447).
%;[diver1,diver2,time]
%;Happens(SignalAscend(diver1,diver2),time) ->
%;Happens(SignalOutOfTime(diver1,diver2),time-1).
%;[diver1,diver2,time]
%;Happens(SignalDescend(diver1,diver2),time) ->
%;HoldsAt(See(diver1,diver2),time) &
%;HoldsAt(See(diver2,diver1),time).
%;[diver1,diver2,time]
%;Happens(SignalOutOfTime(diver1,diver2),time) ->
%;HoldsAt(See(diver1,diver2),time) &
%;HoldsAt(See(diver2,diver1),time).
%;[diver1,diver2,time]
%;Happens(SignalAscend(diver1,diver2),time) ->
%;HoldsAt(See(diver1,diver2),time) &
%;HoldsAt(See(diver2,diver1),time).
%;event LookAt(agent,object)
%;fluent See(agent,object)
%;[agent,object,time]
%;Initiates(LookAt(agent,object),See(agent,object),time).
%;[agent,object1,object2,time]
%;object1!=object2 ->
%;Terminates(LookAt(agent,object1),
%;           See(agent,object2),
%;           time).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',479).
% event Descend1(diver)
 %  blue=event(descend1(diver)).
 %  event(descend1(diver)).
events([descend1/1]).
 %  events([descend1/1]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',479).
mpred_prop(descend1(diver),event).
 %  mpred_prop(descend1(diver),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',481).
% event Ascend1(diver)
 %  blue=event(ascend1(diver)).
 %  event(ascend1(diver)).
events([ascend1/1]).
 %  events([ascend1/1]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',481).
mpred_prop(ascend1(diver),event).
 %  mpred_prop(ascend1(diver),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',483).
%;[diver,object,time]
%;Terminates(Descend1(diver),See(diver,object),time).
%;[diver,object,time]
%;Terminates(Ascend1(diver),See(diver,object),time).
%;[diver,object,time]
%;Terminates(RotateYaw(diver),See(diver,object),time).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',492).
% event RapidAscendToSurface(diver)
 %  blue=event(rapidAscendToSurface(diver)).
 %  event(rapidAscendToSurface(diver)).
events([rapidAscendToSurface/1]).
 %  events([rapidAscendToSurface/1]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',492).
mpred_prop(rapidAscendToSurface(diver),event).
 %  mpred_prop(rapidAscendToSurface(diver),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',494).
% [diver,time]
% Happens(Descend1(diver),time) <->
% ({depth} Happens(Descend(diver,depth),time)).

 /*  happens(descend1(Diver), Time) <->
       exists([Depth], happens(descend(Diver, Depth), Time)).
 */
 %  clausify_pnf=(happens(descend1(Diver), Time)->exists([Depth], happens(descend(Diver, Depth), Time))).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',494).

 /*  happens(descend(Diver, Depth), Time) :-
       happens(descend1(Diver), Time).
 */

 /*  fix_axiom_head(Time) ->
       [ happens(descend(Diver, Depth), Time),
          (->),
         descend(Diver, Depth)
       ].
 */
 %  pl=axiom(descend(Diver,Depth),[descend1(Diver)]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',494).

 /*  descend1(Diver) ->
       descend(Diver, Depth).
 */
if descend1(Diver)then descend(Diver, Depth).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',494).

 /*  reactive_rule([descend1(Diver)],
   	      [ happens(descend(Diver,Depth),
   			Time_From,
   			Time_Until)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',494).

 /*  reactive_rule([descend1(Diver)],
   	      [ happens(descend(Diver,Depth),
   			Time_From,
   			Time_Until)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',494).

 /*  not(happens(descend1(Diver), Time)) :-
       not(happens(descend(Diver, Depth), Time)).
 */

 /*  fix_axiom_head(Time) ->
       [ not(happens(descend1(Diver), Time)),
          (->),
         not(descend1(Diver))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',494).

 /*  pl=axiom(not(descend1(Diver)),
         [not(descend(Diver,Depth))]).
 */

 /*  not(descend(Diver, Depth)) ->
       not(descend1(Diver)).
 */
if not descend(Diver, Depth)then not descend1(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',494).

 /*  reactive_rule([not(descend(Diver,Depth))],
   	      [not(descend1(Diver))]).
 */

 /*  reactive_rule([not(descend(Diver,Depth))],
   	      [not(descend1(Diver))]).
 */
 %  clausify_pnf=(exists([Depth], happens(descend(Diver, Depth), Time))->happens(descend1(Diver), Time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',494).

 /*  happens(descend1(Diver), Time) :-
       happens(descend(Diver, Depth), Time).
 */

 /*  fix_axiom_head(Time) ->
       [happens(descend1(Diver), Time), ->, descend1(Diver)].
 */
 %  pl=axiom(descend1(Diver),[descend(Diver,Depth)]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',494).

 /*  descend(Diver, Depth) ->
       descend1(Diver).
 */
if descend(Diver, Depth)then descend1(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',494).

 /*  reactive_rule([ happens(descend(Diver,Depth),
   			Time_From5,
   			Time_Until6)
   	      ],
   	      [descend1(Diver)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',494).

 /*  reactive_rule([ happens(descend(Diver,Depth),
   			Time_From5,
   			Time_Until6)
   	      ],
   	      [descend1(Diver)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',494).

 /*  not(happens(descend(Diver, Depth), Time)) :-
       not(happens(descend1(Diver), Time)).
 */

 /*  fix_axiom_head(Time) ->
       [ not(happens(descend(Diver, Depth), Time)),
          (->),
         not(descend(Diver, Depth))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',494).

 /*  pl=axiom(not(descend(Diver,Depth)),
         [not(descend1(Diver))]).
 */

 /*  not(descend1(Diver)) ->
       not(descend(Diver, Depth)).
 */
if not descend1(Diver)then not descend(Diver, Depth).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',494).

 /*  reactive_rule([not(descend1(Diver))],
   	      [not(descend(Diver,Depth))]).
 */

 /*  reactive_rule([not(descend1(Diver))],
   	      [not(descend(Diver,Depth))]).
 */


% [diver,time]
% Happens(Ascend1(diver),time) <->
% ({depth} Happens(Ascend(diver,depth),time)).

 /*  happens(ascend1(Diver), Time) <->
       exists([Depth], happens(ascend(Diver, Depth), Time)).
 */
 %  clausify_pnf=(happens(ascend1(Diver), Time)->exists([Depth], happens(ascend(Diver, Depth), Time))).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',499).

 /*  happens(ascend(Diver, Depth), Time) :-
       happens(ascend1(Diver), Time).
 */

 /*  fix_axiom_head(Time) ->
       [ happens(ascend(Diver, Depth), Time),
          (->),
         ascend(Diver, Depth)
       ].
 */
 %  pl=axiom(ascend(Diver,Depth),[ascend1(Diver)]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',499).

 /*  ascend1(Diver) ->
       ascend(Diver, Depth).
 */
if ascend1(Diver)then ascend(Diver, Depth).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',499).

 /*  reactive_rule([ascend1(Diver)],
   	      [ happens(ascend(Diver,Depth),
   			Time_From,
   			Time_Until)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',499).

 /*  reactive_rule([ascend1(Diver)],
   	      [ happens(ascend(Diver,Depth),
   			Time_From,
   			Time_Until)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',499).

 /*  not(happens(ascend1(Diver), Time)) :-
       not(happens(ascend(Diver, Depth), Time)).
 */

 /*  fix_axiom_head(Time) ->
       [ not(happens(ascend1(Diver), Time)),
          (->),
         not(ascend1(Diver))
       ].
 */
 %  pl=axiom(not(ascend1(Diver)),[not(ascend(Diver,Depth))]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',499).

 /*  not(ascend(Diver, Depth)) ->
       not(ascend1(Diver)).
 */
if not ascend(Diver, Depth)then not ascend1(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',499).

 /*  reactive_rule([not(ascend(Diver,Depth))],
   	      [not(ascend1(Diver))]).
 */

 /*  reactive_rule([not(ascend(Diver,Depth))],
   	      [not(ascend1(Diver))]).
 */
 %  clausify_pnf=(exists([Depth], happens(ascend(Diver, Depth), Time))->happens(ascend1(Diver), Time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',499).

 /*  happens(ascend1(Diver), Time) :-
       happens(ascend(Diver, Depth), Time).
 */

 /*  fix_axiom_head(Time) ->
       [happens(ascend1(Diver), Time), ->, ascend1(Diver)].
 */
 %  pl=axiom(ascend1(Diver),[ascend(Diver,Depth)]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',499).

 /*  ascend(Diver, Depth) ->
       ascend1(Diver).
 */
if ascend(Diver, Depth)then ascend1(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',499).

 /*  reactive_rule([ happens(ascend(Diver,Depth),
   			Time_From5,
   			Time_Until6)
   	      ],
   	      [ascend1(Diver)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',499).

 /*  reactive_rule([ happens(ascend(Diver,Depth),
   			Time_From5,
   			Time_Until6)
   	      ],
   	      [ascend1(Diver)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',499).

 /*  not(happens(ascend(Diver, Depth), Time)) :-
       not(happens(ascend1(Diver), Time)).
 */

 /*  fix_axiom_head(Time) ->
       [ not(happens(ascend(Diver, Depth), Time)),
          (->),
         not(ascend(Diver, Depth))
       ].
 */
 %  pl=axiom(not(ascend(Diver,Depth)),[not(ascend1(Diver))]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',499).

 /*  not(ascend1(Diver)) ->
       not(ascend(Diver, Depth)).
 */
if not ascend1(Diver)then not ascend(Diver, Depth).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',499).

 /*  reactive_rule([not(ascend1(Diver))],
   	      [not(ascend(Diver,Depth))]).
 */

 /*  reactive_rule([not(ascend1(Diver))],
   	      [not(ascend(Diver,Depth))]).
 */


% [diver,time]
% Happens(RapidAscendToSurface(diver),time) ->
% Happens(Ascend(diver,0),time).
 %  clausify_pnf=(happens(rapidAscendToSurface(Diver), Time)->happens(ascend(Diver, 0), Time)).

 /*  happens(ascend(Diver, 0), Time) :-
       happens(rapidAscendToSurface(Diver), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',503).

 /*  fix_axiom_head(Time) ->
       [happens(ascend(Diver, 0), Time), ->, ascend(Diver, 0)].
 */
 %  pl=axiom(ascend(Diver,0),[rapidAscendToSurface(Diver)]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',503).

 /*  rapidAscendToSurface(Diver) ->
       ascend(Diver, 0).
 */
if rapidAscendToSurface(Diver)then ascend(Diver, 0).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',503).

 /*  reactive_rule([rapidAscendToSurface(Diver)],
   	      [ happens(ascend(Diver,0),
   			Time_From,
   			Time_Until)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',503).

 /*  reactive_rule([rapidAscendToSurface(Diver)],
   	      [ happens(ascend(Diver,0),
   			Time_From,
   			Time_Until)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',503).

 /*  not(happens(rapidAscendToSurface(Diver), Time)) :-
       not(happens(ascend(Diver, 0), Time)).
 */

 /*  fix_axiom_head(Time) ->
       [ not(happens(rapidAscendToSurface(Diver), Time)),
          (->),
         not(rapidAscendToSurface(Diver))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',503).

 /*  pl=axiom(not(rapidAscendToSurface(Diver)),
         [not(ascend(Diver,0))]).
 */

 /*  not(ascend(Diver, 0)) ->
       not(rapidAscendToSurface(Diver)).
 */
if not ascend(Diver, 0)then not rapidAscendToSurface(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',503).

 /*  reactive_rule([not(ascend(Diver,0))],
   	      [not(rapidAscendToSurface(Diver))]).
 */

 /*  reactive_rule([not(ascend(Diver,0))],
   	      [not(rapidAscendToSurface(Diver))]).
 */

% event AscendLine(diver,line)
 %  blue=event(ascendLine(diver,line)).
 %  event(ascendLine(diver,line)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',505).
events([ascendLine/2]).
 %  events([ascendLine/2]).
mpred_prop(ascendLine(diver,line),event).
 %  mpred_prop(ascendLine(diver,line),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',508).
% [diver,line,time]
% Happens(AscendLine(diver,line),time) ->
% Happens(Ascend1(diver),time).
 %  clausify_pnf=(happens(ascendLine(Diver, Line), Time)->happens(ascend1(Diver), Time)).

 /*  happens(ascend1(Diver), Time) :-
       happens(ascendLine(Diver, Line), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',508).

 /*  fix_axiom_head(Time) ->
       [happens(ascend1(Diver), Time), ->, ascend1(Diver)].
 */
 %  pl=axiom(ascend1(Diver),[ascendLine(Diver,Line)]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',508).

 /*  ascendLine(Diver, Line) ->
       ascend1(Diver).
 */
if ascendLine(Diver, Line)then ascend1(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',508).

 /*  reactive_rule([ascendLine(Diver,Line)],
   	      [ascend1(Diver)]).
 */

 /*  reactive_rule([ascendLine(Diver,Line)],
   	      [ascend1(Diver)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',508).

 /*  not(happens(ascendLine(Diver, Line), Time)) :-
       not(happens(ascend1(Diver), Time)).
 */

 /*  fix_axiom_head(Time) ->
       [ not(happens(ascendLine(Diver, Line), Time)),
          (->),
         not(ascendLine(Diver, Line))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',508).

 /*  pl=axiom(not(ascendLine(Diver,Line)),
         [not(ascend1(Diver))]).
 */

 /*  not(ascend1(Diver)) ->
       not(ascendLine(Diver, Line)).
 */
if not ascend1(Diver)then not ascendLine(Diver, Line).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',508).

 /*  reactive_rule([not(ascend1(Diver))],
   	      [not(ascendLine(Diver,Line))]).
 */

 /*  reactive_rule([not(ascend1(Diver))],
   	      [not(ascendLine(Diver,Line))]).
 */

% fluent Disoriented(diver)
 %  blue=fluent(disoriented(diver)).
 %  fluent(disoriented(diver)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',511).
fluents([disoriented/1]).
 %  fluents([disoriented/1]).
mpred_prop(disoriented(diver),fluent).
 %  mpred_prop(disoriented(diver),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',514).
% event BecomeDisoriented(diver)
 %  blue=event(becomeDisoriented(diver)).
 %  event(becomeDisoriented(diver)).
events([becomeDisoriented/1]).
 %  events([becomeDisoriented/1]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',514).
mpred_prop(becomeDisoriented(diver),event).
 %  mpred_prop(becomeDisoriented(diver),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',516).
% event BecomeReoriented(diver)
 %  blue=event(becomeReoriented(diver)).
 %  event(becomeReoriented(diver)).
events([becomeReoriented/1]).
 %  events([becomeReoriented/1]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',516).
mpred_prop(becomeReoriented(diver),event).
 %  mpred_prop(becomeReoriented(diver),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',518).
% [diver,time]
% Initiates(BecomeDisoriented(diver),Disoriented(diver),time).

 /*  pl=axiom(initiates(becomeDisoriented(Diver),
   		disoriented(Diver),
   		Time),
         []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',518).

 /*  initiates(becomeDisoriented(Diver),
   	  disoriented(Diver),
   	  Time).
 */
becomeDisoriented(Diver)initiates disoriented(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',518).

 /*  initiated(happens(becomeDisoriented(Diver),
   		  Time_From,
   		  Time_Until),
   	  disoriented(Diver),
   	  []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',518).

 /*  initiated(happens(becomeDisoriented(Diver),
   		  Time_From,
   		  Time_Until),
   	  disoriented(Diver),
   	  []).
 */


% [diver,time]
% Terminates(BecomeReoriented(diver),Disoriented(diver),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',522).

 /*  pl=axiom(terminates(becomeReoriented(Diver),
   		 disoriented(Diver),
   		 Time),
         []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',522).

 /*  terminates(becomeReoriented(Diver),
   	   disoriented(Diver),
   	   Time).
 */
becomeReoriented(Diver)terminates disoriented(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',522).

 /*  terminated(happens(becomeReoriented(Diver),
   		   Time_From,
   		   Time_Until),
   	   disoriented(Diver),
   	   []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',522).

 /*  terminated(happens(becomeReoriented(Diver),
   		   Time_From,
   		   Time_Until),
   	   disoriented(Diver),
   	   []).
 */

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',524).
% fluent DisturbedSilt()
 %  blue=fluent(disturbedSilt).
 %  fluent(disturbedSilt).
fluents([disturbedSilt/0]).
 %  fluents([disturbedSilt/0]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',524).
mpred_prop(disturbedSilt,fluent).
 %  mpred_prop(disturbedSilt,fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',526).
% event DisturbSilt(diver)
 %  blue=event(disturbSilt(diver)).
 %  event(disturbSilt(diver)).
events([disturbSilt/1]).
 %  events([disturbSilt/1]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',526).
mpred_prop(disturbSilt(diver),event).
 %  mpred_prop(disturbSilt(diver),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',528).
% [diver,time]
% Initiates(DisturbSilt(diver),DisturbedSilt(),time).
 %  pl=axiom(initiates(disturbSilt(Diver),disturbedSilt,Time),[]).
 %  initiates(disturbSilt(Diver),disturbedSilt,Time).
disturbSilt(Diver)initiates disturbedSilt.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',528).

 /*  initiated(happens(disturbSilt(Diver),
   		  Time_From,
   		  Time_Until),
   	  disturbedSilt,
   	  []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',528).

 /*  initiated(happens(disturbSilt(Diver),
   		  Time_From,
   		  Time_Until),
   	  disturbedSilt,
   	  []).
 */


% [diver,time]
% Happens(BecomeDisoriented(diver),time) ->
% (!HoldsAt(DisturbedSilt(),time-1) &
%  HoldsAt(DisturbedSilt(),time)).
 %  clausify_pnf=(happens(becomeDisoriented(Diver), Time)->holds_at(neg(disturbedSilt), Time-1), holds_at(disturbedSilt, Time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',532).

 /*  not(happens(becomeDisoriented(Diver), Time)) :-
       (   not(holds_at(neg(disturbedSilt), Time-1))
       ;   not(holds_at(disturbedSilt, Time))
       ).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',532).

 /*  fix_axiom_head(Time) ->
       [ not(happens(becomeDisoriented(Diver), Time)),
          (->),
         not(becomeDisoriented(Diver))
       ].
 */
 %   pl=axiom(not(becomeDisoriented(Diver)), [(holds_at(disturbedSilt, Time_At);not(disturbedSilt)), b(Time_At, Time)]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',532).

 /*  (   (   holds_at(disturbedSilt, Time_At)
       ;   not(disturbedSilt)
       ),
       b(Time_At, Time)
   ->  not(becomeDisoriented(Diver))
   ).
 */
if (disturbedSilt at Time_At;not disturbedSilt), b(Time_At, Time)then not becomeDisoriented(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',532).

 /*   reactive_rule([  (at(disturbedSilt, Time_At);not(disturbedSilt)),
                      b(Time_At, Time)
                    ],
                    [not(becomeDisoriented(Diver))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',532).

 /*   reactive_rule([  (at(disturbedSilt, Time_At);not(disturbedSilt)),
                      b(Time_At, Time)
                    ],
                    [not(becomeDisoriented(Diver))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',532).

 /*  holds_at(neg(disturbedSilt), Time-1) :-
       happens(becomeDisoriented(Diver), Time).
 */

 /*  pl=axiom(requires(becomeDisoriented(Diver),When_Time),
         [metreqs(becomeDisoriented(Diver))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',532).

 /*  metreqs(becomeDisoriented(Diver)) ->
       requires(becomeDisoriented(Diver), When_Time).
 */
if metreqs(becomeDisoriented(Diver))then requires(becomeDisoriented(Diver), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',532).

 /*  reactive_rule([metreqs(becomeDisoriented(Diver))],
   	      [ requires(becomeDisoriented(Diver),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',532).

 /*  reactive_rule([metreqs(becomeDisoriented(Diver))],
   	      [ requires(becomeDisoriented(Diver),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',532).

 /*  fix_axiom_head(When_Time) ->
       [ holds_at(metreqs(becomeDisoriented(Diver)), When_Time),
          (->),
         metreqs(becomeDisoriented(Diver))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',532).

 /*  pl=axiom(metreqs(becomeDisoriented(Diver)),
         [ holds_at(neg(disturbedSilt),Time_At4),
   	b(Time_At4,When_Time)
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',532).

 /*  (   holds_at(neg(disturbedSilt), Time_At4),
       b(Time_At4, When_Time)
   ->  metreqs(becomeDisoriented(Diver))
   ).
 */
if not disturbedSilt at Time_At4, b(Time_At4, When_Time)then metreqs(becomeDisoriented(Diver)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',532).

 /*  reactive_rule([ holds(not(disturbedSilt),Time_At4),
   		b(Time_At4,When_Time)
   	      ],
   	      [metreqs(becomeDisoriented(Diver))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',532).

 /*  reactive_rule([ holds(not(disturbedSilt),Time_At4),
   		b(Time_At4,When_Time)
   	      ],
   	      [metreqs(becomeDisoriented(Diver))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',532).

 /*  holds_at(disturbedSilt, When_Time) :-
       happens(becomeDisoriented(Diver), When_Time).
 */

 /*  pl=axiom(requires(becomeDisoriented(Diver),When_Time),
         [metreqs(becomeDisoriented(Diver))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',532).

 /*  metreqs(becomeDisoriented(Diver)) ->
       requires(becomeDisoriented(Diver), When_Time).
 */
if metreqs(becomeDisoriented(Diver))then requires(becomeDisoriented(Diver), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',532).

 /*  reactive_rule([metreqs(becomeDisoriented(Diver))],
   	      [ requires(becomeDisoriented(Diver),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',532).

 /*  reactive_rule([metreqs(becomeDisoriented(Diver))],
   	      [ requires(becomeDisoriented(Diver),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',532).

 /*  fix_axiom_head(When_Time) ->
       [ holds_at(metreqs(becomeDisoriented(Diver)), When_Time),
          (->),
         metreqs(becomeDisoriented(Diver))
       ].
 */
 %  pl=axiom(metreqs(becomeDisoriented(Diver)),[disturbedSilt]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',532).

 /*  disturbedSilt ->
       metreqs(becomeDisoriented(Diver)).
 */
if disturbedSilt then metreqs(becomeDisoriented(Diver)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',532).

 /*  reactive_rule([holds(disturbedSilt,Holds)],
   	      [metreqs(becomeDisoriented(Diver))]).
 */

 /*  reactive_rule([holds(disturbedSilt,Holds)],
   	      [metreqs(becomeDisoriented(Diver))]).
 */

% event Panic(diver)
 %  blue=event(panic(diver)).
 %  event(panic(diver)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',535).
events([panic/1]).
 %  events([panic/1]).
mpred_prop(panic(diver),event).
 %  mpred_prop(panic(diver),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',538).
% [diver,time]
 % Happens(Panic(diver),time) ->
% HoldsAt(Disoriented(diver),time) |
% HoldsAt(UncontrolledBuoyancy(diver),time) |
% ({equipment} Happens(Lose(diver,equipment),time-1)) |
% Happens(Vomit(diver),time-1).
 %  clausify_pnf=(happens(panic(Diver), Time)->holds_at(disoriented(Diver), Time);holds_at(uncontrolledBuoyancy(Diver), Time);exists([Equipment], happens(lose(Diver, Equipment), Time-1));happens(vomit(Diver), Time-1)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',538).

 /*  holds_at(disoriented(Diver), Time) :-
       not(holds_at(uncontrolledBuoyancy(Diver), Time)),
       not(happens(lose(Diver, Equipment), Time-1)),
       not(happens(vomit(Diver), Time-1)),
       happens(panic(Diver), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',538).

 /*  fix_axiom_head(Time) ->
       [ holds_at(disoriented(Diver), Time),
          (->),
         disoriented(Diver)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',538).

 /*  pl=axiom(disoriented(Diver),
         [ not(uncontrolledBuoyancy(Diver)),
   	not(happens(lose(Diver,Equipment),When)),
   	not(happens(vomit(Diver),When)),
   	panic(Diver),
   	b(When,Time)
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',538).

 /*  (   not(uncontrolledBuoyancy(Diver)),
       not(happens(lose(Diver, Equipment), When)),
       not(happens(vomit(Diver), When)),
       panic(Diver),
       b(When, Time)
   ->  disoriented(Diver)
   ).
 */
if not uncontrolledBuoyancy(Diver), not happens(lose(Diver, Equipment), When), not happens(vomit(Diver), When), panic(Diver), b(When, Time)then disoriented(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',538).

 /*  reactive_rule([ holds(not(uncontrolledBuoyancy(Diver)),
   		      Holds),
   		not(happens(lose(Diver,Equipment),
   			    When)),
   		not(happens(vomit(Diver),When)),
   		panic(Diver),
   		b(When,Time)
   	      ],
   	      [holds(disoriented(Diver),Holds5)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',538).

 /*  reactive_rule([ holds(not(uncontrolledBuoyancy(Diver)),
   		      Holds),
   		not(happens(lose(Diver,Equipment),
   			    When)),
   		not(happens(vomit(Diver),When)),
   		panic(Diver),
   		b(When,Time)
   	      ],
   	      [holds(disoriented(Diver),Holds5)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',538).

 /*  holds_at(uncontrolledBuoyancy(Diver), Time) :-
       not(happens(lose(Diver, Equipment), Time-1)),
       not(happens(vomit(Diver), Time-1)),
       not(holds_at(disoriented(Diver), Time)),
       happens(panic(Diver), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',538).

 /*  fix_axiom_head(Time) ->
       [ holds_at(uncontrolledBuoyancy(Diver), Time),
          (->),
         uncontrolledBuoyancy(Diver)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',538).

 /*  pl=axiom(uncontrolledBuoyancy(Diver),
         [ not(happens(lose(Diver,Equipment),When6)),
   	not(happens(vomit(Diver),When6)),
   	not(disoriented(Diver)),
   	panic(Diver),
   	b(When6,Time)
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',538).

 /*  (   not(happens(lose(Diver, Equipment), When6)),
       not(happens(vomit(Diver), When6)),
       not(disoriented(Diver)),
       panic(Diver),
       b(When6, Time)
   ->  uncontrolledBuoyancy(Diver)
   ).
 */
if not happens(lose(Diver, Equipment), When6), not happens(vomit(Diver), When6), not disoriented(Diver), panic(Diver), b(When6, Time)then uncontrolledBuoyancy(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',538).

 /*  reactive_rule([ not(happens(lose(Diver,Equipment),
   			    When6)),
   		not(happens(vomit(Diver),When6)),
   		holds(not(disoriented(Diver)),Holds7),
   		panic(Diver),
   		b(When6,Time)
   	      ],
   	      [holds(uncontrolledBuoyancy(Diver),Holds8)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',538).

 /*  reactive_rule([ not(happens(lose(Diver,Equipment),
   			    When6)),
   		not(happens(vomit(Diver),When6)),
   		holds(not(disoriented(Diver)),Holds7),
   		panic(Diver),
   		b(When6,Time)
   	      ],
   	      [holds(uncontrolledBuoyancy(Diver),Holds8)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',538).

 /*  happens(lose(Diver, Equipment), Time-1) :-
       not(happens(vomit(Diver), Time-1)),
       not(holds_at(uncontrolledBuoyancy(Diver), Time)),
       not(holds_at(disoriented(Diver), Time)),
       happens(panic(Diver), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',538).

 /*  fix_axiom_head(Time) ->
       [ holds_at(neg(uncontrolledBuoyancy(Diver)), Time),
          (->),
         not(uncontrolledBuoyancy(Diver))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',538).

 /*  fix_axiom_head(Time) ->
       [ holds_at(neg(disoriented(Diver)), Time),
          (->),
         not(disoriented(Diver))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',538).

 /*  fix_axiom_head(Time) ->
       [happens(panic(Diver), Time), ->, panic(Diver)].
 */

 /*  pl=axiom(happens(lose(Diver,Equipment),When9),
         [ not(happens(vomit(Diver),When9)),
   	not(uncontrolledBuoyancy(Diver)),
   	not(disoriented(Diver)),
   	panic(Diver),
   	b(When9,Time)
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',538).

 /*  (   not(happens(vomit(Diver), When9)),
       not(uncontrolledBuoyancy(Diver)),
       not(disoriented(Diver)),
       panic(Diver),
       b(When9, Time)
   ->  happens(lose(Diver, Equipment), When9)
   ).
 */
if not happens(vomit(Diver), When9), not uncontrolledBuoyancy(Diver), not disoriented(Diver), panic(Diver), b(When9, Time)then happens(lose(Diver, Equipment), When9).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',538).

 /*  reactive_rule([ not(happens(vomit(Diver),When9)),
   		holds(not(uncontrolledBuoyancy(Diver)),
   		      Holds10),
   		holds(not(disoriented(Diver)),Holds10),
   		panic(Diver),
   		b(When9,Time)
   	      ],
   	      [happens(lose(Diver,Equipment),When9)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',538).

 /*  reactive_rule([ not(happens(vomit(Diver),When9)),
   		holds(not(uncontrolledBuoyancy(Diver)),
   		      Holds10),
   		holds(not(disoriented(Diver)),Holds10),
   		panic(Diver),
   		b(When9,Time)
   	      ],
   	      [happens(lose(Diver,Equipment),When9)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',538).

 /*  happens(vomit(Diver), Time-1) :-
       not(happens(lose(Diver, Equipment), Time-1)),
       not(holds_at(uncontrolledBuoyancy(Diver), Time)),
       not(holds_at(disoriented(Diver), Time)),
       happens(panic(Diver), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',538).

 /*  fix_axiom_head(Time) ->
       [ holds_at(neg(uncontrolledBuoyancy(Diver)), Time),
          (->),
         not(uncontrolledBuoyancy(Diver))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',538).

 /*  fix_axiom_head(Time) ->
       [ holds_at(neg(disoriented(Diver)), Time),
          (->),
         not(disoriented(Diver))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',538).

 /*  fix_axiom_head(Time) ->
       [happens(panic(Diver), Time), ->, panic(Diver)].
 */

 /*  pl=axiom(happens(vomit(Diver),When11),
         [ not(happens(lose(Diver,Equipment),When11)),
   	not(uncontrolledBuoyancy(Diver)),
   	not(disoriented(Diver)),
   	panic(Diver),
   	b(When11,Time)
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',538).

 /*  (   not(happens(lose(Diver, Equipment), When11)),
       not(uncontrolledBuoyancy(Diver)),
       not(disoriented(Diver)),
       panic(Diver),
       b(When11, Time)
   ->  happens(vomit(Diver), When11)
   ).
 */
if not happens(lose(Diver, Equipment), When11), not uncontrolledBuoyancy(Diver), not disoriented(Diver), panic(Diver), b(When11, Time)then happens(vomit(Diver), When11).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',538).

 /*  reactive_rule([ not(happens(lose(Diver,Equipment),
   			    When11)),
   		holds(not(uncontrolledBuoyancy(Diver)),
   		      Holds12),
   		holds(not(disoriented(Diver)),Holds12),
   		panic(Diver),
   		b(When11,Time)
   	      ],
   	      [happens(vomit(Diver),When11)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',538).

 /*  reactive_rule([ not(happens(lose(Diver,Equipment),
   			    When11)),
   		holds(not(uncontrolledBuoyancy(Diver)),
   		      Holds12),
   		holds(not(disoriented(Diver)),Holds12),
   		panic(Diver),
   		b(When11,Time)
   	      ],
   	      [happens(vomit(Diver),When11)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',538).

 /*  not(happens(panic(Diver), Time)) :-
       not(holds_at(disoriented(Diver), Time)),
       not(holds_at(uncontrolledBuoyancy(Diver), Time)),
       not(happens(lose(Diver, Equipment), Time-1)),
       not(happens(vomit(Diver), Time-1)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',538).

 /*  fix_axiom_head(Time) ->
       [not(happens(panic(Diver), Time)), ->, not(panic(Diver))].
 */

 /*  pl=axiom(not(panic(Diver)),
         [ not(disoriented(Diver)),
   	not(uncontrolledBuoyancy(Diver)),
   	not(happens(lose(Diver,Equipment),When13)),
   	not(happens(vomit(Diver),When13)),
   	b(When13,Time)
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',538).

 /*  (   not(disoriented(Diver)),
       not(uncontrolledBuoyancy(Diver)),
       not(happens(lose(Diver, Equipment), When13)),
       not(happens(vomit(Diver), When13)),
       b(When13, Time)
   ->  not(panic(Diver))
   ).
 */
if not disoriented(Diver), not uncontrolledBuoyancy(Diver), not happens(lose(Diver, Equipment), When13), not happens(vomit(Diver), When13), b(When13, Time)then not panic(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',538).

 /*  reactive_rule([ holds(not(disoriented(Diver)),Holds14),
   		holds(not(uncontrolledBuoyancy(Diver)),
   		      Holds14),
   		not(happens(lose(Diver,Equipment),
   			    When13)),
   		not(happens(vomit(Diver),When13)),
   		b(When13,Time)
   	      ],
   	      [not(panic(Diver))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',538).

 /*  reactive_rule([ holds(not(disoriented(Diver)),Holds14),
   		holds(not(uncontrolledBuoyancy(Diver)),
   		      Holds14),
   		not(happens(lose(Diver,Equipment),
   			    When13)),
   		not(happens(vomit(Diver),When13)),
   		b(When13,Time)
   	      ],
   	      [not(panic(Diver))]).
 */

% event Vomit(diver)
 %  blue=event(vomit(diver)).
 %  event(vomit(diver)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',543).
events([vomit/1]).
 %  events([vomit/1]).
mpred_prop(vomit(diver),event).
 %  mpred_prop(vomit(diver),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',546).
%; conditions

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',548).
% fluent Unconscious(diver)
 %  blue=fluent(unconscious(diver)).
 %  fluent(unconscious(diver)).
fluents([unconscious/1]).
 %  fluents([unconscious/1]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',548).
mpred_prop(unconscious(diver),fluent).
 %  mpred_prop(unconscious(diver),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',550).
% event GoUnconscious(diver)
 %  blue=event(goUnconscious(diver)).
 %  event(goUnconscious(diver)).
events([goUnconscious/1]).
 %  events([goUnconscious/1]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',550).
mpred_prop(goUnconscious(diver),event).
 %  mpred_prop(goUnconscious(diver),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',552).
% event RegainConsciousness(diver)
 %  blue=event(regainConsciousness(diver)).
 %  event(regainConsciousness(diver)).
events([regainConsciousness/1]).
 %  events([regainConsciousness/1]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',552).
mpred_prop(regainConsciousness(diver),event).
 %  mpred_prop(regainConsciousness(diver),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',554).
% [diver,time]
% Initiates(GoUnconscious(diver),Unconscious(diver),time).

 /*  pl=axiom(initiates(goUnconscious(Diver),
   		unconscious(Diver),
   		Time),
         []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',554).

 /*  initiates(goUnconscious(Diver),
   	  unconscious(Diver),
   	  Time).
 */
goUnconscious(Diver)initiates unconscious(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',554).

 /*  initiated(happens(goUnconscious(Diver),
   		  Time_From,
   		  Time_Until),
   	  unconscious(Diver),
   	  []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',554).

 /*  initiated(happens(goUnconscious(Diver),
   		  Time_From,
   		  Time_Until),
   	  unconscious(Diver),
   	  []).
 */


% [diver,time]
% Terminates(RegainConsciousness(diver),Unconscious(diver),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',558).

 /*  pl=axiom(terminates(regainConsciousness(Diver),
   		 unconscious(Diver),
   		 Time),
         []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',558).

 /*  terminates(regainConsciousness(Diver),
   	   unconscious(Diver),
   	   Time).
 */
regainConsciousness(Diver)terminates unconscious(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',558).

 /*  terminated(happens(regainConsciousness(Diver),
   		   Time_From,
   		   Time_Until),
   	   unconscious(Diver),
   	   []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',558).

 /*  terminated(happens(regainConsciousness(Diver),
   		   Time_From,
   		   Time_Until),
   	   unconscious(Diver),
   	   []).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',560).
% [diver,time]
% Happens(GoUnconscious(diver),time) ->
% Happens(RapidAscendToSurface(diver),time).
 %  clausify_pnf=(happens(goUnconscious(Diver), Time)->happens(rapidAscendToSurface(Diver), Time)).

 /*  happens(rapidAscendToSurface(Diver), Time) :-
       happens(goUnconscious(Diver), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',560).

 /*  fix_axiom_head(Time) ->
       [ happens(rapidAscendToSurface(Diver), Time),
          (->),
         rapidAscendToSurface(Diver)
       ].
 */
 %  pl=axiom(rapidAscendToSurface(Diver),[goUnconscious(Diver)]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',560).

 /*  goUnconscious(Diver) ->
       rapidAscendToSurface(Diver).
 */
if goUnconscious(Diver)then rapidAscendToSurface(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',560).

 /*  reactive_rule([ happens(goUnconscious(Diver),
   			Time_From,
   			Time_Until)
   	      ],
   	      [rapidAscendToSurface(Diver)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',560).

 /*  reactive_rule([ happens(goUnconscious(Diver),
   			Time_From,
   			Time_Until)
   	      ],
   	      [rapidAscendToSurface(Diver)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',560).

 /*  not(happens(goUnconscious(Diver), Time)) :-
       not(happens(rapidAscendToSurface(Diver), Time)).
 */

 /*  fix_axiom_head(Time) ->
       [ not(happens(goUnconscious(Diver), Time)),
          (->),
         not(goUnconscious(Diver))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',560).

 /*  pl=axiom(not(goUnconscious(Diver)),
         [not(rapidAscendToSurface(Diver))]).
 */

 /*  not(rapidAscendToSurface(Diver)) ->
       not(goUnconscious(Diver)).
 */
if not rapidAscendToSurface(Diver)then not goUnconscious(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',560).

 /*  reactive_rule([not(rapidAscendToSurface(Diver))],
   	      [not(goUnconscious(Diver))]).
 */

 /*  reactive_rule([not(rapidAscendToSurface(Diver))],
   	      [not(goUnconscious(Diver))]).
 */

% fluent HasEarPain(diver)
 %  blue=fluent(hasEarPain(diver)).
 %  fluent(hasEarPain(diver)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',563).
fluents([hasEarPain/1]).
 %  fluents([hasEarPain/1]).
mpred_prop(hasEarPain(diver),fluent).
 %  mpred_prop(hasEarPain(diver),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',566).
% event StartEarPain(diver)
 %  blue=event(startEarPain(diver)).
 %  event(startEarPain(diver)).
events([startEarPain/1]).
 %  events([startEarPain/1]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',566).
mpred_prop(startEarPain(diver),event).
 %  mpred_prop(startEarPain(diver),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',568).
% [diver,time]
 % Initiates(StartEarPain(diver),HasEarPain(diver),time).

 /*  pl=axiom(initiates(startEarPain(Diver),
   		hasEarPain(Diver),
   		Time),
         []).
 */
 %  initiates(startEarPain(Diver),hasEarPain(Diver),Time).
startEarPain(Diver)initiates hasEarPain(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',568).

 /*  initiated(happens(startEarPain(Diver),
   		  Time_From,
   		  Time_Until),
   	  hasEarPain(Diver),
   	  []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',568).

 /*  initiated(happens(startEarPain(Diver),
   		  Time_From,
   		  Time_Until),
   	  hasEarPain(Diver),
   	  []).
 */

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',570).
% fluent HasRupturedEardrum(diver)
 %  blue=fluent(hasRupturedEardrum(diver)).
 %  fluent(hasRupturedEardrum(diver)).
fluents([hasRupturedEardrum/1]).
 %  fluents([hasRupturedEardrum/1]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',570).
mpred_prop(hasRupturedEardrum(diver),fluent).
 %  mpred_prop(hasRupturedEardrum(diver),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',572).
% event RuptureEardrum(diver)
 %  blue=event(ruptureEardrum(diver)).
 %  event(ruptureEardrum(diver)).
events([ruptureEardrum/1]).
 %  events([ruptureEardrum/1]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',572).
mpred_prop(ruptureEardrum(diver),event).
 %  mpred_prop(ruptureEardrum(diver),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',574).
% [diver,time]
% Initiates(RuptureEardrum(diver),HasRupturedEardrum(diver),time).

 /*  pl=axiom(initiates(ruptureEardrum(Diver),
   		hasRupturedEardrum(Diver),
   		Time),
         []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',574).

 /*  initiates(ruptureEardrum(Diver),
   	  hasRupturedEardrum(Diver),
   	  Time).
 */
ruptureEardrum(Diver)initiates hasRupturedEardrum(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',574).

 /*  initiated(happens(ruptureEardrum(Diver),
   		  Time_From,
   		  Time_Until),
   	  hasRupturedEardrum(Diver),
   	  []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',574).

 /*  initiated(happens(ruptureEardrum(Diver),
   		  Time_From,
   		  Time_Until),
   	  hasRupturedEardrum(Diver),
   	  []).
 */

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',576).
% fluent ConditionOK(diver)
 %  blue=fluent(conditionOK(diver)).
 %  fluent(conditionOK(diver)).
fluents([conditionOK/1]).
 %  fluents([conditionOK/1]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',576).
mpred_prop(conditionOK(diver),fluent).
 %  mpred_prop(conditionOK(diver),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',578).
% fluent HasDecompressionIllness(diver)
 %  blue=fluent(hasDecompressionIllness(diver)).
 %  fluent(hasDecompressionIllness(diver)).
fluents([hasDecompressionIllness/1]).
 %  fluents([hasDecompressionIllness/1]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',578).
mpred_prop(hasDecompressionIllness(diver),fluent).
 %  mpred_prop(hasDecompressionIllness(diver),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',580).
% event StartDecompressionIllness(diver)
 %  blue=event(startDecompressionIllness(diver)).
 %  event(startDecompressionIllness(diver)).
events([startDecompressionIllness/1]).
 %  events([startDecompressionIllness/1]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',580).
mpred_prop(startDecompressionIllness(diver),event).
 %  mpred_prop(startDecompressionIllness(diver),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',582).
% [diver,time]
% Initiates(StartDecompressionIllness(diver),
%           HasDecompressionIllness(diver),
%           time).

 /*  pl=axiom(initiates(startDecompressionIllness(Diver),
   		hasDecompressionIllness(Diver),
   		Time),
         []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',582).

 /*  initiates(startDecompressionIllness(Diver),
   	  hasDecompressionIllness(Diver),
   	  Time).
 */
startDecompressionIllness(Diver)initiates hasDecompressionIllness(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',582).

 /*  initiated(happens(startDecompressionIllness(Diver),
   		  Time_From,
   		  Time_Until),
   	  hasDecompressionIllness(Diver),
   	  []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',582).

 /*  initiated(happens(startDecompressionIllness(Diver),
   		  Time_From,
   		  Time_Until),
   	  hasDecompressionIllness(Diver),
   	  []).
 */

% fluent SignalingDecompress(computer,diver)
 %  blue=fluent(signalingDecompress(computer,diver)).
 %  fluent(signalingDecompress(computer,diver)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',586).
fluents([signalingDecompress/2]).
 %  fluents([signalingDecompress/2]).
mpred_prop(signalingDecompress(computer,diver),fluent).
 %  mpred_prop(signalingDecompress(computer,diver),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',589).
% fluent SignalingLowOnAir(computer,airtank,diver)
 %  blue=fluent(signalingLowOnAir(computer,airtank,diver)).
 %  fluent(signalingLowOnAir(computer,airtank,diver)).
fluents([signalingLowOnAir/3]).
 %  fluents([signalingLowOnAir/3]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',589).
mpred_prop(signalingLowOnAir(computer,airtank,diver),fluent).
 %  mpred_prop(signalingLowOnAir(computer,airtank,diver),fluent).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',591).
% [computer,airtank,diver,time]
% HoldsAt(SignalingLowOnAir(computer,airtank,diver),time) ->
% HoldsAt(LowOnAir(airtank),time).
 %  clausify_pnf=(holds_at(signalingLowOnAir(Computer, Airtank, Diver), Time)->holds_at(lowOnAir(Airtank), Time)).

 /*  holds_at(lowOnAir(Airtank), Time) :-
       holds_at(signalingLowOnAir(Computer, Airtank, Diver),
                Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',591).

 /*  fix_axiom_head(Time) ->
       [holds_at(lowOnAir(Airtank), Time), ->, lowOnAir(Airtank)].
 */

 /*  pl=axiom(lowOnAir(Airtank),
         [signalingLowOnAir(Computer,Airtank,Diver)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',591).

 /*  signalingLowOnAir(Computer, Airtank, Diver) ->
       lowOnAir(Airtank).
 */
if signalingLowOnAir(Computer, Airtank, Diver)then lowOnAir(Airtank).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',591).

 /*  reactive_rule([ signalingLowOnAir(Computer,
   				  Airtank,
   				  Diver)
   	      ],
   	      [lowOnAir(Airtank)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',591).

 /*  reactive_rule([ signalingLowOnAir(Computer,
   				  Airtank,
   				  Diver)
   	      ],
   	      [lowOnAir(Airtank)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',591).

 /*  not(holds_at(signalingLowOnAir(Computer, Airtank, Diver), Time)) :-
       not(holds_at(lowOnAir(Airtank), Time)).
 */

 /*  pl=axiom(not(signalingLowOnAir(Computer,Airtank,Diver)),
         [not(lowOnAir(Airtank))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',591).

 /*  not(lowOnAir(Airtank)) ->
       not(signalingLowOnAir(Computer, Airtank, Diver)).
 */
if not lowOnAir(Airtank)then not signalingLowOnAir(Computer, Airtank, Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',591).

 /*  reactive_rule([not(lowOnAir(Airtank))],
   	      [ not(signalingLowOnAir(Computer,
   				      Airtank,
   				      Diver))
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',591).

 /*  reactive_rule([not(lowOnAir(Airtank))],
   	      [ not(signalingLowOnAir(Computer,
   				      Airtank,
   				      Diver))
   	      ]).
 */


% [computer,diver,time]
% HoldsAt(SignalingDecompress(computer,diver),time) ->
% !{time1} time1<time & Happens(Decompress(diver),time1).
 %  clausify_pnf=(holds_at(signalingDecompress(Computer, Diver), Time)->not(exists([Time1],  (Time1<Time, happens(decompress(Diver), Time1))))).

 /*  not(happens(decompress(Diver), Time1)) :-
       comparison(Time1, Time, <),
       holds_at(signalingDecompress(Computer, Diver), Time).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',596).

 /*  fix_axiom_head(Time1) ->
       [ not(happens(decompress(Diver), Time1)),
          (->),
         not(decompress(Diver))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',596).

 /*  pl=axiom(not(decompress(Diver)),
         [ comparison(Time1,Time,<),
   	holds_at(signalingDecompress(Computer,Diver),
   		 Time)
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',596).

 /*  (   comparison(Time1, Time, <),
       holds_at(signalingDecompress(Computer, Diver), Time)
   ->  not(decompress(Diver))
   ).
 */
if comparison(Time1, Time, <), signalingDecompress(Computer, Diver)at Time then not decompress(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',596).

 /*  reactive_rule([ comparison(Time1,Time,<),
   		holds(signalingDecompress(Computer,Diver),
   		      Time)
   	      ],
   	      [not(decompress(Diver))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',596).

 /*  reactive_rule([ comparison(Time1,Time,<),
   		holds(signalingDecompress(Computer,Diver),
   		      Time)
   	      ],
   	      [not(decompress(Diver))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',596).

 /*  not(holds_at(signalingDecompress(Computer, Diver), Time)) :-
       comparison(Time1, Time, <),
       happens(decompress(Diver), Time1).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',596).

 /*  pl=axiom(not(signalingDecompress(Computer,Diver)),
         [ comparison(Time1,Time,<),
   	happens(decompress(Diver),Time1)
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',596).

 /*  (   comparison(Time1, Time, <),
       happens(decompress(Diver), Time1)
   ->  not(signalingDecompress(Computer, Diver))
   ).
 */
if comparison(Time1, Time, <), happens(decompress(Diver), Time1)then not signalingDecompress(Computer, Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',596).

 /*  reactive_rule([ comparison(Time1,Time,<),
   		happens(decompress(Diver),Time1)
   	      ],
   	      [ holds(not(signalingDecompress(Computer,
   					      Diver)),
   		      Holds)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',596).

 /*  reactive_rule([ comparison(Time1,Time,<),
   		happens(decompress(Diver),Time1)
   	      ],
   	      [ holds(not(signalingDecompress(Computer,
   					      Diver)),
   		      Holds)
   	      ]).
 */

% event Decompress(diver)
 %  blue=event(decompress(diver)).
 %  event(decompress(diver)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',598).
events([decompress/1]).
 %  events([decompress/1]).
mpred_prop(decompress(diver),event).
 %  mpred_prop(decompress(diver),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',601).
% event EqualizeEars(diver)
 %  blue=event(equalizeEars(diver)).
 %  event(equalizeEars(diver)).
events([equalizeEars/1]).
 %  events([equalizeEars/1]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',601).
mpred_prop(equalizeEars(diver),event).
 %  mpred_prop(equalizeEars(diver),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',603).
% [diver,time]
% (Happens(Descend1(diver),time) | Happens(Ascend1(diver),time)) &
% !Happens(EqualizeEars(diver),time) ->
% Happens(StartEarPain(diver),time) &
% Happens(RuptureEardrum(diver),time).
 %  clausify_pnf=((happens(descend1(Diver), Time);happens(ascend1(Diver), Time)), not(happens(equalizeEars(Diver), Time))->happens(startEarPain(Diver), Time), happens(ruptureEardrum(Diver), Time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',603).

 /*  happens(startEarPain(Diver), Time) :-
       not(happens(equalizeEars(Diver), Time)),
       (   happens(descend1(Diver), Time)
       ;   happens(ascend1(Diver), Time)
       ).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',603).

 /*  fix_axiom_head(Time) ->
       [ happens(startEarPain(Diver), Time),
          (->),
         startEarPain(Diver)
       ].
 */
 %   pl=axiom(startEarPain(Diver), [not(equalizeEars(Diver)),  (descend1(Diver);ascend1(Diver))]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',603).

 /*  (   not(equalizeEars(Diver)),
       (   descend1(Diver)
       ;   ascend1(Diver)
       )
   ->  startEarPain(Diver)
   ).
 */
if not equalizeEars(Diver), (descend1(Diver);ascend1(Diver))then startEarPain(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',603).

 /*   reactive_rule([ not(equalizeEars(Diver)),
                       (descend1(Diver);ascend1(Diver))
                    ],
                    [ happens(startEarPain(Diver),
                              Time_From,
                              Time_Until)
                    ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',603).

 /*   reactive_rule([ not(equalizeEars(Diver)),
                       (descend1(Diver);ascend1(Diver))
                    ],
                    [ happens(startEarPain(Diver),
                              Time_From,
                              Time_Until)
                    ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',603).

 /*  happens(ruptureEardrum(Diver), Time) :-
       not(happens(equalizeEars(Diver), Time)),
       (   happens(descend1(Diver), Time)
       ;   happens(ascend1(Diver), Time)
       ).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',603).

 /*  fix_axiom_head(Time) ->
       [ happens(ruptureEardrum(Diver), Time),
          (->),
         ruptureEardrum(Diver)
       ].
 */
 %   pl=axiom(ruptureEardrum(Diver), [not(equalizeEars(Diver)),  (descend1(Diver);ascend1(Diver))]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',603).

 /*  (   not(equalizeEars(Diver)),
       (   descend1(Diver)
       ;   ascend1(Diver)
       )
   ->  ruptureEardrum(Diver)
   ).
 */
if not equalizeEars(Diver), (descend1(Diver);ascend1(Diver))then ruptureEardrum(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',603).

 /*   reactive_rule([ not(equalizeEars(Diver)),
                       (descend1(Diver);ascend1(Diver))
                    ],
                    [ happens(ruptureEardrum(Diver),
                              Time_From4,
                              Time_Until5)
                    ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',603).

 /*   reactive_rule([ not(equalizeEars(Diver)),
                       (descend1(Diver);ascend1(Diver))
                    ],
                    [ happens(ruptureEardrum(Diver),
                              Time_From4,
                              Time_Until5)
                    ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',603).

 /*  happens(equalizeEars(Diver), Time) :-
       (   happens(descend1(Diver), Time)
       ;   happens(ascend1(Diver), Time)
       ),
       (   not(happens(startEarPain(Diver), Time))
       ;   not(happens(ruptureEardrum(Diver), Time))
       ).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',603).

 /*  fix_axiom_head(Time) ->
       [ happens(equalizeEars(Diver), Time),
          (->),
         equalizeEars(Diver)
       ].
 */
 %   pl=axiom(equalizeEars(Diver), [(descend1(Diver);ascend1(Diver)),  (not(startEarPain(Diver));not(ruptureEardrum(Diver)))]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',603).

 /*  (   (   descend1(Diver)
       ;   ascend1(Diver)
       ),
       (   not(startEarPain(Diver))
       ;   not(ruptureEardrum(Diver))
       )
   ->  equalizeEars(Diver)
   ).
 */
if (descend1(Diver);ascend1(Diver)), (not startEarPain(Diver);not ruptureEardrum(Diver))then equalizeEars(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',603).

 /*   reactive_rule([  (descend1(Diver);ascend1(Diver)),
                       (not(startEarPain(Diver));not(ruptureEardrum(Diver)))
                    ],
                    [equalizeEars(Diver)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',603).

 /*   reactive_rule([  (descend1(Diver);ascend1(Diver)),
                       (not(startEarPain(Diver));not(ruptureEardrum(Diver)))
                    ],
                    [equalizeEars(Diver)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',603).

 /*  not(happens(descend1(Diver), Time)) :-
       not(happens(equalizeEars(Diver), Time)),
       (   not(happens(startEarPain(Diver), Time))
       ;   not(happens(ruptureEardrum(Diver), Time))
       ).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',603).

 /*  fix_axiom_head(Time) ->
       [ not(happens(descend1(Diver), Time)),
          (->),
         not(descend1(Diver))
       ].
 */
 %   pl=axiom(not(descend1(Diver)), [not(equalizeEars(Diver)),  (not(startEarPain(Diver));not(ruptureEardrum(Diver)))]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',603).

 /*  (   not(equalizeEars(Diver)),
       (   not(startEarPain(Diver))
       ;   not(ruptureEardrum(Diver))
       )
   ->  not(descend1(Diver))
   ).
 */
if not equalizeEars(Diver), (not startEarPain(Diver);not ruptureEardrum(Diver))then not descend1(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',603).

 /*   reactive_rule([ not(equalizeEars(Diver)),
                       (not(startEarPain(Diver));not(ruptureEardrum(Diver)))
                    ],
                    [not(descend1(Diver))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',603).

 /*   reactive_rule([ not(equalizeEars(Diver)),
                       (not(startEarPain(Diver));not(ruptureEardrum(Diver)))
                    ],
                    [not(descend1(Diver))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',603).

 /*  not(happens(ascend1(Diver), Time)) :-
       not(happens(equalizeEars(Diver), Time)),
       (   not(happens(startEarPain(Diver), Time))
       ;   not(happens(ruptureEardrum(Diver), Time))
       ).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',603).

 /*  fix_axiom_head(Time) ->
       [ not(happens(ascend1(Diver), Time)),
          (->),
         not(ascend1(Diver))
       ].
 */
 %   pl=axiom(not(ascend1(Diver)), [not(equalizeEars(Diver)),  (not(startEarPain(Diver));not(ruptureEardrum(Diver)))]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',603).

 /*  (   not(equalizeEars(Diver)),
       (   not(startEarPain(Diver))
       ;   not(ruptureEardrum(Diver))
       )
   ->  not(ascend1(Diver))
   ).
 */
if not equalizeEars(Diver), (not startEarPain(Diver);not ruptureEardrum(Diver))then not ascend1(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',603).

 /*   reactive_rule([ not(equalizeEars(Diver)),
                       (not(startEarPain(Diver));not(ruptureEardrum(Diver)))
                    ],
                    [not(ascend1(Diver))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',603).

 /*   reactive_rule([ not(equalizeEars(Diver)),
                       (not(startEarPain(Diver));not(ruptureEardrum(Diver)))
                    ],
                    [not(ascend1(Diver))]).
 */


% [diver,time]
% Happens(Ascend1(diver),time) &
% !Happens(Decompress(diver),time) ->
% Happens(StartDecompressionIllness(diver),time).
 %  clausify_pnf=(happens(ascend1(Diver), Time), not(happens(decompress(Diver), Time))->happens(startDecompressionIllness(Diver), Time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',610).

 /*  happens(startDecompressionIllness(Diver), Time) :-
       happens(ascend1(Diver), Time),
       not(happens(decompress(Diver), Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',610).

 /*  fix_axiom_head(Time) ->
       [ happens(startDecompressionIllness(Diver), Time),
          (->),
         startDecompressionIllness(Diver)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',610).

 /*  pl=axiom(startDecompressionIllness(Diver),
         [ascend1(Diver),not(decompress(Diver))]).
 */

 /*  (   ascend1(Diver),
       not(decompress(Diver))
   ->  startDecompressionIllness(Diver)
   ).
 */
if ascend1(Diver), not decompress(Diver)then startDecompressionIllness(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',610).

 /*  reactive_rule([ascend1(Diver),not(decompress(Diver))],
   	      [ happens(startDecompressionIllness(Diver),
   			Time_From,
   			Time_Until)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',610).

 /*  reactive_rule([ascend1(Diver),not(decompress(Diver))],
   	      [ happens(startDecompressionIllness(Diver),
   			Time_From,
   			Time_Until)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',610).

 /*  not(happens(ascend1(Diver), Time)) :-
       not(happens(decompress(Diver), Time)),
       not(happens(startDecompressionIllness(Diver), Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',610).

 /*  fix_axiom_head(Time) ->
       [ not(happens(ascend1(Diver), Time)),
          (->),
         not(ascend1(Diver))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',610).

 /*  pl=axiom(not(ascend1(Diver)),
         [ not(decompress(Diver)),
   	not(startDecompressionIllness(Diver))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',610).

 /*  (   not(decompress(Diver)),
       not(startDecompressionIllness(Diver))
   ->  not(ascend1(Diver))
   ).
 */
if not decompress(Diver), not startDecompressionIllness(Diver)then not ascend1(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',610).

 /*  reactive_rule([ not(decompress(Diver)),
   		not(startDecompressionIllness(Diver))
   	      ],
   	      [not(ascend1(Diver))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',610).

 /*  reactive_rule([ not(decompress(Diver)),
   		not(startDecompressionIllness(Diver))
   	      ],
   	      [not(ascend1(Diver))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',610).

 /*  happens(decompress(Diver), Time) :-
       happens(ascend1(Diver), Time),
       not(happens(startDecompressionIllness(Diver), Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',610).

 /*  fix_axiom_head(Time) ->
       [happens(decompress(Diver), Time), ->, decompress(Diver)].
 */

 /*  pl=axiom(decompress(Diver),
         [ ascend1(Diver),
   	not(startDecompressionIllness(Diver))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',610).

 /*  (   ascend1(Diver),
       not(startDecompressionIllness(Diver))
   ->  decompress(Diver)
   ).
 */
if ascend1(Diver), not startDecompressionIllness(Diver)then decompress(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',610).

 /*  reactive_rule([ ascend1(Diver),
   		not(startDecompressionIllness(Diver))
   	      ],
   	      [decompress(Diver)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',610).

 /*  reactive_rule([ ascend1(Diver),
   		not(startDecompressionIllness(Diver))
   	      ],
   	      [decompress(Diver)]).
 */


% [diver1,diver2,time]
% HoldsAt(Holding(diver1,diver2),time) &
% Happens(Ascend1(diver1),time) &
% !Happens(Decompress(diver2),time) ->
% Happens(StartDecompressionIllness(diver2),time).
 %  clausify_pnf=(holds_at(holding(Diver1, Diver2), Time), happens(ascend1(Diver1), Time), not(happens(decompress(Diver2), Time))->happens(startDecompressionIllness(Diver2), Time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',615).

 /*  happens(startDecompressionIllness(Diver2), Time) :-
       holds_at(holding(Diver1, Diver2), Time),
       happens(ascend1(Diver1), Time),
       not(happens(decompress(Diver2), Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',615).

 /*  fix_axiom_head(Time) ->
       [ happens(startDecompressionIllness(Diver2), Time),
          (->),
         startDecompressionIllness(Diver2)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',615).

 /*  pl=axiom(startDecompressionIllness(Diver2),
         [ holding(Diver1,Diver2),
   	ascend1(Diver1),
   	not(decompress(Diver2))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',615).

 /*  (   holding(Diver1, Diver2),
       ascend1(Diver1),
       not(decompress(Diver2))
   ->  startDecompressionIllness(Diver2)
   ).
 */
if holding(Diver1, Diver2), ascend1(Diver1), not decompress(Diver2)then startDecompressionIllness(Diver2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',615).

 /*  reactive_rule([ holds(holding(Diver1,Diver2),Holds),
   		ascend1(Diver1),
   		not(decompress(Diver2))
   	      ],
   	      [ happens(startDecompressionIllness(Diver2),
   			Time_From,
   			Time_Until)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',615).

 /*  reactive_rule([ holds(holding(Diver1,Diver2),Holds),
   		ascend1(Diver1),
   		not(decompress(Diver2))
   	      ],
   	      [ happens(startDecompressionIllness(Diver2),
   			Time_From,
   			Time_Until)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',615).

 /*  not(holds_at(holding(Diver1, Diver2), Time)) :-
       happens(ascend1(Diver1), Time),
       not(happens(decompress(Diver2), Time)),
       not(happens(startDecompressionIllness(Diver2), Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',615).

 /*  pl=axiom(not(holding(Diver1,Diver2)),
         [ ascend1(Diver1),
   	not(decompress(Diver2)),
   	not(startDecompressionIllness(Diver2))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',615).

 /*  (   ascend1(Diver1),
       not(decompress(Diver2)),
       not(startDecompressionIllness(Diver2))
   ->  not(holding(Diver1, Diver2))
   ).
 */
if ascend1(Diver1), not decompress(Diver2), not startDecompressionIllness(Diver2)then not holding(Diver1, Diver2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',615).

 /*  reactive_rule([ ascend1(Diver1),
   		not(decompress(Diver2)),
   		not(startDecompressionIllness(Diver2))
   	      ],
   	      [ holds(not(holding(Diver1,Diver2)),
   		      Holds6)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',615).

 /*  reactive_rule([ ascend1(Diver1),
   		not(decompress(Diver2)),
   		not(startDecompressionIllness(Diver2))
   	      ],
   	      [ holds(not(holding(Diver1,Diver2)),
   		      Holds6)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',615).

 /*  not(happens(ascend1(Diver1), Time)) :-
       not(happens(decompress(Diver2), Time)),
       holds_at(holding(Diver1, Diver2), Time),
       not(happens(startDecompressionIllness(Diver2), Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',615).

 /*  fix_axiom_head(Time) ->
       [ not(happens(ascend1(Diver1), Time)),
          (->),
         not(ascend1(Diver1))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',615).

 /*  pl=axiom(not(ascend1(Diver1)),
         [ not(decompress(Diver2)),
   	holding(Diver1,Diver2),
   	not(startDecompressionIllness(Diver2))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',615).

 /*  (   not(decompress(Diver2)),
       holding(Diver1, Diver2),
       not(startDecompressionIllness(Diver2))
   ->  not(ascend1(Diver1))
   ).
 */
if not decompress(Diver2), holding(Diver1, Diver2), not startDecompressionIllness(Diver2)then not ascend1(Diver1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',615).

 /*  reactive_rule([ not(decompress(Diver2)),
   		holds(holding(Diver1,Diver2),Holds7),
   		not(startDecompressionIllness(Diver2))
   	      ],
   	      [not(ascend1(Diver1))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',615).

 /*  reactive_rule([ not(decompress(Diver2)),
   		holds(holding(Diver1,Diver2),Holds7),
   		not(startDecompressionIllness(Diver2))
   	      ],
   	      [not(ascend1(Diver1))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',615).

 /*  happens(decompress(Diver2), Time) :-
       happens(ascend1(Diver1), Time),
       holds_at(holding(Diver1, Diver2), Time),
       not(happens(startDecompressionIllness(Diver2), Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',615).

 /*  fix_axiom_head(Time) ->
       [happens(decompress(Diver2), Time), ->, decompress(Diver2)].
 */

 /*  pl=axiom(decompress(Diver2),
         [ ascend1(Diver1),
   	holding(Diver1,Diver2),
   	not(startDecompressionIllness(Diver2))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',615).

 /*  (   ascend1(Diver1),
       holding(Diver1, Diver2),
       not(startDecompressionIllness(Diver2))
   ->  decompress(Diver2)
   ).
 */
if ascend1(Diver1), holding(Diver1, Diver2), not startDecompressionIllness(Diver2)then decompress(Diver2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',615).

 /*  reactive_rule([ ascend1(Diver1),
   		holds(holding(Diver1,Diver2),Holds8),
   		not(startDecompressionIllness(Diver2))
   	      ],
   	      [decompress(Diver2)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',615).

 /*  reactive_rule([ ascend1(Diver1),
   		holds(holding(Diver1,Diver2),Holds8),
   		not(startDecompressionIllness(Diver2))
   	      ],
   	      [decompress(Diver2)]).
 */


% [diver,time]
% Happens(Decompress(diver),time) ->
% ({depth} depth>0 & HoldsAt(AtDepth(diver,depth),time)) &
% !HoldsAt(UncontrolledBuoyancy(diver),time).
 %  clausify_pnf=(happens(decompress(Diver), Time)->exists([Depth],  (Depth>0, holds_at(atDepth(Diver, Depth), Time))), holds_at(neg(uncontrolledBuoyancy(Diver)), Time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',621).

 /*  not(happens(decompress(Diver), Time)) :-
       (   not(holds_at(neg(uncontrolledBuoyancy(Diver)), Time))
       ;   not(comparison(Depth, 0, >))
       ;   not(holds_at(atDepth(Diver, Depth), Time))
       ).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',621).

 /*  fix_axiom_head(Time) ->
       [ not(happens(decompress(Diver), Time)),
          (->),
         not(decompress(Diver))
       ].
 */
 %   pl=axiom(not(decompress(Diver)), [(not(not(uncontrolledBuoyancy(Diver)));not(comparison(Depth, 0, >));not(atDepth(Diver, Depth)))]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',621).

 /*  not(not(uncontrolledBuoyancy(Diver)));not(comparison(Depth, 0, >));not(atDepth(Diver, Depth)) ->
       not(decompress(Diver)).
 */
if not not uncontrolledBuoyancy(Diver);not comparison(Depth, 0, >);not atDepth(Diver, Depth)then not decompress(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',621).

 /*   reactive_rule([  (not(not(uncontrolledBuoyancy(Diver)));not(comparison(Depth, 0, >));not(atDepth(Diver, Depth)))
                    ],
                    [not(decompress(Diver))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',621).

 /*   reactive_rule([  (not(not(uncontrolledBuoyancy(Diver)));not(comparison(Depth, 0, >));not(atDepth(Diver, Depth)))
                    ],
                    [not(decompress(Diver))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',621).

 /*  holds_at(neg(uncontrolledBuoyancy(Diver)), Time) :-
       happens(decompress(Diver), Time).
 */

 /*  pl=axiom(requires(decompress(Diver),When_Time),
         [metreqs(decompress(Diver))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',621).

 /*  metreqs(decompress(Diver)) ->
       requires(decompress(Diver), When_Time).
 */
if metreqs(decompress(Diver))then requires(decompress(Diver), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',621).

 /*  reactive_rule([metreqs(decompress(Diver))],
   	      [requires(decompress(Diver),When_Time)]).
 */

 /*  reactive_rule([metreqs(decompress(Diver))],
   	      [requires(decompress(Diver),When_Time)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',621).

 /*  fix_axiom_head(When_Time) ->
       [ holds_at(metreqs(decompress(Diver)), When_Time),
          (->),
         metreqs(decompress(Diver))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',621).

 /*  pl=axiom(metreqs(decompress(Diver)),
         [not(uncontrolledBuoyancy(Diver))]).
 */

 /*  not(uncontrolledBuoyancy(Diver)) ->
       metreqs(decompress(Diver)).
 */
if not uncontrolledBuoyancy(Diver)then metreqs(decompress(Diver)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',621).

 /*  reactive_rule([ holds(not(uncontrolledBuoyancy(Diver)),
   		      Holds)
   	      ],
   	      [metreqs(decompress(Diver))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',621).

 /*  reactive_rule([ holds(not(uncontrolledBuoyancy(Diver)),
   		      Holds)
   	      ],
   	      [metreqs(decompress(Diver))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',621).

 /*  comparison(Depth, 0, >) :-
       happens(decompress(Diver), When_Time).
 */

 /*  pl=axiom(requires(decompress(Diver),When_Time),
         [metreqs(decompress(Diver))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',621).

 /*  metreqs(decompress(Diver)) ->
       requires(decompress(Diver), When_Time).
 */
if metreqs(decompress(Diver))then requires(decompress(Diver), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',621).

 /*  reactive_rule([metreqs(decompress(Diver))],
   	      [requires(decompress(Diver),When_Time)]).
 */

 /*  reactive_rule([metreqs(decompress(Diver))],
   	      [requires(decompress(Diver),When_Time)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',621).

 /*  fix_axiom_head(When_Time) ->
       [ holds_at(metreqs(decompress(Diver)), When_Time),
          (->),
         metreqs(decompress(Diver))
       ].
 */
 %  pl=axiom(metreqs(decompress(Diver)),[comparison(Depth,0,>)]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',621).

 /*  comparison(Depth, 0, >) ->
       metreqs(decompress(Diver)).
 */
if comparison(Depth, 0, >)then metreqs(decompress(Diver)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',621).

 /*  reactive_rule([comparison(Depth,0,>)],
   	      [metreqs(decompress(Diver))]).
 */

 /*  reactive_rule([comparison(Depth,0,>)],
   	      [metreqs(decompress(Diver))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',621).

 /*  holds_at(atDepth(Diver, Depth), When_Time) :-
       happens(decompress(Diver), When_Time).
 */

 /*  pl=axiom(requires(decompress(Diver),When_Time),
         [metreqs(decompress(Diver))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',621).

 /*  metreqs(decompress(Diver)) ->
       requires(decompress(Diver), When_Time).
 */
if metreqs(decompress(Diver))then requires(decompress(Diver), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',621).

 /*  reactive_rule([metreqs(decompress(Diver))],
   	      [requires(decompress(Diver),When_Time)]).
 */

 /*  reactive_rule([metreqs(decompress(Diver))],
   	      [requires(decompress(Diver),When_Time)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',621).

 /*  fix_axiom_head(When_Time) ->
       [ holds_at(metreqs(decompress(Diver)), When_Time),
          (->),
         metreqs(decompress(Diver))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',621).

 /*  pl=axiom(metreqs(decompress(Diver)),
         [atDepth(Diver,Depth)]).
 */

 /*  atDepth(Diver, Depth) ->
       metreqs(decompress(Diver)).
 */
if atDepth(Diver, Depth)then metreqs(decompress(Diver)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',621).

 /*  reactive_rule([holds(atDepth(Diver,Depth),Holds5)],
   	      [metreqs(decompress(Diver))]).
 */

 /*  reactive_rule([holds(atDepth(Diver,Depth),Holds5)],
   	      [metreqs(decompress(Diver))]).
 */

% fluent HasHeadache(diver)
 %  blue=fluent(hasHeadache(diver)).
 %  fluent(hasHeadache(diver)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',624).
fluents([hasHeadache/1]).
 %  fluents([hasHeadache/1]).
mpred_prop(hasHeadache(diver),fluent).
 %  mpred_prop(hasHeadache(diver),fluent).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',627).
% [diver,time]
% HoldsAt(ConditionOK(diver),time) ->
% !HoldsAt(Unconscious(diver),time) &
% !HoldsAt(HasEarPain(diver),time) &
% !HoldsAt(HasRupturedEardrum(diver),time) &
% !HoldsAt(HasDecompressionIllness(diver),time) &
% !HoldsAt(HasHeadache(diver),time).
 %  clausify_pnf=(holds_at(conditionOK(Diver), Time)->holds_at(neg(unconscious(Diver)), Time), holds_at(neg(hasEarPain(Diver)), Time), holds_at(neg(hasRupturedEardrum(Diver)), Time), holds_at(neg(hasDecompressionIllness(Diver)), Time), holds_at(neg(hasHeadache(Diver)), Time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',627).

 /*  not(holds_at(conditionOK(Diver), Time)) :-
       (   not(holds_at(neg(unconscious(Diver)), Time))
       ;   not(holds_at(neg(hasEarPain(Diver)), Time))
       ;   not(holds_at(neg(hasRupturedEardrum(Diver)), Time))
       ;   not(holds_at(neg(hasDecompressionIllness(Diver)), Time))
       ;   not(holds_at(neg(hasHeadache(Diver)), Time))
       ).
 */
 %   pl=axiom(not(conditionOK(Diver)), [(not(not(unconscious(Diver)));not(not(hasEarPain(Diver)));not(not(hasRupturedEardrum(Diver)));not(not(hasDecompressionIllness(Diver)));not(not(hasHeadache(Diver))))]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',627).

 /*  not(not(unconscious(Diver)));not(not(hasEarPain(Diver)));not(not(hasRupturedEardrum(Diver)));not(not(hasDecompressionIllness(Diver)));not(not(hasHeadache(Diver))) ->
       not(conditionOK(Diver)).
 */
if not not unconscious(Diver);not not hasEarPain(Diver);not not hasRupturedEardrum(Diver);not not hasDecompressionIllness(Diver);not not hasHeadache(Diver)then not conditionOK(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',627).

 /*   reactive_rule([  (not(not(unconscious(Diver)));not(not(hasEarPain(Diver)));not(not(hasRupturedEardrum(Diver)));not(not(hasDecompressionIllness(Diver)));not(not(hasHeadache(Diver))))
                    ],
                    [not(conditionOK(Diver))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',627).

 /*   reactive_rule([  (not(not(unconscious(Diver)));not(not(hasEarPain(Diver)));not(not(hasRupturedEardrum(Diver)));not(not(hasDecompressionIllness(Diver)));not(not(hasHeadache(Diver))))
                    ],
                    [not(conditionOK(Diver))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',627).

 /*  holds_at(neg(unconscious(Diver)), Time) :-
       holds_at(conditionOK(Diver), Time).
 */

 /*  fix_axiom_head(Time) ->
       [ holds_at(neg(unconscious(Diver)), Time),
          (->),
         not(unconscious(Diver))
       ].
 */
 %  pl=axiom(not(unconscious(Diver)),[conditionOK(Diver)]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',627).

 /*  conditionOK(Diver) ->
       not(unconscious(Diver)).
 */
if conditionOK(Diver)then not unconscious(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',627).

 /*  reactive_rule([conditionOK(Diver)],
   	      [holds(not(unconscious(Diver)),Holds)]).
 */

 /*  reactive_rule([conditionOK(Diver)],
   	      [holds(not(unconscious(Diver)),Holds)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',627).

 /*  holds_at(neg(hasEarPain(Diver)), Time) :-
       holds_at(conditionOK(Diver), Time).
 */

 /*  fix_axiom_head(Time) ->
       [ holds_at(neg(hasEarPain(Diver)), Time),
          (->),
         not(hasEarPain(Diver))
       ].
 */
 %  pl=axiom(not(hasEarPain(Diver)),[conditionOK(Diver)]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',627).

 /*  conditionOK(Diver) ->
       not(hasEarPain(Diver)).
 */
if conditionOK(Diver)then not hasEarPain(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',627).

 /*  reactive_rule([conditionOK(Diver)],
   	      [holds(not(hasEarPain(Diver)),Holds3)]).
 */

 /*  reactive_rule([conditionOK(Diver)],
   	      [holds(not(hasEarPain(Diver)),Holds3)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',627).

 /*  holds_at(neg(hasRupturedEardrum(Diver)), Time) :-
       holds_at(conditionOK(Diver), Time).
 */

 /*  fix_axiom_head(Time) ->
       [ holds_at(neg(hasRupturedEardrum(Diver)), Time),
          (->),
         not(hasRupturedEardrum(Diver))
       ].
 */
 %  pl=axiom(not(hasRupturedEardrum(Diver)),[conditionOK(Diver)]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',627).

 /*  conditionOK(Diver) ->
       not(hasRupturedEardrum(Diver)).
 */
if conditionOK(Diver)then not hasRupturedEardrum(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',627).

 /*  reactive_rule([conditionOK(Diver)],
   	      [ holds(not(hasRupturedEardrum(Diver)),
   		      Holds4)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',627).

 /*  reactive_rule([conditionOK(Diver)],
   	      [ holds(not(hasRupturedEardrum(Diver)),
   		      Holds4)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',627).

 /*  holds_at(neg(hasDecompressionIllness(Diver)), Time) :-
       holds_at(conditionOK(Diver), Time).
 */

 /*  fix_axiom_head(Time) ->
       [ holds_at(neg(hasDecompressionIllness(Diver)), Time),
          (->),
         not(hasDecompressionIllness(Diver))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',627).

 /*  pl=axiom(not(hasDecompressionIllness(Diver)),
         [conditionOK(Diver)]).
 */

 /*  conditionOK(Diver) ->
       not(hasDecompressionIllness(Diver)).
 */
if conditionOK(Diver)then not hasDecompressionIllness(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',627).

 /*  reactive_rule([conditionOK(Diver)],
   	      [ holds(not(hasDecompressionIllness(Diver)),
   		      Holds5)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',627).

 /*  reactive_rule([conditionOK(Diver)],
   	      [ holds(not(hasDecompressionIllness(Diver)),
   		      Holds5)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',627).

 /*  holds_at(neg(hasHeadache(Diver)), Time) :-
       holds_at(conditionOK(Diver), Time).
 */

 /*  fix_axiom_head(Time) ->
       [ holds_at(neg(hasHeadache(Diver)), Time),
          (->),
         not(hasHeadache(Diver))
       ].
 */
 %  pl=axiom(not(hasHeadache(Diver)),[conditionOK(Diver)]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',627).

 /*  conditionOK(Diver) ->
       not(hasHeadache(Diver)).
 */
if conditionOK(Diver)then not hasHeadache(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',627).

 /*  reactive_rule([conditionOK(Diver)],
   	      [not(hasHeadache(Diver))]).
 */

 /*  reactive_rule([conditionOK(Diver)],
   	      [not(hasHeadache(Diver))]).
 */

% event BeAirlifted(diver)
 %  blue=event(beAirlifted(diver)).
 %  event(beAirlifted(diver)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',634).
events([beAirlifted/1]).
 %  events([beAirlifted/1]).
mpred_prop(beAirlifted(diver),event).
 %  mpred_prop(beAirlifted(diver),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',637).
% event TakeInWater(diver)
 %  blue=event(takeInWater(diver)).
 %  event(takeInWater(diver)).
events([takeInWater/1]).
 %  events([takeInWater/1]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',637).
mpred_prop(takeInWater(diver),event).
 %  mpred_prop(takeInWater(diver),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',639).
% fluent LowOnAir(airtank)
 %  blue=fluent(lowOnAir(airtank)).
 %  fluent(lowOnAir(airtank)).
fluents([lowOnAir/1]).
 %  fluents([lowOnAir/1]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',639).
mpred_prop(lowOnAir(airtank),fluent).
 %  mpred_prop(lowOnAir(airtank),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',641).
% event BecomeLowOnAir(airtank)
 %  blue=event(becomeLowOnAir(airtank)).
 %  event(becomeLowOnAir(airtank)).
events([becomeLowOnAir/1]).
 %  events([becomeLowOnAir/1]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',641).
mpred_prop(becomeLowOnAir(airtank),event).
 %  mpred_prop(becomeLowOnAir(airtank),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',643).
% [airtank,time]
% Initiates(BecomeLowOnAir(airtank),LowOnAir(airtank),time).

 /*  pl=axiom(initiates(becomeLowOnAir(Airtank),
   		lowOnAir(Airtank),
   		Time),
         []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',643).

 /*  initiates(becomeLowOnAir(Airtank),
   	  lowOnAir(Airtank),
   	  Time).
 */
becomeLowOnAir(Airtank)initiates lowOnAir(Airtank).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',643).

 /*  initiated(happens(becomeLowOnAir(Airtank),
   		  Time_From,
   		  Time_Until),
   	  lowOnAir(Airtank),
   	  []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',643).

 /*  initiated(happens(becomeLowOnAir(Airtank),
   		  Time_From,
   		  Time_Until),
   	  lowOnAir(Airtank),
   	  []).
 */


%; initial state
% [diver]
 % HoldsAt(ConditionOK(diver),0).
 %  pl=axiom(initially(conditionOK(Diver)),[]).
initially conditionOK(Diver).
 %  initial_state([conditionOK(Diver)]).
 %  initial_state([conditionOK(Diver)]).


% [diver]
 % HoldsAt(Vertical(diver),0).
 %  pl=axiom(initially(vertical(Diver)),[]).
initially vertical(Diver).
 %  initial_state([vertical(Diver)]).
 %  initial_state([vertical(Diver)]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',649).
% !HoldsAt(DisturbedSilt(),0).
 %  pl=axiom(initially(neg(disturbedSilt)),[]).
 %  initially(neg(disturbedSilt)).
initially not disturbedSilt.
 %  initial_state([not(disturbedSilt)]).
 %  initial_state([not(disturbedSilt)]).


% [diver]
 % !HoldsAt(UncontrolledBuoyancy(diver),0).
 %  pl=axiom(initially(neg(uncontrolledBuoyancy(Diver))),[]).
 %  initially(neg(uncontrolledBuoyancy(Diver))).
initially not uncontrolledBuoyancy(Diver).
 %  initial_state([not(uncontrolledBuoyancy(Diver))]).
 %  initial_state([not(uncontrolledBuoyancy(Diver))]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',651).
% [diver]
 % !HoldsAt(Disoriented(diver),0).
 %  pl=axiom(initially(neg(disoriented(Diver))),[]).
 %  initially(neg(disoriented(Diver))).
initially not disoriented(Diver).
 %  initial_state([not(disoriented(Diver))]).
 %  initial_state([not(disoriented(Diver))]).


% [diver]
 % !HoldsAt(PositivelyBuoyant(diver),0) &
%         !HoldsAt(NeutrallyBuoyant(diver),0) &
%         !HoldsAt(NegativelyBuoyant(diver),0).
 %  clausify_pnf=(initially(neg(positivelyBuoyant(Diver))), initially(neg(neutrallyBuoyant(Diver))), initially(neg(negativelyBuoyant(Diver)))).
 %  pl=axiom(initially(neg(positivelyBuoyant(Diver))),[]).
 %  initially(neg(positivelyBuoyant(Diver))).
initially not positivelyBuoyant(Diver).
 %  initial_state([not(positivelyBuoyant(Diver))]).
 %  initial_state([not(positivelyBuoyant(Diver))]).
 %  pl=axiom(initially(neg(neutrallyBuoyant(Diver))),[]).
 %  initially(neg(neutrallyBuoyant(Diver))).
initially not neutrallyBuoyant(Diver).
 %  initial_state([not(neutrallyBuoyant(Diver))]).
 %  initial_state([not(neutrallyBuoyant(Diver))]).
 %  pl=axiom(initially(neg(negativelyBuoyant(Diver))),[]).
 %  initially(neg(negativelyBuoyant(Diver))).
initially not negativelyBuoyant(Diver).
 %  initial_state([not(negativelyBuoyant(Diver))]).
 %  initial_state([not(negativelyBuoyant(Diver))]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',655).
% [diver,object]
 % !HoldsAt(Wearing(diver,object),0).
 %  pl=axiom(initially(neg(wearing(Diver,Object))),[]).
 %  initially(neg(wearing(Diver,Object))).
initially not wearing(Diver, Object).
 %  initial_state([not(wearing(Diver,Object))]).
 %  initial_state([not(wearing(Diver,Object))]).


% [diver,object]
 % !HoldsAt(Holding(diver,object),0).
 %  pl=axiom(initially(neg(holding(Diver,Object))),[]).
 %  initially(neg(holding(Diver,Object))).
initially not holding(Diver, Object).
 %  initial_state([not(holding(Diver,Object))]).
 %  initial_state([not(holding(Diver,Object))]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',657).
% [diver1,diver2]
 % !HoldsAt(Separated(diver1,diver2),0).
 %  pl=axiom(initially(neg(separated(Diver1,Diver2))),[]).
 %  initially(neg(separated(Diver1,Diver2))).
initially not separated(Diver1, Diver2).
 %  initial_state([not(separated(Diver1,Diver2))]).
 %  initial_state([not(separated(Diver1,Diver2))]).


%;[agent,object] !HoldsAt(See(agent,object),0).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',660).
% fluent Separated(diver,diver)
 %  blue=fluent(separated(diver,diver)).
 %  fluent(separated(diver,diver)).
fluents([separated/2]).
 %  fluents([separated/2]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',660).
mpred_prop(separated(diver,diver),fluent).
 %  mpred_prop(separated(diver,diver),fluent).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',662).
% [diver1,diver2,time]
% HoldsAt(Separated(diver1,diver2),time) ->
% HoldsAt(Separated(diver2,diver1),time).
 %  clausify_pnf=(holds_at(separated(Diver1, Diver2), Time)->holds_at(separated(Diver2, Diver1), Time)).

% event BecomeSeparated(diver,diver)
 %  blue=event(becomeSeparated(diver,diver)).
 %  event(becomeSeparated(diver,diver)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',665).
events([becomeSeparated/2]).
 %  events([becomeSeparated/2]).
mpred_prop(becomeSeparated(diver,diver),event).
 %  mpred_prop(becomeSeparated(diver,diver),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',668).
% event BeReunitedWith(diver,diver)
 %  blue=event(beReunitedWith(diver,diver)).
 %  event(beReunitedWith(diver,diver)).
events([beReunitedWith/2]).
 %  events([beReunitedWith/2]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',668).
mpred_prop(beReunitedWith(diver,diver),event).
 %  mpred_prop(beReunitedWith(diver,diver),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',670).
% [diver1,diver2,time]
% Initiates(BecomeSeparated(diver1,diver2),Separated(diver1,diver2),time).

 /*  pl=axiom(initiates(becomeSeparated(Diver1,Diver2),
   		separated(Diver1,Diver2),
   		Time),
         []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',670).

 /*  initiates(becomeSeparated(Diver1,Diver2),
   	  separated(Diver1,Diver2),
   	  Time).
 */
becomeSeparated(Diver1, Diver2)initiates separated(Diver1, Diver2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',670).

 /*  initiated(happens(becomeSeparated(Diver1,Diver2),
   		  Time_From,
   		  Time_Until),
   	  separated(Diver1,Diver2),
   	  []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',670).

 /*  initiated(happens(becomeSeparated(Diver1,Diver2),
   		  Time_From,
   		  Time_Until),
   	  separated(Diver1,Diver2),
   	  []).
 */


% [diver1,diver2,time]
% Initiates(BecomeSeparated(diver1,diver2),Separated(diver2,diver1),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',674).

 /*  pl=axiom(initiates(becomeSeparated(Diver1,Diver2),
   		separated(Diver2,Diver1),
   		Time),
         []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',674).

 /*  initiates(becomeSeparated(Diver1,Diver2),
   	  separated(Diver2,Diver1),
   	  Time).
 */
becomeSeparated(Diver1, Diver2)initiates separated(Diver2, Diver1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',674).

 /*  initiated(happens(becomeSeparated(Diver1,Diver2),
   		  Time_From,
   		  Time_Until),
   	  separated(Diver2,Diver1),
   	  []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',674).

 /*  initiated(happens(becomeSeparated(Diver1,Diver2),
   		  Time_From,
   		  Time_Until),
   	  separated(Diver2,Diver1),
   	  []).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',676).
% [diver1,diver2,time]
% Terminates(BeReunitedWith(diver1,diver2),Separated(diver1,diver2),time).

 /*  pl=axiom(terminates(beReunitedWith(Diver1,Diver2),
   		 separated(Diver1,Diver2),
   		 Time),
         []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',676).

 /*  terminates(beReunitedWith(Diver1,Diver2),
   	   separated(Diver1,Diver2),
   	   Time).
 */
beReunitedWith(Diver1, Diver2)terminates separated(Diver1, Diver2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',676).

 /*  terminated(happens(beReunitedWith(Diver1,Diver2),
   		   Time_From,
   		   Time_Until),
   	   separated(Diver1,Diver2),
   	   []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',676).

 /*  terminated(happens(beReunitedWith(Diver1,Diver2),
   		   Time_From,
   		   Time_Until),
   	   separated(Diver1,Diver2),
   	   []).
 */


% [diver1,diver2,time]
% Terminates(BeReunitedWith(diver1,diver2),Separated(diver2,diver1),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',680).

 /*  pl=axiom(terminates(beReunitedWith(Diver1,Diver2),
   		 separated(Diver2,Diver1),
   		 Time),
         []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',680).

 /*  terminates(beReunitedWith(Diver1,Diver2),
   	   separated(Diver2,Diver1),
   	   Time).
 */
beReunitedWith(Diver1, Diver2)terminates separated(Diver2, Diver1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',680).

 /*  terminated(happens(beReunitedWith(Diver1,Diver2),
   		   Time_From,
   		   Time_Until),
   	   separated(Diver2,Diver1),
   	   []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',680).

 /*  terminated(happens(beReunitedWith(Diver1,Diver2),
   		   Time_From,
   		   Time_Until),
   	   separated(Diver2,Diver1),
   	   []).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',682).
%; End of file.
% translate: ending  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e.lps 
