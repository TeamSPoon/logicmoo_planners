:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/CTime.e',43).
% From E: 
% 
% :-call_pel_directive(translate(unskipped,'/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e.lps')).
:- call_pel_directive(translate(unskipped,
                                '/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e.lps')).
:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(lps).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/CTime.e',43).
% From E: 
% 
% :-call_pel_directive(translate(begining,'/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e.lps')).
:- call_pel_directive(translate(begining,
                                '/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e.lps')).
% Sat, 10 Oct 2020 14:56:01 GMT File: <stream>(0x5597f2b70500)%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; scuba diving
%;

% sort object
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',14).
% From E: 
% 
% sort(object).
sort(object).

% sort agent: object
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',14).
% From E: 
% 
% subsort(agent,object).
subsort(agent,object).

% sort diver: agent
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',16).
% From E: 
% 
% subsort(diver,agent).
subsort(diver,agent).

% sort depth: integer
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',16).
% From E: 
% 
% subsort(depth,integer).
subsort(depth,integer).

% sort boat: object
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',18).
% From E: 
% 
% subsort(boat,object).
subsort(boat,object).
%; reference line, anchor line, shotline, SMB line, ...

% sort line: object
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',20).
% From E: 
% 
% subsort(line,object).
subsort(line,object).

% sort equipment: object
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',23).
% From E: 
% 
% subsort(equipment,object).
subsort(equipment,object).

% sort weight: equipment
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',23).
% From E: 
% 
% subsort(weight,equipment).
subsort(weight,equipment).

% sort fin: equipment
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',25).
% From E: 
% 
% subsort(fin,equipment).
subsort(fin,equipment).

% sort airtank: equipment
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',25).
% From E: 
% 
% subsort(airtank,equipment).
subsort(airtank,equipment).
%; buoyancy compensator (BC)
%; buoyancy control device (BCD)

% sort computer: equipment
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',30).
% From E: 
% 
% subsort(computer,equipment).
subsort(computer,equipment).

% sort bc: equipment
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',30).
% From E: 
% 
% subsort(bc,equipment).
subsort(bc,equipment).

% fluent AtDepth(object,depth)
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',33).
% From E: 
% 
% fluent(atDepth(object,depth)).
mpred_prop(atDepth(object,depth),fluent).
fluents([atDepth/2]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',35).
% [object,depth1,depth2,time]
% HoldsAt(AtDepth(object,depth1),time) &
% HoldsAt(AtDepth(object,depth2),time) ->
% depth1 = depth2.
% From E: 
% 
% '->'(
%    (holds_at(atDepth(Object,Depth1),Time) , 
%     holds_at(atDepth(Object,Depth2),Time)), 
%    Depth1=Depth2).
 %   [Time].
false not equals(Depth1, Depth2), atDepth(Object, Depth1), atDepth(Object, Depth2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',35).

 /*  d_pre([ not(equals(Depth1,Depth2)),
   	holds(atDepth(Object,Depth1),Time_At),
   	holds(atDepth(Object,Depth2),Time_At)
         ]).
 */
 %  "% =================================".

% event Ascend(diver,depth)
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',39).
% From E: 
% 
% event(ascend(diver,depth)).
events([ascend/2]).
mpred_prop(ascend(diver,depth),action).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',39).
actions([ascend/2]).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',42).
% event Descend(diver,depth)
% From E: 
% 
% event(descend(diver,depth)).
events([descend/2]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',42).
mpred_prop(descend(diver,depth),action).
actions([descend/2]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',44).
% [diver,depth1,depth2,time]
% HoldsAt(AtDepth(diver,depth1),time) &
% Happens(Descend(diver,depth2),time) ->
% depth2>depth1.
% From E: 
% 
% '->'(
%    (holds_at(atDepth(Diver,Depth1),Time) , 
%     happens_at(descend(Diver,Depth2),Time)), 
%    Depth2>Depth1).
 %   [Time].
false not comparison(Depth2, Depth1, >), atDepth(Diver, Depth1), descend(Diver, Depth2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',44).

 /*  d_pre([ not(comparison(Depth2,Depth1,>)),
   	holds(atDepth(Diver,Depth1),Time_At),
   	happens(descend(Diver,Depth2),
   		Time_At,
   		Time_Until)
         ]).
 */
 %  "% =================================".


% [diver,depth1,depth2,time]
% HoldsAt(AtDepth(diver,depth1),time) &
% Happens(Ascend(diver,depth2),time) ->
% depth2<depth1.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',50).
% From E: 
% 
% '->'(
%    (holds_at(atDepth(Diver,Depth1),Time) , 
%     happens_at(ascend(Diver,Depth2),Time)), 
%    Depth2<Depth1).
 %   [Time].
false not comparison(Depth2, Depth1, <), atDepth(Diver, Depth1), ascend(Diver, Depth2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',50).

 /*  d_pre([ not(comparison(Depth2,Depth1,<)),
   	holds(atDepth(Diver,Depth1),Time_At),
   	happens(ascend(Diver,Depth2),
   		Time_At,
   		Time_Until)
         ]).
 */
 %  "% =================================".


% [diver,depth,time]
% Initiates(Descend(diver,depth),AtDepth(diver,depth),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',55).
% From E: 
% 
% initiates_at(
%    descend(Diver,Depth), 
%    atDepth(Diver,Depth), 
%    Time).
 %   [Time].
descend(Diver, Depth)initiates atDepth(Diver, Depth).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',55).

 /*  initiated(happens(descend(Diver,Depth),
   		  Time_From,
   		  Time_Until),
   	  atDepth(Diver,Depth),
   	  []).
 */
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',57).
% [diver,depth1,depth2,time]
% HoldsAt(AtDepth(diver,depth1),time) ->
% Terminates(Descend(diver,depth2),AtDepth(diver,depth1),time).
% From E: 
% 
% '->'(
%    holds_at(atDepth(Diver,Depth1),Time), 
%    terminates_at(
%       descend(Diver,Depth2), 
%       atDepth(Diver,Depth1), 
%       Time)).
 %   [Time].
descend(Diver, Depth2)terminates atDepth(Diver, Depth1)if atDepth(Diver, Depth1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',57).

 /*  terminated(happens(descend(Diver,Depth2),
   		   Time_From,
   		   Time_Until),
   	   atDepth(Diver,Depth1),
   	   [holds(atDepth(Diver,Depth1),Time_From)]).
 */
 %  "% =================================".


% [diver,depth,time]
% Initiates(Ascend(diver,depth),AtDepth(diver,depth),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',62).
% From E: 
% 
% initiates_at(
%    ascend(Diver,Depth), 
%    atDepth(Diver,Depth), 
%    Time).
 %   [Time].
ascend(Diver, Depth)initiates atDepth(Diver, Depth).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',62).

 /*  initiated(happens(ascend(Diver,Depth),
   		  Time_From,
   		  Time_Until),
   	  atDepth(Diver,Depth),
   	  []).
 */
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',64).
% [diver,depth1,depth2,time]
% HoldsAt(AtDepth(diver,depth1),time) ->
% Terminates(Ascend(diver,depth2),AtDepth(diver,depth1),time).
% From E: 
% 
% '->'(
%    holds_at(atDepth(Diver,Depth1),Time), 
%    terminates_at(
%       ascend(Diver,Depth2), 
%       atDepth(Diver,Depth1), 
%       Time)).
 %   [Time].
ascend(Diver, Depth2)terminates atDepth(Diver, Depth1)if atDepth(Diver, Depth1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',64).

 /*  terminated(happens(ascend(Diver,Depth2),
   		   Time_From,
   		   Time_Until),
   	   atDepth(Diver,Depth1),
   	   [holds(atDepth(Diver,Depth1),Time_From)]).
 */
 %  "% =================================".

% fluent Wearing(diver,equipment)
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',67).
% From E: 
% 
% fluent(wearing(diver,equipment)).
mpred_prop(wearing(diver,equipment),fluent).
fluents([wearing/2]).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',70).
% event PutOn(diver,equipment)
% From E: 
% 
% event(putOn(diver,equipment)).
events([putOn/2]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',70).
mpred_prop(putOn(diver,equipment),action).
actions([putOn/2]).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',72).
% event TakeOff(diver,equipment)
% From E: 
% 
% event(takeOff(diver,equipment)).
events([takeOff/2]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',72).
mpred_prop(takeOff(diver,equipment),action).
actions([takeOff/2]).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',74).
% event Lose(diver,equipment)
% From E: 
% 
% event(lose(diver,equipment)).
events([lose/2]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',74).
mpred_prop(lose(diver,equipment),action).
actions([lose/2]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',76).
% [diver,equipment,depth,time]
% Releases(PutOn(diver,equipment),AtDepth(equipment,depth),time).
% From E: 
% 
% releases_at(
%    putOn(Diver,Equipment), 
%    atDepth(Equipment,Depth), 
%    Time).
 %   [Time].
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',76).
releases(putOn(Diver,Equipment),
	 atDepth(Equipment,Depth)).


% [diver,equipment,time]
% Releases(PutOn(diver,equipment),UnderWater(equipment),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',80).
% From E: 
% 
% releases_at(
%    putOn(Diver,Equipment), 
%    underWater(Equipment), 
%    Time).
 %   [Time].
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',80).
releases(putOn(Diver,Equipment),
	 underWater(Equipment)).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',82).
% [diver,equipment,time]
% Happens(PutOn(diver,equipment),time) ->
% !{diver1} HoldsAt(Wearing(diver1,equipment),time).
% From E: 
% 
% '->'(
%    happens_at(putOn(Diver,Equipment),Time), 
%    not(
%       exists(
%          [Diver1], 
%          holds_at(wearing(Diver1,Equipment),Time)))).
 %   [Time].
not wearing(Diver1, Equipment)if putOn(Diver, Equipment).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',82).

 /*  l_int(holds(not(wearing(Diver1,Equipment)),Time_At),
         [ happens(putOn(Diver,Equipment),
   		Time_At,
   		Time_At)
         ]).
 */
 %  "% =================================".


% [diver,depth,equipment,time]
% HoldsAt(Wearing(diver,equipment),time) ->
% (HoldsAt(AtDepth(diver,depth),time) <->
%  HoldsAt(AtDepth(equipment,depth),time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',87).
% From E: 
% 
% '->'(
%    holds_at(wearing(Diver,Equipment),Time), 
%    <->(
%       holds_at(atDepth(Diver,Depth),Time), 
%       holds_at(atDepth(Equipment,Depth),Time))).
 %   [Time].
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',87).
wearing(Diver, Equipment) ->
    [ if(atDepth(Equipment, Depth),
         atDepth(Diver, Depth)),
      if(atDepth(Diver, Depth),
         atDepth(Equipment, Depth))
    ].


% [diver,depth,object,time]
% HoldsAt(Holding(diver,object),time) ->
% (HoldsAt(AtDepth(diver,depth),time) <->
%  HoldsAt(AtDepth(object,depth),time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',92).
% From E: 
% 
% '->'(
%    holds_at(holding(Diver,Object),Time), 
%    <->(
%       holds_at(atDepth(Diver,Depth),Time), 
%       holds_at(atDepth(Object,Depth),Time))).
 %   [Time].
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',92).
holding(Diver, Object) ->
    [ if(atDepth(Object, Depth), atDepth(Diver, Depth)),
      if(atDepth(Diver, Depth), atDepth(Object, Depth))
    ].


% [diver,equipment,time]
% HoldsAt(Wearing(diver,equipment),time) ->
% (HoldsAt(UnderWater(diver),time) <->
%  HoldsAt(UnderWater(equipment),time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',97).
% From E: 
% 
% '->'(
%    holds_at(wearing(Diver,Equipment),Time), 
%    <->(
%       holds_at(underWater(Diver),Time), 
%       holds_at(underWater(Equipment),Time))).
 %   [Time].
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',97).
wearing(Diver, Equipment) ->
    [ if(underWater(Equipment), underWater(Diver)),
      if(underWater(Diver), underWater(Equipment))
    ].


% [diver,object,time]
% HoldsAt(Holding(diver,object),time) ->
% (HoldsAt(UnderWater(diver),time) <->
%  HoldsAt(UnderWater(object),time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',102).
% From E: 
% 
% '->'(
%    holds_at(holding(Diver,Object),Time), 
%    <->(
%       holds_at(underWater(Diver),Time), 
%       holds_at(underWater(Object),Time))).
 %   [Time].
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',102).
holding(Diver, Object) ->
    [ if(underWater(Object), underWater(Diver)),
      if(underWater(Diver), underWater(Object))
    ].


% [diver,depth,equipment,time]
% HoldsAt(AtDepth(diver,depth),time) &
% HoldsAt(Wearing(diver,equipment),time) ->
% Initiates(TakeOff(diver,equipment),AtDepth(equipment,depth),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',107).
% From E: 
% 
% '->'(
%    (holds_at(atDepth(Diver,Depth),Time) , 
%     holds_at(wearing(Diver,Equipment),Time)), 
%    initiates_at(
%       takeOff(Diver,Equipment), 
%       atDepth(Equipment,Depth), 
%       Time)).
 %   [Time].
takeOff(Diver, Equipment)initiates atDepth(Equipment, Depth)if atDepth(Diver, Depth), wearing(Diver, Equipment).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',107).

 /*  initiated(happens(takeOff(Diver,Equipment),
   		  Time_From,
   		  Time_Until),
   	  atDepth(Equipment,Depth),
   	  [ holds(atDepth(Diver,Depth),Time_From),
   	    holds(wearing(Diver,Equipment),Time_From)
   	  ]).
 */
 %  "% =================================".


% [diver,depth,equipment,time]
% !HoldsAt(AtDepth(diver,depth),time) &
% HoldsAt(Wearing(diver,equipment),time) ->
% Terminates(TakeOff(diver,equipment),AtDepth(equipment,depth),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',112).
% From E: 
% 
% '->'(
%    (holds_at(not(atDepth(Diver,Depth)),Time) , 
%     holds_at(wearing(Diver,Equipment),Time)), 
%    terminates_at(
%       takeOff(Diver,Equipment), 
%       atDepth(Equipment,Depth), 
%       Time)).
 %   [Time].
takeOff(Diver, Equipment)terminates atDepth(Equipment, Depth)if not atDepth(Diver, Depth), wearing(Diver, Equipment).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',112).

 /*  terminated(happens(takeOff(Diver,Equipment),
   		   Time_From,
   		   Time_Until),
   	   atDepth(Equipment,Depth),
   	   [ holds(not(atDepth(Diver,Depth)),
   		   Time_From),
   	     holds(wearing(Diver,Equipment),
   		   Time_From)
   	   ]).
 */
 %  "% =================================".


% [diver,equipment,time]
% HoldsAt(UnderWater(diver),time) ->
% Initiates(TakeOff(diver,equipment),UnderWater(equipment),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',117).
% From E: 
% 
% '->'(
%    holds_at(underWater(Diver),Time), 
%    initiates_at(
%       takeOff(Diver,Equipment), 
%       underWater(Equipment), 
%       Time)).
 %   [Time].
takeOff(Diver, Equipment)initiates underWater(Equipment)if underWater(Diver).

 /*  initiated(happens(takeOff(Diver,Equipment),
   		  Time_From,
   		  Time_Until),
   	  underWater(Equipment),
   	  [holds(underWater(Diver),Time_From)]).
 */
 %  "% =================================".


% [diver,equipment,time]
% !HoldsAt(UnderWater(diver),time) ->
% Terminates(TakeOff(diver,equipment),UnderWater(equipment),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',121).
% From E: 
% 
% '->'(
%    holds_at(not(underWater(Diver)),Time), 
%    terminates_at(
%       takeOff(Diver,Equipment), 
%       underWater(Equipment), 
%       Time)).
 %   [Time].
takeOff(Diver, Equipment)terminates underWater(Equipment)if not underWater(Diver).

 /*  terminated(happens(takeOff(Diver,Equipment),
   		   Time_From,
   		   Time_Until),
   	   underWater(Equipment),
   	   [holds(not(underWater(Diver)),Time_From)]).
 */
 %  "% =================================".


% [diver,equipment,depth,time]
% HoldsAt(AtDepth(diver,depth),time) &
% HoldsAt(Wearing(diver,equipment),time) ->
% Initiates(Lose(diver,equipment),AtDepth(equipment,depth),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',125).
% From E: 
% 
% '->'(
%    (holds_at(atDepth(Diver,Depth),Time) , 
%     holds_at(wearing(Diver,Equipment),Time)), 
%    initiates_at(
%       lose(Diver,Equipment), 
%       atDepth(Equipment,Depth), 
%       Time)).
 %   [Time].
lose(Diver, Equipment)initiates atDepth(Equipment, Depth)if atDepth(Diver, Depth), wearing(Diver, Equipment).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',125).

 /*  initiated(happens(lose(Diver,Equipment),
   		  Time_From,
   		  Time_Until),
   	  atDepth(Equipment,Depth),
   	  [ holds(atDepth(Diver,Depth),Time_From),
   	    holds(wearing(Diver,Equipment),Time_From)
   	  ]).
 */
 %  "% =================================".


% [diver,equipment,depth,time]
% !HoldsAt(AtDepth(diver,depth),time) &
% HoldsAt(Wearing(diver,equipment),time) ->
% Terminates(Lose(diver,equipment),AtDepth(equipment,depth),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',130).
% From E: 
% 
% '->'(
%    (holds_at(not(atDepth(Diver,Depth)),Time) , 
%     holds_at(wearing(Diver,Equipment),Time)), 
%    terminates_at(
%       lose(Diver,Equipment), 
%       atDepth(Equipment,Depth), 
%       Time)).
 %   [Time].
lose(Diver, Equipment)terminates atDepth(Equipment, Depth)if not atDepth(Diver, Depth), wearing(Diver, Equipment).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',130).

 /*  terminated(happens(lose(Diver,Equipment),
   		   Time_From,
   		   Time_Until),
   	   atDepth(Equipment,Depth),
   	   [ holds(not(atDepth(Diver,Depth)),
   		   Time_From),
   	     holds(wearing(Diver,Equipment),
   		   Time_From)
   	   ]).
 */
 %  "% =================================".


% [diver,equipment,time]
% HoldsAt(UnderWater(diver),time) ->
% Initiates(Lose(diver,equipment),UnderWater(equipment),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',135).
% From E: 
% 
% '->'(
%    holds_at(underWater(Diver),Time), 
%    initiates_at(
%       lose(Diver,Equipment), 
%       underWater(Equipment), 
%       Time)).
 %   [Time].
lose(Diver, Equipment)initiates underWater(Equipment)if underWater(Diver).

 /*  initiated(happens(lose(Diver,Equipment),
   		  Time_From,
   		  Time_Until),
   	  underWater(Equipment),
   	  [holds(underWater(Diver),Time_From)]).
 */
 %  "% =================================".


% [diver,equipment,time]
% !HoldsAt(UnderWater(diver),time) ->
% Terminates(Lose(diver,equipment),UnderWater(equipment),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',139).
% From E: 
% 
% '->'(
%    holds_at(not(underWater(Diver)),Time), 
%    terminates_at(
%       lose(Diver,Equipment), 
%       underWater(Equipment), 
%       Time)).
 %   [Time].
lose(Diver, Equipment)terminates underWater(Equipment)if not underWater(Diver).

 /*  terminated(happens(lose(Diver,Equipment),
   		   Time_From,
   		   Time_Until),
   	   underWater(Equipment),
   	   [holds(not(underWater(Diver)),Time_From)]).
 */
 %  "% =================================".

% fluent Holding(diver,object)
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',141).
% From E: 
% 
% fluent(holding(diver,object)).
mpred_prop(holding(diver,object),fluent).
fluents([holding/2]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',144).
% [diver1,diver2,time]
% HoldsAt(Holding(diver1,diver2),time) ->
% !HoldsAt(Holding(diver2,diver1),time).
% From E: 
% 
% '->'(
%    holds_at(holding(Diver1,Diver2),Time), 
%    holds_at(not(holding(Diver2,Diver1)),Time)).
 %   [Time].
not holding(Diver2, Diver1)if holding(Diver1, Diver2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',144).

 /*  l_int(holds(not(holding(Diver2,Diver1)),Time_At),
         [holds(holding(Diver1,Diver2),Time_At)]).
 */
 %  "% =================================".

% event Grab(diver,object)
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',147).
% From E: 
% 
% event(grab(diver,object)).
events([grab/2]).
mpred_prop(grab(diver,object),action).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',147).
actions([grab/2]).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',150).
% event LetGoOf(diver,object)
% From E: 
% 
% event(letGoOf(diver,object)).
events([letGoOf/2]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',150).
mpred_prop(letGoOf(diver,object),action).
actions([letGoOf/2]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',152).
% [diver,object,time]
% Initiates(Grab(diver,object),Holding(diver,object),time).
% From E: 
% 
% initiates_at(
%    grab(Diver,Object), 
%    holding(Diver,Object), 
%    Time).
 %   [Time].
grab(Diver, Object)initiates holding(Diver, Object).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',152).

 /*  initiated(happens(grab(Diver,Object),
   		  Time_From,
   		  Time_Until),
   	  holding(Diver,Object),
   	  []).
 */
 %  "% =================================".


% [diver,object,time]
% Terminates(LetGoOf(diver,object),Holding(diver,object),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',156).
% From E: 
% 
% terminates_at(
%    letGoOf(Diver,Object), 
%    holding(Diver,Object), 
%    Time).
 %   [Time].
letGoOf(Diver, Object)terminates holding(Diver, Object).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',156).

 /*  terminated(happens(letGoOf(Diver,Object),
   		   Time_From,
   		   Time_Until),
   	   holding(Diver,Object),
   	   []).
 */
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',158).
% [diver,object,depth,time]
% Releases(Grab(diver,object),AtDepth(object,depth),time).
% From E: 
% 
% releases_at(
%    grab(Diver,Object), 
%    atDepth(Object,Depth), 
%    Time).
 %   [Time].
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',158).
releases(grab(Diver,Object),
	 atDepth(Object,Depth)).


% [diver,object,time]
% Releases(Grab(diver,object),UnderWater(object),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',162).
% From E: 
% 
% releases_at(
%    grab(Diver,Object), 
%    underWater(Object), 
%    Time).
 %   [Time].
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',162).
releases(grab(Diver,Object),underWater(Object)).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',164).
% [diver,object,depth,time]
% HoldsAt(AtDepth(diver,depth),time) &
% HoldsAt(Holding(diver,object),time) ->
% Initiates(LetGoOf(diver,object),AtDepth(object,depth),time).
% From E: 
% 
% '->'(
%    (holds_at(atDepth(Diver,Depth),Time) , 
%     holds_at(holding(Diver,Object),Time)), 
%    initiates_at(
%       letGoOf(Diver,Object), 
%       atDepth(Object,Depth), 
%       Time)).
 %   [Time].
letGoOf(Diver, Object)initiates atDepth(Object, Depth)if atDepth(Diver, Depth), holding(Diver, Object).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',164).

 /*  initiated(happens(letGoOf(Diver,Object),
   		  Time_From,
   		  Time_Until),
   	  atDepth(Object,Depth),
   	  [ holds(atDepth(Diver,Depth),Time_From),
   	    holds(holding(Diver,Object),Time_From)
   	  ]).
 */
 %  "% =================================".


% [diver,object,depth,time]
% !HoldsAt(AtDepth(diver,depth),time) &
% HoldsAt(Holding(diver,object),time) ->
% Terminates(LetGoOf(diver,object),AtDepth(object,depth),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',170).
% From E: 
% 
% '->'(
%    (holds_at(not(atDepth(Diver,Depth)),Time) , 
%     holds_at(holding(Diver,Object),Time)), 
%    terminates_at(
%       letGoOf(Diver,Object), 
%       atDepth(Object,Depth), 
%       Time)).
 %   [Time].
letGoOf(Diver, Object)terminates atDepth(Object, Depth)if not atDepth(Diver, Depth), holding(Diver, Object).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',170).

 /*  terminated(happens(letGoOf(Diver,Object),
   		   Time_From,
   		   Time_Until),
   	   atDepth(Object,Depth),
   	   [ holds(not(atDepth(Diver,Depth)),
   		   Time_From),
   	     holds(holding(Diver,Object),Time_From)
   	   ]).
 */
 %  "% =================================".


% [diver,object,time]
% HoldsAt(UnderWater(diver),time) ->
% Initiates(LetGoOf(diver,object),UnderWater(object),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',175).
% From E: 
% 
% '->'(
%    holds_at(underWater(Diver),Time), 
%    initiates_at(
%       letGoOf(Diver,Object), 
%       underWater(Object), 
%       Time)).
 %   [Time].
letGoOf(Diver, Object)initiates underWater(Object)if underWater(Diver).

 /*  initiated(happens(letGoOf(Diver,Object),
   		  Time_From,
   		  Time_Until),
   	  underWater(Object),
   	  [holds(underWater(Diver),Time_From)]).
 */
 %  "% =================================".


% [diver,object,time]
% !HoldsAt(UnderWater(diver),time) ->
% Terminates(LetGoOf(diver,object),UnderWater(object),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',179).
% From E: 
% 
% '->'(
%    holds_at(not(underWater(Diver)),Time), 
%    terminates_at(
%       letGoOf(Diver,Object), 
%       underWater(Object), 
%       Time)).
 %   [Time].
letGoOf(Diver, Object)terminates underWater(Object)if not underWater(Diver).

 /*  terminated(happens(letGoOf(Diver,Object),
   		   Time_From,
   		   Time_Until),
   	   underWater(Object),
   	   [holds(not(underWater(Diver)),Time_From)]).
 */
 %  "% =================================".


% [diver,equipment,time]
% Initiates(PutOn(diver,equipment),Wearing(diver,equipment),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',183).
% From E: 
% 
% initiates_at(
%    putOn(Diver,Equipment), 
%    wearing(Diver,Equipment), 
%    Time).
 %   [Time].
putOn(Diver, Equipment)initiates wearing(Diver, Equipment).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',183).

 /*  initiated(happens(putOn(Diver,Equipment),
   		  Time_From,
   		  Time_Until),
   	  wearing(Diver,Equipment),
   	  []).
 */
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',185).
% [diver,equipment,time]
% Happens(PutOn(diver,equipment),time) ->
% !HoldsAt(UnderWater(diver),time).
% From E: 
% 
% '->'(
%    happens_at(putOn(Diver,Equipment),Time), 
%    holds_at(not(underWater(Diver)),Time)).
 %   [Time].
not underWater(Diver)if putOn(Diver, Equipment).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',185).

 /*  l_int(holds(not(underWater(Diver)),Time_At),
         [ happens(putOn(Diver,Equipment),
   		Time_At,
   		Time_At)
         ]).
 */
 %  "% =================================".


% [diver,equipment,time]
% Terminates(TakeOff(diver,equipment),Wearing(diver,equipment),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',190).
% From E: 
% 
% terminates_at(
%    takeOff(Diver,Equipment), 
%    wearing(Diver,Equipment), 
%    Time).
 %   [Time].
takeOff(Diver, Equipment)terminates wearing(Diver, Equipment).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',190).

 /*  terminated(happens(takeOff(Diver,Equipment),
   		   Time_From,
   		   Time_Until),
   	   wearing(Diver,Equipment),
   	   []).
 */
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',192).
% [diver,equipment,time]
% Terminates(Lose(diver,equipment),Wearing(diver,equipment),time).
% From E: 
% 
% terminates_at(
%    lose(Diver,Equipment), 
%    wearing(Diver,Equipment), 
%    Time).
 %   [Time].
lose(Diver, Equipment)terminates wearing(Diver, Equipment).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',192).

 /*  terminated(happens(lose(Diver,Equipment),
   		   Time_From,
   		   Time_Until),
   	   wearing(Diver,Equipment),
   	   []).
 */
 %  "% =================================".

% fluent Vertical(diver)
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',194).
% From E: 
% 
% fluent(vertical(diver)).
mpred_prop(vertical(diver),fluent).
fluents([vertical/1]).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',197).
% fluent HorizontalDown(diver)
% From E: 
% 
% fluent(horizontalDown(diver)).
mpred_prop(horizontalDown(diver),fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',197).
fluents([horizontalDown/1]).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',199).
% fluent Inverted(diver)
% From E: 
% 
% fluent(inverted(diver)).
mpred_prop(inverted(diver),fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',199).
fluents([inverted/1]).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',201).
% fluent HorizontalUp(diver)
% From E: 
% 
% fluent(horizontalUp(diver)).
mpred_prop(horizontalUp(diver),fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',201).
fluents([horizontalUp/1]).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',203).
% xor Vertical, HorizontalDown, Inverted, HorizontalUp
% From E: 
% 
% xor([vertical,horizontalDown,inverted,horizontalUp]).
xor([vertical,horizontalDown,inverted,horizontalUp]).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',205).
% event RotatePitch(diver)
% From E: 
% 
% event(rotatePitch(diver)).
events([rotatePitch/1]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',205).
mpred_prop(rotatePitch(diver),action).
actions([rotatePitch/1]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',207).
% [diver,time]
% HoldsAt(Vertical(diver),time) ->
% Initiates(RotatePitch(diver),HorizontalDown(diver),time).
% From E: 
% 
% '->'(
%    holds_at(vertical(Diver),Time), 
%    initiates_at(
%       rotatePitch(Diver), 
%       horizontalDown(Diver), 
%       Time)).
 %   [Time].
rotatePitch(Diver)initiates horizontalDown(Diver)if vertical(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',207).

 /*  initiated(happens(rotatePitch(Diver),
   		  Time_From,
   		  Time_Until),
   	  horizontalDown(Diver),
   	  [holds(vertical(Diver),Time_From)]).
 */
 %  "% =================================".


% [diver,time]
% HoldsAt(HorizontalDown(diver),time) ->
% Initiates(RotatePitch(diver),Inverted(diver),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',212).
% From E: 
% 
% '->'(
%    holds_at(horizontalDown(Diver),Time), 
%    initiates_at(
%       rotatePitch(Diver), 
%       inverted(Diver), 
%       Time)).
 %   [Time].
rotatePitch(Diver)initiates inverted(Diver)if horizontalDown(Diver).

 /*  initiated(happens(rotatePitch(Diver),
   		  Time_From,
   		  Time_Until),
   	  inverted(Diver),
   	  [holds(horizontalDown(Diver),Time_From)]).
 */
 %  "% =================================".


% [diver,time]
% HoldsAt(HorizontalDown(diver),time) ->
% Terminates(RotatePitch(diver),HorizontalDown(diver),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',216).
% From E: 
% 
% '->'(
%    holds_at(horizontalDown(Diver),Time), 
%    terminates_at(
%       rotatePitch(Diver), 
%       horizontalDown(Diver), 
%       Time)).
 %   [Time].
rotatePitch(Diver)terminates horizontalDown(Diver)if horizontalDown(Diver).

 /*  terminated(happens(rotatePitch(Diver),
   		   Time_From,
   		   Time_Until),
   	   horizontalDown(Diver),
   	   [holds(horizontalDown(Diver),Time_From)]).
 */
 %  "% =================================".


% [diver,time]
% HoldsAt(Inverted(diver),time) ->
% Initiates(RotatePitch(diver),HorizontalUp(diver),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',220).
% From E: 
% 
% '->'(
%    holds_at(inverted(Diver),Time), 
%    initiates_at(
%       rotatePitch(Diver), 
%       horizontalUp(Diver), 
%       Time)).
 %   [Time].
rotatePitch(Diver)initiates horizontalUp(Diver)if inverted(Diver).

 /*  initiated(happens(rotatePitch(Diver),
   		  Time_From,
   		  Time_Until),
   	  horizontalUp(Diver),
   	  [holds(inverted(Diver),Time_From)]).
 */
 %  "% =================================".


% [diver,time]
% HoldsAt(Inverted(diver),time) ->
% Terminates(RotatePitch(diver),Inverted(diver),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',224).
% From E: 
% 
% '->'(
%    holds_at(inverted(Diver),Time), 
%    terminates_at(
%       rotatePitch(Diver), 
%       inverted(Diver), 
%       Time)).
 %   [Time].
rotatePitch(Diver)terminates inverted(Diver)if inverted(Diver).

 /*  terminated(happens(rotatePitch(Diver),
   		   Time_From,
   		   Time_Until),
   	   inverted(Diver),
   	   [holds(inverted(Diver),Time_From)]).
 */
 %  "% =================================".


% [diver,time]
% HoldsAt(HorizontalUp(diver),time) ->
% Initiates(RotatePitch(diver),Vertical(diver),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',228).
% From E: 
% 
% '->'(
%    holds_at(horizontalUp(Diver),Time), 
%    initiates_at(
%       rotatePitch(Diver), 
%       vertical(Diver), 
%       Time)).
 %   [Time].
rotatePitch(Diver)initiates vertical(Diver)if horizontalUp(Diver).

 /*  initiated(happens(rotatePitch(Diver),
   		  Time_From,
   		  Time_Until),
   	  vertical(Diver),
   	  [holds(horizontalUp(Diver),Time_From)]).
 */
 %  "% =================================".


% [diver,time]
% HoldsAt(HorizontalUp(diver),time) ->
% Terminates(RotatePitch(diver),HorizontalUp(diver),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',232).
% From E: 
% 
% '->'(
%    holds_at(horizontalUp(Diver),Time), 
%    terminates_at(
%       rotatePitch(Diver), 
%       horizontalUp(Diver), 
%       Time)).
 %   [Time].
rotatePitch(Diver)terminates horizontalUp(Diver)if horizontalUp(Diver).

 /*  terminated(happens(rotatePitch(Diver),
   		   Time_From,
   		   Time_Until),
   	   horizontalUp(Diver),
   	   [holds(horizontalUp(Diver),Time_From)]).
 */
 %  "% =================================".

% event RotateYaw(diver)
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',234).
% From E: 
% 
% event(rotateYaw(diver)).
events([rotateYaw/1]).
mpred_prop(rotateYaw(diver),action).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',234).
actions([rotateYaw/1]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',237).
%; try taking out Holding condition here
% [diver,time]
% Happens(Ascend1(diver),time) &
% !Happens(RapidAscendToSurface(diver),time) &
% !({diver1} HoldsAt(Holding(diver,diver1),time)) ->
% Happens(RotateYaw(diver),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',239).
% From E: 
% 
% '->'(
%    (happens_at(ascend1(Diver),Time) , 
%      not(happens_at(rapidAscendToSurface(Diver),Time)) , 
%     not(
%        exists(
%           [Diver1], 
%           holds_at(holding(Diver,Diver1),Time)))), 
%    happens_at(rotateYaw(Diver),Time)).
 %   [Time].
if ascend1(Diver), not rapidAscendToSurface(Diver), not holding(Diver, Diver1)then rotateYaw(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',239).

 /*  reactive_rule([ ascend1(Diver),
   		not(rapidAscendToSurface(Diver)),
   		holds(not(holding(Diver,Diver1)),
   		      Time_At)
   	      ],
   	      [rotateYaw(Diver)]).
 */
 %  "% =================================".

% fluent UnderWater(object)
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',243).
% From E: 
% 
% fluent(underWater(object)).
mpred_prop(underWater(object),fluent).
fluents([underWater/1]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',246).
% [object,depth,time]
% depth>% 0 &
% HoldsAt(AtDepth(object,depth),time) ->
% HoldsAt(UnderWater(object),time).
% From E: 
% 
% '->'(
%    (Depth>0 , 
%     holds_at(atDepth(Object,Depth),Time)), 
%    holds_at(underWater(Object),Time)).
 %   [Time].
false not underWater(Object), comparison(Depth, 0, >), atDepth(Object, Depth).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',246).

 /*  d_pre([ holds(not(underWater(Object)),Time_At),
   	comparison(Depth,0,>),
   	holds(atDepth(Object,Depth),Time_At)
         ]).
 */
 %  "% =================================".

% event EnterWater(object)
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',250).
% From E: 
% 
% event(enterWater(object)).
mpred_prop(enterWater(object),event).
events([enterWater/1]).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',253).
% event Surface(object)
% From E: 
% 
% event(surface(object)).
mpred_prop(surface(object),event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',253).
events([surface/1]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',255).
% [object,time]
% Initiates(EnterWater(object),UnderWater(object),time).
% From E: 
% 
% initiates_at(
%    enterWater(Object), 
%    underWater(Object), 
%    Time).
 %   [Time].
enterWater(Object)initiates underWater(Object).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',255).

 /*  initiated(happens(enterWater(Object),
   		  Time_From,
   		  Time_Until),
   	  underWater(Object),
   	  []).
 */
 %  "% =================================".


% [diver,time]
% Happens(EnterWater(diver),time) ->
% !{diver1} HoldsAt(Holding(diver1,diver),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',259).
% From E: 
% 
% '->'(
%    happens_at(enterWater(Diver),Time), 
%    not(
%       exists(
%          [Diver1], 
%          holds_at(holding(Diver1,Diver),Time)))).
 %   [Time].
not holding(Diver1, Diver)if enterWater(Diver).

 /*  l_int(holds(not(holding(Diver1,Diver)),Time_At),
         [happens(enterWater(Diver),Time_At,Time_At)]).
 */
 %  "% =================================".


% [object,depth,time]
% depth=% 0 ->
% Initiates(EnterWater(object),AtDepth(object,depth),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',263).
% From E: 
% 
% '->'(
%    Depth=0, 
%    initiates_at(
%       enterWater(Object), 
%       atDepth(Object,Depth), 
%       Time)).
 %   [Time].
false not (enterWater(Object)initiates atDepth(Object, Depth)), equals(Depth, 0).

 /*  d_pre([ not(initiates(enterWater(Object),
   		      atDepth(Object,Depth))),
   	equals(Depth,0)
         ]).
 */
 %  "% =================================".


% [object,time]
% Terminates(Surface(object),UnderWater(object),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',267).
% From E: 
% 
% terminates_at(
%    surface(Object), 
%    underWater(Object), 
%    Time).
 %   [Time].
surface(Object)terminates underWater(Object).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',267).

 /*  terminated(happens(surface(Object),
   		   Time_From,
   		   Time_Until),
   	   underWater(Object),
   	   []).
 */
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',269).
% [diver,time]
% Terminates(Surface(diver),PositivelyBuoyant(diver),time).
% From E: 
% 
% terminates_at(
%    surface(Diver), 
%    positivelyBuoyant(Diver), 
%    Time).
 %   [Time].
surface(Diver)terminates positivelyBuoyant(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',269).

 /*  terminated(happens(surface(Diver),
   		   Time_From,
   		   Time_Until),
   	   positivelyBuoyant(Diver),
   	   []).
 */
 %  "% =================================".


% [diver,time]
% Terminates(Surface(diver),NegativelyBuoyant(diver),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',273).
% From E: 
% 
% terminates_at(
%    surface(Diver), 
%    negativelyBuoyant(Diver), 
%    Time).
 %   [Time].
surface(Diver)terminates negativelyBuoyant(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',273).

 /*  terminated(happens(surface(Diver),
   		   Time_From,
   		   Time_Until),
   	   negativelyBuoyant(Diver),
   	   []).
 */
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',275).
% [diver,time]
% Terminates(Surface(diver),NeutrallyBuoyant(diver),time).
% From E: 
% 
% terminates_at(
%    surface(Diver), 
%    neutrallyBuoyant(Diver), 
%    Time).
 %   [Time].
surface(Diver)terminates neutrallyBuoyant(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',275).

 /*  terminated(happens(surface(Diver),
   		   Time_From,
   		   Time_Until),
   	   neutrallyBuoyant(Diver),
   	   []).
 */
 %  "% =================================".


% [object,depth,time]
% Terminates(Surface(object),AtDepth(object,depth),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',279).
% From E: 
% 
% terminates_at(
%    surface(Object), 
%    atDepth(Object,Depth), 
%    Time).
 %   [Time].
surface(Object)terminates atDepth(Object, Depth).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',279).

 /*  terminated(happens(surface(Object),
   		   Time_From,
   		   Time_Until),
   	   atDepth(Object,Depth),
   	   []).
 */
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',281).
% [diver,time]
 % Happens(EnterWater(diver),time) ->
% HoldsAt(Vertical(diver),time).
% From E: 
% 
% '->'(
%    happens_at(enterWater(Diver),Time), 
%    holds_at(vertical(Diver),Time)).
 %   [Time].
vertical(Diver)if enterWater(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',281).

 /*  l_int(holds(vertical(Diver),Time_At),
         [happens(enterWater(Diver),Time_At,Time_At)]).
 */
 %  "% =================================".

% fluent StandingOn(diver,boat)
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',283).
% From E: 
% 
% fluent(standingOn(diver,boat)).
mpred_prop(standingOn(diver,boat),fluent).
fluents([standingOn/2]).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',286).
% event StandOn(diver,boat)
% From E: 
% 
% event(standOn(diver,boat)).
events([standOn/2]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',286).
mpred_prop(standOn(diver,boat),action).
actions([standOn/2]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',288).
% [diver,boat,time]
% Terminates(EnterWater(diver),StandingOn(diver,boat),time).
% From E: 
% 
% terminates_at(
%    enterWater(Diver), 
%    standingOn(Diver,Boat), 
%    Time).
 %   [Time].
enterWater(Diver)terminates standingOn(Diver, Boat).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',288).

 /*  terminated(happens(enterWater(Diver),
   		   Time_From,
   		   Time_Until),
   	   standingOn(Diver,Boat),
   	   []).
 */
 %  "% =================================".


% [diver,boat,time]
% Initiates(StandOn(diver,boat),StandingOn(diver,boat),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',292).
% From E: 
% 
% initiates_at(
%    standOn(Diver,Boat), 
%    standingOn(Diver,Boat), 
%    Time).
 %   [Time].
standOn(Diver, Boat)initiates standingOn(Diver, Boat).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',292).

 /*  initiated(happens(standOn(Diver,Boat),
   		  Time_From,
   		  Time_Until),
   	  standingOn(Diver,Boat),
   	  []).
 */
 %  "% =================================".

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',294).
% fluent PositivelyBuoyant(diver)
% From E: 
% 
% fluent(positivelyBuoyant(diver)).
mpred_prop(positivelyBuoyant(diver),fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',294).
fluents([positivelyBuoyant/1]).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',296).
% fluent NeutrallyBuoyant(diver)
% From E: 
% 
% fluent(neutrallyBuoyant(diver)).
mpred_prop(neutrallyBuoyant(diver),fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',296).
fluents([neutrallyBuoyant/1]).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',298).
% fluent NegativelyBuoyant(diver)
% From E: 
% 
% fluent(negativelyBuoyant(diver)).
mpred_prop(negativelyBuoyant(diver),fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',298).
fluents([negativelyBuoyant/1]).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',300).
% mutex PositivelyBuoyant, NeutrallyBuoyant, NegativelyBuoyant
% From E: 
% 
% :-call_pel_directive(mutex(positivelyBuoyant)).
:- call_pel_directive(mutex(positivelyBuoyant)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',300).
% From E: 
% 
% :-call_pel_directive(mutex(neutrallyBuoyant)).
:- call_pel_directive(mutex(neutrallyBuoyant)).
% From E: 
% 
% :-call_pel_directive(mutex(negativelyBuoyant)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',300).
:- call_pel_directive(mutex(negativelyBuoyant)).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',302).
% [diver,time]
% HoldsAt(PositivelyBuoyant(diver),time) ->
% HoldsAt(UnderWater(diver),time).
% From E: 
% 
% '->'(
%    holds_at(positivelyBuoyant(Diver),Time), 
%    holds_at(underWater(Diver),Time)).
 %   [Time].
underWater(Diver)if positivelyBuoyant(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',302).

 /*  l_int(holds(underWater(Diver),Time_At),
         [holds(positivelyBuoyant(Diver),Time_At)]).
 */
 %  "% =================================".


% [diver,time]
% HoldsAt(NeutrallyBuoyant(diver),time) ->
% HoldsAt(UnderWater(diver),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',307).
% From E: 
% 
% '->'(
%    holds_at(neutrallyBuoyant(Diver),Time), 
%    holds_at(underWater(Diver),Time)).
 %   [Time].
underWater(Diver)if neutrallyBuoyant(Diver).

 /*  l_int(holds(underWater(Diver),Time_At),
         [holds(neutrallyBuoyant(Diver),Time_At)]).
 */
 %  "% =================================".


% [diver,time]
% HoldsAt(NegativelyBuoyant(diver),time) ->
% HoldsAt(UnderWater(diver),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',311).
% From E: 
% 
% '->'(
%    holds_at(negativelyBuoyant(Diver),Time), 
%    holds_at(underWater(Diver),Time)).
 %   [Time].
underWater(Diver)if negativelyBuoyant(Diver).

 /*  l_int(holds(underWater(Diver),Time_At),
         [holds(negativelyBuoyant(Diver),Time_At)]).
 */
 %  "% =================================".

% event PressDeflateButton(diver,bc)
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',313).
% From E: 
% 
% event(pressDeflateButton(diver,bc)).
events([pressDeflateButton/2]).
mpred_prop(pressDeflateButton(diver,bc),action).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',313).
actions([pressDeflateButton/2]).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',316).
% event PressDumpButton(diver,bc)
% From E: 
% 
% event(pressDumpButton(diver,bc)).
events([pressDumpButton/2]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',316).
mpred_prop(pressDumpButton(diver,bc),action).
actions([pressDumpButton/2]).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',318).
% event PressInflateButton(diver,bc)
% From E: 
% 
% event(pressInflateButton(diver,bc)).
events([pressInflateButton/2]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',318).
mpred_prop(pressInflateButton(diver,bc),action).
actions([pressInflateButton/2]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',320).
% [diver,bc,time]
% Happens(PressDeflateButton(diver,bc),time) ->
% HoldsAt(Vertical(diver),time) &
% HoldsAt(UnderWater(bc),time).
% From E: 
% 
% '->'(
%    happens_at(pressDeflateButton(Diver,Bc),Time), 
%    (holds_at(vertical(Diver),Time) , 
%     holds_at(underWater(Bc),Time))).
 %   [Time].
if pressDeflateButton(Diver, Bc)then vertical(Diver), underWater(Bc).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',320).

 /*  reactive_rule([ happens(pressDeflateButton(Diver,Bc),
   			Time_From,
   			Time_Until)
   	      ],
   	      [ holds(vertical(Diver),Time_At),
   		holds(underWater(Bc),Time_At)
   	      ]).
 */
 %  "% =================================".


% [diver,bc,time]
% Happens(PressDumpButton(diver,bc),time) ->
% HoldsAt(Vertical(diver),time) &
% HoldsAt(UnderWater(bc),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',326).
% From E: 
% 
% '->'(
%    happens_at(pressDumpButton(Diver,Bc),Time), 
%    (holds_at(vertical(Diver),Time) , 
%     holds_at(underWater(Bc),Time))).
 %   [Time].
if pressDumpButton(Diver, Bc)then vertical(Diver), underWater(Bc).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',326).

 /*  reactive_rule([ happens(pressDumpButton(Diver,Bc),
   			Time_From,
   			Time_Until)
   	      ],
   	      [ holds(vertical(Diver),Time_At),
   		holds(underWater(Bc),Time_At)
   	      ]).
 */
 %  "% =================================".


% [diver,bc,time]
 % Happens(PressDumpButton(diver,bc),time) ->
% HoldsAt(UncontrolledBuoyancy(diver),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',329).
% From E: 
% 
% '->'(
%    happens_at(pressDumpButton(Diver,Bc),Time), 
%    holds_at(uncontrolledBuoyancy(Diver),Time)).
 %   [Time].
uncontrolledBuoyancy(Diver)if pressDumpButton(Diver, Bc).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',329).

 /*  l_int(holds(uncontrolledBuoyancy(Diver),Time_At),
         [ happens(pressDumpButton(Diver,Bc),
   		Time_At,
   		Time_At)
         ]).
 */
 %  "% =================================".


% [diver,bc,time]
% HoldsAt(Wearing(diver,bc),time) ->
% Initiates(PressDeflateButton(diver,bc),NegativelyBuoyant(diver),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',334).
% From E: 
% 
% '->'(
%    holds_at(wearing(Diver,Bc),Time), 
%    initiates_at(
%       pressDeflateButton(Diver,Bc), 
%       negativelyBuoyant(Diver), 
%       Time)).
 %   [Time].
pressDeflateButton(Diver, Bc)initiates negativelyBuoyant(Diver)if wearing(Diver, Bc).

 /*  initiated(happens(pressDeflateButton(Diver,Bc),
   		  Time_From,
   		  Time_Until),
   	  negativelyBuoyant(Diver),
   	  [holds(wearing(Diver,Bc),Time_From)]).
 */
 %  "% =================================".


% [diver,bc,time]
% HoldsAt(Wearing(diver,bc),time) ->
% Terminates(PressDeflateButton(diver,bc),NeutrallyBuoyant(diver),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',338).
% From E: 
% 
% '->'(
%    holds_at(wearing(Diver,Bc),Time), 
%    terminates_at(
%       pressDeflateButton(Diver,Bc), 
%       neutrallyBuoyant(Diver), 
%       Time)).
 %   [Time].
pressDeflateButton(Diver, Bc)terminates neutrallyBuoyant(Diver)if wearing(Diver, Bc).

 /*  terminated(happens(pressDeflateButton(Diver,Bc),
   		   Time_From,
   		   Time_Until),
   	   neutrallyBuoyant(Diver),
   	   [holds(wearing(Diver,Bc),Time_From)]).
 */
 %  "% =================================".


% [diver,bc,time]
% HoldsAt(Wearing(diver,bc),time) ->
% Terminates(PressDeflateButton(diver,bc),PositivelyBuoyant(diver),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',342).
% From E: 
% 
% '->'(
%    holds_at(wearing(Diver,Bc),Time), 
%    terminates_at(
%       pressDeflateButton(Diver,Bc), 
%       positivelyBuoyant(Diver), 
%       Time)).
 %   [Time].
pressDeflateButton(Diver, Bc)terminates positivelyBuoyant(Diver)if wearing(Diver, Bc).

 /*  terminated(happens(pressDeflateButton(Diver,Bc),
   		   Time_From,
   		   Time_Until),
   	   positivelyBuoyant(Diver),
   	   [holds(wearing(Diver,Bc),Time_From)]).
 */
 %  "% =================================".


% [diver,bc,time]
% HoldsAt(Wearing(diver,bc),time) ->
% Initiates(PressDumpButton(diver,bc),NegativelyBuoyant(diver),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',346).
% From E: 
% 
% '->'(
%    holds_at(wearing(Diver,Bc),Time), 
%    initiates_at(
%       pressDumpButton(Diver,Bc), 
%       negativelyBuoyant(Diver), 
%       Time)).
 %   [Time].
pressDumpButton(Diver, Bc)initiates negativelyBuoyant(Diver)if wearing(Diver, Bc).

 /*  initiated(happens(pressDumpButton(Diver,Bc),
   		  Time_From,
   		  Time_Until),
   	  negativelyBuoyant(Diver),
   	  [holds(wearing(Diver,Bc),Time_From)]).
 */
 %  "% =================================".


% [diver,bc,time]
% HoldsAt(Wearing(diver,bc),time) ->
% Terminates(PressDumpButton(diver,bc),NeutrallyBuoyant(diver),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',350).
% From E: 
% 
% '->'(
%    holds_at(wearing(Diver,Bc),Time), 
%    terminates_at(
%       pressDumpButton(Diver,Bc), 
%       neutrallyBuoyant(Diver), 
%       Time)).
 %   [Time].
pressDumpButton(Diver, Bc)terminates neutrallyBuoyant(Diver)if wearing(Diver, Bc).

 /*  terminated(happens(pressDumpButton(Diver,Bc),
   		   Time_From,
   		   Time_Until),
   	   neutrallyBuoyant(Diver),
   	   [holds(wearing(Diver,Bc),Time_From)]).
 */
 %  "% =================================".


% [diver,bc,time]
% HoldsAt(Wearing(diver,bc),time) ->
% Terminates(PressDumpButton(diver,bc),PositivelyBuoyant(diver),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',354).
% From E: 
% 
% '->'(
%    holds_at(wearing(Diver,Bc),Time), 
%    terminates_at(
%       pressDumpButton(Diver,Bc), 
%       positivelyBuoyant(Diver), 
%       Time)).
 %   [Time].
pressDumpButton(Diver, Bc)terminates positivelyBuoyant(Diver)if wearing(Diver, Bc).

 /*  terminated(happens(pressDumpButton(Diver,Bc),
   		   Time_From,
   		   Time_Until),
   	   positivelyBuoyant(Diver),
   	   [holds(wearing(Diver,Bc),Time_From)]).
 */
 %  "% =================================".


% [diver,bc,time]
% HoldsAt(Wearing(diver,bc),time) ->
% Initiates(PressInflateButton(diver,bc),NeutrallyBuoyant(diver),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',358).
% From E: 
% 
% '->'(
%    holds_at(wearing(Diver,Bc),Time), 
%    initiates_at(
%       pressInflateButton(Diver,Bc), 
%       neutrallyBuoyant(Diver), 
%       Time)).
 %   [Time].
pressInflateButton(Diver, Bc)initiates neutrallyBuoyant(Diver)if wearing(Diver, Bc).

 /*  initiated(happens(pressInflateButton(Diver,Bc),
   		  Time_From,
   		  Time_Until),
   	  neutrallyBuoyant(Diver),
   	  [holds(wearing(Diver,Bc),Time_From)]).
 */
 %  "% =================================".


% [diver,bc,time]
% HoldsAt(Wearing(diver,bc),time) ->
% Terminates(PressInflateButton(diver,bc),PositivelyBuoyant(diver),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',362).
% From E: 
% 
% '->'(
%    holds_at(wearing(Diver,Bc),Time), 
%    terminates_at(
%       pressInflateButton(Diver,Bc), 
%       positivelyBuoyant(Diver), 
%       Time)).
 %   [Time].
pressInflateButton(Diver, Bc)terminates positivelyBuoyant(Diver)if wearing(Diver, Bc).

 /*  terminated(happens(pressInflateButton(Diver,Bc),
   		   Time_From,
   		   Time_Until),
   	   positivelyBuoyant(Diver),
   	   [holds(wearing(Diver,Bc),Time_From)]).
 */
 %  "% =================================".


% [diver,bc,time]
% HoldsAt(Wearing(diver,bc),time) ->
% Terminates(PressInflateButton(diver,bc),NegativelyBuoyant(diver),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',366).
% From E: 
% 
% '->'(
%    holds_at(wearing(Diver,Bc),Time), 
%    terminates_at(
%       pressInflateButton(Diver,Bc), 
%       negativelyBuoyant(Diver), 
%       Time)).
 %   [Time].
pressInflateButton(Diver, Bc)terminates negativelyBuoyant(Diver)if wearing(Diver, Bc).

 /*  terminated(happens(pressInflateButton(Diver,Bc),
   		   Time_From,
   		   Time_Until),
   	   negativelyBuoyant(Diver),
   	   [holds(wearing(Diver,Bc),Time_From)]).
 */
 %  "% =================================".


% [diver,weight,time]
% HoldsAt(Wearing(diver,weight),time) ->
% Initiates(TakeOff(diver,weight),PositivelyBuoyant(diver),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',370).
% From E: 
% 
% '->'(
%    holds_at(wearing(Diver,Weight),Time), 
%    initiates_at(
%       takeOff(Diver,Weight), 
%       positivelyBuoyant(Diver), 
%       Time)).
 %   [Time].
takeOff(Diver, Weight)initiates positivelyBuoyant(Diver)if wearing(Diver, Weight).

 /*  initiated(happens(takeOff(Diver,Weight),
   		  Time_From,
   		  Time_Until),
   	  positivelyBuoyant(Diver),
   	  [holds(wearing(Diver,Weight),Time_From)]).
 */
 %  "% =================================".


% [diver,weight,time]
% HoldsAt(Wearing(diver,weight),time) ->
% Terminates(TakeOff(diver,weight),NegativelyBuoyant(diver),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',374).
% From E: 
% 
% '->'(
%    holds_at(wearing(Diver,Weight),Time), 
%    terminates_at(
%       takeOff(Diver,Weight), 
%       negativelyBuoyant(Diver), 
%       Time)).
 %   [Time].
takeOff(Diver, Weight)terminates negativelyBuoyant(Diver)if wearing(Diver, Weight).

 /*  terminated(happens(takeOff(Diver,Weight),
   		   Time_From,
   		   Time_Until),
   	   negativelyBuoyant(Diver),
   	   [holds(wearing(Diver,Weight),Time_From)]).
 */
 %  "% =================================".


% [diver,weight,time]
% HoldsAt(Wearing(diver,weight),time) ->
% Terminates(TakeOff(diver,weight),NeutrallyBuoyant(diver),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',378).
% From E: 
% 
% '->'(
%    holds_at(wearing(Diver,Weight),Time), 
%    terminates_at(
%       takeOff(Diver,Weight), 
%       neutrallyBuoyant(Diver), 
%       Time)).
 %   [Time].
takeOff(Diver, Weight)terminates neutrallyBuoyant(Diver)if wearing(Diver, Weight).

 /*  terminated(happens(takeOff(Diver,Weight),
   		   Time_From,
   		   Time_Until),
   	   neutrallyBuoyant(Diver),
   	   [holds(wearing(Diver,Weight),Time_From)]).
 */
 %  "% =================================".

% fluent UncontrolledBuoyancy(diver)
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',380).
% From E: 
% 
% fluent(uncontrolledBuoyancy(diver)).
mpred_prop(uncontrolledBuoyancy(diver),fluent).
fluents([uncontrolledBuoyancy/1]).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',383).
% event LoseBuoyancyControl(diver)
% From E: 
% 
% event(loseBuoyancyControl(diver)).
events([loseBuoyancyControl/1]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',383).
mpred_prop(loseBuoyancyControl(diver),action).
actions([loseBuoyancyControl/1]).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',385).
% predicate IsInexperiencedDiver(diver)
% From E: 
% 
% predicate(isInexperiencedDiver(diver)).
mpred_prop(isInexperiencedDiver(diver),predicate).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',385).
predicates([isInexperiencedDiver/1]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',387).
% [diver,time]
% Happens(LoseBuoyancyControl(diver),time) ->
% IsInexperiencedDiver(diver).
% From E: 
% 
% '->'(
%    happens_at(loseBuoyancyControl(Diver),Time), 
%    isInexperiencedDiver(Diver)).
 %   [Time].
if loseBuoyancyControl(Diver)then isInexperiencedDiver(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',387).

 /*  reactive_rule([ happens(loseBuoyancyControl(Diver),
   			Time_From,
   			Time_Until)
   	      ],
   	      [isInexperiencedDiver(Diver)]).
 */
 %  "% =================================".


% [diver,time]
% Initiates(LoseBuoyancyControl(diver),UncontrolledBuoyancy(diver),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',392).
% From E: 
% 
% initiates_at(
%    loseBuoyancyControl(Diver), 
%    uncontrolledBuoyancy(Diver), 
%    Time).
 %   [Time].
loseBuoyancyControl(Diver)initiates uncontrolledBuoyancy(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',392).

 /*  initiated(happens(loseBuoyancyControl(Diver),
   		  Time_From,
   		  Time_Until),
   	  uncontrolledBuoyancy(Diver),
   	  []).
 */
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',394).
% [diver,time]
% Initiates(LoseBuoyancyControl(diver),PositivelyBuoyant(diver),time).
% From E: 
% 
% initiates_at(
%    loseBuoyancyControl(Diver), 
%    positivelyBuoyant(Diver), 
%    Time).
 %   [Time].
loseBuoyancyControl(Diver)initiates positivelyBuoyant(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',394).

 /*  initiated(happens(loseBuoyancyControl(Diver),
   		  Time_From,
   		  Time_Until),
   	  positivelyBuoyant(Diver),
   	  []).
 */
 %  "% =================================".


% [diver,time]
% Terminates(LoseBuoyancyControl(diver),NegativelyBuoyant(diver),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',398).
% From E: 
% 
% terminates_at(
%    loseBuoyancyControl(Diver), 
%    negativelyBuoyant(Diver), 
%    Time).
 %   [Time].
loseBuoyancyControl(Diver)terminates negativelyBuoyant(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',398).

 /*  terminated(happens(loseBuoyancyControl(Diver),
   		   Time_From,
   		   Time_Until),
   	   negativelyBuoyant(Diver),
   	   []).
 */
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',400).
% [diver,time]
% Terminates(LoseBuoyancyControl(diver),NeutrallyBuoyant(diver),time).
% From E: 
% 
% terminates_at(
%    loseBuoyancyControl(Diver), 
%    neutrallyBuoyant(Diver), 
%    Time).
 %   [Time].
loseBuoyancyControl(Diver)terminates neutrallyBuoyant(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',400).

 /*  terminated(happens(loseBuoyancyControl(Diver),
   		   Time_From,
   		   Time_Until),
   	   neutrallyBuoyant(Diver),
   	   []).
 */
 %  "% =================================".


%; determining fluent

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',404).
% fluent AscendDescendAmount(diver,depth)
% From E: 
% 
% fluent(ascendDescendAmount(diver,depth)).
mpred_prop(ascendDescendAmount(diver,depth),fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',404).
fluents([ascendDescendAmount/2]).

% noninertial AscendDescendAmount
% From E: 
% 
% :-call_pel_directive(noninertial(ascendDescendAmount)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',404).
:- call_pel_directive(noninertial(ascendDescendAmount)).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',407).
% [diver,depth1,depth2,time]
% HoldsAt(AscendDescendAmount(diver,depth1),time) &
% HoldsAt(AscendDescendAmount(diver,depth2),time) ->
% depth1=depth2.
% From E: 
% 
% '->'(
%    (holds_at(ascendDescendAmount(Diver,Depth1),Time) , 
%     holds_at(ascendDescendAmount(Diver,Depth2),Time)), 
%    Depth1=Depth2).
 %   [Time].
false not equals(Depth1, Depth2), ascendDescendAmount(Diver, Depth1), ascendDescendAmount(Diver, Depth2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',407).

 /*  d_pre([ not(equals(Depth1,Depth2)),
   	ascendDescendAmount(Diver,Depth1),
   	ascendDescendAmount(Diver,Depth2)
         ]).
 */
 %  "% =================================".


% [diver,depth,time]
% Happens(Descend(diver,depth),time) ->
% HoldsAt(NegativelyBuoyant(diver),time) &
% ({depth1}
%  HoldsAt(AscendDescendAmount(diver,depth1),time) &
%  HoldsAt(AtDepth(diver,depth-depth1),time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',413).
% From E: 
% 
% '->'(
%    happens_at(descend(Diver,Depth),Time), 
%    (holds_at(negativelyBuoyant(Diver),Time) , 
%     exists(
%        [Depth1], 
%        (holds_at(ascendDescendAmount(Diver,Depth1),Time) , 
%         holds_at(atDepth(Diver,Depth-Depth1),Time))))).
 %   [Time].
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',413).
descend(Diver, Depth) ->
    negativelyBuoyant(Diver),
    exists([Depth1],
            (ascendDescendAmount(Diver, Depth1), atDepth(Diver, Depth-Depth1))).

% event KickUp(diver)
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',418).
% From E: 
% 
% event(kickUp(diver)).
events([kickUp/1]).
mpred_prop(kickUp(diver),action).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',418).
actions([kickUp/1]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',421).
% [diver,depth,time]
% Happens(Ascend(diver,depth),time) ->
% (HoldsAt(PositivelyBuoyant(diver),time) |
%  (HoldsAt(NeutrallyBuoyant(diver),time) & Happens(KickUp(diver),time))) &
% ({depth1}
%  HoldsAt(AscendDescendAmount(diver,depth1),time) &
%  HoldsAt(AtDepth(diver,depth+depth1),time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',421).
% From E: 
% 
% '->'(
%    happens_at(ascend(Diver,Depth),Time), 
%    ((holds_at(positivelyBuoyant(Diver),Time) ; 
%      (holds_at(neutrallyBuoyant(Diver),Time) , 
%       happens_at(kickUp(Diver),Time))) , 
%     exists(
%        [Depth1], 
%        (holds_at(ascendDescendAmount(Diver,Depth1),Time) , 
%         holds_at(atDepth(Diver,Depth+Depth1),Time))))).
 %   [Time].
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',421).
ascend(Diver, Depth) ->
    (   positivelyBuoyant(Diver)
    ;   neutrallyBuoyant(Diver),
        kickUp(Diver)
    ),
    exists([Depth1],
            (ascendDescendAmount(Diver, Depth1), atDepth(Diver, Depth+Depth1))).


% [diver,time]
% Happens(KickUp(diver),time) ->
% HoldsAt(Vertical(diver),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',430).
% From E: 
% 
% '->'(
%    happens_at(kickUp(Diver),Time), 
%    holds_at(vertical(Diver),Time)).
 %   [Time].
vertical(Diver)if kickUp(Diver).
 %  l_int(holds(vertical(Diver),Time_At),[kickUp(Diver)]).
 %  "% =================================".

% event SwimAround(diver)
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',432).
% From E: 
% 
% event(swimAround(diver)).
events([swimAround/1]).
mpred_prop(swimAround(diver),action).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',432).
actions([swimAround/1]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',435).
% [diver,time]
% Happens(SwimAround(diver),time) ->
% HoldsAt(HorizontalDown(diver),time).
% From E: 
% 
% '->'(
%    happens_at(swimAround(Diver),Time), 
%    holds_at(horizontalDown(Diver),Time)).
 %   [Time].
horizontalDown(Diver)if swimAround(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',435).

 /*  l_int(holds(horizontalDown(Diver),Time_At),
         [swimAround(Diver)]).
 */
 %  "% =================================".


%; signaling

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',441).
% event SignalDescend(diver,diver)
% From E: 
% 
% event(signalDescend(diver,diver)).
events([signalDescend/2]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',441).
mpred_prop(signalDescend(diver,diver),action).
actions([signalDescend/2]).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',443).
% event SignalOutOfTime(diver,diver)
% From E: 
% 
% event(signalOutOfTime(diver,diver)).
events([signalOutOfTime/2]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',443).
mpred_prop(signalOutOfTime(diver,diver),action).
actions([signalOutOfTime/2]).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',445).
% event SignalAscend(diver,diver)
% From E: 
% 
% event(signalAscend(diver,diver)).
events([signalAscend/2]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',445).
mpred_prop(signalAscend(diver,diver),action).
actions([signalAscend/2]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',447).
%;[diver1,diver2,time]
%;Happens(SignalAscend(diver1,diver2),time) ->
%;Happens(SignalOutOfTime(diver1,diver2),time-1).
%;[diver1,diver2,time]
%;Happens(SignalDescend(diver1,diver2),time) ->
%;HoldsAt(See(diver1,diver2),time) &
%;HoldsAt(See(diver2,diver1),time).
%;[diver1,diver2,time]
%;Happens(SignalOutOfTime(diver1,diver2),time) ->
%;HoldsAt(See(diver1,diver2),time) &
%;HoldsAt(See(diver2,diver1),time).
%;[diver1,diver2,time]
%;Happens(SignalAscend(diver1,diver2),time) ->
%;HoldsAt(See(diver1,diver2),time) &
%;HoldsAt(See(diver2,diver1),time).
%;event LookAt(agent,object)
%;fluent See(agent,object)
%;[agent,object,time]
%;Initiates(LookAt(agent,object),See(agent,object),time).
%;[agent,object1,object2,time]
%;object1!=object2 ->
%;Terminates(LookAt(agent,object1),
%;           See(agent,object2),
%;           time).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',479).
% event Descend1(diver)
% From E: 
% 
% event(descend1(diver)).
events([descend1/1]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',479).
mpred_prop(descend1(diver),action).
actions([descend1/1]).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',481).
% event Ascend1(diver)
% From E: 
% 
% event(ascend1(diver)).
events([ascend1/1]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',481).
mpred_prop(ascend1(diver),action).
actions([ascend1/1]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',483).
%;[diver,object,time]
%;Terminates(Descend1(diver),See(diver,object),time).
%;[diver,object,time]
%;Terminates(Ascend1(diver),See(diver,object),time).
%;[diver,object,time]
%;Terminates(RotateYaw(diver),See(diver,object),time).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',492).
% event RapidAscendToSurface(diver)
% From E: 
% 
% event(rapidAscendToSurface(diver)).
events([rapidAscendToSurface/1]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',492).
mpred_prop(rapidAscendToSurface(diver),action).
actions([rapidAscendToSurface/1]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',494).
% [diver,time]
% Happens(Descend1(diver),time) <->
% ({depth} Happens(Descend(diver,depth),time)).
% From E: 
% 
% <->(
%    happens_at(descend1(Diver),Time), 
%    exists(
%       [Depth], 
%       happens_at(descend(Diver,Depth),Time))).
 %   [Time].
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',494).
descend1(Diver) <->
    exists([Depth], descend(Diver, Depth)).


% [diver,time]
% Happens(Ascend1(diver),time) <->
% ({depth} Happens(Ascend(diver,depth),time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',499).
% From E: 
% 
% <->(
%    happens_at(ascend1(Diver),Time), 
%    exists(
%       [Depth], 
%       happens_at(ascend(Diver,Depth),Time))).
 %   [Time].
ascend1(Diver) <->
    exists([Depth], ascend(Diver, Depth)).


% [diver,time]
% Happens(RapidAscendToSurface(diver),time) ->
% Happens(Ascend(diver,0),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',503).
% From E: 
% 
% '->'(
%    happens_at(rapidAscendToSurface(Diver),Time), 
%    happens_at(ascend(Diver,0),Time)).
 %   [Time].
ascend(Diver, 0)if rapidAscendToSurface(Diver).

 /*  l_events(happens(ascend(Diver,0),Time_From,Time_From),
   	 [rapidAscendToSurface(Diver)]).
 */
 %  "% =================================".

% event AscendLine(diver,line)
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',505).
% From E: 
% 
% event(ascendLine(diver,line)).
events([ascendLine/2]).
mpred_prop(ascendLine(diver,line),action).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',505).
actions([ascendLine/2]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',508).
% [diver,line,time]
% Happens(AscendLine(diver,line),time) ->
% Happens(Ascend1(diver),time).
% From E: 
% 
% '->'(
%    happens_at(ascendLine(Diver,Line),Time), 
%    happens_at(ascend1(Diver),Time)).
 %   [Time].
if ascendLine(Diver, Line)then ascend1(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',508).

 /*  reactive_rule([ascendLine(Diver,Line)],
   	      [ascend1(Diver)]).
 */
 %  "% =================================".

% fluent Disoriented(diver)
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',511).
% From E: 
% 
% fluent(disoriented(diver)).
mpred_prop(disoriented(diver),fluent).
fluents([disoriented/1]).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',514).
% event BecomeDisoriented(diver)
% From E: 
% 
% event(becomeDisoriented(diver)).
events([becomeDisoriented/1]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',514).
mpred_prop(becomeDisoriented(diver),action).
actions([becomeDisoriented/1]).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',516).
% event BecomeReoriented(diver)
% From E: 
% 
% event(becomeReoriented(diver)).
events([becomeReoriented/1]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',516).
mpred_prop(becomeReoriented(diver),action).
actions([becomeReoriented/1]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',518).
% [diver,time]
% Initiates(BecomeDisoriented(diver),Disoriented(diver),time).
% From E: 
% 
% initiates_at(
%    becomeDisoriented(Diver), 
%    disoriented(Diver), 
%    Time).
 %   [Time].
becomeDisoriented(Diver)initiates disoriented(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',518).

 /*  initiated(happens(becomeDisoriented(Diver),
   		  Time_From,
   		  Time_Until),
   	  disoriented(Diver),
   	  []).
 */
 %  "% =================================".


% [diver,time]
% Terminates(BecomeReoriented(diver),Disoriented(diver),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',522).
% From E: 
% 
% terminates_at(
%    becomeReoriented(Diver), 
%    disoriented(Diver), 
%    Time).
 %   [Time].
becomeReoriented(Diver)terminates disoriented(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',522).

 /*  terminated(happens(becomeReoriented(Diver),
   		   Time_From,
   		   Time_Until),
   	   disoriented(Diver),
   	   []).
 */
 %  "% =================================".

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',524).
% fluent DisturbedSilt()
% From E: 
% 
% fluent(disturbedSilt()).
fluents([disturbedSilt/0]).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',526).
% event DisturbSilt(diver)
% From E: 
% 
% event(disturbSilt(diver)).
events([disturbSilt/1]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',526).
mpred_prop(disturbSilt(diver),action).
actions([disturbSilt/1]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',528).
% [diver,time]
% Initiates(DisturbSilt(diver),DisturbedSilt(),time).
% From E: 
% 
% initiates_at(disturbSilt(Diver),disturbedSilt(),Time).
 %   [Time].
disturbSilt(Diver)initiates disturbedSilt.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',528).

 /*  initiated(happens(disturbSilt(Diver),
   		  Time_From,
   		  Time_Until),
   	  disturbedSilt,
   	  []).
 */
 %  "% =================================".


% [diver,time]
% Happens(BecomeDisoriented(diver),time) ->
% (!HoldsAt(DisturbedSilt(),time-1) &
%  HoldsAt(DisturbedSilt(),time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',532).
% From E: 
% 
% '->'(
%    happens_at(becomeDisoriented(Diver),Time), 
%    (holds_at(not(disturbedSilt()),Time-1) , 
%     holds_at(disturbedSilt(),Time))).
 %   [Time, Time-1].
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',532).
happens_at(becomeDisoriented(Diver), Time) ->
    holds_at(not(disturbedSilt), Time-1),
    holds_at(disturbedSilt, Time).

% event Panic(diver)
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',535).
% From E: 
% 
% event(panic(diver)).
events([panic/1]).
mpred_prop(panic(diver),action).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',535).
actions([panic/1]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',538).
% [diver,time]
 % Happens(Panic(diver),time) ->
% HoldsAt(Disoriented(diver),time) |
% HoldsAt(UncontrolledBuoyancy(diver),time) |
% ({equipment} Happens(Lose(diver,equipment),time-1)) |
% Happens(Vomit(diver),time-1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',538).
% From E: 
% 
% '->'(
%    happens_at(panic(Diver),Time), 
%    (holds_at(disoriented(Diver),Time) ; 
%      holds_at(uncontrolledBuoyancy(Diver),Time) ; 
%      exists(
%         [Equipment], 
%         happens_at(lose(Diver,Equipment),Time-1)) ; 
%     happens_at(vomit(Diver),Time-1))).
 %   [Time, Time-1].
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',538).
happens_at(panic(Diver), Time) ->
    (   holds_at(disoriented(Diver), Time)
    ;   holds_at(uncontrolledBuoyancy(Diver), Time)
    ;   exists([Equipment],
               happens_at(lose(Diver, Equipment), Time-1))
    ;   happens_at(vomit(Diver), Time-1)
    ).

% event Vomit(diver)
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',543).
% From E: 
% 
% event(vomit(diver)).
events([vomit/1]).
mpred_prop(vomit(diver),action).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',543).
actions([vomit/1]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',546).
%; conditions

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',548).
% fluent Unconscious(diver)
% From E: 
% 
% fluent(unconscious(diver)).
mpred_prop(unconscious(diver),fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',548).
fluents([unconscious/1]).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',550).
% event GoUnconscious(diver)
% From E: 
% 
% event(goUnconscious(diver)).
events([goUnconscious/1]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',550).
mpred_prop(goUnconscious(diver),action).
actions([goUnconscious/1]).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',552).
% event RegainConsciousness(diver)
% From E: 
% 
% event(regainConsciousness(diver)).
events([regainConsciousness/1]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',552).
mpred_prop(regainConsciousness(diver),action).
actions([regainConsciousness/1]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',554).
% [diver,time]
% Initiates(GoUnconscious(diver),Unconscious(diver),time).
% From E: 
% 
% initiates_at(
%    goUnconscious(Diver), 
%    unconscious(Diver), 
%    Time).
 %   [Time].
goUnconscious(Diver)initiates unconscious(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',554).

 /*  initiated(happens(goUnconscious(Diver),
   		  Time_From,
   		  Time_Until),
   	  unconscious(Diver),
   	  []).
 */
 %  "% =================================".


% [diver,time]
% Terminates(RegainConsciousness(diver),Unconscious(diver),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',558).
% From E: 
% 
% terminates_at(
%    regainConsciousness(Diver), 
%    unconscious(Diver), 
%    Time).
 %   [Time].
regainConsciousness(Diver)terminates unconscious(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',558).

 /*  terminated(happens(regainConsciousness(Diver),
   		   Time_From,
   		   Time_Until),
   	   unconscious(Diver),
   	   []).
 */
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',560).
% [diver,time]
% Happens(GoUnconscious(diver),time) ->
% Happens(RapidAscendToSurface(diver),time).
% From E: 
% 
% '->'(
%    happens_at(goUnconscious(Diver),Time), 
%    happens_at(rapidAscendToSurface(Diver),Time)).
 %   [Time].
if goUnconscious(Diver)then rapidAscendToSurface(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',560).

 /*  reactive_rule([ happens(goUnconscious(Diver),
   			Time_From,
   			Time_Until)
   	      ],
   	      [rapidAscendToSurface(Diver)]).
 */
 %  "% =================================".

% fluent HasEarPain(diver)
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',563).
% From E: 
% 
% fluent(hasEarPain(diver)).
mpred_prop(hasEarPain(diver),fluent).
fluents([hasEarPain/1]).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',566).
% event StartEarPain(diver)
% From E: 
% 
% event(startEarPain(diver)).
events([startEarPain/1]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',566).
mpred_prop(startEarPain(diver),action).
actions([startEarPain/1]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',568).
% [diver,time]
 % Initiates(StartEarPain(diver),HasEarPain(diver),time).
% From E: 
% 
% initiates_at(
%    startEarPain(Diver), 
%    hasEarPain(Diver), 
%    Time).
 %   [Time].
startEarPain(Diver)initiates hasEarPain(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',568).

 /*  initiated(happens(startEarPain(Diver),
   		  Time_From,
   		  Time_Until),
   	  hasEarPain(Diver),
   	  []).
 */
 %  "% =================================".

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',570).
% fluent HasRupturedEardrum(diver)
% From E: 
% 
% fluent(hasRupturedEardrum(diver)).
mpred_prop(hasRupturedEardrum(diver),fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',570).
fluents([hasRupturedEardrum/1]).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',572).
% event RuptureEardrum(diver)
% From E: 
% 
% event(ruptureEardrum(diver)).
events([ruptureEardrum/1]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',572).
mpred_prop(ruptureEardrum(diver),action).
actions([ruptureEardrum/1]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',574).
% [diver,time]
% Initiates(RuptureEardrum(diver),HasRupturedEardrum(diver),time).
% From E: 
% 
% initiates_at(
%    ruptureEardrum(Diver), 
%    hasRupturedEardrum(Diver), 
%    Time).
 %   [Time].
ruptureEardrum(Diver)initiates hasRupturedEardrum(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',574).

 /*  initiated(happens(ruptureEardrum(Diver),
   		  Time_From,
   		  Time_Until),
   	  hasRupturedEardrum(Diver),
   	  []).
 */
 %  "% =================================".

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',576).
% fluent ConditionOK(diver)
% From E: 
% 
% fluent(conditionOK(diver)).
mpred_prop(conditionOK(diver),fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',576).
fluents([conditionOK/1]).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',578).
% fluent HasDecompressionIllness(diver)
% From E: 
% 
% fluent(hasDecompressionIllness(diver)).
mpred_prop(hasDecompressionIllness(diver),fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',578).
fluents([hasDecompressionIllness/1]).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',580).
% event StartDecompressionIllness(diver)
% From E: 
% 
% event(startDecompressionIllness(diver)).
events([startDecompressionIllness/1]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',580).
mpred_prop(startDecompressionIllness(diver),action).
actions([startDecompressionIllness/1]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',582).
% [diver,time]
% Initiates(StartDecompressionIllness(diver),
%           HasDecompressionIllness(diver),
%           time).
% From E: 
% 
% initiates_at(
%    startDecompressionIllness(Diver), 
%    hasDecompressionIllness(Diver), 
%    Time).
 %   [Time].
startDecompressionIllness(Diver)initiates hasDecompressionIllness(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',582).

 /*  initiated(happens(startDecompressionIllness(Diver),
   		  Time_From,
   		  Time_Until),
   	  hasDecompressionIllness(Diver),
   	  []).
 */
 %  "% =================================".

% fluent SignalingDecompress(computer,diver)
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',586).
% From E: 
% 
% fluent(signalingDecompress(computer,diver)).
mpred_prop(signalingDecompress(computer,diver),fluent).
fluents([signalingDecompress/2]).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',589).
% fluent SignalingLowOnAir(computer,airtank,diver)
% From E: 
% 
% fluent(signalingLowOnAir(computer,airtank,diver)).
mpred_prop(signalingLowOnAir(computer,airtank,diver),fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',589).
fluents([signalingLowOnAir/3]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',591).
% [computer,airtank,diver,time]
% HoldsAt(SignalingLowOnAir(computer,airtank,diver),time) ->
% HoldsAt(LowOnAir(airtank),time).
% From E: 
% 
% '->'(
%    holds_at(signalingLowOnAir(Computer,Airtank,Diver),Time), 
%    holds_at(lowOnAir(Airtank),Time)).
 %   [Time].
lowOnAir(Airtank)if signalingLowOnAir(Computer, Airtank, Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',591).

 /*  l_int(holds(lowOnAir(Airtank),Time_At),
         [signalingLowOnAir(Computer,Airtank,Diver)]).
 */
 %  "% =================================".


% [computer,diver,time]
% HoldsAt(SignalingDecompress(computer,diver),time) ->
% !{time1} time1<time & Happens(Decompress(diver),time1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',596).
% From E: 
% 
% '->'(
%    holds_at(signalingDecompress(Computer,Diver),Time), 
%    not(
%       exists(
%          [Time1], 
%          (Time1<Time , 
%           happens_at(decompress(Diver),Time1))))).
 %   [Time, Time1].
false comparison(Time1, Time, <), happens_at(decompress(Diver), Time1), holds_at(signalingDecompress(Computer, Diver), Time).

 /*  d_pre([ comparison(Time1,Time,<),
   	happens_at(decompress(Diver),Time1),
   	holds_at(signalingDecompress(Computer,Diver),
   		 Time)
         ]).
 */
 %  "% =================================".

% event Decompress(diver)
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',598).
% From E: 
% 
% event(decompress(diver)).
events([decompress/1]).
mpred_prop(decompress(diver),action).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',598).
actions([decompress/1]).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',601).
% event EqualizeEars(diver)
% From E: 
% 
% event(equalizeEars(diver)).
events([equalizeEars/1]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',601).
mpred_prop(equalizeEars(diver),action).
actions([equalizeEars/1]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',603).
% [diver,time]
% (Happens(Descend1(diver),time) | Happens(Ascend1(diver),time)) &
% !Happens(EqualizeEars(diver),time) ->
% Happens(StartEarPain(diver),time) &
% Happens(RuptureEardrum(diver),time).
% From E: 
% 
% '->'(
%    ((happens_at(descend1(Diver),Time) ; 
%      happens_at(ascend1(Diver),Time)) , 
%     not(happens_at(equalizeEars(Diver),Time))), 
%    (happens_at(startEarPain(Diver),Time) , 
%     happens_at(ruptureEardrum(Diver),Time))).
 %   [Time].
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',603).
false((not(descend1(Diver)), not(ascend1(Diver)))), not(equalizeEars(Diver)) ->
    startEarPain(Diver),
    ruptureEardrum(Diver).


% [diver,time]
% Happens(Ascend1(diver),time) &
% !Happens(Decompress(diver),time) ->
% Happens(StartDecompressionIllness(diver),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',610).
% From E: 
% 
% '->'(
%    (happens_at(ascend1(Diver),Time) , 
%     not(happens_at(decompress(Diver),Time))), 
%    happens_at(startDecompressionIllness(Diver),Time)).
 %   [Time].
startDecompressionIllness(Diver)if ascend1(Diver), not decompress(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',610).

 /*  l_events(happens(startDecompressionIllness(Diver),
   		 Time_From,
   		 Time_From),
   	 [ascend1(Diver),not(decompress(Diver))]).
 */
 %  "% =================================".


% [diver1,diver2,time]
% HoldsAt(Holding(diver1,diver2),time) &
% Happens(Ascend1(diver1),time) &
% !Happens(Decompress(diver2),time) ->
% Happens(StartDecompressionIllness(diver2),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',615).
% From E: 
% 
% '->'(
%    (holds_at(holding(Diver1,Diver2),Time) , 
%      happens_at(ascend1(Diver1),Time) , 
%     not(happens_at(decompress(Diver2),Time))), 
%    happens_at(startDecompressionIllness(Diver2),Time)).
 %   [Time].
startDecompressionIllness(Diver2)if holding(Diver1, Diver2), ascend1(Diver1), not decompress(Diver2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',615).

 /*  l_events(happens(startDecompressionIllness(Diver2),
   		 Time_From,
   		 Time_From),
   	 [ holds(holding(Diver1,Diver2),Time_From),
   	   ascend1(Diver1),
   	   not(decompress(Diver2))
   	 ]).
 */
 %  "% =================================".


% [diver,time]
% Happens(Decompress(diver),time) ->
% ({depth} depth>0 & HoldsAt(AtDepth(diver,depth),time)) &
% !HoldsAt(UncontrolledBuoyancy(diver),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',621).
% From E: 
% 
% '->'(
%    happens_at(decompress(Diver),Time), 
%    (exists(
%        [Depth], 
%        (Depth>0 , 
%         holds_at(atDepth(Diver,Depth),Time))) , 
%     holds_at(not(uncontrolledBuoyancy(Diver)),Time))).
 %   [Time].
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',621).
decompress(Diver) ->
    exists([Depth],  (Depth>0, atDepth(Diver, Depth))),
    not(uncontrolledBuoyancy(Diver)).

% fluent HasHeadache(diver)
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',624).
% From E: 
% 
% fluent(hasHeadache(diver)).
mpred_prop(hasHeadache(diver),fluent).
fluents([hasHeadache/1]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',627).
% [diver,time]
% HoldsAt(ConditionOK(diver),time) ->
% !HoldsAt(Unconscious(diver),time) &
% !HoldsAt(HasEarPain(diver),time) &
% !HoldsAt(HasRupturedEardrum(diver),time) &
% !HoldsAt(HasDecompressionIllness(diver),time) &
% !HoldsAt(HasHeadache(diver),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',627).
% From E: 
% 
% '->'(
%    holds_at(conditionOK(Diver),Time), 
%    (holds_at(not(unconscious(Diver)),Time) , 
%      holds_at(not(hasEarPain(Diver)),Time) , 
%      holds_at(not(hasRupturedEardrum(Diver)),Time) , 
%      holds_at(not(hasDecompressionIllness(Diver)),Time) , 
%     holds_at(not(hasHeadache(Diver)),Time))).
 %   [Time].
if conditionOK(Diver)then not unconscious(Diver), not hasEarPain(Diver), not hasRupturedEardrum(Diver), not hasDecompressionIllness(Diver), not hasHeadache(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',627).

 /*  reactive_rule([conditionOK(Diver)],
   	      [ holds(not(unconscious(Diver)),Time_At),
   		holds(not(hasEarPain(Diver)),Time_At),
   		holds(not(hasRupturedEardrum(Diver)),
   		      Time_At),
   		holds(not(hasDecompressionIllness(Diver)),
   		      Time_At),
   		not(hasHeadache(Diver))
   	      ]).
 */
 %  "% =================================".

% event BeAirlifted(diver)
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',634).
% From E: 
% 
% event(beAirlifted(diver)).
events([beAirlifted/1]).
mpred_prop(beAirlifted(diver),action).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',634).
actions([beAirlifted/1]).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',637).
% event TakeInWater(diver)
% From E: 
% 
% event(takeInWater(diver)).
events([takeInWater/1]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',637).
mpred_prop(takeInWater(diver),action).
actions([takeInWater/1]).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',639).
% fluent LowOnAir(airtank)
% From E: 
% 
% fluent(lowOnAir(airtank)).
mpred_prop(lowOnAir(airtank),fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',639).
fluents([lowOnAir/1]).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',641).
% event BecomeLowOnAir(airtank)
% From E: 
% 
% event(becomeLowOnAir(airtank)).
mpred_prop(becomeLowOnAir(airtank),event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',641).
events([becomeLowOnAir/1]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',643).
% [airtank,time]
% Initiates(BecomeLowOnAir(airtank),LowOnAir(airtank),time).
% From E: 
% 
% initiates_at(
%    becomeLowOnAir(Airtank), 
%    lowOnAir(Airtank), 
%    Time).
 %   [Time].
becomeLowOnAir(Airtank)initiates lowOnAir(Airtank).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',643).

 /*  initiated(happens(becomeLowOnAir(Airtank),
   		  Time_From,
   		  Time_Until),
   	  lowOnAir(Airtank),
   	  []).
 */
 %  "% =================================".


%; initial state
% [diver]
 % HoldsAt(ConditionOK(diver),0).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',647).
% From E: 
% 
% holds_at(conditionOK(Diver),0).
initially conditionOK(Diver).
 %  initial_state([conditionOK(Diver)]).
 %  "% =================================".


% [diver]
 % HoldsAt(Vertical(diver),0).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',647).
% From E: 
% 
% holds_at(vertical(Diver),0).
initially vertical(Diver).
 %  initial_state([vertical(Diver)]).
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',649).
% !HoldsAt(DisturbedSilt(),0).
% From E: 
% 
% holds_at(not(disturbedSilt()),0).
initially not disturbedSilt.
 %  initial_state([not(disturbedSilt)]).
 %  "% =================================".


% [diver]
 % !HoldsAt(UncontrolledBuoyancy(diver),0).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',649).
% From E: 
% 
% holds_at(not(uncontrolledBuoyancy(Diver)),0).
initially not uncontrolledBuoyancy(Diver).
 %  initial_state([not(uncontrolledBuoyancy(Diver))]).
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',651).
% [diver]
 % !HoldsAt(Disoriented(diver),0).
% From E: 
% 
% holds_at(not(disoriented(Diver)),0).
initially not disoriented(Diver).
 %  initial_state([not(disoriented(Diver))]).
 %  "% =================================".


% [diver]
 % !HoldsAt(PositivelyBuoyant(diver),0) &
%         !HoldsAt(NeutrallyBuoyant(diver),0) &
%         !HoldsAt(NegativelyBuoyant(diver),0).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',651).
% From E: 
% 
% (holds_at(not(positivelyBuoyant(Diver)),0) , 
%   holds_at(not(neutrallyBuoyant(Diver)),0) , 
%  holds_at(not(negativelyBuoyant(Diver)),0)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',651).
initially(not(positivelyBuoyant(Diver))),
initially(not(neutrallyBuoyant(Diver))),
initially(not(negativelyBuoyant(Diver))).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',655).
% [diver,object]
 % !HoldsAt(Wearing(diver,object),0).
% From E: 
% 
% holds_at(not(wearing(Diver,Object)),0).
initially not wearing(Diver, Object).
 %  initial_state([not(wearing(Diver,Object))]).
 %  "% =================================".


% [diver,object]
 % !HoldsAt(Holding(diver,object),0).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',655).
% From E: 
% 
% holds_at(not(holding(Diver,Object)),0).
initially not holding(Diver, Object).
 %  initial_state([not(holding(Diver,Object))]).
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',657).
% [diver1,diver2]
 % !HoldsAt(Separated(diver1,diver2),0).
% From E: 
% 
% holds_at(not(separated(Diver1,Diver2)),0).
initially not separated(Diver1, Diver2).
 %  initial_state([not(separated(Diver1,Diver2))]).
 %  "% =================================".


%;[agent,object] !HoldsAt(See(agent,object),0).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',660).
% fluent Separated(diver,diver)
% From E: 
% 
% fluent(separated(diver,diver)).
mpred_prop(separated(diver,diver),fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',660).
fluents([separated/2]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',662).
% [diver1,diver2,time]
% HoldsAt(Separated(diver1,diver2),time) ->
% HoldsAt(Separated(diver2,diver1),time).
% From E: 
% 
% '->'(
%    holds_at(separated(Diver1,Diver2),Time), 
%    holds_at(separated(Diver2,Diver1),Time)).
 %   [Time].
separated(Diver2, Diver1)if separated(Diver1, Diver2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',662).

 /*  l_int(holds(separated(Diver2,Diver1),Time_At),
         [holds(separated(Diver1,Diver2),Time_At)]).
 */
 %  "% =================================".

% event BecomeSeparated(diver,diver)
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',665).
% From E: 
% 
% event(becomeSeparated(diver,diver)).
events([becomeSeparated/2]).
mpred_prop(becomeSeparated(diver,diver),action).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',665).
actions([becomeSeparated/2]).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',668).
% event BeReunitedWith(diver,diver)
% From E: 
% 
% event(beReunitedWith(diver,diver)).
events([beReunitedWith/2]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',668).
mpred_prop(beReunitedWith(diver,diver),action).
actions([beReunitedWith/2]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',670).
% [diver1,diver2,time]
% Initiates(BecomeSeparated(diver1,diver2),Separated(diver1,diver2),time).
% From E: 
% 
% initiates_at(
%    becomeSeparated(Diver1,Diver2), 
%    separated(Diver1,Diver2), 
%    Time).
 %   [Time].
becomeSeparated(Diver1, Diver2)initiates separated(Diver1, Diver2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',670).

 /*  initiated(happens(becomeSeparated(Diver1,Diver2),
   		  Time_From,
   		  Time_Until),
   	  separated(Diver1,Diver2),
   	  []).
 */
 %  "% =================================".


% [diver1,diver2,time]
% Initiates(BecomeSeparated(diver1,diver2),Separated(diver2,diver1),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',674).
% From E: 
% 
% initiates_at(
%    becomeSeparated(Diver1,Diver2), 
%    separated(Diver2,Diver1), 
%    Time).
 %   [Time].
becomeSeparated(Diver1, Diver2)initiates separated(Diver2, Diver1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',674).

 /*  initiated(happens(becomeSeparated(Diver1,Diver2),
   		  Time_From,
   		  Time_Until),
   	  separated(Diver2,Diver1),
   	  []).
 */
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',676).
% [diver1,diver2,time]
% Terminates(BeReunitedWith(diver1,diver2),Separated(diver1,diver2),time).
% From E: 
% 
% terminates_at(
%    beReunitedWith(Diver1,Diver2), 
%    separated(Diver1,Diver2), 
%    Time).
 %   [Time].
beReunitedWith(Diver1, Diver2)terminates separated(Diver1, Diver2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',676).

 /*  terminated(happens(beReunitedWith(Diver1,Diver2),
   		   Time_From,
   		   Time_Until),
   	   separated(Diver1,Diver2),
   	   []).
 */
 %  "% =================================".


% [diver1,diver2,time]
% Terminates(BeReunitedWith(diver1,diver2),Separated(diver2,diver1),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',680).
% From E: 
% 
% terminates_at(
%    beReunitedWith(Diver1,Diver2), 
%    separated(Diver2,Diver1), 
%    Time).
 %   [Time].
beReunitedWith(Diver1, Diver2)terminates separated(Diver2, Diver1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',680).

 /*  terminated(happens(beReunitedWith(Diver1,Diver2),
   		   Time_From,
   		   Time_Until),
   	   separated(Diver2,Diver1),
   	   []).
 */
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',682).
%; End of file.
% From E: 
% 
% :-call_pel_directive(translate(ending,'/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e.lps')).
:- call_pel_directive(translate(ending,
                                '/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e.lps')).
