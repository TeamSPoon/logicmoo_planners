:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/CTime.e',43).
% translate: unskipped  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e.lps 
:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(lps).
% translate: begining  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e.lps 
% Thu, 08 Oct 2020 21:36:00 GMT File: <stream>(0x55894c2e1d00)%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; scuba diving
%;

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',14).
% sort object
% sort(object).
sort(object).

% sort agent: object
% subsort(agent,object).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',14).
subsort(agent,object).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',16).
% sort diver: agent
% subsort(diver,agent).
subsort(diver,agent).

% sort depth: integer
% subsort(depth,integer).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',16).
subsort(depth,integer).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',18).
% sort boat: object
% subsort(boat,object).
subsort(boat,object).
%; reference line, anchor line, shotline, SMB line, ...

% sort line: object
% subsort(line,object).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',20).
subsort(line,object).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',23).
% sort equipment: object
% subsort(equipment,object).
subsort(equipment,object).

% sort weight: equipment
% subsort(weight,equipment).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',23).
subsort(weight,equipment).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',25).
% sort fin: equipment
% subsort(fin,equipment).
subsort(fin,equipment).

% sort airtank: equipment
% subsort(airtank,equipment).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',25).
subsort(airtank,equipment).
%; buoyancy compensator (BC)
%; buoyancy control device (BCD)

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',30).
% sort computer: equipment
% subsort(computer,equipment).
subsort(computer,equipment).

% sort bc: equipment
% subsort(bc,equipment).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',30).
subsort(bc,equipment).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',33).
% fluent AtDepth(object,depth)
% fluent(
%    atDepth(object,depth)).
fluents([atDepth/2]).
% mpred_prop(
%    atDepth(object,depth), 
%    fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',33).
mpred_prop(atDepth(object,depth),fluent).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',35).
% [object,depth1,depth2,time]
% HoldsAt(AtDepth(object,depth1),time) &
% HoldsAt(AtDepth(object,depth2),time) ->
% depth1 = depth2.
% '->'(
%    ','(
%       atDepth(Object,Depth2), 
%       not(
%          equals(Depth1,Depth2))), 
%    not(
%       atDepth(Object,Depth1))).
not atDepth(Object, Depth1)if atDepth(Object, Depth2), not equals(Depth1, Depth2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',35).

 /*  l_int(holds(not(atDepth(Object,Depth1)),Time_At),
         [ holds(atDepth(Object,Depth2),Time_At),
   	not(equals(Depth1,Depth2))
         ]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       atDepth(Object,Depth1), 
%       not(
%          equals(Depth2,Depth1))), 
%    not(
%       atDepth(Object,Depth2))).
not atDepth(Object, Depth2)if atDepth(Object, Depth1), not equals(Depth2, Depth1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',35).

 /*  l_int(holds(not(atDepth(Object,Depth2)),Time_At5),
         [ holds(atDepth(Object,Depth1),Time_At5),
   	not(equals(Depth2,Depth1))
         ]).
 */
 %  "% =================================".

% event Ascend(diver,depth)
% event(
%    ascend(diver,depth)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',39).
events([ascend/2]).
% mpred_prop(
%    ascend(diver,depth), 
%    event).
mpred_prop(ascend(diver,depth),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',42).
% event Descend(diver,depth)
% event(
%    descend(diver,depth)).
events([descend/2]).
% mpred_prop(
%    descend(diver,depth), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',42).
mpred_prop(descend(diver,depth),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',44).
% [diver,depth1,depth2,time]
% HoldsAt(AtDepth(diver,depth1),time) &
% Happens(Descend(diver,depth2),time) ->
% depth2>depth1.
% '->'(
%    ','(
%       atDepth(Diver,Depth1), 
%       descend(Diver,Depth2)), 
%    comparison(Depth2,Depth1,>)).
if atDepth(Diver, Depth1), descend(Diver, Depth2)then comparison(Depth2, Depth1, >).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',44).

 /*  reactive_rule([ holds(atDepth(Diver,Depth1),Time_At),
   		happens(descend(Diver,Depth2),
   			Time_At,
   			Time_Until)
   	      ],
   	      [comparison(Depth2,Depth1,>)]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       descend(Diver,Depth2), 
%       not(
%          comparison(Depth2,Depth1,>))), 
%    not(
%       atDepth(Diver,Depth1))).
not atDepth(Diver, Depth1)if descend(Diver, Depth2), not comparison(Depth2, Depth1, >).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',44).

 /*  l_int(holds(not(atDepth(Diver,Depth1)),Time_At6),
         [ happens(descend(Diver,Depth2),
   		Time_At6,
   		Time_At6),
   	not(comparison(Depth2,Depth1,>))
         ]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       atDepth(Diver,Depth1), 
%       not(
%          comparison(Depth2,Depth1,>))), 
%    not(
%       descend(Diver,Depth2))).
if atDepth(Diver, Depth1), not comparison(Depth2, Depth1, >)then not descend(Diver, Depth2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',44).

 /*  reactive_rule([ holds(atDepth(Diver,Depth1),Time_At7),
   		not(comparison(Depth2,Depth1,>))
   	      ],
   	      [not(descend(Diver,Depth2))]).
 */
 %  "% =================================".


% [diver,depth1,depth2,time]
% HoldsAt(AtDepth(diver,depth1),time) &
% Happens(Ascend(diver,depth2),time) ->
% depth2<depth1.
% '->'(
%    ','(
%       atDepth(Diver,Depth1), 
%       ascend(Diver,Depth2)), 
%    comparison(Depth2,Depth1,<)).
if atDepth(Diver, Depth1), ascend(Diver, Depth2)then comparison(Depth2, Depth1, <).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',50).

 /*  reactive_rule([ holds(atDepth(Diver,Depth1),Time_At),
   		happens(ascend(Diver,Depth2),
   			Time_At,
   			Time_Until)
   	      ],
   	      [comparison(Depth2,Depth1,<)]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       ascend(Diver,Depth2), 
%       not(
%          comparison(Depth2,Depth1,<))), 
%    not(
%       atDepth(Diver,Depth1))).
not atDepth(Diver, Depth1)if ascend(Diver, Depth2), not comparison(Depth2, Depth1, <).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',50).

 /*  l_int(holds(not(atDepth(Diver,Depth1)),Time_At6),
         [ happens(ascend(Diver,Depth2),
   		Time_At6,
   		Time_At6),
   	not(comparison(Depth2,Depth1,<))
         ]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       atDepth(Diver,Depth1), 
%       not(
%          comparison(Depth2,Depth1,<))), 
%    not(
%       ascend(Diver,Depth2))).
if atDepth(Diver, Depth1), not comparison(Depth2, Depth1, <)then not ascend(Diver, Depth2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',50).

 /*  reactive_rule([ holds(atDepth(Diver,Depth1),Time_At7),
   		not(comparison(Depth2,Depth1,<))
   	      ],
   	      [not(ascend(Diver,Depth2))]).
 */
 %  "% =================================".


% [diver,depth,time]
% Initiates(Descend(diver,depth),AtDepth(diver,depth),time).
% initiates(
%    descend(Diver,Depth), 
%    atDepth(Diver,Depth), 
%    Time).
descend(Diver, Depth)initiates atDepth(Diver, Depth).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',55).

 /*  initiated(happens(descend(Diver,Depth),
   		  Time_From,
   		  Time_Until),
   	  atDepth(Diver,Depth),
   	  []).
 */
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',57).
% [diver,depth1,depth2,time]
% HoldsAt(AtDepth(diver,depth1),time) ->
% Terminates(Descend(diver,depth2),AtDepth(diver,depth1),time).
% '->'(
%    atDepth(Diver,Depth1), 
%    terminates(
%       descend(Diver,Depth2), 
%       atDepth(Diver,Depth1), 
%       Time)).
if atDepth(Diver, Depth1)then terminates(descend(Diver, Depth2), atDepth(Diver, Depth1)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',57).

 /*  reactive_rule([holds(atDepth(Diver,Depth1),Time_At)],
   	      [ terminates(descend(Diver,Depth2),
   			   at(atDepth(Diver,Depth1),
   			      Time),
   			   Terminates)
   	      ]).
 */
 %  "% =================================".


% [diver,depth,time]
% Initiates(Ascend(diver,depth),AtDepth(diver,depth),time).
% initiates(
%    ascend(Diver,Depth), 
%    atDepth(Diver,Depth), 
%    Time).
ascend(Diver, Depth)initiates atDepth(Diver, Depth).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',62).

 /*  initiated(happens(ascend(Diver,Depth),
   		  Time_From,
   		  Time_Until),
   	  atDepth(Diver,Depth),
   	  []).
 */
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',64).
% [diver,depth1,depth2,time]
% HoldsAt(AtDepth(diver,depth1),time) ->
% Terminates(Ascend(diver,depth2),AtDepth(diver,depth1),time).
% '->'(
%    atDepth(Diver,Depth1), 
%    terminates(
%       ascend(Diver,Depth2), 
%       atDepth(Diver,Depth1), 
%       Time)).
if atDepth(Diver, Depth1)then terminates(ascend(Diver, Depth2), atDepth(Diver, Depth1)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',64).

 /*  reactive_rule([holds(atDepth(Diver,Depth1),Time_At)],
   	      [ terminates(ascend(Diver,Depth2),
   			   at(atDepth(Diver,Depth1),
   			      Time),
   			   Terminates)
   	      ]).
 */
 %  "% =================================".

% fluent Wearing(diver,equipment)
% fluent(
%    wearing(diver,equipment)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',67).
fluents([wearing/2]).
% mpred_prop(
%    wearing(diver,equipment), 
%    fluent).
mpred_prop(wearing(diver,equipment),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',70).
% event PutOn(diver,equipment)
% event(
%    putOn(diver,equipment)).
events([putOn/2]).
% mpred_prop(
%    putOn(diver,equipment), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',70).
mpred_prop(putOn(diver,equipment),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',72).
% event TakeOff(diver,equipment)
% event(
%    takeOff(diver,equipment)).
events([takeOff/2]).
% mpred_prop(
%    takeOff(diver,equipment), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',72).
mpred_prop(takeOff(diver,equipment),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',74).
% event Lose(diver,equipment)
% event(
%    lose(diver,equipment)).
events([lose/2]).
% mpred_prop(
%    lose(diver,equipment), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',74).
mpred_prop(lose(diver,equipment),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',76).
% [diver,equipment,depth,time]
% Releases(PutOn(diver,equipment),AtDepth(equipment,depth),time).
% releases(
%    putOn(Diver,Equipment), 
%    atDepth(Equipment,Depth), 
%    Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',76).
releases(putOn(Diver,Equipment),
	 atDepth(Equipment,Depth),
	 Time).


% [diver,equipment,time]
% Releases(PutOn(diver,equipment),UnderWater(equipment),time).
% releases(
%    putOn(Diver,Equipment), 
%    underWater(Equipment), 
%    Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',80).
releases(putOn(Diver,Equipment),
	 underWater(Equipment),
	 Time).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',82).
% [diver,equipment,time]
% Happens(PutOn(diver,equipment),time) ->
% !{diver1} HoldsAt(Wearing(diver1,equipment),time).
% '->'(
%    metreqs(
%       putOn(Diver,Equipment)), 
%    requires(
%       putOn(Diver,Equipment), 
%       When_Time)).
if putOn(Diver, Equipment)then requires(putOn(Diver, Equipment), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',82).

 /*  reactive_rule([ happens(putOn(Diver,Equipment),
   			Time_From,
   			Time_Until)
   	      ],
   	      [ requires(putOn(Diver,Equipment),
   			 When_Time)
   	      ]).
 */
 %  "% =================================".
% '->'(
%    not(
%       wearing(Diver1,Equipment)), 
%    metreqs(
%       putOn(Diver,Equipment))).
putOn(Diver, Equipment)if not wearing(Diver1, Equipment).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',82).

 /*  l_events(happens(putOn(Diver,Equipment),
   		 Time_From7,
   		 Time_From7),
   	 [ holds(not(wearing(Diver1,Equipment)),
   		 Time_From7)
   	 ]).
 */
 %  "% =================================".
% '->'(
%    wearing(Diver1,Equipment), 
%    not(
%       putOn(Diver,Equipment))).
if wearing(Diver1, Equipment)then not putOn(Diver, Equipment).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',82).

 /*  reactive_rule([ holds(wearing(Diver1,Equipment),
   		      Time_At)
   	      ],
   	      [not(putOn(Diver,Equipment))]).
 */
 %  "% =================================".


% [diver,depth,equipment,time]
% HoldsAt(Wearing(diver,equipment),time) ->
% (HoldsAt(AtDepth(diver,depth),time) <->
%  HoldsAt(AtDepth(equipment,depth),time)).
% '->'(
%    ';'(
%       ','(
%          not(
%             atDepth(Equipment,Depth)), 
%          atDepth(Diver,Depth)), 
%       ','(
%          not(
%             atDepth(Diver,Depth)), 
%          atDepth(Equipment,Depth))), 
%    not(
%       wearing(Diver,Equipment))).
not wearing(Diver, Equipment)if not atDepth(Equipment, Depth), atDepth(Diver, Depth);not atDepth(Diver, Depth), atDepth(Equipment, Depth).
 %  l_int(holds(not(wearing(Diver, Equipment)), Time_At), [(not(atDepth(Equipment, Depth)), atDepth(Diver, Depth);not(atDepth(Diver, Depth)), atDepth(Equipment, Depth))]).
 %  "% =================================".
% '->'(
%    ','(
%       atDepth(Diver,Depth), 
%       wearing(Diver,Equipment)), 
%    atDepth(Equipment,Depth)).
atDepth(Equipment, Depth)if atDepth(Diver, Depth), wearing(Diver, Equipment).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',87).

 /*  l_int(holds(atDepth(Equipment,Depth),Time_At5),
         [ holds(atDepth(Diver,Depth),Time_At5),
   	holds(wearing(Diver,Equipment),Time_At5)
         ]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       not(
%          atDepth(Equipment,Depth)), 
%       wearing(Diver,Equipment)), 
%    not(
%       atDepth(Diver,Depth))).
not atDepth(Diver, Depth)if not atDepth(Equipment, Depth), wearing(Diver, Equipment).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',87).

 /*  l_int(holds(not(atDepth(Diver,Depth)),Time_At6),
         [ holds(not(atDepth(Equipment,Depth)),Time_At6),
   	holds(wearing(Diver,Equipment),Time_At6)
         ]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       atDepth(Equipment,Depth), 
%       wearing(Diver,Equipment)), 
%    atDepth(Diver,Depth)).
atDepth(Diver, Depth)if atDepth(Equipment, Depth), wearing(Diver, Equipment).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',87).

 /*  l_int(holds(atDepth(Diver,Depth),Time_At7),
         [ holds(atDepth(Equipment,Depth),Time_At7),
   	holds(wearing(Diver,Equipment),Time_At7)
         ]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       not(
%          atDepth(Diver,Depth)), 
%       wearing(Diver,Equipment)), 
%    not(
%       atDepth(Equipment,Depth))).
not atDepth(Equipment, Depth)if not atDepth(Diver, Depth), wearing(Diver, Equipment).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',87).

 /*  l_int(holds(not(atDepth(Equipment,Depth)),Time_At8),
         [ holds(not(atDepth(Diver,Depth)),Time_At8),
   	holds(wearing(Diver,Equipment),Time_At8)
         ]).
 */
 %  "% =================================".


% [diver,depth,object,time]
% HoldsAt(Holding(diver,object),time) ->
% (HoldsAt(AtDepth(diver,depth),time) <->
%  HoldsAt(AtDepth(object,depth),time)).
% '->'(
%    ';'(
%       ','(
%          not(
%             atDepth(Object,Depth)), 
%          atDepth(Diver,Depth)), 
%       ','(
%          not(
%             atDepth(Diver,Depth)), 
%          atDepth(Object,Depth))), 
%    not(
%       holding(Diver,Object))).
not holding(Diver, Object)if not atDepth(Object, Depth), atDepth(Diver, Depth);not atDepth(Diver, Depth), atDepth(Object, Depth).
 %  l_int(holds(not(holding(Diver, Object)), Time_At), [(not(atDepth(Object, Depth)), atDepth(Diver, Depth);not(atDepth(Diver, Depth)), atDepth(Object, Depth))]).
 %  "% =================================".
% '->'(
%    ','(
%       atDepth(Diver,Depth), 
%       holding(Diver,Object)), 
%    atDepth(Object,Depth)).
atDepth(Object, Depth)if atDepth(Diver, Depth), holding(Diver, Object).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',92).

 /*  l_int(holds(atDepth(Object,Depth),Time_At5),
         [ holds(atDepth(Diver,Depth),Time_At5),
   	holds(holding(Diver,Object),Time_At5)
         ]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       not(
%          atDepth(Object,Depth)), 
%       holding(Diver,Object)), 
%    not(
%       atDepth(Diver,Depth))).
not atDepth(Diver, Depth)if not atDepth(Object, Depth), holding(Diver, Object).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',92).

 /*  l_int(holds(not(atDepth(Diver,Depth)),Time_At6),
         [ holds(not(atDepth(Object,Depth)),Time_At6),
   	holds(holding(Diver,Object),Time_At6)
         ]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       atDepth(Object,Depth), 
%       holding(Diver,Object)), 
%    atDepth(Diver,Depth)).
atDepth(Diver, Depth)if atDepth(Object, Depth), holding(Diver, Object).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',92).

 /*  l_int(holds(atDepth(Diver,Depth),Time_At7),
         [ holds(atDepth(Object,Depth),Time_At7),
   	holds(holding(Diver,Object),Time_At7)
         ]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       not(
%          atDepth(Diver,Depth)), 
%       holding(Diver,Object)), 
%    not(
%       atDepth(Object,Depth))).
not atDepth(Object, Depth)if not atDepth(Diver, Depth), holding(Diver, Object).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',92).

 /*  l_int(holds(not(atDepth(Object,Depth)),Time_At8),
         [ holds(not(atDepth(Diver,Depth)),Time_At8),
   	holds(holding(Diver,Object),Time_At8)
         ]).
 */
 %  "% =================================".


% [diver,equipment,time]
% HoldsAt(Wearing(diver,equipment),time) ->
% (HoldsAt(UnderWater(diver),time) <->
%  HoldsAt(UnderWater(equipment),time)).
% '->'(
%    ';'(
%       ','(
%          not(
%             underWater(Equipment)), 
%          underWater(Diver)), 
%       ','(
%          not(
%             underWater(Diver)), 
%          underWater(Equipment))), 
%    not(
%       wearing(Diver,Equipment))).
not wearing(Diver, Equipment)if not underWater(Equipment), underWater(Diver);not underWater(Diver), underWater(Equipment).
 %  l_int(holds(not(wearing(Diver, Equipment)), Time_At), [(not(underWater(Equipment)), underWater(Diver);not(underWater(Diver)), underWater(Equipment))]).
 %  "% =================================".
% '->'(
%    ','(
%       underWater(Diver), 
%       wearing(Diver,Equipment)), 
%    underWater(Equipment)).
underWater(Equipment)if underWater(Diver), wearing(Diver, Equipment).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',97).

 /*  l_int(holds(underWater(Equipment),Time_At4),
         [ holds(underWater(Diver),Time_At4),
   	holds(wearing(Diver,Equipment),Time_At4)
         ]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       not(
%          underWater(Equipment)), 
%       wearing(Diver,Equipment)), 
%    not(
%       underWater(Diver))).
not underWater(Diver)if not underWater(Equipment), wearing(Diver, Equipment).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',97).

 /*  l_int(holds(not(underWater(Diver)),Time_At5),
         [ holds(not(underWater(Equipment)),Time_At5),
   	holds(wearing(Diver,Equipment),Time_At5)
         ]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       underWater(Equipment), 
%       wearing(Diver,Equipment)), 
%    underWater(Diver)).
underWater(Diver)if underWater(Equipment), wearing(Diver, Equipment).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',97).

 /*  l_int(holds(underWater(Diver),Time_At6),
         [ holds(underWater(Equipment),Time_At6),
   	holds(wearing(Diver,Equipment),Time_At6)
         ]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       not(
%          underWater(Diver)), 
%       wearing(Diver,Equipment)), 
%    not(
%       underWater(Equipment))).
not underWater(Equipment)if not underWater(Diver), wearing(Diver, Equipment).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',97).

 /*  l_int(holds(not(underWater(Equipment)),Time_At7),
         [ holds(not(underWater(Diver)),Time_At7),
   	holds(wearing(Diver,Equipment),Time_At7)
         ]).
 */
 %  "% =================================".


% [diver,object,time]
% HoldsAt(Holding(diver,object),time) ->
% (HoldsAt(UnderWater(diver),time) <->
%  HoldsAt(UnderWater(object),time)).
% '->'(
%    ';'(
%       ','(
%          not(
%             underWater(Object)), 
%          underWater(Diver)), 
%       ','(
%          not(
%             underWater(Diver)), 
%          underWater(Object))), 
%    not(
%       holding(Diver,Object))).
not holding(Diver, Object)if not underWater(Object), underWater(Diver);not underWater(Diver), underWater(Object).
 %  l_int(holds(not(holding(Diver, Object)), Time_At), [(not(underWater(Object)), underWater(Diver);not(underWater(Diver)), underWater(Object))]).
 %  "% =================================".
% '->'(
%    ','(
%       underWater(Diver), 
%       holding(Diver,Object)), 
%    underWater(Object)).
underWater(Object)if underWater(Diver), holding(Diver, Object).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',102).

 /*  l_int(holds(underWater(Object),Time_At4),
         [ holds(underWater(Diver),Time_At4),
   	holds(holding(Diver,Object),Time_At4)
         ]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       not(
%          underWater(Object)), 
%       holding(Diver,Object)), 
%    not(
%       underWater(Diver))).
not underWater(Diver)if not underWater(Object), holding(Diver, Object).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',102).

 /*  l_int(holds(not(underWater(Diver)),Time_At5),
         [ holds(not(underWater(Object)),Time_At5),
   	holds(holding(Diver,Object),Time_At5)
         ]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       underWater(Object), 
%       holding(Diver,Object)), 
%    underWater(Diver)).
underWater(Diver)if underWater(Object), holding(Diver, Object).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',102).

 /*  l_int(holds(underWater(Diver),Time_At6),
         [ holds(underWater(Object),Time_At6),
   	holds(holding(Diver,Object),Time_At6)
         ]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       not(
%          underWater(Diver)), 
%       holding(Diver,Object)), 
%    not(
%       underWater(Object))).
not underWater(Object)if not underWater(Diver), holding(Diver, Object).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',102).

 /*  l_int(holds(not(underWater(Object)),Time_At7),
         [ holds(not(underWater(Diver)),Time_At7),
   	holds(holding(Diver,Object),Time_At7)
         ]).
 */
 %  "% =================================".


% [diver,depth,equipment,time]
% HoldsAt(AtDepth(diver,depth),time) &
% HoldsAt(Wearing(diver,equipment),time) ->
% Initiates(TakeOff(diver,equipment),AtDepth(equipment,depth),time).
% '->'(
%    ','(
%       atDepth(Diver,Depth), 
%       wearing(Diver,Equipment)), 
%    initiates(
%       takeOff(Diver,Equipment), 
%       atDepth(Equipment,Depth), 
%       Time)).
if atDepth(Diver, Depth), wearing(Diver, Equipment)then initiates(takeOff(Diver, Equipment), atDepth(Equipment, Depth)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',107).

 /*  reactive_rule([ holds(atDepth(Diver,Depth),Time_At),
   		holds(wearing(Diver,Equipment),
   		      Time_At)
   	      ],
   	      [ initiates(takeOff(Diver,Equipment),
   			  at(atDepth(Equipment,Depth),
   			     Time),
   			  Initiates)
   	      ]).
 */
 %  "% =================================".


% [diver,depth,equipment,time]
% !HoldsAt(AtDepth(diver,depth),time) &
% HoldsAt(Wearing(diver,equipment),time) ->
% Terminates(TakeOff(diver,equipment),AtDepth(equipment,depth),time).
% '->'(
%    ','(
%       not(
%          atDepth(Diver,Depth)), 
%       wearing(Diver,Equipment)), 
%    terminates(
%       takeOff(Diver,Equipment), 
%       atDepth(Equipment,Depth), 
%       Time)).
if not atDepth(Diver, Depth), wearing(Diver, Equipment)then terminates(takeOff(Diver, Equipment), atDepth(Equipment, Depth)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',112).

 /*  reactive_rule([ holds(not(atDepth(Diver,Depth)),
   		      Time_At),
   		holds(wearing(Diver,Equipment),
   		      Time_At)
   	      ],
   	      [ terminates(takeOff(Diver,Equipment),
   			   at(atDepth(Equipment,Depth),
   			      Time),
   			   Terminates)
   	      ]).
 */
 %  "% =================================".


% [diver,equipment,time]
% HoldsAt(UnderWater(diver),time) ->
% Initiates(TakeOff(diver,equipment),UnderWater(equipment),time).
% '->'(
%    underWater(Diver), 
%    initiates(
%       takeOff(Diver,Equipment), 
%       underWater(Equipment), 
%       Time)).
if underWater(Diver)then initiates(takeOff(Diver, Equipment), underWater(Equipment)at Time, _).

 /*  reactive_rule([holds(underWater(Diver),Time_At)],
   	      [ initiates(takeOff(Diver,Equipment),
   			  at(underWater(Equipment),Time),
   			  Initiates)
   	      ]).
 */
 %  "% =================================".


% [diver,equipment,time]
% !HoldsAt(UnderWater(diver),time) ->
% Terminates(TakeOff(diver,equipment),UnderWater(equipment),time).
% '->'(
%    not(
%       underWater(Diver)), 
%    terminates(
%       takeOff(Diver,Equipment), 
%       underWater(Equipment), 
%       Time)).
if not underWater(Diver)then terminates(takeOff(Diver, Equipment), underWater(Equipment)at Time, _).

 /*  reactive_rule([holds(not(underWater(Diver)),Time_At)],
   	      [ terminates(takeOff(Diver,Equipment),
   			   at(underWater(Equipment),Time),
   			   Terminates)
   	      ]).
 */
 %  "% =================================".


% [diver,equipment,depth,time]
% HoldsAt(AtDepth(diver,depth),time) &
% HoldsAt(Wearing(diver,equipment),time) ->
% Initiates(Lose(diver,equipment),AtDepth(equipment,depth),time).
% '->'(
%    ','(
%       atDepth(Diver,Depth), 
%       wearing(Diver,Equipment)), 
%    initiates(
%       lose(Diver,Equipment), 
%       atDepth(Equipment,Depth), 
%       Time)).
if atDepth(Diver, Depth), wearing(Diver, Equipment)then initiates(lose(Diver, Equipment), atDepth(Equipment, Depth)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',125).

 /*  reactive_rule([ holds(atDepth(Diver,Depth),Time_At),
   		holds(wearing(Diver,Equipment),
   		      Time_At)
   	      ],
   	      [ initiates(lose(Diver,Equipment),
   			  at(atDepth(Equipment,Depth),
   			     Time),
   			  Initiates)
   	      ]).
 */
 %  "% =================================".


% [diver,equipment,depth,time]
% !HoldsAt(AtDepth(diver,depth),time) &
% HoldsAt(Wearing(diver,equipment),time) ->
% Terminates(Lose(diver,equipment),AtDepth(equipment,depth),time).
% '->'(
%    ','(
%       not(
%          atDepth(Diver,Depth)), 
%       wearing(Diver,Equipment)), 
%    terminates(
%       lose(Diver,Equipment), 
%       atDepth(Equipment,Depth), 
%       Time)).
if not atDepth(Diver, Depth), wearing(Diver, Equipment)then terminates(lose(Diver, Equipment), atDepth(Equipment, Depth)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',130).

 /*  reactive_rule([ holds(not(atDepth(Diver,Depth)),
   		      Time_At),
   		holds(wearing(Diver,Equipment),
   		      Time_At)
   	      ],
   	      [ terminates(lose(Diver,Equipment),
   			   at(atDepth(Equipment,Depth),
   			      Time),
   			   Terminates)
   	      ]).
 */
 %  "% =================================".


% [diver,equipment,time]
% HoldsAt(UnderWater(diver),time) ->
% Initiates(Lose(diver,equipment),UnderWater(equipment),time).
% '->'(
%    underWater(Diver), 
%    initiates(
%       lose(Diver,Equipment), 
%       underWater(Equipment), 
%       Time)).
if underWater(Diver)then initiates(lose(Diver, Equipment), underWater(Equipment)at Time, _).

 /*  reactive_rule([holds(underWater(Diver),Time_At)],
   	      [ initiates(lose(Diver,Equipment),
   			  at(underWater(Equipment),Time),
   			  Initiates)
   	      ]).
 */
 %  "% =================================".


% [diver,equipment,time]
% !HoldsAt(UnderWater(diver),time) ->
% Terminates(Lose(diver,equipment),UnderWater(equipment),time).
% '->'(
%    not(
%       underWater(Diver)), 
%    terminates(
%       lose(Diver,Equipment), 
%       underWater(Equipment), 
%       Time)).
if not underWater(Diver)then terminates(lose(Diver, Equipment), underWater(Equipment)at Time, _).

 /*  reactive_rule([holds(not(underWater(Diver)),Time_At)],
   	      [ terminates(lose(Diver,Equipment),
   			   at(underWater(Equipment),Time),
   			   Terminates)
   	      ]).
 */
 %  "% =================================".

% fluent Holding(diver,object)
% fluent(
%    holding(diver,object)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',141).
fluents([holding/2]).
% mpred_prop(
%    holding(diver,object), 
%    fluent).
mpred_prop(holding(diver,object),fluent).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',144).
% [diver1,diver2,time]
% HoldsAt(Holding(diver1,diver2),time) ->
% !HoldsAt(Holding(diver2,diver1),time).
% '->'(
%    holding(Diver1,Diver2), 
%    not(
%       holding(Diver2,Diver1))).
not holding(Diver2, Diver1)if holding(Diver1, Diver2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',144).

 /*  l_int(holds(not(holding(Diver2,Diver1)),Time_At),
         [holds(holding(Diver1,Diver2),Time_At)]).
 */
 %  "% =================================".
% '->'(
%    not(
%       not(
%          holding(Diver2,Diver1))), 
%    not(
%       holding(Diver1,Diver2))).
not holding(Diver1, Diver2)if not not holding(Diver2, Diver1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',144).

 /*  l_int(holds(not(holding(Diver1,Diver2)),Time_At4),
         [ holds(not([ holds(not(holding(Diver2,Diver1)),
   			  Time_At4)
   		  ]),
   	      Time_At4)
         ]).
 */
 %  "% =================================".

% event Grab(diver,object)
% event(
%    grab(diver,object)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',147).
events([grab/2]).
% mpred_prop(
%    grab(diver,object), 
%    event).
mpred_prop(grab(diver,object),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',150).
% event LetGoOf(diver,object)
% event(
%    letGoOf(diver,object)).
events([letGoOf/2]).
% mpred_prop(
%    letGoOf(diver,object), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',150).
mpred_prop(letGoOf(diver,object),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',152).
% [diver,object,time]
% Initiates(Grab(diver,object),Holding(diver,object),time).
% initiates(
%    grab(Diver,Object), 
%    holding(Diver,Object), 
%    Time).
grab(Diver, Object)initiates holding(Diver, Object).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',152).

 /*  initiated(happens(grab(Diver,Object),
   		  Time_From,
   		  Time_Until),
   	  holding(Diver,Object),
   	  []).
 */
 %  "% =================================".


% [diver,object,time]
% Terminates(LetGoOf(diver,object),Holding(diver,object),time).
% terminates(
%    letGoOf(Diver,Object), 
%    holding(Diver,Object), 
%    Time).
letGoOf(Diver, Object)terminates holding(Diver, Object).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',156).

 /*  terminated(happens(letGoOf(Diver,Object),
   		   Time_From,
   		   Time_Until),
   	   holding(Diver,Object),
   	   []).
 */
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',158).
% [diver,object,depth,time]
% Releases(Grab(diver,object),AtDepth(object,depth),time).
% releases(
%    grab(Diver,Object), 
%    atDepth(Object,Depth), 
%    Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',158).
releases(grab(Diver,Object),
	 atDepth(Object,Depth),
	 Time).


% [diver,object,time]
% Releases(Grab(diver,object),UnderWater(object),time).
% releases(
%    grab(Diver,Object), 
%    underWater(Object), 
%    Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',162).
releases(grab(Diver,Object),
	 underWater(Object),
	 Time).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',164).
% [diver,object,depth,time]
% HoldsAt(AtDepth(diver,depth),time) &
% HoldsAt(Holding(diver,object),time) ->
% Initiates(LetGoOf(diver,object),AtDepth(object,depth),time).
% '->'(
%    ','(
%       atDepth(Diver,Depth), 
%       holding(Diver,Object)), 
%    initiates(
%       letGoOf(Diver,Object), 
%       atDepth(Object,Depth), 
%       Time)).
if atDepth(Diver, Depth), holding(Diver, Object)then initiates(letGoOf(Diver, Object), atDepth(Object, Depth)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',164).

 /*  reactive_rule([ holds(atDepth(Diver,Depth),Time_At),
   		holds(holding(Diver,Object),Time_At)
   	      ],
   	      [ initiates(letGoOf(Diver,Object),
   			  at(atDepth(Object,Depth),
   			     Time),
   			  Initiates)
   	      ]).
 */
 %  "% =================================".


% [diver,object,depth,time]
% !HoldsAt(AtDepth(diver,depth),time) &
% HoldsAt(Holding(diver,object),time) ->
% Terminates(LetGoOf(diver,object),AtDepth(object,depth),time).
% '->'(
%    ','(
%       not(
%          atDepth(Diver,Depth)), 
%       holding(Diver,Object)), 
%    terminates(
%       letGoOf(Diver,Object), 
%       atDepth(Object,Depth), 
%       Time)).
if not atDepth(Diver, Depth), holding(Diver, Object)then terminates(letGoOf(Diver, Object), atDepth(Object, Depth)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',170).

 /*  reactive_rule([ holds(not(atDepth(Diver,Depth)),
   		      Time_At),
   		holds(holding(Diver,Object),Time_At)
   	      ],
   	      [ terminates(letGoOf(Diver,Object),
   			   at(atDepth(Object,Depth),
   			      Time),
   			   Terminates)
   	      ]).
 */
 %  "% =================================".


% [diver,object,time]
% HoldsAt(UnderWater(diver),time) ->
% Initiates(LetGoOf(diver,object),UnderWater(object),time).
% '->'(
%    underWater(Diver), 
%    initiates(
%       letGoOf(Diver,Object), 
%       underWater(Object), 
%       Time)).
if underWater(Diver)then initiates(letGoOf(Diver, Object), underWater(Object)at Time, _).

 /*  reactive_rule([holds(underWater(Diver),Time_At)],
   	      [ initiates(letGoOf(Diver,Object),
   			  at(underWater(Object),Time),
   			  Initiates)
   	      ]).
 */
 %  "% =================================".


% [diver,object,time]
% !HoldsAt(UnderWater(diver),time) ->
% Terminates(LetGoOf(diver,object),UnderWater(object),time).
% '->'(
%    not(
%       underWater(Diver)), 
%    terminates(
%       letGoOf(Diver,Object), 
%       underWater(Object), 
%       Time)).
if not underWater(Diver)then terminates(letGoOf(Diver, Object), underWater(Object)at Time, _).

 /*  reactive_rule([holds(not(underWater(Diver)),Time_At)],
   	      [ terminates(letGoOf(Diver,Object),
   			   at(underWater(Object),Time),
   			   Terminates)
   	      ]).
 */
 %  "% =================================".


% [diver,equipment,time]
% Initiates(PutOn(diver,equipment),Wearing(diver,equipment),time).
% initiates(
%    putOn(Diver,Equipment), 
%    wearing(Diver,Equipment), 
%    Time).
putOn(Diver, Equipment)initiates wearing(Diver, Equipment).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',183).

 /*  initiated(happens(putOn(Diver,Equipment),
   		  Time_From,
   		  Time_Until),
   	  wearing(Diver,Equipment),
   	  []).
 */
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',185).
% [diver,equipment,time]
% Happens(PutOn(diver,equipment),time) ->
% !HoldsAt(UnderWater(diver),time).
% '->'(
%    metreqs(
%       putOn(Diver,Equipment)), 
%    requires(
%       putOn(Diver,Equipment), 
%       When_Time)).
if putOn(Diver, Equipment)then requires(putOn(Diver, Equipment), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',185).

 /*  reactive_rule([ happens(putOn(Diver,Equipment),
   			Time_From,
   			Time_Until)
   	      ],
   	      [ requires(putOn(Diver,Equipment),
   			 When_Time)
   	      ]).
 */
 %  "% =================================".
% '->'(
%    not(
%       underWater(Diver)), 
%    metreqs(
%       putOn(Diver,Equipment))).
putOn(Diver, Equipment)if not underWater(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',185).

 /*  l_events(happens(putOn(Diver,Equipment),
   		 Time_From6,
   		 Time_From6),
   	 [holds(not(underWater(Diver)),Time_From6)]).
 */
 %  "% =================================".
% '->'(
%    not(
%       not(
%          underWater(Diver))), 
%    not(
%       putOn(Diver,Equipment))).
if not not underWater(Diver)then not putOn(Diver, Equipment).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',185).

 /*  reactive_rule([ holds(not([ holds(not(underWater(Diver)),
   				  Time_At)
   			  ]),
   		      Time_At)
   	      ],
   	      [not(putOn(Diver,Equipment))]).
 */
 %  "% =================================".


% [diver,equipment,time]
% Terminates(TakeOff(diver,equipment),Wearing(diver,equipment),time).
% terminates(
%    takeOff(Diver,Equipment), 
%    wearing(Diver,Equipment), 
%    Time).
takeOff(Diver, Equipment)terminates wearing(Diver, Equipment).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',190).

 /*  terminated(happens(takeOff(Diver,Equipment),
   		   Time_From,
   		   Time_Until),
   	   wearing(Diver,Equipment),
   	   []).
 */
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',192).
% [diver,equipment,time]
% Terminates(Lose(diver,equipment),Wearing(diver,equipment),time).
% terminates(
%    lose(Diver,Equipment), 
%    wearing(Diver,Equipment), 
%    Time).
lose(Diver, Equipment)terminates wearing(Diver, Equipment).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',192).

 /*  terminated(happens(lose(Diver,Equipment),
   		   Time_From,
   		   Time_Until),
   	   wearing(Diver,Equipment),
   	   []).
 */
 %  "% =================================".

% fluent Vertical(diver)
% fluent(
%    vertical(diver)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',194).
fluents([vertical/1]).
% mpred_prop(
%    vertical(diver), 
%    fluent).
mpred_prop(vertical(diver),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',197).
% fluent HorizontalDown(diver)
% fluent(
%    horizontalDown(diver)).
fluents([horizontalDown/1]).
% mpred_prop(
%    horizontalDown(diver), 
%    fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',197).
mpred_prop(horizontalDown(diver),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',199).
% fluent Inverted(diver)
% fluent(
%    inverted(diver)).
fluents([inverted/1]).
% mpred_prop(
%    inverted(diver), 
%    fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',199).
mpred_prop(inverted(diver),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',201).
% fluent HorizontalUp(diver)
% fluent(
%    horizontalUp(diver)).
fluents([horizontalUp/1]).
% mpred_prop(
%    horizontalUp(diver), 
%    fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',201).
mpred_prop(horizontalUp(diver),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',203).
% xor Vertical, HorizontalDown, Inverted, HorizontalUp
% xor(
%    ==>, 
%    [ vertical, 
%      horizontalDown, 
%      inverted, 
%      horizontalUp ]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',203).
==>xor[vertical,horizontalDown,inverted,horizontalUp].

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',205).
% event RotatePitch(diver)
% event(
%    rotatePitch(diver)).
events([rotatePitch/1]).
% mpred_prop(
%    rotatePitch(diver), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',205).
mpred_prop(rotatePitch(diver),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',207).
% [diver,time]
% HoldsAt(Vertical(diver),time) ->
% Initiates(RotatePitch(diver),HorizontalDown(diver),time).
% '->'(
%    vertical(Diver), 
%    initiates(
%       rotatePitch(Diver), 
%       horizontalDown(Diver), 
%       Time)).
if vertical(Diver)then initiates(rotatePitch(Diver), horizontalDown(Diver)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',207).

 /*  reactive_rule([vertical(Diver)],
   	      [ initiates(rotatePitch(Diver),
   			  at(horizontalDown(Diver),Time),
   			  Initiates)
   	      ]).
 */
 %  "% =================================".


% [diver,time]
% HoldsAt(HorizontalDown(diver),time) ->
% Initiates(RotatePitch(diver),Inverted(diver),time).
% '->'(
%    horizontalDown(Diver), 
%    initiates(
%       rotatePitch(Diver), 
%       inverted(Diver), 
%       Time)).
if horizontalDown(Diver)then initiates(rotatePitch(Diver), inverted(Diver)at Time, _).

 /*  reactive_rule([horizontalDown(Diver)],
   	      [ initiates(rotatePitch(Diver),
   			  at(inverted(Diver),Time),
   			  Initiates)
   	      ]).
 */
 %  "% =================================".


% [diver,time]
% HoldsAt(HorizontalDown(diver),time) ->
% Terminates(RotatePitch(diver),HorizontalDown(diver),time).
% '->'(
%    horizontalDown(Diver), 
%    terminates(
%       rotatePitch(Diver), 
%       horizontalDown(Diver), 
%       Time)).
if horizontalDown(Diver)then terminates(rotatePitch(Diver), horizontalDown(Diver)at Time, _).

 /*  reactive_rule([horizontalDown(Diver)],
   	      [ terminates(rotatePitch(Diver),
   			   at(horizontalDown(Diver),Time),
   			   Terminates)
   	      ]).
 */
 %  "% =================================".


% [diver,time]
% HoldsAt(Inverted(diver),time) ->
% Initiates(RotatePitch(diver),HorizontalUp(diver),time).
% '->'(
%    inverted(Diver), 
%    initiates(
%       rotatePitch(Diver), 
%       horizontalUp(Diver), 
%       Time)).
if inverted(Diver)then initiates(rotatePitch(Diver), horizontalUp(Diver)at Time, _).

 /*  reactive_rule([inverted(Diver)],
   	      [ initiates(rotatePitch(Diver),
   			  at(horizontalUp(Diver),Time),
   			  Initiates)
   	      ]).
 */
 %  "% =================================".


% [diver,time]
% HoldsAt(Inverted(diver),time) ->
% Terminates(RotatePitch(diver),Inverted(diver),time).
% '->'(
%    inverted(Diver), 
%    terminates(
%       rotatePitch(Diver), 
%       inverted(Diver), 
%       Time)).
if inverted(Diver)then terminates(rotatePitch(Diver), inverted(Diver)at Time, _).

 /*  reactive_rule([inverted(Diver)],
   	      [ terminates(rotatePitch(Diver),
   			   at(inverted(Diver),Time),
   			   Terminates)
   	      ]).
 */
 %  "% =================================".


% [diver,time]
% HoldsAt(HorizontalUp(diver),time) ->
% Initiates(RotatePitch(diver),Vertical(diver),time).
% '->'(
%    horizontalUp(Diver), 
%    initiates(
%       rotatePitch(Diver), 
%       vertical(Diver), 
%       Time)).
if horizontalUp(Diver)then initiates(rotatePitch(Diver), vertical(Diver)at Time, _).

 /*  reactive_rule([horizontalUp(Diver)],
   	      [ initiates(rotatePitch(Diver),
   			  at(vertical(Diver),Time),
   			  Initiates)
   	      ]).
 */
 %  "% =================================".


% [diver,time]
% HoldsAt(HorizontalUp(diver),time) ->
% Terminates(RotatePitch(diver),HorizontalUp(diver),time).
% '->'(
%    horizontalUp(Diver), 
%    terminates(
%       rotatePitch(Diver), 
%       horizontalUp(Diver), 
%       Time)).
if horizontalUp(Diver)then terminates(rotatePitch(Diver), horizontalUp(Diver)at Time, _).

 /*  reactive_rule([horizontalUp(Diver)],
   	      [ terminates(rotatePitch(Diver),
   			   at(horizontalUp(Diver),Time),
   			   Terminates)
   	      ]).
 */
 %  "% =================================".

% event RotateYaw(diver)
% event(
%    rotateYaw(diver)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',234).
events([rotateYaw/1]).
% mpred_prop(
%    rotateYaw(diver), 
%    event).
mpred_prop(rotateYaw(diver),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',237).
%; try taking out Holding condition here
% [diver,time]
% Happens(Ascend1(diver),time) &
% !Happens(RapidAscendToSurface(diver),time) &
% !({diver1} HoldsAt(Holding(diver,diver1),time)) ->
% Happens(RotateYaw(diver),time).
% '->'(
%    ','(
%       ascend1(Diver), 
%       ','(
%          not(
%             rapidAscendToSurface(Diver)), 
%          not(
%             holding(Diver,Diver1)))), 
%    rotateYaw(Diver)).
if ascend1(Diver), not rapidAscendToSurface(Diver), not holding(Diver, Diver1)then rotateYaw(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',239).

 /*  reactive_rule([ ascend1(Diver),
   		not(rapidAscendToSurface(Diver)),
   		holds(not(holding(Diver,Diver1)),
   		      Time_At)
   	      ],
   	      [rotateYaw(Diver)]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       not(
%          rapidAscendToSurface(Diver)), 
%       ','(
%          not(
%             holding(Diver,Diver1)), 
%          not(
%             rotateYaw(Diver)))), 
%    not(
%       ascend1(Diver))).
if not rapidAscendToSurface(Diver), not holding(Diver, Diver1), not rotateYaw(Diver)then not ascend1(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',239).

 /*  reactive_rule([ not(rapidAscendToSurface(Diver)),
   		holds(not(holding(Diver,Diver1)),
   		      Time_At4),
   		not(rotateYaw(Diver))
   	      ],
   	      [not(ascend1(Diver))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       not(
%          holding(Diver,Diver1)), 
%       ','(
%          ascend1(Diver), 
%          not(
%             rotateYaw(Diver)))), 
%    rapidAscendToSurface(Diver)).
if not holding(Diver, Diver1), ascend1(Diver), not rotateYaw(Diver)then rapidAscendToSurface(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',239).

 /*  reactive_rule([ holds(not(holding(Diver,Diver1)),
   		      Time_At5),
   		ascend1(Diver),
   		not(rotateYaw(Diver))
   	      ],
   	      [rapidAscendToSurface(Diver)]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       not(
%          rapidAscendToSurface(Diver)), 
%       ','(
%          ascend1(Diver), 
%          not(
%             rotateYaw(Diver)))), 
%    holding(Diver,Diver1)).
holding(Diver, Diver1)if not rapidAscendToSurface(Diver), ascend1(Diver), not rotateYaw(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',239).

 /*  l_int(holds(holding(Diver,Diver1),Time_At6),
         [ not(rapidAscendToSurface(Diver)),
   	ascend1(Diver),
   	not(rotateYaw(Diver))
         ]).
 */
 %  "% =================================".

% fluent UnderWater(object)
% fluent(
%    underWater(object)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',243).
fluents([underWater/1]).
% mpred_prop(
%    underWater(object), 
%    fluent).
mpred_prop(underWater(object),fluent).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',246).
% [object,depth,time]
% depth>% 0 &
% HoldsAt(AtDepth(object,depth),time) ->
% HoldsAt(UnderWater(object),time).
% '->'(
%    ','(
%       comparison(Depth,0,>), 
%       atDepth(Object,Depth)), 
%    underWater(Object)).
underWater(Object)if comparison(Depth, 0, >), atDepth(Object, Depth).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',246).

 /*  l_int(holds(underWater(Object),Time_At),
         [ comparison(Depth,0,>),
   	holds(atDepth(Object,Depth),Time_At)
         ]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       comparison(Depth,0,>), 
%       not(
%          underWater(Object))), 
%    not(
%       atDepth(Object,Depth))).
not atDepth(Object, Depth)if comparison(Depth, 0, >), not underWater(Object).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',246).

 /*  l_int(holds(not(atDepth(Object,Depth)),Time_At4),
         [ comparison(Depth,0,>),
   	holds(not(underWater(Object)),Time_At4)
         ]).
 */
 %  "% =================================".

% event EnterWater(object)
% event(
%    enterWater(object)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',250).
events([enterWater/1]).
% mpred_prop(
%    enterWater(object), 
%    event).
mpred_prop(enterWater(object),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',253).
% event Surface(object)
% event(
%    surface(object)).
events([surface/1]).
% mpred_prop(
%    surface(object), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',253).
mpred_prop(surface(object),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',255).
% [object,time]
% Initiates(EnterWater(object),UnderWater(object),time).
% initiates(
%    enterWater(Object), 
%    underWater(Object), 
%    Time).
enterWater(Object)initiates underWater(Object).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',255).

 /*  initiated(happens(enterWater(Object),
   		  Time_From,
   		  Time_Until),
   	  underWater(Object),
   	  []).
 */
 %  "% =================================".


% [diver,time]
% Happens(EnterWater(diver),time) ->
% !{diver1} HoldsAt(Holding(diver1,diver),time).
% '->'(
%    metreqs(
%       enterWater(Diver)), 
%    requires(
%       enterWater(Diver), 
%       When_Time)).
if enterWater(Diver)then requires(enterWater(Diver), When_Time).

 /*  reactive_rule([ happens(enterWater(Diver),
   			Time_From,
   			Time_Until)
   	      ],
   	      [requires(enterWater(Diver),When_Time)]).
 */
 %  "% =================================".
% '->'(
%    not(
%       holding(Diver1,Diver)), 
%    metreqs(
%       enterWater(Diver))).
enterWater(Diver)if not holding(Diver1, Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',259).

 /*  l_events(happens(enterWater(Diver),
   		 Time_From6,
   		 Time_From6),
   	 [ holds(not(holding(Diver1,Diver)),
   		 Time_From6)
   	 ]).
 */
 %  "% =================================".
% '->'(
%    holding(Diver1,Diver), 
%    not(
%       enterWater(Diver))).
if holding(Diver1, Diver)then not enterWater(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',259).

 /*  reactive_rule([holds(holding(Diver1,Diver),Time_At)],
   	      [not(enterWater(Diver))]).
 */
 %  "% =================================".


% [object,depth,time]
% depth=% 0 ->
% Initiates(EnterWater(object),AtDepth(object,depth),time).
% '->'(
%    equals(Depth,0), 
%    initiates(
%       enterWater(Object), 
%       atDepth(Object,Depth), 
%       Time)).
if equals(0, Depth)then initiates(enterWater(Object), atDepth(Object, Depth)at Time, _).

 /*  reactive_rule([equals(0,Depth)],
   	      [ initiates(enterWater(Object),
   			  at(atDepth(Object,Depth),
   			     Time),
   			  Initiates)
   	      ]).
 */
 %  "% =================================".


% [object,time]
% Terminates(Surface(object),UnderWater(object),time).
% terminates(
%    surface(Object), 
%    underWater(Object), 
%    Time).
surface(Object)terminates underWater(Object).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',267).

 /*  terminated(happens(surface(Object),
   		   Time_From,
   		   Time_Until),
   	   underWater(Object),
   	   []).
 */
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',269).
% [diver,time]
% Terminates(Surface(diver),PositivelyBuoyant(diver),time).
% terminates(
%    surface(Diver), 
%    positivelyBuoyant(Diver), 
%    Time).
surface(Diver)terminates positivelyBuoyant(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',269).

 /*  terminated(happens(surface(Diver),
   		   Time_From,
   		   Time_Until),
   	   positivelyBuoyant(Diver),
   	   []).
 */
 %  "% =================================".


% [diver,time]
% Terminates(Surface(diver),NegativelyBuoyant(diver),time).
% terminates(
%    surface(Diver), 
%    negativelyBuoyant(Diver), 
%    Time).
surface(Diver)terminates negativelyBuoyant(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',273).

 /*  terminated(happens(surface(Diver),
   		   Time_From,
   		   Time_Until),
   	   negativelyBuoyant(Diver),
   	   []).
 */
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',275).
% [diver,time]
% Terminates(Surface(diver),NeutrallyBuoyant(diver),time).
% terminates(
%    surface(Diver), 
%    neutrallyBuoyant(Diver), 
%    Time).
surface(Diver)terminates neutrallyBuoyant(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',275).

 /*  terminated(happens(surface(Diver),
   		   Time_From,
   		   Time_Until),
   	   neutrallyBuoyant(Diver),
   	   []).
 */
 %  "% =================================".


% [object,depth,time]
% Terminates(Surface(object),AtDepth(object,depth),time).
% terminates(
%    surface(Object), 
%    atDepth(Object,Depth), 
%    Time).
surface(Object)terminates atDepth(Object, Depth).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',279).

 /*  terminated(happens(surface(Object),
   		   Time_From,
   		   Time_Until),
   	   atDepth(Object,Depth),
   	   []).
 */
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',281).
% [diver,time]
 % Happens(EnterWater(diver),time) ->
% HoldsAt(Vertical(diver),time).
% '->'(
%    metreqs(
%       enterWater(Diver)), 
%    requires(
%       enterWater(Diver), 
%       When_Time)).
if enterWater(Diver)then requires(enterWater(Diver), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',281).

 /*  reactive_rule([ happens(enterWater(Diver),
   			Time_From,
   			Time_Until)
   	      ],
   	      [requires(enterWater(Diver),When_Time)]).
 */
 %  "% =================================".
% '->'(
%    vertical(Diver), 
%    metreqs(
%       enterWater(Diver))).
enterWater(Diver)if vertical(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',281).

 /*  l_events(happens(enterWater(Diver),
   		 Time_From5,
   		 Time_From5),
   	 [vertical(Diver)]).
 */
 %  "% =================================".
% '->'(
%    not(
%       vertical(Diver)), 
%    not(
%       enterWater(Diver))).
if not vertical(Diver)then not enterWater(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',281).

 /*  reactive_rule([not(vertical(Diver))],
   	      [not(enterWater(Diver))]).
 */
 %  "% =================================".

% fluent StandingOn(diver,boat)
% fluent(
%    standingOn(diver,boat)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',283).
fluents([standingOn/2]).
% mpred_prop(
%    standingOn(diver,boat), 
%    fluent).
mpred_prop(standingOn(diver,boat),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',286).
% event StandOn(diver,boat)
% event(
%    standOn(diver,boat)).
events([standOn/2]).
% mpred_prop(
%    standOn(diver,boat), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',286).
mpred_prop(standOn(diver,boat),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',288).
% [diver,boat,time]
% Terminates(EnterWater(diver),StandingOn(diver,boat),time).
% terminates(
%    enterWater(Diver), 
%    standingOn(Diver,Boat), 
%    Time).
enterWater(Diver)terminates standingOn(Diver, Boat).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',288).

 /*  terminated(happens(enterWater(Diver),
   		   Time_From,
   		   Time_Until),
   	   standingOn(Diver,Boat),
   	   []).
 */
 %  "% =================================".


% [diver,boat,time]
% Initiates(StandOn(diver,boat),StandingOn(diver,boat),time).
% initiates(
%    standOn(Diver,Boat), 
%    standingOn(Diver,Boat), 
%    Time).
standOn(Diver, Boat)initiates standingOn(Diver, Boat).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',292).

 /*  initiated(happens(standOn(Diver,Boat),
   		  Time_From,
   		  Time_Until),
   	  standingOn(Diver,Boat),
   	  []).
 */
 %  "% =================================".

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',294).
% fluent PositivelyBuoyant(diver)
% fluent(
%    positivelyBuoyant(diver)).
fluents([positivelyBuoyant/1]).
% mpred_prop(
%    positivelyBuoyant(diver), 
%    fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',294).
mpred_prop(positivelyBuoyant(diver),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',296).
% fluent NeutrallyBuoyant(diver)
% fluent(
%    neutrallyBuoyant(diver)).
fluents([neutrallyBuoyant/1]).
% mpred_prop(
%    neutrallyBuoyant(diver), 
%    fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',296).
mpred_prop(neutrallyBuoyant(diver),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',298).
% fluent NegativelyBuoyant(diver)
% fluent(
%    negativelyBuoyant(diver)).
fluents([negativelyBuoyant/1]).
% mpred_prop(
%    negativelyBuoyant(diver), 
%    fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',298).
mpred_prop(negativelyBuoyant(diver),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',300).
% mutex PositivelyBuoyant, NeutrallyBuoyant, NegativelyBuoyant
% mutex(positivelyBuoyant).
mutex(positivelyBuoyant).
% mutex(neutrallyBuoyant).
mutex(neutrallyBuoyant).
% mutex(negativelyBuoyant).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',300).
mutex(negativelyBuoyant).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',302).
% [diver,time]
% HoldsAt(PositivelyBuoyant(diver),time) ->
% HoldsAt(UnderWater(diver),time).
% '->'(
%    positivelyBuoyant(Diver), 
%    underWater(Diver)).
underWater(Diver)if positivelyBuoyant(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',302).

 /*  l_int(holds(underWater(Diver),Time_At),
         [holds(positivelyBuoyant(Diver),Time_At)]).
 */
 %  "% =================================".
% '->'(
%    not(
%       underWater(Diver)), 
%    not(
%       positivelyBuoyant(Diver))).
not positivelyBuoyant(Diver)if not underWater(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',302).

 /*  l_int(holds(not(positivelyBuoyant(Diver)),Time_At3),
         [holds(not(underWater(Diver)),Time_At3)]).
 */
 %  "% =================================".


% [diver,time]
% HoldsAt(NeutrallyBuoyant(diver),time) ->
% HoldsAt(UnderWater(diver),time).
% '->'(
%    neutrallyBuoyant(Diver), 
%    underWater(Diver)).
underWater(Diver)if neutrallyBuoyant(Diver).

 /*  l_int(holds(underWater(Diver),Time_At),
         [holds(neutrallyBuoyant(Diver),Time_At)]).
 */
 %  "% =================================".
% '->'(
%    not(
%       underWater(Diver)), 
%    not(
%       neutrallyBuoyant(Diver))).
not neutrallyBuoyant(Diver)if not underWater(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',307).

 /*  l_int(holds(not(neutrallyBuoyant(Diver)),Time_At3),
         [holds(not(underWater(Diver)),Time_At3)]).
 */
 %  "% =================================".


% [diver,time]
% HoldsAt(NegativelyBuoyant(diver),time) ->
% HoldsAt(UnderWater(diver),time).
% '->'(
%    negativelyBuoyant(Diver), 
%    underWater(Diver)).
underWater(Diver)if negativelyBuoyant(Diver).

 /*  l_int(holds(underWater(Diver),Time_At),
         [holds(negativelyBuoyant(Diver),Time_At)]).
 */
 %  "% =================================".
% '->'(
%    not(
%       underWater(Diver)), 
%    not(
%       negativelyBuoyant(Diver))).
not negativelyBuoyant(Diver)if not underWater(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',311).

 /*  l_int(holds(not(negativelyBuoyant(Diver)),Time_At3),
         [holds(not(underWater(Diver)),Time_At3)]).
 */
 %  "% =================================".

% event PressDeflateButton(diver,bc)
% event(
%    pressDeflateButton(diver,bc)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',313).
events([pressDeflateButton/2]).
% mpred_prop(
%    pressDeflateButton(diver,bc), 
%    event).
mpred_prop(pressDeflateButton(diver,bc),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',316).
% event PressDumpButton(diver,bc)
% event(
%    pressDumpButton(diver,bc)).
events([pressDumpButton/2]).
% mpred_prop(
%    pressDumpButton(diver,bc), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',316).
mpred_prop(pressDumpButton(diver,bc),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',318).
% event PressInflateButton(diver,bc)
% event(
%    pressInflateButton(diver,bc)).
events([pressInflateButton/2]).
% mpred_prop(
%    pressInflateButton(diver,bc), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',318).
mpred_prop(pressInflateButton(diver,bc),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',320).
% [diver,bc,time]
% Happens(PressDeflateButton(diver,bc),time) ->
% HoldsAt(Vertical(diver),time) &
% HoldsAt(UnderWater(bc),time).
% '->'(
%    ';'(
%       not(
%          vertical(Diver)), 
%       not(
%          underWater(Bc))), 
%    not(
%       pressDeflateButton(Diver,Bc))).
if not vertical(Diver);not underWater(Bc)then not pressDeflateButton(Diver, Bc).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',320).

 /*   reactive_rule([(not(vertical(Diver));not(underWater(Bc)))],
                    [not(pressDeflateButton(Diver, Bc))]).
 */
 %  "% =================================".
% '->'(
%    metreqs(
%       pressDeflateButton(Diver,Bc)), 
%    requires(
%       pressDeflateButton(Diver,Bc), 
%       When_Time)).
if pressDeflateButton(Diver, Bc)then requires(pressDeflateButton(Diver, Bc), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',320).

 /*  reactive_rule([pressDeflateButton(Diver,Bc)],
   	      [ requires(pressDeflateButton(Diver,Bc),
   			 When_Time)
   	      ]).
 */
 %  "% =================================".
% '->'(
%    vertical(Diver), 
%    metreqs(
%       pressDeflateButton(Diver,Bc))).
if vertical(Diver)then pressDeflateButton(Diver, Bc).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',320).

 /*  reactive_rule([vertical(Diver)],
   	      [pressDeflateButton(Diver,Bc)]).
 */
 %  "% =================================".
% '->'(
%    metreqs(
%       pressDeflateButton(Diver,Bc)), 
%    requires(
%       pressDeflateButton(Diver,Bc), 
%       When_Time)).
if pressDeflateButton(Diver, Bc)then requires(pressDeflateButton(Diver, Bc), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',320).

 /*  reactive_rule([pressDeflateButton(Diver,Bc)],
   	      [ requires(pressDeflateButton(Diver,Bc),
   			 When_Time)
   	      ]).
 */
 %  "% =================================".
% '->'(
%    underWater(Bc), 
%    metreqs(
%       pressDeflateButton(Diver,Bc))).
if underWater(Bc)then pressDeflateButton(Diver, Bc).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',320).

 /*  reactive_rule([holds(underWater(Bc),Time_At)],
   	      [pressDeflateButton(Diver,Bc)]).
 */
 %  "% =================================".


% [diver,bc,time]
% Happens(PressDumpButton(diver,bc),time) ->
% HoldsAt(Vertical(diver),time) &
% HoldsAt(UnderWater(bc),time).
% '->'(
%    ';'(
%       not(
%          vertical(Diver)), 
%       not(
%          underWater(Bc))), 
%    not(
%       pressDumpButton(Diver,Bc))).
if not vertical(Diver);not underWater(Bc)then not pressDumpButton(Diver, Bc).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',326).

 /*   reactive_rule([(not(vertical(Diver));not(underWater(Bc)))],
                    [not(pressDumpButton(Diver, Bc))]).
 */
 %  "% =================================".
% '->'(
%    metreqs(
%       pressDumpButton(Diver,Bc)), 
%    requires(
%       pressDumpButton(Diver,Bc), 
%       When_Time)).
if pressDumpButton(Diver, Bc)then requires(pressDumpButton(Diver, Bc), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',326).

 /*  reactive_rule([pressDumpButton(Diver,Bc)],
   	      [ requires(pressDumpButton(Diver,Bc),
   			 When_Time)
   	      ]).
 */
 %  "% =================================".
% '->'(
%    vertical(Diver), 
%    metreqs(
%       pressDumpButton(Diver,Bc))).
if vertical(Diver)then pressDumpButton(Diver, Bc).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',326).

 /*  reactive_rule([vertical(Diver)],
   	      [pressDumpButton(Diver,Bc)]).
 */
 %  "% =================================".
% '->'(
%    metreqs(
%       pressDumpButton(Diver,Bc)), 
%    requires(
%       pressDumpButton(Diver,Bc), 
%       When_Time)).
if pressDumpButton(Diver, Bc)then requires(pressDumpButton(Diver, Bc), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',326).

 /*  reactive_rule([pressDumpButton(Diver,Bc)],
   	      [ requires(pressDumpButton(Diver,Bc),
   			 When_Time)
   	      ]).
 */
 %  "% =================================".
% '->'(
%    underWater(Bc), 
%    metreqs(
%       pressDumpButton(Diver,Bc))).
if underWater(Bc)then pressDumpButton(Diver, Bc).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',326).

 /*  reactive_rule([holds(underWater(Bc),Time_At)],
   	      [pressDumpButton(Diver,Bc)]).
 */
 %  "% =================================".


% [diver,bc,time]
 % Happens(PressDumpButton(diver,bc),time) ->
% HoldsAt(UncontrolledBuoyancy(diver),time).
% '->'(
%    metreqs(
%       pressDumpButton(Diver,Bc)), 
%    requires(
%       pressDumpButton(Diver,Bc), 
%       When_Time)).
if pressDumpButton(Diver, Bc)then requires(pressDumpButton(Diver, Bc), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',329).

 /*  reactive_rule([pressDumpButton(Diver,Bc)],
   	      [ requires(pressDumpButton(Diver,Bc),
   			 When_Time)
   	      ]).
 */
 %  "% =================================".
% '->'(
%    uncontrolledBuoyancy(Diver), 
%    metreqs(
%       pressDumpButton(Diver,Bc))).
if uncontrolledBuoyancy(Diver)then pressDumpButton(Diver, Bc).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',329).

 /*  reactive_rule([holds(uncontrolledBuoyancy(Diver),Time_At)],
   	      [pressDumpButton(Diver,Bc)]).
 */
 %  "% =================================".
% '->'(
%    not(
%       uncontrolledBuoyancy(Diver)), 
%    not(
%       pressDumpButton(Diver,Bc))).
if not uncontrolledBuoyancy(Diver)then not pressDumpButton(Diver, Bc).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',329).

 /*  reactive_rule([ holds(not(uncontrolledBuoyancy(Diver)),
   		      Time_At5)
   	      ],
   	      [not(pressDumpButton(Diver,Bc))]).
 */
 %  "% =================================".


% [diver,bc,time]
% HoldsAt(Wearing(diver,bc),time) ->
% Initiates(PressDeflateButton(diver,bc),NegativelyBuoyant(diver),time).
% '->'(
%    wearing(Diver,Bc), 
%    initiates(
%       pressDeflateButton(Diver,Bc), 
%       negativelyBuoyant(Diver), 
%       Time)).
if wearing(Diver, Bc)then initiates(pressDeflateButton(Diver, Bc), negativelyBuoyant(Diver)at Time, _).

 /*  reactive_rule([holds(wearing(Diver,Bc),Time_At)],
   	      [ initiates(pressDeflateButton(Diver,Bc),
   			  at(negativelyBuoyant(Diver),Time),
   			  Initiates)
   	      ]).
 */
 %  "% =================================".


% [diver,bc,time]
% HoldsAt(Wearing(diver,bc),time) ->
% Terminates(PressDeflateButton(diver,bc),NeutrallyBuoyant(diver),time).
% '->'(
%    wearing(Diver,Bc), 
%    terminates(
%       pressDeflateButton(Diver,Bc), 
%       neutrallyBuoyant(Diver), 
%       Time)).
if wearing(Diver, Bc)then terminates(pressDeflateButton(Diver, Bc), neutrallyBuoyant(Diver)at Time, _).

 /*  reactive_rule([holds(wearing(Diver,Bc),Time_At)],
   	      [ terminates(pressDeflateButton(Diver,Bc),
   			   at(neutrallyBuoyant(Diver),Time),
   			   Terminates)
   	      ]).
 */
 %  "% =================================".


% [diver,bc,time]
% HoldsAt(Wearing(diver,bc),time) ->
% Terminates(PressDeflateButton(diver,bc),PositivelyBuoyant(diver),time).
% '->'(
%    wearing(Diver,Bc), 
%    terminates(
%       pressDeflateButton(Diver,Bc), 
%       positivelyBuoyant(Diver), 
%       Time)).
if wearing(Diver, Bc)then terminates(pressDeflateButton(Diver, Bc), positivelyBuoyant(Diver)at Time, _).

 /*  reactive_rule([holds(wearing(Diver,Bc),Time_At)],
   	      [ terminates(pressDeflateButton(Diver,Bc),
   			   at(positivelyBuoyant(Diver),
   			      Time),
   			   Terminates)
   	      ]).
 */
 %  "% =================================".


% [diver,bc,time]
% HoldsAt(Wearing(diver,bc),time) ->
% Initiates(PressDumpButton(diver,bc),NegativelyBuoyant(diver),time).
% '->'(
%    wearing(Diver,Bc), 
%    initiates(
%       pressDumpButton(Diver,Bc), 
%       negativelyBuoyant(Diver), 
%       Time)).
if wearing(Diver, Bc)then initiates(pressDumpButton(Diver, Bc), negativelyBuoyant(Diver)at Time, _).

 /*  reactive_rule([holds(wearing(Diver,Bc),Time_At)],
   	      [ initiates(pressDumpButton(Diver,Bc),
   			  at(negativelyBuoyant(Diver),Time),
   			  Initiates)
   	      ]).
 */
 %  "% =================================".


% [diver,bc,time]
% HoldsAt(Wearing(diver,bc),time) ->
% Terminates(PressDumpButton(diver,bc),NeutrallyBuoyant(diver),time).
% '->'(
%    wearing(Diver,Bc), 
%    terminates(
%       pressDumpButton(Diver,Bc), 
%       neutrallyBuoyant(Diver), 
%       Time)).
if wearing(Diver, Bc)then terminates(pressDumpButton(Diver, Bc), neutrallyBuoyant(Diver)at Time, _).

 /*  reactive_rule([holds(wearing(Diver,Bc),Time_At)],
   	      [ terminates(pressDumpButton(Diver,Bc),
   			   at(neutrallyBuoyant(Diver),Time),
   			   Terminates)
   	      ]).
 */
 %  "% =================================".


% [diver,bc,time]
% HoldsAt(Wearing(diver,bc),time) ->
% Terminates(PressDumpButton(diver,bc),PositivelyBuoyant(diver),time).
% '->'(
%    wearing(Diver,Bc), 
%    terminates(
%       pressDumpButton(Diver,Bc), 
%       positivelyBuoyant(Diver), 
%       Time)).
if wearing(Diver, Bc)then terminates(pressDumpButton(Diver, Bc), positivelyBuoyant(Diver)at Time, _).

 /*  reactive_rule([holds(wearing(Diver,Bc),Time_At)],
   	      [ terminates(pressDumpButton(Diver,Bc),
   			   at(positivelyBuoyant(Diver),
   			      Time),
   			   Terminates)
   	      ]).
 */
 %  "% =================================".


% [diver,bc,time]
% HoldsAt(Wearing(diver,bc),time) ->
% Initiates(PressInflateButton(diver,bc),NeutrallyBuoyant(diver),time).
% '->'(
%    wearing(Diver,Bc), 
%    initiates(
%       pressInflateButton(Diver,Bc), 
%       neutrallyBuoyant(Diver), 
%       Time)).
if wearing(Diver, Bc)then initiates(pressInflateButton(Diver, Bc), neutrallyBuoyant(Diver)at Time, _).

 /*  reactive_rule([holds(wearing(Diver,Bc),Time_At)],
   	      [ initiates(pressInflateButton(Diver,Bc),
   			  at(neutrallyBuoyant(Diver),Time),
   			  Initiates)
   	      ]).
 */
 %  "% =================================".


% [diver,bc,time]
% HoldsAt(Wearing(diver,bc),time) ->
% Terminates(PressInflateButton(diver,bc),PositivelyBuoyant(diver),time).
% '->'(
%    wearing(Diver,Bc), 
%    terminates(
%       pressInflateButton(Diver,Bc), 
%       positivelyBuoyant(Diver), 
%       Time)).
if wearing(Diver, Bc)then terminates(pressInflateButton(Diver, Bc), positivelyBuoyant(Diver)at Time, _).

 /*  reactive_rule([holds(wearing(Diver,Bc),Time_At)],
   	      [ terminates(pressInflateButton(Diver,Bc),
   			   at(positivelyBuoyant(Diver),
   			      Time),
   			   Terminates)
   	      ]).
 */
 %  "% =================================".


% [diver,bc,time]
% HoldsAt(Wearing(diver,bc),time) ->
% Terminates(PressInflateButton(diver,bc),NegativelyBuoyant(diver),time).
% '->'(
%    wearing(Diver,Bc), 
%    terminates(
%       pressInflateButton(Diver,Bc), 
%       negativelyBuoyant(Diver), 
%       Time)).
if wearing(Diver, Bc)then terminates(pressInflateButton(Diver, Bc), negativelyBuoyant(Diver)at Time, _).

 /*  reactive_rule([holds(wearing(Diver,Bc),Time_At)],
   	      [ terminates(pressInflateButton(Diver,Bc),
   			   at(negativelyBuoyant(Diver),
   			      Time),
   			   Terminates)
   	      ]).
 */
 %  "% =================================".


% [diver,weight,time]
% HoldsAt(Wearing(diver,weight),time) ->
% Initiates(TakeOff(diver,weight),PositivelyBuoyant(diver),time).
% '->'(
%    wearing(Diver,Weight), 
%    initiates(
%       takeOff(Diver,Weight), 
%       positivelyBuoyant(Diver), 
%       Time)).
if wearing(Diver, Weight)then initiates(takeOff(Diver, Weight), positivelyBuoyant(Diver)at Time, _).

 /*  reactive_rule([holds(wearing(Diver,Weight),Time_At)],
   	      [ initiates(takeOff(Diver,Weight),
   			  at(positivelyBuoyant(Diver),Time),
   			  Initiates)
   	      ]).
 */
 %  "% =================================".


% [diver,weight,time]
% HoldsAt(Wearing(diver,weight),time) ->
% Terminates(TakeOff(diver,weight),NegativelyBuoyant(diver),time).
% '->'(
%    wearing(Diver,Weight), 
%    terminates(
%       takeOff(Diver,Weight), 
%       negativelyBuoyant(Diver), 
%       Time)).
if wearing(Diver, Weight)then terminates(takeOff(Diver, Weight), negativelyBuoyant(Diver)at Time, _).

 /*  reactive_rule([holds(wearing(Diver,Weight),Time_At)],
   	      [ terminates(takeOff(Diver,Weight),
   			   at(negativelyBuoyant(Diver),
   			      Time),
   			   Terminates)
   	      ]).
 */
 %  "% =================================".


% [diver,weight,time]
% HoldsAt(Wearing(diver,weight),time) ->
% Terminates(TakeOff(diver,weight),NeutrallyBuoyant(diver),time).
% '->'(
%    wearing(Diver,Weight), 
%    terminates(
%       takeOff(Diver,Weight), 
%       neutrallyBuoyant(Diver), 
%       Time)).
if wearing(Diver, Weight)then terminates(takeOff(Diver, Weight), neutrallyBuoyant(Diver)at Time, _).

 /*  reactive_rule([holds(wearing(Diver,Weight),Time_At)],
   	      [ terminates(takeOff(Diver,Weight),
   			   at(neutrallyBuoyant(Diver),Time),
   			   Terminates)
   	      ]).
 */
 %  "% =================================".

% fluent UncontrolledBuoyancy(diver)
% fluent(
%    uncontrolledBuoyancy(diver)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',380).
fluents([uncontrolledBuoyancy/1]).
% mpred_prop(
%    uncontrolledBuoyancy(diver), 
%    fluent).
mpred_prop(uncontrolledBuoyancy(diver),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',383).
% event LoseBuoyancyControl(diver)
% event(
%    loseBuoyancyControl(diver)).
events([loseBuoyancyControl/1]).
% mpred_prop(
%    loseBuoyancyControl(diver), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',383).
mpred_prop(loseBuoyancyControl(diver),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',385).
% predicate IsInexperiencedDiver(diver)
% predicate(
%    isInexperiencedDiver(diver)).
predicates([isInexperiencedDiver/1]).
% mpred_prop(
%    isInexperiencedDiver(diver), 
%    predicate).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',385).
mpred_prop(isInexperiencedDiver(diver),predicate).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',387).
% [diver,time]
% Happens(LoseBuoyancyControl(diver),time) ->
% IsInexperiencedDiver(diver).
% '->'(
%    metreqs(
%       loseBuoyancyControl(Diver)), 
%    requires(
%       loseBuoyancyControl(Diver), 
%       When_Time)).
if loseBuoyancyControl(Diver)then requires(loseBuoyancyControl(Diver), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',387).

 /*  reactive_rule([ happens(loseBuoyancyControl(Diver),
   			Time_From,
   			Time_Until)
   	      ],
   	      [ requires(loseBuoyancyControl(Diver),
   			 When_Time)
   	      ]).
 */
 %  "% =================================".
% '->'(
%    isInexperiencedDiver(Diver), 
%    metreqs(
%       loseBuoyancyControl(Diver))).
loseBuoyancyControl(Diver)if isInexperiencedDiver(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',387).

 /*  l_events(happens(loseBuoyancyControl(Diver),
   		 Time_From5,
   		 Time_From5),
   	 [isInexperiencedDiver(Diver)]).
 */
 %  "% =================================".
% '->'(
%    not(
%       isInexperiencedDiver(Diver)), 
%    not(
%       loseBuoyancyControl(Diver))).
if not isInexperiencedDiver(Diver)then not loseBuoyancyControl(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',387).

 /*  reactive_rule([not(isInexperiencedDiver(Diver))],
   	      [not(loseBuoyancyControl(Diver))]).
 */
 %  "% =================================".


% [diver,time]
% Initiates(LoseBuoyancyControl(diver),UncontrolledBuoyancy(diver),time).
% initiates(
%    loseBuoyancyControl(Diver), 
%    uncontrolledBuoyancy(Diver), 
%    Time).
loseBuoyancyControl(Diver)initiates uncontrolledBuoyancy(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',392).

 /*  initiated(happens(loseBuoyancyControl(Diver),
   		  Time_From,
   		  Time_Until),
   	  uncontrolledBuoyancy(Diver),
   	  []).
 */
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',394).
% [diver,time]
% Initiates(LoseBuoyancyControl(diver),PositivelyBuoyant(diver),time).
% initiates(
%    loseBuoyancyControl(Diver), 
%    positivelyBuoyant(Diver), 
%    Time).
loseBuoyancyControl(Diver)initiates positivelyBuoyant(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',394).

 /*  initiated(happens(loseBuoyancyControl(Diver),
   		  Time_From,
   		  Time_Until),
   	  positivelyBuoyant(Diver),
   	  []).
 */
 %  "% =================================".


% [diver,time]
% Terminates(LoseBuoyancyControl(diver),NegativelyBuoyant(diver),time).
% terminates(
%    loseBuoyancyControl(Diver), 
%    negativelyBuoyant(Diver), 
%    Time).
loseBuoyancyControl(Diver)terminates negativelyBuoyant(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',398).

 /*  terminated(happens(loseBuoyancyControl(Diver),
   		   Time_From,
   		   Time_Until),
   	   negativelyBuoyant(Diver),
   	   []).
 */
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',400).
% [diver,time]
% Terminates(LoseBuoyancyControl(diver),NeutrallyBuoyant(diver),time).
% terminates(
%    loseBuoyancyControl(Diver), 
%    neutrallyBuoyant(Diver), 
%    Time).
loseBuoyancyControl(Diver)terminates neutrallyBuoyant(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',400).

 /*  terminated(happens(loseBuoyancyControl(Diver),
   		   Time_From,
   		   Time_Until),
   	   neutrallyBuoyant(Diver),
   	   []).
 */
 %  "% =================================".


%; determining fluent

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',404).
% fluent AscendDescendAmount(diver,depth)
% fluent(
%    ascendDescendAmount(diver,depth)).
fluents([ascendDescendAmount/2]).
% mpred_prop(
%    ascendDescendAmount(diver,depth), 
%    fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',404).
mpred_prop(ascendDescendAmount(diver,depth),fluent).

% noninertial AscendDescendAmount
% noninertial(ascendDescendAmount).
noninertial(ascendDescendAmount).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',407).
% [diver,depth1,depth2,time]
% HoldsAt(AscendDescendAmount(diver,depth1),time) &
% HoldsAt(AscendDescendAmount(diver,depth2),time) ->
% depth1=depth2.
% '->'(
%    ','(
%       ascendDescendAmount(Diver,Depth2), 
%       not(
%          equals(Depth1,Depth2))), 
%    not(
%       ascendDescendAmount(Diver,Depth1))).
if ascendDescendAmount(Diver, Depth2), not equals(Depth1, Depth2)then not ascendDescendAmount(Diver, Depth1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',407).

 /*  reactive_rule([ ascendDescendAmount(Diver,Depth2),
   		not(equals(Depth1,Depth2))
   	      ],
   	      [not(ascendDescendAmount(Diver,Depth1))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       ascendDescendAmount(Diver,Depth1), 
%       not(
%          equals(Depth2,Depth1))), 
%    not(
%       ascendDescendAmount(Diver,Depth2))).
if ascendDescendAmount(Diver, Depth1), not equals(Depth2, Depth1)then not ascendDescendAmount(Diver, Depth2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',407).

 /*  reactive_rule([ ascendDescendAmount(Diver,Depth1),
   		not(equals(Depth2,Depth1))
   	      ],
   	      [not(ascendDescendAmount(Diver,Depth2))]).
 */
 %  "% =================================".


% [diver,depth,time]
% Happens(Descend(diver,depth),time) ->
% HoldsAt(NegativelyBuoyant(diver),time) &
% ({depth1}
%  HoldsAt(AscendDescendAmount(diver,depth1),time) &
%  HoldsAt(AtDepth(diver,depth-depth1),time)).
% '->'(
%    ';'(
%       not(
%          negativelyBuoyant(Diver)), 
%       ';'(
%          not(
%             ascendDescendAmount(Diver,Depth1)), 
%          not(
%             atDepth(
%                Diver, 
%                Depth-Depth1)))), 
%    not(
%       descend(Diver,Depth))).
if not negativelyBuoyant(Diver);not ascendDescendAmount(Diver, Depth1);not atDepth(Diver, Depth-Depth1)then not descend(Diver, Depth).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',413).

 /*   reactive_rule([  (not(negativelyBuoyant(Diver));not(ascendDescendAmount(Diver, Depth1));not(atDepth(Diver, Depth-Depth1)))
                    ],
                    [not(descend(Diver, Depth))]).
 */
 %  "% =================================".
% '->'(
%    metreqs(
%       descend(Diver,Depth)), 
%    requires(
%       descend(Diver,Depth), 
%       When_Time)).
if descend(Diver, Depth)then requires(descend(Diver, Depth), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',413).

 /*  reactive_rule([ happens(descend(Diver,Depth),
   			Time_From,
   			Time_Until)
   	      ],
   	      [ requires(descend(Diver,Depth),
   			 When_Time)
   	      ]).
 */
 %  "% =================================".
% '->'(
%    negativelyBuoyant(Diver), 
%    metreqs(
%       descend(Diver,Depth))).
descend(Diver, Depth)if negativelyBuoyant(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',413).

 /*  l_events(happens(descend(Diver,Depth),
   		 Time_From7,
   		 Time_From7),
   	 [holds(negativelyBuoyant(Diver),Time_From7)]).
 */
 %  "% =================================".
% '->'(
%    metreqs(
%       descend(Diver,Depth)), 
%    requires(
%       descend(Diver,Depth), 
%       When_Time)).
if descend(Diver, Depth)then requires(descend(Diver, Depth), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',413).

 /*  reactive_rule([ happens(descend(Diver,Depth),
   			Time_From8,
   			Time_Until9)
   	      ],
   	      [ requires(descend(Diver,Depth),
   			 When_Time)
   	      ]).
 */
 %  "% =================================".
% '->'(
%    ascendDescendAmount(Diver,Depth1), 
%    metreqs(
%       descend(Diver,Depth))).
descend(Diver, Depth)if ascendDescendAmount(Diver, Depth1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',413).

 /*  l_events(happens(descend(Diver,Depth),
   		 Time_From10,
   		 Time_From10),
   	 [ascendDescendAmount(Diver,Depth1)]).
 */
 %  "% =================================".
% '->'(
%    metreqs(
%       descend(Diver,Depth)), 
%    requires(
%       descend(Diver,Depth), 
%       When_Time)).
if descend(Diver, Depth)then requires(descend(Diver, Depth), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',413).

 /*  reactive_rule([ happens(descend(Diver,Depth),
   			Time_From11,
   			Time_Until12)
   	      ],
   	      [ requires(descend(Diver,Depth),
   			 When_Time)
   	      ]).
 */
 %  "% =================================".
% '->'(
%    atDepth(
%       Diver, 
%       Depth-Depth1), 
%    metreqs(
%       descend(Diver,Depth))).
descend(Diver, Depth)if atDepth(Diver, Depth-Depth1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',413).

 /*  l_events(happens(descend(Diver,Depth),
   		 Time_From13,
   		 Time_From13),
   	 [ holds(atDepth(Diver,Depth-Depth1),
   		 Time_From13)
   	 ]).
 */
 %  "% =================================".

% event KickUp(diver)
% event(
%    kickUp(diver)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',418).
events([kickUp/1]).
% mpred_prop(
%    kickUp(diver), 
%    event).
mpred_prop(kickUp(diver),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',421).
% [diver,depth,time]
% Happens(Ascend(diver,depth),time) ->
% (HoldsAt(PositivelyBuoyant(diver),time) |
%  (HoldsAt(NeutrallyBuoyant(diver),time) & Happens(KickUp(diver),time))) &
% ({depth1}
%  HoldsAt(AscendDescendAmount(diver,depth1),time) &
%  HoldsAt(AtDepth(diver,depth+depth1),time)).
% '->'(
%    ';'(
%       ','(
%          not(
%             positivelyBuoyant(Diver)), 
%          ';'(
%             not(
%                neutrallyBuoyant(Diver)), 
%             not(
%                kickUp(Diver)))), 
%       ';'(
%          not(
%             ascendDescendAmount(Diver,Depth1)), 
%          not(
%             atDepth(
%                Diver, 
%                Depth+Depth1)))), 
%    not(
%       ascend(Diver,Depth))).
if not positivelyBuoyant(Diver), (not neutrallyBuoyant(Diver);not kickUp(Diver));not ascendDescendAmount(Diver, Depth1);not atDepth(Diver, Depth+Depth1)then not ascend(Diver, Depth).
 %  reactive_rule([(not(positivelyBuoyant(Diver)), (not(neutrallyBuoyant(Diver));not(kickUp(Diver)));not(ascendDescendAmount(Diver, Depth1));not(atDepth(Diver, Depth+Depth1)))], [not(ascend(Diver, Depth))]).
 %  "% =================================".
% '->'(
%    ','(
%       ';'(
%          not(
%             neutrallyBuoyant(Diver)), 
%          not(
%             kickUp(Diver))), 
%       ascend(Diver,Depth)), 
%    positivelyBuoyant(Diver)).
positivelyBuoyant(Diver)if(not neutrallyBuoyant(Diver);not kickUp(Diver)), ascend(Diver, Depth).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',421).

 /*   l_int(holds(positivelyBuoyant(Diver), Time_At),
            [  (not(neutrallyBuoyant(Diver));not(kickUp(Diver))),
              happens(ascend(Diver, Depth),
                      Time_At,
                      Time_At)
            ]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       not(
%          positivelyBuoyant(Diver)), 
%       ascend(Diver,Depth)), 
%    neutrallyBuoyant(Diver)).
neutrallyBuoyant(Diver)if not positivelyBuoyant(Diver), ascend(Diver, Depth).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',421).

 /*  l_int(holds(neutrallyBuoyant(Diver),Time_At5),
         [ holds(not(positivelyBuoyant(Diver)),Time_At5),
   	happens(ascend(Diver,Depth),
   		Time_At5,
   		Time_At5)
         ]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       not(
%          positivelyBuoyant(Diver)), 
%       ascend(Diver,Depth)), 
%    kickUp(Diver)).
if not positivelyBuoyant(Diver), ascend(Diver, Depth)then kickUp(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',421).

 /*  reactive_rule([ holds(not(positivelyBuoyant(Diver)),
   		      Time_At6),
   		happens(ascend(Diver,Depth),
   			Time_At6,
   			Time_Until)
   	      ],
   	      [kickUp(Diver)]).
 */
 %  "% =================================".
% '->'(
%    metreqs(
%       ascend(Diver,Depth)), 
%    requires(
%       ascend(Diver,Depth), 
%       When_Time)).
if ascend(Diver, Depth)then requires(ascend(Diver, Depth), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',421).

 /*  reactive_rule([ happens(ascend(Diver,Depth),
   			Time_From,
   			Time_Until10)
   	      ],
   	      [ requires(ascend(Diver,Depth),
   			 When_Time)
   	      ]).
 */
 %  "% =================================".
% '->'(
%    ascendDescendAmount(Diver,Depth1), 
%    metreqs(
%       ascend(Diver,Depth))).
ascend(Diver, Depth)if ascendDescendAmount(Diver, Depth1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',421).

 /*  l_events(happens(ascend(Diver,Depth),
   		 Time_From11,
   		 Time_From11),
   	 [ascendDescendAmount(Diver,Depth1)]).
 */
 %  "% =================================".
% '->'(
%    metreqs(
%       ascend(Diver,Depth)), 
%    requires(
%       ascend(Diver,Depth), 
%       When_Time)).
if ascend(Diver, Depth)then requires(ascend(Diver, Depth), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',421).

 /*  reactive_rule([ happens(ascend(Diver,Depth),
   			Time_From12,
   			Time_Until13)
   	      ],
   	      [ requires(ascend(Diver,Depth),
   			 When_Time)
   	      ]).
 */
 %  "% =================================".
% '->'(
%    atDepth(
%       Diver, 
%       Depth+Depth1), 
%    metreqs(
%       ascend(Diver,Depth))).
ascend(Diver, Depth)if atDepth(Diver, Depth+Depth1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',421).

 /*  l_events(happens(ascend(Diver,Depth),
   		 Time_From14,
   		 Time_From14),
   	 [ holds(atDepth(Diver,Depth+Depth1),
   		 Time_From14)
   	 ]).
 */
 %  "% =================================".


% [diver,time]
% Happens(KickUp(diver),time) ->
% HoldsAt(Vertical(diver),time).
% '->'(
%    metreqs(
%       kickUp(Diver)), 
%    requires(
%       kickUp(Diver), 
%       When_Time)).
if kickUp(Diver)then requires(kickUp(Diver), When_Time).

 /*  reactive_rule([kickUp(Diver)],
   	      [requires(kickUp(Diver),When_Time)]).
 */
 %  "% =================================".
% '->'(
%    vertical(Diver), 
%    metreqs(
%       kickUp(Diver))).
if vertical(Diver)then kickUp(Diver).
 %  reactive_rule([vertical(Diver)],[kickUp(Diver)]).
 %  "% =================================".
% '->'(
%    not(
%       vertical(Diver)), 
%    not(
%       kickUp(Diver))).
if not vertical(Diver)then not kickUp(Diver).
 %  reactive_rule([not(vertical(Diver))],[not(kickUp(Diver))]).
 %  "% =================================".

% event SwimAround(diver)
% event(
%    swimAround(diver)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',432).
events([swimAround/1]).
% mpred_prop(
%    swimAround(diver), 
%    event).
mpred_prop(swimAround(diver),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',435).
% [diver,time]
% Happens(SwimAround(diver),time) ->
% HoldsAt(HorizontalDown(diver),time).
% '->'(
%    metreqs(
%       swimAround(Diver)), 
%    requires(
%       swimAround(Diver), 
%       When_Time)).
if swimAround(Diver)then requires(swimAround(Diver), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',435).

 /*  reactive_rule([swimAround(Diver)],
   	      [requires(swimAround(Diver),When_Time)]).
 */
 %  "% =================================".
% '->'(
%    horizontalDown(Diver), 
%    metreqs(
%       swimAround(Diver))).
if horizontalDown(Diver)then swimAround(Diver).
 %  reactive_rule([horizontalDown(Diver)],[swimAround(Diver)]).
 %  "% =================================".
% '->'(
%    not(
%       horizontalDown(Diver)), 
%    not(
%       swimAround(Diver))).
if not horizontalDown(Diver)then not swimAround(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',435).

 /*  reactive_rule([not(horizontalDown(Diver))],
   	      [not(swimAround(Diver))]).
 */
 %  "% =================================".


%; signaling

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',441).
% event SignalDescend(diver,diver)
% event(
%    signalDescend(diver,diver)).
events([signalDescend/2]).
% mpred_prop(
%    signalDescend(diver,diver), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',441).
mpred_prop(signalDescend(diver,diver),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',443).
% event SignalOutOfTime(diver,diver)
% event(
%    signalOutOfTime(diver,diver)).
events([signalOutOfTime/2]).
% mpred_prop(
%    signalOutOfTime(diver,diver), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',443).
mpred_prop(signalOutOfTime(diver,diver),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',445).
% event SignalAscend(diver,diver)
% event(
%    signalAscend(diver,diver)).
events([signalAscend/2]).
% mpred_prop(
%    signalAscend(diver,diver), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',445).
mpred_prop(signalAscend(diver,diver),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',447).
%;[diver1,diver2,time]
%;Happens(SignalAscend(diver1,diver2),time) ->
%;Happens(SignalOutOfTime(diver1,diver2),time-1).
%;[diver1,diver2,time]
%;Happens(SignalDescend(diver1,diver2),time) ->
%;HoldsAt(See(diver1,diver2),time) &
%;HoldsAt(See(diver2,diver1),time).
%;[diver1,diver2,time]
%;Happens(SignalOutOfTime(diver1,diver2),time) ->
%;HoldsAt(See(diver1,diver2),time) &
%;HoldsAt(See(diver2,diver1),time).
%;[diver1,diver2,time]
%;Happens(SignalAscend(diver1,diver2),time) ->
%;HoldsAt(See(diver1,diver2),time) &
%;HoldsAt(See(diver2,diver1),time).
%;event LookAt(agent,object)
%;fluent See(agent,object)
%;[agent,object,time]
%;Initiates(LookAt(agent,object),See(agent,object),time).
%;[agent,object1,object2,time]
%;object1!=object2 ->
%;Terminates(LookAt(agent,object1),
%;           See(agent,object2),
%;           time).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',479).
% event Descend1(diver)
% event(
%    descend1(diver)).
events([descend1/1]).
% mpred_prop(
%    descend1(diver), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',479).
mpred_prop(descend1(diver),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',481).
% event Ascend1(diver)
% event(
%    ascend1(diver)).
events([ascend1/1]).
% mpred_prop(
%    ascend1(diver), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',481).
mpred_prop(ascend1(diver),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',483).
%;[diver,object,time]
%;Terminates(Descend1(diver),See(diver,object),time).
%;[diver,object,time]
%;Terminates(Ascend1(diver),See(diver,object),time).
%;[diver,object,time]
%;Terminates(RotateYaw(diver),See(diver,object),time).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',492).
% event RapidAscendToSurface(diver)
% event(
%    rapidAscendToSurface(diver)).
events([rapidAscendToSurface/1]).
% mpred_prop(
%    rapidAscendToSurface(diver), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',492).
mpred_prop(rapidAscendToSurface(diver),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',494).
% [diver,time]
% Happens(Descend1(diver),time) <->
% ({depth} Happens(Descend(diver,depth),time)).

 /*  happens(descend1(Diver), Time) <->
       exists([Depth], happens(descend(Diver, Depth), Time)).
 */
% '->'(
%    descend1(Diver), 
%    descend(Diver,Depth)).
descend(Diver, Depth)if descend1(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',494).

 /*  l_events(happens(descend(Diver,Depth),
   		 Time_From,
   		 Time_From),
   	 [descend1(Diver)]).
 */
 %  "% =================================".
% '->'(
%    not(
%       descend(Diver,Depth)), 
%    not(
%       descend1(Diver))).
if not descend(Diver, Depth)then not descend1(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',494).

 /*  reactive_rule([not(descend(Diver,Depth))],
   	      [not(descend1(Diver))]).
 */
 %  "% =================================".
% '->'(
%    descend(Diver,Depth), 
%    descend1(Diver)).
if descend(Diver, Depth)then descend1(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',494).

 /*  reactive_rule([ happens(descend(Diver,Depth),
   			Time_From4,
   			Time_Until)
   	      ],
   	      [descend1(Diver)]).
 */
 %  "% =================================".
% '->'(
%    not(
%       descend1(Diver)), 
%    not(
%       descend(Diver,Depth))).
if not descend1(Diver)then not descend(Diver, Depth).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',494).

 /*  reactive_rule([not(descend1(Diver))],
   	      [not(descend(Diver,Depth))]).
 */
 %  "% =================================".


% [diver,time]
% Happens(Ascend1(diver),time) <->
% ({depth} Happens(Ascend(diver,depth),time)).

 /*  happens(ascend1(Diver), Time) <->
       exists([Depth], happens(ascend(Diver, Depth), Time)).
 */
% '->'(
%    ascend1(Diver), 
%    ascend(Diver,Depth)).
ascend(Diver, Depth)if ascend1(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',499).

 /*  l_events(happens(ascend(Diver,Depth),
   		 Time_From,
   		 Time_From),
   	 [ascend1(Diver)]).
 */
 %  "% =================================".
% '->'(
%    not(
%       ascend(Diver,Depth)), 
%    not(
%       ascend1(Diver))).
if not ascend(Diver, Depth)then not ascend1(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',499).

 /*  reactive_rule([not(ascend(Diver,Depth))],
   	      [not(ascend1(Diver))]).
 */
 %  "% =================================".
% '->'(
%    ascend(Diver,Depth), 
%    ascend1(Diver)).
if ascend(Diver, Depth)then ascend1(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',499).

 /*  reactive_rule([ happens(ascend(Diver,Depth),
   			Time_From4,
   			Time_Until)
   	      ],
   	      [ascend1(Diver)]).
 */
 %  "% =================================".
% '->'(
%    not(
%       ascend1(Diver)), 
%    not(
%       ascend(Diver,Depth))).
if not ascend1(Diver)then not ascend(Diver, Depth).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',499).

 /*  reactive_rule([not(ascend1(Diver))],
   	      [not(ascend(Diver,Depth))]).
 */
 %  "% =================================".


% [diver,time]
% Happens(RapidAscendToSurface(diver),time) ->
% Happens(Ascend(diver,0),time).
% '->'(
%    rapidAscendToSurface(Diver), 
%    ascend(Diver,0)).
ascend(Diver, 0)if rapidAscendToSurface(Diver).

 /*  l_events(happens(ascend(Diver,0),Time_From,Time_From),
   	 [rapidAscendToSurface(Diver)]).
 */
 %  "% =================================".
% '->'(
%    not(
%       ascend(Diver,0)), 
%    not(
%       rapidAscendToSurface(Diver))).
if not ascend(Diver, 0)then not rapidAscendToSurface(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',503).

 /*  reactive_rule([not(ascend(Diver,0))],
   	      [not(rapidAscendToSurface(Diver))]).
 */
 %  "% =================================".

% event AscendLine(diver,line)
% event(
%    ascendLine(diver,line)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',505).
events([ascendLine/2]).
% mpred_prop(
%    ascendLine(diver,line), 
%    event).
mpred_prop(ascendLine(diver,line),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',508).
% [diver,line,time]
% Happens(AscendLine(diver,line),time) ->
% Happens(Ascend1(diver),time).
% '->'(
%    ascendLine(Diver,Line), 
%    ascend1(Diver)).
if ascendLine(Diver, Line)then ascend1(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',508).

 /*  reactive_rule([ascendLine(Diver,Line)],
   	      [ascend1(Diver)]).
 */
 %  "% =================================".
% '->'(
%    not(
%       ascend1(Diver)), 
%    not(
%       ascendLine(Diver,Line))).
if not ascend1(Diver)then not ascendLine(Diver, Line).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',508).

 /*  reactive_rule([not(ascend1(Diver))],
   	      [not(ascendLine(Diver,Line))]).
 */
 %  "% =================================".

% fluent Disoriented(diver)
% fluent(
%    disoriented(diver)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',511).
fluents([disoriented/1]).
% mpred_prop(
%    disoriented(diver), 
%    fluent).
mpred_prop(disoriented(diver),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',514).
% event BecomeDisoriented(diver)
% event(
%    becomeDisoriented(diver)).
events([becomeDisoriented/1]).
% mpred_prop(
%    becomeDisoriented(diver), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',514).
mpred_prop(becomeDisoriented(diver),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',516).
% event BecomeReoriented(diver)
% event(
%    becomeReoriented(diver)).
events([becomeReoriented/1]).
% mpred_prop(
%    becomeReoriented(diver), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',516).
mpred_prop(becomeReoriented(diver),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',518).
% [diver,time]
% Initiates(BecomeDisoriented(diver),Disoriented(diver),time).
% initiates(
%    becomeDisoriented(Diver), 
%    disoriented(Diver), 
%    Time).
becomeDisoriented(Diver)initiates disoriented(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',518).

 /*  initiated(happens(becomeDisoriented(Diver),
   		  Time_From,
   		  Time_Until),
   	  disoriented(Diver),
   	  []).
 */
 %  "% =================================".


% [diver,time]
% Terminates(BecomeReoriented(diver),Disoriented(diver),time).
% terminates(
%    becomeReoriented(Diver), 
%    disoriented(Diver), 
%    Time).
becomeReoriented(Diver)terminates disoriented(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',522).

 /*  terminated(happens(becomeReoriented(Diver),
   		   Time_From,
   		   Time_Until),
   	   disoriented(Diver),
   	   []).
 */
 %  "% =================================".

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',524).
% fluent DisturbedSilt()
% fluent(disturbedSilt).
fluents([disturbedSilt/0]).
% mpred_prop(disturbedSilt,fluent).
mpred_prop(disturbedSilt,fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',526).
% event DisturbSilt(diver)
% event(
%    disturbSilt(diver)).
events([disturbSilt/1]).
% mpred_prop(
%    disturbSilt(diver), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',526).
mpred_prop(disturbSilt(diver),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',528).
% [diver,time]
% Initiates(DisturbSilt(diver),DisturbedSilt(),time).
% initiates(
%    disturbSilt(Diver), 
%    disturbedSilt, 
%    Time).
disturbSilt(Diver)initiates disturbedSilt.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',528).

 /*  initiated(happens(disturbSilt(Diver),
   		  Time_From,
   		  Time_Until),
   	  disturbedSilt,
   	  []).
 */
 %  "% =================================".


% [diver,time]
% Happens(BecomeDisoriented(diver),time) ->
% (!HoldsAt(DisturbedSilt(),time-1) &
%  HoldsAt(DisturbedSilt(),time)).
% '->'(
%    ','(
%       b(Time_At,Time), 
%       ';'(
%          holds_at(disturbedSilt,Time_At), 
%          not(disturbedSilt))), 
%    not(
%       becomeDisoriented(Diver))).
if b(A, Time), (disturbedSilt at A;not disturbedSilt)then not becomeDisoriented(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',532).

 /*   reactive_rule([ b(Tloc, Time),
                       (at(disturbedSilt, Tloc);not(disturbedSilt))
                    ],
                    [not(becomeDisoriented(Diver))]).
 */
 %  "% =================================".
% '->'(
%    metreqs(
%       becomeDisoriented(Diver)), 
%    requires(
%       becomeDisoriented(Diver), 
%       When_Time)).
if becomeDisoriented(Diver)then requires(becomeDisoriented(Diver), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',532).

 /*  reactive_rule([ happens(becomeDisoriented(Diver),
   			Time_From,
   			Time_Until)
   	      ],
   	      [ requires(becomeDisoriented(Diver),
   			 When_Time)
   	      ]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       b(Time_At,When_Time), 
%       holds_at(
%          neg(disturbedSilt), 
%          Time_At)), 
%    metreqs(
%       becomeDisoriented(Diver))).
becomeDisoriented(Diver)if b(A, When_Time), not disturbedSilt at A.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',532).

 /*  l_events(happens(becomeDisoriented(Diver),
   		 Time_From6,
   		 Time_Until7),
   	 [ b(Time_Until7,When_Time),
   	   holds(not(disturbedSilt),Time_Until7)
   	 ]).
 */
 %  "% =================================".
% '->'(
%    metreqs(
%       becomeDisoriented(Diver)), 
%    requires(
%       becomeDisoriented(Diver), 
%       When_Time)).
if becomeDisoriented(Diver)then requires(becomeDisoriented(Diver), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',532).

 /*  reactive_rule([ happens(becomeDisoriented(Diver),
   			Time_From8,
   			Time_Until9)
   	      ],
   	      [ requires(becomeDisoriented(Diver),
   			 When_Time)
   	      ]).
 */
 %  "% =================================".
% '->'(
%    disturbedSilt, 
%    metreqs(
%       becomeDisoriented(Diver))).
becomeDisoriented(Diver)if disturbedSilt.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',532).

 /*  l_events(happens(becomeDisoriented(Diver),
   		 Time_From10,
   		 Time_From10),
   	 [holds(disturbedSilt,Time_From10)]).
 */
 %  "% =================================".

% event Panic(diver)
% event(
%    panic(diver)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',535).
events([panic/1]).
% mpred_prop(
%    panic(diver), 
%    event).
mpred_prop(panic(diver),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',538).
% [diver,time]
 % Happens(Panic(diver),time) ->
% HoldsAt(Disoriented(diver),time) |
% HoldsAt(UncontrolledBuoyancy(diver),time) |
% ({equipment} Happens(Lose(diver,equipment),time-1)) |
% Happens(Vomit(diver),time-1).
% '->'(
%    ','(
%       b(When,Time), 
%       ','(
%          not(
%             uncontrolledBuoyancy(Diver)), 
%          ','(
%             not(
%                happens(
%                   lose(Diver,Equipment), 
%                   When)), 
%             ','(
%                not(
%                   happens(
%                      vomit(Diver), 
%                      When)), 
%                panic(Diver))))), 
%    disoriented(Diver)).
disoriented(Diver)if b(A, Time), not uncontrolledBuoyancy(Diver), not happens(lose(Diver, Equipment), A), not happens(vomit(Diver), A), panic(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',538).

 /*  l_int(holds(disoriented(Diver),Time_At),
         [ b(When,Time),
   	holds(not(uncontrolledBuoyancy(Diver)),Time_At),
   	not(happens(lose(Diver,Equipment),When)),
   	not(happens(vomit(Diver),When)),
   	panic(Diver)
         ]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       b(When5,Time), 
%       ','(
%          not(
%             happens(
%                lose(Diver,Equipment), 
%                When5)), 
%          ','(
%             not(
%                happens(
%                   vomit(Diver), 
%                   When5)), 
%             ','(
%                not(
%                   disoriented(Diver)), 
%                panic(Diver))))), 
%    uncontrolledBuoyancy(Diver)).
uncontrolledBuoyancy(Diver)if b(A, Time), not happens(lose(Diver, Equipment), A), not happens(vomit(Diver), A), not disoriented(Diver), panic(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',538).

 /*  l_int(holds(uncontrolledBuoyancy(Diver),Time_At5),
         [ b(When6,Time),
   	not(happens(lose(Diver,Equipment),When6)),
   	not(happens(vomit(Diver),When6)),
   	holds(not(disoriented(Diver)),Time_At5),
   	panic(Diver)
         ]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       b(When7,Time), 
%       ','(
%          not(
%             happens(
%                vomit(Diver), 
%                When7)), 
%          ','(
%             not(
%                uncontrolledBuoyancy(Diver)), 
%             ','(
%                not(
%                   disoriented(Diver)), 
%                panic(Diver))))), 
%    happens(
%       lose(Diver,Equipment), 
%       When7)).
if b(A, Time), not happens(vomit(Diver), A), not uncontrolledBuoyancy(Diver), not disoriented(Diver), panic(Diver)then happens(lose(Diver, Equipment), A).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',538).

 /*  reactive_rule([ b(When7,Time),
   		not(happens(vomit(Diver),When7)),
   		holds(not(uncontrolledBuoyancy(Diver)),
   		      Time_At8),
   		holds(not(disoriented(Diver)),Time_At8),
   		panic(Diver)
   	      ],
   	      [happens(lose(Diver,Equipment),When7)]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       b(When9,Time), 
%       ','(
%          not(
%             happens(
%                lose(Diver,Equipment), 
%                When9)), 
%          ','(
%             not(
%                uncontrolledBuoyancy(Diver)), 
%             ','(
%                not(
%                   disoriented(Diver)), 
%                panic(Diver))))), 
%    happens(
%       vomit(Diver), 
%       When9)).
if b(A, Time), not happens(lose(Diver, Equipment), A), not uncontrolledBuoyancy(Diver), not disoriented(Diver), panic(Diver)then happens(vomit(Diver), A).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',538).

 /*  reactive_rule([ b(When9,Time),
   		not(happens(lose(Diver,Equipment),
   			    When9)),
   		holds(not(uncontrolledBuoyancy(Diver)),
   		      Time_At10),
   		holds(not(disoriented(Diver)),Time_At10),
   		panic(Diver)
   	      ],
   	      [happens(vomit(Diver),When9)]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       b(When11,Time), 
%       ','(
%          not(
%             disoriented(Diver)), 
%          ','(
%             not(
%                uncontrolledBuoyancy(Diver)), 
%             ','(
%                not(
%                   happens(
%                      lose(Diver,Equipment), 
%                      When11)), 
%                not(
%                   happens(
%                      vomit(Diver), 
%                      When11)))))), 
%    not(
%       panic(Diver))).
if b(A, Time), not disoriented(Diver), not uncontrolledBuoyancy(Diver), not happens(lose(Diver, Equipment), A), not happens(vomit(Diver), A)then not panic(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',538).

 /*  reactive_rule([ b(When12,Time),
   		holds(not(disoriented(Diver)),Time_At11),
   		holds(not(uncontrolledBuoyancy(Diver)),
   		      Time_At11),
   		not(happens(lose(Diver,Equipment),
   			    When12)),
   		not(happens(vomit(Diver),When12))
   	      ],
   	      [not(panic(Diver))]).
 */
 %  "% =================================".

% event Vomit(diver)
% event(
%    vomit(diver)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',543).
events([vomit/1]).
% mpred_prop(
%    vomit(diver), 
%    event).
mpred_prop(vomit(diver),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',546).
%; conditions

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',548).
% fluent Unconscious(diver)
% fluent(
%    unconscious(diver)).
fluents([unconscious/1]).
% mpred_prop(
%    unconscious(diver), 
%    fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',548).
mpred_prop(unconscious(diver),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',550).
% event GoUnconscious(diver)
% event(
%    goUnconscious(diver)).
events([goUnconscious/1]).
% mpred_prop(
%    goUnconscious(diver), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',550).
mpred_prop(goUnconscious(diver),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',552).
% event RegainConsciousness(diver)
% event(
%    regainConsciousness(diver)).
events([regainConsciousness/1]).
% mpred_prop(
%    regainConsciousness(diver), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',552).
mpred_prop(regainConsciousness(diver),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',554).
% [diver,time]
% Initiates(GoUnconscious(diver),Unconscious(diver),time).
% initiates(
%    goUnconscious(Diver), 
%    unconscious(Diver), 
%    Time).
goUnconscious(Diver)initiates unconscious(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',554).

 /*  initiated(happens(goUnconscious(Diver),
   		  Time_From,
   		  Time_Until),
   	  unconscious(Diver),
   	  []).
 */
 %  "% =================================".


% [diver,time]
% Terminates(RegainConsciousness(diver),Unconscious(diver),time).
% terminates(
%    regainConsciousness(Diver), 
%    unconscious(Diver), 
%    Time).
regainConsciousness(Diver)terminates unconscious(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',558).

 /*  terminated(happens(regainConsciousness(Diver),
   		   Time_From,
   		   Time_Until),
   	   unconscious(Diver),
   	   []).
 */
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',560).
% [diver,time]
% Happens(GoUnconscious(diver),time) ->
% Happens(RapidAscendToSurface(diver),time).
% '->'(
%    goUnconscious(Diver), 
%    rapidAscendToSurface(Diver)).
if goUnconscious(Diver)then rapidAscendToSurface(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',560).

 /*  reactive_rule([ happens(goUnconscious(Diver),
   			Time_From,
   			Time_Until)
   	      ],
   	      [rapidAscendToSurface(Diver)]).
 */
 %  "% =================================".
% '->'(
%    not(
%       rapidAscendToSurface(Diver)), 
%    not(
%       goUnconscious(Diver))).
if not rapidAscendToSurface(Diver)then not goUnconscious(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',560).

 /*  reactive_rule([not(rapidAscendToSurface(Diver))],
   	      [not(goUnconscious(Diver))]).
 */
 %  "% =================================".

% fluent HasEarPain(diver)
% fluent(
%    hasEarPain(diver)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',563).
fluents([hasEarPain/1]).
% mpred_prop(
%    hasEarPain(diver), 
%    fluent).
mpred_prop(hasEarPain(diver),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',566).
% event StartEarPain(diver)
% event(
%    startEarPain(diver)).
events([startEarPain/1]).
% mpred_prop(
%    startEarPain(diver), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',566).
mpred_prop(startEarPain(diver),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',568).
% [diver,time]
 % Initiates(StartEarPain(diver),HasEarPain(diver),time).
% initiates(
%    startEarPain(Diver), 
%    hasEarPain(Diver), 
%    Time).
startEarPain(Diver)initiates hasEarPain(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',568).

 /*  initiated(happens(startEarPain(Diver),
   		  Time_From,
   		  Time_Until),
   	  hasEarPain(Diver),
   	  []).
 */
 %  "% =================================".

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',570).
% fluent HasRupturedEardrum(diver)
% fluent(
%    hasRupturedEardrum(diver)).
fluents([hasRupturedEardrum/1]).
% mpred_prop(
%    hasRupturedEardrum(diver), 
%    fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',570).
mpred_prop(hasRupturedEardrum(diver),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',572).
% event RuptureEardrum(diver)
% event(
%    ruptureEardrum(diver)).
events([ruptureEardrum/1]).
% mpred_prop(
%    ruptureEardrum(diver), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',572).
mpred_prop(ruptureEardrum(diver),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',574).
% [diver,time]
% Initiates(RuptureEardrum(diver),HasRupturedEardrum(diver),time).
% initiates(
%    ruptureEardrum(Diver), 
%    hasRupturedEardrum(Diver), 
%    Time).
ruptureEardrum(Diver)initiates hasRupturedEardrum(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',574).

 /*  initiated(happens(ruptureEardrum(Diver),
   		  Time_From,
   		  Time_Until),
   	  hasRupturedEardrum(Diver),
   	  []).
 */
 %  "% =================================".

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',576).
% fluent ConditionOK(diver)
% fluent(
%    conditionOK(diver)).
fluents([conditionOK/1]).
% mpred_prop(
%    conditionOK(diver), 
%    fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',576).
mpred_prop(conditionOK(diver),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',578).
% fluent HasDecompressionIllness(diver)
% fluent(
%    hasDecompressionIllness(diver)).
fluents([hasDecompressionIllness/1]).
% mpred_prop(
%    hasDecompressionIllness(diver), 
%    fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',578).
mpred_prop(hasDecompressionIllness(diver),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',580).
% event StartDecompressionIllness(diver)
% event(
%    startDecompressionIllness(diver)).
events([startDecompressionIllness/1]).
% mpred_prop(
%    startDecompressionIllness(diver), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',580).
mpred_prop(startDecompressionIllness(diver),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',582).
% [diver,time]
% Initiates(StartDecompressionIllness(diver),
%           HasDecompressionIllness(diver),
%           time).
% initiates(
%    startDecompressionIllness(Diver), 
%    hasDecompressionIllness(Diver), 
%    Time).
startDecompressionIllness(Diver)initiates hasDecompressionIllness(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',582).

 /*  initiated(happens(startDecompressionIllness(Diver),
   		  Time_From,
   		  Time_Until),
   	  hasDecompressionIllness(Diver),
   	  []).
 */
 %  "% =================================".

% fluent SignalingDecompress(computer,diver)
% fluent(
%    signalingDecompress(computer,diver)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',586).
fluents([signalingDecompress/2]).
% mpred_prop(
%    signalingDecompress(computer,diver), 
%    fluent).
mpred_prop(signalingDecompress(computer,diver),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',589).
% fluent SignalingLowOnAir(computer,airtank,diver)
% fluent(
%    signalingLowOnAir(computer,airtank,diver)).
fluents([signalingLowOnAir/3]).
% mpred_prop(
%    signalingLowOnAir(computer,airtank,diver), 
%    fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',589).
mpred_prop(signalingLowOnAir(computer,airtank,diver),fluent).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',591).
% [computer,airtank,diver,time]
% HoldsAt(SignalingLowOnAir(computer,airtank,diver),time) ->
% HoldsAt(LowOnAir(airtank),time).
% '->'(
%    signalingLowOnAir(Computer,Airtank,Diver), 
%    lowOnAir(Airtank)).
lowOnAir(Airtank)if signalingLowOnAir(Computer, Airtank, Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',591).

 /*  l_int(holds(lowOnAir(Airtank),Time_At),
         [signalingLowOnAir(Computer,Airtank,Diver)]).
 */
 %  "% =================================".
% '->'(
%    not(
%       lowOnAir(Airtank)), 
%    not(
%       signalingLowOnAir(Computer,Airtank,Diver))).
if not lowOnAir(Airtank)then not signalingLowOnAir(Computer, Airtank, Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',591).

 /*  reactive_rule([holds(not(lowOnAir(Airtank)),Time_At5)],
   	      [ not(signalingLowOnAir(Computer,
   				      Airtank,
   				      Diver))
   	      ]).
 */
 %  "% =================================".


% [computer,diver,time]
% HoldsAt(SignalingDecompress(computer,diver),time) ->
% !{time1} time1<time & Happens(Decompress(diver),time1).
% '->'(
%    ','(
%       comparison(Time1,Time,<), 
%       holds_at(
%          signalingDecompress(Computer,Diver), 
%          Time)), 
%    not(
%       decompress(Diver))).
if comparison(Time1, Time, <), signalingDecompress(Computer, Diver)at Time then not decompress(Diver).

 /*  reactive_rule([ comparison(Time1,Time,<),
   		holds(signalingDecompress(Computer,Diver),
   		      Time)
   	      ],
   	      [not(decompress(Diver))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       comparison(Time1,Time,<), 
%       happens(
%          decompress(Diver), 
%          Time1)), 
%    not(
%       signalingDecompress(Computer,Diver))).
not signalingDecompress(Computer, Diver)if comparison(Time1, Time, <), happens(decompress(Diver), Time1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',596).

 /*  l_int(holds(not(signalingDecompress(Computer,Diver)),
   	    Time_At),
         [ comparison(Time1,Time,<),
   	happens(decompress(Diver),Time1)
         ]).
 */
 %  "% =================================".

% event Decompress(diver)
% event(
%    decompress(diver)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',598).
events([decompress/1]).
% mpred_prop(
%    decompress(diver), 
%    event).
mpred_prop(decompress(diver),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',601).
% event EqualizeEars(diver)
% event(
%    equalizeEars(diver)).
events([equalizeEars/1]).
% mpred_prop(
%    equalizeEars(diver), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',601).
mpred_prop(equalizeEars(diver),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',603).
% [diver,time]
% (Happens(Descend1(diver),time) | Happens(Ascend1(diver),time)) &
% !Happens(EqualizeEars(diver),time) ->
% Happens(StartEarPain(diver),time) &
% Happens(RuptureEardrum(diver),time).
% '->'(
%    ','(
%       not(
%          equalizeEars(Diver)), 
%       ';'(
%          descend1(Diver), 
%          ascend1(Diver))), 
%    startEarPain(Diver)).
startEarPain(Diver)if not equalizeEars(Diver), (descend1(Diver);ascend1(Diver)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',603).

 /*   l_events(happens(startEarPain(Diver), Time_From, Time_From),
               [ not(equalizeEars(Diver)),
                  (descend1(Diver);ascend1(Diver))
               ]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       not(
%          equalizeEars(Diver)), 
%       ';'(
%          descend1(Diver), 
%          ascend1(Diver))), 
%    ruptureEardrum(Diver)).
ruptureEardrum(Diver)if not equalizeEars(Diver), (descend1(Diver);ascend1(Diver)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',603).

 /*   l_events(happens(ruptureEardrum(Diver),
                       Time_From3,
                       Time_From3),
               [ not(equalizeEars(Diver)),
                  (descend1(Diver);ascend1(Diver))
               ]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       ';'(
%          descend1(Diver), 
%          ascend1(Diver)), 
%       ';'(
%          not(
%             startEarPain(Diver)), 
%          not(
%             ruptureEardrum(Diver)))), 
%    equalizeEars(Diver)).
if (descend1(Diver);ascend1(Diver)), (not startEarPain(Diver);not ruptureEardrum(Diver))then equalizeEars(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',603).

 /*   reactive_rule([  (descend1(Diver);ascend1(Diver)),
                       (not(startEarPain(Diver));not(ruptureEardrum(Diver)))
                    ],
                    [equalizeEars(Diver)]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       not(
%          equalizeEars(Diver)), 
%       ';'(
%          not(
%             startEarPain(Diver)), 
%          not(
%             ruptureEardrum(Diver)))), 
%    not(
%       descend1(Diver))).
if not equalizeEars(Diver), (not startEarPain(Diver);not ruptureEardrum(Diver))then not descend1(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',603).

 /*   reactive_rule([ not(equalizeEars(Diver)),
                       (not(startEarPain(Diver));not(ruptureEardrum(Diver)))
                    ],
                    [not(descend1(Diver))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       not(
%          equalizeEars(Diver)), 
%       ';'(
%          not(
%             startEarPain(Diver)), 
%          not(
%             ruptureEardrum(Diver)))), 
%    not(
%       ascend1(Diver))).
if not equalizeEars(Diver), (not startEarPain(Diver);not ruptureEardrum(Diver))then not ascend1(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',603).

 /*   reactive_rule([ not(equalizeEars(Diver)),
                       (not(startEarPain(Diver));not(ruptureEardrum(Diver)))
                    ],
                    [not(ascend1(Diver))]).
 */
 %  "% =================================".


% [diver,time]
% Happens(Ascend1(diver),time) &
% !Happens(Decompress(diver),time) ->
% Happens(StartDecompressionIllness(diver),time).
% '->'(
%    ','(
%       ascend1(Diver), 
%       not(
%          decompress(Diver))), 
%    startDecompressionIllness(Diver)).
startDecompressionIllness(Diver)if ascend1(Diver), not decompress(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',610).

 /*  l_events(happens(startDecompressionIllness(Diver),
   		 Time_From,
   		 Time_From),
   	 [ascend1(Diver),not(decompress(Diver))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       not(
%          decompress(Diver)), 
%       not(
%          startDecompressionIllness(Diver))), 
%    not(
%       ascend1(Diver))).
if not decompress(Diver), not startDecompressionIllness(Diver)then not ascend1(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',610).

 /*  reactive_rule([ not(decompress(Diver)),
   		not(startDecompressionIllness(Diver))
   	      ],
   	      [not(ascend1(Diver))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       ascend1(Diver), 
%       not(
%          startDecompressionIllness(Diver))), 
%    decompress(Diver)).
if ascend1(Diver), not startDecompressionIllness(Diver)then decompress(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',610).

 /*  reactive_rule([ ascend1(Diver),
   		not(startDecompressionIllness(Diver))
   	      ],
   	      [decompress(Diver)]).
 */
 %  "% =================================".


% [diver1,diver2,time]
% HoldsAt(Holding(diver1,diver2),time) &
% Happens(Ascend1(diver1),time) &
% !Happens(Decompress(diver2),time) ->
% Happens(StartDecompressionIllness(diver2),time).
% '->'(
%    ','(
%       holding(Diver1,Diver2), 
%       ','(
%          ascend1(Diver1), 
%          not(
%             decompress(Diver2)))), 
%    startDecompressionIllness(Diver2)).
startDecompressionIllness(Diver2)if holding(Diver1, Diver2), ascend1(Diver1), not decompress(Diver2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',615).

 /*  l_events(happens(startDecompressionIllness(Diver2),
   		 Time_From,
   		 Time_From),
   	 [ holds(holding(Diver1,Diver2),Time_From),
   	   ascend1(Diver1),
   	   not(decompress(Diver2))
   	 ]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       ascend1(Diver1), 
%       ','(
%          not(
%             decompress(Diver2)), 
%          not(
%             startDecompressionIllness(Diver2)))), 
%    not(
%       holding(Diver1,Diver2))).
not holding(Diver1, Diver2)if ascend1(Diver1), not decompress(Diver2), not startDecompressionIllness(Diver2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',615).

 /*  l_int(holds(not(holding(Diver1,Diver2)),Time_At),
         [ ascend1(Diver1),
   	not(decompress(Diver2)),
   	not(startDecompressionIllness(Diver2))
         ]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       not(
%          decompress(Diver2)), 
%       ','(
%          holding(Diver1,Diver2), 
%          not(
%             startDecompressionIllness(Diver2)))), 
%    not(
%       ascend1(Diver1))).
if not decompress(Diver2), holding(Diver1, Diver2), not startDecompressionIllness(Diver2)then not ascend1(Diver1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',615).

 /*  reactive_rule([ not(decompress(Diver2)),
   		holds(holding(Diver1,Diver2),
   		      Time_At5),
   		not(startDecompressionIllness(Diver2))
   	      ],
   	      [not(ascend1(Diver1))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       ascend1(Diver1), 
%       ','(
%          holding(Diver1,Diver2), 
%          not(
%             startDecompressionIllness(Diver2)))), 
%    decompress(Diver2)).
if ascend1(Diver1), holding(Diver1, Diver2), not startDecompressionIllness(Diver2)then decompress(Diver2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',615).

 /*  reactive_rule([ ascend1(Diver1),
   		holds(holding(Diver1,Diver2),
   		      Time_At6),
   		not(startDecompressionIllness(Diver2))
   	      ],
   	      [decompress(Diver2)]).
 */
 %  "% =================================".


% [diver,time]
% Happens(Decompress(diver),time) ->
% ({depth} depth>0 & HoldsAt(AtDepth(diver,depth),time)) &
% !HoldsAt(UncontrolledBuoyancy(diver),time).
% '->'(
%    ';'(
%       not(
%          not(
%             uncontrolledBuoyancy(Diver))), 
%       ';'(
%          not(
%             comparison(Depth,0,>)), 
%          not(
%             atDepth(Diver,Depth)))), 
%    not(
%       decompress(Diver))).
if not not uncontrolledBuoyancy(Diver);not comparison(Depth, 0, >);not atDepth(Diver, Depth)then not decompress(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',621).

 /*   reactive_rule([  (not(not(uncontrolledBuoyancy(Diver)));not(comparison(Depth, 0, >));not(atDepth(Diver, Depth)))
                    ],
                    [not(decompress(Diver))]).
 */
 %  "% =================================".
% '->'(
%    metreqs(
%       decompress(Diver)), 
%    requires(
%       decompress(Diver), 
%       When_Time)).
if decompress(Diver)then requires(decompress(Diver), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',621).

 /*  reactive_rule([decompress(Diver)],
   	      [requires(decompress(Diver),When_Time)]).
 */
 %  "% =================================".
% '->'(
%    not(
%       uncontrolledBuoyancy(Diver)), 
%    metreqs(
%       decompress(Diver))).
if not uncontrolledBuoyancy(Diver)then decompress(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',621).

 /*  reactive_rule([ holds(not(uncontrolledBuoyancy(Diver)),
   		      Time_At)
   	      ],
   	      [decompress(Diver)]).
 */
 %  "% =================================".
% '->'(
%    metreqs(
%       decompress(Diver)), 
%    requires(
%       decompress(Diver), 
%       When_Time)).
if decompress(Diver)then requires(decompress(Diver), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',621).

 /*  reactive_rule([decompress(Diver)],
   	      [requires(decompress(Diver),When_Time)]).
 */
 %  "% =================================".
% '->'(
%    comparison(Depth,0,>), 
%    metreqs(
%       decompress(Diver))).
if comparison(Depth, 0, >)then decompress(Diver).
 %  reactive_rule([comparison(Depth,0,>)],[decompress(Diver)]).
 %  "% =================================".
% '->'(
%    metreqs(
%       decompress(Diver)), 
%    requires(
%       decompress(Diver), 
%       When_Time)).
if decompress(Diver)then requires(decompress(Diver), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',621).

 /*  reactive_rule([decompress(Diver)],
   	      [requires(decompress(Diver),When_Time)]).
 */
 %  "% =================================".
% '->'(
%    atDepth(Diver,Depth), 
%    metreqs(
%       decompress(Diver))).
if atDepth(Diver, Depth)then decompress(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',621).

 /*  reactive_rule([holds(atDepth(Diver,Depth),Time_At5)],
   	      [decompress(Diver)]).
 */
 %  "% =================================".

% fluent HasHeadache(diver)
% fluent(
%    hasHeadache(diver)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',624).
fluents([hasHeadache/1]).
% mpred_prop(
%    hasHeadache(diver), 
%    fluent).
mpred_prop(hasHeadache(diver),fluent).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',627).
% [diver,time]
% HoldsAt(ConditionOK(diver),time) ->
% !HoldsAt(Unconscious(diver),time) &
% !HoldsAt(HasEarPain(diver),time) &
% !HoldsAt(HasRupturedEardrum(diver),time) &
% !HoldsAt(HasDecompressionIllness(diver),time) &
% !HoldsAt(HasHeadache(diver),time).
% '->'(
%    ';'(
%       not(
%          not(
%             unconscious(Diver))), 
%       ';'(
%          not(
%             not(
%                hasEarPain(Diver))), 
%          ';'(
%             not(
%                not(
%                   hasRupturedEardrum(Diver))), 
%             ';'(
%                not(
%                   not(
%                      hasDecompressionIllness(Diver))), 
%                not(
%                   not(
%                      hasHeadache(Diver))))))), 
%    not(
%       conditionOK(Diver))).
if not not unconscious(Diver);not not hasEarPain(Diver);not not hasRupturedEardrum(Diver);not not hasDecompressionIllness(Diver);not not hasHeadache(Diver)then not conditionOK(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',627).

 /*   reactive_rule([  (not(not(unconscious(Diver)));not(not(hasEarPain(Diver)));not(not(hasRupturedEardrum(Diver)));not(not(hasDecompressionIllness(Diver)));not(not(hasHeadache(Diver))))
                    ],
                    [not(conditionOK(Diver))]).
 */
 %  "% =================================".
% '->'(
%    conditionOK(Diver), 
%    not(
%       unconscious(Diver))).
not unconscious(Diver)if conditionOK(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',627).

 /*  l_int(holds(not(unconscious(Diver)),Time_At),
         [conditionOK(Diver)]).
 */
 %  "% =================================".
% '->'(
%    conditionOK(Diver), 
%    not(
%       hasEarPain(Diver))).
not hasEarPain(Diver)if conditionOK(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',627).

 /*  l_int(holds(not(hasEarPain(Diver)),Time_At3),
         [conditionOK(Diver)]).
 */
 %  "% =================================".
% '->'(
%    conditionOK(Diver), 
%    not(
%       hasRupturedEardrum(Diver))).
not hasRupturedEardrum(Diver)if conditionOK(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',627).

 /*  l_int(holds(not(hasRupturedEardrum(Diver)),Time_At4),
         [conditionOK(Diver)]).
 */
 %  "% =================================".
% '->'(
%    conditionOK(Diver), 
%    not(
%       hasDecompressionIllness(Diver))).
not hasDecompressionIllness(Diver)if conditionOK(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',627).

 /*  l_int(holds(not(hasDecompressionIllness(Diver)),Time_At5),
         [conditionOK(Diver)]).
 */
 %  "% =================================".
% '->'(
%    conditionOK(Diver), 
%    not(
%       hasHeadache(Diver))).
if conditionOK(Diver)then not hasHeadache(Diver).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',627).

 /*  reactive_rule([conditionOK(Diver)],
   	      [not(hasHeadache(Diver))]).
 */
 %  "% =================================".

% event BeAirlifted(diver)
% event(
%    beAirlifted(diver)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',634).
events([beAirlifted/1]).
% mpred_prop(
%    beAirlifted(diver), 
%    event).
mpred_prop(beAirlifted(diver),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',637).
% event TakeInWater(diver)
% event(
%    takeInWater(diver)).
events([takeInWater/1]).
% mpred_prop(
%    takeInWater(diver), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',637).
mpred_prop(takeInWater(diver),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',639).
% fluent LowOnAir(airtank)
% fluent(
%    lowOnAir(airtank)).
fluents([lowOnAir/1]).
% mpred_prop(
%    lowOnAir(airtank), 
%    fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',639).
mpred_prop(lowOnAir(airtank),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',641).
% event BecomeLowOnAir(airtank)
% event(
%    becomeLowOnAir(airtank)).
events([becomeLowOnAir/1]).
% mpred_prop(
%    becomeLowOnAir(airtank), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',641).
mpred_prop(becomeLowOnAir(airtank),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',643).
% [airtank,time]
% Initiates(BecomeLowOnAir(airtank),LowOnAir(airtank),time).
% initiates(
%    becomeLowOnAir(Airtank), 
%    lowOnAir(Airtank), 
%    Time).
becomeLowOnAir(Airtank)initiates lowOnAir(Airtank).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',643).

 /*  initiated(happens(becomeLowOnAir(Airtank),
   		  Time_From,
   		  Time_Until),
   	  lowOnAir(Airtank),
   	  []).
 */
 %  "% =================================".


%; initial state
% [diver]
 % HoldsAt(ConditionOK(diver),0).
% initially(
%    conditionOK(Diver)).
initially conditionOK(Diver).
 %  initial_state([conditionOK(Diver)]).
 %  "% =================================".


% [diver]
 % HoldsAt(Vertical(diver),0).
% initially(
%    vertical(Diver)).
initially vertical(Diver).
 %  initial_state([vertical(Diver)]).
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',649).
% !HoldsAt(DisturbedSilt(),0).
% initially(
%    neg(disturbedSilt)).
initially not disturbedSilt.
 %  initial_state([not(disturbedSilt)]).
 %  "% =================================".


% [diver]
 % !HoldsAt(UncontrolledBuoyancy(diver),0).
% initially(
%    neg(
%       uncontrolledBuoyancy(Diver))).
initially not uncontrolledBuoyancy(Diver).
 %  initial_state([not(uncontrolledBuoyancy(Diver))]).
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',651).
% [diver]
 % !HoldsAt(Disoriented(diver),0).
% initially(
%    neg(
%       disoriented(Diver))).
initially not disoriented(Diver).
 %  initial_state([not(disoriented(Diver))]).
 %  "% =================================".


% [diver]
 % !HoldsAt(PositivelyBuoyant(diver),0) &
%         !HoldsAt(NeutrallyBuoyant(diver),0) &
%         !HoldsAt(NegativelyBuoyant(diver),0).
% initially(
%    neg(
%       positivelyBuoyant(Diver))).
initially not positivelyBuoyant(Diver).
 %  initial_state([not(positivelyBuoyant(Diver))]).
 %  "% =================================".
% initially(
%    neg(
%       neutrallyBuoyant(Diver))).
initially not neutrallyBuoyant(Diver).
 %  initial_state([not(neutrallyBuoyant(Diver))]).
 %  "% =================================".
% initially(
%    neg(
%       negativelyBuoyant(Diver))).
initially not negativelyBuoyant(Diver).
 %  initial_state([not(negativelyBuoyant(Diver))]).
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',655).
% [diver,object]
 % !HoldsAt(Wearing(diver,object),0).
% initially(
%    neg(
%       wearing(Diver,Object))).
initially not wearing(Diver, Object).
 %  initial_state([not(wearing(Diver,Object))]).
 %  "% =================================".


% [diver,object]
 % !HoldsAt(Holding(diver,object),0).
% initially(
%    neg(
%       holding(Diver,Object))).
initially not holding(Diver, Object).
 %  initial_state([not(holding(Diver,Object))]).
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',657).
% [diver1,diver2]
 % !HoldsAt(Separated(diver1,diver2),0).
% initially(
%    neg(
%       separated(Diver1,Diver2))).
initially not separated(Diver1, Diver2).
 %  initial_state([not(separated(Diver1,Diver2))]).
 %  "% =================================".


%;[agent,object] !HoldsAt(See(agent,object),0).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',660).
% fluent Separated(diver,diver)
% fluent(
%    separated(diver,diver)).
fluents([separated/2]).
% mpred_prop(
%    separated(diver,diver), 
%    fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',660).
mpred_prop(separated(diver,diver),fluent).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',662).
% [diver1,diver2,time]
% HoldsAt(Separated(diver1,diver2),time) ->
% HoldsAt(Separated(diver2,diver1),time).

% event BecomeSeparated(diver,diver)
% event(
%    becomeSeparated(diver,diver)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',665).
events([becomeSeparated/2]).
% mpred_prop(
%    becomeSeparated(diver,diver), 
%    event).
mpred_prop(becomeSeparated(diver,diver),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',668).
% event BeReunitedWith(diver,diver)
% event(
%    beReunitedWith(diver,diver)).
events([beReunitedWith/2]).
% mpred_prop(
%    beReunitedWith(diver,diver), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',668).
mpred_prop(beReunitedWith(diver,diver),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',670).
% [diver1,diver2,time]
% Initiates(BecomeSeparated(diver1,diver2),Separated(diver1,diver2),time).
% initiates(
%    becomeSeparated(Diver1,Diver2), 
%    separated(Diver1,Diver2), 
%    Time).
becomeSeparated(Diver1, Diver2)initiates separated(Diver1, Diver2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',670).

 /*  initiated(happens(becomeSeparated(Diver1,Diver2),
   		  Time_From,
   		  Time_Until),
   	  separated(Diver1,Diver2),
   	  []).
 */
 %  "% =================================".


% [diver1,diver2,time]
% Initiates(BecomeSeparated(diver1,diver2),Separated(diver2,diver1),time).
% initiates(
%    becomeSeparated(Diver1,Diver2), 
%    separated(Diver2,Diver1), 
%    Time).
becomeSeparated(Diver1, Diver2)initiates separated(Diver2, Diver1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',674).

 /*  initiated(happens(becomeSeparated(Diver1,Diver2),
   		  Time_From,
   		  Time_Until),
   	  separated(Diver2,Diver1),
   	  []).
 */
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',676).
% [diver1,diver2,time]
% Terminates(BeReunitedWith(diver1,diver2),Separated(diver1,diver2),time).
% terminates(
%    beReunitedWith(Diver1,Diver2), 
%    separated(Diver1,Diver2), 
%    Time).
beReunitedWith(Diver1, Diver2)terminates separated(Diver1, Diver2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',676).

 /*  terminated(happens(beReunitedWith(Diver1,Diver2),
   		   Time_From,
   		   Time_Until),
   	   separated(Diver1,Diver2),
   	   []).
 */
 %  "% =================================".


% [diver1,diver2,time]
% Terminates(BeReunitedWith(diver1,diver2),Separated(diver2,diver1),time).
% terminates(
%    beReunitedWith(Diver1,Diver2), 
%    separated(Diver2,Diver1), 
%    Time).
beReunitedWith(Diver1, Diver2)terminates separated(Diver2, Diver1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',680).

 /*  terminated(happens(beReunitedWith(Diver1,Diver2),
   		   Time_From,
   		   Time_Until),
   	   separated(Diver2,Diver1),
   	   []).
 */
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',682).
%; End of file.
% translate: ending  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e.lps 
