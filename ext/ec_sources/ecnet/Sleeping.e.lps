:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',321).
% translate: unskipped  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/Sleeping.e.lps 
:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(lps).
% translate: begining  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/Sleeping.e.lps 
% Thu, 08 Oct 2020 19:06:58 GMT File: <stream>(0x5600a3ab6b00)%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{Mueller:2004c,
%;   author = "Erik T. Mueller",
%;   year = "2004",
%;   title = "Understanding script-based stories using commonsense reasoning",
%;   journal = "Cognitive Systems Research",
%;   volume = "5",
%;   number = "4",
%;   pages = "307--340",
%; }
%;

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleeping.e',22).
% option modeldiff on
:- if(is_e_toplevel).
:- set_ec_option(modeldiff, on).
:- endif.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleeping.e',24).
% ignore Love, ThreatenedBy
 %  pl=axiom(ignore(love),[]).
ignore(love).
 %  ignore(love).
 %  pl=axiom(ignore(threatenedBy),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleeping.e',24).
ignore(threatenedBy).
 %  ignore(threatenedBy).

% ignore LookOutOnto, Floor, BuildingOf, SkyOf, GroundOf
 %  pl=axiom(ignore(lookOutOnto),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleeping.e',24).
ignore(lookOutOnto).
 %  ignore(lookOutOnto).
 %  pl=axiom(ignore(floor),[]).
ignore(floor).
 %  ignore(floor).
 %  pl=axiom(ignore(buildingOf),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleeping.e',24).
ignore(buildingOf).
 %  ignore(buildingOf).
 %  pl=axiom(ignore(skyOf),[]).
ignore(skyOf).
 %  ignore(skyOf).
 %  pl=axiom(ignore(groundOf),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleeping.e',24).
ignore(groundOf).
 %  ignore(groundOf).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleeping.e',26).
% ignore Inside, Near
 %  pl=axiom(ignore(inside),[]).
ignore(inside).
 %  ignore(inside).
 %  pl=axiom(ignore(near),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleeping.e',26).
ignore(near).
 %  ignore(near).

% ignore See
 %  pl=axiom(ignore(see),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleeping.e',26).
ignore(see).
 %  ignore(see).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleeping.e',29).
% ignore ActOnSleep5
 %  pl=axiom(ignore(actOnSleep5),[]).
ignore(actOnSleep5).
 %  ignore(actOnSleep5).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleeping.e',31).
% option renaming off
:- if(is_e_toplevel).
:- set_ec_option(renaming, off).
:- endif.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleeping.e',33).
% load foundations/Root.e
:- if(is_e_toplevel).
:- load_e_cond('foundations/Root.e', changed).
 %  load('/pack/logicmoo_ec/ext/ec_sources/foundations/Root.e',changed).
:- endif.

% load foundations/EC.e
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleeping.e',33).
:- if(is_e_toplevel).
:- load_e_cond('foundations/EC.e', changed).
 %  load('/pack/logicmoo_ec/ext/ec_sources/foundations/EC.e',changed).
:- endif.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleeping.e',35).
% load answers/Mueller2003/Ontology.e
:- if(is_e_toplevel).
:- load_e_cond('answers/Mueller2003/Ontology.e', changed).
 %  load('/pack/logicmoo_ec/ext/ec_sources/ecnet/Ontology.e',changed).
:- endif.

% load answers/Mueller2004c/RTSpaceM.e
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleeping.e',35).
:- if(is_e_toplevel).
:- load_e_cond('answers/Mueller2004c/RTSpaceM.e', changed).
 %  load('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',changed).
:- endif.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleeping.e',37).
% load answers/Mueller2004c/OTSpaceM.e
:- if(is_e_toplevel).
:- load_e_cond('answers/Mueller2004c/OTSpaceM.e', changed).
 %  load('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',changed).
:- endif.

% load answers/Mueller2004c/Cognition.e
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleeping.e',37).
:- if(is_e_toplevel).
:- load_e_cond('answers/Mueller2004c/Cognition.e', changed).
 %  load('/pack/logicmoo_ec/ext/ec_sources/ecnet/Cognition.e',changed).
:- endif.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleeping.e',39).
% load answers/Mueller2003/Sleep.e
:- if(is_e_toplevel).
:- load_e_cond('answers/Mueller2003/Sleep.e', changed).
 %  load('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',changed).
:- endif.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleeping.e',41).
% door Door1
 %  t(door,door1).
door(door1).
 %  door(door1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleeping.e',43).
% room Room0
 %  t(room,room0).
room(room0).
 %  room(room0).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleeping.e',45).
% room Room1
 %  t(room,room1).
room(room1).
 %  room(room1).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleeping.e',47).
% Side1(Door1)=Room0.
 %  pl=axiom(side1Pred(door1,room0),[]).
side1Pred(door1,room0).
 %  side1Pred(door1,room0).


% Side2(Door1)=Room1.
 %  pl=axiom(side2Pred(door1,room1),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleeping.e',47).
side2Pred(door1,room1).
 %  side2Pred(door1,room1).

% agent Sleeper1
 %  t(agent,sleeper1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleeping.e',49).
agent(sleeper1).
 %  agent(sleeper1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleeping.e',52).
% bed Bed1
 %  t(bed,bed1).
bed(bed1).
 %  bed(bed1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleeping.e',54).
% outside Outside1
 %  t(outside,outside1).
outside(outside1).
 %  outside(outside1).
%; initial state
% [agent,object]
 % !HoldsAt(Holding(agent,object),0).
 %  pl=axiom(initially(neg(holding(Agent,Object))),[]).
 %  initially(neg(holding(Agent,Object))).
initially not holding(Agent, Object).
 %  initial_state([not(holding(Agent,Object))]).
 %  initial_state([not(holding(Agent,Object))]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleeping.e',58).
% [agent,physobj]
 % !HoldsAt(SittingOn(agent,physobj),0).
 %  pl=axiom(initially(neg(sittingOn(Agent,Physobj))),[]).
 %  initially(neg(sittingOn(Agent,Physobj))).
initially not sittingOn(Agent, Physobj).
 %  initial_state([not(sittingOn(Agent,Physobj))]).
 %  initial_state([not(sittingOn(Agent,Physobj))]).


% [agent,physobj]
 % !HoldsAt(LyingOn(agent,physobj),0).
 %  pl=axiom(initially(neg(lyingOn(Agent,Physobj))),[]).
 %  initially(neg(lyingOn(Agent,Physobj))).
initially not lyingOn(Agent, Physobj).
 %  initial_state([not(lyingOn(Agent,Physobj))]).
 %  initial_state([not(lyingOn(Agent,Physobj))]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleeping.e',60).
% HoldsAt(Dressed(Sleeper1),0).
 %  pl=axiom(initially(dressed(sleeper1)),[]).
initially dressed(sleeper1).
 %  initial_state([dressed(sleeper1)]).
 %  initial_state([dressed(sleeper1)]).


% HoldsAt(Awake(Sleeper1),0).
 %  pl=axiom(initially(awake(sleeper1)),[]).
initially awake(sleeper1).
 %  initial_state([awake(sleeper1)]).
 %  initial_state([awake(sleeper1)]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleeping.e',62).
% HoldsAt(Sleep3(Sleeper1),0).
 %  pl=axiom(initially(sleep3(sleeper1)),[]).
initially sleep3(sleeper1).
 %  initial_state([sleep3(sleeper1)]).
 %  initial_state([sleep3(sleeper1)]).


% HoldsAt(Standing(Sleeper1),0).
 %  pl=axiom(initially(standing(sleeper1)),[]).
initially standing(sleeper1).
 %  initial_state([standing(sleeper1)]).
 %  initial_state([standing(sleeper1)]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleeping.e',64).
% HoldsAt(DoorUnlocked(Door1),0).
 %  pl=axiom(initially(doorUnlocked(door1)),[]).
initially doorUnlocked(door1).
 %  initial_state([doorUnlocked(door1)]).
 %  initial_state([doorUnlocked(door1)]).


% HoldsAt(DoorIsOpen(Door1),0).
 %  pl=axiom(initially(doorIsOpen(door1)),[]).
initially doorIsOpen(door1).
 %  initial_state([doorIsOpen(door1)]).
 %  initial_state([doorIsOpen(door1)]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleeping.e',66).
% HoldsAt(At(Sleeper1,Room0),0).
 %  pl=axiom(initially(at(sleeper1,room0)),[]).
 %  initially(at(sleeper1,room0)).
initially loc_at(sleeper1, room0).
 %  initial_state([loc_at(sleeper1,room0)]).
 %  initial_state([loc_at(sleeper1,room0)]).


% HoldsAt(At(Bed1,Room1),0).
 %  pl=axiom(initially(at(bed1,room1)),[]).
 %  initially(at(bed1,room1)).
initially loc_at(bed1, room1).
 %  initial_state([loc_at(bed1,room1)]).
 %  initial_state([loc_at(bed1,room1)]).


%; narrative


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleeping.e',70).
% Happens(GetTired(Sleeper1),0).
 %  pl=axiom(happens(getTired(sleeper1),start),[]).
 %  happens(getTired(sleeper1),start).
observe(at(getTired(sleeper1),start)).
 %  observe(at(getTired(sleeper1),start)).


% Happens(WalkThroughDoor12(Sleeper1,Door1),1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleeping.e',70).

 /*  pl=axiom(happens(walkThroughDoor12(sleeper1,door1),When),
         [b(start,When)]).
 */

 /*  b(start, When) ->
       happens(walkThroughDoor12(sleeper1, door1), When).
 */
if b(start, When)then happens(walkThroughDoor12(sleeper1, door1), When).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleeping.e',70).

 /*  reactive_rule([b(start,When)],
   	      [happens(walkThroughDoor12(sleeper1,door1),When)]).
 */

 /*  reactive_rule([b(start,When)],
   	      [happens(walkThroughDoor12(sleeper1,door1),When)]).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleeping.e',72).
% Happens(GetUndressed(Sleeper1),2).

 /*  pl=axiom(happens(getUndressed(sleeper1),Start_Num2),
         [b(start,Start_Num2),toffset(start,2,Start_Num2)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleeping.e',72).

 /*  (   b(start, Start_Num2),
       toffset(start, 2, Start_Num2)
   ->  happens(getUndressed(sleeper1), Start_Num2)
   ).
 */
if b(start, Start_Num2), toffset(start, 2, Start_Num2)then happens(getUndressed(sleeper1), Start_Num2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleeping.e',72).

 /*  reactive_rule([ b(start,Start_Num2),
   		toffset(start,2,Start_Num2)
   	      ],
   	      [happens(getUndressed(sleeper1),Start_Num2)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleeping.e',72).

 /*  reactive_rule([ b(start,Start_Num2),
   		toffset(start,2,Start_Num2)
   	      ],
   	      [happens(getUndressed(sleeper1),Start_Num2)]).
 */


% Happens(LieOn(Sleeper1,Bed1),3).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleeping.e',72).

 /*  pl=axiom(happens(lieOn(sleeper1,bed1),Start_Num3),
         [b(start,Start_Num3),toffset(start,3,Start_Num3)]).
 */

 /*  (   b(start, Start_Num3),
       toffset(start, 3, Start_Num3)
   ->  happens(lieOn(sleeper1, bed1), Start_Num3)
   ).
 */
if b(start, Start_Num3), toffset(start, 3, Start_Num3)then happens(lieOn(sleeper1, bed1), Start_Num3).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleeping.e',72).

 /*  reactive_rule([ b(start,Start_Num3),
   		toffset(start,3,Start_Num3)
   	      ],
   	      [happens(lieOn(sleeper1,bed1),Start_Num3)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleeping.e',72).

 /*  reactive_rule([ b(start,Start_Num3),
   		toffset(start,3,Start_Num3)
   	      ],
   	      [happens(lieOn(sleeper1,bed1),Start_Num3)]).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleeping.e',74).
% Happens(FallAsleep(Sleeper1),4).

 /*  pl=axiom(happens(fallAsleep(sleeper1),Start_Num4),
         [b(start,Start_Num4),toffset(start,4,Start_Num4)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleeping.e',74).

 /*  (   b(start, Start_Num4),
       toffset(start, 4, Start_Num4)
   ->  happens(fallAsleep(sleeper1), Start_Num4)
   ).
 */
if b(start, Start_Num4), toffset(start, 4, Start_Num4)then happens(fallAsleep(sleeper1), Start_Num4).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleeping.e',74).

 /*  reactive_rule([ b(start,Start_Num4),
   		toffset(start,4,Start_Num4)
   	      ],
   	      [happens(fallAsleep(sleeper1),Start_Num4)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleeping.e',74).

 /*  reactive_rule([ b(start,Start_Num4),
   		toffset(start,4,Start_Num4)
   	      ],
   	      [happens(fallAsleep(sleeper1),Start_Num4)]).
 */


% Happens(Dream(Sleeper1),5).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleeping.e',74).

 /*  pl=axiom(happens(dream(sleeper1),Start_Num5),
         [b(start,Start_Num5),toffset(start,5,Start_Num5)]).
 */

 /*  (   b(start, Start_Num5),
       toffset(start, 5, Start_Num5)
   ->  happens(dream(sleeper1), Start_Num5)
   ).
 */
if b(start, Start_Num5), toffset(start, 5, Start_Num5)then happens(dream(sleeper1), Start_Num5).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleeping.e',74).

 /*  reactive_rule([ b(start,Start_Num5),
   		toffset(start,5,Start_Num5)
   	      ],
   	      [happens(dream(sleeper1),Start_Num5)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleeping.e',74).

 /*  reactive_rule([ b(start,Start_Num5),
   		toffset(start,5,Start_Num5)
   	      ],
   	      [happens(dream(sleeper1),Start_Num5)]).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleeping.e',76).
% Happens(WakeUp(Sleeper1),6).

 /*  pl=axiom(happens(wakeUp(sleeper1),Start_Num6),
         [b(start,Start_Num6),toffset(start,6,Start_Num6)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleeping.e',76).

 /*  (   b(start, Start_Num6),
       toffset(start, 6, Start_Num6)
   ->  happens(wakeUp(sleeper1), Start_Num6)
   ).
 */
if b(start, Start_Num6), toffset(start, 6, Start_Num6)then happens(wakeUp(sleeper1), Start_Num6).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleeping.e',76).

 /*  reactive_rule([ b(start,Start_Num6),
   		toffset(start,6,Start_Num6)
   	      ],
   	      [happens(wakeUp(sleeper1),Start_Num6)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleeping.e',76).

 /*  reactive_rule([ b(start,Start_Num6),
   		toffset(start,6,Start_Num6)
   	      ],
   	      [happens(wakeUp(sleeper1),Start_Num6)]).
 */


% Happens(RiseFrom(Sleeper1,Bed1),7).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleeping.e',76).

 /*  pl=axiom(happens(riseFrom(sleeper1,bed1),Start_Num7),
         [b(start,Start_Num7),toffset(start,7,Start_Num7)]).
 */

 /*  (   b(start, Start_Num7),
       toffset(start, 7, Start_Num7)
   ->  happens(riseFrom(sleeper1, bed1), Start_Num7)
   ).
 */
if b(start, Start_Num7), toffset(start, 7, Start_Num7)then happens(riseFrom(sleeper1, bed1), Start_Num7).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleeping.e',76).

 /*  reactive_rule([ b(start,Start_Num7),
   		toffset(start,7,Start_Num7)
   	      ],
   	      [happens(riseFrom(sleeper1,bed1),Start_Num7)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleeping.e',76).

 /*  reactive_rule([ b(start,Start_Num7),
   		toffset(start,7,Start_Num7)
   	      ],
   	      [happens(riseFrom(sleeper1,bed1),Start_Num7)]).
 */


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleeping.e',78).
% Happens(GetDressed(Sleeper1),8).

 /*  pl=axiom(happens(getDressed(sleeper1),Start_Num8),
         [b(start,Start_Num8),toffset(start,8,Start_Num8)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleeping.e',78).

 /*  (   b(start, Start_Num8),
       toffset(start, 8, Start_Num8)
   ->  happens(getDressed(sleeper1), Start_Num8)
   ).
 */
if b(start, Start_Num8), toffset(start, 8, Start_Num8)then happens(getDressed(sleeper1), Start_Num8).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleeping.e',78).

 /*  reactive_rule([ b(start,Start_Num8),
   		toffset(start,8,Start_Num8)
   	      ],
   	      [happens(getDressed(sleeper1),Start_Num8)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleeping.e',78).

 /*  reactive_rule([ b(start,Start_Num8),
   		toffset(start,8,Start_Num8)
   	      ],
   	      [happens(getDressed(sleeper1),Start_Num8)]).
 */


% Happens(WalkThroughDoor21(Sleeper1,Door1),9).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleeping.e',78).

 /*  pl=axiom(happens(walkThroughDoor21(sleeper1,door1),Start_Num9),
         [b(start,Start_Num9),toffset(start,9,Start_Num9)]).
 */

 /*  (   b(start, Start_Num9),
       toffset(start, 9, Start_Num9)
   ->  happens(walkThroughDoor21(sleeper1, door1), Start_Num9)
   ).
 */
if b(start, Start_Num9), toffset(start, 9, Start_Num9)then happens(walkThroughDoor21(sleeper1, door1), Start_Num9).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleeping.e',78).

 /*  reactive_rule([ b(start,Start_Num9),
   		toffset(start,9,Start_Num9)
   	      ],
   	      [ happens(walkThroughDoor21(sleeper1,door1),
   			Start_Num9)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleeping.e',78).

 /*  reactive_rule([ b(start,Start_Num9),
   		toffset(start,9,Start_Num9)
   	      ],
   	      [ happens(walkThroughDoor21(sleeper1,door1),
   			Start_Num9)
   	      ]).
 */

% range time 0 10
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleeping.e',80).
range(time,0,10).
 %  range(time,0,10).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleeping.e',82).
% range offset 0 0
range(offset,0,0).
 %  range(offset,0,0).

% range diameter 0 0
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleeping.e',82).
range(diameter,0,0).
 %  range(diameter,0,0).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleeping.e',85).
% completion Happens
completion(happens).
 %  completion(happens).
%; End of file.
% translate: ending  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/Sleeping.e.lps 
