:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/GSpace.e',70).
% translate: unskipped  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/Gun.e.lps 
:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(lps).
% translate: begining  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/Gun.e.lps 
% Thu, 08 Oct 2020 21:36:18 GMT File: <stream>(0x55894c2e1600)%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Gun.e',12).
% fluent Loaded(gun,bullet)
% fluent(
%    loaded(gun,bullet)).
fluents([loaded/2]).
% mpred_prop(
%    loaded(gun,bullet), 
%    fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Gun.e',12).
mpred_prop(loaded(gun,bullet),fluent).

% noninertial Loaded
% noninertial(loaded).
noninertial(loaded).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Gun.e',15).
% [gun,bullet,time]
% HoldsAt(Inside(bullet,gun),time) <->
% HoldsAt(Loaded(gun,bullet),time).

 /*  holds_at(inside(Bullet, Gun), Time) <->
       holds_at(loaded(Gun, Bullet), Time).
 */
% '->'(
%    inside(Bullet,Gun), 
%    loaded(Gun,Bullet)).
if inside(Bullet, Gun)then loaded(Gun, Bullet).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Gun.e',15).

 /*  reactive_rule([holds(inside(Bullet,Gun),Time_At)],
   	      [loaded(Gun,Bullet)]).
 */
 %  "% =================================".
% '->'(
%    not(
%       loaded(Gun,Bullet)), 
%    not(
%       inside(Bullet,Gun))).
not inside(Bullet, Gun)if not loaded(Gun, Bullet).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Gun.e',15).

 /*  l_int(holds(not(inside(Bullet,Gun)),Time_At4),
         [not(loaded(Gun,Bullet))]).
 */
 %  "% =================================".
% '->'(
%    loaded(Gun,Bullet), 
%    inside(Bullet,Gun)).
inside(Bullet, Gun)if loaded(Gun, Bullet).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Gun.e',15).

 /*  l_int(holds(inside(Bullet,Gun),Time_At5),
         [loaded(Gun,Bullet)]).
 */
 %  "% =================================".
% '->'(
%    not(
%       inside(Bullet,Gun)), 
%    not(
%       loaded(Gun,Bullet))).
if not inside(Bullet, Gun)then not loaded(Gun, Bullet).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Gun.e',15).

 /*  reactive_rule([ holds(not(inside(Bullet,Gun)),
   		      Time_At6)
   	      ],
   	      [not(loaded(Gun,Bullet))]).
 */
 %  "% =================================".

% event Shoot(agent,gun,object)
% event(
%    shoot(agent,gun,object)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Gun.e',18).
actions([shoot/3]).
% mpred_prop(
%    shoot(agent,gun,object), 
%    event).
mpred_prop(shoot(agent,gun,object),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Gun.e',21).
% event ShootInjure(agent,gun,agent)
% event(
%    shootInjure(agent,gun,agent)).
actions([shootInjure/3]).
% mpred_prop(
%    shootInjure(agent,gun,agent), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Gun.e',21).
mpred_prop(shootInjure(agent,gun,agent),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Gun.e',23).
% event ShootKill(agent,gun,agent)
% event(
%    shootKill(agent,gun,agent)).
actions([shootKill/3]).
% mpred_prop(
%    shootKill(agent,gun,agent), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Gun.e',23).
mpred_prop(shootKill(agent,gun,agent),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Gun.e',25).
% event ShootDamage(agent,gun,physobj)
% event(
%    shootDamage(agent,gun,physobj)).
actions([shootDamage/3]).
% mpred_prop(
%    shootDamage(agent,gun,physobj), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Gun.e',25).
mpred_prop(shootDamage(agent,gun,physobj),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Gun.e',27).
% event ShootDestroy(agent,gun,physobj)
% event(
%    shootDestroy(agent,gun,physobj)).
actions([shootDestroy/3]).
% mpred_prop(
%    shootDestroy(agent,gun,physobj), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Gun.e',27).
mpred_prop(shootDestroy(agent,gun,physobj),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Gun.e',29).
% [agent,gun,bullet,object,time]
% HoldsAt(Inside(bullet,gun),time) ->
% Terminates(Shoot(agent,gun,object),
%            Inside(bullet,gun),
%            time).
% '->'(
%    inside(Bullet,Gun), 
%    terminates(
%       shoot(Agent,Gun,Object), 
%       inside(Bullet,Gun), 
%       Time)).
if inside(Bullet, Gun)then terminates(shoot(Agent, Gun, Object), inside(Bullet, Gun)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Gun.e',29).

 /*  reactive_rule([holds(inside(Bullet,Gun),Time_At)],
   	      [ terminates(shoot(Agent,Gun,Object),
   			   at(inside(Bullet,Gun),
   			      Time),
   			   Terminates)
   	      ]).
 */
 %  "% =================================".


% [agent,gun,bullet,object,location1,location2,time]
% HoldsAt(Inside(bullet,gun),time) &
% HoldsAt(At(gun,location1),time) &
% location1 != location2 ->
% Terminates(Shoot(agent,gun,object),At(bullet,location2),time).
% '->'(
%    ','(
%       inside(Bullet,Gun), 
%       ','(
%          at(Gun,Location1), 
%          diff(Location2,Location1))), 
%    terminates(
%       shoot(Agent,Gun,Object), 
%       at(Bullet,Location2), 
%       Time)).
if inside(Bullet, Gun), loc_at(Gun, Location1), diff(Location2, Location1)then terminates(shoot(Agent, Gun, Object), loc_at(Bullet, Location2)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Gun.e',36).

 /*  reactive_rule([ holds(inside(Bullet,Gun),Time_At),
   		loc_at(Gun,Location1),
   		diff(Location2,Location1)
   	      ],
   	      [ terminates(shoot(Agent,Gun,Object),
   			   at(loc_at(Bullet,Location2),
   			      Time),
   			   Terminates)
   	      ]).
 */
 %  "% =================================".


% [agent,gun,bullet,object,location,time]
% HoldsAt(At(object,location),time) &
% HoldsAt(Inside(bullet,gun),time) ->
% Initiates(Shoot(agent,gun,object),At(bullet,location),time).
% '->'(
%    ','(
%       at(Object,Location), 
%       inside(Bullet,Gun)), 
%    initiates(
%       shoot(Agent,Gun,Object), 
%       at(Bullet,Location), 
%       Time)).
if loc_at(Object, Location), inside(Bullet, Gun)then initiates(shoot(Agent, Gun, Object), loc_at(Bullet, Location)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Gun.e',42).

 /*  reactive_rule([ loc_at(Object,Location),
   		holds(inside(Bullet,Gun),Time_At)
   	      ],
   	      [ initiates(shoot(Agent,Gun,Object),
   			  at(loc_at(Bullet,Location),
   			     Time),
   			  Initiates)
   	      ]).
 */
 %  "% =================================".


% [agent,gun,object,time]
% Happens(Shoot(agent,gun,object),time) ->
% HoldsAt(Holding(agent,gun),time) &
% ({bullet} HoldsAt(Loaded(gun,bullet),time)) &
% ({location} HoldsAt(At(agent,location),time) &
%             HoldsAt(At(object,location),time)).
% '->'(
%    ';'(
%       not(
%          holding(Agent,Gun)), 
%       ';'(
%          not(
%             loaded(Gun,Bullet)), 
%          ';'(
%             not(
%                at(Agent,Location)), 
%             not(
%                at(Object,Location))))), 
%    not(
%       shoot(Agent,Gun,Object))).
if not holding(Agent, Gun);not loaded(Gun, Bullet);not loc_at(Agent, Location);not loc_at(Object, Location)then not shoot(Agent, Gun, Object).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Gun.e',47).

 /*   reactive_rule([  (not(holding(Agent, Gun));not(loaded(Gun, Bullet));not(loc_at(Agent, Location));not(loc_at(Object, Location)))
                    ],
                    [not(shoot(Agent, Gun, Object))]).
 */
 %  "% =================================".
% '->'(
%    metreqs(
%       shoot(Agent,Gun,Object)), 
%    requires(
%       shoot(Agent,Gun,Object), 
%       When_Time)).
if shoot(Agent, Gun, Object)then requires(shoot(Agent, Gun, Object), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Gun.e',47).

 /*  reactive_rule([ happens(shoot(Agent,Gun,Object),
   			Time_From,
   			Time_Until)
   	      ],
   	      [ requires(shoot(Agent,Gun,Object),
   			 When_Time)
   	      ]).
 */
 %  "% =================================".
% '->'(
%    holding(Agent,Gun), 
%    metreqs(
%       shoot(Agent,Gun,Object))).
shoot(Agent, Gun, Object)if holding(Agent, Gun).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Gun.e',47).

 /*  l_events(happens(shoot(Agent,Gun,Object),
   		 Time_From9,
   		 Time_From9),
   	 [holds(holding(Agent,Gun),Time_From9)]).
 */
 %  "% =================================".
% '->'(
%    metreqs(
%       shoot(Agent,Gun,Object)), 
%    requires(
%       shoot(Agent,Gun,Object), 
%       When_Time)).
if shoot(Agent, Gun, Object)then requires(shoot(Agent, Gun, Object), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Gun.e',47).

 /*  reactive_rule([ happens(shoot(Agent,Gun,Object),
   			Time_From10,
   			Time_Until11)
   	      ],
   	      [ requires(shoot(Agent,Gun,Object),
   			 When_Time)
   	      ]).
 */
 %  "% =================================".
% '->'(
%    loaded(Gun,Bullet), 
%    metreqs(
%       shoot(Agent,Gun,Object))).
shoot(Agent, Gun, Object)if loaded(Gun, Bullet).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Gun.e',47).

 /*  l_events(happens(shoot(Agent,Gun,Object),
   		 Time_From12,
   		 Time_From12),
   	 [loaded(Gun,Bullet)]).
 */
 %  "% =================================".
% '->'(
%    metreqs(
%       shoot(Agent,Gun,Object)), 
%    requires(
%       shoot(Agent,Gun,Object), 
%       When_Time)).
if shoot(Agent, Gun, Object)then requires(shoot(Agent, Gun, Object), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Gun.e',47).

 /*  reactive_rule([ happens(shoot(Agent,Gun,Object),
   			Time_From13,
   			Time_Until14)
   	      ],
   	      [ requires(shoot(Agent,Gun,Object),
   			 When_Time)
   	      ]).
 */
 %  "% =================================".
% '->'(
%    at(Agent,Location), 
%    metreqs(
%       shoot(Agent,Gun,Object))).
shoot(Agent, Gun, Object)if loc_at(Agent, Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Gun.e',47).

 /*  l_events(happens(shoot(Agent,Gun,Object),
   		 Time_From15,
   		 Time_From15),
   	 [loc_at(Agent,Location)]).
 */
 %  "% =================================".
% '->'(
%    metreqs(
%       shoot(Agent,Gun,Object)), 
%    requires(
%       shoot(Agent,Gun,Object), 
%       When_Time)).
if shoot(Agent, Gun, Object)then requires(shoot(Agent, Gun, Object), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Gun.e',47).

 /*  reactive_rule([ happens(shoot(Agent,Gun,Object),
   			Time_From16,
   			Time_Until17)
   	      ],
   	      [ requires(shoot(Agent,Gun,Object),
   			 When_Time)
   	      ]).
 */
 %  "% =================================".
% '->'(
%    at(Object,Location), 
%    metreqs(
%       shoot(Agent,Gun,Object))).
shoot(Agent, Gun, Object)if loc_at(Object, Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Gun.e',47).

 /*  l_events(happens(shoot(Agent,Gun,Object),
   		 Time_From18,
   		 Time_From18),
   	 [loc_at(Object,Location)]).
 */
 %  "% =================================".


% [agent1,gun,agent2,time]
% Happens(Shoot(agent1,gun,agent2),time) ->
% Happens(ShootInjure(agent1,gun,agent2),time) |
% Happens(ShootKill(agent1,gun,agent2),time).
% '->'(
%    ','(
%       not(
%          shootKill(Agent1,Gun,Agent2)), 
%       shoot(Agent1,Gun,Agent2)), 
%    shootInjure(Agent1,Gun,Agent2)).
if not shootKill(Agent1, Gun, Agent2), shoot(Agent1, Gun, Agent2)then shootInjure(Agent1, Gun, Agent2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Gun.e',54).

 /*  reactive_rule([ not(shootKill(Agent1,Gun,Agent2)),
   		happens(shoot(Agent1,Gun,Agent2),
   			Time_From,
   			Time_Until)
   	      ],
   	      [shootInjure(Agent1,Gun,Agent2)]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       not(
%          shootInjure(Agent1,Gun,Agent2)), 
%       shoot(Agent1,Gun,Agent2)), 
%    shootKill(Agent1,Gun,Agent2)).
shootKill(Agent1, Gun, Agent2)if not shootInjure(Agent1, Gun, Agent2), shoot(Agent1, Gun, Agent2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Gun.e',54).

 /*  l_events(happens(shootKill(Agent1,Gun,Agent2),
   		 Time_From6,
   		 Time_Until7),
   	 [ not(shootInjure(Agent1,Gun,Agent2)),
   	   happens(shoot(Agent1,Gun,Agent2),
   		   Time_From6,
   		   Time_Until7)
   	 ]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       not(
%          shootInjure(Agent1,Gun,Agent2)), 
%       not(
%          shootKill(Agent1,Gun,Agent2))), 
%    not(
%       shoot(Agent1,Gun,Agent2))).
if not shootInjure(Agent1, Gun, Agent2), not shootKill(Agent1, Gun, Agent2)then not shoot(Agent1, Gun, Agent2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Gun.e',54).

 /*  reactive_rule([ not(shootInjure(Agent1,Gun,Agent2)),
   		not(shootKill(Agent1,Gun,Agent2))
   	      ],
   	      [not(shoot(Agent1,Gun,Agent2))]).
 */
 %  "% =================================".


% [agent1,gun,bullet,agent2,time]
% HoldsAt(Inside(bullet,gun),time) &
% Happens(ShootKill(agent1,gun,agent2),time) ->
% Happens(Kill(bullet,agent2),time).
% '->'(
%    ','(
%       inside(Bullet,Gun), 
%       shootKill(Agent1,Gun,Agent2)), 
%    call(
%       kill(Bullet,Agent2))).
if inside(Bullet, Gun), shootKill(Agent1, Gun, Agent2)then call(kill(Bullet, Agent2)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Gun.e',59).

 /*  reactive_rule([ holds(inside(Bullet,Gun),Time_At),
   		happens(shootKill(Agent1,Gun,Agent2),
   			Time_At,
   			Time_Until)
   	      ],
   	      [call(kill(Bullet,Agent2))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       shootKill(Agent1,Gun,Agent2), 
%       not(
%          call(
%             kill(Bullet,Agent2)))), 
%    not(
%       inside(Bullet,Gun))).
not inside(Bullet, Gun)if shootKill(Agent1, Gun, Agent2), not call(kill(Bullet, Agent2)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Gun.e',59).

 /*  l_int(holds(not(inside(Bullet,Gun)),Time_At7),
         [ happens(shootKill(Agent1,Gun,Agent2),
   		Time_At7,
   		Time_At7),
   	not(call(kill(Bullet,Agent2)))
         ]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       inside(Bullet,Gun), 
%       not(
%          call(
%             kill(Bullet,Agent2)))), 
%    not(
%       shootKill(Agent1,Gun,Agent2))).
if inside(Bullet, Gun), not call(kill(Bullet, Agent2))then not shootKill(Agent1, Gun, Agent2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Gun.e',59).

 /*  reactive_rule([ holds(inside(Bullet,Gun),Time_At8),
   		not(call(kill(Bullet,Agent2)))
   	      ],
   	      [not(shootKill(Agent1,Gun,Agent2))]).
 */
 %  "% =================================".


% [agent1,gun,bullet,agent2,time]
% HoldsAt(Inside(bullet,gun),time) &
% Happens(ShootInjure(agent1,gun,agent2),time) ->
% Happens(Injure(bullet,agent2),time).
% '->'(
%    ','(
%       inside(Bullet,Gun), 
%       shootInjure(Agent1,Gun,Agent2)), 
%    injure(Bullet,Agent2)).
injure(Bullet, Agent2)if inside(Bullet, Gun), shootInjure(Agent1, Gun, Agent2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Gun.e',64).

 /*  l_events(happens(injure(Bullet,Agent2),
   		 Time_From,
   		 Time_From),
   	 [ holds(inside(Bullet,Gun),Time_From),
   	   shootInjure(Agent1,Gun,Agent2)
   	 ]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       shootInjure(Agent1,Gun,Agent2), 
%       not(
%          injure(Bullet,Agent2))), 
%    not(
%       inside(Bullet,Gun))).
not inside(Bullet, Gun)if shootInjure(Agent1, Gun, Agent2), not injure(Bullet, Agent2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Gun.e',64).

 /*  l_int(holds(not(inside(Bullet,Gun)),Time_At),
         [ shootInjure(Agent1,Gun,Agent2),
   	not(injure(Bullet,Agent2))
         ]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       inside(Bullet,Gun), 
%       not(
%          injure(Bullet,Agent2))), 
%    not(
%       shootInjure(Agent1,Gun,Agent2))).
if inside(Bullet, Gun), not injure(Bullet, Agent2)then not shootInjure(Agent1, Gun, Agent2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Gun.e',64).

 /*  reactive_rule([ holds(inside(Bullet,Gun),Time_At7),
   		not(injure(Bullet,Agent2))
   	      ],
   	      [not(shootInjure(Agent1,Gun,Agent2))]).
 */
 %  "% =================================".


% [agent,gun,physobj,time]
% Happens(Shoot(agent,gun,physobj),time) ->
% Happens(ShootDamage(agent,gun,physobj),time) |
% Happens(ShootDestroy(agent,gun,physobj),time).
% '->'(
%    ','(
%       not(
%          shootDestroy(Agent,Gun,Physobj)), 
%       shoot(Agent,Gun,Physobj)), 
%    shootDamage(Agent,Gun,Physobj)).
if not shootDestroy(Agent, Gun, Physobj), shoot(Agent, Gun, Physobj)then shootDamage(Agent, Gun, Physobj).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Gun.e',69).

 /*  reactive_rule([ not(shootDestroy(Agent,Gun,Physobj)),
   		happens(shoot(Agent,Gun,Physobj),
   			Time_From,
   			Time_Until)
   	      ],
   	      [shootDamage(Agent,Gun,Physobj)]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       not(
%          shootDamage(Agent,Gun,Physobj)), 
%       shoot(Agent,Gun,Physobj)), 
%    shootDestroy(Agent,Gun,Physobj)).
shootDestroy(Agent, Gun, Physobj)if not shootDamage(Agent, Gun, Physobj), shoot(Agent, Gun, Physobj).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Gun.e',69).

 /*  l_events(happens(shootDestroy(Agent,Gun,Physobj),
   		 Time_From6,
   		 Time_Until7),
   	 [ not(shootDamage(Agent,Gun,Physobj)),
   	   happens(shoot(Agent,Gun,Physobj),
   		   Time_From6,
   		   Time_Until7)
   	 ]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       not(
%          shootDamage(Agent,Gun,Physobj)), 
%       not(
%          shootDestroy(Agent,Gun,Physobj))), 
%    not(
%       shoot(Agent,Gun,Physobj))).
if not shootDamage(Agent, Gun, Physobj), not shootDestroy(Agent, Gun, Physobj)then not shoot(Agent, Gun, Physobj).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Gun.e',69).

 /*  reactive_rule([ not(shootDamage(Agent,Gun,Physobj)),
   		not(shootDestroy(Agent,Gun,Physobj))
   	      ],
   	      [not(shoot(Agent,Gun,Physobj))]).
 */
 %  "% =================================".


% [agent,gun,bullet,physobj,time]
% HoldsAt(Inside(bullet,gun),time) &
% Happens(ShootDamage(agent,gun,physobj),time) ->
% Happens(Damage(bullet,physobj),time).
% '->'(
%    ','(
%       inside(Bullet,Gun), 
%       shootDamage(Agent,Gun,Physobj)), 
%    damage(Bullet,Physobj)).
damage(Bullet, Physobj)if inside(Bullet, Gun), shootDamage(Agent, Gun, Physobj).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Gun.e',74).

 /*  l_events(happens(damage(Bullet,Physobj),
   		 Time_From,
   		 Time_From),
   	 [ holds(inside(Bullet,Gun),Time_From),
   	   shootDamage(Agent,Gun,Physobj)
   	 ]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       shootDamage(Agent,Gun,Physobj), 
%       not(
%          damage(Bullet,Physobj))), 
%    not(
%       inside(Bullet,Gun))).
not inside(Bullet, Gun)if shootDamage(Agent, Gun, Physobj), not damage(Bullet, Physobj).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Gun.e',74).

 /*  l_int(holds(not(inside(Bullet,Gun)),Time_At),
         [ shootDamage(Agent,Gun,Physobj),
   	not(damage(Bullet,Physobj))
         ]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       inside(Bullet,Gun), 
%       not(
%          damage(Bullet,Physobj))), 
%    not(
%       shootDamage(Agent,Gun,Physobj))).
if inside(Bullet, Gun), not damage(Bullet, Physobj)then not shootDamage(Agent, Gun, Physobj).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Gun.e',74).

 /*  reactive_rule([ holds(inside(Bullet,Gun),Time_At7),
   		not(damage(Bullet,Physobj))
   	      ],
   	      [not(shootDamage(Agent,Gun,Physobj))]).
 */
 %  "% =================================".


% [agent,gun,bullet,physobj,time]
% HoldsAt(Inside(bullet,gun),time) &
% Happens(ShootDestroy(agent,gun,physobj),time) ->
% Happens(Destroy(bullet,physobj),time).
% '->'(
%    ','(
%       inside(Bullet,Gun), 
%       shootDestroy(Agent,Gun,Physobj)), 
%    destroy(Bullet,Physobj)).
destroy(Bullet, Physobj)if inside(Bullet, Gun), shootDestroy(Agent, Gun, Physobj).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Gun.e',79).

 /*  l_events(happens(destroy(Bullet,Physobj),
   		 Time_From,
   		 Time_Until),
   	 [ holds(inside(Bullet,Gun),Time_From),
   	   happens(shootDestroy(Agent,Gun,Physobj),
   		   Time_From,
   		   Time_Until)
   	 ]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       shootDestroy(Agent,Gun,Physobj), 
%       not(
%          destroy(Bullet,Physobj))), 
%    not(
%       inside(Bullet,Gun))).
not inside(Bullet, Gun)if shootDestroy(Agent, Gun, Physobj), not destroy(Bullet, Physobj).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Gun.e',79).

 /*  l_int(holds(not(inside(Bullet,Gun)),Time_At),
         [ happens(shootDestroy(Agent,Gun,Physobj),
   		Time_At,
   		Time_At),
   	not(destroy(Bullet,Physobj))
         ]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       inside(Bullet,Gun), 
%       not(
%          destroy(Bullet,Physobj))), 
%    not(
%       shootDestroy(Agent,Gun,Physobj))).
if inside(Bullet, Gun), not destroy(Bullet, Physobj)then not shootDestroy(Agent, Gun, Physobj).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Gun.e',79).

 /*  reactive_rule([ holds(inside(Bullet,Gun),Time_At8),
   		not(destroy(Bullet,Physobj))
   	      ],
   	      [not(shootDestroy(Agent,Gun,Physobj))]).
 */
 %  "% =================================".


%; End of file.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Gun.e',82).
% translate: ending  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/Gun.e.lps 
