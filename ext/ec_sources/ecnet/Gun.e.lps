:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/GSpace.e',70).
% From E: 
% 
% :-call_pel_directive(translate(unskipped,'/pack/logicmoo_ec/ext/ec_sources/ecnet/Gun.e.lps')).
:- call_pel_directive(translate(unskipped,
                                '/pack/logicmoo_ec/ext/ec_sources/ecnet/Gun.e.lps')).
:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(lps).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/GSpace.e',70).
% From E: 
% 
% :-call_pel_directive(translate(begining,'/pack/logicmoo_ec/ext/ec_sources/ecnet/Gun.e.lps')).
:- call_pel_directive(translate(begining,
                                '/pack/logicmoo_ec/ext/ec_sources/ecnet/Gun.e.lps')).
% Sat, 10 Oct 2020 15:31:38 GMT File: <stream>(0x559e4b1d9800)%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Gun.e',12).
% fluent Loaded(gun,bullet)
% From E: 
% 
% fluent(loaded(gun,bullet)).
mpred_prop(loaded(gun,bullet),fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Gun.e',12).
fluents([loaded/2]).

% noninertial Loaded
% From E: 
% 
% :-call_pel_directive(noninertial(loaded)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Gun.e',12).
:- call_pel_directive(noninertial(loaded)).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Gun.e',15).
% [gun,bullet,time]
% HoldsAt(Inside(bullet,gun),time) <->
% HoldsAt(Loaded(gun,bullet),time).
% From E: 
% 
% <->(
%    holds_at(inside(Bullet,Gun),Time), 
%    holds_at(loaded(Gun,Bullet),Time)).
 %   [Time].
if inside(Bullet, Gun)then loaded(Gun, Bullet).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Gun.e',15).

 /*  reactive_rule([inside(Bullet,Gun)],
   	      [loaded(Gun,Bullet)]).
 */
 %  "% =================================".
if loaded(Gun, Bullet)then inside(Bullet, Gun).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Gun.e',15).

 /*  reactive_rule([loaded(Gun,Bullet)],
   	      [inside(Bullet,Gun)]).
 */
 %  "% =================================".

% event Shoot(agent,gun,object)
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Gun.e',18).
% From E: 
% 
% event(shoot(agent,gun,object)).
events([shoot/3]).
mpred_prop(shoot(agent,gun,object),action).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Gun.e',18).
actions([shoot/3]).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Gun.e',21).
% event ShootInjure(agent,gun,agent)
% From E: 
% 
% event(shootInjure(agent,gun,agent)).
events([shootInjure/3]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Gun.e',21).
mpred_prop(shootInjure(agent,gun,agent),action).
actions([shootInjure/3]).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Gun.e',23).
% event ShootKill(agent,gun,agent)
% From E: 
% 
% event(shootKill(agent,gun,agent)).
events([shootKill/3]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Gun.e',23).
mpred_prop(shootKill(agent,gun,agent),action).
actions([shootKill/3]).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Gun.e',25).
% event ShootDamage(agent,gun,physobj)
% From E: 
% 
% event(shootDamage(agent,gun,physobj)).
events([shootDamage/3]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Gun.e',25).
mpred_prop(shootDamage(agent,gun,physobj),action).
actions([shootDamage/3]).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Gun.e',27).
% event ShootDestroy(agent,gun,physobj)
% From E: 
% 
% event(shootDestroy(agent,gun,physobj)).
events([shootDestroy/3]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Gun.e',27).
mpred_prop(shootDestroy(agent,gun,physobj),action).
actions([shootDestroy/3]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Gun.e',29).
% [agent,gun,bullet,object,time]
% HoldsAt(Inside(bullet,gun),time) ->
% Terminates(Shoot(agent,gun,object),
%            Inside(bullet,gun),
%            time).
% From E: 
% 
% '->'(
%    holds_at(inside(Bullet,Gun),Time), 
%    terminates_at(
%       shoot(Agent,Gun,Object), 
%       inside(Bullet,Gun), 
%       Time)).
 %   [Time].
shoot(Agent, Gun, Object)terminates inside(Bullet, Gun)if inside(Bullet, Gun).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Gun.e',29).

 /*  terminated(happens(shoot(Agent,Gun,Object),
   		   Time_From,
   		   Time_Until),
   	   inside(Bullet,Gun),
   	   [holds(inside(Bullet,Gun),Time_From)]).
 */
 %  "% =================================".


% [agent,gun,bullet,object,location1,location2,time]
% HoldsAt(Inside(bullet,gun),time) &
% HoldsAt(At(gun,location1),time) &
% location1 != location2 ->
% Terminates(Shoot(agent,gun,object),At(bullet,location2),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Gun.e',36).
% From E: 
% 
% '->'(
%    (holds_at(inside(Bullet,Gun),Time) , 
%      holds_at(at_loc(Gun,Location1),Time) , 
%     Location1\=Location2), 
%    terminates_at(
%       shoot(Agent,Gun,Object), 
%       at_loc(Bullet,Location2), 
%       Time)).
 %   [Time].
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Gun.e',36).
inside(Bullet, Gun), at_loc(Gun, Location1), Location1\=Location2 ->
    terminates(shoot(Agent, Gun, Object),
               at_loc(Bullet, Location2)).


% [agent,gun,bullet,object,location,time]
% HoldsAt(At(object,location),time) &
% HoldsAt(Inside(bullet,gun),time) ->
% Initiates(Shoot(agent,gun,object),At(bullet,location),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Gun.e',42).
% From E: 
% 
% '->'(
%    (holds_at(at_loc(Object,Location),Time) , 
%     holds_at(inside(Bullet,Gun),Time)), 
%    initiates_at(
%       shoot(Agent,Gun,Object), 
%       at_loc(Bullet,Location), 
%       Time)).
 %   [Time].
shoot(Agent, Gun, Object)initiates at_loc(Bullet, Location)if at_loc(Object, Location), inside(Bullet, Gun).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Gun.e',42).

 /*  initiated(happens(shoot(Agent,Gun,Object),
   		  Time_From,
   		  Time_Until),
   	  at_loc(Bullet,Location),
   	  [ holds(at_loc(Object,Location),Time_From),
   	    holds(inside(Bullet,Gun),Time_From)
   	  ]).
 */
 %  "% =================================".


% [agent,gun,object,time]
% Happens(Shoot(agent,gun,object),time) ->
% HoldsAt(Holding(agent,gun),time) &
% ({bullet} HoldsAt(Loaded(gun,bullet),time)) &
% ({location} HoldsAt(At(agent,location),time) &
%             HoldsAt(At(object,location),time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Gun.e',47).
% From E: 
% 
% '->'(
%    happens_at(shoot(Agent,Gun,Object),Time), 
%    (holds_at(holding(Agent,Gun),Time) , 
%      exists(
%         [Bullet], 
%         holds_at(loaded(Gun,Bullet),Time)) , 
%     exists(
%        [Location], 
%        (holds_at(at_loc(Agent,Location),Time) , 
%         holds_at(at_loc(Object,Location),Time))))).
 %   [Time].
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Gun.e',47).
shoot(Agent, Gun, Object) ->
    holding(Agent, Gun),
    exists([Bullet], loaded(Gun, Bullet)),
    exists([Location],
            (at_loc(Agent, Location), at_loc(Object, Location))).


% [agent1,gun,agent2,time]
% Happens(Shoot(agent1,gun,agent2),time) ->
% Happens(ShootInjure(agent1,gun,agent2),time) |
% Happens(ShootKill(agent1,gun,agent2),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Gun.e',54).
% From E: 
% 
% '->'(
%    happens_at(shoot(Agent1,Gun,Agent2),Time), 
%    (happens_at(shootInjure(Agent1,Gun,Agent2),Time) ; 
%     happens_at(shootKill(Agent1,Gun,Agent2),Time))).
 %   [Time].
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Gun.e',54).
shoot(Agent1, Gun, Agent2) ->
    false((not(shootInjure(Agent1, Gun, Agent2)), not(shootKill(Agent1, Gun, Agent2)))).


% [agent1,gun,bullet,agent2,time]
% HoldsAt(Inside(bullet,gun),time) &
% Happens(ShootKill(agent1,gun,agent2),time) ->
% Happens(Kill(bullet,agent2),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Gun.e',59).
% From E: 
% 
% '->'(
%    (holds_at(inside(Bullet,Gun),Time) , 
%     happens_at(shootKill(Agent1,Gun,Agent2),Time)), 
%    happens_at(kill(Bullet,Agent2),Time)).
 %   [Time].
kill(Bullet, Agent2)if inside(Bullet, Gun), shootKill(Agent1, Gun, Agent2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Gun.e',59).

 /*  l_events(happens(kill(Bullet,Agent2),
   		 Time_From,
   		 Time_From),
   	 [ holds(inside(Bullet,Gun),Time_From),
   	   shootKill(Agent1,Gun,Agent2)
   	 ]).
 */
 %  "% =================================".


% [agent1,gun,bullet,agent2,time]
% HoldsAt(Inside(bullet,gun),time) &
% Happens(ShootInjure(agent1,gun,agent2),time) ->
% Happens(Injure(bullet,agent2),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Gun.e',64).
% From E: 
% 
% '->'(
%    (holds_at(inside(Bullet,Gun),Time) , 
%     happens_at(shootInjure(Agent1,Gun,Agent2),Time)), 
%    happens_at(injure(Bullet,Agent2),Time)).
 %   [Time].
injure(Bullet, Agent2)if inside(Bullet, Gun), shootInjure(Agent1, Gun, Agent2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Gun.e',64).

 /*  l_events(happens(injure(Bullet,Agent2),
   		 Time_From,
   		 Time_From),
   	 [ holds(inside(Bullet,Gun),Time_From),
   	   shootInjure(Agent1,Gun,Agent2)
   	 ]).
 */
 %  "% =================================".


% [agent,gun,physobj,time]
% Happens(Shoot(agent,gun,physobj),time) ->
% Happens(ShootDamage(agent,gun,physobj),time) |
% Happens(ShootDestroy(agent,gun,physobj),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Gun.e',69).
% From E: 
% 
% '->'(
%    happens_at(shoot(Agent,Gun,Physobj),Time), 
%    (happens_at(shootDamage(Agent,Gun,Physobj),Time) ; 
%     happens_at(shootDestroy(Agent,Gun,Physobj),Time))).
 %   [Time].
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Gun.e',69).
shoot(Agent, Gun, Physobj) ->
    false((not(shootDamage(Agent, Gun, Physobj)), not(shootDestroy(Agent, Gun, Physobj)))).


% [agent,gun,bullet,physobj,time]
% HoldsAt(Inside(bullet,gun),time) &
% Happens(ShootDamage(agent,gun,physobj),time) ->
% Happens(Damage(bullet,physobj),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Gun.e',74).
% From E: 
% 
% '->'(
%    (holds_at(inside(Bullet,Gun),Time) , 
%     happens_at(shootDamage(Agent,Gun,Physobj),Time)), 
%    happens_at(damage(Bullet,Physobj),Time)).
 %   [Time].
damage(Bullet, Physobj)if inside(Bullet, Gun), shootDamage(Agent, Gun, Physobj).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Gun.e',74).

 /*  l_events(happens(damage(Bullet,Physobj),
   		 Time_From,
   		 Time_From),
   	 [ holds(inside(Bullet,Gun),Time_From),
   	   shootDamage(Agent,Gun,Physobj)
   	 ]).
 */
 %  "% =================================".


% [agent,gun,bullet,physobj,time]
% HoldsAt(Inside(bullet,gun),time) &
% Happens(ShootDestroy(agent,gun,physobj),time) ->
% Happens(Destroy(bullet,physobj),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Gun.e',79).
% From E: 
% 
% '->'(
%    (holds_at(inside(Bullet,Gun),Time) , 
%     happens_at(shootDestroy(Agent,Gun,Physobj),Time)), 
%    happens_at(destroy(Bullet,Physobj),Time)).
 %   [Time].
destroy(Bullet, Physobj)if inside(Bullet, Gun), shootDestroy(Agent, Gun, Physobj).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Gun.e',79).

 /*  l_events(happens(destroy(Bullet,Physobj),
   		 Time_From,
   		 Time_From),
   	 [ holds(inside(Bullet,Gun),Time_From),
   	   shootDestroy(Agent,Gun,Physobj)
   	 ]).
 */
 %  "% =================================".


%; End of file.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Gun.e',82).
% From E: 
% 
% :-call_pel_directive(translate(ending,'/pack/logicmoo_ec/ext/ec_sources/ecnet/Gun.e.lps')).
:- call_pel_directive(translate(ending,
                                '/pack/logicmoo_ec/ext/ec_sources/ecnet/Gun.e.lps')).
