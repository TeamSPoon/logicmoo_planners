:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',228).
% translate: unskipped  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e.lps 
:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(lps).
% translate: begining  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e.lps 
% Thu, 08 Oct 2020 21:37:20 GMT File: <stream>(0x55894c2e2a00)%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{Mueller:2004c,
%;   author = "Erik T. Mueller",
%;   year = "2004",
%;   title = "Understanding script-based stories using commonsense reasoning",
%;   journal = "Cognitive Systems Research",
%;   volume = "5",
%;   number = "4",
%;   pages = "307--340",
%; }
%;

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',22).
% option modeldiff on
:- if(is_e_toplevel).
:- set_ec_option(modeldiff, on).
:- endif.

% option renaming off
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',22).
:- if(is_e_toplevel).
:- set_ec_option(renaming, off).
:- endif.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',25).
% ignore Love, ThreatenedBy
% ignore(love).
ignore(love).
% ignore(threatenedBy).
ignore(threatenedBy).

% ignore LookOutOnto, Floor, BuildingOf, SkyOf, GroundOf
% ignore(lookOutOnto).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',25).
ignore(lookOutOnto).
% ignore(floor).
ignore(floor).
% ignore(buildingOf).
ignore(buildingOf).
% ignore(skyOf).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',25).
ignore(skyOf).
% ignore(groundOf).
ignore(groundOf).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',27).
% ignore Inside, PutInside, On, PlaceOn
% ignore(inside).
ignore(inside).
% ignore(putInside).
ignore(putInside).
% ignore(on).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',27).
ignore(on).
% ignore(placeOn).
ignore(placeOn).

% ignore Like, Happy, BecomeAngryAt
% ignore(like).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',27).
ignore(like).
% ignore(happy).
ignore(happy).
% ignore(becomeAngryAt).
ignore(becomeAngryAt).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',29).
% ignore Near, WalkFrom, WalkFromTo, RunFromTo
% ignore(near).
ignore(near).
% ignore(walkFrom).
ignore(walkFrom).
% ignore(walkFromTo).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',29).
ignore(walkFromTo).
% ignore(runFromTo).
ignore(runFromTo).

% ignore ActOnIntentionToWalkIn, IntentionToWalkIn, InvitedIn, InviteIn
% ignore(actOnIntentionToWalkIn).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',29).
ignore(actOnIntentionToWalkIn).
% ignore(intentionToWalkIn).
ignore(intentionToWalkIn).
% ignore(invitedIn).
ignore(invitedIn).
% ignore(inviteIn).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',29).
ignore(inviteIn).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',31).
% ignore TakeOffOf, TakeOutOf, LetGoOf
% ignore(takeOffOf).
ignore(takeOffOf).
% ignore(takeOutOf).
ignore(takeOutOf).
% ignore(letGoOf).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',31).
ignore(letGoOf).

% ignore Greet, SayGoodbye, Order, KnowOrder
% ignore(greet).
ignore(greet).
% ignore(sayGoodbye).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',31).
ignore(sayGoodbye).
% ignore(order).
ignore(order).
% ignore(knowOrder).
ignore(knowOrder).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',34).
% load foundations/Root.e
:- if(is_e_toplevel).
:- load_e_cond('foundations/Root.e', changed).
 %  load('/pack/logicmoo_ec/ext/ec_sources/foundations/Root.e',changed).
:- endif.

% load foundations/EC.e
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',34).
:- if(is_e_toplevel).
:- load_e_cond('foundations/EC.e', changed).
 %  load('/pack/logicmoo_ec/ext/ec_sources/foundations/EC.e',changed).
:- endif.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',36).
% load answers/Mueller2003/Ontology.e
:- if(is_e_toplevel).
:- load_e_cond('answers/Mueller2003/Ontology.e', changed).
 %  load('/pack/logicmoo_ec/ext/ec_sources/ecnet/Ontology.e',changed).
:- endif.

% load answers/Mueller2004c/OTSpaceM.e
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',36).
:- if(is_e_toplevel).
:- load_e_cond('answers/Mueller2004c/OTSpaceM.e', changed).
 %  load('/pack/logicmoo_ec/ext/ec_sources/ecnet/OTSpace.e',changed).
:- endif.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',38).
% load answers/Mueller2004c/RTSpaceM.e
:- if(is_e_toplevel).
:- load_e_cond('answers/Mueller2004c/RTSpaceM.e', changed).
 %  load('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',changed).
:- endif.

% load answers/Mueller2004c/HandTo.e
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',38).
:- if(is_e_toplevel).
:- load_e_cond('answers/Mueller2004c/HandTo.e', changed).
 %  load('/pack/logicmoo_ec/ext/ec_sources/ecnet/HandTo.e',changed).
:- endif.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',40).
% load answers/Mueller2004c/Money.e
:- if(is_e_toplevel).
:- load_e_cond('answers/Mueller2004c/Money.e', changed).
 %  load('/pack/logicmoo_ec/ext/ec_sources/ecnet/Money.e',changed).
:- endif.

% load answers/Mueller2003/Sleep.e
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',40).
:- if(is_e_toplevel).
:- load_e_cond('answers/Mueller2003/Sleep.e', changed).
 %  load('/pack/logicmoo_ec/ext/ec_sources/ecnet/Sleep.e',changed).
:- endif.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',42).
% load answers/Mueller2003/SpeechAct.e
:- if(is_e_toplevel).
:- load_e_cond('answers/Mueller2003/SpeechAct.e', changed).
 %  load('/pack/logicmoo_ec/ext/ec_sources/ecnet/SpeechAct.e',changed).
:- endif.

% load answers/Mueller2004c/Vehicle.e
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',42).
:- if(is_e_toplevel).
:- load_e_cond('answers/Mueller2004c/Vehicle.e', changed).
 %  load('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',changed).
:- endif.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',45).
% outside NearStation1
% t(outside,nearStation1).
outside(nearStation1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',47).
% street Street1
% t(street,street1).
street(street1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',49).
% outside Station1
% t(outside,station1).
outside(station1).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',51).
% Side1(Street1)=NearStation1.
% side1Pred(street1,nearStation1).
side1Pred(street1,nearStation1).


% Side2(Street1)=Station1.
% side2Pred(street1,station1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',51).
side2Pred(street1,station1).

% room WaitingRoom1
% t(room,waitingRoom1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',53).
room(waitingRoom1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',56).
% door Door1
% t(door,door1).
door(door1).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',58).
% Side1(Door1)=Station1.
% side1Pred(door1,station1).
side1Pred(door1,station1).


% Side2(Door1)=WaitingRoom1.
% side2Pred(door1,waitingRoom1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',58).
side2Pred(door1,waitingRoom1).

% outside BeforeStation1
% t(outside,beforeStation1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',60).
outside(beforeStation1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',63).
% track TrackToStation1
% t(track,trackToStation1).
track(trackToStation1).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',65).
% Side1(TrackToStation1)=BeforeStation1.
% side1Pred(trackToStation1,beforeStation1).
side1Pred(trackToStation1,beforeStation1).


% Side2(TrackToStation1)=Station1.
% side2Pred(trackToStation1,station1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',65).
side2Pred(trackToStation1,station1).

% outside BetweenStation1And2
% t(outside,betweenStation1And2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',67).
outside(betweenStation1And2).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',70).
% track TrackToBetweenStation1And2
% t(track,trackToBetweenStation1And2).
track(trackToBetweenStation1And2).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',72).
% Side1(TrackToBetweenStation1And2)=Station1.
% side1Pred(trackToBetweenStation1And2,station1).
side1Pred(trackToBetweenStation1And2,station1).


% Side2(TrackToBetweenStation1And2)=BetweenStation1And2.
% side2Pred(trackToBetweenStation1And2,betweenStation1And2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',72).
side2Pred(trackToBetweenStation1And2,betweenStation1And2).

% outside Station2
% t(outside,station2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',74).
outside(station2).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',76).
% track TrackToStation2
% t(track,trackToStation2).
track(trackToStation2).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',78).
% Side1(TrackToStation2)=BetweenStation1And2.
% side1Pred(trackToStation2,betweenStation1And2).
side1Pred(trackToStation2,betweenStation1And2).


% Side2(TrackToStation2)=Station2.
% side2Pred(trackToStation2,station2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',78).
side2Pred(trackToStation2,station2).

% outside NearStation2
% t(outside,nearStation2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',80).
outside(nearStation2).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',83).
% street Street2
% t(street,street2).
street(street2).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',85).
% Side1(Street2)=Station2.
% side1Pred(street2,station2).
side1Pred(street2,station2).


% Side2(Street2)=NearStation2.
% side2Pred(street2,nearStation2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',85).
side2Pred(street2,nearStation2).

% agent Passenger1
% t(agent,passenger1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',87).
agent(passenger1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',90).
% agent Conductor1
% t(agent,conductor1).
agent(conductor1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',92).
% chair TrainSeat1
% t(chair,trainSeat1).
chair(trainSeat1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',94).
% train Train1
% t(train,train1).
train(train1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',96).
% chair WaitingRoomSeat1
% t(chair,waitingRoomSeat1).
chair(waitingRoomSeat1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',98).
% ticketagent TicketAgent1
% t(ticketagent,ticketAgent1).
ticketagent(ticketAgent1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',100).
% ticket Ticket1
% t(ticket,ticket1).
ticket(ticket1).
%; prune

% sort requesta, requestb, requestc
% sort(requesta).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',102).
sort(requesta).
% sort(requestb).
sort(requestb).
% sort(requestc).
sort(requestc).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',104).
% event! Request(requesta,requestb,requestc)
% event(
%    request(requesta,requestb,requestc)).
events([request/3]).
% mpred_prop(
%    request(requesta,requestb,requestc), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',104).
mpred_prop(request(requesta,requestb,requestc),event).

% fluent! KnowRequest(requestb,requesta,requestc)
% fluent(
%    knowRequest(requestb,requesta,requestc)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',104).
fluents([knowRequest/3]).
% mpred_prop(
%    knowRequest(requestb,requesta,requestc), 
%    fluent).
mpred_prop(knowRequest(requestb,requesta,requestc),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',106).
% requesta! Passenger1
% t(requesta,passenger1).
requesta(passenger1).

% requestb! TicketAgent1
% t(requestb,ticketAgent1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',106).
requestb(ticketAgent1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',108).
% requestc! Ticket1
% t(requestc,ticket1).
requestc(ticket1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',110).
% sort holda, holdb
% sort(holda).
sort(holda).
% sort(holdb).
sort(holdb).

% event! TakeOffOf(holda,holdb,holdc)
% event(
%    takeOffOf(holda,holdb,holdc)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',110).
events([takeOffOf/3]).
% mpred_prop(
%    takeOffOf(holda,holdb,holdc), 
%    event).
mpred_prop(takeOffOf(holda,holdb,holdc),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',112).
% event! PickUp(holda,holdb)
% event(
%    pickUp(holda,holdb)).
events([pickUp/2]).
% mpred_prop(
%    pickUp(holda,holdb), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',112).
mpred_prop(pickUp(holda,holdb),event).

% event! LetGoOf(holda,holdb)
% event(
%    letGoOf(holda,holdb)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',112).
events([letGoOf/2]).
% mpred_prop(
%    letGoOf(holda,holdb), 
%    event).
mpred_prop(letGoOf(holda,holdb),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',114).
% event! Hold(holda,holdb)
% event(
%    hold(holda,holdb)).
events([hold/2]).
% mpred_prop(
%    hold(holda,holdb), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',114).
mpred_prop(hold(holda,holdb),event).

% fluent! Holding(holda,holdb)
% fluent(
%    holding(holda,holdb)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',114).
fluents([holding/2]).
% mpred_prop(
%    holding(holda,holdb), 
%    fluent).
mpred_prop(holding(holda,holdb),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',116).
% event! HandTo(holda,holda,holdb)
% event(
%    handTo(holda,holda,holdb)).
events([handTo/3]).
% mpred_prop(
%    handTo(holda,holda,holdb), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',116).
mpred_prop(handTo(holda,holda,holdb),event).

% holda! TicketAgent1, Passenger1, Conductor1
% t(holda,ticketAgent1).
holda(ticketAgent1).
% t(holda,passenger1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',116).
holda(passenger1).
% t(holda,conductor1).
holda(conductor1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',118).
% holdb! Ticket1
% t(holdb,ticket1).
holdb(ticket1).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',120).
% sort sita, sitb
% sort(sita).
sort(sita).
% sort(sitb).
sort(sitb).

% event! LieOn(sita,sitb)
% event(
%    lieOn(sita,sitb)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',120).
events([lieOn/2]).
% mpred_prop(
%    lieOn(sita,sitb), 
%    event).
mpred_prop(lieOn(sita,sitb),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',122).
% event! SitOn(sita,sitb)
% event(
%    sitOn(sita,sitb)).
events([sitOn/2]).
% mpred_prop(
%    sitOn(sita,sitb), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',122).
mpred_prop(sitOn(sita,sitb),event).

% event! RiseFrom(sita,sitb)
% event(
%    riseFrom(sita,sitb)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',122).
events([riseFrom/2]).
% mpred_prop(
%    riseFrom(sita,sitb), 
%    event).
mpred_prop(riseFrom(sita,sitb),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',124).
% fluent! LyingOn(sita,sitb)
% fluent(
%    lyingOn(sita,sitb)).
fluents([lyingOn/2]).
% mpred_prop(
%    lyingOn(sita,sitb), 
%    fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',124).
mpred_prop(lyingOn(sita,sitb),fluent).

% fluent! SittingOn(sita,sitb)
% fluent(
%    sittingOn(sita,sitb)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',124).
fluents([sittingOn/2]).
% mpred_prop(
%    sittingOn(sita,sitb), 
%    fluent).
mpred_prop(sittingOn(sita,sitb),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',126).
% sita! Passenger1
% t(sita,passenger1).
sita(passenger1).

% sitb! WaitingRoomSeat1, TrainSeat1
% t(sitb,waitingRoomSeat1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',126).
sitb(waitingRoomSeat1).
% t(sitb,trainSeat1).
sitb(trainSeat1).
%; release

% option manualrelease on
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',129).
:- if(is_e_toplevel).
:- set_ec_option(manualrelease, on).
:- endif.


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',129).
% [ball, diameter]
 % !ReleasedAt(Diameter(ball, diameter), 0).
% not(
%    releasedAt(
%       diameter(Ball,Diameter), 
%       0)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',131).
not(releasedAt(diameter(Ball,Diameter),0)).


% [agent, object]
 % !ReleasedAt(Holding(agent, object), 0).
% not(
%    releasedAt(
%       holding(Agent,Object), 
%       0)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',131).
not(releasedAt(holding(Agent,Object),0)).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',133).
% [door]
 % !ReleasedAt(DoorUnlocked(door), 0).
% not(
%    releasedAt(
%       doorUnlocked(Door), 
%       0)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',133).
not(releasedAt(doorUnlocked(Door),0)).


% [door]
 % !ReleasedAt(DoorIsOpen(door), 0).
% not(
%    releasedAt(
%       doorIsOpen(Door), 
%       0)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',133).
not(releasedAt(doorIsOpen(Door),0)).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',135).
% [agent]
 % !ReleasedAt(Sleep0(agent), 0).
% not(
%    releasedAt(
%       sleep0(Agent), 
%       0)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',135).
not(releasedAt(sleep0(Agent),0)).


% [agent]
 % !ReleasedAt(Sleep1(agent), 0).
% not(
%    releasedAt(
%       sleep1(Agent), 
%       0)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',135).
not(releasedAt(sleep1(Agent),0)).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',137).
% [agent]
 % !ReleasedAt(Sleep2(agent), 0).
% not(
%    releasedAt(
%       sleep2(Agent), 
%       0)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',137).
not(releasedAt(sleep2(Agent),0)).


% [agent]
 % !ReleasedAt(Sleep3(agent), 0).
% not(
%    releasedAt(
%       sleep3(Agent), 
%       0)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',137).
not(releasedAt(sleep3(Agent),0)).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',139).
% [agent]
 % !ReleasedAt(Sleep4(agent), 0).
% not(
%    releasedAt(
%       sleep4(Agent), 
%       0)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',139).
not(releasedAt(sleep4(Agent),0)).


% [agent]
 % !ReleasedAt(Sleep5(agent), 0).
% not(
%    releasedAt(
%       sleep5(Agent), 
%       0)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',139).
not(releasedAt(sleep5(Agent),0)).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',141).
% [agent]
 % !ReleasedAt(Sleep6(agent), 0).
% not(
%    releasedAt(
%       sleep6(Agent), 
%       0)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',141).
not(releasedAt(sleep6(Agent),0)).


% [agent, physobj]
 % !ReleasedAt(LyingOn(agent, physobj), 0).
% not(
%    releasedAt(
%       lyingOn(Agent,Physobj), 
%       0)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',141).
not(releasedAt(lyingOn(Agent,Physobj),0)).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',143).
% [agent, physobj]
 % !ReleasedAt(SittingOn(agent, physobj), 0).
% not(
%    releasedAt(
%       sittingOn(Agent,Physobj), 
%       0)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',143).
not(releasedAt(sittingOn(Agent,Physobj),0)).


% [agent]
 % !ReleasedAt(Standing(agent), 0).
% not(
%    releasedAt(
%       standing(Agent), 
%       0)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',143).
not(releasedAt(standing(Agent),0)).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',145).
% [agent]
 % !ReleasedAt(Dressed(agent), 0).
% not(
%    releasedAt(
%       dressed(Agent), 
%       0)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',145).
not(releasedAt(dressed(Agent),0)).


% [agent1, agent2, physobj]
 % !ReleasedAt(KnowOrder(agent1, agent2, physobj), 0).
% not(
%    releasedAt(
%       knowOrder(Agent1,Agent2,Physobj), 
%       0)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',145).
not(releasedAt(knowOrder(Agent1,Agent2,Physobj),0)).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',147).
% [agent1, agent2, physobj]
 % !ReleasedAt(KnowRequest(agent1, agent2, physobj), 0).
% not(
%    releasedAt(
%       knowRequest(Agent1,Agent2,Physobj), 
%       0)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',147).
not(releasedAt(knowRequest(Agent1,Agent2,Physobj),0)).


% [object, vehicleon]
 % !ReleasedAt(OnVehicle(object, vehicleon), 0).
% not(
%    releasedAt(
%       onVehicle(Object,Vehicleon), 
%       0)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',147).
not(releasedAt(onVehicle(Object,Vehicleon),0)).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',149).
% [ticketagent]
 % !ReleasedAt(BeTicketAgent0(ticketagent), 0).
% not(
%    releasedAt(
%       beTicketAgent0(Ticketagent), 
%       0)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',149).
not(releasedAt(beTicketAgent0(Ticketagent),0)).


% [ticketagent]
 % !ReleasedAt(BeTicketAgent1(ticketagent), 0).
% not(
%    releasedAt(
%       beTicketAgent1(Ticketagent), 
%       0)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',149).
not(releasedAt(beTicketAgent1(Ticketagent),0)).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',151).
% [ticketagent]
 % !ReleasedAt(BeTicketAgent2(ticketagent), 0).
% not(
%    releasedAt(
%       beTicketAgent2(Ticketagent), 
%       0)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',151).
not(releasedAt(beTicketAgent2(Ticketagent),0)).


%; special cases
% [location]
 % ReleasedAt(At(TrainSeat1,location),0).
% releasedAt(
%    at(trainSeat1,Location), 
%    0).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',153).
releasedAt(loc_at(trainSeat1,Location),0).


% [location]
 % ReleasedAt(At(Conductor1,location),0).
% releasedAt(
%    at(conductor1,Location), 
%    0).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',153).
releasedAt(loc_at(conductor1,Location),0).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',155).
% [object, location]
% object!=% TrainSeat1 & object!=Conductor1 ->
% !ReleasedAt(At(object, location), 0).
% '->'(
%    ','(
%       diff(Object,trainSeat1), 
%       diff(Object,conductor1)), 
%    not(
%       releasedAt(
%          at(Object,Location), 
%          0))).
if diff(Object, trainSeat1), diff(Object, conductor1)then not releasedAt(loc_at(Object, Location), 0).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',155).

 /*  reactive_rule([ diff(Object,trainSeat1),
   		diff(Object,conductor1)
   	      ],
   	      [not(releasedAt(loc_at(Object,Location),0))]).
 */
 %  "% =================================".


%; initial state
% [agent,object]
 % !HoldsAt(Holding(agent,object),0).
% initially(
%    neg(
%       holding(Agent,Object))).
initially not holding(Agent, Object).
 %  initial_state([not(holding(Agent,Object))]).
 %  "% =================================".


% [agent,physobj]
 % !HoldsAt(SittingOn(agent,physobj),0).
% initially(
%    neg(
%       sittingOn(Agent,Physobj))).
initially not sittingOn(Agent, Physobj).
 %  initial_state([not(sittingOn(Agent,Physobj))]).
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',162).
% [agent,physobj]
 % !HoldsAt(LyingOn(agent,physobj),0).
% initially(
%    neg(
%       lyingOn(Agent,Physobj))).
initially not lyingOn(Agent, Physobj).
 %  initial_state([not(lyingOn(Agent,Physobj))]).
 %  "% =================================".


% [physobj1,physobj2]
% !HoldsAt(On(physobj1, physobj2),0).
% initially(
%    neg(
%       on(Physobj1,Physobj2))).
initially not on(Physobj1, Physobj2).
 %  initial_state([not(on(Physobj1,Physobj2))]).
 %  "% =================================".


% [agent]
 % HoldsAt(Dressed(agent),0).
% initially(
%    dressed(Agent)).
initially dressed(Agent).
 %  initial_state([dressed(Agent)]).
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',166).
% [agent]
 % HoldsAt(Awake(agent),0).
% initially(
%    awake(Agent)).
initially awake(Agent).
 %  initial_state([awake(Agent)]).
 %  "% =================================".


% [agent]
 % HoldsAt(Sleep3(agent),0).
% initially(
%    sleep3(Agent)).
initially sleep3(Agent).
 %  initial_state([sleep3(Agent)]).
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',168).
% [agent]
 % HoldsAt(Standing(agent),0).
% initially(
%    standing(Agent)).
initially standing(Agent).
 %  initial_state([standing(Agent)]).
 %  "% =================================".


% HoldsAt(DoorUnlocked(Door1),0).
% initially(
%    doorUnlocked(door1)).
initially doorUnlocked(door1).
 %  initial_state([doorUnlocked(door1)]).
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',170).
% HoldsAt(DoorIsOpen(Door1),0).
% initially(
%    doorIsOpen(door1)).
initially doorIsOpen(door1).
 %  initial_state([doorIsOpen(door1)]).
 %  "% =================================".


% HoldsAt(At(WaitingRoomSeat1,WaitingRoom1),0).
% initially(
%    at(waitingRoomSeat1,waitingRoom1)).
initially loc_at(waitingRoomSeat1, waitingRoom1).
 %  initial_state([loc_at(waitingRoomSeat1,waitingRoom1)]).
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',172).
% HoldsAt(At(Passenger1,NearStation1),0).
% initially(
%    at(passenger1,nearStation1)).
initially loc_at(passenger1, nearStation1).
 %  initial_state([loc_at(passenger1,nearStation1)]).
 %  "% =================================".


% HoldsAt(At(Train1,BeforeStation1),0).
% initially(
%    at(train1,beforeStation1)).
initially loc_at(train1, beforeStation1).
 %  initial_state([loc_at(train1,beforeStation1)]).
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',174).
% HoldsAt(OnVehicle(TrainSeat1,Train1),0).
% initially(
%    onVehicle(trainSeat1,train1)).
initially onVehicle(trainSeat1, train1).
 %  initial_state([onVehicle(trainSeat1,train1)]).
 %  "% =================================".


% HoldsAt(OnVehicle(Conductor1,Train1),0).
% initially(
%    onVehicle(conductor1,train1)).
initially onVehicle(conductor1, train1).
 %  initial_state([onVehicle(conductor1,train1)]).
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',176).
% [object]
% object!=% TrainSeat1 & object!=Conductor1 ->
% !HoldsAt(OnVehicle(object,Train1),0).
% '->'(
%    ','(
%       diff(Object,trainSeat1), 
%       diff(Object,conductor1)), 
%    initially(
%       neg(
%          onVehicle(Object,train1)))).
if diff(Object, trainSeat1), diff(Object, conductor1)then initially not onVehicle(Object, train1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',176).

 /*  reactive_rule([ diff(Object,trainSeat1),
   		diff(Object,conductor1)
   	      ],
   	      [initially(not(onVehicle(Object,train1)))]).
 */
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',179).
% HoldsAt(At(Ticket1,WaitingRoom1),0).
% initially(
%    at(ticket1,waitingRoom1)).
initially loc_at(ticket1, waitingRoom1).
 %  initial_state([loc_at(ticket1,waitingRoom1)]).
 %  "% =================================".


% HoldsAt(At(TicketAgent1,WaitingRoom1),0).
% initially(
%    at(ticketAgent1,waitingRoom1)).
initially loc_at(ticketAgent1, waitingRoom1).
 %  initial_state([loc_at(ticketAgent1,waitingRoom1)]).
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',181).
% HoldsAt(BeTicketAgent0(TicketAgent1),0).
% initially(
%    beTicketAgent0(ticketAgent1)).
initially beTicketAgent0(ticketAgent1).
 %  initial_state([beTicketAgent0(ticketAgent1)]).
 %  "% =================================".


% [agent1,agent2,physobj]
 % !HoldsAt(KnowOrder(agent1,agent2,physobj),0).
% initially(
%    neg(
%       knowOrder(Agent1,Agent2,Physobj))).
initially not knowOrder(Agent1, Agent2, Physobj).
 %  initial_state([not(knowOrder(Agent1,Agent2,Physobj))]).
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',183).
% [agent1,agent2,physobj]
 % !HoldsAt(KnowRequest(agent1,agent2,physobj),0).
% initially(
%    neg(
%       knowRequest(Agent1,Agent2,Physobj))).
initially not knowRequest(Agent1, Agent2, Physobj).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',183).

 /*  initial_state([ not(knowRequest(Agent1,
   				Agent2,
   				Physobj))
   	      ]).
 */
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',185).
%; narrative


% Happens(WalkStreet12(Passenger1,Street1),0).
% happens(
%    walkStreet12(passenger1,street1), 
%    start).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',185).
observe(at(walkStreet12(passenger1,street1),start)).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',187).
% Happens(WalkThroughDoor12(Passenger1,Door1),1).
% happens(
%    walkThroughDoor12(passenger1,door1), 
%    start+1).
observe walkThroughDoor12(passenger1, door1)at start+1.
 %  observe([walkThroughDoor12(passenger1,door1)],start+1).
 %  "% =================================".


% Happens(Request(Passenger1,TicketAgent1,Ticket1),2).
% happens(
%    request(passenger1,ticketAgent1,ticket1), 
%    start+2).
observe request(passenger1, ticketAgent1, ticket1)at start+2.
 %  observe([request(passenger1,ticketAgent1,ticket1)],start+2).
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',189).
% Happens(Pay(Passenger1,TicketAgent1),3).
% happens(
%    pay(passenger1,ticketAgent1), 
%    start+3).
observe pay(passenger1, ticketAgent1)at start+3.
 %  observe([pay(passenger1,ticketAgent1)],start+3).
 %  "% =================================".


%;TRIGGERED Happens(PickUp(TicketAgent1,Ticket1),3).
%;TRIGGERED Happens(HandTo(TicketAgent1,Passenger1,Ticket1),4).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',192).
% Happens(SitOn(Passenger1,WaitingRoomSeat1),5).
% happens(
%    sitOn(passenger1,waitingRoomSeat1), 
%    start+5).
observe sitOn(passenger1, waitingRoomSeat1)at start+5.
 %  observe([sitOn(passenger1,waitingRoomSeat1)],start+5).
 %  "% =================================".


% Happens(RideTrack12(Train1,TrackToStation1),6).
% happens(
%    rideTrack12(train1,trackToStation1), 
%    start+6).
observe rideTrack12(train1, trackToStation1)at start+6.
 %  observe([rideTrack12(train1,trackToStation1)],start+6).
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',194).
% Happens(RiseFrom(Passenger1,WaitingRoomSeat1),7).
% happens(
%    riseFrom(passenger1,waitingRoomSeat1), 
%    start+7).
observe riseFrom(passenger1, waitingRoomSeat1)at start+7.
 %  observe([riseFrom(passenger1,waitingRoomSeat1)],start+7).
 %  "% =================================".


% Happens(WalkThroughDoor21(Passenger1,Door1),8).
% happens(
%    walkThroughDoor21(passenger1,door1), 
%    start+8).
observe walkThroughDoor21(passenger1, door1)at start+8.
 %  observe([walkThroughDoor21(passenger1,door1)],start+8).
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',196).
% Happens(GetOnVehicle(Passenger1,Train1),9).
% happens(
%    getOnVehicle(passenger1,train1), 
%    start+9).
observe getOnVehicle(passenger1, train1)at start+9.
 %  observe([getOnVehicle(passenger1,train1)],start+9).
 %  "% =================================".


% Happens(SitOn(Passenger1,TrainSeat1),10).
% happens(
%    sitOn(passenger1,trainSeat1), 
%    start+10).
observe sitOn(passenger1, trainSeat1)at start+10.
 %  observe([sitOn(passenger1,trainSeat1)],start+10).
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',198).
% Happens(RideTrack12(Train1,TrackToBetweenStation1And2),11).
% happens(
%    rideTrack12(train1,trackToBetweenStation1And2), 
%    start+11).
observe rideTrack12(train1, trackToBetweenStation1And2)at start+11.
 %  observe([rideTrack12(train1,trackToBetweenStation1And2)],start+11).
 %  "% =================================".


% Happens(HandTo(Passenger1,Conductor1,Ticket1),12).
% happens(
%    handTo(passenger1,conductor1,ticket1), 
%    start+12).
observe handTo(passenger1, conductor1, ticket1)at start+12.
 %  observe([handTo(passenger1,conductor1,ticket1)],start+12).
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',200).
%;OR PAY


% Happens(RideTrack12(Train1,TrackToStation2),13).
% happens(
%    rideTrack12(train1,trackToStation2), 
%    start+13).
observe rideTrack12(train1, trackToStation2)at start+13.
 %  observe([rideTrack12(train1,trackToStation2)],start+13).
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',202).
% Happens(RiseFrom(Passenger1,TrainSeat1),14).
% happens(
%    riseFrom(passenger1,trainSeat1), 
%    start+14).
observe riseFrom(passenger1, trainSeat1)at start+14.
 %  observe([riseFrom(passenger1,trainSeat1)],start+14).
 %  "% =================================".


% Happens(GetOffVehicle(Passenger1,Train1),15).
% happens(
%    getOffVehicle(passenger1,train1), 
%    start+15).
observe getOffVehicle(passenger1, train1)at start+15.
 %  observe([getOffVehicle(passenger1,train1)],start+15).
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',204).
% Happens(WalkStreet12(Passenger1,Street2),16).
% happens(
%    walkStreet12(passenger1,street2), 
%    start+16).
observe walkStreet12(passenger1, street2)at start+16.
 %  observe([walkStreet12(passenger1,street2)],start+16).
 %  "% =================================".

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',206).
% range time 0 17
% range(time,0,17).
range(time,0,17).

% range offset 0 0
% range(offset,0,0).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',206).
range(offset,0,0).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',208).
% range diameter 0 0
% range(diameter,0,0).
range(diameter,0,0).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e',210).
% completion Happens
% completion(happens).
completion(happens).
%; End of file.
% translate: ending  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/TakingATrain.e.lps 
