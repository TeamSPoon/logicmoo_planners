:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(pfc).
% Wed, 01 Apr 2020 20:01:32 GMT
% From ../ecnet/Book.pel:4
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e',183).

 /*  loading(load_e_pl,
   	'/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Book.e').
 */
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; Book: book (a sort of device)
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Book.e:13
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Book.e',14).
% sort page: integer
==> subsort(page,integer).
%; agent opens book to page.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Book.e:16
% event BookOpenTo(agent,book,page)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Book.e',16).
event(bookOpenTo(agent,book,page)).
==> mpred_prop(bookOpenTo(agent,book,page),event).
==> meta_argtypes(bookOpenTo(agent,book,page)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Book.e:18
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Book.e',19).
%; agent closes book.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Book.e:19
% event BookClose(agent,book)
event(bookClose(agent,book)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Book.e',19).
==> mpred_prop(bookClose(agent,book),event).
==> meta_argtypes(bookClose(agent,book)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Book.e:21
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Book.e',22).
%; book is open to page.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Book.e:22
% fluent BookIsOpenTo(book,page)
fluent(bookIsOpenTo(book,page)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Book.e',22).
==> mpred_prop(bookIsOpenTo(book,page),fluent).
==> meta_argtypes(bookIsOpenTo(book,page)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Book.e:24
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Book.e',25).
% fluent BookClosed(book)
fluent(bookClosed(book)).
==> mpred_prop(bookClosed(book),fluent).
==> meta_argtypes(bookClosed(book)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Book.e:25
% noninertial BookClosed
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Book.e',25).
==> noninertial(bookClosed).
%; agent turns page of book to page.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Book.e:28
% event BookTurnPageTo(agent,book,page)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Book.e',28).
event(bookTurnPageTo(agent,book,page)).
==> mpred_prop(bookTurnPageTo(agent,book,page),event).
==> meta_argtypes(bookTurnPageTo(agent,book,page)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Book.e:30
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Book.e',31).
% [book,page1,page2,time]
% HoldsAt(BookIsOpenTo(book,page1),time) &
% HoldsAt(BookIsOpenTo(book,page2),time) ->
% page1=page2.
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Book.e:33
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Book.e',31).

 /*  holds_at(bookIsOpenTo(Book, Page1), Time), holds_at(bookIsOpenTo(Book, Page2), Time) ->
       equals(Page1, Page2).
 */

 /*  not(holds_at(bookIsOpenTo(Book, Page1), Time)) :-
       holds_at(bookIsOpenTo(Book, Page2), Time),
       not(equals(Page1, Page2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Book.e',31).

 /*  [holds_at(bookIsOpenTo(Book, Page2), Time), not(equals(Page1, Page2))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(bookIsOpenTo(Book, Page1)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Book.e',31).
axiom(holds_at(neg(bookIsOpenTo(Book, Page1)), Time),
   
    [ holds_at(bookIsOpenTo(Book, Page2), Time),
      not(equals(Page1, Page2))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Book.e',31).

 /*  not(holds_at(bookIsOpenTo(Book, Page2), Time)) :-
       holds_at(bookIsOpenTo(Book, Page1), Time),
       not(equals(Page1, Page2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Book.e',31).

 /*  [holds_at(bookIsOpenTo(Book, Page1), Time), not(equals(Page1, Page2))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(bookIsOpenTo(Book, Page2)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Book.e',31).
axiom(holds_at(neg(bookIsOpenTo(Book, Page2)), Time),
   
    [ holds_at(bookIsOpenTo(Book, Page1), Time),
      not(equals(Page2, Page1))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Book.e:35
% [book,time]
% HoldsAt(BookClosed(book),time) <->
% !{page} HoldsAt(BookIsOpenTo(book,page),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Book.e:37

 /*  holds_at(bookClosed(Book), Time) <->
       not(exists([Page],
                  holds_at(bookIsOpenTo(Book, Page), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Book.e',37).

 /*  [holds_at, bookClosed] <->
       [not, exists, holds_at, bookIsOpenTo].
 */

 /*  holds_at(bookClosed(Book), Time) ->
       not(exists([Page],
                  holds_at(bookIsOpenTo(Book, Page), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Book.e',37).

 /*  not(holds_at(bookIsOpenTo(Book, Page), Time)) :-
       holds_at(bookClosed(Book), Time).
 */

 /*  [holds_at(bookClosed(Book), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(bookIsOpenTo(Book, Page)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Book.e',37).
axiom(holds_at(neg(bookIsOpenTo(Book, Page)), Time),
    [holds_at(bookClosed(Book), Time)]).

 /*  not(holds_at(bookClosed(Book), Time)) :-
       holds_at(bookIsOpenTo(Book, Page), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Book.e',37).

 /*  [holds_at(bookIsOpenTo(Book, Page), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(bookClosed(Book)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Book.e',37).
axiom(holds_at(neg(bookClosed(Book)), Time),
    [holds_at(bookIsOpenTo(Book, Page), Time)]).

 /*  not(exists([Page], holds_at(bookIsOpenTo(Book, Page), Time))) ->
       holds_at(bookClosed(Book), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Book.e',37).

 /*  holds_at(bookClosed(Book), Time) :-
       not(holds_at(bookIsOpenTo(Book, Page), Time)).
 */

 /*  [holds_at(neg(bookIsOpenTo(Book, Page)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(bookClosed(Book), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Book.e',37).
axiom(holds_at(bookClosed(Book), Time),
    [holds_at(neg(bookIsOpenTo(Book, Page)), Time)]).

 /*  holds_at(bookIsOpenTo(Book, Page), Time) :-
       not(holds_at(bookClosed(Book), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Book.e',37).

 /*  [holds_at(neg(bookClosed(Book)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(bookIsOpenTo(Book, Page), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Book.e',37).
axiom(holds_at(bookIsOpenTo(Book, Page), Time),
    [holds_at(neg(bookClosed(Book)), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Book.e:39
%; A precondition axiom states that
%; for an agent to open a book to a page,
%; the agent must be awake,
%; the book must be closed, and
%; the agent must be holding the book.
% [agent,book,page,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Book.e:45
% Happens(BookOpenTo(agent,book,page),time) ->
% HoldsAt(Awake(agent),time) &
% HoldsAt(BookClosed(book),time) &
% HoldsAt(Holding(agent,book),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Book.e:48
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Book.e',45).

 /*  happens(bookOpenTo(Agent, Book, Page), Time) ->
       holds_at(awake(Agent), Time),
       holds_at(bookClosed(Book), Time),
       holds_at(holding(Agent, Book), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Book.e',45).

 /*  not(happens(bookOpenTo(Agent, Book, Page), Time)) :-
       (   not(holds_at(awake(Agent), Time))
       ;   not(holds_at(bookClosed(Book), Time))
       ;   not(holds_at(holding(Agent, Book), Time))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Book.e',45).

 /*  [(holds_at(neg(awake(Agent)), Time);holds_at(neg(bookClosed(Book)), Time);holds_at(neg(holding(Agent, Book)), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(bookOpenTo(Agent, Book, Page), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Book.e',45).
axiom(not(happens(bookOpenTo(Agent, Book, Page), Time)),
   
    [  (holds_at(neg(awake(Agent)), Time);holds_at(neg(bookClosed(Book)), Time);holds_at(neg(holding(Agent, Book)), Time))
    ]).

 /*  holds_at(awake(Agent), Time) :-
       happens(bookOpenTo(Agent, Book, Page), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Book.e',45).

 /*  [holds_at(metreqs(bookOpenTo(Agent, Book, Page)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(bookOpenTo(Agent, Book, Page), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Book.e',45).
axiom(requires(bookOpenTo(Agent, Book, Page), Time),
   
    [ holds_at(metreqs(bookOpenTo(Agent, Book, Page)),
               Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Book.e',45).

 /*  [holds_at(awake(Agent), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(bookOpenTo(Agent, Book, Page)),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Book.e',45).
axiom(holds_at(metreqs(bookOpenTo(Agent, Book, Page)), Time),
    [holds_at(awake(Agent), Time)]).

 /*  holds_at(bookClosed(Book), Time) :-
       happens(bookOpenTo(Agent, Book, Page), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Book.e',45).

 /*  [holds_at(metreqs(bookOpenTo(Agent, Book, Page)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(bookOpenTo(Agent, Book, Page), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Book.e',45).
axiom(requires(bookOpenTo(Agent, Book, Page), Time),
   
    [ holds_at(metreqs(bookOpenTo(Agent, Book, Page)),
               Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Book.e',45).

 /*  [holds_at(bookClosed(Book), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(bookOpenTo(Agent, Book, Page)),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Book.e',45).
axiom(holds_at(metreqs(bookOpenTo(Agent, Book, Page)), Time),
    [holds_at(bookClosed(Book), Time)]).

 /*  holds_at(holding(Agent, Book), Time) :-
       happens(bookOpenTo(Agent, Book, Page), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Book.e',45).

 /*  [holds_at(metreqs(bookOpenTo(Agent, Book, Page)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(bookOpenTo(Agent, Book, Page), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Book.e',45).
axiom(requires(bookOpenTo(Agent, Book, Page), Time),
   
    [ holds_at(metreqs(bookOpenTo(Agent, Book, Page)),
               Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Book.e',45).

 /*  [holds_at(holding(Agent, Book), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(bookOpenTo(Agent, Book, Page)),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Book.e',45).
axiom(holds_at(metreqs(bookOpenTo(Agent, Book, Page)), Time),
    [holds_at(holding(Agent, Book), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Book.e:50
%; An effect axiom states that
%; if an agent opens a book to a page,
%; the book will be open to the page:
% [agent,book,page,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Book.e:54
% Initiates(BookOpenTo(agent,book,page),BookIsOpenTo(book,page),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Book.e',54).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(bookOpenTo(Agent, Book, Page),
                    bookIsOpenTo(Book, Page),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Book.e',54).
axiom(initiates(bookOpenTo(Agent, Book, Page), bookIsOpenTo(Book, Page), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Book.e:56
%; A precondition axiom states that
%; for an agent to close a book,
%; the agent must be awake,
%; the book must not already be closed, and
%; the agent must be holding the book.
% [agent,book,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Book.e:62
% Happens(BookClose(agent,book),time) ->
% HoldsAt(Awake(agent),time) &
% !HoldsAt(BookClosed(book),time) &
% HoldsAt(Holding(agent,book),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Book.e:65
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Book.e',62).

 /*  happens(bookClose(Agent, Book), Time) ->
       holds_at(awake(Agent), Time),
       holds_at(neg(bookClosed(Book)), Time),
       holds_at(holding(Agent, Book), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Book.e',62).

 /*  not(happens(bookClose(Agent, Book), Time)) :-
       (   not(holds_at(awake(Agent), Time))
       ;   not(holds_at(neg(bookClosed(Book)), Time))
       ;   not(holds_at(holding(Agent, Book), Time))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Book.e',62).

 /*  [(holds_at(neg(awake(Agent)), Time);holds_at(bookClosed(Book), Time);holds_at(neg(holding(Agent, Book)), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(bookClose(Agent, Book), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Book.e',62).
axiom(not(happens(bookClose(Agent, Book), Time)),
   
    [  (holds_at(neg(awake(Agent)), Time);holds_at(bookClosed(Book), Time);holds_at(neg(holding(Agent, Book)), Time))
    ]).

 /*  holds_at(awake(Agent), Time) :-
       happens(bookClose(Agent, Book), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Book.e',62).

 /*  [holds_at(metreqs(bookClose(Agent, Book)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(bookClose(Agent, Book), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Book.e',62).
axiom(requires(bookClose(Agent, Book), Time),
    [holds_at(metreqs(bookClose(Agent, Book)), Time)]).

 /*  [holds_at(awake(Agent), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(bookClose(Agent, Book)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Book.e',62).
axiom(holds_at(metreqs(bookClose(Agent, Book)), Time),
    [holds_at(awake(Agent), Time)]).

 /*  holds_at(neg(bookClosed(Book)), Time) :-
       happens(bookClose(Agent, Book), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Book.e',62).

 /*  [holds_at(metreqs(bookClose(Agent, Book)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(bookClose(Agent, Book), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Book.e',62).
axiom(requires(bookClose(Agent, Book), Time),
    [holds_at(metreqs(bookClose(Agent, Book)), Time)]).

 /*  [holds_at(neg(bookClosed(Book)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(bookClose(Agent, Book)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Book.e',62).
axiom(holds_at(metreqs(bookClose(Agent, Book)), Time),
    [holds_at(neg(bookClosed(Book)), Time)]).

 /*  holds_at(holding(Agent, Book), Time) :-
       happens(bookClose(Agent, Book), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Book.e',62).

 /*  [holds_at(metreqs(bookClose(Agent, Book)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(bookClose(Agent, Book), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Book.e',62).
axiom(requires(bookClose(Agent, Book), Time),
    [holds_at(metreqs(bookClose(Agent, Book)), Time)]).

 /*  [holds_at(holding(Agent, Book), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(bookClose(Agent, Book)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Book.e',62).
axiom(holds_at(metreqs(bookClose(Agent, Book)), Time),
    [holds_at(holding(Agent, Book), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Book.e:67
%; An effect axiom states that
%; if an agent closes a book,
%; the book will no longer be open:
% [agent,book,page,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Book.e:71
% Terminates(BookClose(agent,book),BookIsOpenTo(book,page),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Book.e',71).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(bookClose(Agent, Book),
                     bookIsOpenTo(Book, Page),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Book.e',71).
axiom(terminates(bookClose(Agent, Book), bookIsOpenTo(Book, Page), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Book.e:73
% [agent,book,page,time]
% Happens(BookTurnPageTo(agent,book,page),time) ->
% HoldsAt(Awake(agent),time) &
% ({page1} page1 != page & HoldsAt(BookIsOpenTo(book,page1),time)) &
% HoldsAt(Holding(agent,book),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Book.e:77
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Book.e',75).

 /*  happens(bookTurnPageTo(Agent, Book, Page), Time) ->
       holds_at(awake(Agent), Time),
       exists([Page1],
               (diff(Page1, Page), holds_at(bookIsOpenTo(Book, Page1), Time))),
       holds_at(holding(Agent, Book), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Book.e',75).

 /*  not(happens(bookTurnPageTo(Agent, Book, Page), Time)) :-
       (   not(holds_at(awake(Agent), Time))
       ;   not(holds_at(holding(Agent, Book), Time))
       ;   not(diff(Page1, Page))
       ;   not(holds_at(bookIsOpenTo(Book, Page1), Time))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Book.e',75).

 /*  [(holds_at(neg(awake(Agent)), Time);holds_at(neg(holding(Agent, Book)), Time);equals(Page1, Page);holds_at(neg(bookIsOpenTo(Book, Page1)), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(bookTurnPageTo(Agent, Book, Page),
                      Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Book.e',75).
axiom(not(happens(bookTurnPageTo(Agent, Book, Page), Time)),
   
    [  (holds_at(neg(awake(Agent)), Time);holds_at(neg(holding(Agent, Book)), Time);equals(Page, Page1);holds_at(neg(bookIsOpenTo(Book, Page1)), Time))
    ]).

 /*  holds_at(awake(Agent), Time) :-
       happens(bookTurnPageTo(Agent, Book, Page), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Book.e',75).

 /*  [holds_at(metreqs(bookTurnPageTo(Agent, Book, Page)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(bookTurnPageTo(Agent, Book, Page), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Book.e',75).
axiom(requires(bookTurnPageTo(Agent, Book, Page), Time),
   
    [ holds_at(metreqs(bookTurnPageTo(Agent, Book, Page)),
               Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Book.e',75).

 /*  [holds_at(awake(Agent), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(bookTurnPageTo(Agent, Book, Page)),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Book.e',75).
axiom(holds_at(metreqs(bookTurnPageTo(Agent, Book, Page)), Time),
    [holds_at(awake(Agent), Time)]).

 /*  holds_at(holding(Agent, Book), Time) :-
       happens(bookTurnPageTo(Agent, Book, Page), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Book.e',75).

 /*  [holds_at(metreqs(bookTurnPageTo(Agent, Book, Page)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(bookTurnPageTo(Agent, Book, Page), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Book.e',75).
axiom(requires(bookTurnPageTo(Agent, Book, Page), Time),
   
    [ holds_at(metreqs(bookTurnPageTo(Agent, Book, Page)),
               Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Book.e',75).

 /*  [holds_at(holding(Agent, Book), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(bookTurnPageTo(Agent, Book, Page)),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Book.e',75).
axiom(holds_at(metreqs(bookTurnPageTo(Agent, Book, Page)), Time),
    [holds_at(holding(Agent, Book), Time)]).

 /*  holds_at(bookIsOpenTo(Book, Page1), Time) :-
       happens(bookTurnPageTo(Agent, Book, Page), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Book.e',75).

 /*  [holds_at(metreqs(bookTurnPageTo(Agent, Book, Page)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(bookTurnPageTo(Agent, Book, Page), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Book.e',75).
axiom(requires(bookTurnPageTo(Agent, Book, Page), Time),
   
    [ holds_at(metreqs(bookTurnPageTo(Agent, Book, Page)),
               Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Book.e',75).

 /*  [holds_at(bookIsOpenTo(Book, Page1), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(bookTurnPageTo(Agent, Book, Page)),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Book.e',75).
axiom(holds_at(metreqs(bookTurnPageTo(Agent, Book, Page)), Time),
    [holds_at(bookIsOpenTo(Book, Page1), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Book.e:79
% [agent,book,page,time]
% Initiates(BookTurnPageTo(agent,book,page),BookIsOpenTo(book,page),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Book.e',81).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(bookTurnPageTo(Agent, Book, Page),
                    bookIsOpenTo(Book, Page),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Book.e',81).
axiom(initiates(bookTurnPageTo(Agent, Book, Page), bookIsOpenTo(Book, Page), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Book.e:82
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Book.e',83).
% [agent,book,page1,page2,time]
% HoldsAt(BookIsOpenTo(book,page1),time) &
% page1 != page2 ->
% Terminates(BookTurnPageTo(agent,book,page2),BookIsOpenTo(book,page1),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Book.e:85
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Book.e',83).

 /*  [holds_at(bookIsOpenTo(Book, Page1), Time), diff(Page1, Page2)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(bookTurnPageTo(Agent, Book, Page2),
                     bookIsOpenTo(Book, Page1),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Book.e',83).
axiom(terminates(bookTurnPageTo(Agent, Book, Page2), bookIsOpenTo(Book, Page1), Time),
   
    [ holds_at(bookIsOpenTo(Book, Page1), Time),
      diff(Page1, Page2)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Book.e:87
%; End of file.
