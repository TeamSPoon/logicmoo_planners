:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Bomb.e',183).
:- call_pel_directive(translate(unskipped,
                                '/pack/logicmoo_ec/ext/ec_sources/ecnet/Book.pel')).
:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(ecalc).
:- call_pel_directive(translate(begining,
                                '/pack/logicmoo_ec/ext/ec_sources/ecnet/Book.pel')).
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; Book: book (a sort of device)
%;

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Book.e',14).
% sort page: integer
subsort(page,integer).
%; agent opens book to page.

% event BookOpenTo(agent,book,page)
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Book.e',16).
event(bookOpenTo(agent,book,page)).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Book.e',19).
%; agent closes book.

% event BookClose(agent,book)
event(bookClose(agent,book)).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Book.e',22).
%; book is open to page.

% fluent BookIsOpenTo(book,page)
fluent(bookIsOpenTo(book,page)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Book.e',25).
% fluent BookClosed(book)
fluent(bookClosed(book)).

% noninertial BookClosed
:- call_pel_directive(noninertial(bookClosed)).
%; agent turns page of book to page.

% event BookTurnPageTo(agent,book,page)
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Book.e',28).
event(bookTurnPageTo(agent,book,page)).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Book.e',31).
% [book,page1,page2,time]
% HoldsAt(BookIsOpenTo(book,page1),time) &
% HoldsAt(BookIsOpenTo(book,page2),time) ->
% page1=page2.
holds_at(bookIsOpenTo(Book, Page1), Time), holds_at(bookIsOpenTo(Book, Page2), Time) ->
    Page1=Page2.


% [book,time]
% HoldsAt(BookClosed(book),time) <->
% !{page} HoldsAt(BookIsOpenTo(book,page),time).
holds_at(bookClosed(Book), Time) <->
    not(exists([Page],
               holds_at(bookIsOpenTo(Book, Page), Time))).


%; A precondition axiom states that
%; for an agent to open a book to a page,
%; the agent must be awake,
%; the book must be closed, and
%; the agent must be holding the book.
% [agent,book,page,time]
% Happens(BookOpenTo(agent,book,page),time) ->
% HoldsAt(Awake(agent),time) &
% HoldsAt(BookClosed(book),time) &
% HoldsAt(Holding(agent,book),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Book.e',45).
happens_at(bookOpenTo(Agent, Book, Page), Time) ->
    holds_at(awake(Agent), Time),
    holds_at(bookClosed(Book), Time),
    holds_at(holding(Agent, Book), Time).


%; An effect axiom states that
%; if an agent opens a book to a page,
%; the book will be open to the page:
% [agent,book,page,time]
% Initiates(BookOpenTo(agent,book,page),BookIsOpenTo(book,page),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Book.e',54).
initiates_at(bookOpenTo(Agent,Book,Page),
	     bookIsOpenTo(Book,Page),
	     Time).


%; A precondition axiom states that
%; for an agent to close a book,
%; the agent must be awake,
%; the book must not already be closed, and
%; the agent must be holding the book.
% [agent,book,time]
% Happens(BookClose(agent,book),time) ->
% HoldsAt(Awake(agent),time) &
% !HoldsAt(BookClosed(book),time) &
% HoldsAt(Holding(agent,book),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Book.e',62).
happens_at(bookClose(Agent, Book), Time) ->
    holds_at(awake(Agent), Time),
    holds_at(not(bookClosed(Book)), Time),
    holds_at(holding(Agent, Book), Time).


%; An effect axiom states that
%; if an agent closes a book,
%; the book will no longer be open:
% [agent,book,page,time]
% Terminates(BookClose(agent,book),BookIsOpenTo(book,page),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Book.e',71).
terminates_at(bookClose(Agent,Book),
	      bookIsOpenTo(Book,Page),
	      Time).


% [agent,book,page,time]
% Happens(BookTurnPageTo(agent,book,page),time) ->
% HoldsAt(Awake(agent),time) &
% ({page1} page1 != page & HoldsAt(BookIsOpenTo(book,page1),time)) &
% HoldsAt(Holding(agent,book),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Book.e',75).
happens_at(bookTurnPageTo(Agent, Book, Page), Time) ->
    holds_at(awake(Agent), Time),
    exists([Page1],
            (Page1\=Page, holds_at(bookIsOpenTo(Book, Page1), Time))),
    holds_at(holding(Agent, Book), Time).


% [agent,book,page,time]
% Initiates(BookTurnPageTo(agent,book,page),BookIsOpenTo(book,page),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Book.e',81).
initiates_at(bookTurnPageTo(Agent,Book,Page),
	     bookIsOpenTo(Book,Page),
	     Time).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Book.e',83).
% [agent,book,page1,page2,time]
% HoldsAt(BookIsOpenTo(book,page1),time) &
% page1 != page2 ->
% Terminates(BookTurnPageTo(agent,book,page2),BookIsOpenTo(book,page1),time).
holds_at(bookIsOpenTo(Book, Page1), Time), Page1\=Page2 ->
    terminates_at(bookTurnPageTo(Agent, Book, Page2),
                  bookIsOpenTo(Book, Page1),
                  Time).


%; End of file.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Book.e',87).
:- call_pel_directive(translate(ending,
                                '/pack/logicmoo_ec/ext/ec_sources/ecnet/Book.pel')).
