:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/CTime.e',43).
:- call_pel_directive(translate(unskipped,
                                '/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.pel')).
:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(ecalc).
:- call_pel_directive(translate(begining,
                                '/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.pel')).
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; scuba diving
%;

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',14).
% sort object
sort(object).

% sort agent: object
subsort(agent,object).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',16).
% sort diver: agent
subsort(diver,agent).

% sort depth: integer
subsort(depth,integer).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',18).
% sort boat: object
subsort(boat,object).
%; reference line, anchor line, shotline, SMB line, ...

% sort line: object
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',20).
subsort(line,object).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',23).
% sort equipment: object
subsort(equipment,object).

% sort weight: equipment
subsort(weight,equipment).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',25).
% sort fin: equipment
subsort(fin,equipment).

% sort airtank: equipment
subsort(airtank,equipment).
%; buoyancy compensator (BC)
%; buoyancy control device (BCD)

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',30).
% sort computer: equipment
subsort(computer,equipment).

% sort bc: equipment
subsort(bc,equipment).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',33).
% fluent AtDepth(object,depth)
fluent(atDepth(object,depth)).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',35).
% [object,depth1,depth2,time]
% HoldsAt(AtDepth(object,depth1),time) &
% HoldsAt(AtDepth(object,depth2),time) ->
% depth1 = depth2.
holds_at(atDepth(Object, Depth1), Time), holds_at(atDepth(Object, Depth2), Time) ->
    Depth1=Depth2.

% event Ascend(diver,depth)
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',39).
event(ascend(diver,depth)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',42).
% event Descend(diver,depth)
event(descend(diver,depth)).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',44).
% [diver,depth1,depth2,time]
% HoldsAt(AtDepth(diver,depth1),time) &
% Happens(Descend(diver,depth2),time) ->
% depth2>depth1.
holds_at(atDepth(Diver, Depth1), Time), happens_at(descend(Diver, Depth2), Time) ->
    Depth2>Depth1.


% [diver,depth1,depth2,time]
% HoldsAt(AtDepth(diver,depth1),time) &
% Happens(Ascend(diver,depth2),time) ->
% depth2<depth1.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',50).
holds_at(atDepth(Diver, Depth1), Time), happens_at(ascend(Diver, Depth2), Time) ->
    Depth2<Depth1.


% [diver,depth,time]
% Initiates(Descend(diver,depth),AtDepth(diver,depth),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',55).
initiates_at(descend(Diver,Depth),
	     atDepth(Diver,Depth),
	     Time).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',57).
% [diver,depth1,depth2,time]
% HoldsAt(AtDepth(diver,depth1),time) ->
% Terminates(Descend(diver,depth2),AtDepth(diver,depth1),time).
holds_at(atDepth(Diver, Depth1), Time) ->
    terminates_at(descend(Diver, Depth2),
                  atDepth(Diver, Depth1),
                  Time).


% [diver,depth,time]
% Initiates(Ascend(diver,depth),AtDepth(diver,depth),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',62).
initiates_at(ascend(Diver,Depth),
	     atDepth(Diver,Depth),
	     Time).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',64).
% [diver,depth1,depth2,time]
% HoldsAt(AtDepth(diver,depth1),time) ->
% Terminates(Ascend(diver,depth2),AtDepth(diver,depth1),time).
holds_at(atDepth(Diver, Depth1), Time) ->
    terminates_at(ascend(Diver, Depth2),
                  atDepth(Diver, Depth1),
                  Time).

% fluent Wearing(diver,equipment)
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',67).
fluent(wearing(diver,equipment)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',70).
% event PutOn(diver,equipment)
event(putOn(diver,equipment)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',72).
% event TakeOff(diver,equipment)
event(takeOff(diver,equipment)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',74).
% event Lose(diver,equipment)
event(lose(diver,equipment)).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',76).
% [diver,equipment,depth,time]
% Releases(PutOn(diver,equipment),AtDepth(equipment,depth),time).
releases_at(putOn(Diver,Equipment),
	    atDepth(Equipment,Depth),
	    Time).


% [diver,equipment,time]
% Releases(PutOn(diver,equipment),UnderWater(equipment),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',80).
releases_at(putOn(Diver,Equipment),
	    underWater(Equipment),
	    Time).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',82).
% [diver,equipment,time]
% Happens(PutOn(diver,equipment),time) ->
% !{diver1} HoldsAt(Wearing(diver1,equipment),time).
happens_at(putOn(Diver, Equipment), Time) ->
    not(exists([Diver1],
               holds_at(wearing(Diver1, Equipment), Time))).


% [diver,depth,equipment,time]
% HoldsAt(Wearing(diver,equipment),time) ->
% (HoldsAt(AtDepth(diver,depth),time) <->
%  HoldsAt(AtDepth(equipment,depth),time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',87).
holds_at(wearing(Diver, Equipment), Time) ->
    <->(holds_at(atDepth(Diver, Depth), Time),
        holds_at(atDepth(Equipment, Depth), Time)).


% [diver,depth,object,time]
% HoldsAt(Holding(diver,object),time) ->
% (HoldsAt(AtDepth(diver,depth),time) <->
%  HoldsAt(AtDepth(object,depth),time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',92).
holds_at(holding(Diver, Object), Time) ->
    <->(holds_at(atDepth(Diver, Depth), Time),
        holds_at(atDepth(Object, Depth), Time)).


% [diver,equipment,time]
% HoldsAt(Wearing(diver,equipment),time) ->
% (HoldsAt(UnderWater(diver),time) <->
%  HoldsAt(UnderWater(equipment),time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',97).
holds_at(wearing(Diver, Equipment), Time) ->
    <->(holds_at(underWater(Diver), Time),
        holds_at(underWater(Equipment), Time)).


% [diver,object,time]
% HoldsAt(Holding(diver,object),time) ->
% (HoldsAt(UnderWater(diver),time) <->
%  HoldsAt(UnderWater(object),time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',102).
holds_at(holding(Diver, Object), Time) ->
    <->(holds_at(underWater(Diver), Time),
        holds_at(underWater(Object), Time)).


% [diver,depth,equipment,time]
% HoldsAt(AtDepth(diver,depth),time) &
% HoldsAt(Wearing(diver,equipment),time) ->
% Initiates(TakeOff(diver,equipment),AtDepth(equipment,depth),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',107).
holds_at(atDepth(Diver, Depth), Time), holds_at(wearing(Diver, Equipment), Time) ->
    initiates_at(takeOff(Diver, Equipment),
                 atDepth(Equipment, Depth),
                 Time).


% [diver,depth,equipment,time]
% !HoldsAt(AtDepth(diver,depth),time) &
% HoldsAt(Wearing(diver,equipment),time) ->
% Terminates(TakeOff(diver,equipment),AtDepth(equipment,depth),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',112).
holds_at(not(atDepth(Diver, Depth)), Time), holds_at(wearing(Diver, Equipment), Time) ->
    terminates_at(takeOff(Diver, Equipment),
                  atDepth(Equipment, Depth),
                  Time).


% [diver,equipment,time]
% HoldsAt(UnderWater(diver),time) ->
% Initiates(TakeOff(diver,equipment),UnderWater(equipment),time).
holds_at(underWater(Diver), Time) ->
    initiates_at(takeOff(Diver, Equipment),
                 underWater(Equipment),
                 Time).


% [diver,equipment,time]
% !HoldsAt(UnderWater(diver),time) ->
% Terminates(TakeOff(diver,equipment),UnderWater(equipment),time).
holds_at(not(underWater(Diver)), Time) ->
    terminates_at(takeOff(Diver, Equipment),
                  underWater(Equipment),
                  Time).


% [diver,equipment,depth,time]
% HoldsAt(AtDepth(diver,depth),time) &
% HoldsAt(Wearing(diver,equipment),time) ->
% Initiates(Lose(diver,equipment),AtDepth(equipment,depth),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',125).
holds_at(atDepth(Diver, Depth), Time), holds_at(wearing(Diver, Equipment), Time) ->
    initiates_at(lose(Diver, Equipment),
                 atDepth(Equipment, Depth),
                 Time).


% [diver,equipment,depth,time]
% !HoldsAt(AtDepth(diver,depth),time) &
% HoldsAt(Wearing(diver,equipment),time) ->
% Terminates(Lose(diver,equipment),AtDepth(equipment,depth),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',130).
holds_at(not(atDepth(Diver, Depth)), Time), holds_at(wearing(Diver, Equipment), Time) ->
    terminates_at(lose(Diver, Equipment),
                  atDepth(Equipment, Depth),
                  Time).


% [diver,equipment,time]
% HoldsAt(UnderWater(diver),time) ->
% Initiates(Lose(diver,equipment),UnderWater(equipment),time).
holds_at(underWater(Diver), Time) ->
    initiates_at(lose(Diver, Equipment),
                 underWater(Equipment),
                 Time).


% [diver,equipment,time]
% !HoldsAt(UnderWater(diver),time) ->
% Terminates(Lose(diver,equipment),UnderWater(equipment),time).
holds_at(not(underWater(Diver)), Time) ->
    terminates_at(lose(Diver, Equipment),
                  underWater(Equipment),
                  Time).

% fluent Holding(diver,object)
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',141).
fluent(holding(diver,object)).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',144).
% [diver1,diver2,time]
% HoldsAt(Holding(diver1,diver2),time) ->
% !HoldsAt(Holding(diver2,diver1),time).
holds_at(holding(Diver1, Diver2), Time) ->
    holds_at(not(holding(Diver2, Diver1)), Time).

% event Grab(diver,object)
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',147).
event(grab(diver,object)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',150).
% event LetGoOf(diver,object)
event(letGoOf(diver,object)).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',152).
% [diver,object,time]
% Initiates(Grab(diver,object),Holding(diver,object),time).
initiates_at(grab(Diver,Object),
	     holding(Diver,Object),
	     Time).


% [diver,object,time]
% Terminates(LetGoOf(diver,object),Holding(diver,object),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',156).
terminates_at(letGoOf(Diver,Object),
	      holding(Diver,Object),
	      Time).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',158).
% [diver,object,depth,time]
% Releases(Grab(diver,object),AtDepth(object,depth),time).
releases_at(grab(Diver,Object),
	    atDepth(Object,Depth),
	    Time).


% [diver,object,time]
% Releases(Grab(diver,object),UnderWater(object),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',162).
releases_at(grab(Diver,Object),
	    underWater(Object),
	    Time).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',164).
% [diver,object,depth,time]
% HoldsAt(AtDepth(diver,depth),time) &
% HoldsAt(Holding(diver,object),time) ->
% Initiates(LetGoOf(diver,object),AtDepth(object,depth),time).
holds_at(atDepth(Diver, Depth), Time), holds_at(holding(Diver, Object), Time) ->
    initiates_at(letGoOf(Diver, Object),
                 atDepth(Object, Depth),
                 Time).


% [diver,object,depth,time]
% !HoldsAt(AtDepth(diver,depth),time) &
% HoldsAt(Holding(diver,object),time) ->
% Terminates(LetGoOf(diver,object),AtDepth(object,depth),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',170).
holds_at(not(atDepth(Diver, Depth)), Time), holds_at(holding(Diver, Object), Time) ->
    terminates_at(letGoOf(Diver, Object),
                  atDepth(Object, Depth),
                  Time).


% [diver,object,time]
% HoldsAt(UnderWater(diver),time) ->
% Initiates(LetGoOf(diver,object),UnderWater(object),time).
holds_at(underWater(Diver), Time) ->
    initiates_at(letGoOf(Diver, Object),
                 underWater(Object),
                 Time).


% [diver,object,time]
% !HoldsAt(UnderWater(diver),time) ->
% Terminates(LetGoOf(diver,object),UnderWater(object),time).
holds_at(not(underWater(Diver)), Time) ->
    terminates_at(letGoOf(Diver, Object),
                  underWater(Object),
                  Time).


% [diver,equipment,time]
% Initiates(PutOn(diver,equipment),Wearing(diver,equipment),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',183).
initiates_at(putOn(Diver,Equipment),
	     wearing(Diver,Equipment),
	     Time).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',185).
% [diver,equipment,time]
% Happens(PutOn(diver,equipment),time) ->
% !HoldsAt(UnderWater(diver),time).
happens_at(putOn(Diver, Equipment), Time) ->
    holds_at(not(underWater(Diver)), Time).


% [diver,equipment,time]
% Terminates(TakeOff(diver,equipment),Wearing(diver,equipment),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',190).
terminates_at(takeOff(Diver,Equipment),
	      wearing(Diver,Equipment),
	      Time).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',192).
% [diver,equipment,time]
% Terminates(Lose(diver,equipment),Wearing(diver,equipment),time).
terminates_at(lose(Diver,Equipment),
	      wearing(Diver,Equipment),
	      Time).

% fluent Vertical(diver)
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',194).
fluent(vertical(diver)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',197).
% fluent HorizontalDown(diver)
fluent(horizontalDown(diver)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',199).
% fluent Inverted(diver)
fluent(inverted(diver)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',201).
% fluent HorizontalUp(diver)
fluent(horizontalUp(diver)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',203).
% xor Vertical, HorizontalDown, Inverted, HorizontalUp
xor([vertical,horizontalDown,inverted,horizontalUp]).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',205).
% event RotatePitch(diver)
event(rotatePitch(diver)).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',207).
% [diver,time]
% HoldsAt(Vertical(diver),time) ->
% Initiates(RotatePitch(diver),HorizontalDown(diver),time).
holds_at(vertical(Diver), Time) ->
    initiates_at(rotatePitch(Diver),
                 horizontalDown(Diver),
                 Time).


% [diver,time]
% HoldsAt(HorizontalDown(diver),time) ->
% Initiates(RotatePitch(diver),Inverted(diver),time).
holds_at(horizontalDown(Diver), Time) ->
    initiates_at(rotatePitch(Diver), inverted(Diver), Time).


% [diver,time]
% HoldsAt(HorizontalDown(diver),time) ->
% Terminates(RotatePitch(diver),HorizontalDown(diver),time).
holds_at(horizontalDown(Diver), Time) ->
    terminates_at(rotatePitch(Diver),
                  horizontalDown(Diver),
                  Time).


% [diver,time]
% HoldsAt(Inverted(diver),time) ->
% Initiates(RotatePitch(diver),HorizontalUp(diver),time).
holds_at(inverted(Diver), Time) ->
    initiates_at(rotatePitch(Diver),
                 horizontalUp(Diver),
                 Time).


% [diver,time]
% HoldsAt(Inverted(diver),time) ->
% Terminates(RotatePitch(diver),Inverted(diver),time).
holds_at(inverted(Diver), Time) ->
    terminates_at(rotatePitch(Diver), inverted(Diver), Time).


% [diver,time]
% HoldsAt(HorizontalUp(diver),time) ->
% Initiates(RotatePitch(diver),Vertical(diver),time).
holds_at(horizontalUp(Diver), Time) ->
    initiates_at(rotatePitch(Diver), vertical(Diver), Time).


% [diver,time]
% HoldsAt(HorizontalUp(diver),time) ->
% Terminates(RotatePitch(diver),HorizontalUp(diver),time).
holds_at(horizontalUp(Diver), Time) ->
    terminates_at(rotatePitch(Diver),
                  horizontalUp(Diver),
                  Time).

% event RotateYaw(diver)
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',234).
event(rotateYaw(diver)).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',237).
%; try taking out Holding condition here
% [diver,time]
% Happens(Ascend1(diver),time) &
% !Happens(RapidAscendToSurface(diver),time) &
% !({diver1} HoldsAt(Holding(diver,diver1),time)) ->
% Happens(RotateYaw(diver),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',239).
happens_at(ascend1(Diver), Time), not(happens_at(rapidAscendToSurface(Diver), Time)), not(exists([Diver1], holds_at(holding(Diver, Diver1), Time))) ->
    happens_at(rotateYaw(Diver), Time).

% fluent UnderWater(object)
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',243).
fluent(underWater(object)).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',246).
% [object,depth,time]
% depth>% 0 &
% HoldsAt(AtDepth(object,depth),time) ->
% HoldsAt(UnderWater(object),time).
Depth>0, holds_at(atDepth(Object, Depth), Time) ->
    holds_at(underWater(Object), Time).

% event EnterWater(object)
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',250).
event(enterWater(object)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',253).
% event Surface(object)
event(surface(object)).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',255).
% [object,time]
% Initiates(EnterWater(object),UnderWater(object),time).
initiates_at(enterWater(Object),
	     underWater(Object),
	     Time).


% [diver,time]
% Happens(EnterWater(diver),time) ->
% !{diver1} HoldsAt(Holding(diver1,diver),time).
happens_at(enterWater(Diver), Time) ->
    not(exists([Diver1],
               holds_at(holding(Diver1, Diver), Time))).


% [object,depth,time]
% depth=% 0 ->
% Initiates(EnterWater(object),AtDepth(object,depth),time).
Depth=0 ->
    initiates_at(enterWater(Object),
                 atDepth(Object, Depth),
                 Time).


% [object,time]
% Terminates(Surface(object),UnderWater(object),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',267).
terminates_at(surface(Object),
	      underWater(Object),
	      Time).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',269).
% [diver,time]
% Terminates(Surface(diver),PositivelyBuoyant(diver),time).
terminates_at(surface(Diver),
	      positivelyBuoyant(Diver),
	      Time).


% [diver,time]
% Terminates(Surface(diver),NegativelyBuoyant(diver),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',273).
terminates_at(surface(Diver),
	      negativelyBuoyant(Diver),
	      Time).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',275).
% [diver,time]
% Terminates(Surface(diver),NeutrallyBuoyant(diver),time).
terminates_at(surface(Diver),
	      neutrallyBuoyant(Diver),
	      Time).


% [object,depth,time]
% Terminates(Surface(object),AtDepth(object,depth),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',279).
terminates_at(surface(Object),
	      atDepth(Object,Depth),
	      Time).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',281).
% [diver,time]
 % Happens(EnterWater(diver),time) ->
% HoldsAt(Vertical(diver),time).
happens_at(enterWater(Diver), Time) ->
    holds_at(vertical(Diver), Time).

% fluent StandingOn(diver,boat)
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',283).
fluent(standingOn(diver,boat)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',286).
% event StandOn(diver,boat)
event(standOn(diver,boat)).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',288).
% [diver,boat,time]
% Terminates(EnterWater(diver),StandingOn(diver,boat),time).
terminates_at(enterWater(Diver),
	      standingOn(Diver,Boat),
	      Time).


% [diver,boat,time]
% Initiates(StandOn(diver,boat),StandingOn(diver,boat),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',292).
initiates_at(standOn(Diver,Boat),
	     standingOn(Diver,Boat),
	     Time).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',294).
% fluent PositivelyBuoyant(diver)
fluent(positivelyBuoyant(diver)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',296).
% fluent NeutrallyBuoyant(diver)
fluent(neutrallyBuoyant(diver)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',298).
% fluent NegativelyBuoyant(diver)
fluent(negativelyBuoyant(diver)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',300).
% mutex PositivelyBuoyant, NeutrallyBuoyant, NegativelyBuoyant
:- call_pel_directive(mutex(positivelyBuoyant)).
:- call_pel_directive(mutex(neutrallyBuoyant)).
:- call_pel_directive(mutex(negativelyBuoyant)).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',302).
% [diver,time]
% HoldsAt(PositivelyBuoyant(diver),time) ->
% HoldsAt(UnderWater(diver),time).
holds_at(positivelyBuoyant(Diver), Time) ->
    holds_at(underWater(Diver), Time).


% [diver,time]
% HoldsAt(NeutrallyBuoyant(diver),time) ->
% HoldsAt(UnderWater(diver),time).
holds_at(neutrallyBuoyant(Diver), Time) ->
    holds_at(underWater(Diver), Time).


% [diver,time]
% HoldsAt(NegativelyBuoyant(diver),time) ->
% HoldsAt(UnderWater(diver),time).
holds_at(negativelyBuoyant(Diver), Time) ->
    holds_at(underWater(Diver), Time).

% event PressDeflateButton(diver,bc)
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',313).
event(pressDeflateButton(diver,bc)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',316).
% event PressDumpButton(diver,bc)
event(pressDumpButton(diver,bc)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',318).
% event PressInflateButton(diver,bc)
event(pressInflateButton(diver,bc)).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',320).
% [diver,bc,time]
% Happens(PressDeflateButton(diver,bc),time) ->
% HoldsAt(Vertical(diver),time) &
% HoldsAt(UnderWater(bc),time).
happens_at(pressDeflateButton(Diver, Bc), Time) ->
    holds_at(vertical(Diver), Time),
    holds_at(underWater(Bc), Time).


% [diver,bc,time]
% Happens(PressDumpButton(diver,bc),time) ->
% HoldsAt(Vertical(diver),time) &
% HoldsAt(UnderWater(bc),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',326).
happens_at(pressDumpButton(Diver, Bc), Time) ->
    holds_at(vertical(Diver), Time),
    holds_at(underWater(Bc), Time).


% [diver,bc,time]
 % Happens(PressDumpButton(diver,bc),time) ->
% HoldsAt(UncontrolledBuoyancy(diver),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',329).
happens_at(pressDumpButton(Diver, Bc), Time) ->
    holds_at(uncontrolledBuoyancy(Diver), Time).


% [diver,bc,time]
% HoldsAt(Wearing(diver,bc),time) ->
% Initiates(PressDeflateButton(diver,bc),NegativelyBuoyant(diver),time).
holds_at(wearing(Diver, Bc), Time) ->
    initiates_at(pressDeflateButton(Diver, Bc),
                 negativelyBuoyant(Diver),
                 Time).


% [diver,bc,time]
% HoldsAt(Wearing(diver,bc),time) ->
% Terminates(PressDeflateButton(diver,bc),NeutrallyBuoyant(diver),time).
holds_at(wearing(Diver, Bc), Time) ->
    terminates_at(pressDeflateButton(Diver, Bc),
                  neutrallyBuoyant(Diver),
                  Time).


% [diver,bc,time]
% HoldsAt(Wearing(diver,bc),time) ->
% Terminates(PressDeflateButton(diver,bc),PositivelyBuoyant(diver),time).
holds_at(wearing(Diver, Bc), Time) ->
    terminates_at(pressDeflateButton(Diver, Bc),
                  positivelyBuoyant(Diver),
                  Time).


% [diver,bc,time]
% HoldsAt(Wearing(diver,bc),time) ->
% Initiates(PressDumpButton(diver,bc),NegativelyBuoyant(diver),time).
holds_at(wearing(Diver, Bc), Time) ->
    initiates_at(pressDumpButton(Diver, Bc),
                 negativelyBuoyant(Diver),
                 Time).


% [diver,bc,time]
% HoldsAt(Wearing(diver,bc),time) ->
% Terminates(PressDumpButton(diver,bc),NeutrallyBuoyant(diver),time).
holds_at(wearing(Diver, Bc), Time) ->
    terminates_at(pressDumpButton(Diver, Bc),
                  neutrallyBuoyant(Diver),
                  Time).


% [diver,bc,time]
% HoldsAt(Wearing(diver,bc),time) ->
% Terminates(PressDumpButton(diver,bc),PositivelyBuoyant(diver),time).
holds_at(wearing(Diver, Bc), Time) ->
    terminates_at(pressDumpButton(Diver, Bc),
                  positivelyBuoyant(Diver),
                  Time).


% [diver,bc,time]
% HoldsAt(Wearing(diver,bc),time) ->
% Initiates(PressInflateButton(diver,bc),NeutrallyBuoyant(diver),time).
holds_at(wearing(Diver, Bc), Time) ->
    initiates_at(pressInflateButton(Diver, Bc),
                 neutrallyBuoyant(Diver),
                 Time).


% [diver,bc,time]
% HoldsAt(Wearing(diver,bc),time) ->
% Terminates(PressInflateButton(diver,bc),PositivelyBuoyant(diver),time).
holds_at(wearing(Diver, Bc), Time) ->
    terminates_at(pressInflateButton(Diver, Bc),
                  positivelyBuoyant(Diver),
                  Time).


% [diver,bc,time]
% HoldsAt(Wearing(diver,bc),time) ->
% Terminates(PressInflateButton(diver,bc),NegativelyBuoyant(diver),time).
holds_at(wearing(Diver, Bc), Time) ->
    terminates_at(pressInflateButton(Diver, Bc),
                  negativelyBuoyant(Diver),
                  Time).


% [diver,weight,time]
% HoldsAt(Wearing(diver,weight),time) ->
% Initiates(TakeOff(diver,weight),PositivelyBuoyant(diver),time).
holds_at(wearing(Diver, Weight), Time) ->
    initiates_at(takeOff(Diver, Weight),
                 positivelyBuoyant(Diver),
                 Time).


% [diver,weight,time]
% HoldsAt(Wearing(diver,weight),time) ->
% Terminates(TakeOff(diver,weight),NegativelyBuoyant(diver),time).
holds_at(wearing(Diver, Weight), Time) ->
    terminates_at(takeOff(Diver, Weight),
                  negativelyBuoyant(Diver),
                  Time).


% [diver,weight,time]
% HoldsAt(Wearing(diver,weight),time) ->
% Terminates(TakeOff(diver,weight),NeutrallyBuoyant(diver),time).
holds_at(wearing(Diver, Weight), Time) ->
    terminates_at(takeOff(Diver, Weight),
                  neutrallyBuoyant(Diver),
                  Time).

% fluent UncontrolledBuoyancy(diver)
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',380).
fluent(uncontrolledBuoyancy(diver)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',383).
% event LoseBuoyancyControl(diver)
event(loseBuoyancyControl(diver)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',385).
% predicate IsInexperiencedDiver(diver)
predicate(isInexperiencedDiver(diver)).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',387).
% [diver,time]
% Happens(LoseBuoyancyControl(diver),time) ->
% IsInexperiencedDiver(diver).
happens_at(loseBuoyancyControl(Diver), Time) ->
    isInexperiencedDiver(Diver).


% [diver,time]
% Initiates(LoseBuoyancyControl(diver),UncontrolledBuoyancy(diver),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',392).
initiates_at(loseBuoyancyControl(Diver),
	     uncontrolledBuoyancy(Diver),
	     Time).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',394).
% [diver,time]
% Initiates(LoseBuoyancyControl(diver),PositivelyBuoyant(diver),time).
initiates_at(loseBuoyancyControl(Diver),
	     positivelyBuoyant(Diver),
	     Time).


% [diver,time]
% Terminates(LoseBuoyancyControl(diver),NegativelyBuoyant(diver),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',398).
terminates_at(loseBuoyancyControl(Diver),
	      negativelyBuoyant(Diver),
	      Time).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',400).
% [diver,time]
% Terminates(LoseBuoyancyControl(diver),NeutrallyBuoyant(diver),time).
terminates_at(loseBuoyancyControl(Diver),
	      neutrallyBuoyant(Diver),
	      Time).


%; determining fluent

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',404).
% fluent AscendDescendAmount(diver,depth)
fluent(ascendDescendAmount(diver,depth)).

% noninertial AscendDescendAmount
:- call_pel_directive(noninertial(ascendDescendAmount)).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',407).
% [diver,depth1,depth2,time]
% HoldsAt(AscendDescendAmount(diver,depth1),time) &
% HoldsAt(AscendDescendAmount(diver,depth2),time) ->
% depth1=depth2.
holds_at(ascendDescendAmount(Diver, Depth1), Time), holds_at(ascendDescendAmount(Diver, Depth2), Time) ->
    Depth1=Depth2.


% [diver,depth,time]
% Happens(Descend(diver,depth),time) ->
% HoldsAt(NegativelyBuoyant(diver),time) &
% ({depth1}
%  HoldsAt(AscendDescendAmount(diver,depth1),time) &
%  HoldsAt(AtDepth(diver,depth-depth1),time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',413).
happens_at(descend(Diver, Depth), Time) ->
    holds_at(negativelyBuoyant(Diver), Time),
    exists([Depth1],
            (holds_at(ascendDescendAmount(Diver, Depth1), Time), holds_at(atDepth(Diver, Depth-Depth1), Time))).

% event KickUp(diver)
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',418).
event(kickUp(diver)).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',421).
% [diver,depth,time]
% Happens(Ascend(diver,depth),time) ->
% (HoldsAt(PositivelyBuoyant(diver),time) |
%  (HoldsAt(NeutrallyBuoyant(diver),time) & Happens(KickUp(diver),time))) &
% ({depth1}
%  HoldsAt(AscendDescendAmount(diver,depth1),time) &
%  HoldsAt(AtDepth(diver,depth+depth1),time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',421).
happens_at(ascend(Diver, Depth), Time) ->
    (   holds_at(positivelyBuoyant(Diver), Time)
    ;   holds_at(neutrallyBuoyant(Diver), Time),
        happens_at(kickUp(Diver), Time)
    ),
    exists([Depth1],
            (holds_at(ascendDescendAmount(Diver, Depth1), Time), holds_at(atDepth(Diver, Depth+Depth1), Time))).


% [diver,time]
% Happens(KickUp(diver),time) ->
% HoldsAt(Vertical(diver),time).
happens_at(kickUp(Diver), Time) ->
    holds_at(vertical(Diver), Time).

% event SwimAround(diver)
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',432).
event(swimAround(diver)).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',435).
% [diver,time]
% Happens(SwimAround(diver),time) ->
% HoldsAt(HorizontalDown(diver),time).
happens_at(swimAround(Diver), Time) ->
    holds_at(horizontalDown(Diver), Time).


%; signaling

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',441).
% event SignalDescend(diver,diver)
event(signalDescend(diver,diver)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',443).
% event SignalOutOfTime(diver,diver)
event(signalOutOfTime(diver,diver)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',445).
% event SignalAscend(diver,diver)
event(signalAscend(diver,diver)).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',447).
%;[diver1,diver2,time]
%;Happens(SignalAscend(diver1,diver2),time) ->
%;Happens(SignalOutOfTime(diver1,diver2),time-1).
%;[diver1,diver2,time]
%;Happens(SignalDescend(diver1,diver2),time) ->
%;HoldsAt(See(diver1,diver2),time) &
%;HoldsAt(See(diver2,diver1),time).
%;[diver1,diver2,time]
%;Happens(SignalOutOfTime(diver1,diver2),time) ->
%;HoldsAt(See(diver1,diver2),time) &
%;HoldsAt(See(diver2,diver1),time).
%;[diver1,diver2,time]
%;Happens(SignalAscend(diver1,diver2),time) ->
%;HoldsAt(See(diver1,diver2),time) &
%;HoldsAt(See(diver2,diver1),time).
%;event LookAt(agent,object)
%;fluent See(agent,object)
%;[agent,object,time]
%;Initiates(LookAt(agent,object),See(agent,object),time).
%;[agent,object1,object2,time]
%;object1!=object2 ->
%;Terminates(LookAt(agent,object1),
%;           See(agent,object2),
%;           time).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',479).
% event Descend1(diver)
event(descend1(diver)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',481).
% event Ascend1(diver)
event(ascend1(diver)).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',483).
%;[diver,object,time]
%;Terminates(Descend1(diver),See(diver,object),time).
%;[diver,object,time]
%;Terminates(Ascend1(diver),See(diver,object),time).
%;[diver,object,time]
%;Terminates(RotateYaw(diver),See(diver,object),time).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',492).
% event RapidAscendToSurface(diver)
event(rapidAscendToSurface(diver)).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',494).
% [diver,time]
% Happens(Descend1(diver),time) <->
% ({depth} Happens(Descend(diver,depth),time)).
happens_at(descend1(Diver), Time) <->
    exists([Depth],
           happens_at(descend(Diver, Depth), Time)).


% [diver,time]
% Happens(Ascend1(diver),time) <->
% ({depth} Happens(Ascend(diver,depth),time)).
happens_at(ascend1(Diver), Time) <->
    exists([Depth],
           happens_at(ascend(Diver, Depth), Time)).


% [diver,time]
% Happens(RapidAscendToSurface(diver),time) ->
% Happens(Ascend(diver,0),time).
happens_at(rapidAscendToSurface(Diver), Time) ->
    happens_at(ascend(Diver, 0), Time).

% event AscendLine(diver,line)
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',505).
event(ascendLine(diver,line)).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',508).
% [diver,line,time]
% Happens(AscendLine(diver,line),time) ->
% Happens(Ascend1(diver),time).
happens_at(ascendLine(Diver, Line), Time) ->
    happens_at(ascend1(Diver), Time).

% fluent Disoriented(diver)
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',511).
fluent(disoriented(diver)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',514).
% event BecomeDisoriented(diver)
event(becomeDisoriented(diver)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',516).
% event BecomeReoriented(diver)
event(becomeReoriented(diver)).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',518).
% [diver,time]
% Initiates(BecomeDisoriented(diver),Disoriented(diver),time).
initiates_at(becomeDisoriented(Diver),
	     disoriented(Diver),
	     Time).


% [diver,time]
% Terminates(BecomeReoriented(diver),Disoriented(diver),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',522).
terminates_at(becomeReoriented(Diver),
	      disoriented(Diver),
	      Time).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',524).
% fluent DisturbedSilt()
fluent(disturbedSilt()).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',526).
% event DisturbSilt(diver)
event(disturbSilt(diver)).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',528).
% [diver,time]
% Initiates(DisturbSilt(diver),DisturbedSilt(),time).
initiates_at(disturbSilt(Diver),disturbedSilt(),Time).


% [diver,time]
% Happens(BecomeDisoriented(diver),time) ->
% (!HoldsAt(DisturbedSilt(),time-1) &
%  HoldsAt(DisturbedSilt(),time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',532).
happens_at(becomeDisoriented(Diver), Time) ->
    holds_at(not(disturbedSilt()), Time-1),
    holds_at(disturbedSilt(), Time).

% event Panic(diver)
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',535).
event(panic(diver)).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',538).
% [diver,time]
 % Happens(Panic(diver),time) ->
% HoldsAt(Disoriented(diver),time) |
% HoldsAt(UncontrolledBuoyancy(diver),time) |
% ({equipment} Happens(Lose(diver,equipment),time-1)) |
% Happens(Vomit(diver),time-1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',538).
happens_at(panic(Diver), Time) ->
    (   holds_at(disoriented(Diver), Time)
    ;   holds_at(uncontrolledBuoyancy(Diver), Time)
    ;   exists([Equipment],
               happens_at(lose(Diver, Equipment), Time-1))
    ;   happens_at(vomit(Diver), Time-1)
    ).

% event Vomit(diver)
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',543).
event(vomit(diver)).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',546).
%; conditions

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',548).
% fluent Unconscious(diver)
fluent(unconscious(diver)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',550).
% event GoUnconscious(diver)
event(goUnconscious(diver)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',552).
% event RegainConsciousness(diver)
event(regainConsciousness(diver)).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',554).
% [diver,time]
% Initiates(GoUnconscious(diver),Unconscious(diver),time).
initiates_at(goUnconscious(Diver),
	     unconscious(Diver),
	     Time).


% [diver,time]
% Terminates(RegainConsciousness(diver),Unconscious(diver),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',558).
terminates_at(regainConsciousness(Diver),
	      unconscious(Diver),
	      Time).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',560).
% [diver,time]
% Happens(GoUnconscious(diver),time) ->
% Happens(RapidAscendToSurface(diver),time).
happens_at(goUnconscious(Diver), Time) ->
    happens_at(rapidAscendToSurface(Diver), Time).

% fluent HasEarPain(diver)
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',563).
fluent(hasEarPain(diver)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',566).
% event StartEarPain(diver)
event(startEarPain(diver)).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',568).
% [diver,time]
 % Initiates(StartEarPain(diver),HasEarPain(diver),time).
initiates_at(startEarPain(Diver),
	     hasEarPain(Diver),
	     Time).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',570).
% fluent HasRupturedEardrum(diver)
fluent(hasRupturedEardrum(diver)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',572).
% event RuptureEardrum(diver)
event(ruptureEardrum(diver)).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',574).
% [diver,time]
% Initiates(RuptureEardrum(diver),HasRupturedEardrum(diver),time).
initiates_at(ruptureEardrum(Diver),
	     hasRupturedEardrum(Diver),
	     Time).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',576).
% fluent ConditionOK(diver)
fluent(conditionOK(diver)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',578).
% fluent HasDecompressionIllness(diver)
fluent(hasDecompressionIllness(diver)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',580).
% event StartDecompressionIllness(diver)
event(startDecompressionIllness(diver)).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',582).
% [diver,time]
% Initiates(StartDecompressionIllness(diver),
%           HasDecompressionIllness(diver),
%           time).
initiates_at(startDecompressionIllness(Diver),
	     hasDecompressionIllness(Diver),
	     Time).

% fluent SignalingDecompress(computer,diver)
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',586).
fluent(signalingDecompress(computer,diver)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',589).
% fluent SignalingLowOnAir(computer,airtank,diver)
fluent(signalingLowOnAir(computer,airtank,diver)).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',591).
% [computer,airtank,diver,time]
% HoldsAt(SignalingLowOnAir(computer,airtank,diver),time) ->
% HoldsAt(LowOnAir(airtank),time).
holds_at(signalingLowOnAir(Computer, Airtank, Diver), Time) ->
    holds_at(lowOnAir(Airtank), Time).


% [computer,diver,time]
% HoldsAt(SignalingDecompress(computer,diver),time) ->
% !{time1} time1<time & Happens(Decompress(diver),time1).
holds_at(signalingDecompress(Computer, Diver), Time) ->
    not(exists([Time1],
                (Time1<Time, happens_at(decompress(Diver), Time1)))).

% event Decompress(diver)
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',598).
event(decompress(diver)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',601).
% event EqualizeEars(diver)
event(equalizeEars(diver)).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',603).
% [diver,time]
% (Happens(Descend1(diver),time) | Happens(Ascend1(diver),time)) &
% !Happens(EqualizeEars(diver),time) ->
% Happens(StartEarPain(diver),time) &
% Happens(RuptureEardrum(diver),time).
(happens_at(descend1(Diver), Time);happens_at(ascend1(Diver), Time)), not(happens_at(equalizeEars(Diver), Time)) ->
    happens_at(startEarPain(Diver), Time),
    happens_at(ruptureEardrum(Diver), Time).


% [diver,time]
% Happens(Ascend1(diver),time) &
% !Happens(Decompress(diver),time) ->
% Happens(StartDecompressionIllness(diver),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',610).
happens_at(ascend1(Diver), Time), not(happens_at(decompress(Diver), Time)) ->
    happens_at(startDecompressionIllness(Diver), Time).


% [diver1,diver2,time]
% HoldsAt(Holding(diver1,diver2),time) &
% Happens(Ascend1(diver1),time) &
% !Happens(Decompress(diver2),time) ->
% Happens(StartDecompressionIllness(diver2),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',615).
holds_at(holding(Diver1, Diver2), Time), happens_at(ascend1(Diver1), Time), not(happens_at(decompress(Diver2), Time)) ->
    happens_at(startDecompressionIllness(Diver2), Time).


% [diver,time]
% Happens(Decompress(diver),time) ->
% ({depth} depth>0 & HoldsAt(AtDepth(diver,depth),time)) &
% !HoldsAt(UncontrolledBuoyancy(diver),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',621).
happens_at(decompress(Diver), Time) ->
    exists([Depth],
            (Depth>0, holds_at(atDepth(Diver, Depth), Time))),
    holds_at(not(uncontrolledBuoyancy(Diver)), Time).

% fluent HasHeadache(diver)
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',624).
fluent(hasHeadache(diver)).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',627).
% [diver,time]
% HoldsAt(ConditionOK(diver),time) ->
% !HoldsAt(Unconscious(diver),time) &
% !HoldsAt(HasEarPain(diver),time) &
% !HoldsAt(HasRupturedEardrum(diver),time) &
% !HoldsAt(HasDecompressionIllness(diver),time) &
% !HoldsAt(HasHeadache(diver),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',627).
holds_at(conditionOK(Diver), Time) ->
    holds_at(not(unconscious(Diver)), Time),
    holds_at(not(hasEarPain(Diver)), Time),
    holds_at(not(hasRupturedEardrum(Diver)), Time),
    holds_at(not(hasDecompressionIllness(Diver)), Time),
    holds_at(not(hasHeadache(Diver)), Time).

% event BeAirlifted(diver)
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',634).
event(beAirlifted(diver)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',637).
% event TakeInWater(diver)
event(takeInWater(diver)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',639).
% fluent LowOnAir(airtank)
fluent(lowOnAir(airtank)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',641).
% event BecomeLowOnAir(airtank)
event(becomeLowOnAir(airtank)).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',643).
% [airtank,time]
% Initiates(BecomeLowOnAir(airtank),LowOnAir(airtank),time).
initiates_at(becomeLowOnAir(Airtank),
	     lowOnAir(Airtank),
	     Time).


%; initial state
% [diver]
 % HoldsAt(ConditionOK(diver),0).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',647).
holds_at(conditionOK(Diver),0).


% [diver]
 % HoldsAt(Vertical(diver),0).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',647).
holds_at(vertical(Diver),0).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',649).
% !HoldsAt(DisturbedSilt(),0).
holds_at(not(disturbedSilt()),0).


% [diver]
 % !HoldsAt(UncontrolledBuoyancy(diver),0).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',649).
holds_at(not(uncontrolledBuoyancy(Diver)),0).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',651).
% [diver]
 % !HoldsAt(Disoriented(diver),0).
holds_at(not(disoriented(Diver)),0).


% [diver]
 % !HoldsAt(PositivelyBuoyant(diver),0) &
%         !HoldsAt(NeutrallyBuoyant(diver),0) &
%         !HoldsAt(NegativelyBuoyant(diver),0).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',651).
holds_at(not(positivelyBuoyant(Diver)), 0),
holds_at(not(neutrallyBuoyant(Diver)), 0),
holds_at(not(negativelyBuoyant(Diver)), 0).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',655).
% [diver,object]
 % !HoldsAt(Wearing(diver,object),0).
holds_at(not(wearing(Diver,Object)),0).


% [diver,object]
 % !HoldsAt(Holding(diver,object),0).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',655).
holds_at(not(holding(Diver,Object)),0).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',657).
% [diver1,diver2]
 % !HoldsAt(Separated(diver1,diver2),0).
holds_at(not(separated(Diver1,Diver2)),0).


%;[agent,object] !HoldsAt(See(agent,object),0).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',660).
% fluent Separated(diver,diver)
fluent(separated(diver,diver)).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',662).
% [diver1,diver2,time]
% HoldsAt(Separated(diver1,diver2),time) ->
% HoldsAt(Separated(diver2,diver1),time).
holds_at(separated(Diver1, Diver2), Time) ->
    holds_at(separated(Diver2, Diver1), Time).

% event BecomeSeparated(diver,diver)
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',665).
event(becomeSeparated(diver,diver)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',668).
% event BeReunitedWith(diver,diver)
event(beReunitedWith(diver,diver)).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',670).
% [diver1,diver2,time]
% Initiates(BecomeSeparated(diver1,diver2),Separated(diver1,diver2),time).
initiates_at(becomeSeparated(Diver1,Diver2),
	     separated(Diver1,Diver2),
	     Time).


% [diver1,diver2,time]
% Initiates(BecomeSeparated(diver1,diver2),Separated(diver2,diver1),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',674).
initiates_at(becomeSeparated(Diver1,Diver2),
	     separated(Diver2,Diver1),
	     Time).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',676).
% [diver1,diver2,time]
% Terminates(BeReunitedWith(diver1,diver2),Separated(diver1,diver2),time).
terminates_at(beReunitedWith(Diver1,Diver2),
	      separated(Diver1,Diver2),
	      Time).


% [diver1,diver2,time]
% Terminates(BeReunitedWith(diver1,diver2),Separated(diver2,diver1),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',680).
terminates_at(beReunitedWith(Diver1,Diver2),
	      separated(Diver2,Diver1),
	      Time).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.e',682).
%; End of file.
:- call_pel_directive(translate(ending,
                                '/pack/logicmoo_ec/ext/ec_sources/ecnet/Diving.pel')).
