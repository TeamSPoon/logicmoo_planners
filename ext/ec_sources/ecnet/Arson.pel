:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(pfc).
% Wed, 01 Apr 2020 20:01:23 GMT
% From ../ecnet/Arson.pel:4
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecasp/Yale40-ea.e',32).

 /*  loading(load_e_pl,
   	'/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e').
 */
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; DEV-MUC3-0060
%; Arson
%;
%; @article{Mueller:2004c,
%;   author = "Erik T. Mueller",
%;   year = "2004",
%;   title = "Understanding script-based stories using commonsense reasoning",
%;   journal = "Cognitive Systems Research",
%;   volume = "5",
%;   number = "4",
%;   pages = "307--340",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e:24
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e',25).
% ignore SkyOf, GroundOf, Near, Inside, WalkFromTo, RunFromTo

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], ignore(skyOf)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e',25).
axiom(ignore(skyOf),
    []).

 /*  [] ->
       ta(Ta_Param1, tvs1=[], tvs2=[], ignore(groundOf)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e',25).
axiom(ignore(groundOf),
    []).

 /*  [] ->
       ta(Ta_Param2, tvs1=[], tvs2=[], ignore(near)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e',25).
axiom(ignore(near),
    []).

 /*  [] ->
       ta(Ta_Param3, tvs1=[], tvs2=[], ignore(inside)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e',25).
axiom(ignore(inside),
    []).

 /*  [] ->
       ta(Ta_Param4, tvs1=[], tvs2=[], ignore(walkFromTo)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e',25).
axiom(ignore(walkFromTo),
    []).

 /*  [] ->
       ta(Ta_Param5, tvs1=[], tvs2=[], ignore(runFromTo)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e',25).
axiom(ignore(runFromTo),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e:25
% ignore RollAlong, Diameter, Move, HoldSome, PutInside
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e',25).

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], ignore(rollAlong)).
 */
axiom(ignore(rollAlong),
    []).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e',25).

 /*  [] ->
       ta(Ta_Param1, tvs1=[], tvs2=[], ignore(diameter)).
 */
axiom(ignore(diameter),
    []).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e',25).

 /*  [] ->
       ta(Ta_Param2, tvs1=[], tvs2=[], ignore(move)).
 */
axiom(ignore(move),
    []).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e',25).

 /*  [] ->
       ta(Ta_Param3, tvs1=[], tvs2=[], ignore(holdSome)).
 */
axiom(ignore(holdSome),
    []).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e',25).

 /*  [] ->
       ta(Ta_Param4, tvs1=[], tvs2=[], ignore(putInside)).
 */
axiom(ignore(putInside),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e:26
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e',27).
% ignore TakeOutOf, On, DoorUnlock, DoorLock, WalkThroughDoor12

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], ignore(takeOutOf)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e',27).
axiom(ignore(takeOutOf),
    []).

 /*  [] ->
       ta(Ta_Param1, tvs1=[], tvs2=[], ignore(on)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e',27).
axiom(ignore(on),
    []).

 /*  [] ->
       ta(Ta_Param2, tvs1=[], tvs2=[], ignore(doorUnlock)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e',27).
axiom(ignore(doorUnlock),
    []).

 /*  [] ->
       ta(Ta_Param3, tvs1=[], tvs2=[], ignore(doorLock)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e',27).
axiom(ignore(doorLock),
    []).

 /*  [] ->
       ta(Ta_Param4, tvs1=[], tvs2=[], ignore(walkThroughDoor12)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e',27).
axiom(ignore(walkThroughDoor12),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e:27
% ignore WalkThroughDoor21, WalkDownStaircase, WalkUpStaircase
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e',27).

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], ignore(walkThroughDoor21)).
 */
axiom(ignore(walkThroughDoor21),
    []).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e',27).

 /*  [] ->
       ta(Ta_Param1, tvs1=[], tvs2=[], ignore(walkDownStaircase)).
 */
axiom(ignore(walkDownStaircase),
    []).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e',27).

 /*  [] ->
       ta(Ta_Param2, tvs1=[], tvs2=[], ignore(walkUpStaircase)).
 */
axiom(ignore(walkUpStaircase),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e:29
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e',30).
% ignore ThreatenedBy

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], ignore(threatenedBy)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e',30).
axiom(ignore(threatenedBy),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e:31
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e',32).
% load foundations/Root.e
:- load_e('foundations/Root.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e:32
% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e',32).
:- load_e('foundations/EC.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e:33
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e',34).
% load answers/Mueller2003/Ontology.e
:- load_e('answers/Mueller2003/Ontology.e', changed).
:- if(is_e_toplevel).

 /*  loading(changed,
   	'/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Ontology.e').
 */
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; integer
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Ontology.e:13
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Ontology.e',14).
% sort diameter: integer
==> subsort(diameter,integer).
%; object

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Ontology.e:17
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Ontology.e',18).
% sort object
==> sort(object).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Ontology.e:19
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Ontology.e',20).
% sort agent: object
==> subsort(agent,object).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Ontology.e:21
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Ontology.e',22).
% sort physobj: object
==> subsort(physobj,object).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Ontology.e:22
% sort bed: physobj
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Ontology.e',22).
==> subsort(bed,physobj).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Ontology.e:23
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Ontology.e',24).
% sort snowflake: physobj
==> subsort(snowflake,physobj).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Ontology.e:24
% sort sky: physobj
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Ontology.e',24).
==> subsort(sky,physobj).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Ontology.e:26
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Ontology.e',27).
% sort stuff: physobj
==> subsort(stuff,physobj).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Ontology.e:28
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Ontology.e',29).
% sort surface: physobj
==> subsort(surface,physobj).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Ontology.e:29
% sort ground: surface
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Ontology.e',29).
==> subsort(ground,surface).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Ontology.e:31
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Ontology.e',32).
% sort snow: stuff
==> subsort(snow,stuff).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Ontology.e:32
% sort ball
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Ontology.e',32).
==> sort(ball).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Ontology.e:34
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Ontology.e',35).
% sort food: physobj
==> subsort(food,physobj).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Ontology.e:35
% sort fruit: food
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Ontology.e',35).
==> subsort(fruit,food).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Ontology.e:36
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Ontology.e',37).
% sort orange: fruit
==> subsort(orange,fruit).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Ontology.e:37
% sort salad: food
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Ontology.e',37).
==> subsort(salad,food).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Ontology.e:39
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Ontology.e',40).
% sort clothing: physobj
==> subsort(clothing,physobj).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Ontology.e:40
% sort scarf: clothing
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Ontology.e',40).
==> subsort(scarf,clothing).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Ontology.e:41
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Ontology.e',42).
% sort hat: clothing
==> subsort(hat,clothing).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Ontology.e:43
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Ontology.e',44).
% sort vegetablematter: physobj
==> subsort(vegetablematter,physobj).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Ontology.e:44
% sort coal: vegetablematter
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Ontology.e',44).
==> subsort(coal,vegetablematter).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Ontology.e:46
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Ontology.e',47).
% sort bodypart: physobj
==> subsort(bodypart,physobj).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Ontology.e:47
% sort hand: bodypart
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Ontology.e',47).
==> subsort(hand,bodypart).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Ontology.e:49
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Ontology.e',50).
% sort papertowels: physobj
==> subsort(papertowels,physobj).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Ontology.e:50
% sort device: physobj
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Ontology.e',50).
==> subsort(device,physobj).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Ontology.e:51
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Ontology.e',52).
% sort electronicdevice: device
==> subsort(electronicdevice,device).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Ontology.e:52
% sort lamp: electronicdevice
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Ontology.e',52).
==> subsort(lamp,electronicdevice).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Ontology.e:54
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Ontology.e',55).
% sort cat: physobj
==> subsort(cat,physobj).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Ontology.e:55
% sort horse: physobj
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Ontology.e',55).
==> subsort(horse,physobj).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Ontology.e:57
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Ontology.e',58).
% sort weapon: physobj
==> subsort(weapon,physobj).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Ontology.e:58
% sort gun: weapon
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Ontology.e',58).
==> subsort(gun,weapon).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Ontology.e:59
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Ontology.e',60).
% sort bomb: weapon
==> subsort(bomb,weapon).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Ontology.e:60
% sort bullet: weapon
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Ontology.e',60).
==> subsort(bullet,weapon).
%; location

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Ontology.e:64
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Ontology.e',65).
% sort location
==> sort(location).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Ontology.e:65
% sort room: location, outside: location
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Ontology.e',65).
==> subsort(room,location).
==> subsort(outside,location).
%; portal

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Ontology.e:69
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Ontology.e',70).
% sort portal
==> sort(portal).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Ontology.e:70
% sort door: portal, staircase: portal
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Ontology.e',70).
==> subsort(door,portal).
==> subsort(staircase,portal).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Ontology.e:71
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Ontology.e',72).
% sort street: portal
==> subsort(street,portal).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Ontology.e:72
% sort track: portal
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Ontology.e',72).
==> subsort(track,portal).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Ontology.e:74
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Ontology.e',75).
% sort building
==> sort(building).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Ontology.e:76
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Ontology.e',77).
% sort fire: object
==> subsort(fire,object).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Ontology.e:77
% sort smoke: physobj
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Ontology.e',77).
==> subsort(smoke,physobj).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Ontology.e:79
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Ontology.e',80).
% sort furniture: physobj
==> subsort(furniture,physobj).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Ontology.e:80
% sort chair: furniture
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Ontology.e',80).
==> subsort(chair,furniture).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Ontology.e:81
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Ontology.e',82).
% sort table: furniture
==> subsort(table,furniture).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Ontology.e:83
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Ontology.e',84).
% sort bill: physobj
==> subsort(bill,physobj).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Ontology.e:84
% sort ticket: physobj
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Ontology.e',84).
==> subsort(ticket,physobj).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Ontology.e:85
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Ontology.e',86).
% sort envelope: physobj
==> subsort(envelope,physobj).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Ontology.e:87
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Ontology.e',88).
% sort text: physobj
==> subsort(text,physobj).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Ontology.e:88
% sort book: text
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Ontology.e',88).
==> subsort(book,text).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Ontology.e:89
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Ontology.e',90).
% sort letter: text
==> subsort(letter,text).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Ontology.e:90
% sort menu: text
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Ontology.e',90).
==> subsort(menu,text).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Ontology.e:92
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Ontology.e',93).
% sort paper: physobj
==> subsort(paper,physobj).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Ontology.e:94
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Ontology.e',95).
% sort content
==> sort(content).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Ontology.e:95
% sort script
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Ontology.e',95).
==> sort(script).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Ontology.e:97
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Ontology.e',98).
% sort container: physobj
==> subsort(container,physobj).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Ontology.e:98
% sort cigarette: physobj
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Ontology.e',98).
==> subsort(cigarette,physobj).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Ontology.e:99
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Ontology.e',100).
% sort ashtray: physobj
==> subsort(ashtray,physobj).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Ontology.e:100
% sort umbrella: physobj
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Ontology.e',100).
==> subsort(umbrella,physobj).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Ontology.e:102
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Ontology.e',103).
% sort pen: physobj
==> subsort(pen,physobj).
%; End of file.
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Ontology.e',105).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e:34
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e',35).
% load answers/Mueller2004c/OTSpaceM.e
:- load_e('answers/Mueller2004c/OTSpaceM.e', changed).
:- if(is_e_toplevel).
 %  load(changed,'answers/Mueller2004c/OTSpaceM.e').
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e:35
% load answers/Mueller2004c/RTSpaceM.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e',35).
:- load_e('answers/Mueller2004c/RTSpaceM.e', changed).
:- if(is_e_toplevel).
 %  load(changed,'answers/Mueller2004c/RTSpaceM.e').
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e:36
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e',37).
% load answers/Mueller2004c/Fire.e
:- load_e('answers/Mueller2004c/Fire.e', changed).
:- if(is_e_toplevel).

 /*  loading(changed,
   	'/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Fire.e').
 */
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; fire
%;
%; agent sets fire to physobj with burn time offset.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Fire.e:14
% event SetFireTo(agent,physobj,fire,offset)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Fire.e',14).
event(setFireTo(agent,physobj,fire,offset)).
==> mpred_prop(setFireTo(agent,physobj,fire,offset),event).
==> meta_argtypes(setFireTo(agent,physobj,fire,offset)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Fire.e:16
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Fire.e',17).
%; An effect axioms states that
%; if an agent sets a fire to a physical object with a burn time,
%; the physical object will be burning with the fire and burn time:
% [agent,physobj,fire,offset,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Fire.e:20
% Initiates(SetFireTo(agent,physobj,fire,offset),
%           Burning(physobj,fire,offset),
%           time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Fire.e:22
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Fire.e',20).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(setFireTo(Agent, Physobj, Fire, Offset),
                    burning(Physobj, Fire, Offset),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Fire.e',20).
axiom(initiates(setFireTo(Agent, Physobj, Fire, Offset), burning(Physobj, Fire, Offset), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Fire.e:24
%; agent puts out fire on physobj.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Fire.e:25
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Fire.e',26).
% event PutOutFire(agent,physobj,fire)
event(putOutFire(agent,physobj,fire)).
==> mpred_prop(putOutFire(agent,physobj,fire),event).
==> meta_argtypes(putOutFire(agent,physobj,fire)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Fire.e:27
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Fire.e',28).
%; An effect axiom states that
%; if an agent puts out a fire on a physical object,
%; the physical object will no longer be burning:
% [agent,physobj,fire,offset,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Fire.e:31
% Terminates(PutOutFire(agent,physobj,fire),
%            Burning(physobj,fire,offset),
%            time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Fire.e:33
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Fire.e',31).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(putOutFire(Agent, Physobj, Fire),
                     burning(Physobj, Fire, Offset),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Fire.e',31).
axiom(terminates(putOutFire(Agent, Physobj, Fire), burning(Physobj, Fire, Offset), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Fire.e:35
%; A precondition axiom states that
%; for an agent to set fire to a physical object,
%; there must be a location such that
%; the agent is at the location and
%; the physical object is at the location:
% [agent,fire,physobj,offset,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Fire.e:41
% Happens(SetFireTo(agent,physobj,fire,offset),time) ->
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Fire.e:42
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Fire.e',41).
% {location}%  HoldsAt(At(agent,location),time) &
%            HoldsAt(At(physobj,location),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Fire.e',43).

 /*  exists([Location],
    happens(setFireTo(Agent, Physobj, Fire, Offset), Time) ->
       holds_at(at(Agent, Location), Time),
       holds_at(at(Physobj, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Fire.e',43).

 /*  not(happens(setFireTo(Agent, Physobj, Fire, Offset), Time)) :-
       (   not(holds_at(at(Agent, Location), Time))
       ;   not(holds_at(at(Physobj, Location), Time))
       ),
       some(Location,
            '$kolem_Fn_151'(Agent,
                            Physobj,
                            Fire,
                            Offset,
                            Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Fire.e',43).

 /*  [(holds_at(neg(at(Agent, Location)), Time);holds_at(neg(at(Physobj, Location)), Time)), some(Location, '$kolem_Fn_151'(Agent, Physobj, Fire, Offset, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(setFireTo(Agent,
                                Physobj,
                                Fire,
                                Offset),
                      Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Fire.e',43).
axiom(not(happens(setFireTo(Agent, Physobj, Fire, Offset), Time)),
   
    [  (holds_at(neg(at(Agent, Location)), Time);holds_at(neg(at(Physobj, Location)), Time)),
      some(Location,
           '$kolem_Fn_151'(Agent,
                           Physobj,
                           Fire,
                           Offset,
                           Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Fire.e',43).

 /*  holds_at(at(Agent, Location), Time) :-
       happens(setFireTo(Agent, Physobj, Fire, Offset),
               Time),
       some(Location,
            '$kolem_Fn_151'(Agent,
                            Physobj,
                            Fire,
                            Offset,
                            Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Fire.e',43).

 /*  [happens(setFireTo(Agent, Physobj, Fire, Offset), Time), some(Location, '$kolem_Fn_151'(Agent, Physobj, Fire, Offset, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(at(Agent, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Fire.e',43).
axiom(holds_at(at(Agent, Location), Time),
   
    [ happens(setFireTo(Agent, Physobj, Fire, Offset),
              Time),
      some(Location,
           '$kolem_Fn_151'(Agent,
                           Physobj,
                           Fire,
                           Offset,
                           Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Fire.e',43).

 /*  holds_at(at(Physobj, Location), Time) :-
       happens(setFireTo(Agent, Physobj, Fire, Offset),
               Time),
       some(Location,
            '$kolem_Fn_151'(Agent,
                            Physobj,
                            Fire,
                            Offset,
                            Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Fire.e',43).

 /*  [happens(setFireTo(Agent, Physobj, Fire, Offset), Time), some(Location, '$kolem_Fn_151'(Agent, Physobj, Fire, Offset, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(at(Physobj, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Fire.e',43).
axiom(holds_at(at(Physobj, Location), Time),
   
    [ happens(setFireTo(Agent, Physobj, Fire, Offset),
              Time),
      some(Location,
           '$kolem_Fn_151'(Agent,
                           Physobj,
                           Fire,
                           Offset,
                           Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Fire.e:45
%; A precondition axiom states that
%; for an agent to put out a fire on a physical object,
%; there must be a location such that
%; the agent is at the location and
%; the physical object is at the location:
% [agent,fire,physobj,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Fire.e:51
% Happens(PutOutFire(agent,physobj,fire),time) ->
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Fire.e:52
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Fire.e',51).
% {location}%  HoldsAt(At(agent,location),time) &
%            HoldsAt(At(physobj,location),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Fire.e',53).

 /*  exists([Location],
    happens(putOutFire(Agent, Physobj, Fire), Time) ->
       holds_at(at(Agent, Location), Time),
       holds_at(at(Physobj, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Fire.e',53).

 /*  not(happens(putOutFire(Agent, Physobj, Fire), Time)) :-
       (   not(holds_at(at(Agent, Location), Time))
       ;   not(holds_at(at(Physobj, Location), Time))
       ),
       some(Location,
            '$kolem_Fn_152'(Agent, Physobj, Fire, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Fire.e',53).

 /*  [(holds_at(neg(at(Agent, Location)), Time);holds_at(neg(at(Physobj, Location)), Time)), some(Location, '$kolem_Fn_152'(Agent, Physobj, Fire, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(putOutFire(Agent, Physobj, Fire),
                      Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Fire.e',53).
axiom(not(happens(putOutFire(Agent, Physobj, Fire), Time)),
   
    [  (holds_at(neg(at(Agent, Location)), Time);holds_at(neg(at(Physobj, Location)), Time)),
      some(Location,
           '$kolem_Fn_152'(Agent, Physobj, Fire, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Fire.e',53).

 /*  holds_at(at(Agent, Location), Time) :-
       happens(putOutFire(Agent, Physobj, Fire), Time),
       some(Location,
            '$kolem_Fn_152'(Agent, Physobj, Fire, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Fire.e',53).

 /*  [happens(putOutFire(Agent, Physobj, Fire), Time), some(Location, '$kolem_Fn_152'(Agent, Physobj, Fire, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(at(Agent, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Fire.e',53).
axiom(holds_at(at(Agent, Location), Time),
   
    [ happens(putOutFire(Agent, Physobj, Fire), Time),
      some(Location,
           '$kolem_Fn_152'(Agent, Physobj, Fire, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Fire.e',53).

 /*  holds_at(at(Physobj, Location), Time) :-
       happens(putOutFire(Agent, Physobj, Fire), Time),
       some(Location,
            '$kolem_Fn_152'(Agent, Physobj, Fire, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Fire.e',53).

 /*  [happens(putOutFire(Agent, Physobj, Fire), Time), some(Location, '$kolem_Fn_152'(Agent, Physobj, Fire, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(at(Physobj, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Fire.e',53).
axiom(holds_at(at(Physobj, Location), Time),
   
    [ happens(putOutFire(Agent, Physobj, Fire), Time),
      some(Location,
           '$kolem_Fn_152'(Agent, Physobj, Fire, Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Fire.e:55
%; physobj is burning with fire and burn time offset.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Fire.e:56
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Fire.e',57).
% fluent Burning(physobj,fire,offset)
fluent(burning(physobj,fire,offset)).
==> mpred_prop(burning(physobj,fire,offset),fluent).
==> meta_argtypes(burning(physobj,fire,offset)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Fire.e:58
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Fire.e',59).
%; A state constraint says that a physical object burning with
%; a fire has at most one burn time at a time:
% [physobj,fire,offset1,offset2,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Fire.e:61
% HoldsAt(Burning(physobj,fire,offset1),time) &
% HoldsAt(Burning(physobj,fire,offset2),time) ->
% offset1=offset2.
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Fire.e:63
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Fire.e',61).

 /*  holds_at(burning(Physobj, Fire, Offset1), Time), holds_at(burning(Physobj, Fire, Offset2), Time) ->
       equals(Offset1, Offset2).
 */

 /*  not(holds_at(burning(Physobj, Fire, Offset1), Time)) :-
       holds_at(burning(Physobj, Fire, Offset2), Time),
       not(equals(Offset1, Offset2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Fire.e',61).

 /*  [holds_at(burning(Physobj, Fire, Offset2), Time), not(equals(Offset1, Offset2))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(burning(Physobj, Fire, Offset1)),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Fire.e',61).
axiom(holds_at(neg(burning(Physobj, Fire, Offset1)), Time),
   
    [ holds_at(burning(Physobj, Fire, Offset2), Time),
      not(equals(Offset1, Offset2))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Fire.e',61).

 /*  not(holds_at(burning(Physobj, Fire, Offset2), Time)) :-
       holds_at(burning(Physobj, Fire, Offset1), Time),
       not(equals(Offset1, Offset2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Fire.e',61).

 /*  [holds_at(burning(Physobj, Fire, Offset1), Time), not(equals(Offset1, Offset2))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(burning(Physobj, Fire, Offset2)),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Fire.e',61).
axiom(holds_at(neg(burning(Physobj, Fire, Offset2)), Time),
   
    [ holds_at(burning(Physobj, Fire, Offset1), Time),
      not(equals(Offset2, Offset1))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Fire.e:65
%; The burn time of physobj is decremented.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Fire.e:66
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Fire.e',67).
% event DecrementBurning(physobj)
event(decrementBurning(physobj)).
==> mpred_prop(decrementBurning(physobj),event).
==> meta_argtypes(decrementBurning(physobj)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Fire.e:68
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Fire.e',69).
%; A trigger axiom states that
%; if a physical object is burning with a fire and a burn time and
%; the burn time is greater than zero,
%; the burn time of the physical object is decremented:
% [physobj,fire,offset,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Fire.e:73
% HoldsAt(Burning(physobj,fire,offset),time) &
% (offset > 0) ->
% Happens(DecrementBurning(physobj),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Fire.e:75
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Fire.e',73).

 /*  holds_at(burning(Physobj, Fire, Offset), Time), Offset>0 ->
       happens(decrementBurning(Physobj), Time).
 */

 /*  happens(decrementBurning(Physobj), Time) :-
       holds_at(burning(Physobj, Fire, Offset), Time),
       comparison(Offset, 0, >).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Fire.e',73).

 /*  [holds_at(burning(Physobj, Fire, Offset), Time), comparison(Offset, 0, >)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(decrementBurning(Physobj), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Fire.e',73).
axiom(happens(decrementBurning(Physobj), Time),
   
    [ holds_at(burning(Physobj, Fire, Offset), Time),
      comparison(Offset, 0, >)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Fire.e',73).

 /*  not(holds_at(burning(Physobj, Fire, Offset), Time)) :-
       comparison(Offset, 0, >),
       not(happens(decrementBurning(Physobj), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Fire.e',73).

 /*  [comparison(Offset, 0, >), not(happens(decrementBurning(Physobj), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(burning(Physobj, Fire, Offset)),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Fire.e',73).
axiom(holds_at(neg(burning(Physobj, Fire, Offset)), Time),
   
    [ comparison(Offset, 0, >),
      not(happens(decrementBurning(Physobj), Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Fire.e:77
%; An effect axiom states that if a physical object is
%; burning with a fire and a burn time, and the burn time of a physical
%; object is decremented, the burn time of the physical
%; object will be the burn time minus one:
% [physobj,fire,offset1,offset2,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Fire.e:82
% HoldsAt(Burning(physobj,fire,offset1),time) &
% offset2 = offset1-1 ->
% Initiates(DecrementBurning(physobj),
%           Burning(physobj,fire,offset2),
%           time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Fire.e:86
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Fire.e',82).

 /*  [holds_at(burning(Physobj, Fire, Offset1), Time), equals(Offset2, Offset1-1)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(decrementBurning(Physobj),
                    burning(Physobj, Fire, Offset2),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Fire.e',82).
axiom(initiates(decrementBurning(Physobj), burning(Physobj, Fire, Offset2), Time),
   
    [ holds_at(burning(Physobj, Fire, Offset1), Time),
      equals(Offset2, Offset1-1)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Fire.e:88
%; An effect axiom states that if a physical object is
%; burning with a fire and a burn time, and the burn time of a physical
%; object is decremented, the burn time of the physical
%; object will no longer be the burn time:
% [physobj,fire,offset,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Fire.e:93
% HoldsAt(Burning(physobj,fire,offset),time) ->
% Terminates(DecrementBurning(physobj),
%            Burning(physobj,fire,offset),
%            time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Fire.e:96
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Fire.e',93).

 /*  [holds_at(burning(Physobj, Fire, Offset), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(decrementBurning(Physobj),
                     burning(Physobj, Fire, Offset),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Fire.e',93).
axiom(terminates(decrementBurning(Physobj), burning(Physobj, Fire, Offset), Time),
    [holds_at(burning(Physobj, Fire, Offset), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Fire.e:98
%; A trigger axiom states that
%; if a physical object is burning with a fire and a burn time
%; that is not equal to zero, the fire will damage the
%; physical object:
% [physobj,fire,offset,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Fire.e:103
% offset!=% 0 &
% HoldsAt(Burning(physobj,fire,offset),time) &
% HoldsAt(Intact(physobj),time) ->
% Happens(Damage(fire,physobj),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Fire.e:106
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Fire.e',103).

 /*  diff(Offset, 0), holds_at(burning(Physobj, Fire, Offset), Time), holds_at(intact(Physobj), Time) ->
       happens(damage(Fire, Physobj), Time).
 */

 /*  happens(damage(Fire, Physobj), Time) :-
       diff(Offset, 0),
       holds_at(burning(Physobj, Fire, Offset), Time),
       holds_at(intact(Physobj), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Fire.e',103).

 /*  [diff(Offset, 0), holds_at(burning(Physobj, Fire, Offset), Time), holds_at(intact(Physobj), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(damage(Fire, Physobj), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Fire.e',103).
axiom(happens(damage(Fire, Physobj), Time),
   
    [ diff(Offset, 0),
      holds_at(burning(Physobj, Fire, Offset), Time),
      holds_at(intact(Physobj), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Fire.e',103).

 /*  not(holds_at(burning(Physobj, Fire, Offset), Time)) :-
       holds_at(intact(Physobj), Time),
       diff(Offset, 0),
       not(happens(damage(Fire, Physobj), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Fire.e',103).

 /*  [holds_at(intact(Physobj), Time), diff(Offset, 0), not(happens(damage(Fire, Physobj), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(burning(Physobj, Fire, Offset)),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Fire.e',103).
axiom(holds_at(neg(burning(Physobj, Fire, Offset)), Time),
   
    [ holds_at(intact(Physobj), Time),
      diff(Offset, 0),
      not(happens(damage(Fire, Physobj), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Fire.e',103).

 /*  not(holds_at(intact(Physobj), Time)) :-
       holds_at(burning(Physobj, Fire, Offset), Time),
       diff(Offset, 0),
       not(happens(damage(Fire, Physobj), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Fire.e',103).

 /*  [holds_at(burning(Physobj, Fire, Offset), Time), diff(Offset, 0), not(happens(damage(Fire, Physobj), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(intact(Physobj)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Fire.e',103).
axiom(holds_at(neg(intact(Physobj)), Time),
   
    [ holds_at(burning(Physobj, Fire, Offset), Time),
      diff(Offset, 0),
      not(happens(damage(Fire, Physobj), Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Fire.e:108
%; A trigger axiom states that
%; if a physical object is burning with a fire and a burn time
%; that is equal to zero, the fire will destroy the
%; physical object:
% [physobj,fire,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Fire.e:113
% HoldsAt(Burning(physobj,fire,0),time) &
% !HoldsAt(Destroyed(physobj),time) ->
% Happens(Destroy(fire,physobj),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Fire.e:115
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Fire.e',113).

 /*  holds_at(burning(Physobj, Fire, 0), Time), holds_at(neg(destroyed(Physobj)), Time) ->
       happens(destroy(Fire, Physobj), Time).
 */

 /*  happens(destroy(Fire, Physobj), Time) :-
       holds_at(burning(Physobj, Fire, 0), Time),
       holds_at(neg(destroyed(Physobj)), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Fire.e',113).

 /*  [holds_at(burning(Physobj, Fire, 0), Time), holds_at(neg(destroyed(Physobj)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(destroy(Fire, Physobj), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Fire.e',113).
axiom(happens(destroy(Fire, Physobj), Time),
   
    [ holds_at(burning(Physobj, Fire, 0), Time),
      holds_at(neg(destroyed(Physobj)), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Fire.e',113).

 /*  not(holds_at(burning(Physobj, Fire, 0), Time)) :-
       holds_at(neg(destroyed(Physobj)), Time),
       not(happens(destroy(Fire, Physobj), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Fire.e',113).

 /*  [holds_at(neg(destroyed(Physobj)), Time), not(happens(destroy(Fire, Physobj), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(burning(Physobj, Fire, 0)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Fire.e',113).
axiom(holds_at(neg(burning(Physobj, Fire, 0)), Time),
   
    [ holds_at(neg(destroyed(Physobj)), Time),
      not(happens(destroy(Fire, Physobj), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Fire.e',113).

 /*  not(holds_at(neg(destroyed(Physobj)), Time)) :-
       holds_at(burning(Physobj, Fire, 0), Time),
       not(happens(destroy(Fire, Physobj), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Fire.e',113).

 /*  [holds_at(burning(Physobj, Fire, 0), Time), not(happens(destroy(Fire, Physobj), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(destroyed(Physobj), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Fire.e',113).
axiom(holds_at(destroyed(Physobj), Time),
   
    [ holds_at(burning(Physobj, Fire, 0), Time),
      not(happens(destroy(Fire, Physobj), Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Fire.e:117
%; An effect axiom states that if a fire destroys a physical
%; object, the physical object will no longer be burning:
% [physobj,fire,offset,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Fire.e:120
% Terminates(Destroy(fire,physobj),
%            Burning(physobj,fire,offset),
%            time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Fire.e:122
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Fire.e',120).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(destroy(Fire, Physobj),
                     burning(Physobj, Fire, Offset),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Fire.e',120).
axiom(terminates(destroy(Fire, Physobj), burning(Physobj, Fire, Offset), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Fire.e:124
%; End of file.
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Fire.e',124).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e:37
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e',38).
% load answers/Mueller2004c/Condition.e
:- load_e('answers/Mueller2004c/Condition.e', changed).
:- if(is_e_toplevel).

 /*  loading(changed,
   	'/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Condition.e').
 */
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; human health

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Condition.e:12
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Condition.e',13).
% fluent Alive(agent)
fluent(alive(agent)).
==> mpred_prop(alive(agent),fluent).
==> meta_argtypes(alive(agent)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Condition.e:14
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Condition.e',15).
% fluent Dead(agent)
fluent(dead(agent)).
==> mpred_prop(dead(agent),fluent).
==> meta_argtypes(dead(agent)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Condition.e:15
% noninertial Dead
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Condition.e',15).
==> noninertial(dead).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Condition.e:17
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Condition.e',18).
% fluent Injured(agent)
fluent(injured(agent)).
==> mpred_prop(injured(agent),fluent).
==> meta_argtypes(injured(agent)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Condition.e:19
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Condition.e',20).
% event Kill(object,agent)
event(kill(object,agent)).
==> mpred_prop(kill(object,agent),event).
==> meta_argtypes(kill(object,agent)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Condition.e:20
% event Injure(object,agent)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Condition.e',20).
event(injure(object,agent)).
==> mpred_prop(injure(object,agent),event).
==> meta_argtypes(injure(object,agent)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Condition.e:21
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Condition.e',22).
% event HealInjured(agent)
event(healInjured(agent)).
==> mpred_prop(healInjured(agent),event).
==> meta_argtypes(healInjured(agent)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Condition.e:23
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Condition.e',24).
% [agent,time]
 % HoldsAt(Alive(agent),time) <-> !HoldsAt(Dead(agent),time).

 /*  holds_at(alive(Agent), Time) <->
       holds_at(neg(dead(Agent)), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Condition.e',24).

 /*  [holds_at, alive] <->
       [holds_at, neg, dead].
 */

 /*  holds_at(alive(Agent), Time) ->
       holds_at(neg(dead(Agent)), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Condition.e',24).

 /*  holds_at(neg(dead(Agent)), Time) :-
       holds_at(alive(Agent), Time).
 */

 /*  [holds_at(alive(Agent), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(dead(Agent)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Condition.e',24).
axiom(holds_at(neg(dead(Agent)), Time),
    [holds_at(alive(Agent), Time)]).

 /*  not(holds_at(alive(Agent), Time)) :-
       not(holds_at(neg(dead(Agent)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Condition.e',24).

 /*  [holds_at(dead(Agent), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(alive(Agent)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Condition.e',24).
axiom(holds_at(neg(alive(Agent)), Time),
    [holds_at(dead(Agent), Time)]).

 /*  holds_at(neg(dead(Agent)), Time) ->
       holds_at(alive(Agent), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Condition.e',24).

 /*  holds_at(alive(Agent), Time) :-
       holds_at(neg(dead(Agent)), Time).
 */

 /*  [holds_at(neg(dead(Agent)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(alive(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Condition.e',24).
axiom(holds_at(alive(Agent), Time),
    [holds_at(neg(dead(Agent)), Time)]).

 /*  not(holds_at(neg(dead(Agent)), Time)) :-
       not(holds_at(alive(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Condition.e',24).

 /*  [holds_at(neg(alive(Agent)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(dead(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Condition.e',24).
axiom(holds_at(dead(Agent), Time),
    [holds_at(neg(alive(Agent)), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Condition.e:24
% [agent,time]
 % HoldsAt(Injured(agent),time) -> HoldsAt(Alive(agent),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Condition.e',24).

 /*  holds_at(injured(Agent), Time) ->
       holds_at(alive(Agent), Time).
 */

 /*  holds_at(alive(Agent), Time) :-
       holds_at(injured(Agent), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Condition.e',24).

 /*  [holds_at(injured(Agent), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(alive(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Condition.e',24).
axiom(holds_at(alive(Agent), Time),
    [holds_at(injured(Agent), Time)]).

 /*  not(holds_at(injured(Agent), Time)) :-
       not(holds_at(alive(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Condition.e',24).

 /*  [holds_at(neg(alive(Agent)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(injured(Agent)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Condition.e',24).
axiom(holds_at(neg(injured(Agent)), Time),
    [holds_at(neg(alive(Agent)), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Condition.e:26
% [object,agent,time]
% Terminates(Kill(object,agent),Alive(agent),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Condition.e',28).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(kill(Object, Agent),
                     alive(Agent),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Condition.e',28).
axiom(terminates(kill(Object, Agent), alive(Agent), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Condition.e:29
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Condition.e',30).
% [object,agent,time]
% Initiates(Injure(object,agent),Injured(agent),time).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(injure(Object, Agent),
                    injured(Agent),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Condition.e',30).
axiom(initiates(injure(Object, Agent), injured(Agent), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Condition.e:32
% [agent,time]
% Terminates(HealInjured(agent),Injured(agent),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Condition.e',34).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(healInjured(Agent), injured(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Condition.e',34).
axiom(terminates(healInjured(Agent), injured(Agent), Time),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Condition.e:35
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Condition.e',36).
% fluent Intact(physobj)
fluent(intact(physobj)).
==> mpred_prop(intact(physobj),fluent).
==> meta_argtypes(intact(physobj)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Condition.e:37
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Condition.e',38).
% fluent Damaged(physobj)
fluent(damaged(physobj)).
==> mpred_prop(damaged(physobj),fluent).
==> meta_argtypes(damaged(physobj)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Condition.e:39
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Condition.e',40).
% fluent Destroyed(physobj)
fluent(destroyed(physobj)).
==> mpred_prop(destroyed(physobj),fluent).
==> meta_argtypes(destroyed(physobj)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Condition.e:41
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Condition.e',42).
%; At any time, a physical object is either intact, damaged, or destroyed:

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Condition.e:42
% xor Intact, Damaged, Destroyed
==> xor([intact,damaged,destroyed]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Condition.e:44
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Condition.e',45).
% event Damage(object,physobj)
event(damage(object,physobj)).
==> mpred_prop(damage(object,physobj),event).
==> meta_argtypes(damage(object,physobj)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Condition.e:46
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Condition.e',47).
% event Destroy(object,physobj)
event(destroy(object,physobj)).
==> mpred_prop(destroy(object,physobj),event).
==> meta_argtypes(destroy(object,physobj)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Condition.e:48
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Condition.e',49).
% event Repair(object,physobj)
event(repair(object,physobj)).
==> mpred_prop(repair(object,physobj),event).
==> meta_argtypes(repair(object,physobj)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Condition.e:50
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Condition.e',51).
% [object,physobj,time]
% Happens(Damage(object,physobj),time) ->
% HoldsAt(Intact(physobj),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Condition.e:52

 /*  happens(damage(Object, Physobj), Time) ->
       holds_at(intact(Physobj), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Condition.e',51).

 /*  holds_at(intact(Physobj), Time) :-
       happens(damage(Object, Physobj), Time).
 */

 /*  [holds_at(metreqs(damage(Object, Physobj)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(damage(Object, Physobj), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Condition.e',51).
axiom(requires(damage(Object, Physobj), Time),
    [holds_at(metreqs(damage(Object, Physobj)), Time)]).

 /*  [holds_at(intact(Physobj), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(damage(Object, Physobj)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Condition.e',51).
axiom(holds_at(metreqs(damage(Object, Physobj)), Time),
    [holds_at(intact(Physobj), Time)]).

 /*  not(happens(damage(Object, Physobj), Time)) :-
       not(holds_at(intact(Physobj), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Condition.e',51).

 /*  [holds_at(neg(intact(Physobj)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(damage(Object, Physobj), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Condition.e',51).
axiom(not(happens(damage(Object, Physobj), Time)),
    [holds_at(neg(intact(Physobj)), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Condition.e:54
% [object,physobj,time]
% Initiates(Damage(object,physobj),Damaged(physobj),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Condition.e',56).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(damage(Object, Physobj),
                    damaged(Physobj),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Condition.e',56).
axiom(initiates(damage(Object, Physobj), damaged(Physobj), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Condition.e:57
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Condition.e',58).
% [object,physobj,time]
% Terminates(Damage(object,physobj),Intact(physobj),time).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(damage(Object, Physobj),
                     intact(Physobj),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Condition.e',58).
axiom(terminates(damage(Object, Physobj), intact(Physobj), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Condition.e:60
% [object,physobj,time]
% Happens(Destroy(object,physobj),time) ->
% (HoldsAt(Intact(physobj),time)|
%  HoldsAt(Damaged(physobj),time)).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Condition.e:63
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Condition.e',62).

 /*  happens(destroy(Object, Physobj), Time) ->
       (   holds_at(intact(Physobj), Time)
       ;   holds_at(damaged(Physobj), Time)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Condition.e',62).

 /*  holds_at(intact(Physobj), Time) :-
       not(holds_at(damaged(Physobj), Time)),
       happens(destroy(Object, Physobj), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Condition.e',62).

 /*  [holds_at(neg(damaged(Physobj)), Time), happens(destroy(Object, Physobj), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(intact(Physobj), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Condition.e',62).
axiom(holds_at(intact(Physobj), Time),
   
    [ holds_at(neg(damaged(Physobj)), Time),
      happens(destroy(Object, Physobj), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Condition.e',62).

 /*  holds_at(damaged(Physobj), Time) :-
       not(holds_at(intact(Physobj), Time)),
       happens(destroy(Object, Physobj), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Condition.e',62).

 /*  [holds_at(neg(intact(Physobj)), Time), happens(destroy(Object, Physobj), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(damaged(Physobj), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Condition.e',62).
axiom(holds_at(damaged(Physobj), Time),
   
    [ holds_at(neg(intact(Physobj)), Time),
      happens(destroy(Object, Physobj), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Condition.e',62).

 /*  not(happens(destroy(Object, Physobj), Time)) :-
       not(holds_at(intact(Physobj), Time)),
       not(holds_at(damaged(Physobj), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Condition.e',62).

 /*  [holds_at(neg(intact(Physobj)), Time), holds_at(neg(damaged(Physobj)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(destroy(Object, Physobj), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Condition.e',62).
axiom(not(happens(destroy(Object, Physobj), Time)),
   
    [ holds_at(neg(intact(Physobj)), Time),
      holds_at(neg(damaged(Physobj)), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Condition.e:65
% [object,physobj,time]
% Initiates(Destroy(object,physobj),Destroyed(physobj),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Condition.e',67).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(destroy(Object, Physobj),
                    destroyed(Physobj),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Condition.e',67).
axiom(initiates(destroy(Object, Physobj), destroyed(Physobj), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Condition.e:68
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Condition.e',69).
% [object,physobj,time]
% Terminates(Destroy(object,physobj),Intact(physobj),time).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(destroy(Object, Physobj),
                     intact(Physobj),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Condition.e',69).
axiom(terminates(destroy(Object, Physobj), intact(Physobj), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Condition.e:71
% [object,physobj,time]
% Terminates(Destroy(object,physobj),Damaged(physobj),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Condition.e',73).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(destroy(Object, Physobj),
                     damaged(Physobj),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Condition.e',73).
axiom(terminates(destroy(Object, Physobj), damaged(Physobj), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Condition.e:74
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Condition.e',75).
% [object,physobj,time]
% Initiates(Repair(object,physobj),Intact(physobj),time).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(repair(Object, Physobj),
                    intact(Physobj),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Condition.e',75).
axiom(initiates(repair(Object, Physobj), intact(Physobj), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Condition.e:77
%; end of file.
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Condition.e',77).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e:38
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e',39).
% load answers/Mueller2003/Sleep.e
:- load_e('answers/Mueller2003/Sleep.e', changed).
:- if(is_e_toplevel).

 /*  loading(changed,
   	'/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e').
 */
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; The Sleep representation deals with the activity of sleeping and
%; body posture.
%; It is similar to the finite automaton representation of sleep
%; used in ThoughtTreasure \fullcite[chap. 7]{Mueller:1998}.
%;
%; @book{Mueller:1998,
%;   author = "Erik T. Mueller",
%;   year = "1998",
%;   title = "Natural Language Processing with \uppercase{T}hought\uppercase{T}reasure",
%;   address = "New York",
%;   publisher = "Signiform",
%; }
%;
%; sleep
%; agent wakes up.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e:27
% event WakeUp(agent)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',27).
event(wakeUp(agent)).
==> mpred_prop(wakeUp(agent),event).
==> meta_argtypes(wakeUp(agent)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e:29
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',30).
%; agent gets tired.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e:30
% event GetTired(agent)
event(getTired(agent)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',30).
==> mpred_prop(getTired(agent),event).
==> meta_argtypes(getTired(agent)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e:32
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',33).
%; agent falls asleep.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e:33
% event FallAsleep(agent)
event(fallAsleep(agent)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',33).
==> mpred_prop(fallAsleep(agent),event).
==> meta_argtypes(fallAsleep(agent)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e:35
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',36).
%; agent is asleep.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e:36
% fluent Sleep0(agent)
fluent(sleep0(agent)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',36).
==> mpred_prop(sleep0(agent),fluent).
==> meta_argtypes(sleep0(agent)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e:37
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',36).
%; agent is awake and in bed.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e:38
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',39).
% fluent Sleep1(agent)
fluent(sleep1(agent)).
==> mpred_prop(sleep1(agent),fluent).
==> meta_argtypes(sleep1(agent)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e:39
%; agent is awake, out of bed, and undressed.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e:40
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',41).
% fluent Sleep2(agent)
fluent(sleep2(agent)).
==> mpred_prop(sleep2(agent),fluent).
==> meta_argtypes(sleep2(agent)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e:41
%; agent is awake and dressed.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e:42
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',43).
% fluent Sleep3(agent)
fluent(sleep3(agent)).
==> mpred_prop(sleep3(agent),fluent).
==> meta_argtypes(sleep3(agent)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e:43
%; agent is tired and dressed.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e:44
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',45).
% fluent Sleep4(agent)
fluent(sleep4(agent)).
==> mpred_prop(sleep4(agent),fluent).
==> meta_argtypes(sleep4(agent)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e:45
%; agent is tired and undressed.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e:46
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',47).
% fluent Sleep5(agent)
fluent(sleep5(agent)).
==> mpred_prop(sleep5(agent),fluent).
==> meta_argtypes(sleep5(agent)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e:47
%; agent is in bed, waiting to fall asleep.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e:48
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',49).
% fluent Sleep6(agent)
fluent(sleep6(agent)).
==> mpred_prop(sleep6(agent),fluent).
==> meta_argtypes(sleep6(agent)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e:50
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',51).
%; At any time, an agent is in one of seven sleep states:

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e:51
% xor Sleep0, Sleep1, Sleep2, Sleep3, Sleep4, Sleep5, Sleep6
==> xor([sleep0,sleep1,sleep2,sleep3,sleep4,sleep5,sleep6]).
%; constraints
%; agent is asleep.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e:56
% fluent Asleep(agent)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',56).
fluent(asleep(agent)).
==> mpred_prop(asleep(agent),fluent).
==> meta_argtypes(asleep(agent)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e:57
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',56).
%; agent is awake.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e:58
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',59).
% fluent Awake(agent)
fluent(awake(agent)).
==> mpred_prop(awake(agent),fluent).
==> meta_argtypes(awake(agent)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e:59
% noninertial Asleep
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',59).
==> noninertial(asleep).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e:60
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',61).
% noninertial Awake
==> noninertial(awake).
%; Sleep0 indicates that the agent is asleep:
% [agent,time]
 
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e:63
% HoldsAt(Asleep(agent),time) <-> HoldsAt(Sleep0(agent),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',63).

 /*  holds_at(asleep(Agent), Time) <->
       holds_at(sleep0(Agent), Time).
 */

 /*  [holds_at, asleep] <->
       [holds_at, sleep0].
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',63).

 /*  holds_at(asleep(Agent), Time) ->
       holds_at(sleep0(Agent), Time).
 */

 /*  holds_at(sleep0(Agent), Time) :-
       holds_at(asleep(Agent), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',63).

 /*  [holds_at(asleep(Agent), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(sleep0(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',63).
axiom(holds_at(sleep0(Agent), Time),
    [holds_at(asleep(Agent), Time)]).

 /*  not(holds_at(asleep(Agent), Time)) :-
       not(holds_at(sleep0(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',63).

 /*  [holds_at(neg(sleep0(Agent)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(asleep(Agent)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',63).
axiom(holds_at(neg(asleep(Agent)), Time),
    [holds_at(neg(sleep0(Agent)), Time)]).

 /*  holds_at(sleep0(Agent), Time) ->
       holds_at(asleep(Agent), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',63).

 /*  holds_at(asleep(Agent), Time) :-
       holds_at(sleep0(Agent), Time).
 */

 /*  [holds_at(sleep0(Agent), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(asleep(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',63).
axiom(holds_at(asleep(Agent), Time),
    [holds_at(sleep0(Agent), Time)]).

 /*  not(holds_at(sleep0(Agent), Time)) :-
       not(holds_at(asleep(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',63).

 /*  [holds_at(neg(asleep(Agent)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(sleep0(Agent)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',63).
axiom(holds_at(neg(sleep0(Agent)), Time),
    [holds_at(neg(asleep(Agent)), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e:65
%; In all other sleep states, the agent is awake:
% [agent,time]
% HoldsAt(Awake(agent),time) <->
% HoldsAt(Sleep1(agent),time) |
% HoldsAt(Sleep2(agent),time) |
% HoldsAt(Sleep3(agent),time) |
% HoldsAt(Sleep4(agent),time) |
% HoldsAt(Sleep5(agent),time) |
% HoldsAt(Sleep6(agent),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e:73
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',67).

 /*  holds_at(awake(Agent), Time) <->
       (   holds_at(sleep1(Agent), Time)
       ;   holds_at(sleep2(Agent), Time)
       ;   holds_at(sleep3(Agent), Time)
       ;   holds_at(sleep4(Agent), Time)
       ;   holds_at(sleep5(Agent), Time)
       ;   holds_at(sleep6(Agent), Time)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',67).

 /*  [holds_at, awake] <->
       
       [  (;),
         holds_at,
         sleep1,
          (;),
         holds_at,
         sleep2,
          (;),
         holds_at,
         sleep3,
          (;),
         holds_at,
         sleep4,
          (;),
         holds_at,
         sleep5,
         holds_at,
         sleep6
       ].
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',67).

 /*  holds_at(awake(Agent), Time) ->
       (   holds_at(sleep1(Agent), Time)
       ;   holds_at(sleep2(Agent), Time)
       ;   holds_at(sleep3(Agent), Time)
       ;   holds_at(sleep4(Agent), Time)
       ;   holds_at(sleep5(Agent), Time)
       ;   holds_at(sleep6(Agent), Time)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',67).

 /*  holds_at(sleep1(Agent), Time) :-
       ( not(holds_at(sleep2(Agent), Time)),
         not(holds_at(sleep3(Agent), Time)),
         not(holds_at(sleep4(Agent), Time)),
         not(holds_at(sleep5(Agent), Time)),
         not(holds_at(sleep6(Agent), Time))
       ),
       holds_at(awake(Agent), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',67).

 /*  [holds_at(neg(sleep2(Agent)), Time), holds_at(neg(sleep3(Agent)), Time), holds_at(neg(sleep4(Agent)), Time), holds_at(neg(sleep5(Agent)), Time), holds_at(neg(sleep6(Agent)), Time), holds_at(awake(Agent), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(sleep1(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',67).
axiom(holds_at(sleep1(Agent), Time),
   
    [ holds_at(neg(sleep2(Agent)), Time),
      holds_at(neg(sleep3(Agent)), Time),
      holds_at(neg(sleep4(Agent)), Time),
      holds_at(neg(sleep5(Agent)), Time),
      holds_at(neg(sleep6(Agent)), Time),
      holds_at(awake(Agent), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',67).

 /*  holds_at(sleep2(Agent), Time) :-
       ( not(holds_at(sleep3(Agent), Time)),
         not(holds_at(sleep4(Agent), Time)),
         not(holds_at(sleep5(Agent), Time)),
         not(holds_at(sleep6(Agent), Time))
       ),
       not(holds_at(sleep1(Agent), Time)),
       holds_at(awake(Agent), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',67).

 /*  [holds_at(neg(sleep3(Agent)), Time), holds_at(neg(sleep4(Agent)), Time), holds_at(neg(sleep5(Agent)), Time), holds_at(neg(sleep6(Agent)), Time), holds_at(neg(sleep1(Agent)), Time), holds_at(awake(Agent), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(sleep2(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',67).
axiom(holds_at(sleep2(Agent), Time),
   
    [ holds_at(neg(sleep3(Agent)), Time),
      holds_at(neg(sleep4(Agent)), Time),
      holds_at(neg(sleep5(Agent)), Time),
      holds_at(neg(sleep6(Agent)), Time),
      holds_at(neg(sleep1(Agent)), Time),
      holds_at(awake(Agent), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',67).

 /*  holds_at(sleep3(Agent), Time) :-
       ( not(holds_at(sleep4(Agent), Time)),
         not(holds_at(sleep5(Agent), Time)),
         not(holds_at(sleep6(Agent), Time))
       ),
       not(holds_at(sleep2(Agent), Time)),
       not(holds_at(sleep1(Agent), Time)),
       holds_at(awake(Agent), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',67).

 /*  [holds_at(neg(sleep4(Agent)), Time), holds_at(neg(sleep5(Agent)), Time), holds_at(neg(sleep6(Agent)), Time), holds_at(neg(sleep2(Agent)), Time), holds_at(neg(sleep1(Agent)), Time), holds_at(awake(Agent), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(sleep3(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',67).
axiom(holds_at(sleep3(Agent), Time),
   
    [ holds_at(neg(sleep4(Agent)), Time),
      holds_at(neg(sleep5(Agent)), Time),
      holds_at(neg(sleep6(Agent)), Time),
      holds_at(neg(sleep2(Agent)), Time),
      holds_at(neg(sleep1(Agent)), Time),
      holds_at(awake(Agent), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',67).

 /*  holds_at(sleep4(Agent), Time) :-
       ( not(holds_at(sleep5(Agent), Time)),
         not(holds_at(sleep6(Agent), Time))
       ),
       not(holds_at(sleep3(Agent), Time)),
       not(holds_at(sleep2(Agent), Time)),
       not(holds_at(sleep1(Agent), Time)),
       holds_at(awake(Agent), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',67).

 /*  [holds_at(neg(sleep5(Agent)), Time), holds_at(neg(sleep6(Agent)), Time), holds_at(neg(sleep3(Agent)), Time), holds_at(neg(sleep2(Agent)), Time), holds_at(neg(sleep1(Agent)), Time), holds_at(awake(Agent), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(sleep4(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',67).
axiom(holds_at(sleep4(Agent), Time),
   
    [ holds_at(neg(sleep5(Agent)), Time),
      holds_at(neg(sleep6(Agent)), Time),
      holds_at(neg(sleep3(Agent)), Time),
      holds_at(neg(sleep2(Agent)), Time),
      holds_at(neg(sleep1(Agent)), Time),
      holds_at(awake(Agent), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',67).

 /*  holds_at(sleep5(Agent), Time) :-
       not(holds_at(sleep6(Agent), Time)),
       not(holds_at(sleep4(Agent), Time)),
       not(holds_at(sleep3(Agent), Time)),
       not(holds_at(sleep2(Agent), Time)),
       not(holds_at(sleep1(Agent), Time)),
       holds_at(awake(Agent), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',67).

 /*  [holds_at(neg(sleep6(Agent)), Time), holds_at(neg(sleep4(Agent)), Time), holds_at(neg(sleep3(Agent)), Time), holds_at(neg(sleep2(Agent)), Time), holds_at(neg(sleep1(Agent)), Time), holds_at(awake(Agent), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(sleep5(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',67).
axiom(holds_at(sleep5(Agent), Time),
   
    [ holds_at(neg(sleep6(Agent)), Time),
      holds_at(neg(sleep4(Agent)), Time),
      holds_at(neg(sleep3(Agent)), Time),
      holds_at(neg(sleep2(Agent)), Time),
      holds_at(neg(sleep1(Agent)), Time),
      holds_at(awake(Agent), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',67).

 /*  holds_at(sleep6(Agent), Time) :-
       not(holds_at(sleep5(Agent), Time)),
       not(holds_at(sleep4(Agent), Time)),
       not(holds_at(sleep3(Agent), Time)),
       not(holds_at(sleep2(Agent), Time)),
       not(holds_at(sleep1(Agent), Time)),
       holds_at(awake(Agent), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',67).

 /*  [holds_at(neg(sleep5(Agent)), Time), holds_at(neg(sleep4(Agent)), Time), holds_at(neg(sleep3(Agent)), Time), holds_at(neg(sleep2(Agent)), Time), holds_at(neg(sleep1(Agent)), Time), holds_at(awake(Agent), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(sleep6(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',67).
axiom(holds_at(sleep6(Agent), Time),
   
    [ holds_at(neg(sleep5(Agent)), Time),
      holds_at(neg(sleep4(Agent)), Time),
      holds_at(neg(sleep3(Agent)), Time),
      holds_at(neg(sleep2(Agent)), Time),
      holds_at(neg(sleep1(Agent)), Time),
      holds_at(awake(Agent), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',67).

 /*  not(holds_at(awake(Agent), Time)) :-
       not(holds_at(sleep1(Agent), Time)),
       not(holds_at(sleep2(Agent), Time)),
       not(holds_at(sleep3(Agent), Time)),
       not(holds_at(sleep4(Agent), Time)),
       not(holds_at(sleep5(Agent), Time)),
       not(holds_at(sleep6(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',67).

 /*  [holds_at(neg(sleep1(Agent)), Time), holds_at(neg(sleep2(Agent)), Time), holds_at(neg(sleep3(Agent)), Time), holds_at(neg(sleep4(Agent)), Time), holds_at(neg(sleep5(Agent)), Time), holds_at(neg(sleep6(Agent)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(awake(Agent)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',67).
axiom(holds_at(neg(awake(Agent)), Time),
   
    [ holds_at(neg(sleep1(Agent)), Time),
      holds_at(neg(sleep2(Agent)), Time),
      holds_at(neg(sleep3(Agent)), Time),
      holds_at(neg(sleep4(Agent)), Time),
      holds_at(neg(sleep5(Agent)), Time),
      holds_at(neg(sleep6(Agent)), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',67).

 /*  holds_at(sleep1(Agent), Time);holds_at(sleep2(Agent), Time);holds_at(sleep3(Agent), Time);holds_at(sleep4(Agent), Time);holds_at(sleep5(Agent), Time);holds_at(sleep6(Agent), Time) ->
       holds_at(awake(Agent), Time).
 */

 /*  holds_at(awake(Agent), Time) :-
       (   holds_at(sleep1(Agent), Time)
       ;   holds_at(sleep2(Agent), Time)
       ;   holds_at(sleep3(Agent), Time)
       ;   holds_at(sleep4(Agent), Time)
       ;   holds_at(sleep5(Agent), Time)
       ;   holds_at(sleep6(Agent), Time)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',67).

 /*  [(holds_at(sleep1(Agent), Time);holds_at(sleep2(Agent), Time);holds_at(sleep3(Agent), Time);holds_at(sleep4(Agent), Time);holds_at(sleep5(Agent), Time);holds_at(sleep6(Agent), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(awake(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',67).
axiom(holds_at(awake(Agent), Time),
   
    [  (holds_at(sleep1(Agent), Time);holds_at(sleep2(Agent), Time);holds_at(sleep3(Agent), Time);holds_at(sleep4(Agent), Time);holds_at(sleep5(Agent), Time);holds_at(sleep6(Agent), Time))
    ]).

 /*  not(holds_at(sleep1(Agent), Time)) :-
       not(holds_at(awake(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',67).

 /*  [holds_at(neg(awake(Agent)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(sleep1(Agent)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',67).
axiom(holds_at(neg(sleep1(Agent)), Time),
    [holds_at(neg(awake(Agent)), Time)]).

 /*  not(holds_at(sleep2(Agent), Time)) :-
       not(holds_at(awake(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',67).

 /*  [holds_at(neg(awake(Agent)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(sleep2(Agent)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',67).
axiom(holds_at(neg(sleep2(Agent)), Time),
    [holds_at(neg(awake(Agent)), Time)]).

 /*  not(holds_at(sleep3(Agent), Time)) :-
       not(holds_at(awake(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',67).

 /*  [holds_at(neg(awake(Agent)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(sleep3(Agent)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',67).
axiom(holds_at(neg(sleep3(Agent)), Time),
    [holds_at(neg(awake(Agent)), Time)]).

 /*  not(holds_at(sleep4(Agent), Time)) :-
       not(holds_at(awake(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',67).

 /*  [holds_at(neg(awake(Agent)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(sleep4(Agent)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',67).
axiom(holds_at(neg(sleep4(Agent)), Time),
    [holds_at(neg(awake(Agent)), Time)]).

 /*  not(holds_at(sleep5(Agent), Time)) :-
       not(holds_at(awake(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',67).

 /*  [holds_at(neg(awake(Agent)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(sleep5(Agent)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',67).
axiom(holds_at(neg(sleep5(Agent)), Time),
    [holds_at(neg(awake(Agent)), Time)]).

 /*  not(holds_at(sleep6(Agent), Time)) :-
       not(holds_at(awake(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',67).

 /*  [holds_at(neg(awake(Agent)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(sleep6(Agent)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',67).
axiom(holds_at(neg(sleep6(Agent)), Time),
    [holds_at(neg(awake(Agent)), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e:75
%; A number of axioms are used to specify the transitions of
%; a finite automaton.
%;--
%; Waking up causes a transition from Sleep0
%; to Sleep1:
% [agent,time]
 
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e:81
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',82).
% Terminates(WakeUp(agent),Sleep0(agent),time).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(wakeUp(Agent), sleep0(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',82).
axiom(terminates(wakeUp(Agent), sleep0(Agent), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e:83
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',84).
% [agent,time]
 % Initiates(WakeUp(agent),Sleep1(agent),time).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(wakeUp(Agent), sleep1(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',84).
axiom(initiates(wakeUp(Agent), sleep1(Agent), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e:85
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',86).
% [agent,time]
 % Happens(WakeUp(agent),time) -> HoldsAt(Sleep0(agent),time).

 /*  happens(wakeUp(Agent), Time) ->
       holds_at(sleep0(Agent), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',86).

 /*  holds_at(sleep0(Agent), Time) :-
       happens(wakeUp(Agent), Time).
 */

 /*  [holds_at(metreqs(wakeUp(Agent)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(wakeUp(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',86).
axiom(requires(wakeUp(Agent), Time),
    [holds_at(metreqs(wakeUp(Agent)), Time)]).

 /*  [holds_at(sleep0(Agent), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(wakeUp(Agent)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',86).
axiom(holds_at(metreqs(wakeUp(Agent)), Time),
    [holds_at(sleep0(Agent), Time)]).

 /*  not(happens(wakeUp(Agent), Time)) :-
       not(holds_at(sleep0(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',86).

 /*  [holds_at(neg(sleep0(Agent)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(wakeUp(Agent), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',86).
axiom(not(happens(wakeUp(Agent), Time)),
    [holds_at(neg(sleep0(Agent)), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e:87
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',88).
%;--
%; Getting out of bed causes a transition from Sleep1
%; to Sleep2:
% [agent,bed,time]
 
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e:91
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',92).
% Terminates(RiseFrom(agent,bed),Sleep1(agent),time).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(riseFrom(Agent, Bed),
                     sleep1(Agent),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',92).
axiom(terminates(riseFrom(Agent, Bed), sleep1(Agent), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e:93
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',94).
% [agent,bed,time]
 % Initiates(RiseFrom(agent,bed),Sleep2(agent),time).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(riseFrom(Agent, Bed),
                    sleep2(Agent),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',94).
axiom(initiates(riseFrom(Agent, Bed), sleep2(Agent), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e:95
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',96).
% [agent,bed,time]
% Happens(RiseFrom(agent,bed),time) -> HoldsAt(Sleep1(agent),time).

 /*  happens(riseFrom(Agent, Bed), Time) ->
       holds_at(sleep1(Agent), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',96).

 /*  holds_at(sleep1(Agent), Time) :-
       happens(riseFrom(Agent, Bed), Time).
 */

 /*  [holds_at(metreqs(riseFrom(Agent, Bed)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(riseFrom(Agent, Bed), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',96).
axiom(requires(riseFrom(Agent, Bed), Time),
    [holds_at(metreqs(riseFrom(Agent, Bed)), Time)]).

 /*  [holds_at(sleep1(Agent), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(riseFrom(Agent, Bed)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',96).
axiom(holds_at(metreqs(riseFrom(Agent, Bed)), Time),
    [holds_at(sleep1(Agent), Time)]).

 /*  not(happens(riseFrom(Agent, Bed), Time)) :-
       not(holds_at(sleep1(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',96).

 /*  [holds_at(neg(sleep1(Agent)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(riseFrom(Agent, Bed), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',96).
axiom(not(happens(riseFrom(Agent, Bed), Time)),
    [holds_at(neg(sleep1(Agent)), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e:98
%;--
%; Getting dressed causes a transition from Sleep2
%; to Sleep3, the normal state of awakeness:
% [agent,time]
 
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e:102
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',103).
% Terminates(GetDressed(agent),Sleep2(agent),time).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(getDressed(Agent), sleep2(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',103).
axiom(terminates(getDressed(Agent), sleep2(Agent), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e:104
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',105).
% [agent,time]
 % Initiates(GetDressed(agent),Sleep3(agent),time).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(getDressed(Agent), sleep3(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',105).
axiom(initiates(getDressed(Agent), sleep3(Agent), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e:106
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',107).
% [agent,time]
 % Happens(GetDressed(agent),time) -> HoldsAt(Sleep2(agent),time).

 /*  happens(getDressed(Agent), Time) ->
       holds_at(sleep2(Agent), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',107).

 /*  holds_at(sleep2(Agent), Time) :-
       happens(getDressed(Agent), Time).
 */

 /*  [holds_at(metreqs(getDressed(Agent)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(getDressed(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',107).
axiom(requires(getDressed(Agent), Time),
    [holds_at(metreqs(getDressed(Agent)), Time)]).

 /*  [holds_at(sleep2(Agent), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(getDressed(Agent)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',107).
axiom(holds_at(metreqs(getDressed(Agent)), Time),
    [holds_at(sleep2(Agent), Time)]).

 /*  not(happens(getDressed(Agent), Time)) :-
       not(holds_at(sleep2(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',107).

 /*  [holds_at(neg(sleep2(Agent)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(getDressed(Agent), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',107).
axiom(not(happens(getDressed(Agent), Time)),
    [holds_at(neg(sleep2(Agent)), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e:108
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',109).
%;--
%; Getting tired causes a transition from Sleep3
%; to Sleep4:
% [agent,time]
 
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e:112
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',113).
% Terminates(GetTired(agent),Sleep3(agent),time).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(getTired(Agent), sleep3(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',113).
axiom(terminates(getTired(Agent), sleep3(Agent), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e:114
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',115).
% [agent,time]
 % Initiates(GetTired(agent),Sleep4(agent),time).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(getTired(Agent), sleep4(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',115).
axiom(initiates(getTired(Agent), sleep4(Agent), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e:116
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',117).
% [agent,time]
 % Happens(GetTired(agent),time) -> HoldsAt(Sleep3(agent),time).

 /*  happens(getTired(Agent), Time) ->
       holds_at(sleep3(Agent), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',117).

 /*  holds_at(sleep3(Agent), Time) :-
       happens(getTired(Agent), Time).
 */

 /*  [holds_at(metreqs(getTired(Agent)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(getTired(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',117).
axiom(requires(getTired(Agent), Time),
    [holds_at(metreqs(getTired(Agent)), Time)]).

 /*  [holds_at(sleep3(Agent), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(getTired(Agent)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',117).
axiom(holds_at(metreqs(getTired(Agent)), Time),
    [holds_at(sleep3(Agent), Time)]).

 /*  not(happens(getTired(Agent), Time)) :-
       not(holds_at(sleep3(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',117).

 /*  [holds_at(neg(sleep3(Agent)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(getTired(Agent), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',117).
axiom(not(happens(getTired(Agent), Time)),
    [holds_at(neg(sleep3(Agent)), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e:118
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',119).
%;--
%; Getting undressed causes a transition from Sleep4
%; to Sleep5:
% [agent,time]
 
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e:122
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',123).
% Terminates(GetUndressed(agent),Sleep4(agent),time).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(getUndressed(Agent), sleep4(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',123).
axiom(terminates(getUndressed(Agent), sleep4(Agent), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e:124
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',125).
% [agent,time]
 % Initiates(GetUndressed(agent),Sleep5(agent),time).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(getUndressed(Agent), sleep5(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',125).
axiom(initiates(getUndressed(Agent), sleep5(Agent), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e:126
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',127).
% [agent,time]
 % Happens(GetUndressed(agent),time) -> HoldsAt(Sleep4(agent),time).

 /*  happens(getUndressed(Agent), Time) ->
       holds_at(sleep4(Agent), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',127).

 /*  holds_at(sleep4(Agent), Time) :-
       happens(getUndressed(Agent), Time).
 */

 /*  [holds_at(metreqs(getUndressed(Agent)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(getUndressed(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',127).
axiom(requires(getUndressed(Agent), Time),
    [holds_at(metreqs(getUndressed(Agent)), Time)]).

 /*  [holds_at(sleep4(Agent), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(getUndressed(Agent)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',127).
axiom(holds_at(metreqs(getUndressed(Agent)), Time),
    [holds_at(sleep4(Agent), Time)]).

 /*  not(happens(getUndressed(Agent), Time)) :-
       not(holds_at(sleep4(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',127).

 /*  [holds_at(neg(sleep4(Agent)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(getUndressed(Agent), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',127).
axiom(not(happens(getUndressed(Agent), Time)),
    [holds_at(neg(sleep4(Agent)), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e:128
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',129).
%;--
%; Lying on a bed causes a transition from Sleep5
%; to Sleep6:
% [agent,bed,time]
 
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e:132
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',133).
% Terminates(LieOn(agent,bed),Sleep5(agent),time).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(lieOn(Agent, Bed), sleep5(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',133).
axiom(terminates(lieOn(Agent, Bed), sleep5(Agent), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e:134
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',135).
% [agent,bed,time]
 % Initiates(LieOn(agent,bed),Sleep6(agent),time).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(lieOn(Agent, Bed), sleep6(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',135).
axiom(initiates(lieOn(Agent, Bed), sleep6(Agent), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e:136
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',137).
% [agent,bed,time]
 % Happens(LieOn(agent,bed),time) -> HoldsAt(Sleep5(agent),time).

 /*  happens(lieOn(Agent, Bed), Time) ->
       holds_at(sleep5(Agent), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',137).

 /*  holds_at(sleep5(Agent), Time) :-
       happens(lieOn(Agent, Bed), Time).
 */

 /*  [holds_at(metreqs(lieOn(Agent, Bed)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(lieOn(Agent, Bed), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',137).
axiom(requires(lieOn(Agent, Bed), Time),
    [holds_at(metreqs(lieOn(Agent, Bed)), Time)]).

 /*  [holds_at(sleep5(Agent), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(lieOn(Agent, Bed)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',137).
axiom(holds_at(metreqs(lieOn(Agent, Bed)), Time),
    [holds_at(sleep5(Agent), Time)]).

 /*  not(happens(lieOn(Agent, Bed), Time)) :-
       not(holds_at(sleep5(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',137).

 /*  [holds_at(neg(sleep5(Agent)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(lieOn(Agent, Bed), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',137).
axiom(not(happens(lieOn(Agent, Bed), Time)),
    [holds_at(neg(sleep5(Agent)), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e:138
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',139).
%;--
%; Falling asleep causes a transition from Sleep6
%; to Sleep0:
% [agent,time]
 
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e:142
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',143).
% Terminates(FallAsleep(agent),Sleep6(agent),time).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(fallAsleep(Agent), sleep6(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',143).
axiom(terminates(fallAsleep(Agent), sleep6(Agent), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e:144
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',145).
% [agent,time]
 % Initiates(FallAsleep(agent),Sleep0(agent),time).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(fallAsleep(Agent), sleep0(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',145).
axiom(initiates(fallAsleep(Agent), sleep0(Agent), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e:146
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',147).
% [agent,time]
 % Happens(FallAsleep(agent),time) -> HoldsAt(Sleep6(agent),time).

 /*  happens(fallAsleep(Agent), Time) ->
       holds_at(sleep6(Agent), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',147).

 /*  holds_at(sleep6(Agent), Time) :-
       happens(fallAsleep(Agent), Time).
 */

 /*  [holds_at(metreqs(fallAsleep(Agent)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(fallAsleep(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',147).
axiom(requires(fallAsleep(Agent), Time),
    [holds_at(metreqs(fallAsleep(Agent)), Time)]).

 /*  [holds_at(sleep6(Agent), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(fallAsleep(Agent)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',147).
axiom(holds_at(metreqs(fallAsleep(Agent)), Time),
    [holds_at(sleep6(Agent), Time)]).

 /*  not(happens(fallAsleep(Agent), Time)) :-
       not(holds_at(sleep6(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',147).

 /*  [holds_at(neg(sleep6(Agent)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(fallAsleep(Agent), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',147).
axiom(not(happens(fallAsleep(Agent), Time)),
    [holds_at(neg(sleep6(Agent)), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e:148
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',149).
%;--
%; agent acts on being in state Sleep5.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e:151
% fluent ActOnSleep5(agent)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',151).
fluent(actOnSleep5(agent)).
==> mpred_prop(actOnSleep5(agent),fluent).
==> meta_argtypes(actOnSleep5(agent)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e:152
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',153).
% noninertial ActOnSleep5
==> noninertial(actOnSleep5).
%; We reduce the number of models by asserting that
%; an agent only acts on being in state Sleep5 while in
%; that state:
% [agent,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e:158
% !HoldsAt(Sleep5(agent),time) ->
% !HoldsAt(ActOnSleep5(agent),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',158).

 /*  holds_at(neg(sleep5(Agent)), Time) ->
       holds_at(neg(actOnSleep5(Agent)), Time).
 */

 /*  holds_at(neg(actOnSleep5(Agent)), Time) :-
       holds_at(neg(sleep5(Agent)), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',158).

 /*  [holds_at(neg(sleep5(Agent)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(actOnSleep5(Agent)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',158).
axiom(holds_at(neg(actOnSleep5(Agent)), Time),
    [holds_at(neg(sleep5(Agent)), Time)]).

 /*  not(holds_at(neg(sleep5(Agent)), Time)) :-
       not(holds_at(neg(actOnSleep5(Agent)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',158).

 /*  [holds_at(actOnSleep5(Agent), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(sleep5(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',158).
axiom(holds_at(sleep5(Agent), Time),
    [holds_at(actOnSleep5(Agent), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e:161
%; Undressed is like IntentionToPlay
%; ActOnSleep5 is like ActOnIntentionToPlay
%; A trigger axiom states that if an agent is in state Sleep5,
%; the agent acts on this state, the agent is in a room, and
%; a bed is at the room, the agent lies on the bed:
% [agent,room,bed,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e:168
% HoldsAt(Sleep5(agent),time) &
% HoldsAt(ActOnSleep5(agent),time) &
% HoldsAt(At(agent,room),time) &
% HoldsAt(At(bed,room),time) ->
% Happens(LieOn(agent,bed),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e:172
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',168).

 /*  holds_at(sleep5(Agent), Time), holds_at(actOnSleep5(Agent), Time), holds_at(at(Agent, Room), Time), holds_at(at(Bed, Room), Time) ->
       happens(lieOn(Agent, Bed), Time).
 */

 /*  happens(lieOn(Agent, Bed), Time) :-
       holds_at(sleep5(Agent), Time),
       holds_at(actOnSleep5(Agent), Time),
       holds_at(at(Agent, Room), Time),
       holds_at(at(Bed, Room), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',168).

 /*  [holds_at(sleep5(Agent), Time), holds_at(actOnSleep5(Agent), Time), holds_at(at(Agent, Room), Time), holds_at(at(Bed, Room), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(lieOn(Agent, Bed), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',168).
axiom(happens(lieOn(Agent, Bed), Time),
   
    [ holds_at(sleep5(Agent), Time),
      holds_at(actOnSleep5(Agent), Time),
      holds_at(at(Agent, Room), Time),
      holds_at(at(Bed, Room), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',168).

 /*  not(holds_at(sleep5(Agent), Time)) :-
       ( holds_at(actOnSleep5(Agent), Time),
         holds_at(at(Agent, Room), Time),
         holds_at(at(Bed, Room), Time)
       ),
       not(happens(lieOn(Agent, Bed), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',168).

 /*  [holds_at(actOnSleep5(Agent), Time), holds_at(at(Agent, Room), Time), holds_at(at(Bed, Room), Time), not(happens(lieOn(Agent, Bed), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(sleep5(Agent)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',168).
axiom(holds_at(neg(sleep5(Agent)), Time),
   
    [ holds_at(actOnSleep5(Agent), Time),
      holds_at(at(Agent, Room), Time),
      holds_at(at(Bed, Room), Time),
      not(happens(lieOn(Agent, Bed), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',168).

 /*  not(holds_at(actOnSleep5(Agent), Time)) :-
       ( holds_at(at(Agent, Room), Time),
         holds_at(at(Bed, Room), Time)
       ),
       holds_at(sleep5(Agent), Time),
       not(happens(lieOn(Agent, Bed), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',168).

 /*  [holds_at(at(Agent, Room), Time), holds_at(at(Bed, Room), Time), holds_at(sleep5(Agent), Time), not(happens(lieOn(Agent, Bed), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(actOnSleep5(Agent)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',168).
axiom(holds_at(neg(actOnSleep5(Agent)), Time),
   
    [ holds_at(at(Agent, Room), Time),
      holds_at(at(Bed, Room), Time),
      holds_at(sleep5(Agent), Time),
      not(happens(lieOn(Agent, Bed), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',168).

 /*  not(holds_at(at(Agent, Room), Time)) :-
       holds_at(at(Bed, Room), Time),
       holds_at(actOnSleep5(Agent), Time),
       holds_at(sleep5(Agent), Time),
       not(happens(lieOn(Agent, Bed), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',168).

 /*  [holds_at(at(Bed, Room), Time), holds_at(actOnSleep5(Agent), Time), holds_at(sleep5(Agent), Time), not(happens(lieOn(Agent, Bed), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(at(Agent, Room)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',168).
axiom(holds_at(neg(at(Agent, Room)), Time),
   
    [ holds_at(at(Bed, Room), Time),
      holds_at(actOnSleep5(Agent), Time),
      holds_at(sleep5(Agent), Time),
      not(happens(lieOn(Agent, Bed), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',168).

 /*  not(holds_at(at(Bed, Room), Time)) :-
       holds_at(at(Agent, Room), Time),
       holds_at(actOnSleep5(Agent), Time),
       holds_at(sleep5(Agent), Time),
       not(happens(lieOn(Agent, Bed), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',168).

 /*  [holds_at(at(Agent, Room), Time), holds_at(actOnSleep5(Agent), Time), holds_at(sleep5(Agent), Time), not(happens(lieOn(Agent, Bed), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(at(Bed, Room)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',168).
axiom(holds_at(neg(at(Bed, Room)), Time),
   
    [ holds_at(at(Agent, Room), Time),
      holds_at(actOnSleep5(Agent), Time),
      holds_at(sleep5(Agent), Time),
      not(happens(lieOn(Agent, Bed), Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e:174
%; A precondition axiom states that for
%; an agent to lie on a bed,
%; the agent must be in state Sleep5,
%; the agent must act on this state, and
%; there must be a room such that
%; the agent is in the room and the bed is in the room:
% [agent,bed,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e:181
% Happens(LieOn(agent,bed),time) ->
% HoldsAt(Sleep5(agent),time) &
% HoldsAt(ActOnSleep5(agent),time) &
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e:184
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',181).
% {room}% 
%  HoldsAt(At(agent,room),time) &
%  HoldsAt(At(bed,room),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e:186
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',185).

 /*  exists([Room],
    happens(lieOn(Agent, Bed), Time) ->
       holds_at(sleep5(Agent), Time),
       holds_at(actOnSleep5(Agent), Time),
       holds_at(at(Agent, Room), Time),
       holds_at(at(Bed, Room), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',185).

 /*  not(happens(lieOn(Agent, Bed), Time)) :-
       (   not(holds_at(sleep5(Agent), Time))
       ;   not(holds_at(actOnSleep5(Agent), Time))
       ;   not(holds_at(at(Agent, Room), Time))
       ;   not(holds_at(at(Bed, Room), Time))
       ),
       some(Room, '$kolem_Fn_153'(Agent, Bed, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',185).

 /*  [(holds_at(neg(sleep5(Agent)), Time);holds_at(neg(actOnSleep5(Agent)), Time);holds_at(neg(at(Agent, Room)), Time);holds_at(neg(at(Bed, Room)), Time)), some(Room, '$kolem_Fn_153'(Agent, Bed, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(lieOn(Agent, Bed), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',185).
axiom(not(happens(lieOn(Agent, Bed), Time)),
   
    [  (holds_at(neg(sleep5(Agent)), Time);holds_at(neg(actOnSleep5(Agent)), Time);holds_at(neg(at(Agent, Room)), Time);holds_at(neg(at(Bed, Room)), Time)),
      some(Room, '$kolem_Fn_153'(Agent, Bed, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',185).

 /*  holds_at(sleep5(Agent), Time) :-
       happens(lieOn(Agent, Bed), Time),
       some(Room, '$kolem_Fn_153'(Agent, Bed, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',185).

 /*  [happens(lieOn(Agent, Bed), Time), some(Room, '$kolem_Fn_153'(Agent, Bed, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(sleep5(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',185).
axiom(holds_at(sleep5(Agent), Time),
   
    [ happens(lieOn(Agent, Bed), Time),
      some(Room, '$kolem_Fn_153'(Agent, Bed, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',185).

 /*  holds_at(actOnSleep5(Agent), Time) :-
       happens(lieOn(Agent, Bed), Time),
       some(Room, '$kolem_Fn_153'(Agent, Bed, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',185).

 /*  [happens(lieOn(Agent, Bed), Time), some(Room, '$kolem_Fn_153'(Agent, Bed, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(actOnSleep5(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',185).
axiom(holds_at(actOnSleep5(Agent), Time),
   
    [ happens(lieOn(Agent, Bed), Time),
      some(Room, '$kolem_Fn_153'(Agent, Bed, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',185).

 /*  holds_at(at(Agent, Room), Time) :-
       happens(lieOn(Agent, Bed), Time),
       some(Room, '$kolem_Fn_153'(Agent, Bed, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',185).

 /*  [happens(lieOn(Agent, Bed), Time), some(Room, '$kolem_Fn_153'(Agent, Bed, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(at(Agent, Room), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',185).
axiom(holds_at(at(Agent, Room), Time),
   
    [ happens(lieOn(Agent, Bed), Time),
      some(Room, '$kolem_Fn_153'(Agent, Bed, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',185).

 /*  holds_at(at(Bed, Room), Time) :-
       happens(lieOn(Agent, Bed), Time),
       some(Room, '$kolem_Fn_153'(Agent, Bed, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',185).

 /*  [happens(lieOn(Agent, Bed), Time), some(Room, '$kolem_Fn_153'(Agent, Bed, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(at(Bed, Room), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',185).
axiom(holds_at(at(Bed, Room), Time),
   
    [ happens(lieOn(Agent, Bed), Time),
      some(Room, '$kolem_Fn_153'(Agent, Bed, Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e:188
%; (body) posture
%; agent lies on physobj.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e:191
% event LieOn(agent,physobj)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',191).
event(lieOn(agent,physobj)).
==> mpred_prop(lieOn(agent,physobj),event).
==> meta_argtypes(lieOn(agent,physobj)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e:193
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',194).
%; agent sits on physobj.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e:194
% event SitOn(agent,physobj)
event(sitOn(agent,physobj)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',194).
==> mpred_prop(sitOn(agent,physobj),event).
==> meta_argtypes(sitOn(agent,physobj)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e:196
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',197).
% [agent,physobj,time]
% Happens(SitOn(agent,physobj),time) ->
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e:198
% {location}% 
%  HoldsAt(At(agent,location),time) &
%  HoldsAt(At(physobj,location),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e:200
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',199).

 /*  exists([Location],
    happens(sitOn(Agent, Physobj), Time) ->
       holds_at(at(Agent, Location), Time),
       holds_at(at(Physobj, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',199).

 /*  not(happens(sitOn(Agent, Physobj), Time)) :-
       (   not(holds_at(at(Agent, Location), Time))
       ;   not(holds_at(at(Physobj, Location), Time))
       ),
       some(Location, '$kolem_Fn_154'(Agent, Physobj, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',199).

 /*  [(holds_at(neg(at(Agent, Location)), Time);holds_at(neg(at(Physobj, Location)), Time)), some(Location, '$kolem_Fn_154'(Agent, Physobj, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(sitOn(Agent, Physobj), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',199).
axiom(not(happens(sitOn(Agent, Physobj), Time)),
   
    [  (holds_at(neg(at(Agent, Location)), Time);holds_at(neg(at(Physobj, Location)), Time)),
      some(Location, '$kolem_Fn_154'(Agent, Physobj, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',199).

 /*  holds_at(at(Agent, Location), Time) :-
       happens(sitOn(Agent, Physobj), Time),
       some(Location, '$kolem_Fn_154'(Agent, Physobj, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',199).

 /*  [happens(sitOn(Agent, Physobj), Time), some(Location, '$kolem_Fn_154'(Agent, Physobj, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(at(Agent, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',199).
axiom(holds_at(at(Agent, Location), Time),
   
    [ happens(sitOn(Agent, Physobj), Time),
      some(Location, '$kolem_Fn_154'(Agent, Physobj, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',199).

 /*  holds_at(at(Physobj, Location), Time) :-
       happens(sitOn(Agent, Physobj), Time),
       some(Location, '$kolem_Fn_154'(Agent, Physobj, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',199).

 /*  [happens(sitOn(Agent, Physobj), Time), some(Location, '$kolem_Fn_154'(Agent, Physobj, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(at(Physobj, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',199).
axiom(holds_at(at(Physobj, Location), Time),
   
    [ happens(sitOn(Agent, Physobj), Time),
      some(Location, '$kolem_Fn_154'(Agent, Physobj, Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e:202
%; agent rises from physobj.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e:203
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',204).
% event RiseFrom(agent,physobj)
event(riseFrom(agent,physobj)).
==> mpred_prop(riseFrom(agent,physobj),event).
==> meta_argtypes(riseFrom(agent,physobj)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e:205
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',206).
%; agent is lying on physobj.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e:206
% fluent LyingOn(agent,physobj)
fluent(lyingOn(agent,physobj)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',206).
==> mpred_prop(lyingOn(agent,physobj),fluent).
==> meta_argtypes(lyingOn(agent,physobj)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e:207
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',206).
%; agent is sitting on physobj.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e:208
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',209).
% fluent SittingOn(agent,physobj)
fluent(sittingOn(agent,physobj)).
==> mpred_prop(sittingOn(agent,physobj),fluent).
==> meta_argtypes(sittingOn(agent,physobj)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e:209
%; agent is standing.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e:210
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',211).
% fluent Standing(agent)
fluent(standing(agent)).
==> mpred_prop(standing(agent),fluent).
==> meta_argtypes(standing(agent)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e:212
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',213).
%; agent is lying down.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e:213
% fluent Lying(agent)
fluent(lying(agent)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',213).
==> mpred_prop(lying(agent),fluent).
==> meta_argtypes(lying(agent)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e:214
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',213).
%; agent is sitting.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e:215
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',216).
% fluent Sitting(agent)
fluent(sitting(agent)).
==> mpred_prop(sitting(agent),fluent).
==> meta_argtypes(sitting(agent)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e:216
% noninertial Lying
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',216).
==> noninertial(lying).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e:217
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',218).
% noninertial Sitting
==> noninertial(sitting).
%; At any time, an agent is either lying, sitting, or standing:

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e:220
% xor Lying, Sitting, Standing
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',220).
==> xor([lying,sitting,standing]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e:222
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',223).
% [agent,physobj,time]
% HoldsAt(LyingOn(agent,physobj),time) ->
% HoldsAt(Lying(agent),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e:224

 /*  holds_at(lyingOn(Agent, Physobj), Time) ->
       holds_at(lying(Agent), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',223).

 /*  holds_at(lying(Agent), Time) :-
       holds_at(lyingOn(Agent, Physobj), Time).
 */

 /*  [holds_at(lyingOn(Agent, Physobj), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(lying(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',223).
axiom(holds_at(lying(Agent), Time),
    [holds_at(lyingOn(Agent, Physobj), Time)]).

 /*  not(holds_at(lyingOn(Agent, Physobj), Time)) :-
       not(holds_at(lying(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',223).

 /*  [holds_at(neg(lying(Agent)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(lyingOn(Agent, Physobj)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',223).
axiom(holds_at(neg(lyingOn(Agent, Physobj)), Time),
    [holds_at(neg(lying(Agent)), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e:226
% [agent,physobj,time]
% HoldsAt(SittingOn(agent,physobj),time) ->
% HoldsAt(Sitting(agent),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e:228

 /*  holds_at(sittingOn(Agent, Physobj), Time) ->
       holds_at(sitting(Agent), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',228).

 /*  holds_at(sitting(Agent), Time) :-
       holds_at(sittingOn(Agent, Physobj), Time).
 */

 /*  [holds_at(sittingOn(Agent, Physobj), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(sitting(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',228).
axiom(holds_at(sitting(Agent), Time),
    [holds_at(sittingOn(Agent, Physobj), Time)]).

 /*  not(holds_at(sittingOn(Agent, Physobj), Time)) :-
       not(holds_at(sitting(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',228).

 /*  [holds_at(neg(sitting(Agent)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(sittingOn(Agent, Physobj)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',228).
axiom(holds_at(neg(sittingOn(Agent, Physobj)), Time),
    [holds_at(neg(sitting(Agent)), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e:230
%; State constraints represent that an agent can lie or sit
%; on at most one object at a time:
% [agent,physobj1,physobj2,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e:233
% HoldsAt(LyingOn(agent,physobj1),time) &
% HoldsAt(LyingOn(agent,physobj2),time) ->
% physobj1=physobj2.
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e:235
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',233).

 /*  holds_at(lyingOn(Agent, Physobj1), Time), holds_at(lyingOn(Agent, Physobj2), Time) ->
       equals(Physobj1, Physobj2).
 */

 /*  not(holds_at(lyingOn(Agent, Physobj1), Time)) :-
       holds_at(lyingOn(Agent, Physobj2), Time),
       not(equals(Physobj1, Physobj2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',233).

 /*  [holds_at(lyingOn(Agent, Physobj2), Time), not(equals(Physobj1, Physobj2))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(lyingOn(Agent, Physobj1)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',233).
axiom(holds_at(neg(lyingOn(Agent, Physobj1)), Time),
   
    [ holds_at(lyingOn(Agent, Physobj2), Time),
      not(equals(Physobj1, Physobj2))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',233).

 /*  not(holds_at(lyingOn(Agent, Physobj2), Time)) :-
       holds_at(lyingOn(Agent, Physobj1), Time),
       not(equals(Physobj1, Physobj2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',233).

 /*  [holds_at(lyingOn(Agent, Physobj1), Time), not(equals(Physobj1, Physobj2))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(lyingOn(Agent, Physobj2)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',233).
axiom(holds_at(neg(lyingOn(Agent, Physobj2)), Time),
   
    [ holds_at(lyingOn(Agent, Physobj1), Time),
      not(equals(Physobj2, Physobj1))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e:237
% [agent,physobj1,physobj2,time]
% HoldsAt(SittingOn(agent,physobj1),time) &
% HoldsAt(SittingOn(agent,physobj2),time) ->
% physobj1=physobj2.
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e:240
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',239).

 /*  holds_at(sittingOn(Agent, Physobj1), Time), holds_at(sittingOn(Agent, Physobj2), Time) ->
       equals(Physobj1, Physobj2).
 */

 /*  not(holds_at(sittingOn(Agent, Physobj1), Time)) :-
       holds_at(sittingOn(Agent, Physobj2), Time),
       not(equals(Physobj1, Physobj2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',239).

 /*  [holds_at(sittingOn(Agent, Physobj2), Time), not(equals(Physobj1, Physobj2))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(sittingOn(Agent, Physobj1)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',239).
axiom(holds_at(neg(sittingOn(Agent, Physobj1)), Time),
   
    [ holds_at(sittingOn(Agent, Physobj2), Time),
      not(equals(Physobj1, Physobj2))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',239).

 /*  not(holds_at(sittingOn(Agent, Physobj2), Time)) :-
       holds_at(sittingOn(Agent, Physobj1), Time),
       not(equals(Physobj1, Physobj2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',239).

 /*  [holds_at(sittingOn(Agent, Physobj1), Time), not(equals(Physobj1, Physobj2))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(sittingOn(Agent, Physobj2)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',239).
axiom(holds_at(neg(sittingOn(Agent, Physobj2)), Time),
   
    [ holds_at(sittingOn(Agent, Physobj1), Time),
      not(equals(Physobj2, Physobj1))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e:242
%; An effect axiom states that if an agent is standing and
%; lies on a physical object, the agent will be lying on
%; the physical object:
% [agent,physobj,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e:246
% HoldsAt(Standing(agent),time) ->
% Initiates(LieOn(agent,physobj),
%           LyingOn(agent,physobj),
%           time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e:249
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',246).

 /*  [holds_at(standing(Agent), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(lieOn(Agent, Physobj),
                    lyingOn(Agent, Physobj),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',246).
axiom(initiates(lieOn(Agent, Physobj), lyingOn(Agent, Physobj), Time),
    [holds_at(standing(Agent), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e:251
%; An effect axiom states that if an agent
%; lies on a physical object, the agent will no longer
%; be standing:
% [agent,physobj,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e:255
% Terminates(LieOn(agent,physobj),
%            Standing(agent),
%            time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e:257
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',255).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(lieOn(Agent, Physobj),
                     standing(Agent),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',255).
axiom(terminates(lieOn(Agent, Physobj), standing(Agent), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e:259
%; An effect axiom states that if an agent is standing and
%; sits on a physical object, the agent will be sitting on
%; the physical object:
% [agent,physobj,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e:263
% HoldsAt(Standing(agent),time) ->
% Initiates(SitOn(agent,physobj),
%           SittingOn(agent,physobj),
%           time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e:266
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',263).

 /*  [holds_at(standing(Agent), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(sitOn(Agent, Physobj),
                    sittingOn(Agent, Physobj),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',263).
axiom(initiates(sitOn(Agent, Physobj), sittingOn(Agent, Physobj), Time),
    [holds_at(standing(Agent), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e:268
%; An effect axiom states that if an agent
%; sits on a physical object, the agent will no longer
%; be standing:
% [agent,physobj,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e:272
% Terminates(SitOn(agent,physobj),
%            Standing(agent),
%            time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e:274
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',272).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(sitOn(Agent, Physobj),
                     standing(Agent),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',272).
axiom(terminates(sitOn(Agent, Physobj), standing(Agent), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e:276
%; An effect axiom states that if an agent
%; is sitting or lying on a physical object and
%; the agent rises from the physical object,
%; the agent will be standing:
% [agent,physobj,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e:281
% (HoldsAt(SittingOn(agent,physobj),time) |
%  HoldsAt(LyingOn(agent,physobj),time)) ->
% Initiates(RiseFrom(agent,physobj),
%           Standing(agent),
%           time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e:285
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',281).

 /*  [(holds_at(sittingOn(Agent, Physobj), Time);holds_at(lyingOn(Agent, Physobj), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(riseFrom(Agent, Physobj),
                    standing(Agent),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',281).
axiom(initiates(riseFrom(Agent, Physobj), standing(Agent), Time),
   
    [  (holds_at(sittingOn(Agent, Physobj), Time);holds_at(lyingOn(Agent, Physobj), Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e:287
%; An effect axiom states that if an agent is sitting on
%; a physical object and the agent rises from the physical
%; object, the agent will no longer be sitting on the
%; physical object:
% [agent,physobj,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e:292
% HoldsAt(SittingOn(agent,physobj),time) ->
% Terminates(RiseFrom(agent,physobj),
%            SittingOn(agent,physobj),
%            time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e:295
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',292).

 /*  [holds_at(sittingOn(Agent, Physobj), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(riseFrom(Agent, Physobj),
                     sittingOn(Agent, Physobj),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',292).
axiom(terminates(riseFrom(Agent, Physobj), sittingOn(Agent, Physobj), Time),
    [holds_at(sittingOn(Agent, Physobj), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e:297
%; An effect axiom states that if an agent is lying on
%; a physical object and the agent rises from the physical
%; object, the agent will no longer be lying on the
%; physical object:
% [agent,physobj,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e:302
% HoldsAt(LyingOn(agent,physobj),time) ->
% Terminates(RiseFrom(agent,physobj),
%            LyingOn(agent,physobj),
%            time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e:305
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',302).

 /*  [holds_at(lyingOn(Agent, Physobj), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(riseFrom(Agent, Physobj),
                     lyingOn(Agent, Physobj),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',302).
axiom(terminates(riseFrom(Agent, Physobj), lyingOn(Agent, Physobj), Time),
    [holds_at(lyingOn(Agent, Physobj), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e:307
%; dressing
%; agent gets undressed.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e:310
% event GetDressed(agent)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',310).
event(getDressed(agent)).
==> mpred_prop(getDressed(agent),event).
==> meta_argtypes(getDressed(agent)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e:311
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',310).
%; agent gets dressed.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e:312
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',313).
% event GetUndressed(agent)
event(getUndressed(agent)).
==> mpred_prop(getUndressed(agent),event).
==> meta_argtypes(getUndressed(agent)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e:313
%; agent is dressed.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e:314
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',315).
% fluent Dressed(agent)
fluent(dressed(agent)).
==> mpred_prop(dressed(agent),fluent).
==> meta_argtypes(dressed(agent)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e:316
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',317).
%; Effect axioms deal with getting dressed and undressed:
% [agent,time]
 % Initiates(GetDressed(agent),Dressed(agent),time).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(getDressed(Agent), dressed(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',317).
axiom(initiates(getDressed(Agent), dressed(Agent), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e:318
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',319).
% [agent,time]
 % Terminates(GetUndressed(agent),Dressed(agent),time).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(getUndressed(Agent), dressed(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',319).
axiom(terminates(getUndressed(Agent), dressed(Agent), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e:320
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Sleep.e',321).
%; End of file.
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e:40
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e',41).
% fire Fire1
==> t(fire,fire1).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e:41
% HoldsAt(At(Fire1,Outside1),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e',41).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(at(fire1, outside1), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e',41).
axiom(holds_at(at(fire1, outside1), start),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e:43
% agent Perp1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e',43).
==> t(agent,perp1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e:45
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e',46).
% physobj PhysTarget1
==> t(physobj,physTarget1).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e:46
% HoldsAt(Intact(PhysTarget1),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e',46).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(intact(physTarget1), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e',46).
axiom(holds_at(intact(physTarget1), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e:47
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e',48).
% HoldsAt(At(PhysTarget1,Outside1),0).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(at(physTarget1, outside1), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e',48).
axiom(holds_at(at(physTarget1, outside1), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e:49
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e',50).
%; room-scale topological space

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e:50
% outside Outside1
==> t(outside,outside1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e:51
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e',52).
% outside Outside2
==> t(outside,outside2).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e:52
% room Inside1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e',52).
==> t(room,inside1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e:53
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e',54).
% door Door1
==> t(door,door1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e:54
% building Building1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e',54).
==> t(building,building1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e:55
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e',56).
% street Street1
==> t(street,street1).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e:56
% Side1(Door1)=Outside1.
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e',56).

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], equals(side1(door1), outside1)).
 */
axiom(equals(side1(door1), outside1),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e:57
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e',58).
% Side2(Door1)=Inside1.

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], equals(side2(door1), inside1)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e',58).
axiom(equals(side2(door1), inside1),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e:58
% LookOutOnto(Inside1)=Outside1.
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e',58).

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], equals(lookOutOnto(inside1), outside1)).
 */
axiom(equals(lookOutOnto(inside1), outside1),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e:59
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e',60).
% Floor(Inside1)=1.

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], equals(floor(inside1), 1)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e',60).
axiom(equals(floor(inside1), 1),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e:60
% BuildingOf(Inside1)=Building1.
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e',60).

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], equals(buildingOf(inside1), building1)).
 */
axiom(equals(buildingOf(inside1), building1),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e:61
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e',62).
% Side1(Street1)=Outside1.

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], equals(side1(street1), outside1)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e',62).
axiom(equals(side1(street1), outside1),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e:62
% Side2(Street1)=Outside2.
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e',62).

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], equals(side2(street1), outside2)).
 */
axiom(equals(side2(street1), outside2),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e:64
% HoldsAt(Alive(Perp1),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e',64).

 /*  [] ->
       ta(Ta_Param, tvs1=[start], tvs2=[start], holds_at(alive(perp1), start)).
 */
axiom(holds_at(alive(perp1), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e:65
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e',66).
% HoldsAt(Awake(Perp1),0).

 /*  [] ->
       ta(Ta_Param, tvs1=[start], tvs2=[start], holds_at(awake(perp1), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e',66).
axiom(holds_at(awake(perp1), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e:66
% HoldsAt(Standing(Perp1),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e',66).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(standing(perp1), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e',66).
axiom(holds_at(standing(perp1), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e:67
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e',68).
% HoldsAt(Sleep2(Perp1),0).

 /*  [] ->
       ta(Ta_Param, tvs1=[start], tvs2=[start], holds_at(sleep2(perp1), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e',68).
axiom(holds_at(sleep2(perp1), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e:68
% !HoldsAt(Injured(Perp1),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e',68).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(injured(perp1)), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e',68).
axiom(holds_at(neg(injured(perp1)), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e:69
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e',70).
% [object]
 % !HoldsAt(Holding(Perp1,object),0).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(holding(perp1, Object)), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e',70).
axiom(holds_at(neg(holding(perp1, Object)), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e:70
% HoldsAt(At(Perp1,Outside2),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e',70).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(at(perp1, outside2), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e',70).
axiom(holds_at(at(perp1, outside2), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e:71
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e',72).
% !HoldsAt(DoorIsOpen(Door1),0).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(doorIsOpen(door1)), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e',72).
axiom(holds_at(neg(doorIsOpen(door1)), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e:72
% HoldsAt(DoorUnlocked(Door1),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e',72).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(doorUnlocked(door1), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e',72).
axiom(holds_at(doorUnlocked(door1), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e:73
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e',74).
% [physobj,fire,offset]
 % !HoldsAt(Burning(physobj,fire,offset),0).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(burning(Physobj, Fire, Offset)), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e',74).
axiom(holds_at(neg(burning(Physobj, Fire, Offset)), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e:75
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e',76).
%; narrative


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e:76
% Happens(WalkStreet21(Perp1,Street1),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e',76).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          happens(walkStreet21(perp1, street1), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e',76).
axiom(happens(walkStreet21(perp1, street1), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e:77
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e',78).
% Happens(SetFireTo(Perp1,PhysTarget1,Fire1,3),1).

 /*  [b(start, Maptime), ignore(start+1==Maptime)] ->
       ta(Ta_Param,
          tvs1=[start+1],
          tvs2=[Maptime, start],
          happens(setFireTo(perp1, physTarget1, fire1, 3), Maptime)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e',78).
axiom(happens(setFireTo(perp1, physTarget1, fire1, 3), Maptime),
    [b(start, Maptime)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e:78
% Happens(WalkStreet12(Perp1,Street1),2).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e',78).

 /*  [b(start, Start2), toffset(start, 2, Start2), ignore(start+2==Start2)] ->
       ta(Ta_Param,
          tvs1=[start+2],
          tvs2=[Start2, start],
          happens(walkStreet12(perp1, street1), Start2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e',78).
axiom(happens(walkStreet12(perp1, street1), Start2),
    [b(start, Start2), toffset(start, 2, Start2)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e:80
% range time 0 6
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e',80).
==> range(time,0,6).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e:81
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e',82).
% range offset 0 3
==> range(offset,0,3).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e:82
% range diameter 0 0
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e',82).
==> range(diameter,0,0).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e:84
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Arson.e',85).
% completion Happens
==> completion(happens).
%; End of file.
