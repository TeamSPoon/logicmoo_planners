% translate: unskipped  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e.lps 
:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(lps).
% translate: begining  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e.lps 
% Wed, 07 Oct 2020 11:03:04 GMT File: <stream>(0x55afadaa9c00)%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;

% sort restaurant: script
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',11).
subsort(restaurant,script).

% sort waiter: agent
subsort(waiter,agent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',13).
% sort cook: agent
subsort(cook,agent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',15).
% function BillOf(restaurant): bill

 /*  axiom(function_argtypes(Function_ArgtypesP_Num3_V, billOf(restaurant), bill),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',15).
function_argtypes(Function_ArgtypesP_Num3_V1,
		  billOf(restaurant),
		  bill).
 %  predicate(bill(restaurant,bill)).
 %  predicate(bill(restaurant,bill)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',15).
predicates([bill/2]).
mpred_prop(bill(restaurant,bill),predicate).

 /*  axiom(functional_predicate(billOf, bill),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',15).
functional_predicate(billOf,bill).
resultIsa(billOf,bill).

% function CookOf(restaurant): cook

 /*  axiom(function_argtypes(Function_ArgtypesP_Num3_V, cookOf(restaurant), cook),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',15).
function_argtypes(Function_ArgtypesP_Num3_V1,
		  cookOf(restaurant),
		  cook).
 %  predicate(cook(restaurant,cook)).
 %  predicate(cook(restaurant,cook)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',15).
predicates([cook/2]).
mpred_prop(cook(restaurant,cook),predicate).

 /*  axiom(functional_predicate(cookOf, cook),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',15).
functional_predicate(cookOf,cook).
resultIsa(cookOf,cook).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',17).
% function TableOf(restaurant): table

 /*  axiom(function_argtypes(Function_ArgtypesP_Num3_V, tableOf(restaurant), table),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',17).
function_argtypes(Function_ArgtypesP_Num3_V1,
		  tableOf(restaurant),
		  table).
 %  predicate(table(restaurant,table)).
 %  predicate(table(restaurant,table)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',17).
predicates([(table)/2]).
mpred_prop(table(restaurant,table),predicate).

 /*  axiom(functional_predicate(tableOf, table),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',17).
functional_predicate(tableOf,table).
resultIsa(tableOf,table).

% function WaiterOf(restaurant): waiter

 /*  axiom(function_argtypes(Function_ArgtypesP_Num3_V, waiterOf(restaurant), waiter),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',17).
function_argtypes(Function_ArgtypesP_Num3_V1,
		  waiterOf(restaurant),
		  waiter).
 %  predicate(waiter(restaurant,waiter)).
 %  predicate(waiter(restaurant,waiter)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',17).
predicates([waiter/2]).
mpred_prop(waiter(restaurant,waiter),predicate).

 /*  axiom(functional_predicate(waiterOf, waiter),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',17).
functional_predicate(waiterOf,waiter).
resultIsa(waiterOf,waiter).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',19).
% function KitchenDoorOf(restaurant): door

 /*  axiom(function_argtypes(Function_ArgtypesP_Num3_V, kitchenDoorOf(restaurant), door),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',19).
function_argtypes(Function_ArgtypesP_Num3_V1,
		  kitchenDoorOf(restaurant),
		  door).
 %  predicate(kitchenDoor(restaurant,door)).
 %  predicate(kitchenDoor(restaurant,door)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',19).
predicates([kitchenDoor/2]).
mpred_prop(kitchenDoor(restaurant,door),predicate).

 /*  axiom(functional_predicate(kitchenDoorOf, kitchenDoor),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',19).
functional_predicate(kitchenDoorOf,kitchenDoor).
resultIsa(kitchenDoorOf,door).
%; awaiting customer/waiter has set down bill on customer's table

% fluent BeWaiter0(waiter)
 %  fluent(beWaiter0(waiter)).
 %  fluent(beWaiter0(waiter)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',21).
fluents([beWaiter0/1]).
mpred_prop(beWaiter0(waiter),fluent).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',24).
%; awaiting customer order

% fluent BeWaiter1(waiter)
 %  fluent(beWaiter1(waiter)).
 %  fluent(beWaiter1(waiter)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',24).
fluents([beWaiter1/1]).
mpred_prop(beWaiter1(waiter),fluent).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',27).
%; has customer order

% fluent BeWaiter2(waiter)
 %  fluent(beWaiter2(waiter)).
 %  fluent(beWaiter2(waiter)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',27).
fluents([beWaiter2/1]).
mpred_prop(beWaiter2(waiter),fluent).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',30).
%; in kitchen

% fluent BeWaiter3(waiter)
 %  fluent(beWaiter3(waiter)).
 %  fluent(beWaiter3(waiter)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',30).
fluents([beWaiter3/1]).
mpred_prop(beWaiter3(waiter),fluent).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',33).
%; awaiting preparation of order

% fluent BeWaiter4(waiter)
 %  fluent(beWaiter4(waiter)).
 %  fluent(beWaiter4(waiter)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',33).
fluents([beWaiter4/1]).
mpred_prop(beWaiter4(waiter),fluent).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',36).
%; has order

% fluent BeWaiter5(waiter)
 %  fluent(beWaiter5(waiter)).
 %  fluent(beWaiter5(waiter)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',36).
fluents([beWaiter5/1]).
mpred_prop(beWaiter5(waiter),fluent).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',39).
%; back in dining room

% fluent BeWaiter6(waiter)
 %  fluent(beWaiter6(waiter)).
 %  fluent(beWaiter6(waiter)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',39).
fluents([beWaiter6/1]).
mpred_prop(beWaiter6(waiter),fluent).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',42).
%; order delivered to customer (can ask if all is OK)

% fluent BeWaiter7(waiter)
 %  fluent(beWaiter7(waiter)).
 %  fluent(beWaiter7(waiter)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',42).
fluents([beWaiter7/1]).
mpred_prop(beWaiter7(waiter),fluent).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',45).
%; customer has requested bill

% fluent BeWaiter8(waiter)
 %  fluent(beWaiter8(waiter)).
 %  fluent(beWaiter8(waiter)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',45).
fluents([beWaiter8/1]).
mpred_prop(beWaiter8(waiter),fluent).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',48).
%; waiter is holding bill

% fluent BeWaiter9(waiter)
 %  fluent(beWaiter9(waiter)).
 %  fluent(beWaiter9(waiter)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',48).
fluents([beWaiter9/1]).
mpred_prop(beWaiter9(waiter),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',51).
% xor BeWaiter0, BeWaiter1, BeWaiter2, BeWaiter3, BeWaiter4, BeWaiter5, BeWaiter6, BeWaiter7, BeWaiter8, BeWaiter9

 /*  ==>xor[ beWaiter0,
     beWaiter1,
     beWaiter2,
     beWaiter3,
     beWaiter4,
     beWaiter5,
     beWaiter6,
     beWaiter7,
     beWaiter8,
     beWaiter9
   ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',51).
==>xor[ beWaiter0,
  beWaiter1,
  beWaiter2,
  beWaiter3,
  beWaiter4,
  beWaiter5,
  beWaiter6,
  beWaiter7,
  beWaiter8,
  beWaiter9
].


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',53).
% [waiter,agent,time]
% HoldsAt(BeWaiter0(waiter),time) ->
% Terminates(Greet(waiter,agent),
%            BeWaiter0(waiter),
%            time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',53).

 /*  axiom(terminates(greet(Waiter, Agent), beWaiter0(Waiter), Time),
       [beWaiter0(Waiter)]).
 */

 /*  beWaiter0(Bewaiter0) ->
       terminates(greet(Bewaiter0, Greet),
                  beWaiter0(Bewaiter0),
                  Terminates).
 */
if beWaiter0(Bewaiter0)then terminates(greet(Bewaiter0, Greet), beWaiter0(Bewaiter0)at Terminates, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',53).

 /*  reactive_rule([beWaiter0(Bewaiter0)],
   	      [ terminates(greet(Bewaiter0,Greet),
   			   at(beWaiter0(Bewaiter0),
   			      Terminates),
   			   Terminates6)
   	      ]).
 */


% [waiter,agent,time]
% HoldsAt(BeWaiter0(waiter),time) ->
% Initiates(Greet(waiter,agent),
%           BeWaiter1(waiter),
%           time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',60).

 /*  axiom(initiates(greet(Waiter, Agent), beWaiter1(Waiter), Time),
       [beWaiter0(Waiter)]).
 */

 /*  beWaiter0(Bewaiter0) ->
       initiates(greet(Bewaiter0, Greet),
                 beWaiter1(Bewaiter0),
                 Initiates).
 */
if beWaiter0(Bewaiter0)then initiates(greet(Bewaiter0, Greet), beWaiter1(Bewaiter0)at Initiates, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',60).

 /*  reactive_rule([beWaiter0(Bewaiter0)],
   	      [ initiates(greet(Bewaiter0,Greet),
   			  at(beWaiter1(Bewaiter0),
   			     Initiates),
   			  Initiates6)
   	      ]).
 */


% [waiter,agent,food,time]
% HoldsAt(BeWaiter1(waiter),time) ->
% Terminates(Order(agent,waiter,food),
%            BeWaiter1(waiter),
%            time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',66).

 /*  axiom(terminates(order(Agent, Waiter, Food), beWaiter1(Waiter), Time),
       [beWaiter1(Waiter)]).
 */

 /*  beWaiter1(Bewaiter1) ->
       terminates(order(OrderP_Num3_V, Bewaiter1, Order),
                  beWaiter1(Bewaiter1),
                  Terminates).
 */
if beWaiter1(Bewaiter1)then terminates(order(OrderP_Num3_V, Bewaiter1, Order), beWaiter1(Bewaiter1)at Terminates, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',66).

 /*  reactive_rule([beWaiter1(Bewaiter1)],
   	      [ terminates(order(OrderP_Num3_V,
   				 Bewaiter1,
   				 Order),
   			   at(beWaiter1(Bewaiter1),
   			      Terminates),
   			   Terminates8)
   	      ]).
 */


% [waiter,agent,food,time]
% HoldsAt(BeWaiter1(waiter),time) ->
% Initiates(Order(agent,waiter,food),
%           BeWaiter2(waiter),
%           time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',72).

 /*  axiom(initiates(order(Agent, Waiter, Food), beWaiter2(Waiter), Time),
       [beWaiter1(Waiter)]).
 */

 /*  beWaiter1(Bewaiter1) ->
       initiates(order(OrderP_Num3_V, Bewaiter1, Order),
                 beWaiter2(Bewaiter1),
                 Initiates).
 */
if beWaiter1(Bewaiter1)then initiates(order(OrderP_Num3_V, Bewaiter1, Order), beWaiter2(Bewaiter1)at Initiates, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',72).

 /*  reactive_rule([beWaiter1(Bewaiter1)],
   	      [ initiates(order(OrderP_Num3_V,
   				Bewaiter1,
   				Order),
   			  at(beWaiter2(Bewaiter1),
   			     Initiates),
   			  Initiates8)
   	      ]).
 */


% [restaurant,waiter,time]
% WaiterOf(restaurant)=waiter &
% HoldsAt(BeWaiter2(waiter),time) ->
% Happens(WalkThroughDoor12(waiter,KitchenDoorOf(restaurant)),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',78).

 /*  (   waiter(Restaurant, Waiter),
       holds_at(beWaiter2(Waiter), Time)
   ->  happens(walkThroughDoor12(Waiter, kitchenDoorOf(Restaurant)),
               Time)
   ).
 */
if waiter(Restaurant, Waiter), beWaiter2(Waiter)at Time then happens(walkThroughDoor12(Waiter, kitchenDoorOf(Restaurant)), Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',78).

 /*  reactive_rule([ waiter(Restaurant,Waiter),
   		holds(beWaiter2(Waiter),Time)
   	      ],
   	      [ happens(walkThroughDoor12(Waiter,
   					  kitchenDoorOf(Restaurant)),
   			Time)
   	      ]).
 */


% [restaurant,waiter,door,time]
% HoldsAt(BeWaiter2(waiter),time) &
% WaiterOf(restaurant)=waiter &
% KitchenDoorOf(restaurant)=door ->
% Terminates(WalkThroughDoor12(waiter,door),
%            BeWaiter2(waiter),
%            time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',83).

 /*  axiom(terminates(walkThroughDoor12(Waiter, Door), beWaiter2(Waiter), Time),
       [ beWaiter2(Waiter),
         waiter(Restaurant, Waiter),
         kitchenDoor(Restaurant, Door)
       ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',83).

 /*  (   beWaiter2(Bewaiter2),
       waiter(A, Bewaiter2),
       kitchenDoor(A, Kitchendoor)
   ->  terminates(walkThroughDoor12(Bewaiter2, Kitchendoor),
                  beWaiter2(Bewaiter2),
                  Terminates)
   ).
 */
if beWaiter2(Bewaiter2), waiter(A, Bewaiter2), kitchenDoor(A, Kitchendoor)then terminates(walkThroughDoor12(Bewaiter2, Kitchendoor), beWaiter2(Bewaiter2)at Terminates, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',83).

 /*  reactive_rule([ holds(beWaiter2(Bewaiter2),Holds),
   		waiter(A,Bewaiter2),
   		kitchenDoor(A,Kitchendoor)
   	      ],
   	      [ terminates(walkThroughDoor12(Bewaiter2,
   					     Kitchendoor),
   			   at(beWaiter2(Bewaiter2),
   			      Terminates),
   			   Terminates8)
   	      ]).
 */


% [restaurant,waiter,door,time]
% HoldsAt(BeWaiter2(waiter),time) &
% WaiterOf(restaurant)=waiter &
% KitchenDoorOf(restaurant)=door ->
% Initiates(WalkThroughDoor12(waiter,door),
%           BeWaiter3(waiter),
%           time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',91).

 /*  axiom(initiates(walkThroughDoor12(Waiter, Door), beWaiter3(Waiter), Time),
       [ beWaiter2(Waiter),
         waiter(Restaurant, Waiter),
         kitchenDoor(Restaurant, Door)
       ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',91).

 /*  (   beWaiter2(Bewaiter2),
       waiter(A, Bewaiter2),
       kitchenDoor(A, Kitchendoor)
   ->  initiates(walkThroughDoor12(Bewaiter2, Kitchendoor),
                 beWaiter3(Bewaiter2),
                 Initiates)
   ).
 */
if beWaiter2(Bewaiter2), waiter(A, Bewaiter2), kitchenDoor(A, Kitchendoor)then initiates(walkThroughDoor12(Bewaiter2, Kitchendoor), beWaiter3(Bewaiter2)at Initiates, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',91).

 /*  reactive_rule([ holds(beWaiter2(Bewaiter2),Holds),
   		waiter(A,Bewaiter2),
   		kitchenDoor(A,Kitchendoor)
   	      ],
   	      [ initiates(walkThroughDoor12(Bewaiter2,
   					    Kitchendoor),
   			  at(beWaiter3(Bewaiter2),
   			     Initiates),
   			  Initiates8)
   	      ]).
 */


% [restaurant,food,time]
% HoldsAt(BeWaiter3(WaiterOf(restaurant)),time) &
% ({agent} HoldsAt(KnowOrder(WaiterOf(restaurant),agent,food),time)) ->
% Happens(Order(WaiterOf(restaurant),CookOf(restaurant),food),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',99).

 /*  (   holds_at(beWaiter3(waiterOf(Restaurant)), Time),
       exists([Agent],
              holds_at(knowOrder(waiterOf(Restaurant),
                                 Agent,
                                 Food),
                       Time))
   ->  happens(order(waiterOf(Restaurant),
                     cookOf(Restaurant),
                     Food),
               Time)
   ).
 */
if beWaiter3(waiterOf(Restaurant))at Time, exists([Agent], knowOrder(waiterOf(Restaurant), Agent, Food)at Time)then happens(order(waiterOf(Restaurant), cookOf(Restaurant), Food), Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',99).

 /*  reactive_rule([ holds(beWaiter3(waiterOf(Restaurant)),Time),
   		exists([Agent],
   		       at(knowOrder(waiterOf(Restaurant),
   				    Agent,
   				    Food),
   			  Time))
   	      ],
   	      [ happens(order(waiterOf(Restaurant),
   			      cookOf(Restaurant),
   			      Food),
   			Time)
   	      ]).
 */


% [restaurant,waiter,cook,food,time]
% WaiterOf(restaurant)=waiter &
% CookOf(restaurant)=cook &
% HoldsAt(BeWaiter3(waiter),time) ->
% Terminates(Order(waiter,cook,food),
%            BeWaiter3(waiter),
%            time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',104).

 /*  axiom(terminates(order(Waiter, Cook, Food), beWaiter3(Waiter), Time),
       [ waiter(Restaurant, Waiter),
         cook(Restaurant, Cook),
         beWaiter3(Waiter)
       ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',104).

 /*  (   waiter(A, Waiter5),
       cook(A, Cook6),
       beWaiter3(Waiter5)
   ->  terminates(order(Waiter5, Cook6, Order),
                  beWaiter3(Waiter5),
                  Terminates)
   ).
 */
if waiter(A, Waiter5), cook(A, Cook6), beWaiter3(Waiter5)then terminates(order(Waiter5, Cook6, Order), beWaiter3(Waiter5)at Terminates, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',104).

 /*  reactive_rule([ waiter(A,Waiter5),
   		cook(A,Cook6),
   		holds(beWaiter3(Waiter5),Holds)
   	      ],
   	      [ terminates(order(Waiter5,Cook6,Order),
   			   at(beWaiter3(Waiter5),
   			      Terminates),
   			   Terminates10)
   	      ]).
 */


% [restaurant,waiter,cook,food,time]
% WaiterOf(restaurant)=waiter &
% CookOf(restaurant)=cook &
% HoldsAt(BeWaiter3(waiter),time) ->
% Initiates(Order(waiter,cook,food),
%           BeWaiter4(waiter),
%           time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',112).

 /*  axiom(initiates(order(Waiter, Cook, Food), beWaiter4(Waiter), Time),
       [ waiter(Restaurant, Waiter),
         cook(Restaurant, Cook),
         beWaiter3(Waiter)
       ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',112).

 /*  (   waiter(A, Waiter5),
       cook(A, Cook6),
       beWaiter3(Waiter5)
   ->  initiates(order(Waiter5, Cook6, Order),
                 beWaiter4(Waiter5),
                 Initiates)
   ).
 */
if waiter(A, Waiter5), cook(A, Cook6), beWaiter3(Waiter5)then initiates(order(Waiter5, Cook6, Order), beWaiter4(Waiter5)at Initiates, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',112).

 /*  reactive_rule([ waiter(A,Waiter5),
   		cook(A,Cook6),
   		holds(beWaiter3(Waiter5),Holds)
   	      ],
   	      [ initiates(order(Waiter5,Cook6,Order),
   			  at(beWaiter4(Waiter5),Initiates),
   			  Initiates10)
   	      ]).
 */


% [waiter,food,time]
% HoldsAt(BeWaiter4(waiter),time) &
% ({agent} HoldsAt(KnowOrder(waiter,agent,food),time)) &
% HoldsAt(FoodPrepared(food),time) ->
% Happens(PickUp(waiter,food),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',120).

 /*  (   holds_at(beWaiter4(Waiter), Time),
       exists([Agent],
              holds_at(knowOrder(Waiter, Agent, Food), Time)),
       holds_at(foodPrepared(Food), Time)
   ->  happens(pickUp(Waiter, Food), Time)
   ).
 */
if beWaiter4(Waiter)at Time, exists([Agent], knowOrder(Waiter, Agent, Food)at Time), foodPrepared(Food)at Time then happens(pickUp(Waiter, Food), Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',120).

 /*  reactive_rule([ holds(beWaiter4(Waiter),Time),
   		exists([Agent],
   		       at(knowOrder(Waiter,
   				    Agent,
   				    Food),
   			  Time)),
   		holds(foodPrepared(Food),Time)
   	      ],
   	      [happens(pickUp(Waiter,Food),Time)]).
 */


% [waiter,food,time]
% HoldsAt(BeWaiter4(waiter),time) &
% ({agent} HoldsAt(KnowOrder(waiter,agent,food),time)) ->
% Terminates(PickUp(waiter,food),
%            BeWaiter4(waiter),
%            time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',126).

 /*  axiom(terminates(pickUp(Waiter, Food), beWaiter4(Waiter), Time),
       [beWaiter4(Waiter), knowOrder(Waiter, Agent, Food)]).
 */

 /*  (   beWaiter4(Bewaiter4),
       knowOrder(Bewaiter4, _, Knoworder)
   ->  terminates(pickUp(Bewaiter4, Knoworder),
                  beWaiter4(Bewaiter4),
                  Terminates)
   ).
 */
if beWaiter4(Bewaiter4), knowOrder(Bewaiter4, _, Knoworder)then terminates(pickUp(Bewaiter4, Knoworder), beWaiter4(Bewaiter4)at Terminates, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',126).

 /*  reactive_rule([ holds(beWaiter4(Bewaiter4),Holds),
   		knowOrder(Bewaiter4,_,Knoworder)
   	      ],
   	      [ terminates(pickUp(Bewaiter4,Knoworder),
   			   at(beWaiter4(Bewaiter4),
   			      Terminates),
   			   Terminates8)
   	      ]).
 */


% [waiter,food,time]
% HoldsAt(BeWaiter4(waiter),time) &
% ({agent} HoldsAt(KnowOrder(waiter,agent,food),time)) ->
% Initiates(PickUp(waiter,food),
%           BeWaiter5(waiter),
%           time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',133).

 /*  axiom(initiates(pickUp(Waiter, Food), beWaiter5(Waiter), Time),
       [beWaiter4(Waiter), knowOrder(Waiter, Agent, Food)]).
 */

 /*  (   beWaiter4(Bewaiter4),
       knowOrder(Bewaiter4, _, Knoworder)
   ->  initiates(pickUp(Bewaiter4, Knoworder),
                 beWaiter5(Bewaiter4),
                 Initiates)
   ).
 */
if beWaiter4(Bewaiter4), knowOrder(Bewaiter4, _, Knoworder)then initiates(pickUp(Bewaiter4, Knoworder), beWaiter5(Bewaiter4)at Initiates, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',133).

 /*  reactive_rule([ holds(beWaiter4(Bewaiter4),Holds),
   		knowOrder(Bewaiter4,_,Knoworder)
   	      ],
   	      [ initiates(pickUp(Bewaiter4,Knoworder),
   			  at(beWaiter5(Bewaiter4),
   			     Initiates),
   			  Initiates8)
   	      ]).
 */


% [restaurant,waiter,time]
% WaiterOf(restaurant)=waiter &
% HoldsAt(BeWaiter5(waiter),time) ->
% Happens(WalkThroughDoor21(waiter,KitchenDoorOf(restaurant)),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',140).

 /*  (   waiter(Restaurant, Waiter),
       holds_at(beWaiter5(Waiter), Time)
   ->  happens(walkThroughDoor21(Waiter, kitchenDoorOf(Restaurant)),
               Time)
   ).
 */
if waiter(Restaurant, Waiter), beWaiter5(Waiter)at Time then happens(walkThroughDoor21(Waiter, kitchenDoorOf(Restaurant)), Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',140).

 /*  reactive_rule([ waiter(Restaurant,Waiter),
   		holds(beWaiter5(Waiter),Time)
   	      ],
   	      [ happens(walkThroughDoor21(Waiter,
   					  kitchenDoorOf(Restaurant)),
   			Time)
   	      ]).
 */


% [restaurant,waiter,door,time]
% HoldsAt(BeWaiter5(waiter),time) &
% WaiterOf(restaurant)=waiter &
% KitchenDoorOf(restaurant)=door ->
% Terminates(WalkThroughDoor21(waiter,door),
%            BeWaiter5(waiter),
%            time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',145).

 /*  axiom(terminates(walkThroughDoor21(Waiter, Door), beWaiter5(Waiter), Time),
       [ beWaiter5(Waiter),
         waiter(Restaurant, Waiter),
         kitchenDoor(Restaurant, Door)
       ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',145).

 /*  (   beWaiter5(Bewaiter5),
       waiter(A, Bewaiter5),
       kitchenDoor(A, Kitchendoor)
   ->  terminates(walkThroughDoor21(Bewaiter5, Kitchendoor),
                  beWaiter5(Bewaiter5),
                  Terminates)
   ).
 */
if beWaiter5(Bewaiter5), waiter(A, Bewaiter5), kitchenDoor(A, Kitchendoor)then terminates(walkThroughDoor21(Bewaiter5, Kitchendoor), beWaiter5(Bewaiter5)at Terminates, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',145).

 /*  reactive_rule([ holds(beWaiter5(Bewaiter5),Holds),
   		waiter(A,Bewaiter5),
   		kitchenDoor(A,Kitchendoor)
   	      ],
   	      [ terminates(walkThroughDoor21(Bewaiter5,
   					     Kitchendoor),
   			   at(beWaiter5(Bewaiter5),
   			      Terminates),
   			   Terminates8)
   	      ]).
 */


% [restaurant,waiter,door,time]
% HoldsAt(BeWaiter5(waiter),time) &
% WaiterOf(restaurant)=waiter &
% KitchenDoorOf(restaurant)=door ->
% Initiates(WalkThroughDoor21(waiter,door),
%           BeWaiter6(waiter),
%           time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',153).

 /*  axiom(initiates(walkThroughDoor21(Waiter, Door), beWaiter6(Waiter), Time),
       [ beWaiter5(Waiter),
         waiter(Restaurant, Waiter),
         kitchenDoor(Restaurant, Door)
       ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',153).

 /*  (   beWaiter5(Bewaiter5),
       waiter(A, Bewaiter5),
       kitchenDoor(A, Kitchendoor)
   ->  initiates(walkThroughDoor21(Bewaiter5, Kitchendoor),
                 beWaiter6(Bewaiter5),
                 Initiates)
   ).
 */
if beWaiter5(Bewaiter5), waiter(A, Bewaiter5), kitchenDoor(A, Kitchendoor)then initiates(walkThroughDoor21(Bewaiter5, Kitchendoor), beWaiter6(Bewaiter5)at Initiates, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',153).

 /*  reactive_rule([ holds(beWaiter5(Bewaiter5),Holds),
   		waiter(A,Bewaiter5),
   		kitchenDoor(A,Kitchendoor)
   	      ],
   	      [ initiates(walkThroughDoor21(Bewaiter5,
   					    Kitchendoor),
   			  at(beWaiter6(Bewaiter5),
   			     Initiates),
   			  Initiates8)
   	      ]).
 */


% [restaurant,waiter,table,food,time]
% WaiterOf(restaurant)=waiter &
% TableOf(restaurant)=table &
% HoldsAt(BeWaiter6(waiter),time) &
% HoldsAt(Holding(waiter,food),time) ->
% Happens(PlaceOn(waiter,food,table),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',161).

 /*  (   waiter(Restaurant, Waiter),
       ( table(Restaurant, Table)
       ),
       holds_at(beWaiter6(Waiter), Time),
       holds_at(holding(Waiter, Food), Time)
   ->  happens(placeOn(Waiter, Food, Table), Time)
   ).
 */
if waiter(Restaurant, Waiter), table(Restaurant, Table), beWaiter6(Waiter)at Time, holding(Waiter, Food)at Time then happens(placeOn(Waiter, Food, Table), Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',161).

 /*  reactive_rule([ waiter(Restaurant,Waiter),
   		table(Restaurant,Table),
   		holds(beWaiter6(Waiter),Time),
   		holds(holding(Waiter,Food),Time)
   	      ],
   	      [ happens(placeOn(Waiter,Food,Table),
   			Time)
   	      ]).
 */


% [waiter,food,table,time]
% HoldsAt(BeWaiter6(waiter),time) ->
% Terminates(PlaceOn(waiter,food,table),
%            BeWaiter6(waiter),
%            time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',168).

 /*  axiom(terminates(placeOn(Waiter, Food, Table), beWaiter6(Waiter), Time),
       [beWaiter6(Waiter)]).
 */

 /*  beWaiter6(Bewaiter6) ->
       terminates(placeOn(Bewaiter6, _, Placeon),
                  beWaiter6(Bewaiter6),
                  Terminates).
 */
if beWaiter6(Bewaiter6)then terminates(placeOn(Bewaiter6, _, Placeon), beWaiter6(Bewaiter6)at Terminates, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',168).

 /*  reactive_rule([holds(beWaiter6(Bewaiter6),Holds)],
   	      [ terminates(placeOn(Bewaiter6,
   				   _,
   				   Placeon),
   			   at(beWaiter6(Bewaiter6),
   			      Terminates),
   			   Terminates8)
   	      ]).
 */


% [waiter,food,table,time]
% HoldsAt(BeWaiter6(waiter),time) ->
% Initiates(PlaceOn(waiter,food,table),
%           BeWaiter7(waiter),
%           time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',174).

 /*  axiom(initiates(placeOn(Waiter, Food, Table), beWaiter7(Waiter), Time),
       [beWaiter6(Waiter)]).
 */

 /*  beWaiter6(Bewaiter6) ->
       initiates(placeOn(Bewaiter6, _, Placeon),
                 beWaiter7(Bewaiter6),
                 Initiates).
 */
if beWaiter6(Bewaiter6)then initiates(placeOn(Bewaiter6, _, Placeon), beWaiter7(Bewaiter6)at Initiates, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',174).

 /*  reactive_rule([holds(beWaiter6(Bewaiter6),Holds)],
   	      [ initiates(placeOn(Bewaiter6,
   				  _,
   				  Placeon),
   			  at(beWaiter7(Bewaiter6),
   			     Initiates),
   			  Initiates8)
   	      ]).
 */


% [waiter,agent,bill,time]
% HoldsAt(BeWaiter7(waiter),time) ->
% Terminates(Request(agent,waiter,bill),
%            BeWaiter7(waiter),
%            time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',180).

 /*  axiom(terminates(request(Agent, Waiter, Bill), beWaiter7(Waiter), Time),
       [beWaiter7(Waiter)]).
 */

 /*  beWaiter7(Bewaiter7) ->
       terminates(request(RequestP_Num3_V, Bewaiter7, Request),
                  beWaiter7(Bewaiter7),
                  Terminates).
 */
if beWaiter7(Bewaiter7)then terminates(request(RequestP_Num3_V, Bewaiter7, Request), beWaiter7(Bewaiter7)at Terminates, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',180).

 /*  reactive_rule([beWaiter7(Bewaiter7)],
   	      [ terminates(request(RequestP_Num3_V,
   				   Bewaiter7,
   				   Request),
   			   at(beWaiter7(Bewaiter7),
   			      Terminates),
   			   Terminates8)
   	      ]).
 */


% [waiter,agent,bill,time]
% HoldsAt(BeWaiter7(waiter),time) ->
% Initiates(Request(agent,waiter,bill),
%           BeWaiter8(waiter),
%           time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',186).

 /*  axiom(initiates(request(Agent, Waiter, Bill), beWaiter8(Waiter), Time),
       [beWaiter7(Waiter)]).
 */

 /*  beWaiter7(Bewaiter7) ->
       initiates(request(RequestP_Num3_V, Bewaiter7, Request),
                 beWaiter8(Bewaiter7),
                 Initiates).
 */
if beWaiter7(Bewaiter7)then initiates(request(RequestP_Num3_V, Bewaiter7, Request), beWaiter8(Bewaiter7)at Initiates, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',186).

 /*  reactive_rule([beWaiter7(Bewaiter7)],
   	      [ initiates(request(RequestP_Num3_V,
   				  Bewaiter7,
   				  Request),
   			  at(beWaiter8(Bewaiter7),
   			     Initiates),
   			  Initiates8)
   	      ]).
 */


% [restaurant,waiter,bill,time]
% WaiterOf(restaurant)=waiter &
% BillOf(restaurant)=bill &
% HoldsAt(BeWaiter8(waiter),time) ->
% Happens(PickUp(waiter,bill),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',192).

 /*  (   waiter(Restaurant, Waiter),
       bill(Restaurant, Bill),
       holds_at(beWaiter8(Waiter), Time)
   ->  happens(pickUp(Waiter, Bill), Time)
   ).
 */
if waiter(Restaurant, Waiter), bill(Restaurant, Bill), beWaiter8(Waiter)at Time then happens(pickUp(Waiter, Bill), Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',192).

 /*  reactive_rule([ waiter(Restaurant,Waiter),
   		bill(Restaurant,Bill),
   		holds(beWaiter8(Waiter),Time)
   	      ],
   	      [happens(pickUp(Waiter,Bill),Time)]).
 */


% [waiter,bill,time]
% HoldsAt(BeWaiter8(waiter),time) ->
% Terminates(PickUp(waiter,bill),
%            BeWaiter8(waiter),
%            time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',198).

 /*  axiom(terminates(pickUp(Waiter, Bill), beWaiter8(Waiter), Time),
       [beWaiter8(Waiter)]).
 */

 /*  beWaiter8(Bewaiter8) ->
       terminates(pickUp(Bewaiter8, Pickup),
                  beWaiter8(Bewaiter8),
                  Terminates).
 */
if beWaiter8(Bewaiter8)then terminates(pickUp(Bewaiter8, Pickup), beWaiter8(Bewaiter8)at Terminates, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',198).

 /*  reactive_rule([holds(beWaiter8(Bewaiter8),Holds)],
   	      [ terminates(pickUp(Bewaiter8,Pickup),
   			   at(beWaiter8(Bewaiter8),
   			      Terminates),
   			   Terminates7)
   	      ]).
 */


% [waiter,bill,time]
% HoldsAt(BeWaiter8(waiter),time) ->
% Initiates(PickUp(waiter,bill),
%           BeWaiter9(waiter),
%           time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',204).

 /*  axiom(initiates(pickUp(Waiter, Bill), beWaiter9(Waiter), Time),
       [beWaiter8(Waiter)]).
 */

 /*  beWaiter8(Bewaiter8) ->
       initiates(pickUp(Bewaiter8, Pickup),
                 beWaiter9(Bewaiter8),
                 Initiates).
 */
if beWaiter8(Bewaiter8)then initiates(pickUp(Bewaiter8, Pickup), beWaiter9(Bewaiter8)at Initiates, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',204).

 /*  reactive_rule([holds(beWaiter8(Bewaiter8),Holds)],
   	      [ initiates(pickUp(Bewaiter8,Pickup),
   			  at(beWaiter9(Bewaiter8),
   			     Initiates),
   			  Initiates7)
   	      ]).
 */


% [restaurant,waiter,bill,table,time]
% WaiterOf(restaurant)=waiter &
% BillOf(restaurant)=bill &
% TableOf(restaurant)=table &
% HoldsAt(BeWaiter9(waiter),time) ->
% Happens(PlaceOn(waiter,bill,table),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',210).

 /*  (   waiter(Restaurant, Waiter),
       bill(Restaurant, Bill),
       ( table(Restaurant, Table)
       ),
       holds_at(beWaiter9(Waiter), Time)
   ->  happens(placeOn(Waiter, Bill, Table), Time)
   ).
 */
if waiter(Restaurant, Waiter), bill(Restaurant, Bill), table(Restaurant, Table), beWaiter9(Waiter)at Time then happens(placeOn(Waiter, Bill, Table), Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',210).

 /*  reactive_rule([ waiter(Restaurant,Waiter),
   		bill(Restaurant,Bill),
   		table(Restaurant,Table),
   		holds(beWaiter9(Waiter),Time)
   	      ],
   	      [ happens(placeOn(Waiter,Bill,Table),
   			Time)
   	      ]).
 */


% [waiter,bill,table,time]
% HoldsAt(BeWaiter9(waiter),time) ->
% Terminates(PlaceOn(waiter,bill,table),
%            BeWaiter9(waiter),
%            time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',217).

 /*  axiom(terminates(placeOn(Waiter, Bill, Table), beWaiter9(Waiter), Time),
       [beWaiter9(Waiter)]).
 */

 /*  beWaiter9(Bewaiter9) ->
       terminates(placeOn(Bewaiter9, _, Placeon),
                  beWaiter9(Bewaiter9),
                  Terminates).
 */
if beWaiter9(Bewaiter9)then terminates(placeOn(Bewaiter9, _, Placeon), beWaiter9(Bewaiter9)at Terminates, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',217).

 /*  reactive_rule([holds(beWaiter9(Bewaiter9),Holds)],
   	      [ terminates(placeOn(Bewaiter9,
   				   _,
   				   Placeon),
   			   at(beWaiter9(Bewaiter9),
   			      Terminates),
   			   Terminates8)
   	      ]).
 */


% [waiter,bill,table,time]
% HoldsAt(BeWaiter9(waiter),time) ->
% Initiates(PlaceOn(waiter,bill,table),
%           BeWaiter0(waiter),
%           time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',223).

 /*  axiom(initiates(placeOn(Waiter, Bill, Table), beWaiter0(Waiter), Time),
       [beWaiter9(Waiter)]).
 */

 /*  beWaiter9(Bewaiter9) ->
       initiates(placeOn(Bewaiter9, _, Placeon),
                 beWaiter0(Bewaiter9),
                 Initiates).
 */
if beWaiter9(Bewaiter9)then initiates(placeOn(Bewaiter9, _, Placeon), beWaiter0(Bewaiter9)at Initiates, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',223).

 /*  reactive_rule([holds(beWaiter9(Bewaiter9),Holds)],
   	      [ initiates(placeOn(Bewaiter9,
   				  _,
   				  Placeon),
   			  at(beWaiter0(Bewaiter9),
   			     Initiates),
   			  Initiates8)
   	      ]).
 */


%; awaiting next waiter order

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',229).
% fluent BeCook0(cook)
 %  fluent(beCook0(cook)).
 %  fluent(beCook0(cook)).
fluents([beCook0/1]).
mpred_prop(beCook0(cook),fluent).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',231).
%; waiter order received

% fluent BeCook1(cook)
 %  fluent(beCook1(cook)).
 %  fluent(beCook1(cook)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',231).
fluents([beCook1/1]).
mpred_prop(beCook1(cook),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',234).
% xor BeCook0, BeCook1
 %  ==>xor[beCook0,beCook1].
==>xor[beCook0,beCook1].


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',236).
% [cook,agent,food,time]
% HoldsAt(BeCook0(cook),time) ->
% Terminates(Order(agent,cook,food),
%            BeCook0(cook),
%            time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',236).

 /*  axiom(terminates(order(Agent, Cook, Food), beCook0(Cook), Time),
       [beCook0(Cook)]).
 */

 /*  beCook0(Becook0) ->
       terminates(order(OrderP_Num3_V, Becook0, Order),
                  beCook0(Becook0),
                  Terminates).
 */
if beCook0(Becook0)then terminates(order(OrderP_Num3_V, Becook0, Order), beCook0(Becook0)at Terminates, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',236).

 /*  reactive_rule([beCook0(Becook0)],
   	      [ terminates(order(OrderP_Num3_V,
   				 Becook0,
   				 Order),
   			   at(beCook0(Becook0),Terminates),
   			   Terminates8)
   	      ]).
 */


% [cook,agent,food,time]
% HoldsAt(BeCook0(cook),time) ->
% Initiates(Order(agent,cook,food),
%           BeCook1(cook),
%           time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',243).

 /*  axiom(initiates(order(Agent, Cook, Food), beCook1(Cook), Time),
       [beCook0(Cook)]).
 */

 /*  beCook0(Becook0) ->
       initiates(order(OrderP_Num3_V, Becook0, Order),
                 beCook1(Becook0),
                 Initiates).
 */
if beCook0(Becook0)then initiates(order(OrderP_Num3_V, Becook0, Order), beCook1(Becook0)at Initiates, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',243).

 /*  reactive_rule([beCook0(Becook0)],
   	      [ initiates(order(OrderP_Num3_V,
   				Becook0,
   				Order),
   			  at(beCook1(Becook0),Initiates),
   			  Initiates8)
   	      ]).
 */

% event FoodPrepare(agent,food)
 %  event(foodPrepare(agent,food)).
 %  event(foodPrepare(agent,food)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',247).
actions([foodPrepare/2]).
mpred_prop(foodPrepare(agent,food),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',250).
% fluent FoodPrepared(food)
 %  fluent(foodPrepared(food)).
 %  fluent(foodPrepared(food)).
fluents([foodPrepared/1]).
mpred_prop(foodPrepared(food),fluent).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',252).
% [agent,food,time]
% Initiates(FoodPrepare(agent,food),
%           FoodPrepared(food),
%           time).

 /*  axiom(initiates(foodPrepare(Agent, Food), foodPrepared(Food), Time),
       []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',252).

 /*  initiates(foodPrepare(_,Foodprepare),
   	  foodPrepared(Foodprepare),
   	  Initiates).
 */
foodPrepare(_, Foodprepare)initiates foodPrepared(Foodprepare).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',252).

 /*  initiated(happens(foodPrepare(_,Foodprepare),
   		  Time_From,
   		  Time_Until),
   	  foodPrepared(Foodprepare),
   	  []).
 */


% [agent,food,time]
% Happens(FoodPrepare(agent,food),time) ->
% {location}% 
% HoldsAt(At(agent,location),time) &
% HoldsAt(At(food,location),time).
 %  clausify_pnf=exists([Location],  (happens(foodPrepare(Agent, Food), Time)->holds_at(at(Agent, Location), Time), holds_at(at(Food, Location), Time))).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',258).

 /*  not(happens(foodPrepare(Agent, Food), Time)) :-
       (   not(holds_at(at(Agent, Exists_Location), Time))
       ;   not(holds_at(at(Food, Exists_Location), Time))
       ),
       some(Exists_Location, '$kolem_Fn_3'(Agent, Food, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',258).

 /*  fix_axiom_head(Time) ->
       [ not(happens(foodPrepare(Agent, Food), Time)),
          (->),
         not(foodPrepare(Agent, Food))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',258).

 /*  axiom(not(foodPrepare(Agent, Food)),
       [  (not(at(Agent, Exists_Location));not(at(Food, Exists_Location))),
         some(Exists_Location,
              '$kolem_Fn_3'(Agent, Food, Time))
       ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',258).

 /*  (   (   not(at(Kolem_Fn_3P_Num3_V, Tloc))
       ;   not(at(Foodprepare, Tloc))
       ),
       some(Tloc,
            '$kolem_Fn_3'(Kolem_Fn_3P_Num3_V,
                          Foodprepare,
                          Kolem_Fn_3))
   ->  not(foodPrepare(Kolem_Fn_3P_Num3_V, Foodprepare))
   ).
 */
if (not loc_at(Kolem_Fn_3P_Num3_V, Tloc);not loc_at(Foodprepare, Tloc)), some(Tloc, '$kolem_Fn_3'(Kolem_Fn_3P_Num3_V, Foodprepare, Kolem_Fn_3))then not foodPrepare(Kolem_Fn_3P_Num3_V, Foodprepare).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',258).

 /*   reactive_rule([  (not(loc_at(Kolem_Fn_3P_Num3_V, Tloc));not(loc_at(Foodprepare, Tloc))),
                      some(Tloc,
                           '$kolem_Fn_3'(Kolem_Fn_3P_Num3_V,
                                         Foodprepare,
                                         Kolem_Fn_3))
                    ],
                    [ not(foodPrepare(Kolem_Fn_3P_Num3_V, Foodprepare))
                    ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',258).

 /*  holds_at(at(Agent, Exists_Location), Time) :-
       happens(foodPrepare(Agent, Food), Time),
       some(Exists_Location, '$kolem_Fn_3'(Agent, Food, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',258).

 /*  fix_axiom_head(Time) ->
       [ holds_at(at(Agent, Exists_Location), Time),
          (->),
         at(Agent, Exists_Location)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',258).

 /*  axiom(at(Agent, Exists_Location),
       [ foodPrepare(Agent, Food),
         some(Exists_Location,
              '$kolem_Fn_3'(Agent, Food, Time))
       ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',258).

 /*  (   foodPrepare(Kolem_Fn_3P_Num3_V12, Foodprepare10),
       some(Tloc9,
            '$kolem_Fn_3'(Kolem_Fn_3P_Num3_V12,
                          Foodprepare10,
                          Kolem_Fn_311))
   ->  at(Kolem_Fn_3P_Num3_V12, Tloc9)
   ).
 */
if foodPrepare(Kolem_Fn_3P_Num3_V12, Foodprepare10), some(Tloc9, '$kolem_Fn_3'(Kolem_Fn_3P_Num3_V12, Foodprepare10, Kolem_Fn_311))then loc_at(Kolem_Fn_3P_Num3_V12, Tloc9).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',258).

 /*  reactive_rule([ happens(foodPrepare(Kolem_Fn_3P_Num3_V12,
   				    Foodprepare10),
   			Time_From,
   			Time_Until),
   		some(Tloc9,
   		     '$kolem_Fn_3'(Kolem_Fn_3P_Num3_V12,
   				   Foodprepare10,
   				   Kolem_Fn_311))
   	      ],
   	      [loc_at(Kolem_Fn_3P_Num3_V12,Tloc9)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',258).

 /*  holds_at(at(Food, Exists_Location), Time) :-
       happens(foodPrepare(Agent, Food), Time),
       some(Exists_Location, '$kolem_Fn_3'(Agent, Food, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',258).

 /*  fix_axiom_head(Time) ->
       [ holds_at(at(Food, Exists_Location), Time),
          (->),
         at(Food, Exists_Location)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',258).

 /*  axiom(at(Food, Exists_Location),
       [ foodPrepare(Agent, Food),
         some(Exists_Location,
              '$kolem_Fn_3'(Agent, Food, Time))
       ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',258).

 /*  (   foodPrepare(Kolem_Fn_3P_Num3_V18, Foodprepare16),
       some(Tloc15,
            '$kolem_Fn_3'(Kolem_Fn_3P_Num3_V18,
                          Foodprepare16,
                          Kolem_Fn_317))
   ->  at(Foodprepare16, Tloc15)
   ).
 */
if foodPrepare(Kolem_Fn_3P_Num3_V18, Foodprepare16), some(Tloc15, '$kolem_Fn_3'(Kolem_Fn_3P_Num3_V18, Foodprepare16, Kolem_Fn_317))then loc_at(Foodprepare16, Tloc15).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',258).

 /*  reactive_rule([ happens(foodPrepare(Kolem_Fn_3P_Num3_V18,
   				    Foodprepare16),
   			Time_From19,
   			Time_Until20),
   		some(Tloc15,
   		     '$kolem_Fn_3'(Kolem_Fn_3P_Num3_V18,
   				   Foodprepare16,
   				   Kolem_Fn_317))
   	      ],
   	      [loc_at(Foodprepare16,Tloc15)]).
 */


% [cook,agent,food,time]
% HoldsAt(BeCook1(cook),time) &
% HoldsAt(KnowOrder(cook,agent,food),time) ->
% Happens(FoodPrepare(cook,food),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',264).

 /*  (   holds_at(beCook1(Cook), Time),
       holds_at(knowOrder(Cook, Agent, Food), Time)
   ->  happens(foodPrepare(Cook, Food), Time)
   ).
 */
if beCook1(Cook)at Time, knowOrder(Cook, Agent, Food)at Time then happens(foodPrepare(Cook, Food), Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',264).

 /*  reactive_rule([ holds(beCook1(Cook),Time),
   		holds(knowOrder(Cook,Agent,Food),
   		      Time)
   	      ],
   	      [happens(foodPrepare(Cook,Food),Time)]).
 */


% [cook,food,time]
% HoldsAt(BeCook1(cook),time) ->
% Terminates(FoodPrepare(cook,food),
%            BeCook1(cook),
%            time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',269).

 /*  axiom(terminates(foodPrepare(Cook, Food), beCook1(Cook), Time),
       [beCook1(Cook)]).
 */

 /*  beCook1(Becook1) ->
       terminates(foodPrepare(Becook1, Foodprepare),
                  beCook1(Becook1),
                  Terminates).
 */
if beCook1(Becook1)then terminates(foodPrepare(Becook1, Foodprepare), beCook1(Becook1)at Terminates, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',269).

 /*  reactive_rule([holds(beCook1(Becook1),Holds)],
   	      [ terminates(foodPrepare(Becook1,Foodprepare),
   			   at(beCook1(Becook1),Terminates),
   			   Terminates7)
   	      ]).
 */


% [cook,food,time]
% HoldsAt(BeCook1(cook),time) ->
% Initiates(FoodPrepare(cook,food),
%           BeCook0(cook),
%           time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',275).

 /*  axiom(initiates(foodPrepare(Cook, Food), beCook0(Cook), Time),
       [beCook1(Cook)]).
 */

 /*  beCook1(Becook1) ->
       initiates(foodPrepare(Becook1, Foodprepare),
                 beCook0(Becook1),
                 Initiates).
 */
if beCook1(Becook1)then initiates(foodPrepare(Becook1, Foodprepare), beCook0(Becook1)at Initiates, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',275).

 /*  reactive_rule([holds(beCook1(Becook1),Holds)],
   	      [ initiates(foodPrepare(Becook1,Foodprepare),
   			  at(beCook0(Becook1),Initiates),
   			  Initiates7)
   	      ]).
 */


%; End of file.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',279).
% translate: ending  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e.lps 
