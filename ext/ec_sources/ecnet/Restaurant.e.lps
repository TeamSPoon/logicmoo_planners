:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',664).
% From E: 
% 
% :-call_pel_directive(translate(unskipped,'/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e.lps')).
:- call_pel_directive(translate(unskipped,
                                '/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e.lps')).
:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(lps).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RepRest.e',664).
% From E: 
% 
% :-call_pel_directive(translate(begining,'/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e.lps')).
:- call_pel_directive(translate(begining,
                                '/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e.lps')).
% Sat, 10 Oct 2020 15:31:42 GMT File: <stream>(0x559e4b1d8500)%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',11).
% sort restaurant: script
% From E: 
% 
% subsort(restaurant,script).
subsort(restaurant,script).

% sort waiter: agent
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',11).
% From E: 
% 
% subsort(waiter,agent).
subsort(waiter,agent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',13).
% sort cook: agent
% From E: 
% 
% subsort(cook,agent).
subsort(cook,agent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',15).
% function BillOf(restaurant): bill
% From E: 
% 
% function(billOf(restaurant),bill).
function(billOf(restaurant),bill).

% function CookOf(restaurant): cook
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',15).
% From E: 
% 
% function(cookOf(restaurant),cook).
function(cookOf(restaurant),cook).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',17).
% function TableOf(restaurant): table
% From E: 
% 
% function(tableOf(restaurant),table).
function(tableOf(restaurant),table).

% function WaiterOf(restaurant): waiter
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',17).
% From E: 
% 
% function(waiterOf(restaurant),waiter).
function(waiterOf(restaurant),waiter).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',19).
% function KitchenDoorOf(restaurant): door
% From E: 
% 
% function(kitchenDoorOf(restaurant),door).
function(kitchenDoorOf(restaurant),door).
%; awaiting customer/waiter has set down bill on customer's table

% fluent BeWaiter0(waiter)
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',21).
% From E: 
% 
% fluent(beWaiter0(waiter)).
mpred_prop(beWaiter0(waiter),fluent).
fluents([beWaiter0/1]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',24).
%; awaiting customer order

% fluent BeWaiter1(waiter)
% From E: 
% 
% fluent(beWaiter1(waiter)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',24).
mpred_prop(beWaiter1(waiter),fluent).
fluents([beWaiter1/1]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',27).
%; has customer order

% fluent BeWaiter2(waiter)
% From E: 
% 
% fluent(beWaiter2(waiter)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',27).
mpred_prop(beWaiter2(waiter),fluent).
fluents([beWaiter2/1]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',30).
%; in kitchen

% fluent BeWaiter3(waiter)
% From E: 
% 
% fluent(beWaiter3(waiter)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',30).
mpred_prop(beWaiter3(waiter),fluent).
fluents([beWaiter3/1]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',33).
%; awaiting preparation of order

% fluent BeWaiter4(waiter)
% From E: 
% 
% fluent(beWaiter4(waiter)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',33).
mpred_prop(beWaiter4(waiter),fluent).
fluents([beWaiter4/1]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',36).
%; has order

% fluent BeWaiter5(waiter)
% From E: 
% 
% fluent(beWaiter5(waiter)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',36).
mpred_prop(beWaiter5(waiter),fluent).
fluents([beWaiter5/1]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',39).
%; back in dining room

% fluent BeWaiter6(waiter)
% From E: 
% 
% fluent(beWaiter6(waiter)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',39).
mpred_prop(beWaiter6(waiter),fluent).
fluents([beWaiter6/1]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',42).
%; order delivered to customer (can ask if all is OK)

% fluent BeWaiter7(waiter)
% From E: 
% 
% fluent(beWaiter7(waiter)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',42).
mpred_prop(beWaiter7(waiter),fluent).
fluents([beWaiter7/1]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',45).
%; customer has requested bill

% fluent BeWaiter8(waiter)
% From E: 
% 
% fluent(beWaiter8(waiter)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',45).
mpred_prop(beWaiter8(waiter),fluent).
fluents([beWaiter8/1]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',48).
%; waiter is holding bill

% fluent BeWaiter9(waiter)
% From E: 
% 
% fluent(beWaiter9(waiter)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',48).
mpred_prop(beWaiter9(waiter),fluent).
fluents([beWaiter9/1]).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',51).
% xor BeWaiter0, BeWaiter1, BeWaiter2, BeWaiter3, BeWaiter4, BeWaiter5, BeWaiter6, BeWaiter7, BeWaiter8, BeWaiter9
% From E: 
% 
% xor([beWaiter0,beWaiter1,beWaiter2,beWaiter3,beWaiter4,beWaiter5,beWaiter6,beWaiter7,beWaiter8,beWaiter9]).
xor([ beWaiter0,
      beWaiter1,
      beWaiter2,
      beWaiter3,
      beWaiter4,
      beWaiter5,
      beWaiter6,
      beWaiter7,
      beWaiter8,
      beWaiter9
    ]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',53).
% [waiter,agent,time]
% HoldsAt(BeWaiter0(waiter),time) ->
% Terminates(Greet(waiter,agent),
%            BeWaiter0(waiter),
%            time).
% From E: 
% 
% '->'(
%    holds_at(beWaiter0(Waiter),Time), 
%    terminates_at(
%       greet(Waiter,Agent), 
%       beWaiter0(Waiter), 
%       Time)).
 %   [Time].
greet(Waiter, Agent)terminates beWaiter0(Waiter)if beWaiter0(Waiter).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',53).

 /*  terminated(happens(greet(Waiter,Agent),
   		   Time_From,
   		   Time_Until),
   	   beWaiter0(Waiter),
   	   [holds(beWaiter0(Waiter),Time_From)]).
 */
 %  "% =================================".


% [waiter,agent,time]
% HoldsAt(BeWaiter0(waiter),time) ->
% Initiates(Greet(waiter,agent),
%           BeWaiter1(waiter),
%           time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',60).
% From E: 
% 
% '->'(
%    holds_at(beWaiter0(Waiter),Time), 
%    initiates_at(
%       greet(Waiter,Agent), 
%       beWaiter1(Waiter), 
%       Time)).
 %   [Time].
greet(Waiter, Agent)initiates beWaiter1(Waiter)if beWaiter0(Waiter).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',60).

 /*  initiated(happens(greet(Waiter,Agent),
   		  Time_From,
   		  Time_Until),
   	  beWaiter1(Waiter),
   	  [holds(beWaiter0(Waiter),Time_From)]).
 */
 %  "% =================================".


% [waiter,agent,food,time]
% HoldsAt(BeWaiter1(waiter),time) ->
% Terminates(Order(agent,waiter,food),
%            BeWaiter1(waiter),
%            time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',66).
% From E: 
% 
% '->'(
%    holds_at(beWaiter1(Waiter),Time), 
%    terminates_at(
%       order(Agent,Waiter,Food), 
%       beWaiter1(Waiter), 
%       Time)).
 %   [Time].
order(Agent, Waiter, Food)terminates beWaiter1(Waiter)if beWaiter1(Waiter).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',66).

 /*  terminated(happens(order(Agent,Waiter,Food),
   		   Time_From,
   		   Time_Until),
   	   beWaiter1(Waiter),
   	   [holds(beWaiter1(Waiter),Time_From)]).
 */
 %  "% =================================".


% [waiter,agent,food,time]
% HoldsAt(BeWaiter1(waiter),time) ->
% Initiates(Order(agent,waiter,food),
%           BeWaiter2(waiter),
%           time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',72).
% From E: 
% 
% '->'(
%    holds_at(beWaiter1(Waiter),Time), 
%    initiates_at(
%       order(Agent,Waiter,Food), 
%       beWaiter2(Waiter), 
%       Time)).
 %   [Time].
order(Agent, Waiter, Food)initiates beWaiter2(Waiter)if beWaiter1(Waiter).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',72).

 /*  initiated(happens(order(Agent,Waiter,Food),
   		  Time_From,
   		  Time_Until),
   	  beWaiter2(Waiter),
   	  [holds(beWaiter1(Waiter),Time_From)]).
 */
 %  "% =================================".


% [restaurant,waiter,time]
% WaiterOf(restaurant)=waiter &
% HoldsAt(BeWaiter2(waiter),time) ->
% Happens(WalkThroughDoor12(waiter,KitchenDoorOf(restaurant)),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',78).
% From E: 
% 
% '->'(
%    (waiterOf(Restaurant)=Waiter , 
%     holds_at(beWaiter2(Waiter),Time)), 
%    happens_at(walkThroughDoor12(Waiter,kitchenDoorOf(Restaurant)),Time)).
 %   [Time].
walkThroughDoor12(Waiter, kitchenDoorOf(Restaurant))if waiterOf(Restaurant, Waiter), beWaiter2(Waiter).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',78).

 /*  l_events(happens(walkThroughDoor12(Waiter,
   				   kitchenDoorOf(Restaurant)),
   		 Time_From,
   		 Time_From),
   	 [ waiterOf(Restaurant,Waiter),
   	   holds(beWaiter2(Waiter),Time_From)
   	 ]).
 */
 %  "% =================================".


% [restaurant,waiter,door,time]
% HoldsAt(BeWaiter2(waiter),time) &
% WaiterOf(restaurant)=waiter &
% KitchenDoorOf(restaurant)=door ->
% Terminates(WalkThroughDoor12(waiter,door),
%            BeWaiter2(waiter),
%            time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',83).
% From E: 
% 
% '->'(
%    (holds_at(beWaiter2(Waiter),Time) , 
%      waiterOf(Restaurant)=Waiter , 
%     kitchenDoorOf(Restaurant)=Door), 
%    terminates_at(
%       walkThroughDoor12(Waiter,Door), 
%       beWaiter2(Waiter), 
%       Time)).
 %   [Time].
walkThroughDoor12(Waiter, Door)terminates beWaiter2(Waiter)if beWaiter2(Waiter), waiterOf(Restaurant, Waiter), kitchenDoorOf(Restaurant, Door).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',83).

 /*  terminated(happens(walkThroughDoor12(Waiter,Door),
   		   Time_From,
   		   Time_Until),
   	   beWaiter2(Waiter),
   	   [ holds(beWaiter2(Waiter),Time_From),
   	     waiterOf(Restaurant,Waiter),
   	     kitchenDoorOf(Restaurant,Door)
   	   ]).
 */
 %  "% =================================".


% [restaurant,waiter,door,time]
% HoldsAt(BeWaiter2(waiter),time) &
% WaiterOf(restaurant)=waiter &
% KitchenDoorOf(restaurant)=door ->
% Initiates(WalkThroughDoor12(waiter,door),
%           BeWaiter3(waiter),
%           time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',91).
% From E: 
% 
% '->'(
%    (holds_at(beWaiter2(Waiter),Time) , 
%      waiterOf(Restaurant)=Waiter , 
%     kitchenDoorOf(Restaurant)=Door), 
%    initiates_at(
%       walkThroughDoor12(Waiter,Door), 
%       beWaiter3(Waiter), 
%       Time)).
 %   [Time].
walkThroughDoor12(Waiter, Door)initiates beWaiter3(Waiter)if beWaiter2(Waiter), waiterOf(Restaurant, Waiter), kitchenDoorOf(Restaurant, Door).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',91).

 /*  initiated(happens(walkThroughDoor12(Waiter,Door),
   		  Time_From,
   		  Time_Until),
   	  beWaiter3(Waiter),
   	  [ holds(beWaiter2(Waiter),Time_From),
   	    waiterOf(Restaurant,Waiter),
   	    kitchenDoorOf(Restaurant,Door)
   	  ]).
 */
 %  "% =================================".


% [restaurant,food,time]
% HoldsAt(BeWaiter3(WaiterOf(restaurant)),time) &
% ({agent} HoldsAt(KnowOrder(WaiterOf(restaurant),agent,food),time)) ->
% Happens(Order(WaiterOf(restaurant),CookOf(restaurant),food),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',99).
% From E: 
% 
% '->'(
%    (holds_at(beWaiter3(waiterOf(Restaurant)),Time) , 
%     exists(
%        [Agent], 
%        holds_at(knowOrder(waiterOf(Restaurant),Agent,Food),Time))), 
%    happens_at(order(waiterOf(Restaurant),cookOf(Restaurant),Food),Time)).
 %   [Time].
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',99).
beWaiter3(waiterOf(Restaurant)), exists([Agent], knowOrder(waiterOf(Restaurant), Agent, Food)) ->
    order(waiterOf(Restaurant), cookOf(Restaurant), Food).


% [restaurant,waiter,cook,food,time]
% WaiterOf(restaurant)=waiter &
% CookOf(restaurant)=cook &
% HoldsAt(BeWaiter3(waiter),time) ->
% Terminates(Order(waiter,cook,food),
%            BeWaiter3(waiter),
%            time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',104).
% From E: 
% 
% '->'(
%    (waiterOf(Restaurant)=Waiter , 
%      cookOf(Restaurant)=Cook , 
%     holds_at(beWaiter3(Waiter),Time)), 
%    terminates_at(
%       order(Waiter,Cook,Food), 
%       beWaiter3(Waiter), 
%       Time)).
 %   [Time].
order(Waiter, Cook, Food)terminates beWaiter3(Waiter)if waiterOf(Restaurant, Waiter), cookOf(Restaurant, Cook), beWaiter3(Waiter).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',104).

 /*  terminated(happens(order(Waiter,Cook,Food),
   		   Time_From,
   		   Time_Until),
   	   beWaiter3(Waiter),
   	   [ waiterOf(Restaurant,Waiter),
   	     cookOf(Restaurant,Cook),
   	     holds(beWaiter3(Waiter),Time_From)
   	   ]).
 */
 %  "% =================================".


% [restaurant,waiter,cook,food,time]
% WaiterOf(restaurant)=waiter &
% CookOf(restaurant)=cook &
% HoldsAt(BeWaiter3(waiter),time) ->
% Initiates(Order(waiter,cook,food),
%           BeWaiter4(waiter),
%           time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',112).
% From E: 
% 
% '->'(
%    (waiterOf(Restaurant)=Waiter , 
%      cookOf(Restaurant)=Cook , 
%     holds_at(beWaiter3(Waiter),Time)), 
%    initiates_at(
%       order(Waiter,Cook,Food), 
%       beWaiter4(Waiter), 
%       Time)).
 %   [Time].
order(Waiter, Cook, Food)initiates beWaiter4(Waiter)if waiterOf(Restaurant, Waiter), cookOf(Restaurant, Cook), beWaiter3(Waiter).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',112).

 /*  initiated(happens(order(Waiter,Cook,Food),
   		  Time_From,
   		  Time_Until),
   	  beWaiter4(Waiter),
   	  [ waiterOf(Restaurant,Waiter),
   	    cookOf(Restaurant,Cook),
   	    holds(beWaiter3(Waiter),Time_From)
   	  ]).
 */
 %  "% =================================".


% [waiter,food,time]
% HoldsAt(BeWaiter4(waiter),time) &
% ({agent} HoldsAt(KnowOrder(waiter,agent,food),time)) &
% HoldsAt(FoodPrepared(food),time) ->
% Happens(PickUp(waiter,food),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',120).
% From E: 
% 
% '->'(
%    (holds_at(beWaiter4(Waiter),Time) , 
%      exists(
%         [Agent], 
%         holds_at(knowOrder(Waiter,Agent,Food),Time)) , 
%     holds_at(foodPrepared(Food),Time)), 
%    happens_at(pickUp(Waiter,Food),Time)).
 %   [Time].
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',120).
beWaiter4(Waiter), exists([Agent], knowOrder(Waiter, Agent, Food)), foodPrepared(Food) ->
    pickUp(Waiter, Food).


% [waiter,food,time]
% HoldsAt(BeWaiter4(waiter),time) &
% ({agent} HoldsAt(KnowOrder(waiter,agent,food),time)) ->
% Terminates(PickUp(waiter,food),
%            BeWaiter4(waiter),
%            time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',126).
% From E: 
% 
% '->'(
%    (holds_at(beWaiter4(Waiter),Time) , 
%     exists(
%        [Agent], 
%        holds_at(knowOrder(Waiter,Agent,Food),Time))), 
%    terminates_at(
%       pickUp(Waiter,Food), 
%       beWaiter4(Waiter), 
%       Time)).
 %   [Time].
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',126).
beWaiter4(Waiter), exists([Agent], knowOrder(Waiter, Agent, Food)) ->
    terminates(pickUp(Waiter, Food), beWaiter4(Waiter)).


% [waiter,food,time]
% HoldsAt(BeWaiter4(waiter),time) &
% ({agent} HoldsAt(KnowOrder(waiter,agent,food),time)) ->
% Initiates(PickUp(waiter,food),
%           BeWaiter5(waiter),
%           time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',133).
% From E: 
% 
% '->'(
%    (holds_at(beWaiter4(Waiter),Time) , 
%     exists(
%        [Agent], 
%        holds_at(knowOrder(Waiter,Agent,Food),Time))), 
%    initiates_at(
%       pickUp(Waiter,Food), 
%       beWaiter5(Waiter), 
%       Time)).
 %   [Time].
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',133).
beWaiter4(Waiter), exists([Agent], knowOrder(Waiter, Agent, Food)) ->
    initiates(pickUp(Waiter, Food), beWaiter5(Waiter)).


% [restaurant,waiter,time]
% WaiterOf(restaurant)=waiter &
% HoldsAt(BeWaiter5(waiter),time) ->
% Happens(WalkThroughDoor21(waiter,KitchenDoorOf(restaurant)),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',140).
% From E: 
% 
% '->'(
%    (waiterOf(Restaurant)=Waiter , 
%     holds_at(beWaiter5(Waiter),Time)), 
%    happens_at(walkThroughDoor21(Waiter,kitchenDoorOf(Restaurant)),Time)).
 %   [Time].
walkThroughDoor21(Waiter, kitchenDoorOf(Restaurant))if waiterOf(Restaurant, Waiter), beWaiter5(Waiter).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',140).

 /*  l_events(happens(walkThroughDoor21(Waiter,
   				   kitchenDoorOf(Restaurant)),
   		 Time_From,
   		 Time_From),
   	 [ waiterOf(Restaurant,Waiter),
   	   holds(beWaiter5(Waiter),Time_From)
   	 ]).
 */
 %  "% =================================".


% [restaurant,waiter,door,time]
% HoldsAt(BeWaiter5(waiter),time) &
% WaiterOf(restaurant)=waiter &
% KitchenDoorOf(restaurant)=door ->
% Terminates(WalkThroughDoor21(waiter,door),
%            BeWaiter5(waiter),
%            time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',145).
% From E: 
% 
% '->'(
%    (holds_at(beWaiter5(Waiter),Time) , 
%      waiterOf(Restaurant)=Waiter , 
%     kitchenDoorOf(Restaurant)=Door), 
%    terminates_at(
%       walkThroughDoor21(Waiter,Door), 
%       beWaiter5(Waiter), 
%       Time)).
 %   [Time].
walkThroughDoor21(Waiter, Door)terminates beWaiter5(Waiter)if beWaiter5(Waiter), waiterOf(Restaurant, Waiter), kitchenDoorOf(Restaurant, Door).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',145).

 /*  terminated(happens(walkThroughDoor21(Waiter,Door),
   		   Time_From,
   		   Time_Until),
   	   beWaiter5(Waiter),
   	   [ holds(beWaiter5(Waiter),Time_From),
   	     waiterOf(Restaurant,Waiter),
   	     kitchenDoorOf(Restaurant,Door)
   	   ]).
 */
 %  "% =================================".


% [restaurant,waiter,door,time]
% HoldsAt(BeWaiter5(waiter),time) &
% WaiterOf(restaurant)=waiter &
% KitchenDoorOf(restaurant)=door ->
% Initiates(WalkThroughDoor21(waiter,door),
%           BeWaiter6(waiter),
%           time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',153).
% From E: 
% 
% '->'(
%    (holds_at(beWaiter5(Waiter),Time) , 
%      waiterOf(Restaurant)=Waiter , 
%     kitchenDoorOf(Restaurant)=Door), 
%    initiates_at(
%       walkThroughDoor21(Waiter,Door), 
%       beWaiter6(Waiter), 
%       Time)).
 %   [Time].
walkThroughDoor21(Waiter, Door)initiates beWaiter6(Waiter)if beWaiter5(Waiter), waiterOf(Restaurant, Waiter), kitchenDoorOf(Restaurant, Door).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',153).

 /*  initiated(happens(walkThroughDoor21(Waiter,Door),
   		  Time_From,
   		  Time_Until),
   	  beWaiter6(Waiter),
   	  [ holds(beWaiter5(Waiter),Time_From),
   	    waiterOf(Restaurant,Waiter),
   	    kitchenDoorOf(Restaurant,Door)
   	  ]).
 */
 %  "% =================================".


% [restaurant,waiter,table,food,time]
% WaiterOf(restaurant)=waiter &
% TableOf(restaurant)=table &
% HoldsAt(BeWaiter6(waiter),time) &
% HoldsAt(Holding(waiter,food),time) ->
% Happens(PlaceOn(waiter,food,table),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',161).
% From E: 
% 
% '->'(
%    (waiterOf(Restaurant)=Waiter , 
%      tableOf(Restaurant)=Table , 
%      holds_at(beWaiter6(Waiter),Time) , 
%     holds_at(holding(Waiter,Food),Time)), 
%    happens_at(placeOn(Waiter,Food,Table),Time)).
 %   [Time].
placeOn(Waiter, Food, Table)if waiterOf(Restaurant, Waiter), tableOf(Restaurant, Table), beWaiter6(Waiter), holding(Waiter, Food).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',161).

 /*  l_events(happens(placeOn(Waiter,Food,Table),
   		 Time_From,
   		 Time_From),
   	 [ waiterOf(Restaurant,Waiter),
   	   tableOf(Restaurant,Table),
   	   holds(beWaiter6(Waiter),Time_From),
   	   holds(holding(Waiter,Food),Time_From)
   	 ]).
 */
 %  "% =================================".


% [waiter,food,table,time]
% HoldsAt(BeWaiter6(waiter),time) ->
% Terminates(PlaceOn(waiter,food,table),
%            BeWaiter6(waiter),
%            time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',168).
% From E: 
% 
% '->'(
%    holds_at(beWaiter6(Waiter),Time), 
%    terminates_at(
%       placeOn(Waiter,Food,Table), 
%       beWaiter6(Waiter), 
%       Time)).
 %   [Time].
placeOn(Waiter, Food, Table)terminates beWaiter6(Waiter)if beWaiter6(Waiter).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',168).

 /*  terminated(happens(placeOn(Waiter,Food,Table),
   		   Time_From,
   		   Time_Until),
   	   beWaiter6(Waiter),
   	   [holds(beWaiter6(Waiter),Time_From)]).
 */
 %  "% =================================".


% [waiter,food,table,time]
% HoldsAt(BeWaiter6(waiter),time) ->
% Initiates(PlaceOn(waiter,food,table),
%           BeWaiter7(waiter),
%           time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',174).
% From E: 
% 
% '->'(
%    holds_at(beWaiter6(Waiter),Time), 
%    initiates_at(
%       placeOn(Waiter,Food,Table), 
%       beWaiter7(Waiter), 
%       Time)).
 %   [Time].
placeOn(Waiter, Food, Table)initiates beWaiter7(Waiter)if beWaiter6(Waiter).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',174).

 /*  initiated(happens(placeOn(Waiter,Food,Table),
   		  Time_From,
   		  Time_Until),
   	  beWaiter7(Waiter),
   	  [holds(beWaiter6(Waiter),Time_From)]).
 */
 %  "% =================================".


% [waiter,agent,bill,time]
% HoldsAt(BeWaiter7(waiter),time) ->
% Terminates(Request(agent,waiter,bill),
%            BeWaiter7(waiter),
%            time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',180).
% From E: 
% 
% '->'(
%    holds_at(beWaiter7(Waiter),Time), 
%    terminates_at(
%       request(Agent,Waiter,Bill), 
%       beWaiter7(Waiter), 
%       Time)).
 %   [Time].
request(Agent, Waiter, Bill)terminates beWaiter7(Waiter)if beWaiter7(Waiter).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',180).

 /*  terminated(happens(request(Agent,Waiter,Bill),
   		   Time_From,
   		   Time_Until),
   	   beWaiter7(Waiter),
   	   [holds(beWaiter7(Waiter),Time_From)]).
 */
 %  "% =================================".


% [waiter,agent,bill,time]
% HoldsAt(BeWaiter7(waiter),time) ->
% Initiates(Request(agent,waiter,bill),
%           BeWaiter8(waiter),
%           time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',186).
% From E: 
% 
% '->'(
%    holds_at(beWaiter7(Waiter),Time), 
%    initiates_at(
%       request(Agent,Waiter,Bill), 
%       beWaiter8(Waiter), 
%       Time)).
 %   [Time].
request(Agent, Waiter, Bill)initiates beWaiter8(Waiter)if beWaiter7(Waiter).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',186).

 /*  initiated(happens(request(Agent,Waiter,Bill),
   		  Time_From,
   		  Time_Until),
   	  beWaiter8(Waiter),
   	  [holds(beWaiter7(Waiter),Time_From)]).
 */
 %  "% =================================".


% [restaurant,waiter,bill,time]
% WaiterOf(restaurant)=waiter &
% BillOf(restaurant)=bill &
% HoldsAt(BeWaiter8(waiter),time) ->
% Happens(PickUp(waiter,bill),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',192).
% From E: 
% 
% '->'(
%    (waiterOf(Restaurant)=Waiter , 
%      billOf(Restaurant)=Bill , 
%     holds_at(beWaiter8(Waiter),Time)), 
%    happens_at(pickUp(Waiter,Bill),Time)).
 %   [Time].
pickUp(Waiter, Bill)if waiterOf(Restaurant, Waiter), billOf(Restaurant, Bill), beWaiter8(Waiter).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',192).

 /*  l_events(happens(pickUp(Waiter,Bill),
   		 Time_From,
   		 Time_From),
   	 [ waiterOf(Restaurant,Waiter),
   	   billOf(Restaurant,Bill),
   	   holds(beWaiter8(Waiter),Time_From)
   	 ]).
 */
 %  "% =================================".


% [waiter,bill,time]
% HoldsAt(BeWaiter8(waiter),time) ->
% Terminates(PickUp(waiter,bill),
%            BeWaiter8(waiter),
%            time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',198).
% From E: 
% 
% '->'(
%    holds_at(beWaiter8(Waiter),Time), 
%    terminates_at(
%       pickUp(Waiter,Bill), 
%       beWaiter8(Waiter), 
%       Time)).
 %   [Time].
pickUp(Waiter, Bill)terminates beWaiter8(Waiter)if beWaiter8(Waiter).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',198).

 /*  terminated(happens(pickUp(Waiter,Bill),
   		   Time_From,
   		   Time_Until),
   	   beWaiter8(Waiter),
   	   [holds(beWaiter8(Waiter),Time_From)]).
 */
 %  "% =================================".


% [waiter,bill,time]
% HoldsAt(BeWaiter8(waiter),time) ->
% Initiates(PickUp(waiter,bill),
%           BeWaiter9(waiter),
%           time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',204).
% From E: 
% 
% '->'(
%    holds_at(beWaiter8(Waiter),Time), 
%    initiates_at(
%       pickUp(Waiter,Bill), 
%       beWaiter9(Waiter), 
%       Time)).
 %   [Time].
pickUp(Waiter, Bill)initiates beWaiter9(Waiter)if beWaiter8(Waiter).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',204).

 /*  initiated(happens(pickUp(Waiter,Bill),
   		  Time_From,
   		  Time_Until),
   	  beWaiter9(Waiter),
   	  [holds(beWaiter8(Waiter),Time_From)]).
 */
 %  "% =================================".


% [restaurant,waiter,bill,table,time]
% WaiterOf(restaurant)=waiter &
% BillOf(restaurant)=bill &
% TableOf(restaurant)=table &
% HoldsAt(BeWaiter9(waiter),time) ->
% Happens(PlaceOn(waiter,bill,table),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',210).
% From E: 
% 
% '->'(
%    (waiterOf(Restaurant)=Waiter , 
%      billOf(Restaurant)=Bill , 
%      tableOf(Restaurant)=Table , 
%     holds_at(beWaiter9(Waiter),Time)), 
%    happens_at(placeOn(Waiter,Bill,Table),Time)).
 %   [Time].
placeOn(Waiter, Bill, Table)if waiterOf(Restaurant, Waiter), billOf(Restaurant, Bill), tableOf(Restaurant, Table), beWaiter9(Waiter).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',210).

 /*  l_events(happens(placeOn(Waiter,Bill,Table),
   		 Time_From,
   		 Time_From),
   	 [ waiterOf(Restaurant,Waiter),
   	   billOf(Restaurant,Bill),
   	   tableOf(Restaurant,Table),
   	   holds(beWaiter9(Waiter),Time_From)
   	 ]).
 */
 %  "% =================================".


% [waiter,bill,table,time]
% HoldsAt(BeWaiter9(waiter),time) ->
% Terminates(PlaceOn(waiter,bill,table),
%            BeWaiter9(waiter),
%            time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',217).
% From E: 
% 
% '->'(
%    holds_at(beWaiter9(Waiter),Time), 
%    terminates_at(
%       placeOn(Waiter,Bill,Table), 
%       beWaiter9(Waiter), 
%       Time)).
 %   [Time].
placeOn(Waiter, Bill, Table)terminates beWaiter9(Waiter)if beWaiter9(Waiter).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',217).

 /*  terminated(happens(placeOn(Waiter,Bill,Table),
   		   Time_From,
   		   Time_Until),
   	   beWaiter9(Waiter),
   	   [holds(beWaiter9(Waiter),Time_From)]).
 */
 %  "% =================================".


% [waiter,bill,table,time]
% HoldsAt(BeWaiter9(waiter),time) ->
% Initiates(PlaceOn(waiter,bill,table),
%           BeWaiter0(waiter),
%           time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',223).
% From E: 
% 
% '->'(
%    holds_at(beWaiter9(Waiter),Time), 
%    initiates_at(
%       placeOn(Waiter,Bill,Table), 
%       beWaiter0(Waiter), 
%       Time)).
 %   [Time].
placeOn(Waiter, Bill, Table)initiates beWaiter0(Waiter)if beWaiter9(Waiter).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',223).

 /*  initiated(happens(placeOn(Waiter,Bill,Table),
   		  Time_From,
   		  Time_Until),
   	  beWaiter0(Waiter),
   	  [holds(beWaiter9(Waiter),Time_From)]).
 */
 %  "% =================================".


%; awaiting next waiter order

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',229).
% fluent BeCook0(cook)
% From E: 
% 
% fluent(beCook0(cook)).
mpred_prop(beCook0(cook),fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',229).
fluents([beCook0/1]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',231).
%; waiter order received

% fluent BeCook1(cook)
% From E: 
% 
% fluent(beCook1(cook)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',231).
mpred_prop(beCook1(cook),fluent).
fluents([beCook1/1]).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',234).
% xor BeCook0, BeCook1
% From E: 
% 
% xor([beCook0,beCook1]).
xor([beCook0,beCook1]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',236).
% [cook,agent,food,time]
% HoldsAt(BeCook0(cook),time) ->
% Terminates(Order(agent,cook,food),
%            BeCook0(cook),
%            time).
% From E: 
% 
% '->'(
%    holds_at(beCook0(Cook),Time), 
%    terminates_at(
%       order(Agent,Cook,Food), 
%       beCook0(Cook), 
%       Time)).
 %   [Time].
order(Agent, Cook, Food)terminates beCook0(Cook)if beCook0(Cook).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',236).

 /*  terminated(happens(order(Agent,Cook,Food),
   		   Time_From,
   		   Time_Until),
   	   beCook0(Cook),
   	   [holds(beCook0(Cook),Time_From)]).
 */
 %  "% =================================".


% [cook,agent,food,time]
% HoldsAt(BeCook0(cook),time) ->
% Initiates(Order(agent,cook,food),
%           BeCook1(cook),
%           time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',243).
% From E: 
% 
% '->'(
%    holds_at(beCook0(Cook),Time), 
%    initiates_at(
%       order(Agent,Cook,Food), 
%       beCook1(Cook), 
%       Time)).
 %   [Time].
order(Agent, Cook, Food)initiates beCook1(Cook)if beCook0(Cook).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',243).

 /*  initiated(happens(order(Agent,Cook,Food),
   		  Time_From,
   		  Time_Until),
   	  beCook1(Cook),
   	  [holds(beCook0(Cook),Time_From)]).
 */
 %  "% =================================".

% event FoodPrepare(agent,food)
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',247).
% From E: 
% 
% event(foodPrepare(agent,food)).
events([foodPrepare/2]).
mpred_prop(foodPrepare(agent,food),action).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',247).
actions([foodPrepare/2]).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',250).
% fluent FoodPrepared(food)
% From E: 
% 
% fluent(foodPrepared(food)).
mpred_prop(foodPrepared(food),fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',250).
fluents([foodPrepared/1]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',252).
% [agent,food,time]
% Initiates(FoodPrepare(agent,food),
%           FoodPrepared(food),
%           time).
% From E: 
% 
% initiates_at(
%    foodPrepare(Agent,Food), 
%    foodPrepared(Food), 
%    Time).
 %   [Time].
foodPrepare(Agent, Food)initiates foodPrepared(Food).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',252).

 /*  initiated(happens(foodPrepare(Agent,Food),
   		  Time_From,
   		  Time_Until),
   	  foodPrepared(Food),
   	  []).
 */
 %  "% =================================".


% [agent,food,time]
% Happens(FoodPrepare(agent,food),time) ->
% {location}% 
% HoldsAt(At(agent,location),time) &
% HoldsAt(At(food,location),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',258).
% From E: 
% 
% exists(
%    [Location], 
%    '->'(
%       happens_at(foodPrepare(Agent,Food),Time), 
%       (holds_at(at_loc(Agent,Location),Time) , 
%        holds_at(at_loc(Food,Location),Time)))).
 %   [Time].
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',258).
exists([Location], if((at_loc(Agent, Location), at_loc(Food, Location)), foodPrepare(Agent, Food))).


% [cook,agent,food,time]
% HoldsAt(BeCook1(cook),time) &
% HoldsAt(KnowOrder(cook,agent,food),time) ->
% Happens(FoodPrepare(cook,food),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',264).
% From E: 
% 
% '->'(
%    (holds_at(beCook1(Cook),Time) , 
%     holds_at(knowOrder(Cook,Agent,Food),Time)), 
%    happens_at(foodPrepare(Cook,Food),Time)).
 %   [Time].
foodPrepare(Cook, Food)if beCook1(Cook), knowOrder(Cook, Agent, Food).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',264).

 /*  l_events(happens(foodPrepare(Cook,Food),
   		 Time_From,
   		 Time_From),
   	 [ holds(beCook1(Cook),Time_From),
   	   holds(knowOrder(Cook,Agent,Food),
   		 Time_From)
   	 ]).
 */
 %  "% =================================".


% [cook,food,time]
% HoldsAt(BeCook1(cook),time) ->
% Terminates(FoodPrepare(cook,food),
%            BeCook1(cook),
%            time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',269).
% From E: 
% 
% '->'(
%    holds_at(beCook1(Cook),Time), 
%    terminates_at(
%       foodPrepare(Cook,Food), 
%       beCook1(Cook), 
%       Time)).
 %   [Time].
foodPrepare(Cook, Food)terminates beCook1(Cook)if beCook1(Cook).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',269).

 /*  terminated(happens(foodPrepare(Cook,Food),
   		   Time_From,
   		   Time_Until),
   	   beCook1(Cook),
   	   [holds(beCook1(Cook),Time_From)]).
 */
 %  "% =================================".


% [cook,food,time]
% HoldsAt(BeCook1(cook),time) ->
% Initiates(FoodPrepare(cook,food),
%           BeCook0(cook),
%           time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',275).
% From E: 
% 
% '->'(
%    holds_at(beCook1(Cook),Time), 
%    initiates_at(
%       foodPrepare(Cook,Food), 
%       beCook0(Cook), 
%       Time)).
 %   [Time].
foodPrepare(Cook, Food)initiates beCook0(Cook)if beCook1(Cook).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',275).

 /*  initiated(happens(foodPrepare(Cook,Food),
   		  Time_From,
   		  Time_Until),
   	  beCook0(Cook),
   	  [holds(beCook1(Cook),Time_From)]).
 */
 %  "% =================================".


%; End of file.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e',279).
% From E: 
% 
% :-call_pel_directive(translate(ending,'/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e.lps')).
:- call_pel_directive(translate(ending,
                                '/pack/logicmoo_ec/ext/ec_sources/ecnet/Restaurant.e.lps')).
