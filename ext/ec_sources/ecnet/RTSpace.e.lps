:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RidingInACarriage.e',185).
% translate: unskipped  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e.lps 
:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(lps).
% translate: begining  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e.lps 
% Thu, 08 Oct 2020 19:06:47 GMT File: <stream>(0x5600a3a8d900)%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; RTSpace: room-scale topological space
%;
%; We use topological and metric representations of space,
%; at two levels of granularity---room-scale and object-scale.
%; The RTSpace representation deals with topological space at
%; the scale of rooms and outdoor locations.
%; This representation of space consists of locations, which
%; are connected by portals. There are two types of locations:
%; rooms and outside areas (outsides).
%;
%; object is at location.

% fluent At(object,location)
 %  blue=fluent(at(object,location)).
 %  fluent(at(object,location)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',22).
fluents([loc_at/2]).
 %  fluents([loc_at/2]).
 %  mpred_prop(at(object,location),fluent).
mpred_prop(loc_at(object,location),fluent).
 %  mpred_prop(loc_at(object,location),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',24).
% manualrelease At
 %  pl=axiom(manualrelease(at),[]).
manualrelease(at).
 %  manualrelease(at).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',26).
% [object1,location,time]
% (% {object2} PartOf(object1,object2)) ->
% ReleasedAt(At(object1,location),time).
 %  clausify_pnf=exists([Object2],  (partOf(Object1, Object2)->releasedAt(at(Object1, Location), Time))).

 /*  releasedAt(at(Object1, Location), Time) :-
       partOf(Object1, Exists_Object2),
       some(Exists_Object2,
            '$kolem_Fn_59'(Object1, Location, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',26).

 /*  pl=axiom(releasedAt(at(Object1,Location),Time),
         [ partOf(Object1,Exists_Object2),
   	some(Exists_Object2,
   	     '$kolem_Fn_59'(Object1,Location,Time))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',26).

 /*  (   partOf(Object1, Exists_Object2),
       some(Exists_Object2,
            '$kolem_Fn_59'(Object1, Location, Time))
   ->  releasedAt(at(Object1, Location), Time)
   ).
 */
if partOf(Object1, Exists_Object2), some(Exists_Object2, '$kolem_Fn_59'(Object1, Location, Time))then releasedAt(loc_at(Object1, Location), Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',26).

 /*  reactive_rule([ partOf(Object1,Exists_Object2),
   		some(Exists_Object2,
   		     '$kolem_Fn_59'(Object1,
   				    Location,
   				    Time))
   	      ],
   	      [ releasedAt(loc_at(Object1,Location),
   			   Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',26).

 /*  reactive_rule([ partOf(Object1,Exists_Object2),
   		some(Exists_Object2,
   		     '$kolem_Fn_59'(Object1,
   				    Location,
   				    Time))
   	      ],
   	      [ releasedAt(loc_at(Object1,Location),
   			   Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',26).

 /*  not(partOf(Object1, Exists_Object2)) :-
       not(releasedAt(at(Object1, Location), Time)),
       some(Exists_Object2,
            '$kolem_Fn_59'(Object1, Location, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',26).

 /*  pl=axiom(not(partOf(Object1,Exists_Object2)),
         [ not(releasedAt(at(Object1,Location),Time)),
   	some(Exists_Object2,
   	     '$kolem_Fn_59'(Object1,Location,Time))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',26).

 /*  (   not(releasedAt(at(Object1, Location), Time)),
       some(Exists_Object2,
            '$kolem_Fn_59'(Object1, Location, Time))
   ->  not(partOf(Object1, Exists_Object2))
   ).
 */
if not releasedAt(loc_at(Object1, Location), Time), some(Exists_Object2, '$kolem_Fn_59'(Object1, Location, Time))then not partOf(Object1, Exists_Object2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',26).

 /*  reactive_rule([ not(releasedAt(loc_at(Object1,Location),
   			       Time)),
   		some(Exists_Object2,
   		     '$kolem_Fn_59'(Object1,
   				    Location,
   				    Time))
   	      ],
   	      [not(partOf(Object1,Exists_Object2))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',26).

 /*  reactive_rule([ not(releasedAt(loc_at(Object1,Location),
   			       Time)),
   		some(Exists_Object2,
   		     '$kolem_Fn_59'(Object1,
   				    Location,
   				    Time))
   	      ],
   	      [not(partOf(Object1,Exists_Object2))]).
 */


%; A state constraint says that an object
%; is at one location at a time:
% [object,location1,location2,time]
% HoldsAt(At(object,location1),time) &
% HoldsAt(At(object,location2),time) ->
% location1=location2.
 %  clausify_pnf=(holds_at(at(Object, Location1), Time), holds_at(at(Object, Location2), Time)->equals(Location1, Location2)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',32).

 /*  not(holds_at(at(Object, Location1), Time)) :-
       holds_at(at(Object, Location2), Time),
       not(equals(Location1, Location2)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',32).

 /*  pl=axiom(not(at(Object,Location1)),
         [ at(Object,Location2),
   	not(equals(Location1,Location2))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',32).

 /*  (   at(Object, Location2),
       not(equals(Location1, Location2))
   ->  not(at(Object, Location1))
   ).
 */
if loc_at(Object, Location2), not equals(Location1, Location2)then not loc_at(Object, Location1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',32).

 /*  reactive_rule([ loc_at(Object,Location2),
   		not(equals(Location1,Location2))
   	      ],
   	      [not(loc_at(Object,Location1))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',32).

 /*  reactive_rule([ loc_at(Object,Location2),
   		not(equals(Location1,Location2))
   	      ],
   	      [not(loc_at(Object,Location1))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',32).

 /*  not(holds_at(at(Object, Location2), Time)) :-
       holds_at(at(Object, Location1), Time),
       not(equals(Location1, Location2)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',32).

 /*  pl=axiom(not(at(Object,Location2)),
         [ at(Object,Location1),
   	not(equals(Location2,Location1))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',32).

 /*  (   at(Object, Location1),
       not(equals(Location2, Location1))
   ->  not(at(Object, Location2))
   ).
 */
if loc_at(Object, Location1), not equals(Location2, Location1)then not loc_at(Object, Location2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',32).

 /*  reactive_rule([ loc_at(Object,Location1),
   		not(equals(Location2,Location1))
   	      ],
   	      [not(loc_at(Object,Location2))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',32).

 /*  reactive_rule([ loc_at(Object,Location1),
   		not(equals(Location2,Location1))
   	      ],
   	      [not(loc_at(Object,Location2))]).
 */


%; connectivity
%; Side one of portal is location.

% function Side1(portal): location
 %  blue=function(side1(portal)).
 %  function(side1(portal)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',39).
functions([side1/1]).
 %  functions([side1/1]).
mpred_prop(side1(portal),function).
 %  mpred_prop(side1(portal),function).
 %  blue=predicate(side1Pred(portal,location)).
 %  predicate(side1Pred(portal,location)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',39).
predicates([side1Pred/2]).
 %  predicates([side1Pred/2]).
mpred_prop(side1Pred(portal,location),predicate).
 %  mpred_prop(side1Pred(portal,location),predicate).
 %  pl=axiom(functional_predicate(side1,side1Pred),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',39).
functional_predicate(side1,side1Pred).
 %  functional_predicate(side1,side1Pred).
 %  pl=axiom(function_argtypes(side1Pred,side1(portal),location),[]).
function_argtypes(side1Pred,side1(portal),location).
 %  function_argtypes(side1Pred,side1(portal),location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',39).
resultIsa(side1,location).
 %  resultIsa(side1,location).
%; Side two of portal is location.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',42).
% function Side2(portal): location
 %  blue=function(side2(portal)).
 %  function(side2(portal)).
functions([side2/1]).
 %  functions([side2/1]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',42).
mpred_prop(side2(portal),function).
 %  mpred_prop(side2(portal),function).
 %  blue=predicate(side2Pred(portal,location)).
 %  predicate(side2Pred(portal,location)).
predicates([side2Pred/2]).
 %  predicates([side2Pred/2]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',42).
mpred_prop(side2Pred(portal,location),predicate).
 %  mpred_prop(side2Pred(portal,location),predicate).
 %  pl=axiom(functional_predicate(side2,side2Pred),[]).
functional_predicate(side2,side2Pred).
 %  functional_predicate(side2,side2Pred).
 %  pl=axiom(function_argtypes(side2Pred,side2(portal),location),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',42).
function_argtypes(side2Pred,side2(portal),location).
 %  function_argtypes(side2Pred,side2(portal),location).
resultIsa(side2,location).
 %  resultIsa(side2,location).
%; The building of room is building.

% function BuildingOf(room): building
 %  blue=function(buildingOf(room)).
 %  function(buildingOf(room)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',44).
functions([buildingOf/1]).
 %  functions([buildingOf/1]).
mpred_prop(buildingOf(room),function).
 %  mpred_prop(buildingOf(room),function).
 %  blue=predicate(building(room,building)).
 %  predicate(building(room,building)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',44).
predicates([building/2]).
 %  predicates([building/2]).
mpred_prop(building(room,building),predicate).
 %  mpred_prop(building(room,building),predicate).
 %  pl=axiom(functional_predicate(buildingOf,building),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',44).
functional_predicate(buildingOf,building).
 %  functional_predicate(buildingOf,building).
 %  pl=axiom(function_argtypes(building,buildingOf(room),building),[]).
function_argtypes(building,buildingOf(room),building).
 %  function_argtypes(building,buildingOf(room),building).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',44).
resultIsa(buildingOf,building).
 %  resultIsa(buildingOf,building).
%; object is at a location that has portal.

% fluent NearPortal(object,portal)
 %  blue=fluent(nearPortal(object,portal)).
 %  fluent(nearPortal(object,portal)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',47).
fluents([nearPortal/2]).
 %  fluents([nearPortal/2]).
mpred_prop(nearPortal(object,portal),fluent).
 %  mpred_prop(nearPortal(object,portal),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',49).
% noninertial NearPortal
noninertial(nearPortal).
 %  noninertial(nearPortal).
%; A state constraint says that an object is near
%; a portal if and only if there is a location such that
%; the object is at the location and one of the sides
%; of the portal is the location:
% [object,portal,time]
% HoldsAt(NearPortal(object,portal),time) <->
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',55).
% {location}% 
%  (Side1(portal)=location|
%   Side2(portal)=location) &
%  HoldsAt(At(object,location),time).
 %  clausify_pnf=exists([Location], <->(holds_at(nearPortal(Object, Portal), Time),  ((side1Pred(Portal, Location);side2Pred(Portal, Location)), holds_at(at(Object, Location), Time)))).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',57).

 /*  not(holds_at(nearPortal(Object, Portal), Time)) :-
       (   not(side1Pred(Portal, Exists_Location)),
           not(side2Pred(Portal, Exists_Location))
       ;   not(holds_at(at(Object, Exists_Location), Time))
       ),
       some(Exists_Location,
            '$kolem_Fn_60'(Object, Portal, Time)).
 */
 %  pl=axiom(not(nearPortal(Object, Portal)), [(not(side1Pred(Portal, Exists_Location)), not(side2Pred(Portal, Exists_Location));not(at(Object, Exists_Location))), some(Exists_Location, '$kolem_Fn_60'(Object, Portal, Time))]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',57).

 /*  (   (   not(side1Pred(Portal, Exists_Location)),
           not(side2Pred(Portal, Exists_Location))
       ;   not(at(Object, Exists_Location))
       ),
       some(Exists_Location,
            '$kolem_Fn_60'(Object, Portal, Time))
   ->  not(nearPortal(Object, Portal))
   ).
 */
if (not side1Pred(Portal, Exists_Location), not side2Pred(Portal, Exists_Location);not loc_at(Object, Exists_Location)), some(Exists_Location, '$kolem_Fn_60'(Object, Portal, Time))then not nearPortal(Object, Portal).
 %  reactive_rule([(not(side1Pred(Portal, Exists_Location)), not(side2Pred(Portal, Exists_Location));not(loc_at(Object, Exists_Location))), some(Exists_Location, '$kolem_Fn_60'(Object, Portal, Time))], [not(nearPortal(Object, Portal))]).
 %  reactive_rule([(not(side1Pred(Portal, Exists_Location)), not(side2Pred(Portal, Exists_Location));not(loc_at(Object, Exists_Location))), some(Exists_Location, '$kolem_Fn_60'(Object, Portal, Time))], [not(nearPortal(Object, Portal))]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',57).

 /*  side1Pred(Portal, Exists_Location) :-
       not(side2Pred(Portal, Exists_Location)),
       holds_at(nearPortal(Object, Portal), Time),
       some(Exists_Location,
            '$kolem_Fn_60'(Object, Portal, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',57).

 /*  fix_axiom_head(Time) ->
       [ holds_at(nearPortal(Object, Portal), Time),
          (->),
         nearPortal(Object, Portal)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',57).

 /*  pl=axiom(side1Pred(Portal,Exists_Location),
         [ not(side2Pred(Portal,Exists_Location)),
   	nearPortal(Object,Portal),
   	some(Exists_Location,
   	     '$kolem_Fn_60'(Object,Portal,Time))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',57).

 /*  (   not(side2Pred(Portal, Exists_Location)),
       nearPortal(Object, Portal),
       some(Exists_Location,
            '$kolem_Fn_60'(Object, Portal, Time))
   ->  side1Pred(Portal, Exists_Location)
   ).
 */
if not side2Pred(Portal, Exists_Location), nearPortal(Object, Portal), some(Exists_Location, '$kolem_Fn_60'(Object, Portal, Time))then side1Pred(Portal, Exists_Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',57).

 /*  reactive_rule([ not(side2Pred(Portal,Exists_Location)),
   		nearPortal(Object,Portal),
   		some(Exists_Location,
   		     '$kolem_Fn_60'(Object,Portal,Time))
   	      ],
   	      [side1Pred(Portal,Exists_Location)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',57).

 /*  reactive_rule([ not(side2Pred(Portal,Exists_Location)),
   		nearPortal(Object,Portal),
   		some(Exists_Location,
   		     '$kolem_Fn_60'(Object,Portal,Time))
   	      ],
   	      [side1Pred(Portal,Exists_Location)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',57).

 /*  side2Pred(Portal, Exists_Location) :-
       not(side1Pred(Portal, Exists_Location)),
       holds_at(nearPortal(Object, Portal), Time),
       some(Exists_Location,
            '$kolem_Fn_60'(Object, Portal, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',57).

 /*  fix_axiom_head(Time) ->
       [ holds_at(nearPortal(Object, Portal), Time),
          (->),
         nearPortal(Object, Portal)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',57).

 /*  pl=axiom(side2Pred(Portal,Exists_Location),
         [ not(side1Pred(Portal,Exists_Location)),
   	nearPortal(Object,Portal),
   	some(Exists_Location,
   	     '$kolem_Fn_60'(Object,Portal,Time))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',57).

 /*  (   not(side1Pred(Portal, Exists_Location)),
       nearPortal(Object, Portal),
       some(Exists_Location,
            '$kolem_Fn_60'(Object, Portal, Time))
   ->  side2Pred(Portal, Exists_Location)
   ).
 */
if not side1Pred(Portal, Exists_Location), nearPortal(Object, Portal), some(Exists_Location, '$kolem_Fn_60'(Object, Portal, Time))then side2Pred(Portal, Exists_Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',57).

 /*  reactive_rule([ not(side1Pred(Portal,Exists_Location)),
   		nearPortal(Object,Portal),
   		some(Exists_Location,
   		     '$kolem_Fn_60'(Object,Portal,Time))
   	      ],
   	      [side2Pred(Portal,Exists_Location)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',57).

 /*  reactive_rule([ not(side1Pred(Portal,Exists_Location)),
   		nearPortal(Object,Portal),
   		some(Exists_Location,
   		     '$kolem_Fn_60'(Object,Portal,Time))
   	      ],
   	      [side2Pred(Portal,Exists_Location)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',57).

 /*  holds_at(at(Object, Exists_Location), Time) :-
       holds_at(nearPortal(Object, Portal), Time),
       some(Exists_Location,
            '$kolem_Fn_60'(Object, Portal, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',57).

 /*  fix_axiom_head(Time) ->
       [ holds_at(at(Object, Exists_Location), Time),
          (->),
         at(Object, Exists_Location)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',57).

 /*  pl=axiom(at(Object,Exists_Location),
         [ nearPortal(Object,Portal),
   	some(Exists_Location,
   	     '$kolem_Fn_60'(Object,Portal,Time))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',57).

 /*  (   nearPortal(Object, Portal),
       some(Exists_Location,
            '$kolem_Fn_60'(Object, Portal, Time))
   ->  at(Object, Exists_Location)
   ).
 */
if nearPortal(Object, Portal), some(Exists_Location, '$kolem_Fn_60'(Object, Portal, Time))then loc_at(Object, Exists_Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',57).

 /*  reactive_rule([ nearPortal(Object,Portal),
   		some(Exists_Location,
   		     '$kolem_Fn_60'(Object,Portal,Time))
   	      ],
   	      [loc_at(Object,Exists_Location)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',57).

 /*  reactive_rule([ nearPortal(Object,Portal),
   		some(Exists_Location,
   		     '$kolem_Fn_60'(Object,Portal,Time))
   	      ],
   	      [loc_at(Object,Exists_Location)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',57).

 /*  holds_at(nearPortal(Object, Portal), Time) :-
       holds_at(at(Object, Exists_Location), Time),
       (   side1Pred(Portal, Exists_Location)
       ;   side2Pred(Portal, Exists_Location)
       ),
       some(Exists_Location,
            '$kolem_Fn_60'(Object, Portal, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',57).

 /*  fix_axiom_head(Time) ->
       [ holds_at(nearPortal(Object, Portal), Time),
          (->),
         nearPortal(Object, Portal)
       ].
 */
 %   pl=axiom(nearPortal(Object, Portal), [at(Object, Exists_Location),  (side1Pred(Portal, Exists_Location);side2Pred(Portal, Exists_Location)), some(Exists_Location, '$kolem_Fn_60'(Object, Portal, Time))]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',57).

 /*  (   at(Object, Exists_Location),
       (   side1Pred(Portal, Exists_Location)
       ;   side2Pred(Portal, Exists_Location)
       ),
       some(Exists_Location,
            '$kolem_Fn_60'(Object, Portal, Time))
   ->  nearPortal(Object, Portal)
   ).
 */
if loc_at(Object, Exists_Location), (side1Pred(Portal, Exists_Location);side2Pred(Portal, Exists_Location)), some(Exists_Location, '$kolem_Fn_60'(Object, Portal, Time))then nearPortal(Object, Portal).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',57).

 /*   reactive_rule([ loc_at(Object, Exists_Location),
                       (side1Pred(Portal, Exists_Location);side2Pred(Portal, Exists_Location)),
                      some(Exists_Location,
                           '$kolem_Fn_60'(Object, Portal, Time))
                    ],
                    [nearPortal(Object, Portal)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',57).

 /*   reactive_rule([ loc_at(Object, Exists_Location),
                       (side1Pred(Portal, Exists_Location);side2Pred(Portal, Exists_Location)),
                      some(Exists_Location,
                           '$kolem_Fn_60'(Object, Portal, Time))
                    ],
                    [nearPortal(Object, Portal)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',57).

 /*  not(holds_at(at(Object, Exists_Location), Time)) :-
       (   side1Pred(Portal, Exists_Location)
       ;   side2Pred(Portal, Exists_Location)
       ),
       not(holds_at(nearPortal(Object, Portal), Time)),
       some(Exists_Location,
            '$kolem_Fn_60'(Object, Portal, Time)).
 */
 %   pl=axiom(not(at(Object, Exists_Location)), [(side1Pred(Portal, Exists_Location);side2Pred(Portal, Exists_Location)), not(nearPortal(Object, Portal)), some(Exists_Location, '$kolem_Fn_60'(Object, Portal, Time))]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',57).

 /*  (   (   side1Pred(Portal, Exists_Location)
       ;   side2Pred(Portal, Exists_Location)
       ),
       not(nearPortal(Object, Portal)),
       some(Exists_Location,
            '$kolem_Fn_60'(Object, Portal, Time))
   ->  not(at(Object, Exists_Location))
   ).
 */
if (side1Pred(Portal, Exists_Location);side2Pred(Portal, Exists_Location)), not nearPortal(Object, Portal), some(Exists_Location, '$kolem_Fn_60'(Object, Portal, Time))then not loc_at(Object, Exists_Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',57).

 /*   reactive_rule([  (side1Pred(Portal, Exists_Location);side2Pred(Portal, Exists_Location)),
                      not(nearPortal(Object, Portal)),
                      some(Exists_Location,
                           '$kolem_Fn_60'(Object, Portal, Time))
                    ],
                    [not(loc_at(Object, Exists_Location))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',57).

 /*   reactive_rule([  (side1Pred(Portal, Exists_Location);side2Pred(Portal, Exists_Location)),
                      not(nearPortal(Object, Portal)),
                      some(Exists_Location,
                           '$kolem_Fn_60'(Object, Portal, Time))
                    ],
                    [not(loc_at(Object, Exists_Location))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',57).

 /*  not(side1Pred(Portal, Exists_Location)) :-
       holds_at(at(Object, Exists_Location), Time),
       not(holds_at(nearPortal(Object, Portal), Time)),
       some(Exists_Location,
            '$kolem_Fn_60'(Object, Portal, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',57).

 /*  fix_axiom_head(Time) ->
       [ holds_at(at(Object, Exists_Location), Time),
          (->),
         at(Object, Exists_Location)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',57).

 /*  pl=axiom(not(side1Pred(Portal,Exists_Location)),
         [ at(Object,Exists_Location),
   	not(nearPortal(Object,Portal)),
   	some(Exists_Location,
   	     '$kolem_Fn_60'(Object,Portal,Time))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',57).

 /*  (   at(Object, Exists_Location),
       not(nearPortal(Object, Portal)),
       some(Exists_Location,
            '$kolem_Fn_60'(Object, Portal, Time))
   ->  not(side1Pred(Portal, Exists_Location))
   ).
 */
if loc_at(Object, Exists_Location), not nearPortal(Object, Portal), some(Exists_Location, '$kolem_Fn_60'(Object, Portal, Time))then not side1Pred(Portal, Exists_Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',57).

 /*  reactive_rule([ loc_at(Object,Exists_Location),
   		not(nearPortal(Object,Portal)),
   		some(Exists_Location,
   		     '$kolem_Fn_60'(Object,Portal,Time))
   	      ],
   	      [not(side1Pred(Portal,Exists_Location))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',57).

 /*  reactive_rule([ loc_at(Object,Exists_Location),
   		not(nearPortal(Object,Portal)),
   		some(Exists_Location,
   		     '$kolem_Fn_60'(Object,Portal,Time))
   	      ],
   	      [not(side1Pred(Portal,Exists_Location))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',57).

 /*  not(side2Pred(Portal, Exists_Location)) :-
       holds_at(at(Object, Exists_Location), Time),
       not(holds_at(nearPortal(Object, Portal), Time)),
       some(Exists_Location,
            '$kolem_Fn_60'(Object, Portal, Time)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',57).

 /*  fix_axiom_head(Time) ->
       [ holds_at(at(Object, Exists_Location), Time),
          (->),
         at(Object, Exists_Location)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',57).

 /*  pl=axiom(not(side2Pred(Portal,Exists_Location)),
         [ at(Object,Exists_Location),
   	not(nearPortal(Object,Portal)),
   	some(Exists_Location,
   	     '$kolem_Fn_60'(Object,Portal,Time))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',57).

 /*  (   at(Object, Exists_Location),
       not(nearPortal(Object, Portal)),
       some(Exists_Location,
            '$kolem_Fn_60'(Object, Portal, Time))
   ->  not(side2Pred(Portal, Exists_Location))
   ).
 */
if loc_at(Object, Exists_Location), not nearPortal(Object, Portal), some(Exists_Location, '$kolem_Fn_60'(Object, Portal, Time))then not side2Pred(Portal, Exists_Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',57).

 /*  reactive_rule([ loc_at(Object,Exists_Location),
   		not(nearPortal(Object,Portal)),
   		some(Exists_Location,
   		     '$kolem_Fn_60'(Object,Portal,Time))
   	      ],
   	      [not(side2Pred(Portal,Exists_Location))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',57).

 /*  reactive_rule([ loc_at(Object,Exists_Location),
   		not(nearPortal(Object,Portal)),
   		some(Exists_Location,
   		     '$kolem_Fn_60'(Object,Portal,Time))
   	      ],
   	      [not(side2Pred(Portal,Exists_Location))]).
 */


%; locking and unlocking doors
%; agent unlocks door.

% event DoorUnlock(agent,door)
 %  blue=event(doorUnlock(agent,door)).
 %  event(doorUnlock(agent,door)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',64).
actions([doorUnlock/2]).
 %  actions([doorUnlock/2]).
mpred_prop(doorUnlock(agent,door),event).
 %  mpred_prop(doorUnlock(agent,door),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',64).
%; agent locks door.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',67).
% event DoorLock(agent,door)
 %  blue=event(doorLock(agent,door)).
 %  event(doorLock(agent,door)).
actions([doorLock/2]).
 %  actions([doorLock/2]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',67).
mpred_prop(doorLock(agent,door),event).
 %  mpred_prop(doorLock(agent,door),event).


%; door is unlocked.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',69).
% fluent DoorUnlocked(door)
 %  blue=fluent(doorUnlocked(door)).
 %  fluent(doorUnlocked(door)).
fluents([doorUnlocked/1]).
 %  fluents([doorUnlocked/1]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',69).
mpred_prop(doorUnlocked(door),fluent).
 %  mpred_prop(doorUnlocked(door),fluent).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',71).
%; A precondition axiom states that
%; for an agent to unlock a door,
%; the agent must be awake,
%; the door must not already be unlocked, and
%; the agent must be near the door:
% [agent,door,time]
% Happens(DoorUnlock(agent,door),time) ->
% HoldsAt(Awake(agent),time) &
% !HoldsAt(DoorUnlocked(door),time) &
% HoldsAt(NearPortal(agent,door),time).
 %  clausify_pnf=(happens(doorUnlock(Agent, Door), Time)->holds_at(awake(Agent), Time), holds_at(neg(doorUnlocked(Door)), Time), holds_at(nearPortal(Agent, Door), Time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',76).

 /*  not(happens(doorUnlock(Agent, Door), Time)) :-
       (   not(holds_at(awake(Agent), Time))
       ;   not(holds_at(neg(doorUnlocked(Door)), Time))
       ;   not(holds_at(nearPortal(Agent, Door), Time))
       ).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',76).

 /*  fix_axiom_head(Time) ->
       [ not(happens(doorUnlock(Agent, Door), Time)),
          (->),
         not(doorUnlock(Agent, Door))
       ].
 */
 %   pl=axiom(not(doorUnlock(Agent, Door)), [(not(awake(Agent));not(not(doorUnlocked(Door)));not(nearPortal(Agent, Door)))]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',76).

 /*  not(awake(Agent));not(not(doorUnlocked(Door)));not(nearPortal(Agent, Door)) ->
       not(doorUnlock(Agent, Door)).
 */
if not awake(Agent);not not doorUnlocked(Door);not nearPortal(Agent, Door)then not doorUnlock(Agent, Door).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',76).

 /*   reactive_rule([  (not(awake(Agent));not(not(doorUnlocked(Door)));not(nearPortal(Agent, Door)))
                    ],
                    [not(doorUnlock(Agent, Door))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',76).

 /*   reactive_rule([  (not(awake(Agent));not(not(doorUnlocked(Door)));not(nearPortal(Agent, Door)))
                    ],
                    [not(doorUnlock(Agent, Door))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',76).

 /*  holds_at(awake(Agent), Time) :-
       happens(doorUnlock(Agent, Door), Time).
 */

 /*  pl=axiom(requires(doorUnlock(Agent,Door),When_Time),
         [metreqs(doorUnlock(Agent,Door))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',76).

 /*  metreqs(doorUnlock(Agent, Door)) ->
       requires(doorUnlock(Agent, Door), When_Time).
 */
if metreqs(doorUnlock(Agent, Door))then requires(doorUnlock(Agent, Door), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',76).

 /*  reactive_rule([metreqs(doorUnlock(Agent,Door))],
   	      [ requires(doorUnlock(Agent,Door),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',76).

 /*  reactive_rule([metreqs(doorUnlock(Agent,Door))],
   	      [ requires(doorUnlock(Agent,Door),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',76).

 /*  fix_axiom_head(When_Time) ->
       [ holds_at(metreqs(doorUnlock(Agent, Door)), When_Time),
          (->),
         metreqs(doorUnlock(Agent, Door))
       ].
 */
 %  pl=axiom(metreqs(doorUnlock(Agent,Door)),[awake(Agent)]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',76).

 /*  awake(Agent) ->
       metreqs(doorUnlock(Agent, Door)).
 */
if awake(Agent)then metreqs(doorUnlock(Agent, Door)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',76).

 /*  reactive_rule([awake(Agent)],
   	      [metreqs(doorUnlock(Agent,Door))]).
 */

 /*  reactive_rule([awake(Agent)],
   	      [metreqs(doorUnlock(Agent,Door))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',76).

 /*  holds_at(neg(doorUnlocked(Door)), When_Time) :-
       happens(doorUnlock(Agent, Door), When_Time).
 */

 /*  pl=axiom(requires(doorUnlock(Agent,Door),When_Time),
         [metreqs(doorUnlock(Agent,Door))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',76).

 /*  metreqs(doorUnlock(Agent, Door)) ->
       requires(doorUnlock(Agent, Door), When_Time).
 */
if metreqs(doorUnlock(Agent, Door))then requires(doorUnlock(Agent, Door), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',76).

 /*  reactive_rule([metreqs(doorUnlock(Agent,Door))],
   	      [ requires(doorUnlock(Agent,Door),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',76).

 /*  reactive_rule([metreqs(doorUnlock(Agent,Door))],
   	      [ requires(doorUnlock(Agent,Door),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',76).

 /*  fix_axiom_head(When_Time) ->
       [ holds_at(metreqs(doorUnlock(Agent, Door)), When_Time),
          (->),
         metreqs(doorUnlock(Agent, Door))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',76).

 /*  pl=axiom(metreqs(doorUnlock(Agent,Door)),
         [not(doorUnlocked(Door))]).
 */

 /*  not(doorUnlocked(Door)) ->
       metreqs(doorUnlock(Agent, Door)).
 */
if not doorUnlocked(Door)then metreqs(doorUnlock(Agent, Door)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',76).

 /*  reactive_rule([not(doorUnlocked(Door))],
   	      [metreqs(doorUnlock(Agent,Door))]).
 */

 /*  reactive_rule([not(doorUnlocked(Door))],
   	      [metreqs(doorUnlock(Agent,Door))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',76).

 /*  holds_at(nearPortal(Agent, Door), When_Time) :-
       happens(doorUnlock(Agent, Door), When_Time).
 */

 /*  pl=axiom(requires(doorUnlock(Agent,Door),When_Time),
         [metreqs(doorUnlock(Agent,Door))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',76).

 /*  metreqs(doorUnlock(Agent, Door)) ->
       requires(doorUnlock(Agent, Door), When_Time).
 */
if metreqs(doorUnlock(Agent, Door))then requires(doorUnlock(Agent, Door), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',76).

 /*  reactive_rule([metreqs(doorUnlock(Agent,Door))],
   	      [ requires(doorUnlock(Agent,Door),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',76).

 /*  reactive_rule([metreqs(doorUnlock(Agent,Door))],
   	      [ requires(doorUnlock(Agent,Door),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',76).

 /*  fix_axiom_head(When_Time) ->
       [ holds_at(metreqs(doorUnlock(Agent, Door)), When_Time),
          (->),
         metreqs(doorUnlock(Agent, Door))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',76).

 /*  pl=axiom(metreqs(doorUnlock(Agent,Door)),
         [nearPortal(Agent,Door)]).
 */

 /*  nearPortal(Agent, Door) ->
       metreqs(doorUnlock(Agent, Door)).
 */
if nearPortal(Agent, Door)then metreqs(doorUnlock(Agent, Door)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',76).

 /*  reactive_rule([nearPortal(Agent,Door)],
   	      [metreqs(doorUnlock(Agent,Door))]).
 */

 /*  reactive_rule([nearPortal(Agent,Door)],
   	      [metreqs(doorUnlock(Agent,Door))]).
 */


%; An effect axiom states that
%; if an agent unlocks a door,
%; the door will be unlocked:
% [agent,door,time]
% Initiates(DoorUnlock(agent,door),DoorUnlocked(door),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',85).

 /*  pl=axiom(initiates(doorUnlock(Agent,Door),
   		doorUnlocked(Door),
   		Time),
         []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',85).

 /*  initiates(doorUnlock(Agent,Door),
   	  doorUnlocked(Door),
   	  Time).
 */
doorUnlock(Agent, Door)initiates doorUnlocked(Door).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',85).

 /*  initiated(happens(doorUnlock(Agent,Door),
   		  Time_From,
   		  Time_Until),
   	  doorUnlocked(Door),
   	  []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',85).

 /*  initiated(happens(doorUnlock(Agent,Door),
   		  Time_From,
   		  Time_Until),
   	  doorUnlocked(Door),
   	  []).
 */


%; A precondition axiom states that
%; for an agent to lock a door,
%; the agent must be awake,
%; the door must be unlocked, and
%; the agent must be near the door:
% [agent,door,time]
% Happens(DoorLock(agent,door),time) ->
% HoldsAt(Awake(agent),time) &
% HoldsAt(DoorUnlocked(door),time) &
% HoldsAt(NearPortal(agent,door),time).
 %  clausify_pnf=(happens(doorLock(Agent, Door), Time)->holds_at(awake(Agent), Time), holds_at(doorUnlocked(Door), Time), holds_at(nearPortal(Agent, Door), Time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',93).

 /*  not(happens(doorLock(Agent, Door), Time)) :-
       (   not(holds_at(awake(Agent), Time))
       ;   not(holds_at(doorUnlocked(Door), Time))
       ;   not(holds_at(nearPortal(Agent, Door), Time))
       ).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',93).

 /*  fix_axiom_head(Time) ->
       [ not(happens(doorLock(Agent, Door), Time)),
          (->),
         not(doorLock(Agent, Door))
       ].
 */
 %   pl=axiom(not(doorLock(Agent, Door)), [(not(awake(Agent));not(doorUnlocked(Door));not(nearPortal(Agent, Door)))]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',93).

 /*  not(awake(Agent));not(doorUnlocked(Door));not(nearPortal(Agent, Door)) ->
       not(doorLock(Agent, Door)).
 */
if not awake(Agent);not doorUnlocked(Door);not nearPortal(Agent, Door)then not doorLock(Agent, Door).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',93).

 /*   reactive_rule([  (not(awake(Agent));not(doorUnlocked(Door));not(nearPortal(Agent, Door)))
                    ],
                    [not(doorLock(Agent, Door))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',93).

 /*   reactive_rule([  (not(awake(Agent));not(doorUnlocked(Door));not(nearPortal(Agent, Door)))
                    ],
                    [not(doorLock(Agent, Door))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',93).

 /*  holds_at(awake(Agent), Time) :-
       happens(doorLock(Agent, Door), Time).
 */

 /*  pl=axiom(requires(doorLock(Agent,Door),When_Time),
         [metreqs(doorLock(Agent,Door))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',93).

 /*  metreqs(doorLock(Agent, Door)) ->
       requires(doorLock(Agent, Door), When_Time).
 */
if metreqs(doorLock(Agent, Door))then requires(doorLock(Agent, Door), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',93).

 /*  reactive_rule([metreqs(doorLock(Agent,Door))],
   	      [ requires(doorLock(Agent,Door),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',93).

 /*  reactive_rule([metreqs(doorLock(Agent,Door))],
   	      [ requires(doorLock(Agent,Door),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',93).

 /*  fix_axiom_head(When_Time) ->
       [ holds_at(metreqs(doorLock(Agent, Door)), When_Time),
          (->),
         metreqs(doorLock(Agent, Door))
       ].
 */
 %  pl=axiom(metreqs(doorLock(Agent,Door)),[awake(Agent)]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',93).

 /*  awake(Agent) ->
       metreqs(doorLock(Agent, Door)).
 */
if awake(Agent)then metreqs(doorLock(Agent, Door)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',93).

 /*  reactive_rule([awake(Agent)],
   	      [metreqs(doorLock(Agent,Door))]).
 */

 /*  reactive_rule([awake(Agent)],
   	      [metreqs(doorLock(Agent,Door))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',93).

 /*  holds_at(doorUnlocked(Door), When_Time) :-
       happens(doorLock(Agent, Door), When_Time).
 */

 /*  pl=axiom(requires(doorLock(Agent,Door),When_Time),
         [metreqs(doorLock(Agent,Door))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',93).

 /*  metreqs(doorLock(Agent, Door)) ->
       requires(doorLock(Agent, Door), When_Time).
 */
if metreqs(doorLock(Agent, Door))then requires(doorLock(Agent, Door), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',93).

 /*  reactive_rule([metreqs(doorLock(Agent,Door))],
   	      [ requires(doorLock(Agent,Door),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',93).

 /*  reactive_rule([metreqs(doorLock(Agent,Door))],
   	      [ requires(doorLock(Agent,Door),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',93).

 /*  fix_axiom_head(When_Time) ->
       [ holds_at(metreqs(doorLock(Agent, Door)), When_Time),
          (->),
         metreqs(doorLock(Agent, Door))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',93).

 /*  pl=axiom(metreqs(doorLock(Agent,Door)),
         [doorUnlocked(Door)]).
 */

 /*  doorUnlocked(Door) ->
       metreqs(doorLock(Agent, Door)).
 */
if doorUnlocked(Door)then metreqs(doorLock(Agent, Door)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',93).

 /*  reactive_rule([holds(doorUnlocked(Door),Holds)],
   	      [metreqs(doorLock(Agent,Door))]).
 */

 /*  reactive_rule([holds(doorUnlocked(Door),Holds)],
   	      [metreqs(doorLock(Agent,Door))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',93).

 /*  holds_at(nearPortal(Agent, Door), When_Time) :-
       happens(doorLock(Agent, Door), When_Time).
 */

 /*  pl=axiom(requires(doorLock(Agent,Door),When_Time),
         [metreqs(doorLock(Agent,Door))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',93).

 /*  metreqs(doorLock(Agent, Door)) ->
       requires(doorLock(Agent, Door), When_Time).
 */
if metreqs(doorLock(Agent, Door))then requires(doorLock(Agent, Door), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',93).

 /*  reactive_rule([metreqs(doorLock(Agent,Door))],
   	      [ requires(doorLock(Agent,Door),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',93).

 /*  reactive_rule([metreqs(doorLock(Agent,Door))],
   	      [ requires(doorLock(Agent,Door),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',93).

 /*  fix_axiom_head(When_Time) ->
       [ holds_at(metreqs(doorLock(Agent, Door)), When_Time),
          (->),
         metreqs(doorLock(Agent, Door))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',93).

 /*  pl=axiom(metreqs(doorLock(Agent,Door)),
         [nearPortal(Agent,Door)]).
 */

 /*  nearPortal(Agent, Door) ->
       metreqs(doorLock(Agent, Door)).
 */
if nearPortal(Agent, Door)then metreqs(doorLock(Agent, Door)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',93).

 /*  reactive_rule([nearPortal(Agent,Door)],
   	      [metreqs(doorLock(Agent,Door))]).
 */

 /*  reactive_rule([nearPortal(Agent,Door)],
   	      [metreqs(doorLock(Agent,Door))]).
 */


%; An effect axiom states that
%; if an agent locks a door,
%; the door will no longer be unlocked.
% [agent,door,time]
% Terminates(DoorLock(agent,door),DoorUnlocked(door),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',102).

 /*  pl=axiom(terminates(doorLock(Agent,Door),
   		 doorUnlocked(Door),
   		 Time),
         []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',102).

 /*  terminates(doorLock(Agent,Door),
   	   doorUnlocked(Door),
   	   Time).
 */
doorLock(Agent, Door)terminates doorUnlocked(Door).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',102).

 /*  terminated(happens(doorLock(Agent,Door),
   		   Time_From,
   		   Time_Until),
   	   doorUnlocked(Door),
   	   []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',102).

 /*  terminated(happens(doorLock(Agent,Door),
   		   Time_From,
   		   Time_Until),
   	   doorUnlocked(Door),
   	   []).
 */


%; A state constraint says that if a door is open,
%; it is unlocked:
% [door,time]
% HoldsAt(DoorIsOpen(door),time) -> HoldsAt(DoorUnlocked(door),time).
 %  clausify_pnf=(holds_at(doorIsOpen(Door), Time)->holds_at(doorUnlocked(Door), Time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',107).

 /*  holds_at(doorUnlocked(Door), Time) :-
       holds_at(doorIsOpen(Door), Time).
 */

 /*  fix_axiom_head(Time) ->
       [ holds_at(doorUnlocked(Door), Time),
          (->),
         doorUnlocked(Door)
       ].
 */
 %  pl=axiom(doorUnlocked(Door),[doorIsOpen(Door)]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',107).

 /*  doorIsOpen(Door) ->
       doorUnlocked(Door).
 */
if doorIsOpen(Door)then doorUnlocked(Door).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',107).

 /*  reactive_rule([doorIsOpen(Door)],
   	      [holds(doorUnlocked(Door),Holds)]).
 */

 /*  reactive_rule([doorIsOpen(Door)],
   	      [holds(doorUnlocked(Door),Holds)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',107).

 /*  not(holds_at(doorIsOpen(Door), Time)) :-
       not(holds_at(doorUnlocked(Door), Time)).
 */
 %  pl=axiom(not(doorIsOpen(Door)),[not(doorUnlocked(Door))]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',107).

 /*  not(doorUnlocked(Door)) ->
       not(doorIsOpen(Door)).
 */
if not doorUnlocked(Door)then not doorIsOpen(Door).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',107).

 /*  reactive_rule([holds(not(doorUnlocked(Door)),Holds3)],
   	      [not(doorIsOpen(Door))]).
 */

 /*  reactive_rule([holds(not(doorUnlocked(Door)),Holds3)],
   	      [not(doorIsOpen(Door))]).
 */


%; opening and closing doors
%; agent opens door.

% event DoorOpen(agent,door)
 %  blue=event(doorOpen(agent,door)).
 %  event(doorOpen(agent,door)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',112).
actions([doorOpen/2]).
 %  actions([doorOpen/2]).
mpred_prop(doorOpen(agent,door),event).
 %  mpred_prop(doorOpen(agent,door),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',112).
%; agent closes door.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',115).
% event DoorClose(agent,door)
 %  blue=event(doorClose(agent,door)).
 %  event(doorClose(agent,door)).
actions([doorClose/2]).
 %  actions([doorClose/2]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',115).
mpred_prop(doorClose(agent,door),event).
 %  mpred_prop(doorClose(agent,door),event).


%; door is open.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',117).
% fluent DoorIsOpen(door)
 %  blue=fluent(doorIsOpen(door)).
 %  fluent(doorIsOpen(door)).
fluents([doorIsOpen/1]).
 %  fluents([doorIsOpen/1]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',117).
mpred_prop(doorIsOpen(door),fluent).
 %  mpred_prop(doorIsOpen(door),fluent).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',119).
%; A precondition axiom states that
%; for an agent to open a door,
%; the agent must be awake,
%; the door must not already be open,
%; the door must be unlocked, and
%; the agent must be near the door:
% [agent,door,time]
% Happens(DoorOpen(agent,door),time) ->
% HoldsAt(Awake(agent),time) &
% !HoldsAt(DoorIsOpen(door),time) &
% HoldsAt(DoorUnlocked(door),time) &
% HoldsAt(NearPortal(agent,door),time).
 %  clausify_pnf=(happens(doorOpen(Agent, Door), Time)->holds_at(awake(Agent), Time), holds_at(neg(doorIsOpen(Door)), Time), holds_at(doorUnlocked(Door), Time), holds_at(nearPortal(Agent, Door), Time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',125).

 /*  not(happens(doorOpen(Agent, Door), Time)) :-
       (   not(holds_at(awake(Agent), Time))
       ;   not(holds_at(neg(doorIsOpen(Door)), Time))
       ;   not(holds_at(doorUnlocked(Door), Time))
       ;   not(holds_at(nearPortal(Agent, Door), Time))
       ).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',125).

 /*  fix_axiom_head(Time) ->
       [ not(happens(doorOpen(Agent, Door), Time)),
          (->),
         not(doorOpen(Agent, Door))
       ].
 */
 %   pl=axiom(not(doorOpen(Agent, Door)), [(not(awake(Agent));not(not(doorIsOpen(Door)));not(doorUnlocked(Door));not(nearPortal(Agent, Door)))]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',125).

 /*  not(awake(Agent));not(not(doorIsOpen(Door)));not(doorUnlocked(Door));not(nearPortal(Agent, Door)) ->
       not(doorOpen(Agent, Door)).
 */
if not awake(Agent);not not doorIsOpen(Door);not doorUnlocked(Door);not nearPortal(Agent, Door)then not doorOpen(Agent, Door).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',125).

 /*   reactive_rule([  (not(awake(Agent));not(not(doorIsOpen(Door)));not(doorUnlocked(Door));not(nearPortal(Agent, Door)))
                    ],
                    [not(doorOpen(Agent, Door))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',125).

 /*   reactive_rule([  (not(awake(Agent));not(not(doorIsOpen(Door)));not(doorUnlocked(Door));not(nearPortal(Agent, Door)))
                    ],
                    [not(doorOpen(Agent, Door))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',125).

 /*  holds_at(awake(Agent), Time) :-
       happens(doorOpen(Agent, Door), Time).
 */

 /*  pl=axiom(requires(doorOpen(Agent,Door),When_Time),
         [metreqs(doorOpen(Agent,Door))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',125).

 /*  metreqs(doorOpen(Agent, Door)) ->
       requires(doorOpen(Agent, Door), When_Time).
 */
if metreqs(doorOpen(Agent, Door))then requires(doorOpen(Agent, Door), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',125).

 /*  reactive_rule([metreqs(doorOpen(Agent,Door))],
   	      [ requires(doorOpen(Agent,Door),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',125).

 /*  reactive_rule([metreqs(doorOpen(Agent,Door))],
   	      [ requires(doorOpen(Agent,Door),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',125).

 /*  fix_axiom_head(When_Time) ->
       [ holds_at(metreqs(doorOpen(Agent, Door)), When_Time),
          (->),
         metreqs(doorOpen(Agent, Door))
       ].
 */
 %  pl=axiom(metreqs(doorOpen(Agent,Door)),[awake(Agent)]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',125).

 /*  awake(Agent) ->
       metreqs(doorOpen(Agent, Door)).
 */
if awake(Agent)then metreqs(doorOpen(Agent, Door)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',125).

 /*  reactive_rule([awake(Agent)],
   	      [metreqs(doorOpen(Agent,Door))]).
 */

 /*  reactive_rule([awake(Agent)],
   	      [metreqs(doorOpen(Agent,Door))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',125).

 /*  holds_at(neg(doorIsOpen(Door)), When_Time) :-
       happens(doorOpen(Agent, Door), When_Time).
 */

 /*  pl=axiom(requires(doorOpen(Agent,Door),When_Time),
         [metreqs(doorOpen(Agent,Door))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',125).

 /*  metreqs(doorOpen(Agent, Door)) ->
       requires(doorOpen(Agent, Door), When_Time).
 */
if metreqs(doorOpen(Agent, Door))then requires(doorOpen(Agent, Door), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',125).

 /*  reactive_rule([metreqs(doorOpen(Agent,Door))],
   	      [ requires(doorOpen(Agent,Door),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',125).

 /*  reactive_rule([metreqs(doorOpen(Agent,Door))],
   	      [ requires(doorOpen(Agent,Door),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',125).

 /*  fix_axiom_head(When_Time) ->
       [ holds_at(metreqs(doorOpen(Agent, Door)), When_Time),
          (->),
         metreqs(doorOpen(Agent, Door))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',125).

 /*  pl=axiom(metreqs(doorOpen(Agent,Door)),
         [not(doorIsOpen(Door))]).
 */

 /*  not(doorIsOpen(Door)) ->
       metreqs(doorOpen(Agent, Door)).
 */
if not doorIsOpen(Door)then metreqs(doorOpen(Agent, Door)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',125).

 /*  reactive_rule([not(doorIsOpen(Door))],
   	      [metreqs(doorOpen(Agent,Door))]).
 */

 /*  reactive_rule([not(doorIsOpen(Door))],
   	      [metreqs(doorOpen(Agent,Door))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',125).

 /*  holds_at(doorUnlocked(Door), When_Time) :-
       happens(doorOpen(Agent, Door), When_Time).
 */

 /*  pl=axiom(requires(doorOpen(Agent,Door),When_Time),
         [metreqs(doorOpen(Agent,Door))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',125).

 /*  metreqs(doorOpen(Agent, Door)) ->
       requires(doorOpen(Agent, Door), When_Time).
 */
if metreqs(doorOpen(Agent, Door))then requires(doorOpen(Agent, Door), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',125).

 /*  reactive_rule([metreqs(doorOpen(Agent,Door))],
   	      [ requires(doorOpen(Agent,Door),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',125).

 /*  reactive_rule([metreqs(doorOpen(Agent,Door))],
   	      [ requires(doorOpen(Agent,Door),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',125).

 /*  fix_axiom_head(When_Time) ->
       [ holds_at(metreqs(doorOpen(Agent, Door)), When_Time),
          (->),
         metreqs(doorOpen(Agent, Door))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',125).

 /*  pl=axiom(metreqs(doorOpen(Agent,Door)),
         [doorUnlocked(Door)]).
 */

 /*  doorUnlocked(Door) ->
       metreqs(doorOpen(Agent, Door)).
 */
if doorUnlocked(Door)then metreqs(doorOpen(Agent, Door)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',125).

 /*  reactive_rule([holds(doorUnlocked(Door),Holds)],
   	      [metreqs(doorOpen(Agent,Door))]).
 */

 /*  reactive_rule([holds(doorUnlocked(Door),Holds)],
   	      [metreqs(doorOpen(Agent,Door))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',125).

 /*  holds_at(nearPortal(Agent, Door), When_Time) :-
       happens(doorOpen(Agent, Door), When_Time).
 */

 /*  pl=axiom(requires(doorOpen(Agent,Door),When_Time),
         [metreqs(doorOpen(Agent,Door))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',125).

 /*  metreqs(doorOpen(Agent, Door)) ->
       requires(doorOpen(Agent, Door), When_Time).
 */
if metreqs(doorOpen(Agent, Door))then requires(doorOpen(Agent, Door), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',125).

 /*  reactive_rule([metreqs(doorOpen(Agent,Door))],
   	      [ requires(doorOpen(Agent,Door),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',125).

 /*  reactive_rule([metreqs(doorOpen(Agent,Door))],
   	      [ requires(doorOpen(Agent,Door),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',125).

 /*  fix_axiom_head(When_Time) ->
       [ holds_at(metreqs(doorOpen(Agent, Door)), When_Time),
          (->),
         metreqs(doorOpen(Agent, Door))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',125).

 /*  pl=axiom(metreqs(doorOpen(Agent,Door)),
         [nearPortal(Agent,Door)]).
 */

 /*  nearPortal(Agent, Door) ->
       metreqs(doorOpen(Agent, Door)).
 */
if nearPortal(Agent, Door)then metreqs(doorOpen(Agent, Door)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',125).

 /*  reactive_rule([nearPortal(Agent,Door)],
   	      [metreqs(doorOpen(Agent,Door))]).
 */

 /*  reactive_rule([nearPortal(Agent,Door)],
   	      [metreqs(doorOpen(Agent,Door))]).
 */


%; An effect axiom states that
%; if an agent opens a door,
%; the door will be open:
% [agent,door,time]
% Initiates(DoorOpen(agent,door),DoorIsOpen(door),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',135).

 /*  pl=axiom(initiates(doorOpen(Agent,Door),
   		doorIsOpen(Door),
   		Time),
         []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',135).

 /*  initiates(doorOpen(Agent,Door),
   	  doorIsOpen(Door),
   	  Time).
 */
doorOpen(Agent, Door)initiates doorIsOpen(Door).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',135).

 /*  initiated(happens(doorOpen(Agent,Door),
   		  Time_From,
   		  Time_Until),
   	  doorIsOpen(Door),
   	  []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',135).

 /*  initiated(happens(doorOpen(Agent,Door),
   		  Time_From,
   		  Time_Until),
   	  doorIsOpen(Door),
   	  []).
 */


%; A precondition axiom states that
%; for an agent to close a door,
%; the agent must be awake,
%; the door must be open,
%; the door must be unlocked, and
%; the agent must be near the door:
% [agent,door,time]
% Happens(DoorClose(agent,door),time) ->
% HoldsAt(Awake(agent),time) &
% HoldsAt(DoorIsOpen(door),time) &
% HoldsAt(DoorUnlocked(door),time) &
% HoldsAt(NearPortal(agent,door),time).
 %  clausify_pnf=(happens(doorClose(Agent, Door), Time)->holds_at(awake(Agent), Time), holds_at(doorIsOpen(Door), Time), holds_at(doorUnlocked(Door), Time), holds_at(nearPortal(Agent, Door), Time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',144).

 /*  not(happens(doorClose(Agent, Door), Time)) :-
       (   not(holds_at(awake(Agent), Time))
       ;   not(holds_at(doorIsOpen(Door), Time))
       ;   not(holds_at(doorUnlocked(Door), Time))
       ;   not(holds_at(nearPortal(Agent, Door), Time))
       ).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',144).

 /*  fix_axiom_head(Time) ->
       [ not(happens(doorClose(Agent, Door), Time)),
          (->),
         not(doorClose(Agent, Door))
       ].
 */
 %   pl=axiom(not(doorClose(Agent, Door)), [(not(awake(Agent));not(doorIsOpen(Door));not(doorUnlocked(Door));not(nearPortal(Agent, Door)))]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',144).

 /*  not(awake(Agent));not(doorIsOpen(Door));not(doorUnlocked(Door));not(nearPortal(Agent, Door)) ->
       not(doorClose(Agent, Door)).
 */
if not awake(Agent);not doorIsOpen(Door);not doorUnlocked(Door);not nearPortal(Agent, Door)then not doorClose(Agent, Door).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',144).

 /*   reactive_rule([  (not(awake(Agent));not(doorIsOpen(Door));not(doorUnlocked(Door));not(nearPortal(Agent, Door)))
                    ],
                    [not(doorClose(Agent, Door))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',144).

 /*   reactive_rule([  (not(awake(Agent));not(doorIsOpen(Door));not(doorUnlocked(Door));not(nearPortal(Agent, Door)))
                    ],
                    [not(doorClose(Agent, Door))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',144).

 /*  holds_at(awake(Agent), Time) :-
       happens(doorClose(Agent, Door), Time).
 */

 /*  pl=axiom(requires(doorClose(Agent,Door),When_Time),
         [metreqs(doorClose(Agent,Door))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',144).

 /*  metreqs(doorClose(Agent, Door)) ->
       requires(doorClose(Agent, Door), When_Time).
 */
if metreqs(doorClose(Agent, Door))then requires(doorClose(Agent, Door), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',144).

 /*  reactive_rule([metreqs(doorClose(Agent,Door))],
   	      [ requires(doorClose(Agent,Door),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',144).

 /*  reactive_rule([metreqs(doorClose(Agent,Door))],
   	      [ requires(doorClose(Agent,Door),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',144).

 /*  fix_axiom_head(When_Time) ->
       [ holds_at(metreqs(doorClose(Agent, Door)), When_Time),
          (->),
         metreqs(doorClose(Agent, Door))
       ].
 */
 %  pl=axiom(metreqs(doorClose(Agent,Door)),[awake(Agent)]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',144).

 /*  awake(Agent) ->
       metreqs(doorClose(Agent, Door)).
 */
if awake(Agent)then metreqs(doorClose(Agent, Door)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',144).

 /*  reactive_rule([awake(Agent)],
   	      [metreqs(doorClose(Agent,Door))]).
 */

 /*  reactive_rule([awake(Agent)],
   	      [metreqs(doorClose(Agent,Door))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',144).

 /*  holds_at(doorIsOpen(Door), When_Time) :-
       happens(doorClose(Agent, Door), When_Time).
 */

 /*  pl=axiom(requires(doorClose(Agent,Door),When_Time),
         [metreqs(doorClose(Agent,Door))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',144).

 /*  metreqs(doorClose(Agent, Door)) ->
       requires(doorClose(Agent, Door), When_Time).
 */
if metreqs(doorClose(Agent, Door))then requires(doorClose(Agent, Door), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',144).

 /*  reactive_rule([metreqs(doorClose(Agent,Door))],
   	      [ requires(doorClose(Agent,Door),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',144).

 /*  reactive_rule([metreqs(doorClose(Agent,Door))],
   	      [ requires(doorClose(Agent,Door),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',144).

 /*  fix_axiom_head(When_Time) ->
       [ holds_at(metreqs(doorClose(Agent, Door)), When_Time),
          (->),
         metreqs(doorClose(Agent, Door))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',144).

 /*  pl=axiom(metreqs(doorClose(Agent,Door)),
         [doorIsOpen(Door)]).
 */

 /*  doorIsOpen(Door) ->
       metreqs(doorClose(Agent, Door)).
 */
if doorIsOpen(Door)then metreqs(doorClose(Agent, Door)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',144).

 /*  reactive_rule([holds(doorIsOpen(Door),Holds)],
   	      [metreqs(doorClose(Agent,Door))]).
 */

 /*  reactive_rule([holds(doorIsOpen(Door),Holds)],
   	      [metreqs(doorClose(Agent,Door))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',144).

 /*  holds_at(doorUnlocked(Door), When_Time) :-
       happens(doorClose(Agent, Door), When_Time).
 */

 /*  pl=axiom(requires(doorClose(Agent,Door),When_Time),
         [metreqs(doorClose(Agent,Door))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',144).

 /*  metreqs(doorClose(Agent, Door)) ->
       requires(doorClose(Agent, Door), When_Time).
 */
if metreqs(doorClose(Agent, Door))then requires(doorClose(Agent, Door), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',144).

 /*  reactive_rule([metreqs(doorClose(Agent,Door))],
   	      [ requires(doorClose(Agent,Door),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',144).

 /*  reactive_rule([metreqs(doorClose(Agent,Door))],
   	      [ requires(doorClose(Agent,Door),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',144).

 /*  fix_axiom_head(When_Time) ->
       [ holds_at(metreqs(doorClose(Agent, Door)), When_Time),
          (->),
         metreqs(doorClose(Agent, Door))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',144).

 /*  pl=axiom(metreqs(doorClose(Agent,Door)),
         [doorUnlocked(Door)]).
 */

 /*  doorUnlocked(Door) ->
       metreqs(doorClose(Agent, Door)).
 */
if doorUnlocked(Door)then metreqs(doorClose(Agent, Door)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',144).

 /*  reactive_rule([holds(doorUnlocked(Door),Holds5)],
   	      [metreqs(doorClose(Agent,Door))]).
 */

 /*  reactive_rule([holds(doorUnlocked(Door),Holds5)],
   	      [metreqs(doorClose(Agent,Door))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',144).

 /*  holds_at(nearPortal(Agent, Door), When_Time) :-
       happens(doorClose(Agent, Door), When_Time).
 */

 /*  pl=axiom(requires(doorClose(Agent,Door),When_Time),
         [metreqs(doorClose(Agent,Door))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',144).

 /*  metreqs(doorClose(Agent, Door)) ->
       requires(doorClose(Agent, Door), When_Time).
 */
if metreqs(doorClose(Agent, Door))then requires(doorClose(Agent, Door), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',144).

 /*  reactive_rule([metreqs(doorClose(Agent,Door))],
   	      [ requires(doorClose(Agent,Door),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',144).

 /*  reactive_rule([metreqs(doorClose(Agent,Door))],
   	      [ requires(doorClose(Agent,Door),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',144).

 /*  fix_axiom_head(When_Time) ->
       [ holds_at(metreqs(doorClose(Agent, Door)), When_Time),
          (->),
         metreqs(doorClose(Agent, Door))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',144).

 /*  pl=axiom(metreqs(doorClose(Agent,Door)),
         [nearPortal(Agent,Door)]).
 */

 /*  nearPortal(Agent, Door) ->
       metreqs(doorClose(Agent, Door)).
 */
if nearPortal(Agent, Door)then metreqs(doorClose(Agent, Door)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',144).

 /*  reactive_rule([nearPortal(Agent,Door)],
   	      [metreqs(doorClose(Agent,Door))]).
 */

 /*  reactive_rule([nearPortal(Agent,Door)],
   	      [metreqs(doorClose(Agent,Door))]).
 */


%; An effect axiom states that
%; if an agent closes a door,
%; the door will no longer be open:
% [agent,door,time]
% Terminates(DoorClose(agent,door),DoorIsOpen(door),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',154).

 /*  pl=axiom(terminates(doorClose(Agent,Door),
   		 doorIsOpen(Door),
   		 Time),
         []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',154).

 /*  terminates(doorClose(Agent,Door),
   	   doorIsOpen(Door),
   	   Time).
 */
doorClose(Agent, Door)terminates doorIsOpen(Door).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',154).

 /*  terminated(happens(doorClose(Agent,Door),
   		   Time_From,
   		   Time_Until),
   	   doorIsOpen(Door),
   	   []).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',154).

 /*  terminated(happens(doorClose(Agent,Door),
   		   Time_From,
   		   Time_Until),
   	   doorIsOpen(Door),
   	   []).
 */


%; passing through doors
%; agent walks through side one of door.

% event WalkThroughDoor12(agent,door)
 %  blue=event(walkThroughDoor12(agent,door)).
 %  event(walkThroughDoor12(agent,door)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',159).
actions([walkThroughDoor12/2]).
 %  actions([walkThroughDoor12/2]).
mpred_prop(walkThroughDoor12(agent,door),event).
 %  mpred_prop(walkThroughDoor12(agent,door),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',159).
%; agent walks through side two of door.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',162).
% event WalkThroughDoor21(agent,door)
 %  blue=event(walkThroughDoor21(agent,door)).
 %  event(walkThroughDoor21(agent,door)).
actions([walkThroughDoor21/2]).
 %  actions([walkThroughDoor21/2]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',162).
mpred_prop(walkThroughDoor21(agent,door),event).
 %  mpred_prop(walkThroughDoor21(agent,door),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',164).
%; Precondition axioms state that
%; for an agent to walk through a side of a door,
%; the agent must be awake and standing,
%; the door must be open, and
%; the agent must be at the side of the door that
%; the agent walks through:
% [agent,door,time]
% Happens(WalkThroughDoor12(agent,door),time) ->
% HoldsAt(Awake(agent),time) &
% HoldsAt(Standing(agent),time) &
% HoldsAt(DoorIsOpen(door),time) &
% HoldsAt(At(agent,Side1(door)),time).
 %  clausify_pnf=(happens(walkThroughDoor12(Agent, Door), Time)->holds_at(awake(Agent), Time), holds_at(standing(Agent), Time), holds_at(doorIsOpen(Door), Time), holds_at(at(Agent, side1(Door)), Time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',170).

 /*  not(happens(walkThroughDoor12(Agent, Door), Time)) :-
       (   not(holds_at(awake(Agent), Time))
       ;   not(holds_at(standing(Agent), Time))
       ;   not(holds_at(doorIsOpen(Door), Time))
       ;   not(holds_at(at(Agent, side1(Door)), Time))
       ).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',170).

 /*  fix_axiom_head(Time) ->
       [ not(happens(walkThroughDoor12(Agent, Door), Time)),
          (->),
         not(walkThroughDoor12(Agent, Door))
       ].
 */
 %   pl=axiom(not(walkThroughDoor12(Agent, Door)), [(not(awake(Agent));not(standing(Agent));not(doorIsOpen(Door));not(at(Agent, side1(Door))))]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',170).

 /*  not(awake(Agent));not(standing(Agent));not(doorIsOpen(Door));not(at(Agent, side1(Door))) ->
       not(walkThroughDoor12(Agent, Door)).
 */
if not awake(Agent);not standing(Agent);not doorIsOpen(Door);not loc_at(Agent, side1(Door))then not walkThroughDoor12(Agent, Door).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',170).

 /*   reactive_rule([  (not(awake(Agent));not(standing(Agent));not(doorIsOpen(Door));not(loc_at(Agent, side1(Door))))
                    ],
                    [not(walkThroughDoor12(Agent, Door))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',170).

 /*   reactive_rule([  (not(awake(Agent));not(standing(Agent));not(doorIsOpen(Door));not(loc_at(Agent, side1(Door))))
                    ],
                    [not(walkThroughDoor12(Agent, Door))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',170).

 /*  holds_at(awake(Agent), Time) :-
       happens(walkThroughDoor12(Agent, Door), Time).
 */

 /*  pl=axiom(requires(walkThroughDoor12(Agent,Door),
   	       When_Time),
         [metreqs(walkThroughDoor12(Agent,Door))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',170).

 /*  metreqs(walkThroughDoor12(Agent, Door)) ->
       requires(walkThroughDoor12(Agent, Door), When_Time).
 */
if metreqs(walkThroughDoor12(Agent, Door))then requires(walkThroughDoor12(Agent, Door), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',170).

 /*  reactive_rule([metreqs(walkThroughDoor12(Agent,Door))],
   	      [ requires(walkThroughDoor12(Agent,Door),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',170).

 /*  reactive_rule([metreqs(walkThroughDoor12(Agent,Door))],
   	      [ requires(walkThroughDoor12(Agent,Door),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',170).

 /*  fix_axiom_head(When_Time) ->
       [ holds_at(metreqs(walkThroughDoor12(Agent, Door)),
                  When_Time),
          (->),
         metreqs(walkThroughDoor12(Agent, Door))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',170).

 /*  pl=axiom(metreqs(walkThroughDoor12(Agent,Door)),
         [awake(Agent)]).
 */

 /*  awake(Agent) ->
       metreqs(walkThroughDoor12(Agent, Door)).
 */
if awake(Agent)then metreqs(walkThroughDoor12(Agent, Door)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',170).

 /*  reactive_rule([awake(Agent)],
   	      [metreqs(walkThroughDoor12(Agent,Door))]).
 */

 /*  reactive_rule([awake(Agent)],
   	      [metreqs(walkThroughDoor12(Agent,Door))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',170).

 /*  holds_at(standing(Agent), When_Time) :-
       happens(walkThroughDoor12(Agent, Door), When_Time).
 */

 /*  pl=axiom(requires(walkThroughDoor12(Agent,Door),
   	       When_Time),
         [metreqs(walkThroughDoor12(Agent,Door))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',170).

 /*  metreqs(walkThroughDoor12(Agent, Door)) ->
       requires(walkThroughDoor12(Agent, Door), When_Time).
 */
if metreqs(walkThroughDoor12(Agent, Door))then requires(walkThroughDoor12(Agent, Door), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',170).

 /*  reactive_rule([metreqs(walkThroughDoor12(Agent,Door))],
   	      [ requires(walkThroughDoor12(Agent,Door),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',170).

 /*  reactive_rule([metreqs(walkThroughDoor12(Agent,Door))],
   	      [ requires(walkThroughDoor12(Agent,Door),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',170).

 /*  fix_axiom_head(When_Time) ->
       [ holds_at(metreqs(walkThroughDoor12(Agent, Door)),
                  When_Time),
          (->),
         metreqs(walkThroughDoor12(Agent, Door))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',170).

 /*  pl=axiom(metreqs(walkThroughDoor12(Agent,Door)),
         [standing(Agent)]).
 */

 /*  standing(Agent) ->
       metreqs(walkThroughDoor12(Agent, Door)).
 */
if standing(Agent)then metreqs(walkThroughDoor12(Agent, Door)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',170).

 /*  reactive_rule([holds(standing(Agent),Holds)],
   	      [metreqs(walkThroughDoor12(Agent,Door))]).
 */

 /*  reactive_rule([holds(standing(Agent),Holds)],
   	      [metreqs(walkThroughDoor12(Agent,Door))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',170).

 /*  holds_at(doorIsOpen(Door), When_Time) :-
       happens(walkThroughDoor12(Agent, Door), When_Time).
 */

 /*  pl=axiom(requires(walkThroughDoor12(Agent,Door),
   	       When_Time),
         [metreqs(walkThroughDoor12(Agent,Door))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',170).

 /*  metreqs(walkThroughDoor12(Agent, Door)) ->
       requires(walkThroughDoor12(Agent, Door), When_Time).
 */
if metreqs(walkThroughDoor12(Agent, Door))then requires(walkThroughDoor12(Agent, Door), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',170).

 /*  reactive_rule([metreqs(walkThroughDoor12(Agent,Door))],
   	      [ requires(walkThroughDoor12(Agent,Door),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',170).

 /*  reactive_rule([metreqs(walkThroughDoor12(Agent,Door))],
   	      [ requires(walkThroughDoor12(Agent,Door),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',170).

 /*  fix_axiom_head(When_Time) ->
       [ holds_at(metreqs(walkThroughDoor12(Agent, Door)),
                  When_Time),
          (->),
         metreqs(walkThroughDoor12(Agent, Door))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',170).

 /*  pl=axiom(metreqs(walkThroughDoor12(Agent,Door)),
         [doorIsOpen(Door)]).
 */

 /*  doorIsOpen(Door) ->
       metreqs(walkThroughDoor12(Agent, Door)).
 */
if doorIsOpen(Door)then metreqs(walkThroughDoor12(Agent, Door)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',170).

 /*  reactive_rule([holds(doorIsOpen(Door),Holds5)],
   	      [metreqs(walkThroughDoor12(Agent,Door))]).
 */

 /*  reactive_rule([holds(doorIsOpen(Door),Holds5)],
   	      [metreqs(walkThroughDoor12(Agent,Door))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',170).

 /*  holds_at(at(Agent, side1(Door)), When_Time) :-
       happens(walkThroughDoor12(Agent, Door), When_Time).
 */

 /*  pl=axiom(requires(walkThroughDoor12(Agent,Door),
   	       When_Time),
         [metreqs(walkThroughDoor12(Agent,Door))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',170).

 /*  metreqs(walkThroughDoor12(Agent, Door)) ->
       requires(walkThroughDoor12(Agent, Door), When_Time).
 */
if metreqs(walkThroughDoor12(Agent, Door))then requires(walkThroughDoor12(Agent, Door), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',170).

 /*  reactive_rule([metreqs(walkThroughDoor12(Agent,Door))],
   	      [ requires(walkThroughDoor12(Agent,Door),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',170).

 /*  reactive_rule([metreqs(walkThroughDoor12(Agent,Door))],
   	      [ requires(walkThroughDoor12(Agent,Door),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',170).

 /*  fix_axiom_head(When_Time) ->
       [ holds_at(metreqs(walkThroughDoor12(Agent, Door)),
                  When_Time),
          (->),
         metreqs(walkThroughDoor12(Agent, Door))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',170).

 /*  pl=axiom(metreqs(walkThroughDoor12(Agent,Door)),
         [at(Agent,side1(Door))]).
 */

 /*  at(Agent, side1(Door)) ->
       metreqs(walkThroughDoor12(Agent, Door)).
 */
if loc_at(Agent, side1(Door))then metreqs(walkThroughDoor12(Agent, Door)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',170).

 /*  reactive_rule([loc_at(Agent,side1(Door))],
   	      [metreqs(walkThroughDoor12(Agent,Door))]).
 */

 /*  reactive_rule([loc_at(Agent,side1(Door))],
   	      [metreqs(walkThroughDoor12(Agent,Door))]).
 */


% [agent,door,time]
% Happens(WalkThroughDoor21(agent,door),time) ->
% HoldsAt(Awake(agent),time) &
% HoldsAt(Standing(agent),time) &
% HoldsAt(DoorIsOpen(door),time) &
% HoldsAt(At(agent,Side2(door)),time).
 %  clausify_pnf=(happens(walkThroughDoor21(Agent, Door), Time)->holds_at(awake(Agent), Time), holds_at(standing(Agent), Time), holds_at(doorIsOpen(Door), Time), holds_at(at(Agent, side2(Door)), Time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',178).

 /*  not(happens(walkThroughDoor21(Agent, Door), Time)) :-
       (   not(holds_at(awake(Agent), Time))
       ;   not(holds_at(standing(Agent), Time))
       ;   not(holds_at(doorIsOpen(Door), Time))
       ;   not(holds_at(at(Agent, side2(Door)), Time))
       ).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',178).

 /*  fix_axiom_head(Time) ->
       [ not(happens(walkThroughDoor21(Agent, Door), Time)),
          (->),
         not(walkThroughDoor21(Agent, Door))
       ].
 */
 %   pl=axiom(not(walkThroughDoor21(Agent, Door)), [(not(awake(Agent));not(standing(Agent));not(doorIsOpen(Door));not(at(Agent, side2(Door))))]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',178).

 /*  not(awake(Agent));not(standing(Agent));not(doorIsOpen(Door));not(at(Agent, side2(Door))) ->
       not(walkThroughDoor21(Agent, Door)).
 */
if not awake(Agent);not standing(Agent);not doorIsOpen(Door);not loc_at(Agent, side2(Door))then not walkThroughDoor21(Agent, Door).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',178).

 /*   reactive_rule([  (not(awake(Agent));not(standing(Agent));not(doorIsOpen(Door));not(loc_at(Agent, side2(Door))))
                    ],
                    [not(walkThroughDoor21(Agent, Door))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',178).

 /*   reactive_rule([  (not(awake(Agent));not(standing(Agent));not(doorIsOpen(Door));not(loc_at(Agent, side2(Door))))
                    ],
                    [not(walkThroughDoor21(Agent, Door))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',178).

 /*  holds_at(awake(Agent), Time) :-
       happens(walkThroughDoor21(Agent, Door), Time).
 */

 /*  pl=axiom(requires(walkThroughDoor21(Agent,Door),
   	       When_Time),
         [metreqs(walkThroughDoor21(Agent,Door))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',178).

 /*  metreqs(walkThroughDoor21(Agent, Door)) ->
       requires(walkThroughDoor21(Agent, Door), When_Time).
 */
if metreqs(walkThroughDoor21(Agent, Door))then requires(walkThroughDoor21(Agent, Door), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',178).

 /*  reactive_rule([metreqs(walkThroughDoor21(Agent,Door))],
   	      [ requires(walkThroughDoor21(Agent,Door),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',178).

 /*  reactive_rule([metreqs(walkThroughDoor21(Agent,Door))],
   	      [ requires(walkThroughDoor21(Agent,Door),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',178).

 /*  fix_axiom_head(When_Time) ->
       [ holds_at(metreqs(walkThroughDoor21(Agent, Door)),
                  When_Time),
          (->),
         metreqs(walkThroughDoor21(Agent, Door))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',178).

 /*  pl=axiom(metreqs(walkThroughDoor21(Agent,Door)),
         [awake(Agent)]).
 */

 /*  awake(Agent) ->
       metreqs(walkThroughDoor21(Agent, Door)).
 */
if awake(Agent)then metreqs(walkThroughDoor21(Agent, Door)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',178).

 /*  reactive_rule([awake(Agent)],
   	      [metreqs(walkThroughDoor21(Agent,Door))]).
 */

 /*  reactive_rule([awake(Agent)],
   	      [metreqs(walkThroughDoor21(Agent,Door))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',178).

 /*  holds_at(standing(Agent), When_Time) :-
       happens(walkThroughDoor21(Agent, Door), When_Time).
 */

 /*  pl=axiom(requires(walkThroughDoor21(Agent,Door),
   	       When_Time),
         [metreqs(walkThroughDoor21(Agent,Door))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',178).

 /*  metreqs(walkThroughDoor21(Agent, Door)) ->
       requires(walkThroughDoor21(Agent, Door), When_Time).
 */
if metreqs(walkThroughDoor21(Agent, Door))then requires(walkThroughDoor21(Agent, Door), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',178).

 /*  reactive_rule([metreqs(walkThroughDoor21(Agent,Door))],
   	      [ requires(walkThroughDoor21(Agent,Door),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',178).

 /*  reactive_rule([metreqs(walkThroughDoor21(Agent,Door))],
   	      [ requires(walkThroughDoor21(Agent,Door),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',178).

 /*  fix_axiom_head(When_Time) ->
       [ holds_at(metreqs(walkThroughDoor21(Agent, Door)),
                  When_Time),
          (->),
         metreqs(walkThroughDoor21(Agent, Door))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',178).

 /*  pl=axiom(metreqs(walkThroughDoor21(Agent,Door)),
         [standing(Agent)]).
 */

 /*  standing(Agent) ->
       metreqs(walkThroughDoor21(Agent, Door)).
 */
if standing(Agent)then metreqs(walkThroughDoor21(Agent, Door)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',178).

 /*  reactive_rule([holds(standing(Agent),Holds)],
   	      [metreqs(walkThroughDoor21(Agent,Door))]).
 */

 /*  reactive_rule([holds(standing(Agent),Holds)],
   	      [metreqs(walkThroughDoor21(Agent,Door))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',178).

 /*  holds_at(doorIsOpen(Door), When_Time) :-
       happens(walkThroughDoor21(Agent, Door), When_Time).
 */

 /*  pl=axiom(requires(walkThroughDoor21(Agent,Door),
   	       When_Time),
         [metreqs(walkThroughDoor21(Agent,Door))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',178).

 /*  metreqs(walkThroughDoor21(Agent, Door)) ->
       requires(walkThroughDoor21(Agent, Door), When_Time).
 */
if metreqs(walkThroughDoor21(Agent, Door))then requires(walkThroughDoor21(Agent, Door), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',178).

 /*  reactive_rule([metreqs(walkThroughDoor21(Agent,Door))],
   	      [ requires(walkThroughDoor21(Agent,Door),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',178).

 /*  reactive_rule([metreqs(walkThroughDoor21(Agent,Door))],
   	      [ requires(walkThroughDoor21(Agent,Door),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',178).

 /*  fix_axiom_head(When_Time) ->
       [ holds_at(metreqs(walkThroughDoor21(Agent, Door)),
                  When_Time),
          (->),
         metreqs(walkThroughDoor21(Agent, Door))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',178).

 /*  pl=axiom(metreqs(walkThroughDoor21(Agent,Door)),
         [doorIsOpen(Door)]).
 */

 /*  doorIsOpen(Door) ->
       metreqs(walkThroughDoor21(Agent, Door)).
 */
if doorIsOpen(Door)then metreqs(walkThroughDoor21(Agent, Door)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',178).

 /*  reactive_rule([holds(doorIsOpen(Door),Holds5)],
   	      [metreqs(walkThroughDoor21(Agent,Door))]).
 */

 /*  reactive_rule([holds(doorIsOpen(Door),Holds5)],
   	      [metreqs(walkThroughDoor21(Agent,Door))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',178).

 /*  holds_at(at(Agent, side2(Door)), When_Time) :-
       happens(walkThroughDoor21(Agent, Door), When_Time).
 */

 /*  pl=axiom(requires(walkThroughDoor21(Agent,Door),
   	       When_Time),
         [metreqs(walkThroughDoor21(Agent,Door))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',178).

 /*  metreqs(walkThroughDoor21(Agent, Door)) ->
       requires(walkThroughDoor21(Agent, Door), When_Time).
 */
if metreqs(walkThroughDoor21(Agent, Door))then requires(walkThroughDoor21(Agent, Door), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',178).

 /*  reactive_rule([metreqs(walkThroughDoor21(Agent,Door))],
   	      [ requires(walkThroughDoor21(Agent,Door),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',178).

 /*  reactive_rule([metreqs(walkThroughDoor21(Agent,Door))],
   	      [ requires(walkThroughDoor21(Agent,Door),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',178).

 /*  fix_axiom_head(When_Time) ->
       [ holds_at(metreqs(walkThroughDoor21(Agent, Door)),
                  When_Time),
          (->),
         metreqs(walkThroughDoor21(Agent, Door))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',178).

 /*  pl=axiom(metreqs(walkThroughDoor21(Agent,Door)),
         [at(Agent,side2(Door))]).
 */

 /*  at(Agent, side2(Door)) ->
       metreqs(walkThroughDoor21(Agent, Door)).
 */
if loc_at(Agent, side2(Door))then metreqs(walkThroughDoor21(Agent, Door)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',178).

 /*  reactive_rule([loc_at(Agent,side2(Door))],
   	      [metreqs(walkThroughDoor21(Agent,Door))]).
 */

 /*  reactive_rule([loc_at(Agent,side2(Door))],
   	      [metreqs(walkThroughDoor21(Agent,Door))]).
 */


%; Effect axioms state that
%; if an agent walks through one side of a door,
%; the agent will be at the other side of the door:
% [agent,door,location,time]
% Side2(door)=location ->
% Initiates(WalkThroughDoor12(agent,door),At(agent,location),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',187).

 /*  pl=axiom(initiates(walkThroughDoor12(Agent,Door),
   		at(Agent,Location),
   		Time),
         [side2Pred(Door,Location)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',187).

 /*  side2Pred(Door, Location) ->
       initiates(walkThroughDoor12(Agent, Door),
                 at(Agent, Location),
                 Time).
 */
if side2Pred(Door, Location)then initiates(walkThroughDoor12(Agent, Door), loc_at(Agent, Location)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',187).

 /*  reactive_rule([side2Pred(Door,Location)],
   	      [ initiates(walkThroughDoor12(Agent,Door),
   			  at(loc_at(Agent,Location),
   			     Time),
   			  Initiates)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',187).

 /*  reactive_rule([side2Pred(Door,Location)],
   	      [ initiates(walkThroughDoor12(Agent,Door),
   			  at(loc_at(Agent,Location),
   			     Time),
   			  Initiates)
   	      ]).
 */


% [agent,door,location,time]
% Side1(door)=location ->
% Initiates(WalkThroughDoor21(agent,door),At(agent,location),time).

 /*  pl=axiom(initiates(walkThroughDoor21(Agent,Door),
   		at(Agent,Location),
   		Time),
         [side1Pred(Door,Location)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',192).

 /*  side1Pred(Door, Location) ->
       initiates(walkThroughDoor21(Agent, Door),
                 at(Agent, Location),
                 Time).
 */
if side1Pred(Door, Location)then initiates(walkThroughDoor21(Agent, Door), loc_at(Agent, Location)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',192).

 /*  reactive_rule([side1Pred(Door,Location)],
   	      [ initiates(walkThroughDoor21(Agent,Door),
   			  at(loc_at(Agent,Location),
   			     Time),
   			  Initiates)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',192).

 /*  reactive_rule([side1Pred(Door,Location)],
   	      [ initiates(walkThroughDoor21(Agent,Door),
   			  at(loc_at(Agent,Location),
   			     Time),
   			  Initiates)
   	      ]).
 */


% [agent,door,location,time]
% Side1(door)=location ->
% Terminates(WalkThroughDoor12(agent,door),At(agent,location),time).

 /*  pl=axiom(terminates(walkThroughDoor12(Agent,Door),
   		 at(Agent,Location),
   		 Time),
         [side1Pred(Door,Location)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',196).

 /*  side1Pred(Door, Location) ->
       terminates(walkThroughDoor12(Agent, Door),
                  at(Agent, Location),
                  Time).
 */
if side1Pred(Door, Location)then terminates(walkThroughDoor12(Agent, Door), loc_at(Agent, Location)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',196).

 /*  reactive_rule([side1Pred(Door,Location)],
   	      [ terminates(walkThroughDoor12(Agent,Door),
   			   at(loc_at(Agent,Location),
   			      Time),
   			   Terminates)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',196).

 /*  reactive_rule([side1Pred(Door,Location)],
   	      [ terminates(walkThroughDoor12(Agent,Door),
   			   at(loc_at(Agent,Location),
   			      Time),
   			   Terminates)
   	      ]).
 */


% [agent,door,location,time]
% Side2(door)=location ->
% Terminates(WalkThroughDoor21(agent,door),At(agent,location),time).

 /*  pl=axiom(terminates(walkThroughDoor21(Agent,Door),
   		 at(Agent,Location),
   		 Time),
         [side2Pred(Door,Location)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',200).

 /*  side2Pred(Door, Location) ->
       terminates(walkThroughDoor21(Agent, Door),
                  at(Agent, Location),
                  Time).
 */
if side2Pred(Door, Location)then terminates(walkThroughDoor21(Agent, Door), loc_at(Agent, Location)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',200).

 /*  reactive_rule([side2Pred(Door,Location)],
   	      [ terminates(walkThroughDoor21(Agent,Door),
   			   at(loc_at(Agent,Location),
   			      Time),
   			   Terminates)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',200).

 /*  reactive_rule([side2Pred(Door,Location)],
   	      [ terminates(walkThroughDoor21(Agent,Door),
   			   at(loc_at(Agent,Location),
   			      Time),
   			   Terminates)
   	      ]).
 */


%; walking from one end of a street to another
%; agent walks from the first end of street to the second end.

% event WalkStreet12(agent,street)
 %  blue=event(walkStreet12(agent,street)).
 %  event(walkStreet12(agent,street)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',205).
actions([walkStreet12/2]).
 %  actions([walkStreet12/2]).
mpred_prop(walkStreet12(agent,street),event).
 %  mpred_prop(walkStreet12(agent,street),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',205).
%; agent walks from the second end of street to the first end.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',208).
% event WalkStreet21(agent,street)
 %  blue=event(walkStreet21(agent,street)).
 %  event(walkStreet21(agent,street)).
actions([walkStreet21/2]).
 %  actions([walkStreet21/2]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',208).
mpred_prop(walkStreet21(agent,street),event).
 %  mpred_prop(walkStreet21(agent,street),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',210).
%; Precondition axioms state that
%; for an agent to walk from one end of a street to another,
%; the agent must be awake,
%; the agent must be standing, and
%; the agent must be at the first end of the street:
% [agent,street,time]
% Happens(WalkStreet12(agent,street),time) ->
% HoldsAt(Awake(agent),time) &
% HoldsAt(Standing(agent),time) &
% HoldsAt(At(agent,Side1(street)),time).
 %  clausify_pnf=(happens(walkStreet12(Agent, Street), Time)->holds_at(awake(Agent), Time), holds_at(standing(Agent), Time), holds_at(at(Agent, side1(Street)), Time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',215).

 /*  not(happens(walkStreet12(Agent, Street), Time)) :-
       (   not(holds_at(awake(Agent), Time))
       ;   not(holds_at(standing(Agent), Time))
       ;   not(holds_at(at(Agent, side1(Street)), Time))
       ).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',215).

 /*  fix_axiom_head(Time) ->
       [ not(happens(walkStreet12(Agent, Street), Time)),
          (->),
         not(walkStreet12(Agent, Street))
       ].
 */
 %   pl=axiom(not(walkStreet12(Agent, Street)), [(not(awake(Agent));not(standing(Agent));not(at(Agent, side1(Street))))]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',215).

 /*  not(awake(Agent));not(standing(Agent));not(at(Agent, side1(Street))) ->
       not(walkStreet12(Agent, Street)).
 */
if not awake(Agent);not standing(Agent);not loc_at(Agent, side1(Street))then not walkStreet12(Agent, Street).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',215).

 /*   reactive_rule([  (not(awake(Agent));not(standing(Agent));not(loc_at(Agent, side1(Street))))
                    ],
                    [not(walkStreet12(Agent, Street))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',215).

 /*   reactive_rule([  (not(awake(Agent));not(standing(Agent));not(loc_at(Agent, side1(Street))))
                    ],
                    [not(walkStreet12(Agent, Street))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',215).

 /*  holds_at(awake(Agent), Time) :-
       happens(walkStreet12(Agent, Street), Time).
 */

 /*  pl=axiom(requires(walkStreet12(Agent,Street),When_Time),
         [metreqs(walkStreet12(Agent,Street))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',215).

 /*  metreqs(walkStreet12(Agent, Street)) ->
       requires(walkStreet12(Agent, Street), When_Time).
 */
if metreqs(walkStreet12(Agent, Street))then requires(walkStreet12(Agent, Street), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',215).

 /*  reactive_rule([metreqs(walkStreet12(Agent,Street))],
   	      [ requires(walkStreet12(Agent,Street),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',215).

 /*  reactive_rule([metreqs(walkStreet12(Agent,Street))],
   	      [ requires(walkStreet12(Agent,Street),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',215).

 /*  fix_axiom_head(When_Time) ->
       [ holds_at(metreqs(walkStreet12(Agent, Street)),
                  When_Time),
          (->),
         metreqs(walkStreet12(Agent, Street))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',215).

 /*  pl=axiom(metreqs(walkStreet12(Agent,Street)),
         [awake(Agent)]).
 */

 /*  awake(Agent) ->
       metreqs(walkStreet12(Agent, Street)).
 */
if awake(Agent)then metreqs(walkStreet12(Agent, Street)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',215).

 /*  reactive_rule([awake(Agent)],
   	      [metreqs(walkStreet12(Agent,Street))]).
 */

 /*  reactive_rule([awake(Agent)],
   	      [metreqs(walkStreet12(Agent,Street))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',215).

 /*  holds_at(standing(Agent), When_Time) :-
       happens(walkStreet12(Agent, Street), When_Time).
 */

 /*  pl=axiom(requires(walkStreet12(Agent,Street),When_Time),
         [metreqs(walkStreet12(Agent,Street))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',215).

 /*  metreqs(walkStreet12(Agent, Street)) ->
       requires(walkStreet12(Agent, Street), When_Time).
 */
if metreqs(walkStreet12(Agent, Street))then requires(walkStreet12(Agent, Street), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',215).

 /*  reactive_rule([metreqs(walkStreet12(Agent,Street))],
   	      [ requires(walkStreet12(Agent,Street),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',215).

 /*  reactive_rule([metreqs(walkStreet12(Agent,Street))],
   	      [ requires(walkStreet12(Agent,Street),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',215).

 /*  fix_axiom_head(When_Time) ->
       [ holds_at(metreqs(walkStreet12(Agent, Street)),
                  When_Time),
          (->),
         metreqs(walkStreet12(Agent, Street))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',215).

 /*  pl=axiom(metreqs(walkStreet12(Agent,Street)),
         [standing(Agent)]).
 */

 /*  standing(Agent) ->
       metreqs(walkStreet12(Agent, Street)).
 */
if standing(Agent)then metreqs(walkStreet12(Agent, Street)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',215).

 /*  reactive_rule([holds(standing(Agent),Holds)],
   	      [metreqs(walkStreet12(Agent,Street))]).
 */

 /*  reactive_rule([holds(standing(Agent),Holds)],
   	      [metreqs(walkStreet12(Agent,Street))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',215).

 /*  holds_at(at(Agent, side1(Street)), When_Time) :-
       happens(walkStreet12(Agent, Street), When_Time).
 */

 /*  pl=axiom(requires(walkStreet12(Agent,Street),When_Time),
         [metreqs(walkStreet12(Agent,Street))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',215).

 /*  metreqs(walkStreet12(Agent, Street)) ->
       requires(walkStreet12(Agent, Street), When_Time).
 */
if metreqs(walkStreet12(Agent, Street))then requires(walkStreet12(Agent, Street), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',215).

 /*  reactive_rule([metreqs(walkStreet12(Agent,Street))],
   	      [ requires(walkStreet12(Agent,Street),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',215).

 /*  reactive_rule([metreqs(walkStreet12(Agent,Street))],
   	      [ requires(walkStreet12(Agent,Street),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',215).

 /*  fix_axiom_head(When_Time) ->
       [ holds_at(metreqs(walkStreet12(Agent, Street)),
                  When_Time),
          (->),
         metreqs(walkStreet12(Agent, Street))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',215).

 /*  pl=axiom(metreqs(walkStreet12(Agent,Street)),
         [at(Agent,side1(Street))]).
 */

 /*  at(Agent, side1(Street)) ->
       metreqs(walkStreet12(Agent, Street)).
 */
if loc_at(Agent, side1(Street))then metreqs(walkStreet12(Agent, Street)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',215).

 /*  reactive_rule([loc_at(Agent,side1(Street))],
   	      [metreqs(walkStreet12(Agent,Street))]).
 */

 /*  reactive_rule([loc_at(Agent,side1(Street))],
   	      [metreqs(walkStreet12(Agent,Street))]).
 */


% [agent,street,time]
% Happens(WalkStreet21(agent,street),time) ->
% HoldsAt(Awake(agent),time) &
% HoldsAt(Standing(agent),time) &
% HoldsAt(At(agent,Side2(street)),time).
 %  clausify_pnf=(happens(walkStreet21(Agent, Street), Time)->holds_at(awake(Agent), Time), holds_at(standing(Agent), Time), holds_at(at(Agent, side2(Street)), Time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',222).

 /*  not(happens(walkStreet21(Agent, Street), Time)) :-
       (   not(holds_at(awake(Agent), Time))
       ;   not(holds_at(standing(Agent), Time))
       ;   not(holds_at(at(Agent, side2(Street)), Time))
       ).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',222).

 /*  fix_axiom_head(Time) ->
       [ not(happens(walkStreet21(Agent, Street), Time)),
          (->),
         not(walkStreet21(Agent, Street))
       ].
 */
 %   pl=axiom(not(walkStreet21(Agent, Street)), [(not(awake(Agent));not(standing(Agent));not(at(Agent, side2(Street))))]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',222).

 /*  not(awake(Agent));not(standing(Agent));not(at(Agent, side2(Street))) ->
       not(walkStreet21(Agent, Street)).
 */
if not awake(Agent);not standing(Agent);not loc_at(Agent, side2(Street))then not walkStreet21(Agent, Street).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',222).

 /*   reactive_rule([  (not(awake(Agent));not(standing(Agent));not(loc_at(Agent, side2(Street))))
                    ],
                    [not(walkStreet21(Agent, Street))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',222).

 /*   reactive_rule([  (not(awake(Agent));not(standing(Agent));not(loc_at(Agent, side2(Street))))
                    ],
                    [not(walkStreet21(Agent, Street))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',222).

 /*  holds_at(awake(Agent), Time) :-
       happens(walkStreet21(Agent, Street), Time).
 */

 /*  pl=axiom(requires(walkStreet21(Agent,Street),When_Time),
         [metreqs(walkStreet21(Agent,Street))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',222).

 /*  metreqs(walkStreet21(Agent, Street)) ->
       requires(walkStreet21(Agent, Street), When_Time).
 */
if metreqs(walkStreet21(Agent, Street))then requires(walkStreet21(Agent, Street), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',222).

 /*  reactive_rule([metreqs(walkStreet21(Agent,Street))],
   	      [ requires(walkStreet21(Agent,Street),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',222).

 /*  reactive_rule([metreqs(walkStreet21(Agent,Street))],
   	      [ requires(walkStreet21(Agent,Street),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',222).

 /*  fix_axiom_head(When_Time) ->
       [ holds_at(metreqs(walkStreet21(Agent, Street)),
                  When_Time),
          (->),
         metreqs(walkStreet21(Agent, Street))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',222).

 /*  pl=axiom(metreqs(walkStreet21(Agent,Street)),
         [awake(Agent)]).
 */

 /*  awake(Agent) ->
       metreqs(walkStreet21(Agent, Street)).
 */
if awake(Agent)then metreqs(walkStreet21(Agent, Street)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',222).

 /*  reactive_rule([awake(Agent)],
   	      [metreqs(walkStreet21(Agent,Street))]).
 */

 /*  reactive_rule([awake(Agent)],
   	      [metreqs(walkStreet21(Agent,Street))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',222).

 /*  holds_at(standing(Agent), When_Time) :-
       happens(walkStreet21(Agent, Street), When_Time).
 */

 /*  pl=axiom(requires(walkStreet21(Agent,Street),When_Time),
         [metreqs(walkStreet21(Agent,Street))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',222).

 /*  metreqs(walkStreet21(Agent, Street)) ->
       requires(walkStreet21(Agent, Street), When_Time).
 */
if metreqs(walkStreet21(Agent, Street))then requires(walkStreet21(Agent, Street), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',222).

 /*  reactive_rule([metreqs(walkStreet21(Agent,Street))],
   	      [ requires(walkStreet21(Agent,Street),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',222).

 /*  reactive_rule([metreqs(walkStreet21(Agent,Street))],
   	      [ requires(walkStreet21(Agent,Street),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',222).

 /*  fix_axiom_head(When_Time) ->
       [ holds_at(metreqs(walkStreet21(Agent, Street)),
                  When_Time),
          (->),
         metreqs(walkStreet21(Agent, Street))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',222).

 /*  pl=axiom(metreqs(walkStreet21(Agent,Street)),
         [standing(Agent)]).
 */

 /*  standing(Agent) ->
       metreqs(walkStreet21(Agent, Street)).
 */
if standing(Agent)then metreqs(walkStreet21(Agent, Street)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',222).

 /*  reactive_rule([holds(standing(Agent),Holds)],
   	      [metreqs(walkStreet21(Agent,Street))]).
 */

 /*  reactive_rule([holds(standing(Agent),Holds)],
   	      [metreqs(walkStreet21(Agent,Street))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',222).

 /*  holds_at(at(Agent, side2(Street)), When_Time) :-
       happens(walkStreet21(Agent, Street), When_Time).
 */

 /*  pl=axiom(requires(walkStreet21(Agent,Street),When_Time),
         [metreqs(walkStreet21(Agent,Street))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',222).

 /*  metreqs(walkStreet21(Agent, Street)) ->
       requires(walkStreet21(Agent, Street), When_Time).
 */
if metreqs(walkStreet21(Agent, Street))then requires(walkStreet21(Agent, Street), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',222).

 /*  reactive_rule([metreqs(walkStreet21(Agent,Street))],
   	      [ requires(walkStreet21(Agent,Street),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',222).

 /*  reactive_rule([metreqs(walkStreet21(Agent,Street))],
   	      [ requires(walkStreet21(Agent,Street),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',222).

 /*  fix_axiom_head(When_Time) ->
       [ holds_at(metreqs(walkStreet21(Agent, Street)),
                  When_Time),
          (->),
         metreqs(walkStreet21(Agent, Street))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',222).

 /*  pl=axiom(metreqs(walkStreet21(Agent,Street)),
         [at(Agent,side2(Street))]).
 */

 /*  at(Agent, side2(Street)) ->
       metreqs(walkStreet21(Agent, Street)).
 */
if loc_at(Agent, side2(Street))then metreqs(walkStreet21(Agent, Street)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',222).

 /*  reactive_rule([loc_at(Agent,side2(Street))],
   	      [metreqs(walkStreet21(Agent,Street))]).
 */

 /*  reactive_rule([loc_at(Agent,side2(Street))],
   	      [metreqs(walkStreet21(Agent,Street))]).
 */


%; Effect axioms state that
%; if an agent walks from one end of a street to another,
%; the agent will be at the other end of the street:
% [agent,street,location,time]
% Side2(street)=location ->
% Initiates(WalkStreet12(agent,street),At(agent,location),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',230).

 /*  pl=axiom(initiates(walkStreet12(Agent,Street),
   		at(Agent,Location),
   		Time),
         [side2Pred(Street,Location)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',230).

 /*  side2Pred(Street, Location) ->
       initiates(walkStreet12(Agent, Street),
                 at(Agent, Location),
                 Time).
 */
if side2Pred(Street, Location)then initiates(walkStreet12(Agent, Street), loc_at(Agent, Location)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',230).

 /*  reactive_rule([side2Pred(Street,Location)],
   	      [ initiates(walkStreet12(Agent,Street),
   			  at(loc_at(Agent,Location),
   			     Time),
   			  Initiates)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',230).

 /*  reactive_rule([side2Pred(Street,Location)],
   	      [ initiates(walkStreet12(Agent,Street),
   			  at(loc_at(Agent,Location),
   			     Time),
   			  Initiates)
   	      ]).
 */


% [agent,street,location,time]
% Side1(street)=location ->
% Initiates(WalkStreet21(agent,street),At(agent,location),time).

 /*  pl=axiom(initiates(walkStreet21(Agent,Street),
   		at(Agent,Location),
   		Time),
         [side1Pred(Street,Location)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',235).

 /*  side1Pred(Street, Location) ->
       initiates(walkStreet21(Agent, Street),
                 at(Agent, Location),
                 Time).
 */
if side1Pred(Street, Location)then initiates(walkStreet21(Agent, Street), loc_at(Agent, Location)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',235).

 /*  reactive_rule([side1Pred(Street,Location)],
   	      [ initiates(walkStreet21(Agent,Street),
   			  at(loc_at(Agent,Location),
   			     Time),
   			  Initiates)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',235).

 /*  reactive_rule([side1Pred(Street,Location)],
   	      [ initiates(walkStreet21(Agent,Street),
   			  at(loc_at(Agent,Location),
   			     Time),
   			  Initiates)
   	      ]).
 */


% [agent,street,location,time]
% Side1(street)=location ->
% Terminates(WalkStreet12(agent,street),At(agent,location),time).

 /*  pl=axiom(terminates(walkStreet12(Agent,Street),
   		 at(Agent,Location),
   		 Time),
         [side1Pred(Street,Location)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',239).

 /*  side1Pred(Street, Location) ->
       terminates(walkStreet12(Agent, Street),
                  at(Agent, Location),
                  Time).
 */
if side1Pred(Street, Location)then terminates(walkStreet12(Agent, Street), loc_at(Agent, Location)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',239).

 /*  reactive_rule([side1Pred(Street,Location)],
   	      [ terminates(walkStreet12(Agent,Street),
   			   at(loc_at(Agent,Location),
   			      Time),
   			   Terminates)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',239).

 /*  reactive_rule([side1Pred(Street,Location)],
   	      [ terminates(walkStreet12(Agent,Street),
   			   at(loc_at(Agent,Location),
   			      Time),
   			   Terminates)
   	      ]).
 */


% [agent,street,location,time]
% Side2(street)=location ->
% Terminates(WalkStreet21(agent,street),At(agent,location),time).

 /*  pl=axiom(terminates(walkStreet21(Agent,Street),
   		 at(Agent,Location),
   		 Time),
         [side2Pred(Street,Location)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',243).

 /*  side2Pred(Street, Location) ->
       terminates(walkStreet21(Agent, Street),
                  at(Agent, Location),
                  Time).
 */
if side2Pred(Street, Location)then terminates(walkStreet21(Agent, Street), loc_at(Agent, Location)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',243).

 /*  reactive_rule([side2Pred(Street,Location)],
   	      [ terminates(walkStreet21(Agent,Street),
   			   at(loc_at(Agent,Location),
   			      Time),
   			   Terminates)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',243).

 /*  reactive_rule([side2Pred(Street,Location)],
   	      [ terminates(walkStreet21(Agent,Street),
   			   at(loc_at(Agent,Location),
   			      Time),
   			   Terminates)
   	      ]).
 */


%; floors
%; The floor of room is integer.

% function Floor(room): integer
 %  blue=function(floor(room)).
 %  function(floor(room)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',248).
functions([floor/1]).
 %  functions([floor/1]).
mpred_prop(floor(room),function).
 %  mpred_prop(floor(room),function).
 %  blue=predicate(floorPred(room,integer)).
 %  predicate(floorPred(room,integer)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',248).
predicates([floorPred/2]).
 %  predicates([floorPred/2]).
mpred_prop(floorPred(room,integer),predicate).
 %  mpred_prop(floorPred(room,integer),predicate).
 %  pl=axiom(functional_predicate(floor,floorPred),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',248).
functional_predicate(floor,floorPred).
 %  functional_predicate(floor,floorPred).
 %  pl=axiom(function_argtypes(floorPred,floor(room),integer),[]).
function_argtypes(floorPred,floor(room),integer).
 %  function_argtypes(floorPred,floor(room),integer).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',248).
resultIsa(floor,integer).
 %  resultIsa(floor,integer).
%; walking up and down staircases
%; agent walks down staircase.

% event WalkDownStaircase(agent,staircase)
 %  blue=event(walkDownStaircase(agent,staircase)).
 %  event(walkDownStaircase(agent,staircase)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',253).
actions([walkDownStaircase/2]).
 %  actions([walkDownStaircase/2]).
mpred_prop(walkDownStaircase(agent,staircase),event).
 %  mpred_prop(walkDownStaircase(agent,staircase),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',253).
%; agent walks up staircase.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',256).
% event WalkUpStaircase(agent,staircase)
 %  blue=event(walkUpStaircase(agent,staircase)).
 %  event(walkUpStaircase(agent,staircase)).
actions([walkUpStaircase/2]).
 %  actions([walkUpStaircase/2]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',256).
mpred_prop(walkUpStaircase(agent,staircase),event).
 %  mpred_prop(walkUpStaircase(agent,staircase),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',258).
%; Precondition axioms state that
%; for an agent to walk down (up) a staircase,
%; the agent must be awake, standing, and
%; at the top (bottom) of the staircase:
% [agent,staircase,time]
% Happens(WalkDownStaircase(agent,staircase),time) ->
% HoldsAt(Awake(agent),time) &
% HoldsAt(Standing(agent),time) &
% HoldsAt(At(agent,Side2(staircase)),time).
 %  clausify_pnf=(happens(walkDownStaircase(Agent, Staircase), Time)->holds_at(awake(Agent), Time), holds_at(standing(Agent), Time), holds_at(at(Agent, side2(Staircase)), Time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',262).

 /*  not(happens(walkDownStaircase(Agent, Staircase), Time)) :-
       (   not(holds_at(awake(Agent), Time))
       ;   not(holds_at(standing(Agent), Time))
       ;   not(holds_at(at(Agent, side2(Staircase)), Time))
       ).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',262).

 /*  fix_axiom_head(Time) ->
       [ not(happens(walkDownStaircase(Agent, Staircase), Time)),
          (->),
         not(walkDownStaircase(Agent, Staircase))
       ].
 */
 %   pl=axiom(not(walkDownStaircase(Agent, Staircase)), [(not(awake(Agent));not(standing(Agent));not(at(Agent, side2(Staircase))))]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',262).

 /*  not(awake(Agent));not(standing(Agent));not(at(Agent, side2(Staircase))) ->
       not(walkDownStaircase(Agent, Staircase)).
 */
if not awake(Agent);not standing(Agent);not loc_at(Agent, side2(Staircase))then not walkDownStaircase(Agent, Staircase).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',262).

 /*   reactive_rule([  (not(awake(Agent));not(standing(Agent));not(loc_at(Agent, side2(Staircase))))
                    ],
                    [not(walkDownStaircase(Agent, Staircase))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',262).

 /*   reactive_rule([  (not(awake(Agent));not(standing(Agent));not(loc_at(Agent, side2(Staircase))))
                    ],
                    [not(walkDownStaircase(Agent, Staircase))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',262).

 /*  holds_at(awake(Agent), Time) :-
       happens(walkDownStaircase(Agent, Staircase), Time).
 */

 /*  pl=axiom(requires(walkDownStaircase(Agent,Staircase),
   	       When_Time),
         [metreqs(walkDownStaircase(Agent,Staircase))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',262).

 /*  metreqs(walkDownStaircase(Agent, Staircase)) ->
       requires(walkDownStaircase(Agent, Staircase), When_Time).
 */
if metreqs(walkDownStaircase(Agent, Staircase))then requires(walkDownStaircase(Agent, Staircase), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',262).

 /*  reactive_rule([metreqs(walkDownStaircase(Agent,Staircase))],
   	      [ requires(walkDownStaircase(Agent,Staircase),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',262).

 /*  reactive_rule([metreqs(walkDownStaircase(Agent,Staircase))],
   	      [ requires(walkDownStaircase(Agent,Staircase),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',262).

 /*  fix_axiom_head(When_Time) ->
       [ holds_at(metreqs(walkDownStaircase(Agent, Staircase)),
                  When_Time),
          (->),
         metreqs(walkDownStaircase(Agent, Staircase))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',262).

 /*  pl=axiom(metreqs(walkDownStaircase(Agent,Staircase)),
         [awake(Agent)]).
 */

 /*  awake(Agent) ->
       metreqs(walkDownStaircase(Agent, Staircase)).
 */
if awake(Agent)then metreqs(walkDownStaircase(Agent, Staircase)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',262).

 /*  reactive_rule([awake(Agent)],
   	      [metreqs(walkDownStaircase(Agent,Staircase))]).
 */

 /*  reactive_rule([awake(Agent)],
   	      [metreqs(walkDownStaircase(Agent,Staircase))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',262).

 /*  holds_at(standing(Agent), When_Time) :-
       happens(walkDownStaircase(Agent, Staircase), When_Time).
 */

 /*  pl=axiom(requires(walkDownStaircase(Agent,Staircase),
   	       When_Time),
         [metreqs(walkDownStaircase(Agent,Staircase))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',262).

 /*  metreqs(walkDownStaircase(Agent, Staircase)) ->
       requires(walkDownStaircase(Agent, Staircase), When_Time).
 */
if metreqs(walkDownStaircase(Agent, Staircase))then requires(walkDownStaircase(Agent, Staircase), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',262).

 /*  reactive_rule([metreqs(walkDownStaircase(Agent,Staircase))],
   	      [ requires(walkDownStaircase(Agent,Staircase),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',262).

 /*  reactive_rule([metreqs(walkDownStaircase(Agent,Staircase))],
   	      [ requires(walkDownStaircase(Agent,Staircase),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',262).

 /*  fix_axiom_head(When_Time) ->
       [ holds_at(metreqs(walkDownStaircase(Agent, Staircase)),
                  When_Time),
          (->),
         metreqs(walkDownStaircase(Agent, Staircase))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',262).

 /*  pl=axiom(metreqs(walkDownStaircase(Agent,Staircase)),
         [standing(Agent)]).
 */

 /*  standing(Agent) ->
       metreqs(walkDownStaircase(Agent, Staircase)).
 */
if standing(Agent)then metreqs(walkDownStaircase(Agent, Staircase)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',262).

 /*  reactive_rule([holds(standing(Agent),Holds)],
   	      [metreqs(walkDownStaircase(Agent,Staircase))]).
 */

 /*  reactive_rule([holds(standing(Agent),Holds)],
   	      [metreqs(walkDownStaircase(Agent,Staircase))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',262).

 /*  holds_at(at(Agent, side2(Staircase)), When_Time) :-
       happens(walkDownStaircase(Agent, Staircase), When_Time).
 */

 /*  pl=axiom(requires(walkDownStaircase(Agent,Staircase),
   	       When_Time),
         [metreqs(walkDownStaircase(Agent,Staircase))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',262).

 /*  metreqs(walkDownStaircase(Agent, Staircase)) ->
       requires(walkDownStaircase(Agent, Staircase), When_Time).
 */
if metreqs(walkDownStaircase(Agent, Staircase))then requires(walkDownStaircase(Agent, Staircase), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',262).

 /*  reactive_rule([metreqs(walkDownStaircase(Agent,Staircase))],
   	      [ requires(walkDownStaircase(Agent,Staircase),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',262).

 /*  reactive_rule([metreqs(walkDownStaircase(Agent,Staircase))],
   	      [ requires(walkDownStaircase(Agent,Staircase),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',262).

 /*  fix_axiom_head(When_Time) ->
       [ holds_at(metreqs(walkDownStaircase(Agent, Staircase)),
                  When_Time),
          (->),
         metreqs(walkDownStaircase(Agent, Staircase))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',262).

 /*  pl=axiom(metreqs(walkDownStaircase(Agent,Staircase)),
         [at(Agent,side2(Staircase))]).
 */

 /*  at(Agent, side2(Staircase)) ->
       metreqs(walkDownStaircase(Agent, Staircase)).
 */
if loc_at(Agent, side2(Staircase))then metreqs(walkDownStaircase(Agent, Staircase)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',262).

 /*  reactive_rule([loc_at(Agent,side2(Staircase))],
   	      [metreqs(walkDownStaircase(Agent,Staircase))]).
 */

 /*  reactive_rule([loc_at(Agent,side2(Staircase))],
   	      [metreqs(walkDownStaircase(Agent,Staircase))]).
 */


% [agent,staircase,time]
% Happens(WalkUpStaircase(agent,staircase),time) ->
% HoldsAt(Awake(agent),time) &
% HoldsAt(Standing(agent),time) &
% HoldsAt(At(agent,Side1(staircase)),time).
 %  clausify_pnf=(happens(walkUpStaircase(Agent, Staircase), Time)->holds_at(awake(Agent), Time), holds_at(standing(Agent), Time), holds_at(at(Agent, side1(Staircase)), Time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',269).

 /*  not(happens(walkUpStaircase(Agent, Staircase), Time)) :-
       (   not(holds_at(awake(Agent), Time))
       ;   not(holds_at(standing(Agent), Time))
       ;   not(holds_at(at(Agent, side1(Staircase)), Time))
       ).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',269).

 /*  fix_axiom_head(Time) ->
       [ not(happens(walkUpStaircase(Agent, Staircase), Time)),
          (->),
         not(walkUpStaircase(Agent, Staircase))
       ].
 */
 %   pl=axiom(not(walkUpStaircase(Agent, Staircase)), [(not(awake(Agent));not(standing(Agent));not(at(Agent, side1(Staircase))))]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',269).

 /*  not(awake(Agent));not(standing(Agent));not(at(Agent, side1(Staircase))) ->
       not(walkUpStaircase(Agent, Staircase)).
 */
if not awake(Agent);not standing(Agent);not loc_at(Agent, side1(Staircase))then not walkUpStaircase(Agent, Staircase).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',269).

 /*   reactive_rule([  (not(awake(Agent));not(standing(Agent));not(loc_at(Agent, side1(Staircase))))
                    ],
                    [not(walkUpStaircase(Agent, Staircase))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',269).

 /*   reactive_rule([  (not(awake(Agent));not(standing(Agent));not(loc_at(Agent, side1(Staircase))))
                    ],
                    [not(walkUpStaircase(Agent, Staircase))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',269).

 /*  holds_at(awake(Agent), Time) :-
       happens(walkUpStaircase(Agent, Staircase), Time).
 */

 /*  pl=axiom(requires(walkUpStaircase(Agent,Staircase),
   	       When_Time),
         [metreqs(walkUpStaircase(Agent,Staircase))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',269).

 /*  metreqs(walkUpStaircase(Agent, Staircase)) ->
       requires(walkUpStaircase(Agent, Staircase), When_Time).
 */
if metreqs(walkUpStaircase(Agent, Staircase))then requires(walkUpStaircase(Agent, Staircase), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',269).

 /*  reactive_rule([metreqs(walkUpStaircase(Agent,Staircase))],
   	      [ requires(walkUpStaircase(Agent,Staircase),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',269).

 /*  reactive_rule([metreqs(walkUpStaircase(Agent,Staircase))],
   	      [ requires(walkUpStaircase(Agent,Staircase),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',269).

 /*  fix_axiom_head(When_Time) ->
       [ holds_at(metreqs(walkUpStaircase(Agent, Staircase)),
                  When_Time),
          (->),
         metreqs(walkUpStaircase(Agent, Staircase))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',269).

 /*  pl=axiom(metreqs(walkUpStaircase(Agent,Staircase)),
         [awake(Agent)]).
 */

 /*  awake(Agent) ->
       metreqs(walkUpStaircase(Agent, Staircase)).
 */
if awake(Agent)then metreqs(walkUpStaircase(Agent, Staircase)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',269).

 /*  reactive_rule([awake(Agent)],
   	      [metreqs(walkUpStaircase(Agent,Staircase))]).
 */

 /*  reactive_rule([awake(Agent)],
   	      [metreqs(walkUpStaircase(Agent,Staircase))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',269).

 /*  holds_at(standing(Agent), When_Time) :-
       happens(walkUpStaircase(Agent, Staircase), When_Time).
 */

 /*  pl=axiom(requires(walkUpStaircase(Agent,Staircase),
   	       When_Time),
         [metreqs(walkUpStaircase(Agent,Staircase))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',269).

 /*  metreqs(walkUpStaircase(Agent, Staircase)) ->
       requires(walkUpStaircase(Agent, Staircase), When_Time).
 */
if metreqs(walkUpStaircase(Agent, Staircase))then requires(walkUpStaircase(Agent, Staircase), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',269).

 /*  reactive_rule([metreqs(walkUpStaircase(Agent,Staircase))],
   	      [ requires(walkUpStaircase(Agent,Staircase),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',269).

 /*  reactive_rule([metreqs(walkUpStaircase(Agent,Staircase))],
   	      [ requires(walkUpStaircase(Agent,Staircase),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',269).

 /*  fix_axiom_head(When_Time) ->
       [ holds_at(metreqs(walkUpStaircase(Agent, Staircase)),
                  When_Time),
          (->),
         metreqs(walkUpStaircase(Agent, Staircase))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',269).

 /*  pl=axiom(metreqs(walkUpStaircase(Agent,Staircase)),
         [standing(Agent)]).
 */

 /*  standing(Agent) ->
       metreqs(walkUpStaircase(Agent, Staircase)).
 */
if standing(Agent)then metreqs(walkUpStaircase(Agent, Staircase)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',269).

 /*  reactive_rule([holds(standing(Agent),Holds)],
   	      [metreqs(walkUpStaircase(Agent,Staircase))]).
 */

 /*  reactive_rule([holds(standing(Agent),Holds)],
   	      [metreqs(walkUpStaircase(Agent,Staircase))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',269).

 /*  holds_at(at(Agent, side1(Staircase)), When_Time) :-
       happens(walkUpStaircase(Agent, Staircase), When_Time).
 */

 /*  pl=axiom(requires(walkUpStaircase(Agent,Staircase),
   	       When_Time),
         [metreqs(walkUpStaircase(Agent,Staircase))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',269).

 /*  metreqs(walkUpStaircase(Agent, Staircase)) ->
       requires(walkUpStaircase(Agent, Staircase), When_Time).
 */
if metreqs(walkUpStaircase(Agent, Staircase))then requires(walkUpStaircase(Agent, Staircase), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',269).

 /*  reactive_rule([metreqs(walkUpStaircase(Agent,Staircase))],
   	      [ requires(walkUpStaircase(Agent,Staircase),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',269).

 /*  reactive_rule([metreqs(walkUpStaircase(Agent,Staircase))],
   	      [ requires(walkUpStaircase(Agent,Staircase),
   			 When_Time)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',269).

 /*  fix_axiom_head(When_Time) ->
       [ holds_at(metreqs(walkUpStaircase(Agent, Staircase)),
                  When_Time),
          (->),
         metreqs(walkUpStaircase(Agent, Staircase))
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',269).

 /*  pl=axiom(metreqs(walkUpStaircase(Agent,Staircase)),
         [at(Agent,side1(Staircase))]).
 */

 /*  at(Agent, side1(Staircase)) ->
       metreqs(walkUpStaircase(Agent, Staircase)).
 */
if loc_at(Agent, side1(Staircase))then metreqs(walkUpStaircase(Agent, Staircase)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',269).

 /*  reactive_rule([loc_at(Agent,side1(Staircase))],
   	      [metreqs(walkUpStaircase(Agent,Staircase))]).
 */

 /*  reactive_rule([loc_at(Agent,side1(Staircase))],
   	      [metreqs(walkUpStaircase(Agent,Staircase))]).
 */


%; Effect axioms state that
%; if an agent walks down (up) a staircase,
%; the agent will be at the bottom (top) of the staircase:
% [agent,staircase,room,time]
% Side1(staircase)=room ->
% Initiates(WalkDownStaircase(agent,staircase),At(agent,room),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',277).

 /*  pl=axiom(initiates(walkDownStaircase(Agent,Staircase),
   		at(Agent,Room),
   		Time),
         [side1Pred(Staircase,Room)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',277).

 /*  side1Pred(Staircase, Room) ->
       initiates(walkDownStaircase(Agent, Staircase),
                 at(Agent, Room),
                 Time).
 */
if side1Pred(Staircase, Room)then initiates(walkDownStaircase(Agent, Staircase), loc_at(Agent, Room)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',277).

 /*  reactive_rule([side1Pred(Staircase,Room)],
   	      [ initiates(walkDownStaircase(Agent,
   					    Staircase),
   			  at(loc_at(Agent,Room),Time),
   			  Initiates)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',277).

 /*  reactive_rule([side1Pred(Staircase,Room)],
   	      [ initiates(walkDownStaircase(Agent,
   					    Staircase),
   			  at(loc_at(Agent,Room),Time),
   			  Initiates)
   	      ]).
 */


% [agent,staircase,room,time]
% Side2(staircase)=room ->
% Terminates(WalkDownStaircase(agent,staircase),At(agent,room),time).

 /*  pl=axiom(terminates(walkDownStaircase(Agent,Staircase),
   		 at(Agent,Room),
   		 Time),
         [side2Pred(Staircase,Room)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',282).

 /*  side2Pred(Staircase, Room) ->
       terminates(walkDownStaircase(Agent, Staircase),
                  at(Agent, Room),
                  Time).
 */
if side2Pred(Staircase, Room)then terminates(walkDownStaircase(Agent, Staircase), loc_at(Agent, Room)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',282).

 /*  reactive_rule([side2Pred(Staircase,Room)],
   	      [ terminates(walkDownStaircase(Agent,
   					     Staircase),
   			   at(loc_at(Agent,Room),
   			      Time),
   			   Terminates)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',282).

 /*  reactive_rule([side2Pred(Staircase,Room)],
   	      [ terminates(walkDownStaircase(Agent,
   					     Staircase),
   			   at(loc_at(Agent,Room),
   			      Time),
   			   Terminates)
   	      ]).
 */


% [agent,staircase,room,time]
% Side2(staircase)=room ->
% Initiates(WalkUpStaircase(agent,staircase),At(agent,room),time).

 /*  pl=axiom(initiates(walkUpStaircase(Agent,Staircase),
   		at(Agent,Room),
   		Time),
         [side2Pred(Staircase,Room)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',286).

 /*  side2Pred(Staircase, Room) ->
       initiates(walkUpStaircase(Agent, Staircase),
                 at(Agent, Room),
                 Time).
 */
if side2Pred(Staircase, Room)then initiates(walkUpStaircase(Agent, Staircase), loc_at(Agent, Room)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',286).

 /*  reactive_rule([side2Pred(Staircase,Room)],
   	      [ initiates(walkUpStaircase(Agent,Staircase),
   			  at(loc_at(Agent,Room),Time),
   			  Initiates)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',286).

 /*  reactive_rule([side2Pred(Staircase,Room)],
   	      [ initiates(walkUpStaircase(Agent,Staircase),
   			  at(loc_at(Agent,Room),Time),
   			  Initiates)
   	      ]).
 */


% [agent,staircase,room,time]
% Side1(staircase)=room ->
% Terminates(WalkUpStaircase(agent,staircase),At(agent,room),time).

 /*  pl=axiom(terminates(walkUpStaircase(Agent,Staircase),
   		 at(Agent,Room),
   		 Time),
         [side1Pred(Staircase,Room)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',290).

 /*  side1Pred(Staircase, Room) ->
       terminates(walkUpStaircase(Agent, Staircase),
                  at(Agent, Room),
                  Time).
 */
if side1Pred(Staircase, Room)then terminates(walkUpStaircase(Agent, Staircase), loc_at(Agent, Room)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',290).

 /*  reactive_rule([side1Pred(Staircase,Room)],
   	      [ terminates(walkUpStaircase(Agent,Staircase),
   			   at(loc_at(Agent,Room),
   			      Time),
   			   Terminates)
   	      ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',290).

 /*  reactive_rule([side1Pred(Staircase,Room)],
   	      [ terminates(walkUpStaircase(Agent,Staircase),
   			   at(loc_at(Agent,Room),
   			      Time),
   			   Terminates)
   	      ]).
 */


%; A state constraint says that if an agent is outside,
%; the agent is dressed.
% [agent,outside,time]
% HoldsAt(At(agent,outside),time) ->
% HoldsAt(Dressed(agent),time).
 %  clausify_pnf=(holds_at(at(Agent, Outside), Time)->holds_at(dressed(Agent), Time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',295).

 /*  holds_at(dressed(Agent), Time) :-
       holds_at(at(Agent, Outside), Time).
 */

 /*  fix_axiom_head(Time) ->
       [holds_at(dressed(Agent), Time), ->, dressed(Agent)].
 */
 %  pl=axiom(dressed(Agent),[at(Agent,Outside)]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',295).

 /*  at(Agent, Outside) ->
       dressed(Agent).
 */
if loc_at(Agent, Outside)then dressed(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',295).

 /*  reactive_rule([loc_at(Agent,Outside)],
   	      [dressed(Agent)]).
 */

 /*  reactive_rule([loc_at(Agent,Outside)],
   	      [dressed(Agent)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',295).

 /*  not(holds_at(at(Agent, Outside), Time)) :-
       not(holds_at(dressed(Agent), Time)).
 */
 %  pl=axiom(not(at(Agent,Outside)),[not(dressed(Agent))]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',295).

 /*  not(dressed(Agent)) ->
       not(at(Agent, Outside)).
 */
if not dressed(Agent)then not loc_at(Agent, Outside).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',295).

 /*  reactive_rule([not(dressed(Agent))],
   	      [not(loc_at(Agent,Outside))]).
 */

 /*  reactive_rule([not(dressed(Agent))],
   	      [not(loc_at(Agent,Outside))]).
 */


%; room looks out onto outside.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',300).
% function LookOutOnto(room): outside
 %  blue=function(lookOutOnto(room)).
 %  function(lookOutOnto(room)).
functions([lookOutOnto/1]).
 %  functions([lookOutOnto/1]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',300).
mpred_prop(lookOutOnto(room),function).
 %  mpred_prop(lookOutOnto(room),function).
 %  blue=predicate(lookOutOntoPred(room,outside)).
 %  predicate(lookOutOntoPred(room,outside)).
predicates([lookOutOntoPred/2]).
 %  predicates([lookOutOntoPred/2]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',300).
mpred_prop(lookOutOntoPred(room,outside),predicate).
 %  mpred_prop(lookOutOntoPred(room,outside),predicate).
 %  pl=axiom(functional_predicate(lookOutOnto,lookOutOntoPred),[]).
functional_predicate(lookOutOnto,lookOutOntoPred).
 %  functional_predicate(lookOutOnto,lookOutOntoPred).
 %  pl=axiom(function_argtypes(lookOutOntoPred,lookOutOnto(room),outside),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',300).
function_argtypes(lookOutOntoPred,lookOutOnto(room),outside).
 %  function_argtypes(lookOutOntoPred,lookOutOnto(room),outside).
resultIsa(lookOutOnto,outside).
 %  resultIsa(lookOutOnto,outside).
%; location1 is adjacent to location2.

% predicate Adjacent(location,location)
 %  blue=predicate(adjacent(location,location)).
 %  predicate(adjacent(location,location)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',302).
predicates([adjacent/2]).
 %  predicates([adjacent/2]).
mpred_prop(adjacent(location,location),predicate).
 %  mpred_prop(adjacent(location,location),predicate).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',305).
%; A state constraint says that
%; two locations are adjacent if and only if
%; they have a portal in common:
% [location1,location2]
 
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',308).
% Adjacent(location1,location2) <->
% {portal}% 
% (Side1(portal)=location1 &
%  Side2(portal)=location2) |
% (Side2(portal)=location1 &
%  Side1(portal)=location2).
 %  clausify_pnf=exists([Portal], <->(adjacent(Location1, Location2),  (side1Pred(Portal, Location1), side2Pred(Portal, Location2);side2Pred(Portal, Location1), side1Pred(Portal, Location2)))).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',308).

 /*  adjacent(Location1, Location2) :-
       (   side1Pred(Exists_Portal, Location1),
           side2Pred(Exists_Portal, Location2)
       ;   side2Pred(Exists_Portal, Location1),
           side1Pred(Exists_Portal, Location2)
       ),
       some(Exists_Portal, '$kolem_Fn_61'(Location1, Location2)).
 */
 %  pl=axiom(adjacent(Location1, Location2), [(side1Pred(Exists_Portal, Location1), side2Pred(Exists_Portal, Location2);side2Pred(Exists_Portal, Location1), side1Pred(Exists_Portal, Location2)), some(Exists_Portal, '$kolem_Fn_61'(Location1, Location2))]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',308).

 /*  (   (   side1Pred(Exists_Portal, Location1),
           side2Pred(Exists_Portal, Location2)
       ;   side2Pred(Exists_Portal, Location1),
           side1Pred(Exists_Portal, Location2)
       ),
       some(Exists_Portal, '$kolem_Fn_61'(Location1, Location2))
   ->  adjacent(Location1, Location2)
   ).
 */
if (side1Pred(Exists_Portal, Location1), side2Pred(Exists_Portal, Location2);side2Pred(Exists_Portal, Location1), side1Pred(Exists_Portal, Location2)), some(Exists_Portal, '$kolem_Fn_61'(Location1, Location2))then adjacent(Location1, Location2).
 %  reactive_rule([(side1Pred(Exists_Portal, Location1), side2Pred(Exists_Portal, Location2);side2Pred(Exists_Portal, Location1), side1Pred(Exists_Portal, Location2)), some(Exists_Portal, '$kolem_Fn_61'(Location1, Location2))], [adjacent(Location1, Location2)]).
 %  reactive_rule([(side1Pred(Exists_Portal, Location1), side2Pred(Exists_Portal, Location2);side2Pred(Exists_Portal, Location1), side1Pred(Exists_Portal, Location2)), some(Exists_Portal, '$kolem_Fn_61'(Location1, Location2))], [adjacent(Location1, Location2)]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',308).

 /*  not(side1Pred(Exists_Portal, Location1)) :-
       side2Pred(Exists_Portal, Location2),
       not(adjacent(Location1, Location2)),
       some(Exists_Portal, '$kolem_Fn_61'(Location1, Location2)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',308).

 /*  pl=axiom(not(side1Pred(Exists_Portal,Location1)),
         [ side2Pred(Exists_Portal,Location2),
   	not(adjacent(Location1,Location2)),
   	some(Exists_Portal,
   	     '$kolem_Fn_61'(Location1,Location2))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',308).

 /*  (   side2Pred(Exists_Portal, Location2),
       not(adjacent(Location1, Location2)),
       some(Exists_Portal, '$kolem_Fn_61'(Location1, Location2))
   ->  not(side1Pred(Exists_Portal, Location1))
   ).
 */
if side2Pred(Exists_Portal, Location2), not adjacent(Location1, Location2), some(Exists_Portal, '$kolem_Fn_61'(Location1, Location2))then not side1Pred(Exists_Portal, Location1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',308).

 /*  reactive_rule([ side2Pred(Exists_Portal,Location2),
   		not(adjacent(Location1,Location2)),
   		some(Exists_Portal,
   		     '$kolem_Fn_61'(Location1,Location2))
   	      ],
   	      [not(side1Pred(Exists_Portal,Location1))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',308).

 /*  reactive_rule([ side2Pred(Exists_Portal,Location2),
   		not(adjacent(Location1,Location2)),
   		some(Exists_Portal,
   		     '$kolem_Fn_61'(Location1,Location2))
   	      ],
   	      [not(side1Pred(Exists_Portal,Location1))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',308).

 /*  not(side2Pred(Exists_Portal, Location2)) :-
       side1Pred(Exists_Portal, Location1),
       not(adjacent(Location1, Location2)),
       some(Exists_Portal, '$kolem_Fn_61'(Location1, Location2)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',308).

 /*  pl=axiom(not(side2Pred(Exists_Portal,Location2)),
         [ side1Pred(Exists_Portal,Location1),
   	not(adjacent(Location1,Location2)),
   	some(Exists_Portal,
   	     '$kolem_Fn_61'(Location1,Location2))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',308).

 /*  (   side1Pred(Exists_Portal, Location1),
       not(adjacent(Location1, Location2)),
       some(Exists_Portal, '$kolem_Fn_61'(Location1, Location2))
   ->  not(side2Pred(Exists_Portal, Location2))
   ).
 */
if side1Pred(Exists_Portal, Location1), not adjacent(Location1, Location2), some(Exists_Portal, '$kolem_Fn_61'(Location1, Location2))then not side2Pred(Exists_Portal, Location2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',308).

 /*  reactive_rule([ side1Pred(Exists_Portal,Location1),
   		not(adjacent(Location1,Location2)),
   		some(Exists_Portal,
   		     '$kolem_Fn_61'(Location1,Location2))
   	      ],
   	      [not(side2Pred(Exists_Portal,Location2))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',308).

 /*  reactive_rule([ side1Pred(Exists_Portal,Location1),
   		not(adjacent(Location1,Location2)),
   		some(Exists_Portal,
   		     '$kolem_Fn_61'(Location1,Location2))
   	      ],
   	      [not(side2Pred(Exists_Portal,Location2))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',308).

 /*  not(side2Pred(Exists_Portal, Location1)) :-
       side1Pred(Exists_Portal, Location2),
       not(adjacent(Location1, Location2)),
       some(Exists_Portal, '$kolem_Fn_61'(Location1, Location2)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',308).

 /*  pl=axiom(not(side2Pred(Exists_Portal,Location1)),
         [ side1Pred(Exists_Portal,Location2),
   	not(adjacent(Location1,Location2)),
   	some(Exists_Portal,
   	     '$kolem_Fn_61'(Location1,Location2))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',308).

 /*  (   side1Pred(Exists_Portal, Location2),
       not(adjacent(Location1, Location2)),
       some(Exists_Portal, '$kolem_Fn_61'(Location1, Location2))
   ->  not(side2Pred(Exists_Portal, Location1))
   ).
 */
if side1Pred(Exists_Portal, Location2), not adjacent(Location1, Location2), some(Exists_Portal, '$kolem_Fn_61'(Location1, Location2))then not side2Pred(Exists_Portal, Location1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',308).

 /*  reactive_rule([ side1Pred(Exists_Portal,Location2),
   		not(adjacent(Location1,Location2)),
   		some(Exists_Portal,
   		     '$kolem_Fn_61'(Location1,Location2))
   	      ],
   	      [not(side2Pred(Exists_Portal,Location1))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',308).

 /*  reactive_rule([ side1Pred(Exists_Portal,Location2),
   		not(adjacent(Location1,Location2)),
   		some(Exists_Portal,
   		     '$kolem_Fn_61'(Location1,Location2))
   	      ],
   	      [not(side2Pred(Exists_Portal,Location1))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',308).

 /*  not(side1Pred(Exists_Portal, Location2)) :-
       side2Pred(Exists_Portal, Location1),
       not(adjacent(Location1, Location2)),
       some(Exists_Portal, '$kolem_Fn_61'(Location1, Location2)).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',308).

 /*  pl=axiom(not(side1Pred(Exists_Portal,Location2)),
         [ side2Pred(Exists_Portal,Location1),
   	not(adjacent(Location1,Location2)),
   	some(Exists_Portal,
   	     '$kolem_Fn_61'(Location1,Location2))
         ]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',308).

 /*  (   side2Pred(Exists_Portal, Location1),
       not(adjacent(Location1, Location2)),
       some(Exists_Portal, '$kolem_Fn_61'(Location1, Location2))
   ->  not(side1Pred(Exists_Portal, Location2))
   ).
 */
if side2Pred(Exists_Portal, Location1), not adjacent(Location1, Location2), some(Exists_Portal, '$kolem_Fn_61'(Location1, Location2))then not side1Pred(Exists_Portal, Location2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',308).

 /*  reactive_rule([ side2Pred(Exists_Portal,Location1),
   		not(adjacent(Location1,Location2)),
   		some(Exists_Portal,
   		     '$kolem_Fn_61'(Location1,Location2))
   	      ],
   	      [not(side1Pred(Exists_Portal,Location2))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',308).

 /*  reactive_rule([ side2Pred(Exists_Portal,Location1),
   		not(adjacent(Location1,Location2)),
   		some(Exists_Portal,
   		     '$kolem_Fn_61'(Location1,Location2))
   	      ],
   	      [not(side1Pred(Exists_Portal,Location2))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',308).

 /*  not(adjacent(Location1, Location2)) :-
       (   not(side1Pred(Exists_Portal, Location1))
       ;   not(side2Pred(Exists_Portal, Location2))
       ),
       (   not(side2Pred(Exists_Portal, Location1))
       ;   not(side1Pred(Exists_Portal, Location2))
       ),
       some(Exists_Portal, '$kolem_Fn_61'(Location1, Location2)).
 */
 %   pl=axiom(not(adjacent(Location1, Location2)), [(not(side1Pred(Exists_Portal, Location1));not(side2Pred(Exists_Portal, Location2))),  (not(side2Pred(Exists_Portal, Location1));not(side1Pred(Exists_Portal, Location2))), some(Exists_Portal, '$kolem_Fn_61'(Location1, Location2))]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',308).

 /*  (   (   not(side1Pred(Exists_Portal, Location1))
       ;   not(side2Pred(Exists_Portal, Location2))
       ),
       (   not(side2Pred(Exists_Portal, Location1))
       ;   not(side1Pred(Exists_Portal, Location2))
       ),
       some(Exists_Portal, '$kolem_Fn_61'(Location1, Location2))
   ->  not(adjacent(Location1, Location2))
   ).
 */
if (not side1Pred(Exists_Portal, Location1);not side2Pred(Exists_Portal, Location2)), (not side2Pred(Exists_Portal, Location1);not side1Pred(Exists_Portal, Location2)), some(Exists_Portal, '$kolem_Fn_61'(Location1, Location2))then not adjacent(Location1, Location2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',308).

 /*   reactive_rule([  (not(side1Pred(Exists_Portal, Location1));not(side2Pred(Exists_Portal, Location2))),
                       (not(side2Pred(Exists_Portal, Location1));not(side1Pred(Exists_Portal, Location2))),
                      some(Exists_Portal,
                           '$kolem_Fn_61'(Location1, Location2))
                    ],
                    [not(adjacent(Location1, Location2))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',308).

 /*   reactive_rule([  (not(side1Pred(Exists_Portal, Location1));not(side2Pred(Exists_Portal, Location2))),
                       (not(side2Pred(Exists_Portal, Location1));not(side1Pred(Exists_Portal, Location2))),
                      some(Exists_Portal,
                           '$kolem_Fn_61'(Location1, Location2))
                    ],
                    [not(adjacent(Location1, Location2))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',308).

 /*  side1Pred(Exists_Portal, Location1) :-
       (   not(side2Pred(Exists_Portal, Location1))
       ;   not(side1Pred(Exists_Portal, Location2))
       ),
       adjacent(Location1, Location2),
       some(Exists_Portal, '$kolem_Fn_61'(Location1, Location2)).
 */
 %   pl=axiom(side1Pred(Exists_Portal, Location1), [(not(side2Pred(Exists_Portal, Location1));not(side1Pred(Exists_Portal, Location2))), adjacent(Location1, Location2), some(Exists_Portal, '$kolem_Fn_61'(Location1, Location2))]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',308).

 /*  (   (   not(side2Pred(Exists_Portal, Location1))
       ;   not(side1Pred(Exists_Portal, Location2))
       ),
       adjacent(Location1, Location2),
       some(Exists_Portal, '$kolem_Fn_61'(Location1, Location2))
   ->  side1Pred(Exists_Portal, Location1)
   ).
 */
if (not side2Pred(Exists_Portal, Location1);not side1Pred(Exists_Portal, Location2)), adjacent(Location1, Location2), some(Exists_Portal, '$kolem_Fn_61'(Location1, Location2))then side1Pred(Exists_Portal, Location1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',308).

 /*   reactive_rule([  (not(side2Pred(Exists_Portal, Location1));not(side1Pred(Exists_Portal, Location2))),
                      adjacent(Location1, Location2),
                      some(Exists_Portal,
                           '$kolem_Fn_61'(Location1, Location2))
                    ],
                    [side1Pred(Exists_Portal, Location1)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',308).

 /*   reactive_rule([  (not(side2Pred(Exists_Portal, Location1));not(side1Pred(Exists_Portal, Location2))),
                      adjacent(Location1, Location2),
                      some(Exists_Portal,
                           '$kolem_Fn_61'(Location1, Location2))
                    ],
                    [side1Pred(Exists_Portal, Location1)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',308).

 /*  side2Pred(Exists_Portal, Location2) :-
       (   not(side2Pred(Exists_Portal, Location1))
       ;   not(side1Pred(Exists_Portal, Location2))
       ),
       adjacent(Location1, Location2),
       some(Exists_Portal, '$kolem_Fn_61'(Location1, Location2)).
 */
 %   pl=axiom(side2Pred(Exists_Portal, Location2), [(not(side2Pred(Exists_Portal, Location1));not(side1Pred(Exists_Portal, Location2))), adjacent(Location1, Location2), some(Exists_Portal, '$kolem_Fn_61'(Location1, Location2))]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',308).

 /*  (   (   not(side2Pred(Exists_Portal, Location1))
       ;   not(side1Pred(Exists_Portal, Location2))
       ),
       adjacent(Location1, Location2),
       some(Exists_Portal, '$kolem_Fn_61'(Location1, Location2))
   ->  side2Pred(Exists_Portal, Location2)
   ).
 */
if (not side2Pred(Exists_Portal, Location1);not side1Pred(Exists_Portal, Location2)), adjacent(Location1, Location2), some(Exists_Portal, '$kolem_Fn_61'(Location1, Location2))then side2Pred(Exists_Portal, Location2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',308).

 /*   reactive_rule([  (not(side2Pred(Exists_Portal, Location1));not(side1Pred(Exists_Portal, Location2))),
                      adjacent(Location1, Location2),
                      some(Exists_Portal,
                           '$kolem_Fn_61'(Location1, Location2))
                    ],
                    [side2Pred(Exists_Portal, Location2)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',308).

 /*   reactive_rule([  (not(side2Pred(Exists_Portal, Location1));not(side1Pred(Exists_Portal, Location2))),
                      adjacent(Location1, Location2),
                      some(Exists_Portal,
                           '$kolem_Fn_61'(Location1, Location2))
                    ],
                    [side2Pred(Exists_Portal, Location2)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',308).

 /*  side2Pred(Exists_Portal, Location1) :-
       (   not(side1Pred(Exists_Portal, Location1))
       ;   not(side2Pred(Exists_Portal, Location2))
       ),
       adjacent(Location1, Location2),
       some(Exists_Portal, '$kolem_Fn_61'(Location1, Location2)).
 */
 %   pl=axiom(side2Pred(Exists_Portal, Location1), [(not(side1Pred(Exists_Portal, Location1));not(side2Pred(Exists_Portal, Location2))), adjacent(Location1, Location2), some(Exists_Portal, '$kolem_Fn_61'(Location1, Location2))]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',308).

 /*  (   (   not(side1Pred(Exists_Portal, Location1))
       ;   not(side2Pred(Exists_Portal, Location2))
       ),
       adjacent(Location1, Location2),
       some(Exists_Portal, '$kolem_Fn_61'(Location1, Location2))
   ->  side2Pred(Exists_Portal, Location1)
   ).
 */
if (not side1Pred(Exists_Portal, Location1);not side2Pred(Exists_Portal, Location2)), adjacent(Location1, Location2), some(Exists_Portal, '$kolem_Fn_61'(Location1, Location2))then side2Pred(Exists_Portal, Location1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',308).

 /*   reactive_rule([  (not(side1Pred(Exists_Portal, Location1));not(side2Pred(Exists_Portal, Location2))),
                      adjacent(Location1, Location2),
                      some(Exists_Portal,
                           '$kolem_Fn_61'(Location1, Location2))
                    ],
                    [side2Pred(Exists_Portal, Location1)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',308).

 /*   reactive_rule([  (not(side1Pred(Exists_Portal, Location1));not(side2Pred(Exists_Portal, Location2))),
                      adjacent(Location1, Location2),
                      some(Exists_Portal,
                           '$kolem_Fn_61'(Location1, Location2))
                    ],
                    [side2Pred(Exists_Portal, Location1)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',308).

 /*  side1Pred(Exists_Portal, Location2) :-
       (   not(side1Pred(Exists_Portal, Location1))
       ;   not(side2Pred(Exists_Portal, Location2))
       ),
       adjacent(Location1, Location2),
       some(Exists_Portal, '$kolem_Fn_61'(Location1, Location2)).
 */
 %   pl=axiom(side1Pred(Exists_Portal, Location2), [(not(side1Pred(Exists_Portal, Location1));not(side2Pred(Exists_Portal, Location2))), adjacent(Location1, Location2), some(Exists_Portal, '$kolem_Fn_61'(Location1, Location2))]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',308).

 /*  (   (   not(side1Pred(Exists_Portal, Location1))
       ;   not(side2Pred(Exists_Portal, Location2))
       ),
       adjacent(Location1, Location2),
       some(Exists_Portal, '$kolem_Fn_61'(Location1, Location2))
   ->  side1Pred(Exists_Portal, Location2)
   ).
 */
if (not side1Pred(Exists_Portal, Location1);not side2Pred(Exists_Portal, Location2)), adjacent(Location1, Location2), some(Exists_Portal, '$kolem_Fn_61'(Location1, Location2))then side1Pred(Exists_Portal, Location2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',308).

 /*   reactive_rule([  (not(side1Pred(Exists_Portal, Location1));not(side2Pred(Exists_Portal, Location2))),
                      adjacent(Location1, Location2),
                      some(Exists_Portal,
                           '$kolem_Fn_61'(Location1, Location2))
                    ],
                    [side1Pred(Exists_Portal, Location2)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',308).

 /*   reactive_rule([  (not(side1Pred(Exists_Portal, Location1));not(side2Pred(Exists_Portal, Location2))),
                      adjacent(Location1, Location2),
                      some(Exists_Portal,
                           '$kolem_Fn_61'(Location1, Location2))
                    ],
                    [side1Pred(Exists_Portal, Location2)]).
 */


%; The ground of outside is ground.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',316).
% function GroundOf(outside): ground
 %  blue=function(groundOf(outside)).
 %  function(groundOf(outside)).
functions([groundOf/1]).
 %  functions([groundOf/1]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',316).
mpred_prop(groundOf(outside),function).
 %  mpred_prop(groundOf(outside),function).
 %  blue=predicate(ground(outside,ground)).
 %  predicate(ground(outside,ground)).
predicates([ground/2]).
 %  predicates([ground/2]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',316).
mpred_prop(ground(outside,ground),predicate).
 %  mpred_prop(ground(outside,ground),predicate).
 %  pl=axiom(functional_predicate(groundOf,ground),[]).
functional_predicate(groundOf,ground).
 %  functional_predicate(groundOf,ground).
 %  pl=axiom(function_argtypes(ground,groundOf(outside),ground),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',316).
function_argtypes(ground,groundOf(outside),ground).
 %  function_argtypes(ground,groundOf(outside),ground).
resultIsa(groundOf,ground).
 %  resultIsa(groundOf,ground).
%; The sky of outside is sky.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',318).
% function SkyOf(outside): sky
 %  blue=function(skyOf(outside)).
 %  function(skyOf(outside)).
functions([skyOf/1]).
 %  functions([skyOf/1]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',318).
mpred_prop(skyOf(outside),function).
 %  mpred_prop(skyOf(outside),function).
 %  blue=predicate(sky(outside,sky)).
 %  predicate(sky(outside,sky)).
predicates([sky/2]).
 %  predicates([sky/2]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',318).
mpred_prop(sky(outside,sky),predicate).
 %  mpred_prop(sky(outside,sky),predicate).
 %  pl=axiom(functional_predicate(skyOf,sky),[]).
functional_predicate(skyOf,sky).
 %  functional_predicate(skyOf,sky).
 %  pl=axiom(function_argtypes(sky,skyOf(outside),sky),[]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',318).
function_argtypes(sky,skyOf(outside),sky).
 %  function_argtypes(sky,skyOf(outside),sky).
resultIsa(skyOf,sky).
 %  resultIsa(skyOf,sky).
 %; State constraints fix the location of ground and sky:
% [outside,ground,time]
% GroundOf(outside) = ground ->
% HoldsAt(At(ground,outside),time).
 %  clausify_pnf=(ground(Outside, Ground)->holds_at(at(Ground, Outside), Time)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',322).

 /*  holds_at(at(Ground, Outside), Time) :-
       ground(Outside, Ground).
 */

 /*  fix_axiom_head(Time) ->
       [ holds_at(at(Ground, Outside), Time),
          (->),
         at(Ground, Outside)
       ].
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',322).

 /*  pl=axiom(at(Ground,Outside),
         [ground(Outside,Ground)]).
 */

 /*  ground(Outside, Ground) ->
       at(Ground, Outside).
 */
if ground(Outside, Ground)then loc_at(Ground, Outside).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',322).

 /*  reactive_rule([ground(Outside,Ground)],
   	      [loc_at(Ground,Outside)]).
 */

 /*  reactive_rule([ground(Outside,Ground)],
   	      [loc_at(Ground,Outside)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',322).

 /*  not(ground(Outside, Ground)) :-
       not(holds_at(at(Ground, Outside), Time)).
 */

 /*  pl=axiom(not(ground(Outside,Ground)),
         [not(at(Ground,Outside))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',322).

 /*  not(at(Ground, Outside)) ->
       not(ground(Outside, Ground)).
 */
if not loc_at(Ground, Outside)then not ground(Outside, Ground).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',322).

 /*  reactive_rule([not(loc_at(Ground,Outside))],
   	      [not(ground(Outside,Ground))]).
 */

 /*  reactive_rule([not(loc_at(Ground,Outside))],
   	      [not(ground(Outside,Ground))]).
 */


% [outside,sky,time]
% SkyOf(outside) = sky ->
% HoldsAt(At(sky,outside),time).
 %  clausify_pnf=(sky(Outside, Sky)->holds_at(at(Sky, Outside), Time)).

 /*  holds_at(at(Sky, Outside), Time) :-
       sky(Outside, Sky).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',327).

 /*  fix_axiom_head(Time) ->
       [ holds_at(at(Sky, Outside), Time),
          (->),
         at(Sky, Outside)
       ].
 */
 %  pl=axiom(at(Sky,Outside),[sky(Outside,Sky)]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',327).

 /*  sky(Outside, Sky) ->
       at(Sky, Outside).
 */
if sky(Outside, Sky)then loc_at(Sky, Outside).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',327).

 /*  reactive_rule([sky(Outside,Sky)],
   	      [loc_at(Sky,Outside)]).
 */

 /*  reactive_rule([sky(Outside,Sky)],
   	      [loc_at(Sky,Outside)]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',327).

 /*  not(sky(Outside, Sky)) :-
       not(holds_at(at(Sky, Outside), Time)).
 */

 /*  pl=axiom(not(sky(Outside,Sky)),
         [not(at(Sky,Outside))]).
 */
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',327).

 /*  not(at(Sky, Outside)) ->
       not(sky(Outside, Sky)).
 */
if not loc_at(Sky, Outside)then not sky(Outside, Sky).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',327).

 /*  reactive_rule([not(loc_at(Sky,Outside))],
   	      [not(sky(Outside,Sky))]).
 */

 /*  reactive_rule([not(loc_at(Sky,Outside))],
   	      [not(sky(Outside,Sky))]).
 */


%; End of file.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',329).
% translate: ending  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e.lps 
