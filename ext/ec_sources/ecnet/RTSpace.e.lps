:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RidingInACarriage.e',185).
% translate: unskipped  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e.lps 
:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(lps).
% translate: begining  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e.lps 
% Thu, 08 Oct 2020 21:37:01 GMT File: <stream>(0x55894c2e3600)%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; RTSpace: room-scale topological space
%;
%; We use topological and metric representations of space,
%; at two levels of granularity---room-scale and object-scale.
%; The RTSpace representation deals with topological space at
%; the scale of rooms and outdoor locations.
%; This representation of space consists of locations, which
%; are connected by portals. There are two types of locations:
%; rooms and outside areas (outsides).
%;
%; object is at location.

% fluent At(object,location)
% fluent(
%    at(object,location)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',22).
fluents([loc_at/2]).
% mpred_prop(
%    at(object,location), 
%    fluent).
mpred_prop(loc_at(object,location),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',24).
% manualrelease At
% manualrelease(at).
manualrelease(at).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',26).
% [object1,location,time]
% (% {object2} PartOf(object1,object2)) ->
% ReleasedAt(At(object1,location),time).
% '->'(
%    ','(
%       partOf(Object1,Exists_Object2), 
%       some(
%          Exists_Object2, 
%          '$kolem_Fn_729'(Object1,Location,Time))), 
%    releasedAt(
%       at(Object1,Location), 
%       Time)).
if partOf(Object1, Exists_Object2), some(Exists_Object2, '$kolem_Fn_729'(Object1, Location, Time))then releasedAt(loc_at(Object1, Location), Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',26).

 /*  reactive_rule([ partOf(Object1,Exists_Object2),
   		some(Exists_Object2,
   		     '$kolem_Fn_729'(Object1,
   				     Location,
   				     Time))
   	      ],
   	      [ releasedAt(loc_at(Object1,Location),
   			   Time)
   	      ]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       not(
%          releasedAt(
%             at(Object1,Location), 
%             Time)), 
%       some(
%          Exists_Object2, 
%          '$kolem_Fn_729'(Object1,Location,Time))), 
%    not(
%       partOf(Object1,Exists_Object2))).
if not releasedAt(loc_at(Object1, Location), Time), some(Exists_Object2, '$kolem_Fn_729'(Object1, Location, Time))then not partOf(Object1, Exists_Object2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',26).

 /*  reactive_rule([ not(releasedAt(loc_at(Object1,Location),
   			       Time)),
   		some(Exists_Object2,
   		     '$kolem_Fn_729'(Object1,
   				     Location,
   				     Time))
   	      ],
   	      [not(partOf(Object1,Exists_Object2))]).
 */
 %  "% =================================".


%; A state constraint says that an object
%; is at one location at a time:
% [object,location1,location2,time]
% HoldsAt(At(object,location1),time) &
% HoldsAt(At(object,location2),time) ->
% location1=location2.
% '->'(
%    ','(
%       at(Object,Location2), 
%       not(
%          equals(Location1,Location2))), 
%    not(
%       at(Object,Location1))).
if loc_at(Object, Location2), not equals(Location1, Location2)then not loc_at(Object, Location1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',32).

 /*  reactive_rule([ loc_at(Object,Location2),
   		not(equals(Location1,Location2))
   	      ],
   	      [not(loc_at(Object,Location1))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       at(Object,Location1), 
%       not(
%          equals(Location2,Location1))), 
%    not(
%       at(Object,Location2))).
if loc_at(Object, Location1), not equals(Location2, Location1)then not loc_at(Object, Location2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',32).

 /*  reactive_rule([ loc_at(Object,Location1),
   		not(equals(Location2,Location1))
   	      ],
   	      [not(loc_at(Object,Location2))]).
 */
 %  "% =================================".


%; connectivity
%; Side one of portal is location.

% function Side1(portal): location
% function(
%    side1(portal)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',39).
functions([side1/1]).
% mpred_prop(
%    side1(portal), 
%    function).
mpred_prop(side1(portal),function).
% predicate(
%    side1Pred(portal,location)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',39).
predicates([side1Pred/2]).
% mpred_prop(
%    side1Pred(portal,location), 
%    predicate).
mpred_prop(side1Pred(portal,location),predicate).
% functional_predicate(side1,side1Pred).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',39).
functional_predicate(side1,side1Pred).
% function_argtypes(
%    side1Pred, 
%    side1(portal), 
%    location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',39).
function_argtypes(side1Pred,side1(portal),location).
% resultIsa(side1,location).
resultIsa(side1,location).
%; Side two of portal is location.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',42).
% function Side2(portal): location
% function(
%    side2(portal)).
functions([side2/1]).
% mpred_prop(
%    side2(portal), 
%    function).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',42).
mpred_prop(side2(portal),function).
% predicate(
%    side2Pred(portal,location)).
predicates([side2Pred/2]).
% mpred_prop(
%    side2Pred(portal,location), 
%    predicate).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',42).
mpred_prop(side2Pred(portal,location),predicate).
% functional_predicate(side2,side2Pred).
functional_predicate(side2,side2Pred).
% function_argtypes(
%    side2Pred, 
%    side2(portal), 
%    location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',42).
function_argtypes(side2Pred,side2(portal),location).
% resultIsa(side2,location).
resultIsa(side2,location).
%; The building of room is building.

% function BuildingOf(room): building
% function(
%    buildingOf(room)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',44).
functions([buildingOf/1]).
% mpred_prop(
%    buildingOf(room), 
%    function).
mpred_prop(buildingOf(room),function).
% predicate(
%    building(room,building)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',44).
predicates([building/2]).
% mpred_prop(
%    building(room,building), 
%    predicate).
mpred_prop(building(room,building),predicate).
% functional_predicate(buildingOf,building).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',44).
functional_predicate(buildingOf,building).
% function_argtypes(
%    building, 
%    buildingOf(room), 
%    building).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',44).
function_argtypes(building,buildingOf(room),building).
% resultIsa(buildingOf,building).
resultIsa(buildingOf,building).
%; object is at a location that has portal.

% fluent NearPortal(object,portal)
% fluent(
%    nearPortal(object,portal)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',47).
fluents([nearPortal/2]).
% mpred_prop(
%    nearPortal(object,portal), 
%    fluent).
mpred_prop(nearPortal(object,portal),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',49).
% noninertial NearPortal
% noninertial(nearPortal).
noninertial(nearPortal).
%; A state constraint says that an object is near
%; a portal if and only if there is a location such that
%; the object is at the location and one of the sides
%; of the portal is the location:
% [object,portal,time]
% HoldsAt(NearPortal(object,portal),time) <->
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',55).
% {location}% 
%  (Side1(portal)=location|
%   Side2(portal)=location) &
%  HoldsAt(At(object,location),time).
% '->'(
%    ','(
%       ';'(
%          ','(
%             not(
%                side1Pred(Portal,Exists_Location)), 
%             not(
%                side2Pred(Portal,Exists_Location))), 
%          not(
%             at(Object,Exists_Location))), 
%       some(
%          Exists_Location, 
%          '$kolem_Fn_730'(Object,Portal,Time))), 
%    not(
%       nearPortal(Object,Portal))).
if (not side1Pred(Portal, Exists_Location), not side2Pred(Portal, Exists_Location);not loc_at(Object, Exists_Location)), some(Exists_Location, '$kolem_Fn_730'(Object, Portal, Time))then not nearPortal(Object, Portal).
 %  reactive_rule([(not(side1Pred(Portal, Exists_Location)), not(side2Pred(Portal, Exists_Location));not(loc_at(Object, Exists_Location))), some(Exists_Location, '$kolem_Fn_730'(Object, Portal, Time))], [not(nearPortal(Object, Portal))]).
 %  "% =================================".
% '->'(
%    ','(
%       not(
%          side2Pred(Portal,Exists_Location)), 
%       ','(
%          nearPortal(Object,Portal), 
%          some(
%             Exists_Location, 
%             '$kolem_Fn_730'(Object,Portal,Time)))), 
%    side1Pred(Portal,Exists_Location)).
if not side2Pred(Portal, Exists_Location), nearPortal(Object, Portal), some(Exists_Location, '$kolem_Fn_730'(Object, Portal, Time))then side1Pred(Portal, Exists_Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',57).

 /*  reactive_rule([ not(side2Pred(Portal,Exists_Location)),
   		nearPortal(Object,Portal),
   		some(Exists_Location,
   		     '$kolem_Fn_730'(Object,
   				     Portal,
   				     Time))
   	      ],
   	      [side1Pred(Portal,Exists_Location)]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       not(
%          side1Pred(Portal,Exists_Location)), 
%       ','(
%          nearPortal(Object,Portal), 
%          some(
%             Exists_Location, 
%             '$kolem_Fn_730'(Object,Portal,Time)))), 
%    side2Pred(Portal,Exists_Location)).
if not side1Pred(Portal, Exists_Location), nearPortal(Object, Portal), some(Exists_Location, '$kolem_Fn_730'(Object, Portal, Time))then side2Pred(Portal, Exists_Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',57).

 /*  reactive_rule([ not(side1Pred(Portal,Exists_Location)),
   		nearPortal(Object,Portal),
   		some(Exists_Location,
   		     '$kolem_Fn_730'(Object,
   				     Portal,
   				     Time))
   	      ],
   	      [side2Pred(Portal,Exists_Location)]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       nearPortal(Object,Portal), 
%       some(
%          Exists_Location, 
%          '$kolem_Fn_730'(Object,Portal,Time))), 
%    at(Object,Exists_Location)).
if nearPortal(Object, Portal), some(Exists_Location, '$kolem_Fn_730'(Object, Portal, Time))then loc_at(Object, Exists_Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',57).

 /*  reactive_rule([ nearPortal(Object,Portal),
   		some(Exists_Location,
   		     '$kolem_Fn_730'(Object,
   				     Portal,
   				     Time))
   	      ],
   	      [loc_at(Object,Exists_Location)]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       at(Object,Exists_Location), 
%       ','(
%          ';'(
%             side1Pred(Portal,Exists_Location), 
%             side2Pred(Portal,Exists_Location)), 
%          some(
%             Exists_Location, 
%             '$kolem_Fn_730'(Object,Portal,Time)))), 
%    nearPortal(Object,Portal)).
if loc_at(Object, Exists_Location), (side1Pred(Portal, Exists_Location);side2Pred(Portal, Exists_Location)), some(Exists_Location, '$kolem_Fn_730'(Object, Portal, Time))then nearPortal(Object, Portal).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',57).

 /*   reactive_rule([ loc_at(Object, Exists_Location),
                       (side1Pred(Portal, Exists_Location);side2Pred(Portal, Exists_Location)),
                      some(Exists_Location,
                           '$kolem_Fn_730'(Object, Portal, Time))
                    ],
                    [nearPortal(Object, Portal)]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       ';'(
%          side1Pred(Portal,Exists_Location), 
%          side2Pred(Portal,Exists_Location)), 
%       ','(
%          not(
%             nearPortal(Object,Portal)), 
%          some(
%             Exists_Location, 
%             '$kolem_Fn_730'(Object,Portal,Time)))), 
%    not(
%       at(Object,Exists_Location))).
if (side1Pred(Portal, Exists_Location);side2Pred(Portal, Exists_Location)), not nearPortal(Object, Portal), some(Exists_Location, '$kolem_Fn_730'(Object, Portal, Time))then not loc_at(Object, Exists_Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',57).

 /*   reactive_rule([  (side1Pred(Portal, Exists_Location);side2Pred(Portal, Exists_Location)),
                      not(nearPortal(Object, Portal)),
                      some(Exists_Location,
                           '$kolem_Fn_730'(Object, Portal, Time))
                    ],
                    [not(loc_at(Object, Exists_Location))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       at(Object,Exists_Location), 
%       ','(
%          not(
%             nearPortal(Object,Portal)), 
%          some(
%             Exists_Location, 
%             '$kolem_Fn_730'(Object,Portal,Time)))), 
%    not(
%       side1Pred(Portal,Exists_Location))).
if loc_at(Object, Exists_Location), not nearPortal(Object, Portal), some(Exists_Location, '$kolem_Fn_730'(Object, Portal, Time))then not side1Pred(Portal, Exists_Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',57).

 /*  reactive_rule([ loc_at(Object,Exists_Location),
   		not(nearPortal(Object,Portal)),
   		some(Exists_Location,
   		     '$kolem_Fn_730'(Object,
   				     Portal,
   				     Time))
   	      ],
   	      [not(side1Pred(Portal,Exists_Location))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       at(Object,Exists_Location), 
%       ','(
%          not(
%             nearPortal(Object,Portal)), 
%          some(
%             Exists_Location, 
%             '$kolem_Fn_730'(Object,Portal,Time)))), 
%    not(
%       side2Pred(Portal,Exists_Location))).
if loc_at(Object, Exists_Location), not nearPortal(Object, Portal), some(Exists_Location, '$kolem_Fn_730'(Object, Portal, Time))then not side2Pred(Portal, Exists_Location).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',57).

 /*  reactive_rule([ loc_at(Object,Exists_Location),
   		not(nearPortal(Object,Portal)),
   		some(Exists_Location,
   		     '$kolem_Fn_730'(Object,
   				     Portal,
   				     Time))
   	      ],
   	      [not(side2Pred(Portal,Exists_Location))]).
 */
 %  "% =================================".


%; locking and unlocking doors
%; agent unlocks door.

% event DoorUnlock(agent,door)
% event(
%    doorUnlock(agent,door)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',64).
actions([doorUnlock/2]).
% mpred_prop(
%    doorUnlock(agent,door), 
%    event).
mpred_prop(doorUnlock(agent,door),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',64).
%; agent locks door.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',67).
% event DoorLock(agent,door)
% event(
%    doorLock(agent,door)).
actions([doorLock/2]).
% mpred_prop(
%    doorLock(agent,door), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',67).
mpred_prop(doorLock(agent,door),event).


%; door is unlocked.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',69).
% fluent DoorUnlocked(door)
% fluent(
%    doorUnlocked(door)).
fluents([doorUnlocked/1]).
% mpred_prop(
%    doorUnlocked(door), 
%    fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',69).
mpred_prop(doorUnlocked(door),fluent).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',71).
%; A precondition axiom states that
%; for an agent to unlock a door,
%; the agent must be awake,
%; the door must not already be unlocked, and
%; the agent must be near the door:
% [agent,door,time]
% Happens(DoorUnlock(agent,door),time) ->
% HoldsAt(Awake(agent),time) &
% !HoldsAt(DoorUnlocked(door),time) &
% HoldsAt(NearPortal(agent,door),time).
% '->'(
%    ';'(
%       not(
%          awake(Agent)), 
%       ';'(
%          not(
%             not(
%                doorUnlocked(Door))), 
%          not(
%             nearPortal(Agent,Door)))), 
%    not(
%       doorUnlock(Agent,Door))).
if not awake(Agent);not not doorUnlocked(Door);not nearPortal(Agent, Door)then not doorUnlock(Agent, Door).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',76).

 /*   reactive_rule([  (not(awake(Agent));not(not(doorUnlocked(Door)));not(nearPortal(Agent, Door)))
                    ],
                    [not(doorUnlock(Agent, Door))]).
 */
 %  "% =================================".
% '->'(
%    metreqs(
%       doorUnlock(Agent,Door)), 
%    requires(
%       doorUnlock(Agent,Door), 
%       When_Time)).
if doorUnlock(Agent, Door)then requires(doorUnlock(Agent, Door), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',76).

 /*  reactive_rule([ happens(doorUnlock(Agent,Door),
   			Time_From,
   			Time_Until)
   	      ],
   	      [ requires(doorUnlock(Agent,Door),
   			 When_Time)
   	      ]).
 */
 %  "% =================================".
% '->'(
%    awake(Agent), 
%    metreqs(
%       doorUnlock(Agent,Door))).
doorUnlock(Agent, Door)if awake(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',76).

 /*  l_events(happens(doorUnlock(Agent,Door),
   		 Time_From6,
   		 Time_From6),
   	 [awake(Agent)]).
 */
 %  "% =================================".
% '->'(
%    metreqs(
%       doorUnlock(Agent,Door)), 
%    requires(
%       doorUnlock(Agent,Door), 
%       When_Time)).
if doorUnlock(Agent, Door)then requires(doorUnlock(Agent, Door), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',76).

 /*  reactive_rule([ happens(doorUnlock(Agent,Door),
   			Time_From7,
   			Time_Until8)
   	      ],
   	      [ requires(doorUnlock(Agent,Door),
   			 When_Time)
   	      ]).
 */
 %  "% =================================".
% '->'(
%    not(
%       doorUnlocked(Door)), 
%    metreqs(
%       doorUnlock(Agent,Door))).
doorUnlock(Agent, Door)if not doorUnlocked(Door).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',76).

 /*  l_events(happens(doorUnlock(Agent,Door),
   		 Time_From9,
   		 Time_From9),
   	 [holds(not(doorUnlocked(Door)),Time_From9)]).
 */
 %  "% =================================".
% '->'(
%    metreqs(
%       doorUnlock(Agent,Door)), 
%    requires(
%       doorUnlock(Agent,Door), 
%       When_Time)).
if doorUnlock(Agent, Door)then requires(doorUnlock(Agent, Door), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',76).

 /*  reactive_rule([ happens(doorUnlock(Agent,Door),
   			Time_From10,
   			Time_Until11)
   	      ],
   	      [ requires(doorUnlock(Agent,Door),
   			 When_Time)
   	      ]).
 */
 %  "% =================================".
% '->'(
%    nearPortal(Agent,Door), 
%    metreqs(
%       doorUnlock(Agent,Door))).
doorUnlock(Agent, Door)if nearPortal(Agent, Door).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',76).

 /*  l_events(happens(doorUnlock(Agent,Door),
   		 Time_From12,
   		 Time_From12),
   	 [nearPortal(Agent,Door)]).
 */
 %  "% =================================".


%; An effect axiom states that
%; if an agent unlocks a door,
%; the door will be unlocked:
% [agent,door,time]
% Initiates(DoorUnlock(agent,door),DoorUnlocked(door),time).
% initiates(
%    doorUnlock(Agent,Door), 
%    doorUnlocked(Door), 
%    Time).
doorUnlock(Agent, Door)initiates doorUnlocked(Door).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',85).

 /*  initiated(happens(doorUnlock(Agent,Door),
   		  Time_From,
   		  Time_Until),
   	  doorUnlocked(Door),
   	  []).
 */
 %  "% =================================".


%; A precondition axiom states that
%; for an agent to lock a door,
%; the agent must be awake,
%; the door must be unlocked, and
%; the agent must be near the door:
% [agent,door,time]
% Happens(DoorLock(agent,door),time) ->
% HoldsAt(Awake(agent),time) &
% HoldsAt(DoorUnlocked(door),time) &
% HoldsAt(NearPortal(agent,door),time).
% '->'(
%    ';'(
%       not(
%          awake(Agent)), 
%       ';'(
%          not(
%             doorUnlocked(Door)), 
%          not(
%             nearPortal(Agent,Door)))), 
%    not(
%       doorLock(Agent,Door))).
if not awake(Agent);not doorUnlocked(Door);not nearPortal(Agent, Door)then not doorLock(Agent, Door).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',93).

 /*   reactive_rule([  (not(awake(Agent));not(doorUnlocked(Door));not(nearPortal(Agent, Door)))
                    ],
                    [not(doorLock(Agent, Door))]).
 */
 %  "% =================================".
% '->'(
%    metreqs(
%       doorLock(Agent,Door)), 
%    requires(
%       doorLock(Agent,Door), 
%       When_Time)).
if doorLock(Agent, Door)then requires(doorLock(Agent, Door), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',93).

 /*  reactive_rule([ happens(doorLock(Agent,Door),
   			Time_From,
   			Time_Until)
   	      ],
   	      [ requires(doorLock(Agent,Door),
   			 When_Time)
   	      ]).
 */
 %  "% =================================".
% '->'(
%    awake(Agent), 
%    metreqs(
%       doorLock(Agent,Door))).
doorLock(Agent, Door)if awake(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',93).

 /*  l_events(happens(doorLock(Agent,Door),
   		 Time_From6,
   		 Time_From6),
   	 [awake(Agent)]).
 */
 %  "% =================================".
% '->'(
%    metreqs(
%       doorLock(Agent,Door)), 
%    requires(
%       doorLock(Agent,Door), 
%       When_Time)).
if doorLock(Agent, Door)then requires(doorLock(Agent, Door), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',93).

 /*  reactive_rule([ happens(doorLock(Agent,Door),
   			Time_From7,
   			Time_Until8)
   	      ],
   	      [ requires(doorLock(Agent,Door),
   			 When_Time)
   	      ]).
 */
 %  "% =================================".
% '->'(
%    doorUnlocked(Door), 
%    metreqs(
%       doorLock(Agent,Door))).
doorLock(Agent, Door)if doorUnlocked(Door).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',93).

 /*  l_events(happens(doorLock(Agent,Door),
   		 Time_From9,
   		 Time_From9),
   	 [holds(doorUnlocked(Door),Time_From9)]).
 */
 %  "% =================================".
% '->'(
%    metreqs(
%       doorLock(Agent,Door)), 
%    requires(
%       doorLock(Agent,Door), 
%       When_Time)).
if doorLock(Agent, Door)then requires(doorLock(Agent, Door), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',93).

 /*  reactive_rule([ happens(doorLock(Agent,Door),
   			Time_From10,
   			Time_Until11)
   	      ],
   	      [ requires(doorLock(Agent,Door),
   			 When_Time)
   	      ]).
 */
 %  "% =================================".
% '->'(
%    nearPortal(Agent,Door), 
%    metreqs(
%       doorLock(Agent,Door))).
doorLock(Agent, Door)if nearPortal(Agent, Door).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',93).

 /*  l_events(happens(doorLock(Agent,Door),
   		 Time_From12,
   		 Time_From12),
   	 [nearPortal(Agent,Door)]).
 */
 %  "% =================================".


%; An effect axiom states that
%; if an agent locks a door,
%; the door will no longer be unlocked.
% [agent,door,time]
% Terminates(DoorLock(agent,door),DoorUnlocked(door),time).
% terminates(
%    doorLock(Agent,Door), 
%    doorUnlocked(Door), 
%    Time).
doorLock(Agent, Door)terminates doorUnlocked(Door).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',102).

 /*  terminated(happens(doorLock(Agent,Door),
   		   Time_From,
   		   Time_Until),
   	   doorUnlocked(Door),
   	   []).
 */
 %  "% =================================".


%; A state constraint says that if a door is open,
%; it is unlocked:
% [door,time]
% HoldsAt(DoorIsOpen(door),time) -> HoldsAt(DoorUnlocked(door),time).
% '->'(
%    doorIsOpen(Door), 
%    doorUnlocked(Door)).
doorUnlocked(Door)if doorIsOpen(Door).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',107).

 /*  l_int(holds(doorUnlocked(Door),Time_At),
         [holds(doorIsOpen(Door),Time_At)]).
 */
 %  "% =================================".
% '->'(
%    not(
%       doorUnlocked(Door)), 
%    not(
%       doorIsOpen(Door))).
not doorIsOpen(Door)if not doorUnlocked(Door).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',107).

 /*  l_int(holds(not(doorIsOpen(Door)),Time_At3),
         [holds(not(doorUnlocked(Door)),Time_At3)]).
 */
 %  "% =================================".


%; opening and closing doors
%; agent opens door.

% event DoorOpen(agent,door)
% event(
%    doorOpen(agent,door)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',112).
actions([doorOpen/2]).
% mpred_prop(
%    doorOpen(agent,door), 
%    event).
mpred_prop(doorOpen(agent,door),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',112).
%; agent closes door.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',115).
% event DoorClose(agent,door)
% event(
%    doorClose(agent,door)).
actions([doorClose/2]).
% mpred_prop(
%    doorClose(agent,door), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',115).
mpred_prop(doorClose(agent,door),event).


%; door is open.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',117).
% fluent DoorIsOpen(door)
% fluent(
%    doorIsOpen(door)).
fluents([doorIsOpen/1]).
% mpred_prop(
%    doorIsOpen(door), 
%    fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',117).
mpred_prop(doorIsOpen(door),fluent).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',119).
%; A precondition axiom states that
%; for an agent to open a door,
%; the agent must be awake,
%; the door must not already be open,
%; the door must be unlocked, and
%; the agent must be near the door:
% [agent,door,time]
% Happens(DoorOpen(agent,door),time) ->
% HoldsAt(Awake(agent),time) &
% !HoldsAt(DoorIsOpen(door),time) &
% HoldsAt(DoorUnlocked(door),time) &
% HoldsAt(NearPortal(agent,door),time).
% '->'(
%    ';'(
%       not(
%          awake(Agent)), 
%       ';'(
%          not(
%             not(
%                doorIsOpen(Door))), 
%          ';'(
%             not(
%                doorUnlocked(Door)), 
%             not(
%                nearPortal(Agent,Door))))), 
%    not(
%       doorOpen(Agent,Door))).
if not awake(Agent);not not doorIsOpen(Door);not doorUnlocked(Door);not nearPortal(Agent, Door)then not doorOpen(Agent, Door).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',125).

 /*   reactive_rule([  (not(awake(Agent));not(not(doorIsOpen(Door)));not(doorUnlocked(Door));not(nearPortal(Agent, Door)))
                    ],
                    [not(doorOpen(Agent, Door))]).
 */
 %  "% =================================".
% '->'(
%    metreqs(
%       doorOpen(Agent,Door)), 
%    requires(
%       doorOpen(Agent,Door), 
%       When_Time)).
if doorOpen(Agent, Door)then requires(doorOpen(Agent, Door), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',125).

 /*  reactive_rule([ happens(doorOpen(Agent,Door),
   			Time_From,
   			Time_Until)
   	      ],
   	      [ requires(doorOpen(Agent,Door),
   			 When_Time)
   	      ]).
 */
 %  "% =================================".
% '->'(
%    awake(Agent), 
%    metreqs(
%       doorOpen(Agent,Door))).
doorOpen(Agent, Door)if awake(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',125).

 /*  l_events(happens(doorOpen(Agent,Door),
   		 Time_From6,
   		 Time_From6),
   	 [awake(Agent)]).
 */
 %  "% =================================".
% '->'(
%    metreqs(
%       doorOpen(Agent,Door)), 
%    requires(
%       doorOpen(Agent,Door), 
%       When_Time)).
if doorOpen(Agent, Door)then requires(doorOpen(Agent, Door), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',125).

 /*  reactive_rule([ happens(doorOpen(Agent,Door),
   			Time_From7,
   			Time_Until8)
   	      ],
   	      [ requires(doorOpen(Agent,Door),
   			 When_Time)
   	      ]).
 */
 %  "% =================================".
% '->'(
%    not(
%       doorIsOpen(Door)), 
%    metreqs(
%       doorOpen(Agent,Door))).
doorOpen(Agent, Door)if not doorIsOpen(Door).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',125).

 /*  l_events(happens(doorOpen(Agent,Door),
   		 Time_From9,
   		 Time_From9),
   	 [holds(not(doorIsOpen(Door)),Time_From9)]).
 */
 %  "% =================================".
% '->'(
%    metreqs(
%       doorOpen(Agent,Door)), 
%    requires(
%       doorOpen(Agent,Door), 
%       When_Time)).
if doorOpen(Agent, Door)then requires(doorOpen(Agent, Door), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',125).

 /*  reactive_rule([ happens(doorOpen(Agent,Door),
   			Time_From10,
   			Time_Until11)
   	      ],
   	      [ requires(doorOpen(Agent,Door),
   			 When_Time)
   	      ]).
 */
 %  "% =================================".
% '->'(
%    doorUnlocked(Door), 
%    metreqs(
%       doorOpen(Agent,Door))).
doorOpen(Agent, Door)if doorUnlocked(Door).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',125).

 /*  l_events(happens(doorOpen(Agent,Door),
   		 Time_From12,
   		 Time_From12),
   	 [holds(doorUnlocked(Door),Time_From12)]).
 */
 %  "% =================================".
% '->'(
%    metreqs(
%       doorOpen(Agent,Door)), 
%    requires(
%       doorOpen(Agent,Door), 
%       When_Time)).
if doorOpen(Agent, Door)then requires(doorOpen(Agent, Door), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',125).

 /*  reactive_rule([ happens(doorOpen(Agent,Door),
   			Time_From13,
   			Time_Until14)
   	      ],
   	      [ requires(doorOpen(Agent,Door),
   			 When_Time)
   	      ]).
 */
 %  "% =================================".
% '->'(
%    nearPortal(Agent,Door), 
%    metreqs(
%       doorOpen(Agent,Door))).
doorOpen(Agent, Door)if nearPortal(Agent, Door).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',125).

 /*  l_events(happens(doorOpen(Agent,Door),
   		 Time_From15,
   		 Time_From15),
   	 [nearPortal(Agent,Door)]).
 */
 %  "% =================================".


%; An effect axiom states that
%; if an agent opens a door,
%; the door will be open:
% [agent,door,time]
% Initiates(DoorOpen(agent,door),DoorIsOpen(door),time).
% initiates(
%    doorOpen(Agent,Door), 
%    doorIsOpen(Door), 
%    Time).
doorOpen(Agent, Door)initiates doorIsOpen(Door).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',135).

 /*  initiated(happens(doorOpen(Agent,Door),
   		  Time_From,
   		  Time_Until),
   	  doorIsOpen(Door),
   	  []).
 */
 %  "% =================================".


%; A precondition axiom states that
%; for an agent to close a door,
%; the agent must be awake,
%; the door must be open,
%; the door must be unlocked, and
%; the agent must be near the door:
% [agent,door,time]
% Happens(DoorClose(agent,door),time) ->
% HoldsAt(Awake(agent),time) &
% HoldsAt(DoorIsOpen(door),time) &
% HoldsAt(DoorUnlocked(door),time) &
% HoldsAt(NearPortal(agent,door),time).
% '->'(
%    ';'(
%       not(
%          awake(Agent)), 
%       ';'(
%          not(
%             doorIsOpen(Door)), 
%          ';'(
%             not(
%                doorUnlocked(Door)), 
%             not(
%                nearPortal(Agent,Door))))), 
%    not(
%       doorClose(Agent,Door))).
if not awake(Agent);not doorIsOpen(Door);not doorUnlocked(Door);not nearPortal(Agent, Door)then not doorClose(Agent, Door).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',144).

 /*   reactive_rule([  (not(awake(Agent));not(doorIsOpen(Door));not(doorUnlocked(Door));not(nearPortal(Agent, Door)))
                    ],
                    [not(doorClose(Agent, Door))]).
 */
 %  "% =================================".
% '->'(
%    metreqs(
%       doorClose(Agent,Door)), 
%    requires(
%       doorClose(Agent,Door), 
%       When_Time)).
if doorClose(Agent, Door)then requires(doorClose(Agent, Door), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',144).

 /*  reactive_rule([ happens(doorClose(Agent,Door),
   			Time_From,
   			Time_Until)
   	      ],
   	      [ requires(doorClose(Agent,Door),
   			 When_Time)
   	      ]).
 */
 %  "% =================================".
% '->'(
%    awake(Agent), 
%    metreqs(
%       doorClose(Agent,Door))).
doorClose(Agent, Door)if awake(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',144).

 /*  l_events(happens(doorClose(Agent,Door),
   		 Time_From6,
   		 Time_From6),
   	 [awake(Agent)]).
 */
 %  "% =================================".
% '->'(
%    metreqs(
%       doorClose(Agent,Door)), 
%    requires(
%       doorClose(Agent,Door), 
%       When_Time)).
if doorClose(Agent, Door)then requires(doorClose(Agent, Door), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',144).

 /*  reactive_rule([ happens(doorClose(Agent,Door),
   			Time_From7,
   			Time_Until8)
   	      ],
   	      [ requires(doorClose(Agent,Door),
   			 When_Time)
   	      ]).
 */
 %  "% =================================".
% '->'(
%    doorIsOpen(Door), 
%    metreqs(
%       doorClose(Agent,Door))).
doorClose(Agent, Door)if doorIsOpen(Door).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',144).

 /*  l_events(happens(doorClose(Agent,Door),
   		 Time_From9,
   		 Time_From9),
   	 [holds(doorIsOpen(Door),Time_From9)]).
 */
 %  "% =================================".
% '->'(
%    metreqs(
%       doorClose(Agent,Door)), 
%    requires(
%       doorClose(Agent,Door), 
%       When_Time)).
if doorClose(Agent, Door)then requires(doorClose(Agent, Door), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',144).

 /*  reactive_rule([ happens(doorClose(Agent,Door),
   			Time_From10,
   			Time_Until11)
   	      ],
   	      [ requires(doorClose(Agent,Door),
   			 When_Time)
   	      ]).
 */
 %  "% =================================".
% '->'(
%    doorUnlocked(Door), 
%    metreqs(
%       doorClose(Agent,Door))).
doorClose(Agent, Door)if doorUnlocked(Door).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',144).

 /*  l_events(happens(doorClose(Agent,Door),
   		 Time_From12,
   		 Time_From12),
   	 [holds(doorUnlocked(Door),Time_From12)]).
 */
 %  "% =================================".
% '->'(
%    metreqs(
%       doorClose(Agent,Door)), 
%    requires(
%       doorClose(Agent,Door), 
%       When_Time)).
if doorClose(Agent, Door)then requires(doorClose(Agent, Door), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',144).

 /*  reactive_rule([ happens(doorClose(Agent,Door),
   			Time_From13,
   			Time_Until14)
   	      ],
   	      [ requires(doorClose(Agent,Door),
   			 When_Time)
   	      ]).
 */
 %  "% =================================".
% '->'(
%    nearPortal(Agent,Door), 
%    metreqs(
%       doorClose(Agent,Door))).
doorClose(Agent, Door)if nearPortal(Agent, Door).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',144).

 /*  l_events(happens(doorClose(Agent,Door),
   		 Time_From15,
   		 Time_From15),
   	 [nearPortal(Agent,Door)]).
 */
 %  "% =================================".


%; An effect axiom states that
%; if an agent closes a door,
%; the door will no longer be open:
% [agent,door,time]
% Terminates(DoorClose(agent,door),DoorIsOpen(door),time).
% terminates(
%    doorClose(Agent,Door), 
%    doorIsOpen(Door), 
%    Time).
doorClose(Agent, Door)terminates doorIsOpen(Door).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',154).

 /*  terminated(happens(doorClose(Agent,Door),
   		   Time_From,
   		   Time_Until),
   	   doorIsOpen(Door),
   	   []).
 */
 %  "% =================================".


%; passing through doors
%; agent walks through side one of door.

% event WalkThroughDoor12(agent,door)
% event(
%    walkThroughDoor12(agent,door)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',159).
actions([walkThroughDoor12/2]).
% mpred_prop(
%    walkThroughDoor12(agent,door), 
%    event).
mpred_prop(walkThroughDoor12(agent,door),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',159).
%; agent walks through side two of door.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',162).
% event WalkThroughDoor21(agent,door)
% event(
%    walkThroughDoor21(agent,door)).
actions([walkThroughDoor21/2]).
% mpred_prop(
%    walkThroughDoor21(agent,door), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',162).
mpred_prop(walkThroughDoor21(agent,door),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',164).
%; Precondition axioms state that
%; for an agent to walk through a side of a door,
%; the agent must be awake and standing,
%; the door must be open, and
%; the agent must be at the side of the door that
%; the agent walks through:
% [agent,door,time]
% Happens(WalkThroughDoor12(agent,door),time) ->
% HoldsAt(Awake(agent),time) &
% HoldsAt(Standing(agent),time) &
% HoldsAt(DoorIsOpen(door),time) &
% HoldsAt(At(agent,Side1(door)),time).
% '->'(
%    ';'(
%       not(
%          awake(Agent)), 
%       ';'(
%          not(
%             standing(Agent)), 
%          ';'(
%             not(
%                doorIsOpen(Door)), 
%             not(
%                at(
%                   Agent, 
%                   side1(Door)))))), 
%    not(
%       walkThroughDoor12(Agent,Door))).
if not awake(Agent);not standing(Agent);not doorIsOpen(Door);not loc_at(Agent, side1(Door))then not walkThroughDoor12(Agent, Door).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',170).

 /*   reactive_rule([  (not(awake(Agent));not(standing(Agent));not(doorIsOpen(Door));not(loc_at(Agent, side1(Door))))
                    ],
                    [not(walkThroughDoor12(Agent, Door))]).
 */
 %  "% =================================".
% '->'(
%    metreqs(
%       walkThroughDoor12(Agent,Door)), 
%    requires(
%       walkThroughDoor12(Agent,Door), 
%       When_Time)).
if walkThroughDoor12(Agent, Door)then requires(walkThroughDoor12(Agent, Door), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',170).

 /*  reactive_rule([ happens(walkThroughDoor12(Agent,Door),
   			Time_From,
   			Time_Until)
   	      ],
   	      [ requires(walkThroughDoor12(Agent,Door),
   			 When_Time)
   	      ]).
 */
 %  "% =================================".
% '->'(
%    awake(Agent), 
%    metreqs(
%       walkThroughDoor12(Agent,Door))).
walkThroughDoor12(Agent, Door)if awake(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',170).

 /*  l_events(happens(walkThroughDoor12(Agent,Door),
   		 Time_From6,
   		 Time_From6),
   	 [awake(Agent)]).
 */
 %  "% =================================".
% '->'(
%    metreqs(
%       walkThroughDoor12(Agent,Door)), 
%    requires(
%       walkThroughDoor12(Agent,Door), 
%       When_Time)).
if walkThroughDoor12(Agent, Door)then requires(walkThroughDoor12(Agent, Door), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',170).

 /*  reactive_rule([ happens(walkThroughDoor12(Agent,Door),
   			Time_From7,
   			Time_Until8)
   	      ],
   	      [ requires(walkThroughDoor12(Agent,Door),
   			 When_Time)
   	      ]).
 */
 %  "% =================================".
% '->'(
%    standing(Agent), 
%    metreqs(
%       walkThroughDoor12(Agent,Door))).
walkThroughDoor12(Agent, Door)if standing(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',170).

 /*  l_events(happens(walkThroughDoor12(Agent,Door),
   		 Time_From9,
   		 Time_From9),
   	 [holds(standing(Agent),Time_From9)]).
 */
 %  "% =================================".
% '->'(
%    metreqs(
%       walkThroughDoor12(Agent,Door)), 
%    requires(
%       walkThroughDoor12(Agent,Door), 
%       When_Time)).
if walkThroughDoor12(Agent, Door)then requires(walkThroughDoor12(Agent, Door), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',170).

 /*  reactive_rule([ happens(walkThroughDoor12(Agent,Door),
   			Time_From10,
   			Time_Until11)
   	      ],
   	      [ requires(walkThroughDoor12(Agent,Door),
   			 When_Time)
   	      ]).
 */
 %  "% =================================".
% '->'(
%    doorIsOpen(Door), 
%    metreqs(
%       walkThroughDoor12(Agent,Door))).
walkThroughDoor12(Agent, Door)if doorIsOpen(Door).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',170).

 /*  l_events(happens(walkThroughDoor12(Agent,Door),
   		 Time_From12,
   		 Time_From12),
   	 [holds(doorIsOpen(Door),Time_From12)]).
 */
 %  "% =================================".
% '->'(
%    metreqs(
%       walkThroughDoor12(Agent,Door)), 
%    requires(
%       walkThroughDoor12(Agent,Door), 
%       When_Time)).
if walkThroughDoor12(Agent, Door)then requires(walkThroughDoor12(Agent, Door), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',170).

 /*  reactive_rule([ happens(walkThroughDoor12(Agent,Door),
   			Time_From13,
   			Time_Until14)
   	      ],
   	      [ requires(walkThroughDoor12(Agent,Door),
   			 When_Time)
   	      ]).
 */
 %  "% =================================".
% '->'(
%    at(
%       Agent, 
%       side1(Door)), 
%    metreqs(
%       walkThroughDoor12(Agent,Door))).
walkThroughDoor12(Agent, Door)if loc_at(Agent, side1(Door)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',170).

 /*  l_events(happens(walkThroughDoor12(Agent,Door),
   		 Time_From15,
   		 Time_From15),
   	 [loc_at(Agent,side1(Door))]).
 */
 %  "% =================================".


% [agent,door,time]
% Happens(WalkThroughDoor21(agent,door),time) ->
% HoldsAt(Awake(agent),time) &
% HoldsAt(Standing(agent),time) &
% HoldsAt(DoorIsOpen(door),time) &
% HoldsAt(At(agent,Side2(door)),time).
% '->'(
%    ';'(
%       not(
%          awake(Agent)), 
%       ';'(
%          not(
%             standing(Agent)), 
%          ';'(
%             not(
%                doorIsOpen(Door)), 
%             not(
%                at(
%                   Agent, 
%                   side2(Door)))))), 
%    not(
%       walkThroughDoor21(Agent,Door))).
if not awake(Agent);not standing(Agent);not doorIsOpen(Door);not loc_at(Agent, side2(Door))then not walkThroughDoor21(Agent, Door).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',178).

 /*   reactive_rule([  (not(awake(Agent));not(standing(Agent));not(doorIsOpen(Door));not(loc_at(Agent, side2(Door))))
                    ],
                    [not(walkThroughDoor21(Agent, Door))]).
 */
 %  "% =================================".
% '->'(
%    metreqs(
%       walkThroughDoor21(Agent,Door)), 
%    requires(
%       walkThroughDoor21(Agent,Door), 
%       When_Time)).
if walkThroughDoor21(Agent, Door)then requires(walkThroughDoor21(Agent, Door), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',178).

 /*  reactive_rule([ happens(walkThroughDoor21(Agent,Door),
   			Time_From,
   			Time_Until)
   	      ],
   	      [ requires(walkThroughDoor21(Agent,Door),
   			 When_Time)
   	      ]).
 */
 %  "% =================================".
% '->'(
%    awake(Agent), 
%    metreqs(
%       walkThroughDoor21(Agent,Door))).
walkThroughDoor21(Agent, Door)if awake(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',178).

 /*  l_events(happens(walkThroughDoor21(Agent,Door),
   		 Time_From6,
   		 Time_From6),
   	 [awake(Agent)]).
 */
 %  "% =================================".
% '->'(
%    metreqs(
%       walkThroughDoor21(Agent,Door)), 
%    requires(
%       walkThroughDoor21(Agent,Door), 
%       When_Time)).
if walkThroughDoor21(Agent, Door)then requires(walkThroughDoor21(Agent, Door), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',178).

 /*  reactive_rule([ happens(walkThroughDoor21(Agent,Door),
   			Time_From7,
   			Time_Until8)
   	      ],
   	      [ requires(walkThroughDoor21(Agent,Door),
   			 When_Time)
   	      ]).
 */
 %  "% =================================".
% '->'(
%    standing(Agent), 
%    metreqs(
%       walkThroughDoor21(Agent,Door))).
walkThroughDoor21(Agent, Door)if standing(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',178).

 /*  l_events(happens(walkThroughDoor21(Agent,Door),
   		 Time_From9,
   		 Time_From9),
   	 [holds(standing(Agent),Time_From9)]).
 */
 %  "% =================================".
% '->'(
%    metreqs(
%       walkThroughDoor21(Agent,Door)), 
%    requires(
%       walkThroughDoor21(Agent,Door), 
%       When_Time)).
if walkThroughDoor21(Agent, Door)then requires(walkThroughDoor21(Agent, Door), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',178).

 /*  reactive_rule([ happens(walkThroughDoor21(Agent,Door),
   			Time_From10,
   			Time_Until11)
   	      ],
   	      [ requires(walkThroughDoor21(Agent,Door),
   			 When_Time)
   	      ]).
 */
 %  "% =================================".
% '->'(
%    doorIsOpen(Door), 
%    metreqs(
%       walkThroughDoor21(Agent,Door))).
walkThroughDoor21(Agent, Door)if doorIsOpen(Door).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',178).

 /*  l_events(happens(walkThroughDoor21(Agent,Door),
   		 Time_From12,
   		 Time_From12),
   	 [holds(doorIsOpen(Door),Time_From12)]).
 */
 %  "% =================================".
% '->'(
%    metreqs(
%       walkThroughDoor21(Agent,Door)), 
%    requires(
%       walkThroughDoor21(Agent,Door), 
%       When_Time)).
if walkThroughDoor21(Agent, Door)then requires(walkThroughDoor21(Agent, Door), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',178).

 /*  reactive_rule([ happens(walkThroughDoor21(Agent,Door),
   			Time_From13,
   			Time_Until14)
   	      ],
   	      [ requires(walkThroughDoor21(Agent,Door),
   			 When_Time)
   	      ]).
 */
 %  "% =================================".
% '->'(
%    at(
%       Agent, 
%       side2(Door)), 
%    metreqs(
%       walkThroughDoor21(Agent,Door))).
walkThroughDoor21(Agent, Door)if loc_at(Agent, side2(Door)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',178).

 /*  l_events(happens(walkThroughDoor21(Agent,Door),
   		 Time_From15,
   		 Time_From15),
   	 [loc_at(Agent,side2(Door))]).
 */
 %  "% =================================".


%; Effect axioms state that
%; if an agent walks through one side of a door,
%; the agent will be at the other side of the door:
% [agent,door,location,time]
% Side2(door)=location ->
% Initiates(WalkThroughDoor12(agent,door),At(agent,location),time).
% '->'(
%    side2Pred(Door,Location), 
%    initiates(
%       walkThroughDoor12(Agent,Door), 
%       at(Agent,Location), 
%       Time)).
if side2Pred(Door, Location)then initiates(walkThroughDoor12(Agent, Door), loc_at(Agent, Location)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',187).

 /*  reactive_rule([side2Pred(Door,Location)],
   	      [ initiates(walkThroughDoor12(Agent,Door),
   			  at(loc_at(Agent,Location),
   			     Time),
   			  Initiates)
   	      ]).
 */
 %  "% =================================".


% [agent,door,location,time]
% Side1(door)=location ->
% Initiates(WalkThroughDoor21(agent,door),At(agent,location),time).
% '->'(
%    side1Pred(Door,Location), 
%    initiates(
%       walkThroughDoor21(Agent,Door), 
%       at(Agent,Location), 
%       Time)).
if side1Pred(Door, Location)then initiates(walkThroughDoor21(Agent, Door), loc_at(Agent, Location)at Time, _).

 /*  reactive_rule([side1Pred(Door,Location)],
   	      [ initiates(walkThroughDoor21(Agent,Door),
   			  at(loc_at(Agent,Location),
   			     Time),
   			  Initiates)
   	      ]).
 */
 %  "% =================================".


% [agent,door,location,time]
% Side1(door)=location ->
% Terminates(WalkThroughDoor12(agent,door),At(agent,location),time).
% '->'(
%    side1Pred(Door,Location), 
%    terminates(
%       walkThroughDoor12(Agent,Door), 
%       at(Agent,Location), 
%       Time)).
if side1Pred(Door, Location)then terminates(walkThroughDoor12(Agent, Door), loc_at(Agent, Location)at Time, _).

 /*  reactive_rule([side1Pred(Door,Location)],
   	      [ terminates(walkThroughDoor12(Agent,Door),
   			   at(loc_at(Agent,Location),
   			      Time),
   			   Terminates)
   	      ]).
 */
 %  "% =================================".


% [agent,door,location,time]
% Side2(door)=location ->
% Terminates(WalkThroughDoor21(agent,door),At(agent,location),time).
% '->'(
%    side2Pred(Door,Location), 
%    terminates(
%       walkThroughDoor21(Agent,Door), 
%       at(Agent,Location), 
%       Time)).
if side2Pred(Door, Location)then terminates(walkThroughDoor21(Agent, Door), loc_at(Agent, Location)at Time, _).

 /*  reactive_rule([side2Pred(Door,Location)],
   	      [ terminates(walkThroughDoor21(Agent,Door),
   			   at(loc_at(Agent,Location),
   			      Time),
   			   Terminates)
   	      ]).
 */
 %  "% =================================".


%; walking from one end of a street to another
%; agent walks from the first end of street to the second end.

% event WalkStreet12(agent,street)
% event(
%    walkStreet12(agent,street)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',205).
actions([walkStreet12/2]).
% mpred_prop(
%    walkStreet12(agent,street), 
%    event).
mpred_prop(walkStreet12(agent,street),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',205).
%; agent walks from the second end of street to the first end.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',208).
% event WalkStreet21(agent,street)
% event(
%    walkStreet21(agent,street)).
actions([walkStreet21/2]).
% mpred_prop(
%    walkStreet21(agent,street), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',208).
mpred_prop(walkStreet21(agent,street),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',210).
%; Precondition axioms state that
%; for an agent to walk from one end of a street to another,
%; the agent must be awake,
%; the agent must be standing, and
%; the agent must be at the first end of the street:
% [agent,street,time]
% Happens(WalkStreet12(agent,street),time) ->
% HoldsAt(Awake(agent),time) &
% HoldsAt(Standing(agent),time) &
% HoldsAt(At(agent,Side1(street)),time).
% '->'(
%    ';'(
%       not(
%          awake(Agent)), 
%       ';'(
%          not(
%             standing(Agent)), 
%          not(
%             at(
%                Agent, 
%                side1(Street))))), 
%    not(
%       walkStreet12(Agent,Street))).
if not awake(Agent);not standing(Agent);not loc_at(Agent, side1(Street))then not walkStreet12(Agent, Street).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',215).

 /*   reactive_rule([  (not(awake(Agent));not(standing(Agent));not(loc_at(Agent, side1(Street))))
                    ],
                    [not(walkStreet12(Agent, Street))]).
 */
 %  "% =================================".
% '->'(
%    metreqs(
%       walkStreet12(Agent,Street)), 
%    requires(
%       walkStreet12(Agent,Street), 
%       When_Time)).
if walkStreet12(Agent, Street)then requires(walkStreet12(Agent, Street), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',215).

 /*  reactive_rule([ happens(walkStreet12(Agent,Street),
   			Time_From,
   			Time_Until)
   	      ],
   	      [ requires(walkStreet12(Agent,Street),
   			 When_Time)
   	      ]).
 */
 %  "% =================================".
% '->'(
%    awake(Agent), 
%    metreqs(
%       walkStreet12(Agent,Street))).
walkStreet12(Agent, Street)if awake(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',215).

 /*  l_events(happens(walkStreet12(Agent,Street),
   		 Time_From6,
   		 Time_From6),
   	 [awake(Agent)]).
 */
 %  "% =================================".
% '->'(
%    metreqs(
%       walkStreet12(Agent,Street)), 
%    requires(
%       walkStreet12(Agent,Street), 
%       When_Time)).
if walkStreet12(Agent, Street)then requires(walkStreet12(Agent, Street), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',215).

 /*  reactive_rule([ happens(walkStreet12(Agent,Street),
   			Time_From7,
   			Time_Until8)
   	      ],
   	      [ requires(walkStreet12(Agent,Street),
   			 When_Time)
   	      ]).
 */
 %  "% =================================".
% '->'(
%    standing(Agent), 
%    metreqs(
%       walkStreet12(Agent,Street))).
walkStreet12(Agent, Street)if standing(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',215).

 /*  l_events(happens(walkStreet12(Agent,Street),
   		 Time_From9,
   		 Time_From9),
   	 [holds(standing(Agent),Time_From9)]).
 */
 %  "% =================================".
% '->'(
%    metreqs(
%       walkStreet12(Agent,Street)), 
%    requires(
%       walkStreet12(Agent,Street), 
%       When_Time)).
if walkStreet12(Agent, Street)then requires(walkStreet12(Agent, Street), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',215).

 /*  reactive_rule([ happens(walkStreet12(Agent,Street),
   			Time_From10,
   			Time_Until11)
   	      ],
   	      [ requires(walkStreet12(Agent,Street),
   			 When_Time)
   	      ]).
 */
 %  "% =================================".
% '->'(
%    at(
%       Agent, 
%       side1(Street)), 
%    metreqs(
%       walkStreet12(Agent,Street))).
walkStreet12(Agent, Street)if loc_at(Agent, side1(Street)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',215).

 /*  l_events(happens(walkStreet12(Agent,Street),
   		 Time_From12,
   		 Time_From12),
   	 [loc_at(Agent,side1(Street))]).
 */
 %  "% =================================".


% [agent,street,time]
% Happens(WalkStreet21(agent,street),time) ->
% HoldsAt(Awake(agent),time) &
% HoldsAt(Standing(agent),time) &
% HoldsAt(At(agent,Side2(street)),time).
% '->'(
%    ';'(
%       not(
%          awake(Agent)), 
%       ';'(
%          not(
%             standing(Agent)), 
%          not(
%             at(
%                Agent, 
%                side2(Street))))), 
%    not(
%       walkStreet21(Agent,Street))).
if not awake(Agent);not standing(Agent);not loc_at(Agent, side2(Street))then not walkStreet21(Agent, Street).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',222).

 /*   reactive_rule([  (not(awake(Agent));not(standing(Agent));not(loc_at(Agent, side2(Street))))
                    ],
                    [not(walkStreet21(Agent, Street))]).
 */
 %  "% =================================".
% '->'(
%    metreqs(
%       walkStreet21(Agent,Street)), 
%    requires(
%       walkStreet21(Agent,Street), 
%       When_Time)).
if walkStreet21(Agent, Street)then requires(walkStreet21(Agent, Street), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',222).

 /*  reactive_rule([ happens(walkStreet21(Agent,Street),
   			Time_From,
   			Time_Until)
   	      ],
   	      [ requires(walkStreet21(Agent,Street),
   			 When_Time)
   	      ]).
 */
 %  "% =================================".
% '->'(
%    awake(Agent), 
%    metreqs(
%       walkStreet21(Agent,Street))).
walkStreet21(Agent, Street)if awake(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',222).

 /*  l_events(happens(walkStreet21(Agent,Street),
   		 Time_From6,
   		 Time_From6),
   	 [awake(Agent)]).
 */
 %  "% =================================".
% '->'(
%    metreqs(
%       walkStreet21(Agent,Street)), 
%    requires(
%       walkStreet21(Agent,Street), 
%       When_Time)).
if walkStreet21(Agent, Street)then requires(walkStreet21(Agent, Street), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',222).

 /*  reactive_rule([ happens(walkStreet21(Agent,Street),
   			Time_From7,
   			Time_Until8)
   	      ],
   	      [ requires(walkStreet21(Agent,Street),
   			 When_Time)
   	      ]).
 */
 %  "% =================================".
% '->'(
%    standing(Agent), 
%    metreqs(
%       walkStreet21(Agent,Street))).
walkStreet21(Agent, Street)if standing(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',222).

 /*  l_events(happens(walkStreet21(Agent,Street),
   		 Time_From9,
   		 Time_From9),
   	 [holds(standing(Agent),Time_From9)]).
 */
 %  "% =================================".
% '->'(
%    metreqs(
%       walkStreet21(Agent,Street)), 
%    requires(
%       walkStreet21(Agent,Street), 
%       When_Time)).
if walkStreet21(Agent, Street)then requires(walkStreet21(Agent, Street), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',222).

 /*  reactive_rule([ happens(walkStreet21(Agent,Street),
   			Time_From10,
   			Time_Until11)
   	      ],
   	      [ requires(walkStreet21(Agent,Street),
   			 When_Time)
   	      ]).
 */
 %  "% =================================".
% '->'(
%    at(
%       Agent, 
%       side2(Street)), 
%    metreqs(
%       walkStreet21(Agent,Street))).
walkStreet21(Agent, Street)if loc_at(Agent, side2(Street)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',222).

 /*  l_events(happens(walkStreet21(Agent,Street),
   		 Time_From12,
   		 Time_From12),
   	 [loc_at(Agent,side2(Street))]).
 */
 %  "% =================================".


%; Effect axioms state that
%; if an agent walks from one end of a street to another,
%; the agent will be at the other end of the street:
% [agent,street,location,time]
% Side2(street)=location ->
% Initiates(WalkStreet12(agent,street),At(agent,location),time).
% '->'(
%    side2Pred(Street,Location), 
%    initiates(
%       walkStreet12(Agent,Street), 
%       at(Agent,Location), 
%       Time)).
if side2Pred(Street, Location)then initiates(walkStreet12(Agent, Street), loc_at(Agent, Location)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',230).

 /*  reactive_rule([side2Pred(Street,Location)],
   	      [ initiates(walkStreet12(Agent,Street),
   			  at(loc_at(Agent,Location),
   			     Time),
   			  Initiates)
   	      ]).
 */
 %  "% =================================".


% [agent,street,location,time]
% Side1(street)=location ->
% Initiates(WalkStreet21(agent,street),At(agent,location),time).
% '->'(
%    side1Pred(Street,Location), 
%    initiates(
%       walkStreet21(Agent,Street), 
%       at(Agent,Location), 
%       Time)).
if side1Pred(Street, Location)then initiates(walkStreet21(Agent, Street), loc_at(Agent, Location)at Time, _).

 /*  reactive_rule([side1Pred(Street,Location)],
   	      [ initiates(walkStreet21(Agent,Street),
   			  at(loc_at(Agent,Location),
   			     Time),
   			  Initiates)
   	      ]).
 */
 %  "% =================================".


% [agent,street,location,time]
% Side1(street)=location ->
% Terminates(WalkStreet12(agent,street),At(agent,location),time).
% '->'(
%    side1Pred(Street,Location), 
%    terminates(
%       walkStreet12(Agent,Street), 
%       at(Agent,Location), 
%       Time)).
if side1Pred(Street, Location)then terminates(walkStreet12(Agent, Street), loc_at(Agent, Location)at Time, _).

 /*  reactive_rule([side1Pred(Street,Location)],
   	      [ terminates(walkStreet12(Agent,Street),
   			   at(loc_at(Agent,Location),
   			      Time),
   			   Terminates)
   	      ]).
 */
 %  "% =================================".


% [agent,street,location,time]
% Side2(street)=location ->
% Terminates(WalkStreet21(agent,street),At(agent,location),time).
% '->'(
%    side2Pred(Street,Location), 
%    terminates(
%       walkStreet21(Agent,Street), 
%       at(Agent,Location), 
%       Time)).
if side2Pred(Street, Location)then terminates(walkStreet21(Agent, Street), loc_at(Agent, Location)at Time, _).

 /*  reactive_rule([side2Pred(Street,Location)],
   	      [ terminates(walkStreet21(Agent,Street),
   			   at(loc_at(Agent,Location),
   			      Time),
   			   Terminates)
   	      ]).
 */
 %  "% =================================".


%; floors
%; The floor of room is integer.

% function Floor(room): integer
% function(
%    floor(room)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',248).
functions([floor/1]).
% mpred_prop(
%    floor(room), 
%    function).
mpred_prop(floor(room),function).
% predicate(
%    floorPred(room,integer)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',248).
predicates([floorPred/2]).
% mpred_prop(
%    floorPred(room,integer), 
%    predicate).
mpred_prop(floorPred(room,integer),predicate).
% functional_predicate(floor,floorPred).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',248).
functional_predicate(floor,floorPred).
% function_argtypes(
%    floorPred, 
%    floor(room), 
%    integer).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',248).
function_argtypes(floorPred,floor(room),integer).
% resultIsa(floor,integer).
resultIsa(floor,integer).
%; walking up and down staircases
%; agent walks down staircase.

% event WalkDownStaircase(agent,staircase)
% event(
%    walkDownStaircase(agent,staircase)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',253).
actions([walkDownStaircase/2]).
% mpred_prop(
%    walkDownStaircase(agent,staircase), 
%    event).
mpred_prop(walkDownStaircase(agent,staircase),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',253).
%; agent walks up staircase.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',256).
% event WalkUpStaircase(agent,staircase)
% event(
%    walkUpStaircase(agent,staircase)).
actions([walkUpStaircase/2]).
% mpred_prop(
%    walkUpStaircase(agent,staircase), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',256).
mpred_prop(walkUpStaircase(agent,staircase),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',258).
%; Precondition axioms state that
%; for an agent to walk down (up) a staircase,
%; the agent must be awake, standing, and
%; at the top (bottom) of the staircase:
% [agent,staircase,time]
% Happens(WalkDownStaircase(agent,staircase),time) ->
% HoldsAt(Awake(agent),time) &
% HoldsAt(Standing(agent),time) &
% HoldsAt(At(agent,Side2(staircase)),time).
% '->'(
%    ';'(
%       not(
%          awake(Agent)), 
%       ';'(
%          not(
%             standing(Agent)), 
%          not(
%             at(
%                Agent, 
%                side2(Staircase))))), 
%    not(
%       walkDownStaircase(Agent,Staircase))).
if not awake(Agent);not standing(Agent);not loc_at(Agent, side2(Staircase))then not walkDownStaircase(Agent, Staircase).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',262).

 /*   reactive_rule([  (not(awake(Agent));not(standing(Agent));not(loc_at(Agent, side2(Staircase))))
                    ],
                    [not(walkDownStaircase(Agent, Staircase))]).
 */
 %  "% =================================".
% '->'(
%    metreqs(
%       walkDownStaircase(Agent,Staircase)), 
%    requires(
%       walkDownStaircase(Agent,Staircase), 
%       When_Time)).
if walkDownStaircase(Agent, Staircase)then requires(walkDownStaircase(Agent, Staircase), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',262).

 /*  reactive_rule([ happens(walkDownStaircase(Agent,Staircase),
   			Time_From,
   			Time_Until)
   	      ],
   	      [ requires(walkDownStaircase(Agent,Staircase),
   			 When_Time)
   	      ]).
 */
 %  "% =================================".
% '->'(
%    awake(Agent), 
%    metreqs(
%       walkDownStaircase(Agent,Staircase))).
walkDownStaircase(Agent, Staircase)if awake(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',262).

 /*  l_events(happens(walkDownStaircase(Agent,Staircase),
   		 Time_From6,
   		 Time_From6),
   	 [awake(Agent)]).
 */
 %  "% =================================".
% '->'(
%    metreqs(
%       walkDownStaircase(Agent,Staircase)), 
%    requires(
%       walkDownStaircase(Agent,Staircase), 
%       When_Time)).
if walkDownStaircase(Agent, Staircase)then requires(walkDownStaircase(Agent, Staircase), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',262).

 /*  reactive_rule([ happens(walkDownStaircase(Agent,Staircase),
   			Time_From7,
   			Time_Until8)
   	      ],
   	      [ requires(walkDownStaircase(Agent,Staircase),
   			 When_Time)
   	      ]).
 */
 %  "% =================================".
% '->'(
%    standing(Agent), 
%    metreqs(
%       walkDownStaircase(Agent,Staircase))).
walkDownStaircase(Agent, Staircase)if standing(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',262).

 /*  l_events(happens(walkDownStaircase(Agent,Staircase),
   		 Time_From9,
   		 Time_From9),
   	 [holds(standing(Agent),Time_From9)]).
 */
 %  "% =================================".
% '->'(
%    metreqs(
%       walkDownStaircase(Agent,Staircase)), 
%    requires(
%       walkDownStaircase(Agent,Staircase), 
%       When_Time)).
if walkDownStaircase(Agent, Staircase)then requires(walkDownStaircase(Agent, Staircase), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',262).

 /*  reactive_rule([ happens(walkDownStaircase(Agent,Staircase),
   			Time_From10,
   			Time_Until11)
   	      ],
   	      [ requires(walkDownStaircase(Agent,Staircase),
   			 When_Time)
   	      ]).
 */
 %  "% =================================".
% '->'(
%    at(
%       Agent, 
%       side2(Staircase)), 
%    metreqs(
%       walkDownStaircase(Agent,Staircase))).
walkDownStaircase(Agent, Staircase)if loc_at(Agent, side2(Staircase)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',262).

 /*  l_events(happens(walkDownStaircase(Agent,Staircase),
   		 Time_From12,
   		 Time_From12),
   	 [loc_at(Agent,side2(Staircase))]).
 */
 %  "% =================================".


% [agent,staircase,time]
% Happens(WalkUpStaircase(agent,staircase),time) ->
% HoldsAt(Awake(agent),time) &
% HoldsAt(Standing(agent),time) &
% HoldsAt(At(agent,Side1(staircase)),time).
% '->'(
%    ';'(
%       not(
%          awake(Agent)), 
%       ';'(
%          not(
%             standing(Agent)), 
%          not(
%             at(
%                Agent, 
%                side1(Staircase))))), 
%    not(
%       walkUpStaircase(Agent,Staircase))).
if not awake(Agent);not standing(Agent);not loc_at(Agent, side1(Staircase))then not walkUpStaircase(Agent, Staircase).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',269).

 /*   reactive_rule([  (not(awake(Agent));not(standing(Agent));not(loc_at(Agent, side1(Staircase))))
                    ],
                    [not(walkUpStaircase(Agent, Staircase))]).
 */
 %  "% =================================".
% '->'(
%    metreqs(
%       walkUpStaircase(Agent,Staircase)), 
%    requires(
%       walkUpStaircase(Agent,Staircase), 
%       When_Time)).
if walkUpStaircase(Agent, Staircase)then requires(walkUpStaircase(Agent, Staircase), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',269).

 /*  reactive_rule([ happens(walkUpStaircase(Agent,Staircase),
   			Time_From,
   			Time_Until)
   	      ],
   	      [ requires(walkUpStaircase(Agent,Staircase),
   			 When_Time)
   	      ]).
 */
 %  "% =================================".
% '->'(
%    awake(Agent), 
%    metreqs(
%       walkUpStaircase(Agent,Staircase))).
walkUpStaircase(Agent, Staircase)if awake(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',269).

 /*  l_events(happens(walkUpStaircase(Agent,Staircase),
   		 Time_From6,
   		 Time_From6),
   	 [awake(Agent)]).
 */
 %  "% =================================".
% '->'(
%    metreqs(
%       walkUpStaircase(Agent,Staircase)), 
%    requires(
%       walkUpStaircase(Agent,Staircase), 
%       When_Time)).
if walkUpStaircase(Agent, Staircase)then requires(walkUpStaircase(Agent, Staircase), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',269).

 /*  reactive_rule([ happens(walkUpStaircase(Agent,Staircase),
   			Time_From7,
   			Time_Until8)
   	      ],
   	      [ requires(walkUpStaircase(Agent,Staircase),
   			 When_Time)
   	      ]).
 */
 %  "% =================================".
% '->'(
%    standing(Agent), 
%    metreqs(
%       walkUpStaircase(Agent,Staircase))).
walkUpStaircase(Agent, Staircase)if standing(Agent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',269).

 /*  l_events(happens(walkUpStaircase(Agent,Staircase),
   		 Time_From9,
   		 Time_From9),
   	 [holds(standing(Agent),Time_From9)]).
 */
 %  "% =================================".
% '->'(
%    metreqs(
%       walkUpStaircase(Agent,Staircase)), 
%    requires(
%       walkUpStaircase(Agent,Staircase), 
%       When_Time)).
if walkUpStaircase(Agent, Staircase)then requires(walkUpStaircase(Agent, Staircase), When_Time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',269).

 /*  reactive_rule([ happens(walkUpStaircase(Agent,Staircase),
   			Time_From10,
   			Time_Until11)
   	      ],
   	      [ requires(walkUpStaircase(Agent,Staircase),
   			 When_Time)
   	      ]).
 */
 %  "% =================================".
% '->'(
%    at(
%       Agent, 
%       side1(Staircase)), 
%    metreqs(
%       walkUpStaircase(Agent,Staircase))).
walkUpStaircase(Agent, Staircase)if loc_at(Agent, side1(Staircase)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',269).

 /*  l_events(happens(walkUpStaircase(Agent,Staircase),
   		 Time_From12,
   		 Time_From12),
   	 [loc_at(Agent,side1(Staircase))]).
 */
 %  "% =================================".


%; Effect axioms state that
%; if an agent walks down (up) a staircase,
%; the agent will be at the bottom (top) of the staircase:
% [agent,staircase,room,time]
% Side1(staircase)=room ->
% Initiates(WalkDownStaircase(agent,staircase),At(agent,room),time).
% '->'(
%    side1Pred(Staircase,Room), 
%    initiates(
%       walkDownStaircase(Agent,Staircase), 
%       at(Agent,Room), 
%       Time)).
if side1Pred(Staircase, Room)then initiates(walkDownStaircase(Agent, Staircase), loc_at(Agent, Room)at Time, _).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',277).

 /*  reactive_rule([side1Pred(Staircase,Room)],
   	      [ initiates(walkDownStaircase(Agent,
   					    Staircase),
   			  at(loc_at(Agent,Room),Time),
   			  Initiates)
   	      ]).
 */
 %  "% =================================".


% [agent,staircase,room,time]
% Side2(staircase)=room ->
% Terminates(WalkDownStaircase(agent,staircase),At(agent,room),time).
% '->'(
%    side2Pred(Staircase,Room), 
%    terminates(
%       walkDownStaircase(Agent,Staircase), 
%       at(Agent,Room), 
%       Time)).
if side2Pred(Staircase, Room)then terminates(walkDownStaircase(Agent, Staircase), loc_at(Agent, Room)at Time, _).

 /*  reactive_rule([side2Pred(Staircase,Room)],
   	      [ terminates(walkDownStaircase(Agent,
   					     Staircase),
   			   at(loc_at(Agent,Room),
   			      Time),
   			   Terminates)
   	      ]).
 */
 %  "% =================================".


% [agent,staircase,room,time]
% Side2(staircase)=room ->
% Initiates(WalkUpStaircase(agent,staircase),At(agent,room),time).
% '->'(
%    side2Pred(Staircase,Room), 
%    initiates(
%       walkUpStaircase(Agent,Staircase), 
%       at(Agent,Room), 
%       Time)).
if side2Pred(Staircase, Room)then initiates(walkUpStaircase(Agent, Staircase), loc_at(Agent, Room)at Time, _).

 /*  reactive_rule([side2Pred(Staircase,Room)],
   	      [ initiates(walkUpStaircase(Agent,Staircase),
   			  at(loc_at(Agent,Room),Time),
   			  Initiates)
   	      ]).
 */
 %  "% =================================".


% [agent,staircase,room,time]
% Side1(staircase)=room ->
% Terminates(WalkUpStaircase(agent,staircase),At(agent,room),time).
% '->'(
%    side1Pred(Staircase,Room), 
%    terminates(
%       walkUpStaircase(Agent,Staircase), 
%       at(Agent,Room), 
%       Time)).
if side1Pred(Staircase, Room)then terminates(walkUpStaircase(Agent, Staircase), loc_at(Agent, Room)at Time, _).

 /*  reactive_rule([side1Pred(Staircase,Room)],
   	      [ terminates(walkUpStaircase(Agent,Staircase),
   			   at(loc_at(Agent,Room),
   			      Time),
   			   Terminates)
   	      ]).
 */
 %  "% =================================".


%; A state constraint says that if an agent is outside,
%; the agent is dressed.
% [agent,outside,time]
% HoldsAt(At(agent,outside),time) ->
% HoldsAt(Dressed(agent),time).
% '->'(
%    at(Agent,Outside), 
%    dressed(Agent)).
dressed(Agent)if loc_at(Agent, Outside).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',295).

 /*  l_int(holds(dressed(Agent),Time_At),
         [loc_at(Agent,Outside)]).
 */
 %  "% =================================".
% '->'(
%    not(
%       dressed(Agent)), 
%    not(
%       at(Agent,Outside))).
if not dressed(Agent)then not loc_at(Agent, Outside).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',295).

 /*  reactive_rule([holds(not(dressed(Agent)),Time_At4)],
   	      [not(loc_at(Agent,Outside))]).
 */
 %  "% =================================".


%; room looks out onto outside.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',300).
% function LookOutOnto(room): outside
% function(
%    lookOutOnto(room)).
functions([lookOutOnto/1]).
% mpred_prop(
%    lookOutOnto(room), 
%    function).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',300).
mpred_prop(lookOutOnto(room),function).
% predicate(
%    lookOutOntoPred(room,outside)).
predicates([lookOutOntoPred/2]).
% mpred_prop(
%    lookOutOntoPred(room,outside), 
%    predicate).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',300).
mpred_prop(lookOutOntoPred(room,outside),predicate).
% functional_predicate(lookOutOnto,lookOutOntoPred).
functional_predicate(lookOutOnto,lookOutOntoPred).
% function_argtypes(
%    lookOutOntoPred, 
%    lookOutOnto(room), 
%    outside).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',300).
function_argtypes(lookOutOntoPred,lookOutOnto(room),outside).
% resultIsa(lookOutOnto,outside).
resultIsa(lookOutOnto,outside).
%; location1 is adjacent to location2.

% predicate Adjacent(location,location)
% predicate(
%    adjacent(location,location)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',302).
predicates([adjacent/2]).
% mpred_prop(
%    adjacent(location,location), 
%    predicate).
mpred_prop(adjacent(location,location),predicate).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',305).
%; A state constraint says that
%; two locations are adjacent if and only if
%; they have a portal in common:
% [location1,location2]
 
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',308).
% Adjacent(location1,location2) <->
% {portal}% 
% (Side1(portal)=location1 &
%  Side2(portal)=location2) |
% (Side2(portal)=location1 &
%  Side1(portal)=location2).
% '->'(
%    ','(
%       ';'(
%          ','(
%             side1Pred(Exists_Portal,Location1), 
%             side2Pred(Exists_Portal,Location2)), 
%          ','(
%             side2Pred(Exists_Portal,Location1), 
%             side1Pred(Exists_Portal,Location2))), 
%       some(
%          Exists_Portal, 
%          '$kolem_Fn_731'(Location1,Location2))), 
%    adjacent(Location1,Location2)).
if (side1Pred(Exists_Portal, Location1), side2Pred(Exists_Portal, Location2);side2Pred(Exists_Portal, Location1), side1Pred(Exists_Portal, Location2)), some(Exists_Portal, '$kolem_Fn_731'(Location1, Location2))then adjacent(Location1, Location2).
 %  reactive_rule([(side1Pred(Exists_Portal, Location1), side2Pred(Exists_Portal, Location2);side2Pred(Exists_Portal, Location1), side1Pred(Exists_Portal, Location2)), some(Exists_Portal, '$kolem_Fn_731'(Location1, Location2))], [adjacent(Location1, Location2)]).
 %  "% =================================".
% '->'(
%    ','(
%       side2Pred(Exists_Portal,Location2), 
%       ','(
%          not(
%             adjacent(Location1,Location2)), 
%          some(
%             Exists_Portal, 
%             '$kolem_Fn_731'(Location1,Location2)))), 
%    not(
%       side1Pred(Exists_Portal,Location1))).
if side2Pred(Exists_Portal, Location2), not adjacent(Location1, Location2), some(Exists_Portal, '$kolem_Fn_731'(Location1, Location2))then not side1Pred(Exists_Portal, Location1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',308).

 /*  reactive_rule([ side2Pred(Exists_Portal,Location2),
   		not(adjacent(Location1,Location2)),
   		some(Exists_Portal,
   		     '$kolem_Fn_731'(Location1,Location2))
   	      ],
   	      [not(side1Pred(Exists_Portal,Location1))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       side1Pred(Exists_Portal,Location1), 
%       ','(
%          not(
%             adjacent(Location1,Location2)), 
%          some(
%             Exists_Portal, 
%             '$kolem_Fn_731'(Location1,Location2)))), 
%    not(
%       side2Pred(Exists_Portal,Location2))).
if side1Pred(Exists_Portal, Location1), not adjacent(Location1, Location2), some(Exists_Portal, '$kolem_Fn_731'(Location1, Location2))then not side2Pred(Exists_Portal, Location2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',308).

 /*  reactive_rule([ side1Pred(Exists_Portal,Location1),
   		not(adjacent(Location1,Location2)),
   		some(Exists_Portal,
   		     '$kolem_Fn_731'(Location1,Location2))
   	      ],
   	      [not(side2Pred(Exists_Portal,Location2))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       side1Pred(Exists_Portal,Location2), 
%       ','(
%          not(
%             adjacent(Location1,Location2)), 
%          some(
%             Exists_Portal, 
%             '$kolem_Fn_731'(Location1,Location2)))), 
%    not(
%       side2Pred(Exists_Portal,Location1))).
if side1Pred(Exists_Portal, Location2), not adjacent(Location1, Location2), some(Exists_Portal, '$kolem_Fn_731'(Location1, Location2))then not side2Pred(Exists_Portal, Location1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',308).

 /*  reactive_rule([ side1Pred(Exists_Portal,Location2),
   		not(adjacent(Location1,Location2)),
   		some(Exists_Portal,
   		     '$kolem_Fn_731'(Location1,Location2))
   	      ],
   	      [not(side2Pred(Exists_Portal,Location1))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       side2Pred(Exists_Portal,Location1), 
%       ','(
%          not(
%             adjacent(Location1,Location2)), 
%          some(
%             Exists_Portal, 
%             '$kolem_Fn_731'(Location1,Location2)))), 
%    not(
%       side1Pred(Exists_Portal,Location2))).
if side2Pred(Exists_Portal, Location1), not adjacent(Location1, Location2), some(Exists_Portal, '$kolem_Fn_731'(Location1, Location2))then not side1Pred(Exists_Portal, Location2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',308).

 /*  reactive_rule([ side2Pred(Exists_Portal,Location1),
   		not(adjacent(Location1,Location2)),
   		some(Exists_Portal,
   		     '$kolem_Fn_731'(Location1,Location2))
   	      ],
   	      [not(side1Pred(Exists_Portal,Location2))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       ';'(
%          not(
%             side1Pred(Exists_Portal,Location1)), 
%          not(
%             side2Pred(Exists_Portal,Location2))), 
%       ','(
%          ';'(
%             not(
%                side2Pred(Exists_Portal,Location1)), 
%             not(
%                side1Pred(Exists_Portal,Location2))), 
%          some(
%             Exists_Portal, 
%             '$kolem_Fn_731'(Location1,Location2)))), 
%    not(
%       adjacent(Location1,Location2))).
if (not side1Pred(Exists_Portal, Location1);not side2Pred(Exists_Portal, Location2)), (not side2Pred(Exists_Portal, Location1);not side1Pred(Exists_Portal, Location2)), some(Exists_Portal, '$kolem_Fn_731'(Location1, Location2))then not adjacent(Location1, Location2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',308).

 /*   reactive_rule([  (not(side1Pred(Exists_Portal, Location1));not(side2Pred(Exists_Portal, Location2))),
                       (not(side2Pred(Exists_Portal, Location1));not(side1Pred(Exists_Portal, Location2))),
                      some(Exists_Portal,
                           '$kolem_Fn_731'(Location1, Location2))
                    ],
                    [not(adjacent(Location1, Location2))]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       ';'(
%          not(
%             side2Pred(Exists_Portal,Location1)), 
%          not(
%             side1Pred(Exists_Portal,Location2))), 
%       ','(
%          adjacent(Location1,Location2), 
%          some(
%             Exists_Portal, 
%             '$kolem_Fn_731'(Location1,Location2)))), 
%    side1Pred(Exists_Portal,Location1)).
if (not side2Pred(Exists_Portal, Location1);not side1Pred(Exists_Portal, Location2)), adjacent(Location1, Location2), some(Exists_Portal, '$kolem_Fn_731'(Location1, Location2))then side1Pred(Exists_Portal, Location1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',308).

 /*   reactive_rule([  (not(side2Pred(Exists_Portal, Location1));not(side1Pred(Exists_Portal, Location2))),
                      adjacent(Location1, Location2),
                      some(Exists_Portal,
                           '$kolem_Fn_731'(Location1, Location2))
                    ],
                    [side1Pred(Exists_Portal, Location1)]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       ';'(
%          not(
%             side2Pred(Exists_Portal,Location1)), 
%          not(
%             side1Pred(Exists_Portal,Location2))), 
%       ','(
%          adjacent(Location1,Location2), 
%          some(
%             Exists_Portal, 
%             '$kolem_Fn_731'(Location1,Location2)))), 
%    side2Pred(Exists_Portal,Location2)).
if (not side2Pred(Exists_Portal, Location1);not side1Pred(Exists_Portal, Location2)), adjacent(Location1, Location2), some(Exists_Portal, '$kolem_Fn_731'(Location1, Location2))then side2Pred(Exists_Portal, Location2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',308).

 /*   reactive_rule([  (not(side2Pred(Exists_Portal, Location1));not(side1Pred(Exists_Portal, Location2))),
                      adjacent(Location1, Location2),
                      some(Exists_Portal,
                           '$kolem_Fn_731'(Location1, Location2))
                    ],
                    [side2Pred(Exists_Portal, Location2)]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       ';'(
%          not(
%             side1Pred(Exists_Portal,Location1)), 
%          not(
%             side2Pred(Exists_Portal,Location2))), 
%       ','(
%          adjacent(Location1,Location2), 
%          some(
%             Exists_Portal, 
%             '$kolem_Fn_731'(Location1,Location2)))), 
%    side2Pred(Exists_Portal,Location1)).
if (not side1Pred(Exists_Portal, Location1);not side2Pred(Exists_Portal, Location2)), adjacent(Location1, Location2), some(Exists_Portal, '$kolem_Fn_731'(Location1, Location2))then side2Pred(Exists_Portal, Location1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',308).

 /*   reactive_rule([  (not(side1Pred(Exists_Portal, Location1));not(side2Pred(Exists_Portal, Location2))),
                      adjacent(Location1, Location2),
                      some(Exists_Portal,
                           '$kolem_Fn_731'(Location1, Location2))
                    ],
                    [side2Pred(Exists_Portal, Location1)]).
 */
 %  "% =================================".
% '->'(
%    ','(
%       ';'(
%          not(
%             side1Pred(Exists_Portal,Location1)), 
%          not(
%             side2Pred(Exists_Portal,Location2))), 
%       ','(
%          adjacent(Location1,Location2), 
%          some(
%             Exists_Portal, 
%             '$kolem_Fn_731'(Location1,Location2)))), 
%    side1Pred(Exists_Portal,Location2)).
if (not side1Pred(Exists_Portal, Location1);not side2Pred(Exists_Portal, Location2)), adjacent(Location1, Location2), some(Exists_Portal, '$kolem_Fn_731'(Location1, Location2))then side1Pred(Exists_Portal, Location2).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',308).

 /*   reactive_rule([  (not(side1Pred(Exists_Portal, Location1));not(side2Pred(Exists_Portal, Location2))),
                      adjacent(Location1, Location2),
                      some(Exists_Portal,
                           '$kolem_Fn_731'(Location1, Location2))
                    ],
                    [side1Pred(Exists_Portal, Location2)]).
 */
 %  "% =================================".


%; The ground of outside is ground.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',316).
% function GroundOf(outside): ground
% function(
%    groundOf(outside)).
functions([groundOf/1]).
% mpred_prop(
%    groundOf(outside), 
%    function).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',316).
mpred_prop(groundOf(outside),function).
% predicate(
%    ground(outside,ground)).
predicates([ground/2]).
% mpred_prop(
%    ground(outside,ground), 
%    predicate).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',316).
mpred_prop(ground(outside,ground),predicate).
% functional_predicate(groundOf,ground).
functional_predicate(groundOf,ground).
% function_argtypes(
%    ground, 
%    groundOf(outside), 
%    ground).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',316).
function_argtypes(ground,groundOf(outside),ground).
% resultIsa(groundOf,ground).
resultIsa(groundOf,ground).
%; The sky of outside is sky.

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',318).
% function SkyOf(outside): sky
% function(
%    skyOf(outside)).
functions([skyOf/1]).
% mpred_prop(
%    skyOf(outside), 
%    function).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',318).
mpred_prop(skyOf(outside),function).
% predicate(
%    sky(outside,sky)).
predicates([sky/2]).
% mpred_prop(
%    sky(outside,sky), 
%    predicate).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',318).
mpred_prop(sky(outside,sky),predicate).
% functional_predicate(skyOf,sky).
functional_predicate(skyOf,sky).
% function_argtypes(
%    sky, 
%    skyOf(outside), 
%    sky).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',318).
function_argtypes(sky,skyOf(outside),sky).
% resultIsa(skyOf,sky).
resultIsa(skyOf,sky).
 %; State constraints fix the location of ground and sky:
% [outside,ground,time]
% GroundOf(outside) = ground ->
% HoldsAt(At(ground,outside),time).
% '->'(
%    ground(Outside,Ground), 
%    at(Ground,Outside)).
if ground(Outside, Ground)then loc_at(Ground, Outside).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',322).

 /*  reactive_rule([ground(Outside,Ground)],
   	      [loc_at(Ground,Outside)]).
 */
 %  "% =================================".
% '->'(
%    not(
%       at(Ground,Outside)), 
%    not(
%       ground(Outside,Ground))).
if not loc_at(Ground, Outside)then not ground(Outside, Ground).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',322).

 /*  reactive_rule([not(loc_at(Ground,Outside))],
   	      [not(ground(Outside,Ground))]).
 */
 %  "% =================================".


% [outside,sky,time]
% SkyOf(outside) = sky ->
% HoldsAt(At(sky,outside),time).
% '->'(
%    sky(Outside,Sky), 
%    at(Sky,Outside)).
if sky(Outside, Sky)then loc_at(Sky, Outside).

 /*  reactive_rule([sky(Outside,Sky)],
   	      [loc_at(Sky,Outside)]).
 */
 %  "% =================================".
% '->'(
%    not(
%       at(Sky,Outside)), 
%    not(
%       sky(Outside,Sky))).
if not loc_at(Sky, Outside)then not sky(Outside, Sky).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',327).

 /*  reactive_rule([not(loc_at(Sky,Outside))],
   	      [not(sky(Outside,Sky))]).
 */
 %  "% =================================".


%; End of file.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e',329).
% translate: ending  File: /pack/logicmoo_ec/ext/ec_sources/ecnet/RTSpace.e.lps 
