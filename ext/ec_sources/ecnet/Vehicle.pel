:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/TimeDelayBombing.e',147).
:- call_pel_directive(translate(unskipped,
                                '/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.pel')).
:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(ecalc).
:- call_pel_directive(translate(begining,
                                '/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.pel')).
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; Vehicle: transportation vehicles
%;

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',14).
% sort vehicle: physobj
subsort(vehicle,physobj).

% sort vehiclein: vehicle
subsort(vehiclein,vehicle).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',16).
% sort vehicleon: vehicle
subsort(vehicleon,vehicle).

% sort train: vehicleon
subsort(train,vehicleon).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',18).
% sort carriage: vehiclein
subsort(carriage,vehiclein).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',20).
% sort vehicledoor
sort(vehicledoor).
%; RideTrack

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',24).
% event RideTrack12(train,track)
event(rideTrack12(train,track)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',26).
% event RideTrack21(train,track)
event(rideTrack21(train,track)).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',28).
% [train,track,time]
% Happens(RideTrack12(train,track),time) ->
% HoldsAt(At(train,Side1(track)),time).
happens_at(rideTrack12(Train, Track), Time) ->
    holds_at(at_loc(Train, side1(Track)), Time).


% [train,track,time]
% Happens(RideTrack21(train,track),time) ->
% HoldsAt(At(train,Side2(track)),time).
happens_at(rideTrack21(Train, Track), Time) ->
    holds_at(at_loc(Train, side2(Track)), Time).


% [train,track,location,time]
% Side2(track)=location ->
% Initiates(RideTrack12(train,track),At(train,location),time).
side2(Track)=Location ->
    initiates_at(rideTrack12(Train, Track),
                 at_loc(Train, Location),
                 Time).


% [train,track,location,time]
% Side1(track)=location ->
% Initiates(RideTrack21(train,track),At(train,location),time).
side1(Track)=Location ->
    initiates_at(rideTrack21(Train, Track),
                 at_loc(Train, Location),
                 Time).


% [train,track,location,time]
% Side1(track)=location ->
% Terminates(RideTrack12(train,track),At(train,location),time).
side1(Track)=Location ->
    terminates_at(rideTrack12(Train, Track),
                  at_loc(Train, Location),
                  Time).


% [train,track,location,time]
% Side2(track)=location ->
% Terminates(RideTrack21(train,track),At(train,location),time).
side2(Track)=Location ->
    terminates_at(rideTrack21(Train, Track),
                  at_loc(Train, Location),
                  Time).


%; DriveStreet

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',54).
% event DriveStreet12(vehicle,street)
event(driveStreet12(vehicle,street)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',56).
% event DriveStreet21(vehicle,street)
event(driveStreet21(vehicle,street)).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',58).
% [vehicle,street,time]
% Happens(DriveStreet12(vehicle,street),time) ->
% HoldsAt(At(vehicle,Side1(street)),time).
happens_at(driveStreet12(Vehicle, Street), Time) ->
    holds_at(at_loc(Vehicle, side1(Street)), Time).


% [vehicle,street,time]
% Happens(DriveStreet21(vehicle,street),time) ->
% HoldsAt(At(vehicle,Side2(street)),time).
happens_at(driveStreet21(Vehicle, Street), Time) ->
    holds_at(at_loc(Vehicle, side2(Street)), Time).


% [vehicle,street,location,time]
% Side2(street)=location ->
% Initiates(DriveStreet12(vehicle,street),At(vehicle,location),time).
side2(Street)=Location ->
    initiates_at(driveStreet12(Vehicle, Street),
                 at_loc(Vehicle, Location),
                 Time).


% [vehicle,street,location,time]
% Side1(street)=location ->
% Initiates(DriveStreet21(vehicle,street),At(vehicle,location),time).
side1(Street)=Location ->
    initiates_at(driveStreet21(Vehicle, Street),
                 at_loc(Vehicle, Location),
                 Time).


% [vehicle,street,location,time]
% Side1(street)=location ->
% Terminates(DriveStreet12(vehicle,street),At(vehicle,location),time).
side1(Street)=Location ->
    terminates_at(driveStreet12(Vehicle, Street),
                  at_loc(Vehicle, Location),
                  Time).


% [vehicle,street,location,time]
% Side2(street)=location ->
% Terminates(DriveStreet21(vehicle,street),At(vehicle,location),time).
side2(Street)=Location ->
    terminates_at(driveStreet21(Vehicle, Street),
                  at_loc(Vehicle, Location),
                  Time).


%; Pulling

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',84).
% event PointToward(agent,horse,street)
event(pointToward(agent,horse,street)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',86).
% fluent PointedToward(horse,street)
fluent(pointedToward(horse,street)).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',88).
% [horse,street1,street2,time]
% HoldsAt(PointedToward(horse,street1),time) &
% HoldsAt(PointedToward(horse,street2),time) ->
% street1=street2.
holds_at(pointedToward(Horse, Street1), Time), holds_at(pointedToward(Horse, Street2), Time) ->
    Street1=Street2.


% [agent,horse,street,time]
% Initiates(PointToward(agent,horse,street),
%           PointedToward(horse,street),
%           time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',94).
initiates_at(pointToward(Agent,Horse,Street),
	     pointedToward(Horse,Street),
	     Time).


% [agent,horse,street1,street2,time]
% HoldsAt(PointedToward(horse,street1),time) ->
% Terminates(PointToward(agent,horse,street2),
%            PointedToward(horse,street1),
%            time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',99).
holds_at(pointedToward(Horse, Street1), Time) ->
    terminates_at(pointToward(Agent, Horse, Street2),
                  pointedToward(Horse, Street1),
                  Time).


% [horse,vehicle,street,time]
% Terminates(PullStreet12(horse,vehicle,street),
%            PointedToward(horse,street),
%            time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',105).
terminates_at(pullStreet12(Horse,Vehicle,Street),
	      pointedToward(Horse,Street),
	      Time).


% [horse,vehicle,street,time]
% Terminates(PullStreet21(horse,vehicle,street),
%            PointedToward(horse,street),
%            time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',110).
terminates_at(pullStreet21(Horse,Vehicle,Street),
	      pointedToward(Horse,Street),
	      Time).


% [horse,street,time]
% HoldsAt(PointedToward(horse,street),time) ->
% HoldsAt(NearPortal(horse,street),time).
holds_at(pointedToward(Horse, Street), Time) ->
    holds_at(nearPortal(Horse, Street), Time).

% event Lash(agent,horse)
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',117).
event(lash(agent,horse)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',120).
% fluent HitchedTo(horse,vehicle)
fluent(hitchedTo(horse,vehicle)).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',122).
% [horse,vehicle,location,time]
% HoldsAt(HitchedTo(horse,vehicle),time) &
% HoldsAt(At(vehicle,location),time) ->
% HoldsAt(At(horse,location),time).
holds_at(hitchedTo(Horse, Vehicle), Time), holds_at(at_loc(Vehicle, Location), Time) ->
    holds_at(at_loc(Horse, Location), Time).


% [agent,horse,vehicle,street,time]
% Happens(Lash(agent,horse),time) &
% HoldsAt(PointedToward(horse,street),time) &
% HoldsAt(HitchedTo(horse,vehicle),time) &
% HoldsAt(At(horse,Side1(street)),time) ->
% Happens(PullStreet12(horse,vehicle,street),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',128).
happens_at(lash(Agent, Horse), Time), holds_at(pointedToward(Horse, Street), Time), holds_at(hitchedTo(Horse, Vehicle), Time), holds_at(at_loc(Horse, side1(Street)), Time) ->
    happens_at(pullStreet12(Horse, Vehicle, Street),
               Time).


% [agent,horse,vehicle,street,time]
% Happens(Lash(agent,horse),time) &
% HoldsAt(PointedToward(horse,street),time) &
% HoldsAt(HitchedTo(horse,vehicle),time) &
% HoldsAt(At(horse,Side2(street)),time) ->
% Happens(PullStreet21(horse,vehicle,street),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',135).
happens_at(lash(Agent, Horse), Time), holds_at(pointedToward(Horse, Street), Time), holds_at(hitchedTo(Horse, Vehicle), Time), holds_at(at_loc(Horse, side2(Street)), Time) ->
    happens_at(pullStreet21(Horse, Vehicle, Street),
               Time).

% event PullStreet12(horse,vehicle,street)
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',140).
event(pullStreet12(horse,vehicle,street)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',143).
% event PullStreet21(horse,vehicle,street)
event(pullStreet21(horse,vehicle,street)).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',145).
% [horse,vehicle,street,time]
% Happens(PullStreet12(horse,vehicle,street),time) ->
% Happens(DriveStreet12(vehicle,street),time).
happens_at(pullStreet12(Horse, Vehicle, Street), Time) ->
    happens_at(driveStreet12(Vehicle, Street), Time).


% [horse,vehicle,street,time]
% Happens(PullStreet21(horse,vehicle,street),time) ->
% Happens(DriveStreet21(vehicle,street),time).
happens_at(pullStreet21(Horse, Vehicle, Street), Time) ->
    happens_at(driveStreet21(Vehicle, Street), Time).


% [horse,vehicle,street,time]
% Happens(PullStreet12(horse,vehicle,street),time) ->
% HoldsAt(At(horse,Side1(street)),time).
happens_at(pullStreet12(Horse, Vehicle, Street), Time) ->
    holds_at(at_loc(Horse, side1(Street)), Time).


% [horse,vehicle,street,time]
% Happens(PullStreet21(horse,vehicle,street),time) ->
% HoldsAt(At(horse,Side2(street)),time).
happens_at(pullStreet21(Horse, Vehicle, Street), Time) ->
    holds_at(at_loc(Horse, side2(Street)), Time).


% [horse,vehicle,street,location,time]
% Side2(street)=location ->
% Initiates(PullStreet12(horse,vehicle,street),At(horse,location),time).
side2(Street)=Location ->
    initiates_at(pullStreet12(Horse, Vehicle, Street),
                 at_loc(Horse, Location),
                 Time).


% [horse,vehicle,street,location,time]
% Side1(street)=location ->
% Initiates(PullStreet21(horse,vehicle,street),At(horse,location),time).
side1(Street)=Location ->
    initiates_at(pullStreet21(Horse, Vehicle, Street),
                 at_loc(Horse, Location),
                 Time).


% [horse,vehicle,street,location,time]
% Side1(street)=location ->
% Terminates(PullStreet12(horse,vehicle,street),At(horse,location),time).
side1(Street)=Location ->
    terminates_at(pullStreet12(Horse, Vehicle, Street),
                  at_loc(Horse, Location),
                  Time).


% [horse,vehicle,street,location,time]
% Side2(street)=location ->
% Terminates(PullStreet21(horse,vehicle,street),At(horse,location),time).
side2(Street)=Location ->
    terminates_at(pullStreet21(Horse, Vehicle, Street),
                  at_loc(Horse, Location),
                  Time).


%; OnVehicle

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',179).
% fluent OnVehicle(object,vehicleon)
fluent(onVehicle(object,vehicleon)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',181).
% event GetOnVehicle(agent,vehicleon)
event(getOnVehicle(agent,vehicleon)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',183).
% event GetOffVehicle(agent,vehicleon)
event(getOffVehicle(agent,vehicleon)).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',185).
% [vehicleon1,vehicleon2,time]
% HoldsAt(OnVehicle(vehicleon1,vehicleon2),time) ->
% vehicleon1!=vehicleon2.
holds_at(onVehicle(Vehicleon1, Vehicleon2), Time) ->
    Vehicleon1\=Vehicleon2.


% [vehicleon1,vehicleon2,time]
% HoldsAt(OnVehicle(vehicleon1,vehicleon2),time) ->
% !HoldsAt(OnVehicle(vehicleon2,vehicleon1),time).
holds_at(onVehicle(Vehicleon1, Vehicleon2), Time) ->
    holds_at(not(onVehicle(Vehicleon2, Vehicleon1)), Time).


% [agent,vehicleon,time]
% Initiates(GetOnVehicle(agent,vehicleon),OnVehicle(agent,vehicleon),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',194).
initiates_at(getOnVehicle(Agent,Vehicleon),
	     onVehicle(Agent,Vehicleon),
	     Time).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',196).
% [agent,vehicleon,time]
% Happens(GetOnVehicle(agent,vehicleon),time) ->
% {location}% 
%  HoldsAt(At(agent,location),time) &
%  HoldsAt(At(vehicleon,location),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',198).
exists([Location],  (happens_at(getOnVehicle(Agent, Vehicleon), Time)->holds_at(at_loc(Agent, Location), Time), holds_at(at_loc(Vehicleon, Location), Time))).


% [agent,vehicleon,time]
% Terminates(GetOffVehicle(agent,vehicleon),OnVehicle(agent,vehicleon),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',203).
terminates_at(getOffVehicle(Agent,Vehicleon),
	      onVehicle(Agent,Vehicleon),
	      Time).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',205).
% [agent,vehicleon,time]
% Happens(GetOffVehicle(agent,vehicleon),time) ->
% HoldsAt(OnVehicle(agent,vehicleon),time).
happens_at(getOffVehicle(Agent, Vehicleon), Time) ->
    holds_at(onVehicle(Agent, Vehicleon), Time).


% [agent,vehicleon,location,time]
% Releases(GetOnVehicle(agent,vehicleon),
%          At(agent,location),
%          time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',210).
releases_at(getOnVehicle(Agent,Vehicleon),
	    at_loc(Agent,Location),
	    Time).


%;[agent,vehicleon,location1,location2,time]
%;HoldsAt(At(vehicleon,location1),time) &
%;location1 != location2 ->
%;Terminates(GetOffVehicle(agent,vehicleon),
%;           At(agent,location2),
%;           time).
% [agent,vehicleon,location,time]
% HoldsAt(At(vehicleon,location),time) ->
% Initiates(GetOffVehicle(agent,vehicleon),
%           At(agent,location),
%           time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',221).
holds_at(at_loc(Vehicleon, Location), Time) ->
    initiates_at(getOffVehicle(Agent, Vehicleon),
                 at_loc(Agent, Location),
                 Time).


% [object,vehicleon,location,time]
% HoldsAt(OnVehicle(object,vehicleon),time) &
% HoldsAt(At(vehicleon,location),time) ->
% HoldsAt(At(object,location),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',228).
holds_at(onVehicle(Object, Vehicleon), Time), holds_at(at_loc(Vehicleon, Location), Time) ->
    holds_at(at_loc(Object, Location), Time).


%; InVehicle

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',234).
% fluent InVehicle(object,vehiclein)
fluent(inVehicle(object,vehiclein)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',236).
% event GetInVehicle(agent,vehiclein)
event(getInVehicle(agent,vehiclein)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',238).
% event GetOutOfVehicle(agent,vehiclein)
event(getOutOfVehicle(agent,vehiclein)).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',240).
% [vehiclein1,vehiclein2,time]
% HoldsAt(InVehicle(vehiclein1,vehiclein2),time) ->
% vehiclein1!=vehiclein2.
holds_at(inVehicle(Vehiclein1, Vehiclein2), Time) ->
    Vehiclein1\=Vehiclein2.


% [vehiclein1,vehiclein2,time]
% HoldsAt(InVehicle(vehiclein1,vehiclein2),time) ->
% !HoldsAt(InVehicle(vehiclein2,vehiclein1),time).
holds_at(inVehicle(Vehiclein1, Vehiclein2), Time) ->
    holds_at(not(inVehicle(Vehiclein2, Vehiclein1)), Time).


% [agent,vehiclein,time]
% Initiates(GetInVehicle(agent,vehiclein),InVehicle(agent,vehiclein),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',249).
initiates_at(getInVehicle(Agent,Vehiclein),
	     inVehicle(Agent,Vehiclein),
	     Time).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',251).
% [agent,vehiclein,time]
% Happens(GetInVehicle(agent,vehiclein),time) ->
% {location}% 
%  HoldsAt(At(agent,location),time) &
%  HoldsAt(At(vehiclein,location),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',253).
exists([Location],  (happens_at(getInVehicle(Agent, Vehiclein), Time)->holds_at(at_loc(Agent, Location), Time), holds_at(at_loc(Vehiclein, Location), Time))).


% [agent,vehiclein,time]
% Terminates(GetOutOfVehicle(agent,vehiclein),InVehicle(agent,vehiclein),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',258).
terminates_at(getOutOfVehicle(Agent,Vehiclein),
	      inVehicle(Agent,Vehiclein),
	      Time).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',260).
% [agent,vehiclein,time]
% Happens(GetOutOfVehicle(agent,vehiclein),time) ->
% HoldsAt(InVehicle(agent,vehiclein),time).
happens_at(getOutOfVehicle(Agent, Vehiclein), Time) ->
    holds_at(inVehicle(Agent, Vehiclein), Time).


% [agent,vehiclein,location,time]
% Releases(GetInVehicle(agent,vehiclein),
%          At(agent,location),
%          time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',265).
releases_at(getInVehicle(Agent,Vehiclein),
	    at_loc(Agent,Location),
	    Time).


%;[agent,vehiclein,location1,location2,time]
%;HoldsAt(At(vehiclein,location1),time) &
%;location1 != location2 ->
%;Terminates(GetOutOfVehicle(agent,vehiclein),
%;           At(agent,location2),
%;           time).
% [agent,vehiclein,location,time]
% HoldsAt(At(vehiclein,location),time) ->
% Initiates(GetOutOfVehicle(agent,vehiclein),
%           At(agent,location),
%           time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',276).
holds_at(at_loc(Vehiclein, Location), Time) ->
    initiates_at(getOutOfVehicle(Agent, Vehiclein),
                 at_loc(Agent, Location),
                 Time).


% [object,vehiclein,location,time]
% HoldsAt(InVehicle(object,vehiclein),time) &
% HoldsAt(At(vehiclein,location),time) ->
% HoldsAt(At(object,location),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',283).
holds_at(inVehicle(Object, Vehiclein), Time), holds_at(at_loc(Vehiclein, Location), Time) ->
    holds_at(at_loc(Object, Location), Time).


%; vehicle door
%; door does not have to be open for entry; passenger can jump in

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',290).
% event VehicleDoorOpen(agent,vehicledoor)
event(vehicleDoorOpen(agent,vehicledoor)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',292).
% event VehicleDoorClose(agent,vehicledoor)
event(vehicleDoorClose(agent,vehicledoor)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',294).
% fluent VehicleDoorIsOpen(vehicledoor)
fluent(vehicleDoorIsOpen(vehicledoor)).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',296).
% [agent,vehicledoor,time]
% Happens(VehicleDoorOpen(agent,vehicledoor),time) ->
% HoldsAt(Awake(agent),time) &
% !HoldsAt(VehicleDoorIsOpen(vehicledoor),time).
happens_at(vehicleDoorOpen(Agent, Vehicledoor), Time) ->
    holds_at(awake(Agent), Time),
    holds_at(not(vehicleDoorIsOpen(Vehicledoor)), Time).


% [agent,vehicledoor,time]
% Initiates(VehicleDoorOpen(agent,vehicledoor),
%           VehicleDoorIsOpen(vehicledoor),
%           time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',302).
initiates_at(vehicleDoorOpen(Agent,Vehicledoor),
	     vehicleDoorIsOpen(Vehicledoor),
	     Time).


% [agent,vehicledoor,time]
% Happens(VehicleDoorClose(agent,vehicledoor),time) ->
% HoldsAt(Awake(agent),time) &
% HoldsAt(VehicleDoorIsOpen(vehicledoor),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',307).
happens_at(vehicleDoorClose(Agent, Vehicledoor), Time) ->
    holds_at(awake(Agent), Time),
    holds_at(vehicleDoorIsOpen(Vehicledoor), Time).


% [agent,vehicledoor,time]
% Terminates(VehicleDoorClose(agent,vehicledoor),
%            VehicleDoorIsOpen(vehicledoor),
%            time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',312).
terminates_at(vehicleDoorClose(Agent,Vehicledoor),
	      vehicleDoorIsOpen(Vehicledoor),
	      Time).


%; ticketagent

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',318).
% sort ticketagent: agent
subsort(ticketagent,agent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',320).
% fluent BeTicketAgent0(ticketagent)
fluent(beTicketAgent0(ticketagent)).

% fluent BeTicketAgent1(ticketagent)
fluent(beTicketAgent1(ticketagent)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',322).
% fluent BeTicketAgent2(ticketagent)
fluent(beTicketAgent2(ticketagent)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',324).
% xor BeTicketAgent0, BeTicketAgent1, BeTicketAgent2
xor([beTicketAgent0,beTicketAgent1,beTicketAgent2]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',326).
% [ticketagent,agent,ticket,time]
% HoldsAt(BeTicketAgent0(ticketagent),time) ->
% Terminates(Request(agent,ticketagent,ticket),
%            BeTicketAgent0(ticketagent),
%            time).
holds_at(beTicketAgent0(Ticketagent), Time) ->
    terminates_at(request(Agent, Ticketagent, Ticket),
                  beTicketAgent0(Ticketagent),
                  Time).


% [ticketagent,agent,ticket,time]
% HoldsAt(BeTicketAgent0(ticketagent),time) ->
% Initiates(Request(agent,ticketagent,ticket),
%           BeTicketAgent1(ticketagent),
%           time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',333).
holds_at(beTicketAgent0(Ticketagent), Time) ->
    initiates_at(request(Agent, Ticketagent, Ticket),
                 beTicketAgent1(Ticketagent),
                 Time).


% [ticketagent,agent,ticket,time]
% HoldsAt(BeTicketAgent1(ticketagent),time) &
% HoldsAt(KnowRequest(ticketagent,agent,ticket),time) ->
% Happens(PickUp(ticketagent,ticket),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',339).
holds_at(beTicketAgent1(Ticketagent), Time), holds_at(knowRequest(Ticketagent, Agent, Ticket), Time) ->
    happens_at(pickUp(Ticketagent, Ticket), Time).


% [ticketagent,ticket,time]
% HoldsAt(BeTicketAgent1(ticketagent),time) ->
% Terminates(PickUp(ticketagent,ticket),
%            BeTicketAgent1(ticketagent),
%            time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',344).
holds_at(beTicketAgent1(Ticketagent), Time) ->
    terminates_at(pickUp(Ticketagent, Ticket),
                  beTicketAgent1(Ticketagent),
                  Time).


% [ticketagent,ticket,time]
% HoldsAt(BeTicketAgent1(ticketagent),time) ->
% Initiates(PickUp(ticketagent,ticket),
%           BeTicketAgent2(ticketagent),
%           time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',350).
holds_at(beTicketAgent1(Ticketagent), Time) ->
    initiates_at(pickUp(Ticketagent, Ticket),
                 beTicketAgent2(Ticketagent),
                 Time).


% [ticketagent,agent,ticket,time]
% HoldsAt(BeTicketAgent2(ticketagent),time) &
% HoldsAt(KnowRequest(ticketagent,agent,ticket),time) ->
% Happens(HandTo(ticketagent,agent,ticket),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',356).
holds_at(beTicketAgent2(Ticketagent), Time), holds_at(knowRequest(Ticketagent, Agent, Ticket), Time) ->
    happens_at(handTo(Ticketagent, Agent, Ticket), Time).


% [ticketagent,ticket,agent,time]
% HoldsAt(BeTicketAgent2(ticketagent),time) ->
% Terminates(HandTo(ticketagent,agent,ticket),
%            BeTicketAgent2(ticketagent),
%            time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',361).
holds_at(beTicketAgent2(Ticketagent), Time) ->
    terminates_at(handTo(Ticketagent, Agent, Ticket),
                  beTicketAgent2(Ticketagent),
                  Time).


% [ticketagent,ticket,agent,time]
% HoldsAt(BeTicketAgent2(ticketagent),time) ->
% Initiates(HandTo(ticketagent,agent,ticket),
%           BeTicketAgent0(ticketagent),
%           time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',367).
holds_at(beTicketAgent2(Ticketagent), Time) ->
    initiates_at(handTo(Ticketagent, Agent, Ticket),
                 beTicketAgent0(Ticketagent),
                 Time).


%; End of file.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.e',371).
:- call_pel_directive(translate(ending,
                                '/pack/logicmoo_ec/ext/ec_sources/ecnet/Vehicle.pel')).
