:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/foundations/EC.e',41).
:- call_pel_directive(translate(unskipped,
                                '/pack/logicmoo_ec/ext/ec_sources/foundations/ECTraj.pel')).
:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(ecalc).
:- call_pel_directive(translate(begining,
                                '/pack/logicmoo_ec/ext/ec_sources/foundations/ECTraj.pel')).
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @incollection{MillerShanahan:2002,
%;   author = "Rob Miller and Murray Shanahan",
%;   year = "2002",
%;   title = "Some alternative formulations of the event calculus",
%;   editor = "Antonis C. Kakas and Fariba Sadri",
%;   booktitle = "Computational Logic: Logic Programming and Beyond: Essays in Honour of \uppercase{R}obert \uppercase{A}. \uppercase{K}owalski, Part \uppercase{II}",
%;   series = "Lecture Notes in Computer Science",
%;   volume = "2408",
%;   pages = "452--490",
%;   address = "Berlin",
%;   publisher = "Springer",
%; }
%;

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/foundations/ECTraj.e',25).
% predicate Clipped(time,fluent,time)
predicate(clipped(time,fluent,time)).

% predicate Declipped(time,fluent,time)
predicate(declipped(time,fluent,time)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/foundations/ECTraj.e',28).
% predicate Trajectory(fluent,time,fluent,offset)
predicate(trajectory(fluent,time,fluent,offset)).

% predicate AntiTrajectory(fluent,time,fluent,offset)
predicate(antiTrajectory(fluent,time,fluent,offset)).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/foundations/ECTraj.e',31).
% [event,fluent,fluent2,offset,time]
% Happens(event,time) &
% Initiates(event,fluent,time) &
% 0 < offset &
% Trajectory(fluent,time,fluent2,offset) &
% !Clipped(time,fluent,time+offset) ->
% HoldsAt(fluent2,time+offset).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/foundations/ECTraj.e',31).
happens_at(Event, Time), initiates_at(Event, Fluent, Time), 0<Offset, trajectory(Fluent, Time, Fluent2, Offset), not(clipped(Time, Fluent, Time+Offset)) ->
    holds_at(Fluent2, Time+Offset).


% [event,fluent,fluent2,offset,time]
% Happens(event,time) &
% Terminates(event,fluent,time) &
% 0 < offset &
% AntiTrajectory(fluent,time,fluent2,offset) &
% !Declipped(time,fluent,time+offset) ->
% HoldsAt(fluent2,time+offset).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/foundations/ECTraj.e',40).
happens_at(Event, Time), terminates_at(Event, Fluent, Time), 0<Offset, antiTrajectory(Fluent, Time, Fluent2, Offset), not(declipped(Time, Fluent, Time+Offset)) ->
    holds_at(Fluent2, Time+Offset).


%; End of file.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/foundations/ECTraj.e',46).
:- call_pel_directive(translate(ending,
                                '/pack/logicmoo_ec/ext/ec_sources/foundations/ECTraj.pel')).
