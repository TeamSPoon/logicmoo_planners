:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/foundations/DEC.e',73).
% From E: 
% 
% :-call_pel_directive(translate(unskipped,'/pack/logicmoo_ec/ext/ec_sources/foundations/ECCausal.e.lps')).
:- call_pel_directive(translate(unskipped,
                                '/pack/logicmoo_ec/ext/ec_sources/foundations/ECCausal.e.lps')).
:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(lps).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/foundations/DEC.e',73).
% From E: 
% 
% :-call_pel_directive(translate(begining,'/pack/logicmoo_ec/ext/ec_sources/foundations/ECCausal.e.lps')).
:- call_pel_directive(translate(begining,
                                '/pack/logicmoo_ec/ext/ec_sources/foundations/ECCausal.e.lps')).
% Sat, 10 Oct 2020 14:56:19 GMT File: <stream>(0x5597f296b000)%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; Causal Constraints
%;
%; @inproceedings{Shanahan:1999a,
%;   author = "Murray Shanahan",
%;   year = "1999",
%;   title = "The ramification problem in the event calculus",
%;   booktitle = "\uppercase{P}roceedings of the \uppercase{S}ixteenth \uppercase{I}nternational \uppercase{J}oint \uppercase{C}onference on \uppercase{A}rtificial \uppercase{I}ntelligence",
%;   pages = "140--146",
%;   address = "San Mateo, CA",
%;   publisher = "Morgan Kaufmann",
%; }
%;

% predicate Started(fluent,time)
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/foundations/ECCausal.e',24).
% From E: 
% 
% predicate(started(fluent,time)).
mpred_prop(started(fluent,time),predicate).
predicates([started/2]).

% predicate Stopped(fluent,time)
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/foundations/ECCausal.e',24).
% From E: 
% 
% predicate(stopped(fluent,time)).
mpred_prop(stopped(fluent,time),predicate).
predicates([stopped/2]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/foundations/ECCausal.e',27).
% [fluent,time]
% Started(fluent,time) <->
% (HoldsAt(fluent,time) |
%  ({event} Happens(event,time) & Initiates(event,fluent,time))).
% From E: 
% 
% <->(
%    started(Fluent,Time), 
%    (holds_at(Fluent,Time) ; 
%     exists(
%        [Event], 
%        (happens_at(Event,Time) , 
%         initiates_at(Event,Fluent,Time))))).
 %   [Time].
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/foundations/ECCausal.e',27).
started(Fluent, Time) <->
    (   holds_at(Fluent, Time)
    ;   exists([Event],
                (happens_at(Event, Time), initiates(Event, at(Fluent, Time))))
    ).


% [fluent,time]
% Stopped(fluent,time) <->
% (!HoldsAt(fluent,time) |
%  ({event} Happens(event,time) & Terminates(event,fluent,time))).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/foundations/ECCausal.e',33).
% From E: 
% 
% <->(
%    stopped(Fluent,Time), 
%    (holds_at(not(Fluent),Time) ; 
%     exists(
%        [Event], 
%        (happens_at(Event,Time) , 
%         terminates_at(Event,Fluent,Time))))).
 %   [Time].
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/foundations/ECCausal.e',33).
stopped(Fluent, Time) <->
    (   false(holds_at(Fluent, Time))
    ;   exists([Event],
                (happens_at(Event, Time), terminates(Event, at(Fluent, Time))))
    ).

% predicate Initiated(fluent,time)
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/foundations/ECCausal.e',36).
% From E: 
% 
% predicate(initiated(fluent,time)).
mpred_prop(initiated(fluent,time),predicate).
predicates([initiated/2]).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/foundations/ECCausal.e',38).
% predicate Terminated(fluent,time)
% From E: 
% 
% predicate(terminated(fluent,time)).
mpred_prop(terminated(fluent,time),predicate).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/foundations/ECCausal.e',38).
predicates([terminated/2]).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/foundations/ECCausal.e',40).
% [fluent,time]
% Initiated(fluent,time) <->
% (Started(fluent,time) &
%  !({event} Happens(event,time) & Terminates(event,fluent,time))).
% From E: 
% 
% <->(
%    initiated(Fluent,Time), 
%    (started(Fluent,Time) , 
%     not(
%        exists(
%           [Event], 
%           (happens_at(Event,Time) , 
%            terminates_at(Event,Fluent,Time)))))).
 %   [Time].
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/foundations/ECCausal.e',40).
initiated(Fluent, Time) <->
    started(Fluent, Time),
    false((happens_at(Event, Time), terminates_at(Event, Fluent, Time))).


% [fluent,time]
% Terminated(fluent,time) <->
% (Stopped(fluent,time) &
%  !({event} Happens(event,time) & Initiates(event,fluent,time))).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/foundations/ECCausal.e',46).
% From E: 
% 
% <->(
%    terminated(Fluent,Time), 
%    (stopped(Fluent,Time) , 
%     not(
%        exists(
%           [Event], 
%           (happens_at(Event,Time) , 
%            initiates_at(Event,Fluent,Time)))))).
 %   [Time].
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/foundations/ECCausal.e',46).
terminated(Fluent, Time) <->
    stopped(Fluent, Time),
    false((happens_at(Event, Time), initiates_at(Event, Fluent, Time))).


%; End of file.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/foundations/ECCausal.e',49).
% From E: 
% 
% :-call_pel_directive(translate(ending,'/pack/logicmoo_ec/ext/ec_sources/foundations/ECCausal.e.lps')).
:- call_pel_directive(translate(ending,
                                '/pack/logicmoo_ec/ext/ec_sources/foundations/ECCausal.e.lps')).
