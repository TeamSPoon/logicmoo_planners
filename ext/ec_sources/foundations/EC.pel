:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/foundations/ECCausal.e',49).
:- call_pel_directive(translate(unskipped,
                                '/pack/logicmoo_ec/ext/ec_sources/foundations/EC.pel')).
:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(ecalc).
:- call_pel_directive(translate(begining,
                                '/pack/logicmoo_ec/ext/ec_sources/foundations/EC.pel')).
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; Event Calculus (EC)
%;
%; @incollection{MillerShanahan:2002,
%;   author = "Rob Miller and Murray Shanahan",
%;   year = "2002",
%;   title = "Some alternative formulations of the event calculus",
%;   editor = "Antonis C. Kakas and Fariba Sadri",
%;   booktitle = "Computational Logic: Logic Programming and Beyond: Essays in Honour of \uppercase{R}obert \uppercase{A}. \uppercase{K}owalski, Part \uppercase{II}",
%;   series = "Lecture Notes in Computer Science",
%;   volume = "2408",
%;   pages = "452--490",
%;   address = "Berlin",
%;   publisher = "Springer",
%; }
%;

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/foundations/EC.e',27).
% sort time: integer
subsort(time,integer).

% sort offset: integer
subsort(offset,integer).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/foundations/EC.e',30).
% reified sort fluent
reified_sort(fluent).

% reified sort event
reified_sort(event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/foundations/EC.e',33).
% predicate Happens(event,time)
predicate(happens_at(event,time)).

% predicate HoldsAt(fluent,time)
predicate(holds_at(fluent,time)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/foundations/EC.e',35).
% predicate ReleasedAt(fluent,time)
predicate(released_at(fluent,time)).

% predicate Initiates(event,fluent,time)
predicate(initiates_at(event,fluent,time)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/foundations/EC.e',37).
% predicate Terminates(event,fluent,time)
predicate(terminates_at(event,fluent,time)).

% predicate Releases(event,fluent,time)
predicate(releases_at(event,fluent,time)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/foundations/EC.e',39).
% predicate Trajectory(fluent,time,fluent,offset)
predicate(trajectory(fluent,time,fluent,offset)).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/foundations/EC.e',41).
%; End of file.
:- call_pel_directive(translate(ending,
                                '/pack/logicmoo_ec/ext/ec_sources/foundations/EC.pel')).
