:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/ecnet/XWalk.e',170).
:- call_pel_directive(translate(unskipped,
                                '/pack/logicmoo_ec/ext/ec_sources/foundations/DEC.pel')).
:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(ecalc).
:- call_pel_directive(translate(begining,
                                '/pack/logicmoo_ec/ext/ec_sources/foundations/DEC.pel')).
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; Discrete Event Calculus (DEC)
%;
%; @article{Mueller:2004a,
%;   author = "Erik T. Mueller",
%;   year = "2004",
%;   title = "Event calculus reasoning through satisfiability",
%;   journal = "Journal of Logic and Computation",
%;   volume = "14",
%;   number = "5",
%;   pages = "703--730",
%; }
%;

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/foundations/DEC.e',24).
% sort time: integer
subsort(time,integer).

% sort offset: integer
subsort(offset,integer).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/foundations/DEC.e',27).
% reified sort fluent
reified_sort(fluent).

% reified sort event
reified_sort(event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/foundations/DEC.e',30).
% predicate Happens(event,time)
predicate(happens_at(event,time)).

% predicate HoldsAt(fluent,time)
predicate(holds_at(fluent,time)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/foundations/DEC.e',32).
% predicate ReleasedAt(fluent,time)
predicate(released_at(fluent,time)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/foundations/DEC.e',34).
% predicate Initiates(event,fluent,time)
predicate(initiates_at(event,fluent,time)).

% predicate Terminates(event,fluent,time)
predicate(terminates_at(event,fluent,time)).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/foundations/DEC.e',36).
% predicate Releases(event,fluent,time)
predicate(releases_at(event,fluent,time)).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/foundations/DEC.e',38).
% [fluent,time]
% (HoldsAt(fluent,time) &
%  !ReleasedAt(fluent,time+1) &
%  !({event} Happens(event,time) & Terminates(event,fluent,time))) ->
% HoldsAt(fluent,time+1).
holds_at(Fluent, Time), not(released_at(Fluent, Time+1)), not(exists([Event],  (happens_at(Event, Time), terminates_at(Event, Fluent, Time)))) ->
    holds_at(Fluent, Time+1).


% [fluent,time]
% (!HoldsAt(fluent,time) &
%  !ReleasedAt(fluent,time+1) &
%  !({event} Happens(event,time) & Initiates(event,fluent,time))) ->
% !HoldsAt(fluent,time+1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/foundations/DEC.e',45).
holds_at(not(Fluent), Time), not(released_at(Fluent, Time+1)), not(exists([Event],  (happens_at(Event, Time), initiates_at(Event, Fluent, Time)))) ->
    holds_at(not(Fluent), Time+1).


% [fluent,time]
% (!ReleasedAt(fluent,time) &
%  !({event} Happens(event,time) & Releases(event,fluent,time))) ->
% !ReleasedAt(fluent,time+1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/foundations/DEC.e',51).
not(released_at(Fluent, Time)), not(exists([Event],  (happens_at(Event, Time), releases_at(Event, Fluent, Time)))) ->
    not(released_at(Fluent, Time+1)).


% [fluent,time]
% (ReleasedAt(fluent,time) &
%  !({event} Happens(event,time) &
%    (Initiates(event,fluent,time) |
%     Terminates(event,fluent,time)))) ->
% ReleasedAt(fluent,time+1).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/foundations/DEC.e',56).
released_at(Fluent, Time), not(exists([Event],  (happens_at(Event, Time), (initiates_at(Event, Fluent, Time);terminates_at(Event, Fluent, Time))))) ->
    released_at(Fluent, Time+1).


% [event,fluent,time]
% (Happens(event,time) & Initiates(event,fluent,time)) ->
% (HoldsAt(fluent,time+1) & !ReleasedAt(fluent,time+1)).
happens_at(Event, Time), initiates_at(Event, Fluent, Time) ->
    holds_at(Fluent, Time+1),
    not(released_at(Fluent, Time+1)).


% [event,fluent,time]
% (Happens(event,time) & Terminates(event,fluent,time)) ->
% (!HoldsAt(fluent,time+1) & !ReleasedAt(fluent,time+1)).
happens_at(Event, Time), terminates_at(Event, Fluent, Time) ->
    holds_at(not(Fluent), Time+1),
    not(released_at(Fluent, Time+1)).


% [event,fluent,time]
% (Happens(event,time) & Releases(event,fluent,time)) ->
% ReleasedAt(fluent,time+1).
happens_at(Event, Time), releases_at(Event, Fluent, Time) ->
    released_at(Fluent, Time+1).


%; End of file.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/foundations/DEC.e',73).
:- call_pel_directive(translate(ending,
                                '/pack/logicmoo_ec/ext/ec_sources/foundations/DEC.pel')).
