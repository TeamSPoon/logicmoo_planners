:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/RulesPatterns/ruleOutput.e',25).
% translate: unskipped  File: /pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/RulesPatterns/targetHolds.e.lps 
:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(lps).
% translate: begining  File: /pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/RulesPatterns/targetHolds.e.lps 
% Fri, 09 Oct 2020 15:14:48 GMT File: <stream>(0x5625a9751400)

% fluent F_TargetHolds(rule)
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/RulesPatterns/targetHolds.e',1).
% From E: 
% 
% fluent(
%    f_targetHolds(rule)).
fluents([f_targetHolds/1]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/RulesPatterns/targetHolds.e',1).
% From E: 
% 
% mpred_prop(
%    f_targetHolds(rule), 
%    fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/RulesPatterns/targetHolds.e',1).
mpred_prop(f_targetHolds(rule),fluent).

% fluent F_TargetDoesntHolds(rule)
% From E: 
% 
% fluent(
%    f_targetDoesntHolds(rule)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/RulesPatterns/targetHolds.e',1).
fluents([f_targetDoesntHolds/1]).
% From E: 
% 
% mpred_prop(
%    f_targetDoesntHolds(rule), 
%    fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/RulesPatterns/targetHolds.e',1).
mpred_prop(f_targetDoesntHolds(rule),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/RulesPatterns/targetHolds.e',4).
% event E_MatchRuleParametters(rule)
% From E: 
% 
% event(
%    e_matchRuleParametters(rule)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/RulesPatterns/targetHolds.e',4).
events([e_matchRuleParametters/1]).
% From E: 
% 
% mpred_prop(
%    e_matchRuleParametters(rule), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/RulesPatterns/targetHolds.e',4).
mpred_prop(e_matchRuleParametters(rule),event).

% event E_DontMatchRuleParametters(rule)
% From E: 
% 
% event(
%    e_dontMatchRuleParametters(rule)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/RulesPatterns/targetHolds.e',4).
events([e_dontMatchRuleParametters/1]).
% From E: 
% 
% mpred_prop(
%    e_dontMatchRuleParametters(rule), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/RulesPatterns/targetHolds.e',4).
mpred_prop(e_dontMatchRuleParametters(rule),event).


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/RulesPatterns/targetHolds.e',7).
% [rule,time]
 % Initiates(E_MatchRuleParametters(rule),F_TargetHolds(rule),time).
% From E: 
% 
% initiates(
%    e_matchRuleParametters(Rule), 
%    f_targetHolds(Rule), 
%    Time).
e_matchRuleParametters(Rule)initiates f_targetHolds(Rule).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/RulesPatterns/targetHolds.e',7).

 /*  initiated(happens(e_matchRuleParametters(Rule),
   		  Time_From,
   		  Time_Until),
   	  f_targetHolds(Rule),
   	  []).
 */
 %  "% =================================".


% [rule,time]
 % Initiates(E_DontMatchRuleParametters(rule),F_TargetDoesntHolds(rule),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/RulesPatterns/targetHolds.e',7).
% From E: 
% 
% initiates(
%    e_dontMatchRuleParametters(Rule), 
%    f_targetDoesntHolds(Rule), 
%    Time).
e_dontMatchRuleParametters(Rule)initiates f_targetDoesntHolds(Rule).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/RulesPatterns/targetHolds.e',7).

 /*  initiated(happens(e_dontMatchRuleParametters(Rule),
   		  Time_From,
   		  Time_Until),
   	  f_targetDoesntHolds(Rule),
   	  []).
 */
 %  "% =================================".


% [rule,time]
 % Happens(E_MatchRuleParametters(rule), time) -> !HoldsAt(F_TargetHolds(rule),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/RulesPatterns/targetHolds.e',9).
% From E: 
% 
% '->'(
%    e_matchRuleParametters(Rule), 
%    holds_at(
%       not(
%          f_targetHolds(Rule)), 
%       Time)).
not f_targetHolds(Rule)at Time if e_matchRuleParametters(Rule).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/RulesPatterns/targetHolds.e',9).

 /*  l_int(holds(not(f_targetHolds(Rule)),Time),
         [ happens(e_matchRuleParametters(Rule),
   		Time,
   		Time)
         ]).
 */
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/RulesPatterns/targetHolds.e',11).
% [rule,time]
 % Happens(E_DontMatchRuleParametters(rule), time) -> !HoldsAt(F_TargetDoesntHolds(rule),time).
% From E: 
% 
% '->'(
%    e_dontMatchRuleParametters(Rule), 
%    holds_at(
%       not(
%          f_targetDoesntHolds(Rule)), 
%       Time)).
not f_targetDoesntHolds(Rule)at Time if e_dontMatchRuleParametters(Rule).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/RulesPatterns/targetHolds.e',11).

 /*  l_int(holds(not(f_targetDoesntHolds(Rule)),Time),
         [ happens(e_dontMatchRuleParametters(Rule),
   		Time,
   		Time)
         ]).
 */
 %  "% =================================".


% [rule]
 % !HoldsAt(F_TargetHolds(rule),0).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/RulesPatterns/targetHolds.e',13).
% From E: 
% 
% initially(
%    neg(
%       f_targetHolds(Rule))).
initially not f_targetHolds(Rule).
 %  initial_state([not(f_targetHolds(Rule))]).
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/RulesPatterns/targetHolds.e',15).
% [rule]
 % !HoldsAt(F_TargetDoesntHolds(rule),0).
% From E: 
% 
% initially(
%    neg(
%       f_targetDoesntHolds(Rule))).
initially not f_targetDoesntHolds(Rule).
 %  initial_state([not(f_targetDoesntHolds(Rule))]).
 %  "% =================================".
% translate: ending  File: /pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/RulesPatterns/targetHolds.e.lps 
