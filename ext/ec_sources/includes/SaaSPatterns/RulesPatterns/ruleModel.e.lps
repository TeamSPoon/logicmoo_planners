:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/RulesPatterns/ConditionsVerification.e',13).
% translate: unskipped  File: /pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/RulesPatterns/ruleModel.e.lps 
:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(lps).
% translate: begining  File: /pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/RulesPatterns/ruleModel.e.lps 
% Fri, 09 Oct 2020 15:14:46 GMT File: <stream>(0x5625a9739d00)

% fluent F_RuleEffectPermitted(rule); prédéfinies
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/RulesPatterns/ruleModel.e',1).
% From E: 
% 
% fluent(
%    f_ruleEffectPermitted(rule)).
fluents([f_ruleEffectPermitted/1]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/RulesPatterns/ruleModel.e',1).
% From E: 
% 
% mpred_prop(
%    f_ruleEffectPermitted(rule), 
%    fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/RulesPatterns/ruleModel.e',1).
mpred_prop(f_ruleEffectPermitted(rule),fluent).

% fluent F_RuleEffectNOTpermitted(rule) ;prédéfinies
% 
% From E: 
% 
% fluent(
%    f_ruleEffectNOTpermitted(rule)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/RulesPatterns/ruleModel.e',1).
fluents([f_ruleEffectNOTpermitted/1]).
% From E: 
% 
% mpred_prop(
%    f_ruleEffectNOTpermitted(rule), 
%    fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/RulesPatterns/ruleModel.e',1).
mpred_prop(f_ruleEffectNOTpermitted(rule),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/RulesPatterns/ruleModel.e',5).
% fluent F_RuleDenied(rule)
% From E: 
% 
% fluent(
%    f_ruleDenied(rule)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/RulesPatterns/ruleModel.e',5).
fluents([f_ruleDenied/1]).
% From E: 
% 
% mpred_prop(
%    f_ruleDenied(rule), 
%    fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/RulesPatterns/ruleModel.e',5).
mpred_prop(f_ruleDenied(rule),fluent).

% fluent F_RulePermitted(rule)
% From E: 
% 
% fluent(
%    f_rulePermitted(rule)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/RulesPatterns/ruleModel.e',5).
fluents([f_rulePermitted/1]).
% From E: 
% 
% mpred_prop(
%    f_rulePermitted(rule), 
%    fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/RulesPatterns/ruleModel.e',5).
mpred_prop(f_rulePermitted(rule),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/RulesPatterns/ruleModel.e',7).
% fluent F_RuleNotApplicable(rule)
% From E: 
% 
% fluent(
%    f_ruleNotApplicable(rule)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/RulesPatterns/ruleModel.e',7).
fluents([f_ruleNotApplicable/1]).
% From E: 
% 
% mpred_prop(
%    f_ruleNotApplicable(rule), 
%    fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/RulesPatterns/ruleModel.e',7).
mpred_prop(f_ruleNotApplicable(rule),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/RulesPatterns/ruleModel.e',11).
% event Epermit(rule)
% From E: 
% 
% event(
%    epermit(rule)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/RulesPatterns/ruleModel.e',11).
events([epermit/1]).
% From E: 
% 
% mpred_prop(
%    epermit(rule), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/RulesPatterns/ruleModel.e',11).
mpred_prop(epermit(rule),event).

% event EDeny(rule)
% From E: 
% 
% event(
%    eDeny(rule)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/RulesPatterns/ruleModel.e',11).
events([eDeny/1]).
% From E: 
% 
% mpred_prop(
%    eDeny(rule), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/RulesPatterns/ruleModel.e',11).
mpred_prop(eDeny(rule),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/RulesPatterns/ruleModel.e',13).
% event ERuleDoesNotApply(rule)
% From E: 
% 
% event(
%    eRuleDoesNotApply(rule)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/RulesPatterns/ruleModel.e',13).
events([eRuleDoesNotApply/1]).
% From E: 
% 
% mpred_prop(
%    eRuleDoesNotApply(rule), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/RulesPatterns/ruleModel.e',13).
mpred_prop(eRuleDoesNotApply(rule),event).


% [rule,time]
 % Initiates(EDeny(rule),F_RuleDenied(rule),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/RulesPatterns/ruleModel.e',15).
% From E: 
% 
% initiates(
%    eDeny(Rule), 
%    f_ruleDenied(Rule), 
%    Time).
eDeny(Rule)initiates f_ruleDenied(Rule).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/RulesPatterns/ruleModel.e',15).

 /*  initiated(happens(eDeny(Rule),Time_From,Time_Until),
   	  f_ruleDenied(Rule),
   	  []).
 */
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/RulesPatterns/ruleModel.e',17).
% [rule,time]
 % Initiates(Epermit(rule),F_RulePermitted(rule),time).
% From E: 
% 
% initiates(
%    epermit(Rule), 
%    f_rulePermitted(Rule), 
%    Time).
epermit(Rule)initiates f_rulePermitted(Rule).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/RulesPatterns/ruleModel.e',17).

 /*  initiated(happens(epermit(Rule),Time_From,Time_Until),
   	  f_rulePermitted(Rule),
   	  []).
 */
 %  "% =================================".


% [rule,time]
 % Initiates(ERuleDoesNotApply(rule),F_RuleNotApplicable(rule),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/RulesPatterns/ruleModel.e',17).
% From E: 
% 
% initiates(
%    eRuleDoesNotApply(Rule), 
%    f_ruleNotApplicable(Rule), 
%    Time).
eRuleDoesNotApply(Rule)initiates f_ruleNotApplicable(Rule).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/RulesPatterns/ruleModel.e',17).

 /*  initiated(happens(eRuleDoesNotApply(Rule),
   		  Time_From,
   		  Time_Until),
   	  f_ruleNotApplicable(Rule),
   	  []).
 */
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/RulesPatterns/ruleModel.e',21).
% [rule,time]
 % Happens(EDeny(rule),time) -> HoldsAt(F_TargetHolds(rule),time)
%                                             & HoldsAt(F_ConditionSatisfied(rule),time)
%                                             & HoldsAt(F_RuleEffectNOTpermitted(rule),time).
% From E: 
% 
% '->'(
%    eDeny(Rule), 
%    ','(
%       holds_at(
%          f_targetHolds(Rule), 
%          Time), 
%       ','(
%          holds_at(
%             f_conditionSatisfied(Rule), 
%             Time), 
%          holds_at(
%             f_ruleEffectNOTpermitted(Rule), 
%             Time)))).
if eDeny(Rule)then f_targetHolds(Rule)at Time, f_conditionSatisfied(Rule)at Time, f_ruleEffectNOTpermitted(Rule)at Time.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/RulesPatterns/ruleModel.e',21).

 /*  reactive_rule([ happens(eDeny(Rule),
   			Time_From,
   			Time_Until)
   	      ],
   	      [ holds(f_targetHolds(Rule),Time),
   		holds(f_conditionSatisfied(Rule),Time),
   		holds(f_ruleEffectNOTpermitted(Rule),Time)
   	      ]).
 */
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/RulesPatterns/ruleModel.e',26).
% [rule,time]
 % Happens(Epermit(rule),time) -> HoldsAt(F_TargetHolds(rule),time)
%                                             & HoldsAt(F_ConditionSatisfied(rule),time)
%                                             & HoldsAt(F_RuleEffectPermitted(rule),time).
% From E: 
% 
% '->'(
%    epermit(Rule), 
%    ','(
%       holds_at(
%          f_targetHolds(Rule), 
%          Time), 
%       ','(
%          holds_at(
%             f_conditionSatisfied(Rule), 
%             Time), 
%          holds_at(
%             f_ruleEffectPermitted(Rule), 
%             Time)))).
if epermit(Rule)then f_targetHolds(Rule)at Time, f_conditionSatisfied(Rule)at Time, f_ruleEffectPermitted(Rule)at Time.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/RulesPatterns/ruleModel.e',26).

 /*  reactive_rule([ happens(epermit(Rule),
   			Time_From,
   			Time_Until)
   	      ],
   	      [ holds(f_targetHolds(Rule),Time),
   		holds(f_conditionSatisfied(Rule),Time),
   		holds(f_ruleEffectPermitted(Rule),Time)
   	      ]).
 */
 %  "% =================================".


% [rule,time]
 % Happens(ERuleDoesNotApply(rule),time) -> HoldsAt(F_TargetDoesntHolds(rule),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/RulesPatterns/ruleModel.e',29).
% From E: 
% 
% '->'(
%    eRuleDoesNotApply(Rule), 
%    holds_at(
%       f_targetDoesntHolds(Rule), 
%       Time)).
f_targetDoesntHolds(Rule)at Time if eRuleDoesNotApply(Rule).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/RulesPatterns/ruleModel.e',29).

 /*  l_int(holds(f_targetDoesntHolds(Rule),Time),
         [happens(eRuleDoesNotApply(Rule),Time,Time)]).
 */
 %  "% =================================".


% [rule]
 % !HoldsAt(F_RulePermitted(rule),0).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/RulesPatterns/ruleModel.e',33).
% From E: 
% 
% initially(
%    neg(
%       f_rulePermitted(Rule))).
initially not f_rulePermitted(Rule).
 %  initial_state([not(f_rulePermitted(Rule))]).
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/RulesPatterns/ruleModel.e',35).
% [rule]
 % !HoldsAt(F_RuleDenied(rule),0).
% From E: 
% 
% initially(
%    neg(
%       f_ruleDenied(Rule))).
initially not f_ruleDenied(Rule).
 %  initial_state([not(f_ruleDenied(Rule))]).
 %  "% =================================".


% [rule]
 % !HoldsAt(F_RuleNotApplicable(rule),0).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/RulesPatterns/ruleModel.e',35).
% From E: 
% 
% initially(
%    neg(
%       f_ruleNotApplicable(Rule))).
initially not f_ruleNotApplicable(Rule).
 %  initial_state([not(f_ruleNotApplicable(Rule))]).
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/RulesPatterns/ruleModel.e',41).
%;********************************************************************************************************************
%;--------------------------------------------------------------------------------------------------------------------
%;********************************************************************************************************************
%;[rule] HoldsAt(F_RulePermitted(rule),3) | HoldsAt(F_RuleDenied(rule),3).
%;[rule,time] Happens(RuleDeny(rule), time) |  Happens(RulePermit(rule), time) -> time=2.
%;[rule,time,ruleeffect] Happens(EDeny(rule),time) -> HoldsAt(F_TargetHolds(rule),time)
                                                %;    & HoldsAt(F_ConditionSatisfied(rule),time)
                                                %;    & ruleeffect=Deny.
%;[rule,time,ruleeffect] Happens(Epermit(rule),time) -> HoldsAt(F_TargetHolds(rule),time)
                                               %;    & HoldsAt(F_ConditionSatisfied(rule),time)
                                               %;    & ruleeffect=Permit.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/RulesPatterns/ruleModel.e',56).
% translate: ending  File: /pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/RulesPatterns/ruleModel.e.lps 
