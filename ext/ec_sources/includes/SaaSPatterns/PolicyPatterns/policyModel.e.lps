:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/examples/Mueller2006/Exercises/TelephoneBugs.e',208).
% translate: unskipped  File: /pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/PolicyPatterns/policyModel.e.lps 
:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(lps).
% translate: begining  File: /pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/PolicyPatterns/policyModel.e.lps 
% Fri, 09 Oct 2020 15:14:45 GMT File: <stream>(0x5625a9740600)

% event E_policyPermit(policy)
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/PolicyPatterns/policyModel.e',1).
% From E: 
% 
% event(
%    e_policyPermit(policy)).
events([e_policyPermit/1]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/PolicyPatterns/policyModel.e',1).
% From E: 
% 
% mpred_prop(
%    e_policyPermit(policy), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/PolicyPatterns/policyModel.e',1).
mpred_prop(e_policyPermit(policy),event).

% event E_policyDeny(policy)
% From E: 
% 
% event(
%    e_policyDeny(policy)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/PolicyPatterns/policyModel.e',1).
events([e_policyDeny/1]).
% From E: 
% 
% mpred_prop(
%    e_policyDeny(policy), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/PolicyPatterns/policyModel.e',1).
mpred_prop(e_policyDeny(policy),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/PolicyPatterns/policyModel.e',3).
% event E_PolicyDoesNotApply(policy)
% From E: 
% 
% event(
%    e_policyDoesNotApply(policy)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/PolicyPatterns/policyModel.e',3).
events([e_policyDoesNotApply/1]).
% From E: 
% 
% mpred_prop(
%    e_policyDoesNotApply(policy), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/PolicyPatterns/policyModel.e',3).
mpred_prop(e_policyDoesNotApply(policy),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/PolicyPatterns/policyModel.e',5).
% fluent F_policyPermitted(policy)
% From E: 
% 
% fluent(
%    f_policyPermitted(policy)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/PolicyPatterns/policyModel.e',5).
fluents([f_policyPermitted/1]).
% From E: 
% 
% mpred_prop(
%    f_policyPermitted(policy), 
%    fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/PolicyPatterns/policyModel.e',5).
mpred_prop(f_policyPermitted(policy),fluent).

% fluent F_policyDenied(policy)
% From E: 
% 
% fluent(
%    f_policyDenied(policy)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/PolicyPatterns/policyModel.e',5).
fluents([f_policyDenied/1]).
% From E: 
% 
% mpred_prop(
%    f_policyDenied(policy), 
%    fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/PolicyPatterns/policyModel.e',5).
mpred_prop(f_policyDenied(policy),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/PolicyPatterns/policyModel.e',7).
% fluent F_policyNotApplicable(policy)
% From E: 
% 
% fluent(
%    f_policyNotApplicable(policy)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/PolicyPatterns/policyModel.e',7).
fluents([f_policyNotApplicable/1]).
% From E: 
% 
% mpred_prop(
%    f_policyNotApplicable(policy), 
%    fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/PolicyPatterns/policyModel.e',7).
mpred_prop(f_policyNotApplicable(policy),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/PolicyPatterns/policyModel.e',9).
% predicate PolicyHasRules(policy,rule)
% From E: 
% 
% predicate(
%    policyHasRules(policy,rule)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/PolicyPatterns/policyModel.e',9).
predicates([policyHasRules/2]).
% From E: 
% 
% mpred_prop(
%    policyHasRules(policy,rule), 
%    predicate).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/PolicyPatterns/policyModel.e',9).
mpred_prop(policyHasRules(policy,rule),predicate).


% [policy,time]
 % Initiates(E_policyPermit(policy),F_policyPermitted(policy),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/PolicyPatterns/policyModel.e',11).
% From E: 
% 
% initiates(
%    e_policyPermit(Policy), 
%    f_policyPermitted(Policy), 
%    Time).
e_policyPermit(Policy)initiates f_policyPermitted(Policy).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/PolicyPatterns/policyModel.e',11).

 /*  initiated(happens(e_policyPermit(Policy),
   		  Time_From,
   		  Time_Until),
   	  f_policyPermitted(Policy),
   	  []).
 */
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/PolicyPatterns/policyModel.e',13).
% [policy,time]
 % Initiates(E_policyDeny(policy),F_policyDenied(policy),time).
% From E: 
% 
% initiates(
%    e_policyDeny(Policy), 
%    f_policyDenied(Policy), 
%    Time).
e_policyDeny(Policy)initiates f_policyDenied(Policy).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/PolicyPatterns/policyModel.e',13).

 /*  initiated(happens(e_policyDeny(Policy),
   		  Time_From,
   		  Time_Until),
   	  f_policyDenied(Policy),
   	  []).
 */
 %  "% =================================".


% [policy,time]
 % Initiates(E_PolicyDoesNotApply(policy),F_policyNotApplicable(policy),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/PolicyPatterns/policyModel.e',13).
% From E: 
% 
% initiates(
%    e_policyDoesNotApply(Policy), 
%    f_policyNotApplicable(Policy), 
%    Time).
e_policyDoesNotApply(Policy)initiates f_policyNotApplicable(Policy).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/PolicyPatterns/policyModel.e',13).

 /*  initiated(happens(e_policyDoesNotApply(Policy),
   		  Time_From,
   		  Time_Until),
   	  f_policyNotApplicable(Policy),
   	  []).
 */
 %  "% =================================".


%; 'Rule combaning algorithm (stategy) : All Permit'
% [policy,rule,time]
 % Happens(E_policyPermit(policy),time) & PolicyHasRules(policy,rule) -> HoldsAt(F_RulePermitted(rule),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/PolicyPatterns/policyModel.e',19).
% From E: 
% 
% '->'(
%    ','(
%       e_policyPermit(Policy), 
%       policyHasRules(Policy,Rule)), 
%    holds_at(
%       f_rulePermitted(Rule), 
%       Time)).
f_rulePermitted(Rule)at Time if e_policyPermit(Policy), policyHasRules(Policy, Rule).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/PolicyPatterns/policyModel.e',19).

 /*  l_int(holds(f_rulePermitted(Rule),Time),
         [ happens(e_policyPermit(Policy),Time,Time),
   	policyHasRules(Policy,Rule)
         ]).
 */
 %  "% =================================".


%; 'Rule combaning algorithm (stategy) : Deny override (s il existe au moin une rÃ¨gle satisfaite)'
% [policy,time]
 % Happens(E_policyDeny(policy),time) -> {rule}  PolicyHasRules(policy,rule) & HoldsAt(F_RuleDenied(rule),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/PolicyPatterns/policyModel.e',23).
% From E: 
% 
% '->'(
%    e_policyDeny(Policy), 
%    ','(
%       ex(
%          [Rule]), 
%       ','(
%          policyHasRules(Policy,Rule), 
%          holds_at(
%             f_ruleDenied(Rule), 
%             Time)))).
if e_policyDeny(Policy)then ex([Rule]), policyHasRules(Policy, Rule), f_ruleDenied(Rule)at Time.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/PolicyPatterns/policyModel.e',23).

 /*  reactive_rule([ happens(e_policyDeny(Policy),
   			Time_From,
   			Time_Until)
   	      ],
   	      [ ex([Rule]),
   		policyHasRules(Policy,Rule),
   		holds(f_ruleDenied(Rule),Time)
   	      ]).
 */
 %  "% =================================".


%; 'Rule combaning algorithm (stategy) : All not Applicable'
% [policy,time,rule]
 % Happens(E_PolicyDoesNotApply(policy),time) & PolicyHasRules(policy,rule) -> HoldsAt(F_RuleNotApplicable(rule),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/PolicyPatterns/policyModel.e',27).
% From E: 
% 
% '->'(
%    ','(
%       e_policyDoesNotApply(Policy), 
%       policyHasRules(Policy,Rule)), 
%    holds_at(
%       f_ruleNotApplicable(Rule), 
%       Time)).
f_ruleNotApplicable(Rule)at Time if e_policyDoesNotApply(Policy), policyHasRules(Policy, Rule).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/PolicyPatterns/policyModel.e',27).

 /*  l_int(holds(f_ruleNotApplicable(Rule),Time),
         [ happens(e_policyDoesNotApply(Policy),
   		Time,
   		Time),
   	policyHasRules(Policy,Rule)
         ]).
 */
 %  "% =================================".


% [policy]
% !HoldsAt(F_policyPermitted(policy),0).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/PolicyPatterns/policyModel.e',29).
% From E: 
% 
% initially(
%    neg(
%       f_policyPermitted(Policy))).
initially not f_policyPermitted(Policy).
 %  initial_state([not(f_policyPermitted(Policy))]).
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/PolicyPatterns/policyModel.e',31).
% [policy]
% !HoldsAt(F_policyDenied(policy),0).
% From E: 
% 
% initially(
%    neg(
%       f_policyDenied(Policy))).
initially not f_policyDenied(Policy).
 %  initial_state([not(f_policyDenied(Policy))]).
 %  "% =================================".


% [policy]
% !HoldsAt(F_policyNotApplicable(policy),0).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/PolicyPatterns/policyModel.e',31).
% From E: 
% 
% initially(
%    neg(
%       f_policyNotApplicable(Policy))).
initially not f_policyNotApplicable(Policy).
 %  initial_state([not(f_policyNotApplicable(Policy))]).
 %  "% =================================".
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/PolicyPatterns/policyModel.e',33).
% translate: ending  File: /pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/PolicyPatterns/policyModel.e.lps 
