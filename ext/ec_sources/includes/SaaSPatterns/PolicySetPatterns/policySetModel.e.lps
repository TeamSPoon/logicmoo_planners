:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/PolicyPatterns/policyModel.e',33).
% translate: unskipped  File: /pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/PolicySetPatterns/policySetModel.e.lps 
:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(lps).
% translate: begining  File: /pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/PolicySetPatterns/policySetModel.e.lps 
% Fri, 09 Oct 2020 15:14:46 GMT File: <stream>(0x5625a977ff00)

% event E_policysetPermit(policyset)
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/PolicySetPatterns/policySetModel.e',1).
% From E: 
% 
% event(
%    e_policysetPermit(policyset)).
events([e_policysetPermit/1]).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/PolicySetPatterns/policySetModel.e',1).
% From E: 
% 
% mpred_prop(
%    e_policysetPermit(policyset), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/PolicySetPatterns/policySetModel.e',1).
mpred_prop(e_policysetPermit(policyset),event).

% event E_policysetDeny(policyset)
% From E: 
% 
% event(
%    e_policysetDeny(policyset)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/PolicySetPatterns/policySetModel.e',1).
events([e_policysetDeny/1]).
% From E: 
% 
% mpred_prop(
%    e_policysetDeny(policyset), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/PolicySetPatterns/policySetModel.e',1).
mpred_prop(e_policysetDeny(policyset),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/PolicySetPatterns/policySetModel.e',3).
% event E_policysetDontApply(policyset)
% From E: 
% 
% event(
%    e_policysetDontApply(policyset)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/PolicySetPatterns/policySetModel.e',3).
events([e_policysetDontApply/1]).
% From E: 
% 
% mpred_prop(
%    e_policysetDontApply(policyset), 
%    event).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/PolicySetPatterns/policySetModel.e',3).
mpred_prop(e_policysetDontApply(policyset),event).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/PolicySetPatterns/policySetModel.e',5).
% fluent F_policysetPermitted(policyset)
% From E: 
% 
% fluent(
%    f_policysetPermitted(policyset)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/PolicySetPatterns/policySetModel.e',5).
fluents([f_policysetPermitted/1]).
% From E: 
% 
% mpred_prop(
%    f_policysetPermitted(policyset), 
%    fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/PolicySetPatterns/policySetModel.e',5).
mpred_prop(f_policysetPermitted(policyset),fluent).

% fluent F_policysetDenied(policyset)
% From E: 
% 
% fluent(
%    f_policysetDenied(policyset)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/PolicySetPatterns/policySetModel.e',5).
fluents([f_policysetDenied/1]).
% From E: 
% 
% mpred_prop(
%    f_policysetDenied(policyset), 
%    fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/PolicySetPatterns/policySetModel.e',5).
mpred_prop(f_policysetDenied(policyset),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/PolicySetPatterns/policySetModel.e',7).
% fluent F_policySetNotApplicable(policyset)
% From E: 
% 
% fluent(
%    f_policySetNotApplicable(policyset)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/PolicySetPatterns/policySetModel.e',7).
fluents([f_policySetNotApplicable/1]).
% From E: 
% 
% mpred_prop(
%    f_policySetNotApplicable(policyset), 
%    fluent).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/PolicySetPatterns/policySetModel.e',7).
mpred_prop(f_policySetNotApplicable(policyset),fluent).

:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/PolicySetPatterns/policySetModel.e',9).
% predicate PolicysetHaspolicies(policyset,policy)
% From E: 
% 
% predicate(
%    policysetHaspolicies(policyset,policy)).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/PolicySetPatterns/policySetModel.e',9).
predicates([policysetHaspolicies/2]).
% From E: 
% 
% mpred_prop(
%    policysetHaspolicies(policyset,policy), 
%    predicate).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/PolicySetPatterns/policySetModel.e',9).
mpred_prop(policysetHaspolicies(policyset,policy),predicate).


% [policyset,time]
 % Initiates(E_policysetPermit(policyset),F_policysetPermitted(policyset),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/PolicySetPatterns/policySetModel.e',11).
% From E: 
% 
% initiates(
%    e_policysetPermit(Policyset), 
%    f_policysetPermitted(Policyset), 
%    Time).
e_policysetPermit(Policyset)initiates f_policysetPermitted(Policyset).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/PolicySetPatterns/policySetModel.e',11).

 /*  initiated(happens(e_policysetPermit(Policyset),
   		  Time_From,
   		  Time_Until),
   	  f_policysetPermitted(Policyset),
   	  []).
 */
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/PolicySetPatterns/policySetModel.e',13).
% [policyset,time]
 % Initiates(E_policysetDeny(policyset),F_policysetDenied(policyset),time).
% From E: 
% 
% initiates(
%    e_policysetDeny(Policyset), 
%    f_policysetDenied(Policyset), 
%    Time).
e_policysetDeny(Policyset)initiates f_policysetDenied(Policyset).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/PolicySetPatterns/policySetModel.e',13).

 /*  initiated(happens(e_policysetDeny(Policyset),
   		  Time_From,
   		  Time_Until),
   	  f_policysetDenied(Policyset),
   	  []).
 */
 %  "% =================================".


% [policyset,time]
 % Initiates(E_policysetDontApply(policyset),F_policySetNotApplicable(policyset),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/PolicySetPatterns/policySetModel.e',13).
% From E: 
% 
% initiates(
%    e_policysetDontApply(Policyset), 
%    f_policySetNotApplicable(Policyset), 
%    Time).
e_policysetDontApply(Policyset)initiates f_policySetNotApplicable(Policyset).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/PolicySetPatterns/policySetModel.e',13).

 /*  initiated(happens(e_policysetDontApply(Policyset),
   		  Time_From,
   		  Time_Until),
   	  f_policySetNotApplicable(Policyset),
   	  []).
 */
 %  "% =================================".


%; 'policies combaning algorithm (stategy) : All Permit'
% [policyset,policy,time]
 % Happens(E_policysetPermit(policyset),time) & PolicysetHaspolicies(policyset,policy) -> HoldsAt(F_policyPermitted(policy),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/PolicySetPatterns/policySetModel.e',19).
% From E: 
% 
% '->'(
%    ','(
%       e_policysetPermit(Policyset), 
%       policysetHaspolicies(Policyset,Policy)), 
%    holds_at(
%       f_policyPermitted(Policy), 
%       Time)).
f_policyPermitted(Policy)at Time if e_policysetPermit(Policyset), policysetHaspolicies(Policyset, Policy).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/PolicySetPatterns/policySetModel.e',19).

 /*  l_int(holds(f_policyPermitted(Policy),Time),
         [ happens(e_policysetPermit(Policyset),
   		Time,
   		Time),
   	policysetHaspolicies(Policyset,Policy)
         ]).
 */
 %  "% =================================".


%; 'policies combaning algorithm (stategy) : Deny override'
% [policyset,time]
 % Happens(E_policysetDeny(policyset),time) -> {policy}  PolicysetHaspolicies(policyset,policy) & HoldsAt(F_policyDenied(policy),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/PolicySetPatterns/policySetModel.e',23).
% From E: 
% 
% '->'(
%    e_policysetDeny(Policyset), 
%    ','(
%       ex(
%          [Policy]), 
%       ','(
%          policysetHaspolicies(Policyset,Policy), 
%          holds_at(
%             f_policyDenied(Policy), 
%             Time)))).
if e_policysetDeny(Policyset)then ex([Policy]), policysetHaspolicies(Policyset, Policy), f_policyDenied(Policy)at Time.
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/PolicySetPatterns/policySetModel.e',23).

 /*  reactive_rule([ happens(e_policysetDeny(Policyset),
   			Time_From,
   			Time_Until)
   	      ],
   	      [ ex([Policy]),
   		policysetHaspolicies(Policyset,Policy),
   		holds(f_policyDenied(Policy),Time)
   	      ]).
 */
 %  "% =================================".


%; 'policies combaning algorithm (stategy) : All Permit'
% [policyset,policy,time]
 % Happens(E_policysetDontApply(policyset),time) & PolicysetHaspolicies(policyset,policy) -> HoldsAt(F_policyNotApplicable(policy),time).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/PolicySetPatterns/policySetModel.e',27).
% From E: 
% 
% '->'(
%    ','(
%       e_policysetDontApply(Policyset), 
%       policysetHaspolicies(Policyset,Policy)), 
%    holds_at(
%       f_policyNotApplicable(Policy), 
%       Time)).
f_policyNotApplicable(Policy)at Time if e_policysetDontApply(Policyset), policysetHaspolicies(Policyset, Policy).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/PolicySetPatterns/policySetModel.e',27).

 /*  l_int(holds(f_policyNotApplicable(Policy),Time),
         [ happens(e_policysetDontApply(Policyset),
   		Time,
   		Time),
   	policysetHaspolicies(Policyset,Policy)
         ]).
 */
 %  "% =================================".


% [policyset]
% !HoldsAt(F_policysetPermitted(policyset),0).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/PolicySetPatterns/policySetModel.e',29).
% From E: 
% 
% initially(
%    neg(
%       f_policysetPermitted(Policyset))).
initially not f_policysetPermitted(Policyset).
 %  initial_state([not(f_policysetPermitted(Policyset))]).
 %  "% =================================".


:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/PolicySetPatterns/policySetModel.e',31).
% [policyset]
% !HoldsAt(F_policysetDenied(policyset),0).
% From E: 
% 
% initially(
%    neg(
%       f_policysetDenied(Policyset))).
initially not f_policysetDenied(Policyset).
 %  initial_state([not(f_policysetDenied(Policyset))]).
 %  "% =================================".


% [policyset]
% !HoldsAt(F_policySetNotApplicable(policyset),0).
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/PolicySetPatterns/policySetModel.e',31).
% From E: 
% 
% initially(
%    neg(
%       f_policySetNotApplicable(Policyset))).
initially not f_policySetNotApplicable(Policyset).
 %  initial_state([not(f_policySetNotApplicable(Policyset))]).
 %  "% =================================".
:-was_s_l('/pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/PolicySetPatterns/policySetModel.e',33).
% translate: ending  File: /pack/logicmoo_ec/ext/ec_sources/includes/SaaSPatterns/PolicySetPatterns/policySetModel.e.lps 
