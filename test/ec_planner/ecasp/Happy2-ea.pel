:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(pfc).
% Wed, 01 Apr 2020 20:01:09 GMT
% From ../ecasp/Happy2-ea.pel:4
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecasp/FallingObjectWithEvents5-ea.e',75).

 /*  loading(load_e_pl,
   	'/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecasp/Happy2-ea.e').
 */
%; Happy2-ea.e

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecasp/Happy2-ea.e:2
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecasp/Happy2-ea.e',3).
% load foundations/Root.e
:- load_e('foundations/Root.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecasp/Happy2-ea.e:3
% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecasp/Happy2-ea.e',3).
:- load_e('foundations/EC.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecasp/Happy2-ea.e:5
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecasp/Happy2-ea.e',6).
% sort person
==> sort(person).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecasp/Happy2-ea.e:6
% person Fred
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecasp/Happy2-ea.e',6).
==> t(person,fred).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecasp/Happy2-ea.e:7
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecasp/Happy2-ea.e',8).
% event Feed(person)
event(feed(person)).
==> mpred_prop(feed(person),event).
==> meta_argtypes(feed(person)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecasp/Happy2-ea.e:8
% event Clothe(person)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecasp/Happy2-ea.e',8).
event(clothe(person)).
==> mpred_prop(clothe(person),event).
==> meta_argtypes(clothe(person)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecasp/Happy2-ea.e:9
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecasp/Happy2-ea.e',10).
% fluent Happy(person)
fluent(happy(person)).
==> mpred_prop(happy(person),fluent).
==> meta_argtypes(happy(person)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecasp/Happy2-ea.e:10
% fluent Hungry(person)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecasp/Happy2-ea.e',10).
fluent(hungry(person)).
==> mpred_prop(hungry(person),fluent).
==> meta_argtypes(hungry(person)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecasp/Happy2-ea.e:11
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecasp/Happy2-ea.e',12).
% fluent Cold(person)
fluent(cold(person)).
==> mpred_prop(cold(person),fluent).
==> meta_argtypes(cold(person)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecasp/Happy2-ea.e:13
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecasp/Happy2-ea.e',14).
% [person,time]
% (HoldsAt(Happy(person),time) <->
% !HoldsAt(Hungry(person),time) &
% !HoldsAt(Cold(person),time)).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecasp/Happy2-ea.e:16
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecasp/Happy2-ea.e',14).

 /*  holds_at(happy(Person), Time) <->
       holds_at(neg(hungry(Person)), Time),
       holds_at(neg(cold(Person)), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecasp/Happy2-ea.e',14).

 /*  [holds_at, happy] <->
       [holds_at, neg, hungry, holds_at, neg, cold].
 */

 /*  holds_at(happy(Person), Time) ->
       holds_at(neg(hungry(Person)), Time),
       holds_at(neg(cold(Person)), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecasp/Happy2-ea.e',14).

 /*  not(holds_at(happy(Person), Time)) :-
       (   not(holds_at(neg(hungry(Person)), Time))
       ;   not(holds_at(neg(cold(Person)), Time))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecasp/Happy2-ea.e',14).

 /*  [(holds_at(hungry(Person), Time);holds_at(cold(Person), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(happy(Person)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecasp/Happy2-ea.e',14).
axiom(holds_at(neg(happy(Person)), Time),
   
    [  (holds_at(hungry(Person), Time);holds_at(cold(Person), Time))
    ]).

 /*  holds_at(neg(hungry(Person)), Time) :-
       holds_at(happy(Person), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecasp/Happy2-ea.e',14).

 /*  [holds_at(happy(Person), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(hungry(Person)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecasp/Happy2-ea.e',14).
axiom(holds_at(neg(hungry(Person)), Time),
    [holds_at(happy(Person), Time)]).

 /*  holds_at(neg(cold(Person)), Time) :-
       holds_at(happy(Person), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecasp/Happy2-ea.e',14).

 /*  [holds_at(happy(Person), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(cold(Person)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecasp/Happy2-ea.e',14).
axiom(holds_at(neg(cold(Person)), Time),
    [holds_at(happy(Person), Time)]).

 /*  holds_at(neg(hungry(Person)), Time), holds_at(neg(cold(Person)), Time) ->
       holds_at(happy(Person), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecasp/Happy2-ea.e',14).

 /*  holds_at(happy(Person), Time) :-
       holds_at(neg(hungry(Person)), Time),
       holds_at(neg(cold(Person)), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecasp/Happy2-ea.e',14).

 /*  [holds_at(neg(hungry(Person)), Time), holds_at(neg(cold(Person)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(happy(Person), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecasp/Happy2-ea.e',14).
axiom(holds_at(happy(Person), Time),
   
    [ holds_at(neg(hungry(Person)), Time),
      holds_at(neg(cold(Person)), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecasp/Happy2-ea.e',14).

 /*  not(holds_at(neg(hungry(Person)), Time)) :-
       holds_at(neg(cold(Person)), Time),
       not(holds_at(happy(Person), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecasp/Happy2-ea.e',14).

 /*  [holds_at(neg(cold(Person)), Time), holds_at(neg(happy(Person)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(hungry(Person), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecasp/Happy2-ea.e',14).
axiom(holds_at(hungry(Person), Time),
   
    [ holds_at(neg(cold(Person)), Time),
      holds_at(neg(happy(Person)), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecasp/Happy2-ea.e',14).

 /*  not(holds_at(neg(cold(Person)), Time)) :-
       holds_at(neg(hungry(Person)), Time),
       not(holds_at(happy(Person), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecasp/Happy2-ea.e',14).

 /*  [holds_at(neg(hungry(Person)), Time), holds_at(neg(happy(Person)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(cold(Person), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecasp/Happy2-ea.e',14).
axiom(holds_at(cold(Person), Time),
   
    [ holds_at(neg(hungry(Person)), Time),
      holds_at(neg(happy(Person)), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecasp/Happy2-ea.e:18
% [person,time]
% (Terminates(Feed(person),Hungry(person),time)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecasp/Happy2-ea.e',20).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(feed(Person), hungry(Person), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecasp/Happy2-ea.e',20).
axiom(terminates(feed(Person), hungry(Person), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecasp/Happy2-ea.e:21
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecasp/Happy2-ea.e',22).
% [person,time]
% (Terminates(Clothe(person),Cold(person),time)).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(clothe(Person), cold(Person), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecasp/Happy2-ea.e',22).
axiom(terminates(clothe(Person), cold(Person), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecasp/Happy2-ea.e:25
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecasp/Happy2-ea.e',26).
%;noninertial Happy
% [person,time]
% (ReleasedAt(Happy(person),time)).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecasp/Happy2-ea.e:27
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecasp/Happy2-ea.e',28).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[],
          tvs2=[],
          releasedAt(happy(Person), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecasp/Happy2-ea.e',28).
axiom(releasedAt(happy(Person), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecasp/Happy2-ea.e:29
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecasp/Happy2-ea.e',30).
% [person]
% (!ReleasedAt(Hungry(person),0)).
 %  not(releasedAt(hungry(Person),0)).

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], not(releasedAt(hungry(Person), 0))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecasp/Happy2-ea.e',30).
axiom(not(releasedAt(hungry(Person), 0)),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecasp/Happy2-ea.e:30
% [person]
% (!ReleasedAt(Cold(person),0)).
 %  not(releasedAt(cold(Person),0)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecasp/Happy2-ea.e',30).

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], not(releasedAt(cold(Person), 0))).
 */
axiom(not(releasedAt(cold(Person), 0)),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecasp/Happy2-ea.e:33
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecasp/Happy2-ea.e',34).
% HoldsAt(Hungry(Fred),0).

 /*  [] ->
       ta(Ta_Param, tvs1=[start], tvs2=[start], holds_at(hungry(fred), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecasp/Happy2-ea.e',34).
axiom(holds_at(hungry(fred), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecasp/Happy2-ea.e:34
% !HoldsAt(Cold(Fred),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecasp/Happy2-ea.e',34).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(cold(fred)), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecasp/Happy2-ea.e',34).
axiom(holds_at(neg(cold(fred)), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecasp/Happy2-ea.e:35
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecasp/Happy2-ea.e',36).
% Happens(Feed(Fred),1).

 /*  [b(start, Maptime), ignore(start+1==Maptime)] ->
       ta(Ta_Param,
          tvs1=[start+1],
          tvs2=[Maptime, start],
          happens(feed(fred), Maptime)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecasp/Happy2-ea.e',36).
axiom(happens(feed(fred), Maptime),
    [b(start, Maptime)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecasp/Happy2-ea.e:37
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecasp/Happy2-ea.e',38).
% completion Happens
==> completion(happens).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecasp/Happy2-ea.e:39
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecasp/Happy2-ea.e',40).
% range time 0 2
==> range(time,0,2).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecasp/Happy2-ea.e:40
% range offset 1 1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecasp/Happy2-ea.e',40).
==> range(offset,1,1).
%; End of file.
