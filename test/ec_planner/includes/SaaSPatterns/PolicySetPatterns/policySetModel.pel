:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(pfc).
% Wed, 01 Apr 2020 20:00:05 GMT
% From ../includes/SaaSPatterns/PolicySetPatterns/policySetModel.pel:4
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/includes/SaaSPatterns/PolicyPatterns/policyModel.e',33).

 /*  loading(load_e_pl,
   	'/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/includes/SaaSPatterns/PolicySetPatterns/policySetModel.e').
 */

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/includes/SaaSPatterns/PolicySetPatterns/policySetModel.e:0
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/includes/SaaSPatterns/PolicySetPatterns/policySetModel.e',1).
% event E_policysetPermit(policyset)
event(e_policysetPermit(policyset)).
==> mpred_prop(e_policysetPermit(policyset),event).
==> meta_argtypes(e_policysetPermit(policyset)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/includes/SaaSPatterns/PolicySetPatterns/policySetModel.e:1
% event E_policysetDeny(policyset)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/includes/SaaSPatterns/PolicySetPatterns/policySetModel.e',1).
event(e_policysetDeny(policyset)).
==> mpred_prop(e_policysetDeny(policyset),event).
==> meta_argtypes(e_policysetDeny(policyset)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/includes/SaaSPatterns/PolicySetPatterns/policySetModel.e:2
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/includes/SaaSPatterns/PolicySetPatterns/policySetModel.e',3).
% event E_policysetDontApply(policyset)
event(e_policysetDontApply(policyset)).
==> mpred_prop(e_policysetDontApply(policyset),event).
==> meta_argtypes(e_policysetDontApply(policyset)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/includes/SaaSPatterns/PolicySetPatterns/policySetModel.e:4
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/includes/SaaSPatterns/PolicySetPatterns/policySetModel.e',5).
% fluent F_policysetPermitted(policyset)
fluent(f_policysetPermitted(policyset)).
==> mpred_prop(f_policysetPermitted(policyset),fluent).
==> meta_argtypes(f_policysetPermitted(policyset)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/includes/SaaSPatterns/PolicySetPatterns/policySetModel.e:5
% fluent F_policysetDenied(policyset)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/includes/SaaSPatterns/PolicySetPatterns/policySetModel.e',5).
fluent(f_policysetDenied(policyset)).
==> mpred_prop(f_policysetDenied(policyset),fluent).
==> meta_argtypes(f_policysetDenied(policyset)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/includes/SaaSPatterns/PolicySetPatterns/policySetModel.e:6
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/includes/SaaSPatterns/PolicySetPatterns/policySetModel.e',7).
% fluent F_policySetNotApplicable(policyset)
fluent(f_policySetNotApplicable(policyset)).
==> mpred_prop(f_policySetNotApplicable(policyset),fluent).
==> meta_argtypes(f_policySetNotApplicable(policyset)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/includes/SaaSPatterns/PolicySetPatterns/policySetModel.e:8
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/includes/SaaSPatterns/PolicySetPatterns/policySetModel.e',9).
% predicate PolicysetHaspolicies(policyset,policy)
predicate(policysetHaspolicies(policyset,policy)).
==> mpred_prop(policysetHaspolicies(policyset,policy),predicate).
==> meta_argtypes(policysetHaspolicies(policyset,policy)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/includes/SaaSPatterns/PolicySetPatterns/policySetModel.e:11
% [policyset,time]
 % Initiates(E_policysetPermit(policyset),F_policysetPermitted(policyset),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/includes/SaaSPatterns/PolicySetPatterns/policySetModel.e',11).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(e_policysetPermit(Policyset),
                    f_policysetPermitted(Policyset),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/includes/SaaSPatterns/PolicySetPatterns/policySetModel.e',11).
axiom(initiates(e_policysetPermit(Policyset), f_policysetPermitted(Policyset), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/includes/SaaSPatterns/PolicySetPatterns/policySetModel.e:12
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/includes/SaaSPatterns/PolicySetPatterns/policySetModel.e',13).
% [policyset,time]
 % Initiates(E_policysetDeny(policyset),F_policysetDenied(policyset),time).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(e_policysetDeny(Policyset),
                    f_policysetDenied(Policyset),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/includes/SaaSPatterns/PolicySetPatterns/policySetModel.e',13).
axiom(initiates(e_policysetDeny(Policyset), f_policysetDenied(Policyset), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/includes/SaaSPatterns/PolicySetPatterns/policySetModel.e:13
% [policyset,time]
 % Initiates(E_policysetDontApply(policyset),F_policySetNotApplicable(policyset),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/includes/SaaSPatterns/PolicySetPatterns/policySetModel.e',13).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(e_policysetDontApply(Policyset),
                    f_policySetNotApplicable(Policyset),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/includes/SaaSPatterns/PolicySetPatterns/policySetModel.e',13).
axiom(initiates(e_policysetDontApply(Policyset), f_policySetNotApplicable(Policyset), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/includes/SaaSPatterns/PolicySetPatterns/policySetModel.e:17
%; 'policies combaning algorithm (stategy) : All Permit'
% [policyset,policy,time]
 % Happens(E_policysetPermit(policyset),time) & PolicysetHaspolicies(policyset,policy) -> HoldsAt(F_policyPermitted(policy),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/includes/SaaSPatterns/PolicySetPatterns/policySetModel.e',19).

 /*  happens(e_policysetPermit(Policyset), Time), policysetHaspolicies(Policyset, Policy) ->
       holds_at(f_policyPermitted(Policy), Time).
 */

 /*  holds_at(f_policyPermitted(Policy), Time) :-
       happens(e_policysetPermit(Policyset), Time),
       policysetHaspolicies(Policyset, Policy).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/includes/SaaSPatterns/PolicySetPatterns/policySetModel.e',19).

 /*  [happens(e_policysetPermit(Policyset), Time), policysetHaspolicies(Policyset, Policy)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(f_policyPermitted(Policy), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/includes/SaaSPatterns/PolicySetPatterns/policySetModel.e',19).
axiom(holds_at(f_policyPermitted(Policy), Time),
   
    [ happens(e_policysetPermit(Policyset), Time),
      policysetHaspolicies(Policyset, Policy)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/includes/SaaSPatterns/PolicySetPatterns/policySetModel.e',19).

 /*  not(happens(e_policysetPermit(Policyset), Time)) :-
       policysetHaspolicies(Policyset, Policy),
       not(holds_at(f_policyPermitted(Policy), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/includes/SaaSPatterns/PolicySetPatterns/policySetModel.e',19).

 /*  [policysetHaspolicies(Policyset, Policy), holds_at(neg(f_policyPermitted(Policy)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(e_policysetPermit(Policyset), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/includes/SaaSPatterns/PolicySetPatterns/policySetModel.e',19).
axiom(not(happens(e_policysetPermit(Policyset), Time)),
   
    [ policysetHaspolicies(Policyset, Policy),
      holds_at(neg(f_policyPermitted(Policy)), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/includes/SaaSPatterns/PolicySetPatterns/policySetModel.e',19).

 /*  not(policysetHaspolicies(Policyset, Policy)) :-
       happens(e_policysetPermit(Policyset), Time),
       not(holds_at(f_policyPermitted(Policy), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/includes/SaaSPatterns/PolicySetPatterns/policySetModel.e',19).

 /*  [happens(e_policysetPermit(Policyset), Time), holds_at(neg(f_policyPermitted(Policy)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(policysetHaspolicies(Policyset, Policy))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/includes/SaaSPatterns/PolicySetPatterns/policySetModel.e',19).
axiom(not(policysetHaspolicies(Policyset, Policy)),
   
    [ happens(e_policysetPermit(Policyset), Time),
      holds_at(neg(f_policyPermitted(Policy)), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/includes/SaaSPatterns/PolicySetPatterns/policySetModel.e:21
%; 'policies combaning algorithm (stategy) : Deny override'
% [policyset,time]
 % Happens(E_policysetDeny(policyset),time) -> {policy}  PolicysetHaspolicies(policyset,policy) & HoldsAt(F_policyDenied(policy),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/includes/SaaSPatterns/PolicySetPatterns/policySetModel.e',23).

 /*  happens(e_policysetDeny(Policyset), Time) ->
       exists([Policy],
               (policysetHaspolicies(Policyset, Policy), holds_at(f_policyDenied(Policy), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/includes/SaaSPatterns/PolicySetPatterns/policySetModel.e',23).

 /*  not(happens(e_policysetDeny(Policyset), Time)) :-
       (   not(policysetHaspolicies(Policyset, Policy))
       ;   not(holds_at(f_policyDenied(Policy), Time))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/includes/SaaSPatterns/PolicySetPatterns/policySetModel.e',23).

 /*  [(not(policysetHaspolicies(Policyset, Policy));holds_at(neg(f_policyDenied(Policy)), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(e_policysetDeny(Policyset), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/includes/SaaSPatterns/PolicySetPatterns/policySetModel.e',23).
axiom(not(happens(e_policysetDeny(Policyset), Time)),
   
    [  (not(policysetHaspolicies(Policyset, Policy));holds_at(neg(f_policyDenied(Policy)), Time))
    ]).

 /*  policysetHaspolicies(Policyset, Policy) :-
       happens(e_policysetDeny(Policyset), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/includes/SaaSPatterns/PolicySetPatterns/policySetModel.e',23).

 /*  [holds_at(metreqs(e_policysetDeny(Policyset)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(e_policysetDeny(Policyset), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/includes/SaaSPatterns/PolicySetPatterns/policySetModel.e',23).
axiom(requires(e_policysetDeny(Policyset), Time),
    [holds_at(metreqs(e_policysetDeny(Policyset)), Time)]).

 /*  [policysetHaspolicies(Policyset, Policy)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(e_policysetDeny(Policyset)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/includes/SaaSPatterns/PolicySetPatterns/policySetModel.e',23).
axiom(holds_at(metreqs(e_policysetDeny(Policyset)), Time),
    [policysetHaspolicies(Policyset, Policy)]).

 /*  holds_at(f_policyDenied(Policy), Time) :-
       happens(e_policysetDeny(Policyset), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/includes/SaaSPatterns/PolicySetPatterns/policySetModel.e',23).

 /*  [holds_at(metreqs(e_policysetDeny(Policyset)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(e_policysetDeny(Policyset), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/includes/SaaSPatterns/PolicySetPatterns/policySetModel.e',23).
axiom(requires(e_policysetDeny(Policyset), Time),
    [holds_at(metreqs(e_policysetDeny(Policyset)), Time)]).

 /*  [holds_at(f_policyDenied(Policy), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(e_policysetDeny(Policyset)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/includes/SaaSPatterns/PolicySetPatterns/policySetModel.e',23).
axiom(holds_at(metreqs(e_policysetDeny(Policyset)), Time),
    [holds_at(f_policyDenied(Policy), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/includes/SaaSPatterns/PolicySetPatterns/policySetModel.e:25
%; 'policies combaning algorithm (stategy) : All Permit'
% [policyset,policy,time]
 % Happens(E_policysetDontApply(policyset),time) & PolicysetHaspolicies(policyset,policy) -> HoldsAt(F_policyNotApplicable(policy),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/includes/SaaSPatterns/PolicySetPatterns/policySetModel.e',27).

 /*  happens(e_policysetDontApply(Policyset), Time), policysetHaspolicies(Policyset, Policy) ->
       holds_at(f_policyNotApplicable(Policy), Time).
 */

 /*  holds_at(f_policyNotApplicable(Policy), Time) :-
       happens(e_policysetDontApply(Policyset), Time),
       policysetHaspolicies(Policyset, Policy).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/includes/SaaSPatterns/PolicySetPatterns/policySetModel.e',27).

 /*  [happens(e_policysetDontApply(Policyset), Time), policysetHaspolicies(Policyset, Policy)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(f_policyNotApplicable(Policy), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/includes/SaaSPatterns/PolicySetPatterns/policySetModel.e',27).
axiom(holds_at(f_policyNotApplicable(Policy), Time),
   
    [ happens(e_policysetDontApply(Policyset), Time),
      policysetHaspolicies(Policyset, Policy)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/includes/SaaSPatterns/PolicySetPatterns/policySetModel.e',27).

 /*  not(happens(e_policysetDontApply(Policyset), Time)) :-
       policysetHaspolicies(Policyset, Policy),
       not(holds_at(f_policyNotApplicable(Policy), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/includes/SaaSPatterns/PolicySetPatterns/policySetModel.e',27).

 /*  [policysetHaspolicies(Policyset, Policy), holds_at(neg(f_policyNotApplicable(Policy)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(e_policysetDontApply(Policyset), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/includes/SaaSPatterns/PolicySetPatterns/policySetModel.e',27).
axiom(not(happens(e_policysetDontApply(Policyset), Time)),
   
    [ policysetHaspolicies(Policyset, Policy),
      holds_at(neg(f_policyNotApplicable(Policy)), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/includes/SaaSPatterns/PolicySetPatterns/policySetModel.e',27).

 /*  not(policysetHaspolicies(Policyset, Policy)) :-
       happens(e_policysetDontApply(Policyset), Time),
       not(holds_at(f_policyNotApplicable(Policy), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/includes/SaaSPatterns/PolicySetPatterns/policySetModel.e',27).

 /*  [happens(e_policysetDontApply(Policyset), Time), holds_at(neg(f_policyNotApplicable(Policy)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(policysetHaspolicies(Policyset, Policy))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/includes/SaaSPatterns/PolicySetPatterns/policySetModel.e',27).
axiom(not(policysetHaspolicies(Policyset, Policy)),
   
    [ happens(e_policysetDontApply(Policyset), Time),
      holds_at(neg(f_policyNotApplicable(Policy)), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/includes/SaaSPatterns/PolicySetPatterns/policySetModel.e:29
% [policyset]
% !HoldsAt(F_policysetPermitted(policyset),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/includes/SaaSPatterns/PolicySetPatterns/policySetModel.e',29).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(f_policysetPermitted(Policyset)), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/includes/SaaSPatterns/PolicySetPatterns/policySetModel.e',29).
axiom(holds_at(neg(f_policysetPermitted(Policyset)), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/includes/SaaSPatterns/PolicySetPatterns/policySetModel.e:30
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/includes/SaaSPatterns/PolicySetPatterns/policySetModel.e',31).
% [policyset]
% !HoldsAt(F_policysetDenied(policyset),0).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(f_policysetDenied(Policyset)), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/includes/SaaSPatterns/PolicySetPatterns/policySetModel.e',31).
axiom(holds_at(neg(f_policysetDenied(Policyset)), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/includes/SaaSPatterns/PolicySetPatterns/policySetModel.e:31
% [policyset]
% !HoldsAt(F_policySetNotApplicable(policyset),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/includes/SaaSPatterns/PolicySetPatterns/policySetModel.e',31).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(f_policySetNotApplicable(Policyset)), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/includes/SaaSPatterns/PolicySetPatterns/policySetModel.e',31).
axiom(holds_at(neg(f_policySetNotApplicable(Policyset)), start),
    []).
