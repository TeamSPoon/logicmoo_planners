:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_ecnet.e',4640).
:- call_pel_directive(translate(unskipped,
                                '/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.pel')).
:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(ecalc).
:- call_pel_directive(translate(begining,
                                '/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.pel')).
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2004a/Holding.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{Mueller:2004a,
%;   author = "Erik T. Mueller",
%;   year = "2004",
%;   title = "Event calculus reasoning through satisfiability",
%;   journal = "Journal of Logic and Computation",
%;   volume = "14",
%;   number = "5",
%;   pages = "703--730",
%; }
%;

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',28).
% option encoding 3
:- call_pel_directive(option(encoding, 3)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',30).
% load foundations/Root.e
:- call_pel_directive(load('foundations/Root.e')).

% load foundations/EC.e
:- call_pel_directive(load('foundations/EC.e')).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',33).
% sort person
sort(person).

% sort object
sort(object).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',36).
% event Hold(person,object)
event(hold(person,object)).

% fluent Holding(person,object)
fluent(holding(person,object)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',39).
% person P1
t(person,p1).

% object O1
t(object,o1).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',42).
% Happens(Hold(P1,O1),0).
happens_at(hold(p1,o1),0).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',44).
% [person,object,time]
% Initiates(Hold(person,object),Holding(person,object),time).
initiates_at(hold(Person,Object),
	     holding(Person,Object),
	     Time).


% !HoldsAt(Holding(P1,O1),0).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',46).
holds_at(not(holding(p1,o1)),0).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',48).
%;;; AUTO !ReleasedAt(Holding(P1,O1),0).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',50).
% completion Happens
:- call_pel_directive(completion(happens_at)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',52).
% range time 0 1
:- call_pel_directive(range(time, 0, 1)).

% range offset 1 1
:- call_pel_directive(range(offset, 1, 1)).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2004a/Leaf.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{Mueller:2004a,
%;   author = "Erik T. Mueller",
%;   year = "2004",
%;   title = "Event calculus reasoning through satisfiability",
%;   journal = "Journal of Logic and Computation",
%;   volume = "14",
%;   number = "5",
%;   pages = "703--730",
%; }
%;

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',83).
% option trajectory on
:- call_pel_directive(option(trajectory, on)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',85).
% load foundations/Root.e
:- call_pel_directive(load('foundations/Root.e')).

% load foundations/EC.e
:- call_pel_directive(load('foundations/EC.e')).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',88).
% sort object
sort(object).

% sort height: integer
subsort(height,integer).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',91).
% fluent Height(object,height)
fluent(height(object,height)).

% fluent Falling(object)
fluent(falling(object)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',93).
% event StartFalling(object)
event(startFalling(object)).

% event HitsGround(object)
event(hitsGround(object)).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',96).
% [object,height1,height2,time]
% HoldsAt(Height(object,height1),time) &
% HoldsAt(Height(object,height2),time) ->
% height1=height2.
holds_at(height(Object, Height1), Time), holds_at(height(Object, Height2), Time) ->
    Height1=Height2.


% [object,time]
% Initiates(StartFalling(object),Falling(object),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',102).
initiates_at(startFalling(Object),
	     falling(Object),
	     Time).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',104).
% [object,height,time]
% Releases(StartFalling(object),Height(object,height),time).
releases_at(startFalling(Object),
	    height(Object,Height),
	    Time).


% [object,height1,height2,offset,time]
% HoldsAt(Height(object,height1),time) &
% height2=height1-offset*offset ->
% Trajectory(Falling(object),time,Height(object,height2),offset).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',108).
holds_at(height(Object, Height1), Time), Height2=Height1-Offset*Offset ->
    trajectory(falling(Object),
               Time,
               height(Object, Height2),
               Offset).


% [object,time]
% HoldsAt(Falling(object),time) &
% HoldsAt(Height(object,0),time) ->
% Happens(HitsGround(object),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',113).
holds_at(falling(Object), Time), holds_at(height(Object, 0), Time) ->
    happens_at(hitsGround(Object), Time).


%;[object,height1,height2,time]
%;HoldsAt(Height(object,height1),time) &
%;height1 != height2 ->
%;Terminates(HitsGround(object),Height(object,height2),time).
% [object,height,time]
% HoldsAt(Height(object,height),time) ->
% Initiates(HitsGround(object),Height(object,height),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',122).
holds_at(height(Object, Height), Time) ->
    initiates_at(hitsGround(Object),
                 height(Object, Height),
                 Time).


% [object,time]
% Terminates(HitsGround(object),Falling(object),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',127).
terminates_at(hitsGround(Object),
	      falling(Object),
	      Time).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',129).
% object Leaf
t(object,leaf).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',131).
% !HoldsAt(Falling(Leaf),0).
holds_at(not(falling(leaf)),0).


% HoldsAt(Height(Leaf,9),0).
holds_at(height(leaf,9),0).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',133).
% Happens(StartFalling(Leaf),0).
happens_at(startFalling(leaf),0).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',135).
% completion Happens
:- call_pel_directive(completion(happens_at)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',137).
% range time 0 4
:- call_pel_directive(range(time, 0, 4)).

% range offset 1 9
:- call_pel_directive(range(offset, 1, 9)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',139).
% range height 0 9
:- call_pel_directive(range(height, 0, 9)).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Cassimatis2002/PolySpace.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @phdthesis{Cassimatis:2002,
%;   author = "Nicholas L. Cassimatis",
%;   year = "2002",
%;   title = "Polyscheme: A Cognitive Architecture for Integrating Multiple Representation and Inference Schemes",
%;   address = "Cambridge, MA",
%;   school = "Program in Media Arts and Sciences, School of Architecture and Planning, Massachusetts Institute of Technology",
%; }
%;
%; sorts

% sort object
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',167).
sort(object).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',169).
% sort xcoord: integer
subsort(xcoord,integer).

% sort ycoord: integer
subsort(ycoord,integer).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',171).
% sort grid
sort(grid).

% sort shape
sort(shape).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',173).
% sort color
sort(color).
%; constants

% shape Round,Square
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',175).
t(shape,round).
t(shape,square).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',177).
% color Red,Green
t(color,red).
t(color,green).
%; predicates, fluents, and events

% predicate Equal(object,object)
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',179).
predicate(equal(object,object)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',181).
% predicate Shape(object,shape)
predicate(shape(object,shape)).

% predicate Color(object,color)
predicate(color(object,color)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',183).
% fluent Location(grid,object,xcoord,ycoord)
fluent(location(grid,object,xcoord,ycoord)).

% event Move(grid,object,xcoord,ycoord,xcoord,ycoord)
event(move(grid,object,xcoord,ycoord,xcoord,ycoord)).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',186).
%; axioms
% [object1,object2]
 % Equal(object1,object2) -> Equal(object2,object1).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',188).
equal(Object1, Object2) ->
    equal(Object2, Object1).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',190).
%; objects have unique shape
% [object,shape1,shape2]
% Shape(object,shape1) & Shape(object,shape2) ->
% shape1=shape2.
shape(Object, Shape1), shape(Object, Shape2) ->
    Shape1=Shape2.


%; objects have unique color
% [object,color1,color2]
% Color(object,color1) & Color(object,color2) ->
% color1=color2.
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',196).
color(Object, Color1), color(Object, Color2) ->
    Color1=Color2.


%; if objects are the same, they have the same shape
% [object1,object2]
% Equal(object1,object2) ->
% ({shape} Shape(object1,shape) & Shape(object2,shape)).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',201).
equal(Object1, Object2) ->
    exists([Shape],
            (shape(Object1, Shape), shape(Object2, Shape))).


%; if objects are the same, they have the same color
% [object1,object2]
% Equal(object1,object2) ->
% ({color} Color(object1,color) & Color(object2,color)).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',206).
equal(Object1, Object2) ->
    exists([Color],
            (color(Object1, Color), color(Object2, Color))).


%; if objects are the same, they have the same location
% [grid,object1,object2,xcoord1,ycoord1,xcoord2,ycoord2,time]
% Equal(object1,object2) ->
% (HoldsAt(Location(grid,object1,xcoord1,ycoord1),time) &
%  HoldsAt(Location(grid,object2,xcoord2,ycoord2),time) ->
%  xcoord1=xcoord2 & ycoord1=ycoord2).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',211).
equal(Object1, Object2) ->
    ( holds_at(location(Grid, Object1, Xcoord1, Ycoord1), Time), holds_at(location(Grid, Object2, Xcoord2, Ycoord2), Time)->Xcoord1=Xcoord2, Ycoord1=Ycoord2
    ).


%; object in one location at a time
% [grid,object,xcoord1,ycoord1,xcoord2,ycoord2,time]
% HoldsAt(Location(grid,object,xcoord1,ycoord1),time) &
% HoldsAt(Location(grid,object,xcoord2,ycoord2),time) ->
% xcoord1=xcoord2 & ycoord1=ycoord2.
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',218).
holds_at(location(Grid, Object, Xcoord1, Ycoord1), Time), holds_at(location(Grid, Object, Xcoord2, Ycoord2), Time) ->
    Xcoord1=Xcoord2,
    Ycoord1=Ycoord2.


%; objects have locations
% [grid,object,time]
% (% {xcoord,ycoord} HoldsAt(Location(grid,object,xcoord,ycoord),time)).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',224).
exists([Xcoord,Ycoord],
 holds_at(location(Grid,Object,Xcoord,Ycoord),
	 Time)).


%; different objects are not at same location
% [grid,object1,object2,xcoord1,ycoord1,time]
% HoldsAt(Location(grid,object1,xcoord1,ycoord1),time) &
% HoldsAt(Location(grid,object2,xcoord1,ycoord1),time) ->
% Equal(object1,object2).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',228).
holds_at(location(Grid, Object1, Xcoord1, Ycoord1), Time), holds_at(location(Grid, Object2, Xcoord1, Ycoord1), Time) ->
    equal(Object1, Object2).


%; moving to a location causes an object to be at that location
% [grid,object,xcoord1,ycoord1,xcoord2,ycoord2,time]
% Initiates(Move(grid,object,xcoord1,ycoord1,xcoord2,ycoord2),
%           Location(grid,object,xcoord2,ycoord2),
%           time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',234).
initiates_at(move(Grid,
		  Object,
		  Xcoord1,
		  Ycoord1,
		  Xcoord2,
		  Ycoord2),
	     location(Grid,
		      Object,
		      Xcoord2,
		      Ycoord2),
	     Time).


%; moving to a location causes the object no longer to be at its previous
%; location
% [grid,object,xcoord1,ycoord1,xcoord2,ycoord2,time]
% Terminates(Move(grid,object,xcoord1,ycoord1,xcoord2,ycoord2),
%            Location(grid,object,xcoord1,ycoord1),
%            time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',241).
terminates_at(move(Grid,
		   Object,
		   Xcoord1,
		   Ycoord1,
		   Xcoord2,
		   Ycoord2),
	      location(Grid,
		       Object,
		       Xcoord1,
		       Ycoord1),
	      Time).


%;; allow diagonal movements
%;[grid,object,xcoord1,ycoord1,xcoord2,ycoord2,time]
%;Happens(Move(grid,object,xcoord1,ycoord1,xcoord2,ycoord2),time) ->
%;HoldsAt(Location(grid,object,xcoord1,ycoord1),time) &
%;(xcoord1=xcoord2 |
%; xcoord1=xcoord2+1 |
%; xcoord1=xcoord2-1) &
%;(ycoord1=ycoord2 |
%; ycoord1=ycoord2+1 |
%; ycoord1=ycoord2-1).
%; only allow right angle movements
% [grid,object,xcoord1,ycoord1,xcoord2,ycoord2,time]
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',259).
% Happens(Move(grid,object,xcoord1,ycoord1,xcoord2,ycoord2),time) ->
% HoldsAt(Location(grid,object,xcoord1,ycoord1),time) &
% ((xcoord1=xcoord2 & (ycoord1=ycoord2+1 | ycoord1=ycoord2-1)) |
%  (ycoord1=ycoord2 & (xcoord1=xcoord2+1 | xcoord1=xcoord2-1))).
happens_at(move(Grid, Object, Xcoord1, Ycoord1, Xcoord2, Ycoord2), Time) ->
    holds_at(location(Grid, Object, Xcoord1, Ycoord1),
             Time),
    (   Xcoord1=Xcoord2,
        (   Ycoord1=Ycoord2+1
        ;   Ycoord1=Ycoord2-1
        )
    ;   Ycoord1=Ycoord2,
        (   Xcoord1=Xcoord2+1
        ;   Xcoord1=Xcoord2-1
        )
    ).


%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Cassimatis2002/TwoScreens.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @phdthesis{Cassimatis:2002,
%;   author = "Nicholas L. Cassimatis",
%;   year = "2002",
%;   title = "Polyscheme: A Cognitive Architecture for Integrating Multiple Representation and Inference Schemes",
%;   address = "Cambridge, MA",
%;   school = "Program in Media Arts and Sciences, School of Architecture and Planning, Massachusetts Institute of Technology",
%; }
%;

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',290).
% load foundations/Root.e
:- call_pel_directive(load('foundations/Root.e')).

% load foundations/EC.e
:- call_pel_directive(load('foundations/EC.e')).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',292).
% load examples/Cassimatis2002/PolySpace.e
:- call_pel_directive(load('examples/Cassimatis2002/PolySpace.e')).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',294).
% grid G1
t(grid,g1).

% object X,Y,Screen1,Screen2
t(object,x).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',294).
t(object,y).
t(object,screen1).
t(object,screen2).
%; perceptions:


% Shape(X,Round).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',297).
shape(x,round).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',299).
% Color(X,Red).
color(x,red).


% Shape(Y,Round).
shape(y,round).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',301).
% Color(Y,Red).
color(y,red).


% Shape(Screen1,Square).
shape(screen1,square).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',303).
% Color(Screen1,Green).
color(screen1,green).


% Shape(Screen2,Square).
shape(screen2,square).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',305).
% Color(Screen2,Green).
color(screen2,green).


% [time]
 % HoldsAt(Location(G1,Screen1,2,0),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',305).
holds_at(location(g1,screen1,2,0),Time).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',307).
% [time]
 % HoldsAt(Location(G1,Screen2,4,0),time).
holds_at(location(g1,screen2,4,0),Time).


% HoldsAt(Location(G1,X,1,1),0).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',307).
holds_at(location(g1,x,1,1),0).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',309).
% HoldsAt(Location(G1,Y,5,1),4).
holds_at(location(g1,y,5,1),4).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',311).
% [xcoord,ycoord,time]
% xcoord!=% 2 & xcoord!=4 & !(xcoord=1 & ycoord=1 & time=0) ->
% !HoldsAt(Location(G1,X,xcoord,ycoord),time) |
% xcoord=5 & ycoord=1 & time=4 & Equal(X,Y).
Xcoord\=2, Xcoord\=4, not((Xcoord=1, Ycoord=1, Time=0)) ->
    (   holds_at(not(location(g1, x, Xcoord, Ycoord)), Time)
    ;   Xcoord=5,
        Ycoord=1,
        Time=4,
        equal(x, y)
    ).


% [xcoord,ycoord,time]
% xcoord!=% 2 & xcoord!=4 & !(xcoord=5 & ycoord=1 & time=4) ->
% !HoldsAt(Location(G1,Y,xcoord,ycoord),time) |
% xcoord=1 & ycoord=1 & time=0 & Equal(X,Y).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',317).
Xcoord\=2, Xcoord\=4, not((Xcoord=5, Ycoord=1, Time=4)) ->
    (   holds_at(not(location(g1, y, Xcoord, Ycoord)), Time)
    ;   Xcoord=1,
        Ycoord=1,
        Time=0,
        equal(x, y)
    ).

% range time 0 4
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',320).
:- call_pel_directive(range(time, 0, 4)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',322).
% range xcoord 0 5
:- call_pel_directive(range(xcoord, 0, 5)).

% range ycoord 0 1
:- call_pel_directive(range(ycoord, 0, 1)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',324).
% range offset 0 0
:- call_pel_directive(range(offset, 0, 0)).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Cassimatis2002/OneScreen.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @phdthesis{Cassimatis:2002,
%;   author = "Nicholas L. Cassimatis",
%;   year = "2002",
%;   title = "Polyscheme: A Cognitive Architecture for Integrating Multiple Representation and Inference Schemes",
%;   address = "Cambridge, MA",
%;   school = "Program in Media Arts and Sciences, School of Architecture and Planning, Massachusetts Institute of Technology",
%; }
%;

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',352).
% load foundations/Root.e
:- call_pel_directive(load('foundations/Root.e')).

% load foundations/EC.e
:- call_pel_directive(load('foundations/EC.e')).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',354).
% load examples/Cassimatis2002/PolySpace.e
:- call_pel_directive(load('examples/Cassimatis2002/PolySpace.e')).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',356).
% grid G1
t(grid,g1).

% object X,Y,Screen
t(object,x).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',356).
t(object,y).
t(object,screen).
%; perceptions:


% Shape(X,Round).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',359).
shape(x,round).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',361).
% Color(X,Red).
color(x,red).


% Shape(Y,Round).
shape(y,round).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',363).
% Color(Y,Red).
color(y,red).


% Shape(Screen,Square).
shape(screen,square).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',365).
% Color(Screen,Green).
color(screen,green).


% [time]
 % HoldsAt(Location(G1,Screen,2,0),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',365).
holds_at(location(g1,screen,2,0),Time).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',367).
% HoldsAt(Location(G1,X,1,1),0).
holds_at(location(g1,x,1,1),0).


% HoldsAt(Location(G1,Y,3,1),2).
holds_at(location(g1,y,3,1),2).


% [xcoord,ycoord,time]
% xcoord!=% 2 & !(xcoord=1 & ycoord=1 & time=0) ->
% !HoldsAt(Location(G1,X,xcoord,ycoord),time) |
% xcoord=3 & ycoord=1 & time=2 & Equal(X,Y).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',371).
Xcoord\=2, not((Xcoord=1, Ycoord=1, Time=0)) ->
    (   holds_at(not(location(g1, x, Xcoord, Ycoord)), Time)
    ;   Xcoord=3,
        Ycoord=1,
        Time=2,
        equal(x, y)
    ).


% [xcoord,ycoord,time]
% xcoord!=% 2 & !(xcoord=3 & ycoord=1 & time=2) ->
% !HoldsAt(Location(G1,Y,xcoord,ycoord),time) |
% xcoord=1 & ycoord=1 & time=0 & Equal(X,Y).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',376).
Xcoord\=2, not((Xcoord=3, Ycoord=1, Time=2)) ->
    (   holds_at(not(location(g1, y, Xcoord, Ycoord)), Time)
    ;   Xcoord=1,
        Ycoord=1,
        Time=0,
        equal(x, y)
    ).

% range time 0 2
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',379).
:- call_pel_directive(range(time, 0, 2)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',381).
% range xcoord 0 4
:- call_pel_directive(range(xcoord, 0, 4)).

% range ycoord 0 2
:- call_pel_directive(range(ycoord, 0, 2)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',383).
% range offset 0 0
:- call_pel_directive(range(offset, 0, 0)).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/BrewkaDixKonolige1997/Wine.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; reasoning by cases
%; \fullciteA[p. 45]{BrewkaDixKonolige:1997}
%;
%; @book{BrewkaDixKonolige:1997,
%;   author = "Gerhard Brewka and J{\"{u}}rgen Dix and Kurt Konolige",
%;   year = "1997",
%;   title = "Nonmonotonic Reasoning: An Overview",
%;   address = "Stanford, CA",
%;   publisher = "CSLI",
%; }
%;

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',414).
% load foundations/Root.e
:- call_pel_directive(load('foundations/Root.e')).

% load foundations/EC.e
:- call_pel_directive(load('foundations/EC.e')).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',417).
% sort x
sort(x).

% x Person
t(x,person).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',420).
% predicate LikesWine(x)
predicate(likesWine(x)).

% predicate Italian(x)
predicate(italian(x)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',422).
% predicate French(x)
predicate(french(x)).

% predicate Ab1(x)
predicate(ab1(x)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',424).
% predicate Ab2(x)
predicate(ab2(x)).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',426).
% [x]
 % Italian(x) & !Ab1(x) -> LikesWine(x).
italian(X), not(ab1(X)) ->
    likesWine(X).


% [x]
 % French(x) & !Ab2(x) -> LikesWine(x).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',426).
french(X), not(ab2(X)) ->
    likesWine(X).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',428).
% [x]
 % Italian(x) -> !French(x).
italian(X) ->
    not(french(X)).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',430).
% Italian(Person) | French(Person).
 (   italian(person)
   ;   french(person)
   ).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',432).
% range time 0 0
:- call_pel_directive(range(time, 0, 0)).

% range offset 1 1
:- call_pel_directive(range(offset, 1, 1)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',435).
% completion Theta Ab1
:- call_pel_directive(completion(theta)).
:- call_pel_directive(completion(ab1)).

% completion Theta Ab2
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',435).
:- call_pel_directive(completion(theta)).
:- call_pel_directive(completion(ab2)).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Shanahan1997/Yale.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{HanksMcDermott:1987,
%;   author = "Steve Hanks and Drew V. McDermott",
%;   year = "1987",
%;   title = "Nonmonotonic logic and temporal projection",
%;   journal = "Artificial Intelligence",
%;   volume = "33",
%;   number = "3",
%;   pages = "379--412",
%; }
%;
%; \fullciteA[pp. 322--323]{Shanahan:1997}
%;
%; @book{Shanahan:1997,
%;   author = "Murray Shanahan",
%;   year = "1997",
%;   title = "Solving the Frame Problem",
%;   address = "Cambridge, MA",
%;   publisher = "MIT Press",
%; }
%;
%; deduction
%;
%; modifications from Shanahan's formulation:
%; InitiallyP -> HoldsAt
%; timestamps
%; added [time] Terminates(Shoot(),Loaded(),time).
%;

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',483).
% option showpred off
:- call_pel_directive(option(showpred, off)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',485).
% load foundations/Root.e
:- call_pel_directive(load('foundations/Root.e')).

% load foundations/EC.e
:- call_pel_directive(load('foundations/EC.e')).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',488).
% event Load()
event(load()).

% event Shoot()
event(shoot()).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',490).
% event Sneeze()
event(sneeze()).

% fluent Loaded()
fluent(loaded()).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',492).
% fluent Alive()
fluent(alive()).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',494).
% [time]
 % Initiates(Load(),Loaded(),time).
initiates_at(load(),loaded(),Time).


% [time]
 % HoldsAt(Loaded(),time) -> Terminates(Shoot(),Alive(),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',494).
holds_at(loaded(), Time) ->
    terminates_at(shoot(), alive(), Time).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',496).
% [time]
 % Terminates(Shoot(),Loaded(),time).
terminates_at(shoot(),loaded(),Time).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',498).
% HoldsAt(Alive(),0).
holds_at(alive(),0).


% !HoldsAt(Loaded(),0).
holds_at(not(loaded()),0).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',500).
% Happens(Load(),0).
happens_at(load(),0).


% Happens(Sneeze(),1).
happens_at(sneeze(),1).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',502).
% Happens(Shoot(),2).
happens_at(shoot(),2).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',504).
% completion Happens
:- call_pel_directive(completion(happens_at)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',506).
% range time 0 3
:- call_pel_directive(range(time, 0, 3)).

% range offset 1 1
:- call_pel_directive(range(offset, 1, 1)).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Shanahan1997/StuffyRoom.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{GinsbergSmith:1988a,
%;   author = "Matthew L. Ginsberg and David E. Smith",
%;   year = "1988",
%;   title = "Reasoning about action \uppercase{I}: \uppercase{A} possible worlds approach",
%;   journal = "Artificial Intelligence",
%;   volume = "35",
%;   number = "2",
%;   pages = "165--195",
%; }
%;
%; \fullciteA[pp. 288--289]{Shanahan:1997}
%;
%; @book{Shanahan:1997,
%;   author = "Murray Shanahan",
%;   year = "1997",
%;   title = "Solving the Frame Problem",
%;   address = "Cambridge, MA",
%;   publisher = "MIT Press",
%; }
%;
%; deduction
%;
%; modifications from Shanahan's formulation:
%; timestamps
%; added:
%; !HoldsAt(Blocked1(),0).
%; !HoldsAt(Blocked2(),0).
%;

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',555).
% load foundations/Root.e
:- call_pel_directive(load('foundations/Root.e')).

% load foundations/EC.e
:- call_pel_directive(load('foundations/EC.e')).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',558).
% event Close1()
event(close1()).

% event Close2()
event(close2()).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',560).
% event Start()
event(start()).

% fluent Blocked1()
fluent(blocked1()).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',562).
% fluent Blocked2()
fluent(blocked2()).

% fluent Stuffy()
fluent(stuffy()).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',564).
% noninertial Stuffy
:- call_pel_directive(noninertial(stuffy)).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',566).
% [time]
 % Initiates(Close1(),Blocked1(),time).
initiates_at(close1(),blocked1(),Time).


% [time]
 % Initiates(Close2(),Blocked2(),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',566).
initiates_at(close2(),blocked2(),Time).


% [time]
% HoldsAt(Stuffy(),time) <->
% HoldsAt(Blocked1(),time)&HoldsAt(Blocked2(),time).
holds_at(stuffy(), Time) <->
    holds_at(blocked1(), Time),
    holds_at(blocked2(), Time).


% [time]
 % Initiates(Start(),Blocked1(),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',572).
initiates_at(start(),blocked1(),Time).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',574).
% [time]
 % Terminates(Start(),Blocked2(),time).
terminates_at(start(),blocked2(),Time).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',576).
% !HoldsAt(Blocked1(),0).
holds_at(not(blocked1()),0).


% !HoldsAt(Blocked2(),0).
holds_at(not(blocked2()),0).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',578).
% Happens(Start(),0).
happens_at(start(),0).


% Happens(Close2(),1).
happens_at(close2(),1).

% completion Happens
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',580).
:- call_pel_directive(completion(happens_at)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',583).
% range time 0 2
:- call_pel_directive(range(time, 0, 2)).

% range offset 1 1
:- call_pel_directive(range(offset, 1, 1)).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Shanahan1997/BusRide.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{Kartha:1994,
%;   author = "G. Neelakantan Kartha",
%;   year = "1994",
%;   title = "Two counterexamples related to \uppercase{B}aker's approach to the frame problem",
%;   journal = "Artificial Intelligence",
%;   volume = "69",
%;   number = "1--2",
%;   pages = "379--391",
%; }
%;
%; \fullciteA[pp. 359--361]{Shanahan:1997}
%;
%; @book{Shanahan:1997,
%;   author = "Murray Shanahan",
%;   year = "1997",
%;   title = "Solving the Frame Problem",
%;   address = "Cambridge, MA",
%;   publisher = "MIT Press",
%; }
%;
%; modifications from Shanahan's formulation:
%; InitiallyN -> !HoldsAt
%; timestamps
%;

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',628).
% load foundations/Root.e
:- call_pel_directive(load('foundations/Root.e')).

% load foundations/EC.e
:- call_pel_directive(load('foundations/EC.e')).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',631).
% fluent HasTicket()
fluent(hasTicket()).

% fluent OnRed()
fluent(onRed()).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',633).
% fluent OnYellow()
fluent(onYellow()).

% event Buy()
event(buy()).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',635).
% event Board()
event(board()).

% event BoardRed()
event(boardRed()).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',637).
% event BoardYellow()
event(boardYellow()).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',639).
% [time]
 % Happens(Board(),time) -> Happens(BoardRed(),time) | Happens(BoardYellow(),time).
happens_at(board(), Time) ->
    (   happens_at(boardRed(), Time)
    ;   happens_at(boardYellow(), Time)
    ).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',641).
% [time]
 % Initiates(Buy(),HasTicket(),time).
initiates_at(buy(),hasTicket(),Time).


% [time]
 % HoldsAt(HasTicket(),time) -> Initiates(BoardRed(),OnRed(),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',641).
holds_at(hasTicket(), Time) ->
    initiates_at(boardRed(), onRed(), Time).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',643).
% [time]
 % HoldsAt(HasTicket(),time) -> Initiates(BoardYellow(),OnYellow(),time).
holds_at(hasTicket(), Time) ->
    initiates_at(boardYellow(), onYellow(), Time).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',645).
% [time]
 % !(HoldsAt(OnRed(),time) & HoldsAt(OnYellow(),time)).
not(( holds_at(onRed(), Time),
      holds_at(onYellow(), Time)
    )).


% [time]
 % HoldsAt(OnRed(),time) -> HoldsAt(HasTicket(),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',645).
holds_at(onRed(), Time) ->
    holds_at(hasTicket(), Time).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',647).
% [time]
 % HoldsAt(OnYellow(),time) -> HoldsAt(HasTicket(),time).
holds_at(onYellow(), Time) ->
    holds_at(hasTicket(), Time).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',649).
% HoldsAt(OnRed(),2).
holds_at(onRed(),2).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',651).
% !HoldsAt(HasTicket(),0).
holds_at(not(hasTicket()),0).


% Happens(Buy(),0).
happens_at(buy(),0).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',653).
% Happens(Board(),1).
happens_at(board(),1).


%; ABDUCED Happens(BoardRed(), 1).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',656).
% completion Happens
:- call_pel_directive(completion(happens_at)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',658).
% range time 0 2
:- call_pel_directive(range(time, 0, 2)).

% range offset 1 1
:- call_pel_directive(range(offset, 1, 1)).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Shanahan1997/DeadOrAlive.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; \fullciteA[p. 324]{Shanahan:1997}
%;
%; @book{Shanahan:1997,
%;   author = "Murray Shanahan",
%;   year = "1997",
%;   title = "Solving the Frame Problem",
%;   address = "Cambridge, MA",
%;   publisher = "MIT Press",
%; }
%;
%; deduction
%;
%; modifications from Shanahan's formulation:
%; InitiallyP -> HoldsAt
%; timestamps
%; added [time] Terminates(Shoot(),Loaded(),time).
%;

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',696).
% load foundations/Root.e
:- call_pel_directive(load('foundations/Root.e')).

% load foundations/EC.e
:- call_pel_directive(load('foundations/EC.e')).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',699).
% event Load()
event(load()).

% event Shoot()
event(shoot()).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',701).
% event Sneeze()
event(sneeze()).

% fluent Loaded()
fluent(loaded()).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',703).
% fluent Alive()
fluent(alive()).

% fluent Dead()
fluent(dead()).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',705).
% noninertial Dead
:- call_pel_directive(noninertial(dead)).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',707).
% [time]
 % Initiates(Load(),Loaded(),time).
initiates_at(load(),loaded(),Time).


% [time]
 % HoldsAt(Loaded(),time) -> Terminates(Shoot(),Alive(),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',707).
holds_at(loaded(), Time) ->
    terminates_at(shoot(), alive(), Time).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',709).
% [time]
 % Terminates(Shoot(),Loaded(),time).
terminates_at(shoot(),loaded(),Time).


% [time]
 % HoldsAt(Dead(),time) <-> !HoldsAt(Alive(),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',709).
holds_at(dead(), Time) <->
    holds_at(not(alive()), Time).


% HoldsAt(Alive(),0).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',711).
holds_at(alive(),0).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',713).
% !HoldsAt(Loaded(),0).
holds_at(not(loaded()),0).


% Happens(Load(),0).
happens_at(load(),0).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',715).
% Happens(Sneeze(),1).
happens_at(sneeze(),1).


% Happens(Shoot(),2).
happens_at(shoot(),2).

% completion Happens
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',717).
:- call_pel_directive(completion(happens_at)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',720).
% range time 0 3
:- call_pel_directive(range(time, 0, 3)).

% range offset 1 1
:- call_pel_directive(range(offset, 1, 1)).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Shanahan1997/Supermarket.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; \fullciteA[pp. 302--304]{Shanahan:1997}
%;
%; @book{Shanahan:1997,
%;   author = "Murray Shanahan",
%;   year = "1997",
%;   title = "Solving the Frame Problem",
%;   address = "Cambridge, MA",
%;   publisher = "MIT Press",
%; }
%;
%; deduction
%;
%; modifications from Shanahan's formulation:
%; reformulated using the method of \fullciteA[pp. 460--461]{MillerShanahan:2002}
%;
%; @incollection{MillerShanahan:2002,
%;   author = "Rob Miller and Murray Shanahan",
%;   year = "2002",
%;   title = "Some alternative formulations of the event calculus",
%;   editor = "Antonis C. Kakas and Fariba Sadri",
%;   booktitle = "Computational Logic: Logic Programming and Beyond: Essays in Honour of \uppercase{R}obert \uppercase{A}. \uppercase{K}owalski, Part \uppercase{II}",
%;   series = "Lecture Notes in Computer Science",
%;   volume = "2408",
%;   pages = "452--490",
%;   address = "Berlin",
%;   publisher = "Springer",
%; }
%;
%; added:
%; !HoldsAt(Forwards(), 0).
%; !HoldsAt(Backwards(), 0).
%; !HoldsAt(Spinning(), 0).
%;

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',774).
% load foundations/Root.e
:- call_pel_directive(load('foundations/Root.e')).

% load foundations/EC.e
:- call_pel_directive(load('foundations/EC.e')).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',777).
% event Push()
event(push()).

% event Pull()
event(pull()).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',779).
% fluent Forwards()
fluent(forwards()).

% fluent Backwards()
fluent(backwards()).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',781).
% fluent Spinning()
fluent(spinning()).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',783).
% [time]
% !Happens(Pull(), time) ->
% Initiates(Push(), Forwards(), time).
not(happens_at(pull(), Time)) ->
    initiates_at(push(), forwards(), Time).


% [time]
% !Happens(Pull(), time) ->
% Terminates(Push(), Backwards(), time).
not(happens_at(pull(), Time)) ->
    terminates_at(push(), backwards(), Time).


% [time]
% !Happens(Push(), time) ->
% Initiates(Pull(), Backwards(), time).
not(happens_at(push(), Time)) ->
    initiates_at(pull(), backwards(), Time).


% [time]
% !Happens(Push(), time) ->
% Terminates(Pull(), Forwards(), time).
not(happens_at(push(), Time)) ->
    terminates_at(pull(), forwards(), Time).


% [time]
% Happens(Push(), time) ->
% Initiates(Pull(), Spinning(), time).
happens_at(push(), Time) ->
    initiates_at(pull(), spinning(), Time).


% [time]
% Happens(Push(), time) ->
% Terminates(Pull(), Forwards(), time).
happens_at(push(), Time) ->
    terminates_at(pull(), forwards(), Time).


% [time]
% Happens(Push(), time) ->
% Terminates(Pull(), Backwards(), time).
happens_at(push(), Time) ->
    terminates_at(pull(), backwards(), Time).


% [time]
% !Happens(Pull(), time) ->
% Terminates(Push(), Spinning(), time).
not(happens_at(pull(), Time)) ->
    terminates_at(push(), spinning(), Time).


% [time]
% !Happens(Push(), time) ->
% Terminates(Pull(), Spinning(), time).
not(happens_at(push(), Time)) ->
    terminates_at(pull(), spinning(), Time).


% !HoldsAt(Forwards(), 0).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',818).
holds_at(not(forwards()),0).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',820).
% !HoldsAt(Backwards(), 0).
holds_at(not(backwards()),0).


% !HoldsAt(Spinning(), 0).
holds_at(not(spinning()),0).


% Happens(Push(), 5).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',822).
happens_at(push(),5).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',824).
% Happens(Pull(), 5).
happens_at(pull(),5).


% Happens(Pull(), 10).
happens_at(pull(),10).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',826).
% Happens(Push(), 10).
happens_at(push(),10).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',828).
% completion Happens
:- call_pel_directive(completion(happens_at)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',830).
% range time 0 12
:- call_pel_directive(range(time, 0, 12)).

% range offset 1 1
:- call_pel_directive(range(offset, 1, 1)).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Shanahan1997/StolenCar.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @inproceedings{Kautz:1986,
%;   author = "Henry A. Kautz",
%;   year = "1986",
%;   title = "The Logic of Persistence",
%;   booktitle = "\uppercase{P}roceedings of the \uppercase{F}ifth \uppercase{N}ational \uppercase{C}onference on \uppercase{A}rtificial \uppercase{I}ntelligence",
%;   pages = "401--405",
%;   address = "Los Altos, CA",
%;   publisher = "Morgan Kaufmann",
%; }
%;
%; \fullciteA[p. 359]{Shanahan:1997}
%;
%; @book{Shanahan:1997,
%;   author = "Murray Shanahan",
%;   year = "1997",
%;   title = "Solving the Frame Problem",
%;   address = "Cambridge, MA",
%;   publisher = "MIT Press",
%; }
%;
%; abduction
%;
%; modifications from Shanahan's formulation:
%; timestamps
%; added !HoldsAt(CarParked(),0).
%;

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',877).
% load foundations/Root.e
:- call_pel_directive(load('foundations/Root.e')).

% load foundations/EC.e
:- call_pel_directive(load('foundations/EC.e')).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',880).
% event Park()
event(park()).

% event Steal()
event(steal()).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',882).
% fluent CarParked()
fluent(carParked()).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',884).
% [time]
 % Initiates(Park(),CarParked(),time).
initiates_at(park(),carParked(),Time).


% [time]
 % Terminates(Steal(),CarParked(),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',884).
terminates_at(steal(),carParked(),Time).


% !HoldsAt(CarParked(),0).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',886).
holds_at(not(carParked()),0).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',888).
% Happens(Park(),0).
happens_at(park(),0).


%; ABDUCED Happens(Steal(), 1).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',890).
% !HoldsAt(CarParked(),2).
holds_at(not(carParked()),2).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',892).
% range time 0 2
:- call_pel_directive(range(time, 0, 2)).

% range offset 1 1
:- call_pel_directive(range(offset, 1, 1)).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/MillerShanahan2002/Bowl.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; \fullciteA[p. 461]{MillerShanahan:2002}
%;
%; @incollection{MillerShanahan:2002,
%;   author = "Rob Miller and Murray Shanahan",
%;   year = "2002",
%;   title = "Some alternative formulations of the event calculus",
%;   editor = "Antonis C. Kakas and Fariba Sadri",
%;   booktitle = "Computational Logic: Logic Programming and Beyond: Essays in Honour of \uppercase{R}obert \uppercase{A}. \uppercase{K}owalski, Part \uppercase{II}",
%;   series = "Lecture Notes in Computer Science",
%;   volume = "2408",
%;   pages = "452--490",
%;   address = "Berlin",
%;   publisher = "Springer",
%; }
%;

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',928).
% load foundations/Root.e
:- call_pel_directive(load('foundations/Root.e')).

% load foundations/EC.e
:- call_pel_directive(load('foundations/EC.e')).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',931).
% event LiftLeft()
event(liftLeft()).

% event LiftRight()
event(liftRight()).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',933).
% fluent Spilt()
fluent(spilt()).

% fluent Raised()
fluent(raised()).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',936).
% [time]
% !Happens(LiftRight(), time) ->
% Initiates(LiftLeft(), Spilt(), time).
not(happens_at(liftRight(), Time)) ->
    initiates_at(liftLeft(), spilt(), Time).


% [time]
% !Happens(LiftLeft(), time) ->
% Initiates(LiftRight(), Spilt(), time).
not(happens_at(liftLeft(), Time)) ->
    initiates_at(liftRight(), spilt(), Time).


% [time]
% Happens(LiftLeft(), time) ->
% Initiates(LiftRight(), Raised(), time).
happens_at(liftLeft(), Time) ->
    initiates_at(liftRight(), raised(), Time).


% !HoldsAt(Spilt(), 0).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',947).
holds_at(not(spilt()),0).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',949).
% !HoldsAt(Raised(), 0).
holds_at(not(raised()),0).


% Happens(LiftLeft(), 2).
happens_at(liftLeft(),2).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',951).
% Happens(LiftRight(), 2).
happens_at(liftRight(),2).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',953).
% completion Happens
:- call_pel_directive(completion(happens_at)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',955).
% range time 0 3
:- call_pel_directive(range(time, 0, 3)).

% range offset 1 1
:- call_pel_directive(range(offset, 1, 1)).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/ReiterCriscuolo1981/NixonDiamond1.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; conflicting defaults: showing that inconsistency results
%; without a cancellation rule
%; \fullciteA[p. 274]{ReiterCriscuolo:1981}
%; \fullciteA[pp. 98--99]{McCarthy:1986}
%;
%; @inproceedings{ReiterCriscuolo:1981,
%;   author = "Raymond Reiter and Giovanni Criscuolo",
%;   year = "1981",
%;   title = "On interacting defaults",
%;   booktitle = "\uppercase{P}roceedings of the \uppercase{S}eventh \uppercase{I}nternational \uppercase{J}oint \uppercase{C}onference on \uppercase{A}rtificial \uppercase{I}ntelligence",
%;   volume = "1",
%;   pages = "270--276",
%;   address = "Los Altos, CA",
%;   publisher = "William Kaufmann",
%; }
%;
%; @article{McCarthy:1986,
%;   author = "John McCarthy",
%;   year = "1986",
%;   title = "Applications of circumscription to formalizing common-sense knowledge",
%;   journal = "Artificial Intelligence",
%;   volume = "28",
%;   pages = "89--116".
%; }
%;

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1001).
% load foundations/Root.e
:- call_pel_directive(load('foundations/Root.e')).

% load foundations/EC.e
:- call_pel_directive(load('foundations/EC.e')).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1004).
% sort x
sort(x).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1006).
% predicate Republican(x)
predicate(republican(x)).

% predicate Quaker(x)
predicate(quaker(x)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1008).
% predicate Pacifist(x)
predicate(pacifist(x)).

% predicate Ab1(x)
predicate(ab1(x)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1010).
% predicate Ab2(x)
predicate(ab2(x)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1012).
% x John
t(x,john).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1014).
% Republican(John).
republican(john).


% Quaker(John).
quaker(john).


% [x]
 % Republican(x) & !Ab1(x) -> !Pacifist(x).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1016).
republican(X), not(ab1(X)) ->
    not(pacifist(X)).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1018).
% [x]
 % Quaker(x) & !Ab2(x) -> Pacifist(x).
quaker(X), not(ab2(X)) ->
    pacifist(X).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1020).
% range time 0 0
:- call_pel_directive(range(time, 0, 0)).

% range offset 1 1
:- call_pel_directive(range(offset, 1, 1)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1023).
% completion Theta Ab1
:- call_pel_directive(completion(theta)).
:- call_pel_directive(completion(ab1)).

% completion Theta Ab2
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1023).
:- call_pel_directive(completion(theta)).
:- call_pel_directive(completion(ab2)).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/ReiterCriscuolo1981/NixonDiamond2.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; conflicting defaults: method (D)
%; \fullciteA[p. 274]{ReiterCriscuolo:1981}
%; \fullciteA[pp. 98--99]{McCarthy:1986}
%; \fullciteA[p. 18]{BrewkaDixKonolige:1997}
%;
%; @inproceedings{ReiterCriscuolo:1981,
%;   author = "Raymond Reiter and Giovanni Criscuolo",
%;   year = "1981",
%;   title = "On interacting defaults",
%;   booktitle = "\uppercase{P}roceedings of the \uppercase{S}eventh \uppercase{I}nternational \uppercase{J}oint \uppercase{C}onference on \uppercase{A}rtificial \uppercase{I}ntelligence",
%;   volume = "1",
%;   pages = "270--276",
%;   address = "Los Altos, CA",
%;   publisher = "William Kaufmann",
%; }
%;
%; @article{McCarthy:1986,
%;   author = "John McCarthy",
%;   year = "1986",
%;   title = "Applications of circumscription to formalizing common-sense knowledge",
%;   journal = "Artificial Intelligence",
%;   volume = "28",
%;   pages = "89--116".
%; }
%;
%; @book{BrewkaDixKonolige:1997,
%;   author = "Gerhard Brewka and J{\"{u}}rgen Dix and Kurt Konolige",
%;   year = "1997",
%;   title = "Nonmonotonic Reasoning: An Overview",
%;   address = "Stanford, CA",
%;   publisher = "CSLI",
%; }
%;

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1077).
% load foundations/Root.e
:- call_pel_directive(load('foundations/Root.e')).

% load foundations/EC.e
:- call_pel_directive(load('foundations/EC.e')).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1080).
% sort x
sort(x).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1082).
% predicate Republican(x)
predicate(republican(x)).

% predicate Quaker(x)
predicate(quaker(x)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1084).
% predicate Pacifist(x)
predicate(pacifist(x)).

% predicate Ab1(x)
predicate(ab1(x)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1086).
% predicate Ab2(x)
predicate(ab2(x)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1088).
% x John
t(x,john).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1090).
% Republican(John).
republican(john).


% Quaker(John).
quaker(john).


% [x]
 % Republican(x) & !Ab1(x) -> !Pacifist(x).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1092).
republican(X), not(ab1(X)) ->
    not(pacifist(X)).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1094).
% [x]
 % Quaker(x) & !Ab2(x) -> Pacifist(x).
quaker(X), not(ab2(X)) ->
    pacifist(X).

% Theta: 
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1094).
directive(theta).
 


% [x]
 % Republican(x) -> Ab2(x).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1094).
republican(X) ->
    ab2(X).

% range time 0 0
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1096).
:- call_pel_directive(range(time, 0, 0)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1098).
% range offset 1 1
:- call_pel_directive(range(offset, 1, 1)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1100).
% completion Theta Ab1
:- call_pel_directive(completion(theta)).
:- call_pel_directive(completion(ab1)).

% completion Theta Ab2
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1100).
:- call_pel_directive(completion(theta)).
:- call_pel_directive(completion(ab2)).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter2/Sleep2.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1129).
% load foundations/Root.e
:- call_pel_directive(load('foundations/Root.e')).

% load foundations/EC.e
:- call_pel_directive(load('foundations/EC.e')).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1132).
% sort agent
sort(agent).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1134).
% agent Nathan
t(agent,nathan).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1136).
% fluent Awake(agent)
fluent(awake(agent)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1138).
% event WakeUp(agent)
event(wakeUp(agent)).

% event FallAsleep(agent)
event(fallAsleep(agent)).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1141).
%; Sigma
% [agent,time]
 % Initiates(WakeUp(agent),Awake(agent),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1143).
initiates_at(wakeUp(Agent),awake(Agent),Time).


% [agent,time]
 % Terminates(FallAsleep(agent),Awake(agent),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1143).
terminates_at(fallAsleep(Agent),awake(Agent),Time).


%; Gamma


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1148).
% !HoldsAt(Awake(Nathan),0).
holds_at(not(awake(nathan)),0).


% HoldsAt(Awake(Nathan),1).
holds_at(awake(nathan),1).


%; abduced:
%; Happens(WakeUp(Nathan),0).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1154).
% range time 0 1
:- call_pel_directive(range(time, 0, 1)).

% range offset 1 1
:- call_pel_directive(range(offset, 1, 1)).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter2/Sleep1.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1183).
% load foundations/Root.e
:- call_pel_directive(load('foundations/Root.e')).

% load foundations/EC.e
:- call_pel_directive(load('foundations/EC.e')).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1186).
% sort agent
sort(agent).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1188).
% agent Nathan
t(agent,nathan).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1190).
% fluent Awake(agent)
fluent(awake(agent)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1192).
% event WakeUp(agent)
event(wakeUp(agent)).

% event FallAsleep(agent)
event(fallAsleep(agent)).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1195).
%; Sigma
% [agent,time]
 % Initiates(WakeUp(agent),Awake(agent),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1197).
initiates_at(wakeUp(Agent),awake(Agent),Time).


% [agent,time]
 % Terminates(FallAsleep(agent),Awake(agent),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1197).
terminates_at(fallAsleep(Agent),awake(Agent),Time).


%; Delta


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1202).
% Happens(WakeUp(Nathan),1).
happens_at(wakeUp(nathan),1).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1204).
%; Gamma


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1206).
% !HoldsAt(Awake(Nathan),0).
holds_at(not(awake(nathan)),0).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1208).
%; entailed:
%; HoldsAt(Awake(Nathan),3).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1211).
% completion Happens
:- call_pel_directive(completion(happens_at)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1213).
% range time 0 3
:- call_pel_directive(range(time, 0, 3)).

% range offset 1 1
:- call_pel_directive(range(offset, 1, 1)).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter2/Sleep3.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1242).
% load foundations/Root.e
:- call_pel_directive(load('foundations/Root.e')).

% load foundations/EC.e
:- call_pel_directive(load('foundations/EC.e')).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1245).
% sort agent
sort(agent).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1247).
% agent Nathan
t(agent,nathan).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1249).
% fluent Awake(agent)
fluent(awake(agent)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1251).
% event WakeUp(agent)
event(wakeUp(agent)).

% event FallAsleep(agent)
event(fallAsleep(agent)).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1254).
%; Sigma
% [agent,time]
 % Initiates(WakeUp(agent),Awake(agent),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1256).
initiates_at(wakeUp(Agent),awake(Agent),Time).


% [agent,time]
 % Terminates(FallAsleep(agent),Awake(agent),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1256).
terminates_at(fallAsleep(Agent),awake(Agent),Time).


%; Delta
% [agent,time]
% Happens(WakeUp(agent),time) ->
% !HoldsAt(Awake(agent),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1261).
happens_at(wakeUp(Agent), Time) ->
    holds_at(not(awake(Agent)), Time).


% Happens(WakeUp(Nathan),0).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1264).
happens_at(wakeUp(nathan),0).


%; Gamma


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1269).
% HoldsAt(Awake(Nathan),1).
holds_at(awake(nathan),1).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1271).
%; inferred:
%; !HoldsAt(Awake(Nathan),0).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1274).
% completion Happens
:- call_pel_directive(completion(happens_at)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1276).
% range time 0 1
:- call_pel_directive(range(time, 0, 1)).

% range offset 1 1
:- call_pel_directive(range(offset, 1, 1)).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter2/Inconsistency3.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1305).
% load foundations/Root.e
:- call_pel_directive(load('foundations/Root.e')).

% load foundations/EC.e
:- call_pel_directive(load('foundations/EC.e')).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1308).
% sort object
sort(object).

% object O1
t(object,o1).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1311).
% fluent F(object)
fluent(f(object)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1313).
% event E(object)
event(e(object)).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1315).
% [object,time]
 % Releases(E(object),F(object),time).
releases_at(e(Object),f(Object),Time).


% [object,time]
 % Terminates(E(object),F(object),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1315).
terminates_at(e(Object),f(Object),Time).


% Happens(E(O1),0).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1317).
happens_at(e(o1),0).

% range time 0 1
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1319).
:- call_pel_directive(range(time, 0, 1)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1321).
% range offset 1 1
:- call_pel_directive(range(offset, 1, 1)).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter2/Sleep4.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1349).
% load foundations/Root.e
:- call_pel_directive(load('foundations/Root.e')).

% load foundations/EC.e
:- call_pel_directive(load('foundations/EC.e')).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1352).
% sort agent
sort(agent).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1354).
% agent Nathan
t(agent,nathan).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1356).
% fluent Awake(agent)
fluent(awake(agent)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1358).
% event WakeUp(agent)
event(wakeUp(agent)).

% event FallAsleep(agent)
event(fallAsleep(agent)).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1361).
%; Sigma
% [agent,time]
 % Initiates(WakeUp(agent),Awake(agent),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1363).
initiates_at(wakeUp(Agent),awake(Agent),Time).


% [agent,time]
 % Terminates(FallAsleep(agent),Awake(agent),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1363).
terminates_at(fallAsleep(Agent),awake(Agent),Time).


%; Delta


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1368).
% Happens(WakeUp(Nathan),1).
happens_at(wakeUp(nathan),1).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1370).
%; entailed:
%; HoldsAt(Awake(Nathan),3).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1373).
% completion Happens
:- call_pel_directive(completion(happens_at)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1375).
% range time 0 3
:- call_pel_directive(range(time, 0, 3)).

% range offset 1 1
:- call_pel_directive(range(offset, 1, 1)).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter2/Inconsistency4.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1404).
% load foundations/Root.e
:- call_pel_directive(load('foundations/Root.e')).

% load foundations/EC.e
:- call_pel_directive(load('foundations/EC.e')).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1407).
% sort object
sort(object).

% object O1
t(object,o1).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1410).
% event E(object)
event(e(object)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1412).
% fluent F1(object)
fluent(f1(object)).

% fluent F2(object)
fluent(f2(object)).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1415).
% [object,time]
% Initiates(E(object),F1(object),time).
initiates_at(e(Object),f1(Object),Time).


% [object,time]
% HoldsAt(F1(object),time) <-> HoldsAt(F2(object),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1419).
holds_at(f1(Object), Time) <->
    holds_at(f2(Object), Time).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1421).
% !HoldsAt(F2(O1),0).
holds_at(not(f2(o1)),0).


% Happens(E(O1),0).
happens_at(e(o1),0).

% range time 0 1
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1423).
:- call_pel_directive(range(time, 0, 1)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1425).
% range offset 1 1
:- call_pel_directive(range(offset, 1, 1)).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter2/Inconsistency1.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1453).
% load foundations/Root.e
:- call_pel_directive(load('foundations/Root.e')).

% load foundations/EC.e
:- call_pel_directive(load('foundations/EC.e')).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1456).
% sort object
sort(object).

% object O1
t(object,o1).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1459).
% fluent F(object)
fluent(f(object)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1461).
% event E(object)
event(e(object)).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1463).
% [object,time]
 % Initiates(E(object),F(object),time).
initiates_at(e(Object),f(Object),Time).


% [object,time]
 % Terminates(E(object),F(object),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1463).
terminates_at(e(Object),f(Object),Time).


% Happens(E(O1),0).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1465).
happens_at(e(o1),0).

% range time 0 1
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1467).
:- call_pel_directive(range(time, 0, 1)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1469).
% range offset 1 1
:- call_pel_directive(range(offset, 1, 1)).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter2/Inconsistency2.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1497).
% load foundations/Root.e
:- call_pel_directive(load('foundations/Root.e')).

% load foundations/EC.e
:- call_pel_directive(load('foundations/EC.e')).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1500).
% sort object
sort(object).

% object O1
t(object,o1).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1503).
% fluent F(object)
fluent(f(object)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1505).
% event E(object)
event(e(object)).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1507).
% [object,time]
 % Releases(E(object),F(object),time).
releases_at(e(Object),f(Object),Time).


% [object,time]
 % Initiates(E(object),F(object),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1507).
initiates_at(e(Object),f(Object),Time).


% Happens(E(O1),0).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1509).
happens_at(e(o1),0).

% range time 0 1
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1511).
:- call_pel_directive(range(time, 0, 1)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1513).
% range offset 1 1
:- call_pel_directive(range(offset, 1, 1)).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter8/CameraWithFlash.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1541).
% load foundations/Root.e
:- call_pel_directive(load('foundations/Root.e')).

% load foundations/EC.e
:- call_pel_directive(load('foundations/EC.e')).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1544).
% sort camera
sort(camera).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1546).
% camera Camera1
t(camera,camera1).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1548).
% fluent ProperlyExposedPicture(camera)
fluent(properlyExposedPicture(camera)).

% fluent ImproperlyExposedPicture(camera)
fluent(improperlyExposedPicture(camera)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1551).
% event ReleaseShutter(camera)
event(releaseShutter(camera)).

% event TriggerFlash(camera)
event(triggerFlash(camera)).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1554).
%; Sigma
% [camera,time]
% Happens(TriggerFlash(camera),time) ->
% Initiates(ReleaseShutter(camera),ProperlyExposedPicture(camera),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1556).
happens_at(triggerFlash(Camera), Time) ->
    initiates_at(releaseShutter(Camera),
                 properlyExposedPicture(Camera),
                 Time).


% [camera,time]
% !Happens(TriggerFlash(camera),time) ->
% Initiates(ReleaseShutter(camera),ImproperlyExposedPicture(camera),time).
not(happens_at(triggerFlash(Camera), Time)) ->
    initiates_at(releaseShutter(Camera),
                 improperlyExposedPicture(Camera),
                 Time).


%; Delta

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1566).
% Delta: 
directive(delta).
 


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1566).
% Happens(ReleaseShutter(Camera1),0).
happens_at(releaseShutter(camera1),0).

% Delta: 
directive(delta).
 


% Happens(TriggerFlash(Camera1),1).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1566).
happens_at(triggerFlash(camera1),1).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1568).
% Delta: 
directive(delta).
 


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1568).
% Happens(ReleaseShutter(Camera1),1).
happens_at(releaseShutter(camera1),1).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1570).
%; added:
% [camera]
 % !HoldsAt(ImproperlyExposedPicture(camera),0).
holds_at(not(improperlyExposedPicture(Camera)),0).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1572).
% [camera]
 % !HoldsAt(ProperlyExposedPicture(camera),0).
holds_at(not(properlyExposedPicture(Camera)),0).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1574).
% completion Delta Happens
:- call_pel_directive(completion(delta)).
:- call_pel_directive(completion(happens_at)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1576).
% range time 0 2
:- call_pel_directive(range(time, 0, 2)).

% range offset 1 1
:- call_pel_directive(range(offset, 1, 1)).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter8/MovingRobot.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @inproceedings{Shanahan:1996,
%;   author = "Murray Shanahan",
%;   year = "1996",
%;   title = "Robotics and the common sense informatic situation",
%;   editor = "Wolfgang Wahlster",
%;   booktitle = "\uppercase{P}roceedings of the \uppercase{T}welfth \uppercase{E}uropean \uppercase{C}onference on \uppercase{A}rtificial \uppercase{I}ntelligence",
%;   pages = "684--688",
%;   address = "Chichester, UK",
%;   publisher = "John Wiley",
%; }
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1616).
% option renaming off
:- call_pel_directive(option(renaming, off)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1618).
% load foundations/Root.e
:- call_pel_directive(load('foundations/Root.e')).

% load foundations/EC.e
:- call_pel_directive(load('foundations/EC.e')).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1621).
% sort coord: integer
subsort(coord,integer).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1623).
% sort direction: integer
subsort(direction,integer).
%; 0 -> 0, 1 -> 90, 2 -> 180, 3 -> 370

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1626).
% sort robot
sort(robot).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1628).
% robot Robot1
t(robot,robot1).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1630).
% function Sin(direction): coord
function(sin(direction),coord).

% function Cos(direction): coord
function(cos(direction),coord).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1633).
% Sin(0)=0.
sin(0)=0.


% Sin(1)=1.
sin(1)=1.


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1635).
% Sin(2)=2.
sin(2)=2.


% Sin(3)=3.
sin(3)=3.


% Cos(0)=1.
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1637).
cos(0)=1.


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1639).
% Cos(1)=2.
cos(1)=2.


% Cos(2)=3.
cos(2)=3.


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1641).
% Cos(3)=4.
cos(3)=4.

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1643).
% fluent Direction(robot,direction)
fluent(direction(robot,direction)).

% fluent Location(robot,coord,coord)
fluent(location(robot,coord,coord)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1646).
% event MoveLeftWheel(robot)
event(moveLeftWheel(robot)).

% event MoveRightWheel(robot)
event(moveRightWheel(robot)).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1649).
%; Sigma
% [robot,direction1,direction2,time]
% !Happens(MoveRightWheel(robot),time) &
% HoldsAt(Direction(robot,direction1),time) &
% direction2 = (direction1-1)->
% Initiates(MoveLeftWheel(robot),Direction(robot,direction2),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1651).
not(happens_at(moveRightWheel(Robot), Time)), holds_at(direction(Robot, Direction1), Time), Direction2=Direction1-1 ->
    initiates_at(moveLeftWheel(Robot),
                 direction(Robot, Direction2),
                 Time).


% [robot,direction,time]
% !Happens(MoveRightWheel(robot),time) &
% HoldsAt(Direction(robot,direction),time) ->
% Terminates(MoveLeftWheel(robot),Direction(robot,direction),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1658).
not(happens_at(moveRightWheel(Robot), Time)), holds_at(direction(Robot, Direction), Time) ->
    terminates_at(moveLeftWheel(Robot),
                  direction(Robot, Direction),
                  Time).


% [robot,direction1,direction2,time]
% !Happens(MoveLeftWheel(robot),time) &
% HoldsAt(Direction(robot,direction1),time) &
% direction2 = (direction1+1)->
% Initiates(MoveRightWheel(robot),Direction(robot,direction2),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1663).
not(happens_at(moveLeftWheel(Robot), Time)), holds_at(direction(Robot, Direction1), Time), Direction2=Direction1+1 ->
    initiates_at(moveRightWheel(Robot),
                 direction(Robot, Direction2),
                 Time).


% [robot,direction,time]
% !Happens(MoveLeftWheel(robot),time) &
% HoldsAt(Direction(robot,direction),time) ->
% Terminates(MoveRightWheel(robot),Direction(robot,direction),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1669).
not(happens_at(moveLeftWheel(Robot), Time)), holds_at(direction(Robot, Direction), Time) ->
    terminates_at(moveRightWheel(Robot),
                  direction(Robot, Direction),
                  Time).


% [robot,direction,coord1,coord2,coord3,coord4,time]
% Happens(MoveLeftWheel(robot),time) &
% HoldsAt(Location(robot,coord1,coord2),time) &
% HoldsAt(Direction(robot,direction),time) &
% coord3 = coord1+Cos(direction) &
% coord4 = coord2+Sin(direction) ->
% Initiates(MoveRightWheel(robot),
%           Location(robot,coord3,coord4),
%           time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1674).
happens_at(moveLeftWheel(Robot), Time), holds_at(location(Robot, Coord1, Coord2), Time), holds_at(direction(Robot, Direction), Time), Coord3=Coord1+cos(Direction), Coord4=Coord2+sin(Direction) ->
    initiates_at(moveRightWheel(Robot),
                 location(Robot, Coord3, Coord4),
                 Time).


% [robot,coord1,coord2,time]
% Happens(MoveLeftWheel(robot),time) &
% HoldsAt(Location(robot,coord1,coord2),time) ->
%; FIX: Direction not needed!!
%; HoldsAt(Direction(robot,direction),time) ->
% Terminates(MoveRightWheel(robot),Location(robot,coord1,coord2),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1684).
happens_at(moveLeftWheel(Robot), Time), holds_at(location(Robot, Coord1, Coord2), Time) ->
    terminates_at(moveRightWheel(Robot),
                  location(Robot, Coord1, Coord2),
                  Time).


%; Delta


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1692).
% Happens(MoveRightWheel(Robot1),0).
happens_at(moveRightWheel(robot1),0).


% Happens(MoveLeftWheel(Robot1),1).
happens_at(moveLeftWheel(robot1),1).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1694).
% Happens(MoveRightWheel(Robot1),1).
happens_at(moveRightWheel(robot1),1).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1696).
%; Psi
% [robot,coord1,coord2,coord3,coord4,time]
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1700).
% HoldsAt(Location(robot,coord1,coord2),time) &
% HoldsAt(Location(robot,coord3,coord4),time) ->
% coord1=coord3 &
% coord2=coord4.
holds_at(location(Robot, Coord1, Coord2), Time), holds_at(location(Robot, Coord3, Coord4), Time) ->
    Coord1=Coord3,
    Coord2=Coord4.


% [robot,direction1,direction2,time]
% HoldsAt(Direction(robot,direction1),time) &
% HoldsAt(Direction(robot,direction2),time) ->
% direction1=direction2.
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1706).
holds_at(direction(Robot, Direction1), Time), holds_at(direction(Robot, Direction2), Time) ->
    Direction1=Direction2.


%; Gamma


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1712).
% HoldsAt(Location(Robot1,0,0),0).
holds_at(location(robot1,0,0),0).


% HoldsAt(Direction(Robot1,0),0).
holds_at(direction(robot1,0),0).

% completion Happens
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1714).
:- call_pel_directive(completion(happens_at)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1717).
% range time 0 3
:- call_pel_directive(range(time, 0, 3)).

% range coord 0 3
:- call_pel_directive(range(coord, 0, 3)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1719).
% range direction 0 3
:- call_pel_directive(range(direction, 0, 3)).

% range offset 1 1
:- call_pel_directive(range(offset, 1, 1)).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter8/PatHeadRubStomach.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1748).
% load foundations/Root.e
:- call_pel_directive(load('foundations/Root.e')).

% load foundations/EC.e
:- call_pel_directive(load('foundations/EC.e')).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1751).
% sort agent
sort(agent).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1753).
% event PatHead(agent)
event(patHead(agent)).

% event RubStomach(agent)
event(rubStomach(agent)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1756).
% agent Nathan
t(agent,nathan).
%; Delta
% [agent,time]
% Happens(PatHead(agent),time) ->
% !Happens(RubStomach(agent),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1760).
happens_at(patHead(Agent), Time) ->
    not(happens_at(rubStomach(Agent), Time)).


% Happens(PatHead(Nathan),0) & Happens(RubStomach(Nathan),0).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1763).
happens_at(patHead(nathan), 0),
happens_at(rubStomach(nathan), 0).

% range time 0 1
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1765).
:- call_pel_directive(range(time, 0, 1)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1767).
% range offset 1 1
:- call_pel_directive(range(offset, 1, 1)).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter10/MovingNewspaperAndBox.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1795).
% load foundations/Root.e
:- call_pel_directive(load('foundations/Root.e')).

% load foundations/EC.e
:- call_pel_directive(load('foundations/EC.e')).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1798).
% sort object
sort(object).

% sort agent: object
subsort(agent,object).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1800).
% sort physobj: object
subsort(physobj,object).

% sort room: object
subsort(room,object).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1803).
% fluent IN(object,object)
fluent(in(object,object)).

% fluent INROOM(object,room)
fluent(inroom(object,room)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1805).
% noninertial INROOM
:- call_pel_directive(noninertial(inroom)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1807).
% event MOVE(agent,object,object,object)
event(move(agent,object,object,object)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1809).
% agent Lisa
t(agent,lisa).

% physobj Box, Newspaper
t(physobj,box).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1809).
t(physobj,newspaper).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1811).
% room Kitchen, LivingRoom
t(room,kitchen).
t(room,livingRoom).
%; Sigma
%; RS10
% [agent,physobj1,physobj2,room,time]
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1817).
% HoldsAt(IN(agent,room),time) &
% HoldsAt(IN(physobj1,room),time) &
% HoldsAt(INROOM(physobj2,room),time) ->
% Initiates(MOVE(agent,physobj1,room,physobj2),IN(physobj1,physobj2),time).
holds_at(in(Agent, Room), Time), holds_at(in(Physobj1, Room), Time), holds_at(inroom(Physobj2, Room), Time) ->
    initiates_at(move(Agent, Physobj1, Room, Physobj2),
                 in(Physobj1, Physobj2),
                 Time).


%; RS11
% [agent,physobj1,physobj2,room,time]
% HoldsAt(IN(agent,room),time) &
% HoldsAt(IN(physobj1,room),time) &
% HoldsAt(INROOM(physobj2,room),time) ->
% Terminates(MOVE(agent,physobj1,room,physobj2),IN(physobj1,room),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1823).
holds_at(in(Agent, Room), Time), holds_at(in(Physobj1, Room), Time), holds_at(inroom(Physobj2, Room), Time) ->
    terminates_at(move(Agent, Physobj1, Room, Physobj2),
                  in(Physobj1, Room),
                  Time).


%; RS12
% [agent,physobj1,physobj2,room,time]
% HoldsAt(IN(agent,room),time) ->
% Initiates(MOVE(agent,physobj1,physobj2,room),IN(physobj1,room),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1830).
holds_at(in(Agent, Room), Time) ->
    initiates_at(move(Agent, Physobj1, Physobj2, Room),
                 in(Physobj1, Room),
                 Time).


%; RS13
% [agent,physobj1,physobj2,room,time]
% HoldsAt(IN(agent,room),time) ->
% Terminates(MOVE(agent,physobj1,physobj2,room),IN(physobj1,physobj2),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1835).
holds_at(in(Agent, Room), Time) ->
    terminates_at(move(Agent, Physobj1, Physobj2, Room),
                  in(Physobj1, Physobj2),
                  Time).


%; RS14
% [agent,room1,room2,time]
% HoldsAt(IN(agent,room1),time) ->
% Initiates(MOVE(agent,agent,room1,room2),IN(agent,room2),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1840).
holds_at(in(Agent, Room1), Time) ->
    initiates_at(move(Agent, Agent, Room1, Room2),
                 in(Agent, Room2),
                 Time).


%; RS15
% [agent,room1,room2,time]
% HoldsAt(IN(agent,room1),time) ->
% Terminates(MOVE(agent,agent,room1,room2),IN(agent,room1),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1845).
holds_at(in(Agent, Room1), Time) ->
    terminates_at(move(Agent, Agent, Room1, Room2),
                  in(Agent, Room1),
                  Time).


%; RS16
% [agent,physobj,room,time]
% HoldsAt(IN(agent,room),time) &
% HoldsAt(IN(physobj,room),time) ->
% Initiates(MOVE(agent,physobj,room,agent),IN(physobj,agent),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1850).
holds_at(in(Agent, Room), Time), holds_at(in(Physobj, Room), Time) ->
    initiates_at(move(Agent, Physobj, Room, Agent),
                 in(Physobj, Agent),
                 Time).


%; RS17
% [agent,physobj,room,time]
% HoldsAt(IN(agent,room),time) &
% HoldsAt(IN(physobj,room),time) ->
% Terminates(MOVE(agent,physobj,room,agent),IN(physobj,room),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1856).
holds_at(in(Agent, Room), Time), holds_at(in(Physobj, Room), Time) ->
    terminates_at(move(Agent, Physobj, Room, Agent),
                  in(Physobj, Room),
                  Time).


%; RS18
% [agent,physobj,room,time]
% HoldsAt(IN(physobj,agent),time) &
% HoldsAt(IN(agent,room),time) ->
% Initiates(MOVE(agent,physobj,agent,room),IN(physobj,room),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1862).
holds_at(in(Physobj, Agent), Time), holds_at(in(Agent, Room), Time) ->
    initiates_at(move(Agent, Physobj, Agent, Room),
                 in(Physobj, Room),
                 Time).


%; RS19
% [agent,physobj,room,time]
% HoldsAt(IN(physobj,agent),time) &
% HoldsAt(IN(agent,room),time) ->
% Terminates(MOVE(agent,physobj,agent,room),IN(physobj,agent),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1868).
holds_at(in(Physobj, Agent), Time), holds_at(in(Agent, Room), Time) ->
    terminates_at(move(Agent, Physobj, Agent, Room),
                  in(Physobj, Agent),
                  Time).


%; Delta


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1875).
% Happens(MOVE(Lisa,Newspaper,LivingRoom,Box),0).
happens_at(move(lisa,newspaper,livingRoom,box),0).


% Happens(MOVE(Lisa,Box,LivingRoom,Lisa),1).
happens_at(move(lisa,box,livingRoom,lisa),1).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1877).
% Happens(MOVE(Lisa,Lisa,LivingRoom,Kitchen),2).
happens_at(move(lisa,lisa,livingRoom,kitchen),2).


% Happens(MOVE(Lisa,Box,Lisa,Kitchen),3).
happens_at(move(lisa,box,lisa,kitchen),3).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1879).
% Happens(MOVE(Lisa,Lisa,Kitchen,LivingRoom),4).
happens_at(move(lisa,lisa,kitchen,livingRoom),4).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1881).
%; Psi
%; RS1
% [object,time]
 % !HoldsAt(IN(object,object),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1883).
holds_at(not(in(Object,Object)),Time).


%; RS2
% [object1,object2,time]
% HoldsAt(IN(object1,object2),time) ->
% !HoldsAt(IN(object2,object1),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1887).
holds_at(in(Object1, Object2), Time) ->
    holds_at(not(in(Object2, Object1)), Time).


%; RS3
% [object1,object2,object3,time]
% HoldsAt(IN(object1,object2),time) &
% HoldsAt(IN(object2,object3),time) ->
% !HoldsAt(IN(object1,object3),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1892).
holds_at(in(Object1, Object2), Time), holds_at(in(Object2, Object3), Time) ->
    holds_at(not(in(Object1, Object3)), Time).


%; RS4
% [object,object1,object2,time]
% HoldsAt(IN(object,object1),time) &
% HoldsAt(IN(object,object2),time) ->
% object1=object2.
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1898).
holds_at(in(Object, Object1), Time), holds_at(in(Object, Object2), Time) ->
    Object1=Object2.


%; RS7
% [object,room,time]
% HoldsAt(IN(object,room),time) ->
% HoldsAt(INROOM(object,room),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1904).
holds_at(in(Object, Room), Time) ->
    holds_at(inroom(Object, Room), Time).


%; RS8
% [object1,object2,room,time]
% HoldsAt(IN(object1,object2),time) &
% HoldsAt(INROOM(object2,room),time) ->
% HoldsAt(INROOM(object1,room),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1909).
holds_at(in(Object1, Object2), Time), holds_at(inroom(Object2, Room), Time) ->
    holds_at(inroom(Object1, Room), Time).


%; RS9
% [object,room1,room2,time]
% HoldsAt(INROOM(object,room1),time) &
% HoldsAt(INROOM(object,room2),time) ->
% room1=room2.
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1915).
holds_at(inroom(Object, Room1), Time), holds_at(inroom(Object, Room2), Time) ->
    Room1=Room2.


%; Gamma


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1922).
% HoldsAt(IN(Lisa,LivingRoom),0).
holds_at(in(lisa,livingRoom),0).


% HoldsAt(IN(Newspaper,LivingRoom),0).
holds_at(in(newspaper,livingRoom),0).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1924).
% HoldsAt(IN(Box,LivingRoom),0).
holds_at(in(box,livingRoom),0).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1926).
%; added:
% [room1,room2,time]
 % !HoldsAt(INROOM(room1,room2),time).
holds_at(not(inroom(Room1,Room2)),Time).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1928).
% [room,object,time]
 % !HoldsAt(IN(room,object),time).
holds_at(not(in(Room,Object)),Time).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1930).
%; entailed:
%; HoldsAt(IN(Lisa,LivingRoom),5).
%; HoldsAt(IN(Box,Kitchen),5).
%; HoldsAt(INROOM(Newspaper,Kitchen),5).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1935).
% completion Happens
:- call_pel_directive(completion(happens_at)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1937).
% range time 0 5
:- call_pel_directive(range(time, 0, 5)).

% range offset 1 1
:- call_pel_directive(range(offset, 1, 1)).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter10/TwoScreens.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @phdthesis{Cassimatis:2002,
%;   author = "Nicholas L. Cassimatis",
%;   year = "2002",
%;   title = "Polyscheme: A Cognitive Architecture for Integrating Multiple Representation and Inference Schemes",
%;   address = "Cambridge, MA",
%;   school = "Program in Media Arts and Sciences, School of Architecture and Planning, Massachusetts Institute of Technology",
%; }
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1974).
% load foundations/Root.e
:- call_pel_directive(load('foundations/Root.e')).

% load foundations/EC.e
:- call_pel_directive(load('foundations/EC.e')).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1977).
% sort object
sort(object).

% sort location
sort(location).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1980).
% object O1, O2
t(object,o1).
t(object,o2).

% location L1, L2, L3, L4, L5
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1980).
t(location,l1).
t(location,l2).
t(location,l3).
t(location,l4).
t(location,l5).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1983).
% predicate Adjacent(location,location)
predicate(adjacent(location,location)).

% predicate Equal(object,object)
predicate(equal(object,object)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1986).
% fluent At(object,location)
fluent(at_loc(object,location)).

% event Move(object,location,location)
event(move(object,location,location)).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1989).
%; Sigma
% [object,location1,location2,time]
% HoldsAt(At(object,location1),time) &
% Adjacent(location1,location2) ->
% Initiates(Move(object,location1,location2),At(object,location2),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1991).
holds_at(at_loc(Object, Location1), Time), adjacent(Location1, Location2) ->
    initiates_at(move(Object, Location1, Location2),
                 at_loc(Object, Location2),
                 Time).


% [object,location1,location2,time]
% HoldsAt(At(object,location1),time) &
% Adjacent(location1,location2) ->
% Terminates(Move(object,location1,location2),At(object,location1),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',1997).
holds_at(at_loc(Object, Location1), Time), adjacent(Location1, Location2) ->
    terminates_at(move(Object, Location1, Location2),
                  at_loc(Object, Location1),
                  Time).


%; Psi
% [object,location1,location2,time]
% HoldsAt(At(object,location1),time) &
% HoldsAt(At(object,location2),time) ->
% location1=location2.
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2003).
holds_at(at_loc(Object, Location1), Time), holds_at(at_loc(Object, Location2), Time) ->
    Location1=Location2.


% [object,time]
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2009).
% {location} % HoldsAt(At(object,location),time).
exists([Location],
 holds_at(at_loc(Object,Location),Time)).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2011).
% [object1,object2,location,time]
% HoldsAt(At(object1,location),time) &
% HoldsAt(At(object2,location),time) ->
% Equal(object1,object2).
holds_at(at_loc(Object1, Location), Time), holds_at(at_loc(Object2, Location), Time) ->
    equal(Object1, Object2).


% [location1, location2]
% Adjacent(location1,location2) <->
% Adjacent(location2,location1).
adjacent(Location1, Location2) <->
    adjacent(Location2, Location1).


% [object1,object2]
% Equal(object1,object2) <->
% Equal(object2,object1).
equal(Object1, Object2) <->
    equal(Object2, Object1).


%; Gamma
% [location1,location2]
% Adjacent(location1,location2) <->
% (location1=L1 & location2=L2) |
% (location1=L2 & location2=L1) |
% (location1=L2 & location2=L3) |
% (location1=L3 & location2=L2) |
% (location1=L3 & location2=L4) |
% (location1=L4 & location2=L3) |
% (location1=L4 & location2=L5) |
% (location1=L5 & location2=L4).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2026).
adjacent(Location1, Location2) <->
    (   Location1=l1,
        Location2=l2
    ;   Location1=l2,
        Location2=l1
    ;   Location1=l2,
        Location2=l3
    ;   Location1=l3,
        Location2=l2
    ;   Location1=l3,
        Location2=l4
    ;   Location1=l4,
        Location2=l3
    ;   Location1=l4,
        Location2=l5
    ;   Location1=l5,
        Location2=l4
    ).


% HoldsAt(At(O1,L1),0).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2036).
holds_at(at_loc(o1,l1),0).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2038).
% [object]
 % !HoldsAt(At(object,L5),0).
holds_at(not(at_loc(Object,l5)),0).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2040).
% HoldsAt(At(O2,L5),4).
holds_at(at_loc(o2,l5),4).


% [object]
 % !HoldsAt(At(object,L1),4).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2040).
holds_at(not(at_loc(Object,l1)),4).


% [object,time]
 % !HoldsAt(At(object,L3),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2042).
holds_at(not(at_loc(Object,l3)),Time).


%; ADDED:
% [object,location1,location2,time]
% Happens(Move(object,location1,location2),time) ->
% HoldsAt(At(object,location1),time) &
% Adjacent(location1,location2).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2046).
happens_at(move(Object, Location1, Location2), Time) ->
    holds_at(at_loc(Object, Location1), Time),
    adjacent(Location1, Location2).


% [object1,object2,location1,location2,time]
% Equal(object1,object2) &
% Happens(Move(object1,location1,location2),time) ->
% Happens(Move(object2,location1,location2),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2052).
equal(Object1, Object2), happens_at(move(Object1, Location1, Location2), Time) ->
    happens_at(move(Object2, Location1, Location2), Time).


%; entailed: !Equal(O1,O2).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2058).
% range time 0 4
:- call_pel_directive(range(time, 0, 4)).

% range offset 1 1
:- call_pel_directive(range(offset, 1, 1)).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter10/OneScreen.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @phdthesis{Cassimatis:2002,
%;   author = "Nicholas L. Cassimatis",
%;   year = "2002",
%;   title = "Polyscheme: A Cognitive Architecture for Integrating Multiple Representation and Inference Schemes",
%;   address = "Cambridge, MA",
%;   school = "Program in Media Arts and Sciences, School of Architecture and Planning, Massachusetts Institute of Technology",
%; }
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2095).
% load foundations/Root.e
:- call_pel_directive(load('foundations/Root.e')).

% load foundations/EC.e
:- call_pel_directive(load('foundations/EC.e')).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2098).
% sort object
sort(object).

% sort location
sort(location).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2101).
% object O1, O2
t(object,o1).
t(object,o2).

% location L1, L2, L3
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2101).
t(location,l1).
t(location,l2).
t(location,l3).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2104).
% predicate Adjacent(location,location)
predicate(adjacent(location,location)).

% predicate Equal(object,object)
predicate(equal(object,object)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2107).
% fluent At(object,location)
fluent(at_loc(object,location)).

% event Move(object,location,location)
event(move(object,location,location)).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2110).
%; Sigma
% [object,location1,location2,time]
% HoldsAt(At(object,location1),time) &
% Adjacent(location1,location2) ->
% Initiates(Move(object,location1,location2),At(object,location2),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2112).
holds_at(at_loc(Object, Location1), Time), adjacent(Location1, Location2) ->
    initiates_at(move(Object, Location1, Location2),
                 at_loc(Object, Location2),
                 Time).


% [object,location1,location2,time]
% HoldsAt(At(object,location1),time) &
% Adjacent(location1,location2) ->
% Terminates(Move(object,location1,location2),At(object,location1),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2118).
holds_at(at_loc(Object, Location1), Time), adjacent(Location1, Location2) ->
    terminates_at(move(Object, Location1, Location2),
                  at_loc(Object, Location1),
                  Time).


%; Psi
% [object,location1,location2,time]
% HoldsAt(At(object,location1),time) &
% HoldsAt(At(object,location2),time) ->
% location1=location2.
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2124).
holds_at(at_loc(Object, Location1), Time), holds_at(at_loc(Object, Location2), Time) ->
    Location1=Location2.


% [object,time]
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2130).
% {location} % HoldsAt(At(object,location),time).
exists([Location],
 holds_at(at_loc(Object,Location),Time)).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2132).
% [object1,object2,location,time]
% HoldsAt(At(object1,location),time) &
% HoldsAt(At(object2,location),time) ->
% Equal(object1,object2).
holds_at(at_loc(Object1, Location), Time), holds_at(at_loc(Object2, Location), Time) ->
    equal(Object1, Object2).


% [location1, location2]
% Adjacent(location1,location2) <->
% Adjacent(location2,location1).
adjacent(Location1, Location2) <->
    adjacent(Location2, Location1).


% [object1,object2]
% Equal(object1,object2) <->
% Equal(object2,object1).
equal(Object1, Object2) <->
    equal(Object2, Object1).


%; Gamma
% [location1,location2]
% Adjacent(location1,location2) <->
% (location1=L1 & location2=L2) |
% (location1=L2 & location2=L1) |
% (location1=L2 & location2=L3) |
% (location1=L3 & location2=L2).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2147).
adjacent(Location1, Location2) <->
    (   Location1=l1,
        Location2=l2
    ;   Location1=l2,
        Location2=l1
    ;   Location1=l2,
        Location2=l3
    ;   Location1=l3,
        Location2=l2
    ).


% HoldsAt(At(O1,L1),0).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2153).
holds_at(at_loc(o1,l1),0).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2155).
% [object]
 % !HoldsAt(At(object,L3),0).
holds_at(not(at_loc(Object,l3)),0).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2157).
% [object]
 % !HoldsAt(At(object,L1),1).
holds_at(not(at_loc(Object,l1)),1).


% [object]
 % !HoldsAt(At(object,L3),1).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2157).
holds_at(not(at_loc(Object,l3)),1).


% HoldsAt(At(O2,L3),2).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2159).
holds_at(at_loc(o2,l3),2).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2161).
% [object]
 % !HoldsAt(At(object,L1),2).
holds_at(not(at_loc(Object,l1)),2).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2163).
%; ADDED:
% [object,location1,location2,time]
% Happens(Move(object,location1,location2),time) ->
% HoldsAt(At(object,location1),time) &
% Adjacent(location1,location2).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2165).
happens_at(move(Object, Location1, Location2), Time) ->
    holds_at(at_loc(Object, Location1), Time),
    adjacent(Location1, Location2).


% [object1,object2,location1,location2,time]
% Equal(object1,object2) &
% Happens(Move(object1,location1,location2),time) ->
% Happens(Move(object2,location1,location2),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2170).
equal(Object1, Object2), happens_at(move(Object1, Location1, Location2), Time) ->
    happens_at(move(Object2, Location1, Location2), Time).

% range time 0 2
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2173).
:- call_pel_directive(range(time, 0, 2)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2175).
% range offset 1 1
:- call_pel_directive(range(offset, 1, 1)).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter9/RunningAndDriving.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2203).
% load foundations/Root.e
:- call_pel_directive(load('foundations/Root.e')).

% load foundations/EC.e
:- call_pel_directive(load('foundations/EC.e')).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2206).
% sort agent
sort(agent).

% sort location
sort(location).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2209).
% agent James
t(agent,james).

% location Bookstore
t(location,bookstore).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2212).
% fluent Tired(agent)
fluent(tired(agent)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2214).
% event Go(agent,location)
event(go(agent,location)).

% event Run(agent,location)
event(run(agent,location)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2216).
% event Drive(agent,location)
event(drive(agent,location)).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2218).
% [agent,location,time]
% Happens(Go(agent,location),time) ->
% Happens(Run(agent,location),time) | Happens(Drive(agent,location),time).
happens_at(go(Agent, Location), Time) ->
    (   happens_at(run(Agent, Location), Time)
    ;   happens_at(drive(Agent, Location), Time)
    ).

% xor Run, Drive
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2221).
xor([run,drive]).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2224).
% [agent,location,time]
 % Initiates(Run(agent,location),Tired(agent),time).
initiates_at(run(Agent,Location),
	     tired(Agent),
	     Time).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2226).
% !HoldsAt(Tired(James),0).
holds_at(not(tired(james)),0).


% Happens(Go(James,Bookstore),0).
happens_at(go(james,bookstore),0).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2228).
% HoldsAt(Tired(James),1).
holds_at(tired(james),1).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2230).
% range time 0 1
:- call_pel_directive(range(time, 0, 1)).

% range offset 1 1
:- call_pel_directive(range(offset, 1, 1)).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter9/RouletteWheel.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2259).
% option modeldiff on
:- call_pel_directive(option(modeldiff, on)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2261).
% load foundations/Root.e
:- call_pel_directive(load('foundations/Root.e')).

% load foundations/EC.e
:- call_pel_directive(load('foundations/EC.e')).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2264).
% sort dealer
sort(dealer).

% sort wheel
sort(wheel).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2266).
% sort value: integer
subsort(value,integer).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2268).
% wheel Wheel1
t(wheel,wheel1).

% dealer Dealer1
t(dealer,dealer1).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2271).
% fluent WheelNumberDeterminer(wheel,value)
fluent(wheelNumberDeterminer(wheel,value)).

% fluent WheelNumber(wheel,value)
fluent(wheelNumber(wheel,value)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2273).
% noninertial WheelNumberDeterminer
:- call_pel_directive(noninertial(wheelNumberDeterminer)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2275).
% event Spin(dealer,wheel)
event(spin(dealer,wheel)).

% event Reset(dealer,wheel)
event(reset(dealer,wheel)).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2278).
% [wheel,time]
% {value}% HoldsAt(WheelNumberDeterminer(wheel,value),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2280).
exists([Value],
 holds_at(wheelNumberDeterminer(Wheel,Value),Time)).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2282).
% [wheel,value1,value2,time]
% HoldsAt(WheelNumberDeterminer(wheel,value1),time) &
% HoldsAt(WheelNumberDeterminer(wheel,value2),time) ->
% value1=value2.
holds_at(wheelNumberDeterminer(Wheel, Value1), Time), holds_at(wheelNumberDeterminer(Wheel, Value2), Time) ->
    Value1=Value2.


% [dealer,wheel,value,time]
% HoldsAt(WheelNumberDeterminer(wheel,value),time) ->
% Initiates(Spin(dealer,wheel),WheelNumber(wheel,value),time).
holds_at(wheelNumberDeterminer(Wheel, Value), Time) ->
    initiates_at(spin(Dealer, Wheel),
                 wheelNumber(Wheel, Value),
                 Time).


% [dealer,wheel,value1,value2,time]
% HoldsAt(WheelNumber(wheel,value1),time) &
% HoldsAt(WheelNumberDeterminer(wheel,value2),time) &
% value1!=value2 ->
% Terminates(Spin(dealer,wheel),WheelNumber(wheel,value1),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2292).
holds_at(wheelNumber(Wheel, Value1), Time), holds_at(wheelNumberDeterminer(Wheel, Value2), Time), Value1\=Value2 ->
    terminates_at(spin(Dealer, Wheel),
                  wheelNumber(Wheel, Value1),
                  Time).


% [dealer,wheel,value,time]
% Terminates(Reset(dealer,wheel),WheelNumber(wheel,value),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2298).
terminates_at(reset(Dealer,Wheel),
	      wheelNumber(Wheel,Value),
	      Time).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2300).
% [wheel,value1,value2,time]
% HoldsAt(WheelNumber(wheel,value1),time) &
% HoldsAt(WheelNumber(wheel,value2),time) ->
% value1=value2.
holds_at(wheelNumber(Wheel, Value1), Time), holds_at(wheelNumber(Wheel, Value2), Time) ->
    Value1=Value2.


% [value]
 % !HoldsAt(WheelNumber(Wheel1,value),0).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2304).
holds_at(not(wheelNumber(wheel1,Value)),0).


% Happens(Spin(Dealer1,Wheel1),0).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2306).
happens_at(spin(dealer1,wheel1),0).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2308).
%;Happens(Reset(Dealer1,Wheel1),1).
%; added to prune models


% HoldsAt(WheelNumberDeterminer(Wheel1, 1),1).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2310).
holds_at(wheelNumberDeterminer(wheel1,1),1).

% completion Happens
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2312).
:- call_pel_directive(completion(happens_at)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2315).
% range value 1 3
:- call_pel_directive(range(value, 1, 3)).

% range time 0 1
:- call_pel_directive(range(time, 0, 1)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2317).
% range offset 1 1
:- call_pel_directive(range(offset, 1, 1)).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter14/NetBill1.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @inproceedings{SirbuTygar:1995,
%;   author = "Marvin A. Sirbu and J. D. Tygar",
%;   year = "1995",
%;   title = "Net\uppercase{B}ill: An \uppercase{I}nternet commerce system optimized for network delivered services",
%;   editor = "
%;   booktitle = "40th \uppercase{IEEE} \uppercase{C}omputer \uppercase{S}ociety \uppercase{I}nternational \uppercase{C}onference",
%;   pages = "20--25",
%;   publisher = "
%;   address = "
%; }
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2356).
% option modeldiff on
:- call_pel_directive(option(modeldiff, on)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2358).
% load foundations/Root.e
:- call_pel_directive(load('foundations/Root.e')).

% load foundations/EC.e
:- call_pel_directive(load('foundations/EC.e')).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2361).
% sort agent
sort(agent).

% agent MusicStore, Jen
t(agent,musicStore).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2361).
t(agent,jen).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2364).
% sort product
sort(product).

% product BritneyCD
t(product,britneyCD).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2367).
% sort f
sort(f).

% f PurchaseRequestedJenMusicStoreBritneyCD1
t(f,purchaseRequestedJenMusicStoreBritneyCD1).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2369).
% f DeliveredMusicStoreJenBritneyCD
t(f,deliveredMusicStoreJenBritneyCD).

% f EPOSentJenMusicStore1
t(f,ePOSentJenMusicStore1).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2372).
% sort amount: integer
subsort(amount,integer).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2374).
% fluent C(agent,agent,f)
fluent(c(agent,agent,f)).

% fluent CC(agent,agent,f,f)
fluent(cc(agent,agent,f,f)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2377).
% event CreateC(agent,agent,f)
event(createC(agent,agent,f)).

% event CreateCC(agent,agent,f,f)
event(createCC(agent,agent,f,f)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2379).
% event DischargeC(agent,agent,f)
event(dischargeC(agent,agent,f)).

% event DischargeCC(agent,agent,f,f)
event(dischargeCC(agent,agent,f,f)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2382).
% fluent QuoteSent(agent,agent,product,amount)
fluent(quoteSent(agent,agent,product,amount)).

% fluent PurchaseRequested(agent,agent,product,amount)
fluent(purchaseRequested(agent,agent,product,amount)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2384).
% fluent Delivered(agent,agent,product)
fluent(delivered(agent,agent,product)).

% fluent EPOSent(agent,agent,amount)
fluent(ePOSent(agent,agent,amount)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2387).
% event SendQuote(agent,agent,product,amount)
event(sendQuote(agent,agent,product,amount)).

% event RequestPurchase(agent,agent,product,amount)
event(requestPurchase(agent,agent,product,amount)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2389).
% event Deliver(agent,agent,product)
event(deliver(agent,agent,product)).

% event SendEPO(agent,agent,amount)
event(sendEPO(agent,agent,amount)).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2392).
%; Sigma
% [agent1,agent2,f,time]
% Initiates(CreateC(agent1,agent2,f),C(agent1,agent2,f),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2394).
initiates_at(createC(Agent1,Agent2,F),
	     c(Agent1,Agent2,F),
	     Time).


% [agent1,agent2,f1,f2,time]
% Initiates(CreateCC(agent1,agent2,f1,f2),CC(agent1,agent2,f1,f2),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2398).
initiates_at(createCC(Agent1,Agent2,F1,F2),
	     cc(Agent1,Agent2,F1,F2),
	     Time).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2400).
% [agent1,agent2,f,time]
% Terminates(DischargeC(agent1,agent2,f),C(agent1,agent2,f),time).
terminates_at(dischargeC(Agent1,Agent2,F),
	      c(Agent1,Agent2,F),
	      Time).


% [agent1,agent2,f1,f2,time]
% Terminates(DischargeCC(agent1,agent2,f1,f2),CC(agent1,agent2,f1,f2),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2404).
terminates_at(dischargeCC(Agent1,Agent2,F1,F2),
	      cc(Agent1,Agent2,F1,F2),
	      Time).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2406).
% [agent1,agent2,product,amount,time]
% Initiates(SendQuote(agent1,agent2,product,amount),
%           QuoteSent(agent1,agent2,product,amount),
%           time).
initiates_at(sendQuote(Agent1,
		       Agent2,
		       Product,
		       Amount),
	     quoteSent(Agent1,
		       Agent2,
		       Product,
		       Amount),
	     Time).


% [agent1,agent2,product,amount,time]
% Initiates(RequestPurchase(agent1,agent2,product,amount),
%           PurchaseRequested(agent1,agent2,product,amount),
%           time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2412).
initiates_at(requestPurchase(Agent1,
			     Agent2,
			     Product,
			     Amount),
	     purchaseRequested(Agent1,
			       Agent2,
			       Product,
			       Amount),
	     Time).


% [agent1,agent2,product,time]
% Initiates(Deliver(agent1,agent2,product),
%           Delivered(agent1,agent2,product),
%           time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2417).
initiates_at(deliver(Agent1,Agent2,Product),
	     delivered(Agent1,Agent2,Product),
	     Time).


% [agent1,agent2,amount,time]
% Initiates(SendEPO(agent1,agent2,amount),
%           EPOSent(agent1,agent2,amount),
%           time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2422).
initiates_at(sendEPO(Agent1,Agent2,Amount),
	     ePOSent(Agent1,Agent2,Amount),
	     Time).


% [agent1,agent2,product,amount,f1,f2,time]
% agent1=% MusicStore &
% agent2=Jen &
% product=BritneyCD &
% amount=1 &
% f1=PurchaseRequestedJenMusicStoreBritneyCD1 &
% f2=DeliveredMusicStoreJenBritneyCD ->
% Initiates(SendQuote(agent1,agent2,product,amount),
%           CC(agent1,agent2,f1,f2),
%           time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2427).
Agent1=musicStore, Agent2=jen, Product=britneyCD, Amount=1, F1=purchaseRequestedJenMusicStoreBritneyCD1, F2=deliveredMusicStoreJenBritneyCD ->
    initiates_at(sendQuote(Agent1,
                           Agent2,
                           Product,
                           Amount),
                 cc(Agent1, Agent2, F1, F2),
                 Time).


% [agent1,agent2,product,amount,f1,f2,time]
% agent1=% Jen &
% agent2=MusicStore &
% product=BritneyCD &
% amount=1 &
% f1=DeliveredMusicStoreJenBritneyCD &
% f2=EPOSentJenMusicStore1 &
% !HoldsAt(Delivered(agent2,agent1,product),time) ->
% Initiates(RequestPurchase(agent1,agent2,product,amount),
%           CC(agent1,agent2,f1,f2),
%           time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2438).
Agent1=jen, Agent2=musicStore, Product=britneyCD, Amount=1, F1=deliveredMusicStoreJenBritneyCD, F2=ePOSentJenMusicStore1, holds_at(not(delivered(Agent2, Agent1, Product)), Time) ->
    initiates_at(requestPurchase(Agent1,
                                 Agent2,
                                 Product,
                                 Amount),
                 cc(Agent1, Agent2, F1, F2),
                 Time).


%; Delta

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2451).
% Delta: 
directive(delta).
 


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2451).
% [time]
% HoldsAt(CC(MusicStore,Jen,PurchaseRequestedJenMusicStoreBritneyCD1,DeliveredMusicStoreJenBritneyCD),time) &
% HoldsAt(PurchaseRequested(Jen,MusicStore,BritneyCD,1),time) ->
% Happens(CreateC(MusicStore,Jen,DeliveredMusicStoreJenBritneyCD),time).
holds_at(cc(musicStore, jen, purchaseRequestedJenMusicStoreBritneyCD1, deliveredMusicStoreJenBritneyCD), Time), holds_at(purchaseRequested(jen, musicStore, britneyCD, 1), Time) ->
    happens_at(createC(musicStore, jen, deliveredMusicStoreJenBritneyCD),
               Time).

% Delta: 
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2455).
directive(delta).
 


% [time]
% HoldsAt(CC(MusicStore,Jen,PurchaseRequestedJenMusicStoreBritneyCD1,DeliveredMusicStoreJenBritneyCD),time) &
% HoldsAt(PurchaseRequested(Jen, MusicStore, BritneyCD, 1),time) ->
% Happens(DischargeCC(MusicStore,Jen,PurchaseRequestedJenMusicStoreBritneyCD1,DeliveredMusicStoreJenBritneyCD),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2457).
holds_at(cc(musicStore, jen, purchaseRequestedJenMusicStoreBritneyCD1, deliveredMusicStoreJenBritneyCD), Time), holds_at(purchaseRequested(jen, musicStore, britneyCD, 1), Time) ->
    happens_at(dischargeCC(musicStore,
                           jen,
                           purchaseRequestedJenMusicStoreBritneyCD1,
                           deliveredMusicStoreJenBritneyCD),
               Time).

% Delta: 
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2460).
directive(delta).
 


% [time]
% HoldsAt(CC(Jen, MusicStore, DeliveredMusicStoreJenBritneyCD, EPOSentJenMusicStore1),time) &
% HoldsAt(Delivered(MusicStore,Jen,BritneyCD),time) ->
% Happens(CreateC(Jen,MusicStore,EPOSentJenMusicStore1),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2462).
holds_at(cc(jen, musicStore, deliveredMusicStoreJenBritneyCD, ePOSentJenMusicStore1), Time), holds_at(delivered(musicStore, jen, britneyCD), Time) ->
    happens_at(createC(jen, musicStore, ePOSentJenMusicStore1), Time).

% Delta: 
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2465).
directive(delta).
 


% [time]
% HoldsAt(CC(Jen, MusicStore, DeliveredMusicStoreJenBritneyCD, EPOSentJenMusicStore1),time) &
% HoldsAt(Delivered(MusicStore,Jen,BritneyCD),time) ->
% Happens(DischargeCC(Jen,MusicStore,DeliveredMusicStoreJenBritneyCD, EPOSentJenMusicStore1),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2467).
holds_at(cc(jen, musicStore, deliveredMusicStoreJenBritneyCD, ePOSentJenMusicStore1), Time), holds_at(delivered(musicStore, jen, britneyCD), Time) ->
    happens_at(dischargeCC(jen,
                           musicStore,
                           deliveredMusicStoreJenBritneyCD,
                           ePOSentJenMusicStore1),
               Time).

% Delta: 
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2470).
directive(delta).
 


% [time]
% HoldsAt(C(MusicStore,Jen,DeliveredMusicStoreJenBritneyCD),time) &
% HoldsAt(Delivered(MusicStore,Jen,BritneyCD),time) ->
% Happens(DischargeC(MusicStore,Jen,DeliveredMusicStoreJenBritneyCD),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2472).
holds_at(c(musicStore, jen, deliveredMusicStoreJenBritneyCD), Time), holds_at(delivered(musicStore, jen, britneyCD), Time) ->
    happens_at(dischargeC(musicStore, jen, deliveredMusicStoreJenBritneyCD),
               Time).

% Delta: 
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2475).
directive(delta).
 


% [time]
% HoldsAt(C(Jen,MusicStore,EPOSentJenMusicStore1),time) &
% HoldsAt(EPOSent(Jen,MusicStore,1),time) ->
% Happens(DischargeC(Jen,MusicStore,EPOSentJenMusicStore1),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2477).
holds_at(c(jen, musicStore, ePOSentJenMusicStore1), Time), holds_at(ePOSent(jen, musicStore, 1), Time) ->
    happens_at(dischargeC(jen, musicStore, ePOSentJenMusicStore1), Time).

% Delta: 
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2480).
directive(delta).
 


% Happens(SendQuote(MusicStore,Jen,BritneyCD,1),0).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2480).
happens_at(sendQuote(musicStore,jen,britneyCD,1),0).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2482).
% Delta: 
directive(delta).
 


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2482).
% Happens(RequestPurchase(Jen,MusicStore,BritneyCD,1),1).
happens_at(requestPurchase(jen,musicStore,britneyCD,1),1).

% Delta: 
directive(delta).
 


% Happens(Deliver(MusicStore,Jen,BritneyCD),3).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2482).
happens_at(deliver(musicStore,jen,britneyCD),3).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2484).
% Delta: 
directive(delta).
 


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2484).
% Happens(SendEPO(Jen,MusicStore,1),5).
happens_at(sendEPO(jen,musicStore,1),5).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2486).
%; Gamma
% [agent1,agent2,product,amount]
% !HoldsAt(QuoteSent(agent1,agent2,product,amount),0).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2488).
holds_at(not(quoteSent(Agent1,
		       Agent2,
		       Product,
		       Amount)),
	 0).


% [agent1,agent2,product,amount]
% !HoldsAt(PurchaseRequested(agent1,agent2,product,amount),0).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2492).
holds_at(not(purchaseRequested(Agent1,
			       Agent2,
			       Product,
			       Amount)),
	 0).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2494).
% [agent1,agent2,product]
% !HoldsAt(Delivered(agent1,agent2,product),0).
holds_at(not(delivered(Agent1,Agent2,Product)),0).


% [agent1,agent2,f]
% !HoldsAt(C(agent1,agent2,f),0).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2498).
holds_at(not(c(Agent1,Agent2,F)),0).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2500).
% [agent1,agent2,f1,f2]
% !HoldsAt(CC(agent1,agent2,f1,f2),0).
holds_at(not(cc(Agent1,Agent2,F1,F2)),0).


% [agent1,agent2,amount]
% !HoldsAt(EPOSent(agent1,agent2,amount),0).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2504).
holds_at(not(ePOSent(Agent1,Agent2,Amount)),0).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2506).
% completion Delta Happens
:- call_pel_directive(completion(delta)).
:- call_pel_directive(completion(happens_at)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2508).
% range time 0 7
:- call_pel_directive(range(time, 0, 7)).

% range offset 1 1
:- call_pel_directive(range(offset, 1, 1)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2510).
% range amount 1 1
:- call_pel_directive(range(amount, 1, 1)).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter14/NetBill3.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @inproceedings{SirbuTygar:1995,
%;   author = "Marvin A. Sirbu and J. D. Tygar",
%;   year = "1995",
%;   title = "Net\uppercase{B}ill: An \uppercase{I}nternet commerce system optimized for network delivered services",
%;   editor = "
%;   booktitle = "40th \uppercase{IEEE} \uppercase{C}omputer \uppercase{S}ociety \uppercase{I}nternational \uppercase{C}onference",
%;   pages = "20--25",
%;   publisher = "
%;   address = "
%; }
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2549).
% option modeldiff on
:- call_pel_directive(option(modeldiff, on)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2551).
% load foundations/Root.e
:- call_pel_directive(load('foundations/Root.e')).

% load foundations/EC.e
:- call_pel_directive(load('foundations/EC.e')).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2554).
% sort agent
sort(agent).

% agent MusicStore, Jen
t(agent,musicStore).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2554).
t(agent,jen).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2557).
% sort product
sort(product).

% product BritneyCD
t(product,britneyCD).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2560).
% sort f
sort(f).

% f PurchaseRequestedJenMusicStoreBritneyCD1
t(f,purchaseRequestedJenMusicStoreBritneyCD1).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2562).
% f DeliveredMusicStoreJenBritneyCD
t(f,deliveredMusicStoreJenBritneyCD).

% f EPOSentJenMusicStore1
t(f,ePOSentJenMusicStore1).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2565).
% sort amount: integer
subsort(amount,integer).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2567).
% fluent C(agent,agent,f)
fluent(c(agent,agent,f)).

% fluent CC(agent,agent,f,f)
fluent(cc(agent,agent,f,f)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2570).
% event CreateC(agent,agent,f)
event(createC(agent,agent,f)).

% event CreateCC(agent,agent,f,f)
event(createCC(agent,agent,f,f)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2572).
% event DischargeC(agent,agent,f)
event(dischargeC(agent,agent,f)).

% event DischargeCC(agent,agent,f,f)
event(dischargeCC(agent,agent,f,f)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2575).
% fluent QuoteSent(agent,agent,product,amount)
fluent(quoteSent(agent,agent,product,amount)).

% fluent PurchaseRequested(agent,agent,product,amount)
fluent(purchaseRequested(agent,agent,product,amount)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2577).
% fluent Delivered(agent,agent,product)
fluent(delivered(agent,agent,product)).

% fluent EPOSent(agent,agent,amount)
fluent(ePOSent(agent,agent,amount)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2580).
% event SendQuote(agent,agent,product,amount)
event(sendQuote(agent,agent,product,amount)).

% event RequestPurchase(agent,agent,product,amount)
event(requestPurchase(agent,agent,product,amount)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2582).
% event Deliver(agent,agent,product)
event(deliver(agent,agent,product)).

% event SendEPO(agent,agent,amount)
event(sendEPO(agent,agent,amount)).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2585).
%; Sigma
% [agent1,agent2,f,time]
% Initiates(CreateC(agent1,agent2,f),C(agent1,agent2,f),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2587).
initiates_at(createC(Agent1,Agent2,F),
	     c(Agent1,Agent2,F),
	     Time).


% [agent1,agent2,f1,f2,time]
% Initiates(CreateCC(agent1,agent2,f1,f2),CC(agent1,agent2,f1,f2),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2591).
initiates_at(createCC(Agent1,Agent2,F1,F2),
	     cc(Agent1,Agent2,F1,F2),
	     Time).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2593).
% [agent1,agent2,f,time]
% Terminates(DischargeC(agent1,agent2,f),C(agent1,agent2,f),time).
terminates_at(dischargeC(Agent1,Agent2,F),
	      c(Agent1,Agent2,F),
	      Time).


% [agent1,agent2,f1,f2,time]
% Terminates(DischargeCC(agent1,agent2,f1,f2),CC(agent1,agent2,f1,f2),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2597).
terminates_at(dischargeCC(Agent1,Agent2,F1,F2),
	      cc(Agent1,Agent2,F1,F2),
	      Time).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2599).
% [agent1,agent2,product,amount,time]
% Initiates(SendQuote(agent1,agent2,product,amount),
%           QuoteSent(agent1,agent2,product,amount),
%           time).
initiates_at(sendQuote(Agent1,
		       Agent2,
		       Product,
		       Amount),
	     quoteSent(Agent1,
		       Agent2,
		       Product,
		       Amount),
	     Time).


% [agent1,agent2,product,amount,time]
% Initiates(RequestPurchase(agent1,agent2,product,amount),
%           PurchaseRequested(agent1,agent2,product,amount),
%           time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2605).
initiates_at(requestPurchase(Agent1,
			     Agent2,
			     Product,
			     Amount),
	     purchaseRequested(Agent1,
			       Agent2,
			       Product,
			       Amount),
	     Time).


% [agent1,agent2,product,time]
% Initiates(Deliver(agent1,agent2,product),
%           Delivered(agent1,agent2,product),
%           time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2610).
initiates_at(deliver(Agent1,Agent2,Product),
	     delivered(Agent1,Agent2,Product),
	     Time).


% [agent1,agent2,amount,time]
% Initiates(SendEPO(agent1,agent2,amount),
%           EPOSent(agent1,agent2,amount),
%           time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2615).
initiates_at(sendEPO(Agent1,Agent2,Amount),
	     ePOSent(Agent1,Agent2,Amount),
	     Time).


% [agent1,agent2,product,amount,f1,f2,time]
% agent1=% MusicStore &
% agent2=Jen &
% product=BritneyCD &
% amount=1 &
% f1=PurchaseRequestedJenMusicStoreBritneyCD1 &
% f2=DeliveredMusicStoreJenBritneyCD ->
% Initiates(SendQuote(agent1,agent2,product,amount),
%           CC(agent1,agent2,f1,f2),
%           time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2620).
Agent1=musicStore, Agent2=jen, Product=britneyCD, Amount=1, F1=purchaseRequestedJenMusicStoreBritneyCD1, F2=deliveredMusicStoreJenBritneyCD ->
    initiates_at(sendQuote(Agent1,
                           Agent2,
                           Product,
                           Amount),
                 cc(Agent1, Agent2, F1, F2),
                 Time).


% [agent1,agent2,product,amount,f1,f2,time]
% agent1=% Jen &
% agent2=MusicStore &
% product=BritneyCD &
% amount=1 &
% f1=DeliveredMusicStoreJenBritneyCD &
% f2=EPOSentJenMusicStore1 &
% !HoldsAt(Delivered(agent2,agent1,product),time) ->
% Initiates(RequestPurchase(agent1,agent2,product,amount),
%           CC(agent1,agent2,f1,f2),
%           time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2631).
Agent1=jen, Agent2=musicStore, Product=britneyCD, Amount=1, F1=deliveredMusicStoreJenBritneyCD, F2=ePOSentJenMusicStore1, holds_at(not(delivered(Agent2, Agent1, Product)), Time) ->
    initiates_at(requestPurchase(Agent1,
                                 Agent2,
                                 Product,
                                 Amount),
                 cc(Agent1, Agent2, F1, F2),
                 Time).


%; Delta

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2644).
% Delta: 
directive(delta).
 


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2644).
% [time]
% HoldsAt(CC(MusicStore,Jen,PurchaseRequestedJenMusicStoreBritneyCD1,DeliveredMusicStoreJenBritneyCD),time) &
% HoldsAt(PurchaseRequested(Jen,MusicStore,BritneyCD,1),time) ->
% Happens(CreateC(MusicStore,Jen,DeliveredMusicStoreJenBritneyCD),time).
holds_at(cc(musicStore, jen, purchaseRequestedJenMusicStoreBritneyCD1, deliveredMusicStoreJenBritneyCD), Time), holds_at(purchaseRequested(jen, musicStore, britneyCD, 1), Time) ->
    happens_at(createC(musicStore, jen, deliveredMusicStoreJenBritneyCD),
               Time).

% Delta: 
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2648).
directive(delta).
 


% [time]
% HoldsAt(CC(MusicStore,Jen,PurchaseRequestedJenMusicStoreBritneyCD1,DeliveredMusicStoreJenBritneyCD),time) &
% HoldsAt(PurchaseRequested(Jen, MusicStore, BritneyCD, 1),time) ->
% Happens(DischargeCC(MusicStore,Jen,PurchaseRequestedJenMusicStoreBritneyCD1,DeliveredMusicStoreJenBritneyCD),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2650).
holds_at(cc(musicStore, jen, purchaseRequestedJenMusicStoreBritneyCD1, deliveredMusicStoreJenBritneyCD), Time), holds_at(purchaseRequested(jen, musicStore, britneyCD, 1), Time) ->
    happens_at(dischargeCC(musicStore,
                           jen,
                           purchaseRequestedJenMusicStoreBritneyCD1,
                           deliveredMusicStoreJenBritneyCD),
               Time).

% Delta: 
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2653).
directive(delta).
 


% [time]
% HoldsAt(CC(Jen, MusicStore, DeliveredMusicStoreJenBritneyCD, EPOSentJenMusicStore1),time) &
% HoldsAt(Delivered(MusicStore,Jen,BritneyCD),time) ->
% Happens(CreateC(Jen,MusicStore,EPOSentJenMusicStore1),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2655).
holds_at(cc(jen, musicStore, deliveredMusicStoreJenBritneyCD, ePOSentJenMusicStore1), Time), holds_at(delivered(musicStore, jen, britneyCD), Time) ->
    happens_at(createC(jen, musicStore, ePOSentJenMusicStore1), Time).

% Delta: 
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2658).
directive(delta).
 


% [time]
% HoldsAt(CC(Jen, MusicStore, DeliveredMusicStoreJenBritneyCD, EPOSentJenMusicStore1),time) &
% HoldsAt(Delivered(MusicStore,Jen,BritneyCD),time) ->
% Happens(DischargeCC(Jen,MusicStore,DeliveredMusicStoreJenBritneyCD, EPOSentJenMusicStore1),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2660).
holds_at(cc(jen, musicStore, deliveredMusicStoreJenBritneyCD, ePOSentJenMusicStore1), Time), holds_at(delivered(musicStore, jen, britneyCD), Time) ->
    happens_at(dischargeCC(jen,
                           musicStore,
                           deliveredMusicStoreJenBritneyCD,
                           ePOSentJenMusicStore1),
               Time).

% Delta: 
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2663).
directive(delta).
 


% [time]
% HoldsAt(C(MusicStore,Jen,DeliveredMusicStoreJenBritneyCD),time) &
% HoldsAt(Delivered(MusicStore,Jen,BritneyCD),time) ->
% Happens(DischargeC(MusicStore,Jen,DeliveredMusicStoreJenBritneyCD),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2665).
holds_at(c(musicStore, jen, deliveredMusicStoreJenBritneyCD), Time), holds_at(delivered(musicStore, jen, britneyCD), Time) ->
    happens_at(dischargeC(musicStore, jen, deliveredMusicStoreJenBritneyCD),
               Time).

% Delta: 
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2668).
directive(delta).
 


% [time]
% HoldsAt(C(Jen,MusicStore,EPOSentJenMusicStore1),time) &
% HoldsAt(EPOSent(Jen,MusicStore,1),time) ->
% Happens(DischargeC(Jen,MusicStore,EPOSentJenMusicStore1),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2670).
holds_at(c(jen, musicStore, ePOSentJenMusicStore1), Time), holds_at(ePOSent(jen, musicStore, 1), Time) ->
    happens_at(dischargeC(jen, musicStore, ePOSentJenMusicStore1), Time).

% Delta: 
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2673).
directive(delta).
 


% Happens(Deliver(MusicStore,Jen,BritneyCD),0).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2673).
happens_at(deliver(musicStore,jen,britneyCD),0).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2675).
% Delta: 
directive(delta).
 


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2675).
% Happens(SendEPO(Jen,MusicStore,1),2).
happens_at(sendEPO(jen,musicStore,1),2).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2677).
%; Gamma
% [agent1,agent2,product,amount]
% !HoldsAt(QuoteSent(agent1,agent2,product,amount),0).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2679).
holds_at(not(quoteSent(Agent1,
		       Agent2,
		       Product,
		       Amount)),
	 0).


% [agent1,agent2,product,amount]
% !HoldsAt(PurchaseRequested(agent1,agent2,product,amount),0).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2683).
holds_at(not(purchaseRequested(Agent1,
			       Agent2,
			       Product,
			       Amount)),
	 0).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2685).
% [agent1,agent2,product]
% !HoldsAt(Delivered(agent1,agent2,product),0).
holds_at(not(delivered(Agent1,Agent2,Product)),0).


% [agent1,agent2,f]
% !HoldsAt(C(agent1,agent2,f),0).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2689).
holds_at(not(c(Agent1,Agent2,F)),0).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2691).
% [agent1,agent2,f1,f2]
% !HoldsAt(CC(agent1,agent2,f1,f2),0).
holds_at(not(cc(Agent1,Agent2,F1,F2)),0).


% [agent1,agent2,amount]
% !HoldsAt(EPOSent(agent1,agent2,amount),0).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2695).
holds_at(not(ePOSent(Agent1,Agent2,Amount)),0).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2697).
% completion Delta Happens
:- call_pel_directive(completion(delta)).
:- call_pel_directive(completion(happens_at)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2699).
% range time 0 4
:- call_pel_directive(range(time, 0, 4)).

% range offset 1 1
:- call_pel_directive(range(offset, 1, 1)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2701).
% range amount 1 1
:- call_pel_directive(range(amount, 1, 1)).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter14/NetBill2.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @inproceedings{SirbuTygar:1995,
%;   author = "Marvin A. Sirbu and J. D. Tygar",
%;   year = "1995",
%;   title = "Net\uppercase{B}ill: An \uppercase{I}nternet commerce system optimized for network delivered services",
%;   editor = "
%;   booktitle = "40th \uppercase{IEEE} \uppercase{C}omputer \uppercase{S}ociety \uppercase{I}nternational \uppercase{C}onference",
%;   pages = "20--25",
%;   publisher = "
%;   address = "
%; }
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2740).
% option modeldiff on
:- call_pel_directive(option(modeldiff, on)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2742).
% load foundations/Root.e
:- call_pel_directive(load('foundations/Root.e')).

% load foundations/EC.e
:- call_pel_directive(load('foundations/EC.e')).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2745).
% sort agent
sort(agent).

% agent MusicStore, Jen
t(agent,musicStore).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2745).
t(agent,jen).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2748).
% sort product
sort(product).

% product BritneyCD
t(product,britneyCD).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2751).
% sort f
sort(f).

% f PurchaseRequestedJenMusicStoreBritneyCD1
t(f,purchaseRequestedJenMusicStoreBritneyCD1).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2753).
% f DeliveredMusicStoreJenBritneyCD
t(f,deliveredMusicStoreJenBritneyCD).

% f EPOSentJenMusicStore1
t(f,ePOSentJenMusicStore1).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2756).
% sort amount: integer
subsort(amount,integer).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2758).
% fluent C(agent,agent,f)
fluent(c(agent,agent,f)).

% fluent CC(agent,agent,f,f)
fluent(cc(agent,agent,f,f)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2761).
% event CreateC(agent,agent,f)
event(createC(agent,agent,f)).

% event CreateCC(agent,agent,f,f)
event(createCC(agent,agent,f,f)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2763).
% event DischargeC(agent,agent,f)
event(dischargeC(agent,agent,f)).

% event DischargeCC(agent,agent,f,f)
event(dischargeCC(agent,agent,f,f)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2766).
% fluent QuoteSent(agent,agent,product,amount)
fluent(quoteSent(agent,agent,product,amount)).

% fluent PurchaseRequested(agent,agent,product,amount)
fluent(purchaseRequested(agent,agent,product,amount)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2768).
% fluent Delivered(agent,agent,product)
fluent(delivered(agent,agent,product)).

% fluent EPOSent(agent,agent,amount)
fluent(ePOSent(agent,agent,amount)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2771).
% event SendQuote(agent,agent,product,amount)
event(sendQuote(agent,agent,product,amount)).

% event RequestPurchase(agent,agent,product,amount)
event(requestPurchase(agent,agent,product,amount)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2773).
% event Deliver(agent,agent,product)
event(deliver(agent,agent,product)).

% event SendEPO(agent,agent,amount)
event(sendEPO(agent,agent,amount)).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2776).
%; Sigma
% [agent1,agent2,f,time]
% Initiates(CreateC(agent1,agent2,f),C(agent1,agent2,f),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2778).
initiates_at(createC(Agent1,Agent2,F),
	     c(Agent1,Agent2,F),
	     Time).


% [agent1,agent2,f1,f2,time]
% Initiates(CreateCC(agent1,agent2,f1,f2),CC(agent1,agent2,f1,f2),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2782).
initiates_at(createCC(Agent1,Agent2,F1,F2),
	     cc(Agent1,Agent2,F1,F2),
	     Time).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2784).
% [agent1,agent2,f,time]
% Terminates(DischargeC(agent1,agent2,f),C(agent1,agent2,f),time).
terminates_at(dischargeC(Agent1,Agent2,F),
	      c(Agent1,Agent2,F),
	      Time).


% [agent1,agent2,f1,f2,time]
% Terminates(DischargeCC(agent1,agent2,f1,f2),CC(agent1,agent2,f1,f2),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2788).
terminates_at(dischargeCC(Agent1,Agent2,F1,F2),
	      cc(Agent1,Agent2,F1,F2),
	      Time).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2790).
% [agent1,agent2,product,amount,time]
% Initiates(SendQuote(agent1,agent2,product,amount),
%           QuoteSent(agent1,agent2,product,amount),
%           time).
initiates_at(sendQuote(Agent1,
		       Agent2,
		       Product,
		       Amount),
	     quoteSent(Agent1,
		       Agent2,
		       Product,
		       Amount),
	     Time).


% [agent1,agent2,product,amount,time]
% Initiates(RequestPurchase(agent1,agent2,product,amount),
%           PurchaseRequested(agent1,agent2,product,amount),
%           time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2796).
initiates_at(requestPurchase(Agent1,
			     Agent2,
			     Product,
			     Amount),
	     purchaseRequested(Agent1,
			       Agent2,
			       Product,
			       Amount),
	     Time).


% [agent1,agent2,product,time]
% Initiates(Deliver(agent1,agent2,product),
%           Delivered(agent1,agent2,product),
%           time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2801).
initiates_at(deliver(Agent1,Agent2,Product),
	     delivered(Agent1,Agent2,Product),
	     Time).


% [agent1,agent2,amount,time]
% Initiates(SendEPO(agent1,agent2,amount),
%           EPOSent(agent1,agent2,amount),
%           time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2806).
initiates_at(sendEPO(Agent1,Agent2,Amount),
	     ePOSent(Agent1,Agent2,Amount),
	     Time).


% [agent1,agent2,product,amount,f1,f2,time]
% agent1=% MusicStore &
% agent2=Jen &
% product=BritneyCD &
% amount=1 &
% f1=PurchaseRequestedJenMusicStoreBritneyCD1 &
% f2=DeliveredMusicStoreJenBritneyCD ->
% Initiates(SendQuote(agent1,agent2,product,amount),
%           CC(agent1,agent2,f1,f2),
%           time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2811).
Agent1=musicStore, Agent2=jen, Product=britneyCD, Amount=1, F1=purchaseRequestedJenMusicStoreBritneyCD1, F2=deliveredMusicStoreJenBritneyCD ->
    initiates_at(sendQuote(Agent1,
                           Agent2,
                           Product,
                           Amount),
                 cc(Agent1, Agent2, F1, F2),
                 Time).


% [agent1,agent2,product,amount,f1,f2,time]
% agent1=% Jen &
% agent2=MusicStore &
% product=BritneyCD &
% amount=1 &
% f1=DeliveredMusicStoreJenBritneyCD &
% f2=EPOSentJenMusicStore1 &
% !HoldsAt(Delivered(agent2,agent1,product),time) ->
% Initiates(RequestPurchase(agent1,agent2,product,amount),
%           CC(agent1,agent2,f1,f2),
%           time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2822).
Agent1=jen, Agent2=musicStore, Product=britneyCD, Amount=1, F1=deliveredMusicStoreJenBritneyCD, F2=ePOSentJenMusicStore1, holds_at(not(delivered(Agent2, Agent1, Product)), Time) ->
    initiates_at(requestPurchase(Agent1,
                                 Agent2,
                                 Product,
                                 Amount),
                 cc(Agent1, Agent2, F1, F2),
                 Time).


%; Delta

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2835).
% Delta: 
directive(delta).
 


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2835).
% [time]
% HoldsAt(CC(MusicStore,Jen,PurchaseRequestedJenMusicStoreBritneyCD1,DeliveredMusicStoreJenBritneyCD),time) &
% HoldsAt(PurchaseRequested(Jen,MusicStore,BritneyCD,1),time) ->
% Happens(CreateC(MusicStore,Jen,DeliveredMusicStoreJenBritneyCD),time).
holds_at(cc(musicStore, jen, purchaseRequestedJenMusicStoreBritneyCD1, deliveredMusicStoreJenBritneyCD), Time), holds_at(purchaseRequested(jen, musicStore, britneyCD, 1), Time) ->
    happens_at(createC(musicStore, jen, deliveredMusicStoreJenBritneyCD),
               Time).

% Delta: 
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2839).
directive(delta).
 


% [time]
% HoldsAt(CC(MusicStore,Jen,PurchaseRequestedJenMusicStoreBritneyCD1,DeliveredMusicStoreJenBritneyCD),time) &
% HoldsAt(PurchaseRequested(Jen, MusicStore, BritneyCD, 1),time) ->
% Happens(DischargeCC(MusicStore,Jen,PurchaseRequestedJenMusicStoreBritneyCD1,DeliveredMusicStoreJenBritneyCD),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2841).
holds_at(cc(musicStore, jen, purchaseRequestedJenMusicStoreBritneyCD1, deliveredMusicStoreJenBritneyCD), Time), holds_at(purchaseRequested(jen, musicStore, britneyCD, 1), Time) ->
    happens_at(dischargeCC(musicStore,
                           jen,
                           purchaseRequestedJenMusicStoreBritneyCD1,
                           deliveredMusicStoreJenBritneyCD),
               Time).

% Delta: 
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2844).
directive(delta).
 


% [time]
% HoldsAt(CC(Jen, MusicStore, DeliveredMusicStoreJenBritneyCD, EPOSentJenMusicStore1),time) &
% HoldsAt(Delivered(MusicStore,Jen,BritneyCD),time) ->
% Happens(CreateC(Jen,MusicStore,EPOSentJenMusicStore1),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2846).
holds_at(cc(jen, musicStore, deliveredMusicStoreJenBritneyCD, ePOSentJenMusicStore1), Time), holds_at(delivered(musicStore, jen, britneyCD), Time) ->
    happens_at(createC(jen, musicStore, ePOSentJenMusicStore1), Time).

% Delta: 
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2849).
directive(delta).
 


% [time]
% HoldsAt(CC(Jen, MusicStore, DeliveredMusicStoreJenBritneyCD, EPOSentJenMusicStore1),time) &
% HoldsAt(Delivered(MusicStore,Jen,BritneyCD),time) ->
% Happens(DischargeCC(Jen,MusicStore,DeliveredMusicStoreJenBritneyCD, EPOSentJenMusicStore1),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2851).
holds_at(cc(jen, musicStore, deliveredMusicStoreJenBritneyCD, ePOSentJenMusicStore1), Time), holds_at(delivered(musicStore, jen, britneyCD), Time) ->
    happens_at(dischargeCC(jen,
                           musicStore,
                           deliveredMusicStoreJenBritneyCD,
                           ePOSentJenMusicStore1),
               Time).

% Delta: 
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2854).
directive(delta).
 


% [time]
% HoldsAt(C(MusicStore,Jen,DeliveredMusicStoreJenBritneyCD),time) &
% HoldsAt(Delivered(MusicStore,Jen,BritneyCD),time) ->
% Happens(DischargeC(MusicStore,Jen,DeliveredMusicStoreJenBritneyCD),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2856).
holds_at(c(musicStore, jen, deliveredMusicStoreJenBritneyCD), Time), holds_at(delivered(musicStore, jen, britneyCD), Time) ->
    happens_at(dischargeC(musicStore, jen, deliveredMusicStoreJenBritneyCD),
               Time).

% Delta: 
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2859).
directive(delta).
 


% [time]
% HoldsAt(C(Jen,MusicStore,EPOSentJenMusicStore1),time) &
% HoldsAt(EPOSent(Jen,MusicStore,1),time) ->
% Happens(DischargeC(Jen,MusicStore,EPOSentJenMusicStore1),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2861).
holds_at(c(jen, musicStore, ePOSentJenMusicStore1), Time), holds_at(ePOSent(jen, musicStore, 1), Time) ->
    happens_at(dischargeC(jen, musicStore, ePOSentJenMusicStore1), Time).

% Delta: 
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2864).
directive(delta).
 


% Happens(RequestPurchase(Jen,MusicStore,BritneyCD,1),0).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2864).
happens_at(requestPurchase(jen,musicStore,britneyCD,1),0).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2866).
% Delta: 
directive(delta).
 


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2866).
% Happens(Deliver(MusicStore,Jen,BritneyCD),2).
happens_at(deliver(musicStore,jen,britneyCD),2).

% Delta: 
directive(delta).
 


% Happens(SendEPO(Jen,MusicStore,1),4).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2866).
happens_at(sendEPO(jen,musicStore,1),4).


%; Gamma
% [agent1,agent2,product,amount]
% !HoldsAt(QuoteSent(agent1,agent2,product,amount),0).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2871).
holds_at(not(quoteSent(Agent1,
		       Agent2,
		       Product,
		       Amount)),
	 0).


% [agent1,agent2,product,amount]
% !HoldsAt(PurchaseRequested(agent1,agent2,product,amount),0).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2875).
holds_at(not(purchaseRequested(Agent1,
			       Agent2,
			       Product,
			       Amount)),
	 0).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2877).
% [agent1,agent2,product]
% !HoldsAt(Delivered(agent1,agent2,product),0).
holds_at(not(delivered(Agent1,Agent2,Product)),0).


% [agent1,agent2,f]
% !HoldsAt(C(agent1,agent2,f),0).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2881).
holds_at(not(c(Agent1,Agent2,F)),0).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2883).
% [agent1,agent2,f1,f2]
% !HoldsAt(CC(agent1,agent2,f1,f2),0).
holds_at(not(cc(Agent1,Agent2,F1,F2)),0).


% [agent1,agent2,amount]
% !HoldsAt(EPOSent(agent1,agent2,amount),0).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2887).
holds_at(not(ePOSent(Agent1,Agent2,Amount)),0).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2889).
% completion Delta Happens
:- call_pel_directive(completion(delta)).
:- call_pel_directive(completion(happens_at)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2891).
% range time 0 6
:- call_pel_directive(range(time, 0, 6)).

% range offset 1 1
:- call_pel_directive(range(offset, 1, 1)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2893).
% range amount 1 1
:- call_pel_directive(range(amount, 1, 1)).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter14/Vision.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @inproceedings{ShanahanRandell:2004,
%;   author = "Murray Shanahan and David A. Randell",
%;   year = "2004",
%;   title = "A logic-based formulation of active visual perception",
%;   editor = "Didier Dubois and Christopher A. Welty and Mary-Anne Williams",
%;   booktitle = "\uppercase{P}roceedings of the \uppercase{N}inth \uppercase{I}nternational \uppercase{C}onference on \uppercase{P}rinciples of \uppercase{K}nowledge \uppercase{R}epresentation and \uppercase{R}easoning",
%;   pages = "64--72",
%;   address = "Menlo Park, CA",
%;   publisher = "AAAI Press",
%; }
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2932).
% option modeldiff on
:- call_pel_directive(option(modeldiff, on)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2934).
% load foundations/Root.e
:- call_pel_directive(load('foundations/Root.e')).

% load foundations/EC.e
:- call_pel_directive(load('foundations/EC.e')).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2937).
% sort object
sort(object).

% sort shape
sort(shape).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2939).
% sort aspect
sort(aspect).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2941).
% object Object1
t(object,object1).

% aspect Aspect1, Aspect2, Aspect3
t(aspect,aspect1).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2941).
t(aspect,aspect2).
t(aspect,aspect3).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2943).
% shape Shape1, Shape2
t(shape,shape1).
t(shape,shape2).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2945).
% predicate Shape(object,shape)
predicate(shape(object,shape)).

% predicate Arc(shape,aspect,aspect)
predicate(arc(shape,aspect,aspect)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2947).
% fluent Aspect(object,aspect)
fluent(aspect(object,aspect)).

% event Change(object,aspect,aspect)
event(change(object,aspect,aspect)).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2950).
%; Sigma
% [object,aspect1,aspect2,shape,time]
% HoldsAt(Aspect(object,aspect1),time) &
% Shape(object,shape) &
% (Arc(shape,aspect1,aspect2) |
%  Arc(shape,aspect2,aspect1)) ->
% Initiates(Change(object,aspect1,aspect2),Aspect(object,aspect2),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2952).
holds_at(aspect(Object, Aspect1), Time), shape(Object, Shape), (arc(Shape, Aspect1, Aspect2);arc(Shape, Aspect2, Aspect1)) ->
    initiates_at(change(Object, Aspect1, Aspect2),
                 aspect(Object, Aspect2),
                 Time).


% [object,aspect1,aspect2,shape,time]
% HoldsAt(Aspect(object,aspect1),time) &
% Shape(object,shape) &
% (Arc(shape,aspect1,aspect2) |
%  Arc(shape,aspect2,aspect1)) ->
% Terminates(Change(object,aspect1,aspect2),Aspect(object,aspect1),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2960).
holds_at(aspect(Object, Aspect1), Time), shape(Object, Shape), (arc(Shape, Aspect1, Aspect2);arc(Shape, Aspect2, Aspect1)) ->
    terminates_at(change(Object, Aspect1, Aspect2),
                  aspect(Object, Aspect1),
                  Time).


%; preconditions (added)
% [object,aspect1,aspect2,time]
% Happens(Change(object,aspect1,aspect2),time) ->
% HoldsAt(Aspect(object,aspect1),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2968).
happens_at(change(Object, Aspect1, Aspect2), Time) ->
    holds_at(aspect(Object, Aspect1), Time).


% [object,aspect1,aspect2,aspect3,time]
% Happens(Change(object,aspect1,aspect2),time) &
% Happens(Change(object,aspect1,aspect3),time) ->
% aspect2=aspect3.
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2973).
happens_at(change(Object, Aspect1, Aspect2), Time), happens_at(change(Object, Aspect1, Aspect3), Time) ->
    Aspect2=Aspect3.


%; Psi
% [object,shape1,shape2]
% Shape(object,shape1) &
% Shape(object,shape2) ->
% shape1=shape2.
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2979).
shape(Object, Shape1), shape(Object, Shape2) ->
    Shape1=Shape2.


% [object,aspect1,aspect2,time]
% HoldsAt(Aspect(object,aspect1),time) &
% HoldsAt(Aspect(object,aspect2),time) ->
% aspect1=aspect2.
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2985).
holds_at(aspect(Object, Aspect1), Time), holds_at(aspect(Object, Aspect2), Time) ->
    Aspect1=Aspect2.


% [aspect1,aspect2]
% Arc(Shape1,aspect1,aspect2) <->
% (aspect1=Aspect1 & aspect2=Aspect2).
arc(shape1, Aspect1, Aspect2) <->
    Aspect1=aspect1,
    Aspect2=aspect2.


% [aspect1,aspect2]
% Arc(Shape2,aspect1,aspect2) <->
% ((aspect1=Aspect1 & aspect2=Aspect3) |
%  (aspect1=Aspect3 & aspect2=Aspect2)).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',2994).
arc(shape2, Aspect1, Aspect2) <->
    (   Aspect1=aspect1,
        Aspect2=aspect3
    ;   Aspect1=aspect3,
        Aspect2=aspect2
    ).


%; Gamma


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3000).
% HoldsAt(Aspect(Object1,Aspect1),0).
holds_at(aspect(object1,aspect1),0).


% HoldsAt(Aspect(Object1,Aspect2),1).
holds_at(aspect(object1,aspect2),1).


%;completion Delta Happens

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3005).
% range time 0 1
:- call_pel_directive(range(time, 0, 1)).

% range offset 1 1
:- call_pel_directive(range(offset, 1, 1)).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter14/Workflow.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @incollection{CicekliYildirim:2000,
%;   author = "Nihan Kesim Cicekli and Yakup Yildirim",
%;   year = "2000",
%;   title = "Formalizing workflows using the event calculus",
%;   editor = "Mohamed T. Ibrahim and Josef K{\"{u}}ng and Norman Revell",
%;   booktitle = "Database and Expert Systems Applications",
%;   series = "Lecture Notes in Computer Science",
%;   volume = "1873",
%;   pages = "222--231",
%;   address = "Berlin",
%;   publisher = "Springer",
%; }
%;
%; @unpublished{WFMC:1999,
%;   author = "{Workflow Management Coalition}",
%;   year = "1999",
%;   title = "\uppercase{W}orkflow \uppercase{M}anagement \uppercase{C}oalition Terminology \& Glossary",
%;   howpublished = "Document Number WFMC-TC-1011, Document Status -- Issue 3.0, Workflow Management Coalition, Winchester, UK",
%; }
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3054).
% option modeldiff on
:- call_pel_directive(option(modeldiff, on)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3056).
% load foundations/Root.e
:- call_pel_directive(load('foundations/Root.e')).

% load foundations/EC.e
:- call_pel_directive(load('foundations/EC.e')).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3059).
% sort activity
sort(activity).

% sort condition
sort(condition).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3061).
% activity A, B, C1, C2, C3, D, E1, E2, E3, F, G
t(activity,a).
t(activity,b).
t(activity,c1).
t(activity,c2).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3061).
t(activity,c3).
t(activity,d).
t(activity,e1).
t(activity,e2).
t(activity,e3).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3061).
t(activity,f).
t(activity,g).

% condition E1C, E2C, E3C, FC
t(condition,e1c).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3061).
t(condition,e2c).
t(condition,e3c).
t(condition,fc).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3064).
% fluent Active(activity)
fluent(active(activity)).

% fluent Completed(activity)
fluent(completed(activity)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3066).
% fluent Condition(condition)
fluent(condition(condition)).

% noninertial Condition
:- call_pel_directive(noninertial(condition)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3069).
% event Start(activity)
event(start(activity)).

% event End(activity)
event(end(activity)).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3072).
%; Sigma
% [activity,time]
% Initiates(Start(activity),Active(activity),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3074).
initiates_at(start(Activity),active(Activity),Time).


% [activity,time]
% Terminates(Start(activity),Completed(activity),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3078).
terminates_at(start(Activity),
	      completed(Activity),
	      Time).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3080).
% [activity,time]
% Initiates(End(activity),Completed(activity),time).
initiates_at(end(Activity),completed(Activity),Time).


% [activity,time]
% Terminates(End(activity),Active(activity),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3084).
terminates_at(end(Activity),active(Activity),Time).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3086).
%; Delta
%; A; B

% Delta: 
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3088).
directive(delta).
 


% [time]
% !HoldsAt(Active(B),time) &
% !HoldsAt(Completed(A),time-1) &
% HoldsAt(Completed(A),time) ->
% Happens(Start(B),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3090).
holds_at(not(active(b)), Time), holds_at(not(completed(a)), Time-1), holds_at(completed(a), Time) ->
    happens_at(start(b), Time).


%; B; AND-split C1, C2, C3

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3096).
% Delta: 
directive(delta).
 


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3096).
% [time]
% !HoldsAt(Active(C1),time) &
% !HoldsAt(Completed(B),time-1) &
% HoldsAt(Completed(B),time) ->
% Happens(Start(C1),time).
holds_at(not(active(c1)), Time), holds_at(not(completed(b)), Time-1), holds_at(completed(b), Time) ->
    happens_at(start(c1), Time).

% Delta: 
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3101).
directive(delta).
 


% [time]
% !HoldsAt(Active(C2),time) &
% !HoldsAt(Completed(B),time-1) &
% HoldsAt(Completed(B),time) ->
% Happens(Start(C2),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3103).
holds_at(not(active(c2)), Time), holds_at(not(completed(b)), Time-1), holds_at(completed(b), Time) ->
    happens_at(start(c2), Time).

% Delta: 
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3107).
directive(delta).
 


% [time]
% !HoldsAt(Active(C3),time) &
% !HoldsAt(Completed(B),time-1) &
% HoldsAt(Completed(B),time) ->
% Happens(Start(C3),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3109).
holds_at(not(active(c3)), Time), holds_at(not(completed(b)), Time-1), holds_at(completed(b), Time) ->
    happens_at(start(c3), Time).


%; AND-join C1, C2, C3; D

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3115).
% Delta: 
directive(delta).
 


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3115).
% [time]
% !HoldsAt(Active(D),time) &
% ((!HoldsAt(Completed(C1),time-1) & HoldsAt(Completed(C1),time))|
%  (!HoldsAt(Completed(C2),time-1) & HoldsAt(Completed(C2),time))|
%  (!HoldsAt(Completed(C3),time-1) & HoldsAt(Completed(C3),time))) &
% HoldsAt(Completed(C1),time) &
% HoldsAt(Completed(C2),time) &
% HoldsAt(Completed(C3),time) ->
% Happens(Start(D),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3115).
holds_at(not(active(d)), Time), (holds_at(not(completed(c1)), Time-1), holds_at(completed(c1), Time);holds_at(not(completed(c2)), Time-1), holds_at(completed(c2), Time);holds_at(not(completed(c3)), Time-1), holds_at(completed(c3), Time)), holds_at(completed(c1), Time), holds_at(completed(c2), Time), holds_at(completed(c3), Time) ->
    happens_at(start(d), Time).


%; D; XOR-split E1, E2, E3

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3126).
% Delta: 
directive(delta).
 


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3126).
% [time]
% !HoldsAt(Active(E1),time) &
% !HoldsAt(Completed(D),time-1) &
% HoldsAt(Completed(D),time) &
% HoldsAt(Condition(E1C),time) ->
% Happens(Start(E1),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3126).
holds_at(not(active(e1)), Time), holds_at(not(completed(d)), Time-1), holds_at(completed(d), Time), holds_at(condition(e1c), Time) ->
    happens_at(start(e1), Time).

% Delta: 
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3132).
directive(delta).
 


% [time]
% !HoldsAt(Active(E2),time) &
% !HoldsAt(Completed(D),time-1) &
% HoldsAt(Completed(D),time) &
% HoldsAt(Condition(E2C),time) ->
% Happens(Start(E2),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3134).
holds_at(not(active(e2)), Time), holds_at(not(completed(d)), Time-1), holds_at(completed(d), Time), holds_at(condition(e2c), Time) ->
    happens_at(start(e2), Time).

% Delta: 
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3139).
directive(delta).
 


% [time]
% !HoldsAt(Active(E3),time) &
% !HoldsAt(Completed(D),time-1) &
% HoldsAt(Completed(D),time) &
% HoldsAt(Condition(E3C),time) ->
% Happens(Start(E3),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3141).
holds_at(not(active(e3)), Time), holds_at(not(completed(d)), Time-1), holds_at(completed(d), Time), holds_at(condition(e3c), Time) ->
    happens_at(start(e3), Time).


%; XOR-join E1, E2, E3; F

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3148).
% Delta: 
directive(delta).
 


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3148).
% [time]
% !HoldsAt(Active(F),time) &
% ((!HoldsAt(Completed(E1),time-1) & HoldsAt(Completed(E1),time))|
%  (!HoldsAt(Completed(E2),time-1) & HoldsAt(Completed(E2),time))|
%  (!HoldsAt(Completed(E3),time-1) & HoldsAt(Completed(E3),time))) ->
% Happens(Start(F),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3148).
holds_at(not(active(f)), Time), (holds_at(not(completed(e1)), Time-1), holds_at(completed(e1), Time);holds_at(not(completed(e2)), Time-1), holds_at(completed(e2), Time);holds_at(not(completed(e3)), Time-1), holds_at(completed(e3), Time)) ->
    happens_at(start(f), Time).


%; while (FC) F; G

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3156).
% Delta: 
directive(delta).
 


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3156).
% [time]
% !HoldsAt(Active(F),time) &
% !HoldsAt(Completed(F),time-1) &
% HoldsAt(Completed(F),time) &
% HoldsAt(Condition(FC),time) ->
% Happens(Start(F),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3156).
holds_at(not(active(f)), Time), holds_at(not(completed(f)), Time-1), holds_at(completed(f), Time), holds_at(condition(fc), Time) ->
    happens_at(start(f), Time).

% Delta: 
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3162).
directive(delta).
 


% [time]
% !HoldsAt(Active(G),time) &
% !HoldsAt(Completed(F),time-1) &
% HoldsAt(Completed(F),time) &
% !HoldsAt(Condition(FC),time) ->
% Happens(Start(G),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3164).
holds_at(not(active(g)), Time), holds_at(not(completed(f)), Time-1), holds_at(completed(f), Time), holds_at(not(condition(fc)), Time) ->
    happens_at(start(g), Time).

% Delta: 
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3169).
directive(delta).
 


% Happens(Start(A),0).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3169).
happens_at(start(a),0).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3171).
% Delta: 
directive(delta).
 


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3171).
% Happens(End(A),1).
happens_at(end(a),1).

% Delta: 
directive(delta).
 


% Happens(End(B),3).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3171).
happens_at(end(b),3).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3173).
% Delta: 
directive(delta).
 


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3173).
% Happens(End(C1),5).
happens_at(end(c1),5).

% Delta: 
directive(delta).
 


% Happens(End(C2),6).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3173).
happens_at(end(c2),6).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3175).
% Delta: 
directive(delta).
 


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3175).
% Happens(End(C3),7).
happens_at(end(c3),7).

% Delta: 
directive(delta).
 


% Happens(End(D),9).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3175).
happens_at(end(d),9).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3177).
% Delta: 
directive(delta).
 


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3177).
% Happens(End(E2),11).
happens_at(end(e2),11).

% Delta: 
directive(delta).
 


% Happens(End(F),13).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3177).
happens_at(end(f),13).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3179).
% Delta: 
directive(delta).
 


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3179).
% Happens(End(F),15).
happens_at(end(f),15).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3181).
%; Gamma
% [activity]
 % !HoldsAt(Active(activity),0).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3183).
holds_at(not(active(Activity)),0).


% [activity]
 % !HoldsAt(Completed(activity),0).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3183).
holds_at(not(completed(Activity)),0).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3185).
% [time]
 % time=% 14 <-> HoldsAt(Condition(FC),time).
Time=14 <->
    holds_at(condition(fc), Time).


% [time]
 % !HoldsAt(Condition(E1C),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3185).
holds_at(not(condition(e1c)),Time).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3187).
% [time]
 % time=% 10 <-> HoldsAt(Condition(E2C),time).
Time=10 <->
    holds_at(condition(e2c), Time).


% [time]
 % !HoldsAt(Condition(E3C),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3187).
holds_at(not(condition(e3c)),Time).

% completion Delta Happens
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3189).
:- call_pel_directive(completion(delta)).
:- call_pel_directive(completion(happens_at)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3192).
% range time 0 18
:- call_pel_directive(range(time, 0, 18)).

% range offset 1 1
:- call_pel_directive(range(offset, 1, 1)).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter6/ThielscherCircuit1.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{Thielscher:1997,
%;   author = "Michael Thielscher",
%;   year = "1997",
%;   title = "Ramification and causality",
%;   journal = "Artificial Intelligence",
%;   volume = "89",
%;   pages = "317--364",
%; }
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3230).
% load foundations/Root.e
:- call_pel_directive(load('foundations/Root.e')).

% load foundations/EC.e
:- call_pel_directive(load('foundations/EC.e')).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3232).
% load foundations/ECCausal.e
:- call_pel_directive(load('foundations/ECCausal.e')).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3234).
% sort switch
sort(switch).

% sort relay
sort(relay).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3236).
% sort light
sort(light).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3238).
% switch S1, S2, S3
t(switch,s1).
t(switch,s2).
t(switch,s3).

% relay R
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3238).
t(relay,r).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3240).
% light L
t(light,l).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3242).
% event Light(light)
event(light(light)).

% event Close(switch)
event(close(switch)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3244).
% event Open(switch)
event(open(switch)).

% event Activate(relay)
event(activate(relay)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3247).
% fluent Lit(light)
fluent(lit(light)).

% fluent Closed(switch)
fluent(closed(switch)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3249).
% fluent Activated(relay)
fluent(activated(relay)).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3251).
% [time]
% Stopped(Lit(L),time) &
% Initiated(Closed(S1),time) &
% Initiated(Closed(S2),time) ->
% Happens(Light(L),time).
stopped(lit(l), Time), initiated(closed(s1), Time), initiated(closed(s2), Time) ->
    happens_at(light(l), Time).


% [time]
% Started(Closed(S2),time) &
% Initiated(Activated(R),time) ->
% Happens(Open(S2),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3258).
started(closed(s2), Time), initiated(activated(r), Time) ->
    happens_at(open(s2), Time).


% [time]
% Stopped(Activated(R),time) &
% Initiated(Closed(S1),time) &
% Initiated(Closed(S3),time) ->
% Happens(Activate(R),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3263).
stopped(activated(r), Time), initiated(closed(s1), Time), initiated(closed(s3), Time) ->
    happens_at(activate(r), Time).


% [switch,time]
 % Initiates(Close(switch),Closed(switch),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3267).
initiates_at(close(Switch),closed(Switch),Time).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3269).
% [switch,time]
 % Terminates(Open(switch),Closed(switch),time).
terminates_at(open(Switch),closed(Switch),Time).


% [relay,time]
 % Initiates(Activate(relay),Activated(relay),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3269).
initiates_at(activate(Relay),activated(Relay),Time).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3271).
% [light,time]
 % Initiates(Light(light),Lit(light),time).
initiates_at(light(Light),lit(Light),Time).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3273).
% !HoldsAt(Closed(S1),0).
holds_at(not(closed(s1)),0).


% HoldsAt(Closed(S2),0).
holds_at(closed(s2),0).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3275).
% HoldsAt(Closed(S3),0).
holds_at(closed(s3),0).


% !HoldsAt(Activated(R),0).
holds_at(not(activated(r)),0).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3277).
% !HoldsAt(Lit(L),0).
holds_at(not(lit(l)),0).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3279).
% Happens(Close(S1),0).
happens_at(close(s1),0).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3281).
% completion Happens
:- call_pel_directive(completion(happens_at)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3283).
% range time 0 1
:- call_pel_directive(range(time, 0, 1)).

% range offset 1 1
:- call_pel_directive(range(offset, 1, 1)).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter6/CarryingABook1.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; Example: Carrying a Book (Effect Axioms)
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;
%;

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3315).
% option modeldiff on
:- call_pel_directive(option(modeldiff, on)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3317).
% load foundations/Root.e
:- call_pel_directive(load('foundations/Root.e')).

% load foundations/EC.e
:- call_pel_directive(load('foundations/EC.e')).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3320).
% sort object
sort(object).

% sort agent: object
subsort(agent,object).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3322).
% sort room
sort(room).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3324).
% object Book
t(object,book).

% agent Nathan
t(agent,nathan).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3326).
% room LivingRoom, Kitchen
t(room,livingRoom).
t(room,kitchen).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3328).
% event LetGoOf(agent,object)
event(letGoOf(agent,object)).

% event PickUp(agent,object)
event(pickUp(agent,object)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3330).
% event Walk(agent,room,room)
event(walk(agent,room,room)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3332).
% fluent InRoom(object,room)
fluent(inRoom(object,room)).

% fluent Holding(agent,object)
fluent(holding(agent,object)).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3335).
%; Sigma
% [agent,room1,room2,time]
% Initiates(Walk(agent,room1,room2),InRoom(agent,room2),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3337).
initiates_at(walk(Agent,Room1,Room2),
	     inRoom(Agent,Room2),
	     Time).


% [agent,room1,room2,time]
% room1!=% room2 ->
% Terminates(Walk(agent,room1,room2),InRoom(agent,room1),time).
Room1\=Room2 ->
    terminates_at(walk(Agent, Room1, Room2),
                  inRoom(Agent, Room1),
                  Time).


% [agent,object,room,time]
% HoldsAt(InRoom(agent,room),time) &
% HoldsAt(InRoom(object,room),time) ->
% Initiates(PickUp(agent,object),Holding(agent,object),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3345).
holds_at(inRoom(Agent, Room), Time), holds_at(inRoom(Object, Room), Time) ->
    initiates_at(pickUp(Agent, Object),
                 holding(Agent, Object),
                 Time).


% [agent,object,time]
% HoldsAt(Holding(agent,object),time) ->
% Terminates(LetGoOf(agent,object),Holding(agent,object),time).
holds_at(holding(Agent, Object), Time) ->
    terminates_at(letGoOf(Agent, Object),
                  holding(Agent, Object),
                  Time).


% [agent,object,room1,room2,time]
% HoldsAt(Holding(agent,object),time) ->
% Initiates(Walk(agent,room1,room2),InRoom(object,room2),time).
holds_at(holding(Agent, Object), Time) ->
    initiates_at(walk(Agent, Room1, Room2),
                 inRoom(Object, Room2),
                 Time).


% [agent,object,room1,room2,time]
% HoldsAt(Holding(agent,object),time) &
% room1!=room2 ->
% Terminates(Walk(agent,room1,room2),InRoom(object,room1),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3358).
holds_at(holding(Agent, Object), Time), Room1\=Room2 ->
    terminates_at(walk(Agent, Room1, Room2),
                  inRoom(Object, Room1),
                  Time).


%; Delta


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3364).
% Happens(PickUp(Nathan,Book),0).
happens_at(pickUp(nathan,book),0).


% Happens(Walk(Nathan,LivingRoom,Kitchen),1).
happens_at(walk(nathan,livingRoom,kitchen),1).


%; Psi
% [object,room1,room2,time]
% HoldsAt(InRoom(object,room1),time) &
% HoldsAt(InRoom(object,room2),time) ->
% room1=room2.
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3369).
holds_at(inRoom(Object, Room1), Time), holds_at(inRoom(Object, Room2), Time) ->
    Room1=Room2.


%; Gamma


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3376).
% HoldsAt(InRoom(Nathan,LivingRoom),0).
holds_at(inRoom(nathan,livingRoom),0).


% HoldsAt(InRoom(Book,LivingRoom),0).
holds_at(inRoom(book,livingRoom),0).


%; added:


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3380).
% !HoldsAt(Holding(Nathan,Book),0).
holds_at(not(holding(nathan,book)),0).


% [agent,time]
 % !HoldsAt(Holding(agent,agent),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3380).
holds_at(not(holding(Agent,Agent)),Time).

% completion Happens
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3382).
:- call_pel_directive(completion(happens_at)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3385).
% range time 0 2
:- call_pel_directive(range(time, 0, 2)).

% range offset 1 1
:- call_pel_directive(range(offset, 1, 1)).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter6/ThielscherCircuit2.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{Thielscher:1997,
%;   author = "Michael Thielscher",
%;   year = "1997",
%;   title = "Ramification and causality",
%;   journal = "Artificial Intelligence",
%;   volume = "89",
%;   pages = "317--364",
%; }
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3423).
% load foundations/Root.e
:- call_pel_directive(load('foundations/Root.e')).

% load foundations/EC.e
:- call_pel_directive(load('foundations/EC.e')).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3426).
% sort switch
sort(switch).

% sort relay
sort(relay).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3428).
% sort light
sort(light).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3430).
% switch S1, S2, S3
t(switch,s1).
t(switch,s2).
t(switch,s3).

% relay R
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3430).
t(relay,r).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3432).
% light L
t(light,l).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3434).
% event Light(light)
event(light(light)).

% event Unlight(light)
event(unlight(light)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3436).
% event Close(switch)
event(close(switch)).

% event Open(switch)
event(open(switch)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3438).
% event Activate(relay)
event(activate(relay)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3440).
% fluent Lit(light)
fluent(lit(light)).

% fluent Closed(switch)
fluent(closed(switch)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3442).
% fluent Activated(relay)
fluent(activated(relay)).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3444).
% [time]
% !HoldsAt(Lit(L),time) &
% HoldsAt(Closed(S1),time) &
% HoldsAt(Closed(S2),time) ->
% Happens(Light(L),time).
holds_at(not(lit(l)), Time), holds_at(closed(s1), Time), holds_at(closed(s2), Time) ->
    happens_at(light(l), Time).


% [time]
% HoldsAt(Lit(L),time) &
% (!HoldsAt(Closed(S1),time) | !HoldsAt(Closed(S2),time)) ->
% Happens(Unlight(L),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3451).
holds_at(lit(l), Time), (holds_at(not(closed(s1)), Time);holds_at(not(closed(s2)), Time)) ->
    happens_at(unlight(l), Time).


% [time]
% HoldsAt(Closed(S2),time) &
% HoldsAt(Activated(R),time) ->
% Happens(Open(S2),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3456).
holds_at(closed(s2), Time), holds_at(activated(r), Time) ->
    happens_at(open(s2), Time).


% [time]
% !HoldsAt(Activated(R),time) &
% HoldsAt(Closed(S1),time) &
% HoldsAt(Closed(S3),time) ->
% Happens(Activate(R),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3461).
holds_at(not(activated(r)), Time), holds_at(closed(s1), Time), holds_at(closed(s3), Time) ->
    happens_at(activate(r), Time).


% [switch,time]
 % Initiates(Close(switch),Closed(switch),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3465).
initiates_at(close(Switch),closed(Switch),Time).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3467).
% [switch,time]
 % Terminates(Open(switch),Closed(switch),time).
terminates_at(open(Switch),closed(Switch),Time).


% [relay,time]
 % Initiates(Activate(relay),Activated(relay),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3467).
initiates_at(activate(Relay),activated(Relay),Time).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3469).
% [light,time]
 % Initiates(Light(light),Lit(light),time).
initiates_at(light(Light),lit(Light),Time).


% [light,time]
 % Terminates(Unlight(light),Lit(light),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3469).
terminates_at(unlight(Light),lit(Light),Time).


% !HoldsAt(Closed(S1),0).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3471).
holds_at(not(closed(s1)),0).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3473).
% HoldsAt(Closed(S2),0).
holds_at(closed(s2),0).


% HoldsAt(Closed(S3),0).
holds_at(closed(s3),0).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3475).
% !HoldsAt(Activated(R),0).
holds_at(not(activated(r)),0).


% !HoldsAt(Lit(L),0).
holds_at(not(lit(l)),0).


% Happens(Close(S1),0).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3477).
happens_at(close(s1),0).

% completion Happens
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3479).
:- call_pel_directive(completion(happens_at)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3482).
% range time 0 4
:- call_pel_directive(range(time, 0, 4)).

% range offset 1 1
:- call_pel_directive(range(offset, 1, 1)).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter6/ShanahanCircuit.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @inproceedings{Shanahan:1999a,
%;   author = "Murray Shanahan",
%;   year = "1999",
%;   title = "The ramification problem in the event calculus",
%;   booktitle = "\uppercase{P}roceedings of the \uppercase{S}ixteenth \uppercase{I}nternational \uppercase{J}oint \uppercase{C}onference on \uppercase{A}rtificial \uppercase{I}ntelligence",
%;   pages = "140--146",
%;   address = "San Mateo, CA",
%;   publisher = "Morgan Kaufmann",
%; }
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3521).
% load foundations/Root.e
:- call_pel_directive(load('foundations/Root.e')).

% load foundations/EC.e
:- call_pel_directive(load('foundations/EC.e')).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3524).
% sort switch
sort(switch).

% sort relay
sort(relay).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3526).
% sort light
sort(light).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3528).
% switch S1, S2, S3
t(switch,s1).
t(switch,s2).
t(switch,s3).

% relay R
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3528).
t(relay,r).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3530).
% light L
t(light,l).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3532).
% event Light(light)
event(light(light)).

% event Unlight(light)
event(unlight(light)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3534).
% event Close(switch)
event(close(switch)).

% event Open(switch)
event(open(switch)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3536).
% event Activate(relay)
event(activate(relay)).

% event Deactivate(relay)
event(deactivate(relay)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3539).
% fluent Lit(light)
fluent(lit(light)).

% fluent Closed(switch)
fluent(closed(switch)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3541).
% fluent Activated(relay)
fluent(activated(relay)).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3543).
% [time]
% !HoldsAt(Lit(L),time) &
% HoldsAt(Closed(S1),time) &
% HoldsAt(Closed(S2),time) ->
% Happens(Light(L),time).
holds_at(not(lit(l)), Time), holds_at(closed(s1), Time), holds_at(closed(s2), Time) ->
    happens_at(light(l), Time).


% [time]
% HoldsAt(Lit(L),time) &
% (!HoldsAt(Closed(S1),time) | !HoldsAt(Closed(S2),time)) ->
% Happens(Unlight(L),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3550).
holds_at(lit(l), Time), (holds_at(not(closed(s1)), Time);holds_at(not(closed(s2)), Time)) ->
    happens_at(unlight(l), Time).


% [time]
% HoldsAt(Closed(S2),time) &
% HoldsAt(Activated(R),time) ->
% Happens(Open(S2),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3555).
holds_at(closed(s2), Time), holds_at(activated(r), Time) ->
    happens_at(open(s2), Time).


% [time]
% !HoldsAt(Activated(R),time) &
% HoldsAt(Closed(S1),time) &
% HoldsAt(Closed(S2),time) &
% HoldsAt(Closed(S3),time) ->
% Happens(Activate(R),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3560).
holds_at(not(activated(r)), Time), holds_at(closed(s1), Time), holds_at(closed(s2), Time), holds_at(closed(s3), Time) ->
    happens_at(activate(r), Time).


% [time]
% HoldsAt(Activated(R),time) &
% (!HoldsAt(Closed(S1),time) |
%  !HoldsAt(Closed(S2),time) |
%  !HoldsAt(Closed(S3),time)) ->
% Happens(Deactivate(R),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3567).
holds_at(activated(r), Time), (holds_at(not(closed(s1)), Time);holds_at(not(closed(s2)), Time);holds_at(not(closed(s3)), Time)) ->
    happens_at(deactivate(r), Time).


% [switch,time]
 % Initiates(Close(switch),Closed(switch),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3572).
initiates_at(close(Switch),closed(Switch),Time).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3574).
% [switch,time]
 % Terminates(Open(switch),Closed(switch),time).
terminates_at(open(Switch),closed(Switch),Time).


% [relay,time]
 % Initiates(Activate(relay),Activated(relay),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3574).
initiates_at(activate(Relay),activated(Relay),Time).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3576).
% [relay,time]
 % Terminates(Deactivate(relay),Activated(relay),time).
terminates_at(deactivate(Relay),
	      activated(Relay),
	      Time).


% [light,time]
 % Initiates(Light(light),Lit(light),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3576).
initiates_at(light(Light),lit(Light),Time).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3578).
% [light,time]
 % Terminates(Unlight(light),Lit(light),time).
terminates_at(unlight(Light),lit(Light),Time).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3580).
% !HoldsAt(Closed(S1),0).
holds_at(not(closed(s1)),0).


% HoldsAt(Closed(S2),0).
holds_at(closed(s2),0).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3582).
% HoldsAt(Closed(S3),0).
holds_at(closed(s3),0).


% !HoldsAt(Activated(R),0).
holds_at(not(activated(r)),0).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3584).
% !HoldsAt(Lit(L),0).
holds_at(not(lit(l)),0).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3586).
% Happens(Close(S1),0).
happens_at(close(s1),0).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3588).
% completion Happens
:- call_pel_directive(completion(happens_at)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3590).
% range time 0 4
:- call_pel_directive(range(time, 0, 4)).

% range offset 1 1
:- call_pel_directive(range(offset, 1, 1)).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter6/CarryingABook2.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; Example: Carrying a Book (Release Axioms and State Constraints)
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3621).
% load foundations/Root.e
:- call_pel_directive(load('foundations/Root.e')).

% load foundations/EC.e
:- call_pel_directive(load('foundations/EC.e')).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3624).
% sort object
sort(object).

% sort agent: object
subsort(agent,object).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3626).
% sort room
sort(room).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3628).
% object Book
t(object,book).

% agent Nathan
t(agent,nathan).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3630).
% room LivingRoom, Kitchen
t(room,livingRoom).
t(room,kitchen).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3632).
% event LetGoOf(agent,object)
event(letGoOf(agent,object)).

% event PickUp(agent,object)
event(pickUp(agent,object)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3634).
% event Walk(agent,room,room)
event(walk(agent,room,room)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3636).
% fluent InRoom(object,room)
fluent(inRoom(object,room)).

% fluent Holding(agent,object)
fluent(holding(agent,object)).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3639).
%; Sigma
% [agent,room1,room2,time]
% Initiates(Walk(agent,room1,room2),InRoom(agent,room2),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3641).
initiates_at(walk(Agent,Room1,Room2),
	     inRoom(Agent,Room2),
	     Time).


% [agent,room1,room2,time]
% room1!=% room2 ->
% Terminates(Walk(agent,room1,room2),InRoom(agent,room1),time).
Room1\=Room2 ->
    terminates_at(walk(Agent, Room1, Room2),
                  inRoom(Agent, Room1),
                  Time).


% [agent,object,room,time]
% HoldsAt(InRoom(agent,room),time) &
% HoldsAt(InRoom(object,room),time) ->
% Initiates(PickUp(agent,object),Holding(agent,object),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3649).
holds_at(inRoom(Agent, Room), Time), holds_at(inRoom(Object, Room), Time) ->
    initiates_at(pickUp(Agent, Object),
                 holding(Agent, Object),
                 Time).


% [agent,object,time]
% HoldsAt(Holding(agent,object),time) ->
% Terminates(LetGoOf(agent,object),Holding(agent,object),time).
holds_at(holding(Agent, Object), Time) ->
    terminates_at(letGoOf(Agent, Object),
                  holding(Agent, Object),
                  Time).


% [agent,object,room,time]
% Releases(PickUp(agent,object),InRoom(object,room),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3658).
releases_at(pickUp(Agent,Object),
	    inRoom(Object,Room),
	    Time).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3660).
% [agent,object,room,time]
% HoldsAt(InRoom(agent,room),time) ->
% Initiates(LetGoOf(agent,object),InRoom(object,room),time).
holds_at(inRoom(Agent, Room), Time) ->
    initiates_at(letGoOf(Agent, Object),
                 inRoom(Object, Room),
                 Time).


%; Delta


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3666).
% Happens(PickUp(Nathan,Book),0).
happens_at(pickUp(nathan,book),0).


% Happens(Walk(Nathan,LivingRoom,Kitchen),1).
happens_at(walk(nathan,livingRoom,kitchen),1).


%; Psi
% [object,room1,room2,time]
% HoldsAt(InRoom(object,room1),time) &
% HoldsAt(InRoom(object,room2),time) ->
% room1=room2.
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3671).
holds_at(inRoom(Object, Room1), Time), holds_at(inRoom(Object, Room2), Time) ->
    Room1=Room2.


% [agent,object,room,time]
% HoldsAt(Holding(agent,object),time) &
% HoldsAt(InRoom(agent,room),time) ->
% HoldsAt(InRoom(object,room),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3677).
holds_at(holding(Agent, Object), Time), holds_at(inRoom(Agent, Room), Time) ->
    holds_at(inRoom(Object, Room), Time).


%; Gamma


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3683).
% HoldsAt(InRoom(Nathan,LivingRoom),0).
holds_at(inRoom(nathan,livingRoom),0).


% HoldsAt(InRoom(Book,LivingRoom),0).
holds_at(inRoom(book,livingRoom),0).


%; added:


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3687).
% !HoldsAt(Holding(Nathan,Book),0).
holds_at(not(holding(nathan,book)),0).


% [agent,time]
 % !HoldsAt(Holding(agent,agent),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3687).
holds_at(not(holding(Agent,Agent)),Time).

% completion Happens
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3689).
:- call_pel_directive(completion(happens_at)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3692).
% range time 0 2
:- call_pel_directive(range(time, 0, 2)).

% range offset 1 1
:- call_pel_directive(range(offset, 1, 1)).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter7/HotAirBalloon.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{MillerShanahan:1999,
%;   author = "Rob Miller and Murray Shanahan",
%;   year = "1999",
%;   title = "The event calculus in classical logic---\uppercase{A}lternative axiomatisations",
%;   journal = "Link{\"{o}}ping Electronic Articles in Computer and Information Science",
%;   volume = "4",
%;   number = "016",
%; }
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3730).
% option encoding 3
:- call_pel_directive(option(encoding, 3)).

% option trajectory on
:- call_pel_directive(option(trajectory, on)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3733).
% load foundations/Root.e
:- call_pel_directive(load('foundations/Root.e')).

% load foundations/EC.e
:- call_pel_directive(load('foundations/EC.e')).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3736).
% sort balloon
sort(balloon).

% sort agent
sort(agent).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3738).
% sort height: integer
subsort(height,integer).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3740).
% agent Nathan
t(agent,nathan).

% balloon Balloon
t(balloon,balloon).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3743).
% fluent HeaterOn(balloon)
fluent(heaterOn(balloon)).

% fluent Height(balloon,height)
fluent(height(balloon,height)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3745).
% noninertial Height
:- call_pel_directive(noninertial(height)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3747).
% event TurnOnHeater(agent,balloon)
event(turnOnHeater(agent,balloon)).

% event TurnOffHeater(agent,balloon)
event(turnOffHeater(agent,balloon)).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3750).
%; Sigma
% [agent,balloon,time]
% Initiates(TurnOnHeater(agent,balloon),HeaterOn(balloon),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3752).
initiates_at(turnOnHeater(Agent,Balloon),
	     heaterOn(Balloon),
	     Time).


% [agent,balloon,time]
% Terminates(TurnOffHeater(agent,balloon),HeaterOn(balloon),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3756).
terminates_at(turnOffHeater(Agent,Balloon),
	      heaterOn(Balloon),
	      Time).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3758).
%; Delta

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3760).
% Delta: 
directive(delta).
 


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3760).
% Happens(TurnOnHeater(Nathan,Balloon),0).
happens_at(turnOnHeater(nathan,balloon),0).

% Delta: 
directive(delta).
 


% Happens(TurnOffHeater(Nathan,Balloon),2).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3760).
happens_at(turnOffHeater(nathan,balloon),2).


%; Psi
% [balloon,height1,height2,time]
% HoldsAt(Height(balloon,height1),time) &
% HoldsAt(Height(balloon,height2),time) ->
% height1=height2.
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3765).
holds_at(height(Balloon, Height1), Time), holds_at(height(Balloon, Height2), Time) ->
    Height1=Height2.


%; Pi
% [balloon,height1,height2,offset,time]
% HoldsAt(Height(balloon,height1),time) &
% height2 = (height1 + offset) ->
% Trajectory(HeaterOn(balloon),time,Height(balloon,height2),offset).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3772).
holds_at(height(Balloon, Height1), Time), Height2=Height1+Offset ->
    trajectory(heaterOn(Balloon),
               Time,
               height(Balloon, Height2),
               Offset).


% [balloon,height1,height2,offset,time]
% HoldsAt(Height(balloon,height1),time) &
% height2 = (height1 - offset) ->
% AntiTrajectory(HeaterOn(balloon),time,Height(balloon,height2),offset).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3778).
holds_at(height(Balloon, Height1), Time), Height2=Height1-Offset ->
    antiTrajectory(heaterOn(Balloon),
                   Time,
                   height(Balloon, Height2),
                   Offset).


%; Gamma


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3784).
% HoldsAt(Height(Balloon,0),0).
holds_at(height(balloon,0),0).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3786).
%; added:


% !HoldsAt(HeaterOn(Balloon),0).
holds_at(not(heaterOn(balloon)),0).

% completion Delta Happens
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3788).
:- call_pel_directive(completion(delta)).
:- call_pel_directive(completion(happens_at)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3791).
% range time 0 3
:- call_pel_directive(range(time, 0, 3)).

% range height 0 2
:- call_pel_directive(range(height, 0, 2)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3793).
% range offset 1 2
:- call_pel_directive(range(offset, 1, 2)).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter7/FallingObjectWithEvents.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3821).
% load foundations/Root.e
:- call_pel_directive(load('foundations/Root.e')).

% load foundations/EC.e
:- call_pel_directive(load('foundations/EC.e')).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3824).
% sort object
sort(object).

% sort agent
sort(agent).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3826).
% sort height: integer
subsort(height,integer).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3828).
% agent Nathan
t(agent,nathan).

% object Apple
t(object,apple).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3831).
% fluent Falling(object)
fluent(falling(object)).

% fluent Height(object,height)
fluent(height(object,height)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3834).
% event Drop(agent,object)
event(drop(agent,object)).

% event HitGround(object)
event(hitGround(object)).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3837).
%; Sigma
% [agent,object,time]
% Initiates(Drop(agent,object),Falling(object),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3839).
initiates_at(drop(Agent,Object),
	     falling(Object),
	     Time).


% [agent,object,height,time]
% Releases(Drop(agent,object),Height(object,height),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3843).
releases_at(drop(Agent,Object),
	    height(Object,Height),
	    Time).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3845).
% [object,time]
% Terminates(HitGround(object),Falling(object),time).
terminates_at(hitGround(Object),falling(Object),Time).


% [object,height,time]
% HoldsAt(Height(object,height),time) ->
% Initiates(HitGround(object),Height(object,height),time).
holds_at(height(Object, Height), Time) ->
    initiates_at(hitGround(Object),
                 height(Object, Height),
                 Time).


%; Delta

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3854).
% Delta: 
directive(delta).
 


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3854).
% [object,time]
% HoldsAt(Falling(object),time) &
% HoldsAt(Height(object,0),time) ->
% Happens(HitGround(object),time).
holds_at(falling(Object), Time), holds_at(height(Object, 0), Time) ->
    happens_at(hitGround(Object), Time).

% Delta: 
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3858).
directive(delta).
 


% Happens(Drop(Nathan,Apple),0).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3858).
happens_at(drop(nathan,apple),0).


%; Psi
% [object,height1,height2,time]
% HoldsAt(Height(object,height1),time) &
% HoldsAt(Height(object,height2),time) ->
% height1=height2.
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3863).
holds_at(height(Object, Height1), Time), holds_at(height(Object, Height2), Time) ->
    Height1=Height2.


%; Pi
% [object,height1,height2,offset,time]
% HoldsAt(Height(object,height1),time) &
% height2 = (height1 - offset) ->
% Trajectory(Falling(object),time,Height(object,height2),offset).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3870).
holds_at(height(Object, Height1), Time), Height2=Height1-Offset ->
    trajectory(falling(Object),
               Time,
               height(Object, Height2),
               Offset).


%; Gamma


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3877).
% !HoldsAt(Falling(Apple),0).
holds_at(not(falling(apple)),0).


% HoldsAt(Height(Apple,3),0).
holds_at(height(apple,3),0).

% completion Delta Happens
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3879).
:- call_pel_directive(completion(delta)).
:- call_pel_directive(completion(happens_at)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3882).
% range time 0 5
:- call_pel_directive(range(time, 0, 5)).

% range height 0 3
:- call_pel_directive(range(height, 0, 3)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3884).
% range offset 1 3
:- call_pel_directive(range(offset, 1, 3)).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter7/FallingObjectWithAntiTrajectory.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3912).
% option encoding 3
:- call_pel_directive(option(encoding, 3)).

% option trajectory on
:- call_pel_directive(option(trajectory, on)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3915).
% load foundations/Root.e
:- call_pel_directive(load('foundations/Root.e')).

% load foundations/EC.e
:- call_pel_directive(load('foundations/EC.e')).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3918).
% sort object
sort(object).

% sort agent
sort(agent).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3920).
% sort height: integer
subsort(height,integer).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3922).
% agent Nathan
t(agent,nathan).

% object Apple
t(object,apple).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3925).
% fluent Falling(object)
fluent(falling(object)).

% fluent Height(object,height)
fluent(height(object,height)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3927).
% noninertial Height
:- call_pel_directive(noninertial(height)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3929).
% event Drop(agent,object)
event(drop(agent,object)).

% event HitGround(object)
event(hitGround(object)).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3932).
%; Sigma
% [agent,object,time]
% Initiates(Drop(agent,object),Falling(object),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3934).
initiates_at(drop(Agent,Object),
	     falling(Object),
	     Time).


% [object,time]
% Terminates(HitGround(object),Falling(object),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3938).
terminates_at(hitGround(Object),falling(Object),Time).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3940).
%; Delta

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3942).
% Delta: 
directive(delta).
 


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3942).
% [object,time]
% HoldsAt(Falling(object),time) &
% HoldsAt(Height(object,0),time) ->
% Happens(HitGround(object),time).
holds_at(falling(Object), Time), holds_at(height(Object, 0), Time) ->
    happens_at(hitGround(Object), Time).

% Delta: 
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3946).
directive(delta).
 


% Happens(Drop(Nathan,Apple),0).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3946).
happens_at(drop(nathan,apple),0).


%; Psi
% [object,height1,height2,time]
% HoldsAt(Height(object,height1),time) &
% HoldsAt(Height(object,height2),time) ->
% height1=height2.
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3951).
holds_at(height(Object, Height1), Time), holds_at(height(Object, Height2), Time) ->
    Height1=Height2.


%; Pi
% [object,height1,height2,offset,time]
% HoldsAt(Height(object,height1),time) &
% height2 = (height1 - offset) ->
% Trajectory(Falling(object),time,Height(object,height2),offset).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3958).
holds_at(height(Object, Height1), Time), Height2=Height1-Offset ->
    trajectory(falling(Object),
               Time,
               height(Object, Height2),
               Offset).


% [object,height,offset,time]
% HoldsAt(Height(object,height),time) ->
% AntiTrajectory(Falling(object),time,Height(object,height),offset).
holds_at(height(Object, Height), Time) ->
    antiTrajectory(falling(Object),
                   Time,
                   height(Object, Height),
                   Offset).


%; Gamma


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3969).
% !HoldsAt(Falling(Apple),0).
holds_at(not(falling(apple)),0).


% HoldsAt(Height(Apple,3),0).
holds_at(height(apple,3),0).

% completion Delta Happens
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3971).
:- call_pel_directive(completion(delta)).
:- call_pel_directive(completion(happens_at)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3974).
% range time 0 5
:- call_pel_directive(range(time, 0, 5)).

% range height 0 3
:- call_pel_directive(range(height, 0, 3)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',3976).
% range offset 1 3
:- call_pel_directive(range(offset, 1, 3)).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter3/Telephone2.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4004).
% load foundations/Root.e
:- call_pel_directive(load('foundations/Root.e')).

% load foundations/EC.e
:- call_pel_directive(load('foundations/EC.e')).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4007).
% sort agent
sort(agent).

% sort phone
sort(phone).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4010).
% agent Agent1, Agent2
t(agent,agent1).
t(agent,agent2).

% phone Phone1, Phone2
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4010).
t(phone,phone1).
t(phone,phone2).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4013).
% fluent Ringing(phone,phone)
fluent(ringing(phone,phone)).

% fluent DialTone(phone)
fluent(dialTone(phone)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4015).
% fluent BusySignal(phone)
fluent(busySignal(phone)).

% fluent Idle(phone)
fluent(idle(phone)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4017).
% fluent Connected(phone,phone)
fluent(connected(phone,phone)).

% fluent Disconnected(phone)
fluent(disconnected(phone)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4020).
% event PickUp(agent,phone)
event(pickUp(agent,phone)).

% event SetDown(agent,phone)
event(setDown(agent,phone)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4022).
% event Dial(agent,phone,phone)
event(dial(agent,phone,phone)).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4024).
%; Sigma
% [agent,phone,time]
% HoldsAt(Idle(phone),time) ->
% Initiates(PickUp(agent,phone),DialTone(phone),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4026).
holds_at(idle(Phone), Time) ->
    initiates_at(pickUp(Agent, Phone),
                 dialTone(Phone),
                 Time).


% [agent,phone,time]
% HoldsAt(Idle(phone),time) ->
% Terminates(PickUp(agent,phone),Idle(phone),time).
holds_at(idle(Phone), Time) ->
    terminates_at(pickUp(Agent, Phone),
                  idle(Phone),
                  Time).


% [agent,phone,time]
% HoldsAt(DialTone(phone),time) ->
% Initiates(SetDown(agent,phone),Idle(phone),time).
holds_at(dialTone(Phone), Time) ->
    initiates_at(setDown(Agent, Phone),
                 idle(Phone),
                 Time).


% [agent,phone,time]
% HoldsAt(DialTone(phone),time) ->
% Terminates(SetDown(agent,phone),DialTone(phone),time).
holds_at(dialTone(Phone), Time) ->
    terminates_at(setDown(Agent, Phone),
                  dialTone(Phone),
                  Time).


% [agent,phone1,phone2,time]
% HoldsAt(DialTone(phone1),time) &
% HoldsAt(Idle(phone2),time) ->
% Initiates(Dial(agent,phone1,phone2),Ringing(phone1,phone2),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4043).
holds_at(dialTone(Phone1), Time), holds_at(idle(Phone2), Time) ->
    initiates_at(dial(Agent, Phone1, Phone2),
                 ringing(Phone1, Phone2),
                 Time).


% [agent,phone1,phone2,time]
% HoldsAt(DialTone(phone1),time) &
% HoldsAt(Idle(phone2),time) ->
% Terminates(Dial(agent,phone1,phone2),DialTone(phone1),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4048).
holds_at(dialTone(Phone1), Time), holds_at(idle(Phone2), Time) ->
    terminates_at(dial(Agent, Phone1, Phone2),
                  dialTone(Phone1),
                  Time).


% [agent,phone1,phone2,time]
% HoldsAt(DialTone(phone1),time) &
% HoldsAt(Idle(phone2),time) ->
% Terminates(Dial(agent,phone1,phone2),Idle(phone2),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4053).
holds_at(dialTone(Phone1), Time), holds_at(idle(Phone2), Time) ->
    terminates_at(dial(Agent, Phone1, Phone2),
                  idle(Phone2),
                  Time).


% [agent,phone1,phone2,time]
% HoldsAt(DialTone(phone1),time) &
% !HoldsAt(Idle(phone2),time) ->
% Initiates(Dial(agent,phone1,phone2),BusySignal(phone1),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4058).
holds_at(dialTone(Phone1), Time), holds_at(not(idle(Phone2)), Time) ->
    initiates_at(dial(Agent, Phone1, Phone2),
                 busySignal(Phone1),
                 Time).


% [agent,phone1,phone2,time]
% HoldsAt(DialTone(phone1),time) &
% !HoldsAt(Idle(phone2),time) ->
% Terminates(Dial(agent,phone1,phone2),DialTone(phone1),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4063).
holds_at(dialTone(Phone1), Time), holds_at(not(idle(Phone2)), Time) ->
    terminates_at(dial(Agent, Phone1, Phone2),
                  dialTone(Phone1),
                  Time).


% [agent,phone,time]
% HoldsAt(BusySignal(phone),time) ->
% Initiates(SetDown(agent,phone),Idle(phone),time).
holds_at(busySignal(Phone), Time) ->
    initiates_at(setDown(Agent, Phone),
                 idle(Phone),
                 Time).


% [agent,phone,time]
% HoldsAt(BusySignal(phone),time) ->
% Terminates(SetDown(agent,phone),BusySignal(phone),time).
holds_at(busySignal(Phone), Time) ->
    terminates_at(setDown(Agent, Phone),
                  busySignal(Phone),
                  Time).


% [agent,phone1,phone2,time]
% HoldsAt(Ringing(phone1,phone2),time) ->
% Initiates(SetDown(agent,phone1),Idle(phone1),time).
holds_at(ringing(Phone1, Phone2), Time) ->
    initiates_at(setDown(Agent, Phone1),
                 idle(Phone1),
                 Time).


% [agent,phone1,phone2,time]
% HoldsAt(Ringing(phone1,phone2),time) ->
% Initiates(SetDown(agent,phone1),Idle(phone2),time).
holds_at(ringing(Phone1, Phone2), Time) ->
    initiates_at(setDown(Agent, Phone1),
                 idle(Phone2),
                 Time).


% [agent,phone1,phone2,time]
% HoldsAt(Ringing(phone1,phone2),time) ->
% Terminates(SetDown(agent,phone1),Ringing(phone1,phone2),time).
holds_at(ringing(Phone1, Phone2), Time) ->
    terminates_at(setDown(Agent, Phone1),
                  ringing(Phone1, Phone2),
                  Time).


% [agent,phone1,phone2,time]
% HoldsAt(Ringing(phone1,phone2),time) ->
% Initiates(PickUp(agent,phone2),Connected(phone1,phone2),time).
holds_at(ringing(Phone1, Phone2), Time) ->
    initiates_at(pickUp(Agent, Phone2),
                 connected(Phone1, Phone2),
                 Time).


% [agent,phone1,phone2,time]
% HoldsAt(Ringing(phone1,phone2),time) ->
% Terminates(PickUp(agent,phone2),Ringing(phone1,phone2),time).
holds_at(ringing(Phone1, Phone2), Time) ->
    terminates_at(pickUp(Agent, Phone2),
                  ringing(Phone1, Phone2),
                  Time).


% [agent,phone1,phone2,time]
% HoldsAt(Connected(phone1,phone2),time) ->
% Initiates(SetDown(agent,phone1),Idle(phone1),time).
holds_at(connected(Phone1, Phone2), Time) ->
    initiates_at(setDown(Agent, Phone1),
                 idle(Phone1),
                 Time).


% [agent,phone1,phone2,time]
% HoldsAt(Connected(phone1,phone2),time) ->
% Initiates(SetDown(agent,phone1),Disconnected(phone2),time).
holds_at(connected(Phone1, Phone2), Time) ->
    initiates_at(setDown(Agent, Phone1),
                 disconnected(Phone2),
                 Time).


% [agent,phone1,phone2,time]
% HoldsAt(Connected(phone1,phone2),time) ->
% Terminates(SetDown(agent,phone1),Connected(phone1,phone2),time).
holds_at(connected(Phone1, Phone2), Time) ->
    terminates_at(setDown(Agent, Phone1),
                  connected(Phone1, Phone2),
                  Time).


% [agent,phone1,phone2,time]
% HoldsAt(Connected(phone1,phone2),time) ->
% Initiates(SetDown(agent,phone2),Idle(phone2),time).
holds_at(connected(Phone1, Phone2), Time) ->
    initiates_at(setDown(Agent, Phone2),
                 idle(Phone2),
                 Time).


% [agent,phone1,phone2,time]
% HoldsAt(Connected(phone1,phone2),time) ->
% Initiates(SetDown(agent,phone2),Disconnected(phone1),time).
holds_at(connected(Phone1, Phone2), Time) ->
    initiates_at(setDown(Agent, Phone2),
                 disconnected(Phone1),
                 Time).


% [agent,phone1,phone2,time]
% HoldsAt(Connected(phone1,phone2),time) ->
% Terminates(SetDown(agent,phone2),Connected(phone1,phone2),time).
holds_at(connected(Phone1, Phone2), Time) ->
    terminates_at(setDown(Agent, Phone2),
                  connected(Phone1, Phone2),
                  Time).


% [agent,phone,time]
% HoldsAt(Disconnected(phone),time) ->
% Initiates(SetDown(agent,phone),Idle(phone),time).
holds_at(disconnected(Phone), Time) ->
    initiates_at(setDown(Agent, Phone),
                 idle(Phone),
                 Time).


% [agent,phone,time]
% HoldsAt(Disconnected(phone),time) ->
% Terminates(SetDown(agent,phone),Disconnected(phone),time).
holds_at(disconnected(Phone), Time) ->
    terminates_at(setDown(Agent, Phone),
                  disconnected(Phone),
                  Time).


%; Delta


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4129).
% Happens(PickUp(Agent1,Phone1),0).
happens_at(pickUp(agent1,phone1),0).


% Happens(Dial(Agent1,Phone1,Phone2),1).
happens_at(dial(agent1,phone1,phone2),1).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4131).
% Happens(PickUp(Agent2,Phone2),2).
happens_at(pickUp(agent2,phone2),2).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4133).
%; Psi
% [phone,time]
% !HoldsAt(Ringing(phone,phone),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4135).
holds_at(not(ringing(Phone,Phone)),Time).


% [phone1,phone2,time]
% HoldsAt(Ringing(phone1,phone2),time) &
% phone1!=phone2 ->
% !HoldsAt(Ringing(phone2,phone1),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4139).
holds_at(ringing(Phone1, Phone2), Time), Phone1\=Phone2 ->
    holds_at(not(ringing(Phone2, Phone1)), Time).


% [phone,time]
% !HoldsAt(Connected(phone,phone),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4144).
holds_at(not(connected(Phone,Phone)),Time).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4146).
% [phone1,phone2,time]
% HoldsAt(Connected(phone1,phone2),time) &
% phone1!=phone2 ->
% !HoldsAt(Connected(phone2,phone1),time).
holds_at(connected(Phone1, Phone2), Time), Phone1\=Phone2 ->
    holds_at(not(connected(Phone2, Phone1)), Time).

% mutex Idle, DialTone, BusySignal, Disconnected
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4150).
:- call_pel_directive(mutex(idle)).
:- call_pel_directive(mutex(dialTone)).
:- call_pel_directive(mutex(busySignal)).
:- call_pel_directive(mutex(disconnected)).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4153).
% [phone1,phone2,time]
% HoldsAt(Idle(phone1),time) ->
% !HoldsAt(Ringing(phone1,phone2),time) &
% !HoldsAt(Connected(phone1,phone2),time).
holds_at(idle(Phone1), Time) ->
    holds_at(not(ringing(Phone1, Phone2)), Time),
    holds_at(not(connected(Phone1, Phone2)), Time).


%; etc.
%; Gamma
% [phone]
 
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4162).
% HoldsAt(Idle(phone),0).
holds_at(idle(Phone),0).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4164).
% completion Happens
:- call_pel_directive(completion(happens_at)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4166).
% range time 0 3
:- call_pel_directive(range(time, 0, 3)).

% range offset 1 1
:- call_pel_directive(range(offset, 1, 1)).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter3/Telephone1.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4195).
% load foundations/Root.e
:- call_pel_directive(load('foundations/Root.e')).

% load foundations/EC.e
:- call_pel_directive(load('foundations/EC.e')).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4198).
% sort agent
sort(agent).

% sort phone
sort(phone).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4201).
% agent Agent1, Agent2
t(agent,agent1).
t(agent,agent2).

% phone Phone1, Phone2
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4201).
t(phone,phone1).
t(phone,phone2).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4204).
% fluent Ringing(phone,phone)
fluent(ringing(phone,phone)).

% fluent DialTone(phone)
fluent(dialTone(phone)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4206).
% fluent BusySignal(phone)
fluent(busySignal(phone)).

% fluent Idle(phone)
fluent(idle(phone)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4208).
% fluent Connected(phone,phone)
fluent(connected(phone,phone)).

% fluent Disconnected(phone)
fluent(disconnected(phone)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4211).
% event PickUp(agent,phone)
event(pickUp(agent,phone)).

% event SetDown(agent,phone)
event(setDown(agent,phone)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4213).
% event Dial(agent,phone,phone)
event(dial(agent,phone,phone)).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4215).
%; Sigma
% [agent,phone,time]
% HoldsAt(Idle(phone),time) ->
% Initiates(PickUp(agent,phone),DialTone(phone),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4217).
holds_at(idle(Phone), Time) ->
    initiates_at(pickUp(Agent, Phone),
                 dialTone(Phone),
                 Time).


% [agent,phone,time]
% HoldsAt(Idle(phone),time) ->
% Terminates(PickUp(agent,phone),Idle(phone),time).
holds_at(idle(Phone), Time) ->
    terminates_at(pickUp(Agent, Phone),
                  idle(Phone),
                  Time).


% [agent,phone,time]
% HoldsAt(DialTone(phone),time) ->
% Initiates(SetDown(agent,phone),Idle(phone),time).
holds_at(dialTone(Phone), Time) ->
    initiates_at(setDown(Agent, Phone),
                 idle(Phone),
                 Time).


% [agent,phone,time]
% HoldsAt(DialTone(phone),time) ->
% Terminates(SetDown(agent,phone),DialTone(phone),time).
holds_at(dialTone(Phone), Time) ->
    terminates_at(setDown(Agent, Phone),
                  dialTone(Phone),
                  Time).


% [agent,phone1,phone2,time]
% HoldsAt(DialTone(phone1),time) &
% HoldsAt(Idle(phone2),time) ->
% Initiates(Dial(agent,phone1,phone2),Ringing(phone1,phone2),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4234).
holds_at(dialTone(Phone1), Time), holds_at(idle(Phone2), Time) ->
    initiates_at(dial(Agent, Phone1, Phone2),
                 ringing(Phone1, Phone2),
                 Time).


% [agent,phone1,phone2,time]
% HoldsAt(DialTone(phone1),time) &
% HoldsAt(Idle(phone2),time) ->
% Terminates(Dial(agent,phone1,phone2),DialTone(phone1),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4239).
holds_at(dialTone(Phone1), Time), holds_at(idle(Phone2), Time) ->
    terminates_at(dial(Agent, Phone1, Phone2),
                  dialTone(Phone1),
                  Time).


% [agent,phone1,phone2,time]
% HoldsAt(DialTone(phone1),time) &
% HoldsAt(Idle(phone2),time) ->
% Terminates(Dial(agent,phone1,phone2),Idle(phone2),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4244).
holds_at(dialTone(Phone1), Time), holds_at(idle(Phone2), Time) ->
    terminates_at(dial(Agent, Phone1, Phone2),
                  idle(Phone2),
                  Time).


% [agent,phone1,phone2,time]
% HoldsAt(DialTone(phone1),time) &
% !HoldsAt(Idle(phone2),time) ->
% Initiates(Dial(agent,phone1,phone2),BusySignal(phone1),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4249).
holds_at(dialTone(Phone1), Time), holds_at(not(idle(Phone2)), Time) ->
    initiates_at(dial(Agent, Phone1, Phone2),
                 busySignal(Phone1),
                 Time).


% [agent,phone1,phone2,time]
% HoldsAt(DialTone(phone1),time) &
% !HoldsAt(Idle(phone2),time) ->
% Terminates(Dial(agent,phone1,phone2),DialTone(phone1),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4254).
holds_at(dialTone(Phone1), Time), holds_at(not(idle(Phone2)), Time) ->
    terminates_at(dial(Agent, Phone1, Phone2),
                  dialTone(Phone1),
                  Time).


% [agent,phone,time]
% HoldsAt(BusySignal(phone),time) ->
% Initiates(SetDown(agent,phone),Idle(phone),time).
holds_at(busySignal(Phone), Time) ->
    initiates_at(setDown(Agent, Phone),
                 idle(Phone),
                 Time).


% [agent,phone,time]
% HoldsAt(BusySignal(phone),time) ->
% Terminates(SetDown(agent,phone),BusySignal(phone),time).
holds_at(busySignal(Phone), Time) ->
    terminates_at(setDown(Agent, Phone),
                  busySignal(Phone),
                  Time).


% [agent,phone1,phone2,time]
% HoldsAt(Ringing(phone1,phone2),time) ->
% Initiates(SetDown(agent,phone1),Idle(phone1),time).
holds_at(ringing(Phone1, Phone2), Time) ->
    initiates_at(setDown(Agent, Phone1),
                 idle(Phone1),
                 Time).


% [agent,phone1,phone2,time]
% HoldsAt(Ringing(phone1,phone2),time) ->
% Initiates(SetDown(agent,phone1),Idle(phone2),time).
holds_at(ringing(Phone1, Phone2), Time) ->
    initiates_at(setDown(Agent, Phone1),
                 idle(Phone2),
                 Time).


% [agent,phone1,phone2,time]
% HoldsAt(Ringing(phone1,phone2),time) ->
% Terminates(SetDown(agent,phone1),Ringing(phone1,phone2),time).
holds_at(ringing(Phone1, Phone2), Time) ->
    terminates_at(setDown(Agent, Phone1),
                  ringing(Phone1, Phone2),
                  Time).


% [agent,phone1,phone2,time]
% HoldsAt(Ringing(phone1,phone2),time) ->
% Initiates(PickUp(agent,phone2),Connected(phone1,phone2),time).
holds_at(ringing(Phone1, Phone2), Time) ->
    initiates_at(pickUp(Agent, Phone2),
                 connected(Phone1, Phone2),
                 Time).


% [agent,phone1,phone2,time]
% HoldsAt(Ringing(phone1,phone2),time) ->
% Terminates(PickUp(agent,phone2),Ringing(phone1,phone2),time).
holds_at(ringing(Phone1, Phone2), Time) ->
    terminates_at(pickUp(Agent, Phone2),
                  ringing(Phone1, Phone2),
                  Time).


% [agent,phone1,phone2,time]
% HoldsAt(Connected(phone1,phone2),time) ->
% Initiates(SetDown(agent,phone1),Idle(phone1),time).
holds_at(connected(Phone1, Phone2), Time) ->
    initiates_at(setDown(Agent, Phone1),
                 idle(Phone1),
                 Time).


% [agent,phone1,phone2,time]
% HoldsAt(Connected(phone1,phone2),time) ->
% Initiates(SetDown(agent,phone1),Disconnected(phone2),time).
holds_at(connected(Phone1, Phone2), Time) ->
    initiates_at(setDown(Agent, Phone1),
                 disconnected(Phone2),
                 Time).


% [agent,phone1,phone2,time]
% HoldsAt(Connected(phone1,phone2),time) ->
% Terminates(SetDown(agent,phone1),Connected(phone1,phone2),time).
holds_at(connected(Phone1, Phone2), Time) ->
    terminates_at(setDown(Agent, Phone1),
                  connected(Phone1, Phone2),
                  Time).


% [agent,phone1,phone2,time]
% HoldsAt(Connected(phone1,phone2),time) ->
% Initiates(SetDown(agent,phone2),Idle(phone2),time).
holds_at(connected(Phone1, Phone2), Time) ->
    initiates_at(setDown(Agent, Phone2),
                 idle(Phone2),
                 Time).


% [agent,phone1,phone2,time]
% HoldsAt(Connected(phone1,phone2),time) ->
% Initiates(SetDown(agent,phone2),Disconnected(phone1),time).
holds_at(connected(Phone1, Phone2), Time) ->
    initiates_at(setDown(Agent, Phone2),
                 disconnected(Phone1),
                 Time).


% [agent,phone1,phone2,time]
% HoldsAt(Connected(phone1,phone2),time) ->
% Terminates(SetDown(agent,phone2),Connected(phone1,phone2),time).
holds_at(connected(Phone1, Phone2), Time) ->
    terminates_at(setDown(Agent, Phone2),
                  connected(Phone1, Phone2),
                  Time).


% [agent,phone,time]
% HoldsAt(Disconnected(phone),time) ->
% Initiates(SetDown(agent,phone),Idle(phone),time).
holds_at(disconnected(Phone), Time) ->
    initiates_at(setDown(Agent, Phone),
                 idle(Phone),
                 Time).


% [agent,phone,time]
% HoldsAt(Disconnected(phone),time) ->
% Terminates(SetDown(agent,phone),Disconnected(phone),time).
holds_at(disconnected(Phone), Time) ->
    terminates_at(setDown(Agent, Phone),
                  disconnected(Phone),
                  Time).


%; Delta

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4320).
% Delta: 
directive(delta).
 


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4320).
% Happens(PickUp(Agent1,Phone1),0).
happens_at(pickUp(agent1,phone1),0).

% Delta: 
directive(delta).
 


% Happens(Dial(Agent1,Phone1,Phone2),1).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4320).
happens_at(dial(agent1,phone1,phone2),1).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4322).
% Delta: 
directive(delta).
 


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4322).
% Happens(PickUp(Agent2,Phone2),2).
happens_at(pickUp(agent2,phone2),2).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4324).
%; Gamma
% [phone]
 % HoldsAt(Idle(phone),0).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4326).
holds_at(idle(Phone),0).


% [phone]
 % !HoldsAt(DialTone(phone),0).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4326).
holds_at(not(dialTone(Phone)),0).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4328).
% [phone]
 % !HoldsAt(BusySignal(phone),0).
holds_at(not(busySignal(Phone)),0).


% [phone1,phone2]
 % !HoldsAt(Ringing(phone1,phone2),0).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4328).
holds_at(not(ringing(Phone1,Phone2)),0).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4330).
% [phone1,phone2]
 % !HoldsAt(Connected(phone1,phone2),0).
holds_at(not(connected(Phone1,Phone2)),0).


% [phone]
 % !HoldsAt(Disconnected(phone),0).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4330).
holds_at(not(disconnected(Phone)),0).

% completion Delta Happens
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4332).
:- call_pel_directive(completion(delta)).
:- call_pel_directive(completion(happens_at)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4335).
% range time 0 3
:- call_pel_directive(range(time, 0, 3)).

% range offset 1 1
:- call_pel_directive(range(offset, 1, 1)).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter12/DefaultLocation.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4364).
% load foundations/Root.e
:- call_pel_directive(load('foundations/Root.e')).

% load foundations/EC.e
:- call_pel_directive(load('foundations/EC.e')).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4367).
% sort object
sort(object).

% sort agent: object
subsort(agent,object).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4369).
% sort device: object
subsort(device,object).

% sort tv: device
subsort(tv,device).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4371).
% sort room
sort(room).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4373).
% agent Nathan
t(agent,nathan).

% tv TV
t(tv,tv).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4375).
% room LivingRoom, Kitchen
t(room,livingRoom).
t(room,kitchen).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4377).
% event TurnOn(agent,device)
event(turnOn(agent,device)).

% event Walk(agent,room,room)
event(walk(agent,room,room)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4380).
% fluent InRoom(object,room)
fluent(inRoom(object,room)).

% fluent On(device)
fluent(on(device)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4382).
% fluent PluggedIn(device)
fluent(pluggedIn(device)).

% fluent BrokenSwitch(device)
fluent(brokenSwitch(device)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4385).
% predicate Ab1(device,time)
predicate(ab1(device,time)).

% predicate Ab2(room,time)
predicate(ab2(room,time)).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4388).
%; Sigma
% [agent,room1,room2,time]
% Initiates(Walk(agent,room1,room2),InRoom(agent,room2),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4390).
initiates_at(walk(Agent,Room1,Room2),
	     inRoom(Agent,Room2),
	     Time).


% [agent,room1,room2,time]
% room1!=% room2 ->
% Terminates(Walk(agent,room1,room2),InRoom(agent,room1),time).
Room1\=Room2 ->
    terminates_at(walk(Agent, Room1, Room2),
                  inRoom(Agent, Room1),
                  Time).


% [agent,device,time]
% !Ab1(device,time) ->
% Initiates(TurnOn(agent,device),On(device),time).
not(ab1(Device, Time)) ->
    initiates_at(turnOn(Agent, Device), on(Device), Time).


%; Delta
% [agent,room1,room2,time]
% Happens(Walk(agent,room1,room2),time) ->
% room1!=room2 &
% HoldsAt(InRoom(agent,room1),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4403).
happens_at(walk(Agent, Room1, Room2), Time) ->
    Room1\=Room2,
    holds_at(inRoom(Agent, Room1), Time).


% [agent,device,time]
% Happens(TurnOn(agent,device),time) ->
% {room}%  HoldsAt(InRoom(agent,room),time) &
%        HoldsAt(InRoom(device,room),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4409).
exists([Room],  (happens_at(turnOn(Agent, Device), Time)->holds_at(inRoom(Agent, Room), Time), holds_at(inRoom(Device, Room), Time))).


% [event1,event2,time]
% Happens(event1,time) &
% Happens(event2,time) ->
% event1=event2.
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4414).
happens_at(Event1, Time), happens_at(Event2, Time) ->
    Event1=Event2.


%; Theta

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4420).
% Theta: 
directive(theta).
 


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4420).
% [device,time]
 % HoldsAt(BrokenSwitch(device),time) -> Ab1(device,time).
holds_at(brokenSwitch(Device), Time) ->
    ab1(Device, Time).

% Theta: 
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4420).
directive(theta).
 


% [device,time]
 % !HoldsAt(PluggedIn(device),time) -> Ab1(device,time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4420).
holds_at(not(pluggedIn(Device)), Time) ->
    ab1(Device, Time).


%; Psi
% [object,room1,room2,time]
% HoldsAt(InRoom(object,room1),time) &
% HoldsAt(InRoom(object,room2),time) ->
% room1=room2.
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4425).
holds_at(inRoom(Object, Room1), Time), holds_at(inRoom(Object, Room2), Time) ->
    Room1=Room2.


%; Gamma
% [tv]
 % !HoldsAt(On(tv),0).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4432).
holds_at(not(on(Tv)),0).


% [tv]
 % !HoldsAt(BrokenSwitch(tv),0).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4432).
holds_at(not(brokenSwitch(Tv)),0).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4434).
% [tv]
 % HoldsAt(PluggedIn(tv),0).
holds_at(pluggedIn(Tv),0).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4436).
% HoldsAt(InRoom(Nathan,Kitchen),0).
holds_at(inRoom(nathan,kitchen),0).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4438).
% [time]
% !Ab2(LivingRoom,time) ->
% {tv}%  HoldsAt(InRoom(tv,LivingRoom),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4440).
exists([Tv],  (not(ab2(livingRoom, Time))->holds_at(inRoom(Tv, livingRoom), Time))).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4442).
%; goal
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4444).
% {tv} 


% Happens(TurnOn(Nathan,tv),1).
exists([Tv],
 happens_at(turnOn(nathan,Tv),1)).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4446).
%; for two TVs:
%;[tv,time] !HoldsAt(InRoom(tv,Kitchen),time).
%;[tv,time] {room} HoldsAt(InRoom(tv,room),time).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4450).
% completion Theta Ab1
:- call_pel_directive(completion(theta)).
:- call_pel_directive(completion(ab1)).

% completion Theta Ab2
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4450).
:- call_pel_directive(completion(theta)).
:- call_pel_directive(completion(ab2)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4453).
% range time 0 2
:- call_pel_directive(range(time, 0, 2)).

% range offset 1 1
:- call_pel_directive(range(offset, 1, 1)).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter12/Device.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4482).
% load foundations/Root.e
:- call_pel_directive(load('foundations/Root.e')).

% load foundations/EC.e
:- call_pel_directive(load('foundations/EC.e')).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4485).
% sort agent
sort(agent).

% sort device
sort(device).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4488).
% agent Nathan
t(agent,nathan).

% device Device1, AntiqueDevice1
t(device,device1).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4488).
t(device,antiqueDevice1).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4491).
% predicate Ab1(device,time)
predicate(ab1(device,time)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4493).
% fluent On(device)
fluent(on(device)).

% fluent PluggedIn(device)
fluent(pluggedIn(device)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4495).
% fluent BrokenSwitch(device)
fluent(brokenSwitch(device)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4497).
% event TurnOn(agent,device)
event(turnOn(agent,device)).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4499).
%; Sigma
% [agent,device,time]
% !Ab1(device,time) ->
% Initiates(TurnOn(agent,device),On(device),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4501).
not(ab1(Device, Time)) ->
    initiates_at(turnOn(Agent, Device), on(Device), Time).


%; Delta


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4507).
% Happens(TurnOn(Nathan,Device1),0).
happens_at(turnOn(nathan,device1),0).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4509).
%; Theta

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4511).
% Theta: 
directive(theta).
 


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4511).
% [device,time]
 % HoldsAt(BrokenSwitch(device),time) -> Ab1(device,time).
holds_at(brokenSwitch(Device), Time) ->
    ab1(Device, Time).

% Theta: 
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4511).
directive(theta).
 


% [device,time]
 % !HoldsAt(PluggedIn(device),time) -> Ab1(device,time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4511).
holds_at(not(pluggedIn(Device)), Time) ->
    ab1(Device, Time).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4513).
% Theta: 
directive(theta).
 


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4513).
% [time]
 % Ab1(AntiqueDevice1,time).
ab1(antiqueDevice1,Time).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4515).
%; Gamma


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4517).
% !HoldsAt(On(Device1),0).
holds_at(not(on(device1)),0).


% !HoldsAt(BrokenSwitch(Device1),0).
holds_at(not(brokenSwitch(device1)),0).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4519).
% HoldsAt(PluggedIn(Device1),0).
holds_at(pluggedIn(device1),0).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4521).
%; added:
% [time]
 % !HoldsAt(On(AntiqueDevice1),time).
holds_at(not(on(antiqueDevice1)),Time).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4523).
% [time]
 % HoldsAt(PluggedIn(AntiqueDevice1),time).
holds_at(pluggedIn(antiqueDevice1),Time).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4525).
%; entailed:
%; HoldsAt(On(Device1),1).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4528).
% completion Theta Ab1
:- call_pel_directive(completion(theta)).
:- call_pel_directive(completion(ab1)).

% completion Happens
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4528).
:- call_pel_directive(completion(happens_at)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4531).
% range time 0 1
:- call_pel_directive(range(time, 0, 1)).

% range offset 1 1
:- call_pel_directive(range(offset, 1, 1)).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter12/ErraticDevice.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4560).
% load foundations/Root.e
:- call_pel_directive(load('foundations/Root.e')).

% load foundations/EC.e
:- call_pel_directive(load('foundations/EC.e')).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4563).
% sort agent
sort(agent).

% sort device
sort(device).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4566).
% agent Nathan
t(agent,nathan).

% device Device1
t(device,device1).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4569).
% predicate Ab1(device,time)
predicate(ab1(device,time)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4571).
% fluent On(device)
fluent(on(device)).

% fluent PluggedIn(device)
fluent(pluggedIn(device)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4573).
% fluent BrokenSwitch(device)
fluent(brokenSwitch(device)).

% fluent Erratic(device)
fluent(erratic(device)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4576).
% fluent DeterminingFluent(device)
fluent(determiningFluent(device)).

% noninertial DeterminingFluent
:- call_pel_directive(noninertial(determiningFluent)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4579).
% event TurnOn(agent,device)
event(turnOn(agent,device)).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4581).
%; Sigma
% [agent,device,time]
% !Ab1(device,time) ->
% Initiates(TurnOn(agent,device),On(device),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4583).
not(ab1(Device, Time)) ->
    initiates_at(turnOn(Agent, Device), on(Device), Time).


%; Delta


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4589).
% Happens(TurnOn(Nathan,Device1),0).
happens_at(turnOn(nathan,device1),0).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4591).
%; Theta

% Theta: 
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4593).
directive(theta).
 


% [device,time]
 % HoldsAt(BrokenSwitch(device),time) -> Ab1(device,time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4593).
holds_at(brokenSwitch(Device), Time) ->
    ab1(Device, Time).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4595).
% Theta: 
directive(theta).
 


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4595).
% [device,time]
% HoldsAt(Erratic(device),time) & HoldsAt(DeterminingFluent(device),time) ->
% Ab1(device,time).
holds_at(erratic(Device), Time), holds_at(determiningFluent(Device), Time) ->
    ab1(Device, Time).

% Theta: 
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4598).
directive(theta).
 


% [device,time]
 % !HoldsAt(PluggedIn(device),time) -> Ab1(device,time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4598).
holds_at(not(pluggedIn(Device)), Time) ->
    ab1(Device, Time).


%; Gamma


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4603).
% !HoldsAt(On(Device1),0).
holds_at(not(on(device1)),0).


% !HoldsAt(BrokenSwitch(Device1),0).
holds_at(not(brokenSwitch(device1)),0).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4605).
% HoldsAt(Erratic(Device1),0).
holds_at(erratic(device1),0).


% HoldsAt(PluggedIn(Device1),0).
holds_at(pluggedIn(device1),0).


%; added:


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4609).
% HoldsAt(DeterminingFluent(Device1),1).
holds_at(determiningFluent(device1),1).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4611).
% completion Theta Ab1
:- call_pel_directive(completion(theta)).
:- call_pel_directive(completion(ab1)).

% completion Happens
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4611).
:- call_pel_directive(completion(happens_at)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4614).
% range time 0 1
:- call_pel_directive(range(time, 0, 1)).

% range offset 1 1
:- call_pel_directive(range(offset, 1, 1)).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter12/DefaultEvent.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4643).
% option modeldiff on
:- call_pel_directive(option(modeldiff, on)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4645).
% load foundations/Root.e
:- call_pel_directive(load('foundations/Root.e')).

% load foundations/EC.e
:- call_pel_directive(load('foundations/EC.e')).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4648).
% sort agent
sort(agent).

% sort clock
sort(clock).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4651).
% fluent Beeping(clock)
fluent(beeping(clock)).

% fluent AlarmTime(clock,time)
fluent(alarmTime(clock,time)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4653).
% fluent AlarmOn(clock)
fluent(alarmOn(clock)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4655).
% event SetAlarmTime(agent,clock,time)
event(setAlarmTime(agent,clock,time)).

% event StartBeeping(clock)
event(startBeeping(clock)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4657).
% event TurnOnAlarm(agent,clock)
event(turnOnAlarm(agent,clock)).

% event TurnOffAlarm(agent,clock)
event(turnOffAlarm(agent,clock)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4660).
% predicate Ab1(clock,time)
predicate(ab1(clock,time)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4662).
% agent Nathan
t(agent,nathan).

% clock Clock
t(clock,clock).
%; Sigma
% [agent,clock,time1,time2,time]
% HoldsAt(AlarmTime(clock,time1),time) &
% time1!=time2 ->
% Initiates(SetAlarmTime(agent,clock,time2),AlarmTime(clock,time2),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4667).
holds_at(alarmTime(Clock, Time1), Time), Time1\=Time2 ->
    initiates_at(setAlarmTime(Agent, Clock, Time2),
                 alarmTime(Clock, Time2),
                 Time).


% [agent,clock,time1,time2,time]
% HoldsAt(AlarmTime(clock,time1),time) &
% time1!=time2 ->
% Terminates(SetAlarmTime(agent,clock,time2),AlarmTime(clock,time1),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4673).
holds_at(alarmTime(Clock, Time1), Time), Time1\=Time2 ->
    terminates_at(setAlarmTime(Agent, Clock, Time2),
                  alarmTime(Clock, Time1),
                  Time).


% [agent,clock,time]
% Initiates(TurnOnAlarm(agent,clock),AlarmOn(clock),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4678).
initiates_at(turnOnAlarm(Agent,Clock),
	     alarmOn(Clock),
	     Time).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4680).
% [agent,clock,time]
% Terminates(TurnOffAlarm(agent,clock),AlarmOn(clock),time).
terminates_at(turnOffAlarm(Agent,Clock),
	      alarmOn(Clock),
	      Time).


% [clock,time]
% Initiates(StartBeeping(clock),Beeping(clock),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4684).
initiates_at(startBeeping(Clock),beeping(Clock),Time).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4686).
% [agent,clock,time]
% Terminates(TurnOffAlarm(agent,clock),Beeping(clock),time).
terminates_at(turnOffAlarm(Agent,Clock),
	      beeping(Clock),
	      Time).


%; Delta
% [clock,time]
% HoldsAt(AlarmTime(clock,time),time) &
% HoldsAt(AlarmOn(clock),time) &
% !Ab1(clock,time) ->
% Happens(StartBeeping(clock),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4691).
holds_at(alarmTime(Clock, Time), Time), holds_at(alarmOn(Clock), Time), not(ab1(Clock, Time)) ->
    happens_at(startBeeping(Clock), Time).


% Happens(SetAlarmTime(Nathan,Clock,2),0).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4696).
happens_at(setAlarmTime(nathan,clock,2),0).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4698).
% Happens(TurnOnAlarm(Nathan,Clock),1).
happens_at(turnOnAlarm(nathan,clock),1).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4700).
%; Psi
% [clock,time1,time2,time]
% HoldsAt(AlarmTime(clock,time1),time) &
% HoldsAt(AlarmTime(clock,time2),time) ->
% time1=time2.
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4702).
holds_at(alarmTime(Clock, Time1), Time), holds_at(alarmTime(Clock, Time2), Time) ->
    Time1=Time2.


%; Gamma


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4709).
% !HoldsAt(AlarmOn(Clock),0).
holds_at(not(alarmOn(clock)),0).


% !HoldsAt(Beeping(Clock),0).
holds_at(not(beeping(clock)),0).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4711).
% HoldsAt(AlarmTime(Clock,3),0).
holds_at(alarmTime(clock,3),0).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4713).
% completion Happens
:- call_pel_directive(completion(happens_at)).

% completion Theta Ab1
:- call_pel_directive(completion(theta)).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4713).
:- call_pel_directive(completion(ab1)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4716).
% range time 0 3
:- call_pel_directive(range(time, 0, 3)).

% range offset 1 1
:- call_pel_directive(range(offset, 1, 1)).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter12/MethodD.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; Method (D)
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4747).
% load foundations/Root.e
:- call_pel_directive(load('foundations/Root.e')).

% load foundations/EC.e
:- call_pel_directive(load('foundations/EC.e')).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4750).
% sort object
sort(object).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4752).
% object A,B
t(object,a).
t(object,b).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4754).
% fluent P(object)
fluent(p(object)).

% fluent Q(object)
fluent(q(object)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4756).
% fluent R(object)
fluent(r(object)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4758).
% predicate Ab1(object,time)
predicate(ab1(object,time)).

% predicate Ab2(object,time)
predicate(ab2(object,time)).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4761).
% [object,time]
% HoldsAt(P(object),time) & !Ab1(object,time) ->
% HoldsAt(Q(object),time).
holds_at(p(Object), Time), not(ab1(Object, Time)) ->
    holds_at(q(Object), Time).


% [object,time]
% HoldsAt(R(object),time) & !Ab2(object,time) ->
% !HoldsAt(Q(object),time).
holds_at(r(Object), Time), not(ab2(Object, Time)) ->
    holds_at(not(q(Object)), Time).


% [object,time]
% HoldsAt(R(object),time) -> HoldsAt(P(object),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4770).
holds_at(r(Object), Time) ->
    holds_at(p(Object), Time).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4772).
% HoldsAt(R(A),0).
holds_at(r(a),0).


% HoldsAt(P(B),0).
holds_at(p(b),0).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4774).
% !HoldsAt(R(B),0).
holds_at(not(r(b)),0).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4776).
% Theta: 
directive(theta).
 


% [object,time]
% HoldsAt(R(object),time) -> Ab1(object,time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4778).
holds_at(r(Object), Time) ->
    ab1(Object, Time).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4780).
% range time 0 0
:- call_pel_directive(range(time, 0, 0)).

% range offset 1 1
:- call_pel_directive(range(offset, 1, 1)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4783).
% completion Theta Ab1
:- call_pel_directive(completion(theta)).
:- call_pel_directive(completion(ab1)).

% completion Theta Ab2
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4783).
:- call_pel_directive(completion(theta)).
:- call_pel_directive(completion(ab2)).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter12/BrokenDevice.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4812).
% load foundations/Root.e
:- call_pel_directive(load('foundations/Root.e')).

% load foundations/EC.e
:- call_pel_directive(load('foundations/EC.e')).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4815).
% sort agent
sort(agent).

% sort device
sort(device).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4818).
% agent Nathan
t(agent,nathan).

% device Device1
t(device,device1).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4821).
% predicate Ab1(device,time)
predicate(ab1(device,time)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4823).
% fluent On(device)
fluent(on(device)).

% fluent PluggedIn(device)
fluent(pluggedIn(device)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4825).
% fluent BrokenSwitch(device)
fluent(brokenSwitch(device)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4827).
% event TurnOn(agent,device)
event(turnOn(agent,device)).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4829).
%; Sigma
% [agent,device,time]
% !Ab1(device,time) ->
% Initiates(TurnOn(agent,device),On(device),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4831).
not(ab1(Device, Time)) ->
    initiates_at(turnOn(Agent, Device), on(Device), Time).


%; Delta


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4837).
% Happens(TurnOn(Nathan,Device1),0).
happens_at(turnOn(nathan,device1),0).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4839).
%; Theta

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4841).
% Theta: 
directive(theta).
 


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4841).
% [device,time]
 % HoldsAt(BrokenSwitch(device),time) -> Ab1(device,time).
holds_at(brokenSwitch(Device), Time) ->
    ab1(Device, Time).

% Theta: 
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4841).
directive(theta).
 


% [device,time]
 % !HoldsAt(PluggedIn(device),time) -> Ab1(device,time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4841).
holds_at(not(pluggedIn(Device)), Time) ->
    ab1(Device, Time).


%; Gamma


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4846).
% !HoldsAt(On(Device1),0).
holds_at(not(on(device1)),0).


% HoldsAt(BrokenSwitch(Device1),0).
holds_at(brokenSwitch(device1),0).


%; added:


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4850).
% HoldsAt(PluggedIn(Device1),0).
holds_at(pluggedIn(device1),0).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4852).
%; entailed:
%; !HoldsAt(On(Device1),1).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4855).
% completion Theta Ab1
:- call_pel_directive(completion(theta)).
:- call_pel_directive(completion(ab1)).

% completion Happens
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4855).
:- call_pel_directive(completion(happens_at)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4858).
% range time 0 1
:- call_pel_directive(range(time, 0, 1)).

% range offset 1 1
:- call_pel_directive(range(offset, 1, 1)).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter12/MethodB.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; Method (D)
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4889).
% load foundations/Root.e
:- call_pel_directive(load('foundations/Root.e')).

% load foundations/EC.e
:- call_pel_directive(load('foundations/EC.e')).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4892).
% sort object
sort(object).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4894).
% object A,B
t(object,a).
t(object,b).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4896).
% fluent P(object)
fluent(p(object)).

% fluent Q(object)
fluent(q(object)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4898).
% predicate Ab(object,time)
predicate(ab(object,time)).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4900).
% [object,time]
% HoldsAt(P(object),time) & !Ab(object,time) ->
% HoldsAt(Q(object),time).
holds_at(p(Object), Time), not(ab(Object, Time)) ->
    holds_at(q(Object), Time).


% HoldsAt(P(A),0).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4903).
holds_at(p(a),0).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4905).
% HoldsAt(P(B),0).
holds_at(p(b),0).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4907).
% Theta: 
directive(theta).
 


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4907).
% Ab(A,0).
ab(a,0).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4909).
% range time 0 0
:- call_pel_directive(range(time, 0, 0)).

% range offset 1 1
:- call_pel_directive(range(offset, 1, 1)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4912).
% completion Theta Ab
:- call_pel_directive(completion(theta)).
:- call_pel_directive(completion(ab)).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter13/ModelFinding.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4940).
% load foundations/Root.e
:- call_pel_directive(load('foundations/Root.e')).

% load foundations/EC.e
:- call_pel_directive(load('foundations/EC.e')).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4943).
% sort agent
sort(agent).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4945).
% fluent Awake(agent)
fluent(awake(agent)).

% event WakeUp(agent)
event(wakeUp(agent)).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4948).
% [agent,time]
 % Initiates(WakeUp(agent),Awake(agent),time).
initiates_at(wakeUp(Agent),awake(Agent),Time).


% [agent,time]
 % Happens(WakeUp(agent),time) -> !HoldsAt(Awake(agent),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4948).
happens_at(wakeUp(Agent), Time) ->
    holds_at(not(awake(Agent)), Time).

% agent James
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4950).
t(agent,james).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4953).
% range time 0 1
:- call_pel_directive(range(time, 0, 1)).

% range offset 1 1
:- call_pel_directive(range(offset, 1, 1)).
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter13/Postdiction.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4980).
% load foundations/Root.e
:- call_pel_directive(load('foundations/Root.e')).

% load foundations/EC.e
:- call_pel_directive(load('foundations/EC.e')).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4983).
% sort agent
sort(agent).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4985).
% fluent Awake(agent)
fluent(awake(agent)).

% event WakeUp(agent)
event(wakeUp(agent)).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4988).
% [agent,time]
 % Initiates(WakeUp(agent),Awake(agent),time).
initiates_at(wakeUp(Agent),awake(Agent),Time).


% [agent,time]
 % Happens(WakeUp(agent),time) -> !HoldsAt(Awake(agent),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4988).
happens_at(wakeUp(Agent), Time) ->
    holds_at(not(awake(Agent)), Time).

% agent James
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4990).
t(agent,james).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4992).
% Delta: 
directive(delta).
 


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4992).
% Happens(WakeUp(James),0).
happens_at(wakeUp(james),0).


% HoldsAt(Awake(James),1).
holds_at(awake(james),1).

% completion Delta Happens
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4994).
:- call_pel_directive(completion(delta)).
:- call_pel_directive(completion(happens_at)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',4997).
% range time 0 1
:- call_pel_directive(range(time, 0, 1)).

% range offset 1 1
:- call_pel_directive(range(offset, 1, 1)).
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter13/Deduction2.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5024).
% option timediff off
:- call_pel_directive(option(timediff, off)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5026).
% load foundations/Root.e
:- call_pel_directive(load('foundations/Root.e')).

% load foundations/EC.e
:- call_pel_directive(load('foundations/EC.e')).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5029).
% sort agent
sort(agent).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5031).
% fluent Awake(agent)
fluent(awake(agent)).

% event WakeUp(agent)
event(wakeUp(agent)).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5034).
% [agent,time]
 % Initiates(WakeUp(agent),Awake(agent),time).
initiates_at(wakeUp(Agent),awake(Agent),Time).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5036).
% agent James
t(agent,james).


% !HoldsAt(Awake(James),0).
holds_at(not(awake(james)),0).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5038).
% Delta: 
directive(delta).
 


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5038).
% Happens(WakeUp(James),0).
happens_at(wakeUp(james),0).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5040).
% completion Delta Happens
:- call_pel_directive(completion(delta)).
:- call_pel_directive(completion(happens_at)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5042).
% range time 0 1
:- call_pel_directive(range(time, 0, 1)).

% range offset 1 1
:- call_pel_directive(range(offset, 1, 1)).
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter13/Deduction1.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5069).
% load foundations/Root.e
:- call_pel_directive(load('foundations/Root.e')).

% load foundations/EC.e
:- call_pel_directive(load('foundations/EC.e')).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5072).
% sort agent
sort(agent).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5074).
% fluent Awake(agent)
fluent(awake(agent)).

% event WakeUp(agent)
event(wakeUp(agent)).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5077).
% [agent,time]
 % Initiates(WakeUp(agent),Awake(agent),time).
initiates_at(wakeUp(Agent),awake(Agent),Time).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5079).
% agent James
t(agent,james).


% !HoldsAt(Awake(James),0).
holds_at(not(awake(james)),0).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5081).
% Delta: 
directive(delta).
 


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5081).
% Happens(WakeUp(James),0).
happens_at(wakeUp(james),0).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5083).
% completion Delta Happens
:- call_pel_directive(completion(delta)).
:- call_pel_directive(completion(happens_at)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5085).
% range time 0 1
:- call_pel_directive(range(time, 0, 1)).

% range offset 1 1
:- call_pel_directive(range(offset, 1, 1)).
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter13/Abduction.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5112).
% load foundations/Root.e
:- call_pel_directive(load('foundations/Root.e')).

% load foundations/EC.e
:- call_pel_directive(load('foundations/EC.e')).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5115).
% sort agent
sort(agent).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5117).
% fluent Awake(agent)
fluent(awake(agent)).

% event WakeUp(agent)
event(wakeUp(agent)).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5120).
% [agent,time]
 % Initiates(WakeUp(agent),Awake(agent),time).
initiates_at(wakeUp(Agent),awake(Agent),Time).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5122).
% agent James
t(agent,james).


% !HoldsAt(Awake(James),0).
holds_at(not(awake(james)),0).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5124).
% HoldsAt(Awake(James),1).
holds_at(awake(james),1).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5126).
% range time 0 1
:- call_pel_directive(range(time, 0, 1)).

% range offset 1 1
:- call_pel_directive(range(offset, 1, 1)).
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter4/AlarmClock.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5153).
% load foundations/Root.e
:- call_pel_directive(load('foundations/Root.e')).

% load foundations/EC.e
:- call_pel_directive(load('foundations/EC.e')).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5156).
% sort agent
sort(agent).

% sort clock
sort(clock).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5159).
% fluent Beeping(clock)
fluent(beeping(clock)).

% fluent AlarmTime(clock,time)
fluent(alarmTime(clock,time)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5161).
% fluent AlarmOn(clock)
fluent(alarmOn(clock)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5163).
% event SetAlarmTime(agent,clock,time)
event(setAlarmTime(agent,clock,time)).

% event StartBeeping(clock)
event(startBeeping(clock)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5165).
% event TurnOnAlarm(agent,clock)
event(turnOnAlarm(agent,clock)).

% event TurnOffAlarm(agent,clock)
event(turnOffAlarm(agent,clock)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5168).
% agent Nathan
t(agent,nathan).

% clock Clock
t(clock,clock).
%; Sigma
% [agent,clock,time1,time2,time]
% HoldsAt(AlarmTime(clock,time1),time) &
% time1!=time2 ->
% Initiates(SetAlarmTime(agent,clock,time2),AlarmTime(clock,time2),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5173).
holds_at(alarmTime(Clock, Time1), Time), Time1\=Time2 ->
    initiates_at(setAlarmTime(Agent, Clock, Time2),
                 alarmTime(Clock, Time2),
                 Time).


% [agent,clock,time1,time2,time]
% HoldsAt(AlarmTime(clock,time1),time) &
% time1!=time2 ->
% Terminates(SetAlarmTime(agent,clock,time2),AlarmTime(clock,time1),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5179).
holds_at(alarmTime(Clock, Time1), Time), Time1\=Time2 ->
    terminates_at(setAlarmTime(Agent, Clock, Time2),
                  alarmTime(Clock, Time1),
                  Time).


% [agent,clock,time]
% Initiates(TurnOnAlarm(agent,clock),AlarmOn(clock),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5184).
initiates_at(turnOnAlarm(Agent,Clock),
	     alarmOn(Clock),
	     Time).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5186).
% [agent,clock,time]
% Terminates(TurnOffAlarm(agent,clock),AlarmOn(clock),time).
terminates_at(turnOffAlarm(Agent,Clock),
	      alarmOn(Clock),
	      Time).


% [clock,time]
% Initiates(StartBeeping(clock),Beeping(clock),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5190).
initiates_at(startBeeping(Clock),beeping(Clock),Time).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5192).
% [agent,clock,time]
% Terminates(TurnOffAlarm(agent,clock),Beeping(clock),time).
terminates_at(turnOffAlarm(Agent,Clock),
	      beeping(Clock),
	      Time).


%; Delta
% [clock,time]
% HoldsAt(AlarmTime(clock,time),time) &
% HoldsAt(AlarmOn(clock),time) ->
% Happens(StartBeeping(clock),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5197).
holds_at(alarmTime(Clock, Time), Time), holds_at(alarmOn(Clock), Time) ->
    happens_at(startBeeping(Clock), Time).


% Happens(SetAlarmTime(Nathan,Clock,2),0).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5201).
happens_at(setAlarmTime(nathan,clock,2),0).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5203).
% Happens(TurnOnAlarm(Nathan,Clock),1).
happens_at(turnOnAlarm(nathan,clock),1).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5205).
%; Psi
% [clock,time1,time2,time]
% HoldsAt(AlarmTime(clock,time1),time) &
% HoldsAt(AlarmTime(clock,time2),time) ->
% time1=time2.
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5207).
holds_at(alarmTime(Clock, Time1), Time), holds_at(alarmTime(Clock, Time2), Time) ->
    Time1=Time2.


%; Gamma


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5214).
% !HoldsAt(AlarmOn(Clock),0).
holds_at(not(alarmOn(clock)),0).


% !HoldsAt(Beeping(Clock),0).
holds_at(not(beeping(clock)),0).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5216).
% HoldsAt(AlarmTime(Clock,3),0).
holds_at(alarmTime(clock,3),0).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5218).
% completion Happens
:- call_pel_directive(completion(happens_at)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5220).
% range time 0 3
:- call_pel_directive(range(time, 0, 3)).

% range offset 1 1
:- call_pel_directive(range(offset, 1, 1)).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter4/BankAccountServiceFee.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5249).
% option modeldiff on
:- call_pel_directive(option(modeldiff, on)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5251).
% load foundations/Root.e
:- call_pel_directive(load('foundations/Root.e')).

% load foundations/EC.e
:- call_pel_directive(load('foundations/EC.e')).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5254).
% sort account
sort(account).

% sort value: integer
subsort(value,integer).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5257).
% account Account1, Account2
t(account,account1).
t(account,account2).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5259).
% predicate EndOfMonth(time)
predicate(endOfMonth(time)).

% function ServiceFee(account): value
function(serviceFee(account),value).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5261).
% function MinimumBalance(account): value
function(minimumBalance(account),value).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5263).
% fluent ServiceFeeCharged(account)
fluent(serviceFeeCharged(account)).

% fluent Balance(account,value)
fluent(balance(account,value)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5266).
% event Transfer(account,account,value)
event(transfer(account,account,value)).

% event MonthlyReset(account)
event(monthlyReset(account)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5268).
% event ChargeServiceFee(account)
event(chargeServiceFee(account)).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5270).
%; Sigma
% [account1,account2,value1,value2,value3,value4,time]
% HoldsAt(Balance(account1,value1),time) &
% HoldsAt(Balance(account2,value2),time) &
% value3>0 &
% value1>=value3 &
% value4=(value2+value3) ->
% Initiates(Transfer(account1,account2,value3),Balance(account2,value4),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5272).
holds_at(balance(Account1, Value1), Time), holds_at(balance(Account2, Value2), Time), Value3>0, Value1>=Value3, Value4=Value2+Value3 ->
    initiates_at(transfer(Account1, Account2, Value3),
                 balance(Account2, Value4),
                 Time).


% [account1,account2,value1,value2,value3,time]
% HoldsAt(Balance(account1,value1),time) &
% HoldsAt(Balance(account2,value2),time) &
% value3>0 &
% value1>=value3 ->
% Terminates(Transfer(account1,account2,value3),Balance(account2,value2),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5281).
holds_at(balance(Account1, Value1), Time), holds_at(balance(Account2, Value2), Time), Value3>0, Value1>=Value3 ->
    terminates_at(transfer(Account1, Account2, Value3),
                  balance(Account2, Value2),
                  Time).


% [account1,account2,value1,value2,value3,value4,time]
% HoldsAt(Balance(account1,value1),time) &
% HoldsAt(Balance(account2,value2),time) &
% value3>0 &
% value1>=value3 &
% value4=(value1-value3) ->
% Initiates(Transfer(account1,account2,value3),Balance(account1,value4),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5288).
holds_at(balance(Account1, Value1), Time), holds_at(balance(Account2, Value2), Time), Value3>0, Value1>=Value3, Value4=Value1-Value3 ->
    initiates_at(transfer(Account1, Account2, Value3),
                 balance(Account1, Value4),
                 Time).


% [account1,account2,value1,value2,value3,time]
% HoldsAt(Balance(account1,value1),time) &
% HoldsAt(Balance(account2,value2),time) &
% value3>0 &
% value1>=value3 ->
% Terminates(Transfer(account1,account2,value3),Balance(account1,value1),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5296).
holds_at(balance(Account1, Value1), Time), holds_at(balance(Account2, Value2), Time), Value3>0, Value1>=Value3 ->
    terminates_at(transfer(Account1, Account2, Value3),
                  balance(Account1, Value1),
                  Time).


% [account,time]
% Initiates(ChargeServiceFee(account),ServiceFeeCharged(account),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5303).
initiates_at(chargeServiceFee(Account),
	     serviceFeeCharged(Account),
	     Time).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5305).
% [account,time]
% Terminates(MonthlyReset(account),ServiceFeeCharged(account),time).
terminates_at(monthlyReset(Account),
	      serviceFeeCharged(Account),
	      Time).


% [account,value1,value2,time]
% HoldsAt(Balance(account,value1),time) &
% value2 = (value1-ServiceFee(account)) ->
% Initiates(ChargeServiceFee(account),
%           Balance(account,value2),
%           time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5309).
holds_at(balance(Account, Value1), Time), Value2=Value1-serviceFee(Account) ->
    initiates_at(chargeServiceFee(Account),
                 balance(Account, Value2),
                 Time).


% [account,value,time]
% HoldsAt(Balance(account,value),time) ->
% Terminates(ChargeServiceFee(account),Balance(account,value),time).
holds_at(balance(Account, Value), Time) ->
    terminates_at(chargeServiceFee(Account),
                  balance(Account, Value),
                  Time).


%; Delta
% [account,value,time]
% HoldsAt(Balance(account,value),time) &
% value<MinimumBalance(account) &
% !HoldsAt(ServiceFeeCharged(account),time) ->
% Happens(ChargeServiceFee(account),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5321).
holds_at(balance(Account, Value), Time), Value<minimumBalance(Account), holds_at(not(serviceFeeCharged(Account)), Time) ->
    happens_at(chargeServiceFee(Account), Time).


% [account,time]
% EndOfMonth(time) ->
% Happens(MonthlyReset(account),time).
endOfMonth(Time) ->
    happens_at(monthlyReset(Account), Time).


% Happens(Transfer(Account1,Account2,1),0).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5330).
happens_at(transfer(account1,account2,1),0).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5332).
% Happens(Transfer(Account1,Account2,1),0).
happens_at(transfer(account1,account2,1),0).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5334).
%; Psi
% [account,value1,value2,time]
% HoldsAt(Balance(account,value1),time) &
% HoldsAt(Balance(account,value2),time) ->
% value1=value2.
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5336).
holds_at(balance(Account, Value1), Time), holds_at(balance(Account, Value2), Time) ->
    Value1=Value2.


%; Gamma


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5343).
% !HoldsAt(ServiceFeeCharged(Account1),0).
holds_at(not(serviceFeeCharged(account1)),0).


% !HoldsAt(ServiceFeeCharged(Account2),0).
holds_at(not(serviceFeeCharged(account2)),0).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5345).
% HoldsAt(Balance(Account1,3),0).
holds_at(balance(account1,3),0).


% HoldsAt(Balance(Account2,1),0).
holds_at(balance(account2,1),0).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5347).
% MinimumBalance(Account1)=3.
minimumBalance(account1)=3.


% MinimumBalance(Account2)=1.
minimumBalance(account2)=1.


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5349).
% ServiceFee(Account1)=1.
serviceFee(account1)=1.


% ServiceFee(Account2)=1.
serviceFee(account2)=1.


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5351).
% [time]
 % !EndOfMonth(time).
not(endOfMonth(Time)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5353).
% completion Happens
:- call_pel_directive(completion(happens_at)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5355).
% range time 0 3
:- call_pel_directive(range(time, 0, 3)).

% range value 1 3
:- call_pel_directive(range(value, 1, 3)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5357).
% range offset 1 1
:- call_pel_directive(range(offset, 1, 1)).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Exercises/Counter.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{DeneckerDupreBelleghem:1998,
%;   author = "Marc Denecker and Daniele Theseider Dupr\'{e} and Kristof Van Belleghem",
%;   year = "1998",
%;   title = "An inductive definition approach to ramifications",
%;   journal = "Link{\"{o}}ping Electronic Articles in Computer and Information Science",
%;   volume = "3",
%;   number = "007",
%; }
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5394).
% load foundations/Root.e
:- call_pel_directive(load('foundations/Root.e')).

% load foundations/EC.e
:- call_pel_directive(load('foundations/EC.e')).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5397).
% sort counter
sort(counter).

% counter Counter1
t(counter,counter1).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5400).
% event FalseToTrue(counter)
event(falseToTrue(counter)).

% event TrueToFalse(counter)
event(trueToFalse(counter)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5403).
% fluent Count(counter,integer)
fluent(count(counter,integer)).

% fluent True(counter)
fluent(true(counter)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5405).
% fluent InputLine(counter)
fluent(inputLine(counter)).

% noninertial InputLine
:- call_pel_directive(noninertial(inputLine)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5408).
% Delta: 
directive(delta).
 


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5408).
% [counter,time]
% !HoldsAt(True(counter),time) &
% HoldsAt(InputLine(counter),time) ->
% Happens(FalseToTrue(counter),time).
holds_at(not(true(Counter)), Time), holds_at(inputLine(Counter), Time) ->
    happens_at(falseToTrue(Counter), Time).

% Delta: 
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5412).
directive(delta).
 


% [counter,time]
% HoldsAt(True(counter),time) &
% !HoldsAt(InputLine(counter),time) ->
% Happens(TrueToFalse(counter),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5414).
holds_at(true(Counter), Time), holds_at(not(inputLine(Counter)), Time) ->
    happens_at(trueToFalse(Counter), Time).


% [counter,time]
 % Initiates(FalseToTrue(counter),True(counter),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5417).
initiates_at(falseToTrue(Counter),true(Counter),Time).


% [counter,time]
 % Terminates(TrueToFalse(counter),True(counter),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5419).
terminates_at(trueToFalse(Counter),
	      true(Counter),
	      Time).


% [counter,integer1,integer2,time]
% HoldsAt(Count(counter,integer1),time) &
% (integer2 = (integer1 + 1)) ->
% Initiates(FalseToTrue(counter),Count(counter,integer2),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5423).
holds_at(count(Counter, Integer1), Time), Integer2=Integer1+1 ->
    initiates_at(falseToTrue(Counter),
                 count(Counter, Integer2),
                 Time).


% [counter,integer,time]
% HoldsAt(Count(counter,integer),time) ->
% Terminates(FalseToTrue(counter),Count(counter,integer),time).
holds_at(count(Counter, Integer), Time) ->
    terminates_at(falseToTrue(Counter),
                  count(Counter, Integer),
                  Time).


% [counter,integer1,integer2,time]
% HoldsAt(Count(counter,integer1),time) &
% HoldsAt(Count(counter,integer2),time) ->
% integer1 = integer2.
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5432).
holds_at(count(Counter, Integer1), Time), holds_at(count(Counter, Integer2), Time) ->
    Integer1=Integer2.


% !HoldsAt(True(Counter1),0).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5435).
holds_at(not(true(counter1)),0).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5437).
% !HoldsAt(InputLine(Counter1),0).
holds_at(not(inputLine(counter1)),0).


% HoldsAt(InputLine(Counter1),1).
holds_at(inputLine(counter1),1).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5439).
% HoldsAt(InputLine(Counter1),2).
holds_at(inputLine(counter1),2).


% HoldsAt(InputLine(Counter1),3).
holds_at(inputLine(counter1),3).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5441).
% !HoldsAt(InputLine(Counter1),4).
holds_at(not(inputLine(counter1)),4).


% !HoldsAt(InputLine(Counter1),5).
holds_at(not(inputLine(counter1)),5).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5443).
% !HoldsAt(InputLine(Counter1),6).
holds_at(not(inputLine(counter1)),6).


% HoldsAt(InputLine(Counter1),7).
holds_at(inputLine(counter1),7).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5445).
% HoldsAt(InputLine(Counter1),8).
holds_at(inputLine(counter1),8).


% HoldsAt(InputLine(Counter1),9).
holds_at(inputLine(counter1),9).


% HoldsAt(Count(Counter1,0),0).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5447).
holds_at(count(counter1,0),0).

% completion Happens
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5449).
:- call_pel_directive(completion(happens_at)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5452).
% range integer 0 6
:- call_pel_directive(range(integer, 0, 6)).

% range time 0 10
:- call_pel_directive(range(time, 0, 10)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5454).
% range offset 1 1
:- call_pel_directive(range(offset, 1, 1)).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Exercises/TeacherTells.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5482).
% option modeldiff on
:- call_pel_directive(option(modeldiff, on)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5484).
% load foundations/Root.e
:- call_pel_directive(load('foundations/Root.e')).

% load foundations/EC.e
:- call_pel_directive(load('foundations/EC.e')).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5487).
% sort agent
sort(agent).

% sort room
sort(room).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5489).
% sort fact
sort(fact).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5491).
% agent Teacher, Student
t(agent,teacher).
t(agent,student).

% room Kitchen, Classroom
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5491).
t(room,kitchen).
t(room,classroom).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5493).
% fact Fact1, Fact2
t(fact,fact1).
t(fact,fact2).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5495).
% fluent InRoom(agent,room)
fluent(inRoom(agent,room)).

% fluent ListeningTo(agent,agent)
fluent(listeningTo(agent,agent)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5497).
% fluent Know(agent,fact)
fluent(know(agent,fact)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5499).
% event Tell(agent,agent,fact)
event(tell(agent,agent,fact)).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5501).
%; Sigma
% [agent1,agent2,fact,time]
% (% {room} HoldsAt(InRoom(agent1,room),time) &
%         HoldsAt(InRoom(agent2,room),time)) &
% HoldsAt(ListeningTo(agent2,agent1),time) ->
% Initiates(Tell(agent1,agent2,fact),Know(agent2,fact),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5503).
exists([Room],  ((holds_at(inRoom(Agent1, Room), Time), holds_at(inRoom(Agent2, Room), Time)), holds_at(listeningTo(Agent2, Agent1), Time)->initiates_at(tell(Agent1, Agent2, Fact), know(Agent2, Fact), Time))).


%; Delta


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5511).
% Happens(Tell(Teacher,Student,Fact1),0).
happens_at(tell(teacher,student,fact1),0).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5513).
%; Psi
% [agent,room1,room2,time]
% HoldsAt(InRoom(agent,room1),time) &
% HoldsAt(InRoom(agent,room2),time) ->
% room1 = room2.
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5515).
holds_at(inRoom(Agent, Room1), Time), holds_at(inRoom(Agent, Room2), Time) ->
    Room1=Room2.


%; Gamma
% [agent,fact]
 % !HoldsAt(Know(agent,fact),0).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5522).
holds_at(not(know(Agent,Fact)),0).


% [agent1,agent2]
 % HoldsAt(ListeningTo(agent1,agent2),0).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5522).
holds_at(listeningTo(Agent1,Agent2),0).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5524).
% [agent]
 % HoldsAt(InRoom(agent,Classroom),0).
holds_at(inRoom(Agent,classroom),0).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5526).
% completion Happens
:- call_pel_directive(completion(happens_at)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5528).
% range time 0 1
:- call_pel_directive(range(time, 0, 1)).

% range offset 1 1
:- call_pel_directive(range(offset, 1, 1)).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Exercises/MixingPaints.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5557).
% load foundations/Root.e
:- call_pel_directive(load('foundations/Root.e')).

% load foundations/EC.e
:- call_pel_directive(load('foundations/EC.e')).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5560).
% sort palette
sort(palette).

% sort color
sort(color).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5563).
% palette Palette1
t(palette,palette1).

% color Red, Yellow, Blue, Green
t(color,red).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5563).
t(color,yellow).
t(color,blue).
t(color,green).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5566).
% event PlaceOnPalette(palette,color)
event(placeOnPalette(palette,color)).

% fluent OnPalette(palette,color)
fluent(onPalette(palette,color)).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5569).
% [palette,color,time]
% !Happens(PlaceOnPalette(palette,Yellow),time) |
% !Happens(PlaceOnPalette(palette,Blue),time) ->
% Initiates(PlaceOnPalette(palette,color),OnPalette(palette,color),time).
not(happens_at(placeOnPalette(Palette, yellow), Time));not(happens_at(placeOnPalette(Palette, blue), Time)) ->
    initiates_at(placeOnPalette(Palette, Color),
                 onPalette(Palette, Color),
                 Time).


% [palette,color1,color2,time]
% Happens(PlaceOnPalette(palette,Yellow),time) &
% color1 = Blue &
% color2 = Green ->
% Initiates(PlaceOnPalette(palette,color1),OnPalette(palette,color2),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5575).
happens_at(placeOnPalette(Palette, yellow), Time), Color1=blue, Color2=green ->
    initiates_at(placeOnPalette(Palette, Color1),
                 onPalette(Palette, Color2),
                 Time).


% [palette,color1,color2,time]
% !(Happens(PlaceOnPalette(palette,Yellow),time) &
%   Happens(PlaceOnPalette(palette,Blue),time)) &
% HoldsAt(OnPalette(palette,color1),time) &
% color1 != color2 ->
% Terminates(PlaceOnPalette(palette,color2),OnPalette(palette,color1),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5581).
not((happens_at(placeOnPalette(Palette, yellow), Time), happens_at(placeOnPalette(Palette, blue), Time))), holds_at(onPalette(Palette, Color1), Time), Color1\=Color2 ->
    terminates_at(placeOnPalette(Palette, Color2),
                  onPalette(Palette, Color1),
                  Time).


% [palette,color1,color2,time]
% Happens(PlaceOnPalette(palette,Yellow),time) &
% HoldsAt(OnPalette(palette,color2),time) &
% color1 = Blue &
% color2 != Green ->
% Terminates(PlaceOnPalette(palette,color1),OnPalette(palette,color2),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5588).
happens_at(placeOnPalette(Palette, yellow), Time), holds_at(onPalette(Palette, Color2), Time), Color1=blue, Color2\=green ->
    terminates_at(placeOnPalette(Palette, Color1),
                  onPalette(Palette, Color2),
                  Time).


%; state constraint
% [palette,color1,color2,time]
% HoldsAt(OnPalette(palette,color1),time) &
% HoldsAt(OnPalette(palette,color2),time) ->
% color1 = color2.
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5596).
holds_at(onPalette(Palette, Color1), Time), holds_at(onPalette(Palette, Color2), Time) ->
    Color1=Color2.


%; (1) place green over red


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5602).
% HoldsAt(OnPalette(Palette1,Red),0).
holds_at(onPalette(palette1,red),0).

% Delta: 
directive(delta).
 


% Happens(PlaceOnPalette(Palette1,Green),0).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5602).
happens_at(placeOnPalette(palette1,green),0).


%; (2) place yellow+blue over green

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5606).
% Delta: 
directive(delta).
 


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5606).
% Happens(PlaceOnPalette(Palette1,Yellow),1).
happens_at(placeOnPalette(palette1,yellow),1).

% Delta: 
directive(delta).
 


% Happens(PlaceOnPalette(Palette1,Blue),1).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5606).
happens_at(placeOnPalette(palette1,blue),1).


%; (3) place yellow

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5610).
% Delta: 
directive(delta).
 


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5610).
% Happens(PlaceOnPalette(Palette1,Yellow),2).
happens_at(placeOnPalette(palette1,yellow),2).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5612).
%; (4) place blue

% Delta: 
directive(delta).
 


% Happens(PlaceOnPalette(Palette1,Blue),3).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5612).
happens_at(placeOnPalette(palette1,blue),3).


%; (5) place green

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5616).
% Delta: 
directive(delta).
 


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5616).
% Happens(PlaceOnPalette(Palette1,Yellow),4).
happens_at(placeOnPalette(palette1,yellow),4).

% Delta: 
directive(delta).
 


% Happens(PlaceOnPalette(Palette1,Blue),4).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5616).
happens_at(placeOnPalette(palette1,blue),4).

% completion Delta Happens
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5618).
:- call_pel_directive(completion(delta)).
:- call_pel_directive(completion(happens_at)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5621).
% range time 0 5
:- call_pel_directive(range(time, 0, 5)).

% range offset 1 1
:- call_pel_directive(range(offset, 1, 1)).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Exercises/SnoozeAlarm.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; Example: Alarm Clock with snooze alarm added
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5652).
% load foundations/Root.e
:- call_pel_directive(load('foundations/Root.e')).

% load foundations/EC.e
:- call_pel_directive(load('foundations/EC.e')).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5655).
% sort agent
sort(agent).

% sort clock
sort(clock).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5658).
% fluent Beeping(clock)
fluent(beeping(clock)).

% fluent AlarmTime(clock,time)
fluent(alarmTime(clock,time)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5660).
% fluent AlarmOn(clock)
fluent(alarmOn(clock)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5662).
% event SetAlarmTime(agent,clock,time)
event(setAlarmTime(agent,clock,time)).

% event StartBeeping(clock)
event(startBeeping(clock)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5664).
% event TurnOnAlarm(agent,clock)
event(turnOnAlarm(agent,clock)).

% event TurnOffAlarm(agent,clock)
event(turnOffAlarm(agent,clock)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5667).
% event PressSnooze(agent,clock)
event(pressSnooze(agent,clock)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5669).
% agent Nathan
t(agent,nathan).

% clock Clock
t(clock,clock).
%; Sigma
% [agent,clock,time1,time2,time]
% HoldsAt(AlarmTime(clock,time1),time) &
% time1!=time2 ->
% Initiates(SetAlarmTime(agent,clock,time2),AlarmTime(clock,time2),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5674).
holds_at(alarmTime(Clock, Time1), Time), Time1\=Time2 ->
    initiates_at(setAlarmTime(Agent, Clock, Time2),
                 alarmTime(Clock, Time2),
                 Time).


% [agent,clock,time1,time2,time]
% HoldsAt(AlarmTime(clock,time1),time) &
% time1!=time2 ->
% Terminates(SetAlarmTime(agent,clock,time2),AlarmTime(clock,time1),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5680).
holds_at(alarmTime(Clock, Time1), Time), Time1\=Time2 ->
    terminates_at(setAlarmTime(Agent, Clock, Time2),
                  alarmTime(Clock, Time1),
                  Time).


% [agent,clock,time]
% Initiates(TurnOnAlarm(agent,clock),AlarmOn(clock),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5685).
initiates_at(turnOnAlarm(Agent,Clock),
	     alarmOn(Clock),
	     Time).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5687).
% [agent,clock,time]
% Terminates(TurnOffAlarm(agent,clock),AlarmOn(clock),time).
terminates_at(turnOffAlarm(Agent,Clock),
	      alarmOn(Clock),
	      Time).


% [clock,time]
% Initiates(StartBeeping(clock),Beeping(clock),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5691).
initiates_at(startBeeping(Clock),beeping(Clock),Time).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5693).
% [agent,clock,time]
% Terminates(TurnOffAlarm(agent,clock),Beeping(clock),time).
terminates_at(turnOffAlarm(Agent,Clock),
	      beeping(Clock),
	      Time).


%; added axioms:
% [agent,clock,time2,time]
% HoldsAt(Beeping(clock),time) &
% time2 = time+9 ->
% Initiates(PressSnooze(agent,clock),AlarmTime(clock,time2),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5698).
holds_at(beeping(Clock), Time), Time2=Time+9 ->
    initiates_at(pressSnooze(Agent, Clock),
                 alarmTime(Clock, Time2),
                 Time).


% [agent,clock,time1,time2,time]
% HoldsAt(Beeping(clock),time) &
% HoldsAt(AlarmTime(clock,time1),time) &
% time2 = time+9 &
% time1 != time2 ->
% Terminates(PressSnooze(agent,clock),AlarmTime(clock,time1),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5704).
holds_at(beeping(Clock), Time), holds_at(alarmTime(Clock, Time1), Time), Time2=Time+9, Time1\=Time2 ->
    terminates_at(pressSnooze(Agent, Clock),
                  alarmTime(Clock, Time1),
                  Time).


% [agent,clock,time]
% Terminates(PressSnooze(agent,clock),Beeping(clock),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5711).
terminates_at(pressSnooze(Agent,Clock),
	      beeping(Clock),
	      Time).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5713).
%; Delta
% [clock,time]
% HoldsAt(AlarmTime(clock,time),time) &
% HoldsAt(AlarmOn(clock),time) ->
% Happens(StartBeeping(clock),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5715).
holds_at(alarmTime(Clock, Time), Time), holds_at(alarmOn(Clock), Time) ->
    happens_at(startBeeping(Clock), Time).


% Happens(SetAlarmTime(Nathan,Clock,2),0).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5719).
happens_at(setAlarmTime(nathan,clock,2),0).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5721).
% Happens(TurnOnAlarm(Nathan,Clock),1).
happens_at(turnOnAlarm(nathan,clock),1).


% Happens(PressSnooze(Nathan,Clock),4).
happens_at(pressSnooze(nathan,clock),4).


%; Psi
% [clock,time1,time2,time]
% HoldsAt(AlarmTime(clock,time1),time) &
% HoldsAt(AlarmTime(clock,time2),time) ->
% time1=time2.
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5726).
holds_at(alarmTime(Clock, Time1), Time), holds_at(alarmTime(Clock, Time2), Time) ->
    Time1=Time2.


%; Gamma


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5733).
% !HoldsAt(AlarmOn(Clock),0).
holds_at(not(alarmOn(clock)),0).


% !HoldsAt(Beeping(Clock),0).
holds_at(not(beeping(clock)),0).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5735).
% HoldsAt(AlarmTime(Clock,3),0).
holds_at(alarmTime(clock,3),0).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5737).
% completion Happens
:- call_pel_directive(completion(happens_at)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5739).
% range time 0 15
:- call_pel_directive(range(time, 0, 15)).

% range offset 1 1
:- call_pel_directive(range(offset, 1, 1)).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Exercises/TelephoneBugs.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; Example: Telephone
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5770).
% load foundations/Root.e
:- call_pel_directive(load('foundations/Root.e')).

% load foundations/EC.e
:- call_pel_directive(load('foundations/EC.e')).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5773).
% sort agent
sort(agent).

% sort phone
sort(phone).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5776).
% agent Agent1, Agent2
t(agent,agent1).
t(agent,agent2).

% phone Phone1, Phone2
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5776).
t(phone,phone1).
t(phone,phone2).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5779).
% fluent Ringing(phone,phone)
fluent(ringing(phone,phone)).

% fluent DialTone(phone)
fluent(dialTone(phone)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5781).
% fluent BusySignal(phone)
fluent(busySignal(phone)).

% fluent Idle(phone)
fluent(idle(phone)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5783).
% fluent Connected(phone,phone)
fluent(connected(phone,phone)).

% fluent Disconnected(phone)
fluent(disconnected(phone)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5786).
% event PickUp(agent,phone)
event(pickUp(agent,phone)).

% event SetDown(agent,phone)
event(setDown(agent,phone)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5788).
% event Dial(agent,phone,phone)
event(dial(agent,phone,phone)).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5790).
%; Sigma
% [agent,phone,time]
% HoldsAt(Idle(phone),time) ->
% Initiates(PickUp(agent,phone),DialTone(phone),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5792).
holds_at(idle(Phone), Time) ->
    initiates_at(pickUp(Agent, Phone),
                 dialTone(Phone),
                 Time).


% [agent,phone,time]
% HoldsAt(Idle(phone),time) ->
% Terminates(PickUp(agent,phone),Idle(phone),time).
holds_at(idle(Phone), Time) ->
    terminates_at(pickUp(Agent, Phone),
                  idle(Phone),
                  Time).


% [agent,phone,time]
% HoldsAt(DialTone(phone),time) ->
% Initiates(SetDown(agent,phone),Idle(phone),time).
holds_at(dialTone(Phone), Time) ->
    initiates_at(setDown(Agent, Phone),
                 idle(Phone),
                 Time).


% [agent,phone,time]
% HoldsAt(DialTone(phone),time) ->
% Terminates(SetDown(agent,phone),DialTone(phone),time).
holds_at(dialTone(Phone), Time) ->
    terminates_at(setDown(Agent, Phone),
                  dialTone(Phone),
                  Time).


% [agent,phone1,phone2,time]
% HoldsAt(DialTone(phone1),time) &
% HoldsAt(Idle(phone2),time) ->
% Initiates(Dial(agent,phone1,phone2),Ringing(phone1,phone2),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5809).
holds_at(dialTone(Phone1), Time), holds_at(idle(Phone2), Time) ->
    initiates_at(dial(Agent, Phone1, Phone2),
                 ringing(Phone1, Phone2),
                 Time).


% [agent,phone1,phone2,time]
% HoldsAt(DialTone(phone1),time) &
% HoldsAt(Idle(phone2),time) ->
% Terminates(Dial(agent,phone1,phone2),DialTone(phone1),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5814).
holds_at(dialTone(Phone1), Time), holds_at(idle(Phone2), Time) ->
    terminates_at(dial(Agent, Phone1, Phone2),
                  dialTone(Phone1),
                  Time).


% [agent,phone1,phone2,time]
% HoldsAt(DialTone(phone1),time) &
% HoldsAt(Idle(phone2),time) ->
% Terminates(Dial(agent,phone1,phone2),Idle(phone2),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5819).
holds_at(dialTone(Phone1), Time), holds_at(idle(Phone2), Time) ->
    terminates_at(dial(Agent, Phone1, Phone2),
                  idle(Phone2),
                  Time).


% [agent,phone1,phone2,time]
% HoldsAt(DialTone(phone1),time) &
% !HoldsAt(Idle(phone2),time) ->
% Initiates(Dial(agent,phone1,phone2),BusySignal(phone1),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5824).
holds_at(dialTone(Phone1), Time), holds_at(not(idle(Phone2)), Time) ->
    initiates_at(dial(Agent, Phone1, Phone2),
                 busySignal(Phone1),
                 Time).


% [agent,phone1,phone2,time]
% HoldsAt(DialTone(phone1),time) &
% !HoldsAt(Idle(phone2),time) ->
% Terminates(Dial(agent,phone1,phone2),DialTone(phone1),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5829).
holds_at(dialTone(Phone1), Time), holds_at(not(idle(Phone2)), Time) ->
    terminates_at(dial(Agent, Phone1, Phone2),
                  dialTone(Phone1),
                  Time).


% [agent,phone,time]
% HoldsAt(BusySignal(phone),time) ->
% Initiates(SetDown(agent,phone),Idle(phone),time).
holds_at(busySignal(Phone), Time) ->
    initiates_at(setDown(Agent, Phone),
                 idle(Phone),
                 Time).


% [agent,phone,time]
% HoldsAt(BusySignal(phone),time) ->
% Terminates(SetDown(agent,phone),BusySignal(phone),time).
holds_at(busySignal(Phone), Time) ->
    terminates_at(setDown(Agent, Phone),
                  busySignal(Phone),
                  Time).


% [agent,phone1,phone2,time]
% HoldsAt(Ringing(phone1,phone2),time) ->
% Initiates(SetDown(agent,phone1),Idle(phone1),time).
holds_at(ringing(Phone1, Phone2), Time) ->
    initiates_at(setDown(Agent, Phone1),
                 idle(Phone1),
                 Time).


% [agent,phone1,phone2,time]
% HoldsAt(Ringing(phone1,phone2),time) ->
% Initiates(SetDown(agent,phone1),Idle(phone2),time).
holds_at(ringing(Phone1, Phone2), Time) ->
    initiates_at(setDown(Agent, Phone1),
                 idle(Phone2),
                 Time).


% [agent,phone1,phone2,time]
% HoldsAt(Ringing(phone1,phone2),time) ->
% Terminates(SetDown(agent,phone1),Ringing(phone1,phone2),time).
holds_at(ringing(Phone1, Phone2), Time) ->
    terminates_at(setDown(Agent, Phone1),
                  ringing(Phone1, Phone2),
                  Time).


% [agent,phone1,phone2,time]
% HoldsAt(Ringing(phone1,phone2),time) ->
% Initiates(PickUp(agent,phone2),Connected(phone1,phone2),time).
holds_at(ringing(Phone1, Phone2), Time) ->
    initiates_at(pickUp(Agent, Phone2),
                 connected(Phone1, Phone2),
                 Time).


% [agent,phone1,phone2,time]
% HoldsAt(Ringing(phone1,phone2),time) ->
% Terminates(PickUp(agent,phone2),Ringing(phone1,phone2),time).
holds_at(ringing(Phone1, Phone2), Time) ->
    terminates_at(pickUp(Agent, Phone2),
                  ringing(Phone1, Phone2),
                  Time).


% [agent,phone1,phone2,time]
% HoldsAt(Connected(phone1,phone2),time) ->
% Initiates(SetDown(agent,phone1),Idle(phone1),time).
holds_at(connected(Phone1, Phone2), Time) ->
    initiates_at(setDown(Agent, Phone1),
                 idle(Phone1),
                 Time).


% [agent,phone1,phone2,time]
% HoldsAt(Connected(phone1,phone2),time) ->
% Initiates(SetDown(agent,phone1),Disconnected(phone2),time).
holds_at(connected(Phone1, Phone2), Time) ->
    initiates_at(setDown(Agent, Phone1),
                 disconnected(Phone2),
                 Time).


% [agent,phone1,phone2,time]
% HoldsAt(Connected(phone1,phone2),time) ->
% Terminates(SetDown(agent,phone1),Connected(phone1,phone2),time).
holds_at(connected(Phone1, Phone2), Time) ->
    terminates_at(setDown(Agent, Phone1),
                  connected(Phone1, Phone2),
                  Time).


% [agent,phone1,phone2,time]
% HoldsAt(Connected(phone1,phone2),time) ->
% Initiates(SetDown(agent,phone2),Idle(phone2),time).
holds_at(connected(Phone1, Phone2), Time) ->
    initiates_at(setDown(Agent, Phone2),
                 idle(Phone2),
                 Time).


% [agent,phone1,phone2,time]
% HoldsAt(Connected(phone1,phone2),time) ->
% Initiates(SetDown(agent,phone2),Disconnected(phone1),time).
holds_at(connected(Phone1, Phone2), Time) ->
    initiates_at(setDown(Agent, Phone2),
                 disconnected(Phone1),
                 Time).


% [agent,phone1,phone2,time]
% HoldsAt(Connected(phone1,phone2),time) ->
% Terminates(SetDown(agent,phone2),Connected(phone1,phone2),time).
holds_at(connected(Phone1, Phone2), Time) ->
    terminates_at(setDown(Agent, Phone2),
                  connected(Phone1, Phone2),
                  Time).


% [agent,phone,time]
% HoldsAt(Disconnected(phone),time) ->
% Initiates(SetDown(agent,phone),Idle(phone),time).
holds_at(disconnected(Phone), Time) ->
    initiates_at(setDown(Agent, Phone),
                 idle(Phone),
                 Time).


% [agent,phone,time]
% HoldsAt(Disconnected(phone),time) ->
% Terminates(SetDown(agent,phone),Disconnected(phone),time).
holds_at(disconnected(Phone), Time) ->
    terminates_at(setDown(Agent, Phone),
                  disconnected(Phone),
                  Time).


%; Delta
%; (1) Two agents dial each other simultaneously without first
%; picking up phone.


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5897).
% Happens(Dial(Agent1,Phone1,Phone2),0).
happens_at(dial(agent1,phone1,phone2),0).


% Happens(Dial(Agent2,Phone2,Phone1),0).
happens_at(dial(agent2,phone2,phone1),0).


%; (2) Two agents dial each other simultaneously.


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5901).
% Happens(PickUp(Agent1,Phone1),1).
happens_at(pickUp(agent1,phone1),1).


% Happens(PickUp(Agent2,Phone2),1).
happens_at(pickUp(agent2,phone2),1).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5903).
% Happens(Dial(Agent1,Phone1,Phone2),2).
happens_at(dial(agent1,phone1,phone2),2).


% Happens(Dial(Agent2,Phone2,Phone1),2).
happens_at(dial(agent2,phone2,phone1),2).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5905).
% Happens(SetDown(Agent1,Phone1),3).
happens_at(setDown(agent1,phone1),3).


% Happens(SetDown(Agent2,Phone2),3).
happens_at(setDown(agent2,phone2),3).


%; (3) One agent dials another agent just as the other
%; agent picks up the phone.


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5910).
% Happens(PickUp(Agent1,Phone1),4).
happens_at(pickUp(agent1,phone1),4).


% Happens(Dial(Agent1,Phone1,Phone2),5).
happens_at(dial(agent1,phone1,phone2),5).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5912).
% Happens(PickUp(Agent2,Phone2),5).
happens_at(pickUp(agent2,phone2),5).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5914).
%; Psi
% [phone,time]
% !HoldsAt(Ringing(phone,phone),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5916).
holds_at(not(ringing(Phone,Phone)),Time).


% [phone1,phone2,time]
% HoldsAt(Ringing(phone1,phone2),time) &
% phone1!=phone2 ->
% !HoldsAt(Ringing(phone2,phone1),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5920).
holds_at(ringing(Phone1, Phone2), Time), Phone1\=Phone2 ->
    holds_at(not(ringing(Phone2, Phone1)), Time).


% [phone,time]
% !HoldsAt(Connected(phone,phone),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5925).
holds_at(not(connected(Phone,Phone)),Time).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5927).
% [phone1,phone2,time]
% HoldsAt(Connected(phone1,phone2),time) &
% phone1!=phone2 ->
% !HoldsAt(Connected(phone2,phone1),time).
holds_at(connected(Phone1, Phone2), Time), Phone1\=Phone2 ->
    holds_at(not(connected(Phone2, Phone1)), Time).

% mutex Idle, DialTone, BusySignal, Disconnected
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5931).
:- call_pel_directive(mutex(idle)).
:- call_pel_directive(mutex(dialTone)).
:- call_pel_directive(mutex(busySignal)).
:- call_pel_directive(mutex(disconnected)).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5934).
% [phone1,phone2,time]
% HoldsAt(Idle(phone1),time) ->
% !HoldsAt(Ringing(phone1,phone2),time) &
% !HoldsAt(Connected(phone1,phone2),time).
holds_at(idle(Phone1), Time) ->
    holds_at(not(ringing(Phone1, Phone2)), Time),
    holds_at(not(connected(Phone1, Phone2)), Time).


%; contradicts (3) above:
%;[phone1,phone2,time]
%;HoldsAt(DialTone(phone2),time) ->
%;!HoldsAt(Ringing(phone1,phone2),time) &
%;!HoldsAt(Connected(phone1,phone2),time).
%; etc.
%; Gamma
% [phone]
 
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5949).
% HoldsAt(Idle(phone),0).
holds_at(idle(Phone),0).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5951).
% completion Happens
:- call_pel_directive(completion(happens_at)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5953).
% range time 0 6
:- call_pel_directive(range(time, 0, 6)).

% range offset 1 1
:- call_pel_directive(range(offset, 1, 1)).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter11/HungryCat.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @inproceedings{WinikoffEtAl:2002,
%;   author = "Michael Winikoff and Lin Padgham and James Harland and John Thangarajah",
%;   year = "2002",
%;   title = "Declarative \& procedural goals in intelligent agent systems",
%;   editor = "Dieter Fensel and Fausto Giunchiglia and Deborah McGuinness and Mary-Anne Williams",
%;   booktitle = "\uppercase{P}roceedings of the \uppercase{E}ighth \uppercase{I}nternational \uppercase{C}onference on \uppercase{P}rinciples of \uppercase{K}nowledge \uppercase{R}epresentation and \uppercase{R}easoning",
%;   pages = "470--481",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann",
%; }
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5993).
% load foundations/Root.e
:- call_pel_directive(load('foundations/Root.e')).

% load foundations/EC.e
:- call_pel_directive(load('foundations/EC.e')).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5996).
% sort object
sort(object).

% sort agent: object
subsort(agent,object).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',5998).
% sort food: object
subsort(food,object).

% sort surface
sort(surface).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6000).
% sort plan
sort(plan).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6002).
% reified sort belief
reified_sort(belief).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6004).
% agent Cat
t(agent,cat).

% surface Floor, Chair, Shelf, Table
t(surface,floor).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6004).
t(surface,chair).
t(surface,shelf).
t(surface,table).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6006).
% food Food1, Food2
t(food,food1).
t(food,food2).

% plan P1, P1a, P1b, P2, P2a
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6006).
t(plan,p1).
t(plan,p1a).
t(plan,p1b).
t(plan,p2).
t(plan,p2a).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6009).
% predicate SelectedPlan(agent,belief,plan,time)
predicate(selectedPlan(agent,belief,plan,time)).

% predicate SoundPlan(agent,belief,plan,time)
predicate(soundPlan(agent,belief,plan,time)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6012).
% fluent On(object,surface)
fluent(on(object,surface)).

% fluent Goal(agent,belief)
fluent(goal(agent,belief)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6014).
% fluent CanJump(surface,surface)
fluent(canJump(surface,surface)).

% fluent Plan(agent,belief,plan)
fluent(plan(agent,belief,plan)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6016).
% fluent Satiated(agent)
fluent(satiated(agent)).

% fluent Believe(agent,belief)
fluent(believe(agent,belief)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6019).
% event AddPlan(agent,belief,plan)
event(addPlan(agent,belief,plan)).

% event DropPlan(agent,belief,plan)
event(dropPlan(agent,belief,plan)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6021).
% event Jump(agent,surface,surface)
event(jump(agent,surface,surface)).

% event Move(surface,surface,surface)
event(move(surface,surface,surface)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6023).
% event Eat(agent,food)
event(eat(agent,food)).

% event Wait(agent)
event(wait(agent)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6026).
% belief BSatiated(agent)
t(belief,bSatiated(agent)).

% belief BCanJump(surface,surface)
t(belief,bCanJump(surface,surface)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6028).
% belief BOn(object,surface)
t(belief,bOn(object,surface)).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6030).
%; Sigma
%; A5
% [agent,belief,plan,time]
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6034).
% Initiates(AddPlan(agent,belief,plan),Plan(agent,belief,plan),time).
initiates_at(addPlan(Agent,Belief,Plan),
	     plan(Agent,Belief,Plan),
	     Time).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6036).
%; A6
% [agent,belief,plan,time]
% Terminates(DropPlan(agent,belief,plan),Plan(agent,belief,plan),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6038).
terminates_at(dropPlan(Agent,Belief,Plan),
	      plan(Agent,Belief,Plan),
	      Time).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6040).
% [agent,surface1,surface2,time]
% HoldsAt(On(agent,surface1),time) &
% HoldsAt(CanJump(surface1,surface2),time) ->
% Initiates(Jump(agent,surface1,surface2),On(agent,surface2),time).
holds_at(on(Agent, Surface1), Time), holds_at(canJump(Surface1, Surface2), Time) ->
    initiates_at(jump(Agent, Surface1, Surface2),
                 on(Agent, Surface2),
                 Time).


% [agent,surface1,surface2,time]
% HoldsAt(On(agent,surface1),time) &
% HoldsAt(CanJump(surface1,surface2),time) ->
% Terminates(Jump(agent,surface1,surface2),On(agent,surface1),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6046).
holds_at(on(Agent, Surface1), Time), holds_at(canJump(Surface1, Surface2), Time) ->
    terminates_at(jump(Agent, Surface1, Surface2),
                  on(Agent, Surface1),
                  Time).


% [surface1,surface2,surface3,time]
% Initiates(Move(surface1,surface2,surface3),CanJump(surface1,surface3),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6051).
initiates_at(move(Surface1,Surface2,Surface3),
	     canJump(Surface1,Surface3),
	     Time).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6053).
% [surface1,surface2,surface3,time]
% Terminates(Move(surface1,surface2,surface3),CanJump(surface1,surface2),time).
terminates_at(move(Surface1,Surface2,Surface3),
	      canJump(Surface1,Surface2),
	      Time).


% [agent,food,surface,time]
% HoldsAt(On(agent,surface),time) &
% HoldsAt(On(food,surface),time) ->
% Initiates(Eat(agent,food),Satiated(agent),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6057).
holds_at(on(Agent, Surface), Time), holds_at(on(Food, Surface), Time) ->
    initiates_at(eat(Agent, Food), satiated(Agent), Time).


% [agent,food,surface,time]
% HoldsAt(On(agent,surface),time) &
% HoldsAt(On(food,surface),time) ->
% Terminates(Eat(agent,food),On(food,surface),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6062).
holds_at(on(Agent, Surface), Time), holds_at(on(Food, Surface), Time) ->
    terminates_at(eat(Agent, Food),
                  on(Food, Surface),
                  Time).


% [agent,surface1,surface2,belief,time]
% HoldsAt(Believe(agent,BOn(agent,surface1)),time) &
% HoldsAt(Believe(agent,BCanJump(surface1,surface2)),time) &
% (belief = BOn(agent,surface2)) ->
% Initiates(Jump(agent,surface1,surface2),
%           Believe(agent,belief),
%           time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6067).
holds_at(believe(Agent, bOn(Agent, Surface1)), Time), holds_at(believe(Agent, bCanJump(Surface1, Surface2)), Time), Belief=bOn(Agent, Surface2) ->
    initiates_at(jump(Agent, Surface1, Surface2),
                 believe(Agent, Belief),
                 Time).


% [agent,surface1,surface2,belief,time]
% HoldsAt(Believe(agent,BOn(agent,surface1)),time) &
% HoldsAt(Believe(agent,BCanJump(surface1,surface2)),time) &
% (belief = BOn(agent,surface1)) ->
% Terminates(Jump(agent,surface1,surface2),
%            Believe(agent,belief),
%            time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6075).
holds_at(believe(Agent, bOn(Agent, Surface1)), Time), holds_at(believe(Agent, bCanJump(Surface1, Surface2)), Time), Belief=bOn(Agent, Surface1) ->
    terminates_at(jump(Agent, Surface1, Surface2),
                  believe(Agent, Belief),
                  Time).


% [agent,surface1,surface2,surface3,belief,time]
% (belief = BCanJump(surface1,surface3)) ->
% Initiates(Move(surface1,surface2,surface3),
%           Believe(agent,belief),
%           time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6083).
Belief=bCanJump(Surface1, Surface3) ->
    initiates_at(move(Surface1, Surface2, Surface3),
                 believe(Agent, Belief),
                 Time).


% [agent,surface1,surface2,surface3,belief,time]
% (belief = BCanJump(surface1,surface2)) ->
% Terminates(Move(surface1,surface2,surface3),
%            Believe(agent,belief),
%            time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6089).
Belief=bCanJump(Surface1, Surface2) ->
    terminates_at(move(Surface1, Surface2, Surface3),
                  believe(Agent, Belief),
                  Time).


% [agent,food,surface,belief,time]
% HoldsAt(Believe(agent,BOn(agent,surface)),time) &
% HoldsAt(Believe(agent,BOn(food,surface)),time) &
% (belief = BSatiated(agent)) ->
% Initiates(Eat(agent,food),Believe(agent,belief),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6095).
holds_at(believe(Agent, bOn(Agent, Surface)), Time), holds_at(believe(Agent, bOn(Food, Surface)), Time), Belief=bSatiated(Agent) ->
    initiates_at(eat(Agent, Food),
                 believe(Agent, Belief),
                 Time).


% [agent,food,surface,belief,time]
% HoldsAt(Believe(agent,BOn(agent,surface)),time) &
% HoldsAt(Believe(agent,BOn(food,surface)),time) &
% (belief = BOn(food,surface)) ->
% Terminates(Eat(agent,food),Believe(agent,belief),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6101).
holds_at(believe(Agent, bOn(Agent, Surface)), Time), holds_at(believe(Agent, bOn(Food, Surface)), Time), Belief=bOn(Food, Surface) ->
    terminates_at(eat(Agent, Food),
                  believe(Agent, Belief),
                  Time).


%; Delta
%; A7
% [agent,belief,plan,time]
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6110).
% HoldsAt(Goal(agent,belief),time) &
% !HoldsAt(Believe(agent,belief),time) &
% SelectedPlan(agent,belief,plan,time) &
% (!{plan1} HoldsAt(Plan(agent,belief,plan1),time)) ->
% Happens(AddPlan(agent,belief,plan),time).
holds_at(goal(Agent, Belief), Time), holds_at(not(believe(Agent, Belief)), Time), selectedPlan(Agent, Belief, Plan, Time), not(exists([Plan1], holds_at(plan(Agent, Belief, Plan1), Time))) ->
    happens_at(addPlan(Agent, Belief, Plan), Time).


%; A8
% [agent,belief,time]
% HoldsAt(Plan(agent,belief,P1),time) &
% !HoldsAt(Believe(agent,belief),time) &
% SoundPlan(agent,belief,P1,time) ->
% Happens(Jump(Cat,Floor,Chair),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6117).
holds_at(plan(Agent, Belief, p1), Time), holds_at(not(believe(Agent, Belief)), Time), soundPlan(Agent, Belief, p1, Time) ->
    happens_at(jump(cat, floor, chair), Time).


% [agent,belief,time]
% HoldsAt(Plan(agent,belief,P1a),time) &
% !HoldsAt(Believe(agent,belief),time) &
% SoundPlan(agent,belief,P1a,time) ->
% Happens(Wait(Cat),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6124).
holds_at(plan(Agent, Belief, p1a), Time), holds_at(not(believe(Agent, Belief)), Time), soundPlan(Agent, Belief, p1a, Time) ->
    happens_at(wait(cat), Time).


% [agent,belief,time]
% HoldsAt(Plan(agent,belief,P2),time) &
% !HoldsAt(Believe(agent,belief),time) &
% SoundPlan(agent,belief,P2,time) ->
% Happens(Jump(Cat,Chair,Shelf),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6130).
holds_at(plan(Agent, Belief, p2), Time), holds_at(not(believe(Agent, Belief)), Time), soundPlan(Agent, Belief, p2, Time) ->
    happens_at(jump(cat, chair, shelf), Time).


%; A9
% [agent,belief,plan,time]
% HoldsAt(Plan(agent,belief,plan),time) ->
% Happens(DropPlan(agent,belief,plan),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6136).
holds_at(plan(Agent, Belief, Plan), Time) ->
    happens_at(dropPlan(Agent, Belief, Plan), Time).


%; A10
% [agent,belief,time]
% HoldsAt(Plan(agent,belief,P1),time) &
% !HoldsAt(Believe(agent,belief),time) &
% SoundPlan(agent,belief,P1,time) ->
% Happens(AddPlan(agent,belief,P1a),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6141).
holds_at(plan(Agent, Belief, p1), Time), holds_at(not(believe(Agent, Belief)), Time), soundPlan(Agent, Belief, p1, Time) ->
    happens_at(addPlan(Agent, Belief, p1a), Time).


% [agent,belief,time]
% HoldsAt(Plan(agent,belief,P1a),time) &
% !HoldsAt(Believe(agent,belief),time) &
% SoundPlan(agent,belief,P1a,time) ->
% Happens(AddPlan(agent,belief,P1b),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6148).
holds_at(plan(Agent, Belief, p1a), Time), holds_at(not(believe(Agent, Belief)), Time), soundPlan(Agent, Belief, p1a, Time) ->
    happens_at(addPlan(Agent, Belief, p1b), Time).


% [agent,belief,time]
% HoldsAt(Plan(agent,belief,P2),time) &
% !HoldsAt(Believe(agent,belief),time) &
% SoundPlan(agent,belief,P2,time) ->
% Happens(AddPlan(agent,belief,P2a),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6154).
holds_at(plan(Agent, Belief, p2), Time), holds_at(not(believe(Agent, Belief)), Time), soundPlan(Agent, Belief, p2, Time) ->
    happens_at(addPlan(Agent, Belief, p2a), Time).


%; reactive behavior
% [agent,food,surface,time]
% !HoldsAt(Satiated(agent),time) &
% HoldsAt(On(agent,surface),time) &
% HoldsAt(On(food,surface),time) ->
% Happens(Eat(agent,food),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6160).
holds_at(not(satiated(Agent)), Time), holds_at(on(Agent, Surface), Time), holds_at(on(Food, Surface), Time) ->
    happens_at(eat(Agent, Food), Time).


%; narrative


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6168).
% Happens(Move(Chair,Table,Shelf),2).
happens_at(move(chair,table,shelf),2).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6170).
%; SelectedPlan - plan library
%;[agent,belief,plan,time]
%;SelectedPlan(agent,belief,plan,time) <->
%;(agent=Cat & belief=BSatiated(Cat) & plan=P1 & time=0) |
%;(agent=Cat & belief=BSatiated(Cat) & plan=P2 & time=4).
% [agent,belief,plan,time]
% SelectedPlan(agent,belief,plan,time) <->
% ({surface1,surface2,surface3,food}
%  HoldsAt(Believe(agent,BOn(agent,surface1)),time) &
%  HoldsAt(Believe(agent,BCanJump(surface1,surface2)),time) &
%  HoldsAt(Believe(agent,BCanJump(surface2,surface3)),time) &
%  HoldsAt(Believe(agent,BOn(food,surface3)),time) &
%  belief=BSatiated(agent) &
%  plan=P1 &
%  time=0) |
% ({surface1,surface2,surface3,food}
%  HoldsAt(Believe(agent,BOn(agent,surface1)),time) &
%  HoldsAt(Believe(agent,BCanJump(surface1,surface2)),time) &
%  HoldsAt(Believe(agent,BCanJump(surface2,surface3)),time) &
%  HoldsAt(Believe(agent,BOn(food,surface3)),time) &
%  belief=BSatiated(agent) &
%  plan=P2 &
%  time=4).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6177).
selectedPlan(Agent, Belief, Plan, Time) <->
    (   exists([Surface1, Surface2, Surface3, Food],
                (holds_at(believe(Agent, bOn(Agent, Surface1)), Time), holds_at(believe(Agent, bCanJump(Surface1, Surface2)), Time), holds_at(believe(Agent, bCanJump(Surface2, Surface3)), Time), holds_at(believe(Agent, bOn(Food, Surface3)), Time), Belief=bSatiated(Agent), Plan=p1, Time=0))
    ;   exists([Surface18, Surface29, Surface310, Food11],
                (holds_at(believe(Agent, bOn(Agent, Surface18)), Time), holds_at(believe(Agent, bCanJump(Surface18, Surface29)), Time), holds_at(believe(Agent, bCanJump(Surface29, Surface310)), Time), holds_at(believe(Agent, bOn(Food11, Surface310)), Time), Belief=bSatiated(Agent), Plan=p2, Time=4))
    ).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6197).
%; SoundPlan
% [agent,belief,plan,time]
% SoundPlan(agent,belief,plan,time) <->
% (plan=P1 ->
%  HoldsAt(Believe(agent,BCanJump(Floor,Chair)),time) &
%  HoldsAt(Believe(agent,BCanJump(Chair,Table)),time)) &
% ((plan=P1a | plan=P1b) ->
%   HoldsAt(Believe(agent,BCanJump(Chair,Table)),time)).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6199).
<->(soundPlan(Agent, Belief, Plan, Time),  ((Plan=p1->holds_at(believe(Agent, bCanJump(floor, chair)), Time), holds_at(believe(Agent, bCanJump(chair, table)), Time)), (Plan=p1a;Plan=p1b->holds_at(believe(Agent, bCanJump(chair, table)), Time)))).


%; Gamma
% [agent,belief]
% HoldsAt(Goal(agent,belief),0) <->
% (agent=Cat & belief=BSatiated(Cat)).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6209).
holds_at(goal(Agent, Belief), 0) <->
    Agent=cat,
    Belief=bSatiated(cat).


% [agent,belief,plan]
 % !HoldsAt(Plan(agent,belief,plan),0).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6212).
holds_at(not(plan(Agent,Belief,Plan)),0).


% [object,surface]
 % HoldsAt(On(object,surface),0) <->
% (object=Cat & surface=Floor) |
% (object=Food1 & surface=Table) |
% (object=Food2 & surface=Shelf).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6214).
holds_at(on(Object, Surface), 0) <->
    (   Object=cat,
        Surface=floor
    ;   Object=food1,
        Surface=(table)
    ;   Object=food2,
        Surface=shelf
    ).


% [surface1,surface2]
 % HoldsAt(CanJump(surface1,surface2),0) <->
% (surface1=Floor & surface2=Chair) |
% (surface1=Chair & surface2=Table) |
% (surface1=Shelf & surface2=Table).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6219).
holds_at(canJump(Surface1, Surface2), 0) <->
    (   Surface1=floor,
        Surface2=chair
    ;   Surface1=chair,
        Surface2=(table)
    ;   Surface1=shelf,
        Surface2=(table)
    ).


% [agent,object,surface]
% HoldsAt(Believe(agent,BOn(object,surface)),0) <->
% (agent=Cat & object=Cat & surface=Floor) |
% (agent=Cat & object=Food1 & surface=Table).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6226).
holds_at(believe(Agent, bOn(Object, Surface)), 0) <->
    (   Agent=cat,
        Object=cat,
        Surface=floor
    ;   Agent=cat,
        Object=food1,
        Surface=(table)
    ).


% [agent,surface1,surface2]
% HoldsAt(Believe(agent,BCanJump(surface1,surface2)),0) <->
% (agent=Cat & surface1=Floor & surface2=Chair) |
% (agent=Cat & surface1=Chair & surface2=Table) |
% (agent=Cat & surface1=Shelf & surface2=Table).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6231).
holds_at(believe(Agent, bCanJump(Surface1, Surface2)), 0) <->
    (   Agent=cat,
        Surface1=floor,
        Surface2=chair
    ;   Agent=cat,
        Surface1=chair,
        Surface2=(table)
    ;   Agent=cat,
        Surface1=shelf,
        Surface2=(table)
    ).


% !HoldsAt(Believe(Cat,BSatiated(Cat)),0).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6235).
holds_at(not(believe(cat,bSatiated(cat))),0).


%; ADDED:


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6239).
% !HoldsAt(Satiated(Cat),0).
holds_at(not(satiated(cat)),0).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6241).
% completion Happens
:- call_pel_directive(completion(happens_at)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6243).
% range time 0 7
:- call_pel_directive(range(time, 0, 7)).

% range offset 1 1
:- call_pel_directive(range(offset, 1, 1)).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter11/Lottery.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{OrtonyCloreCollins:1988,
%;   author = "Andrew Ortony and Gerald L. Clore and Allan M. Collins",
%;   year = "1988",
%;   title = "The Cognitive Structure of Emotions",
%;   address = "Cambridge",
%;   publisher = "Cambridge University Press",
%; }
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6280).
% option modeldiff on
:- call_pel_directive(option(modeldiff, on)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6282).
% load foundations/Root.e
:- call_pel_directive(load('foundations/Root.e')).

% load foundations/EC.e
:- call_pel_directive(load('foundations/EC.e')).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6285).
% sort agent
sort(agent).

% sort aboutevent
sort(aboutevent).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6287).
% sort desirability: integer
subsort(desirability,integer).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6289).
% agent Kate, Lisa
t(agent,kate).
t(agent,lisa).

% aboutevent WinLotteryKate, WinLotteryLisa
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6289).
t(aboutevent,winLotteryKate).
t(aboutevent,winLotteryLisa).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6292).
% fluent Joy(agent,aboutevent)
fluent(joy(agent,aboutevent)).

% fluent Desirability(agent,agent,aboutevent,desirability)
fluent(desirability(agent,agent,aboutevent,desirability)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6294).
% fluent Believe(agent,aboutevent)
fluent(believe(agent,aboutevent)).

% fluent Like(agent,agent)
fluent(like(agent,agent)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6296).
% fluent HappyFor(agent,agent,aboutevent)
fluent(happyFor(agent,agent,aboutevent)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6298).
% event WinLottery(agent)
event(winLottery(agent)).

% event AddJoy(agent,aboutevent)
event(addJoy(agent,aboutevent)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6300).
% event AddHappyFor(agent,agent,aboutevent)
event(addHappyFor(agent,agent,aboutevent)).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6302).
%; Sigma
% [agent,aboutevent,time]
% Initiates(AddJoy(agent,aboutevent),Joy(agent,aboutevent),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6304).
initiates_at(addJoy(Agent,Aboutevent),
	     joy(Agent,Aboutevent),
	     Time).


% [agent1,agent2,aboutevent,time]
% Initiates(AddHappyFor(agent1,agent2,aboutevent),
%           HappyFor(agent1,agent2,aboutevent),
%           time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6308).
initiates_at(addHappyFor(Agent1,Agent2,Aboutevent),
	     happyFor(Agent1,Agent2,Aboutevent),
	     Time).


% [agent1,agent2,aboutevent,time]
% (agent1=Kate & aboutevent=WinLotteryKate) |
% (agent1=Lisa & aboutevent=WinLotteryLisa) ->
% Initiates(WinLottery(agent1),Believe(agent2,aboutevent),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6313).
Agent1=kate, Aboutevent=winLotteryKate;Agent1=lisa, Aboutevent=winLotteryLisa ->
    initiates_at(winLottery(Agent1),
                 believe(Agent2, Aboutevent),
                 Time).


%; Delta
% [agent,aboutevent,desirability,time]
% !HoldsAt(Joy(agent,aboutevent),time) &
% HoldsAt(Desirability(agent,agent,aboutevent,desirability),time) &
% desirability=1 &
% HoldsAt(Believe(agent,aboutevent),time) ->
% Happens(AddJoy(agent,aboutevent),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6319).
holds_at(not(joy(Agent, Aboutevent)), Time), holds_at(desirability(Agent, Agent, Aboutevent, Desirability), Time), Desirability=1, holds_at(believe(Agent, Aboutevent), Time) ->
    happens_at(addJoy(Agent, Aboutevent), Time).


% [agent1,agent2,aboutevent,desirability1,desirability2,time]
% !HoldsAt(HappyFor(agent1,agent2,aboutevent),time) &
% HoldsAt(Desirability(agent1,agent2,aboutevent,desirability1),time) &
% desirability1=1 &
% HoldsAt(Desirability(agent1,agent1,aboutevent,desirability2),time) &
% desirability2=1 &
% HoldsAt(Like(agent1,agent2),time) &
% HoldsAt(Believe(agent1,aboutevent),time) &
% agent1 != agent2 ->
% Happens(AddHappyFor(agent1,agent2,aboutevent),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6327).
holds_at(not(happyFor(Agent1, Agent2, Aboutevent)), Time), holds_at(desirability(Agent1, Agent2, Aboutevent, Desirability1), Time), Desirability1=1, holds_at(desirability(Agent1, Agent1, Aboutevent, Desirability2), Time), Desirability2=1, holds_at(like(Agent1, Agent2), Time), holds_at(believe(Agent1, Aboutevent), Time), Agent1\=Agent2 ->
    happens_at(addHappyFor(Agent1, Agent2, Aboutevent),
               Time).


% Happens(WinLottery(Kate),0).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6336).
happens_at(winLottery(kate),0).


%; Psi
% [agent1,agent2,aboutevent,desirability1,desirability2,time]
% HoldsAt(Desirability(agent1,agent2,aboutevent,desirability1),time) &
% HoldsAt(Desirability(agent1,agent2,aboutevent,desirability2),time) ->
% desirability1 = desirability2.
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6341).
holds_at(desirability(Agent1, Agent2, Aboutevent, Desirability1), Time), holds_at(desirability(Agent1, Agent2, Aboutevent, Desirability2), Time) ->
    Desirability1=Desirability2.


%; Gamma
% [agent,aboutevent]
 % !HoldsAt(Joy(agent,aboutevent),0).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6348).
holds_at(not(joy(Agent,Aboutevent)),0).


% [agent1,agent2,aboutevent]
 % !HoldsAt(HappyFor(agent1,agent2,aboutevent),0).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6348).
holds_at(not(happyFor(Agent1,Agent2,Aboutevent)),0).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6350).
% [aboutevent]
 % !HoldsAt(Believe(Kate,aboutevent),0).
holds_at(not(believe(kate,Aboutevent)),0).


% [aboutevent]
 % !HoldsAt(Believe(Lisa,aboutevent),0).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6350).
holds_at(not(believe(lisa,Aboutevent)),0).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6352).
% [agent1,agent2,time]
 % HoldsAt(Like(agent1,agent2),time).
holds_at(like(Agent1,Agent2),Time).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6354).
% [time]
 % HoldsAt(Desirability(Lisa,Kate,WinLotteryKate,1),time).
holds_at(desirability(lisa,kate,winLotteryKate,1),Time).


% [time]
 % HoldsAt(Desirability(Kate,Kate,WinLotteryKate,1),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6354).
holds_at(desirability(kate,kate,winLotteryKate,1),Time).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6356).
% [time]
 % HoldsAt(Desirability(Lisa,Lisa,WinLotteryKate,1),time).
holds_at(desirability(lisa,lisa,winLotteryKate,1),Time).


% [time]
 % HoldsAt(Desirability(Kate,Kate,WinLotteryLisa,0),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6356).
holds_at(desirability(kate,kate,winLotteryLisa,0),Time).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6358).
% [time]
 % HoldsAt(Desirability(Kate,Lisa,WinLotteryLisa,0),time).
holds_at(desirability(kate,lisa,winLotteryLisa,0),Time).


% [time]
 % HoldsAt(Desirability(Kate,Kate,WinLotteryLisa,0),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6358).
holds_at(desirability(kate,kate,winLotteryLisa,0),Time).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6360).
% [time]
 % HoldsAt(Desirability(Kate,Lisa,WinLotteryKate,0),time).
holds_at(desirability(kate,lisa,winLotteryKate,0),Time).


% [time]
 % HoldsAt(Desirability(Lisa,Lisa,WinLotteryLisa,0),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6360).
holds_at(desirability(lisa,lisa,winLotteryLisa,0),Time).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6362).
% [time]
 % HoldsAt(Desirability(Lisa,Kate,WinLotteryLisa,1),time).
holds_at(desirability(lisa,kate,winLotteryLisa,1),Time).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6364).
% completion Happens
:- call_pel_directive(completion(happens_at)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6366).
% range time 0 3
:- call_pel_directive(range(time, 0, 3)).

% range desirability -1 1
:- call_pel_directive(range(desirability, -1, 1)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6368).
% range offset 1 1
:- call_pel_directive(range(offset, 1, 1)).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Manual/Example1a.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; deduction

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6389).
% option timediff off
:- call_pel_directive(option(timediff, off)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6391).
% load foundations/Root.e
:- call_pel_directive(load('foundations/Root.e')).

% load foundations/EC.e
:- call_pel_directive(load('foundations/EC.e')).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6394).
% sort agent
sort(agent).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6396).
% fluent Awake(agent)
fluent(awake(agent)).

% event WakeUp(agent)
event(wakeUp(agent)).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6399).
% [agent,time]
 % Initiates(WakeUp(agent),Awake(agent),time).
initiates_at(wakeUp(Agent),awake(Agent),Time).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6401).
% agent James
t(agent,james).


% !HoldsAt(Awake(James),0).
holds_at(not(awake(james)),0).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6403).
% Delta: 
directive(delta).
 


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6403).
% Happens(WakeUp(James),0).
happens_at(wakeUp(james),0).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6405).
% completion Delta Happens
:- call_pel_directive(completion(delta)).
:- call_pel_directive(completion(happens_at)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6407).
% range time 0 1
:- call_pel_directive(range(time, 0, 1)).

% range offset 1 1
:- call_pel_directive(range(offset, 1, 1)).
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Manual/Example1.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; deduction

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6427).
% load foundations/Root.e
:- call_pel_directive(load('foundations/Root.e')).

% load foundations/EC.e
:- call_pel_directive(load('foundations/EC.e')).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6430).
% sort agent
sort(agent).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6432).
% fluent Awake(agent)
fluent(awake(agent)).

% event WakeUp(agent)
event(wakeUp(agent)).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6435).
% [agent,time]
 % Initiates(WakeUp(agent),Awake(agent),time).
initiates_at(wakeUp(Agent),awake(Agent),Time).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6437).
% agent James
t(agent,james).


% !HoldsAt(Awake(James),0).
holds_at(not(awake(james)),0).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6439).
% Delta: 
directive(delta).
 


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6439).
% Happens(WakeUp(James),0).
happens_at(wakeUp(james),0).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6441).
% completion Delta Happens
:- call_pel_directive(completion(delta)).
:- call_pel_directive(completion(happens_at)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6443).
% range time 0 1
:- call_pel_directive(range(time, 0, 1)).

% range offset 1 1
:- call_pel_directive(range(offset, 1, 1)).
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Manual/Example4.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6461).
% load foundations/Root.e
:- call_pel_directive(load('foundations/Root.e')).

% load foundations/EC.e
:- call_pel_directive(load('foundations/EC.e')).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6464).
% sort agent
sort(agent).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6466).
% fluent Awake(agent)
fluent(awake(agent)).

% event WakeUp(agent)
event(wakeUp(agent)).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6469).
% [agent,time]
 % Initiates(WakeUp(agent),Awake(agent),time).
initiates_at(wakeUp(Agent),awake(Agent),Time).


% [agent,time]
 % Happens(WakeUp(agent),time) -> !HoldsAt(Awake(agent),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6469).
happens_at(wakeUp(Agent), Time) ->
    holds_at(not(awake(Agent)), Time).

% agent James, Jessie
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6471).
t(agent,james).
t(agent,jessie).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6473).
% !HoldsAt(Awake(James),0).
holds_at(not(awake(james)),0).


% !HoldsAt(Awake(Jessie),0).
holds_at(not(awake(jessie)),0).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6475).
% HoldsAt(Awake(James),1).
holds_at(awake(james),1).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6477).
% range time 0 1
:- call_pel_directive(range(time, 0, 1)).

% range offset 1 1
:- call_pel_directive(range(offset, 1, 1)).
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Manual/Example3.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6495).
% load foundations/Root.e
:- call_pel_directive(load('foundations/Root.e')).

% load foundations/EC.e
:- call_pel_directive(load('foundations/EC.e')).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6498).
% sort agent
sort(agent).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6500).
% fluent Awake(agent)
fluent(awake(agent)).

% event WakeUp(agent)
event(wakeUp(agent)).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6503).
% [agent,time]
 % Initiates(WakeUp(agent),Awake(agent),time).
initiates_at(wakeUp(Agent),awake(Agent),Time).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6505).
% agent James, Jessie
t(agent,james).
t(agent,jessie).


% !HoldsAt(Awake(James),0).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6505).
holds_at(not(awake(james)),0).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6507).
% HoldsAt(Awake(James),1).
holds_at(awake(james),1).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6509).
% range time 0 1
:- call_pel_directive(range(time, 0, 1)).

% range offset 1 1
:- call_pel_directive(range(offset, 1, 1)).
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Manual/Example2.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6527).
% load foundations/Root.e
:- call_pel_directive(load('foundations/Root.e')).

% load foundations/EC.e
:- call_pel_directive(load('foundations/EC.e')).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6530).
% sort agent
sort(agent).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6532).
% fluent Awake(agent)
fluent(awake(agent)).

% event WakeUp(agent)
event(wakeUp(agent)).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6535).
% [agent,time]
 % Initiates(WakeUp(agent),Awake(agent),time).
initiates_at(wakeUp(Agent),awake(Agent),Time).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6537).
% agent James
t(agent,james).


% !HoldsAt(Awake(James),0).
holds_at(not(awake(james)),0).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6539).
% HoldsAt(Awake(James),1).
holds_at(awake(james),1).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6541).
% range time 0 1
:- call_pel_directive(range(time, 0, 1)).

% range offset 1 1
:- call_pel_directive(range(offset, 1, 1)).
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2004b/RunningAndDriving2.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @inproceedings{Mueller:2004b,
%;   author = "Erik T. Mueller",
%;   year = "2004",
%;   title = "A tool for satisfiability-based commonsense reasoning in the event calculus",
%;   editor = "Valerie Barr and Zdravko Markov",
%;   booktitle = "\uppercase{P}roceedings of the \uppercase{S}eventeenth \uppercase{I}nternational \uppercase{F}lorida \uppercase{A}rtificial \uppercase{I}ntelligence \uppercase{R}esearch \uppercase{S}ociety \uppercase{C}onference",
%;   pages = "147--152",
%;   address = "Menlo Park, CA",
%;   publisher = "AAAI Press",
%; }
%;

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6571).
% load foundations/Root.e
:- call_pel_directive(load('foundations/Root.e')).

% load foundations/EC.e
:- call_pel_directive(load('foundations/EC.e')).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6574).
% sort agent
sort(agent).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6576).
% fluent Tired(agent)
fluent(tired(agent)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6578).
% event Move(agent)
event(move(agent)).

% event Run(agent)
event(run(agent)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6580).
% event Drive(agent)
event(drive(agent)).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6582).
% [agent,time]
% Happens(Move(agent),time) ->
% Happens(Run(agent),time) | Happens(Drive(agent),time).
happens_at(move(Agent), Time) ->
    (   happens_at(run(Agent), Time)
    ;   happens_at(drive(Agent), Time)
    ).

% xor Run, Drive
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6585).
xor([run,drive]).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6588).
% [agent,time]
 % Initiates(Run(agent),Tired(agent),time).
initiates_at(run(Agent),tired(Agent),Time).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6590).
% agent James
t(agent,james).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6592).
% !HoldsAt(Tired(James),0).
holds_at(not(tired(james)),0).


% Happens(Move(James),0).
happens_at(move(james),0).

% range time 0 1
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6594).
:- call_pel_directive(range(time, 0, 1)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6596).
% range offset 1 1
:- call_pel_directive(range(offset, 1, 1)).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2004b/OffOn.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @inproceedings{Mueller:2004b,
%;   author = "Erik T. Mueller",
%;   year = "2004",
%;   title = "A tool for satisfiability-based commonsense reasoning in the event calculus",
%;   editor = "Valerie Barr and Zdravko Markov",
%;   booktitle = "\uppercase{P}roceedings of the \uppercase{S}eventeenth \uppercase{I}nternational \uppercase{F}lorida \uppercase{A}rtificial \uppercase{I}ntelligence \uppercase{R}esearch \uppercase{S}ociety \uppercase{C}onference",
%;   pages = "147--152",
%;   address = "Menlo Park, CA",
%;   publisher = "AAAI Press",
%; }
%;

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6627).
% load foundations/Root.e
:- call_pel_directive(load('foundations/Root.e')).

% load foundations/EC.e
:- call_pel_directive(load('foundations/EC.e')).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6630).
% sort agent
sort(agent).

% sort switch
sort(switch).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6633).
% fluent On(switch)
fluent(on(switch)).

% fluent Off(switch)
fluent(off(switch)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6635).
% event TurnOn(agent,switch)
event(turnOn(agent,switch)).

% event TurnOff(agent,switch)
event(turnOff(agent,switch)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6638).
% noninertial Off
:- call_pel_directive(noninertial(off)).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6640).
% [switch,time]
 % HoldsAt(Off(switch),time) <-> !HoldsAt(On(switch),time).
holds_at(off(Switch), Time) <->
    holds_at(not(on(Switch)), Time).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6642).
% [agent,switch,time]
 % Initiates(TurnOn(agent,switch),On(switch),time).
initiates_at(turnOn(Agent,Switch),
	     on(Switch),
	     Time).


% [agent,switch,time]
 % Terminates(TurnOff(agent,switch),On(switch),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6642).
terminates_at(turnOff(Agent,Switch),
	      on(Switch),
	      Time).

% agent James
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6644).
t(agent,james).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6646).
% switch Switch1
t(switch,switch1).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6648).
% !HoldsAt(On(Switch1),0).
holds_at(not(on(switch1)),0).


% Happens(TurnOn(James,Switch1),0).
happens_at(turnOn(james,switch1),0).

% range time 0 1
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6650).
:- call_pel_directive(range(time, 0, 1)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6652).
% range offset 1 1
:- call_pel_directive(range(offset, 1, 1)).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2004b/TV2.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @inproceedings{Mueller:2004b,
%;   author = "Erik T. Mueller",
%;   year = "2004",
%;   title = "A tool for satisfiability-based commonsense reasoning in the event calculus",
%;   editor = "Valerie Barr and Zdravko Markov",
%;   booktitle = "\uppercase{P}roceedings of the \uppercase{S}eventeenth \uppercase{I}nternational \uppercase{F}lorida \uppercase{A}rtificial \uppercase{I}ntelligence \uppercase{R}esearch \uppercase{S}ociety \uppercase{C}onference",
%;   pages = "147--152",
%;   address = "Menlo Park, CA",
%;   publisher = "AAAI Press",
%; }
%;

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6683).
% load foundations/Root.e
:- call_pel_directive(load('foundations/Root.e')).

% load foundations/EC.e
:- call_pel_directive(load('foundations/EC.e')).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6686).
% sort agent
sort(agent).

% sort switch
sort(switch).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6688).
% sort tv
sort(tv).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6690).
% function TVOf(switch): tv
function(tVOf(switch),tv).

% fluent SwitchOn(switch)
fluent(switchOn(switch)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6692).
% fluent TVOn(tv)
fluent(tVOn(tv)).

% fluent PluggedIn(tv)
fluent(pluggedIn(tv)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6694).
% event TurnOn(agent,switch)
event(turnOn(agent,switch)).

% event TurnOff(agent,switch)
event(turnOff(agent,switch)).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6697).
% [agent,switch,time]
 % Initiates(TurnOn(agent,switch),SwitchOn(switch),time).
initiates_at(turnOn(Agent,Switch),
	     switchOn(Switch),
	     Time).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6699).
% [agent,switch,tv,time]
% TVOf(switch)=tv & HoldsAt(PluggedIn(tv),time) ->
% Initiates(TurnOn(agent,switch),TVOn(tv),time).
tVOf(Switch)=Tv, holds_at(pluggedIn(Tv), Time) ->
    initiates_at(turnOn(Agent, Switch), tVOn(Tv), Time).

% agent James
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6702).
t(agent,james).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6704).
% switch Switch1
t(switch,switch1).

% tv TV1
t(tv,tv1).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6707).
% TVOf(Switch1)=TV1.
tVOf(switch1)=tv1.


% !HoldsAt(PluggedIn(TV1),0).
holds_at(not(pluggedIn(tv1)),0).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6709).
% !HoldsAt(SwitchOn(Switch1),0).
holds_at(not(switchOn(switch1)),0).


% !HoldsAt(TVOn(TV1),0).
holds_at(not(tVOn(tv1)),0).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6711).
% Happens(TurnOn(James,Switch1),0).
happens_at(turnOn(james,switch1),0).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6713).
% range time 0 1
:- call_pel_directive(range(time, 0, 1)).

% range offset 1 1
:- call_pel_directive(range(offset, 1, 1)).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2004b/Approve.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; example of concurrent events with cumulative or canceling effects
%;
%; @inproceedings{Mueller:2004b,
%;   author = "Erik T. Mueller",
%;   year = "2004",
%;   title = "A tool for satisfiability-based commonsense reasoning in the event calculus",
%;   editor = "Valerie Barr and Zdravko Markov",
%;   booktitle = "\uppercase{P}roceedings of the \uppercase{S}eventeenth \uppercase{I}nternational \uppercase{F}lorida \uppercase{A}rtificial \uppercase{I}ntelligence \uppercase{R}esearch \uppercase{S}ociety \uppercase{C}onference",
%;   pages = "147--152",
%;   address = "Menlo Park, CA",
%;   publisher = "AAAI Press",
%; }
%;

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6747).
% load foundations/Root.e
:- call_pel_directive(load('foundations/Root.e')).

% load foundations/EC.e
:- call_pel_directive(load('foundations/EC.e')).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6750).
% sort agent
sort(agent).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6752).
% event ApproveOf(agent,agent)
event(approveOf(agent,agent)).

% event DisapproveOf(agent,agent)
event(disapproveOf(agent,agent)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6754).
% fluent Happy(agent)
fluent(happy(agent)).

% fluent Confused(agent)
fluent(confused(agent)).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6757).
% [agent1,agent2,time]
% !Happens(DisapproveOf(agent1,agent2),time) ->
% Initiates(ApproveOf(agent1,agent2),Happy(agent2),time).
not(happens_at(disapproveOf(Agent1, Agent2), Time)) ->
    initiates_at(approveOf(Agent1, Agent2),
                 happy(Agent2),
                 Time).


% [agent1,agent2,time]
% !Happens(ApproveOf(agent1,agent2),time) ->
% Terminates(DisapproveOf(agent1,agent2),Happy(agent2),time).
not(happens_at(approveOf(Agent1, Agent2), Time)) ->
    terminates_at(disapproveOf(Agent1, Agent2),
                  happy(Agent2),
                  Time).


% [agent1,agent2,time]
% Happens(DisapproveOf(agent1,agent2),time) ->
% Initiates(ApproveOf(agent1,agent2),Confused(agent2),time).
happens_at(disapproveOf(Agent1, Agent2), Time) ->
    initiates_at(approveOf(Agent1, Agent2),
                 confused(Agent2),
                 Time).

% agent James, Peter
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6768).
t(agent,james).
t(agent,peter).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6771).
% [agent]
 % !HoldsAt(Happy(agent),0) & !HoldsAt(Confused(agent),0).
holds_at(not(happy(Agent)), 0),
holds_at(not(confused(Agent)), 0).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6773).
% Happens(ApproveOf(Peter,James),0).
happens_at(approveOf(peter,james),0).


% Happens(DisapproveOf(Peter,James),0).
happens_at(disapproveOf(peter,james),0).

% completion Happens
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6775).
:- call_pel_directive(completion(happens_at)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6778).
% range time 0 1
:- call_pel_directive(range(time, 0, 1)).

% range offset 1 1
:- call_pel_directive(range(offset, 1, 1)).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2004b/Leaf.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @inproceedings{Mueller:2004b,
%;   author = "Erik T. Mueller",
%;   year = "2004",
%;   title = "A tool for satisfiability-based commonsense reasoning in the event calculus",
%;   editor = "Valerie Barr and Zdravko Markov",
%;   booktitle = "\uppercase{P}roceedings of the \uppercase{S}eventeenth \uppercase{I}nternational \uppercase{F}lorida \uppercase{A}rtificial \uppercase{I}ntelligence \uppercase{R}esearch \uppercase{S}ociety \uppercase{C}onference",
%;   pages = "147--152",
%;   address = "Menlo Park, CA",
%;   publisher = "AAAI Press",
%; }
%;

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6810).
% option trajectory on
:- call_pel_directive(option(trajectory, on)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6812).
% load foundations/Root.e
:- call_pel_directive(load('foundations/Root.e')).

% load foundations/EC.e
:- call_pel_directive(load('foundations/EC.e')).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6815).
% sort object
sort(object).

% sort height: integer
subsort(height,integer).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6818).
% fluent Height(object,height)
fluent(height(object,height)).

% fluent Falling(object)
fluent(falling(object)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6820).
% event StartFalling(object)
event(startFalling(object)).

% event HitsGround(object)
event(hitsGround(object)).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6823).
% [object,height1,height2,time]
% HoldsAt(Height(object,height1),time) &
% HoldsAt(Height(object,height2),time) ->
% height1=height2.
holds_at(height(Object, Height1), Time), holds_at(height(Object, Height2), Time) ->
    Height1=Height2.


% [object,time]
% Initiates(StartFalling(object),Falling(object),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6829).
initiates_at(startFalling(Object),
	     falling(Object),
	     Time).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6831).
% [object,height,time]
% Releases(StartFalling(object),Height(object,height),time).
releases_at(startFalling(Object),
	    height(Object,Height),
	    Time).


% [object,height1,height2,offset,time]
% HoldsAt(Height(object,height1),time) &
% height2=height1-offset ->
% Trajectory(Falling(object),time,Height(object,height2),offset).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6835).
holds_at(height(Object, Height1), Time), Height2=Height1-Offset ->
    trajectory(falling(Object),
               Time,
               height(Object, Height2),
               Offset).


% [object,time]
% HoldsAt(Falling(object),time) &
% HoldsAt(Height(object,0),time) ->
% Happens(HitsGround(object),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6840).
holds_at(falling(Object), Time), holds_at(height(Object, 0), Time) ->
    happens_at(hitsGround(Object), Time).


%;[object,height1,height2,time]
%;HoldsAt(Height(object,height1),time) &
%;height1 != height2 ->
%;Terminates(HitsGround(object),Height(object,height2),time).
% [object,height,time]
% HoldsAt(Height(object,height),time) ->
% Initiates(HitsGround(object),Height(object,height),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6849).
holds_at(height(Object, Height), Time) ->
    initiates_at(hitsGround(Object),
                 height(Object, Height),
                 Time).


% [object,time]
% Terminates(HitsGround(object),Falling(object),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6854).
terminates_at(hitsGround(Object),
	      falling(Object),
	      Time).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6856).
% object Leaf
t(object,leaf).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6858).
% !HoldsAt(Falling(Leaf),0).
holds_at(not(falling(leaf)),0).


% HoldsAt(Height(Leaf,4),0).
holds_at(height(leaf,4),0).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6860).
% Happens(StartFalling(Leaf),2).
happens_at(startFalling(leaf),2).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6862).
% completion Happens
:- call_pel_directive(completion(happens_at)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6864).
% range time 0 7
:- call_pel_directive(range(time, 0, 7)).

% range offset 1 4
:- call_pel_directive(range(offset, 1, 4)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6866).
% range height 0 4
:- call_pel_directive(range(height, 0, 4)).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2004b/RunningAndDriving1.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @inproceedings{Mueller:2004b,
%;   author = "Erik T. Mueller",
%;   year = "2004",
%;   title = "A tool for satisfiability-based commonsense reasoning in the event calculus",
%;   editor = "Valerie Barr and Zdravko Markov",
%;   booktitle = "\uppercase{P}roceedings of the \uppercase{S}eventeenth \uppercase{I}nternational \uppercase{F}lorida \uppercase{A}rtificial \uppercase{I}ntelligence \uppercase{R}esearch \uppercase{S}ociety \uppercase{C}onference",
%;   pages = "147--152",
%;   address = "Menlo Park, CA",
%;   publisher = "AAAI Press",
%; }
%;

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6897).
% load foundations/Root.e
:- call_pel_directive(load('foundations/Root.e')).

% load foundations/EC.e
:- call_pel_directive(load('foundations/EC.e')).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6900).
% sort agent
sort(agent).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6902).
% fluent Tired(agent)
fluent(tired(agent)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6904).
% event Move(agent)
event(move(agent)).

% event Run(agent)
event(run(agent)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6906).
% event Drive(agent)
event(drive(agent)).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6908).
% [agent,time]
% Happens(Move(agent),time) ->
% Happens(Run(agent),time) | Happens(Drive(agent),time).
happens_at(move(Agent), Time) ->
    (   happens_at(run(Agent), Time)
    ;   happens_at(drive(Agent), Time)
    ).

% xor Run, Drive
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6911).
xor([run,drive]).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6914).
% [agent,time]
 % Initiates(Run(agent),Tired(agent),time).
initiates_at(run(Agent),tired(Agent),Time).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6916).
% agent James
t(agent,james).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6918).
% !HoldsAt(Tired(James),0).
holds_at(not(tired(james)),0).


% Happens(Move(James),0).
happens_at(move(james),0).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6920).
% HoldsAt(Tired(James),1).
holds_at(tired(james),1).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6922).
% range time 0 1
:- call_pel_directive(range(time, 0, 1)).

% range offset 1 1
:- call_pel_directive(range(offset, 1, 1)).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2004b/TV1.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @inproceedings{Mueller:2004b,
%;   author = "Erik T. Mueller",
%;   year = "2004",
%;   title = "A tool for satisfiability-based commonsense reasoning in the event calculus",
%;   editor = "Valerie Barr and Zdravko Markov",
%;   booktitle = "\uppercase{P}roceedings of the \uppercase{S}eventeenth \uppercase{I}nternational \uppercase{F}lorida \uppercase{A}rtificial \uppercase{I}ntelligence \uppercase{R}esearch \uppercase{S}ociety \uppercase{C}onference",
%;   pages = "147--152",
%;   address = "Menlo Park, CA",
%;   publisher = "AAAI Press",
%; }
%;

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6954).
% load foundations/Root.e
:- call_pel_directive(load('foundations/Root.e')).

% load foundations/EC.e
:- call_pel_directive(load('foundations/EC.e')).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6957).
% sort agent
sort(agent).

% sort switch
sort(switch).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6959).
% sort tv
sort(tv).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6961).
% function TVOf(switch): tv
function(tVOf(switch),tv).

% fluent SwitchOn(switch)
fluent(switchOn(switch)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6963).
% fluent TVOn(tv)
fluent(tVOn(tv)).

% fluent PluggedIn(tv)
fluent(pluggedIn(tv)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6965).
% event TurnOn(agent,switch)
event(turnOn(agent,switch)).

% event TurnOff(agent,switch)
event(turnOff(agent,switch)).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6968).
% [agent,switch,time]
 % Initiates(TurnOn(agent,switch),SwitchOn(switch),time).
initiates_at(turnOn(Agent,Switch),
	     switchOn(Switch),
	     Time).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6970).
% [agent,switch,tv,time]
% TVOf(switch)=tv & HoldsAt(PluggedIn(tv),time) ->
% Initiates(TurnOn(agent,switch),TVOn(tv),time).
tVOf(Switch)=Tv, holds_at(pluggedIn(Tv), Time) ->
    initiates_at(turnOn(Agent, Switch), tVOn(Tv), Time).

% agent James
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6973).
t(agent,james).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6975).
% switch Switch1
t(switch,switch1).

% tv TV1
t(tv,tv1).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6978).
% TVOf(Switch1)=TV1.
tVOf(switch1)=tv1.


% HoldsAt(PluggedIn(TV1),0).
holds_at(pluggedIn(tv1),0).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6980).
% !HoldsAt(SwitchOn(Switch1),0).
holds_at(not(switchOn(switch1)),0).


% !HoldsAt(TVOn(TV1),0).
holds_at(not(tVOn(tv1)),0).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6982).
% Happens(TurnOn(James,Switch1),0).
happens_at(turnOn(james,switch1),0).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',6984).
% range time 0 1
:- call_pel_directive(range(time, 0, 1)).

% range offset 1 1
:- call_pel_directive(range(offset, 1, 1)).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2004b/RouletteWheel.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @inproceedings{Mueller:2004b,
%;   author = "Erik T. Mueller",
%;   year = "2004",
%;   title = "A tool for satisfiability-based commonsense reasoning in the event calculus",
%;   editor = "Valerie Barr and Zdravko Markov",
%;   booktitle = "\uppercase{P}roceedings of the \uppercase{S}eventeenth \uppercase{I}nternational \uppercase{F}lorida \uppercase{A}rtificial \uppercase{I}ntelligence \uppercase{R}esearch \uppercase{S}ociety \uppercase{C}onference",
%;   pages = "147--152",
%;   address = "Menlo Park, CA",
%;   publisher = "AAAI Press",
%; }
%;

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7016).
% load foundations/Root.e
:- call_pel_directive(load('foundations/Root.e')).

% load foundations/EC.e
:- call_pel_directive(load('foundations/EC.e')).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7019).
% sort wheel
sort(wheel).

% sort value: integer
subsort(value,integer).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7022).
% fluent WheelValueDeterminingFluent(wheel,value)
fluent(wheelValueDeterminingFluent(wheel,value)).

% fluent WheelValue(wheel,value)
fluent(wheelValue(wheel,value)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7024).
% noninertial WheelValueDeterminingFluent
:- call_pel_directive(noninertial(wheelValueDeterminingFluent)).

% event Spin(wheel)
event(spin(wheel)).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7027).
% [wheel,value1,value2,time]
% HoldsAt(WheelValue(wheel,value1),time) &
% HoldsAt(WheelValue(wheel,value2),time) ->
% value1=value2.
holds_at(wheelValue(Wheel, Value1), Time), holds_at(wheelValue(Wheel, Value2), Time) ->
    Value1=Value2.


% [wheel,value1,value2,time]
% HoldsAt(WheelValueDeterminingFluent(wheel,value1),time) &
% HoldsAt(WheelValueDeterminingFluent(wheel,value2),time) ->
% value1=value2.
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7033).
holds_at(wheelValueDeterminingFluent(Wheel, Value1), Time), holds_at(wheelValueDeterminingFluent(Wheel, Value2), Time) ->
    Value1=Value2.


% [wheel,value,time]
% HoldsAt(WheelValueDeterminingFluent(wheel,value),time) ->
% Initiates(Spin(wheel),WheelValue(wheel,value),time).
holds_at(wheelValueDeterminingFluent(Wheel, Value), Time) ->
    initiates_at(spin(Wheel),
                 wheelValue(Wheel, Value),
                 Time).


% [wheel,value1,value2,time]
% HoldsAt(WheelValue(wheel,value1),time) &
% HoldsAt(WheelValueDeterminingFluent(wheel,value2),time) &
% value1!=value2 ->
% Terminates(Spin(wheel),WheelValue(wheel,value1),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7042).
holds_at(wheelValue(Wheel, Value1), Time), holds_at(wheelValueDeterminingFluent(Wheel, Value2), Time), Value1\=Value2 ->
    terminates_at(spin(Wheel),
                  wheelValue(Wheel, Value1),
                  Time).


% [wheel,time]
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7048).
% {value} % HoldsAt(WheelValueDeterminingFluent(wheel,value),time).
exists([Value],
 holds_at(wheelValueDeterminingFluent(Wheel,Value),
	 Time)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7050).
% wheel Wheel
t(wheel,wheel).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7052).
% HoldsAt(WheelValue(Wheel,7),0).
holds_at(wheelValue(wheel,7),0).


% Happens(Spin(Wheel),0).
happens_at(spin(wheel),0).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7054).
% HoldsAt(WheelValueDeterminingFluent(Wheel,7),1).
holds_at(wheelValueDeterminingFluent(wheel,7),1).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7056).
% completion Happens
:- call_pel_directive(completion(happens_at)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7058).
% range value 7 10
:- call_pel_directive(range(value, 7, 10)).

% range time 0 1
:- call_pel_directive(range(time, 0, 1)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7060).
% range offset 1 1
:- call_pel_directive(range(offset, 1, 1)).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2004b/PickUp.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @inproceedings{Mueller:2004b,
%;   author = "Erik T. Mueller",
%;   year = "2004",
%;   title = "A tool for satisfiability-based commonsense reasoning in the event calculus",
%;   editor = "Valerie Barr and Zdravko Markov",
%;   booktitle = "\uppercase{P}roceedings of the \uppercase{S}eventeenth \uppercase{I}nternational \uppercase{F}lorida \uppercase{A}rtificial \uppercase{I}ntelligence \uppercase{R}esearch \uppercase{S}ociety \uppercase{C}onference",
%;   pages = "147--152",
%;   address = "Menlo Park, CA",
%;   publisher = "AAAI Press",
%; }
%;

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7091).
% load foundations/Root.e
:- call_pel_directive(load('foundations/Root.e')).

% load foundations/EC.e
:- call_pel_directive(load('foundations/EC.e')).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7094).
% sort object
sort(object).

% sort agent: object
subsort(agent,object).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7096).
% sort physobj: object
subsort(physobj,object).

% sort location
sort(location).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7099).
% fluent At(object,location)
fluent(at_loc(object,location)).

% fluent Holding(agent,physobj)
fluent(holding(agent,physobj)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7101).
% event PickUp(agent,physobj)
event(pickUp(agent,physobj)).

% event SetDown(agent,physobj)
event(setDown(agent,physobj)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7103).
% event Move(agent,location,location)
event(move(agent,location,location)).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7105).
%; state constraints
% [agent,location,physobj,time]
% HoldsAt(At(agent,location),time) &
% HoldsAt(Holding(agent,physobj),time) ->
% HoldsAt(At(physobj,location),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7107).
holds_at(at_loc(Agent, Location), Time), holds_at(holding(Agent, Physobj), Time) ->
    holds_at(at_loc(Physobj, Location), Time).


% [object,location1,location2,time]
% HoldsAt(At(object,location1),time) &
% HoldsAt(At(object,location2),time) ->
% location1=location2.
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7113).
holds_at(at_loc(Object, Location1), Time), holds_at(at_loc(Object, Location2), Time) ->
    Location1=Location2.


%; effect axioms
% [agent,location1,location2,time]
% Initiates(Move(agent,location1,location2),At(agent,location2),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7119).
initiates_at(move(Agent,Location1,Location2),
	     at_loc(Agent,Location2),
	     Time).


% [agent,location1,location2,time]
% Terminates(Move(agent,location1,location2),At(agent,location1),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7123).
terminates_at(move(Agent,Location1,Location2),
	      at_loc(Agent,Location1),
	      Time).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7125).
% [agent,physobj,time]
% Initiates(PickUp(agent,physobj),Holding(agent,physobj),time).
initiates_at(pickUp(Agent,Physobj),
	     holding(Agent,Physobj),
	     Time).


% [agent,physobj,time]
% Terminates(SetDown(agent,physobj),Holding(agent,physobj),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7129).
terminates_at(setDown(Agent,Physobj),
	      holding(Agent,Physobj),
	      Time).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7131).
%; preconditions
% [agent,location1,location2,time]
% Happens(Move(agent,location1,location2),time) ->
% HoldsAt(At(agent,location1),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7133).
happens_at(move(Agent, Location1, Location2), Time) ->
    holds_at(at_loc(Agent, Location1), Time).


% [agent,physobj,time]
% Happens(PickUp(agent,physobj),time) ->
% {location}%  HoldsAt(At(agent,location),time) &
%            HoldsAt(At(physobj,location),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7138).
exists([Location],  (happens_at(pickUp(Agent, Physobj), Time)->holds_at(at_loc(Agent, Location), Time), holds_at(at_loc(Physobj, Location), Time))).


%; releases
% [agent,physobj,location,time]
% Releases(PickUp(agent,physobj),At(physobj,location),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7144).
releases_at(pickUp(Agent,Physobj),
	    at_loc(Physobj,Location),
	    Time).


% [agent,physobj,location,time]
% HoldsAt(At(agent,location),time) ->
% Initiates(SetDown(agent,physobj),At(physobj,location),time).
holds_at(at_loc(Agent, Location), Time) ->
    initiates_at(setDown(Agent, Physobj),
                 at_loc(Physobj, Location),
                 Time).


%;[agent,physobj,location1,location2,time]
%;HoldsAt(At(agent,location1),time) &
%;location1 != location2 ->
%;Terminates(SetDown(agent,physobj),At(physobj,location2),time).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7156).
% agent James
t(agent,james).

% physobj Coin
t(physobj,coin).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7158).
% location L1, L2, L3, L4
t(location,l1).
t(location,l2).
t(location,l3).
t(location,l4).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7160).
% !HoldsAt(Holding(James,Coin),0).
holds_at(not(holding(james,coin)),0).


% HoldsAt(At(Coin,L4),0).
holds_at(at_loc(coin,l4),0).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7162).
% HoldsAt(At(James,L1),0).
holds_at(at_loc(james,l1),0).


% Happens(Move(James,L1,L2),0).
happens_at(move(james,l1,l2),0).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7164).
% Happens(Move(James,L2,L3),1).
happens_at(move(james,l2,l3),1).


% Happens(Move(James,L3,L4),2).
happens_at(move(james,l3,l4),2).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7166).
% Happens(PickUp(James,Coin),3).
happens_at(pickUp(james,coin),3).


% Happens(Move(James,L4,L3),4).
happens_at(move(james,l4,l3),4).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7168).
% Happens(Move(James,L3,L2),5).
happens_at(move(james,l3,l2),5).


% Happens(SetDown(James,Coin),6).
happens_at(setDown(james,coin),6).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7170).
% Happens(Move(James,L2,L3),7).
happens_at(move(james,l2,l3),7).


% Happens(Move(James,L3,L4),8).
happens_at(move(james,l3,l4),8).

% completion Happens
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7172).
:- call_pel_directive(completion(happens_at)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7175).
% range time 0 9
:- call_pel_directive(range(time, 0, 9)).

% range offset 1 1
:- call_pel_directive(range(offset, 1, 1)).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/FrankEtAl2003/Story1.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{FrankEtAl:2003,
%;   author = "Stefan L. Frank and Mathieu Koppen and Leo G. M. Noordman and Wietske Vonk",
%;   year = "2003",
%;   title = "Modeling knowledge-based inferences in story comprehension",
%;   journal = "Cognitive Science",
%;   volume = "27",
%;   pages = "875--910",
%; }
%;

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7205).
% option modeldiff on
:- call_pel_directive(option(modeldiff, on)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7207).
% load foundations/Root.e
:- call_pel_directive(load('foundations/Root.e')).

% load foundations/EC.e
:- call_pel_directive(load('foundations/EC.e')).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7210).
% sort agent
sort(agent).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7212).
% load examples/FrankEtAl2003/FrankEtAl.e
:- call_pel_directive(load('examples/FrankEtAl2003/FrankEtAl.e')).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7214).
% agent Bob, Jilly
t(agent,bob).
t(agent,jilly).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7216).
% !HoldsAt(Raining(),0).
holds_at(not(raining()),0).


% !HoldsAt(SunShining(),0).
holds_at(not(sunShining()),0).


% (HoldsAt(PlaySoccer(Bob),1) & HoldsAt(PlaySoccer(Jilly),1)) |
% (HoldsAt(PlayHideAndSeek(Bob),1) & HoldsAt(PlayHideAndSeek(Jilly),1)) |
% (HoldsAt(PlayComputerGame(Bob),1) & HoldsAt(PlayComputerGame(Jilly),1)).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7218).
(   holds_at(playSoccer(bob), 1),
    holds_at(playSoccer(jilly), 1)
;   holds_at(playHideAndSeek(bob), 1),
    holds_at(playHideAndSeek(jilly), 1)
;   holds_at(playComputerGame(bob), 1),
    holds_at(playComputerGame(jilly), 1)
).


% HoldsAt(Win(Bob),1) | HoldsAt(Win(Jilly),1).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7222).
 (   holds_at(win(bob), 1)
   ;   holds_at(win(jilly), 1)
   ).

% range time 0 1
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7224).
:- call_pel_directive(range(time, 0, 1)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7226).
% range offset 0 0
:- call_pel_directive(range(offset, 0, 0)).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/FrankEtAl2003/FrankEtAl.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{FrankEtAl:2003,
%;   author = "Stefan L. Frank and Mathieu Koppen and Leo G. M. Noordman and Wietske Vonk",
%;   year = "2003",
%;   title = "Modeling knowledge-based inferences in story comprehension",
%;   journal = "Cognitive Science",
%;   volume = "27",
%;   pages = "875--910",
%; }
%;

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7255).
% fluent SunShining()
fluent(sunShining()).

% fluent Raining()
fluent(raining()).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7257).
% fluent Outside(agent)
fluent(outside(agent)).

% fluent PlaySoccer(agent)
fluent(playSoccer(agent)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7259).
% fluent PlayHideAndSeek(agent)
fluent(playHideAndSeek(agent)).

% fluent PlayComputerGame(agent)
fluent(playComputerGame(agent)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7261).
% fluent PlayWithDog(agent)
fluent(playWithDog(agent)).

% fluent Win(agent)
fluent(win(agent)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7264).
% noninertial Outside, PlaySoccer, PlayHideAndSeek, PlayComputerGame
:- call_pel_directive(noninertial(outside)).
:- call_pel_directive(noninertial(playSoccer)).
:- call_pel_directive(noninertial(playHideAndSeek)).
:- call_pel_directive(noninertial(playComputerGame)).

% noninertial PlayWithDog, Win
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7264).
:- call_pel_directive(noninertial(playWithDog)).
:- call_pel_directive(noninertial(win)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7267).
% xor PlaySoccer, PlayHideAndSeek, PlayComputerGame, PlayWithDog
xor([playSoccer,playHideAndSeek,playComputerGame,playWithDog]).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7269).
% [agent,time]
% HoldsAt(PlaySoccer(agent),time) ->
% HoldsAt(Outside(agent),time).
holds_at(playSoccer(Agent), Time) ->
    holds_at(outside(Agent), Time).


% [agent,time]
% HoldsAt(PlaySoccer(agent),time) ->
% ({agent1} agent1!=agent & HoldsAt(PlaySoccer(agent1),time)).
holds_at(playSoccer(Agent), Time) ->
    exists([Agent1],
            (Agent1\=Agent, holds_at(playSoccer(Agent1), Time))).


% [agent,time]
% HoldsAt(PlayHideAndSeek(agent),time) ->
% ({agent1} agent1!=agent & HoldsAt(PlayHideAndSeek(agent1),time)).
holds_at(playHideAndSeek(Agent), Time) ->
    exists([Agent1],
            (Agent1\=Agent, holds_at(playHideAndSeek(Agent1), Time))).


% [agent,time]
% HoldsAt(PlayComputerGame(agent),time) ->
% !HoldsAt(Outside(agent),time).
holds_at(playComputerGame(Agent), Time) ->
    holds_at(not(outside(Agent)), Time).


% [agent,time]
% HoldsAt(Win(agent),time) ->
% (HoldsAt(PlaySoccer(agent),time) |
%  HoldsAt(PlayHideAndSeek(agent),time) |
%  (HoldsAt(PlayComputerGame(agent),time) &
%   ({agent1} agent1!=agent & HoldsAt(PlayComputerGame(agent1),time)))).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7286).
holds_at(win(Agent), Time) ->
    (   holds_at(playSoccer(Agent), Time)
    ;   holds_at(playHideAndSeek(Agent), Time)
    ;   holds_at(playComputerGame(Agent), Time),
        exists([Agent1],
                (Agent1\=Agent, holds_at(playComputerGame(Agent1), Time)))
    ).


% [agent,time]
% HoldsAt(PlaySoccer(agent),time) &
% HoldsAt(Win(agent),time) ->
% !HoldsAt(PlaySoccer(agent),time+1).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7293).
holds_at(playSoccer(Agent), Time), holds_at(win(Agent), Time) ->
    holds_at(not(playSoccer(Agent)), Time+1).


% [agent,time]
% HoldsAt(PlayHideAndSeek(agent),time) &
% HoldsAt(Win(agent),time) ->
% !HoldsAt(PlayHideAndSeek(agent),time+1).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7298).
holds_at(playHideAndSeek(Agent), Time), holds_at(win(Agent), Time) ->
    holds_at(not(playHideAndSeek(Agent)), Time+1).


% [agent,time]
% HoldsAt(PlayComputerGame(agent),time) &
% HoldsAt(Win(agent),time) ->
% !HoldsAt(PlayComputerGame(agent),time+1).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7303).
holds_at(playComputerGame(Agent), Time), holds_at(win(Agent), Time) ->
    holds_at(not(playComputerGame(Agent)), Time+1).


% [agent,time]
% HoldsAt(Win(agent),time) ->
% HoldsAt(PlaySoccer(agent),time-1) |
% HoldsAt(PlayHideAndSeek(agent),time-1) |
% HoldsAt(PlayComputerGame(agent),time-1).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7308).
holds_at(win(Agent), Time) ->
    (   holds_at(playSoccer(Agent), Time-1)
    ;   holds_at(playHideAndSeek(Agent), Time-1)
    ;   holds_at(playComputerGame(Agent), Time-1)
    ).


% [agent,time]
% HoldsAt(PlaySoccer(agent),time) ->
% !HoldsAt(Raining(),time).
holds_at(playSoccer(Agent), Time) ->
    holds_at(not(raining()), Time).


% [agent,time]
% HoldsAt(Win(agent),time) ->
% !({agent1} agent1!=agent & HoldsAt(Win(agent1),time)).
holds_at(win(Agent), Time) ->
    not(exists([Agent1],
                (Agent1\=Agent, holds_at(win(Agent1), Time)))).


% [agent1,agent2,time]
% HoldsAt(PlayHideAndSeek(agent1),time) &
% HoldsAt(PlayHideAndSeek(agent2),time) ->
% ((HoldsAt(Outside(agent1),time) & HoldsAt(Outside(agent2),time)) |
%  (!HoldsAt(Outside(agent1),time) & !HoldsAt(Outside(agent2),time))).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7322).
holds_at(playHideAndSeek(Agent1), Time), holds_at(playHideAndSeek(Agent2), Time) ->
    (   holds_at(outside(Agent1), Time),
        holds_at(outside(Agent2), Time)
    ;   holds_at(not(outside(Agent1)), Time),
        holds_at(not(outside(Agent2)), Time)
    ).


%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/GiunchigliaEtAl2004/MonkeyPrediction.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{Giunchiglia:2004,
%;   author = "Enrico Giunchiglia and Joohyung Lee and Vladimir Lifschitz and Norman C. McCain and Hudson Turner",
%;   year = "2004",
%;   title = "Nonmonotonic causal theories",
%;   journal = "Artificial Intelligence",
%;   volume = "153",
%;   pages = "49--104",
%; }
%;
%; deduction

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7356).
% load foundations/Root.e
:- call_pel_directive(load('foundations/Root.e')).

% load foundations/EC.e
:- call_pel_directive(load('foundations/EC.e')).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7358).
% load examples/GiunchigliaEtAl2004/MonkeyBananas.e
:- call_pel_directive(load('examples/GiunchigliaEtAl2004/MonkeyBananas.e')).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7360).
% HoldsAt(At(Monkey,L1),0).
holds_at(at_loc(monkey,l1),0).


% HoldsAt(At(Bananas,L2),0).
holds_at(at_loc(bananas,l2),0).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7362).
% HoldsAt(At(Box,L3),0).
holds_at(at_loc(box,l3),0).


% Happens(Walk(L3),0).
happens_at(walk(l3),0).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7364).
% Happens(PushBox(L2),1).
happens_at(pushBox(l2),1).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7366).
% completion Happens
:- call_pel_directive(completion(happens_at)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7368).
% range time 0 2
:- call_pel_directive(range(time, 0, 2)).

% range offset 0 0
:- call_pel_directive(range(offset, 0, 0)).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/GiunchigliaEtAl2004/MonkeyPlanning.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{Giunchiglia:2004,
%;   author = "Enrico Giunchiglia and Joohyung Lee and Vladimir Lifschitz and Norman C. McCain and Hudson Turner",
%;   year = "2004",
%;   title = "Nonmonotonic causal theories",
%;   journal = "Artificial Intelligence",
%;   volume = "153",
%;   pages = "49--104",
%; }
%;
%; planning

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7400).
% load foundations/Root.e
:- call_pel_directive(load('foundations/Root.e')).

% load foundations/EC.e
:- call_pel_directive(load('foundations/EC.e')).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7402).
% load examples/GiunchigliaEtAl2004/MonkeyBananas.e
:- call_pel_directive(load('examples/GiunchigliaEtAl2004/MonkeyBananas.e')).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7404).
% HoldsAt(At(Monkey,L1),0).
holds_at(at_loc(monkey,l1),0).


% HoldsAt(At(Bananas,L2),0).
holds_at(at_loc(bananas,l2),0).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7406).
% HoldsAt(At(Box,L3),0).
holds_at(at_loc(box,l3),0).


% HoldsAt(HasBananas(),4).
holds_at(hasBananas(),4).


%; PLAN Happens(Walk(L3),0).
%; PLAN Happens(PushBox(L2),1).
%; PLAN Happens(ClimbOn(),2).
%; PLAN Happens(GraspBananas(),3).
%; one event at a time
% [event1,event2,time]
 % Happens(event1,time) & Happens(event2,time) ->
% event1=event2.
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7414).
happens_at(Event1, Time), happens_at(Event2, Time) ->
    Event1=Event2.

% range time 0 4
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7417).
:- call_pel_directive(range(time, 0, 4)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7419).
% range offset 0 0
:- call_pel_directive(range(offset, 0, 0)).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/GiunchigliaEtAl2004/MonkeyPostdiction.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{Giunchiglia:2004,
%;   author = "Enrico Giunchiglia and Joohyung Lee and Vladimir Lifschitz and Norman C. McCain and Hudson Turner",
%;   year = "2004",
%;   title = "Nonmonotonic causal theories",
%;   journal = "Artificial Intelligence",
%;   volume = "153",
%;   pages = "49--104",
%; }
%;
%; postdiction

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7450).
% load foundations/Root.e
:- call_pel_directive(load('foundations/Root.e')).

% load foundations/EC.e
:- call_pel_directive(load('foundations/EC.e')).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7452).
% load examples/GiunchigliaEtAl2004/MonkeyBananas.e
:- call_pel_directive(load('examples/GiunchigliaEtAl2004/MonkeyBananas.e')).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7454).
% HoldsAt(At(Monkey,L1),0).
holds_at(at_loc(monkey,l1),0).


% HoldsAt(At(Bananas,L2),0).
holds_at(at_loc(bananas,l2),0).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7456).
% Happens(Walk(L3),0).
happens_at(walk(l3),0).


% Happens(PushBox(L2),1).
happens_at(pushBox(l2),1).

% completion Happens
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7458).
:- call_pel_directive(completion(happens_at)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7461).
% range time 0 2
:- call_pel_directive(range(time, 0, 2)).

% range offset 0 0
:- call_pel_directive(range(offset, 0, 0)).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/GiunchigliaEtAl2004/MonkeyBananas.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{Giunchiglia:2004,
%;   author = "Enrico Giunchiglia and Joohyung Lee and Vladimir Lifschitz and Norman C. McCain and Hudson Turner",
%;   year = "2004",
%;   title = "Nonmonotonic causal theories",
%;   journal = "Artificial Intelligence",
%;   volume = "153",
%;   pages = "49--104",
%; }
%;

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7491).
% sort object
sort(object).

% sort location
sort(location).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7494).
% object Monkey, Bananas, Box
t(object,monkey).
t(object,bananas).
t(object,box).

% location L1, L2, L3
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7494).
t(location,l1).
t(location,l2).
t(location,l3).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7497).
% fluent At(object,location)
fluent(at_loc(object,location)).

% fluent OnBox()
fluent(onBox()).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7499).
% fluent HasBananas()
fluent(hasBananas()).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7501).
% event Walk(location)
event(walk(location)).

% event PushBox(location)
event(pushBox(location)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7503).
% event ClimbOn()
event(climbOn()).

% event ClimbOff()
event(climbOff()).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7505).
% event GraspBananas()
event(graspBananas()).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7507).
% [object,location1,location2,time]
% HoldsAt(At(object,location1),time) &
% HoldsAt(At(object,location2),time) ->
% location1=location2.
holds_at(at_loc(Object, Location1), Time), holds_at(at_loc(Object, Location2), Time) ->
    Location1=Location2.


% [object,location,time]
% object=% Monkey ->
% Initiates(Walk(location),At(object,location),time).
Object=monkey ->
    initiates_at(walk(Location),
                 at_loc(Object, Location),
                 Time).


% [object,location1,location2,time]
% object=% Monkey &
% HoldsAt(At(object,location1),time) ->
% Terminates(Walk(location2),At(object,location1),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7517).
Object=monkey, holds_at(at_loc(Object, Location1), Time) ->
    terminates_at(walk(Location2),
                  at_loc(Object, Location1),
                  Time).


% [location,time]
% Happens(Walk(location),time) ->
% !HoldsAt(At(Monkey,location),time) &
% !HoldsAt(OnBox(),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7522).
happens_at(walk(Location), Time) ->
    holds_at(not(at_loc(monkey, Location)), Time),
    holds_at(not(onBox()), Time).


% [location,time]
% HoldsAt(HasBananas(),time) &
% HoldsAt(At(Monkey,location),time) ->
% HoldsAt(At(Bananas,location),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7527).
holds_at(hasBananas(), Time), holds_at(at_loc(monkey, Location), Time) ->
    holds_at(at_loc(bananas, Location), Time).


% [object,location,time]
% object=% Box | object=Monkey ->
% Initiates(PushBox(location),At(object,location),time).
Object=box;Object=monkey ->
    initiates_at(pushBox(Location),
                 at_loc(Object, Location),
                 Time).


% [object,location1,location2,time]
% (object=Box | object=Monkey) &
% HoldsAt(At(object,location1),time) ->
% Terminates(PushBox(location2),At(object,location1),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7536).
(Object=box;Object=monkey), holds_at(at_loc(Object, Location1), Time) ->
    terminates_at(pushBox(Location2),
                  at_loc(Object, Location1),
                  Time).


% [location,time]
% Happens(PushBox(location),time) ->
% ({location1}
%   HoldsAt(At(Box,location1),time) &
%   HoldsAt(At(Monkey,location1),time)) &
% !HoldsAt(At(Monkey,location),time) &
% !HoldsAt(OnBox(),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7541).
happens_at(pushBox(Location), Time) ->
    exists([Location1],
            (holds_at(at_loc(box, Location1), Time), holds_at(at_loc(monkey, Location1), Time))),
    holds_at(not(at_loc(monkey, Location)), Time),
    holds_at(not(onBox()), Time).


% [time]
 % Initiates(ClimbOn(),OnBox(),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7547).
initiates_at(climbOn(),onBox(),Time).


% [time]
% Happens(ClimbOn(),time) ->
% !HoldsAt(OnBox(),time).
happens_at(climbOn(), Time) ->
    holds_at(not(onBox()), Time).


% [time]
 % Terminates(ClimbOff(),OnBox(),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7553).
terminates_at(climbOff(),onBox(),Time).


% [time]
% Happens(ClimbOff(),time) ->
% HoldsAt(OnBox(),time).
happens_at(climbOff(), Time) ->
    holds_at(onBox(), Time).


% [time]
 % Initiates(GraspBananas(),HasBananas(),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7559).
initiates_at(graspBananas(),hasBananas(),Time).


% [object,location,time]
% object=% Bananas ->
% Releases(GraspBananas(),At(object,location),time).
Object=bananas ->
    releases_at(graspBananas(), at_loc(Object, Location), Time).


% [time]
% Happens(GraspBananas(),time) ->
% ({location1}
%   HoldsAt(At(Bananas,location1),time) &
%   HoldsAt(At(Monkey,location1),time)) &
% HoldsAt(OnBox(),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7567).
happens_at(graspBananas(), Time) ->
    exists([Location1],
            (holds_at(at_loc(bananas, Location1), Time), holds_at(at_loc(monkey, Location1), Time))),
    holds_at(onBox(), Time).


% [time]
% HoldsAt(OnBox(),time) ->
% {location1}%  HoldsAt(At(Box,location1),time) &
%             HoldsAt(At(Monkey,location1),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7574).
exists([Location1],  (holds_at(onBox(), Time)->holds_at(at_loc(box, Location1), Time), holds_at(at_loc(monkey, Location1), Time))).


%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Antoniou1997/Student.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; conflicting defaults: method (D)
%; \fullciteA[p. 157]{Antoniou:1997}
%;
%; @book{Antoniou:1997,
%;   author = "Grigoris Antoniou",
%;   year = "1997",
%;   title = "Nonmonotonic Reasoning",
%;   address = "Cambridge, MA",
%;   publisher = "MIT Press",
%; }
%;

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7607).
% load foundations/Root.e
:- call_pel_directive(load('foundations/Root.e')).

% load foundations/EC.e
:- call_pel_directive(load('foundations/EC.e')).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7610).
% sort x
sort(x).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7612).
% predicate Adult(x)
predicate(adult(x)).

% predicate Student(x)
predicate(student(x)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7614).
% predicate Employed(x)
predicate(employed(x)).

% predicate Ab1(x)
predicate(ab1(x)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7616).
% predicate Ab2(x)
predicate(ab2(x)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7618).
% x Mary
t(x,mary).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7620).
% Student(Mary).
student(mary).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7622).
% [x]
 % Adult(x) & !Ab1(x) -> Employed(x).
adult(X), not(ab1(X)) ->
    employed(X).


% [x]
 % Student(x) & !Ab2(x) -> !Employed(x).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7622).
student(X), not(ab2(X)) ->
    not(employed(X)).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7624).
% [x]
 % Student(x) -> Adult(x).
student(X) ->
    adult(X).

% Theta: 
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7624).
directive(theta).
 


% [x]
 % Student(x) -> Ab1(x).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7624).
student(X) ->
    ab1(X).

% range time 0 0
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7626).
:- call_pel_directive(range(time, 0, 0)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7628).
% range offset 1 1
:- call_pel_directive(range(offset, 1, 1)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7630).
% completion Theta Ab1
:- call_pel_directive(completion(theta)).
:- call_pel_directive(completion(ab1)).

% completion Theta Ab2
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7630).
:- call_pel_directive(completion(theta)).
:- call_pel_directive(completion(ab2)).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Antoniou1997/Dropout.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; dealing with conflicting defaults by adding conditions
%; to one of the conflicting rules
%; \fullciteA[p. 56]{Antoniou:1997}
%;
%; @book{Antoniou:1997,
%;   author = "Grigoris Antoniou",
%;   year = "1997",
%;   title = "Nonmonotonic Reasoning",
%;   address = "Cambridge, MA",
%;   publisher = "MIT Press",
%; }
%;

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7663).
% load foundations/Root.e
:- call_pel_directive(load('foundations/Root.e')).

% load foundations/EC.e
:- call_pel_directive(load('foundations/EC.e')).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7666).
% sort x
sort(x).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7668).
% predicate Dropout(x)
predicate(dropout(x)).

% predicate Adult(x)
predicate(adult(x)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7670).
% predicate Employed(x)
predicate(employed(x)).

% predicate Ab1(x)
predicate(ab1(x)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7672).
% predicate Ab2(x)
predicate(ab2(x)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7674).
% x Bill
t(x,bill).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7676).
% Dropout(Bill).
dropout(bill).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7678).
% [x]
 % Dropout(x) & !Ab1(x) -> Adult(x).
dropout(X), not(ab1(X)) ->
    adult(X).


% [x]
 % Adult(x) & !Dropout(x) & !Ab2(x) -> Employed(x).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7678).
adult(X), not(dropout(X)), not(ab2(X)) ->
    employed(X).

% range time 0 0
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7680).
:- call_pel_directive(range(time, 0, 0)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7682).
% range offset 1 1
:- call_pel_directive(range(offset, 1, 1)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7684).
% completion Theta Ab1
:- call_pel_directive(completion(theta)).
:- call_pel_directive(completion(ab1)).

% completion Theta Ab2
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7684).
:- call_pel_directive(completion(theta)).
:- call_pel_directive(completion(ab2)).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Shanahan1999/Happy.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @incollection{Shanahan:1999,
%;   author = "Shanahan, Murray",
%;   year = "1999",
%;   title = "The Event Calculus explained",
%;   editor = "Michael J. Wooldridge and Manuela M. Veloso",
%;   booktitle = "Artificial Intelligence Today: Recent Trends and Developments",
%;   series = "Lecture Notes in Computer Science",
%;   volume = "1600",
%;   pages = "409--430",
%;   address = "Berlin",
%;   publisher = "Springer",
%; }
%;
%; deduction
%;
%; modifications from Shanahan's formulation:
%; InitiallyN -> !HoldsAt
%; InitiallyP -> HoldsAt
%; timestamps
%;

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7725).
% load foundations/Root.e
:- call_pel_directive(load('foundations/Root.e')).

% load foundations/EC.e
:- call_pel_directive(load('foundations/EC.e')).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7728).
% sort person
sort(person).

% event Feed(person)
event(feed(person)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7730).
% event Clothe(person)
event(clothe(person)).

% fluent Happy(person)
fluent(happy(person)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7732).
% fluent Hungry(person)
fluent(hungry(person)).

% fluent Cold(person)
fluent(cold(person)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7734).
% noninertial Happy
:- call_pel_directive(noninertial(happy)).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7736).
% [person,time]
% HoldsAt(Happy(person),time) <->
% !HoldsAt(Hungry(person),time) &
% !HoldsAt(Cold(person),time).
holds_at(happy(Person), Time) <->
    holds_at(not(hungry(Person)), Time),
    holds_at(not(cold(Person)), Time).


% [person,time]
% Terminates(Feed(person),Hungry(person),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7742).
terminates_at(feed(Person),hungry(Person),Time).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7744).
% [person,time]
% Terminates(Clothe(person),Cold(person),time).
terminates_at(clothe(Person),cold(Person),Time).

% person Fred
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7746).
t(person,fred).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7749).
% HoldsAt(Hungry(Fred),0).
holds_at(hungry(fred),0).


% !HoldsAt(Cold(Fred),0).
holds_at(not(cold(fred)),0).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7751).
% Happens(Feed(Fred),1).
happens_at(feed(fred),1).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7753).
% completion Happens
:- call_pel_directive(completion(happens_at)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7755).
% range time 0 2
:- call_pel_directive(range(time, 0, 2)).

% range offset 1 1
:- call_pel_directive(range(offset, 1, 1)).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Shanahan1999/ThielscherCircuit.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{Thielscher:1997,
%;   author = "Michael Thielscher",
%;   year = "1997",
%;   title = "Ramification and causality",
%;   journal = "Artificial Intelligence",
%;   volume = "89",
%;   pages = "317--364",
%; }
%;
%; @incollection{Shanahan:1999,
%;   author = "Shanahan, Murray",
%;   year = "1999",
%;   title = "The Event Calculus explained",
%;   editor = "Michael J. Wooldridge and Manuela M. Veloso",
%;   booktitle = "Artificial Intelligence Today: Recent Trends and Developments",
%;   series = "Lecture Notes in Computer Science",
%;   volume = "1600",
%;   pages = "409--430",
%;   address = "Berlin",
%;   publisher = "Springer",
%; }
%;
%; deduction
%;
%; modifications from Shanahan's formulation:
%; timestamps
%;

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7803).
% load foundations/Root.e
:- call_pel_directive(load('foundations/Root.e')).

% load foundations/EC.e
:- call_pel_directive(load('foundations/EC.e')).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7805).
% load foundations/ECCausal.e
:- call_pel_directive(load('foundations/ECCausal.e')).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7807).
% event LightOn()
event(lightOn()).

% event Close1()
event(close1()).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7809).
% event Open2()
event(open2()).

% event CloseRelay()
event(closeRelay()).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7812).
% fluent Light()
fluent(light()).

% fluent Switch1()
fluent(switch1()).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7814).
% fluent Switch2()
fluent(switch2()).

% fluent Switch3()
fluent(switch3()).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7816).
% fluent Relay()
fluent(relay()).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7818).
% [time]
% Stopped(Light(),time) &
% Initiated(Switch1(),time) &
% Initiated(Switch2(),time) ->
% Happens(LightOn(),time).
stopped(light(), Time), initiated(switch1(), Time), initiated(switch2(), Time) ->
    happens_at(lightOn(), Time).


% [time]
% Started(Switch2(),time) &
% Initiated(Relay(),time) ->
% Happens(Open2(),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7825).
started(switch2(), Time), initiated(relay(), Time) ->
    happens_at(open2(), Time).


% [time]
% Stopped(Relay(),time) &
% Initiated(Switch1(),time) &
% Initiated(Switch3(),time) ->
% Happens(CloseRelay(),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7830).
stopped(relay(), Time), initiated(switch1(), Time), initiated(switch3(), Time) ->
    happens_at(closeRelay(), Time).


% [time]
 % Initiates(LightOn(),Light(),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7834).
initiates_at(lightOn(),light(),Time).


% [time]
 % Terminates(Open2(),Switch2(),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7836).
terminates_at(open2(),switch2(),Time).


% [time]
 % Initiates(CloseRelay(),Relay(),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7838).
initiates_at(closeRelay(),relay(),Time).


% [time]
 % Initiates(Close1(),Switch1(),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7840).
initiates_at(close1(),switch1(),Time).


% !HoldsAt(Switch1(),0).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7842).
holds_at(not(switch1()),0).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7844).
% HoldsAt(Switch2(),0).
holds_at(switch2(),0).


% HoldsAt(Switch3(),0).
holds_at(switch3(),0).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7846).
% !HoldsAt(Relay(),0).
holds_at(not(relay()),0).


% !HoldsAt(Light(),0).
holds_at(not(light()),0).


% Happens(Close1(),0).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7848).
happens_at(close1(),0).

% completion Happens
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7850).
:- call_pel_directive(completion(happens_at)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7853).
% range time 0 1
:- call_pel_directive(range(time, 0, 1)).

% range offset 1 1
:- call_pel_directive(range(offset, 1, 1)).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Shanahan1999/CoinToss.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{Kartha:1994,
%;   author = "G. Neelakantan Kartha",
%;   year = "1994",
%;   title = "Two counterexamples related to \uppercase{B}aker's approach to the frame problem",
%;   journal = "Artificial Intelligence",
%;   volume = "69",
%;   number = "1--2",
%;   pages = "379--391",
%; }
%;
%; @incollection{Shanahan:1999,
%;   author = "Shanahan, Murray",
%;   year = "1999",
%;   title = "The Event Calculus explained",
%;   editor = "Michael J. Wooldridge and Manuela M. Veloso",
%;   booktitle = "Artificial Intelligence Today: Recent Trends and Developments",
%;   series = "Lecture Notes in Computer Science",
%;   volume = "1600",
%;   pages = "409--430",
%;   address = "Berlin",
%;   publisher = "Springer",
%; }
%;
%; model finding
%;
%; modifications from Shanahan's formulation:
%; InitiallyP -> HoldsAt
%; pruning of models irrelevant to example
%; timestamps
%;

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7904).
% load foundations/Root.e
:- call_pel_directive(load('foundations/Root.e')).

% load foundations/EC.e
:- call_pel_directive(load('foundations/EC.e')).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7907).
% event Toss()
event(toss()).

% fluent ItsHeads()
fluent(itsHeads()).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7909).
% fluent Heads()
fluent(heads()).

% noninertial ItsHeads
:- call_pel_directive(noninertial(itsHeads)).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7912).
% [time]
 % HoldsAt(ItsHeads(),time) -> Initiates(Toss(),Heads(),time).
holds_at(itsHeads(), Time) ->
    initiates_at(toss(), heads(), Time).


% [time]
 % !HoldsAt(ItsHeads(),time) -> Terminates(Toss(),Heads(),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7912).
holds_at(not(itsHeads()), Time) ->
    terminates_at(toss(), heads(), Time).


% HoldsAt(Heads(),0).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7914).
holds_at(heads(),0).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7916).
% Happens(Toss(),1).
happens_at(toss(),1).


% Happens(Toss(),2).
happens_at(toss(),2).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7918).
% Happens(Toss(),3).
happens_at(toss(),3).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7920).
%; prune models irrelevant to example:


% HoldsAt(ItsHeads(),0).
holds_at(itsHeads(),0).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7922).
% HoldsAt(ItsHeads(),4).
holds_at(itsHeads(),4).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7924).
% completion Happens
:- call_pel_directive(completion(happens_at)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7926).
% range time 0 4
:- call_pel_directive(range(time, 0, 4)).

% range offset 1 1
:- call_pel_directive(range(offset, 1, 1)).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Shanahan1999/ChessBoard.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; due to Raymond Reiter
%;
%; @inproceedings{KarthaLifschitz:1994,
%;   author = "G. Neelakantan Kartha and Vladimir Lifschitz",
%;   year = "1994",
%;   title = "Actions with indirect effects (preliminary report)",
%;   editor = "Jon Doyle and Erik Sandewall and Pietro Torasso",
%;   booktitle = "\uppercase{P}roceedings of the \uppercase{F}ourth \uppercase{I}nternational \uppercase{C}onference on \uppercase{P}rinciples of \uppercase{K}nowledge \uppercase{R}epresentation and \uppercase{R}easoning",
%;   pages = "341--350",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann",
%; }
%;
%; @incollection{Shanahan:1999,
%;   author = "Shanahan, Murray",
%;   year = "1999",
%;   title = "The Event Calculus explained",
%;   editor = "Michael J. Wooldridge and Manuela M. Veloso",
%;   booktitle = "Artificial Intelligence Today: Recent Trends and Developments",
%;   series = "Lecture Notes in Computer Science",
%;   volume = "1600",
%;   pages = "409--430",
%;   address = "Berlin",
%;   publisher = "Springer",
%; }
%;
%; model finding
%;
%; modifications from Shanahan's formulation:
%; InitiallyN -> !HoldsAt
%; pruning of models irrelevant to example
%; timestamps
%;

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7980).
% load foundations/Root.e
:- call_pel_directive(load('foundations/Root.e')).

% load foundations/EC.e
:- call_pel_directive(load('foundations/EC.e')).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7983).
% event Throw()
event(throw()).

% fluent ItsBlack()
fluent(itsBlack()).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7985).
% fluent ItsWhite()
fluent(itsWhite()).

% fluent OnBlack()
fluent(onBlack()).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7987).
% fluent OnWhite()
fluent(onWhite()).

% noninertial ItsBlack, ItsWhite
:- call_pel_directive(noninertial(itsBlack)).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7987).
:- call_pel_directive(noninertial(itsWhite)).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7990).
% [time]
% HoldsAt(ItsWhite(),time) ->
% Initiates(Throw(),OnWhite(),time).
holds_at(itsWhite(), Time) ->
    initiates_at(throw(), onWhite(), Time).


% [time]
% HoldsAt(ItsBlack(),time) ->
% Initiates(Throw(),OnBlack(),time).
holds_at(itsBlack(), Time) ->
    initiates_at(throw(), onBlack(), Time).


% [time]
 % HoldsAt(ItsWhite(),time) | HoldsAt(ItsBlack(),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7997).
 (   holds_at(itsWhite(), Time)
   ;   holds_at(itsBlack(), Time)
   ).


% !HoldsAt(OnWhite(),0).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',7999).
holds_at(not(onWhite()),0).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8001).
% !HoldsAt(OnBlack(),0).
holds_at(not(onBlack()),0).


% Happens(Throw(),1).
happens_at(throw(),1).


%; prune models irrelevant to example:


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8005).
% HoldsAt(ItsWhite(),0).
holds_at(itsWhite(),0).


% HoldsAt(ItsBlack(),0).
holds_at(itsBlack(),0).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8007).
% HoldsAt(ItsWhite(),2).
holds_at(itsWhite(),2).


% HoldsAt(ItsBlack(),2).
holds_at(itsBlack(),2).

% completion Happens
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8009).
:- call_pel_directive(completion(happens_at)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8012).
% range time 0 2
:- call_pel_directive(range(time, 0, 2)).

% range offset 1 1
:- call_pel_directive(range(offset, 1, 1)).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Shanahan1999/RussianTurkey.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Sandewall:1994,
%;   author = "Sandewall, Erik",
%;   year = "1994",
%;   title = "Features and Fluents: The Representation of Knowledge about Dynamical Systems",
%;   volume = "I",
%;   address = "Oxford",
%;   publisher = "Oxford University Press",
%; }
%;
%; @incollection{Shanahan:1999,
%;   author = "Shanahan, Murray",
%;   year = "1999",
%;   title = "The Event Calculus explained",
%;   editor = "Michael J. Wooldridge and Manuela M. Veloso",
%;   booktitle = "Artificial Intelligence Today: Recent Trends and Developments",
%;   series = "Lecture Notes in Computer Science",
%;   volume = "1600",
%;   pages = "409--430",
%;   address = "Berlin",
%;   publisher = "Springer",
%; }
%;
%; model finding
%;
%; modifications from Shanahan's formulation:
%; InitiallyP -> HoldsAt
%; added [time] Terminates(Shoot(),Loaded(),time).
%; added !HoldsAt(Loaded(),0) to prune models
%; timestamps
%;

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8063).
% load foundations/Root.e
:- call_pel_directive(load('foundations/Root.e')).

% load foundations/EC.e
:- call_pel_directive(load('foundations/EC.e')).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8066).
% event Load()
event(load()).

% event Shoot()
event(shoot()).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8068).
% event Spin()
event(spin()).

% fluent Loaded()
fluent(loaded()).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8070).
% fluent Alive()
fluent(alive()).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8072).
% [time]
 % Initiates(Load(),Loaded(),time).
initiates_at(load(),loaded(),Time).


% [time]
 % HoldsAt(Loaded(),time) -> Terminates(Shoot(),Alive(),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8072).
holds_at(loaded(), Time) ->
    terminates_at(shoot(), alive(), Time).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8074).
% [time]
 % Releases(Spin(),Loaded(),time).
releases_at(spin(),loaded(),Time).


% [time]
 % Terminates(Shoot(),Loaded(),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8074).
terminates_at(shoot(),loaded(),Time).


% HoldsAt(Alive(),0).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8076).
holds_at(alive(),0).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8078).
% !HoldsAt(Loaded(),0).
holds_at(not(loaded()),0).


% Happens(Load(),1).
happens_at(load(),1).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8080).
% Happens(Spin(),2).
happens_at(spin(),2).


% Happens(Shoot(),3).
happens_at(shoot(),3).

% completion Happens
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8082).
:- call_pel_directive(completion(happens_at)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8085).
% range time 0 4
:- call_pel_directive(range(time, 0, 4)).

% range offset 1 1
:- call_pel_directive(range(offset, 1, 1)).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/AkmanEtAl2004/ZooTest4.2.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{Akman:2004,
%;   author = "Varol Akman and Selim T. Erdogan and Joohyung Lee and Vladimir Lifschitz and Hudson Turner",
%;   year = "2004",
%;   title = "Representing the zoo world and the traffic world in the language of the causal calculator",
%;   journal = "Artificial Intelligence",
%;   volume = "153",
%;   pages = "105--140",
%; }
%;

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8115).
% option encoding 3
:- call_pel_directive(option(encoding, 3)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8117).
% load foundations/Root.e
:- call_pel_directive(load('foundations/Root.e')).

% load foundations/EC.e
:- call_pel_directive(load('foundations/EC.e')).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8119).
% load examples/AkmanEtAl2004/ZooWorld.e
:- call_pel_directive(load('examples/AkmanEtAl2004/ZooWorld.e')).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8121).
% human Homer
t(human,homer).

% elephant Jumbo
t(elephant,jumbo).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8124).
% Species(Homer)=HumanSpecies.
species(homer)=humanSpecies.


% Adult(Homer).
adult(homer).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8126).
% Species(Jumbo)=ElephantSpecies.
species(jumbo)=elephantSpecies.


% Adult(Jumbo).
adult(jumbo).


% !HoldsAt(Opened(GateAO),0).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8128).
holds_at(not(opened(gateAO)),0).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8130).
% {position} 


% HoldsAt(Pos(Homer,position),0) & Outside=Loc(position).
exists([Position],  (holds_at(pos(homer, Position), 0), outside=loc(Position))).
% {position} 


% HoldsAt(Pos(Jumbo,position),0) & CageA=Loc(position).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8130).
exists([Position],  (holds_at(pos(jumbo, Position), 0), cageA=loc(Position))).
% {position} 


% HoldsAt(Pos(Homer,position),5) & CageA=Loc(position).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8132).
exists([Position],  (holds_at(pos(homer, Position), 5), cageA=loc(Position))).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8134).
% {position} 


% HoldsAt(Pos(Jumbo,position),5) & Outside=Loc(position).
exists([Position],  (holds_at(pos(jumbo, Position), 5), outside=loc(Position))).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8136).
% [animal,time]
 % !HoldsAt(Mounted(Homer,animal),time).
holds_at(not(mounted(homer,Animal)),Time).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8138).
% [human]
 % HoldsAt(PosDeterminingFluent(human,1),5).
holds_at(posDeterminingFluent(Human,1),5).


% [event,animal]
 % !HoldsAt(DoneBy(event,animal),5).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8138).
holds_at(not(doneBy(Event,Animal)),5).


%;HoldsAt(Pos(Homer,7),0).
%;HoldsAt(Pos(Jumbo,4),0).
%;Happens(Move(Jumbo,3),0).
%;Happens(Open(Homer,GateAO),0).
%;Happens(Move(Homer,4),1).
%;Happens(Move(Jumbo,1),1).
%;Happens(Move(Jumbo,3),2).
%;Happens(Mount(Homer,Jumbo),2).
%;Happens(Move(Jumbo,4),3).
%;!Happens(Move(Homer,2),3).
%;Happens(Move(Jumbo,7),4).
%;!Happens(Mount(Homer,Jumbo),3).
%;!Happens(Mount(Homer,Jumbo),4).
%;[position] !Happens(Move(Homer,position),4).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8156).
% range time 0 5
:- call_pel_directive(range(time, 0, 5)).

% range position 1 8
:- call_pel_directive(range(position, 1, 8)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8158).
% range offset 0 0
:- call_pel_directive(range(offset, 0, 0)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8160).
% completion Happens
:- call_pel_directive(completion(happens_at)).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/AkmanEtAl2004/ZooTest5.1.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{Akman:2004,
%;   author = "Varol Akman and Selim T. Erdogan and Joohyung Lee and Vladimir Lifschitz and Hudson Turner",
%;   year = "2004",
%;   title = "Representing the zoo world and the traffic world in the language of the causal calculator",
%;   journal = "Artificial Intelligence",
%;   volume = "153",
%;   pages = "105--140",
%; }
%;

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8189).
% option encoding 3
:- call_pel_directive(option(encoding, 3)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8191).
% load foundations/Root.e
:- call_pel_directive(load('foundations/Root.e')).

% load foundations/EC.e
:- call_pel_directive(load('foundations/EC.e')).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8193).
% load examples/AkmanEtAl2004/ZooWorld.e
:- call_pel_directive(load('examples/AkmanEtAl2004/ZooWorld.e')).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8195).
% human Homer
t(human,homer).

% elephant Jumbo
t(elephant,jumbo).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8197).
% horse Silver
t(horse,silver).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8199).
% Species(Homer)=HumanSpecies.
species(homer)=humanSpecies.


% Adult(Homer).
adult(homer).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8201).
% Species(Jumbo)=ElephantSpecies.
species(jumbo)=elephantSpecies.


% Adult(Jumbo).
adult(jumbo).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8203).
% Species(Silver)=HorseSpecies.
species(silver)=horseSpecies.


% Adult(Silver).
adult(silver).
% {position}


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8207).
% !HoldsAt(Pos(Homer,position),0) &
% HoldsAt(Pos(Jumbo,position),0) &
% HoldsAt(Pos(Homer,position),1) &
% !HoldsAt(Pos(Jumbo,position),1).
exists([Position],  (holds_at(not(pos(homer, Position)), 0), holds_at(pos(jumbo, Position), 0), holds_at(pos(homer, Position), 1), holds_at(not(pos(jumbo, Position)), 1))).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8211).
% HoldsAt(Mounted(Homer,Silver),0).
holds_at(mounted(homer,silver),0).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8213).
% option manualrelease on
:- call_pel_directive(option(manualrelease, on)).


% [human, animal]
 % !ReleasedAt(Mounted(human, animal),0).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8213).
not(released_at(mounted(Human,Animal),0)).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8215).
% [gate]
 % !ReleasedAt(Opened(gate),0).
not(released_at(opened(Gate),0)).


% [position]
 % ReleasedAt(Pos(Homer,position),0).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8215).
released_at(pos(homer,Position),0).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8217).
% [position]
 % !ReleasedAt(Pos(Jumbo,position),0).
not(released_at(pos(jumbo,Position),0)).


% [position]
 % !ReleasedAt(Pos(Silver,position),0).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8217).
not(released_at(pos(silver,Position),0)).


% [human]
 % HoldsAt(PosDeterminingFluent(human,1),1).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8219).
holds_at(posDeterminingFluent(Human,1),1).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8221).
% [event,animal]
 % !HoldsAt(DoneBy(event,animal),1).
holds_at(not(doneBy(Event,Animal)),1).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8223).
%;HoldsAt(Opened(GateAO),0).
%;HoldsAt(Pos(Homer,3),0).
%;HoldsAt(Pos(Jumbo,2),0).
%;HoldsAt(Pos(Silver,3),0).
%;Happens(Move(Jumbo,4),0).
%;Happens(ThrowOff(Silver,Homer),0).
%;HoldsAt(PosDeterminingFluent(Homer,2),0).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8231).
% range time 0 1
:- call_pel_directive(range(time, 0, 1)).

% range position 1 8
:- call_pel_directive(range(position, 1, 8)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8233).
% range offset 0 0
:- call_pel_directive(range(offset, 0, 0)).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/AkmanEtAl2004/ZooTest3.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{Akman:2004,
%;   author = "Varol Akman and Selim T. Erdogan and Joohyung Lee and Vladimir Lifschitz and Hudson Turner",
%;   year = "2004",
%;   title = "Representing the zoo world and the traffic world in the language of the causal calculator",
%;   journal = "Artificial Intelligence",
%;   volume = "153",
%;   pages = "105--140",
%; }
%;

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8262).
% option encoding 3
:- call_pel_directive(option(encoding, 3)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8264).
% load foundations/Root.e
:- call_pel_directive(load('foundations/Root.e')).

% load foundations/EC.e
:- call_pel_directive(load('foundations/EC.e')).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8266).
% load examples/AkmanEtAl2004/ZooWorld.e
:- call_pel_directive(load('examples/AkmanEtAl2004/ZooWorld.e')).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8268).
% human Homer
t(human,homer).

% dog Snoopy
t(dog,snoopy).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8271).
% Species(Homer)=HumanSpecies.
species(homer)=humanSpecies.


% Adult(Homer).
adult(homer).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8273).
% Species(Snoopy)=DogSpecies.
species(snoopy)=dogSpecies.


% Adult(Snoopy).
adult(snoopy).


% !HoldsAt(Opened(GateAO),0).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8275).
holds_at(not(opened(gateAO)),0).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8277).
% {position} 


% HoldsAt(Pos(Homer,position),0) & Outside=Loc(position).
exists([Position],  (holds_at(pos(homer, Position), 0), outside=loc(Position))).
% {position} 


% HoldsAt(Pos(Snoopy,position),0) & CageA=Loc(position).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8277).
exists([Position],  (holds_at(pos(snoopy, Position), 0), cageA=loc(Position))).
% {position} 


% HoldsAt(Pos(Homer,position),2) & CageA=Loc(position).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8279).
exists([Position],  (holds_at(pos(homer, Position), 2), cageA=loc(Position))).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8281).
% {position} 


% HoldsAt(Pos(Snoopy,position),2) & Outside=Loc(position).
exists([Position],  (holds_at(pos(snoopy, Position), 2), outside=loc(Position))).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8283).
% [human]
 % HoldsAt(PosDeterminingFluent(human,1),2).
holds_at(posDeterminingFluent(Human,1),2).


% [event,animal]
 % !HoldsAt(DoneBy(event,animal),2).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8283).
holds_at(not(doneBy(Event,Animal)),2).

% range time 0 2
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8285).
:- call_pel_directive(range(time, 0, 2)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8287).
% range position 1 8
:- call_pel_directive(range(position, 1, 8)).

% range offset 0 0
:- call_pel_directive(range(offset, 0, 0)).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/AkmanEtAl2004/ZooWorld.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{Akman:2004,
%;   author = "Varol Akman and Selim T. Erdogan and Joohyung Lee and Vladimir Lifschitz and Hudson Turner",
%;   year = "2004",
%;   title = "Representing the zoo world and the traffic world in the language of the causal calculator",
%;   journal = "Artificial Intelligence",
%;   volume = "153",
%;   pages = "105--140",
%; }
%;

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8317).
% sort position: integer
subsort(position,integer).

% sort location
sort(location).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8319).
% sort cage: location
subsort(cage,location).

% sort gate
sort(gate).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8321).
% sort animal
sort(animal).

% sort elephant: animal
subsort(elephant,animal).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8323).
% sort horse: animal
subsort(horse,animal).

% sort dog: animal
subsort(dog,animal).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8325).
% sort human: animal
subsort(human,animal).

% sort species
sort(species).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8328).
% function Loc(position): location
function(loc(position),location).

% function Side1(gate): position
function(side1(gate),position).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8330).
% function Side2(gate): position
function(side2(gate),position).

% function Species(animal): species
function(species(animal),species).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8333).
% predicate Accessible(position,position,time)
predicate(accessible(position,position,time)).

% predicate Adult(animal)
predicate(adult(animal)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8335).
% predicate Large(animal)
predicate(large(animal)).

% predicate LargeSpecies(species)
predicate(largeSpecies(species)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8337).
% predicate Neighbor(position,position)
predicate(neighbor(position,position)).

% predicate Sides(position,position,gate)
predicate(sides(position,position,gate)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8340).
% event Close(human,gate)
event(close(human,gate)).

% event GetOff(human,animal)
event(getOff(human,animal)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8342).
% event Mount(human,animal)
event(mount(human,animal)).

% event Move(animal,position)
event(move(animal,position)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8344).
% event Open(human,gate)
event(open(human,gate)).

% event ThrowOff(animal,human)
event(throwOff(animal,human)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8347).
% fluent AbnormalEncroachment(human)
fluent(abnormalEncroachment(human)).

% noninertial AbnormalEncroachment
:- call_pel_directive(noninertial(abnormalEncroachment)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8349).
% fluent DoneBy(event,animal)
fluent(doneBy(event,animal)).

% noninertial DoneBy
:- call_pel_directive(noninertial(doneBy)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8351).
% fluent Mounted(human,animal)
fluent(mounted(human,animal)).

% fluent MountFails(human)
fluent(mountFails(human)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8353).
% noninertial MountFails
:- call_pel_directive(noninertial(mountFails)).

% fluent Moves(animal)
fluent(moves(animal)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8355).
% noninertial Moves
:- call_pel_directive(noninertial(moves)).

% fluent Opened(gate)
fluent(opened(gate)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8357).
% fluent Pos(animal,position)
fluent(pos(animal,position)).

% fluent PosDeterminingFluent(human,position)
fluent(posDeterminingFluent(human,position)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8359).
% noninertial PosDeterminingFluent
:- call_pel_directive(noninertial(posDeterminingFluent)).

% fluent ThrowOffFails(animal,human)
fluent(throwOffFails(animal,human)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8361).
% noninertial ThrowOffFails
:- call_pel_directive(noninertial(throwOffFails)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8363).
% species HumanSpecies, ElephantSpecies, HorseSpecies, DogSpecies
t(species,humanSpecies).
t(species,elephantSpecies).
t(species,horseSpecies).
t(species,dogSpecies).

% location Outside
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8363).
t(location,outside).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8366).
% LargeSpecies(HumanSpecies).
largeSpecies(humanSpecies).


% LargeSpecies(ElephantSpecies).
largeSpecies(elephantSpecies).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8368).
% LargeSpecies(HorseSpecies).
largeSpecies(horseSpecies).


% !LargeSpecies(DogSpecies).
not(largeSpecies(dogSpecies)).


% [event,animal,time]
% HoldsAt(DoneBy(event,animal),time) <->
% (Happens(event,time) &
%  (({gate} event=Close(animal,gate)) |
%   ({animal1} event=GetOff(animal,animal1))|
%   ({animal1} event=Mount(animal,animal1))|
%   ({position} event=Move(animal,position))|
%   ({gate} event=Open(animal,gate)) |
%   ({human1} event=ThrowOff(animal,human1)))).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8372).
holds_at(doneBy(Event, Animal), Time) <->
    happens_at(Event, Time),
    (   exists([Gate], Event=close(Animal, Gate))
    ;   exists([Animal1], Event=getOff(Animal, Animal1))
    ;   exists([Animal15],
               Event=mount(Animal, Animal15))
    ;   exists([Position], Event=move(Animal, Position))
    ;   exists([Gate7], Event=open(Animal, Gate7))
    ;   exists([Human1], Event=throwOff(Animal, Human1))
    ).


% [event1,event2,animal,time]
% HoldsAt(DoneBy(event1,animal),time) &
% HoldsAt(DoneBy(event2,animal),time) ->
% event1=event2.
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8382).
holds_at(doneBy(Event1, Animal), Time), holds_at(doneBy(Event2, Animal), Time) ->
    Event1=Event2.


% [animal]
 % Large(animal) <-> (Adult(animal) & LargeSpecies(Species(animal))).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8385).
large(Animal) <->
    adult(Animal),
    largeSpecies(species(Animal)).


% [position]
 % {position1} % position1!=% position & Neighbor(position,position1).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8387).
exists([Position1],  (Position1\=Position, neighbor(Position, Position1))).


% [position]
 % !Neighbor(position,position).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8389).
not(neighbor(Position,Position)).


% [position1,position2]
% Neighbor(position1,position2) ->
% Neighbor(position2,position1).
neighbor(Position1, Position2) ->
    neighbor(Position2, Position1).


% [cage]
 % cage!=% Outside.
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8395).
Cage\=outside.


% [position1,position2,gate]
% Sides(position1,position2,gate) <->
% ((Side1(gate)=position1 &
%   Side2(gate)=position2) |
%  (Side2(gate)=position1 &
%   Side1(gate)=position2)).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8399).
sides(Position1, Position2, Gate) <->
    (   side1(Gate)=Position1,
        side2(Gate)=Position2
    ;   side2(Gate)=Position1,
        side1(Gate)=Position2
    ).


% [gate]
 % Loc(Side1(gate))!=Loc(Side2(gate)).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8404).
loc(side1(Gate))\=loc(side2(Gate)).


% [position1,position2,gate1,gate2]
% Sides(position1,position2,gate1) &
% Sides(position1,position2,gate2) ->
% gate1=gate2.
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8408).
sides(Position1, Position2, Gate1), sides(Position1, Position2, Gate2) ->
    Gate1=Gate2.


% [position1,position2,gate]
% Sides(position1,position2,gate) ->
% Neighbor(position1,position2).
sides(Position1, Position2, Gate) ->
    neighbor(Position1, Position2).


% [position1,position2]
% Loc(position1) != Loc(position2) &
% Neighbor(position1,position2) ->
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8417).
% {gate}%  Sides(position1,position2,gate).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8419).
exists([Gate],  (loc(Position1)\=loc(Position2), neighbor(Position1, Position2)->sides(Position1, Position2, Gate))).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8421).
% [animal,position1,position2,time]
% HoldsAt(Pos(animal,position1),time) &
% HoldsAt(Pos(animal,position2),time) ->
% position1=position2.
holds_at(pos(Animal, Position1), Time), holds_at(pos(Animal, Position2), Time) ->
    Position1=Position2.


% [animal,time]
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8427).
% {position} % HoldsAt(Pos(animal,position),time).
exists([Position],
 holds_at(pos(Animal,Position),Time)).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8429).
% [animal1,animal2,position,time]
% (animal1!=animal2 &
%  Large(animal1) &
%  Large(animal2) &
%  HoldsAt(Pos(animal1,position),time) &
%  HoldsAt(Pos(animal2,position),time)) ->
% (({human} human=animal1 & HoldsAt(Mounted(human,animal2),time)) |
%  ({human} human=animal2 & HoldsAt(Mounted(human,animal1),time))).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8429).
Animal1\=Animal2, large(Animal1), large(Animal2), holds_at(pos(Animal1, Position), Time), holds_at(pos(Animal2, Position), Time) ->
    (   exists([Human],
                (Human=Animal1, holds_at(mounted(Human, Animal2), Time)))
    ;   exists([Human5],
                (Human5=Animal2, holds_at(mounted(Human5, Animal1), Time)))
    ).


% [human,position1,position2,time]
% HoldsAt(PosDeterminingFluent(human,position1),time) &
% HoldsAt(PosDeterminingFluent(human,position2),time) ->
% position1=position2.
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8439).
holds_at(posDeterminingFluent(Human, Position1), Time), holds_at(posDeterminingFluent(Human, Position2), Time) ->
    Position1=Position2.


% [animal,position,time]
% Initiates(Move(animal,position),Pos(animal,position),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8444).
initiates_at(move(Animal,Position),
	     pos(Animal,Position),
	     Time).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8446).
% [animal,position1,position2,time]
% HoldsAt(Pos(animal,position1),time) ->
% Terminates(Move(animal,position2),Pos(animal,position1),time).
holds_at(pos(Animal, Position1), Time) ->
    terminates_at(move(Animal, Position2),
                  pos(Animal, Position1),
                  Time).


% [animal,position,time]
% Happens(Move(animal,position),time) ->
% !HoldsAt(Pos(animal,position),time).
happens_at(move(Animal, Position), Time) ->
    holds_at(not(pos(Animal, Position)), Time).


% [human,position,time]
% Happens(Move(human,position),time) ->
% !{animal} HoldsAt(Mounted(human,animal),time).
happens_at(move(Human, Position), Time) ->
    not(exists([Animal],
               holds_at(mounted(Human, Animal), Time))).


% [human,gate,time]
% Initiates(Open(human,gate),Opened(gate),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8459).
initiates_at(open(Human,Gate),
	     opened(Gate),
	     Time).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8461).
% [human,gate,time]
% Happens(Open(human,gate),time) ->
% !HoldsAt(Opened(gate),time) &
% (!{animal} HoldsAt(Mounted(human,animal),time)) &
% ({position}
%  (Side1(gate)=position | Side2(gate)=position) &
%  HoldsAt(Pos(human,position),time)).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8461).
happens_at(open(Human, Gate), Time) ->
    holds_at(not(opened(Gate)), Time),
    not(exists([Animal],
               holds_at(mounted(Human, Animal), Time))),
    exists([Position],
            ((side1(Gate)=Position;side2(Gate)=Position), holds_at(pos(Human, Position), Time))).


% [human,gate,time]
% Terminates(Close(human,gate),Opened(gate),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8470).
terminates_at(close(Human,Gate),
	      opened(Gate),
	      Time).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8472).
% [human,gate,time]
% Happens(Close(human,gate),time) ->
% HoldsAt(Opened(gate),time) &
% (!{animal} HoldsAt(Mounted(human,animal),time)) &
% {position}% 
% (Side1(gate)=position | Side2(gate)=position) &
% HoldsAt(Pos(human,position),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8476).
exists([Position],  (happens_at(close(Human, Gate), Time)->holds_at(opened(Gate), Time), not(exists([Animal], holds_at(mounted(Human, Animal), Time))), (side1(Gate)=Position;side2(Gate)=Position), holds_at(pos(Human, Position), Time))).


% [human,animal,position,time]
% HoldsAt(Mounted(human,animal),time) &
% HoldsAt(Pos(animal,position),time) ->
% HoldsAt(Pos(human,position),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8481).
holds_at(mounted(Human, Animal), Time), holds_at(pos(Animal, Position), Time) ->
    holds_at(pos(Human, Position), Time).


% [animal,time]
% HoldsAt(Moves(animal),time) <->
% ({position}
%  HoldsAt(Pos(animal,position),time) &
%  !HoldsAt(Pos(animal,position),time+1)).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8486).
holds_at(moves(Animal), Time) <->
    exists([Position],
            (holds_at(pos(Animal, Position), Time), holds_at(not(pos(Animal, Position)), Time+1))).


% [human,time]
% HoldsAt(MountFails(human),time) <->
% ({animal}
%   Happens(Mount(human,animal),time) &
%   HoldsAt(Moves(animal),time)).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8492).
holds_at(mountFails(Human), Time) <->
    exists([Animal],
            (happens_at(mount(Human, Animal), Time), holds_at(moves(Animal), Time))).


% [human,animal,position,time]
% !HoldsAt(Moves(animal),time) ->
% Releases(Mount(human,animal),Pos(human,position),time).
holds_at(not(moves(Animal)), Time) ->
    releases_at(mount(Human, Animal),
                pos(Human, Position),
                Time).


% [human,animal,time]
% !HoldsAt(Moves(animal),time) ->
% Initiates(Mount(human,animal),Mounted(human,animal),time).
holds_at(not(moves(Animal)), Time) ->
    initiates_at(mount(Human, Animal),
                 mounted(Human, Animal),
                 Time).


% [human,animal,position,time]
% HoldsAt(Pos(animal,position),time) &
% HoldsAt(Moves(animal),time) ->
% Initiates(Mount(human,animal),Pos(human,position),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8506).
holds_at(pos(Animal, Position), Time), holds_at(moves(Animal), Time) ->
    initiates_at(mount(Human, Animal),
                 pos(Human, Position),
                 Time).


% [human,animal,position,time]
% HoldsAt(Pos(human,position),time) &
% HoldsAt(Moves(animal),time) ->
% Terminates(Mount(human,animal),Pos(human,position),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8511).
holds_at(pos(Human, Position), Time), holds_at(moves(Animal), Time) ->
    terminates_at(mount(Human, Animal),
                  pos(Human, Position),
                  Time).


% [human,animal,time]
% Happens(Mount(human,animal),time) ->
% Large(animal).
happens_at(mount(Human, Animal), Time) ->
    large(Animal).


% [human,animal,time]
% HoldsAt(Mounted(human,animal),time) ->
% Large(animal).
holds_at(mounted(Human, Animal), Time) ->
    large(Animal).


% [human1,human2,time]
% Happens(Mount(human1,human2),time) ->
% !Large(human1).
happens_at(mount(Human1, Human2), Time) ->
    not(large(Human1)).


% [human1,human2,time]
% HoldsAt(Mounted(human1,human2),time) ->
% !Large(human1).
holds_at(mounted(Human1, Human2), Time) ->
    not(large(Human1)).


% [human,animal,time]
% Happens(Mount(human,animal),time) ->
% !{human1} human1!=human & HoldsAt(Mounted(human1,animal),time).
happens_at(mount(Human, Animal), Time) ->
    not(exists([Human1],
                (Human1\=Human, holds_at(mounted(Human1, Animal), Time)))).


% [human1,human2,animal,time]
% HoldsAt(Mounted(human1,animal),time) &
% HoldsAt(Mounted(human2,animal),time) ->
% human1=human2.
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8536).
holds_at(mounted(Human1, Animal), Time), holds_at(mounted(Human2, Animal), Time) ->
    Human1=Human2.


% [human,animal,time]
% Happens(Mount(human,animal),time) ->
% !{human1} human1!=human & HoldsAt(Mounted(human1,human),time).
happens_at(mount(Human, Animal), Time) ->
    not(exists([Human1],
                (Human1\=Human, holds_at(mounted(Human1, Human), Time)))).


% [human1,human2,time]
% Happens(Mount(human1,human2),time) ->
% {animal}%  HoldsAt(Mounted(human2,animal),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8545).
exists([Animal],  (happens_at(mount(Human1, Human2), Time)->holds_at(mounted(Human2, Animal), Time))).


% [human1,human2,time]
% HoldsAt(Mounted(human1,human2),time) ->
% !{animal} HoldsAt(Mounted(human2,animal),time).
holds_at(mounted(Human1, Human2), Time) ->
    not(exists([Animal],
               holds_at(mounted(Human2, Animal), Time))).


% [human,animal,time]
% Happens(Mount(human,animal),time) ->
% !{animal1} HoldsAt(Mounted(human,animal1),time).
happens_at(mount(Human, Animal), Time) ->
    not(exists([Animal1],
               holds_at(mounted(Human, Animal1), Time))).


% [human,animal,time]
% !HoldsAt(Moves(animal),time) ->
% Terminates(GetOff(human,animal),Mounted(human,animal),time).
holds_at(not(moves(Animal)), Time) ->
    terminates_at(getOff(Human, Animal),
                  mounted(Human, Animal),
                  Time).


% [human,animal,position,time]
% !HoldsAt(Moves(animal),time) &
% HoldsAt(PosDeterminingFluent(human,position),time) ->
% Initiates(GetOff(human,animal),Pos(human,position),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8561).
holds_at(not(moves(Animal)), Time), holds_at(posDeterminingFluent(Human, Position), Time) ->
    initiates_at(getOff(Human, Animal),
                 pos(Human, Position),
                 Time).


% [human,animal,position,time]
% !HoldsAt(Moves(animal),time) &
% HoldsAt(Pos(human,position),time) ->
% Terminates(GetOff(human,animal),Pos(human,position),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8566).
holds_at(not(moves(Animal)), Time), holds_at(pos(Human, Position), Time) ->
    terminates_at(getOff(Human, Animal),
                  pos(Human, Position),
                  Time).


% [human,animal,position1,position2,time]
% !HoldsAt(Moves(animal),time) &
% HoldsAt(Pos(human,position1),time) &
% position1!=position2 ->
% Terminates(GetOff(human,animal),Pos(human,position2),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8571).
holds_at(not(moves(Animal)), Time), holds_at(pos(Human, Position1), Time), Position1\=Position2 ->
    terminates_at(getOff(Human, Animal),
                  pos(Human, Position2),
                  Time).


% [human,animal,time]
% Happens(GetOff(human,animal),time) ->
% HoldsAt(Mounted(human,animal),time).
happens_at(getOff(Human, Animal), Time) ->
    holds_at(mounted(Human, Animal), Time).


% [animal1,human,time]
% HoldsAt(ThrowOffFails(animal1,human),time) <->
% ({position,animal2}
%  animal2!=human &
%  HoldsAt(PosDeterminingFluent(human,position),time) &
%  Large(animal2) &
%  HoldsAt(Pos(animal2,position),time+1)).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8581).
holds_at(throwOffFails(Animal1, Human), Time) <->
    exists([Position, Animal2],
            (Animal2\=Human, holds_at(posDeterminingFluent(Human, Position), Time), large(Animal2), holds_at(pos(Animal2, Position), Time+1))).


% [animal,human,position,time]
% HoldsAt(PosDeterminingFluent(human,position),time) &
% !HoldsAt(ThrowOffFails(animal,human),time) ->
% Initiates(ThrowOff(animal,human),Pos(human,position),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8589).
holds_at(posDeterminingFluent(Human, Position), Time), holds_at(not(throwOffFails(Animal, Human)), Time) ->
    initiates_at(throwOff(Animal, Human),
                 pos(Human, Position),
                 Time).


% [animal,human,position,time]
% HoldsAt(Pos(human,position),time) &
% !HoldsAt(ThrowOffFails(animal,human),time) ->
% Terminates(ThrowOff(animal,human),Pos(human,position),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8594).
holds_at(pos(Human, Position), Time), holds_at(not(throwOffFails(Animal, Human)), Time) ->
    terminates_at(throwOff(Animal, Human),
                  pos(Human, Position),
                  Time).


% [animal,human,position1,position2,time]
% !HoldsAt(ThrowOffFails(animal,human),time) &
% HoldsAt(Pos(human,position1),time) &
% !HoldsAt(PosDeterminingFluent(human,position2),time) &
% position1!=position2 ->
% Terminates(ThrowOff(animal,human),Pos(human,position2),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8599).
holds_at(not(throwOffFails(Animal, Human)), Time), holds_at(pos(Human, Position1), Time), holds_at(not(posDeterminingFluent(Human, Position2)), Time), Position1\=Position2 ->
    terminates_at(throwOff(Animal, Human),
                  pos(Human, Position2),
                  Time).


% [human,time]
% (!{animal} Happens(ThrowOff(animal,human),time) |
%            Happens(GetOff(human,animal),time)) ->
% HoldsAt(PosDeterminingFluent(human,1),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8606).
not(exists([Animal],  (happens_at(throwOff(Animal, Human), Time);happens_at(getOff(Human, Animal), Time)))) ->
    holds_at(posDeterminingFluent(Human, 1), Time).


% [human,position,animal1,animal2,time]
% HoldsAt(PosDeterminingFluent(human,position),time) &
% HoldsAt(ThrowOffFails(animal1,human),time) &
% HoldsAt(Pos(animal2,position),time) ->
% Initiates(ThrowOff(animal1,human),Mounted(human,animal2),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8611).
holds_at(posDeterminingFluent(Human, Position), Time), holds_at(throwOffFails(Animal1, Human), Time), holds_at(pos(Animal2, Position), Time) ->
    initiates_at(throwOff(Animal1, Human),
                 mounted(Human, Animal2),
                 Time).


% [human,animal,time]
% !HoldsAt(ThrowOffFails(animal,human),time) ->
% Terminates(ThrowOff(animal,human),Mounted(human,animal),time).
holds_at(not(throwOffFails(Animal, Human)), Time) ->
    terminates_at(throwOff(Animal, Human),
                  mounted(Human, Animal),
                  Time).


% [animal,human,time]
% Happens(ThrowOff(animal,human),time) ->
% HoldsAt(Mounted(human,animal),time).
happens_at(throwOff(Animal, Human), Time) ->
    holds_at(mounted(Human, Animal), Time).


% [animal,human,time]
% Happens(ThrowOff(animal,human),time) ->
% !Happens(GetOff(human,animal),time).
happens_at(throwOff(Animal, Human), Time) ->
    not(happens_at(getOff(Human, Animal), Time)).


% [animal,human,time]
% Happens(GetOff(human,animal),time) ->
% !Happens(ThrowOff(animal,human),time).
happens_at(getOff(Human, Animal), Time) ->
    not(happens_at(throwOff(Animal, Human), Time)).


% [position1,position2,time]
% Accessible(position1,position2,time) <->
% (Neighbor(position1,position2) &
%  !{gate} Sides(position1,position2,gate) &
%          !HoldsAt(Opened(gate),time)).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8633).
accessible(Position1, Position2, Time) <->
    not(exists([Gate],
                (neighbor(Position1, Position2), sides(Position1, Position2, Gate), holds_at(not(opened(Gate)), Time)))).


% [animal,position1,position2,time]
% (position1!=position2 &
%  HoldsAt(Pos(animal,position1),time) &
%  HoldsAt(Pos(animal,position2),time+1)) ->
% Accessible(position1,position2,time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8639).
Position1\=Position2, holds_at(pos(Animal, Position1), Time), holds_at(pos(Animal, Position2), Time+1) ->
    accessible(Position1, Position2, Time).


% [human,time]
% HoldsAt(AbnormalEncroachment(human),time) <->
% (HoldsAt(MountFails(human),time) |
%  ({position,animal1,animal2}
%    HoldsAt(PosDeterminingFluent(human,position),time) &
%    !HoldsAt(ThrowOffFails(animal2,human),time) &
%    Happens(ThrowOff(animal2,human),time) &
%    animal1!=human &
%    Large(animal1) &
%    HoldsAt(Pos(animal1,position),time) &
%    !HoldsAt(Pos(animal1,position),time+1))).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8645).
holds_at(abnormalEncroachment(Human), Time) <->
    (   holds_at(mountFails(Human), Time)
    ;   exists([Position, Animal1, Animal2],
                (holds_at(posDeterminingFluent(Human, Position), Time), holds_at(not(throwOffFails(Animal2, Human)), Time), happens_at(throwOff(Animal2, Human), Time), Animal1\=Human, large(Animal1), holds_at(pos(Animal1, Position), Time), holds_at(not(pos(Animal1, Position)), Time+1)))
    ).


% [animal1,animal2,position,time]
% HoldsAt(Pos(animal1,position),time) &
% !HoldsAt(Pos(animal1,position),time+1) &
% !HoldsAt(Pos(animal2,position),time) &
% HoldsAt(Pos(animal2,position),time+1) ->
% (!Large(animal1) |
%  !Large(animal2) |
%  ({human} human=animal2 & HoldsAt(AbnormalEncroachment(human),time))).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8657).
holds_at(pos(Animal1, Position), Time), holds_at(not(pos(Animal1, Position)), Time+1), holds_at(not(pos(Animal2, Position)), Time), holds_at(pos(Animal2, Position), Time+1) ->
    (   not(large(Animal1))
    ;   not(large(Animal2))
    ;   exists([Human],
                (Human=Animal2, holds_at(abnormalEncroachment(Human), Time)))
    ).


% [animal1,animal2,position1,position2,time]
% animal1!=% animal2 &
% Large(animal1) & Large(animal2) &
% HoldsAt(Pos(animal1,position1),time) &
% HoldsAt(Pos(animal1,position2),time+1) &
% HoldsAt(Pos(animal2,position1),time) &
% HoldsAt(Pos(animal2,position2),time+1) ->
% !{gate} Sides(position1,position2,gate).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8666).
Animal1\=Animal2, large(Animal1), large(Animal2), holds_at(pos(Animal1, Position1), Time), holds_at(pos(Animal1, Position2), Time+1), holds_at(pos(Animal2, Position1), Time), holds_at(pos(Animal2, Position2), Time+1) ->
    not(exists([Gate], sides(Position1, Position2, Gate))).


% [animal1,animal2,position1,position2,time]
% animal1!=% animal2 &
% Large(animal1) & Large(animal2) &
% HoldsAt(Pos(animal1,position1),time) &
% HoldsAt(Pos(animal1,position2),time+1) &
% HoldsAt(Pos(animal2,position2),time) &
% HoldsAt(Pos(animal2,position1),time+1) ->
% !{gate} Sides(position1,position2,gate).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8675).
Animal1\=Animal2, large(Animal1), large(Animal2), holds_at(pos(Animal1, Position1), Time), holds_at(pos(Animal1, Position2), Time+1), holds_at(pos(Animal2, Position2), Time), holds_at(pos(Animal2, Position1), Time+1) ->
    not(exists([Gate], sides(Position1, Position2, Gate))).


% [gate,position1,position2,time]
% HoldsAt(Opened(gate),time) &
% !HoldsAt(Opened(gate),time+1) &
% Sides(position1,position2,gate) ->
% !{animal}
% HoldsAt(Pos(animal,position1),time) &
% HoldsAt(Pos(animal,position2),time+1).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8684).
holds_at(opened(Gate), Time), holds_at(not(opened(Gate)), Time+1), sides(Position1, Position2, Gate) ->
    not(exists([Animal],
                (holds_at(pos(Animal, Position1), Time), holds_at(pos(Animal, Position2), Time+1)))).

% gate GateAO
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8690).
t(gate,gateAO).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8692).
% cage CageA
t(cage,cageA).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8694).
% Loc(1)=CageA.
loc(1)=cageA.


% Loc(2)=CageA.
loc(2)=cageA.


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8696).
% Loc(3)=CageA.
loc(3)=cageA.


% Loc(4)=CageA.
loc(4)=cageA.


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8698).
% Loc(5)=Outside.
loc(5)=outside.


% Loc(6)=Outside.
loc(6)=outside.


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8700).
% Loc(7)=Outside.
loc(7)=outside.


% Loc(8)=Outside.
loc(8)=outside.


% [position1,position2]
% Neighbor(position1,position2) <->
% ((position1=1 & position2=2) |
%  (position1=1 & position2=3) |
%  (position1=1 & position2=4) |
%  (position1=2 & position2=3) |
%  (position1=2 & position2=4) |
%  (position1=3 & position2=4) |
%  (position1=5 & position2=6) |
%  (position1=5 & position2=7) |
%  (position1=5 & position2=8) |
%  (position1=6 & position2=7) |
%  (position1=6 & position2=8) |
%  (position1=7 & position2=8) |
%  (position2=1 & position1=2) |
%  (position2=1 & position1=3) |
%  (position2=1 & position1=4) |
%  (position2=2 & position1=3) |
%  (position2=2 & position1=4) |
%  (position2=3 & position1=4) |
%  (position2=5 & position1=6) |
%  (position2=5 & position1=7) |
%  (position2=5 & position1=8) |
%  (position2=6 & position1=7) |
%  (position2=6 & position1=8) |
%  (position2=7 & position1=8) |
%  (position1=4 & position2=7) |
%  (position2=4 & position1=7)).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8704).
neighbor(Position1, Position2) <->
    (   Position1=1,
        Position2=2
    ;   Position1=1,
        Position2=3
    ;   Position1=1,
        Position2=4
    ;   Position1=2,
        Position2=3
    ;   Position1=2,
        Position2=4
    ;   Position1=3,
        Position2=4
    ;   Position1=5,
        Position2=6
    ;   Position1=5,
        Position2=7
    ;   Position1=5,
        Position2=8
    ;   Position1=6,
        Position2=7
    ;   Position1=6,
        Position2=8
    ;   Position1=7,
        Position2=8
    ;   Position2=1,
        Position1=2
    ;   Position2=1,
        Position1=3
    ;   Position2=1,
        Position1=4
    ;   Position2=2,
        Position1=3
    ;   Position2=2,
        Position1=4
    ;   Position2=3,
        Position1=4
    ;   Position2=5,
        Position1=6
    ;   Position2=5,
        Position1=7
    ;   Position2=5,
        Position1=8
    ;   Position2=6,
        Position1=7
    ;   Position2=6,
        Position1=8
    ;   Position2=7,
        Position1=8
    ;   Position1=4,
        Position2=7
    ;   Position2=4,
        Position1=7
    ).


% Side1(GateAO)=4.
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8731).
side1(gateAO)=4.


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8733).
% Side2(GateAO)=7.
side2(gateAO)=7.


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8735).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/AkmanEtAl2004/ZooTest4.1.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{Akman:2004,
%;   author = "Varol Akman and Selim T. Erdogan and Joohyung Lee and Vladimir Lifschitz and Hudson Turner",
%;   year = "2004",
%;   title = "Representing the zoo world and the traffic world in the language of the causal calculator",
%;   journal = "Artificial Intelligence",
%;   volume = "153",
%;   pages = "105--140",
%; }
%;

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8762).
% option encoding 3
:- call_pel_directive(option(encoding, 3)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8764).
% load foundations/Root.e
:- call_pel_directive(load('foundations/Root.e')).

% load foundations/EC.e
:- call_pel_directive(load('foundations/EC.e')).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8766).
% load examples/AkmanEtAl2004/ZooWorld.e
:- call_pel_directive(load('examples/AkmanEtAl2004/ZooWorld.e')).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8768).
% human Homer
t(human,homer).

% elephant Jumbo
t(elephant,jumbo).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8771).
% Species(Homer)=HumanSpecies.
species(homer)=humanSpecies.


% Adult(Homer).
adult(homer).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8773).
% Species(Jumbo)=ElephantSpecies.
species(jumbo)=elephantSpecies.


% Adult(Jumbo).
adult(jumbo).


% !HoldsAt(Opened(GateAO),0).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8775).
holds_at(not(opened(gateAO)),0).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8777).
% {position} 


% HoldsAt(Pos(Homer,position),0) & Outside=Loc(position).
exists([Position],  (holds_at(pos(homer, Position), 0), outside=loc(Position))).
% {position} 


% HoldsAt(Pos(Jumbo,position),0) & CageA=Loc(position).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8777).
exists([Position],  (holds_at(pos(jumbo, Position), 0), cageA=loc(Position))).
% {position} 


% HoldsAt(Pos(Homer,position),4) & CageA=Loc(position).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8779).
exists([Position],  (holds_at(pos(homer, Position), 4), cageA=loc(Position))).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8781).
% {position} 


% HoldsAt(Pos(Jumbo,position),4) & Outside=Loc(position).
exists([Position],  (holds_at(pos(jumbo, Position), 4), outside=loc(Position))).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8783).
% [human]
 % HoldsAt(PosDeterminingFluent(human,1),4).
holds_at(posDeterminingFluent(Human,1),4).


% [event,animal]
 % !HoldsAt(DoneBy(event,animal),4).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8783).
holds_at(not(doneBy(Event,Animal)),4).


%; ccalc.2.0b.8.3 single model
%;HoldsAt(Pos(Homer,7),0).
%;HoldsAt(Pos(Jumbo,2),0).
%;Happens(Move(Jumbo,4),0).
%;Happens(Open(Homer,GateAO),0).
%;Happens(Mount(Homer,Jumbo),1).
%;Happens(ThrowOff(Jumbo,Homer),2).
%;HoldsAt(PosDeterminingFluent(Homer,1),2).
%;Happens(Move(Jumbo,7),3).
%;Happens(Mount(Homer,Jumbo),3).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8797).
% range time 0 4
:- call_pel_directive(range(time, 0, 4)).

% range position 1 8
:- call_pel_directive(range(position, 1, 8)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8799).
% range offset 0 0
:- call_pel_directive(range(offset, 0, 0)).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/AkmanEtAl2004/ZooTest2.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{Akman:2004,
%;   author = "Varol Akman and Selim T. Erdogan and Joohyung Lee and Vladimir Lifschitz and Hudson Turner",
%;   year = "2004",
%;   title = "Representing the zoo world and the traffic world in the language of the causal calculator",
%;   journal = "Artificial Intelligence",
%;   volume = "153",
%;   pages = "105--140",
%; }
%;

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8828).
% option encoding 3
:- call_pel_directive(option(encoding, 3)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8830).
% load foundations/Root.e
:- call_pel_directive(load('foundations/Root.e')).

% load foundations/EC.e
:- call_pel_directive(load('foundations/EC.e')).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8832).
% load examples/AkmanEtAl2004/ZooWorld.e
:- call_pel_directive(load('examples/AkmanEtAl2004/ZooWorld.e')).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8834).
% human Homer
t(human,homer).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8836).
% Species(Homer)=HumanSpecies.
species(homer)=humanSpecies.


% Adult(Homer).
adult(homer).


% !HoldsAt(Opened(GateAO),0).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8838).
holds_at(not(opened(gateAO)),0).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8840).
% {position} 


% HoldsAt(Pos(Homer,position),0) & Outside=Loc(position).
exists([Position],  (holds_at(pos(homer, Position), 0), outside=loc(Position))).
% {position} 


% HoldsAt(Pos(Homer,position),2) & CageA=Loc(position).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8840).
exists([Position],  (holds_at(pos(homer, Position), 2), cageA=loc(Position))).


% [human]
 % HoldsAt(PosDeterminingFluent(human,1),2).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8842).
holds_at(posDeterminingFluent(Human,1),2).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8844).
% [event,animal]
 % !HoldsAt(DoneBy(event,animal),2).
holds_at(not(doneBy(Event,Animal)),2).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8846).
% range time 0 2
:- call_pel_directive(range(time, 0, 2)).

% range position 1 8
:- call_pel_directive(range(position, 1, 8)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8848).
% range offset 0 0
:- call_pel_directive(range(offset, 0, 0)).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/AkmanEtAl2004/ZooTest6.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{Akman:2004,
%;   author = "Varol Akman and Selim T. Erdogan and Joohyung Lee and Vladimir Lifschitz and Hudson Turner",
%;   year = "2004",
%;   title = "Representing the zoo world and the traffic world in the language of the causal calculator",
%;   journal = "Artificial Intelligence",
%;   volume = "153",
%;   pages = "105--140",
%; }
%;

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8877).
% option encoding 3
:- call_pel_directive(option(encoding, 3)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8879).
% load foundations/Root.e
:- call_pel_directive(load('foundations/Root.e')).

% load foundations/EC.e
:- call_pel_directive(load('foundations/EC.e')).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8881).
% load examples/AkmanEtAl2004/ZooWorld.e
:- call_pel_directive(load('examples/AkmanEtAl2004/ZooWorld.e')).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8883).
% human Homer
t(human,homer).

% elephant Jumbo
t(elephant,jumbo).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8886).
% Species(Homer)=HumanSpecies.
species(homer)=humanSpecies.


% Adult(Homer).
adult(homer).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8888).
% Species(Jumbo)=ElephantSpecies.
species(jumbo)=elephantSpecies.


% Adult(Jumbo).
adult(jumbo).


% HoldsAt(Mounted(Homer,Jumbo),0).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8890).
holds_at(mounted(homer,jumbo),0).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8892).
% HoldsAt(Pos(Jumbo,1),0).
holds_at(pos(jumbo,1),0).


% Happens(ThrowOff(Jumbo,Homer),0).
happens_at(throwOff(jumbo,homer),0).

% option manualrelease on
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8894).
:- call_pel_directive(option(manualrelease, on)).


% [human, animal]
 % !ReleasedAt(Mounted(human, animal),0).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8896).
not(released_at(mounted(Human,Animal),0)).


% [gate]
 % !ReleasedAt(Opened(gate),0).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8896).
not(released_at(opened(Gate),0)).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8898).
% [position]
 % ReleasedAt(Pos(Homer,position),0).
released_at(pos(homer,Position),0).


% [position]
 % !ReleasedAt(Pos(Jumbo,position),0).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8898).
not(released_at(pos(jumbo,Position),0)).


% [human]
 % HoldsAt(PosDeterminingFluent(human,1),1).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8900).
holds_at(posDeterminingFluent(Human,1),1).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8902).
% [event,animal]
 % !HoldsAt(DoneBy(event,animal),1).
holds_at(not(doneBy(Event,Animal)),1).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8904).
% range time 0 1
:- call_pel_directive(range(time, 0, 1)).

% range position 1 8
:- call_pel_directive(range(position, 1, 8)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8906).
% range offset 0 0
:- call_pel_directive(range(offset, 0, 0)).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/AkmanEtAl2004/ZooTest1.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors: 
%; IBM - Initial implementation
%;
%; @article{Akman:2004,
%;   author = "Varol Akman and Selim T. Erdogan and Joohyung Lee and Vladimir Lifschitz and Hudson Turner",
%;   year = "2004",
%;   title = "Representing the zoo world and the traffic world in the language of the causal calculator",
%;   journal = "Artificial Intelligence",
%;   volume = "153",
%;   pages = "105--140",
%; }
%;

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8935).
% option encoding 3
:- call_pel_directive(option(encoding, 3)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8937).
% load foundations/Root.e
:- call_pel_directive(load('foundations/Root.e')).

% load foundations/EC.e
:- call_pel_directive(load('foundations/EC.e')).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8939).
% load examples/AkmanEtAl2004/ZooWorld.e
:- call_pel_directive(load('examples/AkmanEtAl2004/ZooWorld.e')).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8941).
% human Homer
t(human,homer).

% elephant Jumbo
t(elephant,jumbo).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8944).
% Species(Homer)=HumanSpecies.
species(homer)=humanSpecies.


% Adult(Homer).
adult(homer).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8946).
% Species(Jumbo)=ElephantSpecies.
species(jumbo)=elephantSpecies.


% Adult(Jumbo).
adult(jumbo).


% !HoldsAt(Opened(GateAO),0).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8948).
holds_at(not(opened(gateAO)),0).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8950).
% HoldsAt(Pos(Homer,6),0).
holds_at(pos(homer,6),0).


% [time]
 % HoldsAt(Pos(Jumbo,1),time).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8950).
holds_at(pos(jumbo,1),Time).


%; goal


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8954).
% HoldsAt(Mounted(Homer,Jumbo),4).
holds_at(mounted(homer,jumbo),4).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8956).
%;ABDUCE
%;Happens(Move(Homer,7),0).
%;Happens(Open(Homer,GateAO),1).
%;Happens(Move(Homer,4),2).
%;Happens(Mount(Homer,Jumbo),3).
% [human]
 
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8962).
% HoldsAt(PosDeterminingFluent(human,1),4).
holds_at(posDeterminingFluent(Human,1),4).


% [event,animal]
 % !HoldsAt(DoneBy(event,animal),4).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8962).
holds_at(not(doneBy(Event,Animal)),4).

% range time 0 4
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8964).
:- call_pel_directive(range(time, 0, 4)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8966).
% range position 1 8
:- call_pel_directive(range(position, 1, 8)).

% range offset 0 0
:- call_pel_directive(range(offset, 0, 0)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8969).
% option timediff off
:- call_pel_directive(option(timediff, off)).

% option modeldiff on
:- call_pel_directive(option(modeldiff, on)).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/AkmanEtAl2004/ZooTest5.2.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{Akman:2004,
%;   author = "Varol Akman and Selim T. Erdogan and Joohyung Lee and Vladimir Lifschitz and Hudson Turner",
%;   year = "2004",
%;   title = "Representing the zoo world and the traffic world in the language of the causal calculator",
%;   journal = "Artificial Intelligence",
%;   volume = "153",
%;   pages = "105--140",
%; }
%;

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',8999).
% option encoding 3
:- call_pel_directive(option(encoding, 3)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',9001).
% load foundations/Root.e
:- call_pel_directive(load('foundations/Root.e')).

% load foundations/EC.e
:- call_pel_directive(load('foundations/EC.e')).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',9003).
% load examples/AkmanEtAl2004/ZooWorld.e
:- call_pel_directive(load('examples/AkmanEtAl2004/ZooWorld.e')).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',9005).
% human Homer
t(human,homer).

% elephant Jumbo
t(elephant,jumbo).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',9007).
% horse Silver
t(horse,silver).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',9009).
% Species(Homer)=HumanSpecies.
species(homer)=humanSpecies.


% Adult(Homer).
adult(homer).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',9011).
% Species(Jumbo)=ElephantSpecies.
species(jumbo)=elephantSpecies.


% Adult(Jumbo).
adult(jumbo).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',9013).
% Species(Silver)=HorseSpecies.
species(silver)=horseSpecies.


% Adult(Silver).
adult(silver).
% {position}


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',9017).
% !HoldsAt(Pos(Homer,position),0) &
% HoldsAt(Pos(Jumbo,position),0) &
% HoldsAt(Pos(Homer,position),1) &
% !HoldsAt(Pos(Jumbo,position),1).
exists([Position],  (holds_at(not(pos(homer, Position)), 0), holds_at(pos(jumbo, Position), 0), holds_at(pos(homer, Position), 1), holds_at(not(pos(jumbo, Position)), 1))).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',9021).
% [animal,time]
 % !Happens(ThrowOff(animal,Homer),time).
not(happens_at(throwOff(Animal,homer),Time)).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',9023).
% [human]
 % HoldsAt(PosDeterminingFluent(human,1),1).
holds_at(posDeterminingFluent(Human,1),1).


% [event,animal]
 % !HoldsAt(DoneBy(event,animal),1).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',9023).
holds_at(not(doneBy(Event,Animal)),1).


%;HoldsAt(Opened(GateAO),0).
%;HoldsAt(Pos(Homer,3),0).
%;HoldsAt(Pos(Jumbo,2),0).
%;HoldsAt(Pos(Silver,7),0).
%;Happens(Move(Jumbo,4),0).
%;Happens(Move(Silver,8),0).
%;Happens(Mount(Homer,Jumbo),0).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',9034).
% range time 0 1
:- call_pel_directive(range(time, 0, 1)).

% range position 1 8
:- call_pel_directive(range(position, 1, 8)).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.e',9036).
% range offset 0 0
:- call_pel_directive(range(offset, 0, 0)).
%; End of file.
:- call_pel_directive(translate(ending,
                                '/pack/logicmoo_ec/test/ec_planner/ectest/ec_reader_test_examples.pel')).
