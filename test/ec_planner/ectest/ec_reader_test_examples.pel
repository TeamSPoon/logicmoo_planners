:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(pfc).
% Wed, 01 Apr 2020 20:04:17 GMT
% From ../ectest/ec_reader_test_examples.pel:4
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4640).

 /*  loading(load_e_pl,
   	'/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e').
 */
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2004a/Holding.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{Mueller:2004a,
%;   author = "Erik T. Mueller",
%;   year = "2004",
%;   title = "Event calculus reasoning through satisfiability",
%;   journal = "Journal of Logic and Computation",
%;   volume = "14",
%;   number = "5",
%;   pages = "703--730",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:27
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',28).
% option encoding 3
:- set_ec_option(encoding, 3).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:29
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',30).
% load foundations/Root.e
:- load_e('foundations/Root.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:30
% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',30).
:- load_e('foundations/EC.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:32
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',33).
% sort person
==> sort(person).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:33
% sort object
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',33).
==> sort(object).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:35
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',36).
% event Hold(person,object)
event(hold(person,object)).
==> mpred_prop(hold(person,object),event).
==> meta_argtypes(hold(person,object)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:36
% fluent Holding(person,object)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',36).
fluent(holding(person,object)).
==> mpred_prop(holding(person,object),fluent).
==> meta_argtypes(holding(person,object)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:38
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',39).
% person P1
==> t(person,p1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:39
% object O1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',39).
==> t(object,o1).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:41
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',42).
% Happens(Hold(P1,O1),0).

 /*  [] ->
       ta(Ta_Param, tvs1=[start], tvs2=[start], happens(hold(p1, o1), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',42).
axiom(happens(hold(p1, o1), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:43
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',44).
% [person,object,time]
% Initiates(Hold(person,object),Holding(person,object),time).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(hold(Person, Object),
                    holding(Person, Object),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',44).
axiom(initiates(hold(Person, Object), holding(Person, Object), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:46
% !HoldsAt(Holding(P1,O1),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',46).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(holding(p1, o1)), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',46).
axiom(holds_at(neg(holding(p1, o1)), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:47
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',48).
%;;; AUTO !ReleasedAt(Holding(P1,O1),0).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:49
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',50).
% completion Happens
==> completion(happens).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:51
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',52).
% range time 0 1
==> range(time,0,1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:52
% range offset 1 1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',52).
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2004a/Leaf.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{Mueller:2004a,
%;   author = "Erik T. Mueller",
%;   year = "2004",
%;   title = "Event calculus reasoning through satisfiability",
%;   journal = "Journal of Logic and Computation",
%;   volume = "14",
%;   number = "5",
%;   pages = "703--730",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:82
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',83).
% option trajectory on
:- set_ec_option(trajectory, on).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:84
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',85).
% load foundations/Root.e
:- load_e('foundations/Root.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:85
% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',85).
:- load_e('foundations/EC.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:87
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',88).
% sort object
==> sort(object).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:88
% sort height: integer
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',88).
==> subsort(height,integer).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:90
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',91).
% fluent Height(object,height)
fluent(height(object,height)).
==> mpred_prop(height(object,height),fluent).
==> meta_argtypes(height(object,height)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:91
% fluent Falling(object)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',91).
fluent(falling(object)).
==> mpred_prop(falling(object),fluent).
==> meta_argtypes(falling(object)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:92
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',93).
% event StartFalling(object)
event(startFalling(object)).
==> mpred_prop(startFalling(object),event).
==> meta_argtypes(startFalling(object)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:93
% event HitsGround(object)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',93).
event(hitsGround(object)).
==> mpred_prop(hitsGround(object),event).
==> meta_argtypes(hitsGround(object)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:95
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',96).
% [object,height1,height2,time]
% HoldsAt(Height(object,height1),time) &
% HoldsAt(Height(object,height2),time) ->
% height1=height2.
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:98
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',96).

 /*  holds_at(height(Object, Height1), Time), holds_at(height(Object, Height2), Time) ->
       equals(Height1, Height2).
 */

 /*  not(holds_at(height(Object, Height1), Time)) :-
       holds_at(height(Object, Height2), Time),
       not(equals(Height1, Height2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',96).

 /*  [holds_at(height(Object, Height2), Time), not(equals(Height1, Height2))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(height(Object, Height1)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',96).
axiom(holds_at(neg(height(Object, Height1)), Time),
   
    [ holds_at(height(Object, Height2), Time),
      not(equals(Height1, Height2))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',96).

 /*  not(holds_at(height(Object, Height2), Time)) :-
       holds_at(height(Object, Height1), Time),
       not(equals(Height1, Height2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',96).

 /*  [holds_at(height(Object, Height1), Time), not(equals(Height1, Height2))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(height(Object, Height2)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',96).
axiom(holds_at(neg(height(Object, Height2)), Time),
   
    [ holds_at(height(Object, Height1), Time),
      not(equals(Height2, Height1))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:100
% [object,time]
% Initiates(StartFalling(object),Falling(object),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',102).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(startFalling(Object), falling(Object), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',102).
axiom(initiates(startFalling(Object), falling(Object), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:103
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',104).
% [object,height,time]
% Releases(StartFalling(object),Height(object,height),time).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          releases(startFalling(Object),
                   height(Object, Height),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',104).
axiom(releases(startFalling(Object), height(Object, Height), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:106
% [object,height1,height2,offset,time]
% HoldsAt(Height(object,height1),time) &
% height2=height1-offset*offset ->
% Trajectory(Falling(object),time,Height(object,height2),offset).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:109
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',108).

 /*  holds_at(height(Object, Height1), Time), equals(Height2, Height1-Offset*Offset) ->
       trajectory(falling(Object),
                  Time,
                  height(Object, Height2),
                  Offset).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',108).

 /*  trajectory(falling(Object), Time, height(Object, Height2), Offset) :-
       holds_at(height(Object, Height1), Time),
       equals(Height2, Height1-Offset*Offset).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',108).

 /*  [holds_at(height(Object, Height1), Time), equals(Height2, Height1-Offset*Offset)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          trajectory(falling(Object),
                     Time,
                     height(Object, Height2),
                     Offset)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',108).
axiom(trajectory(falling(Object), Time, height(Object, Height2), Offset),
   
    [ holds_at(height(Object, Height1), Time),
      equals(Height2, Height1-Offset*Offset)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',108).

 /*  not(holds_at(height(Object, Height1), Time)) :-
       equals(Height2, Height1-Offset*Offset),
       not(trajectory(falling(Object),
                      Time,
                      height(Object, Height2),
                      Offset)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',108).

 /*  [equals(Height2, Height1-Offset*Offset), not(trajectory(falling(Object), Time, height(Object, Height2), Offset))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(height(Object, Height1)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',108).
axiom(holds_at(neg(height(Object, Height1)), Time),
   
    [ equals(Height2, Height1-Offset*Offset),
      not(trajectory(falling(Object),
                     Time,
                     height(Object, Height2),
                     Offset))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:111
% [object,time]
% HoldsAt(Falling(object),time) &
% HoldsAt(Height(object,0),time) ->
% Happens(HitsGround(object),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:114
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',113).

 /*  holds_at(falling(Object), Time), holds_at(height(Object, 0), Time) ->
       happens(hitsGround(Object), Time).
 */

 /*  happens(hitsGround(Object), Time) :-
       holds_at(falling(Object), Time),
       holds_at(height(Object, 0), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',113).

 /*  [holds_at(falling(Object), Time), holds_at(height(Object, 0), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(hitsGround(Object), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',113).
axiom(happens(hitsGround(Object), Time),
   
    [ holds_at(falling(Object), Time),
      holds_at(height(Object, 0), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',113).

 /*  not(holds_at(falling(Object), Time)) :-
       holds_at(height(Object, 0), Time),
       not(happens(hitsGround(Object), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',113).

 /*  [holds_at(height(Object, 0), Time), not(happens(hitsGround(Object), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(falling(Object)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',113).
axiom(holds_at(neg(falling(Object)), Time),
   
    [ holds_at(height(Object, 0), Time),
      not(happens(hitsGround(Object), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',113).

 /*  not(holds_at(height(Object, 0), Time)) :-
       holds_at(falling(Object), Time),
       not(happens(hitsGround(Object), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',113).

 /*  [holds_at(falling(Object), Time), not(happens(hitsGround(Object), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(height(Object, 0)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',113).
axiom(holds_at(neg(height(Object, 0)), Time),
   
    [ holds_at(falling(Object), Time),
      not(happens(hitsGround(Object), Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:116
%;[object,height1,height2,time]
%;HoldsAt(Height(object,height1),time) &
%;height1 != height2 ->
%;Terminates(HitsGround(object),Height(object,height2),time).
% [object,height,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:122
% HoldsAt(Height(object,height),time) ->
% Initiates(HitsGround(object),Height(object,height),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',122).

 /*  [holds_at(height(Object, Height), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(hitsGround(Object),
                    height(Object, Height),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',122).
axiom(initiates(hitsGround(Object), height(Object, Height), Time),
    [holds_at(height(Object, Height), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:125
% [object,time]
% Terminates(HitsGround(object),Falling(object),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',127).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(hitsGround(Object), falling(Object), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',127).
axiom(terminates(hitsGround(Object), falling(Object), Time),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:128
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',129).
% object Leaf
==> t(object,leaf).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:130
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',131).
% !HoldsAt(Falling(Leaf),0).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(falling(leaf)), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',131).
axiom(holds_at(neg(falling(leaf)), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:131
% HoldsAt(Height(Leaf,9),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',131).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(height(leaf, 9), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',131).
axiom(holds_at(height(leaf, 9), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:132
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',133).
% Happens(StartFalling(Leaf),0).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          happens(startFalling(leaf), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',133).
axiom(happens(startFalling(leaf), start),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:134
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',135).
% completion Happens
==> completion(happens).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:136
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',137).
% range time 0 4
==> range(time,0,4).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:137
% range offset 1 9
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',137).
==> range(offset,1,9).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:138
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',139).
% range height 0 9
==> range(height,0,9).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Cassimatis2002/PolySpace.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @phdthesis{Cassimatis:2002,
%;   author = "Nicholas L. Cassimatis",
%;   year = "2002",
%;   title = "Polyscheme: A Cognitive Architecture for Integrating Multiple Representation and Inference Schemes",
%;   address = "Cambridge, MA",
%;   school = "Program in Media Arts and Sciences, School of Architecture and Planning, Massachusetts Institute of Technology",
%; }
%;
%; sorts

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:167
% sort object
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',167).
==> sort(object).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:168
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',169).
% sort xcoord: integer
==> subsort(xcoord,integer).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:169
% sort ycoord: integer
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',169).
==> subsort(ycoord,integer).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:170
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',171).
% sort grid
==> sort(grid).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:171
% sort shape
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',171).
==> sort(shape).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:172
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',173).
% sort color
==> sort(color).
%; constants

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:175
% shape Round,Square
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',175).
==> t(shape,round).
==> t(shape,square).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:176
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',177).
% color Red,Green
==> t(color,red).
==> t(color,green).
%; predicates, fluents, and events

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:179
% predicate Equal(object,object)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',179).
predicate(equal(object,object)).
==> mpred_prop(equal(object,object),predicate).
==> meta_argtypes(equal(object,object)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:180
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',181).
% predicate Shape(object,shape)
predicate(shape(object,shape)).
==> mpred_prop(shape(object,shape),predicate).
==> meta_argtypes(shape(object,shape)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:181
% predicate Color(object,color)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',181).
predicate(color(object,color)).
==> mpred_prop(color(object,color),predicate).
==> meta_argtypes(color(object,color)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:182
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',183).
% fluent Location(grid,object,xcoord,ycoord)
fluent(location(grid,object,xcoord,ycoord)).
==> mpred_prop(location(grid,object,xcoord,ycoord),fluent).
==> meta_argtypes(location(grid,object,xcoord,ycoord)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:183
% event Move(grid,object,xcoord,ycoord,xcoord,ycoord)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',183).
event(move(grid,object,xcoord,ycoord,xcoord,ycoord)).
==> mpred_prop(move(grid,object,xcoord,ycoord,xcoord,ycoord),event).
==> meta_argtypes(move(grid,object,xcoord,ycoord,xcoord,ycoord)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:185
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',186).
%; axioms
% [object1,object2]
 % Equal(object1,object2) -> Equal(object2,object1).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:187
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',188).

 /*  equal(Object1, Object2) ->
       equal(Object2, Object1).
 */


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:189
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',190).
%; objects have unique shape
% [object,shape1,shape2]
% Shape(object,shape1) & Shape(object,shape2) ->
% shape1=shape2.
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:192

 /*  shape(Object, Shape1), shape(Object, Shape2) ->
       equals(Shape1, Shape2).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',192).

 /*  not(shape(Object, Shape1)) :-
       shape(Object, Shape2),
       not(equals(Shape1, Shape2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',192).

 /*  [shape(Object, Shape2), not(equals(Shape1, Shape2))] ->
       ta(Ta_Param, tvs1=[], tvs2=[], not(shape(Object, Shape1))).
 */
axiom(not(shape(Object, Shape1)),
    [shape(Object, Shape2), not(equals(Shape1, Shape2))]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',192).

 /*  not(shape(Object, Shape2)) :-
       shape(Object, Shape1),
       not(equals(Shape1, Shape2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',192).

 /*  [shape(Object, Shape1), not(equals(Shape1, Shape2))] ->
       ta(Ta_Param4, tvs1=[], tvs2=[], not(shape(Object, Shape2))).
 */
axiom(not(shape(Object, Shape2)),
    [shape(Object, Shape1), not(equals(Shape2, Shape1))]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:194
%; objects have unique color
% [object,color1,color2]
% Color(object,color1) & Color(object,color2) ->
% color1=color2.
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:197
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',196).

 /*  color(Object, Color1), color(Object, Color2) ->
       equals(Color1, Color2).
 */

 /*  not(color(Object, Color1)) :-
       color(Object, Color2),
       not(equals(Color1, Color2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',196).

 /*  [color(Object, Color2), not(equals(Color1, Color2))] ->
       ta(Ta_Param, tvs1=[], tvs2=[], not(color(Object, Color1))).
 */
axiom(not(color(Object, Color1)),
    [color(Object, Color2), not(equals(Color1, Color2))]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',196).

 /*  not(color(Object, Color2)) :-
       color(Object, Color1),
       not(equals(Color1, Color2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',196).

 /*  [color(Object, Color1), not(equals(Color1, Color2))] ->
       ta(Ta_Param4, tvs1=[], tvs2=[], not(color(Object, Color2))).
 */
axiom(not(color(Object, Color2)),
    [color(Object, Color1), not(equals(Color2, Color1))]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:199
%; if objects are the same, they have the same shape
% [object1,object2]
% Equal(object1,object2) ->
% ({shape} Shape(object1,shape) & Shape(object2,shape)).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:202
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',201).

 /*  equal(Object1, Object2) ->
       exists([Shape],
               (shape(Object1, Shape), shape(Object2, Shape))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',201).

 /*  not(equal(Object1, Object2)) :-
       (   not(shape(Object1, Shape))
       ;   not(shape(Object2, Shape))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',201).

 /*  [(not(shape(Object1, Shape));not(shape(Object2, Shape)))] ->
       ta(Ta_Param, tvs1=[], tvs2=[], not(equal(Object1, Object2))).
 */
axiom(not(equal(Object1, Object2)),
   
    [  (not(shape(Object1, Shape));not(shape(Object2, Shape)))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',201).

 /*  shape(Object1, Shape) :-
       equal(Object1, Object2).
 */

 /*  [equal(Object1, Object2)] ->
       ta(Ta_Param4, tvs1=[], tvs2=[], shape(Object1, Shape)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',201).
axiom(shape(Object1, Shape),
    [equal(Object1, Object2)]).

 /*  shape(Object2, Shape) :-
       equal(Object1, Object2).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',201).

 /*  [equal(Object1, Object2)] ->
       ta(Ta_Param5, tvs1=[], tvs2=[], shape(Object2, Shape)).
 */
axiom(shape(Object2, Shape),
    [equal(Object1, Object2)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:204
%; if objects are the same, they have the same color
% [object1,object2]
% Equal(object1,object2) ->
% ({color} Color(object1,color) & Color(object2,color)).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:207
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',206).

 /*  equal(Object1, Object2) ->
       exists([Color],
               (color(Object1, Color), color(Object2, Color))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',206).

 /*  not(equal(Object1, Object2)) :-
       (   not(color(Object1, Color))
       ;   not(color(Object2, Color))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',206).

 /*  [(not(color(Object1, Color));not(color(Object2, Color)))] ->
       ta(Ta_Param, tvs1=[], tvs2=[], not(equal(Object1, Object2))).
 */
axiom(not(equal(Object1, Object2)),
   
    [  (not(color(Object1, Color));not(color(Object2, Color)))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',206).

 /*  color(Object1, Color) :-
       equal(Object1, Object2).
 */

 /*  [equal(Object1, Object2)] ->
       ta(Ta_Param4, tvs1=[], tvs2=[], color(Object1, Color)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',206).
axiom(color(Object1, Color),
    [equal(Object1, Object2)]).

 /*  color(Object2, Color) :-
       equal(Object1, Object2).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',206).

 /*  [equal(Object1, Object2)] ->
       ta(Ta_Param5, tvs1=[], tvs2=[], color(Object2, Color)).
 */
axiom(color(Object2, Color),
    [equal(Object1, Object2)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:209
%; if objects are the same, they have the same location
% [grid,object1,object2,xcoord1,ycoord1,xcoord2,ycoord2,time]
% Equal(object1,object2) ->
% (HoldsAt(Location(grid,object1,xcoord1,ycoord1),time) &
%  HoldsAt(Location(grid,object2,xcoord2,ycoord2),time) ->
%  xcoord1=xcoord2 & ycoord1=ycoord2).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:214
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',211).

 /*  equal(Object1, Object2) ->
       ( holds_at(location(Grid, Object1, Xcoord1, Ycoord1), Time), holds_at(location(Grid, Object2, Xcoord2, Ycoord2), Time)->equals(Xcoord1, Xcoord2), equals(Ycoord1, Ycoord2)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',211).

 /*  not(equal(Object1, Object2)) :-
       ( holds_at(location(Grid, Object1, Xcoord1, Ycoord1),
                  Time),
         holds_at(location(Grid, Object2, Xcoord2, Ycoord2),
                  Time)
       ),
       (   not(equals(Xcoord1, Xcoord2))
       ;   not(equals(Ycoord1, Ycoord2))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',211).

 /*  [holds_at(location(Grid, Object1, Xcoord1, Ycoord1), Time), holds_at(location(Grid, Object2, Xcoord2, Ycoord2), Time),  (not(equals(Xcoord1, Xcoord2));not(equals(Ycoord1, Ycoord2)))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(equal(Object1, Object2))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',211).
axiom(not(equal(Object1, Object2)),
   
    [ holds_at(location(Grid, Object1, Xcoord1, Ycoord1),
               Time),
      holds_at(location(Grid, Object2, Xcoord2, Ycoord2),
               Time),
       (not(equals(Xcoord1, Xcoord2));not(equals(Ycoord1, Ycoord2)))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',211).

 /*  not(holds_at(location(Grid, Object1, Xcoord1, Ycoord1), Time)) :-
       holds_at(location(Grid, Object2, Xcoord2, Ycoord2),
                Time),
       (   not(equals(Xcoord1, Xcoord2))
       ;   not(equals(Ycoord1, Ycoord2))
       ),
       equal(Object1, Object2).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',211).

 /*  [holds_at(location(Grid, Object2, Xcoord2, Ycoord2), Time),  (not(equals(Xcoord1, Xcoord2));not(equals(Ycoord1, Ycoord2))), equal(Object1, Object2)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(location(Grid,
                                Object1,
                                Xcoord1,
                                Ycoord1)),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',211).
axiom(holds_at(neg(location(Grid, Object1, Xcoord1, Ycoord1)), Time),
   
    [ holds_at(location(Grid, Object2, Xcoord2, Ycoord2),
               Time),
       (not(equals(Xcoord1, Xcoord2));not(equals(Ycoord1, Ycoord2))),
      equal(Object1, Object2)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',211).

 /*  not(holds_at(location(Grid, Object2, Xcoord2, Ycoord2), Time)) :-
       holds_at(location(Grid, Object1, Xcoord1, Ycoord1),
                Time),
       (   not(equals(Xcoord1, Xcoord2))
       ;   not(equals(Ycoord1, Ycoord2))
       ),
       equal(Object1, Object2).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',211).

 /*  [holds_at(location(Grid, Object1, Xcoord1, Ycoord1), Time),  (not(equals(Xcoord1, Xcoord2));not(equals(Ycoord1, Ycoord2))), equal(Object1, Object2)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(location(Grid,
                                Object2,
                                Xcoord2,
                                Ycoord2)),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',211).
axiom(holds_at(neg(location(Grid, Object2, Xcoord2, Ycoord2)), Time),
   
    [ holds_at(location(Grid, Object1, Xcoord1, Ycoord1),
               Time),
       (not(equals(Xcoord2, Xcoord1));not(equals(Ycoord2, Ycoord1))),
      equal(Object1, Object2)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:216
%; object in one location at a time
% [grid,object,xcoord1,ycoord1,xcoord2,ycoord2,time]
% HoldsAt(Location(grid,object,xcoord1,ycoord1),time) &
% HoldsAt(Location(grid,object,xcoord2,ycoord2),time) ->
% xcoord1=xcoord2 & ycoord1=ycoord2.
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:220
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',218).

 /*  holds_at(location(Grid, Object, Xcoord1, Ycoord1), Time), holds_at(location(Grid, Object, Xcoord2, Ycoord2), Time) ->
       equals(Xcoord1, Xcoord2),
       equals(Ycoord1, Ycoord2).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',218).

 /*  not(holds_at(location(Grid, Object, Xcoord1, Ycoord1), Time)) :-
       holds_at(location(Grid, Object, Xcoord2, Ycoord2),
                Time),
       (   not(equals(Xcoord1, Xcoord2))
       ;   not(equals(Ycoord1, Ycoord2))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',218).

 /*  [holds_at(location(Grid, Object, Xcoord2, Ycoord2), Time),  (not(equals(Xcoord1, Xcoord2));not(equals(Ycoord1, Ycoord2)))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(location(Grid,
                                Object,
                                Xcoord1,
                                Ycoord1)),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',218).
axiom(holds_at(neg(location(Grid, Object, Xcoord1, Ycoord1)), Time),
   
    [ holds_at(location(Grid, Object, Xcoord2, Ycoord2),
               Time),
       (not(equals(Xcoord1, Xcoord2));not(equals(Ycoord1, Ycoord2)))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',218).

 /*  not(holds_at(location(Grid, Object, Xcoord2, Ycoord2), Time)) :-
       holds_at(location(Grid, Object, Xcoord1, Ycoord1),
                Time),
       (   not(equals(Xcoord1, Xcoord2))
       ;   not(equals(Ycoord1, Ycoord2))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',218).

 /*  [holds_at(location(Grid, Object, Xcoord1, Ycoord1), Time),  (not(equals(Xcoord1, Xcoord2));not(equals(Ycoord1, Ycoord2)))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(location(Grid,
                                Object,
                                Xcoord2,
                                Ycoord2)),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',218).
axiom(holds_at(neg(location(Grid, Object, Xcoord2, Ycoord2)), Time),
   
    [ holds_at(location(Grid, Object, Xcoord1, Ycoord1),
               Time),
       (not(equals(Xcoord2, Xcoord1));not(equals(Ycoord2, Ycoord1)))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:222
%; objects have locations
% [grid,object,time]
% (
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:224
% {xcoord,ycoord} HoldsAt(Location(grid,object,xcoord,ycoord),time)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',224).

 /*  exists([Xcoord,Ycoord],
    holds_at(location(Grid,Object,Xcoord,Ycoord),
   	 Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',224).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(location(Grid, Object, Xcoord, Ycoord),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',224).
axiom(holds_at(location(Grid, Object, Xcoord, Ycoord), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:226
%; different objects are not at same location
% [grid,object1,object2,xcoord1,ycoord1,time]
% HoldsAt(Location(grid,object1,xcoord1,ycoord1),time) &
% HoldsAt(Location(grid,object2,xcoord1,ycoord1),time) ->
% Equal(object1,object2).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:230
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',228).

 /*  holds_at(location(Grid, Object1, Xcoord1, Ycoord1), Time), holds_at(location(Grid, Object2, Xcoord1, Ycoord1), Time) ->
       equal(Object1, Object2).
 */

 /*  equal(Object1, Object2) :-
       holds_at(location(Grid, Object1, Xcoord1, Ycoord1),
                Time),
       holds_at(location(Grid, Object2, Xcoord1, Ycoord1),
                Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',228).

 /*  [holds_at(location(Grid, Object1, Xcoord1, Ycoord1), Time), holds_at(location(Grid, Object2, Xcoord1, Ycoord1), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          equal(Object1, Object2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',228).
axiom(equal(Object1, Object2),
   
    [ holds_at(location(Grid, Object1, Xcoord1, Ycoord1),
               Time),
      holds_at(location(Grid, Object2, Xcoord1, Ycoord1),
               Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',228).

 /*  not(holds_at(location(Grid, Object1, Xcoord1, Ycoord1), Time)) :-
       holds_at(location(Grid, Object2, Xcoord1, Ycoord1),
                Time),
       not(equal(Object1, Object2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',228).

 /*  [holds_at(location(Grid, Object2, Xcoord1, Ycoord1), Time), not(equal(Object1, Object2))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(location(Grid,
                                Object1,
                                Xcoord1,
                                Ycoord1)),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',228).
axiom(holds_at(neg(location(Grid, Object1, Xcoord1, Ycoord1)), Time),
   
    [ holds_at(location(Grid, Object2, Xcoord1, Ycoord1),
               Time),
      not(equal(Object1, Object2))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',228).

 /*  not(holds_at(location(Grid, Object2, Xcoord1, Ycoord1), Time)) :-
       holds_at(location(Grid, Object1, Xcoord1, Ycoord1),
                Time),
       not(equal(Object1, Object2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',228).

 /*  [holds_at(location(Grid, Object1, Xcoord1, Ycoord1), Time), not(equal(Object1, Object2))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(location(Grid,
                                Object2,
                                Xcoord1,
                                Ycoord1)),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',228).
axiom(holds_at(neg(location(Grid, Object2, Xcoord1, Ycoord1)), Time),
   
    [ holds_at(location(Grid, Object1, Xcoord1, Ycoord1),
               Time),
      not(equal(Object1, Object2))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:232
%; moving to a location causes an object to be at that location
% [grid,object,xcoord1,ycoord1,xcoord2,ycoord2,time]
% Initiates(Move(grid,object,xcoord1,ycoord1,xcoord2,ycoord2),
%           Location(grid,object,xcoord2,ycoord2),
%           time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:236
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',234).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(move(Grid,
                         Object,
                         Xcoord1,
                         Ycoord1,
                         Xcoord2,
                         Ycoord2),
                    location(Grid, Object, Xcoord2, Ycoord2),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',234).
axiom(initiates(move(Grid, Object, Xcoord1, Ycoord1, Xcoord2, Ycoord2), location(Grid, Object, Xcoord2, Ycoord2), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:238
%; moving to a location causes the object no longer to be at its previous
%; location
% [grid,object,xcoord1,ycoord1,xcoord2,ycoord2,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:241
% Terminates(Move(grid,object,xcoord1,ycoord1,xcoord2,ycoord2),
%            Location(grid,object,xcoord1,ycoord1),
%            time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:243
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',241).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(move(Grid,
                          Object,
                          Xcoord1,
                          Ycoord1,
                          Xcoord2,
                          Ycoord2),
                     location(Grid,
                              Object,
                              Xcoord1,
                              Ycoord1),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',241).
axiom(terminates(move(Grid, Object, Xcoord1, Ycoord1, Xcoord2, Ycoord2), location(Grid, Object, Xcoord1, Ycoord1), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:245
%;; allow diagonal movements
%;[grid,object,xcoord1,ycoord1,xcoord2,ycoord2,time]
%;Happens(Move(grid,object,xcoord1,ycoord1,xcoord2,ycoord2),time) ->
%;HoldsAt(Location(grid,object,xcoord1,ycoord1),time) &
%;(xcoord1=xcoord2 |
%; xcoord1=xcoord2+1 |
%; xcoord1=xcoord2-1) &
%;(ycoord1=ycoord2 |
%; ycoord1=ycoord2+1 |
%; ycoord1=ycoord2-1).
%; only allow right angle movements
% [grid,object,xcoord1,ycoord1,xcoord2,ycoord2,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:258
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',259).
% Happens(Move(grid,object,xcoord1,ycoord1,xcoord2,ycoord2),time) ->
% HoldsAt(Location(grid,object,xcoord1,ycoord1),time) &
% ((xcoord1=xcoord2 & (ycoord1=ycoord2+1 | ycoord1=ycoord2-1)) |
%  (ycoord1=ycoord2 & (xcoord1=xcoord2+1 | xcoord1=xcoord2-1))).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:261
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',259).

 /*  happens(move(Grid, Object, Xcoord1, Ycoord1, Xcoord2, Ycoord2), Time) ->
       holds_at(location(Grid, Object, Xcoord1, Ycoord1),
                Time),
       (   equals(Xcoord1, Xcoord2),
           (   equals(Ycoord1, Ycoord2+1)
           ;   equals(Ycoord1, Ycoord2-1)
           )
       ;   equals(Ycoord1, Ycoord2),
           (   equals(Xcoord1, Xcoord2+1)
           ;   equals(Xcoord1, Xcoord2-1)
           )
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',259).

 /*  not(happens(move(Grid, Object, Xcoord1, Ycoord1, Xcoord2, Ycoord2), Time)) :-
       (   not(holds_at(location(Grid,
                                 Object,
                                 Xcoord1,
                                 Ycoord1),
                        Time))
       ;   (   not(equals(Xcoord1, Xcoord2))
           ;   not(equals(Ycoord1, Ycoord2+1)),
               not(equals(Ycoord1, Ycoord2-1))
           ),
           (   not(equals(Ycoord1, Ycoord2))
           ;   not(equals(Xcoord1, Xcoord2+1)),
               not(equals(Xcoord1, Xcoord2-1))
           )
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',259).

 /*  [(holds_at(neg(location(Grid, Object, Xcoord1, Ycoord1)), Time);(not(equals(Xcoord1, Xcoord2));not(equals(Ycoord1, Ycoord2+1)), not(equals(Ycoord1, Ycoord2-1))), (not(equals(Ycoord1, Ycoord2));not(equals(Xcoord1, Xcoord2+1)), not(equals(Xcoord1, Xcoord2-1))))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(move(Grid,
                           Object,
                           Xcoord1,
                           Ycoord1,
                           Xcoord2,
                           Ycoord2),
                      Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',259).
axiom(not(happens(move(Grid, Object, Xcoord1, Ycoord1, Xcoord2, Ycoord2), Time)),
   
    [  (holds_at(neg(location(Grid, Object, Xcoord1, Ycoord1)), Time);(not(equals(Xcoord1, Xcoord2));not(equals(Ycoord1, Ycoord2+1)), not(equals(Ycoord1, Ycoord2-1))), (not(equals(Ycoord1, Ycoord2));not(equals(Xcoord1, Xcoord2+1)), not(equals(Xcoord1, Xcoord2-1))))
    ]).

 /*  holds_at(location(Grid, Object, Xcoord1, Ycoord1), Time) :-
       happens(move(Grid,
                    Object,
                    Xcoord1,
                    Ycoord1,
                    Xcoord2,
                    Ycoord2),
               Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',259).

 /*  [holds_at(metreqs(move(Grid, Object, Xcoord1, Ycoord1, Xcoord2, Ycoord2)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(move(Grid,
                        Object,
                        Xcoord1,
                        Ycoord1,
                        Xcoord2,
                        Ycoord2),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',259).
axiom(requires(move(Grid, Object, Xcoord1, Ycoord1, Xcoord2, Ycoord2), Time),
   
    [ holds_at(metreqs(move(Grid,
                            Object,
                            Xcoord1,
                            Ycoord1,
                            Xcoord2,
                            Ycoord2)),
               Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',259).

 /*  [holds_at(location(Grid, Object, Xcoord1, Ycoord1), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(move(Grid,
                                Object,
                                Xcoord1,
                                Ycoord1,
                                Xcoord2,
                                Ycoord2)),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',259).
axiom(holds_at(metreqs(move(Grid, Object, Xcoord1, Ycoord1, Xcoord2, Ycoord2)), Time),
   
    [ holds_at(location(Grid, Object, Xcoord1, Ycoord1),
               Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:263
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Cassimatis2002/TwoScreens.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @phdthesis{Cassimatis:2002,
%;   author = "Nicholas L. Cassimatis",
%;   year = "2002",
%;   title = "Polyscheme: A Cognitive Architecture for Integrating Multiple Representation and Inference Schemes",
%;   address = "Cambridge, MA",
%;   school = "Program in Media Arts and Sciences, School of Architecture and Planning, Massachusetts Institute of Technology",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:289
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',290).
% load foundations/Root.e
:- load_e('foundations/Root.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:290
% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',290).
:- load_e('foundations/EC.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:291
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',292).
% load examples/Cassimatis2002/PolySpace.e
:- load_e('examples/Cassimatis2002/PolySpace.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:293
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',294).
% grid G1
==> t(grid,g1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:294
% object X,Y,Screen1,Screen2
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',294).
==> t(object,x).
==> t(object,y).
==> t(object,screen1).
==> t(object,screen2).
%; perceptions:


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:297
% Shape(X,Round).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',297).

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], shape(x, round)).
 */
axiom(shape(x, round),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:298
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',299).
% Color(X,Red).

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], color(x, red)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',299).
axiom(color(x, red),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:299
% Shape(Y,Round).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',299).

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], shape(y, round)).
 */
axiom(shape(y, round),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:300
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',301).
% Color(Y,Red).

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], color(y, red)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',301).
axiom(color(y, red),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:301
% Shape(Screen1,Square).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',301).

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], shape(screen1, square)).
 */
axiom(shape(screen1, square),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:302
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',303).
% Color(Screen1,Green).

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], color(screen1, green)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',303).
axiom(color(screen1, green),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:303
% Shape(Screen2,Square).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',303).

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], shape(screen2, square)).
 */
axiom(shape(screen2, square),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:304
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',305).
% Color(Screen2,Green).

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], color(screen2, green)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',305).
axiom(color(screen2, green),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:305
% [time]
 % HoldsAt(Location(G1,Screen1,2,0),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',305).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(location(g1, screen1, 2, 0), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',305).
axiom(holds_at(location(g1, screen1, 2, 0), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:306
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',307).
% [time]
 % HoldsAt(Location(G1,Screen2,4,0),time).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(location(g1, screen2, 4, 0), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',307).
axiom(holds_at(location(g1, screen2, 4, 0), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:307
% HoldsAt(Location(G1,X,1,1),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',307).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(location(g1, x, 1, 1), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',307).
axiom(holds_at(location(g1, x, 1, 1), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:308
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',309).
% HoldsAt(Location(G1,Y,5,1),4).

 /*  [b(start, Start4), toffset(start, 4, Start4), ignore(start+4==Start4)] ->
       ta(Ta_Param,
          tvs1=[start+4],
          tvs2=[Start4, start],
          holds_at(location(g1, y, 5, 1), Start4)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',309).
axiom(holds_at(location(g1, y, 5, 1), Start4),
    [b(start, Start4), toffset(start, 4, Start4)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:310
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',311).
% [xcoord,ycoord,time]
% xcoord!=% 2 & xcoord!=4 & !(xcoord=1 & ycoord=1 & time=0) ->
% !HoldsAt(Location(G1,X,xcoord,ycoord),time) |
% xcoord=5 & ycoord=1 & time=4 & Equal(X,Y).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:313
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',311).

 /*  diff(Xcoord, 2), diff(Xcoord, 4), not((equals(Xcoord, 1), equals(Ycoord, 1), equals(Time, 0))) ->
       (   holds_at(neg(location(g1, x, Xcoord, Ycoord)), Time)
       ;   equals(Xcoord, 5),
           equals(Ycoord, 1),
           equals(Time, 4),
           equal(x, y)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',311).

 /*  holds_at(neg(location(g1, x, Xcoord, Ycoord)), Time) :-
       (   not(equals(Xcoord, 5))
       ;   not(equals(Ycoord, 1))
       ;   not(equals(Time, 4))
       ;   not(equal(x, y))
       ),
       diff(Xcoord, 2),
       diff(Xcoord, 4),
       (   not(equals(Xcoord, 1))
       ;   not(equals(Ycoord, 1))
       ;   not(equals(Time, 0))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',311).

 /*  [(not(equals(Xcoord, 5));not(equals(Ycoord, 1));not(equals(Time, 4));not(equal(x, y))), diff(Xcoord, 2), diff(Xcoord, 4),  (not(equals(Xcoord, 1));not(equals(Ycoord, 1));not(equals(Time, 0)))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(location(g1, x, Xcoord, Ycoord)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',311).
axiom(holds_at(neg(location(g1, x, Xcoord, Ycoord)), Time),
   
    [  (not(equals(Xcoord, 5));not(equals(Ycoord, 1));not(equals(Time, 4));not(equal(x, y))),
      diff(Xcoord, 2),
      diff(Xcoord, 4),
       (not(equals(Xcoord, 1));not(equals(Ycoord, 1));not(equals(Time, 0)))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',311).

 /*  equal(x, y) :-
       not(holds_at(neg(location(g1, x, Xcoord, Ycoord)), Time)),
       diff(Xcoord, 2),
       diff(Xcoord, 4),
       (   not(equals(Xcoord, 1))
       ;   not(equals(Ycoord, 1))
       ;   not(equals(Time, 0))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',311).

 /*  [holds_at(location(g1, x, Xcoord, Ycoord), Time), diff(Xcoord, 2), diff(Xcoord, 4),  (not(equals(Xcoord, 1));not(equals(Ycoord, 1));not(equals(Time, 0)))] ->
       ta(Time, tvs1=[Time], tvs2=[Time], equal(x, y)).
 */
axiom(equal(x, y),
   
    [ holds_at(location(g1, x, Xcoord, Ycoord), Time),
      diff(Xcoord, 2),
      diff(Xcoord, 4),
       (not(equals(Xcoord, 1));not(equals(Ycoord, 1));not(equals(Time, 0)))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:315
% [xcoord,ycoord,time]
% xcoord!=% 2 & xcoord!=4 & !(xcoord=5 & ycoord=1 & time=4) ->
% !HoldsAt(Location(G1,Y,xcoord,ycoord),time) |
% xcoord=1 & ycoord=1 & time=0 & Equal(X,Y).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:318
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',317).

 /*  diff(Xcoord, 2), diff(Xcoord, 4), not((equals(Xcoord, 5), equals(Ycoord, 1), equals(Time, 4))) ->
       (   holds_at(neg(location(g1, y, Xcoord, Ycoord)), Time)
       ;   equals(Xcoord, 1),
           equals(Ycoord, 1),
           equals(Time, 0),
           equal(x, y)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',317).

 /*  holds_at(neg(location(g1, y, Xcoord, Ycoord)), Time) :-
       (   not(equals(Xcoord, 1))
       ;   not(equals(Ycoord, 1))
       ;   not(equals(Time, 0))
       ;   not(equal(x, y))
       ),
       diff(Xcoord, 2),
       diff(Xcoord, 4),
       (   not(equals(Xcoord, 5))
       ;   not(equals(Ycoord, 1))
       ;   not(equals(Time, 4))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',317).

 /*  [(not(equals(Xcoord, 1));not(equals(Ycoord, 1));not(equals(Time, 0));not(equal(x, y))), diff(Xcoord, 2), diff(Xcoord, 4),  (not(equals(Xcoord, 5));not(equals(Ycoord, 1));not(equals(Time, 4)))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(location(g1, y, Xcoord, Ycoord)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',317).
axiom(holds_at(neg(location(g1, y, Xcoord, Ycoord)), Time),
   
    [  (not(equals(Xcoord, 1));not(equals(Ycoord, 1));not(equals(Time, 0));not(equal(x, y))),
      diff(Xcoord, 2),
      diff(Xcoord, 4),
       (not(equals(Xcoord, 5));not(equals(Ycoord, 1));not(equals(Time, 4)))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',317).

 /*  equal(x, y) :-
       not(holds_at(neg(location(g1, y, Xcoord, Ycoord)), Time)),
       diff(Xcoord, 2),
       diff(Xcoord, 4),
       (   not(equals(Xcoord, 5))
       ;   not(equals(Ycoord, 1))
       ;   not(equals(Time, 4))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',317).

 /*  [holds_at(location(g1, y, Xcoord, Ycoord), Time), diff(Xcoord, 2), diff(Xcoord, 4),  (not(equals(Xcoord, 5));not(equals(Ycoord, 1));not(equals(Time, 4)))] ->
       ta(Time, tvs1=[Time], tvs2=[Time], equal(x, y)).
 */
axiom(equal(x, y),
   
    [ holds_at(location(g1, y, Xcoord, Ycoord), Time),
      diff(Xcoord, 2),
      diff(Xcoord, 4),
       (not(equals(Xcoord, 5));not(equals(Ycoord, 1));not(equals(Time, 4)))
    ]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:320
% range time 0 4
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',320).
==> range(time,0,4).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:321
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',322).
% range xcoord 0 5
==> range(xcoord,0,5).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:322
% range ycoord 0 1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',322).
==> range(ycoord,0,1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:323
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',324).
% range offset 0 0
==> range(offset,0,0).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Cassimatis2002/OneScreen.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @phdthesis{Cassimatis:2002,
%;   author = "Nicholas L. Cassimatis",
%;   year = "2002",
%;   title = "Polyscheme: A Cognitive Architecture for Integrating Multiple Representation and Inference Schemes",
%;   address = "Cambridge, MA",
%;   school = "Program in Media Arts and Sciences, School of Architecture and Planning, Massachusetts Institute of Technology",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:351
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',352).
% load foundations/Root.e
:- load_e('foundations/Root.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:352
% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',352).
:- load_e('foundations/EC.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:353
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',354).
% load examples/Cassimatis2002/PolySpace.e
:- load_e('examples/Cassimatis2002/PolySpace.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:355
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',356).
% grid G1
==> t(grid,g1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:356
% object X,Y,Screen
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',356).
==> t(object,x).
==> t(object,y).
==> t(object,screen).
%; perceptions:


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:359
% Shape(X,Round).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',359).

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], shape(x, round)).
 */
axiom(shape(x, round),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:360
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',361).
% Color(X,Red).

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], color(x, red)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',361).
axiom(color(x, red),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:361
% Shape(Y,Round).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',361).

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], shape(y, round)).
 */
axiom(shape(y, round),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:362
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',363).
% Color(Y,Red).

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], color(y, red)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',363).
axiom(color(y, red),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:363
% Shape(Screen,Square).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',363).

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], shape(screen, square)).
 */
axiom(shape(screen, square),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:364
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',365).
% Color(Screen,Green).

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], color(screen, green)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',365).
axiom(color(screen, green),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:365
% [time]
 % HoldsAt(Location(G1,Screen,2,0),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',365).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(location(g1, screen, 2, 0), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',365).
axiom(holds_at(location(g1, screen, 2, 0), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:366
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',367).
% HoldsAt(Location(G1,X,1,1),0).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(location(g1, x, 1, 1), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',367).
axiom(holds_at(location(g1, x, 1, 1), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:367
% HoldsAt(Location(G1,Y,3,1),2).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',367).

 /*  [b(start, Start2), toffset(start, 2, Start2), ignore(start+2==Start2)] ->
       ta(Ta_Param,
          tvs1=[start+2],
          tvs2=[Start2, start],
          holds_at(location(g1, y, 3, 1), Start2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',367).
axiom(holds_at(location(g1, y, 3, 1), Start2),
    [b(start, Start2), toffset(start, 2, Start2)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:369
% [xcoord,ycoord,time]
% xcoord!=% 2 & !(xcoord=1 & ycoord=1 & time=0) ->
% !HoldsAt(Location(G1,X,xcoord,ycoord),time) |
% xcoord=3 & ycoord=1 & time=2 & Equal(X,Y).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:372
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',371).

 /*  diff(Xcoord, 2), not((equals(Xcoord, 1), equals(Ycoord, 1), equals(Time, 0))) ->
       (   holds_at(neg(location(g1, x, Xcoord, Ycoord)), Time)
       ;   equals(Xcoord, 3),
           equals(Ycoord, 1),
           equals(Time, 2),
           equal(x, y)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',371).

 /*  holds_at(neg(location(g1, x, Xcoord, Ycoord)), Time) :-
       (   not(equals(Xcoord, 3))
       ;   not(equals(Ycoord, 1))
       ;   not(equals(Time, 2))
       ;   not(equal(x, y))
       ),
       diff(Xcoord, 2),
       (   not(equals(Xcoord, 1))
       ;   not(equals(Ycoord, 1))
       ;   not(equals(Time, 0))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',371).

 /*  [(not(equals(Xcoord, 3));not(equals(Ycoord, 1));not(equals(Time, 2));not(equal(x, y))), diff(Xcoord, 2),  (not(equals(Xcoord, 1));not(equals(Ycoord, 1));not(equals(Time, 0)))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(location(g1, x, Xcoord, Ycoord)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',371).
axiom(holds_at(neg(location(g1, x, Xcoord, Ycoord)), Time),
   
    [  (not(equals(Xcoord, 3));not(equals(Ycoord, 1));not(equals(Time, 2));not(equal(x, y))),
      diff(Xcoord, 2),
       (not(equals(Xcoord, 1));not(equals(Ycoord, 1));not(equals(Time, 0)))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',371).

 /*  equal(x, y) :-
       not(holds_at(neg(location(g1, x, Xcoord, Ycoord)), Time)),
       diff(Xcoord, 2),
       (   not(equals(Xcoord, 1))
       ;   not(equals(Ycoord, 1))
       ;   not(equals(Time, 0))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',371).

 /*  [holds_at(location(g1, x, Xcoord, Ycoord), Time), diff(Xcoord, 2),  (not(equals(Xcoord, 1));not(equals(Ycoord, 1));not(equals(Time, 0)))] ->
       ta(Time, tvs1=[Time], tvs2=[Time], equal(x, y)).
 */
axiom(equal(x, y),
   
    [ holds_at(location(g1, x, Xcoord, Ycoord), Time),
      diff(Xcoord, 2),
       (not(equals(Xcoord, 1));not(equals(Ycoord, 1));not(equals(Time, 0)))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:374
% [xcoord,ycoord,time]
% xcoord!=% 2 & !(xcoord=3 & ycoord=1 & time=2) ->
% !HoldsAt(Location(G1,Y,xcoord,ycoord),time) |
% xcoord=1 & ycoord=1 & time=0 & Equal(X,Y).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:377
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',376).

 /*  diff(Xcoord, 2), not((equals(Xcoord, 3), equals(Ycoord, 1), equals(Time, 2))) ->
       (   holds_at(neg(location(g1, y, Xcoord, Ycoord)), Time)
       ;   equals(Xcoord, 1),
           equals(Ycoord, 1),
           equals(Time, 0),
           equal(x, y)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',376).

 /*  holds_at(neg(location(g1, y, Xcoord, Ycoord)), Time) :-
       (   not(equals(Xcoord, 1))
       ;   not(equals(Ycoord, 1))
       ;   not(equals(Time, 0))
       ;   not(equal(x, y))
       ),
       diff(Xcoord, 2),
       (   not(equals(Xcoord, 3))
       ;   not(equals(Ycoord, 1))
       ;   not(equals(Time, 2))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',376).

 /*  [(not(equals(Xcoord, 1));not(equals(Ycoord, 1));not(equals(Time, 0));not(equal(x, y))), diff(Xcoord, 2),  (not(equals(Xcoord, 3));not(equals(Ycoord, 1));not(equals(Time, 2)))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(location(g1, y, Xcoord, Ycoord)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',376).
axiom(holds_at(neg(location(g1, y, Xcoord, Ycoord)), Time),
   
    [  (not(equals(Xcoord, 1));not(equals(Ycoord, 1));not(equals(Time, 0));not(equal(x, y))),
      diff(Xcoord, 2),
       (not(equals(Xcoord, 3));not(equals(Ycoord, 1));not(equals(Time, 2)))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',376).

 /*  equal(x, y) :-
       not(holds_at(neg(location(g1, y, Xcoord, Ycoord)), Time)),
       diff(Xcoord, 2),
       (   not(equals(Xcoord, 3))
       ;   not(equals(Ycoord, 1))
       ;   not(equals(Time, 2))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',376).

 /*  [holds_at(location(g1, y, Xcoord, Ycoord), Time), diff(Xcoord, 2),  (not(equals(Xcoord, 3));not(equals(Ycoord, 1));not(equals(Time, 2)))] ->
       ta(Time, tvs1=[Time], tvs2=[Time], equal(x, y)).
 */
axiom(equal(x, y),
   
    [ holds_at(location(g1, y, Xcoord, Ycoord), Time),
      diff(Xcoord, 2),
       (not(equals(Xcoord, 3));not(equals(Ycoord, 1));not(equals(Time, 2)))
    ]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:379
% range time 0 2
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',379).
==> range(time,0,2).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:380
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',381).
% range xcoord 0 4
==> range(xcoord,0,4).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:381
% range ycoord 0 2
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',381).
==> range(ycoord,0,2).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:382
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',383).
% range offset 0 0
==> range(offset,0,0).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/BrewkaDixKonolige1997/Wine.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; reasoning by cases
%; \fullciteA[p. 45]{BrewkaDixKonolige:1997}
%;
%; @book{BrewkaDixKonolige:1997,
%;   author = "Gerhard Brewka and J{\"{u}}rgen Dix and Kurt Konolige",
%;   year = "1997",
%;   title = "Nonmonotonic Reasoning: An Overview",
%;   address = "Stanford, CA",
%;   publisher = "CSLI",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:413
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',414).
% load foundations/Root.e
:- load_e('foundations/Root.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:414
% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',414).
:- load_e('foundations/EC.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:416
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',417).
% sort x
==> sort(x).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:417
% x Person
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',417).
==> t(x,person).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:419
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',420).
% predicate LikesWine(x)
predicate(likesWine(x)).
==> mpred_prop(likesWine(x),predicate).
==> meta_argtypes(likesWine(x)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:420
% predicate Italian(x)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',420).
predicate(italian(x)).
==> mpred_prop(italian(x),predicate).
==> meta_argtypes(italian(x)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:421
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',422).
% predicate French(x)
predicate(french(x)).
==> mpred_prop(french(x),predicate).
==> meta_argtypes(french(x)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:422
% predicate Ab1(x)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',422).
predicate(ab1(x)).
==> mpred_prop(ab1(x),predicate).
==> meta_argtypes(ab1(x)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:423
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',424).
% predicate Ab2(x)
predicate(ab2(x)).
==> mpred_prop(ab2(x),predicate).
==> meta_argtypes(ab2(x)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:425
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',426).
% [x]
 % Italian(x) & !Ab1(x) -> LikesWine(x).

 /*  italian(X), not(ab1(X, Ab1_Ret)) ->
       likesWine(X).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',426).

 /*  likesWine(X) :-
       italian(X),
       not(ab1(X, Ab1_Ret)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',426).

 /*  [italian(X), not(ab1(X, Ab1_Ret))] ->
       ta(Ta_Param, tvs1=[], tvs2=[], likesWine(X)).
 */
axiom(likesWine(X),
    [italian(X), not(ab1(X, Ab1_Ret))]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',426).

 /*  not(italian(X)) :-
       not(ab1(X, Ab1_Ret)),
       not(likesWine(X)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',426).

 /*  [not(ab1(X, Ab1_Ret)), not(likesWine(X))] ->
       ta(Ta_Param3, tvs1=[], tvs2=[], not(italian(X))).
 */
axiom(not(italian(X)),
    [not(ab1(X, Ab1_Ret)), not(likesWine(X))]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',426).

 /*  ab1(X, Ab1_Ret) :-
       italian(X),
       not(likesWine(X)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',426).

 /*  [italian(X), not(likesWine(X))] ->
       ta(Ta_Param4, tvs1=[], tvs2=[], ab1(X, Ab1_Ret)).
 */
axiom(ab1(X, Ab1_Ret),
    [italian(X), not(likesWine(X))]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:426
% [x]
 % French(x) & !Ab2(x) -> LikesWine(x).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',426).

 /*  french(X), not(ab2(X, Ab2_Ret)) ->
       likesWine(X).
 */

 /*  likesWine(X) :-
       french(X),
       not(ab2(X, Ab2_Ret)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',426).

 /*  [french(X), not(ab2(X, Ab2_Ret))] ->
       ta(Ta_Param, tvs1=[], tvs2=[], likesWine(X)).
 */
axiom(likesWine(X),
    [french(X), not(ab2(X, Ab2_Ret))]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',426).

 /*  not(french(X)) :-
       not(ab2(X, Ab2_Ret)),
       not(likesWine(X)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',426).

 /*  [not(ab2(X, Ab2_Ret)), not(likesWine(X))] ->
       ta(Ta_Param3, tvs1=[], tvs2=[], not(french(X))).
 */
axiom(not(french(X)),
    [not(ab2(X, Ab2_Ret)), not(likesWine(X))]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',426).

 /*  ab2(X, Ab2_Ret) :-
       french(X),
       not(likesWine(X)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',426).

 /*  [french(X), not(likesWine(X))] ->
       ta(Ta_Param4, tvs1=[], tvs2=[], ab2(X, Ab2_Ret)).
 */
axiom(ab2(X, Ab2_Ret),
    [french(X), not(likesWine(X))]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:427
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',428).
% [x]
 % Italian(x) -> !French(x).

 /*  italian(X) ->
       not(french(X)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',428).

 /*  not(french(X)) :-
       italian(X).
 */

 /*  [italian(X)] ->
       ta(Ta_Param, tvs1=[], tvs2=[], not(french(X))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',428).
axiom(not(french(X)),
    [italian(X)]).

 /*  not(italian(X)) :-
       french(X).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',428).

 /*  [french(X)] ->
       ta(Ta_Param2, tvs1=[], tvs2=[], not(italian(X))).
 */
axiom(not(italian(X)),
    [french(X)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:429
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',430).
% Italian(Person) | French(Person).

 /*   (   italian(person)
      ;   french(person)
      ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',430).

 /*  italian(person) :-
       not(french(person)).
 */

 /*  [not(french(person))] ->
       ta(Ta_Param, tvs1=[], tvs2=[], italian(person)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',430).
axiom(italian(person),
    [not(french(person))]).

 /*  french(person) :-
       not(italian(person)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',430).

 /*  [not(italian(person))] ->
       ta(Ta_Param1, tvs1=[], tvs2=[], french(person)).
 */
axiom(french(person),
    [not(italian(person))]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:431
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',432).
% range time 0 0
==> range(time,0,0).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:432
% range offset 1 1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',432).
==> range(offset,1,1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:434
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',435).
% completion Theta Ab1
==> completion(theta).
==> completion(ab1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:435
% completion Theta Ab2
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',435).
==> completion(theta).
==> completion(ab2).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Shanahan1997/Yale.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{HanksMcDermott:1987,
%;   author = "Steve Hanks and Drew V. McDermott",
%;   year = "1987",
%;   title = "Nonmonotonic logic and temporal projection",
%;   journal = "Artificial Intelligence",
%;   volume = "33",
%;   number = "3",
%;   pages = "379--412",
%; }
%;
%; \fullciteA[pp. 322--323]{Shanahan:1997}
%;
%; @book{Shanahan:1997,
%;   author = "Murray Shanahan",
%;   year = "1997",
%;   title = "Solving the Frame Problem",
%;   address = "Cambridge, MA",
%;   publisher = "MIT Press",
%; }
%;
%; deduction
%;
%; modifications from Shanahan's formulation:
%; InitiallyP -> HoldsAt
%; timestamps
%; added [time] Terminates(Shoot(),Loaded(),time).
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:482
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',483).
% option showpred off
:- set_ec_option(showpred, off).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:484
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',485).
% load foundations/Root.e
:- load_e('foundations/Root.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:485
% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',485).
:- load_e('foundations/EC.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:487
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',488).
% event Load()
event(load).
==> mpred_prop(load,event).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:488
% event Shoot()
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',488).
event(shoot).
==> mpred_prop(shoot,event).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:489
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',490).
% event Sneeze()
event(sneeze).
==> mpred_prop(sneeze,event).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:490
% fluent Loaded()
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',490).
fluent(loaded).
==> mpred_prop(loaded,fluent).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:491
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',492).
% fluent Alive()
fluent(alive).
==> mpred_prop(alive,fluent).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:493
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',494).
% [time]
 % Initiates(Load(),Loaded(),time).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(load, loaded, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',494).
axiom(initiates(load, loaded, Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:494
% [time]
 % HoldsAt(Loaded(),time) -> Terminates(Shoot(),Alive(),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',494).

 /*  [holds_at(loaded, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(shoot, alive, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',494).
axiom(terminates(shoot, alive, Time),
    [holds_at(loaded, Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:495
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',496).
% [time]
 % Terminates(Shoot(),Loaded(),time).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(shoot, loaded, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',496).
axiom(terminates(shoot, loaded, Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:497
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',498).
% HoldsAt(Alive(),0).

 /*  [] ->
       ta(Ta_Param, tvs1=[start], tvs2=[start], holds_at(alive, start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',498).
axiom(holds_at(alive, start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:498
% !HoldsAt(Loaded(),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',498).

 /*  [] ->
       ta(Ta_Param, tvs1=[start], tvs2=[start], holds_at(neg(loaded), start)).
 */
axiom(holds_at(neg(loaded), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:499
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',500).
% Happens(Load(),0).

 /*  [] ->
       ta(Ta_Param, tvs1=[start], tvs2=[start], happens(load, start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',500).
axiom(happens(load, start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:500
% Happens(Sneeze(),1).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',500).

 /*  [b(start, Maptime), ignore(start+1==Maptime)] ->
       ta(Ta_Param,
          tvs1=[start+1],
          tvs2=[Maptime, start],
          happens(sneeze, Maptime)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',500).
axiom(happens(sneeze, Maptime),
    [b(start, Maptime)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:501
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',502).
% Happens(Shoot(),2).

 /*  [b(start, Start2), toffset(start, 2, Start2), ignore(start+2==Start2)] ->
       ta(Ta_Param,
          tvs1=[start+2],
          tvs2=[Start2, start],
          happens(shoot, Start2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',502).
axiom(happens(shoot, Start2),
    [b(start, Start2), toffset(start, 2, Start2)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:503
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',504).
% completion Happens
==> completion(happens).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:505
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',506).
% range time 0 3
==> range(time,0,3).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:506
% range offset 1 1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',506).
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Shanahan1997/StuffyRoom.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{GinsbergSmith:1988a,
%;   author = "Matthew L. Ginsberg and David E. Smith",
%;   year = "1988",
%;   title = "Reasoning about action \uppercase{I}: \uppercase{A} possible worlds approach",
%;   journal = "Artificial Intelligence",
%;   volume = "35",
%;   number = "2",
%;   pages = "165--195",
%; }
%;
%; \fullciteA[pp. 288--289]{Shanahan:1997}
%;
%; @book{Shanahan:1997,
%;   author = "Murray Shanahan",
%;   year = "1997",
%;   title = "Solving the Frame Problem",
%;   address = "Cambridge, MA",
%;   publisher = "MIT Press",
%; }
%;
%; deduction
%;
%; modifications from Shanahan's formulation:
%; timestamps
%; added:
%; !HoldsAt(Blocked1(),0).
%; !HoldsAt(Blocked2(),0).
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:554
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',555).
% load foundations/Root.e
:- load_e('foundations/Root.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:555
% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',555).
:- load_e('foundations/EC.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:557
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',558).
% event Close1()
event(close1).
==> mpred_prop(close1,event).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:558
% event Close2()
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',558).
event(close2).
==> mpred_prop(close2,event).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:559
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',560).
% event Start()
event(start).
==> mpred_prop(start,event).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:560
% fluent Blocked1()
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',560).
fluent(blocked1).
==> mpred_prop(blocked1,fluent).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:561
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',562).
% fluent Blocked2()
fluent(blocked2).
==> mpred_prop(blocked2,fluent).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:562
% fluent Stuffy()
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',562).
fluent(stuffy).
==> mpred_prop(stuffy,fluent).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:563
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',564).
% noninertial Stuffy
==> noninertial(stuffy).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:565
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',566).
% [time]
 % Initiates(Close1(),Blocked1(),time).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(close1, blocked1, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',566).
axiom(initiates(close1, blocked1, Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:566
% [time]
 % Initiates(Close2(),Blocked2(),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',566).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(close2, blocked2, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',566).
axiom(initiates(close2, blocked2, Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:568
% [time]
% HoldsAt(Stuffy(),time) <->
% HoldsAt(Blocked1(),time)&HoldsAt(Blocked2(),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:570

 /*  holds_at(stuffy, Time) <->
       holds_at(blocked1, Time),
       holds_at(blocked2, Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',570).

 /*  [holds_at, stuffy] <->
       [holds_at, blocked1, holds_at, blocked2].
 */

 /*  holds_at(stuffy, Time) ->
       holds_at(blocked1, Time),
       holds_at(blocked2, Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',570).

 /*  not(holds_at(stuffy, Time)) :-
       (   not(holds_at(blocked1, Time))
       ;   not(holds_at(blocked2, Time))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',570).

 /*  [(holds_at(neg(blocked1), Time);holds_at(neg(blocked2), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(stuffy), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',570).
axiom(holds_at(neg(stuffy), Time),
    [(holds_at(neg(blocked1), Time);holds_at(neg(blocked2), Time))]).

 /*  holds_at(blocked1, Time) :-
       holds_at(stuffy, Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',570).

 /*  [holds_at(stuffy, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(blocked1, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',570).
axiom(holds_at(blocked1, Time),
    [holds_at(stuffy, Time)]).

 /*  holds_at(blocked2, Time) :-
       holds_at(stuffy, Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',570).

 /*  [holds_at(stuffy, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(blocked2, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',570).
axiom(holds_at(blocked2, Time),
    [holds_at(stuffy, Time)]).

 /*  holds_at(blocked1, Time), holds_at(blocked2, Time) ->
       holds_at(stuffy, Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',570).

 /*  holds_at(stuffy, Time) :-
       holds_at(blocked1, Time),
       holds_at(blocked2, Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',570).

 /*  [holds_at(blocked1, Time), holds_at(blocked2, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(stuffy, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',570).
axiom(holds_at(stuffy, Time),
    [holds_at(blocked1, Time), holds_at(blocked2, Time)]).

 /*  not(holds_at(blocked1, Time)) :-
       holds_at(blocked2, Time),
       not(holds_at(stuffy, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',570).

 /*  [holds_at(blocked2, Time), holds_at(neg(stuffy), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(blocked1), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',570).
axiom(holds_at(neg(blocked1), Time),
    [holds_at(blocked2, Time), holds_at(neg(stuffy), Time)]).

 /*  not(holds_at(blocked2, Time)) :-
       holds_at(blocked1, Time),
       not(holds_at(stuffy, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',570).

 /*  [holds_at(blocked1, Time), holds_at(neg(stuffy), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(blocked2), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',570).
axiom(holds_at(neg(blocked2), Time),
    [holds_at(blocked1, Time), holds_at(neg(stuffy), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:572
% [time]
 % Initiates(Start(),Blocked1(),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',572).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(start, blocked1, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',572).
axiom(initiates(start, blocked1, Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:573
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',574).
% [time]
 % Terminates(Start(),Blocked2(),time).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(start, blocked2, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',574).
axiom(terminates(start, blocked2, Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:575
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',576).
% !HoldsAt(Blocked1(),0).

 /*  [] ->
       ta(Ta_Param, tvs1=[start], tvs2=[start], holds_at(neg(blocked1), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',576).
axiom(holds_at(neg(blocked1), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:576
% !HoldsAt(Blocked2(),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',576).

 /*  [] ->
       ta(Ta_Param, tvs1=[start], tvs2=[start], holds_at(neg(blocked2), start)).
 */
axiom(holds_at(neg(blocked2), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:577
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',578).
% Happens(Start(),0).

 /*  [] ->
       ta(Ta_Param, tvs1=[start], tvs2=[start], happens(start, start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',578).
axiom(happens(start, start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:578
% Happens(Close2(),1).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',578).

 /*  [b(start, Maptime), ignore(start+1==Maptime)] ->
       ta(Ta_Param,
          tvs1=[start+1],
          tvs2=[Maptime, start],
          happens(close2, Maptime)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',578).
axiom(happens(close2, Maptime),
    [b(start, Maptime)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:580
% completion Happens
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',580).
==> completion(happens).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:582
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',583).
% range time 0 2
==> range(time,0,2).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:583
% range offset 1 1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',583).
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Shanahan1997/BusRide.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{Kartha:1994,
%;   author = "G. Neelakantan Kartha",
%;   year = "1994",
%;   title = "Two counterexamples related to \uppercase{B}aker's approach to the frame problem",
%;   journal = "Artificial Intelligence",
%;   volume = "69",
%;   number = "1--2",
%;   pages = "379--391",
%; }
%;
%; \fullciteA[pp. 359--361]{Shanahan:1997}
%;
%; @book{Shanahan:1997,
%;   author = "Murray Shanahan",
%;   year = "1997",
%;   title = "Solving the Frame Problem",
%;   address = "Cambridge, MA",
%;   publisher = "MIT Press",
%; }
%;
%; modifications from Shanahan's formulation:
%; InitiallyN -> !HoldsAt
%; timestamps
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:627
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',628).
% load foundations/Root.e
:- load_e('foundations/Root.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:628
% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',628).
:- load_e('foundations/EC.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:630
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',631).
% fluent HasTicket()
fluent(hasTicket).
==> mpred_prop(hasTicket,fluent).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:631
% fluent OnRed()
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',631).
fluent(onRed).
==> mpred_prop(onRed,fluent).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:632
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',633).
% fluent OnYellow()
fluent(onYellow).
==> mpred_prop(onYellow,fluent).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:633
% event Buy()
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',633).
event(buy).
==> mpred_prop(buy,event).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:634
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',635).
% event Board()
event(board).
==> mpred_prop(board,event).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:635
% event BoardRed()
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',635).
event(boardRed).
==> mpred_prop(boardRed,event).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:636
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',637).
% event BoardYellow()
event(boardYellow).
==> mpred_prop(boardYellow,event).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:638
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',639).
% [time]
 % Happens(Board(),time) -> Happens(BoardRed(),time) | Happens(BoardYellow(),time).

 /*  happens(board, Time) ->
       (   happens(boardRed, Time)
       ;   happens(boardYellow, Time)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',639).

 /*  happens(boardRed, Time) :-
       not(happens(boardYellow, Time)),
       happens(board, Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',639).

 /*  [not(happens(boardYellow, Time)), happens(board, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(boardRed, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',639).
axiom(happens(boardRed, Time),
    [not(happens(boardYellow, Time)), happens(board, Time)]).

 /*  happens(boardYellow, Time) :-
       not(happens(boardRed, Time)),
       happens(board, Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',639).

 /*  [not(happens(boardRed, Time)), happens(board, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(boardYellow, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',639).
axiom(happens(boardYellow, Time),
    [not(happens(boardRed, Time)), happens(board, Time)]).

 /*  not(happens(board, Time)) :-
       not(happens(boardRed, Time)),
       not(happens(boardYellow, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',639).

 /*  [not(happens(boardRed, Time)), not(happens(boardYellow, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(board, Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',639).
axiom(not(happens(board, Time)),
    [not(happens(boardRed, Time)), not(happens(boardYellow, Time))]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:640
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',641).
% [time]
 % Initiates(Buy(),HasTicket(),time).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(buy, hasTicket, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',641).
axiom(initiates(buy, hasTicket, Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:641
% [time]
 % HoldsAt(HasTicket(),time) -> Initiates(BoardRed(),OnRed(),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',641).

 /*  [holds_at(hasTicket, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(boardRed, onRed, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',641).
axiom(initiates(boardRed, onRed, Time),
    [holds_at(hasTicket, Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:642
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',643).
% [time]
 % HoldsAt(HasTicket(),time) -> Initiates(BoardYellow(),OnYellow(),time).

 /*  [holds_at(hasTicket, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(boardYellow, onYellow, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',643).
axiom(initiates(boardYellow, onYellow, Time),
    [holds_at(hasTicket, Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:644
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',645).
% [time]
 % !(HoldsAt(OnRed(),time) & HoldsAt(OnYellow(),time)).

 /*   not(( holds_at(onRed, Time),
            holds_at(onYellow, Time)
          )).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',645).

 /*  not(holds_at(onRed, Time)) :-
       holds_at(onYellow, Time).
 */

 /*  [holds_at(onYellow, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(onRed), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',645).
axiom(holds_at(neg(onRed), Time),
    [holds_at(onYellow, Time)]).

 /*  not(holds_at(onYellow, Time)) :-
       holds_at(onRed, Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',645).

 /*  [holds_at(onRed, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(onYellow), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',645).
axiom(holds_at(neg(onYellow), Time),
    [holds_at(onRed, Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:645
% [time]
 % HoldsAt(OnRed(),time) -> HoldsAt(HasTicket(),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',645).

 /*  holds_at(onRed, Time) ->
       holds_at(hasTicket, Time).
 */

 /*  holds_at(hasTicket, Time) :-
       holds_at(onRed, Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',645).

 /*  [holds_at(onRed, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(hasTicket, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',645).
axiom(holds_at(hasTicket, Time),
    [holds_at(onRed, Time)]).

 /*  not(holds_at(onRed, Time)) :-
       not(holds_at(hasTicket, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',645).

 /*  [holds_at(neg(hasTicket), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(onRed), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',645).
axiom(holds_at(neg(onRed), Time),
    [holds_at(neg(hasTicket), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:646
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',647).
% [time]
 % HoldsAt(OnYellow(),time) -> HoldsAt(HasTicket(),time).

 /*  holds_at(onYellow, Time) ->
       holds_at(hasTicket, Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',647).

 /*  holds_at(hasTicket, Time) :-
       holds_at(onYellow, Time).
 */

 /*  [holds_at(onYellow, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(hasTicket, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',647).
axiom(holds_at(hasTicket, Time),
    [holds_at(onYellow, Time)]).

 /*  not(holds_at(onYellow, Time)) :-
       not(holds_at(hasTicket, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',647).

 /*  [holds_at(neg(hasTicket), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(onYellow), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',647).
axiom(holds_at(neg(onYellow), Time),
    [holds_at(neg(hasTicket), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:648
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',649).
% HoldsAt(OnRed(),2).

 /*  [b(start, Start2), toffset(start, 2, Start2), ignore(start+2==Start2)] ->
       ta(Ta_Param,
          tvs1=[start+2],
          tvs2=[Start2, start],
          holds_at(onRed, Start2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',649).
axiom(holds_at(onRed, Start2),
    [b(start, Start2), toffset(start, 2, Start2)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:650
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',651).
% !HoldsAt(HasTicket(),0).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(hasTicket), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',651).
axiom(holds_at(neg(hasTicket), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:651
% Happens(Buy(),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',651).

 /*  [] ->
       ta(Ta_Param, tvs1=[start], tvs2=[start], happens(buy, start)).
 */
axiom(happens(buy, start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:652
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',653).
% Happens(Board(),1).

 /*  [b(start, Maptime), ignore(start+1==Maptime)] ->
       ta(Ta_Param,
          tvs1=[start+1],
          tvs2=[Maptime, start],
          happens(board, Maptime)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',653).
axiom(happens(board, Maptime),
    [b(start, Maptime)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:653
%; ABDUCED Happens(BoardRed(), 1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:655
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',656).
% completion Happens
==> completion(happens).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:657
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',658).
% range time 0 2
==> range(time,0,2).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:658
% range offset 1 1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',658).
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Shanahan1997/DeadOrAlive.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; \fullciteA[p. 324]{Shanahan:1997}
%;
%; @book{Shanahan:1997,
%;   author = "Murray Shanahan",
%;   year = "1997",
%;   title = "Solving the Frame Problem",
%;   address = "Cambridge, MA",
%;   publisher = "MIT Press",
%; }
%;
%; deduction
%;
%; modifications from Shanahan's formulation:
%; InitiallyP -> HoldsAt
%; timestamps
%; added [time] Terminates(Shoot(),Loaded(),time).
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:695
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',696).
% load foundations/Root.e
:- load_e('foundations/Root.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:696
% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',696).
:- load_e('foundations/EC.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:698
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',699).
% event Load()
event(load).
==> mpred_prop(load,event).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:699
% event Shoot()
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',699).
event(shoot).
==> mpred_prop(shoot,event).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:700
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',701).
% event Sneeze()
event(sneeze).
==> mpred_prop(sneeze,event).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:701
% fluent Loaded()
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',701).
fluent(loaded).
==> mpred_prop(loaded,fluent).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:702
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',703).
% fluent Alive()
fluent(alive).
==> mpred_prop(alive,fluent).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:703
% fluent Dead()
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',703).
fluent(dead).
==> mpred_prop(dead,fluent).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:704
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',705).
% noninertial Dead
==> noninertial(dead).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:706
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',707).
% [time]
 % Initiates(Load(),Loaded(),time).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(load, loaded, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',707).
axiom(initiates(load, loaded, Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:707
% [time]
 % HoldsAt(Loaded(),time) -> Terminates(Shoot(),Alive(),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',707).

 /*  [holds_at(loaded, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(shoot, alive, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',707).
axiom(terminates(shoot, alive, Time),
    [holds_at(loaded, Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:708
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',709).
% [time]
 % Terminates(Shoot(),Loaded(),time).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(shoot, loaded, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',709).
axiom(terminates(shoot, loaded, Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:709
% [time]
 % HoldsAt(Dead(),time) <-> !HoldsAt(Alive(),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',709).

 /*  holds_at(dead, Time) <->
       holds_at(neg(alive), Time).
 */

 /*  [holds_at, dead] <->
       [holds_at, neg, alive].
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',709).

 /*  holds_at(dead, Time) ->
       holds_at(neg(alive), Time).
 */

 /*  holds_at(neg(alive), Time) :-
       holds_at(dead, Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',709).

 /*  [holds_at(dead, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(alive), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',709).
axiom(holds_at(neg(alive), Time),
    [holds_at(dead, Time)]).

 /*  not(holds_at(dead, Time)) :-
       not(holds_at(neg(alive), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',709).

 /*  [holds_at(alive, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(dead), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',709).
axiom(holds_at(neg(dead), Time),
    [holds_at(alive, Time)]).

 /*  holds_at(neg(alive), Time) ->
       holds_at(dead, Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',709).

 /*  holds_at(dead, Time) :-
       holds_at(neg(alive), Time).
 */

 /*  [holds_at(neg(alive), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(dead, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',709).
axiom(holds_at(dead, Time),
    [holds_at(neg(alive), Time)]).

 /*  not(holds_at(neg(alive), Time)) :-
       not(holds_at(dead, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',709).

 /*  [holds_at(neg(dead), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(alive, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',709).
axiom(holds_at(alive, Time),
    [holds_at(neg(dead), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:711
% HoldsAt(Alive(),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',711).

 /*  [] ->
       ta(Ta_Param, tvs1=[start], tvs2=[start], holds_at(alive, start)).
 */
axiom(holds_at(alive, start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:712
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',713).
% !HoldsAt(Loaded(),0).

 /*  [] ->
       ta(Ta_Param, tvs1=[start], tvs2=[start], holds_at(neg(loaded), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',713).
axiom(holds_at(neg(loaded), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:713
% Happens(Load(),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',713).

 /*  [] ->
       ta(Ta_Param, tvs1=[start], tvs2=[start], happens(load, start)).
 */
axiom(happens(load, start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:714
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',715).
% Happens(Sneeze(),1).

 /*  [b(start, Maptime), ignore(start+1==Maptime)] ->
       ta(Ta_Param,
          tvs1=[start+1],
          tvs2=[Maptime, start],
          happens(sneeze, Maptime)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',715).
axiom(happens(sneeze, Maptime),
    [b(start, Maptime)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:715
% Happens(Shoot(),2).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',715).

 /*  [b(start, Start2), toffset(start, 2, Start2), ignore(start+2==Start2)] ->
       ta(Ta_Param,
          tvs1=[start+2],
          tvs2=[Start2, start],
          happens(shoot, Start2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',715).
axiom(happens(shoot, Start2),
    [b(start, Start2), toffset(start, 2, Start2)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:717
% completion Happens
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',717).
==> completion(happens).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:719
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',720).
% range time 0 3
==> range(time,0,3).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:720
% range offset 1 1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',720).
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Shanahan1997/Supermarket.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; \fullciteA[pp. 302--304]{Shanahan:1997}
%;
%; @book{Shanahan:1997,
%;   author = "Murray Shanahan",
%;   year = "1997",
%;   title = "Solving the Frame Problem",
%;   address = "Cambridge, MA",
%;   publisher = "MIT Press",
%; }
%;
%; deduction
%;
%; modifications from Shanahan's formulation:
%; reformulated using the method of \fullciteA[pp. 460--461]{MillerShanahan:2002}
%;
%; @incollection{MillerShanahan:2002,
%;   author = "Rob Miller and Murray Shanahan",
%;   year = "2002",
%;   title = "Some alternative formulations of the event calculus",
%;   editor = "Antonis C. Kakas and Fariba Sadri",
%;   booktitle = "Computational Logic: Logic Programming and Beyond: Essays in Honour of \uppercase{R}obert \uppercase{A}. \uppercase{K}owalski, Part \uppercase{II}",
%;   series = "Lecture Notes in Computer Science",
%;   volume = "2408",
%;   pages = "452--490",
%;   address = "Berlin",
%;   publisher = "Springer",
%; }
%;
%; added:
%; !HoldsAt(Forwards(), 0).
%; !HoldsAt(Backwards(), 0).
%; !HoldsAt(Spinning(), 0).
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:773
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',774).
% load foundations/Root.e
:- load_e('foundations/Root.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:774
% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',774).
:- load_e('foundations/EC.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:776
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',777).
% event Push()
event(push).
==> mpred_prop(push,event).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:777
% event Pull()
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',777).
event(pull).
==> mpred_prop(pull,event).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:778
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',779).
% fluent Forwards()
fluent(forwards).
==> mpred_prop(forwards,fluent).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:779
% fluent Backwards()
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',779).
fluent(backwards).
==> mpred_prop(backwards,fluent).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:780
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',781).
% fluent Spinning()
fluent(spinning).
==> mpred_prop(spinning,fluent).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:782
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',783).
% [time]
% !Happens(Pull(), time) ->
% Initiates(Push(), Forwards(), time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:784

 /*  [not(happens(pull, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(push, forwards, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',783).
axiom(initiates(push, forwards, Time),
    [not(happens(pull, Time))]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:786
% [time]
% !Happens(Pull(), time) ->
% Terminates(Push(), Backwards(), time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:788

 /*  [not(happens(pull, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(push, backwards, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',788).
axiom(terminates(push, backwards, Time),
    [not(happens(pull, Time))]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:790
% [time]
% !Happens(Push(), time) ->
% Initiates(Pull(), Backwards(), time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:792

 /*  [not(happens(push, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(pull, backwards, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',792).
axiom(initiates(pull, backwards, Time),
    [not(happens(push, Time))]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:794
% [time]
% !Happens(Push(), time) ->
% Terminates(Pull(), Forwards(), time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:796

 /*  [not(happens(push, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(pull, forwards, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',796).
axiom(terminates(pull, forwards, Time),
    [not(happens(push, Time))]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:798
% [time]
% Happens(Push(), time) ->
% Initiates(Pull(), Spinning(), time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:800

 /*  [holds_at(metreqs(push), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(push, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',800).
axiom(requires(push, Time),
    [holds_at(metreqs(push), Time)]).

 /*  [initiates(pull, spinning, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(push), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',800).
axiom(holds_at(metreqs(push), Time),
    [initiates(pull, spinning, Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:802
% [time]
% Happens(Push(), time) ->
% Terminates(Pull(), Forwards(), time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:804

 /*  [holds_at(metreqs(push), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(push, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',804).
axiom(requires(push, Time),
    [holds_at(metreqs(push), Time)]).

 /*  [terminates(pull, forwards, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(push), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',804).
axiom(holds_at(metreqs(push), Time),
    [terminates(pull, forwards, Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:806
% [time]
% Happens(Push(), time) ->
% Terminates(Pull(), Backwards(), time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:808

 /*  [holds_at(metreqs(push), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(push, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',808).
axiom(requires(push, Time),
    [holds_at(metreqs(push), Time)]).

 /*  [terminates(pull, backwards, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(push), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',808).
axiom(holds_at(metreqs(push), Time),
    [terminates(pull, backwards, Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:810
% [time]
% !Happens(Pull(), time) ->
% Terminates(Push(), Spinning(), time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:812

 /*  [not(happens(pull, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(push, spinning, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',812).
axiom(terminates(push, spinning, Time),
    [not(happens(pull, Time))]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:814
% [time]
% !Happens(Push(), time) ->
% Terminates(Pull(), Spinning(), time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:816

 /*  [not(happens(push, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(pull, spinning, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',816).
axiom(terminates(pull, spinning, Time),
    [not(happens(push, Time))]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:818
% !HoldsAt(Forwards(), 0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',818).

 /*  [] ->
       ta(Ta_Param, tvs1=[start], tvs2=[start], holds_at(neg(forwards), start)).
 */
axiom(holds_at(neg(forwards), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:819
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',820).
% !HoldsAt(Backwards(), 0).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(backwards), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',820).
axiom(holds_at(neg(backwards), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:820
% !HoldsAt(Spinning(), 0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',820).

 /*  [] ->
       ta(Ta_Param, tvs1=[start], tvs2=[start], holds_at(neg(spinning), start)).
 */
axiom(holds_at(neg(spinning), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:822
% Happens(Push(), 5).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',822).

 /*  [b(start, Start5), toffset(start, 5, Start5), ignore(start+5==Start5)] ->
       ta(Ta_Param,
          tvs1=[start+5],
          tvs2=[Start5, start],
          happens(push, Start5)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',822).
axiom(happens(push, Start5),
    [b(start, Start5), toffset(start, 5, Start5)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:823
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',824).
% Happens(Pull(), 5).

 /*  [b(start, Start5), toffset(start, 5, Start5), ignore(start+5==Start5)] ->
       ta(Ta_Param,
          tvs1=[start+5],
          tvs2=[Start5, start],
          happens(pull, Start5)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',824).
axiom(happens(pull, Start5),
    [b(start, Start5), toffset(start, 5, Start5)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:824
% Happens(Pull(), 10).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',824).

 /*  [b(start, Startd10), toffset(start, 10, Startd10), ignore(start+10==Startd10)] ->
       ta(Ta_Param,
          tvs1=[start+10],
          tvs2=[Startd10, start],
          happens(pull, Startd10)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',824).
axiom(happens(pull, Startd10),
    [b(start, Startd10), toffset(start, 10, Startd10)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:825
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',826).
% Happens(Push(), 10).

 /*  [b(start, Startd10), toffset(start, 10, Startd10), ignore(start+10==Startd10)] ->
       ta(Ta_Param,
          tvs1=[start+10],
          tvs2=[Startd10, start],
          happens(push, Startd10)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',826).
axiom(happens(push, Startd10),
    [b(start, Startd10), toffset(start, 10, Startd10)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:827
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',828).
% completion Happens
==> completion(happens).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:829
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',830).
% range time 0 12
==> range(time,0,12).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:830
% range offset 1 1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',830).
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Shanahan1997/StolenCar.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @inproceedings{Kautz:1986,
%;   author = "Henry A. Kautz",
%;   year = "1986",
%;   title = "The Logic of Persistence",
%;   booktitle = "\uppercase{P}roceedings of the \uppercase{F}ifth \uppercase{N}ational \uppercase{C}onference on \uppercase{A}rtificial \uppercase{I}ntelligence",
%;   pages = "401--405",
%;   address = "Los Altos, CA",
%;   publisher = "Morgan Kaufmann",
%; }
%;
%; \fullciteA[p. 359]{Shanahan:1997}
%;
%; @book{Shanahan:1997,
%;   author = "Murray Shanahan",
%;   year = "1997",
%;   title = "Solving the Frame Problem",
%;   address = "Cambridge, MA",
%;   publisher = "MIT Press",
%; }
%;
%; abduction
%;
%; modifications from Shanahan's formulation:
%; timestamps
%; added !HoldsAt(CarParked(),0).
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:876
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',877).
% load foundations/Root.e
:- load_e('foundations/Root.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:877
% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',877).
:- load_e('foundations/EC.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:879
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',880).
% event Park()
event(park).
==> mpred_prop(park,event).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:880
% event Steal()
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',880).
event(steal).
==> mpred_prop(steal,event).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:881
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',882).
% fluent CarParked()
fluent(carParked).
==> mpred_prop(carParked,fluent).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:883
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',884).
% [time]
 % Initiates(Park(),CarParked(),time).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(park, carParked, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',884).
axiom(initiates(park, carParked, Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:884
% [time]
 % Terminates(Steal(),CarParked(),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',884).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(steal, carParked, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',884).
axiom(terminates(steal, carParked, Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:886
% !HoldsAt(CarParked(),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',886).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(carParked), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',886).
axiom(holds_at(neg(carParked), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:887
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',888).
% Happens(Park(),0).

 /*  [] ->
       ta(Ta_Param, tvs1=[start], tvs2=[start], happens(park, start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',888).
axiom(happens(park, start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:888
%; ABDUCED Happens(Steal(), 1).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:889
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',890).
% !HoldsAt(CarParked(),2).

 /*  [b(start, Start2), toffset(start, 2, Start2), ignore(start+2==Start2)] ->
       ta(Ta_Param,
          tvs1=[start+2],
          tvs2=[Start2, start],
          holds_at(neg(carParked), Start2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',890).
axiom(holds_at(neg(carParked), Start2),
    [b(start, Start2), toffset(start, 2, Start2)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:891
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',892).
% range time 0 2
==> range(time,0,2).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:892
% range offset 1 1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',892).
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/MillerShanahan2002/Bowl.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; \fullciteA[p. 461]{MillerShanahan:2002}
%;
%; @incollection{MillerShanahan:2002,
%;   author = "Rob Miller and Murray Shanahan",
%;   year = "2002",
%;   title = "Some alternative formulations of the event calculus",
%;   editor = "Antonis C. Kakas and Fariba Sadri",
%;   booktitle = "Computational Logic: Logic Programming and Beyond: Essays in Honour of \uppercase{R}obert \uppercase{A}. \uppercase{K}owalski, Part \uppercase{II}",
%;   series = "Lecture Notes in Computer Science",
%;   volume = "2408",
%;   pages = "452--490",
%;   address = "Berlin",
%;   publisher = "Springer",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:927
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',928).
% load foundations/Root.e
:- load_e('foundations/Root.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:928
% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',928).
:- load_e('foundations/EC.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:930
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',931).
% event LiftLeft()
event(liftLeft).
==> mpred_prop(liftLeft,event).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:931
% event LiftRight()
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',931).
event(liftRight).
==> mpred_prop(liftRight,event).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:932
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',933).
% fluent Spilt()
fluent(spilt).
==> mpred_prop(spilt,fluent).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:933
% fluent Raised()
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',933).
fluent(raised).
==> mpred_prop(raised,fluent).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:935
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',936).
% [time]
% !Happens(LiftRight(), time) ->
% Initiates(LiftLeft(), Spilt(), time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:937

 /*  [not(happens(liftRight, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(liftLeft, spilt, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',936).
axiom(initiates(liftLeft, spilt, Time),
    [not(happens(liftRight, Time))]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:939
% [time]
% !Happens(LiftLeft(), time) ->
% Initiates(LiftRight(), Spilt(), time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:941

 /*  [not(happens(liftLeft, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(liftRight, spilt, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',941).
axiom(initiates(liftRight, spilt, Time),
    [not(happens(liftLeft, Time))]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:943
% [time]
% Happens(LiftLeft(), time) ->
% Initiates(LiftRight(), Raised(), time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:945

 /*  [holds_at(metreqs(liftLeft), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(liftLeft, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',945).
axiom(requires(liftLeft, Time),
    [holds_at(metreqs(liftLeft), Time)]).

 /*  [initiates(liftRight, raised, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(liftLeft), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',945).
axiom(holds_at(metreqs(liftLeft), Time),
    [initiates(liftRight, raised, Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:947
% !HoldsAt(Spilt(), 0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',947).

 /*  [] ->
       ta(Ta_Param, tvs1=[start], tvs2=[start], holds_at(neg(spilt), start)).
 */
axiom(holds_at(neg(spilt), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:948
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',949).
% !HoldsAt(Raised(), 0).

 /*  [] ->
       ta(Ta_Param, tvs1=[start], tvs2=[start], holds_at(neg(raised), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',949).
axiom(holds_at(neg(raised), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:949
% Happens(LiftLeft(), 2).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',949).

 /*  [b(start, Start2), toffset(start, 2, Start2), ignore(start+2==Start2)] ->
       ta(Ta_Param,
          tvs1=[start+2],
          tvs2=[Start2, start],
          happens(liftLeft, Start2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',949).
axiom(happens(liftLeft, Start2),
    [b(start, Start2), toffset(start, 2, Start2)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:950
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',951).
% Happens(LiftRight(), 2).

 /*  [b(start, Start2), toffset(start, 2, Start2), ignore(start+2==Start2)] ->
       ta(Ta_Param,
          tvs1=[start+2],
          tvs2=[Start2, start],
          happens(liftRight, Start2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',951).
axiom(happens(liftRight, Start2),
    [b(start, Start2), toffset(start, 2, Start2)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:952
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',953).
% completion Happens
==> completion(happens).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:954
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',955).
% range time 0 3
==> range(time,0,3).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:955
% range offset 1 1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',955).
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/ReiterCriscuolo1981/NixonDiamond1.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; conflicting defaults: showing that inconsistency results
%; without a cancellation rule
%; \fullciteA[p. 274]{ReiterCriscuolo:1981}
%; \fullciteA[pp. 98--99]{McCarthy:1986}
%;
%; @inproceedings{ReiterCriscuolo:1981,
%;   author = "Raymond Reiter and Giovanni Criscuolo",
%;   year = "1981",
%;   title = "On interacting defaults",
%;   booktitle = "\uppercase{P}roceedings of the \uppercase{S}eventh \uppercase{I}nternational \uppercase{J}oint \uppercase{C}onference on \uppercase{A}rtificial \uppercase{I}ntelligence",
%;   volume = "1",
%;   pages = "270--276",
%;   address = "Los Altos, CA",
%;   publisher = "William Kaufmann",
%; }
%;
%; @article{McCarthy:1986,
%;   author = "John McCarthy",
%;   year = "1986",
%;   title = "Applications of circumscription to formalizing common-sense knowledge",
%;   journal = "Artificial Intelligence",
%;   volume = "28",
%;   pages = "89--116".
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1000
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1001).
% load foundations/Root.e
:- load_e('foundations/Root.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1001
% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1001).
:- load_e('foundations/EC.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1003
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1004).
% sort x
==> sort(x).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1005
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1006).
% predicate Republican(x)
predicate(republican(x)).
==> mpred_prop(republican(x),predicate).
==> meta_argtypes(republican(x)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1006
% predicate Quaker(x)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1006).
predicate(quaker(x)).
==> mpred_prop(quaker(x),predicate).
==> meta_argtypes(quaker(x)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1007
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1008).
% predicate Pacifist(x)
predicate(pacifist(x)).
==> mpred_prop(pacifist(x),predicate).
==> meta_argtypes(pacifist(x)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1008
% predicate Ab1(x)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1008).
predicate(ab1(x)).
==> mpred_prop(ab1(x),predicate).
==> meta_argtypes(ab1(x)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1009
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1010).
% predicate Ab2(x)
predicate(ab2(x)).
==> mpred_prop(ab2(x),predicate).
==> meta_argtypes(ab2(x)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1011
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1012).
% x John
==> t(x,john).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1013
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1014).
% Republican(John).

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], republican(john)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1014).
axiom(republican(john),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1014
% Quaker(John).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1014).

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], quaker(john)).
 */
axiom(quaker(john),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1016
% [x]
 % Republican(x) & !Ab1(x) -> !Pacifist(x).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1016).

 /*  republican(X), not(ab1(X, Ab1_Ret)) ->
       not(pacifist(X)).
 */

 /*  not(pacifist(X)) :-
       republican(X),
       not(ab1(X, Ab1_Ret)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1016).

 /*  [republican(X), not(ab1(X, Ab1_Ret))] ->
       ta(Ta_Param, tvs1=[], tvs2=[], not(pacifist(X))).
 */
axiom(not(pacifist(X)),
    [republican(X), not(ab1(X, Ab1_Ret))]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1016).

 /*  not(republican(X)) :-
       not(ab1(X, Ab1_Ret)),
       pacifist(X).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1016).

 /*  [not(ab1(X, Ab1_Ret)), pacifist(X)] ->
       ta(Ta_Param3, tvs1=[], tvs2=[], not(republican(X))).
 */
axiom(not(republican(X)),
    [not(ab1(X, Ab1_Ret)), pacifist(X)]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1016).

 /*  ab1(X, Ab1_Ret) :-
       republican(X),
       pacifist(X).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1016).

 /*  [republican(X), pacifist(X)] ->
       ta(Ta_Param4, tvs1=[], tvs2=[], ab1(X, Ab1_Ret)).
 */
axiom(ab1(X, Ab1_Ret),
    [republican(X), pacifist(X)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1017
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1018).
% [x]
 % Quaker(x) & !Ab2(x) -> Pacifist(x).

 /*  quaker(X), not(ab2(X, Ab2_Ret)) ->
       pacifist(X).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1018).

 /*  pacifist(X) :-
       quaker(X),
       not(ab2(X, Ab2_Ret)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1018).

 /*  [quaker(X), not(ab2(X, Ab2_Ret))] ->
       ta(Ta_Param, tvs1=[], tvs2=[], pacifist(X)).
 */
axiom(pacifist(X),
    [quaker(X), not(ab2(X, Ab2_Ret))]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1018).

 /*  not(quaker(X)) :-
       not(ab2(X, Ab2_Ret)),
       not(pacifist(X)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1018).

 /*  [not(ab2(X, Ab2_Ret)), not(pacifist(X))] ->
       ta(Ta_Param3, tvs1=[], tvs2=[], not(quaker(X))).
 */
axiom(not(quaker(X)),
    [not(ab2(X, Ab2_Ret)), not(pacifist(X))]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1018).

 /*  ab2(X, Ab2_Ret) :-
       quaker(X),
       not(pacifist(X)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1018).

 /*  [quaker(X), not(pacifist(X))] ->
       ta(Ta_Param4, tvs1=[], tvs2=[], ab2(X, Ab2_Ret)).
 */
axiom(ab2(X, Ab2_Ret),
    [quaker(X), not(pacifist(X))]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1019
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1020).
% range time 0 0
==> range(time,0,0).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1020
% range offset 1 1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1020).
==> range(offset,1,1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1022
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1023).
% completion Theta Ab1
==> completion(theta).
==> completion(ab1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1023
% completion Theta Ab2
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1023).
==> completion(theta).
==> completion(ab2).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/ReiterCriscuolo1981/NixonDiamond2.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; conflicting defaults: method (D)
%; \fullciteA[p. 274]{ReiterCriscuolo:1981}
%; \fullciteA[pp. 98--99]{McCarthy:1986}
%; \fullciteA[p. 18]{BrewkaDixKonolige:1997}
%;
%; @inproceedings{ReiterCriscuolo:1981,
%;   author = "Raymond Reiter and Giovanni Criscuolo",
%;   year = "1981",
%;   title = "On interacting defaults",
%;   booktitle = "\uppercase{P}roceedings of the \uppercase{S}eventh \uppercase{I}nternational \uppercase{J}oint \uppercase{C}onference on \uppercase{A}rtificial \uppercase{I}ntelligence",
%;   volume = "1",
%;   pages = "270--276",
%;   address = "Los Altos, CA",
%;   publisher = "William Kaufmann",
%; }
%;
%; @article{McCarthy:1986,
%;   author = "John McCarthy",
%;   year = "1986",
%;   title = "Applications of circumscription to formalizing common-sense knowledge",
%;   journal = "Artificial Intelligence",
%;   volume = "28",
%;   pages = "89--116".
%; }
%;
%; @book{BrewkaDixKonolige:1997,
%;   author = "Gerhard Brewka and J{\"{u}}rgen Dix and Kurt Konolige",
%;   year = "1997",
%;   title = "Nonmonotonic Reasoning: An Overview",
%;   address = "Stanford, CA",
%;   publisher = "CSLI",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1076
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1077).
% load foundations/Root.e
:- load_e('foundations/Root.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1077
% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1077).
:- load_e('foundations/EC.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1079
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1080).
% sort x
==> sort(x).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1081
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1082).
% predicate Republican(x)
predicate(republican(x)).
==> mpred_prop(republican(x),predicate).
==> meta_argtypes(republican(x)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1082
% predicate Quaker(x)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1082).
predicate(quaker(x)).
==> mpred_prop(quaker(x),predicate).
==> meta_argtypes(quaker(x)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1083
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1084).
% predicate Pacifist(x)
predicate(pacifist(x)).
==> mpred_prop(pacifist(x),predicate).
==> meta_argtypes(pacifist(x)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1084
% predicate Ab1(x)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1084).
predicate(ab1(x)).
==> mpred_prop(ab1(x),predicate).
==> meta_argtypes(ab1(x)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1085
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1086).
% predicate Ab2(x)
predicate(ab2(x)).
==> mpred_prop(ab2(x),predicate).
==> meta_argtypes(ab2(x)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1087
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1088).
% x John
==> t(x,john).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1089
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1090).
% Republican(John).

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], republican(john)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1090).
axiom(republican(john),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1090
% Quaker(John).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1090).

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], quaker(john)).
 */
axiom(quaker(john),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1092
% [x]
 % Republican(x) & !Ab1(x) -> !Pacifist(x).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1092).

 /*  republican(X), not(ab1(X, Ab1_Ret)) ->
       not(pacifist(X)).
 */

 /*  not(pacifist(X)) :-
       republican(X),
       not(ab1(X, Ab1_Ret)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1092).

 /*  [republican(X), not(ab1(X, Ab1_Ret))] ->
       ta(Ta_Param, tvs1=[], tvs2=[], not(pacifist(X))).
 */
axiom(not(pacifist(X)),
    [republican(X), not(ab1(X, Ab1_Ret))]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1092).

 /*  not(republican(X)) :-
       not(ab1(X, Ab1_Ret)),
       pacifist(X).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1092).

 /*  [not(ab1(X, Ab1_Ret)), pacifist(X)] ->
       ta(Ta_Param3, tvs1=[], tvs2=[], not(republican(X))).
 */
axiom(not(republican(X)),
    [not(ab1(X, Ab1_Ret)), pacifist(X)]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1092).

 /*  ab1(X, Ab1_Ret) :-
       republican(X),
       pacifist(X).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1092).

 /*  [republican(X), pacifist(X)] ->
       ta(Ta_Param4, tvs1=[], tvs2=[], ab1(X, Ab1_Ret)).
 */
axiom(ab1(X, Ab1_Ret),
    [republican(X), pacifist(X)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1093
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1094).
% [x]
 % Quaker(x) & !Ab2(x) -> Pacifist(x).

 /*  quaker(X), not(ab2(X, Ab2_Ret)) ->
       pacifist(X).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1094).

 /*  pacifist(X) :-
       quaker(X),
       not(ab2(X, Ab2_Ret)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1094).

 /*  [quaker(X), not(ab2(X, Ab2_Ret))] ->
       ta(Ta_Param, tvs1=[], tvs2=[], pacifist(X)).
 */
axiom(pacifist(X),
    [quaker(X), not(ab2(X, Ab2_Ret))]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1094).

 /*  not(quaker(X)) :-
       not(ab2(X, Ab2_Ret)),
       not(pacifist(X)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1094).

 /*  [not(ab2(X, Ab2_Ret)), not(pacifist(X))] ->
       ta(Ta_Param3, tvs1=[], tvs2=[], not(quaker(X))).
 */
axiom(not(quaker(X)),
    [not(ab2(X, Ab2_Ret)), not(pacifist(X))]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1094).

 /*  ab2(X, Ab2_Ret) :-
       quaker(X),
       not(pacifist(X)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1094).

 /*  [quaker(X), not(pacifist(X))] ->
       ta(Ta_Param4, tvs1=[], tvs2=[], ab2(X, Ab2_Ret)).
 */
axiom(ab2(X, Ab2_Ret),
    [quaker(X), not(pacifist(X))]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1094
% Theta: 
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1094).
next_axiom_uses(theta).
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1094
% [x]
 % Republican(x) -> Ab2(x).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1094).

 /*  axiom_uses(theta) ->
       ( republican(X)->ab2(X, Ab2_Ret)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1094).

 /*  ab2(X, Ab2_Ret) :-
       republican(X),
       axiom_uses(theta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1094).

 /*  fix_axiom_head(Axiom_head_Ret) ->
       [axiom_uses(theta), ->, axiom_uses(theta, Axiom_head_Ret)].
 */

 /*  [republican(X), axiom_uses(theta, Axiom_head_Ret)] ->
       ta(Axiom_head_Ret, tvs1=[], tvs2=[], ab2(X, Ab2_Ret)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1094).
axiom(ab2(X, Ab2_Ret),
    [republican(X), axiom_uses(theta, Axiom_head_Ret)]).

 /*  not(republican(X)) :-
       not(ab2(X, Ab2_Ret)),
       axiom_uses(theta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1094).

 /*  fix_axiom_head(Axiom_head_Ret3) ->
       [axiom_uses(theta), ->, axiom_uses(theta, Axiom_head_Ret3)].
 */

 /*  [not(ab2(X, Ab2_Ret)), axiom_uses(theta, Axiom_head_Ret3)] ->
       ta(Axiom_head_Ret3, tvs1=[], tvs2=[], not(republican(X))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1094).
axiom(not(republican(X)),
    [not(ab2(X, Ab2_Ret)), axiom_uses(theta, Axiom_head_Ret3)]).

 /*  not(axiom_uses(theta)) :-
       not(ab2(X, Ab2_Ret)),
       republican(X).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1094).

 /*  fix_axiom_head(Axiom_head_Ret4) ->
       [not(axiom_uses(theta)), ->, not(axiom_uses(theta, Axiom_head_Ret4))].
 */

 /*  [not(ab2(X, Ab2_Ret)), republican(X)] ->
       ta(Axiom_head_Ret4,
          tvs1=[],
          tvs2=[],
          not(axiom_uses(theta, Axiom_head_Ret4))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1094).
axiom(not(axiom_uses(theta, Axiom_head_Ret4)),
    [not(ab2(X, Ab2_Ret)), republican(X)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1096
% range time 0 0
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1096).
==> range(time,0,0).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1097
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1098).
% range offset 1 1
==> range(offset,1,1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1099
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1100).
% completion Theta Ab1
==> completion(theta).
==> completion(ab1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1100
% completion Theta Ab2
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1100).
==> completion(theta).
==> completion(ab2).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter2/Sleep2.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1128
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1129).
% load foundations/Root.e
:- load_e('foundations/Root.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1129
% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1129).
:- load_e('foundations/EC.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1131
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1132).
% sort agent
==> sort(agent).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1133
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1134).
% agent Nathan
==> t(agent,nathan).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1135
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1136).
% fluent Awake(agent)
fluent(awake(agent)).
==> mpred_prop(awake(agent),fluent).
==> meta_argtypes(awake(agent)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1137
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1138).
% event WakeUp(agent)
event(wakeUp(agent)).
==> mpred_prop(wakeUp(agent),event).
==> meta_argtypes(wakeUp(agent)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1138
% event FallAsleep(agent)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1138).
event(fallAsleep(agent)).
==> mpred_prop(fallAsleep(agent),event).
==> meta_argtypes(fallAsleep(agent)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1140
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1141).
%; Sigma
% [agent,time]
 % Initiates(WakeUp(agent),Awake(agent),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1142
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1143).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(wakeUp(Agent), awake(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1143).
axiom(initiates(wakeUp(Agent), awake(Agent), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1143
% [agent,time]
 % Terminates(FallAsleep(agent),Awake(agent),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1143).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(fallAsleep(Agent), awake(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1143).
axiom(terminates(fallAsleep(Agent), awake(Agent), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1145
%; Gamma


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1147
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1148).
% !HoldsAt(Awake(Nathan),0).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(awake(nathan)), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1148).
axiom(holds_at(neg(awake(nathan)), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1148
% HoldsAt(Awake(Nathan),1).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1148).

 /*  [b(start, Time), ignore(start+1==Time)] ->
       ta(Ta_Param,
          tvs1=[start+1],
          tvs2=[Time, start],
          holds_at(awake(nathan), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1148).
axiom(holds_at(awake(nathan), Time),
    [b(start, Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1150
%; abduced:
%; Happens(WakeUp(Nathan),0).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1153
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1154).
% range time 0 1
==> range(time,0,1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1154
% range offset 1 1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1154).
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter2/Sleep1.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1182
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1183).
% load foundations/Root.e
:- load_e('foundations/Root.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1183
% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1183).
:- load_e('foundations/EC.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1185
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1186).
% sort agent
==> sort(agent).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1187
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1188).
% agent Nathan
==> t(agent,nathan).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1189
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1190).
% fluent Awake(agent)
fluent(awake(agent)).
==> mpred_prop(awake(agent),fluent).
==> meta_argtypes(awake(agent)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1191
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1192).
% event WakeUp(agent)
event(wakeUp(agent)).
==> mpred_prop(wakeUp(agent),event).
==> meta_argtypes(wakeUp(agent)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1192
% event FallAsleep(agent)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1192).
event(fallAsleep(agent)).
==> mpred_prop(fallAsleep(agent),event).
==> meta_argtypes(fallAsleep(agent)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1194
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1195).
%; Sigma
% [agent,time]
 % Initiates(WakeUp(agent),Awake(agent),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1196
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1197).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(wakeUp(Agent), awake(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1197).
axiom(initiates(wakeUp(Agent), awake(Agent), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1197
% [agent,time]
 % Terminates(FallAsleep(agent),Awake(agent),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1197).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(fallAsleep(Agent), awake(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1197).
axiom(terminates(fallAsleep(Agent), awake(Agent), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1199
%; Delta


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1201
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1202).
% Happens(WakeUp(Nathan),1).

 /*  [b(start, Maptime), ignore(start+1==Maptime)] ->
       ta(Ta_Param,
          tvs1=[start+1],
          tvs2=[Maptime, start],
          happens(wakeUp(nathan), Maptime)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1202).
axiom(happens(wakeUp(nathan), Maptime),
    [b(start, Maptime)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1203
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1204).
%; Gamma


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1205
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1206).
% !HoldsAt(Awake(Nathan),0).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(awake(nathan)), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1206).
axiom(holds_at(neg(awake(nathan)), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1207
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1208).
%; entailed:
%; HoldsAt(Awake(Nathan),3).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1210
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1211).
% completion Happens
==> completion(happens).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1212
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1213).
% range time 0 3
==> range(time,0,3).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1213
% range offset 1 1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1213).
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter2/Sleep3.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1241
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1242).
% load foundations/Root.e
:- load_e('foundations/Root.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1242
% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1242).
:- load_e('foundations/EC.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1244
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1245).
% sort agent
==> sort(agent).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1246
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1247).
% agent Nathan
==> t(agent,nathan).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1248
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1249).
% fluent Awake(agent)
fluent(awake(agent)).
==> mpred_prop(awake(agent),fluent).
==> meta_argtypes(awake(agent)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1250
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1251).
% event WakeUp(agent)
event(wakeUp(agent)).
==> mpred_prop(wakeUp(agent),event).
==> meta_argtypes(wakeUp(agent)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1251
% event FallAsleep(agent)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1251).
event(fallAsleep(agent)).
==> mpred_prop(fallAsleep(agent),event).
==> meta_argtypes(fallAsleep(agent)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1253
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1254).
%; Sigma
% [agent,time]
 % Initiates(WakeUp(agent),Awake(agent),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1255
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1256).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(wakeUp(Agent), awake(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1256).
axiom(initiates(wakeUp(Agent), awake(Agent), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1256
% [agent,time]
 % Terminates(FallAsleep(agent),Awake(agent),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1256).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(fallAsleep(Agent), awake(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1256).
axiom(terminates(fallAsleep(Agent), awake(Agent), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1258
%; Delta
% [agent,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1261
% Happens(WakeUp(agent),time) ->
% !HoldsAt(Awake(agent),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1261).

 /*  happens(wakeUp(Agent), Time) ->
       holds_at(neg(awake(Agent)), Time).
 */

 /*  holds_at(neg(awake(Agent)), Time) :-
       happens(wakeUp(Agent), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1261).

 /*  [holds_at(metreqs(wakeUp(Agent)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(wakeUp(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1261).
axiom(requires(wakeUp(Agent), Time),
    [holds_at(metreqs(wakeUp(Agent)), Time)]).

 /*  [holds_at(neg(awake(Agent)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(wakeUp(Agent)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1261).
axiom(holds_at(metreqs(wakeUp(Agent)), Time),
    [holds_at(neg(awake(Agent)), Time)]).

 /*  not(happens(wakeUp(Agent), Time)) :-
       not(holds_at(neg(awake(Agent)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1261).

 /*  [holds_at(awake(Agent), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(wakeUp(Agent), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1261).
axiom(not(happens(wakeUp(Agent), Time)),
    [holds_at(awake(Agent), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1264
% Happens(WakeUp(Nathan),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1264).

 /*  [] ->
       ta(Ta_Param, tvs1=[start], tvs2=[start], happens(wakeUp(nathan), start)).
 */
axiom(happens(wakeUp(nathan), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1266
%; Gamma


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1268
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1269).
% HoldsAt(Awake(Nathan),1).

 /*  [b(start, Time), ignore(start+1==Time)] ->
       ta(Ta_Param,
          tvs1=[start+1],
          tvs2=[Time, start],
          holds_at(awake(nathan), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1269).
axiom(holds_at(awake(nathan), Time),
    [b(start, Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1270
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1271).
%; inferred:
%; !HoldsAt(Awake(Nathan),0).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1273
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1274).
% completion Happens
==> completion(happens).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1275
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1276).
% range time 0 1
==> range(time,0,1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1276
% range offset 1 1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1276).
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter2/Inconsistency3.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1304
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1305).
% load foundations/Root.e
:- load_e('foundations/Root.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1305
% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1305).
:- load_e('foundations/EC.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1307
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1308).
% sort object
==> sort(object).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1308
% object O1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1308).
==> t(object,o1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1310
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1311).
% fluent F(object)
fluent(f(object)).
==> mpred_prop(f(object),fluent).
==> meta_argtypes(f(object)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1312
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1313).
% event E(object)
event(e(object)).
==> mpred_prop(e(object),event).
==> meta_argtypes(e(object)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1314
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1315).
% [object,time]
 % Releases(E(object),F(object),time).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          releases(e(Object), f(Object), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1315).
axiom(releases(e(Object), f(Object), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1315
% [object,time]
 % Terminates(E(object),F(object),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1315).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(e(Object), f(Object), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1315).
axiom(terminates(e(Object), f(Object), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1317
% Happens(E(O1),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1317).

 /*  [] ->
       ta(Ta_Param, tvs1=[start], tvs2=[start], happens(e(o1), start)).
 */
axiom(happens(e(o1), start),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1319
% range time 0 1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1319).
==> range(time,0,1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1320
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1321).
% range offset 1 1
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter2/Sleep4.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1348
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1349).
% load foundations/Root.e
:- load_e('foundations/Root.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1349
% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1349).
:- load_e('foundations/EC.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1351
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1352).
% sort agent
==> sort(agent).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1353
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1354).
% agent Nathan
==> t(agent,nathan).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1355
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1356).
% fluent Awake(agent)
fluent(awake(agent)).
==> mpred_prop(awake(agent),fluent).
==> meta_argtypes(awake(agent)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1357
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1358).
% event WakeUp(agent)
event(wakeUp(agent)).
==> mpred_prop(wakeUp(agent),event).
==> meta_argtypes(wakeUp(agent)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1358
% event FallAsleep(agent)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1358).
event(fallAsleep(agent)).
==> mpred_prop(fallAsleep(agent),event).
==> meta_argtypes(fallAsleep(agent)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1360
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1361).
%; Sigma
% [agent,time]
 % Initiates(WakeUp(agent),Awake(agent),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1362
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1363).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(wakeUp(Agent), awake(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1363).
axiom(initiates(wakeUp(Agent), awake(Agent), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1363
% [agent,time]
 % Terminates(FallAsleep(agent),Awake(agent),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1363).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(fallAsleep(Agent), awake(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1363).
axiom(terminates(fallAsleep(Agent), awake(Agent), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1365
%; Delta


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1367
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1368).
% Happens(WakeUp(Nathan),1).

 /*  [b(start, Maptime), ignore(start+1==Maptime)] ->
       ta(Ta_Param,
          tvs1=[start+1],
          tvs2=[Maptime, start],
          happens(wakeUp(nathan), Maptime)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1368).
axiom(happens(wakeUp(nathan), Maptime),
    [b(start, Maptime)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1369
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1370).
%; entailed:
%; HoldsAt(Awake(Nathan),3).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1372
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1373).
% completion Happens
==> completion(happens).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1374
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1375).
% range time 0 3
==> range(time,0,3).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1375
% range offset 1 1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1375).
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter2/Inconsistency4.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1403
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1404).
% load foundations/Root.e
:- load_e('foundations/Root.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1404
% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1404).
:- load_e('foundations/EC.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1406
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1407).
% sort object
==> sort(object).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1407
% object O1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1407).
==> t(object,o1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1409
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1410).
% event E(object)
event(e(object)).
==> mpred_prop(e(object),event).
==> meta_argtypes(e(object)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1411
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1412).
% fluent F1(object)
fluent(f1(object)).
==> mpred_prop(f1(object),fluent).
==> meta_argtypes(f1(object)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1412
% fluent F2(object)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1412).
fluent(f2(object)).
==> mpred_prop(f2(object),fluent).
==> meta_argtypes(f2(object)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1414
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1415).
% [object,time]
% Initiates(E(object),F1(object),time).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(e(Object), f1(Object), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1415).
axiom(initiates(e(Object), f1(Object), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1417
% [object,time]
% HoldsAt(F1(object),time) <-> HoldsAt(F2(object),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1419).

 /*  holds_at(f1(Object), Time) <->
       holds_at(f2(Object), Time).
 */

 /*  [holds_at, f1] <->
       [holds_at, f2].
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1419).

 /*  holds_at(f1(Object), Time) ->
       holds_at(f2(Object), Time).
 */

 /*  holds_at(f2(Object), Time) :-
       holds_at(f1(Object), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1419).

 /*  [holds_at(f1(Object), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(f2(Object), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1419).
axiom(holds_at(f2(Object), Time),
    [holds_at(f1(Object), Time)]).

 /*  not(holds_at(f1(Object), Time)) :-
       not(holds_at(f2(Object), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1419).

 /*  [holds_at(neg(f2(Object)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(f1(Object)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1419).
axiom(holds_at(neg(f1(Object)), Time),
    [holds_at(neg(f2(Object)), Time)]).

 /*  holds_at(f2(Object), Time) ->
       holds_at(f1(Object), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1419).

 /*  holds_at(f1(Object), Time) :-
       holds_at(f2(Object), Time).
 */

 /*  [holds_at(f2(Object), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(f1(Object), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1419).
axiom(holds_at(f1(Object), Time),
    [holds_at(f2(Object), Time)]).

 /*  not(holds_at(f2(Object), Time)) :-
       not(holds_at(f1(Object), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1419).

 /*  [holds_at(neg(f1(Object)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(f2(Object)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1419).
axiom(holds_at(neg(f2(Object)), Time),
    [holds_at(neg(f1(Object)), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1420
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1421).
% !HoldsAt(F2(O1),0).

 /*  [] ->
       ta(Ta_Param, tvs1=[start], tvs2=[start], holds_at(neg(f2(o1)), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1421).
axiom(holds_at(neg(f2(o1)), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1421
% Happens(E(O1),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1421).

 /*  [] ->
       ta(Ta_Param, tvs1=[start], tvs2=[start], happens(e(o1), start)).
 */
axiom(happens(e(o1), start),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1423
% range time 0 1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1423).
==> range(time,0,1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1424
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1425).
% range offset 1 1
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter2/Inconsistency1.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1452
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1453).
% load foundations/Root.e
:- load_e('foundations/Root.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1453
% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1453).
:- load_e('foundations/EC.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1455
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1456).
% sort object
==> sort(object).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1456
% object O1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1456).
==> t(object,o1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1458
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1459).
% fluent F(object)
fluent(f(object)).
==> mpred_prop(f(object),fluent).
==> meta_argtypes(f(object)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1460
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1461).
% event E(object)
event(e(object)).
==> mpred_prop(e(object),event).
==> meta_argtypes(e(object)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1462
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1463).
% [object,time]
 % Initiates(E(object),F(object),time).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(e(Object), f(Object), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1463).
axiom(initiates(e(Object), f(Object), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1463
% [object,time]
 % Terminates(E(object),F(object),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1463).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(e(Object), f(Object), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1463).
axiom(terminates(e(Object), f(Object), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1465
% Happens(E(O1),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1465).

 /*  [] ->
       ta(Ta_Param, tvs1=[start], tvs2=[start], happens(e(o1), start)).
 */
axiom(happens(e(o1), start),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1467
% range time 0 1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1467).
==> range(time,0,1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1468
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1469).
% range offset 1 1
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter2/Inconsistency2.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1496
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1497).
% load foundations/Root.e
:- load_e('foundations/Root.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1497
% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1497).
:- load_e('foundations/EC.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1499
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1500).
% sort object
==> sort(object).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1500
% object O1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1500).
==> t(object,o1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1502
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1503).
% fluent F(object)
fluent(f(object)).
==> mpred_prop(f(object),fluent).
==> meta_argtypes(f(object)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1504
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1505).
% event E(object)
event(e(object)).
==> mpred_prop(e(object),event).
==> meta_argtypes(e(object)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1506
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1507).
% [object,time]
 % Releases(E(object),F(object),time).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          releases(e(Object), f(Object), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1507).
axiom(releases(e(Object), f(Object), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1507
% [object,time]
 % Initiates(E(object),F(object),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1507).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(e(Object), f(Object), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1507).
axiom(initiates(e(Object), f(Object), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1509
% Happens(E(O1),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1509).

 /*  [] ->
       ta(Ta_Param, tvs1=[start], tvs2=[start], happens(e(o1), start)).
 */
axiom(happens(e(o1), start),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1511
% range time 0 1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1511).
==> range(time,0,1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1512
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1513).
% range offset 1 1
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter8/CameraWithFlash.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1540
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1541).
% load foundations/Root.e
:- load_e('foundations/Root.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1541
% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1541).
:- load_e('foundations/EC.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1543
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1544).
% sort camera
==> sort(camera).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1545
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1546).
% camera Camera1
==> t(camera,camera1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1547
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1548).
% fluent ProperlyExposedPicture(camera)
fluent(properlyExposedPicture(camera)).
==> mpred_prop(properlyExposedPicture(camera),fluent).
==> meta_argtypes(properlyExposedPicture(camera)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1548
% fluent ImproperlyExposedPicture(camera)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1548).
fluent(improperlyExposedPicture(camera)).
==> mpred_prop(improperlyExposedPicture(camera),fluent).
==> meta_argtypes(improperlyExposedPicture(camera)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1550
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1551).
% event ReleaseShutter(camera)
event(releaseShutter(camera)).
==> mpred_prop(releaseShutter(camera),event).
==> meta_argtypes(releaseShutter(camera)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1551
% event TriggerFlash(camera)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1551).
event(triggerFlash(camera)).
==> mpred_prop(triggerFlash(camera),event).
==> meta_argtypes(triggerFlash(camera)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1553
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1554).
%; Sigma
% [camera,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1556
% Happens(TriggerFlash(camera),time) ->
% Initiates(ReleaseShutter(camera),ProperlyExposedPicture(camera),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1556).

 /*  [holds_at(metreqs(triggerFlash(Camera)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(triggerFlash(Camera), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1556).
axiom(requires(triggerFlash(Camera), Time),
    [holds_at(metreqs(triggerFlash(Camera)), Time)]).

 /*  [initiates(releaseShutter(Camera), properlyExposedPicture(Camera), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(triggerFlash(Camera)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1556).
axiom(holds_at(metreqs(triggerFlash(Camera)), Time),
   
    [ initiates(releaseShutter(Camera),
                properlyExposedPicture(Camera),
                Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1559
% [camera,time]
% !Happens(TriggerFlash(camera),time) ->
% Initiates(ReleaseShutter(camera),ImproperlyExposedPicture(camera),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1561

 /*  [not(happens(triggerFlash(Camera), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(releaseShutter(Camera),
                    improperlyExposedPicture(Camera),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1561).
axiom(initiates(releaseShutter(Camera), improperlyExposedPicture(Camera), Time),
    [not(happens(triggerFlash(Camera), Time))]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1563
%; Delta

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1565
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1566).
% Delta: 
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1565
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1566).
% Happens(ReleaseShutter(Camera1),0).

 /*  [axiom_uses(delta, Axiom_uses_Ret)] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          happens(releaseShutter(camera1), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1566).
axiom(happens(releaseShutter(camera1), start),
    [axiom_uses(delta, Axiom_uses_Ret)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1566
% Delta: 
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1566).
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1566
% Happens(TriggerFlash(Camera1),1).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1566).

 /*  [axiom_uses(delta, Axiom_uses_Ret), b(start, Maptime), ignore(start+1==Maptime)] ->
       ta(Ta_Param,
          tvs1=[start+1],
          tvs2=[Maptime, start],
          happens(triggerFlash(camera1), Maptime)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1566).
axiom(happens(triggerFlash(camera1), Maptime),
    [axiom_uses(delta, Axiom_uses_Ret), b(start, Maptime)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1567
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1568).
% Delta: 
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1567
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1568).
% Happens(ReleaseShutter(Camera1),1).

 /*  [axiom_uses(delta, Axiom_uses_Ret), b(start, Maptime), ignore(start+1==Maptime)] ->
       ta(Ta_Param,
          tvs1=[start+1],
          tvs2=[Maptime, start],
          happens(releaseShutter(camera1), Maptime)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1568).
axiom(happens(releaseShutter(camera1), Maptime),
    [axiom_uses(delta, Axiom_uses_Ret), b(start, Maptime)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1569
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1570).
%; added:
% [camera]
 % !HoldsAt(ImproperlyExposedPicture(camera),0).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(improperlyExposedPicture(Camera)), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1570).
axiom(holds_at(neg(improperlyExposedPicture(Camera)), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1571
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1572).
% [camera]
 % !HoldsAt(ProperlyExposedPicture(camera),0).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(properlyExposedPicture(Camera)), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1572).
axiom(holds_at(neg(properlyExposedPicture(Camera)), start),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1573
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1574).
% completion Delta Happens
==> completion(delta).
==> completion(happens).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1575
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1576).
% range time 0 2
==> range(time,0,2).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1576
% range offset 1 1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1576).
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter8/MovingRobot.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @inproceedings{Shanahan:1996,
%;   author = "Murray Shanahan",
%;   year = "1996",
%;   title = "Robotics and the common sense informatic situation",
%;   editor = "Wolfgang Wahlster",
%;   booktitle = "\uppercase{P}roceedings of the \uppercase{T}welfth \uppercase{E}uropean \uppercase{C}onference on \uppercase{A}rtificial \uppercase{I}ntelligence",
%;   pages = "684--688",
%;   address = "Chichester, UK",
%;   publisher = "John Wiley",
%; }
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1615
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1616).
% option renaming off
:- set_ec_option(renaming, off).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1617
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1618).
% load foundations/Root.e
:- load_e('foundations/Root.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1618
% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1618).
:- load_e('foundations/EC.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1620
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1621).
% sort coord: integer
==> subsort(coord,integer).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1622
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1623).
% sort direction: integer
==> subsort(direction,integer).
%; 0 -> 0, 1 -> 90, 2 -> 180, 3 -> 370

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1625
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1626).
% sort robot
==> sort(robot).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1627
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1628).
% robot Robot1
==> t(robot,robot1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1629
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1630).
% function Sin(direction): coord
function(sin(direction)).
==> mpred_prop(sin(direction),function).
==> meta_argtypes(sin(direction)).
predicate(sinPred(direction,coord)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1630).
==> mpred_prop(sinPred(direction,coord),predicate).
==> meta_argtypes(sinPred(direction,coord)).

 /*  fix_axiom_head(Time) ->
       
       [ functional_predicate(sin, sinPred),
          (->),
         holds_at(functional_predicate(sin, sinPred), Time)
       ].
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1630).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(functional_predicate(sin, sinPred), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1630).
axiom(holds_at(functional_predicate(sin, sinPred), Time),
    []).
==> resultIsa(sin,coord).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1630
% function Cos(direction): coord
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1630).
function(cos(direction)).
==> mpred_prop(cos(direction),function).
==> meta_argtypes(cos(direction)).
predicate(cosPred(direction,coord)).
==> mpred_prop(cosPred(direction,coord),predicate).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1630).
==> meta_argtypes(cosPred(direction,coord)).

 /*  fix_axiom_head(Time) ->
       
       [ functional_predicate(cos, cosPred),
          (->),
         holds_at(functional_predicate(cos, cosPred), Time)
       ].
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1630).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(functional_predicate(cos, cosPred), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1630).
axiom(holds_at(functional_predicate(cos, cosPred), Time),
    []).
==> resultIsa(cos,coord).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1632
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1633).
% Sin(0)=0.

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], equals(sin(0), 0)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1633).
axiom(equals(sin(0), 0),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1633
% Sin(1)=1.
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1633).

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], equals(sin(1), 1)).
 */
axiom(equals(sin(1), 1),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1634
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1635).
% Sin(2)=2.

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], equals(sin(2), 2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1635).
axiom(equals(sin(2), 2),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1635
% Sin(3)=3.
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1635).

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], equals(sin(3), 3)).
 */
axiom(equals(sin(3), 3),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1637
% Cos(0)=1.
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1637).

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], equals(cos(0), 1)).
 */
axiom(equals(cos(0), 1),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1638
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1639).
% Cos(1)=2.

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], equals(cos(1), 2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1639).
axiom(equals(cos(1), 2),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1639
% Cos(2)=3.
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1639).

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], equals(cos(2), 3)).
 */
axiom(equals(cos(2), 3),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1640
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1641).
% Cos(3)=4.

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], equals(cos(3), 4)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1641).
axiom(equals(cos(3), 4),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1642
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1643).
% fluent Direction(robot,direction)
fluent(direction(robot,direction)).
==> mpred_prop(direction(robot,direction),fluent).
==> meta_argtypes(direction(robot,direction)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1643
% fluent Location(robot,coord,coord)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1643).
fluent(location(robot,coord,coord)).
==> mpred_prop(location(robot,coord,coord),fluent).
==> meta_argtypes(location(robot,coord,coord)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1645
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1646).
% event MoveLeftWheel(robot)
event(moveLeftWheel(robot)).
==> mpred_prop(moveLeftWheel(robot),event).
==> meta_argtypes(moveLeftWheel(robot)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1646
% event MoveRightWheel(robot)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1646).
event(moveRightWheel(robot)).
==> mpred_prop(moveRightWheel(robot),event).
==> meta_argtypes(moveRightWheel(robot)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1648
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1649).
%; Sigma
% [robot,direction1,direction2,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1651
% !Happens(MoveRightWheel(robot),time) &
% HoldsAt(Direction(robot,direction1),time) &
% direction2 = (direction1-1)->
% Initiates(MoveLeftWheel(robot),Direction(robot,direction2),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1654
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1651).

 /*  [not(happens(moveRightWheel(Robot), Time)), holds_at(direction(Robot, Direction1), Time), equals(Direction2, Direction1-1)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(moveLeftWheel(Robot),
                    direction(Robot, Direction2),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1651).
axiom(initiates(moveLeftWheel(Robot), direction(Robot, Direction2), Time),
   
    [ not(happens(moveRightWheel(Robot), Time)),
      holds_at(direction(Robot, Direction1), Time),
      equals(Direction2, Direction1-1)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1656
% [robot,direction,time]
% !Happens(MoveRightWheel(robot),time) &
% HoldsAt(Direction(robot,direction),time) ->
% Terminates(MoveLeftWheel(robot),Direction(robot,direction),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1659
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1658).

 /*  [not(happens(moveRightWheel(Robot), Time)), holds_at(direction(Robot, Direction), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(moveLeftWheel(Robot),
                     direction(Robot, Direction),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1658).
axiom(terminates(moveLeftWheel(Robot), direction(Robot, Direction), Time),
   
    [ not(happens(moveRightWheel(Robot), Time)),
      holds_at(direction(Robot, Direction), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1661
% [robot,direction1,direction2,time]
% !Happens(MoveLeftWheel(robot),time) &
% HoldsAt(Direction(robot,direction1),time) &
% direction2 = (direction1+1)->
% Initiates(MoveRightWheel(robot),Direction(robot,direction2),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1665
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1663).

 /*  [not(happens(moveLeftWheel(Robot), Time)), holds_at(direction(Robot, Direction1), Time), equals(Direction2, Direction1+1)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(moveRightWheel(Robot),
                    direction(Robot, Direction2),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1663).
axiom(initiates(moveRightWheel(Robot), direction(Robot, Direction2), Time),
   
    [ not(happens(moveLeftWheel(Robot), Time)),
      holds_at(direction(Robot, Direction1), Time),
      equals(Direction2, Direction1+1)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1667
% [robot,direction,time]
% !Happens(MoveLeftWheel(robot),time) &
% HoldsAt(Direction(robot,direction),time) ->
% Terminates(MoveRightWheel(robot),Direction(robot,direction),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1670
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1669).

 /*  [not(happens(moveLeftWheel(Robot), Time)), holds_at(direction(Robot, Direction), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(moveRightWheel(Robot),
                     direction(Robot, Direction),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1669).
axiom(terminates(moveRightWheel(Robot), direction(Robot, Direction), Time),
   
    [ not(happens(moveLeftWheel(Robot), Time)),
      holds_at(direction(Robot, Direction), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1672
% [robot,direction,coord1,coord2,coord3,coord4,time]
% Happens(MoveLeftWheel(robot),time) &
% HoldsAt(Location(robot,coord1,coord2),time) &
% HoldsAt(Direction(robot,direction),time) &
% coord3 = coord1+Cos(direction) &
% coord4 = coord2+Sin(direction) ->
% Initiates(MoveRightWheel(robot),
%           Location(robot,coord3,coord4),
%           time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1680
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1674).

 /*  [happens(moveLeftWheel(Robot), Time), holds_at(location(Robot, Coord1, Coord2), Time), holds_at(direction(Robot, Direction), Time), equals(Coord3, Coord1+cos(Direction)), equals(Coord4, Coord2+sin(Direction))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(moveRightWheel(Robot),
                    location(Robot, Coord3, Coord4),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1674).
axiom(initiates(moveRightWheel(Robot), location(Robot, Coord3, Coord4), Time),
   
    [ happens(moveLeftWheel(Robot), Time),
      holds_at(location(Robot, Coord1, Coord2), Time),
      holds_at(direction(Robot, Direction), Time),
      equals(Coord3, Coord1+cos(Direction)),
      equals(Coord4, Coord2+sin(Direction))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1682
% [robot,coord1,coord2,time]
% Happens(MoveLeftWheel(robot),time) &
% HoldsAt(Location(robot,coord1,coord2),time) ->
%; FIX: Direction not needed!!
%; HoldsAt(Direction(robot,direction),time) ->
% Terminates(MoveRightWheel(robot),Location(robot,coord1,coord2),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1687
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1684).

 /*  [happens(moveLeftWheel(Robot), Time), holds_at(location(Robot, Coord1, Coord2), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(moveRightWheel(Robot),
                     location(Robot, Coord1, Coord2),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1684).
axiom(terminates(moveRightWheel(Robot), location(Robot, Coord1, Coord2), Time),
   
    [ happens(moveLeftWheel(Robot), Time),
      holds_at(location(Robot, Coord1, Coord2), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1689
%; Delta


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1691
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1692).
% Happens(MoveRightWheel(Robot1),0).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          happens(moveRightWheel(robot1), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1692).
axiom(happens(moveRightWheel(robot1), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1692
% Happens(MoveLeftWheel(Robot1),1).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1692).

 /*  [b(start, Maptime), ignore(start+1==Maptime)] ->
       ta(Ta_Param,
          tvs1=[start+1],
          tvs2=[Maptime, start],
          happens(moveLeftWheel(robot1), Maptime)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1692).
axiom(happens(moveLeftWheel(robot1), Maptime),
    [b(start, Maptime)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1693
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1694).
% Happens(MoveRightWheel(Robot1),1).

 /*  [b(start, Maptime), ignore(start+1==Maptime)] ->
       ta(Ta_Param,
          tvs1=[start+1],
          tvs2=[Maptime, start],
          happens(moveRightWheel(robot1), Maptime)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1694).
axiom(happens(moveRightWheel(robot1), Maptime),
    [b(start, Maptime)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1695
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1696).
%; Psi
% [robot,coord1,coord2,coord3,coord4,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1699
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1700).
% HoldsAt(Location(robot,coord1,coord2),time) &
% HoldsAt(Location(robot,coord3,coord4),time) ->
% coord1=coord3 &
% coord2=coord4.
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1702
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1700).

 /*  holds_at(location(Robot, Coord1, Coord2), Time), holds_at(location(Robot, Coord3, Coord4), Time) ->
       equals(Coord1, Coord3),
       equals(Coord2, Coord4).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1700).

 /*  not(holds_at(location(Robot, Coord1, Coord2), Time)) :-
       holds_at(location(Robot, Coord3, Coord4), Time),
       (   not(equals(Coord1, Coord3))
       ;   not(equals(Coord2, Coord4))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1700).

 /*  [holds_at(location(Robot, Coord3, Coord4), Time),  (not(equals(Coord1, Coord3));not(equals(Coord2, Coord4)))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(location(Robot, Coord1, Coord2)),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1700).
axiom(holds_at(neg(location(Robot, Coord1, Coord2)), Time),
   
    [ holds_at(location(Robot, Coord3, Coord4), Time),
       (not(equals(Coord1, Coord3));not(equals(Coord2, Coord4)))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1700).

 /*  not(holds_at(location(Robot, Coord3, Coord4), Time)) :-
       holds_at(location(Robot, Coord1, Coord2), Time),
       (   not(equals(Coord1, Coord3))
       ;   not(equals(Coord2, Coord4))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1700).

 /*  [holds_at(location(Robot, Coord1, Coord2), Time),  (not(equals(Coord1, Coord3));not(equals(Coord2, Coord4)))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(location(Robot, Coord3, Coord4)),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1700).
axiom(holds_at(neg(location(Robot, Coord3, Coord4)), Time),
   
    [ holds_at(location(Robot, Coord1, Coord2), Time),
       (not(equals(Coord3, Coord1));not(equals(Coord4, Coord2)))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1704
% [robot,direction1,direction2,time]
% HoldsAt(Direction(robot,direction1),time) &
% HoldsAt(Direction(robot,direction2),time) ->
% direction1=direction2.
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1707
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1706).

 /*  holds_at(direction(Robot, Direction1), Time), holds_at(direction(Robot, Direction2), Time) ->
       equals(Direction1, Direction2).
 */

 /*  not(holds_at(direction(Robot, Direction1), Time)) :-
       holds_at(direction(Robot, Direction2), Time),
       not(equals(Direction1, Direction2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1706).

 /*  [holds_at(direction(Robot, Direction2), Time), not(equals(Direction1, Direction2))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(direction(Robot, Direction1)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1706).
axiom(holds_at(neg(direction(Robot, Direction1)), Time),
   
    [ holds_at(direction(Robot, Direction2), Time),
      not(equals(Direction1, Direction2))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1706).

 /*  not(holds_at(direction(Robot, Direction2), Time)) :-
       holds_at(direction(Robot, Direction1), Time),
       not(equals(Direction1, Direction2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1706).

 /*  [holds_at(direction(Robot, Direction1), Time), not(equals(Direction1, Direction2))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(direction(Robot, Direction2)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1706).
axiom(holds_at(neg(direction(Robot, Direction2)), Time),
   
    [ holds_at(direction(Robot, Direction1), Time),
      not(equals(Direction2, Direction1))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1709
%; Gamma


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1711
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1712).
% HoldsAt(Location(Robot1,0,0),0).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(location(robot1, 0, 0), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1712).
axiom(holds_at(location(robot1, 0, 0), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1712
% HoldsAt(Direction(Robot1,0),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1712).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(direction(robot1, 0), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1712).
axiom(holds_at(direction(robot1, 0), start),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1714
% completion Happens
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1714).
==> completion(happens).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1716
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1717).
% range time 0 3
==> range(time,0,3).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1717
% range coord 0 3
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1717).
==> range(coord,0,3).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1718
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1719).
% range direction 0 3
==> range(direction,0,3).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1719
% range offset 1 1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1719).
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter8/PatHeadRubStomach.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1747
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1748).
% load foundations/Root.e
:- load_e('foundations/Root.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1748
% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1748).
:- load_e('foundations/EC.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1750
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1751).
% sort agent
==> sort(agent).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1752
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1753).
% event PatHead(agent)
event(patHead(agent)).
==> mpred_prop(patHead(agent),event).
==> meta_argtypes(patHead(agent)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1753
% event RubStomach(agent)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1753).
event(rubStomach(agent)).
==> mpred_prop(rubStomach(agent),event).
==> meta_argtypes(rubStomach(agent)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1755
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1756).
% agent Nathan
==> t(agent,nathan).
%; Delta
% [agent,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1760
% Happens(PatHead(agent),time) ->
% !Happens(RubStomach(agent),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1760).

 /*  happens(patHead(Agent), Time) ->
       not(happens(rubStomach(Agent), Time)).
 */

 /*  not(happens(rubStomach(Agent), Time)) :-
       happens(patHead(Agent), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1760).

 /*  [happens(patHead(Agent), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(rubStomach(Agent), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1760).
axiom(not(happens(rubStomach(Agent), Time)),
    [happens(patHead(Agent), Time)]).

 /*  not(happens(patHead(Agent), Time)) :-
       happens(rubStomach(Agent), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1760).

 /*  [happens(rubStomach(Agent), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(patHead(Agent), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1760).
axiom(not(happens(patHead(Agent), Time)),
    [happens(rubStomach(Agent), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1763
% Happens(PatHead(Nathan),0) & Happens(RubStomach(Nathan),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1763).

 /*   happens(patHead(nathan), start),
      happens(rubStomach(nathan), start).
 */

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          happens(patHead(nathan), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1763).
axiom(happens(patHead(nathan), start),
    []).

 /*  [] ->
       ta(Ta_Param1,
          tvs1=[start],
          tvs2=[start],
          happens(rubStomach(nathan), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1763).
axiom(happens(rubStomach(nathan), start),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1765
% range time 0 1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1765).
==> range(time,0,1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1766
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1767).
% range offset 1 1
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter10/MovingNewspaperAndBox.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1794
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1795).
% load foundations/Root.e
:- load_e('foundations/Root.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1795
% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1795).
:- load_e('foundations/EC.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1797
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1798).
% sort object
==> sort(object).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1798
% sort agent: object
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1798).
==> subsort(agent,object).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1799
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1800).
% sort physobj: object
==> subsort(physobj,object).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1800
% sort room: object
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1800).
==> subsort(room,object).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1802
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1803).
% fluent IN(object,object)
fluent(in(object,object)).
==> mpred_prop(in(object,object),fluent).
==> meta_argtypes(in(object,object)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1803
% fluent INROOM(object,room)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1803).
fluent(inroom(object,room)).
==> mpred_prop(inroom(object,room),fluent).
==> meta_argtypes(inroom(object,room)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1804
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1805).
% noninertial INROOM
==> noninertial(inroom).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1806
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1807).
% event MOVE(agent,object,object,object)
event(move(agent,object,object,object)).
==> mpred_prop(move(agent,object,object,object),event).
==> meta_argtypes(move(agent,object,object,object)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1808
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1809).
% agent Lisa
==> t(agent,lisa).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1809
% physobj Box, Newspaper
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1809).
==> t(physobj,box).
==> t(physobj,newspaper).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1810
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1811).
% room Kitchen, LivingRoom
==> t(room,kitchen).
==> t(room,livingRoom).
%; Sigma
%; RS10
% [agent,physobj1,physobj2,room,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1816
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1817).
% HoldsAt(IN(agent,room),time) &
% HoldsAt(IN(physobj1,room),time) &
% HoldsAt(INROOM(physobj2,room),time) ->
% Initiates(MOVE(agent,physobj1,room,physobj2),IN(physobj1,physobj2),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1819
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1817).

 /*  [holds_at(in(Agent, Room), Time), holds_at(in(Physobj1, Room), Time), holds_at(inroom(Physobj2, Room), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(move(Agent, Physobj1, Room, Physobj2),
                    in(Physobj1, Physobj2),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1817).
axiom(initiates(move(Agent, Physobj1, Room, Physobj2), in(Physobj1, Physobj2), Time),
   
    [ holds_at(in(Agent, Room), Time),
      holds_at(in(Physobj1, Room), Time),
      holds_at(inroom(Physobj2, Room), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1821
%; RS11
% [agent,physobj1,physobj2,room,time]
% HoldsAt(IN(agent,room),time) &
% HoldsAt(IN(physobj1,room),time) &
% HoldsAt(INROOM(physobj2,room),time) ->
% Terminates(MOVE(agent,physobj1,room,physobj2),IN(physobj1,room),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1826
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1823).

 /*  [holds_at(in(Agent, Room), Time), holds_at(in(Physobj1, Room), Time), holds_at(inroom(Physobj2, Room), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(move(Agent, Physobj1, Room, Physobj2),
                     in(Physobj1, Room),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1823).
axiom(terminates(move(Agent, Physobj1, Room, Physobj2), in(Physobj1, Room), Time),
   
    [ holds_at(in(Agent, Room), Time),
      holds_at(in(Physobj1, Room), Time),
      holds_at(inroom(Physobj2, Room), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1828
%; RS12
% [agent,physobj1,physobj2,room,time]
% HoldsAt(IN(agent,room),time) ->
% Initiates(MOVE(agent,physobj1,physobj2,room),IN(physobj1,room),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1831
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1830).

 /*  [holds_at(in(Agent, Room), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(move(Agent, Physobj1, Physobj2, Room),
                    in(Physobj1, Room),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1830).
axiom(initiates(move(Agent, Physobj1, Physobj2, Room), in(Physobj1, Room), Time),
    [holds_at(in(Agent, Room), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1833
%; RS13
% [agent,physobj1,physobj2,room,time]
% HoldsAt(IN(agent,room),time) ->
% Terminates(MOVE(agent,physobj1,physobj2,room),IN(physobj1,physobj2),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1836
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1835).

 /*  [holds_at(in(Agent, Room), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(move(Agent, Physobj1, Physobj2, Room),
                     in(Physobj1, Physobj2),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1835).
axiom(terminates(move(Agent, Physobj1, Physobj2, Room), in(Physobj1, Physobj2), Time),
    [holds_at(in(Agent, Room), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1838
%; RS14
% [agent,room1,room2,time]
% HoldsAt(IN(agent,room1),time) ->
% Initiates(MOVE(agent,agent,room1,room2),IN(agent,room2),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1841
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1840).

 /*  [holds_at(in(Agent, Room1), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(move(Agent, Agent, Room1, Room2),
                    in(Agent, Room2),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1840).
axiom(initiates(move(Agent, Agent, Room1, Room2), in(Agent, Room2), Time),
    [holds_at(in(Agent, Room1), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1843
%; RS15
% [agent,room1,room2,time]
% HoldsAt(IN(agent,room1),time) ->
% Terminates(MOVE(agent,agent,room1,room2),IN(agent,room1),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1846
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1845).

 /*  [holds_at(in(Agent, Room1), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(move(Agent, Agent, Room1, Room2),
                     in(Agent, Room1),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1845).
axiom(terminates(move(Agent, Agent, Room1, Room2), in(Agent, Room1), Time),
    [holds_at(in(Agent, Room1), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1848
%; RS16
% [agent,physobj,room,time]
% HoldsAt(IN(agent,room),time) &
% HoldsAt(IN(physobj,room),time) ->
% Initiates(MOVE(agent,physobj,room,agent),IN(physobj,agent),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1852
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1850).

 /*  [holds_at(in(Agent, Room), Time), holds_at(in(Physobj, Room), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(move(Agent, Physobj, Room, Agent),
                    in(Physobj, Agent),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1850).
axiom(initiates(move(Agent, Physobj, Room, Agent), in(Physobj, Agent), Time),
   
    [ holds_at(in(Agent, Room), Time),
      holds_at(in(Physobj, Room), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1854
%; RS17
% [agent,physobj,room,time]
% HoldsAt(IN(agent,room),time) &
% HoldsAt(IN(physobj,room),time) ->
% Terminates(MOVE(agent,physobj,room,agent),IN(physobj,room),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1858
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1856).

 /*  [holds_at(in(Agent, Room), Time), holds_at(in(Physobj, Room), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(move(Agent, Physobj, Room, Agent),
                     in(Physobj, Room),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1856).
axiom(terminates(move(Agent, Physobj, Room, Agent), in(Physobj, Room), Time),
   
    [ holds_at(in(Agent, Room), Time),
      holds_at(in(Physobj, Room), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1860
%; RS18
% [agent,physobj,room,time]
% HoldsAt(IN(physobj,agent),time) &
% HoldsAt(IN(agent,room),time) ->
% Initiates(MOVE(agent,physobj,agent,room),IN(physobj,room),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1864
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1862).

 /*  [holds_at(in(Physobj, Agent), Time), holds_at(in(Agent, Room), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(move(Agent, Physobj, Agent, Room),
                    in(Physobj, Room),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1862).
axiom(initiates(move(Agent, Physobj, Agent, Room), in(Physobj, Room), Time),
   
    [ holds_at(in(Physobj, Agent), Time),
      holds_at(in(Agent, Room), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1866
%; RS19
% [agent,physobj,room,time]
% HoldsAt(IN(physobj,agent),time) &
% HoldsAt(IN(agent,room),time) ->
% Terminates(MOVE(agent,physobj,agent,room),IN(physobj,agent),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1870
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1868).

 /*  [holds_at(in(Physobj, Agent), Time), holds_at(in(Agent, Room), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(move(Agent, Physobj, Agent, Room),
                     in(Physobj, Agent),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1868).
axiom(terminates(move(Agent, Physobj, Agent, Room), in(Physobj, Agent), Time),
   
    [ holds_at(in(Physobj, Agent), Time),
      holds_at(in(Agent, Room), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1872
%; Delta


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1874
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1875).
% Happens(MOVE(Lisa,Newspaper,LivingRoom,Box),0).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          happens(move(lisa, newspaper, livingRoom, box), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1875).
axiom(happens(move(lisa, newspaper, livingRoom, box), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1875
% Happens(MOVE(Lisa,Box,LivingRoom,Lisa),1).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1875).

 /*  [b(start, Maptime), ignore(start+1==Maptime)] ->
       ta(Ta_Param,
          tvs1=[start+1],
          tvs2=[Maptime, start],
          happens(move(lisa, box, livingRoom, lisa), Maptime)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1875).
axiom(happens(move(lisa, box, livingRoom, lisa), Maptime),
    [b(start, Maptime)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1876
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1877).
% Happens(MOVE(Lisa,Lisa,LivingRoom,Kitchen),2).

 /*  [b(start, Start2), toffset(start, 2, Start2), ignore(start+2==Start2)] ->
       ta(Ta_Param,
          tvs1=[start+2],
          tvs2=[Start2, start],
          happens(move(lisa, lisa, livingRoom, kitchen), Start2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1877).
axiom(happens(move(lisa, lisa, livingRoom, kitchen), Start2),
    [b(start, Start2), toffset(start, 2, Start2)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1877
% Happens(MOVE(Lisa,Box,Lisa,Kitchen),3).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1877).

 /*  [b(start, Start3), toffset(start, 3, Start3), ignore(start+3==Start3)] ->
       ta(Ta_Param,
          tvs1=[start+3],
          tvs2=[Start3, start],
          happens(move(lisa, box, lisa, kitchen), Start3)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1877).
axiom(happens(move(lisa, box, lisa, kitchen), Start3),
    [b(start, Start3), toffset(start, 3, Start3)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1878
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1879).
% Happens(MOVE(Lisa,Lisa,Kitchen,LivingRoom),4).

 /*  [b(start, Start4), toffset(start, 4, Start4), ignore(start+4==Start4)] ->
       ta(Ta_Param,
          tvs1=[start+4],
          tvs2=[Start4, start],
          happens(move(lisa, lisa, kitchen, livingRoom), Start4)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1879).
axiom(happens(move(lisa, lisa, kitchen, livingRoom), Start4),
    [b(start, Start4), toffset(start, 4, Start4)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1880
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1881).
%; Psi
%; RS1
% [object,time]
 
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1883
% !HoldsAt(IN(object,object),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1883).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(in(Object, Object)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1883).
axiom(holds_at(neg(in(Object, Object)), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1885
%; RS2
% [object1,object2,time]
% HoldsAt(IN(object1,object2),time) ->
% !HoldsAt(IN(object2,object1),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1888
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1887).

 /*  holds_at(in(Object1, Object2), Time) ->
       holds_at(neg(in(Object2, Object1)), Time).
 */

 /*  holds_at(neg(in(Object2, Object1)), Time) :-
       holds_at(in(Object1, Object2), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1887).

 /*  [holds_at(in(Object1, Object2), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(in(Object2, Object1)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1887).
axiom(holds_at(neg(in(Object2, Object1)), Time),
    [holds_at(in(Object1, Object2), Time)]).

 /*  not(holds_at(in(Object1, Object2), Time)) :-
       not(holds_at(neg(in(Object2, Object1)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1887).

 /*  [holds_at(in(Object2, Object1), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(in(Object1, Object2)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1887).
axiom(holds_at(neg(in(Object1, Object2)), Time),
    [holds_at(in(Object2, Object1), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1890
%; RS3
% [object1,object2,object3,time]
% HoldsAt(IN(object1,object2),time) &
% HoldsAt(IN(object2,object3),time) ->
% !HoldsAt(IN(object1,object3),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1894
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1892).

 /*  holds_at(in(Object1, Object2), Time), holds_at(in(Object2, Object3), Time) ->
       holds_at(neg(in(Object1, Object3)), Time).
 */

 /*  holds_at(neg(in(Object1, Object3)), Time) :-
       holds_at(in(Object1, Object2), Time),
       holds_at(in(Object2, Object3), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1892).

 /*  [holds_at(in(Object1, Object2), Time), holds_at(in(Object2, Object3), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(in(Object1, Object3)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1892).
axiom(holds_at(neg(in(Object1, Object3)), Time),
   
    [ holds_at(in(Object1, Object2), Time),
      holds_at(in(Object2, Object3), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1892).

 /*  not(holds_at(in(Object1, Object2), Time)) :-
       holds_at(in(Object2, Object3), Time),
       not(holds_at(neg(in(Object1, Object3)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1892).

 /*  [holds_at(in(Object2, Object3), Time), holds_at(in(Object1, Object3), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(in(Object1, Object2)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1892).
axiom(holds_at(neg(in(Object1, Object2)), Time),
   
    [ holds_at(in(Object2, Object3), Time),
      holds_at(in(Object1, Object3), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1892).

 /*  not(holds_at(in(Object2, Object3), Time)) :-
       holds_at(in(Object1, Object2), Time),
       not(holds_at(neg(in(Object1, Object3)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1892).

 /*  [holds_at(in(Object1, Object2), Time), holds_at(in(Object1, Object3), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(in(Object2, Object3)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1892).
axiom(holds_at(neg(in(Object2, Object3)), Time),
   
    [ holds_at(in(Object1, Object2), Time),
      holds_at(in(Object1, Object3), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1896
%; RS4
% [object,object1,object2,time]
% HoldsAt(IN(object,object1),time) &
% HoldsAt(IN(object,object2),time) ->
% object1=object2.
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1900
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1898).

 /*  holds_at(in(Object, Object1), Time), holds_at(in(Object, Object2), Time) ->
       equals(Object1, Object2).
 */

 /*  not(holds_at(in(Object, Object1), Time)) :-
       holds_at(in(Object, Object2), Time),
       not(equals(Object1, Object2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1898).

 /*  [holds_at(in(Object, Object2), Time), not(equals(Object1, Object2))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(in(Object, Object1)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1898).
axiom(holds_at(neg(in(Object, Object1)), Time),
   
    [ holds_at(in(Object, Object2), Time),
      not(equals(Object1, Object2))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1898).

 /*  not(holds_at(in(Object, Object2), Time)) :-
       holds_at(in(Object, Object1), Time),
       not(equals(Object1, Object2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1898).

 /*  [holds_at(in(Object, Object1), Time), not(equals(Object1, Object2))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(in(Object, Object2)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1898).
axiom(holds_at(neg(in(Object, Object2)), Time),
   
    [ holds_at(in(Object, Object1), Time),
      not(equals(Object2, Object1))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1902
%; RS7
% [object,room,time]
% HoldsAt(IN(object,room),time) ->
% HoldsAt(INROOM(object,room),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1905
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1904).

 /*  holds_at(in(Object, Room), Time) ->
       holds_at(inroom(Object, Room), Time).
 */

 /*  holds_at(inroom(Object, Room), Time) :-
       holds_at(in(Object, Room), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1904).

 /*  [holds_at(in(Object, Room), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(inroom(Object, Room), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1904).
axiom(holds_at(inroom(Object, Room), Time),
    [holds_at(in(Object, Room), Time)]).

 /*  not(holds_at(in(Object, Room), Time)) :-
       not(holds_at(inroom(Object, Room), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1904).

 /*  [holds_at(neg(inroom(Object, Room)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(in(Object, Room)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1904).
axiom(holds_at(neg(in(Object, Room)), Time),
    [holds_at(neg(inroom(Object, Room)), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1907
%; RS8
% [object1,object2,room,time]
% HoldsAt(IN(object1,object2),time) &
% HoldsAt(INROOM(object2,room),time) ->
% HoldsAt(INROOM(object1,room),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1911
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1909).

 /*  holds_at(in(Object1, Object2), Time), holds_at(inroom(Object2, Room), Time) ->
       holds_at(inroom(Object1, Room), Time).
 */

 /*  holds_at(inroom(Object1, Room), Time) :-
       holds_at(in(Object1, Object2), Time),
       holds_at(inroom(Object2, Room), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1909).

 /*  [holds_at(in(Object1, Object2), Time), holds_at(inroom(Object2, Room), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(inroom(Object1, Room), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1909).
axiom(holds_at(inroom(Object1, Room), Time),
   
    [ holds_at(in(Object1, Object2), Time),
      holds_at(inroom(Object2, Room), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1909).

 /*  not(holds_at(in(Object1, Object2), Time)) :-
       holds_at(inroom(Object2, Room), Time),
       not(holds_at(inroom(Object1, Room), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1909).

 /*  [holds_at(inroom(Object2, Room), Time), holds_at(neg(inroom(Object1, Room)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(in(Object1, Object2)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1909).
axiom(holds_at(neg(in(Object1, Object2)), Time),
   
    [ holds_at(inroom(Object2, Room), Time),
      holds_at(neg(inroom(Object1, Room)), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1909).

 /*  not(holds_at(inroom(Object2, Room), Time)) :-
       holds_at(in(Object1, Object2), Time),
       not(holds_at(inroom(Object1, Room), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1909).

 /*  [holds_at(in(Object1, Object2), Time), holds_at(neg(inroom(Object1, Room)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(inroom(Object2, Room)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1909).
axiom(holds_at(neg(inroom(Object2, Room)), Time),
   
    [ holds_at(in(Object1, Object2), Time),
      holds_at(neg(inroom(Object1, Room)), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1913
%; RS9
% [object,room1,room2,time]
% HoldsAt(INROOM(object,room1),time) &
% HoldsAt(INROOM(object,room2),time) ->
% room1=room2.
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1917
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1915).

 /*  holds_at(inroom(Object, Room1), Time), holds_at(inroom(Object, Room2), Time) ->
       equals(Room1, Room2).
 */

 /*  not(holds_at(inroom(Object, Room1), Time)) :-
       holds_at(inroom(Object, Room2), Time),
       not(equals(Room1, Room2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1915).

 /*  [holds_at(inroom(Object, Room2), Time), not(equals(Room1, Room2))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(inroom(Object, Room1)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1915).
axiom(holds_at(neg(inroom(Object, Room1)), Time),
   
    [ holds_at(inroom(Object, Room2), Time),
      not(equals(Room1, Room2))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1915).

 /*  not(holds_at(inroom(Object, Room2), Time)) :-
       holds_at(inroom(Object, Room1), Time),
       not(equals(Room1, Room2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1915).

 /*  [holds_at(inroom(Object, Room1), Time), not(equals(Room1, Room2))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(inroom(Object, Room2)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1915).
axiom(holds_at(neg(inroom(Object, Room2)), Time),
   
    [ holds_at(inroom(Object, Room1), Time),
      not(equals(Room2, Room1))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1919
%; Gamma


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1921
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1922).
% HoldsAt(IN(Lisa,LivingRoom),0).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(in(lisa, livingRoom), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1922).
axiom(holds_at(in(lisa, livingRoom), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1922
% HoldsAt(IN(Newspaper,LivingRoom),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1922).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(in(newspaper, livingRoom), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1922).
axiom(holds_at(in(newspaper, livingRoom), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1923
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1924).
% HoldsAt(IN(Box,LivingRoom),0).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(in(box, livingRoom), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1924).
axiom(holds_at(in(box, livingRoom), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1925
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1926).
%; added:
% [room1,room2,time]
 % !HoldsAt(INROOM(room1,room2),time).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(inroom(Room1, Room2)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1926).
axiom(holds_at(neg(inroom(Room1, Room2)), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1927
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1928).
% [room,object,time]
 % !HoldsAt(IN(room,object),time).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(in(Room, Object)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1928).
axiom(holds_at(neg(in(Room, Object)), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1929
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1930).
%; entailed:
%; HoldsAt(IN(Lisa,LivingRoom),5).
%; HoldsAt(IN(Box,Kitchen),5).
%; HoldsAt(INROOM(Newspaper,Kitchen),5).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1934
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1935).
% completion Happens
==> completion(happens).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1936
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1937).
% range time 0 5
==> range(time,0,5).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1937
% range offset 1 1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1937).
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter10/TwoScreens.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @phdthesis{Cassimatis:2002,
%;   author = "Nicholas L. Cassimatis",
%;   year = "2002",
%;   title = "Polyscheme: A Cognitive Architecture for Integrating Multiple Representation and Inference Schemes",
%;   address = "Cambridge, MA",
%;   school = "Program in Media Arts and Sciences, School of Architecture and Planning, Massachusetts Institute of Technology",
%; }
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1973
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1974).
% load foundations/Root.e
:- load_e('foundations/Root.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1974
% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1974).
:- load_e('foundations/EC.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1976
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1977).
% sort object
==> sort(object).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1977
% sort location
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1977).
==> sort(location).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1979
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1980).
% object O1, O2
==> t(object,o1).
==> t(object,o2).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1980
% location L1, L2, L3, L4, L5
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1980).
==> t(location,l1).
==> t(location,l2).
==> t(location,l3).
==> t(location,l4).
==> t(location,l5).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1982
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1983).
% predicate Adjacent(location,location)
predicate(adjacent(location,location)).
==> mpred_prop(adjacent(location,location),predicate).
==> meta_argtypes(adjacent(location,location)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1983
% predicate Equal(object,object)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1983).
predicate(equal(object,object)).
==> mpred_prop(equal(object,object),predicate).
==> meta_argtypes(equal(object,object)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1985
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1986).
% fluent At(object,location)
fluent(at(object,location)).
==> mpred_prop(at(object,location),fluent).
==> meta_argtypes(at(object,location)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1986
% event Move(object,location,location)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1986).
event(move(object,location,location)).
==> mpred_prop(move(object,location,location),event).
==> meta_argtypes(move(object,location,location)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1988
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1989).
%; Sigma
% [object,location1,location2,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1991
% HoldsAt(At(object,location1),time) &
% Adjacent(location1,location2) ->
% Initiates(Move(object,location1,location2),At(object,location2),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1993
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1991).

 /*  [holds_at(at(Object, Location1), Time), adjacent(Location1, Location2)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(move(Object, Location1, Location2),
                    at(Object, Location2),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1991).
axiom(initiates(move(Object, Location1, Location2), at(Object, Location2), Time),
   
    [ holds_at(at(Object, Location1), Time),
      adjacent(Location1, Location2)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1995
% [object,location1,location2,time]
% HoldsAt(At(object,location1),time) &
% Adjacent(location1,location2) ->
% Terminates(Move(object,location1,location2),At(object,location1),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:1998
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1997).

 /*  [holds_at(at(Object, Location1), Time), adjacent(Location1, Location2)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(move(Object, Location1, Location2),
                     at(Object, Location1),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',1997).
axiom(terminates(move(Object, Location1, Location2), at(Object, Location1), Time),
   
    [ holds_at(at(Object, Location1), Time),
      adjacent(Location1, Location2)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2000
%; Psi
% [object,location1,location2,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2003
% HoldsAt(At(object,location1),time) &
% HoldsAt(At(object,location2),time) ->
% location1=location2.
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2005
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2003).

 /*  holds_at(at(Object, Location1), Time), holds_at(at(Object, Location2), Time) ->
       equals(Location1, Location2).
 */

 /*  not(holds_at(at(Object, Location1), Time)) :-
       holds_at(at(Object, Location2), Time),
       not(equals(Location1, Location2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2003).

 /*  [holds_at(at(Object, Location2), Time), not(equals(Location1, Location2))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(at(Object, Location1)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2003).
axiom(holds_at(neg(at(Object, Location1)), Time),
   
    [ holds_at(at(Object, Location2), Time),
      not(equals(Location1, Location2))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2003).

 /*  not(holds_at(at(Object, Location2), Time)) :-
       holds_at(at(Object, Location1), Time),
       not(equals(Location1, Location2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2003).

 /*  [holds_at(at(Object, Location1), Time), not(equals(Location1, Location2))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(at(Object, Location2)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2003).
axiom(holds_at(neg(at(Object, Location2)), Time),
   
    [ holds_at(at(Object, Location1), Time),
      not(equals(Location2, Location1))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2007
% [object,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2008
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2009).
% {location} % HoldsAt(At(object,location),time).

 /*  exists([Location],
    holds_at(at(Object,Location),Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2009).

 /*  holds_at(at(Object, Location), Time) :-
       some(Location, '$kolem_Fn_394'(Object, Time)).
 */

 /*  [some(Location, '$kolem_Fn_394'(Object, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(at(Object, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2009).
axiom(holds_at(at(Object, Location), Time),
    [some(Location, '$kolem_Fn_394'(Object, Time))]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2010
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2011).
% [object1,object2,location,time]
% HoldsAt(At(object1,location),time) &
% HoldsAt(At(object2,location),time) ->
% Equal(object1,object2).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2013
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2011).

 /*  holds_at(at(Object1, Location), Time), holds_at(at(Object2, Location), Time) ->
       equal(Object1, Object2).
 */

 /*  equal(Object1, Object2) :-
       holds_at(at(Object1, Location), Time),
       holds_at(at(Object2, Location), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2011).

 /*  [holds_at(at(Object1, Location), Time), holds_at(at(Object2, Location), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          equal(Object1, Object2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2011).
axiom(equal(Object1, Object2),
   
    [ holds_at(at(Object1, Location), Time),
      holds_at(at(Object2, Location), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2011).

 /*  not(holds_at(at(Object1, Location), Time)) :-
       holds_at(at(Object2, Location), Time),
       not(equal(Object1, Object2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2011).

 /*  [holds_at(at(Object2, Location), Time), not(equal(Object1, Object2))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(at(Object1, Location)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2011).
axiom(holds_at(neg(at(Object1, Location)), Time),
   
    [ holds_at(at(Object2, Location), Time),
      not(equal(Object1, Object2))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2011).

 /*  not(holds_at(at(Object2, Location), Time)) :-
       holds_at(at(Object1, Location), Time),
       not(equal(Object1, Object2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2011).

 /*  [holds_at(at(Object1, Location), Time), not(equal(Object1, Object2))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(at(Object2, Location)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2011).
axiom(holds_at(neg(at(Object2, Location)), Time),
   
    [ holds_at(at(Object1, Location), Time),
      not(equal(Object1, Object2))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2015
% [location1, location2]
% Adjacent(location1,location2) <->
% Adjacent(location2,location1).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2017

 /*  adjacent(Location1, Location2) <->
       adjacent(Location2, Location1).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2017).

 /*  [adjacent] <->
       [adjacent].
 */

 /*  adjacent(Location1, Location2) ->
       adjacent(Location2, Location1).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2017).

 /*  adjacent(Location2, Location1) ->
       adjacent(Location1, Location2).
 */


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2019
% [object1,object2]
% Equal(object1,object2) <->
% Equal(object2,object1).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2021

 /*  equal(Object1, Object2) <->
       equal(Object2, Object1).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2021).

 /*  [equal] <->
       [equal].
 */

 /*  equal(Object1, Object2) ->
       equal(Object2, Object1).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2021).

 /*  equal(Object2, Object1) ->
       equal(Object1, Object2).
 */


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2023
%; Gamma
% [location1,location2]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2026
% Adjacent(location1,location2) <->
% (location1=L1 & location2=L2) |
% (location1=L2 & location2=L1) |
% (location1=L2 & location2=L3) |
% (location1=L3 & location2=L2) |
% (location1=L3 & location2=L4) |
% (location1=L4 & location2=L3) |
% (location1=L4 & location2=L5) |
% (location1=L5 & location2=L4).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2034
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2026).

 /*  adjacent(Location1, Location2) <->
       (   equals(Location1, l1),
           equals(Location2, l2)
       ;   equals(Location1, l2),
           equals(Location2, l1)
       ;   equals(Location1, l2),
           equals(Location2, l3)
       ;   equals(Location1, l3),
           equals(Location2, l2)
       ;   equals(Location1, l3),
           equals(Location2, l4)
       ;   equals(Location1, l4),
           equals(Location2, l3)
       ;   equals(Location1, l4),
           equals(Location2, l5)
       ;   equals(Location1, l5),
           equals(Location2, l4)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2026).

 /*  [adjacent] <->
       
       [  (;),
         equals,
         l1,
         equals,
         l2,
          (;),
         equals,
         l2,
         equals,
         l1,
          (;),
         equals,
         l2,
         equals,
         l3,
          (;),
         equals,
         l3,
         equals,
         l2,
          (;),
         equals,
         l3,
         equals,
         l4,
          (;),
         equals,
         l4,
         equals,
         l3,
          (;),
         equals,
         l4,
         equals,
         l5,
         equals,
         l5,
         equals,
         l4
       ].
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2026).

 /*  adjacent(Location1, Location2) ->
       (   equals(Location1, l1),
           equals(Location2, l2)
       ;   equals(Location1, l2),
           equals(Location2, l1)
       ;   equals(Location1, l2),
           equals(Location2, l3)
       ;   equals(Location1, l3),
           equals(Location2, l2)
       ;   equals(Location1, l3),
           equals(Location2, l4)
       ;   equals(Location1, l4),
           equals(Location2, l3)
       ;   equals(Location1, l4),
           equals(Location2, l5)
       ;   equals(Location1, l5),
           equals(Location2, l4)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2026).

 /*  not(adjacent(Location1, Location2)) :-
       (   not(equals(Location1, l1))
       ;   not(equals(Location2, l2))
       ),
       (   not(equals(Location1, l2))
       ;   not(equals(Location2, l1))
       ),
       (   not(equals(Location1, l2))
       ;   not(equals(Location2, l3))
       ),
       (   not(equals(Location1, l3))
       ;   not(equals(Location2, l2))
       ),
       (   not(equals(Location1, l3))
       ;   not(equals(Location2, l4))
       ),
       (   not(equals(Location1, l4))
       ;   not(equals(Location2, l3))
       ),
       (   not(equals(Location1, l4))
       ;   not(equals(Location2, l5))
       ),
       (   not(equals(Location1, l5))
       ;   not(equals(Location2, l4))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2026).

 /*  [(not(equals(Location1, l1));not(equals(Location2, l2))),  (not(equals(Location1, l2));not(equals(Location2, l1))),  (not(equals(Location1, l2));not(equals(Location2, l3))),  (not(equals(Location1, l3));not(equals(Location2, l2))),  (not(equals(Location1, l3));not(equals(Location2, l4))),  (not(equals(Location1, l4));not(equals(Location2, l3))),  (not(equals(Location1, l4));not(equals(Location2, l5))),  (not(equals(Location1, l5));not(equals(Location2, l4)))] ->
       ta(Ta_Param,
          tvs1=[],
          tvs2=[],
          not(adjacent(Location1, Location2))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2026).
axiom(not(adjacent(Location1, Location2)),
   
    [  (not(equals(Location1, l1));not(equals(Location2, l2))),
       (not(equals(Location1, l2));not(equals(Location2, l1))),
       (not(equals(Location1, l2));not(equals(Location2, l3))),
       (not(equals(Location1, l3));not(equals(Location2, l2))),
       (not(equals(Location1, l3));not(equals(Location2, l4))),
       (not(equals(Location1, l4));not(equals(Location2, l3))),
       (not(equals(Location1, l4));not(equals(Location2, l5))),
       (not(equals(Location1, l5));not(equals(Location2, l4)))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2026).

 /*  equals(Location1, l1), equals(Location2, l2);equals(Location1, l2), equals(Location2, l1);equals(Location1, l2), equals(Location2, l3);equals(Location1, l3), equals(Location2, l2);equals(Location1, l3), equals(Location2, l4);equals(Location1, l4), equals(Location2, l3);equals(Location1, l4), equals(Location2, l5);equals(Location1, l5), equals(Location2, l4) ->
       adjacent(Location1, Location2).
 */

 /*  adjacent(Location1, Location2) :-
       (   equals(Location1, l1),
           equals(Location2, l2)
       ;   equals(Location1, l2),
           equals(Location2, l1)
       ;   equals(Location1, l2),
           equals(Location2, l3)
       ;   equals(Location1, l3),
           equals(Location2, l2)
       ;   equals(Location1, l3),
           equals(Location2, l4)
       ;   equals(Location1, l4),
           equals(Location2, l3)
       ;   equals(Location1, l4),
           equals(Location2, l5)
       ;   equals(Location1, l5),
           equals(Location2, l4)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2026).

 /*  [(equals(Location1, l1), equals(Location2, l2);equals(Location1, l2), equals(Location2, l1);equals(Location1, l2), equals(Location2, l3);equals(Location1, l3), equals(Location2, l2);equals(Location1, l3), equals(Location2, l4);equals(Location1, l4), equals(Location2, l3);equals(Location1, l4), equals(Location2, l5);equals(Location1, l5), equals(Location2, l4))] ->
       ta(Ta_Param3,
          tvs1=[],
          tvs2=[],
          adjacent(Location1, Location2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2026).
axiom(adjacent(Location1, Location2),
   
    [  (equals(Location1, l1), equals(Location2, l2);equals(Location1, l2), equals(Location2, l1);equals(Location1, l2), equals(Location2, l3);equals(Location1, l3), equals(Location2, l2);equals(Location1, l3), equals(Location2, l4);equals(Location1, l4), equals(Location2, l3);equals(Location1, l4), equals(Location2, l5);equals(Location1, l5), equals(Location2, l4))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2036
% HoldsAt(At(O1,L1),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2036).

 /*  [] ->
       ta(Ta_Param, tvs1=[start], tvs2=[start], holds_at(at(o1, l1), start)).
 */
axiom(holds_at(at(o1, l1), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2037
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2038).
% [object]
 % !HoldsAt(At(object,L5),0).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(at(Object, l5)), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2038).
axiom(holds_at(neg(at(Object, l5)), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2039
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2040).
% HoldsAt(At(O2,L5),4).

 /*  [b(start, Start4), toffset(start, 4, Start4), ignore(start+4==Start4)] ->
       ta(Ta_Param,
          tvs1=[start+4],
          tvs2=[Start4, start],
          holds_at(at(o2, l5), Start4)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2040).
axiom(holds_at(at(o2, l5), Start4),
    [b(start, Start4), toffset(start, 4, Start4)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2040
% [object]
 % !HoldsAt(At(object,L1),4).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2040).

 /*  [b(start, Start4), toffset(start, 4, Start4), ignore(start+4==Start4)] ->
       ta(Ta_Param,
          tvs1=[start+4],
          tvs2=[Start4, start],
          holds_at(neg(at(Object, l1)), Start4)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2040).
axiom(holds_at(neg(at(Object, l1)), Start4),
    [b(start, Start4), toffset(start, 4, Start4)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2042
% [object,time]
 % !HoldsAt(At(object,L3),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2042).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(at(Object, l3)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2042).
axiom(holds_at(neg(at(Object, l3)), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2044
%; ADDED:
% [object,location1,location2,time]
% Happens(Move(object,location1,location2),time) ->
% HoldsAt(At(object,location1),time) &
% Adjacent(location1,location2).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2048
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2046).

 /*  happens(move(Object, Location1, Location2), Time) ->
       holds_at(at(Object, Location1), Time),
       adjacent(Location1, Location2).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2046).

 /*  not(happens(move(Object, Location1, Location2), Time)) :-
       (   not(holds_at(at(Object, Location1), Time))
       ;   not(adjacent(Location1, Location2))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2046).

 /*  [(holds_at(neg(at(Object, Location1)), Time);not(adjacent(Location1, Location2)))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(move(Object, Location1, Location2),
                      Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2046).
axiom(not(happens(move(Object, Location1, Location2), Time)),
   
    [  (holds_at(neg(at(Object, Location1)), Time);not(adjacent(Location1, Location2)))
    ]).

 /*  holds_at(at(Object, Location1), Time) :-
       happens(move(Object, Location1, Location2), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2046).

 /*  [holds_at(metreqs(move(Object, Location1, Location2)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(move(Object, Location1, Location2), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2046).
axiom(requires(move(Object, Location1, Location2), Time),
   
    [ holds_at(metreqs(move(Object, Location1, Location2)),
               Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2046).

 /*  [holds_at(at(Object, Location1), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(move(Object, Location1, Location2)),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2046).
axiom(holds_at(metreqs(move(Object, Location1, Location2)), Time),
    [holds_at(at(Object, Location1), Time)]).

 /*  adjacent(Location1, Location2) :-
       happens(move(Object, Location1, Location2), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2046).

 /*  [holds_at(metreqs(move(Object, Location1, Location2)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(move(Object, Location1, Location2), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2046).
axiom(requires(move(Object, Location1, Location2), Time),
   
    [ holds_at(metreqs(move(Object, Location1, Location2)),
               Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2046).

 /*  [adjacent(Location1, Location2)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(move(Object, Location1, Location2)),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2046).
axiom(holds_at(metreqs(move(Object, Location1, Location2)), Time),
    [adjacent(Location1, Location2)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2050
% [object1,object2,location1,location2,time]
% Equal(object1,object2) &
% Happens(Move(object1,location1,location2),time) ->
% Happens(Move(object2,location1,location2),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2053
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2052).

 /*  equal(Object1, Object2), happens(move(Object1, Location1, Location2), Time) ->
       happens(move(Object2, Location1, Location2), Time).
 */

 /*  happens(move(Object2, Location1, Location2), Time) :-
       equal(Object1, Object2),
       happens(move(Object1, Location1, Location2), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2052).

 /*  [equal(Object1, Object2), happens(move(Object1, Location1, Location2), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(move(Object2, Location1, Location2), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2052).
axiom(happens(move(Object2, Location1, Location2), Time),
   
    [ equal(Object1, Object2),
      happens(move(Object1, Location1, Location2), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2052).

 /*  not(equal(Object1, Object2)) :-
       happens(move(Object1, Location1, Location2), Time),
       not(happens(move(Object2, Location1, Location2),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2052).

 /*  [happens(move(Object1, Location1, Location2), Time), not(happens(move(Object2, Location1, Location2), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(equal(Object1, Object2))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2052).
axiom(not(equal(Object1, Object2)),
   
    [ happens(move(Object1, Location1, Location2), Time),
      not(happens(move(Object2, Location1, Location2),
                  Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2052).

 /*  not(happens(move(Object1, Location1, Location2), Time)) :-
       equal(Object1, Object2),
       not(happens(move(Object2, Location1, Location2),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2052).

 /*  [equal(Object1, Object2), not(happens(move(Object2, Location1, Location2), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(move(Object1, Location1, Location2),
                      Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2052).
axiom(not(happens(move(Object1, Location1, Location2), Time)),
   
    [ equal(Object1, Object2),
      not(happens(move(Object2, Location1, Location2),
                  Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2055
%; entailed: !Equal(O1,O2).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2057
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2058).
% range time 0 4
==> range(time,0,4).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2058
% range offset 1 1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2058).
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter10/OneScreen.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @phdthesis{Cassimatis:2002,
%;   author = "Nicholas L. Cassimatis",
%;   year = "2002",
%;   title = "Polyscheme: A Cognitive Architecture for Integrating Multiple Representation and Inference Schemes",
%;   address = "Cambridge, MA",
%;   school = "Program in Media Arts and Sciences, School of Architecture and Planning, Massachusetts Institute of Technology",
%; }
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2094
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2095).
% load foundations/Root.e
:- load_e('foundations/Root.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2095
% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2095).
:- load_e('foundations/EC.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2097
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2098).
% sort object
==> sort(object).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2098
% sort location
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2098).
==> sort(location).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2100
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2101).
% object O1, O2
==> t(object,o1).
==> t(object,o2).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2101
% location L1, L2, L3
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2101).
==> t(location,l1).
==> t(location,l2).
==> t(location,l3).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2103
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2104).
% predicate Adjacent(location,location)
predicate(adjacent(location,location)).
==> mpred_prop(adjacent(location,location),predicate).
==> meta_argtypes(adjacent(location,location)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2104
% predicate Equal(object,object)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2104).
predicate(equal(object,object)).
==> mpred_prop(equal(object,object),predicate).
==> meta_argtypes(equal(object,object)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2106
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2107).
% fluent At(object,location)
fluent(at(object,location)).
==> mpred_prop(at(object,location),fluent).
==> meta_argtypes(at(object,location)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2107
% event Move(object,location,location)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2107).
event(move(object,location,location)).
==> mpred_prop(move(object,location,location),event).
==> meta_argtypes(move(object,location,location)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2109
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2110).
%; Sigma
% [object,location1,location2,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2112
% HoldsAt(At(object,location1),time) &
% Adjacent(location1,location2) ->
% Initiates(Move(object,location1,location2),At(object,location2),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2114
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2112).

 /*  [holds_at(at(Object, Location1), Time), adjacent(Location1, Location2)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(move(Object, Location1, Location2),
                    at(Object, Location2),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2112).
axiom(initiates(move(Object, Location1, Location2), at(Object, Location2), Time),
   
    [ holds_at(at(Object, Location1), Time),
      adjacent(Location1, Location2)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2116
% [object,location1,location2,time]
% HoldsAt(At(object,location1),time) &
% Adjacent(location1,location2) ->
% Terminates(Move(object,location1,location2),At(object,location1),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2119
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2118).

 /*  [holds_at(at(Object, Location1), Time), adjacent(Location1, Location2)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(move(Object, Location1, Location2),
                     at(Object, Location1),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2118).
axiom(terminates(move(Object, Location1, Location2), at(Object, Location1), Time),
   
    [ holds_at(at(Object, Location1), Time),
      adjacent(Location1, Location2)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2121
%; Psi
% [object,location1,location2,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2124
% HoldsAt(At(object,location1),time) &
% HoldsAt(At(object,location2),time) ->
% location1=location2.
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2126
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2124).

 /*  holds_at(at(Object, Location1), Time), holds_at(at(Object, Location2), Time) ->
       equals(Location1, Location2).
 */

 /*  not(holds_at(at(Object, Location1), Time)) :-
       holds_at(at(Object, Location2), Time),
       not(equals(Location1, Location2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2124).

 /*  [holds_at(at(Object, Location2), Time), not(equals(Location1, Location2))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(at(Object, Location1)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2124).
axiom(holds_at(neg(at(Object, Location1)), Time),
   
    [ holds_at(at(Object, Location2), Time),
      not(equals(Location1, Location2))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2124).

 /*  not(holds_at(at(Object, Location2), Time)) :-
       holds_at(at(Object, Location1), Time),
       not(equals(Location1, Location2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2124).

 /*  [holds_at(at(Object, Location1), Time), not(equals(Location1, Location2))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(at(Object, Location2)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2124).
axiom(holds_at(neg(at(Object, Location2)), Time),
   
    [ holds_at(at(Object, Location1), Time),
      not(equals(Location2, Location1))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2128
% [object,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2129
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2130).
% {location} % HoldsAt(At(object,location),time).

 /*  exists([Location],
    holds_at(at(Object,Location),Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2130).

 /*  holds_at(at(Object, Location), Time) :-
       some(Location, '$kolem_Fn_395'(Object, Time)).
 */

 /*  [some(Location, '$kolem_Fn_395'(Object, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(at(Object, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2130).
axiom(holds_at(at(Object, Location), Time),
    [some(Location, '$kolem_Fn_395'(Object, Time))]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2131
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2132).
% [object1,object2,location,time]
% HoldsAt(At(object1,location),time) &
% HoldsAt(At(object2,location),time) ->
% Equal(object1,object2).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2134
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2132).

 /*  holds_at(at(Object1, Location), Time), holds_at(at(Object2, Location), Time) ->
       equal(Object1, Object2).
 */

 /*  equal(Object1, Object2) :-
       holds_at(at(Object1, Location), Time),
       holds_at(at(Object2, Location), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2132).

 /*  [holds_at(at(Object1, Location), Time), holds_at(at(Object2, Location), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          equal(Object1, Object2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2132).
axiom(equal(Object1, Object2),
   
    [ holds_at(at(Object1, Location), Time),
      holds_at(at(Object2, Location), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2132).

 /*  not(holds_at(at(Object1, Location), Time)) :-
       holds_at(at(Object2, Location), Time),
       not(equal(Object1, Object2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2132).

 /*  [holds_at(at(Object2, Location), Time), not(equal(Object1, Object2))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(at(Object1, Location)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2132).
axiom(holds_at(neg(at(Object1, Location)), Time),
   
    [ holds_at(at(Object2, Location), Time),
      not(equal(Object1, Object2))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2132).

 /*  not(holds_at(at(Object2, Location), Time)) :-
       holds_at(at(Object1, Location), Time),
       not(equal(Object1, Object2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2132).

 /*  [holds_at(at(Object1, Location), Time), not(equal(Object1, Object2))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(at(Object2, Location)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2132).
axiom(holds_at(neg(at(Object2, Location)), Time),
   
    [ holds_at(at(Object1, Location), Time),
      not(equal(Object1, Object2))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2136
% [location1, location2]
% Adjacent(location1,location2) <->
% Adjacent(location2,location1).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2138

 /*  adjacent(Location1, Location2) <->
       adjacent(Location2, Location1).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2138).

 /*  [adjacent] <->
       [adjacent].
 */

 /*  adjacent(Location1, Location2) ->
       adjacent(Location2, Location1).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2138).

 /*  adjacent(Location2, Location1) ->
       adjacent(Location1, Location2).
 */


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2140
% [object1,object2]
% Equal(object1,object2) <->
% Equal(object2,object1).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2142

 /*  equal(Object1, Object2) <->
       equal(Object2, Object1).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2142).

 /*  [equal] <->
       [equal].
 */

 /*  equal(Object1, Object2) ->
       equal(Object2, Object1).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2142).

 /*  equal(Object2, Object1) ->
       equal(Object1, Object2).
 */


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2144
%; Gamma
% [location1,location2]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2147
% Adjacent(location1,location2) <->
% (location1=L1 & location2=L2) |
% (location1=L2 & location2=L1) |
% (location1=L2 & location2=L3) |
% (location1=L3 & location2=L2).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2151
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2147).

 /*  adjacent(Location1, Location2) <->
       (   equals(Location1, l1),
           equals(Location2, l2)
       ;   equals(Location1, l2),
           equals(Location2, l1)
       ;   equals(Location1, l2),
           equals(Location2, l3)
       ;   equals(Location1, l3),
           equals(Location2, l2)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2147).

 /*  [adjacent] <->
       
       [  (;),
         equals,
         l1,
         equals,
         l2,
          (;),
         equals,
         l2,
         equals,
         l1,
          (;),
         equals,
         l2,
         equals,
         l3,
         equals,
         l3,
         equals,
         l2
       ].
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2147).

 /*  adjacent(Location1, Location2) ->
       (   equals(Location1, l1),
           equals(Location2, l2)
       ;   equals(Location1, l2),
           equals(Location2, l1)
       ;   equals(Location1, l2),
           equals(Location2, l3)
       ;   equals(Location1, l3),
           equals(Location2, l2)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2147).

 /*  not(adjacent(Location1, Location2)) :-
       (   not(equals(Location1, l1))
       ;   not(equals(Location2, l2))
       ),
       (   not(equals(Location1, l2))
       ;   not(equals(Location2, l1))
       ),
       (   not(equals(Location1, l2))
       ;   not(equals(Location2, l3))
       ),
       (   not(equals(Location1, l3))
       ;   not(equals(Location2, l2))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2147).

 /*  [(not(equals(Location1, l1));not(equals(Location2, l2))),  (not(equals(Location1, l2));not(equals(Location2, l1))),  (not(equals(Location1, l2));not(equals(Location2, l3))),  (not(equals(Location1, l3));not(equals(Location2, l2)))] ->
       ta(Ta_Param,
          tvs1=[],
          tvs2=[],
          not(adjacent(Location1, Location2))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2147).
axiom(not(adjacent(Location1, Location2)),
   
    [  (not(equals(Location1, l1));not(equals(Location2, l2))),
       (not(equals(Location1, l2));not(equals(Location2, l1))),
       (not(equals(Location1, l2));not(equals(Location2, l3))),
       (not(equals(Location1, l3));not(equals(Location2, l2)))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2147).

 /*  equals(Location1, l1), equals(Location2, l2);equals(Location1, l2), equals(Location2, l1);equals(Location1, l2), equals(Location2, l3);equals(Location1, l3), equals(Location2, l2) ->
       adjacent(Location1, Location2).
 */

 /*  adjacent(Location1, Location2) :-
       (   equals(Location1, l1),
           equals(Location2, l2)
       ;   equals(Location1, l2),
           equals(Location2, l1)
       ;   equals(Location1, l2),
           equals(Location2, l3)
       ;   equals(Location1, l3),
           equals(Location2, l2)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2147).

 /*  [(equals(Location1, l1), equals(Location2, l2);equals(Location1, l2), equals(Location2, l1);equals(Location1, l2), equals(Location2, l3);equals(Location1, l3), equals(Location2, l2))] ->
       ta(Ta_Param3,
          tvs1=[],
          tvs2=[],
          adjacent(Location1, Location2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2147).
axiom(adjacent(Location1, Location2),
   
    [  (equals(Location1, l1), equals(Location2, l2);equals(Location1, l2), equals(Location2, l1);equals(Location1, l2), equals(Location2, l3);equals(Location1, l3), equals(Location2, l2))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2153
% HoldsAt(At(O1,L1),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2153).

 /*  [] ->
       ta(Ta_Param, tvs1=[start], tvs2=[start], holds_at(at(o1, l1), start)).
 */
axiom(holds_at(at(o1, l1), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2154
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2155).
% [object]
 % !HoldsAt(At(object,L3),0).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(at(Object, l3)), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2155).
axiom(holds_at(neg(at(Object, l3)), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2156
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2157).
% [object]
 % !HoldsAt(At(object,L1),1).

 /*  [b(start, Time), ignore(start+1==Time)] ->
       ta(Ta_Param,
          tvs1=[start+1],
          tvs2=[Time, start],
          holds_at(neg(at(Object, l1)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2157).
axiom(holds_at(neg(at(Object, l1)), Time),
    [b(start, Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2157
% [object]
 % !HoldsAt(At(object,L3),1).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2157).

 /*  [b(start, Time), ignore(start+1==Time)] ->
       ta(Ta_Param,
          tvs1=[start+1],
          tvs2=[Time, start],
          holds_at(neg(at(Object, l3)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2157).
axiom(holds_at(neg(at(Object, l3)), Time),
    [b(start, Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2159
% HoldsAt(At(O2,L3),2).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2159).

 /*  [b(start, Start2), toffset(start, 2, Start2), ignore(start+2==Start2)] ->
       ta(Ta_Param,
          tvs1=[start+2],
          tvs2=[Start2, start],
          holds_at(at(o2, l3), Start2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2159).
axiom(holds_at(at(o2, l3), Start2),
    [b(start, Start2), toffset(start, 2, Start2)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2160
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2161).
% [object]
 % !HoldsAt(At(object,L1),2).

 /*  [b(start, Start2), toffset(start, 2, Start2), ignore(start+2==Start2)] ->
       ta(Ta_Param,
          tvs1=[start+2],
          tvs2=[Start2, start],
          holds_at(neg(at(Object, l1)), Start2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2161).
axiom(holds_at(neg(at(Object, l1)), Start2),
    [b(start, Start2), toffset(start, 2, Start2)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2162
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2163).
%; ADDED:
% [object,location1,location2,time]
% Happens(Move(object,location1,location2),time) ->
% HoldsAt(At(object,location1),time) &
% Adjacent(location1,location2).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2166
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2165).

 /*  happens(move(Object, Location1, Location2), Time) ->
       holds_at(at(Object, Location1), Time),
       adjacent(Location1, Location2).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2165).

 /*  not(happens(move(Object, Location1, Location2), Time)) :-
       (   not(holds_at(at(Object, Location1), Time))
       ;   not(adjacent(Location1, Location2))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2165).

 /*  [(holds_at(neg(at(Object, Location1)), Time);not(adjacent(Location1, Location2)))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(move(Object, Location1, Location2),
                      Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2165).
axiom(not(happens(move(Object, Location1, Location2), Time)),
   
    [  (holds_at(neg(at(Object, Location1)), Time);not(adjacent(Location1, Location2)))
    ]).

 /*  holds_at(at(Object, Location1), Time) :-
       happens(move(Object, Location1, Location2), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2165).

 /*  [holds_at(metreqs(move(Object, Location1, Location2)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(move(Object, Location1, Location2), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2165).
axiom(requires(move(Object, Location1, Location2), Time),
   
    [ holds_at(metreqs(move(Object, Location1, Location2)),
               Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2165).

 /*  [holds_at(at(Object, Location1), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(move(Object, Location1, Location2)),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2165).
axiom(holds_at(metreqs(move(Object, Location1, Location2)), Time),
    [holds_at(at(Object, Location1), Time)]).

 /*  adjacent(Location1, Location2) :-
       happens(move(Object, Location1, Location2), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2165).

 /*  [holds_at(metreqs(move(Object, Location1, Location2)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(move(Object, Location1, Location2), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2165).
axiom(requires(move(Object, Location1, Location2), Time),
   
    [ holds_at(metreqs(move(Object, Location1, Location2)),
               Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2165).

 /*  [adjacent(Location1, Location2)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(move(Object, Location1, Location2)),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2165).
axiom(holds_at(metreqs(move(Object, Location1, Location2)), Time),
    [adjacent(Location1, Location2)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2168
% [object1,object2,location1,location2,time]
% Equal(object1,object2) &
% Happens(Move(object1,location1,location2),time) ->
% Happens(Move(object2,location1,location2),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2171
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2170).

 /*  equal(Object1, Object2), happens(move(Object1, Location1, Location2), Time) ->
       happens(move(Object2, Location1, Location2), Time).
 */

 /*  happens(move(Object2, Location1, Location2), Time) :-
       equal(Object1, Object2),
       happens(move(Object1, Location1, Location2), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2170).

 /*  [equal(Object1, Object2), happens(move(Object1, Location1, Location2), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(move(Object2, Location1, Location2), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2170).
axiom(happens(move(Object2, Location1, Location2), Time),
   
    [ equal(Object1, Object2),
      happens(move(Object1, Location1, Location2), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2170).

 /*  not(equal(Object1, Object2)) :-
       happens(move(Object1, Location1, Location2), Time),
       not(happens(move(Object2, Location1, Location2),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2170).

 /*  [happens(move(Object1, Location1, Location2), Time), not(happens(move(Object2, Location1, Location2), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(equal(Object1, Object2))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2170).
axiom(not(equal(Object1, Object2)),
   
    [ happens(move(Object1, Location1, Location2), Time),
      not(happens(move(Object2, Location1, Location2),
                  Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2170).

 /*  not(happens(move(Object1, Location1, Location2), Time)) :-
       equal(Object1, Object2),
       not(happens(move(Object2, Location1, Location2),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2170).

 /*  [equal(Object1, Object2), not(happens(move(Object2, Location1, Location2), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(move(Object1, Location1, Location2),
                      Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2170).
axiom(not(happens(move(Object1, Location1, Location2), Time)),
   
    [ equal(Object1, Object2),
      not(happens(move(Object2, Location1, Location2),
                  Time))
    ]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2173
% range time 0 2
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2173).
==> range(time,0,2).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2174
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2175).
% range offset 1 1
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter9/RunningAndDriving.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2202
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2203).
% load foundations/Root.e
:- load_e('foundations/Root.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2203
% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2203).
:- load_e('foundations/EC.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2205
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2206).
% sort agent
==> sort(agent).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2206
% sort location
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2206).
==> sort(location).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2208
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2209).
% agent James
==> t(agent,james).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2209
% location Bookstore
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2209).
==> t(location,bookstore).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2211
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2212).
% fluent Tired(agent)
fluent(tired(agent)).
==> mpred_prop(tired(agent),fluent).
==> meta_argtypes(tired(agent)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2213
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2214).
% event Go(agent,location)
event(go(agent,location)).
==> mpred_prop(go(agent,location),event).
==> meta_argtypes(go(agent,location)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2214
% event Run(agent,location)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2214).
event(run(agent,location)).
==> mpred_prop(run(agent,location),event).
==> meta_argtypes(run(agent,location)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2215
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2216).
% event Drive(agent,location)
event(drive(agent,location)).
==> mpred_prop(drive(agent,location),event).
==> meta_argtypes(drive(agent,location)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2217
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2218).
% [agent,location,time]
% Happens(Go(agent,location),time) ->
% Happens(Run(agent,location),time) | Happens(Drive(agent,location),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2219

 /*  happens(go(Agent, Location), Time) ->
       (   happens(run(Agent, Location), Time)
       ;   happens(drive(Agent, Location), Time)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2218).

 /*  happens(run(Agent, Location), Time) :-
       not(happens(drive(Agent, Location), Time)),
       happens(go(Agent, Location), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2218).

 /*  [not(happens(drive(Agent, Location), Time)), happens(go(Agent, Location), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(run(Agent, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2218).
axiom(happens(run(Agent, Location), Time),
   
    [ not(happens(drive(Agent, Location), Time)),
      happens(go(Agent, Location), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2218).

 /*  happens(drive(Agent, Location), Time) :-
       not(happens(run(Agent, Location), Time)),
       happens(go(Agent, Location), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2218).

 /*  [not(happens(run(Agent, Location), Time)), happens(go(Agent, Location), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(drive(Agent, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2218).
axiom(happens(drive(Agent, Location), Time),
   
    [ not(happens(run(Agent, Location), Time)),
      happens(go(Agent, Location), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2218).

 /*  not(happens(go(Agent, Location), Time)) :-
       not(happens(run(Agent, Location), Time)),
       not(happens(drive(Agent, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2218).

 /*  [not(happens(run(Agent, Location), Time)), not(happens(drive(Agent, Location), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(go(Agent, Location), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2218).
axiom(not(happens(go(Agent, Location), Time)),
   
    [ not(happens(run(Agent, Location), Time)),
      not(happens(drive(Agent, Location), Time))
    ]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2221
% xor Run, Drive
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2221).
==> xor([run,drive]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2223
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2224).
% [agent,location,time]
 % Initiates(Run(agent,location),Tired(agent),time).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(run(Agent, Location),
                    tired(Agent),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2224).
axiom(initiates(run(Agent, Location), tired(Agent), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2225
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2226).
% !HoldsAt(Tired(James),0).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(tired(james)), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2226).
axiom(holds_at(neg(tired(james)), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2226
% Happens(Go(James,Bookstore),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2226).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          happens(go(james, bookstore), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2226).
axiom(happens(go(james, bookstore), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2227
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2228).
% HoldsAt(Tired(James),1).

 /*  [b(start, Time), ignore(start+1==Time)] ->
       ta(Ta_Param,
          tvs1=[start+1],
          tvs2=[Time, start],
          holds_at(tired(james), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2228).
axiom(holds_at(tired(james), Time),
    [b(start, Time)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2229
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2230).
% range time 0 1
==> range(time,0,1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2230
% range offset 1 1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2230).
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter9/RouletteWheel.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2258
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2259).
% option modeldiff on
:- set_ec_option(modeldiff, on).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2260
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2261).
% load foundations/Root.e
:- load_e('foundations/Root.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2261
% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2261).
:- load_e('foundations/EC.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2263
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2264).
% sort dealer
==> sort(dealer).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2264
% sort wheel
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2264).
==> sort(wheel).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2265
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2266).
% sort value: integer
==> subsort(value,integer).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2267
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2268).
% wheel Wheel1
==> t(wheel,wheel1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2268
% dealer Dealer1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2268).
==> t(dealer,dealer1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2270
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2271).
% fluent WheelNumberDeterminer(wheel,value)
fluent(wheelNumberDeterminer(wheel,value)).
==> mpred_prop(wheelNumberDeterminer(wheel,value),fluent).
==> meta_argtypes(wheelNumberDeterminer(wheel,value)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2271
% fluent WheelNumber(wheel,value)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2271).
fluent(wheelNumber(wheel,value)).
==> mpred_prop(wheelNumber(wheel,value),fluent).
==> meta_argtypes(wheelNumber(wheel,value)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2272
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2273).
% noninertial WheelNumberDeterminer
==> noninertial(wheelNumberDeterminer).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2274
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2275).
% event Spin(dealer,wheel)
event(spin(dealer,wheel)).
==> mpred_prop(spin(dealer,wheel),event).
==> meta_argtypes(spin(dealer,wheel)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2275
% event Reset(dealer,wheel)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2275).
event(reset(dealer,wheel)).
==> mpred_prop(reset(dealer,wheel),event).
==> meta_argtypes(reset(dealer,wheel)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2277
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2278).
% [wheel,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2278
% {value}% HoldsAt(WheelNumberDeterminer(wheel,value),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2280).

 /*  exists([Value],
    holds_at(wheelNumberDeterminer(Wheel,Value),Time)).
 */

 /*  holds_at(wheelNumberDeterminer(Wheel, Value), Time) :-
       some(Value, '$kolem_Fn_396'(Wheel, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2280).

 /*  [some(Value, '$kolem_Fn_396'(Wheel, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(wheelNumberDeterminer(Wheel, Value), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2280).
axiom(holds_at(wheelNumberDeterminer(Wheel, Value), Time),
    [some(Value, '$kolem_Fn_396'(Wheel, Time))]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2281
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2282).
% [wheel,value1,value2,time]
% HoldsAt(WheelNumberDeterminer(wheel,value1),time) &
% HoldsAt(WheelNumberDeterminer(wheel,value2),time) ->
% value1=value2.
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2284
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2282).

 /*  holds_at(wheelNumberDeterminer(Wheel, Value1), Time), holds_at(wheelNumberDeterminer(Wheel, Value2), Time) ->
       equals(Value1, Value2).
 */

 /*  not(holds_at(wheelNumberDeterminer(Wheel, Value1), Time)) :-
       holds_at(wheelNumberDeterminer(Wheel, Value2), Time),
       not(equals(Value1, Value2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2282).

 /*  [holds_at(wheelNumberDeterminer(Wheel, Value2), Time), not(equals(Value1, Value2))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(wheelNumberDeterminer(Wheel, Value1)),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2282).
axiom(holds_at(neg(wheelNumberDeterminer(Wheel, Value1)), Time),
   
    [ holds_at(wheelNumberDeterminer(Wheel, Value2), Time),
      not(equals(Value1, Value2))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2282).

 /*  not(holds_at(wheelNumberDeterminer(Wheel, Value2), Time)) :-
       holds_at(wheelNumberDeterminer(Wheel, Value1), Time),
       not(equals(Value1, Value2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2282).

 /*  [holds_at(wheelNumberDeterminer(Wheel, Value1), Time), not(equals(Value1, Value2))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(wheelNumberDeterminer(Wheel, Value2)),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2282).
axiom(holds_at(neg(wheelNumberDeterminer(Wheel, Value2)), Time),
   
    [ holds_at(wheelNumberDeterminer(Wheel, Value1), Time),
      not(equals(Value2, Value1))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2286
% [dealer,wheel,value,time]
% HoldsAt(WheelNumberDeterminer(wheel,value),time) ->
% Initiates(Spin(dealer,wheel),WheelNumber(wheel,value),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2288

 /*  [holds_at(wheelNumberDeterminer(Wheel, Value), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(spin(Dealer, Wheel),
                    wheelNumber(Wheel, Value),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2288).
axiom(initiates(spin(Dealer, Wheel), wheelNumber(Wheel, Value), Time),
    [holds_at(wheelNumberDeterminer(Wheel, Value), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2290
% [dealer,wheel,value1,value2,time]
% HoldsAt(WheelNumber(wheel,value1),time) &
% HoldsAt(WheelNumberDeterminer(wheel,value2),time) &
% value1!=value2 ->
% Terminates(Spin(dealer,wheel),WheelNumber(wheel,value1),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2294
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2292).

 /*  [holds_at(wheelNumber(Wheel, Value1), Time), holds_at(wheelNumberDeterminer(Wheel, Value2), Time), diff(Value1, Value2)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(spin(Dealer, Wheel),
                     wheelNumber(Wheel, Value1),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2292).
axiom(terminates(spin(Dealer, Wheel), wheelNumber(Wheel, Value1), Time),
   
    [ holds_at(wheelNumber(Wheel, Value1), Time),
      holds_at(wheelNumberDeterminer(Wheel, Value2), Time),
      diff(Value1, Value2)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2296
% [dealer,wheel,value,time]
% Terminates(Reset(dealer,wheel),WheelNumber(wheel,value),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2298).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(reset(Dealer, Wheel),
                     wheelNumber(Wheel, Value),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2298).
axiom(terminates(reset(Dealer, Wheel), wheelNumber(Wheel, Value), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2299
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2300).
% [wheel,value1,value2,time]
% HoldsAt(WheelNumber(wheel,value1),time) &
% HoldsAt(WheelNumber(wheel,value2),time) ->
% value1=value2.
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2302
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2300).

 /*  holds_at(wheelNumber(Wheel, Value1), Time), holds_at(wheelNumber(Wheel, Value2), Time) ->
       equals(Value1, Value2).
 */

 /*  not(holds_at(wheelNumber(Wheel, Value1), Time)) :-
       holds_at(wheelNumber(Wheel, Value2), Time),
       not(equals(Value1, Value2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2300).

 /*  [holds_at(wheelNumber(Wheel, Value2), Time), not(equals(Value1, Value2))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(wheelNumber(Wheel, Value1)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2300).
axiom(holds_at(neg(wheelNumber(Wheel, Value1)), Time),
   
    [ holds_at(wheelNumber(Wheel, Value2), Time),
      not(equals(Value1, Value2))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2300).

 /*  not(holds_at(wheelNumber(Wheel, Value2), Time)) :-
       holds_at(wheelNumber(Wheel, Value1), Time),
       not(equals(Value1, Value2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2300).

 /*  [holds_at(wheelNumber(Wheel, Value1), Time), not(equals(Value1, Value2))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(wheelNumber(Wheel, Value2)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2300).
axiom(holds_at(neg(wheelNumber(Wheel, Value2)), Time),
   
    [ holds_at(wheelNumber(Wheel, Value1), Time),
      not(equals(Value2, Value1))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2304
% [value]
 % !HoldsAt(WheelNumber(Wheel1,value),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2304).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(wheelNumber(wheel1, Value)), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2304).
axiom(holds_at(neg(wheelNumber(wheel1, Value)), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2306
% Happens(Spin(Dealer1,Wheel1),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2306).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          happens(spin(dealer1, wheel1), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2306).
axiom(happens(spin(dealer1, wheel1), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2307
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2308).
%;Happens(Reset(Dealer1,Wheel1),1).
%; added to prune models


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2310
% HoldsAt(WheelNumberDeterminer(Wheel1, 1),1).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2310).

 /*  [b(start, Time), ignore(start+1==Time)] ->
       ta(Ta_Param,
          tvs1=[start+1],
          tvs2=[Time, start],
          holds_at(wheelNumberDeterminer(wheel1, 1), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2310).
axiom(holds_at(wheelNumberDeterminer(wheel1, 1), Time),
    [b(start, Time)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2312
% completion Happens
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2312).
==> completion(happens).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2314
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2315).
% range value 1 3
==> range(value,1,3).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2315
% range time 0 1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2315).
==> range(time,0,1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2316
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2317).
% range offset 1 1
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter14/NetBill1.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @inproceedings{SirbuTygar:1995,
%;   author = "Marvin A. Sirbu and J. D. Tygar",
%;   year = "1995",
%;   title = "Net\uppercase{B}ill: An \uppercase{I}nternet commerce system optimized for network delivered services",
%;   editor = "
%;   booktitle = "40th \uppercase{IEEE} \uppercase{C}omputer \uppercase{S}ociety \uppercase{I}nternational \uppercase{C}onference",
%;   pages = "20--25",
%;   publisher = "
%;   address = "
%; }
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2355
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2356).
% option modeldiff on
:- set_ec_option(modeldiff, on).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2357
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2358).
% load foundations/Root.e
:- load_e('foundations/Root.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2358
% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2358).
:- load_e('foundations/EC.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2360
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2361).
% sort agent
==> sort(agent).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2361
% agent MusicStore, Jen
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2361).
==> t(agent,musicStore).
==> t(agent,jen).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2363
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2364).
% sort product
==> sort(product).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2364
% product BritneyCD
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2364).
==> t(product,britneyCD).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2366
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2367).
% sort f
==> sort(f).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2367
% f PurchaseRequestedJenMusicStoreBritneyCD1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2367).
==> t(f,purchaseRequestedJenMusicStoreBritneyCD1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2368
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2369).
% f DeliveredMusicStoreJenBritneyCD
==> t(f,deliveredMusicStoreJenBritneyCD).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2369
% f EPOSentJenMusicStore1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2369).
==> t(f,ePOSentJenMusicStore1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2371
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2372).
% sort amount: integer
==> subsort(amount,integer).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2373
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2374).
% fluent C(agent,agent,f)
fluent(c(agent,agent,f)).
==> mpred_prop(c(agent,agent,f),fluent).
==> meta_argtypes(c(agent,agent,f)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2374
% fluent CC(agent,agent,f,f)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2374).
fluent(cc(agent,agent,f,f)).
==> mpred_prop(cc(agent,agent,f,f),fluent).
==> meta_argtypes(cc(agent,agent,f,f)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2376
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2377).
% event CreateC(agent,agent,f)
event(createC(agent,agent,f)).
==> mpred_prop(createC(agent,agent,f),event).
==> meta_argtypes(createC(agent,agent,f)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2377
% event CreateCC(agent,agent,f,f)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2377).
event(createCC(agent,agent,f,f)).
==> mpred_prop(createCC(agent,agent,f,f),event).
==> meta_argtypes(createCC(agent,agent,f,f)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2378
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2379).
% event DischargeC(agent,agent,f)
event(dischargeC(agent,agent,f)).
==> mpred_prop(dischargeC(agent,agent,f),event).
==> meta_argtypes(dischargeC(agent,agent,f)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2379
% event DischargeCC(agent,agent,f,f)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2379).
event(dischargeCC(agent,agent,f,f)).
==> mpred_prop(dischargeCC(agent,agent,f,f),event).
==> meta_argtypes(dischargeCC(agent,agent,f,f)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2381
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2382).
% fluent QuoteSent(agent,agent,product,amount)
fluent(quoteSent(agent,agent,product,amount)).
==> mpred_prop(quoteSent(agent,agent,product,amount),fluent).
==> meta_argtypes(quoteSent(agent,agent,product,amount)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2382
% fluent PurchaseRequested(agent,agent,product,amount)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2382).
fluent(purchaseRequested(agent,agent,product,amount)).
==> mpred_prop(purchaseRequested(agent,agent,product,amount),fluent).
==> meta_argtypes(purchaseRequested(agent,agent,product,amount)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2383
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2384).
% fluent Delivered(agent,agent,product)
fluent(delivered(agent,agent,product)).
==> mpred_prop(delivered(agent,agent,product),fluent).
==> meta_argtypes(delivered(agent,agent,product)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2384
% fluent EPOSent(agent,agent,amount)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2384).
fluent(ePOSent(agent,agent,amount)).
==> mpred_prop(ePOSent(agent,agent,amount),fluent).
==> meta_argtypes(ePOSent(agent,agent,amount)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2386
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2387).
% event SendQuote(agent,agent,product,amount)
event(sendQuote(agent,agent,product,amount)).
==> mpred_prop(sendQuote(agent,agent,product,amount),event).
==> meta_argtypes(sendQuote(agent,agent,product,amount)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2387
% event RequestPurchase(agent,agent,product,amount)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2387).
event(requestPurchase(agent,agent,product,amount)).
==> mpred_prop(requestPurchase(agent,agent,product,amount),event).
==> meta_argtypes(requestPurchase(agent,agent,product,amount)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2388
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2389).
% event Deliver(agent,agent,product)
event(deliver(agent,agent,product)).
==> mpred_prop(deliver(agent,agent,product),event).
==> meta_argtypes(deliver(agent,agent,product)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2389
% event SendEPO(agent,agent,amount)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2389).
event(sendEPO(agent,agent,amount)).
==> mpred_prop(sendEPO(agent,agent,amount),event).
==> meta_argtypes(sendEPO(agent,agent,amount)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2391
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2392).
%; Sigma
% [agent1,agent2,f,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2394
% Initiates(CreateC(agent1,agent2,f),C(agent1,agent2,f),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2394).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(createC(Agent1, Agent2, F),
                    c(Agent1, Agent2, F),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2394).
axiom(initiates(createC(Agent1, Agent2, F), c(Agent1, Agent2, F), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2396
% [agent1,agent2,f1,f2,time]
% Initiates(CreateCC(agent1,agent2,f1,f2),CC(agent1,agent2,f1,f2),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2398).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(createCC(Agent1, Agent2, F1, F2),
                    cc(Agent1, Agent2, F1, F2),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2398).
axiom(initiates(createCC(Agent1, Agent2, F1, F2), cc(Agent1, Agent2, F1, F2), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2399
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2400).
% [agent1,agent2,f,time]
% Terminates(DischargeC(agent1,agent2,f),C(agent1,agent2,f),time).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(dischargeC(Agent1, Agent2, F),
                     c(Agent1, Agent2, F),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2400).
axiom(terminates(dischargeC(Agent1, Agent2, F), c(Agent1, Agent2, F), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2402
% [agent1,agent2,f1,f2,time]
% Terminates(DischargeCC(agent1,agent2,f1,f2),CC(agent1,agent2,f1,f2),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2404).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(dischargeCC(Agent1, Agent2, F1, F2),
                     cc(Agent1, Agent2, F1, F2),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2404).
axiom(terminates(dischargeCC(Agent1, Agent2, F1, F2), cc(Agent1, Agent2, F1, F2), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2405
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2406).
% [agent1,agent2,product,amount,time]
% Initiates(SendQuote(agent1,agent2,product,amount),
%           QuoteSent(agent1,agent2,product,amount),
%           time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2408
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2406).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(sendQuote(Agent1,
                              Agent2,
                              Product,
                              Amount),
                    quoteSent(Agent1,
                              Agent2,
                              Product,
                              Amount),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2406).
axiom(initiates(sendQuote(Agent1, Agent2, Product, Amount), quoteSent(Agent1, Agent2, Product, Amount), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2410
% [agent1,agent2,product,amount,time]
% Initiates(RequestPurchase(agent1,agent2,product,amount),
%           PurchaseRequested(agent1,agent2,product,amount),
%           time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2413
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2412).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(requestPurchase(Agent1,
                                    Agent2,
                                    Product,
                                    Amount),
                    purchaseRequested(Agent1,
                                      Agent2,
                                      Product,
                                      Amount),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2412).
axiom(initiates(requestPurchase(Agent1, Agent2, Product, Amount), purchaseRequested(Agent1, Agent2, Product, Amount), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2415
% [agent1,agent2,product,time]
% Initiates(Deliver(agent1,agent2,product),
%           Delivered(agent1,agent2,product),
%           time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2418
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2417).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(deliver(Agent1, Agent2, Product),
                    delivered(Agent1, Agent2, Product),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2417).
axiom(initiates(deliver(Agent1, Agent2, Product), delivered(Agent1, Agent2, Product), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2420
% [agent1,agent2,amount,time]
% Initiates(SendEPO(agent1,agent2,amount),
%           EPOSent(agent1,agent2,amount),
%           time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2423
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2422).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(sendEPO(Agent1, Agent2, Amount),
                    ePOSent(Agent1, Agent2, Amount),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2422).
axiom(initiates(sendEPO(Agent1, Agent2, Amount), ePOSent(Agent1, Agent2, Amount), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2425
% [agent1,agent2,product,amount,f1,f2,time]
% agent1=% MusicStore &
% agent2=Jen &
% product=BritneyCD &
% amount=1 &
% f1=PurchaseRequestedJenMusicStoreBritneyCD1 &
% f2=DeliveredMusicStoreJenBritneyCD ->
% Initiates(SendQuote(agent1,agent2,product,amount),
%           CC(agent1,agent2,f1,f2),
%           time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2434
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2427).

 /*  [equals(Agent1, musicStore), equals(Agent2, jen), equals(Product, britneyCD), equals(Amount, 1), equals(F1, purchaseRequestedJenMusicStoreBritneyCD1), equals(F2, deliveredMusicStoreJenBritneyCD)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(sendQuote(Agent1,
                              Agent2,
                              Product,
                              Amount),
                    cc(Agent1, Agent2, F1, F2),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2427).
axiom(initiates(sendQuote(Agent1, Agent2, Product, Amount), cc(Agent1, Agent2, F1, F2), Time),
   
    [ equals(Agent1, musicStore),
      equals(Agent2, jen),
      equals(Product, britneyCD),
      equals(Amount, 1),
      equals(F1, purchaseRequestedJenMusicStoreBritneyCD1),
      equals(F2, deliveredMusicStoreJenBritneyCD)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2436
% [agent1,agent2,product,amount,f1,f2,time]
% agent1=% Jen &
% agent2=MusicStore &
% product=BritneyCD &
% amount=1 &
% f1=DeliveredMusicStoreJenBritneyCD &
% f2=EPOSentJenMusicStore1 &
% !HoldsAt(Delivered(agent2,agent1,product),time) ->
% Initiates(RequestPurchase(agent1,agent2,product,amount),
%           CC(agent1,agent2,f1,f2),
%           time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2446
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2438).

 /*  [equals(Agent1, jen), equals(Agent2, musicStore), equals(Product, britneyCD), equals(Amount, 1), equals(F1, deliveredMusicStoreJenBritneyCD), equals(F2, ePOSentJenMusicStore1), holds_at(neg(delivered(Agent2, Agent1, Product)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(requestPurchase(Agent1,
                                    Agent2,
                                    Product,
                                    Amount),
                    cc(Agent1, Agent2, F1, F2),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2438).
axiom(initiates(requestPurchase(Agent1, Agent2, Product, Amount), cc(Agent1, Agent2, F1, F2), Time),
   
    [ equals(Agent1, jen),
      equals(Agent2, musicStore),
      equals(Product, britneyCD),
      equals(Amount, 1),
      equals(F1, deliveredMusicStoreJenBritneyCD),
      equals(F2, ePOSentJenMusicStore1),
      holds_at(neg(delivered(Agent2, Agent1, Product)),
               Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2448
%; Delta

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2450
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2451).
% Delta: 
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2450
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2451).
% [time]
% HoldsAt(CC(MusicStore,Jen,PurchaseRequestedJenMusicStoreBritneyCD1,DeliveredMusicStoreJenBritneyCD),time) &
% HoldsAt(PurchaseRequested(Jen,MusicStore,BritneyCD,1),time) ->
% Happens(CreateC(MusicStore,Jen,DeliveredMusicStoreJenBritneyCD),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2453
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2451).

 /*  axiom_uses(delta) ->
       ( holds_at(cc(musicStore, jen, purchaseRequestedJenMusicStoreBritneyCD1, deliveredMusicStoreJenBritneyCD), Time), holds_at(purchaseRequested(jen, musicStore, britneyCD, 1), Time)->happens(createC(musicStore, jen, deliveredMusicStoreJenBritneyCD), Time)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2451).

 /*  happens(createC(musicStore, jen, deliveredMusicStoreJenBritneyCD), Time) :-
       ( holds_at(cc(musicStore,
                     jen,
                     purchaseRequestedJenMusicStoreBritneyCD1,
                     deliveredMusicStoreJenBritneyCD),
                  Time),
         holds_at(purchaseRequested(jen, musicStore, britneyCD, 1), Time)
       ),
       axiom_uses(delta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2451).

 /*  [holds_at(cc(musicStore, jen, purchaseRequestedJenMusicStoreBritneyCD1, deliveredMusicStoreJenBritneyCD), Time), holds_at(purchaseRequested(jen, musicStore, britneyCD, 1), Time), axiom_uses(delta, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(createC(musicStore, jen, deliveredMusicStoreJenBritneyCD),
                  Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2451).
axiom(happens(createC(musicStore, jen, deliveredMusicStoreJenBritneyCD), Time),
   
    [ holds_at(cc(musicStore,
                  jen,
                  purchaseRequestedJenMusicStoreBritneyCD1,
                  deliveredMusicStoreJenBritneyCD),
               Time),
      holds_at(purchaseRequested(jen, musicStore, britneyCD, 1), Time),
      axiom_uses(delta, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2451).

 /*  not(holds_at(cc(musicStore, jen, purchaseRequestedJenMusicStoreBritneyCD1, deliveredMusicStoreJenBritneyCD), Time)) :-
       holds_at(purchaseRequested(jen, musicStore, britneyCD, 1), Time),
       not(happens(createC(musicStore, jen, deliveredMusicStoreJenBritneyCD),
                   Time)),
       axiom_uses(delta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2451).

 /*  [holds_at(purchaseRequested(jen, musicStore, britneyCD, 1), Time), not(happens(createC(musicStore, jen, deliveredMusicStoreJenBritneyCD), Time)), axiom_uses(delta, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(cc(musicStore,
                          jen,
                          purchaseRequestedJenMusicStoreBritneyCD1,
                          deliveredMusicStoreJenBritneyCD)),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2451).
axiom(holds_at(neg(cc(musicStore, jen, purchaseRequestedJenMusicStoreBritneyCD1, deliveredMusicStoreJenBritneyCD)), Time),
   
    [ holds_at(purchaseRequested(jen, musicStore, britneyCD, 1), Time),
      not(happens(createC(musicStore, jen, deliveredMusicStoreJenBritneyCD),
                  Time)),
      axiom_uses(delta, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2451).

 /*  not(holds_at(purchaseRequested(jen, musicStore, britneyCD, 1), Time)) :-
       holds_at(cc(musicStore,
                   jen,
                   purchaseRequestedJenMusicStoreBritneyCD1,
                   deliveredMusicStoreJenBritneyCD),
                Time),
       not(happens(createC(musicStore, jen, deliveredMusicStoreJenBritneyCD),
                   Time)),
       axiom_uses(delta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2451).

 /*  [holds_at(cc(musicStore, jen, purchaseRequestedJenMusicStoreBritneyCD1, deliveredMusicStoreJenBritneyCD), Time), not(happens(createC(musicStore, jen, deliveredMusicStoreJenBritneyCD), Time)), axiom_uses(delta, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(purchaseRequested(jen, musicStore, britneyCD, 1)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2451).
axiom(holds_at(neg(purchaseRequested(jen, musicStore, britneyCD, 1)), Time),
   
    [ holds_at(cc(musicStore,
                  jen,
                  purchaseRequestedJenMusicStoreBritneyCD1,
                  deliveredMusicStoreJenBritneyCD),
               Time),
      not(happens(createC(musicStore, jen, deliveredMusicStoreJenBritneyCD),
                  Time)),
      axiom_uses(delta, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2451).

 /*  not(axiom_uses(delta)) :-
       not(happens(createC(musicStore, jen, deliveredMusicStoreJenBritneyCD),
                   Time)),
       holds_at(cc(musicStore,
                   jen,
                   purchaseRequestedJenMusicStoreBritneyCD1,
                   deliveredMusicStoreJenBritneyCD),
                Time),
       holds_at(purchaseRequested(jen, musicStore, britneyCD, 1), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2451).

 /*  fix_axiom_head(Time) ->
       [not(axiom_uses(delta)), ->, not(axiom_uses(delta, Time))].
 */

 /*  [not(happens(createC(musicStore, jen, deliveredMusicStoreJenBritneyCD), Time)), holds_at(cc(musicStore, jen, purchaseRequestedJenMusicStoreBritneyCD1, deliveredMusicStoreJenBritneyCD), Time), holds_at(purchaseRequested(jen, musicStore, britneyCD, 1), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(axiom_uses(delta, Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2451).
axiom(not(axiom_uses(delta, Time)),
   
    [ not(happens(createC(musicStore, jen, deliveredMusicStoreJenBritneyCD),
                  Time)),
      holds_at(cc(musicStore,
                  jen,
                  purchaseRequestedJenMusicStoreBritneyCD1,
                  deliveredMusicStoreJenBritneyCD),
               Time),
      holds_at(purchaseRequested(jen, musicStore, britneyCD, 1), Time)
    ]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2455
% Delta: 
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2455).
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2455
% [time]
% HoldsAt(CC(MusicStore,Jen,PurchaseRequestedJenMusicStoreBritneyCD1,DeliveredMusicStoreJenBritneyCD),time) &
% HoldsAt(PurchaseRequested(Jen, MusicStore, BritneyCD, 1),time) ->
% Happens(DischargeCC(MusicStore,Jen,PurchaseRequestedJenMusicStoreBritneyCD1,DeliveredMusicStoreJenBritneyCD),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2458
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2457).

 /*  axiom_uses(delta) ->
       ( holds_at(cc(musicStore, jen, purchaseRequestedJenMusicStoreBritneyCD1, deliveredMusicStoreJenBritneyCD), Time), holds_at(purchaseRequested(jen, musicStore, britneyCD, 1), Time)->happens(dischargeCC(musicStore, jen, purchaseRequestedJenMusicStoreBritneyCD1, deliveredMusicStoreJenBritneyCD), Time)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2457).

 /*  happens(dischargeCC(musicStore, jen, purchaseRequestedJenMusicStoreBritneyCD1, deliveredMusicStoreJenBritneyCD), Time) :-
       ( holds_at(cc(musicStore,
                     jen,
                     purchaseRequestedJenMusicStoreBritneyCD1,
                     deliveredMusicStoreJenBritneyCD),
                  Time),
         holds_at(purchaseRequested(jen, musicStore, britneyCD, 1), Time)
       ),
       axiom_uses(delta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2457).

 /*  [holds_at(cc(musicStore, jen, purchaseRequestedJenMusicStoreBritneyCD1, deliveredMusicStoreJenBritneyCD), Time), holds_at(purchaseRequested(jen, musicStore, britneyCD, 1), Time), axiom_uses(delta, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(dischargeCC(musicStore,
                              jen,
                              purchaseRequestedJenMusicStoreBritneyCD1,
                              deliveredMusicStoreJenBritneyCD),
                  Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2457).
axiom(happens(dischargeCC(musicStore, jen, purchaseRequestedJenMusicStoreBritneyCD1, deliveredMusicStoreJenBritneyCD), Time),
   
    [ holds_at(cc(musicStore,
                  jen,
                  purchaseRequestedJenMusicStoreBritneyCD1,
                  deliveredMusicStoreJenBritneyCD),
               Time),
      holds_at(purchaseRequested(jen, musicStore, britneyCD, 1), Time),
      axiom_uses(delta, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2457).

 /*  not(holds_at(cc(musicStore, jen, purchaseRequestedJenMusicStoreBritneyCD1, deliveredMusicStoreJenBritneyCD), Time)) :-
       holds_at(purchaseRequested(jen, musicStore, britneyCD, 1), Time),
       not(happens(dischargeCC(musicStore,
                               jen,
                               purchaseRequestedJenMusicStoreBritneyCD1,
                               deliveredMusicStoreJenBritneyCD),
                   Time)),
       axiom_uses(delta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2457).

 /*  [holds_at(purchaseRequested(jen, musicStore, britneyCD, 1), Time), not(happens(dischargeCC(musicStore, jen, purchaseRequestedJenMusicStoreBritneyCD1, deliveredMusicStoreJenBritneyCD), Time)), axiom_uses(delta, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(cc(musicStore,
                          jen,
                          purchaseRequestedJenMusicStoreBritneyCD1,
                          deliveredMusicStoreJenBritneyCD)),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2457).
axiom(holds_at(neg(cc(musicStore, jen, purchaseRequestedJenMusicStoreBritneyCD1, deliveredMusicStoreJenBritneyCD)), Time),
   
    [ holds_at(purchaseRequested(jen, musicStore, britneyCD, 1), Time),
      not(happens(dischargeCC(musicStore,
                              jen,
                              purchaseRequestedJenMusicStoreBritneyCD1,
                              deliveredMusicStoreJenBritneyCD),
                  Time)),
      axiom_uses(delta, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2457).

 /*  not(holds_at(purchaseRequested(jen, musicStore, britneyCD, 1), Time)) :-
       holds_at(cc(musicStore,
                   jen,
                   purchaseRequestedJenMusicStoreBritneyCD1,
                   deliveredMusicStoreJenBritneyCD),
                Time),
       not(happens(dischargeCC(musicStore,
                               jen,
                               purchaseRequestedJenMusicStoreBritneyCD1,
                               deliveredMusicStoreJenBritneyCD),
                   Time)),
       axiom_uses(delta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2457).

 /*  [holds_at(cc(musicStore, jen, purchaseRequestedJenMusicStoreBritneyCD1, deliveredMusicStoreJenBritneyCD), Time), not(happens(dischargeCC(musicStore, jen, purchaseRequestedJenMusicStoreBritneyCD1, deliveredMusicStoreJenBritneyCD), Time)), axiom_uses(delta, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(purchaseRequested(jen, musicStore, britneyCD, 1)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2457).
axiom(holds_at(neg(purchaseRequested(jen, musicStore, britneyCD, 1)), Time),
   
    [ holds_at(cc(musicStore,
                  jen,
                  purchaseRequestedJenMusicStoreBritneyCD1,
                  deliveredMusicStoreJenBritneyCD),
               Time),
      not(happens(dischargeCC(musicStore,
                              jen,
                              purchaseRequestedJenMusicStoreBritneyCD1,
                              deliveredMusicStoreJenBritneyCD),
                  Time)),
      axiom_uses(delta, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2457).

 /*  not(axiom_uses(delta)) :-
       not(happens(dischargeCC(musicStore,
                               jen,
                               purchaseRequestedJenMusicStoreBritneyCD1,
                               deliveredMusicStoreJenBritneyCD),
                   Time)),
       holds_at(cc(musicStore,
                   jen,
                   purchaseRequestedJenMusicStoreBritneyCD1,
                   deliveredMusicStoreJenBritneyCD),
                Time),
       holds_at(purchaseRequested(jen, musicStore, britneyCD, 1), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2457).

 /*  fix_axiom_head(Time) ->
       [not(axiom_uses(delta)), ->, not(axiom_uses(delta, Time))].
 */

 /*  [not(happens(dischargeCC(musicStore, jen, purchaseRequestedJenMusicStoreBritneyCD1, deliveredMusicStoreJenBritneyCD), Time)), holds_at(cc(musicStore, jen, purchaseRequestedJenMusicStoreBritneyCD1, deliveredMusicStoreJenBritneyCD), Time), holds_at(purchaseRequested(jen, musicStore, britneyCD, 1), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(axiom_uses(delta, Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2457).
axiom(not(axiom_uses(delta, Time)),
   
    [ not(happens(dischargeCC(musicStore,
                              jen,
                              purchaseRequestedJenMusicStoreBritneyCD1,
                              deliveredMusicStoreJenBritneyCD),
                  Time)),
      holds_at(cc(musicStore,
                  jen,
                  purchaseRequestedJenMusicStoreBritneyCD1,
                  deliveredMusicStoreJenBritneyCD),
               Time),
      holds_at(purchaseRequested(jen, musicStore, britneyCD, 1), Time)
    ]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2460
% Delta: 
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2460).
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2460
% [time]
% HoldsAt(CC(Jen, MusicStore, DeliveredMusicStoreJenBritneyCD, EPOSentJenMusicStore1),time) &
% HoldsAt(Delivered(MusicStore,Jen,BritneyCD),time) ->
% Happens(CreateC(Jen,MusicStore,EPOSentJenMusicStore1),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2463
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2462).

 /*  axiom_uses(delta) ->
       ( holds_at(cc(jen, musicStore, deliveredMusicStoreJenBritneyCD, ePOSentJenMusicStore1), Time), holds_at(delivered(musicStore, jen, britneyCD), Time)->happens(createC(jen, musicStore, ePOSentJenMusicStore1), Time)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2462).

 /*  happens(createC(jen, musicStore, ePOSentJenMusicStore1), Time) :-
       ( holds_at(cc(jen,
                     musicStore,
                     deliveredMusicStoreJenBritneyCD,
                     ePOSentJenMusicStore1),
                  Time),
         holds_at(delivered(musicStore, jen, britneyCD), Time)
       ),
       axiom_uses(delta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2462).

 /*  [holds_at(cc(jen, musicStore, deliveredMusicStoreJenBritneyCD, ePOSentJenMusicStore1), Time), holds_at(delivered(musicStore, jen, britneyCD), Time), axiom_uses(delta, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(createC(jen, musicStore, ePOSentJenMusicStore1), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2462).
axiom(happens(createC(jen, musicStore, ePOSentJenMusicStore1), Time),
   
    [ holds_at(cc(jen,
                  musicStore,
                  deliveredMusicStoreJenBritneyCD,
                  ePOSentJenMusicStore1),
               Time),
      holds_at(delivered(musicStore, jen, britneyCD), Time),
      axiom_uses(delta, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2462).

 /*  not(holds_at(cc(jen, musicStore, deliveredMusicStoreJenBritneyCD, ePOSentJenMusicStore1), Time)) :-
       holds_at(delivered(musicStore, jen, britneyCD), Time),
       not(happens(createC(jen, musicStore, ePOSentJenMusicStore1), Time)),
       axiom_uses(delta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2462).

 /*  [holds_at(delivered(musicStore, jen, britneyCD), Time), not(happens(createC(jen, musicStore, ePOSentJenMusicStore1), Time)), axiom_uses(delta, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(cc(jen,
                          musicStore,
                          deliveredMusicStoreJenBritneyCD,
                          ePOSentJenMusicStore1)),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2462).
axiom(holds_at(neg(cc(jen, musicStore, deliveredMusicStoreJenBritneyCD, ePOSentJenMusicStore1)), Time),
   
    [ holds_at(delivered(musicStore, jen, britneyCD), Time),
      not(happens(createC(jen, musicStore, ePOSentJenMusicStore1), Time)),
      axiom_uses(delta, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2462).

 /*  not(holds_at(delivered(musicStore, jen, britneyCD), Time)) :-
       holds_at(cc(jen,
                   musicStore,
                   deliveredMusicStoreJenBritneyCD,
                   ePOSentJenMusicStore1),
                Time),
       not(happens(createC(jen, musicStore, ePOSentJenMusicStore1), Time)),
       axiom_uses(delta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2462).

 /*  [holds_at(cc(jen, musicStore, deliveredMusicStoreJenBritneyCD, ePOSentJenMusicStore1), Time), not(happens(createC(jen, musicStore, ePOSentJenMusicStore1), Time)), axiom_uses(delta, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(delivered(musicStore, jen, britneyCD)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2462).
axiom(holds_at(neg(delivered(musicStore, jen, britneyCD)), Time),
   
    [ holds_at(cc(jen,
                  musicStore,
                  deliveredMusicStoreJenBritneyCD,
                  ePOSentJenMusicStore1),
               Time),
      not(happens(createC(jen, musicStore, ePOSentJenMusicStore1), Time)),
      axiom_uses(delta, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2462).

 /*  not(axiom_uses(delta)) :-
       not(happens(createC(jen, musicStore, ePOSentJenMusicStore1), Time)),
       holds_at(cc(jen,
                   musicStore,
                   deliveredMusicStoreJenBritneyCD,
                   ePOSentJenMusicStore1),
                Time),
       holds_at(delivered(musicStore, jen, britneyCD), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2462).

 /*  fix_axiom_head(Time) ->
       [not(axiom_uses(delta)), ->, not(axiom_uses(delta, Time))].
 */

 /*  [not(happens(createC(jen, musicStore, ePOSentJenMusicStore1), Time)), holds_at(cc(jen, musicStore, deliveredMusicStoreJenBritneyCD, ePOSentJenMusicStore1), Time), holds_at(delivered(musicStore, jen, britneyCD), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(axiom_uses(delta, Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2462).
axiom(not(axiom_uses(delta, Time)),
   
    [ not(happens(createC(jen, musicStore, ePOSentJenMusicStore1), Time)),
      holds_at(cc(jen,
                  musicStore,
                  deliveredMusicStoreJenBritneyCD,
                  ePOSentJenMusicStore1),
               Time),
      holds_at(delivered(musicStore, jen, britneyCD), Time)
    ]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2465
% Delta: 
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2465).
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2465
% [time]
% HoldsAt(CC(Jen, MusicStore, DeliveredMusicStoreJenBritneyCD, EPOSentJenMusicStore1),time) &
% HoldsAt(Delivered(MusicStore,Jen,BritneyCD),time) ->
% Happens(DischargeCC(Jen,MusicStore,DeliveredMusicStoreJenBritneyCD, EPOSentJenMusicStore1),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2468
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2467).

 /*  axiom_uses(delta) ->
       ( holds_at(cc(jen, musicStore, deliveredMusicStoreJenBritneyCD, ePOSentJenMusicStore1), Time), holds_at(delivered(musicStore, jen, britneyCD), Time)->happens(dischargeCC(jen, musicStore, deliveredMusicStoreJenBritneyCD, ePOSentJenMusicStore1), Time)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2467).

 /*  happens(dischargeCC(jen, musicStore, deliveredMusicStoreJenBritneyCD, ePOSentJenMusicStore1), Time) :-
       ( holds_at(cc(jen,
                     musicStore,
                     deliveredMusicStoreJenBritneyCD,
                     ePOSentJenMusicStore1),
                  Time),
         holds_at(delivered(musicStore, jen, britneyCD), Time)
       ),
       axiom_uses(delta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2467).

 /*  [holds_at(cc(jen, musicStore, deliveredMusicStoreJenBritneyCD, ePOSentJenMusicStore1), Time), holds_at(delivered(musicStore, jen, britneyCD), Time), axiom_uses(delta, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(dischargeCC(jen,
                              musicStore,
                              deliveredMusicStoreJenBritneyCD,
                              ePOSentJenMusicStore1),
                  Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2467).
axiom(happens(dischargeCC(jen, musicStore, deliveredMusicStoreJenBritneyCD, ePOSentJenMusicStore1), Time),
   
    [ holds_at(cc(jen,
                  musicStore,
                  deliveredMusicStoreJenBritneyCD,
                  ePOSentJenMusicStore1),
               Time),
      holds_at(delivered(musicStore, jen, britneyCD), Time),
      axiom_uses(delta, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2467).

 /*  not(holds_at(cc(jen, musicStore, deliveredMusicStoreJenBritneyCD, ePOSentJenMusicStore1), Time)) :-
       holds_at(delivered(musicStore, jen, britneyCD), Time),
       not(happens(dischargeCC(jen,
                               musicStore,
                               deliveredMusicStoreJenBritneyCD,
                               ePOSentJenMusicStore1),
                   Time)),
       axiom_uses(delta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2467).

 /*  [holds_at(delivered(musicStore, jen, britneyCD), Time), not(happens(dischargeCC(jen, musicStore, deliveredMusicStoreJenBritneyCD, ePOSentJenMusicStore1), Time)), axiom_uses(delta, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(cc(jen,
                          musicStore,
                          deliveredMusicStoreJenBritneyCD,
                          ePOSentJenMusicStore1)),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2467).
axiom(holds_at(neg(cc(jen, musicStore, deliveredMusicStoreJenBritneyCD, ePOSentJenMusicStore1)), Time),
   
    [ holds_at(delivered(musicStore, jen, britneyCD), Time),
      not(happens(dischargeCC(jen,
                              musicStore,
                              deliveredMusicStoreJenBritneyCD,
                              ePOSentJenMusicStore1),
                  Time)),
      axiom_uses(delta, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2467).

 /*  not(holds_at(delivered(musicStore, jen, britneyCD), Time)) :-
       holds_at(cc(jen,
                   musicStore,
                   deliveredMusicStoreJenBritneyCD,
                   ePOSentJenMusicStore1),
                Time),
       not(happens(dischargeCC(jen,
                               musicStore,
                               deliveredMusicStoreJenBritneyCD,
                               ePOSentJenMusicStore1),
                   Time)),
       axiom_uses(delta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2467).

 /*  [holds_at(cc(jen, musicStore, deliveredMusicStoreJenBritneyCD, ePOSentJenMusicStore1), Time), not(happens(dischargeCC(jen, musicStore, deliveredMusicStoreJenBritneyCD, ePOSentJenMusicStore1), Time)), axiom_uses(delta, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(delivered(musicStore, jen, britneyCD)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2467).
axiom(holds_at(neg(delivered(musicStore, jen, britneyCD)), Time),
   
    [ holds_at(cc(jen,
                  musicStore,
                  deliveredMusicStoreJenBritneyCD,
                  ePOSentJenMusicStore1),
               Time),
      not(happens(dischargeCC(jen,
                              musicStore,
                              deliveredMusicStoreJenBritneyCD,
                              ePOSentJenMusicStore1),
                  Time)),
      axiom_uses(delta, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2467).

 /*  not(axiom_uses(delta)) :-
       not(happens(dischargeCC(jen,
                               musicStore,
                               deliveredMusicStoreJenBritneyCD,
                               ePOSentJenMusicStore1),
                   Time)),
       holds_at(cc(jen,
                   musicStore,
                   deliveredMusicStoreJenBritneyCD,
                   ePOSentJenMusicStore1),
                Time),
       holds_at(delivered(musicStore, jen, britneyCD), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2467).

 /*  fix_axiom_head(Time) ->
       [not(axiom_uses(delta)), ->, not(axiom_uses(delta, Time))].
 */

 /*  [not(happens(dischargeCC(jen, musicStore, deliveredMusicStoreJenBritneyCD, ePOSentJenMusicStore1), Time)), holds_at(cc(jen, musicStore, deliveredMusicStoreJenBritneyCD, ePOSentJenMusicStore1), Time), holds_at(delivered(musicStore, jen, britneyCD), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(axiom_uses(delta, Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2467).
axiom(not(axiom_uses(delta, Time)),
   
    [ not(happens(dischargeCC(jen,
                              musicStore,
                              deliveredMusicStoreJenBritneyCD,
                              ePOSentJenMusicStore1),
                  Time)),
      holds_at(cc(jen,
                  musicStore,
                  deliveredMusicStoreJenBritneyCD,
                  ePOSentJenMusicStore1),
               Time),
      holds_at(delivered(musicStore, jen, britneyCD), Time)
    ]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2470
% Delta: 
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2470).
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2470
% [time]
% HoldsAt(C(MusicStore,Jen,DeliveredMusicStoreJenBritneyCD),time) &
% HoldsAt(Delivered(MusicStore,Jen,BritneyCD),time) ->
% Happens(DischargeC(MusicStore,Jen,DeliveredMusicStoreJenBritneyCD),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2473
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2472).

 /*  axiom_uses(delta) ->
       ( holds_at(c(musicStore, jen, deliveredMusicStoreJenBritneyCD), Time), holds_at(delivered(musicStore, jen, britneyCD), Time)->happens(dischargeC(musicStore, jen, deliveredMusicStoreJenBritneyCD), Time)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2472).

 /*  happens(dischargeC(musicStore, jen, deliveredMusicStoreJenBritneyCD), Time) :-
       ( holds_at(c(musicStore, jen, deliveredMusicStoreJenBritneyCD), Time),
         holds_at(delivered(musicStore, jen, britneyCD), Time)
       ),
       axiom_uses(delta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2472).

 /*  [holds_at(c(musicStore, jen, deliveredMusicStoreJenBritneyCD), Time), holds_at(delivered(musicStore, jen, britneyCD), Time), axiom_uses(delta, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(dischargeC(musicStore, jen, deliveredMusicStoreJenBritneyCD),
                  Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2472).
axiom(happens(dischargeC(musicStore, jen, deliveredMusicStoreJenBritneyCD), Time),
   
    [ holds_at(c(musicStore, jen, deliveredMusicStoreJenBritneyCD), Time),
      holds_at(delivered(musicStore, jen, britneyCD), Time),
      axiom_uses(delta, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2472).

 /*  not(holds_at(c(musicStore, jen, deliveredMusicStoreJenBritneyCD), Time)) :-
       holds_at(delivered(musicStore, jen, britneyCD), Time),
       not(happens(dischargeC(musicStore, jen, deliveredMusicStoreJenBritneyCD),
                   Time)),
       axiom_uses(delta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2472).

 /*  [holds_at(delivered(musicStore, jen, britneyCD), Time), not(happens(dischargeC(musicStore, jen, deliveredMusicStoreJenBritneyCD), Time)), axiom_uses(delta, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(c(musicStore, jen, deliveredMusicStoreJenBritneyCD)),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2472).
axiom(holds_at(neg(c(musicStore, jen, deliveredMusicStoreJenBritneyCD)), Time),
   
    [ holds_at(delivered(musicStore, jen, britneyCD), Time),
      not(happens(dischargeC(musicStore, jen, deliveredMusicStoreJenBritneyCD),
                  Time)),
      axiom_uses(delta, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2472).

 /*  not(holds_at(delivered(musicStore, jen, britneyCD), Time)) :-
       holds_at(c(musicStore, jen, deliveredMusicStoreJenBritneyCD), Time),
       not(happens(dischargeC(musicStore, jen, deliveredMusicStoreJenBritneyCD),
                   Time)),
       axiom_uses(delta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2472).

 /*  [holds_at(c(musicStore, jen, deliveredMusicStoreJenBritneyCD), Time), not(happens(dischargeC(musicStore, jen, deliveredMusicStoreJenBritneyCD), Time)), axiom_uses(delta, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(delivered(musicStore, jen, britneyCD)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2472).
axiom(holds_at(neg(delivered(musicStore, jen, britneyCD)), Time),
   
    [ holds_at(c(musicStore, jen, deliveredMusicStoreJenBritneyCD), Time),
      not(happens(dischargeC(musicStore, jen, deliveredMusicStoreJenBritneyCD),
                  Time)),
      axiom_uses(delta, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2472).

 /*  not(axiom_uses(delta)) :-
       not(happens(dischargeC(musicStore, jen, deliveredMusicStoreJenBritneyCD),
                   Time)),
       holds_at(c(musicStore, jen, deliveredMusicStoreJenBritneyCD), Time),
       holds_at(delivered(musicStore, jen, britneyCD), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2472).

 /*  fix_axiom_head(Time) ->
       [not(axiom_uses(delta)), ->, not(axiom_uses(delta, Time))].
 */

 /*  [not(happens(dischargeC(musicStore, jen, deliveredMusicStoreJenBritneyCD), Time)), holds_at(c(musicStore, jen, deliveredMusicStoreJenBritneyCD), Time), holds_at(delivered(musicStore, jen, britneyCD), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(axiom_uses(delta, Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2472).
axiom(not(axiom_uses(delta, Time)),
   
    [ not(happens(dischargeC(musicStore, jen, deliveredMusicStoreJenBritneyCD),
                  Time)),
      holds_at(c(musicStore, jen, deliveredMusicStoreJenBritneyCD), Time),
      holds_at(delivered(musicStore, jen, britneyCD), Time)
    ]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2475
% Delta: 
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2475).
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2475
% [time]
% HoldsAt(C(Jen,MusicStore,EPOSentJenMusicStore1),time) &
% HoldsAt(EPOSent(Jen,MusicStore,1),time) ->
% Happens(DischargeC(Jen,MusicStore,EPOSentJenMusicStore1),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2478
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2477).

 /*  axiom_uses(delta) ->
       ( holds_at(c(jen, musicStore, ePOSentJenMusicStore1), Time), holds_at(ePOSent(jen, musicStore, 1), Time)->happens(dischargeC(jen, musicStore, ePOSentJenMusicStore1), Time)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2477).

 /*  happens(dischargeC(jen, musicStore, ePOSentJenMusicStore1), Time) :-
       ( holds_at(c(jen, musicStore, ePOSentJenMusicStore1), Time),
         holds_at(ePOSent(jen, musicStore, 1), Time)
       ),
       axiom_uses(delta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2477).

 /*  [holds_at(c(jen, musicStore, ePOSentJenMusicStore1), Time), holds_at(ePOSent(jen, musicStore, 1), Time), axiom_uses(delta, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(dischargeC(jen, musicStore, ePOSentJenMusicStore1), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2477).
axiom(happens(dischargeC(jen, musicStore, ePOSentJenMusicStore1), Time),
   
    [ holds_at(c(jen, musicStore, ePOSentJenMusicStore1), Time),
      holds_at(ePOSent(jen, musicStore, 1), Time),
      axiom_uses(delta, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2477).

 /*  not(holds_at(c(jen, musicStore, ePOSentJenMusicStore1), Time)) :-
       holds_at(ePOSent(jen, musicStore, 1), Time),
       not(happens(dischargeC(jen, musicStore, ePOSentJenMusicStore1), Time)),
       axiom_uses(delta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2477).

 /*  [holds_at(ePOSent(jen, musicStore, 1), Time), not(happens(dischargeC(jen, musicStore, ePOSentJenMusicStore1), Time)), axiom_uses(delta, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(c(jen, musicStore, ePOSentJenMusicStore1)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2477).
axiom(holds_at(neg(c(jen, musicStore, ePOSentJenMusicStore1)), Time),
   
    [ holds_at(ePOSent(jen, musicStore, 1), Time),
      not(happens(dischargeC(jen, musicStore, ePOSentJenMusicStore1), Time)),
      axiom_uses(delta, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2477).

 /*  not(holds_at(ePOSent(jen, musicStore, 1), Time)) :-
       holds_at(c(jen, musicStore, ePOSentJenMusicStore1), Time),
       not(happens(dischargeC(jen, musicStore, ePOSentJenMusicStore1), Time)),
       axiom_uses(delta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2477).

 /*  [holds_at(c(jen, musicStore, ePOSentJenMusicStore1), Time), not(happens(dischargeC(jen, musicStore, ePOSentJenMusicStore1), Time)), axiom_uses(delta, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(ePOSent(jen, musicStore, 1)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2477).
axiom(holds_at(neg(ePOSent(jen, musicStore, 1)), Time),
   
    [ holds_at(c(jen, musicStore, ePOSentJenMusicStore1), Time),
      not(happens(dischargeC(jen, musicStore, ePOSentJenMusicStore1), Time)),
      axiom_uses(delta, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2477).

 /*  not(axiom_uses(delta)) :-
       not(happens(dischargeC(jen, musicStore, ePOSentJenMusicStore1), Time)),
       holds_at(c(jen, musicStore, ePOSentJenMusicStore1), Time),
       holds_at(ePOSent(jen, musicStore, 1), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2477).

 /*  fix_axiom_head(Time) ->
       [not(axiom_uses(delta)), ->, not(axiom_uses(delta, Time))].
 */

 /*  [not(happens(dischargeC(jen, musicStore, ePOSentJenMusicStore1), Time)), holds_at(c(jen, musicStore, ePOSentJenMusicStore1), Time), holds_at(ePOSent(jen, musicStore, 1), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(axiom_uses(delta, Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2477).
axiom(not(axiom_uses(delta, Time)),
   
    [ not(happens(dischargeC(jen, musicStore, ePOSentJenMusicStore1), Time)),
      holds_at(c(jen, musicStore, ePOSentJenMusicStore1), Time),
      holds_at(ePOSent(jen, musicStore, 1), Time)
    ]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2480
% Delta: 
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2480).
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2480
% Happens(SendQuote(MusicStore,Jen,BritneyCD,1),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2480).

 /*  [axiom_uses(delta, Axiom_uses_Ret)] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          happens(sendQuote(musicStore, jen, britneyCD, 1), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2480).
axiom(happens(sendQuote(musicStore, jen, britneyCD, 1), start),
    [axiom_uses(delta, Axiom_uses_Ret)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2481
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2482).
% Delta: 
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2481
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2482).
% Happens(RequestPurchase(Jen,MusicStore,BritneyCD,1),1).

 /*  [axiom_uses(delta, Axiom_uses_Ret), b(start, Maptime), ignore(start+1==Maptime)] ->
       ta(Ta_Param,
          tvs1=[start+1],
          tvs2=[Maptime, start],
          happens(requestPurchase(jen, musicStore, britneyCD, 1), Maptime)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2482).
axiom(happens(requestPurchase(jen, musicStore, britneyCD, 1), Maptime),
    [axiom_uses(delta, Axiom_uses_Ret), b(start, Maptime)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2482
% Delta: 
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2482).
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2482
% Happens(Deliver(MusicStore,Jen,BritneyCD),3).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2482).

 /*  [axiom_uses(delta, Axiom_uses_Ret), b(start, Start3), toffset(start, 3, Start3), ignore(start+3==Start3)] ->
       ta(Ta_Param,
          tvs1=[start+3],
          tvs2=[Start3, start],
          happens(deliver(musicStore, jen, britneyCD), Start3)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2482).
axiom(happens(deliver(musicStore, jen, britneyCD), Start3),
   
    [ axiom_uses(delta, Axiom_uses_Ret),
      b(start, Start3),
      toffset(start, 3, Start3)
    ]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2483
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2484).
% Delta: 
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2483
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2484).
% Happens(SendEPO(Jen,MusicStore,1),5).

 /*  [axiom_uses(delta, Axiom_uses_Ret), b(start, Start5), toffset(start, 5, Start5), ignore(start+5==Start5)] ->
       ta(Ta_Param,
          tvs1=[start+5],
          tvs2=[Start5, start],
          happens(sendEPO(jen, musicStore, 1), Start5)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2484).
axiom(happens(sendEPO(jen, musicStore, 1), Start5),
   
    [ axiom_uses(delta, Axiom_uses_Ret),
      b(start, Start5),
      toffset(start, 5, Start5)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2485
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2486).
%; Gamma
% [agent1,agent2,product,amount]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2488
% !HoldsAt(QuoteSent(agent1,agent2,product,amount),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2488).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(quoteSent(Agent1,
                                 Agent2,
                                 Product,
                                 Amount)),
                   start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2488).
axiom(holds_at(neg(quoteSent(Agent1, Agent2, Product, Amount)), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2490
% [agent1,agent2,product,amount]
% !HoldsAt(PurchaseRequested(agent1,agent2,product,amount),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2492).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(purchaseRequested(Agent1,
                                         Agent2,
                                         Product,
                                         Amount)),
                   start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2492).
axiom(holds_at(neg(purchaseRequested(Agent1, Agent2, Product, Amount)), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2493
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2494).
% [agent1,agent2,product]
% !HoldsAt(Delivered(agent1,agent2,product),0).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(delivered(Agent1, Agent2, Product)), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2494).
axiom(holds_at(neg(delivered(Agent1, Agent2, Product)), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2496
% [agent1,agent2,f]
% !HoldsAt(C(agent1,agent2,f),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2498).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(c(Agent1, Agent2, F)), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2498).
axiom(holds_at(neg(c(Agent1, Agent2, F)), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2499
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2500).
% [agent1,agent2,f1,f2]
% !HoldsAt(CC(agent1,agent2,f1,f2),0).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(cc(Agent1, Agent2, F1, F2)), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2500).
axiom(holds_at(neg(cc(Agent1, Agent2, F1, F2)), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2502
% [agent1,agent2,amount]
% !HoldsAt(EPOSent(agent1,agent2,amount),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2504).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(ePOSent(Agent1, Agent2, Amount)), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2504).
axiom(holds_at(neg(ePOSent(Agent1, Agent2, Amount)), start),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2505
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2506).
% completion Delta Happens
==> completion(delta).
==> completion(happens).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2507
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2508).
% range time 0 7
==> range(time,0,7).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2508
% range offset 1 1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2508).
==> range(offset,1,1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2509
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2510).
% range amount 1 1
==> range(amount,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter14/NetBill3.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @inproceedings{SirbuTygar:1995,
%;   author = "Marvin A. Sirbu and J. D. Tygar",
%;   year = "1995",
%;   title = "Net\uppercase{B}ill: An \uppercase{I}nternet commerce system optimized for network delivered services",
%;   editor = "
%;   booktitle = "40th \uppercase{IEEE} \uppercase{C}omputer \uppercase{S}ociety \uppercase{I}nternational \uppercase{C}onference",
%;   pages = "20--25",
%;   publisher = "
%;   address = "
%; }
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2548
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2549).
% option modeldiff on
:- set_ec_option(modeldiff, on).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2550
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2551).
% load foundations/Root.e
:- load_e('foundations/Root.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2551
% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2551).
:- load_e('foundations/EC.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2553
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2554).
% sort agent
==> sort(agent).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2554
% agent MusicStore, Jen
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2554).
==> t(agent,musicStore).
==> t(agent,jen).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2556
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2557).
% sort product
==> sort(product).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2557
% product BritneyCD
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2557).
==> t(product,britneyCD).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2559
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2560).
% sort f
==> sort(f).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2560
% f PurchaseRequestedJenMusicStoreBritneyCD1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2560).
==> t(f,purchaseRequestedJenMusicStoreBritneyCD1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2561
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2562).
% f DeliveredMusicStoreJenBritneyCD
==> t(f,deliveredMusicStoreJenBritneyCD).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2562
% f EPOSentJenMusicStore1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2562).
==> t(f,ePOSentJenMusicStore1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2564
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2565).
% sort amount: integer
==> subsort(amount,integer).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2566
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2567).
% fluent C(agent,agent,f)
fluent(c(agent,agent,f)).
==> mpred_prop(c(agent,agent,f),fluent).
==> meta_argtypes(c(agent,agent,f)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2567
% fluent CC(agent,agent,f,f)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2567).
fluent(cc(agent,agent,f,f)).
==> mpred_prop(cc(agent,agent,f,f),fluent).
==> meta_argtypes(cc(agent,agent,f,f)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2569
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2570).
% event CreateC(agent,agent,f)
event(createC(agent,agent,f)).
==> mpred_prop(createC(agent,agent,f),event).
==> meta_argtypes(createC(agent,agent,f)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2570
% event CreateCC(agent,agent,f,f)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2570).
event(createCC(agent,agent,f,f)).
==> mpred_prop(createCC(agent,agent,f,f),event).
==> meta_argtypes(createCC(agent,agent,f,f)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2571
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2572).
% event DischargeC(agent,agent,f)
event(dischargeC(agent,agent,f)).
==> mpred_prop(dischargeC(agent,agent,f),event).
==> meta_argtypes(dischargeC(agent,agent,f)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2572
% event DischargeCC(agent,agent,f,f)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2572).
event(dischargeCC(agent,agent,f,f)).
==> mpred_prop(dischargeCC(agent,agent,f,f),event).
==> meta_argtypes(dischargeCC(agent,agent,f,f)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2574
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2575).
% fluent QuoteSent(agent,agent,product,amount)
fluent(quoteSent(agent,agent,product,amount)).
==> mpred_prop(quoteSent(agent,agent,product,amount),fluent).
==> meta_argtypes(quoteSent(agent,agent,product,amount)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2575
% fluent PurchaseRequested(agent,agent,product,amount)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2575).
fluent(purchaseRequested(agent,agent,product,amount)).
==> mpred_prop(purchaseRequested(agent,agent,product,amount),fluent).
==> meta_argtypes(purchaseRequested(agent,agent,product,amount)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2576
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2577).
% fluent Delivered(agent,agent,product)
fluent(delivered(agent,agent,product)).
==> mpred_prop(delivered(agent,agent,product),fluent).
==> meta_argtypes(delivered(agent,agent,product)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2577
% fluent EPOSent(agent,agent,amount)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2577).
fluent(ePOSent(agent,agent,amount)).
==> mpred_prop(ePOSent(agent,agent,amount),fluent).
==> meta_argtypes(ePOSent(agent,agent,amount)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2579
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2580).
% event SendQuote(agent,agent,product,amount)
event(sendQuote(agent,agent,product,amount)).
==> mpred_prop(sendQuote(agent,agent,product,amount),event).
==> meta_argtypes(sendQuote(agent,agent,product,amount)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2580
% event RequestPurchase(agent,agent,product,amount)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2580).
event(requestPurchase(agent,agent,product,amount)).
==> mpred_prop(requestPurchase(agent,agent,product,amount),event).
==> meta_argtypes(requestPurchase(agent,agent,product,amount)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2581
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2582).
% event Deliver(agent,agent,product)
event(deliver(agent,agent,product)).
==> mpred_prop(deliver(agent,agent,product),event).
==> meta_argtypes(deliver(agent,agent,product)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2582
% event SendEPO(agent,agent,amount)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2582).
event(sendEPO(agent,agent,amount)).
==> mpred_prop(sendEPO(agent,agent,amount),event).
==> meta_argtypes(sendEPO(agent,agent,amount)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2584
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2585).
%; Sigma
% [agent1,agent2,f,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2587
% Initiates(CreateC(agent1,agent2,f),C(agent1,agent2,f),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2587).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(createC(Agent1, Agent2, F),
                    c(Agent1, Agent2, F),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2587).
axiom(initiates(createC(Agent1, Agent2, F), c(Agent1, Agent2, F), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2589
% [agent1,agent2,f1,f2,time]
% Initiates(CreateCC(agent1,agent2,f1,f2),CC(agent1,agent2,f1,f2),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2591).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(createCC(Agent1, Agent2, F1, F2),
                    cc(Agent1, Agent2, F1, F2),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2591).
axiom(initiates(createCC(Agent1, Agent2, F1, F2), cc(Agent1, Agent2, F1, F2), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2592
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2593).
% [agent1,agent2,f,time]
% Terminates(DischargeC(agent1,agent2,f),C(agent1,agent2,f),time).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(dischargeC(Agent1, Agent2, F),
                     c(Agent1, Agent2, F),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2593).
axiom(terminates(dischargeC(Agent1, Agent2, F), c(Agent1, Agent2, F), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2595
% [agent1,agent2,f1,f2,time]
% Terminates(DischargeCC(agent1,agent2,f1,f2),CC(agent1,agent2,f1,f2),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2597).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(dischargeCC(Agent1, Agent2, F1, F2),
                     cc(Agent1, Agent2, F1, F2),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2597).
axiom(terminates(dischargeCC(Agent1, Agent2, F1, F2), cc(Agent1, Agent2, F1, F2), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2598
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2599).
% [agent1,agent2,product,amount,time]
% Initiates(SendQuote(agent1,agent2,product,amount),
%           QuoteSent(agent1,agent2,product,amount),
%           time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2601
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2599).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(sendQuote(Agent1,
                              Agent2,
                              Product,
                              Amount),
                    quoteSent(Agent1,
                              Agent2,
                              Product,
                              Amount),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2599).
axiom(initiates(sendQuote(Agent1, Agent2, Product, Amount), quoteSent(Agent1, Agent2, Product, Amount), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2603
% [agent1,agent2,product,amount,time]
% Initiates(RequestPurchase(agent1,agent2,product,amount),
%           PurchaseRequested(agent1,agent2,product,amount),
%           time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2606
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2605).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(requestPurchase(Agent1,
                                    Agent2,
                                    Product,
                                    Amount),
                    purchaseRequested(Agent1,
                                      Agent2,
                                      Product,
                                      Amount),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2605).
axiom(initiates(requestPurchase(Agent1, Agent2, Product, Amount), purchaseRequested(Agent1, Agent2, Product, Amount), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2608
% [agent1,agent2,product,time]
% Initiates(Deliver(agent1,agent2,product),
%           Delivered(agent1,agent2,product),
%           time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2611
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2610).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(deliver(Agent1, Agent2, Product),
                    delivered(Agent1, Agent2, Product),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2610).
axiom(initiates(deliver(Agent1, Agent2, Product), delivered(Agent1, Agent2, Product), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2613
% [agent1,agent2,amount,time]
% Initiates(SendEPO(agent1,agent2,amount),
%           EPOSent(agent1,agent2,amount),
%           time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2616
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2615).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(sendEPO(Agent1, Agent2, Amount),
                    ePOSent(Agent1, Agent2, Amount),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2615).
axiom(initiates(sendEPO(Agent1, Agent2, Amount), ePOSent(Agent1, Agent2, Amount), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2618
% [agent1,agent2,product,amount,f1,f2,time]
% agent1=% MusicStore &
% agent2=Jen &
% product=BritneyCD &
% amount=1 &
% f1=PurchaseRequestedJenMusicStoreBritneyCD1 &
% f2=DeliveredMusicStoreJenBritneyCD ->
% Initiates(SendQuote(agent1,agent2,product,amount),
%           CC(agent1,agent2,f1,f2),
%           time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2627
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2620).

 /*  [equals(Agent1, musicStore), equals(Agent2, jen), equals(Product, britneyCD), equals(Amount, 1), equals(F1, purchaseRequestedJenMusicStoreBritneyCD1), equals(F2, deliveredMusicStoreJenBritneyCD)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(sendQuote(Agent1,
                              Agent2,
                              Product,
                              Amount),
                    cc(Agent1, Agent2, F1, F2),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2620).
axiom(initiates(sendQuote(Agent1, Agent2, Product, Amount), cc(Agent1, Agent2, F1, F2), Time),
   
    [ equals(Agent1, musicStore),
      equals(Agent2, jen),
      equals(Product, britneyCD),
      equals(Amount, 1),
      equals(F1, purchaseRequestedJenMusicStoreBritneyCD1),
      equals(F2, deliveredMusicStoreJenBritneyCD)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2629
% [agent1,agent2,product,amount,f1,f2,time]
% agent1=% Jen &
% agent2=MusicStore &
% product=BritneyCD &
% amount=1 &
% f1=DeliveredMusicStoreJenBritneyCD &
% f2=EPOSentJenMusicStore1 &
% !HoldsAt(Delivered(agent2,agent1,product),time) ->
% Initiates(RequestPurchase(agent1,agent2,product,amount),
%           CC(agent1,agent2,f1,f2),
%           time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2639
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2631).

 /*  [equals(Agent1, jen), equals(Agent2, musicStore), equals(Product, britneyCD), equals(Amount, 1), equals(F1, deliveredMusicStoreJenBritneyCD), equals(F2, ePOSentJenMusicStore1), holds_at(neg(delivered(Agent2, Agent1, Product)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(requestPurchase(Agent1,
                                    Agent2,
                                    Product,
                                    Amount),
                    cc(Agent1, Agent2, F1, F2),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2631).
axiom(initiates(requestPurchase(Agent1, Agent2, Product, Amount), cc(Agent1, Agent2, F1, F2), Time),
   
    [ equals(Agent1, jen),
      equals(Agent2, musicStore),
      equals(Product, britneyCD),
      equals(Amount, 1),
      equals(F1, deliveredMusicStoreJenBritneyCD),
      equals(F2, ePOSentJenMusicStore1),
      holds_at(neg(delivered(Agent2, Agent1, Product)),
               Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2641
%; Delta

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2643
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2644).
% Delta: 
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2643
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2644).
% [time]
% HoldsAt(CC(MusicStore,Jen,PurchaseRequestedJenMusicStoreBritneyCD1,DeliveredMusicStoreJenBritneyCD),time) &
% HoldsAt(PurchaseRequested(Jen,MusicStore,BritneyCD,1),time) ->
% Happens(CreateC(MusicStore,Jen,DeliveredMusicStoreJenBritneyCD),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2646
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2644).

 /*  axiom_uses(delta) ->
       ( holds_at(cc(musicStore, jen, purchaseRequestedJenMusicStoreBritneyCD1, deliveredMusicStoreJenBritneyCD), Time), holds_at(purchaseRequested(jen, musicStore, britneyCD, 1), Time)->happens(createC(musicStore, jen, deliveredMusicStoreJenBritneyCD), Time)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2644).

 /*  happens(createC(musicStore, jen, deliveredMusicStoreJenBritneyCD), Time) :-
       ( holds_at(cc(musicStore,
                     jen,
                     purchaseRequestedJenMusicStoreBritneyCD1,
                     deliveredMusicStoreJenBritneyCD),
                  Time),
         holds_at(purchaseRequested(jen, musicStore, britneyCD, 1), Time)
       ),
       axiom_uses(delta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2644).

 /*  [holds_at(cc(musicStore, jen, purchaseRequestedJenMusicStoreBritneyCD1, deliveredMusicStoreJenBritneyCD), Time), holds_at(purchaseRequested(jen, musicStore, britneyCD, 1), Time), axiom_uses(delta, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(createC(musicStore, jen, deliveredMusicStoreJenBritneyCD),
                  Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2644).
axiom(happens(createC(musicStore, jen, deliveredMusicStoreJenBritneyCD), Time),
   
    [ holds_at(cc(musicStore,
                  jen,
                  purchaseRequestedJenMusicStoreBritneyCD1,
                  deliveredMusicStoreJenBritneyCD),
               Time),
      holds_at(purchaseRequested(jen, musicStore, britneyCD, 1), Time),
      axiom_uses(delta, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2644).

 /*  not(holds_at(cc(musicStore, jen, purchaseRequestedJenMusicStoreBritneyCD1, deliveredMusicStoreJenBritneyCD), Time)) :-
       holds_at(purchaseRequested(jen, musicStore, britneyCD, 1), Time),
       not(happens(createC(musicStore, jen, deliveredMusicStoreJenBritneyCD),
                   Time)),
       axiom_uses(delta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2644).

 /*  [holds_at(purchaseRequested(jen, musicStore, britneyCD, 1), Time), not(happens(createC(musicStore, jen, deliveredMusicStoreJenBritneyCD), Time)), axiom_uses(delta, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(cc(musicStore,
                          jen,
                          purchaseRequestedJenMusicStoreBritneyCD1,
                          deliveredMusicStoreJenBritneyCD)),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2644).
axiom(holds_at(neg(cc(musicStore, jen, purchaseRequestedJenMusicStoreBritneyCD1, deliveredMusicStoreJenBritneyCD)), Time),
   
    [ holds_at(purchaseRequested(jen, musicStore, britneyCD, 1), Time),
      not(happens(createC(musicStore, jen, deliveredMusicStoreJenBritneyCD),
                  Time)),
      axiom_uses(delta, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2644).

 /*  not(holds_at(purchaseRequested(jen, musicStore, britneyCD, 1), Time)) :-
       holds_at(cc(musicStore,
                   jen,
                   purchaseRequestedJenMusicStoreBritneyCD1,
                   deliveredMusicStoreJenBritneyCD),
                Time),
       not(happens(createC(musicStore, jen, deliveredMusicStoreJenBritneyCD),
                   Time)),
       axiom_uses(delta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2644).

 /*  [holds_at(cc(musicStore, jen, purchaseRequestedJenMusicStoreBritneyCD1, deliveredMusicStoreJenBritneyCD), Time), not(happens(createC(musicStore, jen, deliveredMusicStoreJenBritneyCD), Time)), axiom_uses(delta, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(purchaseRequested(jen, musicStore, britneyCD, 1)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2644).
axiom(holds_at(neg(purchaseRequested(jen, musicStore, britneyCD, 1)), Time),
   
    [ holds_at(cc(musicStore,
                  jen,
                  purchaseRequestedJenMusicStoreBritneyCD1,
                  deliveredMusicStoreJenBritneyCD),
               Time),
      not(happens(createC(musicStore, jen, deliveredMusicStoreJenBritneyCD),
                  Time)),
      axiom_uses(delta, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2644).

 /*  not(axiom_uses(delta)) :-
       not(happens(createC(musicStore, jen, deliveredMusicStoreJenBritneyCD),
                   Time)),
       holds_at(cc(musicStore,
                   jen,
                   purchaseRequestedJenMusicStoreBritneyCD1,
                   deliveredMusicStoreJenBritneyCD),
                Time),
       holds_at(purchaseRequested(jen, musicStore, britneyCD, 1), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2644).

 /*  fix_axiom_head(Time) ->
       [not(axiom_uses(delta)), ->, not(axiom_uses(delta, Time))].
 */

 /*  [not(happens(createC(musicStore, jen, deliveredMusicStoreJenBritneyCD), Time)), holds_at(cc(musicStore, jen, purchaseRequestedJenMusicStoreBritneyCD1, deliveredMusicStoreJenBritneyCD), Time), holds_at(purchaseRequested(jen, musicStore, britneyCD, 1), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(axiom_uses(delta, Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2644).
axiom(not(axiom_uses(delta, Time)),
   
    [ not(happens(createC(musicStore, jen, deliveredMusicStoreJenBritneyCD),
                  Time)),
      holds_at(cc(musicStore,
                  jen,
                  purchaseRequestedJenMusicStoreBritneyCD1,
                  deliveredMusicStoreJenBritneyCD),
               Time),
      holds_at(purchaseRequested(jen, musicStore, britneyCD, 1), Time)
    ]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2648
% Delta: 
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2648).
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2648
% [time]
% HoldsAt(CC(MusicStore,Jen,PurchaseRequestedJenMusicStoreBritneyCD1,DeliveredMusicStoreJenBritneyCD),time) &
% HoldsAt(PurchaseRequested(Jen, MusicStore, BritneyCD, 1),time) ->
% Happens(DischargeCC(MusicStore,Jen,PurchaseRequestedJenMusicStoreBritneyCD1,DeliveredMusicStoreJenBritneyCD),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2651
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2650).

 /*  axiom_uses(delta) ->
       ( holds_at(cc(musicStore, jen, purchaseRequestedJenMusicStoreBritneyCD1, deliveredMusicStoreJenBritneyCD), Time), holds_at(purchaseRequested(jen, musicStore, britneyCD, 1), Time)->happens(dischargeCC(musicStore, jen, purchaseRequestedJenMusicStoreBritneyCD1, deliveredMusicStoreJenBritneyCD), Time)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2650).

 /*  happens(dischargeCC(musicStore, jen, purchaseRequestedJenMusicStoreBritneyCD1, deliveredMusicStoreJenBritneyCD), Time) :-
       ( holds_at(cc(musicStore,
                     jen,
                     purchaseRequestedJenMusicStoreBritneyCD1,
                     deliveredMusicStoreJenBritneyCD),
                  Time),
         holds_at(purchaseRequested(jen, musicStore, britneyCD, 1), Time)
       ),
       axiom_uses(delta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2650).

 /*  [holds_at(cc(musicStore, jen, purchaseRequestedJenMusicStoreBritneyCD1, deliveredMusicStoreJenBritneyCD), Time), holds_at(purchaseRequested(jen, musicStore, britneyCD, 1), Time), axiom_uses(delta, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(dischargeCC(musicStore,
                              jen,
                              purchaseRequestedJenMusicStoreBritneyCD1,
                              deliveredMusicStoreJenBritneyCD),
                  Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2650).
axiom(happens(dischargeCC(musicStore, jen, purchaseRequestedJenMusicStoreBritneyCD1, deliveredMusicStoreJenBritneyCD), Time),
   
    [ holds_at(cc(musicStore,
                  jen,
                  purchaseRequestedJenMusicStoreBritneyCD1,
                  deliveredMusicStoreJenBritneyCD),
               Time),
      holds_at(purchaseRequested(jen, musicStore, britneyCD, 1), Time),
      axiom_uses(delta, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2650).

 /*  not(holds_at(cc(musicStore, jen, purchaseRequestedJenMusicStoreBritneyCD1, deliveredMusicStoreJenBritneyCD), Time)) :-
       holds_at(purchaseRequested(jen, musicStore, britneyCD, 1), Time),
       not(happens(dischargeCC(musicStore,
                               jen,
                               purchaseRequestedJenMusicStoreBritneyCD1,
                               deliveredMusicStoreJenBritneyCD),
                   Time)),
       axiom_uses(delta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2650).

 /*  [holds_at(purchaseRequested(jen, musicStore, britneyCD, 1), Time), not(happens(dischargeCC(musicStore, jen, purchaseRequestedJenMusicStoreBritneyCD1, deliveredMusicStoreJenBritneyCD), Time)), axiom_uses(delta, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(cc(musicStore,
                          jen,
                          purchaseRequestedJenMusicStoreBritneyCD1,
                          deliveredMusicStoreJenBritneyCD)),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2650).
axiom(holds_at(neg(cc(musicStore, jen, purchaseRequestedJenMusicStoreBritneyCD1, deliveredMusicStoreJenBritneyCD)), Time),
   
    [ holds_at(purchaseRequested(jen, musicStore, britneyCD, 1), Time),
      not(happens(dischargeCC(musicStore,
                              jen,
                              purchaseRequestedJenMusicStoreBritneyCD1,
                              deliveredMusicStoreJenBritneyCD),
                  Time)),
      axiom_uses(delta, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2650).

 /*  not(holds_at(purchaseRequested(jen, musicStore, britneyCD, 1), Time)) :-
       holds_at(cc(musicStore,
                   jen,
                   purchaseRequestedJenMusicStoreBritneyCD1,
                   deliveredMusicStoreJenBritneyCD),
                Time),
       not(happens(dischargeCC(musicStore,
                               jen,
                               purchaseRequestedJenMusicStoreBritneyCD1,
                               deliveredMusicStoreJenBritneyCD),
                   Time)),
       axiom_uses(delta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2650).

 /*  [holds_at(cc(musicStore, jen, purchaseRequestedJenMusicStoreBritneyCD1, deliveredMusicStoreJenBritneyCD), Time), not(happens(dischargeCC(musicStore, jen, purchaseRequestedJenMusicStoreBritneyCD1, deliveredMusicStoreJenBritneyCD), Time)), axiom_uses(delta, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(purchaseRequested(jen, musicStore, britneyCD, 1)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2650).
axiom(holds_at(neg(purchaseRequested(jen, musicStore, britneyCD, 1)), Time),
   
    [ holds_at(cc(musicStore,
                  jen,
                  purchaseRequestedJenMusicStoreBritneyCD1,
                  deliveredMusicStoreJenBritneyCD),
               Time),
      not(happens(dischargeCC(musicStore,
                              jen,
                              purchaseRequestedJenMusicStoreBritneyCD1,
                              deliveredMusicStoreJenBritneyCD),
                  Time)),
      axiom_uses(delta, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2650).

 /*  not(axiom_uses(delta)) :-
       not(happens(dischargeCC(musicStore,
                               jen,
                               purchaseRequestedJenMusicStoreBritneyCD1,
                               deliveredMusicStoreJenBritneyCD),
                   Time)),
       holds_at(cc(musicStore,
                   jen,
                   purchaseRequestedJenMusicStoreBritneyCD1,
                   deliveredMusicStoreJenBritneyCD),
                Time),
       holds_at(purchaseRequested(jen, musicStore, britneyCD, 1), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2650).

 /*  fix_axiom_head(Time) ->
       [not(axiom_uses(delta)), ->, not(axiom_uses(delta, Time))].
 */

 /*  [not(happens(dischargeCC(musicStore, jen, purchaseRequestedJenMusicStoreBritneyCD1, deliveredMusicStoreJenBritneyCD), Time)), holds_at(cc(musicStore, jen, purchaseRequestedJenMusicStoreBritneyCD1, deliveredMusicStoreJenBritneyCD), Time), holds_at(purchaseRequested(jen, musicStore, britneyCD, 1), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(axiom_uses(delta, Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2650).
axiom(not(axiom_uses(delta, Time)),
   
    [ not(happens(dischargeCC(musicStore,
                              jen,
                              purchaseRequestedJenMusicStoreBritneyCD1,
                              deliveredMusicStoreJenBritneyCD),
                  Time)),
      holds_at(cc(musicStore,
                  jen,
                  purchaseRequestedJenMusicStoreBritneyCD1,
                  deliveredMusicStoreJenBritneyCD),
               Time),
      holds_at(purchaseRequested(jen, musicStore, britneyCD, 1), Time)
    ]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2653
% Delta: 
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2653).
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2653
% [time]
% HoldsAt(CC(Jen, MusicStore, DeliveredMusicStoreJenBritneyCD, EPOSentJenMusicStore1),time) &
% HoldsAt(Delivered(MusicStore,Jen,BritneyCD),time) ->
% Happens(CreateC(Jen,MusicStore,EPOSentJenMusicStore1),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2656
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2655).

 /*  axiom_uses(delta) ->
       ( holds_at(cc(jen, musicStore, deliveredMusicStoreJenBritneyCD, ePOSentJenMusicStore1), Time), holds_at(delivered(musicStore, jen, britneyCD), Time)->happens(createC(jen, musicStore, ePOSentJenMusicStore1), Time)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2655).

 /*  happens(createC(jen, musicStore, ePOSentJenMusicStore1), Time) :-
       ( holds_at(cc(jen,
                     musicStore,
                     deliveredMusicStoreJenBritneyCD,
                     ePOSentJenMusicStore1),
                  Time),
         holds_at(delivered(musicStore, jen, britneyCD), Time)
       ),
       axiom_uses(delta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2655).

 /*  [holds_at(cc(jen, musicStore, deliveredMusicStoreJenBritneyCD, ePOSentJenMusicStore1), Time), holds_at(delivered(musicStore, jen, britneyCD), Time), axiom_uses(delta, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(createC(jen, musicStore, ePOSentJenMusicStore1), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2655).
axiom(happens(createC(jen, musicStore, ePOSentJenMusicStore1), Time),
   
    [ holds_at(cc(jen,
                  musicStore,
                  deliveredMusicStoreJenBritneyCD,
                  ePOSentJenMusicStore1),
               Time),
      holds_at(delivered(musicStore, jen, britneyCD), Time),
      axiom_uses(delta, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2655).

 /*  not(holds_at(cc(jen, musicStore, deliveredMusicStoreJenBritneyCD, ePOSentJenMusicStore1), Time)) :-
       holds_at(delivered(musicStore, jen, britneyCD), Time),
       not(happens(createC(jen, musicStore, ePOSentJenMusicStore1), Time)),
       axiom_uses(delta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2655).

 /*  [holds_at(delivered(musicStore, jen, britneyCD), Time), not(happens(createC(jen, musicStore, ePOSentJenMusicStore1), Time)), axiom_uses(delta, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(cc(jen,
                          musicStore,
                          deliveredMusicStoreJenBritneyCD,
                          ePOSentJenMusicStore1)),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2655).
axiom(holds_at(neg(cc(jen, musicStore, deliveredMusicStoreJenBritneyCD, ePOSentJenMusicStore1)), Time),
   
    [ holds_at(delivered(musicStore, jen, britneyCD), Time),
      not(happens(createC(jen, musicStore, ePOSentJenMusicStore1), Time)),
      axiom_uses(delta, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2655).

 /*  not(holds_at(delivered(musicStore, jen, britneyCD), Time)) :-
       holds_at(cc(jen,
                   musicStore,
                   deliveredMusicStoreJenBritneyCD,
                   ePOSentJenMusicStore1),
                Time),
       not(happens(createC(jen, musicStore, ePOSentJenMusicStore1), Time)),
       axiom_uses(delta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2655).

 /*  [holds_at(cc(jen, musicStore, deliveredMusicStoreJenBritneyCD, ePOSentJenMusicStore1), Time), not(happens(createC(jen, musicStore, ePOSentJenMusicStore1), Time)), axiom_uses(delta, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(delivered(musicStore, jen, britneyCD)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2655).
axiom(holds_at(neg(delivered(musicStore, jen, britneyCD)), Time),
   
    [ holds_at(cc(jen,
                  musicStore,
                  deliveredMusicStoreJenBritneyCD,
                  ePOSentJenMusicStore1),
               Time),
      not(happens(createC(jen, musicStore, ePOSentJenMusicStore1), Time)),
      axiom_uses(delta, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2655).

 /*  not(axiom_uses(delta)) :-
       not(happens(createC(jen, musicStore, ePOSentJenMusicStore1), Time)),
       holds_at(cc(jen,
                   musicStore,
                   deliveredMusicStoreJenBritneyCD,
                   ePOSentJenMusicStore1),
                Time),
       holds_at(delivered(musicStore, jen, britneyCD), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2655).

 /*  fix_axiom_head(Time) ->
       [not(axiom_uses(delta)), ->, not(axiom_uses(delta, Time))].
 */

 /*  [not(happens(createC(jen, musicStore, ePOSentJenMusicStore1), Time)), holds_at(cc(jen, musicStore, deliveredMusicStoreJenBritneyCD, ePOSentJenMusicStore1), Time), holds_at(delivered(musicStore, jen, britneyCD), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(axiom_uses(delta, Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2655).
axiom(not(axiom_uses(delta, Time)),
   
    [ not(happens(createC(jen, musicStore, ePOSentJenMusicStore1), Time)),
      holds_at(cc(jen,
                  musicStore,
                  deliveredMusicStoreJenBritneyCD,
                  ePOSentJenMusicStore1),
               Time),
      holds_at(delivered(musicStore, jen, britneyCD), Time)
    ]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2658
% Delta: 
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2658).
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2658
% [time]
% HoldsAt(CC(Jen, MusicStore, DeliveredMusicStoreJenBritneyCD, EPOSentJenMusicStore1),time) &
% HoldsAt(Delivered(MusicStore,Jen,BritneyCD),time) ->
% Happens(DischargeCC(Jen,MusicStore,DeliveredMusicStoreJenBritneyCD, EPOSentJenMusicStore1),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2661
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2660).

 /*  axiom_uses(delta) ->
       ( holds_at(cc(jen, musicStore, deliveredMusicStoreJenBritneyCD, ePOSentJenMusicStore1), Time), holds_at(delivered(musicStore, jen, britneyCD), Time)->happens(dischargeCC(jen, musicStore, deliveredMusicStoreJenBritneyCD, ePOSentJenMusicStore1), Time)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2660).

 /*  happens(dischargeCC(jen, musicStore, deliveredMusicStoreJenBritneyCD, ePOSentJenMusicStore1), Time) :-
       ( holds_at(cc(jen,
                     musicStore,
                     deliveredMusicStoreJenBritneyCD,
                     ePOSentJenMusicStore1),
                  Time),
         holds_at(delivered(musicStore, jen, britneyCD), Time)
       ),
       axiom_uses(delta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2660).

 /*  [holds_at(cc(jen, musicStore, deliveredMusicStoreJenBritneyCD, ePOSentJenMusicStore1), Time), holds_at(delivered(musicStore, jen, britneyCD), Time), axiom_uses(delta, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(dischargeCC(jen,
                              musicStore,
                              deliveredMusicStoreJenBritneyCD,
                              ePOSentJenMusicStore1),
                  Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2660).
axiom(happens(dischargeCC(jen, musicStore, deliveredMusicStoreJenBritneyCD, ePOSentJenMusicStore1), Time),
   
    [ holds_at(cc(jen,
                  musicStore,
                  deliveredMusicStoreJenBritneyCD,
                  ePOSentJenMusicStore1),
               Time),
      holds_at(delivered(musicStore, jen, britneyCD), Time),
      axiom_uses(delta, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2660).

 /*  not(holds_at(cc(jen, musicStore, deliveredMusicStoreJenBritneyCD, ePOSentJenMusicStore1), Time)) :-
       holds_at(delivered(musicStore, jen, britneyCD), Time),
       not(happens(dischargeCC(jen,
                               musicStore,
                               deliveredMusicStoreJenBritneyCD,
                               ePOSentJenMusicStore1),
                   Time)),
       axiom_uses(delta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2660).

 /*  [holds_at(delivered(musicStore, jen, britneyCD), Time), not(happens(dischargeCC(jen, musicStore, deliveredMusicStoreJenBritneyCD, ePOSentJenMusicStore1), Time)), axiom_uses(delta, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(cc(jen,
                          musicStore,
                          deliveredMusicStoreJenBritneyCD,
                          ePOSentJenMusicStore1)),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2660).
axiom(holds_at(neg(cc(jen, musicStore, deliveredMusicStoreJenBritneyCD, ePOSentJenMusicStore1)), Time),
   
    [ holds_at(delivered(musicStore, jen, britneyCD), Time),
      not(happens(dischargeCC(jen,
                              musicStore,
                              deliveredMusicStoreJenBritneyCD,
                              ePOSentJenMusicStore1),
                  Time)),
      axiom_uses(delta, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2660).

 /*  not(holds_at(delivered(musicStore, jen, britneyCD), Time)) :-
       holds_at(cc(jen,
                   musicStore,
                   deliveredMusicStoreJenBritneyCD,
                   ePOSentJenMusicStore1),
                Time),
       not(happens(dischargeCC(jen,
                               musicStore,
                               deliveredMusicStoreJenBritneyCD,
                               ePOSentJenMusicStore1),
                   Time)),
       axiom_uses(delta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2660).

 /*  [holds_at(cc(jen, musicStore, deliveredMusicStoreJenBritneyCD, ePOSentJenMusicStore1), Time), not(happens(dischargeCC(jen, musicStore, deliveredMusicStoreJenBritneyCD, ePOSentJenMusicStore1), Time)), axiom_uses(delta, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(delivered(musicStore, jen, britneyCD)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2660).
axiom(holds_at(neg(delivered(musicStore, jen, britneyCD)), Time),
   
    [ holds_at(cc(jen,
                  musicStore,
                  deliveredMusicStoreJenBritneyCD,
                  ePOSentJenMusicStore1),
               Time),
      not(happens(dischargeCC(jen,
                              musicStore,
                              deliveredMusicStoreJenBritneyCD,
                              ePOSentJenMusicStore1),
                  Time)),
      axiom_uses(delta, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2660).

 /*  not(axiom_uses(delta)) :-
       not(happens(dischargeCC(jen,
                               musicStore,
                               deliveredMusicStoreJenBritneyCD,
                               ePOSentJenMusicStore1),
                   Time)),
       holds_at(cc(jen,
                   musicStore,
                   deliveredMusicStoreJenBritneyCD,
                   ePOSentJenMusicStore1),
                Time),
       holds_at(delivered(musicStore, jen, britneyCD), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2660).

 /*  fix_axiom_head(Time) ->
       [not(axiom_uses(delta)), ->, not(axiom_uses(delta, Time))].
 */

 /*  [not(happens(dischargeCC(jen, musicStore, deliveredMusicStoreJenBritneyCD, ePOSentJenMusicStore1), Time)), holds_at(cc(jen, musicStore, deliveredMusicStoreJenBritneyCD, ePOSentJenMusicStore1), Time), holds_at(delivered(musicStore, jen, britneyCD), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(axiom_uses(delta, Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2660).
axiom(not(axiom_uses(delta, Time)),
   
    [ not(happens(dischargeCC(jen,
                              musicStore,
                              deliveredMusicStoreJenBritneyCD,
                              ePOSentJenMusicStore1),
                  Time)),
      holds_at(cc(jen,
                  musicStore,
                  deliveredMusicStoreJenBritneyCD,
                  ePOSentJenMusicStore1),
               Time),
      holds_at(delivered(musicStore, jen, britneyCD), Time)
    ]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2663
% Delta: 
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2663).
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2663
% [time]
% HoldsAt(C(MusicStore,Jen,DeliveredMusicStoreJenBritneyCD),time) &
% HoldsAt(Delivered(MusicStore,Jen,BritneyCD),time) ->
% Happens(DischargeC(MusicStore,Jen,DeliveredMusicStoreJenBritneyCD),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2666
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2665).

 /*  axiom_uses(delta) ->
       ( holds_at(c(musicStore, jen, deliveredMusicStoreJenBritneyCD), Time), holds_at(delivered(musicStore, jen, britneyCD), Time)->happens(dischargeC(musicStore, jen, deliveredMusicStoreJenBritneyCD), Time)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2665).

 /*  happens(dischargeC(musicStore, jen, deliveredMusicStoreJenBritneyCD), Time) :-
       ( holds_at(c(musicStore, jen, deliveredMusicStoreJenBritneyCD), Time),
         holds_at(delivered(musicStore, jen, britneyCD), Time)
       ),
       axiom_uses(delta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2665).

 /*  [holds_at(c(musicStore, jen, deliveredMusicStoreJenBritneyCD), Time), holds_at(delivered(musicStore, jen, britneyCD), Time), axiom_uses(delta, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(dischargeC(musicStore, jen, deliveredMusicStoreJenBritneyCD),
                  Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2665).
axiom(happens(dischargeC(musicStore, jen, deliveredMusicStoreJenBritneyCD), Time),
   
    [ holds_at(c(musicStore, jen, deliveredMusicStoreJenBritneyCD), Time),
      holds_at(delivered(musicStore, jen, britneyCD), Time),
      axiom_uses(delta, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2665).

 /*  not(holds_at(c(musicStore, jen, deliveredMusicStoreJenBritneyCD), Time)) :-
       holds_at(delivered(musicStore, jen, britneyCD), Time),
       not(happens(dischargeC(musicStore, jen, deliveredMusicStoreJenBritneyCD),
                   Time)),
       axiom_uses(delta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2665).

 /*  [holds_at(delivered(musicStore, jen, britneyCD), Time), not(happens(dischargeC(musicStore, jen, deliveredMusicStoreJenBritneyCD), Time)), axiom_uses(delta, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(c(musicStore, jen, deliveredMusicStoreJenBritneyCD)),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2665).
axiom(holds_at(neg(c(musicStore, jen, deliveredMusicStoreJenBritneyCD)), Time),
   
    [ holds_at(delivered(musicStore, jen, britneyCD), Time),
      not(happens(dischargeC(musicStore, jen, deliveredMusicStoreJenBritneyCD),
                  Time)),
      axiom_uses(delta, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2665).

 /*  not(holds_at(delivered(musicStore, jen, britneyCD), Time)) :-
       holds_at(c(musicStore, jen, deliveredMusicStoreJenBritneyCD), Time),
       not(happens(dischargeC(musicStore, jen, deliveredMusicStoreJenBritneyCD),
                   Time)),
       axiom_uses(delta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2665).

 /*  [holds_at(c(musicStore, jen, deliveredMusicStoreJenBritneyCD), Time), not(happens(dischargeC(musicStore, jen, deliveredMusicStoreJenBritneyCD), Time)), axiom_uses(delta, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(delivered(musicStore, jen, britneyCD)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2665).
axiom(holds_at(neg(delivered(musicStore, jen, britneyCD)), Time),
   
    [ holds_at(c(musicStore, jen, deliveredMusicStoreJenBritneyCD), Time),
      not(happens(dischargeC(musicStore, jen, deliveredMusicStoreJenBritneyCD),
                  Time)),
      axiom_uses(delta, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2665).

 /*  not(axiom_uses(delta)) :-
       not(happens(dischargeC(musicStore, jen, deliveredMusicStoreJenBritneyCD),
                   Time)),
       holds_at(c(musicStore, jen, deliveredMusicStoreJenBritneyCD), Time),
       holds_at(delivered(musicStore, jen, britneyCD), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2665).

 /*  fix_axiom_head(Time) ->
       [not(axiom_uses(delta)), ->, not(axiom_uses(delta, Time))].
 */

 /*  [not(happens(dischargeC(musicStore, jen, deliveredMusicStoreJenBritneyCD), Time)), holds_at(c(musicStore, jen, deliveredMusicStoreJenBritneyCD), Time), holds_at(delivered(musicStore, jen, britneyCD), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(axiom_uses(delta, Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2665).
axiom(not(axiom_uses(delta, Time)),
   
    [ not(happens(dischargeC(musicStore, jen, deliveredMusicStoreJenBritneyCD),
                  Time)),
      holds_at(c(musicStore, jen, deliveredMusicStoreJenBritneyCD), Time),
      holds_at(delivered(musicStore, jen, britneyCD), Time)
    ]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2668
% Delta: 
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2668).
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2668
% [time]
% HoldsAt(C(Jen,MusicStore,EPOSentJenMusicStore1),time) &
% HoldsAt(EPOSent(Jen,MusicStore,1),time) ->
% Happens(DischargeC(Jen,MusicStore,EPOSentJenMusicStore1),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2671
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2670).

 /*  axiom_uses(delta) ->
       ( holds_at(c(jen, musicStore, ePOSentJenMusicStore1), Time), holds_at(ePOSent(jen, musicStore, 1), Time)->happens(dischargeC(jen, musicStore, ePOSentJenMusicStore1), Time)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2670).

 /*  happens(dischargeC(jen, musicStore, ePOSentJenMusicStore1), Time) :-
       ( holds_at(c(jen, musicStore, ePOSentJenMusicStore1), Time),
         holds_at(ePOSent(jen, musicStore, 1), Time)
       ),
       axiom_uses(delta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2670).

 /*  [holds_at(c(jen, musicStore, ePOSentJenMusicStore1), Time), holds_at(ePOSent(jen, musicStore, 1), Time), axiom_uses(delta, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(dischargeC(jen, musicStore, ePOSentJenMusicStore1), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2670).
axiom(happens(dischargeC(jen, musicStore, ePOSentJenMusicStore1), Time),
   
    [ holds_at(c(jen, musicStore, ePOSentJenMusicStore1), Time),
      holds_at(ePOSent(jen, musicStore, 1), Time),
      axiom_uses(delta, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2670).

 /*  not(holds_at(c(jen, musicStore, ePOSentJenMusicStore1), Time)) :-
       holds_at(ePOSent(jen, musicStore, 1), Time),
       not(happens(dischargeC(jen, musicStore, ePOSentJenMusicStore1), Time)),
       axiom_uses(delta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2670).

 /*  [holds_at(ePOSent(jen, musicStore, 1), Time), not(happens(dischargeC(jen, musicStore, ePOSentJenMusicStore1), Time)), axiom_uses(delta, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(c(jen, musicStore, ePOSentJenMusicStore1)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2670).
axiom(holds_at(neg(c(jen, musicStore, ePOSentJenMusicStore1)), Time),
   
    [ holds_at(ePOSent(jen, musicStore, 1), Time),
      not(happens(dischargeC(jen, musicStore, ePOSentJenMusicStore1), Time)),
      axiom_uses(delta, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2670).

 /*  not(holds_at(ePOSent(jen, musicStore, 1), Time)) :-
       holds_at(c(jen, musicStore, ePOSentJenMusicStore1), Time),
       not(happens(dischargeC(jen, musicStore, ePOSentJenMusicStore1), Time)),
       axiom_uses(delta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2670).

 /*  [holds_at(c(jen, musicStore, ePOSentJenMusicStore1), Time), not(happens(dischargeC(jen, musicStore, ePOSentJenMusicStore1), Time)), axiom_uses(delta, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(ePOSent(jen, musicStore, 1)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2670).
axiom(holds_at(neg(ePOSent(jen, musicStore, 1)), Time),
   
    [ holds_at(c(jen, musicStore, ePOSentJenMusicStore1), Time),
      not(happens(dischargeC(jen, musicStore, ePOSentJenMusicStore1), Time)),
      axiom_uses(delta, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2670).

 /*  not(axiom_uses(delta)) :-
       not(happens(dischargeC(jen, musicStore, ePOSentJenMusicStore1), Time)),
       holds_at(c(jen, musicStore, ePOSentJenMusicStore1), Time),
       holds_at(ePOSent(jen, musicStore, 1), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2670).

 /*  fix_axiom_head(Time) ->
       [not(axiom_uses(delta)), ->, not(axiom_uses(delta, Time))].
 */

 /*  [not(happens(dischargeC(jen, musicStore, ePOSentJenMusicStore1), Time)), holds_at(c(jen, musicStore, ePOSentJenMusicStore1), Time), holds_at(ePOSent(jen, musicStore, 1), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(axiom_uses(delta, Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2670).
axiom(not(axiom_uses(delta, Time)),
   
    [ not(happens(dischargeC(jen, musicStore, ePOSentJenMusicStore1), Time)),
      holds_at(c(jen, musicStore, ePOSentJenMusicStore1), Time),
      holds_at(ePOSent(jen, musicStore, 1), Time)
    ]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2673
% Delta: 
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2673).
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2673
% Happens(Deliver(MusicStore,Jen,BritneyCD),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2673).

 /*  [axiom_uses(delta, Axiom_uses_Ret)] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          happens(deliver(musicStore, jen, britneyCD), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2673).
axiom(happens(deliver(musicStore, jen, britneyCD), start),
    [axiom_uses(delta, Axiom_uses_Ret)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2674
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2675).
% Delta: 
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2674
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2675).
% Happens(SendEPO(Jen,MusicStore,1),2).

 /*  [axiom_uses(delta, Axiom_uses_Ret), b(start, Start2), toffset(start, 2, Start2), ignore(start+2==Start2)] ->
       ta(Ta_Param,
          tvs1=[start+2],
          tvs2=[Start2, start],
          happens(sendEPO(jen, musicStore, 1), Start2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2675).
axiom(happens(sendEPO(jen, musicStore, 1), Start2),
   
    [ axiom_uses(delta, Axiom_uses_Ret),
      b(start, Start2),
      toffset(start, 2, Start2)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2676
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2677).
%; Gamma
% [agent1,agent2,product,amount]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2679
% !HoldsAt(QuoteSent(agent1,agent2,product,amount),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2679).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(quoteSent(Agent1,
                                 Agent2,
                                 Product,
                                 Amount)),
                   start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2679).
axiom(holds_at(neg(quoteSent(Agent1, Agent2, Product, Amount)), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2681
% [agent1,agent2,product,amount]
% !HoldsAt(PurchaseRequested(agent1,agent2,product,amount),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2683).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(purchaseRequested(Agent1,
                                         Agent2,
                                         Product,
                                         Amount)),
                   start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2683).
axiom(holds_at(neg(purchaseRequested(Agent1, Agent2, Product, Amount)), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2684
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2685).
% [agent1,agent2,product]
% !HoldsAt(Delivered(agent1,agent2,product),0).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(delivered(Agent1, Agent2, Product)), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2685).
axiom(holds_at(neg(delivered(Agent1, Agent2, Product)), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2687
% [agent1,agent2,f]
% !HoldsAt(C(agent1,agent2,f),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2689).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(c(Agent1, Agent2, F)), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2689).
axiom(holds_at(neg(c(Agent1, Agent2, F)), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2690
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2691).
% [agent1,agent2,f1,f2]
% !HoldsAt(CC(agent1,agent2,f1,f2),0).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(cc(Agent1, Agent2, F1, F2)), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2691).
axiom(holds_at(neg(cc(Agent1, Agent2, F1, F2)), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2693
% [agent1,agent2,amount]
% !HoldsAt(EPOSent(agent1,agent2,amount),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2695).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(ePOSent(Agent1, Agent2, Amount)), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2695).
axiom(holds_at(neg(ePOSent(Agent1, Agent2, Amount)), start),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2696
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2697).
% completion Delta Happens
==> completion(delta).
==> completion(happens).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2698
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2699).
% range time 0 4
==> range(time,0,4).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2699
% range offset 1 1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2699).
==> range(offset,1,1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2700
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2701).
% range amount 1 1
==> range(amount,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter14/NetBill2.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @inproceedings{SirbuTygar:1995,
%;   author = "Marvin A. Sirbu and J. D. Tygar",
%;   year = "1995",
%;   title = "Net\uppercase{B}ill: An \uppercase{I}nternet commerce system optimized for network delivered services",
%;   editor = "
%;   booktitle = "40th \uppercase{IEEE} \uppercase{C}omputer \uppercase{S}ociety \uppercase{I}nternational \uppercase{C}onference",
%;   pages = "20--25",
%;   publisher = "
%;   address = "
%; }
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2739
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2740).
% option modeldiff on
:- set_ec_option(modeldiff, on).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2741
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2742).
% load foundations/Root.e
:- load_e('foundations/Root.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2742
% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2742).
:- load_e('foundations/EC.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2744
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2745).
% sort agent
==> sort(agent).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2745
% agent MusicStore, Jen
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2745).
==> t(agent,musicStore).
==> t(agent,jen).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2747
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2748).
% sort product
==> sort(product).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2748
% product BritneyCD
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2748).
==> t(product,britneyCD).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2750
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2751).
% sort f
==> sort(f).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2751
% f PurchaseRequestedJenMusicStoreBritneyCD1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2751).
==> t(f,purchaseRequestedJenMusicStoreBritneyCD1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2752
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2753).
% f DeliveredMusicStoreJenBritneyCD
==> t(f,deliveredMusicStoreJenBritneyCD).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2753
% f EPOSentJenMusicStore1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2753).
==> t(f,ePOSentJenMusicStore1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2755
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2756).
% sort amount: integer
==> subsort(amount,integer).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2757
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2758).
% fluent C(agent,agent,f)
fluent(c(agent,agent,f)).
==> mpred_prop(c(agent,agent,f),fluent).
==> meta_argtypes(c(agent,agent,f)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2758
% fluent CC(agent,agent,f,f)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2758).
fluent(cc(agent,agent,f,f)).
==> mpred_prop(cc(agent,agent,f,f),fluent).
==> meta_argtypes(cc(agent,agent,f,f)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2760
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2761).
% event CreateC(agent,agent,f)
event(createC(agent,agent,f)).
==> mpred_prop(createC(agent,agent,f),event).
==> meta_argtypes(createC(agent,agent,f)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2761
% event CreateCC(agent,agent,f,f)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2761).
event(createCC(agent,agent,f,f)).
==> mpred_prop(createCC(agent,agent,f,f),event).
==> meta_argtypes(createCC(agent,agent,f,f)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2762
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2763).
% event DischargeC(agent,agent,f)
event(dischargeC(agent,agent,f)).
==> mpred_prop(dischargeC(agent,agent,f),event).
==> meta_argtypes(dischargeC(agent,agent,f)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2763
% event DischargeCC(agent,agent,f,f)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2763).
event(dischargeCC(agent,agent,f,f)).
==> mpred_prop(dischargeCC(agent,agent,f,f),event).
==> meta_argtypes(dischargeCC(agent,agent,f,f)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2765
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2766).
% fluent QuoteSent(agent,agent,product,amount)
fluent(quoteSent(agent,agent,product,amount)).
==> mpred_prop(quoteSent(agent,agent,product,amount),fluent).
==> meta_argtypes(quoteSent(agent,agent,product,amount)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2766
% fluent PurchaseRequested(agent,agent,product,amount)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2766).
fluent(purchaseRequested(agent,agent,product,amount)).
==> mpred_prop(purchaseRequested(agent,agent,product,amount),fluent).
==> meta_argtypes(purchaseRequested(agent,agent,product,amount)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2767
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2768).
% fluent Delivered(agent,agent,product)
fluent(delivered(agent,agent,product)).
==> mpred_prop(delivered(agent,agent,product),fluent).
==> meta_argtypes(delivered(agent,agent,product)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2768
% fluent EPOSent(agent,agent,amount)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2768).
fluent(ePOSent(agent,agent,amount)).
==> mpred_prop(ePOSent(agent,agent,amount),fluent).
==> meta_argtypes(ePOSent(agent,agent,amount)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2770
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2771).
% event SendQuote(agent,agent,product,amount)
event(sendQuote(agent,agent,product,amount)).
==> mpred_prop(sendQuote(agent,agent,product,amount),event).
==> meta_argtypes(sendQuote(agent,agent,product,amount)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2771
% event RequestPurchase(agent,agent,product,amount)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2771).
event(requestPurchase(agent,agent,product,amount)).
==> mpred_prop(requestPurchase(agent,agent,product,amount),event).
==> meta_argtypes(requestPurchase(agent,agent,product,amount)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2772
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2773).
% event Deliver(agent,agent,product)
event(deliver(agent,agent,product)).
==> mpred_prop(deliver(agent,agent,product),event).
==> meta_argtypes(deliver(agent,agent,product)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2773
% event SendEPO(agent,agent,amount)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2773).
event(sendEPO(agent,agent,amount)).
==> mpred_prop(sendEPO(agent,agent,amount),event).
==> meta_argtypes(sendEPO(agent,agent,amount)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2775
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2776).
%; Sigma
% [agent1,agent2,f,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2778
% Initiates(CreateC(agent1,agent2,f),C(agent1,agent2,f),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2778).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(createC(Agent1, Agent2, F),
                    c(Agent1, Agent2, F),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2778).
axiom(initiates(createC(Agent1, Agent2, F), c(Agent1, Agent2, F), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2780
% [agent1,agent2,f1,f2,time]
% Initiates(CreateCC(agent1,agent2,f1,f2),CC(agent1,agent2,f1,f2),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2782).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(createCC(Agent1, Agent2, F1, F2),
                    cc(Agent1, Agent2, F1, F2),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2782).
axiom(initiates(createCC(Agent1, Agent2, F1, F2), cc(Agent1, Agent2, F1, F2), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2783
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2784).
% [agent1,agent2,f,time]
% Terminates(DischargeC(agent1,agent2,f),C(agent1,agent2,f),time).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(dischargeC(Agent1, Agent2, F),
                     c(Agent1, Agent2, F),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2784).
axiom(terminates(dischargeC(Agent1, Agent2, F), c(Agent1, Agent2, F), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2786
% [agent1,agent2,f1,f2,time]
% Terminates(DischargeCC(agent1,agent2,f1,f2),CC(agent1,agent2,f1,f2),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2788).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(dischargeCC(Agent1, Agent2, F1, F2),
                     cc(Agent1, Agent2, F1, F2),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2788).
axiom(terminates(dischargeCC(Agent1, Agent2, F1, F2), cc(Agent1, Agent2, F1, F2), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2789
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2790).
% [agent1,agent2,product,amount,time]
% Initiates(SendQuote(agent1,agent2,product,amount),
%           QuoteSent(agent1,agent2,product,amount),
%           time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2792
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2790).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(sendQuote(Agent1,
                              Agent2,
                              Product,
                              Amount),
                    quoteSent(Agent1,
                              Agent2,
                              Product,
                              Amount),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2790).
axiom(initiates(sendQuote(Agent1, Agent2, Product, Amount), quoteSent(Agent1, Agent2, Product, Amount), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2794
% [agent1,agent2,product,amount,time]
% Initiates(RequestPurchase(agent1,agent2,product,amount),
%           PurchaseRequested(agent1,agent2,product,amount),
%           time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2797
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2796).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(requestPurchase(Agent1,
                                    Agent2,
                                    Product,
                                    Amount),
                    purchaseRequested(Agent1,
                                      Agent2,
                                      Product,
                                      Amount),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2796).
axiom(initiates(requestPurchase(Agent1, Agent2, Product, Amount), purchaseRequested(Agent1, Agent2, Product, Amount), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2799
% [agent1,agent2,product,time]
% Initiates(Deliver(agent1,agent2,product),
%           Delivered(agent1,agent2,product),
%           time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2802
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2801).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(deliver(Agent1, Agent2, Product),
                    delivered(Agent1, Agent2, Product),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2801).
axiom(initiates(deliver(Agent1, Agent2, Product), delivered(Agent1, Agent2, Product), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2804
% [agent1,agent2,amount,time]
% Initiates(SendEPO(agent1,agent2,amount),
%           EPOSent(agent1,agent2,amount),
%           time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2807
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2806).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(sendEPO(Agent1, Agent2, Amount),
                    ePOSent(Agent1, Agent2, Amount),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2806).
axiom(initiates(sendEPO(Agent1, Agent2, Amount), ePOSent(Agent1, Agent2, Amount), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2809
% [agent1,agent2,product,amount,f1,f2,time]
% agent1=% MusicStore &
% agent2=Jen &
% product=BritneyCD &
% amount=1 &
% f1=PurchaseRequestedJenMusicStoreBritneyCD1 &
% f2=DeliveredMusicStoreJenBritneyCD ->
% Initiates(SendQuote(agent1,agent2,product,amount),
%           CC(agent1,agent2,f1,f2),
%           time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2818
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2811).

 /*  [equals(Agent1, musicStore), equals(Agent2, jen), equals(Product, britneyCD), equals(Amount, 1), equals(F1, purchaseRequestedJenMusicStoreBritneyCD1), equals(F2, deliveredMusicStoreJenBritneyCD)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(sendQuote(Agent1,
                              Agent2,
                              Product,
                              Amount),
                    cc(Agent1, Agent2, F1, F2),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2811).
axiom(initiates(sendQuote(Agent1, Agent2, Product, Amount), cc(Agent1, Agent2, F1, F2), Time),
   
    [ equals(Agent1, musicStore),
      equals(Agent2, jen),
      equals(Product, britneyCD),
      equals(Amount, 1),
      equals(F1, purchaseRequestedJenMusicStoreBritneyCD1),
      equals(F2, deliveredMusicStoreJenBritneyCD)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2820
% [agent1,agent2,product,amount,f1,f2,time]
% agent1=% Jen &
% agent2=MusicStore &
% product=BritneyCD &
% amount=1 &
% f1=DeliveredMusicStoreJenBritneyCD &
% f2=EPOSentJenMusicStore1 &
% !HoldsAt(Delivered(agent2,agent1,product),time) ->
% Initiates(RequestPurchase(agent1,agent2,product,amount),
%           CC(agent1,agent2,f1,f2),
%           time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2830
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2822).

 /*  [equals(Agent1, jen), equals(Agent2, musicStore), equals(Product, britneyCD), equals(Amount, 1), equals(F1, deliveredMusicStoreJenBritneyCD), equals(F2, ePOSentJenMusicStore1), holds_at(neg(delivered(Agent2, Agent1, Product)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(requestPurchase(Agent1,
                                    Agent2,
                                    Product,
                                    Amount),
                    cc(Agent1, Agent2, F1, F2),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2822).
axiom(initiates(requestPurchase(Agent1, Agent2, Product, Amount), cc(Agent1, Agent2, F1, F2), Time),
   
    [ equals(Agent1, jen),
      equals(Agent2, musicStore),
      equals(Product, britneyCD),
      equals(Amount, 1),
      equals(F1, deliveredMusicStoreJenBritneyCD),
      equals(F2, ePOSentJenMusicStore1),
      holds_at(neg(delivered(Agent2, Agent1, Product)),
               Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2832
%; Delta

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2834
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2835).
% Delta: 
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2834
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2835).
% [time]
% HoldsAt(CC(MusicStore,Jen,PurchaseRequestedJenMusicStoreBritneyCD1,DeliveredMusicStoreJenBritneyCD),time) &
% HoldsAt(PurchaseRequested(Jen,MusicStore,BritneyCD,1),time) ->
% Happens(CreateC(MusicStore,Jen,DeliveredMusicStoreJenBritneyCD),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2837
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2835).

 /*  axiom_uses(delta) ->
       ( holds_at(cc(musicStore, jen, purchaseRequestedJenMusicStoreBritneyCD1, deliveredMusicStoreJenBritneyCD), Time), holds_at(purchaseRequested(jen, musicStore, britneyCD, 1), Time)->happens(createC(musicStore, jen, deliveredMusicStoreJenBritneyCD), Time)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2835).

 /*  happens(createC(musicStore, jen, deliveredMusicStoreJenBritneyCD), Time) :-
       ( holds_at(cc(musicStore,
                     jen,
                     purchaseRequestedJenMusicStoreBritneyCD1,
                     deliveredMusicStoreJenBritneyCD),
                  Time),
         holds_at(purchaseRequested(jen, musicStore, britneyCD, 1), Time)
       ),
       axiom_uses(delta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2835).

 /*  [holds_at(cc(musicStore, jen, purchaseRequestedJenMusicStoreBritneyCD1, deliveredMusicStoreJenBritneyCD), Time), holds_at(purchaseRequested(jen, musicStore, britneyCD, 1), Time), axiom_uses(delta, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(createC(musicStore, jen, deliveredMusicStoreJenBritneyCD),
                  Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2835).
axiom(happens(createC(musicStore, jen, deliveredMusicStoreJenBritneyCD), Time),
   
    [ holds_at(cc(musicStore,
                  jen,
                  purchaseRequestedJenMusicStoreBritneyCD1,
                  deliveredMusicStoreJenBritneyCD),
               Time),
      holds_at(purchaseRequested(jen, musicStore, britneyCD, 1), Time),
      axiom_uses(delta, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2835).

 /*  not(holds_at(cc(musicStore, jen, purchaseRequestedJenMusicStoreBritneyCD1, deliveredMusicStoreJenBritneyCD), Time)) :-
       holds_at(purchaseRequested(jen, musicStore, britneyCD, 1), Time),
       not(happens(createC(musicStore, jen, deliveredMusicStoreJenBritneyCD),
                   Time)),
       axiom_uses(delta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2835).

 /*  [holds_at(purchaseRequested(jen, musicStore, britneyCD, 1), Time), not(happens(createC(musicStore, jen, deliveredMusicStoreJenBritneyCD), Time)), axiom_uses(delta, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(cc(musicStore,
                          jen,
                          purchaseRequestedJenMusicStoreBritneyCD1,
                          deliveredMusicStoreJenBritneyCD)),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2835).
axiom(holds_at(neg(cc(musicStore, jen, purchaseRequestedJenMusicStoreBritneyCD1, deliveredMusicStoreJenBritneyCD)), Time),
   
    [ holds_at(purchaseRequested(jen, musicStore, britneyCD, 1), Time),
      not(happens(createC(musicStore, jen, deliveredMusicStoreJenBritneyCD),
                  Time)),
      axiom_uses(delta, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2835).

 /*  not(holds_at(purchaseRequested(jen, musicStore, britneyCD, 1), Time)) :-
       holds_at(cc(musicStore,
                   jen,
                   purchaseRequestedJenMusicStoreBritneyCD1,
                   deliveredMusicStoreJenBritneyCD),
                Time),
       not(happens(createC(musicStore, jen, deliveredMusicStoreJenBritneyCD),
                   Time)),
       axiom_uses(delta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2835).

 /*  [holds_at(cc(musicStore, jen, purchaseRequestedJenMusicStoreBritneyCD1, deliveredMusicStoreJenBritneyCD), Time), not(happens(createC(musicStore, jen, deliveredMusicStoreJenBritneyCD), Time)), axiom_uses(delta, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(purchaseRequested(jen, musicStore, britneyCD, 1)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2835).
axiom(holds_at(neg(purchaseRequested(jen, musicStore, britneyCD, 1)), Time),
   
    [ holds_at(cc(musicStore,
                  jen,
                  purchaseRequestedJenMusicStoreBritneyCD1,
                  deliveredMusicStoreJenBritneyCD),
               Time),
      not(happens(createC(musicStore, jen, deliveredMusicStoreJenBritneyCD),
                  Time)),
      axiom_uses(delta, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2835).

 /*  not(axiom_uses(delta)) :-
       not(happens(createC(musicStore, jen, deliveredMusicStoreJenBritneyCD),
                   Time)),
       holds_at(cc(musicStore,
                   jen,
                   purchaseRequestedJenMusicStoreBritneyCD1,
                   deliveredMusicStoreJenBritneyCD),
                Time),
       holds_at(purchaseRequested(jen, musicStore, britneyCD, 1), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2835).

 /*  fix_axiom_head(Time) ->
       [not(axiom_uses(delta)), ->, not(axiom_uses(delta, Time))].
 */

 /*  [not(happens(createC(musicStore, jen, deliveredMusicStoreJenBritneyCD), Time)), holds_at(cc(musicStore, jen, purchaseRequestedJenMusicStoreBritneyCD1, deliveredMusicStoreJenBritneyCD), Time), holds_at(purchaseRequested(jen, musicStore, britneyCD, 1), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(axiom_uses(delta, Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2835).
axiom(not(axiom_uses(delta, Time)),
   
    [ not(happens(createC(musicStore, jen, deliveredMusicStoreJenBritneyCD),
                  Time)),
      holds_at(cc(musicStore,
                  jen,
                  purchaseRequestedJenMusicStoreBritneyCD1,
                  deliveredMusicStoreJenBritneyCD),
               Time),
      holds_at(purchaseRequested(jen, musicStore, britneyCD, 1), Time)
    ]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2839
% Delta: 
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2839).
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2839
% [time]
% HoldsAt(CC(MusicStore,Jen,PurchaseRequestedJenMusicStoreBritneyCD1,DeliveredMusicStoreJenBritneyCD),time) &
% HoldsAt(PurchaseRequested(Jen, MusicStore, BritneyCD, 1),time) ->
% Happens(DischargeCC(MusicStore,Jen,PurchaseRequestedJenMusicStoreBritneyCD1,DeliveredMusicStoreJenBritneyCD),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2842
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2841).

 /*  axiom_uses(delta) ->
       ( holds_at(cc(musicStore, jen, purchaseRequestedJenMusicStoreBritneyCD1, deliveredMusicStoreJenBritneyCD), Time), holds_at(purchaseRequested(jen, musicStore, britneyCD, 1), Time)->happens(dischargeCC(musicStore, jen, purchaseRequestedJenMusicStoreBritneyCD1, deliveredMusicStoreJenBritneyCD), Time)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2841).

 /*  happens(dischargeCC(musicStore, jen, purchaseRequestedJenMusicStoreBritneyCD1, deliveredMusicStoreJenBritneyCD), Time) :-
       ( holds_at(cc(musicStore,
                     jen,
                     purchaseRequestedJenMusicStoreBritneyCD1,
                     deliveredMusicStoreJenBritneyCD),
                  Time),
         holds_at(purchaseRequested(jen, musicStore, britneyCD, 1), Time)
       ),
       axiom_uses(delta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2841).

 /*  [holds_at(cc(musicStore, jen, purchaseRequestedJenMusicStoreBritneyCD1, deliveredMusicStoreJenBritneyCD), Time), holds_at(purchaseRequested(jen, musicStore, britneyCD, 1), Time), axiom_uses(delta, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(dischargeCC(musicStore,
                              jen,
                              purchaseRequestedJenMusicStoreBritneyCD1,
                              deliveredMusicStoreJenBritneyCD),
                  Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2841).
axiom(happens(dischargeCC(musicStore, jen, purchaseRequestedJenMusicStoreBritneyCD1, deliveredMusicStoreJenBritneyCD), Time),
   
    [ holds_at(cc(musicStore,
                  jen,
                  purchaseRequestedJenMusicStoreBritneyCD1,
                  deliveredMusicStoreJenBritneyCD),
               Time),
      holds_at(purchaseRequested(jen, musicStore, britneyCD, 1), Time),
      axiom_uses(delta, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2841).

 /*  not(holds_at(cc(musicStore, jen, purchaseRequestedJenMusicStoreBritneyCD1, deliveredMusicStoreJenBritneyCD), Time)) :-
       holds_at(purchaseRequested(jen, musicStore, britneyCD, 1), Time),
       not(happens(dischargeCC(musicStore,
                               jen,
                               purchaseRequestedJenMusicStoreBritneyCD1,
                               deliveredMusicStoreJenBritneyCD),
                   Time)),
       axiom_uses(delta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2841).

 /*  [holds_at(purchaseRequested(jen, musicStore, britneyCD, 1), Time), not(happens(dischargeCC(musicStore, jen, purchaseRequestedJenMusicStoreBritneyCD1, deliveredMusicStoreJenBritneyCD), Time)), axiom_uses(delta, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(cc(musicStore,
                          jen,
                          purchaseRequestedJenMusicStoreBritneyCD1,
                          deliveredMusicStoreJenBritneyCD)),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2841).
axiom(holds_at(neg(cc(musicStore, jen, purchaseRequestedJenMusicStoreBritneyCD1, deliveredMusicStoreJenBritneyCD)), Time),
   
    [ holds_at(purchaseRequested(jen, musicStore, britneyCD, 1), Time),
      not(happens(dischargeCC(musicStore,
                              jen,
                              purchaseRequestedJenMusicStoreBritneyCD1,
                              deliveredMusicStoreJenBritneyCD),
                  Time)),
      axiom_uses(delta, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2841).

 /*  not(holds_at(purchaseRequested(jen, musicStore, britneyCD, 1), Time)) :-
       holds_at(cc(musicStore,
                   jen,
                   purchaseRequestedJenMusicStoreBritneyCD1,
                   deliveredMusicStoreJenBritneyCD),
                Time),
       not(happens(dischargeCC(musicStore,
                               jen,
                               purchaseRequestedJenMusicStoreBritneyCD1,
                               deliveredMusicStoreJenBritneyCD),
                   Time)),
       axiom_uses(delta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2841).

 /*  [holds_at(cc(musicStore, jen, purchaseRequestedJenMusicStoreBritneyCD1, deliveredMusicStoreJenBritneyCD), Time), not(happens(dischargeCC(musicStore, jen, purchaseRequestedJenMusicStoreBritneyCD1, deliveredMusicStoreJenBritneyCD), Time)), axiom_uses(delta, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(purchaseRequested(jen, musicStore, britneyCD, 1)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2841).
axiom(holds_at(neg(purchaseRequested(jen, musicStore, britneyCD, 1)), Time),
   
    [ holds_at(cc(musicStore,
                  jen,
                  purchaseRequestedJenMusicStoreBritneyCD1,
                  deliveredMusicStoreJenBritneyCD),
               Time),
      not(happens(dischargeCC(musicStore,
                              jen,
                              purchaseRequestedJenMusicStoreBritneyCD1,
                              deliveredMusicStoreJenBritneyCD),
                  Time)),
      axiom_uses(delta, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2841).

 /*  not(axiom_uses(delta)) :-
       not(happens(dischargeCC(musicStore,
                               jen,
                               purchaseRequestedJenMusicStoreBritneyCD1,
                               deliveredMusicStoreJenBritneyCD),
                   Time)),
       holds_at(cc(musicStore,
                   jen,
                   purchaseRequestedJenMusicStoreBritneyCD1,
                   deliveredMusicStoreJenBritneyCD),
                Time),
       holds_at(purchaseRequested(jen, musicStore, britneyCD, 1), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2841).

 /*  fix_axiom_head(Time) ->
       [not(axiom_uses(delta)), ->, not(axiom_uses(delta, Time))].
 */

 /*  [not(happens(dischargeCC(musicStore, jen, purchaseRequestedJenMusicStoreBritneyCD1, deliveredMusicStoreJenBritneyCD), Time)), holds_at(cc(musicStore, jen, purchaseRequestedJenMusicStoreBritneyCD1, deliveredMusicStoreJenBritneyCD), Time), holds_at(purchaseRequested(jen, musicStore, britneyCD, 1), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(axiom_uses(delta, Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2841).
axiom(not(axiom_uses(delta, Time)),
   
    [ not(happens(dischargeCC(musicStore,
                              jen,
                              purchaseRequestedJenMusicStoreBritneyCD1,
                              deliveredMusicStoreJenBritneyCD),
                  Time)),
      holds_at(cc(musicStore,
                  jen,
                  purchaseRequestedJenMusicStoreBritneyCD1,
                  deliveredMusicStoreJenBritneyCD),
               Time),
      holds_at(purchaseRequested(jen, musicStore, britneyCD, 1), Time)
    ]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2844
% Delta: 
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2844).
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2844
% [time]
% HoldsAt(CC(Jen, MusicStore, DeliveredMusicStoreJenBritneyCD, EPOSentJenMusicStore1),time) &
% HoldsAt(Delivered(MusicStore,Jen,BritneyCD),time) ->
% Happens(CreateC(Jen,MusicStore,EPOSentJenMusicStore1),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2847
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2846).

 /*  axiom_uses(delta) ->
       ( holds_at(cc(jen, musicStore, deliveredMusicStoreJenBritneyCD, ePOSentJenMusicStore1), Time), holds_at(delivered(musicStore, jen, britneyCD), Time)->happens(createC(jen, musicStore, ePOSentJenMusicStore1), Time)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2846).

 /*  happens(createC(jen, musicStore, ePOSentJenMusicStore1), Time) :-
       ( holds_at(cc(jen,
                     musicStore,
                     deliveredMusicStoreJenBritneyCD,
                     ePOSentJenMusicStore1),
                  Time),
         holds_at(delivered(musicStore, jen, britneyCD), Time)
       ),
       axiom_uses(delta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2846).

 /*  [holds_at(cc(jen, musicStore, deliveredMusicStoreJenBritneyCD, ePOSentJenMusicStore1), Time), holds_at(delivered(musicStore, jen, britneyCD), Time), axiom_uses(delta, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(createC(jen, musicStore, ePOSentJenMusicStore1), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2846).
axiom(happens(createC(jen, musicStore, ePOSentJenMusicStore1), Time),
   
    [ holds_at(cc(jen,
                  musicStore,
                  deliveredMusicStoreJenBritneyCD,
                  ePOSentJenMusicStore1),
               Time),
      holds_at(delivered(musicStore, jen, britneyCD), Time),
      axiom_uses(delta, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2846).

 /*  not(holds_at(cc(jen, musicStore, deliveredMusicStoreJenBritneyCD, ePOSentJenMusicStore1), Time)) :-
       holds_at(delivered(musicStore, jen, britneyCD), Time),
       not(happens(createC(jen, musicStore, ePOSentJenMusicStore1), Time)),
       axiom_uses(delta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2846).

 /*  [holds_at(delivered(musicStore, jen, britneyCD), Time), not(happens(createC(jen, musicStore, ePOSentJenMusicStore1), Time)), axiom_uses(delta, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(cc(jen,
                          musicStore,
                          deliveredMusicStoreJenBritneyCD,
                          ePOSentJenMusicStore1)),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2846).
axiom(holds_at(neg(cc(jen, musicStore, deliveredMusicStoreJenBritneyCD, ePOSentJenMusicStore1)), Time),
   
    [ holds_at(delivered(musicStore, jen, britneyCD), Time),
      not(happens(createC(jen, musicStore, ePOSentJenMusicStore1), Time)),
      axiom_uses(delta, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2846).

 /*  not(holds_at(delivered(musicStore, jen, britneyCD), Time)) :-
       holds_at(cc(jen,
                   musicStore,
                   deliveredMusicStoreJenBritneyCD,
                   ePOSentJenMusicStore1),
                Time),
       not(happens(createC(jen, musicStore, ePOSentJenMusicStore1), Time)),
       axiom_uses(delta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2846).

 /*  [holds_at(cc(jen, musicStore, deliveredMusicStoreJenBritneyCD, ePOSentJenMusicStore1), Time), not(happens(createC(jen, musicStore, ePOSentJenMusicStore1), Time)), axiom_uses(delta, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(delivered(musicStore, jen, britneyCD)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2846).
axiom(holds_at(neg(delivered(musicStore, jen, britneyCD)), Time),
   
    [ holds_at(cc(jen,
                  musicStore,
                  deliveredMusicStoreJenBritneyCD,
                  ePOSentJenMusicStore1),
               Time),
      not(happens(createC(jen, musicStore, ePOSentJenMusicStore1), Time)),
      axiom_uses(delta, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2846).

 /*  not(axiom_uses(delta)) :-
       not(happens(createC(jen, musicStore, ePOSentJenMusicStore1), Time)),
       holds_at(cc(jen,
                   musicStore,
                   deliveredMusicStoreJenBritneyCD,
                   ePOSentJenMusicStore1),
                Time),
       holds_at(delivered(musicStore, jen, britneyCD), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2846).

 /*  fix_axiom_head(Time) ->
       [not(axiom_uses(delta)), ->, not(axiom_uses(delta, Time))].
 */

 /*  [not(happens(createC(jen, musicStore, ePOSentJenMusicStore1), Time)), holds_at(cc(jen, musicStore, deliveredMusicStoreJenBritneyCD, ePOSentJenMusicStore1), Time), holds_at(delivered(musicStore, jen, britneyCD), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(axiom_uses(delta, Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2846).
axiom(not(axiom_uses(delta, Time)),
   
    [ not(happens(createC(jen, musicStore, ePOSentJenMusicStore1), Time)),
      holds_at(cc(jen,
                  musicStore,
                  deliveredMusicStoreJenBritneyCD,
                  ePOSentJenMusicStore1),
               Time),
      holds_at(delivered(musicStore, jen, britneyCD), Time)
    ]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2849
% Delta: 
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2849).
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2849
% [time]
% HoldsAt(CC(Jen, MusicStore, DeliveredMusicStoreJenBritneyCD, EPOSentJenMusicStore1),time) &
% HoldsAt(Delivered(MusicStore,Jen,BritneyCD),time) ->
% Happens(DischargeCC(Jen,MusicStore,DeliveredMusicStoreJenBritneyCD, EPOSentJenMusicStore1),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2852
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2851).

 /*  axiom_uses(delta) ->
       ( holds_at(cc(jen, musicStore, deliveredMusicStoreJenBritneyCD, ePOSentJenMusicStore1), Time), holds_at(delivered(musicStore, jen, britneyCD), Time)->happens(dischargeCC(jen, musicStore, deliveredMusicStoreJenBritneyCD, ePOSentJenMusicStore1), Time)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2851).

 /*  happens(dischargeCC(jen, musicStore, deliveredMusicStoreJenBritneyCD, ePOSentJenMusicStore1), Time) :-
       ( holds_at(cc(jen,
                     musicStore,
                     deliveredMusicStoreJenBritneyCD,
                     ePOSentJenMusicStore1),
                  Time),
         holds_at(delivered(musicStore, jen, britneyCD), Time)
       ),
       axiom_uses(delta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2851).

 /*  [holds_at(cc(jen, musicStore, deliveredMusicStoreJenBritneyCD, ePOSentJenMusicStore1), Time), holds_at(delivered(musicStore, jen, britneyCD), Time), axiom_uses(delta, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(dischargeCC(jen,
                              musicStore,
                              deliveredMusicStoreJenBritneyCD,
                              ePOSentJenMusicStore1),
                  Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2851).
axiom(happens(dischargeCC(jen, musicStore, deliveredMusicStoreJenBritneyCD, ePOSentJenMusicStore1), Time),
   
    [ holds_at(cc(jen,
                  musicStore,
                  deliveredMusicStoreJenBritneyCD,
                  ePOSentJenMusicStore1),
               Time),
      holds_at(delivered(musicStore, jen, britneyCD), Time),
      axiom_uses(delta, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2851).

 /*  not(holds_at(cc(jen, musicStore, deliveredMusicStoreJenBritneyCD, ePOSentJenMusicStore1), Time)) :-
       holds_at(delivered(musicStore, jen, britneyCD), Time),
       not(happens(dischargeCC(jen,
                               musicStore,
                               deliveredMusicStoreJenBritneyCD,
                               ePOSentJenMusicStore1),
                   Time)),
       axiom_uses(delta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2851).

 /*  [holds_at(delivered(musicStore, jen, britneyCD), Time), not(happens(dischargeCC(jen, musicStore, deliveredMusicStoreJenBritneyCD, ePOSentJenMusicStore1), Time)), axiom_uses(delta, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(cc(jen,
                          musicStore,
                          deliveredMusicStoreJenBritneyCD,
                          ePOSentJenMusicStore1)),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2851).
axiom(holds_at(neg(cc(jen, musicStore, deliveredMusicStoreJenBritneyCD, ePOSentJenMusicStore1)), Time),
   
    [ holds_at(delivered(musicStore, jen, britneyCD), Time),
      not(happens(dischargeCC(jen,
                              musicStore,
                              deliveredMusicStoreJenBritneyCD,
                              ePOSentJenMusicStore1),
                  Time)),
      axiom_uses(delta, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2851).

 /*  not(holds_at(delivered(musicStore, jen, britneyCD), Time)) :-
       holds_at(cc(jen,
                   musicStore,
                   deliveredMusicStoreJenBritneyCD,
                   ePOSentJenMusicStore1),
                Time),
       not(happens(dischargeCC(jen,
                               musicStore,
                               deliveredMusicStoreJenBritneyCD,
                               ePOSentJenMusicStore1),
                   Time)),
       axiom_uses(delta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2851).

 /*  [holds_at(cc(jen, musicStore, deliveredMusicStoreJenBritneyCD, ePOSentJenMusicStore1), Time), not(happens(dischargeCC(jen, musicStore, deliveredMusicStoreJenBritneyCD, ePOSentJenMusicStore1), Time)), axiom_uses(delta, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(delivered(musicStore, jen, britneyCD)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2851).
axiom(holds_at(neg(delivered(musicStore, jen, britneyCD)), Time),
   
    [ holds_at(cc(jen,
                  musicStore,
                  deliveredMusicStoreJenBritneyCD,
                  ePOSentJenMusicStore1),
               Time),
      not(happens(dischargeCC(jen,
                              musicStore,
                              deliveredMusicStoreJenBritneyCD,
                              ePOSentJenMusicStore1),
                  Time)),
      axiom_uses(delta, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2851).

 /*  not(axiom_uses(delta)) :-
       not(happens(dischargeCC(jen,
                               musicStore,
                               deliveredMusicStoreJenBritneyCD,
                               ePOSentJenMusicStore1),
                   Time)),
       holds_at(cc(jen,
                   musicStore,
                   deliveredMusicStoreJenBritneyCD,
                   ePOSentJenMusicStore1),
                Time),
       holds_at(delivered(musicStore, jen, britneyCD), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2851).

 /*  fix_axiom_head(Time) ->
       [not(axiom_uses(delta)), ->, not(axiom_uses(delta, Time))].
 */

 /*  [not(happens(dischargeCC(jen, musicStore, deliveredMusicStoreJenBritneyCD, ePOSentJenMusicStore1), Time)), holds_at(cc(jen, musicStore, deliveredMusicStoreJenBritneyCD, ePOSentJenMusicStore1), Time), holds_at(delivered(musicStore, jen, britneyCD), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(axiom_uses(delta, Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2851).
axiom(not(axiom_uses(delta, Time)),
   
    [ not(happens(dischargeCC(jen,
                              musicStore,
                              deliveredMusicStoreJenBritneyCD,
                              ePOSentJenMusicStore1),
                  Time)),
      holds_at(cc(jen,
                  musicStore,
                  deliveredMusicStoreJenBritneyCD,
                  ePOSentJenMusicStore1),
               Time),
      holds_at(delivered(musicStore, jen, britneyCD), Time)
    ]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2854
% Delta: 
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2854).
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2854
% [time]
% HoldsAt(C(MusicStore,Jen,DeliveredMusicStoreJenBritneyCD),time) &
% HoldsAt(Delivered(MusicStore,Jen,BritneyCD),time) ->
% Happens(DischargeC(MusicStore,Jen,DeliveredMusicStoreJenBritneyCD),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2857
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2856).

 /*  axiom_uses(delta) ->
       ( holds_at(c(musicStore, jen, deliveredMusicStoreJenBritneyCD), Time), holds_at(delivered(musicStore, jen, britneyCD), Time)->happens(dischargeC(musicStore, jen, deliveredMusicStoreJenBritneyCD), Time)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2856).

 /*  happens(dischargeC(musicStore, jen, deliveredMusicStoreJenBritneyCD), Time) :-
       ( holds_at(c(musicStore, jen, deliveredMusicStoreJenBritneyCD), Time),
         holds_at(delivered(musicStore, jen, britneyCD), Time)
       ),
       axiom_uses(delta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2856).

 /*  [holds_at(c(musicStore, jen, deliveredMusicStoreJenBritneyCD), Time), holds_at(delivered(musicStore, jen, britneyCD), Time), axiom_uses(delta, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(dischargeC(musicStore, jen, deliveredMusicStoreJenBritneyCD),
                  Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2856).
axiom(happens(dischargeC(musicStore, jen, deliveredMusicStoreJenBritneyCD), Time),
   
    [ holds_at(c(musicStore, jen, deliveredMusicStoreJenBritneyCD), Time),
      holds_at(delivered(musicStore, jen, britneyCD), Time),
      axiom_uses(delta, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2856).

 /*  not(holds_at(c(musicStore, jen, deliveredMusicStoreJenBritneyCD), Time)) :-
       holds_at(delivered(musicStore, jen, britneyCD), Time),
       not(happens(dischargeC(musicStore, jen, deliveredMusicStoreJenBritneyCD),
                   Time)),
       axiom_uses(delta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2856).

 /*  [holds_at(delivered(musicStore, jen, britneyCD), Time), not(happens(dischargeC(musicStore, jen, deliveredMusicStoreJenBritneyCD), Time)), axiom_uses(delta, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(c(musicStore, jen, deliveredMusicStoreJenBritneyCD)),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2856).
axiom(holds_at(neg(c(musicStore, jen, deliveredMusicStoreJenBritneyCD)), Time),
   
    [ holds_at(delivered(musicStore, jen, britneyCD), Time),
      not(happens(dischargeC(musicStore, jen, deliveredMusicStoreJenBritneyCD),
                  Time)),
      axiom_uses(delta, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2856).

 /*  not(holds_at(delivered(musicStore, jen, britneyCD), Time)) :-
       holds_at(c(musicStore, jen, deliveredMusicStoreJenBritneyCD), Time),
       not(happens(dischargeC(musicStore, jen, deliveredMusicStoreJenBritneyCD),
                   Time)),
       axiom_uses(delta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2856).

 /*  [holds_at(c(musicStore, jen, deliveredMusicStoreJenBritneyCD), Time), not(happens(dischargeC(musicStore, jen, deliveredMusicStoreJenBritneyCD), Time)), axiom_uses(delta, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(delivered(musicStore, jen, britneyCD)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2856).
axiom(holds_at(neg(delivered(musicStore, jen, britneyCD)), Time),
   
    [ holds_at(c(musicStore, jen, deliveredMusicStoreJenBritneyCD), Time),
      not(happens(dischargeC(musicStore, jen, deliveredMusicStoreJenBritneyCD),
                  Time)),
      axiom_uses(delta, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2856).

 /*  not(axiom_uses(delta)) :-
       not(happens(dischargeC(musicStore, jen, deliveredMusicStoreJenBritneyCD),
                   Time)),
       holds_at(c(musicStore, jen, deliveredMusicStoreJenBritneyCD), Time),
       holds_at(delivered(musicStore, jen, britneyCD), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2856).

 /*  fix_axiom_head(Time) ->
       [not(axiom_uses(delta)), ->, not(axiom_uses(delta, Time))].
 */

 /*  [not(happens(dischargeC(musicStore, jen, deliveredMusicStoreJenBritneyCD), Time)), holds_at(c(musicStore, jen, deliveredMusicStoreJenBritneyCD), Time), holds_at(delivered(musicStore, jen, britneyCD), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(axiom_uses(delta, Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2856).
axiom(not(axiom_uses(delta, Time)),
   
    [ not(happens(dischargeC(musicStore, jen, deliveredMusicStoreJenBritneyCD),
                  Time)),
      holds_at(c(musicStore, jen, deliveredMusicStoreJenBritneyCD), Time),
      holds_at(delivered(musicStore, jen, britneyCD), Time)
    ]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2859
% Delta: 
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2859).
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2859
% [time]
% HoldsAt(C(Jen,MusicStore,EPOSentJenMusicStore1),time) &
% HoldsAt(EPOSent(Jen,MusicStore,1),time) ->
% Happens(DischargeC(Jen,MusicStore,EPOSentJenMusicStore1),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2862
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2861).

 /*  axiom_uses(delta) ->
       ( holds_at(c(jen, musicStore, ePOSentJenMusicStore1), Time), holds_at(ePOSent(jen, musicStore, 1), Time)->happens(dischargeC(jen, musicStore, ePOSentJenMusicStore1), Time)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2861).

 /*  happens(dischargeC(jen, musicStore, ePOSentJenMusicStore1), Time) :-
       ( holds_at(c(jen, musicStore, ePOSentJenMusicStore1), Time),
         holds_at(ePOSent(jen, musicStore, 1), Time)
       ),
       axiom_uses(delta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2861).

 /*  [holds_at(c(jen, musicStore, ePOSentJenMusicStore1), Time), holds_at(ePOSent(jen, musicStore, 1), Time), axiom_uses(delta, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(dischargeC(jen, musicStore, ePOSentJenMusicStore1), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2861).
axiom(happens(dischargeC(jen, musicStore, ePOSentJenMusicStore1), Time),
   
    [ holds_at(c(jen, musicStore, ePOSentJenMusicStore1), Time),
      holds_at(ePOSent(jen, musicStore, 1), Time),
      axiom_uses(delta, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2861).

 /*  not(holds_at(c(jen, musicStore, ePOSentJenMusicStore1), Time)) :-
       holds_at(ePOSent(jen, musicStore, 1), Time),
       not(happens(dischargeC(jen, musicStore, ePOSentJenMusicStore1), Time)),
       axiom_uses(delta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2861).

 /*  [holds_at(ePOSent(jen, musicStore, 1), Time), not(happens(dischargeC(jen, musicStore, ePOSentJenMusicStore1), Time)), axiom_uses(delta, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(c(jen, musicStore, ePOSentJenMusicStore1)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2861).
axiom(holds_at(neg(c(jen, musicStore, ePOSentJenMusicStore1)), Time),
   
    [ holds_at(ePOSent(jen, musicStore, 1), Time),
      not(happens(dischargeC(jen, musicStore, ePOSentJenMusicStore1), Time)),
      axiom_uses(delta, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2861).

 /*  not(holds_at(ePOSent(jen, musicStore, 1), Time)) :-
       holds_at(c(jen, musicStore, ePOSentJenMusicStore1), Time),
       not(happens(dischargeC(jen, musicStore, ePOSentJenMusicStore1), Time)),
       axiom_uses(delta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2861).

 /*  [holds_at(c(jen, musicStore, ePOSentJenMusicStore1), Time), not(happens(dischargeC(jen, musicStore, ePOSentJenMusicStore1), Time)), axiom_uses(delta, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(ePOSent(jen, musicStore, 1)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2861).
axiom(holds_at(neg(ePOSent(jen, musicStore, 1)), Time),
   
    [ holds_at(c(jen, musicStore, ePOSentJenMusicStore1), Time),
      not(happens(dischargeC(jen, musicStore, ePOSentJenMusicStore1), Time)),
      axiom_uses(delta, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2861).

 /*  not(axiom_uses(delta)) :-
       not(happens(dischargeC(jen, musicStore, ePOSentJenMusicStore1), Time)),
       holds_at(c(jen, musicStore, ePOSentJenMusicStore1), Time),
       holds_at(ePOSent(jen, musicStore, 1), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2861).

 /*  fix_axiom_head(Time) ->
       [not(axiom_uses(delta)), ->, not(axiom_uses(delta, Time))].
 */

 /*  [not(happens(dischargeC(jen, musicStore, ePOSentJenMusicStore1), Time)), holds_at(c(jen, musicStore, ePOSentJenMusicStore1), Time), holds_at(ePOSent(jen, musicStore, 1), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(axiom_uses(delta, Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2861).
axiom(not(axiom_uses(delta, Time)),
   
    [ not(happens(dischargeC(jen, musicStore, ePOSentJenMusicStore1), Time)),
      holds_at(c(jen, musicStore, ePOSentJenMusicStore1), Time),
      holds_at(ePOSent(jen, musicStore, 1), Time)
    ]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2864
% Delta: 
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2864).
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2864
% Happens(RequestPurchase(Jen,MusicStore,BritneyCD,1),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2864).

 /*  [axiom_uses(delta, Axiom_uses_Ret)] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          happens(requestPurchase(jen, musicStore, britneyCD, 1), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2864).
axiom(happens(requestPurchase(jen, musicStore, britneyCD, 1), start),
    [axiom_uses(delta, Axiom_uses_Ret)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2865
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2866).
% Delta: 
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2865
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2866).
% Happens(Deliver(MusicStore,Jen,BritneyCD),2).

 /*  [axiom_uses(delta, Axiom_uses_Ret), b(start, Start2), toffset(start, 2, Start2), ignore(start+2==Start2)] ->
       ta(Ta_Param,
          tvs1=[start+2],
          tvs2=[Start2, start],
          happens(deliver(musicStore, jen, britneyCD), Start2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2866).
axiom(happens(deliver(musicStore, jen, britneyCD), Start2),
   
    [ axiom_uses(delta, Axiom_uses_Ret),
      b(start, Start2),
      toffset(start, 2, Start2)
    ]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2866
% Delta: 
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2866).
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2866
% Happens(SendEPO(Jen,MusicStore,1),4).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2866).

 /*  [axiom_uses(delta, Axiom_uses_Ret), b(start, Start4), toffset(start, 4, Start4), ignore(start+4==Start4)] ->
       ta(Ta_Param,
          tvs1=[start+4],
          tvs2=[Start4, start],
          happens(sendEPO(jen, musicStore, 1), Start4)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2866).
axiom(happens(sendEPO(jen, musicStore, 1), Start4),
   
    [ axiom_uses(delta, Axiom_uses_Ret),
      b(start, Start4),
      toffset(start, 4, Start4)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2868
%; Gamma
% [agent1,agent2,product,amount]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2871
% !HoldsAt(QuoteSent(agent1,agent2,product,amount),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2871).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(quoteSent(Agent1,
                                 Agent2,
                                 Product,
                                 Amount)),
                   start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2871).
axiom(holds_at(neg(quoteSent(Agent1, Agent2, Product, Amount)), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2873
% [agent1,agent2,product,amount]
% !HoldsAt(PurchaseRequested(agent1,agent2,product,amount),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2875).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(purchaseRequested(Agent1,
                                         Agent2,
                                         Product,
                                         Amount)),
                   start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2875).
axiom(holds_at(neg(purchaseRequested(Agent1, Agent2, Product, Amount)), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2876
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2877).
% [agent1,agent2,product]
% !HoldsAt(Delivered(agent1,agent2,product),0).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(delivered(Agent1, Agent2, Product)), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2877).
axiom(holds_at(neg(delivered(Agent1, Agent2, Product)), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2879
% [agent1,agent2,f]
% !HoldsAt(C(agent1,agent2,f),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2881).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(c(Agent1, Agent2, F)), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2881).
axiom(holds_at(neg(c(Agent1, Agent2, F)), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2882
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2883).
% [agent1,agent2,f1,f2]
% !HoldsAt(CC(agent1,agent2,f1,f2),0).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(cc(Agent1, Agent2, F1, F2)), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2883).
axiom(holds_at(neg(cc(Agent1, Agent2, F1, F2)), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2885
% [agent1,agent2,amount]
% !HoldsAt(EPOSent(agent1,agent2,amount),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2887).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(ePOSent(Agent1, Agent2, Amount)), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2887).
axiom(holds_at(neg(ePOSent(Agent1, Agent2, Amount)), start),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2888
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2889).
% completion Delta Happens
==> completion(delta).
==> completion(happens).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2890
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2891).
% range time 0 6
==> range(time,0,6).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2891
% range offset 1 1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2891).
==> range(offset,1,1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2892
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2893).
% range amount 1 1
==> range(amount,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter14/Vision.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @inproceedings{ShanahanRandell:2004,
%;   author = "Murray Shanahan and David A. Randell",
%;   year = "2004",
%;   title = "A logic-based formulation of active visual perception",
%;   editor = "Didier Dubois and Christopher A. Welty and Mary-Anne Williams",
%;   booktitle = "\uppercase{P}roceedings of the \uppercase{N}inth \uppercase{I}nternational \uppercase{C}onference on \uppercase{P}rinciples of \uppercase{K}nowledge \uppercase{R}epresentation and \uppercase{R}easoning",
%;   pages = "64--72",
%;   address = "Menlo Park, CA",
%;   publisher = "AAAI Press",
%; }
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2931
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2932).
% option modeldiff on
:- set_ec_option(modeldiff, on).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2933
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2934).
% load foundations/Root.e
:- load_e('foundations/Root.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2934
% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2934).
:- load_e('foundations/EC.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2936
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2937).
% sort object
==> sort(object).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2937
% sort shape
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2937).
==> sort(shape).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2938
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2939).
% sort aspect
==> sort(aspect).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2940
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2941).
% object Object1
==> t(object,object1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2941
% aspect Aspect1, Aspect2, Aspect3
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2941).
==> t(aspect,aspect1).
==> t(aspect,aspect2).
==> t(aspect,aspect3).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2942
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2943).
% shape Shape1, Shape2
==> t(shape,shape1).
==> t(shape,shape2).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2944
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2945).
% predicate Shape(object,shape)
predicate(shape(object,shape)).
==> mpred_prop(shape(object,shape),predicate).
==> meta_argtypes(shape(object,shape)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2945
% predicate Arc(shape,aspect,aspect)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2945).
predicate(arc(shape,aspect,aspect)).
==> mpred_prop(arc(shape,aspect,aspect),predicate).
==> meta_argtypes(arc(shape,aspect,aspect)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2946
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2947).
% fluent Aspect(object,aspect)
fluent(aspect(object,aspect)).
==> mpred_prop(aspect(object,aspect),fluent).
==> meta_argtypes(aspect(object,aspect)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2947
% event Change(object,aspect,aspect)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2947).
event(change(object,aspect,aspect)).
==> mpred_prop(change(object,aspect,aspect),event).
==> meta_argtypes(change(object,aspect,aspect)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2949
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2950).
%; Sigma
% [object,aspect1,aspect2,shape,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2952
% HoldsAt(Aspect(object,aspect1),time) &
% Shape(object,shape) &
% (Arc(shape,aspect1,aspect2) |
%  Arc(shape,aspect2,aspect1)) ->
% Initiates(Change(object,aspect1,aspect2),Aspect(object,aspect2),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2956
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2952).

 /*  [holds_at(aspect(Object, Aspect1), Time), shape(Object, Shape),  (arc(Shape, Aspect1, Aspect2);arc(Shape, Aspect2, Aspect1))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(change(Object, Aspect1, Aspect2),
                    aspect(Object, Aspect2),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2952).
axiom(initiates(change(Object, Aspect1, Aspect2), aspect(Object, Aspect2), Time),
   
    [ holds_at(aspect(Object, Aspect1), Time),
      shape(Object, Shape),
       (arc(Shape, Aspect1, Aspect2);arc(Shape, Aspect2, Aspect1))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2958
% [object,aspect1,aspect2,shape,time]
% HoldsAt(Aspect(object,aspect1),time) &
% Shape(object,shape) &
% (Arc(shape,aspect1,aspect2) |
%  Arc(shape,aspect2,aspect1)) ->
% Terminates(Change(object,aspect1,aspect2),Aspect(object,aspect1),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2963
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2960).

 /*  [holds_at(aspect(Object, Aspect1), Time), shape(Object, Shape),  (arc(Shape, Aspect1, Aspect2);arc(Shape, Aspect2, Aspect1))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(change(Object, Aspect1, Aspect2),
                     aspect(Object, Aspect1),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2960).
axiom(terminates(change(Object, Aspect1, Aspect2), aspect(Object, Aspect1), Time),
   
    [ holds_at(aspect(Object, Aspect1), Time),
      shape(Object, Shape),
       (arc(Shape, Aspect1, Aspect2);arc(Shape, Aspect2, Aspect1))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2965
%; preconditions (added)
% [object,aspect1,aspect2,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2968
% Happens(Change(object,aspect1,aspect2),time) ->
% HoldsAt(Aspect(object,aspect1),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2968).

 /*  happens(change(Object, Aspect1, Aspect2), Time) ->
       holds_at(aspect(Object, Aspect1), Time).
 */

 /*  holds_at(aspect(Object, Aspect1), Time) :-
       happens(change(Object, Aspect1, Aspect2), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2968).

 /*  [holds_at(metreqs(change(Object, Aspect1, Aspect2)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(change(Object, Aspect1, Aspect2), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2968).
axiom(requires(change(Object, Aspect1, Aspect2), Time),
   
    [ holds_at(metreqs(change(Object, Aspect1, Aspect2)),
               Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2968).

 /*  [holds_at(aspect(Object, Aspect1), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(change(Object, Aspect1, Aspect2)),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2968).
axiom(holds_at(metreqs(change(Object, Aspect1, Aspect2)), Time),
    [holds_at(aspect(Object, Aspect1), Time)]).

 /*  not(happens(change(Object, Aspect1, Aspect2), Time)) :-
       not(holds_at(aspect(Object, Aspect1), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2968).

 /*  [holds_at(neg(aspect(Object, Aspect1)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(change(Object, Aspect1, Aspect2),
                      Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2968).
axiom(not(happens(change(Object, Aspect1, Aspect2), Time)),
    [holds_at(neg(aspect(Object, Aspect1)), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2971
% [object,aspect1,aspect2,aspect3,time]
% Happens(Change(object,aspect1,aspect2),time) &
% Happens(Change(object,aspect1,aspect3),time) ->
% aspect2=aspect3.
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2974
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2973).

 /*  happens(change(Object, Aspect1, Aspect2), Time), happens(change(Object, Aspect1, Aspect3), Time) ->
       equals(Aspect2, Aspect3).
 */

 /*  not(happens(change(Object, Aspect1, Aspect2), Time)) :-
       happens(change(Object, Aspect1, Aspect3), Time),
       not(equals(Aspect2, Aspect3)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2973).

 /*  [happens(change(Object, Aspect1, Aspect3), Time), not(equals(Aspect2, Aspect3))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(change(Object, Aspect1, Aspect2),
                      Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2973).
axiom(not(happens(change(Object, Aspect1, Aspect2), Time)),
   
    [ happens(change(Object, Aspect1, Aspect3), Time),
      not(equals(Aspect2, Aspect3))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2973).

 /*  not(happens(change(Object, Aspect1, Aspect3), Time)) :-
       happens(change(Object, Aspect1, Aspect2), Time),
       not(equals(Aspect2, Aspect3)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2973).

 /*  [happens(change(Object, Aspect1, Aspect2), Time), not(equals(Aspect2, Aspect3))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(change(Object, Aspect1, Aspect3),
                      Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2973).
axiom(not(happens(change(Object, Aspect1, Aspect3), Time)),
   
    [ happens(change(Object, Aspect1, Aspect2), Time),
      not(equals(Aspect3, Aspect2))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2976
%; Psi
% [object,shape1,shape2]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2979
% Shape(object,shape1) &
% Shape(object,shape2) ->
% shape1=shape2.
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2981
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2979).

 /*  shape(Object, Shape1), shape(Object, Shape2) ->
       equals(Shape1, Shape2).
 */

 /*  not(shape(Object, Shape1)) :-
       shape(Object, Shape2),
       not(equals(Shape1, Shape2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2979).

 /*  [shape(Object, Shape2), not(equals(Shape1, Shape2))] ->
       ta(Ta_Param, tvs1=[], tvs2=[], not(shape(Object, Shape1))).
 */
axiom(not(shape(Object, Shape1)),
    [shape(Object, Shape2), not(equals(Shape1, Shape2))]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2979).

 /*  not(shape(Object, Shape2)) :-
       shape(Object, Shape1),
       not(equals(Shape1, Shape2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2979).

 /*  [shape(Object, Shape1), not(equals(Shape1, Shape2))] ->
       ta(Ta_Param4, tvs1=[], tvs2=[], not(shape(Object, Shape2))).
 */
axiom(not(shape(Object, Shape2)),
    [shape(Object, Shape1), not(equals(Shape2, Shape1))]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2983
% [object,aspect1,aspect2,time]
% HoldsAt(Aspect(object,aspect1),time) &
% HoldsAt(Aspect(object,aspect2),time) ->
% aspect1=aspect2.
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2986
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2985).

 /*  holds_at(aspect(Object, Aspect1), Time), holds_at(aspect(Object, Aspect2), Time) ->
       equals(Aspect1, Aspect2).
 */

 /*  not(holds_at(aspect(Object, Aspect1), Time)) :-
       holds_at(aspect(Object, Aspect2), Time),
       not(equals(Aspect1, Aspect2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2985).

 /*  [holds_at(aspect(Object, Aspect2), Time), not(equals(Aspect1, Aspect2))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(aspect(Object, Aspect1)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2985).
axiom(holds_at(neg(aspect(Object, Aspect1)), Time),
   
    [ holds_at(aspect(Object, Aspect2), Time),
      not(equals(Aspect1, Aspect2))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2985).

 /*  not(holds_at(aspect(Object, Aspect2), Time)) :-
       holds_at(aspect(Object, Aspect1), Time),
       not(equals(Aspect1, Aspect2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2985).

 /*  [holds_at(aspect(Object, Aspect1), Time), not(equals(Aspect1, Aspect2))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(aspect(Object, Aspect2)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2985).
axiom(holds_at(neg(aspect(Object, Aspect2)), Time),
   
    [ holds_at(aspect(Object, Aspect1), Time),
      not(equals(Aspect2, Aspect1))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2988
% [aspect1,aspect2]
% Arc(Shape1,aspect1,aspect2) <->
% (aspect1=Aspect1 & aspect2=Aspect2).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2990

 /*  arc(shape1, Aspect1, Aspect2) <->
       equals(Aspect1, aspect1),
       equals(Aspect2, aspect2).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2990).

 /*  [arc, shape1] <->
       [equals, aspect1, equals, aspect2].
 */

 /*  arc(shape1, Aspect1, Aspect2) ->
       equals(Aspect1, aspect1),
       equals(Aspect2, aspect2).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2990).

 /*  not(arc(shape1, Aspect1, Aspect2)) :-
       (   not(equals(Aspect1, aspect1))
       ;   not(equals(Aspect2, aspect2))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2990).

 /*  [(not(equals(Aspect1, aspect1));not(equals(Aspect2, aspect2)))] ->
       ta(Ta_Param,
          tvs1=[],
          tvs2=[],
          not(arc(shape1, Aspect1, Aspect2))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2990).
axiom(not(arc(shape1, Aspect1, Aspect2)),
    [(not(equals(Aspect1, aspect1));not(equals(Aspect2, aspect2)))]).

 /*  equals(Aspect1, aspect1), equals(Aspect2, aspect2) ->
       arc(shape1, Aspect1, Aspect2).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2990).

 /*  arc(shape1, Aspect1, Aspect2) :-
       equals(Aspect1, aspect1),
       equals(Aspect2, aspect2).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2990).

 /*  [equals(Aspect1, aspect1), equals(Aspect2, aspect2)] ->
       ta(Ta_Param3,
          tvs1=[],
          tvs2=[],
          arc(shape1, Aspect1, Aspect2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2990).
axiom(arc(shape1, Aspect1, Aspect2),
    [equals(Aspect1, aspect1), equals(Aspect2, aspect2)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2992
% [aspect1,aspect2]
% Arc(Shape2,aspect1,aspect2) <->
% ((aspect1=Aspect1 & aspect2=Aspect3) |
%  (aspect1=Aspect3 & aspect2=Aspect2)).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2995
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2994).

 /*  arc(shape2, Aspect1, Aspect2) <->
       (   equals(Aspect1, aspect1),
           equals(Aspect2, aspect3)
       ;   equals(Aspect1, aspect3),
           equals(Aspect2, aspect2)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2994).

 /*  [arc, shape2] <->
       [;, equals, aspect1, equals, aspect3, equals, aspect3, equals, aspect2].
 */

 /*  arc(shape2, Aspect1, Aspect2) ->
       (   equals(Aspect1, aspect1),
           equals(Aspect2, aspect3)
       ;   equals(Aspect1, aspect3),
           equals(Aspect2, aspect2)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2994).

 /*  not(arc(shape2, Aspect1, Aspect2)) :-
       (   not(equals(Aspect1, aspect1))
       ;   not(equals(Aspect2, aspect3))
       ),
       (   not(equals(Aspect1, aspect3))
       ;   not(equals(Aspect2, aspect2))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2994).

 /*  [(not(equals(Aspect1, aspect1));not(equals(Aspect2, aspect3))),  (not(equals(Aspect1, aspect3));not(equals(Aspect2, aspect2)))] ->
       ta(Ta_Param,
          tvs1=[],
          tvs2=[],
          not(arc(shape2, Aspect1, Aspect2))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2994).
axiom(not(arc(shape2, Aspect1, Aspect2)),
   
    [  (not(equals(Aspect1, aspect1));not(equals(Aspect2, aspect3))),
       (not(equals(Aspect1, aspect3));not(equals(Aspect2, aspect2)))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2994).

 /*  equals(Aspect1, aspect1), equals(Aspect2, aspect3);equals(Aspect1, aspect3), equals(Aspect2, aspect2) ->
       arc(shape2, Aspect1, Aspect2).
 */

 /*  arc(shape2, Aspect1, Aspect2) :-
       (   equals(Aspect1, aspect1),
           equals(Aspect2, aspect3)
       ;   equals(Aspect1, aspect3),
           equals(Aspect2, aspect2)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2994).

 /*  [(equals(Aspect1, aspect1), equals(Aspect2, aspect3);equals(Aspect1, aspect3), equals(Aspect2, aspect2))] ->
       ta(Ta_Param3,
          tvs1=[],
          tvs2=[],
          arc(shape2, Aspect1, Aspect2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',2994).
axiom(arc(shape2, Aspect1, Aspect2),
   
    [  (equals(Aspect1, aspect1), equals(Aspect2, aspect3);equals(Aspect1, aspect3), equals(Aspect2, aspect2))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2997
%; Gamma


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:2999
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3000).
% HoldsAt(Aspect(Object1,Aspect1),0).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(aspect(object1, aspect1), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3000).
axiom(holds_at(aspect(object1, aspect1), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3000
% HoldsAt(Aspect(Object1,Aspect2),1).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3000).

 /*  [b(start, Time), ignore(start+1==Time)] ->
       ta(Ta_Param,
          tvs1=[start+1],
          tvs2=[Time, start],
          holds_at(aspect(object1, aspect2), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3000).
axiom(holds_at(aspect(object1, aspect2), Time),
    [b(start, Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3002
%;completion Delta Happens

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3004
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3005).
% range time 0 1
==> range(time,0,1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3005
% range offset 1 1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3005).
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter14/Workflow.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @incollection{CicekliYildirim:2000,
%;   author = "Nihan Kesim Cicekli and Yakup Yildirim",
%;   year = "2000",
%;   title = "Formalizing workflows using the event calculus",
%;   editor = "Mohamed T. Ibrahim and Josef K{\"{u}}ng and Norman Revell",
%;   booktitle = "Database and Expert Systems Applications",
%;   series = "Lecture Notes in Computer Science",
%;   volume = "1873",
%;   pages = "222--231",
%;   address = "Berlin",
%;   publisher = "Springer",
%; }
%;
%; @unpublished{WFMC:1999,
%;   author = "{Workflow Management Coalition}",
%;   year = "1999",
%;   title = "\uppercase{W}orkflow \uppercase{M}anagement \uppercase{C}oalition Terminology \& Glossary",
%;   howpublished = "Document Number WFMC-TC-1011, Document Status -- Issue 3.0, Workflow Management Coalition, Winchester, UK",
%; }
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3053
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3054).
% option modeldiff on
:- set_ec_option(modeldiff, on).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3055
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3056).
% load foundations/Root.e
:- load_e('foundations/Root.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3056
% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3056).
:- load_e('foundations/EC.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3058
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3059).
% sort activity
==> sort(activity).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3059
% sort condition
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3059).
==> sort(condition).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3060
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3061).
% activity A, B, C1, C2, C3, D, E1, E2, E3, F, G
==> t(activity,a).
==> t(activity,b).
==> t(activity,c1).
==> t(activity,c2).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3061).
==> t(activity,c3).
==> t(activity,d).
==> t(activity,e1).
==> t(activity,e2).
==> t(activity,e3).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3061).
==> t(activity,f).
==> t(activity,g).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3061
% condition E1C, E2C, E3C, FC
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3061).
==> t(condition,e1c).
==> t(condition,e2c).
==> t(condition,e3c).
==> t(condition,fc).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3063
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3064).
% fluent Active(activity)
fluent(active(activity)).
==> mpred_prop(active(activity),fluent).
==> meta_argtypes(active(activity)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3064
% fluent Completed(activity)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3064).
fluent(completed(activity)).
==> mpred_prop(completed(activity),fluent).
==> meta_argtypes(completed(activity)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3065
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3066).
% fluent Condition(condition)
fluent(condition(condition)).
==> mpred_prop(condition(condition),fluent).
==> meta_argtypes(condition(condition)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3066
% noninertial Condition
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3066).
==> noninertial(condition).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3068
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3069).
% event Start(activity)
event(start(activity)).
==> mpred_prop(start(activity),event).
==> meta_argtypes(start(activity)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3069
% event End(activity)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3069).
event(end(activity)).
==> mpred_prop(end(activity),event).
==> meta_argtypes(end(activity)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3071
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3072).
%; Sigma
% [activity,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3074
% Initiates(Start(activity),Active(activity),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3074).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(start(Activity), active(Activity), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3074).
axiom(initiates(start(Activity), active(Activity), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3076
% [activity,time]
% Terminates(Start(activity),Completed(activity),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3078).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(start(Activity), completed(Activity), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3078).
axiom(terminates(start(Activity), completed(Activity), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3079
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3080).
% [activity,time]
% Initiates(End(activity),Completed(activity),time).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(end(Activity), completed(Activity), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3080).
axiom(initiates(end(Activity), completed(Activity), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3082
% [activity,time]
% Terminates(End(activity),Active(activity),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3084).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(end(Activity), active(Activity), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3084).
axiom(terminates(end(Activity), active(Activity), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3085
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3086).
%; Delta
%; A; B

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3088
% Delta: 
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3088).
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3088
% [time]
% !HoldsAt(Active(B),time) &
% !HoldsAt(Completed(A),time-1) &
% HoldsAt(Completed(A),time) ->
% Happens(Start(B),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3092
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3090).

 /*  axiom_uses(delta) ->
       ( holds_at(neg(active(b)), Time), holds_at(neg(completed(a)), Time-1), holds_at(completed(a), Time)->happens(start(b), Time)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3090).

 /*  happens(start(b), Time) :-
       ( holds_at(neg(active(b)), Time),
         holds_at(neg(completed(a)), Time-1),
         holds_at(completed(a), Time)
       ),
       axiom_uses(delta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3090).

 /*  [holds_at(neg(active(b)), Time), holds_at(neg(completed(a)), Time1), holds_at(completed(a), Time), axiom_uses(delta, Time), b(Time1, Time), ignore(Time-1==Time1)] ->
       ta(Time,
          tvs1=[Time, Time-1],
          tvs2=[Time, Time1],
          happens(start(b), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3090).
axiom(happens(start(b), Time),
   
    [ holds_at(neg(active(b)), Time),
      holds_at(neg(completed(a)), Time1),
      holds_at(completed(a), Time),
      axiom_uses(delta, Time),
      b(Time1, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3090).

 /*  not(holds_at(neg(active(b)), Time)) :-
       ( holds_at(neg(completed(a)), Time-1),
         holds_at(completed(a), Time)
       ),
       not(happens(start(b), Time)),
       axiom_uses(delta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3090).

 /*  [holds_at(neg(completed(a)), Time2), holds_at(completed(a), Time), not(happens(start(b), Time)), axiom_uses(delta, Time), b(Time2, Time), ignore(Time-1==Time2)] ->
       ta(Time,
          tvs1=[Time, Time-1],
          tvs2=[Time, Time2],
          holds_at(active(b), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3090).
axiom(holds_at(active(b), Time),
   
    [ holds_at(neg(completed(a)), Time2),
      holds_at(completed(a), Time),
      not(happens(start(b), Time)),
      axiom_uses(delta, Time),
      b(Time2, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3090).

 /*  not(holds_at(neg(completed(a)), Time-1)) :-
       holds_at(completed(a), Time),
       holds_at(neg(active(b)), Time),
       not(happens(start(b), Time)),
       axiom_uses(delta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3090).

 /*  [holds_at(completed(a), Time), holds_at(neg(active(b)), Time), not(happens(start(b), Time)), axiom_uses(delta, Axiom_uses_Ret), b(Time3, Time), ignore(Time-1==Time3)] ->
       ta(Time,
          tvs1=[Time, Time-1],
          tvs2=[Time, Time3],
          holds_at(completed(a), Time3)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3090).
axiom(holds_at(completed(a), Time3),
   
    [ holds_at(completed(a), Time),
      holds_at(neg(active(b)), Time),
      not(happens(start(b), Time)),
      axiom_uses(delta, Axiom_uses_Ret),
      b(Time3, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3090).

 /*  not(holds_at(completed(a), Time)) :-
       holds_at(neg(completed(a)), Time-1),
       holds_at(neg(active(b)), Time),
       not(happens(start(b), Time)),
       axiom_uses(delta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3090).

 /*  [holds_at(neg(completed(a)), Time5), holds_at(neg(active(b)), Time), not(happens(start(b), Time)), axiom_uses(delta, Time), b(Time5, Time), ignore(Time-1==Time5)] ->
       ta(Time,
          tvs1=[Time, Time-1],
          tvs2=[Time, Time5],
          holds_at(neg(completed(a)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3090).
axiom(holds_at(neg(completed(a)), Time),
   
    [ holds_at(neg(completed(a)), Time5),
      holds_at(neg(active(b)), Time),
      not(happens(start(b), Time)),
      axiom_uses(delta, Time),
      b(Time5, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3090).

 /*  not(axiom_uses(delta)) :-
       not(happens(start(b), Time)),
       holds_at(neg(active(b)), Time),
       holds_at(neg(completed(a)), Time-1),
       holds_at(completed(a), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3090).

 /*  fix_axiom_head(Time) ->
       [not(axiom_uses(delta)), ->, not(axiom_uses(delta, Time))].
 */

 /*  [not(happens(start(b), Time)), holds_at(neg(active(b)), Time), holds_at(neg(completed(a)), Time6), holds_at(completed(a), Time), b(Time6, Time), ignore(Time-1==Time6)] ->
       ta(Time,
          tvs1=[Time, Time-1],
          tvs2=[Time, Time6],
          not(axiom_uses(delta, Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3090).
axiom(not(axiom_uses(delta, Time)),
   
    [ not(happens(start(b), Time)),
      holds_at(neg(active(b)), Time),
      holds_at(neg(completed(a)), Time6),
      holds_at(completed(a), Time),
      b(Time6, Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3094
%; B; AND-split C1, C2, C3

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3095
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3096).
% Delta: 
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3095
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3096).
% [time]
% !HoldsAt(Active(C1),time) &
% !HoldsAt(Completed(B),time-1) &
% HoldsAt(Completed(B),time) ->
% Happens(Start(C1),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3099
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3096).

 /*  axiom_uses(delta) ->
       ( holds_at(neg(active(c1)), Time), holds_at(neg(completed(b)), Time-1), holds_at(completed(b), Time)->happens(start(c1), Time)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3096).

 /*  happens(start(c1), Time) :-
       ( holds_at(neg(active(c1)), Time),
         holds_at(neg(completed(b)), Time-1),
         holds_at(completed(b), Time)
       ),
       axiom_uses(delta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3096).

 /*  [holds_at(neg(active(c1)), Time), holds_at(neg(completed(b)), Time1), holds_at(completed(b), Time), axiom_uses(delta, Time), b(Time1, Time), ignore(Time-1==Time1)] ->
       ta(Time,
          tvs1=[Time, Time-1],
          tvs2=[Time, Time1],
          happens(start(c1), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3096).
axiom(happens(start(c1), Time),
   
    [ holds_at(neg(active(c1)), Time),
      holds_at(neg(completed(b)), Time1),
      holds_at(completed(b), Time),
      axiom_uses(delta, Time),
      b(Time1, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3096).

 /*  not(holds_at(neg(active(c1)), Time)) :-
       ( holds_at(neg(completed(b)), Time-1),
         holds_at(completed(b), Time)
       ),
       not(happens(start(c1), Time)),
       axiom_uses(delta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3096).

 /*  [holds_at(neg(completed(b)), Time2), holds_at(completed(b), Time), not(happens(start(c1), Time)), axiom_uses(delta, Time), b(Time2, Time), ignore(Time-1==Time2)] ->
       ta(Time,
          tvs1=[Time, Time-1],
          tvs2=[Time, Time2],
          holds_at(active(c1), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3096).
axiom(holds_at(active(c1), Time),
   
    [ holds_at(neg(completed(b)), Time2),
      holds_at(completed(b), Time),
      not(happens(start(c1), Time)),
      axiom_uses(delta, Time),
      b(Time2, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3096).

 /*  not(holds_at(neg(completed(b)), Time-1)) :-
       holds_at(completed(b), Time),
       holds_at(neg(active(c1)), Time),
       not(happens(start(c1), Time)),
       axiom_uses(delta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3096).

 /*  [holds_at(completed(b), Time), holds_at(neg(active(c1)), Time), not(happens(start(c1), Time)), axiom_uses(delta, Axiom_uses_Ret), b(Time3, Time), ignore(Time-1==Time3)] ->
       ta(Time,
          tvs1=[Time, Time-1],
          tvs2=[Time, Time3],
          holds_at(completed(b), Time3)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3096).
axiom(holds_at(completed(b), Time3),
   
    [ holds_at(completed(b), Time),
      holds_at(neg(active(c1)), Time),
      not(happens(start(c1), Time)),
      axiom_uses(delta, Axiom_uses_Ret),
      b(Time3, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3096).

 /*  not(holds_at(completed(b), Time)) :-
       holds_at(neg(completed(b)), Time-1),
       holds_at(neg(active(c1)), Time),
       not(happens(start(c1), Time)),
       axiom_uses(delta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3096).

 /*  [holds_at(neg(completed(b)), Time5), holds_at(neg(active(c1)), Time), not(happens(start(c1), Time)), axiom_uses(delta, Time), b(Time5, Time), ignore(Time-1==Time5)] ->
       ta(Time,
          tvs1=[Time, Time-1],
          tvs2=[Time, Time5],
          holds_at(neg(completed(b)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3096).
axiom(holds_at(neg(completed(b)), Time),
   
    [ holds_at(neg(completed(b)), Time5),
      holds_at(neg(active(c1)), Time),
      not(happens(start(c1), Time)),
      axiom_uses(delta, Time),
      b(Time5, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3096).

 /*  not(axiom_uses(delta)) :-
       not(happens(start(c1), Time)),
       holds_at(neg(active(c1)), Time),
       holds_at(neg(completed(b)), Time-1),
       holds_at(completed(b), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3096).

 /*  fix_axiom_head(Time) ->
       [not(axiom_uses(delta)), ->, not(axiom_uses(delta, Time))].
 */

 /*  [not(happens(start(c1), Time)), holds_at(neg(active(c1)), Time), holds_at(neg(completed(b)), Time6), holds_at(completed(b), Time), b(Time6, Time), ignore(Time-1==Time6)] ->
       ta(Time,
          tvs1=[Time, Time-1],
          tvs2=[Time, Time6],
          not(axiom_uses(delta, Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3096).
axiom(not(axiom_uses(delta, Time)),
   
    [ not(happens(start(c1), Time)),
      holds_at(neg(active(c1)), Time),
      holds_at(neg(completed(b)), Time6),
      holds_at(completed(b), Time),
      b(Time6, Time)
    ]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3101
% Delta: 
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3101).
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3101
% [time]
% !HoldsAt(Active(C2),time) &
% !HoldsAt(Completed(B),time-1) &
% HoldsAt(Completed(B),time) ->
% Happens(Start(C2),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3105
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3103).

 /*  axiom_uses(delta) ->
       ( holds_at(neg(active(c2)), Time), holds_at(neg(completed(b)), Time-1), holds_at(completed(b), Time)->happens(start(c2), Time)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3103).

 /*  happens(start(c2), Time) :-
       ( holds_at(neg(active(c2)), Time),
         holds_at(neg(completed(b)), Time-1),
         holds_at(completed(b), Time)
       ),
       axiom_uses(delta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3103).

 /*  [holds_at(neg(active(c2)), Time), holds_at(neg(completed(b)), Time1), holds_at(completed(b), Time), axiom_uses(delta, Time), b(Time1, Time), ignore(Time-1==Time1)] ->
       ta(Time,
          tvs1=[Time, Time-1],
          tvs2=[Time, Time1],
          happens(start(c2), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3103).
axiom(happens(start(c2), Time),
   
    [ holds_at(neg(active(c2)), Time),
      holds_at(neg(completed(b)), Time1),
      holds_at(completed(b), Time),
      axiom_uses(delta, Time),
      b(Time1, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3103).

 /*  not(holds_at(neg(active(c2)), Time)) :-
       ( holds_at(neg(completed(b)), Time-1),
         holds_at(completed(b), Time)
       ),
       not(happens(start(c2), Time)),
       axiom_uses(delta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3103).

 /*  [holds_at(neg(completed(b)), Time2), holds_at(completed(b), Time), not(happens(start(c2), Time)), axiom_uses(delta, Time), b(Time2, Time), ignore(Time-1==Time2)] ->
       ta(Time,
          tvs1=[Time, Time-1],
          tvs2=[Time, Time2],
          holds_at(active(c2), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3103).
axiom(holds_at(active(c2), Time),
   
    [ holds_at(neg(completed(b)), Time2),
      holds_at(completed(b), Time),
      not(happens(start(c2), Time)),
      axiom_uses(delta, Time),
      b(Time2, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3103).

 /*  not(holds_at(neg(completed(b)), Time-1)) :-
       holds_at(completed(b), Time),
       holds_at(neg(active(c2)), Time),
       not(happens(start(c2), Time)),
       axiom_uses(delta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3103).

 /*  [holds_at(completed(b), Time), holds_at(neg(active(c2)), Time), not(happens(start(c2), Time)), axiom_uses(delta, Axiom_uses_Ret), b(Time3, Time), ignore(Time-1==Time3)] ->
       ta(Time,
          tvs1=[Time, Time-1],
          tvs2=[Time, Time3],
          holds_at(completed(b), Time3)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3103).
axiom(holds_at(completed(b), Time3),
   
    [ holds_at(completed(b), Time),
      holds_at(neg(active(c2)), Time),
      not(happens(start(c2), Time)),
      axiom_uses(delta, Axiom_uses_Ret),
      b(Time3, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3103).

 /*  not(holds_at(completed(b), Time)) :-
       holds_at(neg(completed(b)), Time-1),
       holds_at(neg(active(c2)), Time),
       not(happens(start(c2), Time)),
       axiom_uses(delta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3103).

 /*  [holds_at(neg(completed(b)), Time5), holds_at(neg(active(c2)), Time), not(happens(start(c2), Time)), axiom_uses(delta, Time), b(Time5, Time), ignore(Time-1==Time5)] ->
       ta(Time,
          tvs1=[Time, Time-1],
          tvs2=[Time, Time5],
          holds_at(neg(completed(b)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3103).
axiom(holds_at(neg(completed(b)), Time),
   
    [ holds_at(neg(completed(b)), Time5),
      holds_at(neg(active(c2)), Time),
      not(happens(start(c2), Time)),
      axiom_uses(delta, Time),
      b(Time5, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3103).

 /*  not(axiom_uses(delta)) :-
       not(happens(start(c2), Time)),
       holds_at(neg(active(c2)), Time),
       holds_at(neg(completed(b)), Time-1),
       holds_at(completed(b), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3103).

 /*  fix_axiom_head(Time) ->
       [not(axiom_uses(delta)), ->, not(axiom_uses(delta, Time))].
 */

 /*  [not(happens(start(c2), Time)), holds_at(neg(active(c2)), Time), holds_at(neg(completed(b)), Time6), holds_at(completed(b), Time), b(Time6, Time), ignore(Time-1==Time6)] ->
       ta(Time,
          tvs1=[Time, Time-1],
          tvs2=[Time, Time6],
          not(axiom_uses(delta, Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3103).
axiom(not(axiom_uses(delta, Time)),
   
    [ not(happens(start(c2), Time)),
      holds_at(neg(active(c2)), Time),
      holds_at(neg(completed(b)), Time6),
      holds_at(completed(b), Time),
      b(Time6, Time)
    ]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3107
% Delta: 
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3107).
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3107
% [time]
% !HoldsAt(Active(C3),time) &
% !HoldsAt(Completed(B),time-1) &
% HoldsAt(Completed(B),time) ->
% Happens(Start(C3),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3111
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3109).

 /*  axiom_uses(delta) ->
       ( holds_at(neg(active(c3)), Time), holds_at(neg(completed(b)), Time-1), holds_at(completed(b), Time)->happens(start(c3), Time)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3109).

 /*  happens(start(c3), Time) :-
       ( holds_at(neg(active(c3)), Time),
         holds_at(neg(completed(b)), Time-1),
         holds_at(completed(b), Time)
       ),
       axiom_uses(delta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3109).

 /*  [holds_at(neg(active(c3)), Time), holds_at(neg(completed(b)), Time1), holds_at(completed(b), Time), axiom_uses(delta, Time), b(Time1, Time), ignore(Time-1==Time1)] ->
       ta(Time,
          tvs1=[Time, Time-1],
          tvs2=[Time, Time1],
          happens(start(c3), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3109).
axiom(happens(start(c3), Time),
   
    [ holds_at(neg(active(c3)), Time),
      holds_at(neg(completed(b)), Time1),
      holds_at(completed(b), Time),
      axiom_uses(delta, Time),
      b(Time1, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3109).

 /*  not(holds_at(neg(active(c3)), Time)) :-
       ( holds_at(neg(completed(b)), Time-1),
         holds_at(completed(b), Time)
       ),
       not(happens(start(c3), Time)),
       axiom_uses(delta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3109).

 /*  [holds_at(neg(completed(b)), Time2), holds_at(completed(b), Time), not(happens(start(c3), Time)), axiom_uses(delta, Time), b(Time2, Time), ignore(Time-1==Time2)] ->
       ta(Time,
          tvs1=[Time, Time-1],
          tvs2=[Time, Time2],
          holds_at(active(c3), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3109).
axiom(holds_at(active(c3), Time),
   
    [ holds_at(neg(completed(b)), Time2),
      holds_at(completed(b), Time),
      not(happens(start(c3), Time)),
      axiom_uses(delta, Time),
      b(Time2, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3109).

 /*  not(holds_at(neg(completed(b)), Time-1)) :-
       holds_at(completed(b), Time),
       holds_at(neg(active(c3)), Time),
       not(happens(start(c3), Time)),
       axiom_uses(delta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3109).

 /*  [holds_at(completed(b), Time), holds_at(neg(active(c3)), Time), not(happens(start(c3), Time)), axiom_uses(delta, Axiom_uses_Ret), b(Time3, Time), ignore(Time-1==Time3)] ->
       ta(Time,
          tvs1=[Time, Time-1],
          tvs2=[Time, Time3],
          holds_at(completed(b), Time3)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3109).
axiom(holds_at(completed(b), Time3),
   
    [ holds_at(completed(b), Time),
      holds_at(neg(active(c3)), Time),
      not(happens(start(c3), Time)),
      axiom_uses(delta, Axiom_uses_Ret),
      b(Time3, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3109).

 /*  not(holds_at(completed(b), Time)) :-
       holds_at(neg(completed(b)), Time-1),
       holds_at(neg(active(c3)), Time),
       not(happens(start(c3), Time)),
       axiom_uses(delta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3109).

 /*  [holds_at(neg(completed(b)), Time5), holds_at(neg(active(c3)), Time), not(happens(start(c3), Time)), axiom_uses(delta, Time), b(Time5, Time), ignore(Time-1==Time5)] ->
       ta(Time,
          tvs1=[Time, Time-1],
          tvs2=[Time, Time5],
          holds_at(neg(completed(b)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3109).
axiom(holds_at(neg(completed(b)), Time),
   
    [ holds_at(neg(completed(b)), Time5),
      holds_at(neg(active(c3)), Time),
      not(happens(start(c3), Time)),
      axiom_uses(delta, Time),
      b(Time5, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3109).

 /*  not(axiom_uses(delta)) :-
       not(happens(start(c3), Time)),
       holds_at(neg(active(c3)), Time),
       holds_at(neg(completed(b)), Time-1),
       holds_at(completed(b), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3109).

 /*  fix_axiom_head(Time) ->
       [not(axiom_uses(delta)), ->, not(axiom_uses(delta, Time))].
 */

 /*  [not(happens(start(c3), Time)), holds_at(neg(active(c3)), Time), holds_at(neg(completed(b)), Time6), holds_at(completed(b), Time), b(Time6, Time), ignore(Time-1==Time6)] ->
       ta(Time,
          tvs1=[Time, Time-1],
          tvs2=[Time, Time6],
          not(axiom_uses(delta, Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3109).
axiom(not(axiom_uses(delta, Time)),
   
    [ not(happens(start(c3), Time)),
      holds_at(neg(active(c3)), Time),
      holds_at(neg(completed(b)), Time6),
      holds_at(completed(b), Time),
      b(Time6, Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3113
%; AND-join C1, C2, C3; D

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3114
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3115).
% Delta: 
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3114
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3115).
% [time]
% !HoldsAt(Active(D),time) &
% ((!HoldsAt(Completed(C1),time-1) & HoldsAt(Completed(C1),time))|
%  (!HoldsAt(Completed(C2),time-1) & HoldsAt(Completed(C2),time))|
%  (!HoldsAt(Completed(C3),time-1) & HoldsAt(Completed(C3),time))) &
% HoldsAt(Completed(C1),time) &
% HoldsAt(Completed(C2),time) &
% HoldsAt(Completed(C3),time) ->
% Happens(Start(D),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3122
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3115).

 /*  axiom_uses(delta) ->
       ( holds_at(neg(active(d)), Time), (holds_at(neg(completed(c1)), Time-1), holds_at(completed(c1), Time);holds_at(neg(completed(c2)), Time-1), holds_at(completed(c2), Time);holds_at(neg(completed(c3)), Time-1), holds_at(completed(c3), Time)), holds_at(completed(c1), Time), holds_at(completed(c2), Time), holds_at(completed(c3), Time)->happens(start(d), Time)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3115).

 /*  not(axiom_uses(delta)) :-
       not(happens(start(d), Time)),
       holds_at(neg(active(d)), Time),
       ( holds_at(completed(c1), Time),
         holds_at(completed(c2), Time),
         holds_at(completed(c3), Time)
       ),
       (   holds_at(neg(completed(c1)), Time-1),
           holds_at(completed(c1), Time)
       ;   holds_at(neg(completed(c2)), Time-1),
           holds_at(completed(c2), Time)
       ;   holds_at(neg(completed(c3)), Time-1),
           holds_at(completed(c3), Time)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3115).

 /*  fix_axiom_head(Time) ->
       [not(axiom_uses(delta)), ->, not(axiom_uses(delta, Time))].
 */

 /*  [not(happens(start(d), Time)), holds_at(neg(active(d)), Time), holds_at(completed(c1), Time), holds_at(completed(c2), Time), holds_at(completed(c3), Time),  (holds_at(neg(completed(c1)), Time1), holds_at(completed(c1), Time);holds_at(neg(completed(c2)), Time1), holds_at(completed(c2), Time);holds_at(neg(completed(c3)), Time1), holds_at(completed(c3), Time)), b(Time1, Time), ignore(Time-1==Time1)] ->
       ta(Time,
          tvs1=[Time, Time-1],
          tvs2=[Time, Time1],
          not(axiom_uses(delta, Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3115).
axiom(not(axiom_uses(delta, Time)),
   
    [ not(happens(start(d), Time)),
      holds_at(neg(active(d)), Time),
      holds_at(completed(c1), Time),
      holds_at(completed(c2), Time),
      holds_at(completed(c3), Time),
       (holds_at(neg(completed(c1)), Time1), holds_at(completed(c1), Time);holds_at(neg(completed(c2)), Time1), holds_at(completed(c2), Time);holds_at(neg(completed(c3)), Time1), holds_at(completed(c3), Time)),
      b(Time1, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3115).

 /*  happens(start(d), Time) :-
       ( holds_at(neg(active(d)), Time),
         ( holds_at(completed(c1), Time),
           holds_at(completed(c2), Time),
           holds_at(completed(c3), Time)
         ),
         (   holds_at(neg(completed(c1)), Time-1),
             holds_at(completed(c1), Time)
         ;   holds_at(neg(completed(c2)), Time-1),
             holds_at(completed(c2), Time)
         ;   holds_at(neg(completed(c3)), Time-1),
             holds_at(completed(c3), Time)
         )
       ),
       axiom_uses(delta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3115).

 /*  [holds_at(neg(active(d)), Time), holds_at(completed(c1), Time), holds_at(completed(c2), Time), holds_at(completed(c3), Time),  (holds_at(neg(completed(c1)), Time2), holds_at(completed(c1), Time);holds_at(neg(completed(c2)), Time2), holds_at(completed(c2), Time);holds_at(neg(completed(c3)), Time2), holds_at(completed(c3), Time)), axiom_uses(delta, Time), b(Time2, Time), ignore(Time-1==Time2)] ->
       ta(Time,
          tvs1=[Time, Time-1],
          tvs2=[Time, Time2],
          happens(start(d), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3115).
axiom(happens(start(d), Time),
   
    [ holds_at(neg(active(d)), Time),
      holds_at(completed(c1), Time),
      holds_at(completed(c2), Time),
      holds_at(completed(c3), Time),
       (holds_at(neg(completed(c1)), Time2), holds_at(completed(c1), Time);holds_at(neg(completed(c2)), Time2), holds_at(completed(c2), Time);holds_at(neg(completed(c3)), Time2), holds_at(completed(c3), Time)),
      axiom_uses(delta, Time),
      b(Time2, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3115).

 /*  not(holds_at(neg(active(d)), Time)) :-
       ( ( holds_at(completed(c1), Time),
           holds_at(completed(c2), Time),
           holds_at(completed(c3), Time)
         ),
         (   holds_at(neg(completed(c1)), Time-1),
             holds_at(completed(c1), Time)
         ;   holds_at(neg(completed(c2)), Time-1),
             holds_at(completed(c2), Time)
         ;   holds_at(neg(completed(c3)), Time-1),
             holds_at(completed(c3), Time)
         )
       ),
       not(happens(start(d), Time)),
       axiom_uses(delta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3115).

 /*  [holds_at(completed(c1), Time), holds_at(completed(c2), Time), holds_at(completed(c3), Time),  (holds_at(neg(completed(c1)), Time3), holds_at(completed(c1), Time);holds_at(neg(completed(c2)), Time3), holds_at(completed(c2), Time);holds_at(neg(completed(c3)), Time3), holds_at(completed(c3), Time)), not(happens(start(d), Time)), axiom_uses(delta, Time), b(Time3, Time), ignore(Time-1==Time3)] ->
       ta(Time,
          tvs1=[Time, Time-1],
          tvs2=[Time, Time3],
          holds_at(active(d), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3115).
axiom(holds_at(active(d), Time),
   
    [ holds_at(completed(c1), Time),
      holds_at(completed(c2), Time),
      holds_at(completed(c3), Time),
       (holds_at(neg(completed(c1)), Time3), holds_at(completed(c1), Time);holds_at(neg(completed(c2)), Time3), holds_at(completed(c2), Time);holds_at(neg(completed(c3)), Time3), holds_at(completed(c3), Time)),
      not(happens(start(d), Time)),
      axiom_uses(delta, Time),
      b(Time3, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3115).

 /*  not(holds_at(completed(c1), Time)) :-
       ( holds_at(completed(c2), Time),
         holds_at(completed(c3), Time)
       ),
       (   holds_at(neg(completed(c1)), Time-1),
           holds_at(completed(c1), Time)
       ;   holds_at(neg(completed(c2)), Time-1),
           holds_at(completed(c2), Time)
       ;   holds_at(neg(completed(c3)), Time-1),
           holds_at(completed(c3), Time)
       ),
       holds_at(neg(active(d)), Time),
       not(happens(start(d), Time)),
       axiom_uses(delta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3115).

 /*  [holds_at(completed(c2), Time), holds_at(completed(c3), Time),  (holds_at(neg(completed(c1)), Time4), holds_at(completed(c1), Time);holds_at(neg(completed(c2)), Time4), holds_at(completed(c2), Time);holds_at(neg(completed(c3)), Time4), holds_at(completed(c3), Time)), holds_at(neg(active(d)), Time), not(happens(start(d), Time)), axiom_uses(delta, Time), b(Time4, Time), ignore(Time-1==Time4)] ->
       ta(Time,
          tvs1=[Time, Time-1],
          tvs2=[Time, Time4],
          holds_at(neg(completed(c1)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3115).
axiom(holds_at(neg(completed(c1)), Time),
   
    [ holds_at(completed(c2), Time),
      holds_at(completed(c3), Time),
       (holds_at(neg(completed(c1)), Time4), holds_at(completed(c1), Time);holds_at(neg(completed(c2)), Time4), holds_at(completed(c2), Time);holds_at(neg(completed(c3)), Time4), holds_at(completed(c3), Time)),
      holds_at(neg(active(d)), Time),
      not(happens(start(d), Time)),
      axiom_uses(delta, Time),
      b(Time4, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3115).

 /*  not(holds_at(completed(c2), Time)) :-
       holds_at(completed(c3), Time),
       holds_at(completed(c1), Time),
       (   holds_at(neg(completed(c1)), Time-1),
           holds_at(completed(c1), Time)
       ;   holds_at(neg(completed(c2)), Time-1),
           holds_at(completed(c2), Time)
       ;   holds_at(neg(completed(c3)), Time-1),
           holds_at(completed(c3), Time)
       ),
       holds_at(neg(active(d)), Time),
       not(happens(start(d), Time)),
       axiom_uses(delta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3115).

 /*  [holds_at(completed(c3), Time), holds_at(completed(c1), Time),  (holds_at(neg(completed(c1)), Time5), holds_at(completed(c1), Time);holds_at(neg(completed(c2)), Time5), holds_at(completed(c2), Time);holds_at(neg(completed(c3)), Time5), holds_at(completed(c3), Time)), holds_at(neg(active(d)), Time), not(happens(start(d), Time)), axiom_uses(delta, Time), b(Time5, Time), ignore(Time-1==Time5)] ->
       ta(Time,
          tvs1=[Time, Time-1],
          tvs2=[Time, Time5],
          holds_at(neg(completed(c2)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3115).
axiom(holds_at(neg(completed(c2)), Time),
   
    [ holds_at(completed(c3), Time),
      holds_at(completed(c1), Time),
       (holds_at(neg(completed(c1)), Time5), holds_at(completed(c1), Time);holds_at(neg(completed(c2)), Time5), holds_at(completed(c2), Time);holds_at(neg(completed(c3)), Time5), holds_at(completed(c3), Time)),
      holds_at(neg(active(d)), Time),
      not(happens(start(d), Time)),
      axiom_uses(delta, Time),
      b(Time5, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3115).

 /*  not(holds_at(completed(c3), Time)) :-
       holds_at(completed(c2), Time),
       holds_at(completed(c1), Time),
       (   holds_at(neg(completed(c1)), Time-1),
           holds_at(completed(c1), Time)
       ;   holds_at(neg(completed(c2)), Time-1),
           holds_at(completed(c2), Time)
       ;   holds_at(neg(completed(c3)), Time-1),
           holds_at(completed(c3), Time)
       ),
       holds_at(neg(active(d)), Time),
       not(happens(start(d), Time)),
       axiom_uses(delta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3115).

 /*  [holds_at(completed(c2), Time), holds_at(completed(c1), Time),  (holds_at(neg(completed(c1)), Time6), holds_at(completed(c1), Time);holds_at(neg(completed(c2)), Time6), holds_at(completed(c2), Time);holds_at(neg(completed(c3)), Time6), holds_at(completed(c3), Time)), holds_at(neg(active(d)), Time), not(happens(start(d), Time)), axiom_uses(delta, Time), b(Time6, Time), ignore(Time-1==Time6)] ->
       ta(Time,
          tvs1=[Time, Time-1],
          tvs2=[Time, Time6],
          holds_at(neg(completed(c3)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3115).
axiom(holds_at(neg(completed(c3)), Time),
   
    [ holds_at(completed(c2), Time),
      holds_at(completed(c1), Time),
       (holds_at(neg(completed(c1)), Time6), holds_at(completed(c1), Time);holds_at(neg(completed(c2)), Time6), holds_at(completed(c2), Time);holds_at(neg(completed(c3)), Time6), holds_at(completed(c3), Time)),
      holds_at(neg(active(d)), Time),
      not(happens(start(d), Time)),
      axiom_uses(delta, Time),
      b(Time6, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3115).

 /*  not(holds_at(neg(completed(c1)), Time-1)) :-
       holds_at(completed(c1), Time),
       ( holds_at(completed(c1), Time),
         holds_at(completed(c2), Time),
         holds_at(completed(c3), Time)
       ),
       holds_at(neg(active(d)), Time),
       not(happens(start(d), Time)),
       axiom_uses(delta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3115).

 /*  [holds_at(completed(c1), Time), holds_at(completed(c1), Time), holds_at(completed(c2), Time), holds_at(completed(c3), Time), holds_at(neg(active(d)), Time), not(happens(start(d), Time)), axiom_uses(delta, Axiom_uses_Ret), b(Time7, Time), ignore(Time-1==Time7)] ->
       ta(Time,
          tvs1=[Time, Time-1],
          tvs2=[Time, Time7],
          holds_at(completed(c1), Time7)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3115).
axiom(holds_at(completed(c1), Time7),
   
    [ holds_at(completed(c1), Time),
      holds_at(completed(c1), Time),
      holds_at(completed(c2), Time),
      holds_at(completed(c3), Time),
      holds_at(neg(active(d)), Time),
      not(happens(start(d), Time)),
      axiom_uses(delta, Axiom_uses_Ret),
      b(Time7, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3115).

 /*  not(holds_at(completed(c1), Time)) :-
       holds_at(neg(completed(c1)), Time-1),
       ( holds_at(completed(c1), Time),
         holds_at(completed(c2), Time),
         holds_at(completed(c3), Time)
       ),
       holds_at(neg(active(d)), Time),
       not(happens(start(d), Time)),
       axiom_uses(delta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3115).

 /*  [holds_at(neg(completed(c1)), Time9), holds_at(completed(c1), Time), holds_at(completed(c2), Time), holds_at(completed(c3), Time), holds_at(neg(active(d)), Time), not(happens(start(d), Time)), axiom_uses(delta, Time), b(Time9, Time), ignore(Time-1==Time9)] ->
       ta(Time,
          tvs1=[Time, Time-1],
          tvs2=[Time, Time9],
          holds_at(neg(completed(c1)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3115).
axiom(holds_at(neg(completed(c1)), Time),
   
    [ holds_at(neg(completed(c1)), Time9),
      holds_at(completed(c1), Time),
      holds_at(completed(c2), Time),
      holds_at(completed(c3), Time),
      holds_at(neg(active(d)), Time),
      not(happens(start(d), Time)),
      axiom_uses(delta, Time),
      b(Time9, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3115).

 /*  not(holds_at(neg(completed(c2)), Time-1)) :-
       holds_at(completed(c2), Time),
       ( holds_at(completed(c1), Time),
         holds_at(completed(c2), Time),
         holds_at(completed(c3), Time)
       ),
       holds_at(neg(active(d)), Time),
       not(happens(start(d), Time)),
       axiom_uses(delta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3115).

 /*  [holds_at(completed(c2), Time), holds_at(completed(c1), Time), holds_at(completed(c2), Time), holds_at(completed(c3), Time), holds_at(neg(active(d)), Time), not(happens(start(d), Time)), axiom_uses(delta, Axiom_uses_Ret11), b(Time10, Time), ignore(Time-1==Time10)] ->
       ta(Time,
          tvs1=[Time, Time-1],
          tvs2=[Time, Time10],
          holds_at(completed(c2), Time10)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3115).
axiom(holds_at(completed(c2), Time10),
   
    [ holds_at(completed(c2), Time),
      holds_at(completed(c1), Time),
      holds_at(completed(c2), Time),
      holds_at(completed(c3), Time),
      holds_at(neg(active(d)), Time),
      not(happens(start(d), Time)),
      axiom_uses(delta, Axiom_uses_Ret11),
      b(Time10, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3115).

 /*  not(holds_at(completed(c2), Time)) :-
       holds_at(neg(completed(c2)), Time-1),
       ( holds_at(completed(c1), Time),
         holds_at(completed(c2), Time),
         holds_at(completed(c3), Time)
       ),
       holds_at(neg(active(d)), Time),
       not(happens(start(d), Time)),
       axiom_uses(delta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3115).

 /*  [holds_at(neg(completed(c2)), Time12), holds_at(completed(c1), Time), holds_at(completed(c2), Time), holds_at(completed(c3), Time), holds_at(neg(active(d)), Time), not(happens(start(d), Time)), axiom_uses(delta, Time), b(Time12, Time), ignore(Time-1==Time12)] ->
       ta(Time,
          tvs1=[Time, Time-1],
          tvs2=[Time, Time12],
          holds_at(neg(completed(c2)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3115).
axiom(holds_at(neg(completed(c2)), Time),
   
    [ holds_at(neg(completed(c2)), Time12),
      holds_at(completed(c1), Time),
      holds_at(completed(c2), Time),
      holds_at(completed(c3), Time),
      holds_at(neg(active(d)), Time),
      not(happens(start(d), Time)),
      axiom_uses(delta, Time),
      b(Time12, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3115).

 /*  not(holds_at(neg(completed(c3)), Time-1)) :-
       holds_at(completed(c3), Time),
       ( holds_at(completed(c1), Time),
         holds_at(completed(c2), Time),
         holds_at(completed(c3), Time)
       ),
       holds_at(neg(active(d)), Time),
       not(happens(start(d), Time)),
       axiom_uses(delta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3115).

 /*  [holds_at(completed(c3), Time), holds_at(completed(c1), Time), holds_at(completed(c2), Time), holds_at(completed(c3), Time), holds_at(neg(active(d)), Time), not(happens(start(d), Time)), axiom_uses(delta, Axiom_uses_Ret14), b(Time13, Time), ignore(Time-1==Time13)] ->
       ta(Time,
          tvs1=[Time, Time-1],
          tvs2=[Time, Time13],
          holds_at(completed(c3), Time13)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3115).
axiom(holds_at(completed(c3), Time13),
   
    [ holds_at(completed(c3), Time),
      holds_at(completed(c1), Time),
      holds_at(completed(c2), Time),
      holds_at(completed(c3), Time),
      holds_at(neg(active(d)), Time),
      not(happens(start(d), Time)),
      axiom_uses(delta, Axiom_uses_Ret14),
      b(Time13, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3115).

 /*  not(holds_at(completed(c3), Time)) :-
       holds_at(neg(completed(c3)), Time-1),
       ( holds_at(completed(c1), Time),
         holds_at(completed(c2), Time),
         holds_at(completed(c3), Time)
       ),
       holds_at(neg(active(d)), Time),
       not(happens(start(d), Time)),
       axiom_uses(delta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3115).

 /*  [holds_at(neg(completed(c3)), Time15), holds_at(completed(c1), Time), holds_at(completed(c2), Time), holds_at(completed(c3), Time), holds_at(neg(active(d)), Time), not(happens(start(d), Time)), axiom_uses(delta, Time), b(Time15, Time), ignore(Time-1==Time15)] ->
       ta(Time,
          tvs1=[Time, Time-1],
          tvs2=[Time, Time15],
          holds_at(neg(completed(c3)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3115).
axiom(holds_at(neg(completed(c3)), Time),
   
    [ holds_at(neg(completed(c3)), Time15),
      holds_at(completed(c1), Time),
      holds_at(completed(c2), Time),
      holds_at(completed(c3), Time),
      holds_at(neg(active(d)), Time),
      not(happens(start(d), Time)),
      axiom_uses(delta, Time),
      b(Time15, Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3124
%; D; XOR-split E1, E2, E3

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3125
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3126).
% Delta: 
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3125
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3126).
% [time]
% !HoldsAt(Active(E1),time) &
% !HoldsAt(Completed(D),time-1) &
% HoldsAt(Completed(D),time) &
% HoldsAt(Condition(E1C),time) ->
% Happens(Start(E1),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3130
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3126).

 /*  axiom_uses(delta) ->
       ( holds_at(neg(active(e1)), Time), holds_at(neg(completed(d)), Time-1), holds_at(completed(d), Time), holds_at(condition(e1c), Time)->happens(start(e1), Time)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3126).

 /*  happens(start(e1), Time) :-
       ( holds_at(neg(active(e1)), Time),
         holds_at(neg(completed(d)), Time-1),
         holds_at(completed(d), Time),
         holds_at(condition(e1c), Time)
       ),
       axiom_uses(delta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3126).

 /*  [holds_at(neg(active(e1)), Time), holds_at(neg(completed(d)), Time1), holds_at(completed(d), Time), holds_at(condition(e1c), Time), axiom_uses(delta, Time), b(Time1, Time), ignore(Time-1==Time1)] ->
       ta(Time,
          tvs1=[Time, Time-1],
          tvs2=[Time, Time1],
          happens(start(e1), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3126).
axiom(happens(start(e1), Time),
   
    [ holds_at(neg(active(e1)), Time),
      holds_at(neg(completed(d)), Time1),
      holds_at(completed(d), Time),
      holds_at(condition(e1c), Time),
      axiom_uses(delta, Time),
      b(Time1, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3126).

 /*  not(holds_at(neg(active(e1)), Time)) :-
       ( holds_at(neg(completed(d)), Time-1),
         holds_at(completed(d), Time),
         holds_at(condition(e1c), Time)
       ),
       not(happens(start(e1), Time)),
       axiom_uses(delta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3126).

 /*  [holds_at(neg(completed(d)), Time2), holds_at(completed(d), Time), holds_at(condition(e1c), Time), not(happens(start(e1), Time)), axiom_uses(delta, Time), b(Time2, Time), ignore(Time-1==Time2)] ->
       ta(Time,
          tvs1=[Time, Time-1],
          tvs2=[Time, Time2],
          holds_at(active(e1), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3126).
axiom(holds_at(active(e1), Time),
   
    [ holds_at(neg(completed(d)), Time2),
      holds_at(completed(d), Time),
      holds_at(condition(e1c), Time),
      not(happens(start(e1), Time)),
      axiom_uses(delta, Time),
      b(Time2, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3126).

 /*  not(holds_at(neg(completed(d)), Time-1)) :-
       ( holds_at(completed(d), Time),
         holds_at(condition(e1c), Time)
       ),
       holds_at(neg(active(e1)), Time),
       not(happens(start(e1), Time)),
       axiom_uses(delta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3126).

 /*  [holds_at(completed(d), Time), holds_at(condition(e1c), Time), holds_at(neg(active(e1)), Time), not(happens(start(e1), Time)), axiom_uses(delta, Axiom_uses_Ret), b(Time3, Time), ignore(Time-1==Time3)] ->
       ta(Time,
          tvs1=[Time, Time-1],
          tvs2=[Time, Time3],
          holds_at(completed(d), Time3)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3126).
axiom(holds_at(completed(d), Time3),
   
    [ holds_at(completed(d), Time),
      holds_at(condition(e1c), Time),
      holds_at(neg(active(e1)), Time),
      not(happens(start(e1), Time)),
      axiom_uses(delta, Axiom_uses_Ret),
      b(Time3, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3126).

 /*  not(holds_at(completed(d), Time)) :-
       holds_at(condition(e1c), Time),
       holds_at(neg(completed(d)), Time-1),
       holds_at(neg(active(e1)), Time),
       not(happens(start(e1), Time)),
       axiom_uses(delta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3126).

 /*  [holds_at(condition(e1c), Time), holds_at(neg(completed(d)), Time5), holds_at(neg(active(e1)), Time), not(happens(start(e1), Time)), axiom_uses(delta, Time), b(Time5, Time), ignore(Time-1==Time5)] ->
       ta(Time,
          tvs1=[Time, Time-1],
          tvs2=[Time, Time5],
          holds_at(neg(completed(d)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3126).
axiom(holds_at(neg(completed(d)), Time),
   
    [ holds_at(condition(e1c), Time),
      holds_at(neg(completed(d)), Time5),
      holds_at(neg(active(e1)), Time),
      not(happens(start(e1), Time)),
      axiom_uses(delta, Time),
      b(Time5, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3126).

 /*  not(holds_at(condition(e1c), Time)) :-
       holds_at(completed(d), Time),
       holds_at(neg(completed(d)), Time-1),
       holds_at(neg(active(e1)), Time),
       not(happens(start(e1), Time)),
       axiom_uses(delta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3126).

 /*  [holds_at(completed(d), Time), holds_at(neg(completed(d)), Time6), holds_at(neg(active(e1)), Time), not(happens(start(e1), Time)), axiom_uses(delta, Time), b(Time6, Time), ignore(Time-1==Time6)] ->
       ta(Time,
          tvs1=[Time, Time-1],
          tvs2=[Time, Time6],
          holds_at(neg(condition(e1c)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3126).
axiom(holds_at(neg(condition(e1c)), Time),
   
    [ holds_at(completed(d), Time),
      holds_at(neg(completed(d)), Time6),
      holds_at(neg(active(e1)), Time),
      not(happens(start(e1), Time)),
      axiom_uses(delta, Time),
      b(Time6, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3126).

 /*  not(axiom_uses(delta)) :-
       not(happens(start(e1), Time)),
       holds_at(neg(active(e1)), Time),
       holds_at(neg(completed(d)), Time-1),
       holds_at(completed(d), Time),
       holds_at(condition(e1c), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3126).

 /*  fix_axiom_head(Time) ->
       [not(axiom_uses(delta)), ->, not(axiom_uses(delta, Time))].
 */

 /*  [not(happens(start(e1), Time)), holds_at(neg(active(e1)), Time), holds_at(neg(completed(d)), Time7), holds_at(completed(d), Time), holds_at(condition(e1c), Time), b(Time7, Time), ignore(Time-1==Time7)] ->
       ta(Time,
          tvs1=[Time, Time-1],
          tvs2=[Time, Time7],
          not(axiom_uses(delta, Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3126).
axiom(not(axiom_uses(delta, Time)),
   
    [ not(happens(start(e1), Time)),
      holds_at(neg(active(e1)), Time),
      holds_at(neg(completed(d)), Time7),
      holds_at(completed(d), Time),
      holds_at(condition(e1c), Time),
      b(Time7, Time)
    ]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3132
% Delta: 
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3132).
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3132
% [time]
% !HoldsAt(Active(E2),time) &
% !HoldsAt(Completed(D),time-1) &
% HoldsAt(Completed(D),time) &
% HoldsAt(Condition(E2C),time) ->
% Happens(Start(E2),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3137
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3134).

 /*  axiom_uses(delta) ->
       ( holds_at(neg(active(e2)), Time), holds_at(neg(completed(d)), Time-1), holds_at(completed(d), Time), holds_at(condition(e2c), Time)->happens(start(e2), Time)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3134).

 /*  happens(start(e2), Time) :-
       ( holds_at(neg(active(e2)), Time),
         holds_at(neg(completed(d)), Time-1),
         holds_at(completed(d), Time),
         holds_at(condition(e2c), Time)
       ),
       axiom_uses(delta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3134).

 /*  [holds_at(neg(active(e2)), Time), holds_at(neg(completed(d)), Time1), holds_at(completed(d), Time), holds_at(condition(e2c), Time), axiom_uses(delta, Time), b(Time1, Time), ignore(Time-1==Time1)] ->
       ta(Time,
          tvs1=[Time, Time-1],
          tvs2=[Time, Time1],
          happens(start(e2), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3134).
axiom(happens(start(e2), Time),
   
    [ holds_at(neg(active(e2)), Time),
      holds_at(neg(completed(d)), Time1),
      holds_at(completed(d), Time),
      holds_at(condition(e2c), Time),
      axiom_uses(delta, Time),
      b(Time1, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3134).

 /*  not(holds_at(neg(active(e2)), Time)) :-
       ( holds_at(neg(completed(d)), Time-1),
         holds_at(completed(d), Time),
         holds_at(condition(e2c), Time)
       ),
       not(happens(start(e2), Time)),
       axiom_uses(delta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3134).

 /*  [holds_at(neg(completed(d)), Time2), holds_at(completed(d), Time), holds_at(condition(e2c), Time), not(happens(start(e2), Time)), axiom_uses(delta, Time), b(Time2, Time), ignore(Time-1==Time2)] ->
       ta(Time,
          tvs1=[Time, Time-1],
          tvs2=[Time, Time2],
          holds_at(active(e2), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3134).
axiom(holds_at(active(e2), Time),
   
    [ holds_at(neg(completed(d)), Time2),
      holds_at(completed(d), Time),
      holds_at(condition(e2c), Time),
      not(happens(start(e2), Time)),
      axiom_uses(delta, Time),
      b(Time2, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3134).

 /*  not(holds_at(neg(completed(d)), Time-1)) :-
       ( holds_at(completed(d), Time),
         holds_at(condition(e2c), Time)
       ),
       holds_at(neg(active(e2)), Time),
       not(happens(start(e2), Time)),
       axiom_uses(delta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3134).

 /*  [holds_at(completed(d), Time), holds_at(condition(e2c), Time), holds_at(neg(active(e2)), Time), not(happens(start(e2), Time)), axiom_uses(delta, Axiom_uses_Ret), b(Time3, Time), ignore(Time-1==Time3)] ->
       ta(Time,
          tvs1=[Time, Time-1],
          tvs2=[Time, Time3],
          holds_at(completed(d), Time3)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3134).
axiom(holds_at(completed(d), Time3),
   
    [ holds_at(completed(d), Time),
      holds_at(condition(e2c), Time),
      holds_at(neg(active(e2)), Time),
      not(happens(start(e2), Time)),
      axiom_uses(delta, Axiom_uses_Ret),
      b(Time3, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3134).

 /*  not(holds_at(completed(d), Time)) :-
       holds_at(condition(e2c), Time),
       holds_at(neg(completed(d)), Time-1),
       holds_at(neg(active(e2)), Time),
       not(happens(start(e2), Time)),
       axiom_uses(delta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3134).

 /*  [holds_at(condition(e2c), Time), holds_at(neg(completed(d)), Time5), holds_at(neg(active(e2)), Time), not(happens(start(e2), Time)), axiom_uses(delta, Time), b(Time5, Time), ignore(Time-1==Time5)] ->
       ta(Time,
          tvs1=[Time, Time-1],
          tvs2=[Time, Time5],
          holds_at(neg(completed(d)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3134).
axiom(holds_at(neg(completed(d)), Time),
   
    [ holds_at(condition(e2c), Time),
      holds_at(neg(completed(d)), Time5),
      holds_at(neg(active(e2)), Time),
      not(happens(start(e2), Time)),
      axiom_uses(delta, Time),
      b(Time5, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3134).

 /*  not(holds_at(condition(e2c), Time)) :-
       holds_at(completed(d), Time),
       holds_at(neg(completed(d)), Time-1),
       holds_at(neg(active(e2)), Time),
       not(happens(start(e2), Time)),
       axiom_uses(delta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3134).

 /*  [holds_at(completed(d), Time), holds_at(neg(completed(d)), Time6), holds_at(neg(active(e2)), Time), not(happens(start(e2), Time)), axiom_uses(delta, Time), b(Time6, Time), ignore(Time-1==Time6)] ->
       ta(Time,
          tvs1=[Time, Time-1],
          tvs2=[Time, Time6],
          holds_at(neg(condition(e2c)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3134).
axiom(holds_at(neg(condition(e2c)), Time),
   
    [ holds_at(completed(d), Time),
      holds_at(neg(completed(d)), Time6),
      holds_at(neg(active(e2)), Time),
      not(happens(start(e2), Time)),
      axiom_uses(delta, Time),
      b(Time6, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3134).

 /*  not(axiom_uses(delta)) :-
       not(happens(start(e2), Time)),
       holds_at(neg(active(e2)), Time),
       holds_at(neg(completed(d)), Time-1),
       holds_at(completed(d), Time),
       holds_at(condition(e2c), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3134).

 /*  fix_axiom_head(Time) ->
       [not(axiom_uses(delta)), ->, not(axiom_uses(delta, Time))].
 */

 /*  [not(happens(start(e2), Time)), holds_at(neg(active(e2)), Time), holds_at(neg(completed(d)), Time7), holds_at(completed(d), Time), holds_at(condition(e2c), Time), b(Time7, Time), ignore(Time-1==Time7)] ->
       ta(Time,
          tvs1=[Time, Time-1],
          tvs2=[Time, Time7],
          not(axiom_uses(delta, Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3134).
axiom(not(axiom_uses(delta, Time)),
   
    [ not(happens(start(e2), Time)),
      holds_at(neg(active(e2)), Time),
      holds_at(neg(completed(d)), Time7),
      holds_at(completed(d), Time),
      holds_at(condition(e2c), Time),
      b(Time7, Time)
    ]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3139
% Delta: 
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3139).
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3139
% [time]
% !HoldsAt(Active(E3),time) &
% !HoldsAt(Completed(D),time-1) &
% HoldsAt(Completed(D),time) &
% HoldsAt(Condition(E3C),time) ->
% Happens(Start(E3),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3144
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3141).

 /*  axiom_uses(delta) ->
       ( holds_at(neg(active(e3)), Time), holds_at(neg(completed(d)), Time-1), holds_at(completed(d), Time), holds_at(condition(e3c), Time)->happens(start(e3), Time)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3141).

 /*  happens(start(e3), Time) :-
       ( holds_at(neg(active(e3)), Time),
         holds_at(neg(completed(d)), Time-1),
         holds_at(completed(d), Time),
         holds_at(condition(e3c), Time)
       ),
       axiom_uses(delta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3141).

 /*  [holds_at(neg(active(e3)), Time), holds_at(neg(completed(d)), Time1), holds_at(completed(d), Time), holds_at(condition(e3c), Time), axiom_uses(delta, Time), b(Time1, Time), ignore(Time-1==Time1)] ->
       ta(Time,
          tvs1=[Time, Time-1],
          tvs2=[Time, Time1],
          happens(start(e3), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3141).
axiom(happens(start(e3), Time),
   
    [ holds_at(neg(active(e3)), Time),
      holds_at(neg(completed(d)), Time1),
      holds_at(completed(d), Time),
      holds_at(condition(e3c), Time),
      axiom_uses(delta, Time),
      b(Time1, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3141).

 /*  not(holds_at(neg(active(e3)), Time)) :-
       ( holds_at(neg(completed(d)), Time-1),
         holds_at(completed(d), Time),
         holds_at(condition(e3c), Time)
       ),
       not(happens(start(e3), Time)),
       axiom_uses(delta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3141).

 /*  [holds_at(neg(completed(d)), Time2), holds_at(completed(d), Time), holds_at(condition(e3c), Time), not(happens(start(e3), Time)), axiom_uses(delta, Time), b(Time2, Time), ignore(Time-1==Time2)] ->
       ta(Time,
          tvs1=[Time, Time-1],
          tvs2=[Time, Time2],
          holds_at(active(e3), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3141).
axiom(holds_at(active(e3), Time),
   
    [ holds_at(neg(completed(d)), Time2),
      holds_at(completed(d), Time),
      holds_at(condition(e3c), Time),
      not(happens(start(e3), Time)),
      axiom_uses(delta, Time),
      b(Time2, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3141).

 /*  not(holds_at(neg(completed(d)), Time-1)) :-
       ( holds_at(completed(d), Time),
         holds_at(condition(e3c), Time)
       ),
       holds_at(neg(active(e3)), Time),
       not(happens(start(e3), Time)),
       axiom_uses(delta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3141).

 /*  [holds_at(completed(d), Time), holds_at(condition(e3c), Time), holds_at(neg(active(e3)), Time), not(happens(start(e3), Time)), axiom_uses(delta, Axiom_uses_Ret), b(Time3, Time), ignore(Time-1==Time3)] ->
       ta(Time,
          tvs1=[Time, Time-1],
          tvs2=[Time, Time3],
          holds_at(completed(d), Time3)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3141).
axiom(holds_at(completed(d), Time3),
   
    [ holds_at(completed(d), Time),
      holds_at(condition(e3c), Time),
      holds_at(neg(active(e3)), Time),
      not(happens(start(e3), Time)),
      axiom_uses(delta, Axiom_uses_Ret),
      b(Time3, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3141).

 /*  not(holds_at(completed(d), Time)) :-
       holds_at(condition(e3c), Time),
       holds_at(neg(completed(d)), Time-1),
       holds_at(neg(active(e3)), Time),
       not(happens(start(e3), Time)),
       axiom_uses(delta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3141).

 /*  [holds_at(condition(e3c), Time), holds_at(neg(completed(d)), Time5), holds_at(neg(active(e3)), Time), not(happens(start(e3), Time)), axiom_uses(delta, Time), b(Time5, Time), ignore(Time-1==Time5)] ->
       ta(Time,
          tvs1=[Time, Time-1],
          tvs2=[Time, Time5],
          holds_at(neg(completed(d)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3141).
axiom(holds_at(neg(completed(d)), Time),
   
    [ holds_at(condition(e3c), Time),
      holds_at(neg(completed(d)), Time5),
      holds_at(neg(active(e3)), Time),
      not(happens(start(e3), Time)),
      axiom_uses(delta, Time),
      b(Time5, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3141).

 /*  not(holds_at(condition(e3c), Time)) :-
       holds_at(completed(d), Time),
       holds_at(neg(completed(d)), Time-1),
       holds_at(neg(active(e3)), Time),
       not(happens(start(e3), Time)),
       axiom_uses(delta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3141).

 /*  [holds_at(completed(d), Time), holds_at(neg(completed(d)), Time6), holds_at(neg(active(e3)), Time), not(happens(start(e3), Time)), axiom_uses(delta, Time), b(Time6, Time), ignore(Time-1==Time6)] ->
       ta(Time,
          tvs1=[Time, Time-1],
          tvs2=[Time, Time6],
          holds_at(neg(condition(e3c)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3141).
axiom(holds_at(neg(condition(e3c)), Time),
   
    [ holds_at(completed(d), Time),
      holds_at(neg(completed(d)), Time6),
      holds_at(neg(active(e3)), Time),
      not(happens(start(e3), Time)),
      axiom_uses(delta, Time),
      b(Time6, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3141).

 /*  not(axiom_uses(delta)) :-
       not(happens(start(e3), Time)),
       holds_at(neg(active(e3)), Time),
       holds_at(neg(completed(d)), Time-1),
       holds_at(completed(d), Time),
       holds_at(condition(e3c), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3141).

 /*  fix_axiom_head(Time) ->
       [not(axiom_uses(delta)), ->, not(axiom_uses(delta, Time))].
 */

 /*  [not(happens(start(e3), Time)), holds_at(neg(active(e3)), Time), holds_at(neg(completed(d)), Time7), holds_at(completed(d), Time), holds_at(condition(e3c), Time), b(Time7, Time), ignore(Time-1==Time7)] ->
       ta(Time,
          tvs1=[Time, Time-1],
          tvs2=[Time, Time7],
          not(axiom_uses(delta, Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3141).
axiom(not(axiom_uses(delta, Time)),
   
    [ not(happens(start(e3), Time)),
      holds_at(neg(active(e3)), Time),
      holds_at(neg(completed(d)), Time7),
      holds_at(completed(d), Time),
      holds_at(condition(e3c), Time),
      b(Time7, Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3146
%; XOR-join E1, E2, E3; F

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3147
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3148).
% Delta: 
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3147
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3148).
% [time]
% !HoldsAt(Active(F),time) &
% ((!HoldsAt(Completed(E1),time-1) & HoldsAt(Completed(E1),time))|
%  (!HoldsAt(Completed(E2),time-1) & HoldsAt(Completed(E2),time))|
%  (!HoldsAt(Completed(E3),time-1) & HoldsAt(Completed(E3),time))) ->
% Happens(Start(F),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3152
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3148).

 /*  axiom_uses(delta) ->
       ( holds_at(neg(active(f)), Time), (holds_at(neg(completed(e1)), Time-1), holds_at(completed(e1), Time);holds_at(neg(completed(e2)), Time-1), holds_at(completed(e2), Time);holds_at(neg(completed(e3)), Time-1), holds_at(completed(e3), Time))->happens(start(f), Time)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3148).

 /*  not(axiom_uses(delta)) :-
       not(happens(start(f), Time)),
       holds_at(neg(active(f)), Time),
       (   holds_at(neg(completed(e1)), Time-1),
           holds_at(completed(e1), Time)
       ;   holds_at(neg(completed(e2)), Time-1),
           holds_at(completed(e2), Time)
       ;   holds_at(neg(completed(e3)), Time-1),
           holds_at(completed(e3), Time)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3148).

 /*  fix_axiom_head(Time) ->
       [not(axiom_uses(delta)), ->, not(axiom_uses(delta, Time))].
 */

 /*  [not(happens(start(f), Time)), holds_at(neg(active(f)), Time),  (holds_at(neg(completed(e1)), Time1), holds_at(completed(e1), Time);holds_at(neg(completed(e2)), Time1), holds_at(completed(e2), Time);holds_at(neg(completed(e3)), Time1), holds_at(completed(e3), Time)), b(Time1, Time), ignore(Time-1==Time1)] ->
       ta(Time,
          tvs1=[Time, Time-1],
          tvs2=[Time, Time1],
          not(axiom_uses(delta, Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3148).
axiom(not(axiom_uses(delta, Time)),
   
    [ not(happens(start(f), Time)),
      holds_at(neg(active(f)), Time),
       (holds_at(neg(completed(e1)), Time1), holds_at(completed(e1), Time);holds_at(neg(completed(e2)), Time1), holds_at(completed(e2), Time);holds_at(neg(completed(e3)), Time1), holds_at(completed(e3), Time)),
      b(Time1, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3148).

 /*  happens(start(f), Time) :-
       ( holds_at(neg(active(f)), Time),
         (   holds_at(neg(completed(e1)), Time-1),
             holds_at(completed(e1), Time)
         ;   holds_at(neg(completed(e2)), Time-1),
             holds_at(completed(e2), Time)
         ;   holds_at(neg(completed(e3)), Time-1),
             holds_at(completed(e3), Time)
         )
       ),
       axiom_uses(delta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3148).

 /*  [holds_at(neg(active(f)), Time),  (holds_at(neg(completed(e1)), Time2), holds_at(completed(e1), Time);holds_at(neg(completed(e2)), Time2), holds_at(completed(e2), Time);holds_at(neg(completed(e3)), Time2), holds_at(completed(e3), Time)), axiom_uses(delta, Time), b(Time2, Time), ignore(Time-1==Time2)] ->
       ta(Time,
          tvs1=[Time, Time-1],
          tvs2=[Time, Time2],
          happens(start(f), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3148).
axiom(happens(start(f), Time),
   
    [ holds_at(neg(active(f)), Time),
       (holds_at(neg(completed(e1)), Time2), holds_at(completed(e1), Time);holds_at(neg(completed(e2)), Time2), holds_at(completed(e2), Time);holds_at(neg(completed(e3)), Time2), holds_at(completed(e3), Time)),
      axiom_uses(delta, Time),
      b(Time2, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3148).

 /*  not(holds_at(neg(active(f)), Time)) :-
       (   holds_at(neg(completed(e1)), Time-1),
           holds_at(completed(e1), Time)
       ;   holds_at(neg(completed(e2)), Time-1),
           holds_at(completed(e2), Time)
       ;   holds_at(neg(completed(e3)), Time-1),
           holds_at(completed(e3), Time)
       ),
       not(happens(start(f), Time)),
       axiom_uses(delta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3148).

 /*  [(holds_at(neg(completed(e1)), Time3), holds_at(completed(e1), Time);holds_at(neg(completed(e2)), Time3), holds_at(completed(e2), Time);holds_at(neg(completed(e3)), Time3), holds_at(completed(e3), Time)), not(happens(start(f), Time)), axiom_uses(delta, Time), b(Time3, Time), ignore(Time-1==Time3)] ->
       ta(Time,
          tvs1=[Time, Time-1],
          tvs2=[Time, Time3],
          holds_at(active(f), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3148).
axiom(holds_at(active(f), Time),
   
    [  (holds_at(neg(completed(e1)), Time3), holds_at(completed(e1), Time);holds_at(neg(completed(e2)), Time3), holds_at(completed(e2), Time);holds_at(neg(completed(e3)), Time3), holds_at(completed(e3), Time)),
      not(happens(start(f), Time)),
      axiom_uses(delta, Time),
      b(Time3, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3148).

 /*  not(holds_at(neg(completed(e1)), Time-1)) :-
       holds_at(completed(e1), Time),
       holds_at(neg(active(f)), Time),
       not(happens(start(f), Time)),
       axiom_uses(delta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3148).

 /*  [holds_at(completed(e1), Time), holds_at(neg(active(f)), Time), not(happens(start(f), Time)), axiom_uses(delta, Axiom_uses_Ret), b(Time4, Time), ignore(Time-1==Time4)] ->
       ta(Time,
          tvs1=[Time, Time-1],
          tvs2=[Time, Time4],
          holds_at(completed(e1), Time4)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3148).
axiom(holds_at(completed(e1), Time4),
   
    [ holds_at(completed(e1), Time),
      holds_at(neg(active(f)), Time),
      not(happens(start(f), Time)),
      axiom_uses(delta, Axiom_uses_Ret),
      b(Time4, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3148).

 /*  not(holds_at(completed(e1), Time)) :-
       holds_at(neg(completed(e1)), Time-1),
       holds_at(neg(active(f)), Time),
       not(happens(start(f), Time)),
       axiom_uses(delta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3148).

 /*  [holds_at(neg(completed(e1)), Time6), holds_at(neg(active(f)), Time), not(happens(start(f), Time)), axiom_uses(delta, Time), b(Time6, Time), ignore(Time-1==Time6)] ->
       ta(Time,
          tvs1=[Time, Time-1],
          tvs2=[Time, Time6],
          holds_at(neg(completed(e1)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3148).
axiom(holds_at(neg(completed(e1)), Time),
   
    [ holds_at(neg(completed(e1)), Time6),
      holds_at(neg(active(f)), Time),
      not(happens(start(f), Time)),
      axiom_uses(delta, Time),
      b(Time6, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3148).

 /*  not(holds_at(neg(completed(e2)), Time-1)) :-
       holds_at(completed(e2), Time),
       holds_at(neg(active(f)), Time),
       not(happens(start(f), Time)),
       axiom_uses(delta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3148).

 /*  [holds_at(completed(e2), Time), holds_at(neg(active(f)), Time), not(happens(start(f), Time)), axiom_uses(delta, Axiom_uses_Ret8), b(Time7, Time), ignore(Time-1==Time7)] ->
       ta(Time,
          tvs1=[Time, Time-1],
          tvs2=[Time, Time7],
          holds_at(completed(e2), Time7)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3148).
axiom(holds_at(completed(e2), Time7),
   
    [ holds_at(completed(e2), Time),
      holds_at(neg(active(f)), Time),
      not(happens(start(f), Time)),
      axiom_uses(delta, Axiom_uses_Ret8),
      b(Time7, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3148).

 /*  not(holds_at(completed(e2), Time)) :-
       holds_at(neg(completed(e2)), Time-1),
       holds_at(neg(active(f)), Time),
       not(happens(start(f), Time)),
       axiom_uses(delta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3148).

 /*  [holds_at(neg(completed(e2)), Time9), holds_at(neg(active(f)), Time), not(happens(start(f), Time)), axiom_uses(delta, Time), b(Time9, Time), ignore(Time-1==Time9)] ->
       ta(Time,
          tvs1=[Time, Time-1],
          tvs2=[Time, Time9],
          holds_at(neg(completed(e2)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3148).
axiom(holds_at(neg(completed(e2)), Time),
   
    [ holds_at(neg(completed(e2)), Time9),
      holds_at(neg(active(f)), Time),
      not(happens(start(f), Time)),
      axiom_uses(delta, Time),
      b(Time9, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3148).

 /*  not(holds_at(neg(completed(e3)), Time-1)) :-
       holds_at(completed(e3), Time),
       holds_at(neg(active(f)), Time),
       not(happens(start(f), Time)),
       axiom_uses(delta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3148).

 /*  [holds_at(completed(e3), Time), holds_at(neg(active(f)), Time), not(happens(start(f), Time)), axiom_uses(delta, Axiom_uses_Ret11), b(Time10, Time), ignore(Time-1==Time10)] ->
       ta(Time,
          tvs1=[Time, Time-1],
          tvs2=[Time, Time10],
          holds_at(completed(e3), Time10)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3148).
axiom(holds_at(completed(e3), Time10),
   
    [ holds_at(completed(e3), Time),
      holds_at(neg(active(f)), Time),
      not(happens(start(f), Time)),
      axiom_uses(delta, Axiom_uses_Ret11),
      b(Time10, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3148).

 /*  not(holds_at(completed(e3), Time)) :-
       holds_at(neg(completed(e3)), Time-1),
       holds_at(neg(active(f)), Time),
       not(happens(start(f), Time)),
       axiom_uses(delta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3148).

 /*  [holds_at(neg(completed(e3)), Time12), holds_at(neg(active(f)), Time), not(happens(start(f), Time)), axiom_uses(delta, Time), b(Time12, Time), ignore(Time-1==Time12)] ->
       ta(Time,
          tvs1=[Time, Time-1],
          tvs2=[Time, Time12],
          holds_at(neg(completed(e3)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3148).
axiom(holds_at(neg(completed(e3)), Time),
   
    [ holds_at(neg(completed(e3)), Time12),
      holds_at(neg(active(f)), Time),
      not(happens(start(f), Time)),
      axiom_uses(delta, Time),
      b(Time12, Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3154
%; while (FC) F; G

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3155
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3156).
% Delta: 
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3155
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3156).
% [time]
% !HoldsAt(Active(F),time) &
% !HoldsAt(Completed(F),time-1) &
% HoldsAt(Completed(F),time) &
% HoldsAt(Condition(FC),time) ->
% Happens(Start(F),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3160
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3156).

 /*  axiom_uses(delta) ->
       ( holds_at(neg(active(f)), Time), holds_at(neg(completed(f)), Time-1), holds_at(completed(f), Time), holds_at(condition(fc), Time)->happens(start(f), Time)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3156).

 /*  happens(start(f), Time) :-
       ( holds_at(neg(active(f)), Time),
         holds_at(neg(completed(f)), Time-1),
         holds_at(completed(f), Time),
         holds_at(condition(fc), Time)
       ),
       axiom_uses(delta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3156).

 /*  [holds_at(neg(active(f)), Time), holds_at(neg(completed(f)), Time1), holds_at(completed(f), Time), holds_at(condition(fc), Time), axiom_uses(delta, Time), b(Time1, Time), ignore(Time-1==Time1)] ->
       ta(Time,
          tvs1=[Time, Time-1],
          tvs2=[Time, Time1],
          happens(start(f), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3156).
axiom(happens(start(f), Time),
   
    [ holds_at(neg(active(f)), Time),
      holds_at(neg(completed(f)), Time1),
      holds_at(completed(f), Time),
      holds_at(condition(fc), Time),
      axiom_uses(delta, Time),
      b(Time1, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3156).

 /*  not(holds_at(neg(active(f)), Time)) :-
       ( holds_at(neg(completed(f)), Time-1),
         holds_at(completed(f), Time),
         holds_at(condition(fc), Time)
       ),
       not(happens(start(f), Time)),
       axiom_uses(delta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3156).

 /*  [holds_at(neg(completed(f)), Time2), holds_at(completed(f), Time), holds_at(condition(fc), Time), not(happens(start(f), Time)), axiom_uses(delta, Time), b(Time2, Time), ignore(Time-1==Time2)] ->
       ta(Time,
          tvs1=[Time, Time-1],
          tvs2=[Time, Time2],
          holds_at(active(f), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3156).
axiom(holds_at(active(f), Time),
   
    [ holds_at(neg(completed(f)), Time2),
      holds_at(completed(f), Time),
      holds_at(condition(fc), Time),
      not(happens(start(f), Time)),
      axiom_uses(delta, Time),
      b(Time2, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3156).

 /*  not(holds_at(neg(completed(f)), Time-1)) :-
       ( holds_at(completed(f), Time),
         holds_at(condition(fc), Time)
       ),
       holds_at(neg(active(f)), Time),
       not(happens(start(f), Time)),
       axiom_uses(delta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3156).

 /*  [holds_at(completed(f), Time), holds_at(condition(fc), Time), holds_at(neg(active(f)), Time), not(happens(start(f), Time)), axiom_uses(delta, Axiom_uses_Ret), b(Time3, Time), ignore(Time-1==Time3)] ->
       ta(Time,
          tvs1=[Time, Time-1],
          tvs2=[Time, Time3],
          holds_at(completed(f), Time3)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3156).
axiom(holds_at(completed(f), Time3),
   
    [ holds_at(completed(f), Time),
      holds_at(condition(fc), Time),
      holds_at(neg(active(f)), Time),
      not(happens(start(f), Time)),
      axiom_uses(delta, Axiom_uses_Ret),
      b(Time3, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3156).

 /*  not(holds_at(completed(f), Time)) :-
       holds_at(condition(fc), Time),
       holds_at(neg(completed(f)), Time-1),
       holds_at(neg(active(f)), Time),
       not(happens(start(f), Time)),
       axiom_uses(delta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3156).

 /*  [holds_at(condition(fc), Time), holds_at(neg(completed(f)), Time5), holds_at(neg(active(f)), Time), not(happens(start(f), Time)), axiom_uses(delta, Time), b(Time5, Time), ignore(Time-1==Time5)] ->
       ta(Time,
          tvs1=[Time, Time-1],
          tvs2=[Time, Time5],
          holds_at(neg(completed(f)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3156).
axiom(holds_at(neg(completed(f)), Time),
   
    [ holds_at(condition(fc), Time),
      holds_at(neg(completed(f)), Time5),
      holds_at(neg(active(f)), Time),
      not(happens(start(f), Time)),
      axiom_uses(delta, Time),
      b(Time5, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3156).

 /*  not(holds_at(condition(fc), Time)) :-
       holds_at(completed(f), Time),
       holds_at(neg(completed(f)), Time-1),
       holds_at(neg(active(f)), Time),
       not(happens(start(f), Time)),
       axiom_uses(delta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3156).

 /*  [holds_at(completed(f), Time), holds_at(neg(completed(f)), Time6), holds_at(neg(active(f)), Time), not(happens(start(f), Time)), axiom_uses(delta, Time), b(Time6, Time), ignore(Time-1==Time6)] ->
       ta(Time,
          tvs1=[Time, Time-1],
          tvs2=[Time, Time6],
          holds_at(neg(condition(fc)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3156).
axiom(holds_at(neg(condition(fc)), Time),
   
    [ holds_at(completed(f), Time),
      holds_at(neg(completed(f)), Time6),
      holds_at(neg(active(f)), Time),
      not(happens(start(f), Time)),
      axiom_uses(delta, Time),
      b(Time6, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3156).

 /*  not(axiom_uses(delta)) :-
       not(happens(start(f), Time)),
       holds_at(neg(active(f)), Time),
       holds_at(neg(completed(f)), Time-1),
       holds_at(completed(f), Time),
       holds_at(condition(fc), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3156).

 /*  fix_axiom_head(Time) ->
       [not(axiom_uses(delta)), ->, not(axiom_uses(delta, Time))].
 */

 /*  [not(happens(start(f), Time)), holds_at(neg(active(f)), Time), holds_at(neg(completed(f)), Time7), holds_at(completed(f), Time), holds_at(condition(fc), Time), b(Time7, Time), ignore(Time-1==Time7)] ->
       ta(Time,
          tvs1=[Time, Time-1],
          tvs2=[Time, Time7],
          not(axiom_uses(delta, Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3156).
axiom(not(axiom_uses(delta, Time)),
   
    [ not(happens(start(f), Time)),
      holds_at(neg(active(f)), Time),
      holds_at(neg(completed(f)), Time7),
      holds_at(completed(f), Time),
      holds_at(condition(fc), Time),
      b(Time7, Time)
    ]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3162
% Delta: 
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3162).
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3162
% [time]
% !HoldsAt(Active(G),time) &
% !HoldsAt(Completed(F),time-1) &
% HoldsAt(Completed(F),time) &
% !HoldsAt(Condition(FC),time) ->
% Happens(Start(G),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3167
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3164).

 /*  axiom_uses(delta) ->
       ( holds_at(neg(active(g)), Time), holds_at(neg(completed(f)), Time-1), holds_at(completed(f), Time), holds_at(neg(condition(fc)), Time)->happens(start(g), Time)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3164).

 /*  happens(start(g), Time) :-
       ( holds_at(neg(active(g)), Time),
         holds_at(neg(completed(f)), Time-1),
         holds_at(completed(f), Time),
         holds_at(neg(condition(fc)), Time)
       ),
       axiom_uses(delta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3164).

 /*  [holds_at(neg(active(g)), Time), holds_at(neg(completed(f)), Time1), holds_at(completed(f), Time), holds_at(neg(condition(fc)), Time), axiom_uses(delta, Time), b(Time1, Time), ignore(Time-1==Time1)] ->
       ta(Time,
          tvs1=[Time, Time-1],
          tvs2=[Time, Time1],
          happens(start(g), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3164).
axiom(happens(start(g), Time),
   
    [ holds_at(neg(active(g)), Time),
      holds_at(neg(completed(f)), Time1),
      holds_at(completed(f), Time),
      holds_at(neg(condition(fc)), Time),
      axiom_uses(delta, Time),
      b(Time1, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3164).

 /*  not(holds_at(neg(active(g)), Time)) :-
       ( holds_at(neg(completed(f)), Time-1),
         holds_at(completed(f), Time),
         holds_at(neg(condition(fc)), Time)
       ),
       not(happens(start(g), Time)),
       axiom_uses(delta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3164).

 /*  [holds_at(neg(completed(f)), Time2), holds_at(completed(f), Time), holds_at(neg(condition(fc)), Time), not(happens(start(g), Time)), axiom_uses(delta, Time), b(Time2, Time), ignore(Time-1==Time2)] ->
       ta(Time,
          tvs1=[Time, Time-1],
          tvs2=[Time, Time2],
          holds_at(active(g), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3164).
axiom(holds_at(active(g), Time),
   
    [ holds_at(neg(completed(f)), Time2),
      holds_at(completed(f), Time),
      holds_at(neg(condition(fc)), Time),
      not(happens(start(g), Time)),
      axiom_uses(delta, Time),
      b(Time2, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3164).

 /*  not(holds_at(neg(completed(f)), Time-1)) :-
       ( holds_at(completed(f), Time),
         holds_at(neg(condition(fc)), Time)
       ),
       holds_at(neg(active(g)), Time),
       not(happens(start(g), Time)),
       axiom_uses(delta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3164).

 /*  [holds_at(completed(f), Time), holds_at(neg(condition(fc)), Time), holds_at(neg(active(g)), Time), not(happens(start(g), Time)), axiom_uses(delta, Axiom_uses_Ret), b(Time3, Time), ignore(Time-1==Time3)] ->
       ta(Time,
          tvs1=[Time, Time-1],
          tvs2=[Time, Time3],
          holds_at(completed(f), Time3)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3164).
axiom(holds_at(completed(f), Time3),
   
    [ holds_at(completed(f), Time),
      holds_at(neg(condition(fc)), Time),
      holds_at(neg(active(g)), Time),
      not(happens(start(g), Time)),
      axiom_uses(delta, Axiom_uses_Ret),
      b(Time3, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3164).

 /*  not(holds_at(completed(f), Time)) :-
       holds_at(neg(condition(fc)), Time),
       holds_at(neg(completed(f)), Time-1),
       holds_at(neg(active(g)), Time),
       not(happens(start(g), Time)),
       axiom_uses(delta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3164).

 /*  [holds_at(neg(condition(fc)), Time), holds_at(neg(completed(f)), Time5), holds_at(neg(active(g)), Time), not(happens(start(g), Time)), axiom_uses(delta, Time), b(Time5, Time), ignore(Time-1==Time5)] ->
       ta(Time,
          tvs1=[Time, Time-1],
          tvs2=[Time, Time5],
          holds_at(neg(completed(f)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3164).
axiom(holds_at(neg(completed(f)), Time),
   
    [ holds_at(neg(condition(fc)), Time),
      holds_at(neg(completed(f)), Time5),
      holds_at(neg(active(g)), Time),
      not(happens(start(g), Time)),
      axiom_uses(delta, Time),
      b(Time5, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3164).

 /*  not(holds_at(neg(condition(fc)), Time)) :-
       holds_at(completed(f), Time),
       holds_at(neg(completed(f)), Time-1),
       holds_at(neg(active(g)), Time),
       not(happens(start(g), Time)),
       axiom_uses(delta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3164).

 /*  [holds_at(completed(f), Time), holds_at(neg(completed(f)), Time6), holds_at(neg(active(g)), Time), not(happens(start(g), Time)), axiom_uses(delta, Time), b(Time6, Time), ignore(Time-1==Time6)] ->
       ta(Time,
          tvs1=[Time, Time-1],
          tvs2=[Time, Time6],
          holds_at(condition(fc), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3164).
axiom(holds_at(condition(fc), Time),
   
    [ holds_at(completed(f), Time),
      holds_at(neg(completed(f)), Time6),
      holds_at(neg(active(g)), Time),
      not(happens(start(g), Time)),
      axiom_uses(delta, Time),
      b(Time6, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3164).

 /*  not(axiom_uses(delta)) :-
       not(happens(start(g), Time)),
       holds_at(neg(active(g)), Time),
       holds_at(neg(completed(f)), Time-1),
       holds_at(completed(f), Time),
       holds_at(neg(condition(fc)), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3164).

 /*  fix_axiom_head(Time) ->
       [not(axiom_uses(delta)), ->, not(axiom_uses(delta, Time))].
 */

 /*  [not(happens(start(g), Time)), holds_at(neg(active(g)), Time), holds_at(neg(completed(f)), Time7), holds_at(completed(f), Time), holds_at(neg(condition(fc)), Time), b(Time7, Time), ignore(Time-1==Time7)] ->
       ta(Time,
          tvs1=[Time, Time-1],
          tvs2=[Time, Time7],
          not(axiom_uses(delta, Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3164).
axiom(not(axiom_uses(delta, Time)),
   
    [ not(happens(start(g), Time)),
      holds_at(neg(active(g)), Time),
      holds_at(neg(completed(f)), Time7),
      holds_at(completed(f), Time),
      holds_at(neg(condition(fc)), Time),
      b(Time7, Time)
    ]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3169
% Delta: 
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3169).
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3169
% Happens(Start(A),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3169).

 /*  [axiom_uses(delta, Axiom_uses_Ret)] ->
       ta(Ta_Param, tvs1=[start], tvs2=[start], happens(start(a), start)).
 */
axiom(happens(start(a), start),
    [axiom_uses(delta, Axiom_uses_Ret)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3170
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3171).
% Delta: 
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3170
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3171).
% Happens(End(A),1).

 /*  [axiom_uses(delta, Axiom_uses_Ret), b(start, Maptime), ignore(start+1==Maptime)] ->
       ta(Ta_Param,
          tvs1=[start+1],
          tvs2=[Maptime, start],
          happens(end(a), Maptime)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3171).
axiom(happens(end(a), Maptime),
    [axiom_uses(delta, Axiom_uses_Ret), b(start, Maptime)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3171
% Delta: 
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3171).
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3171
% Happens(End(B),3).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3171).

 /*  [axiom_uses(delta, Axiom_uses_Ret), b(start, Start3), toffset(start, 3, Start3), ignore(start+3==Start3)] ->
       ta(Ta_Param,
          tvs1=[start+3],
          tvs2=[Start3, start],
          happens(end(b), Start3)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3171).
axiom(happens(end(b), Start3),
   
    [ axiom_uses(delta, Axiom_uses_Ret),
      b(start, Start3),
      toffset(start, 3, Start3)
    ]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3172
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3173).
% Delta: 
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3172
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3173).
% Happens(End(C1),5).

 /*  [axiom_uses(delta, Axiom_uses_Ret), b(start, Start5), toffset(start, 5, Start5), ignore(start+5==Start5)] ->
       ta(Ta_Param,
          tvs1=[start+5],
          tvs2=[Start5, start],
          happens(end(c1), Start5)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3173).
axiom(happens(end(c1), Start5),
   
    [ axiom_uses(delta, Axiom_uses_Ret),
      b(start, Start5),
      toffset(start, 5, Start5)
    ]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3173
% Delta: 
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3173).
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3173
% Happens(End(C2),6).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3173).

 /*  [axiom_uses(delta, Axiom_uses_Ret), b(start, Start6), toffset(start, 6, Start6), ignore(start+6==Start6)] ->
       ta(Ta_Param,
          tvs1=[start+6],
          tvs2=[Start6, start],
          happens(end(c2), Start6)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3173).
axiom(happens(end(c2), Start6),
   
    [ axiom_uses(delta, Axiom_uses_Ret),
      b(start, Start6),
      toffset(start, 6, Start6)
    ]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3174
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3175).
% Delta: 
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3174
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3175).
% Happens(End(C3),7).

 /*  [axiom_uses(delta, Axiom_uses_Ret), b(start, Start7), toffset(start, 7, Start7), ignore(start+7==Start7)] ->
       ta(Ta_Param,
          tvs1=[start+7],
          tvs2=[Start7, start],
          happens(end(c3), Start7)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3175).
axiom(happens(end(c3), Start7),
   
    [ axiom_uses(delta, Axiom_uses_Ret),
      b(start, Start7),
      toffset(start, 7, Start7)
    ]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3175
% Delta: 
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3175).
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3175
% Happens(End(D),9).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3175).

 /*  [axiom_uses(delta, Axiom_uses_Ret), b(start, Start9), toffset(start, 9, Start9), ignore(start+9==Start9)] ->
       ta(Ta_Param,
          tvs1=[start+9],
          tvs2=[Start9, start],
          happens(end(d), Start9)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3175).
axiom(happens(end(d), Start9),
   
    [ axiom_uses(delta, Axiom_uses_Ret),
      b(start, Start9),
      toffset(start, 9, Start9)
    ]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3176
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3177).
% Delta: 
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3176
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3177).
% Happens(End(E2),11).

 /*  [axiom_uses(delta, Axiom_uses_Ret), b(start, Startd11), toffset(start, 11, Startd11), ignore(start+11==Startd11)] ->
       ta(Ta_Param,
          tvs1=[start+11],
          tvs2=[Startd11, start],
          happens(end(e2), Startd11)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3177).
axiom(happens(end(e2), Startd11),
   
    [ axiom_uses(delta, Axiom_uses_Ret),
      b(start, Startd11),
      toffset(start, 11, Startd11)
    ]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3177
% Delta: 
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3177).
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3177
% Happens(End(F),13).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3177).

 /*  [axiom_uses(delta, Axiom_uses_Ret), b(start, Startd13), toffset(start, 13, Startd13), ignore(start+13==Startd13)] ->
       ta(Ta_Param,
          tvs1=[start+13],
          tvs2=[Startd13, start],
          happens(end(f), Startd13)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3177).
axiom(happens(end(f), Startd13),
   
    [ axiom_uses(delta, Axiom_uses_Ret),
      b(start, Startd13),
      toffset(start, 13, Startd13)
    ]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3178
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3179).
% Delta: 
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3178
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3179).
% Happens(End(F),15).

 /*  [axiom_uses(delta, Axiom_uses_Ret), b(start, Startd15), toffset(start, 15, Startd15), ignore(start+15==Startd15)] ->
       ta(Ta_Param,
          tvs1=[start+15],
          tvs2=[Startd15, start],
          happens(end(f), Startd15)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3179).
axiom(happens(end(f), Startd15),
   
    [ axiom_uses(delta, Axiom_uses_Ret),
      b(start, Startd15),
      toffset(start, 15, Startd15)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3180
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3181).
%; Gamma
% [activity]
 % !HoldsAt(Active(activity),0).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3182
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3183).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(active(Activity)), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3183).
axiom(holds_at(neg(active(Activity)), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3183
% [activity]
 % !HoldsAt(Completed(activity),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3183).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(completed(Activity)), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3183).
axiom(holds_at(neg(completed(Activity)), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3184
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3185).
% [time]
 % time=% 14 <-> HoldsAt(Condition(FC),time).

 /*  equals(Time, 14) <->
       holds_at(condition(fc), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3185).

 /*  [equals] <->
       [holds_at, condition, fc].
 */

 /*  equals(Time, 14) ->
       holds_at(condition(fc), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3185).

 /*  holds_at(condition(fc), Time) :-
       equals(Time, 14).
 */

 /*  [equals(Time, 14)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(condition(fc), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3185).
axiom(holds_at(condition(fc), Time),
    [equals(Time, 14)]).

 /*  holds_at(condition(fc), Time) ->
       equals(Time, 14).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3185).

 /*  not(holds_at(condition(fc), Time)) :-
       not(equals(Time, 14)).
 */

 /*  [not(equals(Time, 14))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(condition(fc)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3185).
axiom(holds_at(neg(condition(fc)), Time),
    [not(equals(Time, 14))]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3185
% [time]
 % !HoldsAt(Condition(E1C),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3185).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(condition(e1c)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3185).
axiom(holds_at(neg(condition(e1c)), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3186
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3187).
% [time]
 % time=% 10 <-> HoldsAt(Condition(E2C),time).

 /*  equals(Time, 10) <->
       holds_at(condition(e2c), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3187).

 /*  [equals] <->
       [holds_at, condition, e2c].
 */

 /*  equals(Time, 10) ->
       holds_at(condition(e2c), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3187).

 /*  holds_at(condition(e2c), Time) :-
       equals(Time, 10).
 */

 /*  [equals(Time, 10)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(condition(e2c), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3187).
axiom(holds_at(condition(e2c), Time),
    [equals(Time, 10)]).

 /*  holds_at(condition(e2c), Time) ->
       equals(Time, 10).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3187).

 /*  not(holds_at(condition(e2c), Time)) :-
       not(equals(Time, 10)).
 */

 /*  [not(equals(Time, 10))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(condition(e2c)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3187).
axiom(holds_at(neg(condition(e2c)), Time),
    [not(equals(Time, 10))]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3187
% [time]
 % !HoldsAt(Condition(E3C),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3187).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(condition(e3c)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3187).
axiom(holds_at(neg(condition(e3c)), Time),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3189
% completion Delta Happens
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3189).
==> completion(delta).
==> completion(happens).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3191
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3192).
% range time 0 18
==> range(time,0,18).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3192
% range offset 1 1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3192).
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter6/ThielscherCircuit1.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{Thielscher:1997,
%;   author = "Michael Thielscher",
%;   year = "1997",
%;   title = "Ramification and causality",
%;   journal = "Artificial Intelligence",
%;   volume = "89",
%;   pages = "317--364",
%; }
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3229
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3230).
% load foundations/Root.e
:- load_e('foundations/Root.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3230
% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3230).
:- load_e('foundations/EC.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3231
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3232).
% load foundations/ECCausal.e
:- load_e('foundations/ECCausal.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3233
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3234).
% sort switch
==> sort(switch).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3234
% sort relay
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3234).
==> sort(relay).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3235
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3236).
% sort light
==> sort(light).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3237
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3238).
% switch S1, S2, S3
==> t(switch,s1).
==> t(switch,s2).
==> t(switch,s3).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3238
% relay R
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3238).
==> t(relay,r).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3239
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3240).
% light L
==> t(light,l).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3241
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3242).
% event Light(light)
event(light(light)).
==> mpred_prop(light(light),event).
==> meta_argtypes(light(light)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3242
% event Close(switch)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3242).
event(close(switch)).
==> mpred_prop(close(switch),event).
==> meta_argtypes(close(switch)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3243
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3244).
% event Open(switch)
event(open(switch)).
==> mpred_prop(open(switch),event).
==> meta_argtypes(open(switch)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3244
% event Activate(relay)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3244).
event(activate(relay)).
==> mpred_prop(activate(relay),event).
==> meta_argtypes(activate(relay)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3246
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3247).
% fluent Lit(light)
fluent(lit(light)).
==> mpred_prop(lit(light),fluent).
==> meta_argtypes(lit(light)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3247
% fluent Closed(switch)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3247).
fluent(closed(switch)).
==> mpred_prop(closed(switch),fluent).
==> meta_argtypes(closed(switch)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3248
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3249).
% fluent Activated(relay)
fluent(activated(relay)).
==> mpred_prop(activated(relay),fluent).
==> meta_argtypes(activated(relay)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3250
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3251).
% [time]
% Stopped(Lit(L),time) &
% Initiated(Closed(S1),time) &
% Initiated(Closed(S2),time) ->
% Happens(Light(L),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3254
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3251).

 /*  stopped(lit(l), Time), initiated(closed(s1), Time), initiated(closed(s2), Time) ->
       happens(light(l), Time).
 */

 /*  happens(light(l), Time) :-
       stopped(lit(l), Time),
       initiated(closed(s1), Time),
       initiated(closed(s2), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3251).

 /*  [stopped(lit(l), Time), initiated(closed(s1), Time), initiated(closed(s2), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(light(l), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3251).
axiom(happens(light(l), Time),
   
    [ stopped(lit(l), Time),
      initiated(closed(s1), Time),
      initiated(closed(s2), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3251).

 /*  not(stopped(lit(l), Time)) :-
       ( initiated(closed(s1), Time),
         initiated(closed(s2), Time)
       ),
       not(happens(light(l), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3251).

 /*  [initiated(closed(s1), Time), initiated(closed(s2), Time), not(happens(light(l), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(stopped(lit(l), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3251).
axiom(not(stopped(lit(l), Time)),
   
    [ initiated(closed(s1), Time),
      initiated(closed(s2), Time),
      not(happens(light(l), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3251).

 /*  not(initiated(closed(s1), Time)) :-
       initiated(closed(s2), Time),
       stopped(lit(l), Time),
       not(happens(light(l), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3251).

 /*  [initiated(closed(s2), Time), stopped(lit(l), Time), not(happens(light(l), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(initiated(closed(s1), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3251).
axiom(not(initiated(closed(s1), Time)),
   
    [ initiated(closed(s2), Time),
      stopped(lit(l), Time),
      not(happens(light(l), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3251).

 /*  not(initiated(closed(s2), Time)) :-
       initiated(closed(s1), Time),
       stopped(lit(l), Time),
       not(happens(light(l), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3251).

 /*  [initiated(closed(s1), Time), stopped(lit(l), Time), not(happens(light(l), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(initiated(closed(s2), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3251).
axiom(not(initiated(closed(s2), Time)),
   
    [ initiated(closed(s1), Time),
      stopped(lit(l), Time),
      not(happens(light(l), Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3256
% [time]
% Started(Closed(S2),time) &
% Initiated(Activated(R),time) ->
% Happens(Open(S2),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3259
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3258).

 /*  started(closed(s2), Time), initiated(activated(r), Time) ->
       happens(open(s2), Time).
 */

 /*  happens(open(s2), Time) :-
       started(closed(s2), Time),
       initiated(activated(r), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3258).

 /*  [started(closed(s2), Time), initiated(activated(r), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(open(s2), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3258).
axiom(happens(open(s2), Time),
    [started(closed(s2), Time), initiated(activated(r), Time)]).

 /*  not(started(closed(s2), Time)) :-
       initiated(activated(r), Time),
       not(happens(open(s2), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3258).

 /*  [initiated(activated(r), Time), not(happens(open(s2), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(started(closed(s2), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3258).
axiom(not(started(closed(s2), Time)),
    [initiated(activated(r), Time), not(happens(open(s2), Time))]).

 /*  not(initiated(activated(r), Time)) :-
       started(closed(s2), Time),
       not(happens(open(s2), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3258).

 /*  [started(closed(s2), Time), not(happens(open(s2), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(initiated(activated(r), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3258).
axiom(not(initiated(activated(r), Time)),
    [started(closed(s2), Time), not(happens(open(s2), Time))]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3261
% [time]
% Stopped(Activated(R),time) &
% Initiated(Closed(S1),time) &
% Initiated(Closed(S3),time) ->
% Happens(Activate(R),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3265
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3263).

 /*  stopped(activated(r), Time), initiated(closed(s1), Time), initiated(closed(s3), Time) ->
       happens(activate(r), Time).
 */

 /*  happens(activate(r), Time) :-
       stopped(activated(r), Time),
       initiated(closed(s1), Time),
       initiated(closed(s3), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3263).

 /*  [stopped(activated(r), Time), initiated(closed(s1), Time), initiated(closed(s3), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(activate(r), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3263).
axiom(happens(activate(r), Time),
   
    [ stopped(activated(r), Time),
      initiated(closed(s1), Time),
      initiated(closed(s3), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3263).

 /*  not(stopped(activated(r), Time)) :-
       ( initiated(closed(s1), Time),
         initiated(closed(s3), Time)
       ),
       not(happens(activate(r), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3263).

 /*  [initiated(closed(s1), Time), initiated(closed(s3), Time), not(happens(activate(r), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(stopped(activated(r), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3263).
axiom(not(stopped(activated(r), Time)),
   
    [ initiated(closed(s1), Time),
      initiated(closed(s3), Time),
      not(happens(activate(r), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3263).

 /*  not(initiated(closed(s1), Time)) :-
       initiated(closed(s3), Time),
       stopped(activated(r), Time),
       not(happens(activate(r), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3263).

 /*  [initiated(closed(s3), Time), stopped(activated(r), Time), not(happens(activate(r), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(initiated(closed(s1), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3263).
axiom(not(initiated(closed(s1), Time)),
   
    [ initiated(closed(s3), Time),
      stopped(activated(r), Time),
      not(happens(activate(r), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3263).

 /*  not(initiated(closed(s3), Time)) :-
       initiated(closed(s1), Time),
       stopped(activated(r), Time),
       not(happens(activate(r), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3263).

 /*  [initiated(closed(s1), Time), stopped(activated(r), Time), not(happens(activate(r), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(initiated(closed(s3), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3263).
axiom(not(initiated(closed(s3), Time)),
   
    [ initiated(closed(s1), Time),
      stopped(activated(r), Time),
      not(happens(activate(r), Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3267
% [switch,time]
 % Initiates(Close(switch),Closed(switch),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3267).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(close(Switch), closed(Switch), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3267).
axiom(initiates(close(Switch), closed(Switch), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3268
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3269).
% [switch,time]
 % Terminates(Open(switch),Closed(switch),time).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(open(Switch), closed(Switch), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3269).
axiom(terminates(open(Switch), closed(Switch), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3269
% [relay,time]
 % Initiates(Activate(relay),Activated(relay),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3269).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(activate(Relay), activated(Relay), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3269).
axiom(initiates(activate(Relay), activated(Relay), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3270
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3271).
% [light,time]
 % Initiates(Light(light),Lit(light),time).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(light(Light), lit(Light), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3271).
axiom(initiates(light(Light), lit(Light), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3272
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3273).
% !HoldsAt(Closed(S1),0).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(closed(s1)), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3273).
axiom(holds_at(neg(closed(s1)), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3273
% HoldsAt(Closed(S2),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3273).

 /*  [] ->
       ta(Ta_Param, tvs1=[start], tvs2=[start], holds_at(closed(s2), start)).
 */
axiom(holds_at(closed(s2), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3274
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3275).
% HoldsAt(Closed(S3),0).

 /*  [] ->
       ta(Ta_Param, tvs1=[start], tvs2=[start], holds_at(closed(s3), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3275).
axiom(holds_at(closed(s3), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3275
% !HoldsAt(Activated(R),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3275).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(activated(r)), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3275).
axiom(holds_at(neg(activated(r)), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3276
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3277).
% !HoldsAt(Lit(L),0).

 /*  [] ->
       ta(Ta_Param, tvs1=[start], tvs2=[start], holds_at(neg(lit(l)), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3277).
axiom(holds_at(neg(lit(l)), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3278
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3279).
% Happens(Close(S1),0).

 /*  [] ->
       ta(Ta_Param, tvs1=[start], tvs2=[start], happens(close(s1), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3279).
axiom(happens(close(s1), start),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3280
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3281).
% completion Happens
==> completion(happens).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3282
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3283).
% range time 0 1
==> range(time,0,1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3283
% range offset 1 1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3283).
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter6/CarryingABook1.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; Example: Carrying a Book (Effect Axioms)
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3314
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3315).
% option modeldiff on
:- set_ec_option(modeldiff, on).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3316
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3317).
% load foundations/Root.e
:- load_e('foundations/Root.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3317
% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3317).
:- load_e('foundations/EC.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3319
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3320).
% sort object
==> sort(object).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3320
% sort agent: object
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3320).
==> subsort(agent,object).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3321
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3322).
% sort room
==> sort(room).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3323
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3324).
% object Book
==> t(object,book).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3324
% agent Nathan
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3324).
==> t(agent,nathan).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3325
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3326).
% room LivingRoom, Kitchen
==> t(room,livingRoom).
==> t(room,kitchen).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3327
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3328).
% event LetGoOf(agent,object)
event(letGoOf(agent,object)).
==> mpred_prop(letGoOf(agent,object),event).
==> meta_argtypes(letGoOf(agent,object)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3328
% event PickUp(agent,object)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3328).
event(pickUp(agent,object)).
==> mpred_prop(pickUp(agent,object),event).
==> meta_argtypes(pickUp(agent,object)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3329
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3330).
% event Walk(agent,room,room)
event(walk(agent,room,room)).
==> mpred_prop(walk(agent,room,room),event).
==> meta_argtypes(walk(agent,room,room)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3331
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3332).
% fluent InRoom(object,room)
fluent(inRoom(object,room)).
==> mpred_prop(inRoom(object,room),fluent).
==> meta_argtypes(inRoom(object,room)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3332
% fluent Holding(agent,object)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3332).
fluent(holding(agent,object)).
==> mpred_prop(holding(agent,object),fluent).
==> meta_argtypes(holding(agent,object)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3334
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3335).
%; Sigma
% [agent,room1,room2,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3337
% Initiates(Walk(agent,room1,room2),InRoom(agent,room2),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3337).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(walk(Agent, Room1, Room2),
                    inRoom(Agent, Room2),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3337).
axiom(initiates(walk(Agent, Room1, Room2), inRoom(Agent, Room2), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3339
% [agent,room1,room2,time]
% room1!=% room2 ->
% Terminates(Walk(agent,room1,room2),InRoom(agent,room1),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3341

 /*  [diff(Room1, Room2)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(walk(Agent, Room1, Room2),
                     inRoom(Agent, Room1),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3341).
axiom(terminates(walk(Agent, Room1, Room2), inRoom(Agent, Room1), Time),
    [diff(Room1, Room2)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3343
% [agent,object,room,time]
% HoldsAt(InRoom(agent,room),time) &
% HoldsAt(InRoom(object,room),time) ->
% Initiates(PickUp(agent,object),Holding(agent,object),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3346
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3345).

 /*  [holds_at(inRoom(Agent, Room), Time), holds_at(inRoom(Object, Room), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(pickUp(Agent, Object),
                    holding(Agent, Object),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3345).
axiom(initiates(pickUp(Agent, Object), holding(Agent, Object), Time),
   
    [ holds_at(inRoom(Agent, Room), Time),
      holds_at(inRoom(Object, Room), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3348
% [agent,object,time]
% HoldsAt(Holding(agent,object),time) ->
% Terminates(LetGoOf(agent,object),Holding(agent,object),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3350

 /*  [holds_at(holding(Agent, Object), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(letGoOf(Agent, Object),
                     holding(Agent, Object),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3350).
axiom(terminates(letGoOf(Agent, Object), holding(Agent, Object), Time),
    [holds_at(holding(Agent, Object), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3352
% [agent,object,room1,room2,time]
% HoldsAt(Holding(agent,object),time) ->
% Initiates(Walk(agent,room1,room2),InRoom(object,room2),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3354

 /*  [holds_at(holding(Agent, Object), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(walk(Agent, Room1, Room2),
                    inRoom(Object, Room2),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3354).
axiom(initiates(walk(Agent, Room1, Room2), inRoom(Object, Room2), Time),
    [holds_at(holding(Agent, Object), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3356
% [agent,object,room1,room2,time]
% HoldsAt(Holding(agent,object),time) &
% room1!=room2 ->
% Terminates(Walk(agent,room1,room2),InRoom(object,room1),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3359
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3358).

 /*  [holds_at(holding(Agent, Object), Time), diff(Room1, Room2)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(walk(Agent, Room1, Room2),
                     inRoom(Object, Room1),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3358).
axiom(terminates(walk(Agent, Room1, Room2), inRoom(Object, Room1), Time),
   
    [ holds_at(holding(Agent, Object), Time),
      diff(Room1, Room2)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3361
%; Delta


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3363
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3364).
% Happens(PickUp(Nathan,Book),0).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          happens(pickUp(nathan, book), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3364).
axiom(happens(pickUp(nathan, book), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3364
% Happens(Walk(Nathan,LivingRoom,Kitchen),1).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3364).

 /*  [b(start, Maptime), ignore(start+1==Maptime)] ->
       ta(Ta_Param,
          tvs1=[start+1],
          tvs2=[Maptime, start],
          happens(walk(nathan, livingRoom, kitchen), Maptime)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3364).
axiom(happens(walk(nathan, livingRoom, kitchen), Maptime),
    [b(start, Maptime)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3366
%; Psi
% [object,room1,room2,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3369
% HoldsAt(InRoom(object,room1),time) &
% HoldsAt(InRoom(object,room2),time) ->
% room1=room2.
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3371
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3369).

 /*  holds_at(inRoom(Object, Room1), Time), holds_at(inRoom(Object, Room2), Time) ->
       equals(Room1, Room2).
 */

 /*  not(holds_at(inRoom(Object, Room1), Time)) :-
       holds_at(inRoom(Object, Room2), Time),
       not(equals(Room1, Room2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3369).

 /*  [holds_at(inRoom(Object, Room2), Time), not(equals(Room1, Room2))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(inRoom(Object, Room1)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3369).
axiom(holds_at(neg(inRoom(Object, Room1)), Time),
   
    [ holds_at(inRoom(Object, Room2), Time),
      not(equals(Room1, Room2))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3369).

 /*  not(holds_at(inRoom(Object, Room2), Time)) :-
       holds_at(inRoom(Object, Room1), Time),
       not(equals(Room1, Room2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3369).

 /*  [holds_at(inRoom(Object, Room1), Time), not(equals(Room1, Room2))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(inRoom(Object, Room2)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3369).
axiom(holds_at(neg(inRoom(Object, Room2)), Time),
   
    [ holds_at(inRoom(Object, Room1), Time),
      not(equals(Room2, Room1))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3373
%; Gamma


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3375
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3376).
% HoldsAt(InRoom(Nathan,LivingRoom),0).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(inRoom(nathan, livingRoom), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3376).
axiom(holds_at(inRoom(nathan, livingRoom), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3376
% HoldsAt(InRoom(Book,LivingRoom),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3376).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(inRoom(book, livingRoom), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3376).
axiom(holds_at(inRoom(book, livingRoom), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3378
%; added:


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3379
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3380).
% !HoldsAt(Holding(Nathan,Book),0).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(holding(nathan, book)), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3380).
axiom(holds_at(neg(holding(nathan, book)), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3380
% [agent,time]
 % !HoldsAt(Holding(agent,agent),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3380).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(holding(Agent, Agent)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3380).
axiom(holds_at(neg(holding(Agent, Agent)), Time),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3382
% completion Happens
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3382).
==> completion(happens).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3384
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3385).
% range time 0 2
==> range(time,0,2).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3385
% range offset 1 1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3385).
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter6/ThielscherCircuit2.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{Thielscher:1997,
%;   author = "Michael Thielscher",
%;   year = "1997",
%;   title = "Ramification and causality",
%;   journal = "Artificial Intelligence",
%;   volume = "89",
%;   pages = "317--364",
%; }
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3422
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3423).
% load foundations/Root.e
:- load_e('foundations/Root.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3423
% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3423).
:- load_e('foundations/EC.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3425
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3426).
% sort switch
==> sort(switch).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3426
% sort relay
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3426).
==> sort(relay).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3427
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3428).
% sort light
==> sort(light).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3429
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3430).
% switch S1, S2, S3
==> t(switch,s1).
==> t(switch,s2).
==> t(switch,s3).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3430
% relay R
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3430).
==> t(relay,r).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3431
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3432).
% light L
==> t(light,l).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3433
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3434).
% event Light(light)
event(light(light)).
==> mpred_prop(light(light),event).
==> meta_argtypes(light(light)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3434
% event Unlight(light)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3434).
event(unlight(light)).
==> mpred_prop(unlight(light),event).
==> meta_argtypes(unlight(light)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3435
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3436).
% event Close(switch)
event(close(switch)).
==> mpred_prop(close(switch),event).
==> meta_argtypes(close(switch)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3436
% event Open(switch)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3436).
event(open(switch)).
==> mpred_prop(open(switch),event).
==> meta_argtypes(open(switch)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3437
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3438).
% event Activate(relay)
event(activate(relay)).
==> mpred_prop(activate(relay),event).
==> meta_argtypes(activate(relay)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3439
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3440).
% fluent Lit(light)
fluent(lit(light)).
==> mpred_prop(lit(light),fluent).
==> meta_argtypes(lit(light)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3440
% fluent Closed(switch)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3440).
fluent(closed(switch)).
==> mpred_prop(closed(switch),fluent).
==> meta_argtypes(closed(switch)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3441
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3442).
% fluent Activated(relay)
fluent(activated(relay)).
==> mpred_prop(activated(relay),fluent).
==> meta_argtypes(activated(relay)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3443
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3444).
% [time]
% !HoldsAt(Lit(L),time) &
% HoldsAt(Closed(S1),time) &
% HoldsAt(Closed(S2),time) ->
% Happens(Light(L),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3447
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3444).

 /*  holds_at(neg(lit(l)), Time), holds_at(closed(s1), Time), holds_at(closed(s2), Time) ->
       happens(light(l), Time).
 */

 /*  happens(light(l), Time) :-
       holds_at(neg(lit(l)), Time),
       holds_at(closed(s1), Time),
       holds_at(closed(s2), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3444).

 /*  [holds_at(neg(lit(l)), Time), holds_at(closed(s1), Time), holds_at(closed(s2), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(light(l), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3444).
axiom(happens(light(l), Time),
   
    [ holds_at(neg(lit(l)), Time),
      holds_at(closed(s1), Time),
      holds_at(closed(s2), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3444).

 /*  not(holds_at(neg(lit(l)), Time)) :-
       ( holds_at(closed(s1), Time),
         holds_at(closed(s2), Time)
       ),
       not(happens(light(l), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3444).

 /*  [holds_at(closed(s1), Time), holds_at(closed(s2), Time), not(happens(light(l), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(lit(l), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3444).
axiom(holds_at(lit(l), Time),
   
    [ holds_at(closed(s1), Time),
      holds_at(closed(s2), Time),
      not(happens(light(l), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3444).

 /*  not(holds_at(closed(s1), Time)) :-
       holds_at(closed(s2), Time),
       holds_at(neg(lit(l)), Time),
       not(happens(light(l), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3444).

 /*  [holds_at(closed(s2), Time), holds_at(neg(lit(l)), Time), not(happens(light(l), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(closed(s1)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3444).
axiom(holds_at(neg(closed(s1)), Time),
   
    [ holds_at(closed(s2), Time),
      holds_at(neg(lit(l)), Time),
      not(happens(light(l), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3444).

 /*  not(holds_at(closed(s2), Time)) :-
       holds_at(closed(s1), Time),
       holds_at(neg(lit(l)), Time),
       not(happens(light(l), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3444).

 /*  [holds_at(closed(s1), Time), holds_at(neg(lit(l)), Time), not(happens(light(l), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(closed(s2)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3444).
axiom(holds_at(neg(closed(s2)), Time),
   
    [ holds_at(closed(s1), Time),
      holds_at(neg(lit(l)), Time),
      not(happens(light(l), Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3449
% [time]
% HoldsAt(Lit(L),time) &
% (!HoldsAt(Closed(S1),time) | !HoldsAt(Closed(S2),time)) ->
% Happens(Unlight(L),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3452
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3451).

 /*  holds_at(lit(l), Time), (holds_at(neg(closed(s1)), Time);holds_at(neg(closed(s2)), Time)) ->
       happens(unlight(l), Time).
 */

 /*  happens(unlight(l), Time) :-
       holds_at(lit(l), Time),
       (   holds_at(neg(closed(s1)), Time)
       ;   holds_at(neg(closed(s2)), Time)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3451).

 /*  [holds_at(lit(l), Time),  (holds_at(neg(closed(s1)), Time);holds_at(neg(closed(s2)), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(unlight(l), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3451).
axiom(happens(unlight(l), Time),
   
    [ holds_at(lit(l), Time),
       (holds_at(neg(closed(s1)), Time);holds_at(neg(closed(s2)), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3451).

 /*  not(holds_at(lit(l), Time)) :-
       (   holds_at(neg(closed(s1)), Time)
       ;   holds_at(neg(closed(s2)), Time)
       ),
       not(happens(unlight(l), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3451).

 /*  [(holds_at(neg(closed(s1)), Time);holds_at(neg(closed(s2)), Time)), not(happens(unlight(l), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(lit(l)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3451).
axiom(holds_at(neg(lit(l)), Time),
   
    [  (holds_at(neg(closed(s1)), Time);holds_at(neg(closed(s2)), Time)),
      not(happens(unlight(l), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3451).

 /*  not(holds_at(neg(closed(s1)), Time)) :-
       holds_at(lit(l), Time),
       not(happens(unlight(l), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3451).

 /*  [holds_at(lit(l), Time), not(happens(unlight(l), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(closed(s1), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3451).
axiom(holds_at(closed(s1), Time),
    [holds_at(lit(l), Time), not(happens(unlight(l), Time))]).

 /*  not(holds_at(neg(closed(s2)), Time)) :-
       holds_at(lit(l), Time),
       not(happens(unlight(l), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3451).

 /*  [holds_at(lit(l), Time), not(happens(unlight(l), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(closed(s2), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3451).
axiom(holds_at(closed(s2), Time),
    [holds_at(lit(l), Time), not(happens(unlight(l), Time))]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3454
% [time]
% HoldsAt(Closed(S2),time) &
% HoldsAt(Activated(R),time) ->
% Happens(Open(S2),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3457
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3456).

 /*  holds_at(closed(s2), Time), holds_at(activated(r), Time) ->
       happens(open(s2), Time).
 */

 /*  happens(open(s2), Time) :-
       holds_at(closed(s2), Time),
       holds_at(activated(r), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3456).

 /*  [holds_at(closed(s2), Time), holds_at(activated(r), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(open(s2), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3456).
axiom(happens(open(s2), Time),
    [holds_at(closed(s2), Time), holds_at(activated(r), Time)]).

 /*  not(holds_at(closed(s2), Time)) :-
       holds_at(activated(r), Time),
       not(happens(open(s2), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3456).

 /*  [holds_at(activated(r), Time), not(happens(open(s2), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(closed(s2)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3456).
axiom(holds_at(neg(closed(s2)), Time),
    [holds_at(activated(r), Time), not(happens(open(s2), Time))]).

 /*  not(holds_at(activated(r), Time)) :-
       holds_at(closed(s2), Time),
       not(happens(open(s2), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3456).

 /*  [holds_at(closed(s2), Time), not(happens(open(s2), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(activated(r)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3456).
axiom(holds_at(neg(activated(r)), Time),
    [holds_at(closed(s2), Time), not(happens(open(s2), Time))]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3459
% [time]
% !HoldsAt(Activated(R),time) &
% HoldsAt(Closed(S1),time) &
% HoldsAt(Closed(S3),time) ->
% Happens(Activate(R),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3463
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3461).

 /*  holds_at(neg(activated(r)), Time), holds_at(closed(s1), Time), holds_at(closed(s3), Time) ->
       happens(activate(r), Time).
 */

 /*  happens(activate(r), Time) :-
       holds_at(neg(activated(r)), Time),
       holds_at(closed(s1), Time),
       holds_at(closed(s3), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3461).

 /*  [holds_at(neg(activated(r)), Time), holds_at(closed(s1), Time), holds_at(closed(s3), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(activate(r), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3461).
axiom(happens(activate(r), Time),
   
    [ holds_at(neg(activated(r)), Time),
      holds_at(closed(s1), Time),
      holds_at(closed(s3), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3461).

 /*  not(holds_at(neg(activated(r)), Time)) :-
       ( holds_at(closed(s1), Time),
         holds_at(closed(s3), Time)
       ),
       not(happens(activate(r), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3461).

 /*  [holds_at(closed(s1), Time), holds_at(closed(s3), Time), not(happens(activate(r), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(activated(r), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3461).
axiom(holds_at(activated(r), Time),
   
    [ holds_at(closed(s1), Time),
      holds_at(closed(s3), Time),
      not(happens(activate(r), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3461).

 /*  not(holds_at(closed(s1), Time)) :-
       holds_at(closed(s3), Time),
       holds_at(neg(activated(r)), Time),
       not(happens(activate(r), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3461).

 /*  [holds_at(closed(s3), Time), holds_at(neg(activated(r)), Time), not(happens(activate(r), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(closed(s1)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3461).
axiom(holds_at(neg(closed(s1)), Time),
   
    [ holds_at(closed(s3), Time),
      holds_at(neg(activated(r)), Time),
      not(happens(activate(r), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3461).

 /*  not(holds_at(closed(s3), Time)) :-
       holds_at(closed(s1), Time),
       holds_at(neg(activated(r)), Time),
       not(happens(activate(r), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3461).

 /*  [holds_at(closed(s1), Time), holds_at(neg(activated(r)), Time), not(happens(activate(r), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(closed(s3)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3461).
axiom(holds_at(neg(closed(s3)), Time),
   
    [ holds_at(closed(s1), Time),
      holds_at(neg(activated(r)), Time),
      not(happens(activate(r), Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3465
% [switch,time]
 % Initiates(Close(switch),Closed(switch),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3465).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(close(Switch), closed(Switch), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3465).
axiom(initiates(close(Switch), closed(Switch), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3466
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3467).
% [switch,time]
 % Terminates(Open(switch),Closed(switch),time).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(open(Switch), closed(Switch), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3467).
axiom(terminates(open(Switch), closed(Switch), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3467
% [relay,time]
 % Initiates(Activate(relay),Activated(relay),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3467).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(activate(Relay), activated(Relay), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3467).
axiom(initiates(activate(Relay), activated(Relay), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3468
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3469).
% [light,time]
 % Initiates(Light(light),Lit(light),time).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(light(Light), lit(Light), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3469).
axiom(initiates(light(Light), lit(Light), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3469
% [light,time]
 % Terminates(Unlight(light),Lit(light),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3469).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(unlight(Light), lit(Light), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3469).
axiom(terminates(unlight(Light), lit(Light), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3471
% !HoldsAt(Closed(S1),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3471).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(closed(s1)), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3471).
axiom(holds_at(neg(closed(s1)), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3472
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3473).
% HoldsAt(Closed(S2),0).

 /*  [] ->
       ta(Ta_Param, tvs1=[start], tvs2=[start], holds_at(closed(s2), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3473).
axiom(holds_at(closed(s2), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3473
% HoldsAt(Closed(S3),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3473).

 /*  [] ->
       ta(Ta_Param, tvs1=[start], tvs2=[start], holds_at(closed(s3), start)).
 */
axiom(holds_at(closed(s3), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3474
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3475).
% !HoldsAt(Activated(R),0).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(activated(r)), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3475).
axiom(holds_at(neg(activated(r)), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3475
% !HoldsAt(Lit(L),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3475).

 /*  [] ->
       ta(Ta_Param, tvs1=[start], tvs2=[start], holds_at(neg(lit(l)), start)).
 */
axiom(holds_at(neg(lit(l)), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3477
% Happens(Close(S1),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3477).

 /*  [] ->
       ta(Ta_Param, tvs1=[start], tvs2=[start], happens(close(s1), start)).
 */
axiom(happens(close(s1), start),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3479
% completion Happens
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3479).
==> completion(happens).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3481
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3482).
% range time 0 4
==> range(time,0,4).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3482
% range offset 1 1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3482).
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter6/ShanahanCircuit.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @inproceedings{Shanahan:1999a,
%;   author = "Murray Shanahan",
%;   year = "1999",
%;   title = "The ramification problem in the event calculus",
%;   booktitle = "\uppercase{P}roceedings of the \uppercase{S}ixteenth \uppercase{I}nternational \uppercase{J}oint \uppercase{C}onference on \uppercase{A}rtificial \uppercase{I}ntelligence",
%;   pages = "140--146",
%;   address = "San Mateo, CA",
%;   publisher = "Morgan Kaufmann",
%; }
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3520
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3521).
% load foundations/Root.e
:- load_e('foundations/Root.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3521
% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3521).
:- load_e('foundations/EC.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3523
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3524).
% sort switch
==> sort(switch).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3524
% sort relay
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3524).
==> sort(relay).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3525
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3526).
% sort light
==> sort(light).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3527
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3528).
% switch S1, S2, S3
==> t(switch,s1).
==> t(switch,s2).
==> t(switch,s3).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3528
% relay R
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3528).
==> t(relay,r).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3529
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3530).
% light L
==> t(light,l).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3531
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3532).
% event Light(light)
event(light(light)).
==> mpred_prop(light(light),event).
==> meta_argtypes(light(light)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3532
% event Unlight(light)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3532).
event(unlight(light)).
==> mpred_prop(unlight(light),event).
==> meta_argtypes(unlight(light)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3533
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3534).
% event Close(switch)
event(close(switch)).
==> mpred_prop(close(switch),event).
==> meta_argtypes(close(switch)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3534
% event Open(switch)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3534).
event(open(switch)).
==> mpred_prop(open(switch),event).
==> meta_argtypes(open(switch)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3535
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3536).
% event Activate(relay)
event(activate(relay)).
==> mpred_prop(activate(relay),event).
==> meta_argtypes(activate(relay)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3536
% event Deactivate(relay)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3536).
event(deactivate(relay)).
==> mpred_prop(deactivate(relay),event).
==> meta_argtypes(deactivate(relay)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3538
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3539).
% fluent Lit(light)
fluent(lit(light)).
==> mpred_prop(lit(light),fluent).
==> meta_argtypes(lit(light)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3539
% fluent Closed(switch)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3539).
fluent(closed(switch)).
==> mpred_prop(closed(switch),fluent).
==> meta_argtypes(closed(switch)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3540
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3541).
% fluent Activated(relay)
fluent(activated(relay)).
==> mpred_prop(activated(relay),fluent).
==> meta_argtypes(activated(relay)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3542
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3543).
% [time]
% !HoldsAt(Lit(L),time) &
% HoldsAt(Closed(S1),time) &
% HoldsAt(Closed(S2),time) ->
% Happens(Light(L),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3546
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3543).

 /*  holds_at(neg(lit(l)), Time), holds_at(closed(s1), Time), holds_at(closed(s2), Time) ->
       happens(light(l), Time).
 */

 /*  happens(light(l), Time) :-
       holds_at(neg(lit(l)), Time),
       holds_at(closed(s1), Time),
       holds_at(closed(s2), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3543).

 /*  [holds_at(neg(lit(l)), Time), holds_at(closed(s1), Time), holds_at(closed(s2), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(light(l), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3543).
axiom(happens(light(l), Time),
   
    [ holds_at(neg(lit(l)), Time),
      holds_at(closed(s1), Time),
      holds_at(closed(s2), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3543).

 /*  not(holds_at(neg(lit(l)), Time)) :-
       ( holds_at(closed(s1), Time),
         holds_at(closed(s2), Time)
       ),
       not(happens(light(l), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3543).

 /*  [holds_at(closed(s1), Time), holds_at(closed(s2), Time), not(happens(light(l), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(lit(l), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3543).
axiom(holds_at(lit(l), Time),
   
    [ holds_at(closed(s1), Time),
      holds_at(closed(s2), Time),
      not(happens(light(l), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3543).

 /*  not(holds_at(closed(s1), Time)) :-
       holds_at(closed(s2), Time),
       holds_at(neg(lit(l)), Time),
       not(happens(light(l), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3543).

 /*  [holds_at(closed(s2), Time), holds_at(neg(lit(l)), Time), not(happens(light(l), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(closed(s1)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3543).
axiom(holds_at(neg(closed(s1)), Time),
   
    [ holds_at(closed(s2), Time),
      holds_at(neg(lit(l)), Time),
      not(happens(light(l), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3543).

 /*  not(holds_at(closed(s2), Time)) :-
       holds_at(closed(s1), Time),
       holds_at(neg(lit(l)), Time),
       not(happens(light(l), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3543).

 /*  [holds_at(closed(s1), Time), holds_at(neg(lit(l)), Time), not(happens(light(l), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(closed(s2)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3543).
axiom(holds_at(neg(closed(s2)), Time),
   
    [ holds_at(closed(s1), Time),
      holds_at(neg(lit(l)), Time),
      not(happens(light(l), Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3548
% [time]
% HoldsAt(Lit(L),time) &
% (!HoldsAt(Closed(S1),time) | !HoldsAt(Closed(S2),time)) ->
% Happens(Unlight(L),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3551
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3550).

 /*  holds_at(lit(l), Time), (holds_at(neg(closed(s1)), Time);holds_at(neg(closed(s2)), Time)) ->
       happens(unlight(l), Time).
 */

 /*  happens(unlight(l), Time) :-
       holds_at(lit(l), Time),
       (   holds_at(neg(closed(s1)), Time)
       ;   holds_at(neg(closed(s2)), Time)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3550).

 /*  [holds_at(lit(l), Time),  (holds_at(neg(closed(s1)), Time);holds_at(neg(closed(s2)), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(unlight(l), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3550).
axiom(happens(unlight(l), Time),
   
    [ holds_at(lit(l), Time),
       (holds_at(neg(closed(s1)), Time);holds_at(neg(closed(s2)), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3550).

 /*  not(holds_at(lit(l), Time)) :-
       (   holds_at(neg(closed(s1)), Time)
       ;   holds_at(neg(closed(s2)), Time)
       ),
       not(happens(unlight(l), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3550).

 /*  [(holds_at(neg(closed(s1)), Time);holds_at(neg(closed(s2)), Time)), not(happens(unlight(l), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(lit(l)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3550).
axiom(holds_at(neg(lit(l)), Time),
   
    [  (holds_at(neg(closed(s1)), Time);holds_at(neg(closed(s2)), Time)),
      not(happens(unlight(l), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3550).

 /*  not(holds_at(neg(closed(s1)), Time)) :-
       holds_at(lit(l), Time),
       not(happens(unlight(l), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3550).

 /*  [holds_at(lit(l), Time), not(happens(unlight(l), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(closed(s1), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3550).
axiom(holds_at(closed(s1), Time),
    [holds_at(lit(l), Time), not(happens(unlight(l), Time))]).

 /*  not(holds_at(neg(closed(s2)), Time)) :-
       holds_at(lit(l), Time),
       not(happens(unlight(l), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3550).

 /*  [holds_at(lit(l), Time), not(happens(unlight(l), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(closed(s2), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3550).
axiom(holds_at(closed(s2), Time),
    [holds_at(lit(l), Time), not(happens(unlight(l), Time))]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3553
% [time]
% HoldsAt(Closed(S2),time) &
% HoldsAt(Activated(R),time) ->
% Happens(Open(S2),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3556
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3555).

 /*  holds_at(closed(s2), Time), holds_at(activated(r), Time) ->
       happens(open(s2), Time).
 */

 /*  happens(open(s2), Time) :-
       holds_at(closed(s2), Time),
       holds_at(activated(r), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3555).

 /*  [holds_at(closed(s2), Time), holds_at(activated(r), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(open(s2), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3555).
axiom(happens(open(s2), Time),
    [holds_at(closed(s2), Time), holds_at(activated(r), Time)]).

 /*  not(holds_at(closed(s2), Time)) :-
       holds_at(activated(r), Time),
       not(happens(open(s2), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3555).

 /*  [holds_at(activated(r), Time), not(happens(open(s2), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(closed(s2)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3555).
axiom(holds_at(neg(closed(s2)), Time),
    [holds_at(activated(r), Time), not(happens(open(s2), Time))]).

 /*  not(holds_at(activated(r), Time)) :-
       holds_at(closed(s2), Time),
       not(happens(open(s2), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3555).

 /*  [holds_at(closed(s2), Time), not(happens(open(s2), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(activated(r)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3555).
axiom(holds_at(neg(activated(r)), Time),
    [holds_at(closed(s2), Time), not(happens(open(s2), Time))]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3558
% [time]
% !HoldsAt(Activated(R),time) &
% HoldsAt(Closed(S1),time) &
% HoldsAt(Closed(S2),time) &
% HoldsAt(Closed(S3),time) ->
% Happens(Activate(R),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3563
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3560).

 /*  holds_at(neg(activated(r)), Time), holds_at(closed(s1), Time), holds_at(closed(s2), Time), holds_at(closed(s3), Time) ->
       happens(activate(r), Time).
 */

 /*  happens(activate(r), Time) :-
       holds_at(neg(activated(r)), Time),
       holds_at(closed(s1), Time),
       holds_at(closed(s2), Time),
       holds_at(closed(s3), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3560).

 /*  [holds_at(neg(activated(r)), Time), holds_at(closed(s1), Time), holds_at(closed(s2), Time), holds_at(closed(s3), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(activate(r), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3560).
axiom(happens(activate(r), Time),
   
    [ holds_at(neg(activated(r)), Time),
      holds_at(closed(s1), Time),
      holds_at(closed(s2), Time),
      holds_at(closed(s3), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3560).

 /*  not(holds_at(neg(activated(r)), Time)) :-
       ( holds_at(closed(s1), Time),
         holds_at(closed(s2), Time),
         holds_at(closed(s3), Time)
       ),
       not(happens(activate(r), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3560).

 /*  [holds_at(closed(s1), Time), holds_at(closed(s2), Time), holds_at(closed(s3), Time), not(happens(activate(r), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(activated(r), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3560).
axiom(holds_at(activated(r), Time),
   
    [ holds_at(closed(s1), Time),
      holds_at(closed(s2), Time),
      holds_at(closed(s3), Time),
      not(happens(activate(r), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3560).

 /*  not(holds_at(closed(s1), Time)) :-
       ( holds_at(closed(s2), Time),
         holds_at(closed(s3), Time)
       ),
       holds_at(neg(activated(r)), Time),
       not(happens(activate(r), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3560).

 /*  [holds_at(closed(s2), Time), holds_at(closed(s3), Time), holds_at(neg(activated(r)), Time), not(happens(activate(r), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(closed(s1)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3560).
axiom(holds_at(neg(closed(s1)), Time),
   
    [ holds_at(closed(s2), Time),
      holds_at(closed(s3), Time),
      holds_at(neg(activated(r)), Time),
      not(happens(activate(r), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3560).

 /*  not(holds_at(closed(s2), Time)) :-
       holds_at(closed(s3), Time),
       holds_at(closed(s1), Time),
       holds_at(neg(activated(r)), Time),
       not(happens(activate(r), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3560).

 /*  [holds_at(closed(s3), Time), holds_at(closed(s1), Time), holds_at(neg(activated(r)), Time), not(happens(activate(r), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(closed(s2)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3560).
axiom(holds_at(neg(closed(s2)), Time),
   
    [ holds_at(closed(s3), Time),
      holds_at(closed(s1), Time),
      holds_at(neg(activated(r)), Time),
      not(happens(activate(r), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3560).

 /*  not(holds_at(closed(s3), Time)) :-
       holds_at(closed(s2), Time),
       holds_at(closed(s1), Time),
       holds_at(neg(activated(r)), Time),
       not(happens(activate(r), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3560).

 /*  [holds_at(closed(s2), Time), holds_at(closed(s1), Time), holds_at(neg(activated(r)), Time), not(happens(activate(r), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(closed(s3)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3560).
axiom(holds_at(neg(closed(s3)), Time),
   
    [ holds_at(closed(s2), Time),
      holds_at(closed(s1), Time),
      holds_at(neg(activated(r)), Time),
      not(happens(activate(r), Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3565
% [time]
% HoldsAt(Activated(R),time) &
% (!HoldsAt(Closed(S1),time) |
%  !HoldsAt(Closed(S2),time) |
%  !HoldsAt(Closed(S3),time)) ->
% Happens(Deactivate(R),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3570
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3567).

 /*  holds_at(activated(r), Time), (holds_at(neg(closed(s1)), Time);holds_at(neg(closed(s2)), Time);holds_at(neg(closed(s3)), Time)) ->
       happens(deactivate(r), Time).
 */

 /*  happens(deactivate(r), Time) :-
       holds_at(activated(r), Time),
       (   holds_at(neg(closed(s1)), Time)
       ;   holds_at(neg(closed(s2)), Time)
       ;   holds_at(neg(closed(s3)), Time)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3567).

 /*  [holds_at(activated(r), Time),  (holds_at(neg(closed(s1)), Time);holds_at(neg(closed(s2)), Time);holds_at(neg(closed(s3)), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(deactivate(r), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3567).
axiom(happens(deactivate(r), Time),
   
    [ holds_at(activated(r), Time),
       (holds_at(neg(closed(s1)), Time);holds_at(neg(closed(s2)), Time);holds_at(neg(closed(s3)), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3567).

 /*  not(holds_at(activated(r), Time)) :-
       (   holds_at(neg(closed(s1)), Time)
       ;   holds_at(neg(closed(s2)), Time)
       ;   holds_at(neg(closed(s3)), Time)
       ),
       not(happens(deactivate(r), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3567).

 /*  [(holds_at(neg(closed(s1)), Time);holds_at(neg(closed(s2)), Time);holds_at(neg(closed(s3)), Time)), not(happens(deactivate(r), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(activated(r)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3567).
axiom(holds_at(neg(activated(r)), Time),
   
    [  (holds_at(neg(closed(s1)), Time);holds_at(neg(closed(s2)), Time);holds_at(neg(closed(s3)), Time)),
      not(happens(deactivate(r), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3567).

 /*  not(holds_at(neg(closed(s1)), Time)) :-
       holds_at(activated(r), Time),
       not(happens(deactivate(r), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3567).

 /*  [holds_at(activated(r), Time), not(happens(deactivate(r), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(closed(s1), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3567).
axiom(holds_at(closed(s1), Time),
    [holds_at(activated(r), Time), not(happens(deactivate(r), Time))]).

 /*  not(holds_at(neg(closed(s2)), Time)) :-
       holds_at(activated(r), Time),
       not(happens(deactivate(r), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3567).

 /*  [holds_at(activated(r), Time), not(happens(deactivate(r), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(closed(s2), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3567).
axiom(holds_at(closed(s2), Time),
    [holds_at(activated(r), Time), not(happens(deactivate(r), Time))]).

 /*  not(holds_at(neg(closed(s3)), Time)) :-
       holds_at(activated(r), Time),
       not(happens(deactivate(r), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3567).

 /*  [holds_at(activated(r), Time), not(happens(deactivate(r), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(closed(s3), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3567).
axiom(holds_at(closed(s3), Time),
    [holds_at(activated(r), Time), not(happens(deactivate(r), Time))]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3572
% [switch,time]
 % Initiates(Close(switch),Closed(switch),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3572).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(close(Switch), closed(Switch), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3572).
axiom(initiates(close(Switch), closed(Switch), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3573
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3574).
% [switch,time]
 % Terminates(Open(switch),Closed(switch),time).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(open(Switch), closed(Switch), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3574).
axiom(terminates(open(Switch), closed(Switch), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3574
% [relay,time]
 % Initiates(Activate(relay),Activated(relay),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3574).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(activate(Relay), activated(Relay), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3574).
axiom(initiates(activate(Relay), activated(Relay), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3575
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3576).
% [relay,time]
 % Terminates(Deactivate(relay),Activated(relay),time).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(deactivate(Relay), activated(Relay), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3576).
axiom(terminates(deactivate(Relay), activated(Relay), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3576
% [light,time]
 % Initiates(Light(light),Lit(light),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3576).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(light(Light), lit(Light), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3576).
axiom(initiates(light(Light), lit(Light), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3577
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3578).
% [light,time]
 % Terminates(Unlight(light),Lit(light),time).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(unlight(Light), lit(Light), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3578).
axiom(terminates(unlight(Light), lit(Light), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3579
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3580).
% !HoldsAt(Closed(S1),0).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(closed(s1)), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3580).
axiom(holds_at(neg(closed(s1)), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3580
% HoldsAt(Closed(S2),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3580).

 /*  [] ->
       ta(Ta_Param, tvs1=[start], tvs2=[start], holds_at(closed(s2), start)).
 */
axiom(holds_at(closed(s2), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3581
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3582).
% HoldsAt(Closed(S3),0).

 /*  [] ->
       ta(Ta_Param, tvs1=[start], tvs2=[start], holds_at(closed(s3), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3582).
axiom(holds_at(closed(s3), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3582
% !HoldsAt(Activated(R),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3582).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(activated(r)), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3582).
axiom(holds_at(neg(activated(r)), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3583
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3584).
% !HoldsAt(Lit(L),0).

 /*  [] ->
       ta(Ta_Param, tvs1=[start], tvs2=[start], holds_at(neg(lit(l)), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3584).
axiom(holds_at(neg(lit(l)), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3585
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3586).
% Happens(Close(S1),0).

 /*  [] ->
       ta(Ta_Param, tvs1=[start], tvs2=[start], happens(close(s1), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3586).
axiom(happens(close(s1), start),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3587
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3588).
% completion Happens
==> completion(happens).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3589
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3590).
% range time 0 4
==> range(time,0,4).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3590
% range offset 1 1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3590).
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter6/CarryingABook2.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; Example: Carrying a Book (Release Axioms and State Constraints)
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3620
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3621).
% load foundations/Root.e
:- load_e('foundations/Root.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3621
% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3621).
:- load_e('foundations/EC.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3623
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3624).
% sort object
==> sort(object).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3624
% sort agent: object
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3624).
==> subsort(agent,object).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3625
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3626).
% sort room
==> sort(room).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3627
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3628).
% object Book
==> t(object,book).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3628
% agent Nathan
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3628).
==> t(agent,nathan).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3629
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3630).
% room LivingRoom, Kitchen
==> t(room,livingRoom).
==> t(room,kitchen).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3631
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3632).
% event LetGoOf(agent,object)
event(letGoOf(agent,object)).
==> mpred_prop(letGoOf(agent,object),event).
==> meta_argtypes(letGoOf(agent,object)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3632
% event PickUp(agent,object)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3632).
event(pickUp(agent,object)).
==> mpred_prop(pickUp(agent,object),event).
==> meta_argtypes(pickUp(agent,object)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3633
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3634).
% event Walk(agent,room,room)
event(walk(agent,room,room)).
==> mpred_prop(walk(agent,room,room),event).
==> meta_argtypes(walk(agent,room,room)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3635
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3636).
% fluent InRoom(object,room)
fluent(inRoom(object,room)).
==> mpred_prop(inRoom(object,room),fluent).
==> meta_argtypes(inRoom(object,room)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3636
% fluent Holding(agent,object)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3636).
fluent(holding(agent,object)).
==> mpred_prop(holding(agent,object),fluent).
==> meta_argtypes(holding(agent,object)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3638
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3639).
%; Sigma
% [agent,room1,room2,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3641
% Initiates(Walk(agent,room1,room2),InRoom(agent,room2),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3641).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(walk(Agent, Room1, Room2),
                    inRoom(Agent, Room2),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3641).
axiom(initiates(walk(Agent, Room1, Room2), inRoom(Agent, Room2), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3643
% [agent,room1,room2,time]
% room1!=% room2 ->
% Terminates(Walk(agent,room1,room2),InRoom(agent,room1),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3645

 /*  [diff(Room1, Room2)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(walk(Agent, Room1, Room2),
                     inRoom(Agent, Room1),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3645).
axiom(terminates(walk(Agent, Room1, Room2), inRoom(Agent, Room1), Time),
    [diff(Room1, Room2)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3647
% [agent,object,room,time]
% HoldsAt(InRoom(agent,room),time) &
% HoldsAt(InRoom(object,room),time) ->
% Initiates(PickUp(agent,object),Holding(agent,object),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3650
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3649).

 /*  [holds_at(inRoom(Agent, Room), Time), holds_at(inRoom(Object, Room), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(pickUp(Agent, Object),
                    holding(Agent, Object),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3649).
axiom(initiates(pickUp(Agent, Object), holding(Agent, Object), Time),
   
    [ holds_at(inRoom(Agent, Room), Time),
      holds_at(inRoom(Object, Room), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3652
% [agent,object,time]
% HoldsAt(Holding(agent,object),time) ->
% Terminates(LetGoOf(agent,object),Holding(agent,object),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3654

 /*  [holds_at(holding(Agent, Object), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(letGoOf(Agent, Object),
                     holding(Agent, Object),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3654).
axiom(terminates(letGoOf(Agent, Object), holding(Agent, Object), Time),
    [holds_at(holding(Agent, Object), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3656
% [agent,object,room,time]
% Releases(PickUp(agent,object),InRoom(object,room),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3658).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          releases(pickUp(Agent, Object),
                   inRoom(Object, Room),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3658).
axiom(releases(pickUp(Agent, Object), inRoom(Object, Room), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3659
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3660).
% [agent,object,room,time]
% HoldsAt(InRoom(agent,room),time) ->
% Initiates(LetGoOf(agent,object),InRoom(object,room),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3661

 /*  [holds_at(inRoom(Agent, Room), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(letGoOf(Agent, Object),
                    inRoom(Object, Room),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3660).
axiom(initiates(letGoOf(Agent, Object), inRoom(Object, Room), Time),
    [holds_at(inRoom(Agent, Room), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3663
%; Delta


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3665
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3666).
% Happens(PickUp(Nathan,Book),0).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          happens(pickUp(nathan, book), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3666).
axiom(happens(pickUp(nathan, book), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3666
% Happens(Walk(Nathan,LivingRoom,Kitchen),1).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3666).

 /*  [b(start, Maptime), ignore(start+1==Maptime)] ->
       ta(Ta_Param,
          tvs1=[start+1],
          tvs2=[Maptime, start],
          happens(walk(nathan, livingRoom, kitchen), Maptime)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3666).
axiom(happens(walk(nathan, livingRoom, kitchen), Maptime),
    [b(start, Maptime)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3668
%; Psi
% [object,room1,room2,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3671
% HoldsAt(InRoom(object,room1),time) &
% HoldsAt(InRoom(object,room2),time) ->
% room1=room2.
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3673
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3671).

 /*  holds_at(inRoom(Object, Room1), Time), holds_at(inRoom(Object, Room2), Time) ->
       equals(Room1, Room2).
 */

 /*  not(holds_at(inRoom(Object, Room1), Time)) :-
       holds_at(inRoom(Object, Room2), Time),
       not(equals(Room1, Room2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3671).

 /*  [holds_at(inRoom(Object, Room2), Time), not(equals(Room1, Room2))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(inRoom(Object, Room1)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3671).
axiom(holds_at(neg(inRoom(Object, Room1)), Time),
   
    [ holds_at(inRoom(Object, Room2), Time),
      not(equals(Room1, Room2))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3671).

 /*  not(holds_at(inRoom(Object, Room2), Time)) :-
       holds_at(inRoom(Object, Room1), Time),
       not(equals(Room1, Room2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3671).

 /*  [holds_at(inRoom(Object, Room1), Time), not(equals(Room1, Room2))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(inRoom(Object, Room2)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3671).
axiom(holds_at(neg(inRoom(Object, Room2)), Time),
   
    [ holds_at(inRoom(Object, Room1), Time),
      not(equals(Room2, Room1))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3675
% [agent,object,room,time]
% HoldsAt(Holding(agent,object),time) &
% HoldsAt(InRoom(agent,room),time) ->
% HoldsAt(InRoom(object,room),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3678
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3677).

 /*  holds_at(holding(Agent, Object), Time), holds_at(inRoom(Agent, Room), Time) ->
       holds_at(inRoom(Object, Room), Time).
 */

 /*  holds_at(inRoom(Object, Room), Time) :-
       holds_at(holding(Agent, Object), Time),
       holds_at(inRoom(Agent, Room), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3677).

 /*  [holds_at(holding(Agent, Object), Time), holds_at(inRoom(Agent, Room), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(inRoom(Object, Room), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3677).
axiom(holds_at(inRoom(Object, Room), Time),
   
    [ holds_at(holding(Agent, Object), Time),
      holds_at(inRoom(Agent, Room), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3677).

 /*  not(holds_at(holding(Agent, Object), Time)) :-
       holds_at(inRoom(Agent, Room), Time),
       not(holds_at(inRoom(Object, Room), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3677).

 /*  [holds_at(inRoom(Agent, Room), Time), holds_at(neg(inRoom(Object, Room)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(holding(Agent, Object)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3677).
axiom(holds_at(neg(holding(Agent, Object)), Time),
   
    [ holds_at(inRoom(Agent, Room), Time),
      holds_at(neg(inRoom(Object, Room)), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3677).

 /*  not(holds_at(inRoom(Agent, Room), Time)) :-
       holds_at(holding(Agent, Object), Time),
       not(holds_at(inRoom(Object, Room), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3677).

 /*  [holds_at(holding(Agent, Object), Time), holds_at(neg(inRoom(Object, Room)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(inRoom(Agent, Room)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3677).
axiom(holds_at(neg(inRoom(Agent, Room)), Time),
   
    [ holds_at(holding(Agent, Object), Time),
      holds_at(neg(inRoom(Object, Room)), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3680
%; Gamma


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3682
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3683).
% HoldsAt(InRoom(Nathan,LivingRoom),0).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(inRoom(nathan, livingRoom), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3683).
axiom(holds_at(inRoom(nathan, livingRoom), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3683
% HoldsAt(InRoom(Book,LivingRoom),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3683).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(inRoom(book, livingRoom), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3683).
axiom(holds_at(inRoom(book, livingRoom), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3685
%; added:


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3686
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3687).
% !HoldsAt(Holding(Nathan,Book),0).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(holding(nathan, book)), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3687).
axiom(holds_at(neg(holding(nathan, book)), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3687
% [agent,time]
 % !HoldsAt(Holding(agent,agent),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3687).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(holding(Agent, Agent)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3687).
axiom(holds_at(neg(holding(Agent, Agent)), Time),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3689
% completion Happens
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3689).
==> completion(happens).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3691
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3692).
% range time 0 2
==> range(time,0,2).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3692
% range offset 1 1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3692).
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter7/HotAirBalloon.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{MillerShanahan:1999,
%;   author = "Rob Miller and Murray Shanahan",
%;   year = "1999",
%;   title = "The event calculus in classical logic---\uppercase{A}lternative axiomatisations",
%;   journal = "Link{\"{o}}ping Electronic Articles in Computer and Information Science",
%;   volume = "4",
%;   number = "016",
%; }
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3729
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3730).
% option encoding 3
:- set_ec_option(encoding, 3).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3730
% option trajectory on
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3730).
:- set_ec_option(trajectory, on).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3732
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3733).
% load foundations/Root.e
:- load_e('foundations/Root.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3733
% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3733).
:- load_e('foundations/EC.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3735
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3736).
% sort balloon
==> sort(balloon).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3736
% sort agent
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3736).
==> sort(agent).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3737
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3738).
% sort height: integer
==> subsort(height,integer).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3739
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3740).
% agent Nathan
==> t(agent,nathan).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3740
% balloon Balloon
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3740).
==> t(balloon,balloon).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3742
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3743).
% fluent HeaterOn(balloon)
fluent(heaterOn(balloon)).
==> mpred_prop(heaterOn(balloon),fluent).
==> meta_argtypes(heaterOn(balloon)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3743
% fluent Height(balloon,height)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3743).
fluent(height(balloon,height)).
==> mpred_prop(height(balloon,height),fluent).
==> meta_argtypes(height(balloon,height)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3744
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3745).
% noninertial Height
==> noninertial(height).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3746
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3747).
% event TurnOnHeater(agent,balloon)
event(turnOnHeater(agent,balloon)).
==> mpred_prop(turnOnHeater(agent,balloon),event).
==> meta_argtypes(turnOnHeater(agent,balloon)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3747
% event TurnOffHeater(agent,balloon)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3747).
event(turnOffHeater(agent,balloon)).
==> mpred_prop(turnOffHeater(agent,balloon),event).
==> meta_argtypes(turnOffHeater(agent,balloon)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3749
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3750).
%; Sigma
% [agent,balloon,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3752
% Initiates(TurnOnHeater(agent,balloon),HeaterOn(balloon),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3752).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(turnOnHeater(Agent, Balloon),
                    heaterOn(Balloon),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3752).
axiom(initiates(turnOnHeater(Agent, Balloon), heaterOn(Balloon), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3754
% [agent,balloon,time]
% Terminates(TurnOffHeater(agent,balloon),HeaterOn(balloon),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3756).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(turnOffHeater(Agent, Balloon),
                     heaterOn(Balloon),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3756).
axiom(terminates(turnOffHeater(Agent, Balloon), heaterOn(Balloon), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3757
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3758).
%; Delta

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3759
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3760).
% Delta: 
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3759
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3760).
% Happens(TurnOnHeater(Nathan,Balloon),0).

 /*  [axiom_uses(delta, Axiom_uses_Ret)] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          happens(turnOnHeater(nathan, balloon), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3760).
axiom(happens(turnOnHeater(nathan, balloon), start),
    [axiom_uses(delta, Axiom_uses_Ret)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3760
% Delta: 
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3760).
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3760
% Happens(TurnOffHeater(Nathan,Balloon),2).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3760).

 /*  [axiom_uses(delta, Axiom_uses_Ret), b(start, Start2), toffset(start, 2, Start2), ignore(start+2==Start2)] ->
       ta(Ta_Param,
          tvs1=[start+2],
          tvs2=[Start2, start],
          happens(turnOffHeater(nathan, balloon), Start2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3760).
axiom(happens(turnOffHeater(nathan, balloon), Start2),
   
    [ axiom_uses(delta, Axiom_uses_Ret),
      b(start, Start2),
      toffset(start, 2, Start2)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3762
%; Psi
% [balloon,height1,height2,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3765
% HoldsAt(Height(balloon,height1),time) &
% HoldsAt(Height(balloon,height2),time) ->
% height1=height2.
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3767
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3765).

 /*  holds_at(height(Balloon, Height1), Time), holds_at(height(Balloon, Height2), Time) ->
       equals(Height1, Height2).
 */

 /*  not(holds_at(height(Balloon, Height1), Time)) :-
       holds_at(height(Balloon, Height2), Time),
       not(equals(Height1, Height2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3765).

 /*  [holds_at(height(Balloon, Height2), Time), not(equals(Height1, Height2))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(height(Balloon, Height1)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3765).
axiom(holds_at(neg(height(Balloon, Height1)), Time),
   
    [ holds_at(height(Balloon, Height2), Time),
      not(equals(Height1, Height2))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3765).

 /*  not(holds_at(height(Balloon, Height2), Time)) :-
       holds_at(height(Balloon, Height1), Time),
       not(equals(Height1, Height2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3765).

 /*  [holds_at(height(Balloon, Height1), Time), not(equals(Height1, Height2))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(height(Balloon, Height2)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3765).
axiom(holds_at(neg(height(Balloon, Height2)), Time),
   
    [ holds_at(height(Balloon, Height1), Time),
      not(equals(Height2, Height1))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3769
%; Pi
% [balloon,height1,height2,offset,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3772
% HoldsAt(Height(balloon,height1),time) &
% height2 = (height1 + offset) ->
% Trajectory(HeaterOn(balloon),time,Height(balloon,height2),offset).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3774
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3772).

 /*  holds_at(height(Balloon, Height1), Time), equals(Height2, Height1+Offset) ->
       trajectory(heaterOn(Balloon),
                  Time,
                  height(Balloon, Height2),
                  Offset).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3772).

 /*  trajectory(heaterOn(Balloon), Time, height(Balloon, Height2), Offset) :-
       holds_at(height(Balloon, Height1), Time),
       equals(Height2, Height1+Offset).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3772).

 /*  [holds_at(height(Balloon, Height1), Time), equals(Height2, Height1+Offset)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          trajectory(heaterOn(Balloon),
                     Time,
                     height(Balloon, Height2),
                     Offset)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3772).
axiom(trajectory(heaterOn(Balloon), Time, height(Balloon, Height2), Offset),
   
    [ holds_at(height(Balloon, Height1), Time),
      equals(Height2, Height1+Offset)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3772).

 /*  not(holds_at(height(Balloon, Height1), Time)) :-
       equals(Height2, Height1+Offset),
       not(trajectory(heaterOn(Balloon),
                      Time,
                      height(Balloon, Height2),
                      Offset)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3772).

 /*  [equals(Height2, Height1+Offset), not(trajectory(heaterOn(Balloon), Time, height(Balloon, Height2), Offset))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(height(Balloon, Height1)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3772).
axiom(holds_at(neg(height(Balloon, Height1)), Time),
   
    [ equals(Height2, Height1+Offset),
      not(trajectory(heaterOn(Balloon),
                     Time,
                     height(Balloon, Height2),
                     Offset))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3776
% [balloon,height1,height2,offset,time]
% HoldsAt(Height(balloon,height1),time) &
% height2 = (height1 - offset) ->
% AntiTrajectory(HeaterOn(balloon),time,Height(balloon,height2),offset).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3779
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3778).

 /*  holds_at(height(Balloon, Height1), Time), equals(Height2, Height1-Offset) ->
       antiTrajectory(heaterOn(Balloon),
                      Time,
                      height(Balloon, Height2),
                      Offset).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3778).

 /*  antiTrajectory(heaterOn(Balloon), Time, height(Balloon, Height2), Offset) :-
       holds_at(height(Balloon, Height1), Time),
       equals(Height2, Height1-Offset).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3778).

 /*  [holds_at(height(Balloon, Height1), Time), equals(Height2, Height1-Offset)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          antiTrajectory(heaterOn(Balloon),
                         Time,
                         height(Balloon, Height2),
                         Offset)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3778).
axiom(antiTrajectory(heaterOn(Balloon), Time, height(Balloon, Height2), Offset),
   
    [ holds_at(height(Balloon, Height1), Time),
      equals(Height2, Height1-Offset)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3778).

 /*  not(holds_at(height(Balloon, Height1), Time)) :-
       equals(Height2, Height1-Offset),
       not(antiTrajectory(heaterOn(Balloon),
                          Time,
                          height(Balloon, Height2),
                          Offset)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3778).

 /*  [equals(Height2, Height1-Offset), not(antiTrajectory(heaterOn(Balloon), Time, height(Balloon, Height2), Offset))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(height(Balloon, Height1)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3778).
axiom(holds_at(neg(height(Balloon, Height1)), Time),
   
    [ equals(Height2, Height1-Offset),
      not(antiTrajectory(heaterOn(Balloon),
                         Time,
                         height(Balloon, Height2),
                         Offset))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3781
%; Gamma


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3783
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3784).
% HoldsAt(Height(Balloon,0),0).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(height(balloon, 0), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3784).
axiom(holds_at(height(balloon, 0), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3785
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3786).
%; added:


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3786
% !HoldsAt(HeaterOn(Balloon),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3786).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(heaterOn(balloon)), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3786).
axiom(holds_at(neg(heaterOn(balloon)), start),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3788
% completion Delta Happens
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3788).
==> completion(delta).
==> completion(happens).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3790
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3791).
% range time 0 3
==> range(time,0,3).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3791
% range height 0 2
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3791).
==> range(height,0,2).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3792
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3793).
% range offset 1 2
==> range(offset,1,2).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter7/FallingObjectWithEvents.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3820
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3821).
% load foundations/Root.e
:- load_e('foundations/Root.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3821
% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3821).
:- load_e('foundations/EC.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3823
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3824).
% sort object
==> sort(object).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3824
% sort agent
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3824).
==> sort(agent).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3825
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3826).
% sort height: integer
==> subsort(height,integer).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3827
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3828).
% agent Nathan
==> t(agent,nathan).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3828
% object Apple
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3828).
==> t(object,apple).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3830
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3831).
% fluent Falling(object)
fluent(falling(object)).
==> mpred_prop(falling(object),fluent).
==> meta_argtypes(falling(object)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3831
% fluent Height(object,height)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3831).
fluent(height(object,height)).
==> mpred_prop(height(object,height),fluent).
==> meta_argtypes(height(object,height)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3833
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3834).
% event Drop(agent,object)
event(drop(agent,object)).
==> mpred_prop(drop(agent,object),event).
==> meta_argtypes(drop(agent,object)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3834
% event HitGround(object)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3834).
event(hitGround(object)).
==> mpred_prop(hitGround(object),event).
==> meta_argtypes(hitGround(object)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3836
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3837).
%; Sigma
% [agent,object,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3839
% Initiates(Drop(agent,object),Falling(object),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3839).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(drop(Agent, Object),
                    falling(Object),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3839).
axiom(initiates(drop(Agent, Object), falling(Object), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3841
% [agent,object,height,time]
% Releases(Drop(agent,object),Height(object,height),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3843).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          releases(drop(Agent, Object),
                   height(Object, Height),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3843).
axiom(releases(drop(Agent, Object), height(Object, Height), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3844
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3845).
% [object,time]
% Terminates(HitGround(object),Falling(object),time).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(hitGround(Object), falling(Object), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3845).
axiom(terminates(hitGround(Object), falling(Object), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3847
% [object,height,time]
% HoldsAt(Height(object,height),time) ->
% Initiates(HitGround(object),Height(object,height),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3849

 /*  [holds_at(height(Object, Height), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(hitGround(Object),
                    height(Object, Height),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3849).
axiom(initiates(hitGround(Object), height(Object, Height), Time),
    [holds_at(height(Object, Height), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3851
%; Delta

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3853
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3854).
% Delta: 
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3853
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3854).
% [object,time]
% HoldsAt(Falling(object),time) &
% HoldsAt(Height(object,0),time) ->
% Happens(HitGround(object),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3856
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3854).

 /*  axiom_uses(delta) ->
       ( holds_at(falling(Object), Time), holds_at(height(Object, 0), Time)->happens(hitGround(Object), Time)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3854).

 /*  happens(hitGround(Object), Time) :-
       ( holds_at(falling(Object), Time),
         holds_at(height(Object, 0), Time)
       ),
       axiom_uses(delta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3854).

 /*  [holds_at(falling(Object), Time), holds_at(height(Object, 0), Time), axiom_uses(delta, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(hitGround(Object), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3854).
axiom(happens(hitGround(Object), Time),
   
    [ holds_at(falling(Object), Time),
      holds_at(height(Object, 0), Time),
      axiom_uses(delta, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3854).

 /*  not(holds_at(falling(Object), Time)) :-
       holds_at(height(Object, 0), Time),
       not(happens(hitGround(Object), Time)),
       axiom_uses(delta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3854).

 /*  [holds_at(height(Object, 0), Time), not(happens(hitGround(Object), Time)), axiom_uses(delta, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(falling(Object)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3854).
axiom(holds_at(neg(falling(Object)), Time),
   
    [ holds_at(height(Object, 0), Time),
      not(happens(hitGround(Object), Time)),
      axiom_uses(delta, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3854).

 /*  not(holds_at(height(Object, 0), Time)) :-
       holds_at(falling(Object), Time),
       not(happens(hitGround(Object), Time)),
       axiom_uses(delta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3854).

 /*  [holds_at(falling(Object), Time), not(happens(hitGround(Object), Time)), axiom_uses(delta, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(height(Object, 0)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3854).
axiom(holds_at(neg(height(Object, 0)), Time),
   
    [ holds_at(falling(Object), Time),
      not(happens(hitGround(Object), Time)),
      axiom_uses(delta, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3854).

 /*  not(axiom_uses(delta)) :-
       not(happens(hitGround(Object), Time)),
       holds_at(falling(Object), Time),
       holds_at(height(Object, 0), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3854).

 /*  fix_axiom_head(Time) ->
       [not(axiom_uses(delta)), ->, not(axiom_uses(delta, Time))].
 */

 /*  [not(happens(hitGround(Object), Time)), holds_at(falling(Object), Time), holds_at(height(Object, 0), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(axiom_uses(delta, Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3854).
axiom(not(axiom_uses(delta, Time)),
   
    [ not(happens(hitGround(Object), Time)),
      holds_at(falling(Object), Time),
      holds_at(height(Object, 0), Time)
    ]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3858
% Delta: 
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3858).
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3858
% Happens(Drop(Nathan,Apple),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3858).

 /*  [axiom_uses(delta, Axiom_uses_Ret)] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          happens(drop(nathan, apple), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3858).
axiom(happens(drop(nathan, apple), start),
    [axiom_uses(delta, Axiom_uses_Ret)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3860
%; Psi
% [object,height1,height2,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3863
% HoldsAt(Height(object,height1),time) &
% HoldsAt(Height(object,height2),time) ->
% height1=height2.
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3865
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3863).

 /*  holds_at(height(Object, Height1), Time), holds_at(height(Object, Height2), Time) ->
       equals(Height1, Height2).
 */

 /*  not(holds_at(height(Object, Height1), Time)) :-
       holds_at(height(Object, Height2), Time),
       not(equals(Height1, Height2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3863).

 /*  [holds_at(height(Object, Height2), Time), not(equals(Height1, Height2))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(height(Object, Height1)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3863).
axiom(holds_at(neg(height(Object, Height1)), Time),
   
    [ holds_at(height(Object, Height2), Time),
      not(equals(Height1, Height2))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3863).

 /*  not(holds_at(height(Object, Height2), Time)) :-
       holds_at(height(Object, Height1), Time),
       not(equals(Height1, Height2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3863).

 /*  [holds_at(height(Object, Height1), Time), not(equals(Height1, Height2))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(height(Object, Height2)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3863).
axiom(holds_at(neg(height(Object, Height2)), Time),
   
    [ holds_at(height(Object, Height1), Time),
      not(equals(Height2, Height1))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3867
%; Pi
% [object,height1,height2,offset,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3870
% HoldsAt(Height(object,height1),time) &
% height2 = (height1 - offset) ->
% Trajectory(Falling(object),time,Height(object,height2),offset).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3872
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3870).

 /*  holds_at(height(Object, Height1), Time), equals(Height2, Height1-Offset) ->
       trajectory(falling(Object),
                  Time,
                  height(Object, Height2),
                  Offset).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3870).

 /*  trajectory(falling(Object), Time, height(Object, Height2), Offset) :-
       holds_at(height(Object, Height1), Time),
       equals(Height2, Height1-Offset).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3870).

 /*  [holds_at(height(Object, Height1), Time), equals(Height2, Height1-Offset)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          trajectory(falling(Object),
                     Time,
                     height(Object, Height2),
                     Offset)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3870).
axiom(trajectory(falling(Object), Time, height(Object, Height2), Offset),
   
    [ holds_at(height(Object, Height1), Time),
      equals(Height2, Height1-Offset)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3870).

 /*  not(holds_at(height(Object, Height1), Time)) :-
       equals(Height2, Height1-Offset),
       not(trajectory(falling(Object),
                      Time,
                      height(Object, Height2),
                      Offset)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3870).

 /*  [equals(Height2, Height1-Offset), not(trajectory(falling(Object), Time, height(Object, Height2), Offset))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(height(Object, Height1)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3870).
axiom(holds_at(neg(height(Object, Height1)), Time),
   
    [ equals(Height2, Height1-Offset),
      not(trajectory(falling(Object),
                     Time,
                     height(Object, Height2),
                     Offset))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3874
%; Gamma


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3876
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3877).
% !HoldsAt(Falling(Apple),0).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(falling(apple)), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3877).
axiom(holds_at(neg(falling(apple)), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3877
% HoldsAt(Height(Apple,3),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3877).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(height(apple, 3), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3877).
axiom(holds_at(height(apple, 3), start),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3879
% completion Delta Happens
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3879).
==> completion(delta).
==> completion(happens).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3881
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3882).
% range time 0 5
==> range(time,0,5).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3882
% range height 0 3
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3882).
==> range(height,0,3).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3883
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3884).
% range offset 1 3
==> range(offset,1,3).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter7/FallingObjectWithAntiTrajectory.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3911
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3912).
% option encoding 3
:- set_ec_option(encoding, 3).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3912
% option trajectory on
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3912).
:- set_ec_option(trajectory, on).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3914
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3915).
% load foundations/Root.e
:- load_e('foundations/Root.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3915
% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3915).
:- load_e('foundations/EC.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3917
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3918).
% sort object
==> sort(object).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3918
% sort agent
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3918).
==> sort(agent).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3919
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3920).
% sort height: integer
==> subsort(height,integer).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3921
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3922).
% agent Nathan
==> t(agent,nathan).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3922
% object Apple
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3922).
==> t(object,apple).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3924
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3925).
% fluent Falling(object)
fluent(falling(object)).
==> mpred_prop(falling(object),fluent).
==> meta_argtypes(falling(object)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3925
% fluent Height(object,height)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3925).
fluent(height(object,height)).
==> mpred_prop(height(object,height),fluent).
==> meta_argtypes(height(object,height)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3926
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3927).
% noninertial Height
==> noninertial(height).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3928
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3929).
% event Drop(agent,object)
event(drop(agent,object)).
==> mpred_prop(drop(agent,object),event).
==> meta_argtypes(drop(agent,object)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3929
% event HitGround(object)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3929).
event(hitGround(object)).
==> mpred_prop(hitGround(object),event).
==> meta_argtypes(hitGround(object)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3931
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3932).
%; Sigma
% [agent,object,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3934
% Initiates(Drop(agent,object),Falling(object),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3934).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(drop(Agent, Object),
                    falling(Object),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3934).
axiom(initiates(drop(Agent, Object), falling(Object), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3936
% [object,time]
% Terminates(HitGround(object),Falling(object),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3938).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(hitGround(Object), falling(Object), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3938).
axiom(terminates(hitGround(Object), falling(Object), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3939
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3940).
%; Delta

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3941
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3942).
% Delta: 
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3941
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3942).
% [object,time]
% HoldsAt(Falling(object),time) &
% HoldsAt(Height(object,0),time) ->
% Happens(HitGround(object),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3944
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3942).

 /*  axiom_uses(delta) ->
       ( holds_at(falling(Object), Time), holds_at(height(Object, 0), Time)->happens(hitGround(Object), Time)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3942).

 /*  happens(hitGround(Object), Time) :-
       ( holds_at(falling(Object), Time),
         holds_at(height(Object, 0), Time)
       ),
       axiom_uses(delta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3942).

 /*  [holds_at(falling(Object), Time), holds_at(height(Object, 0), Time), axiom_uses(delta, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(hitGround(Object), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3942).
axiom(happens(hitGround(Object), Time),
   
    [ holds_at(falling(Object), Time),
      holds_at(height(Object, 0), Time),
      axiom_uses(delta, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3942).

 /*  not(holds_at(falling(Object), Time)) :-
       holds_at(height(Object, 0), Time),
       not(happens(hitGround(Object), Time)),
       axiom_uses(delta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3942).

 /*  [holds_at(height(Object, 0), Time), not(happens(hitGround(Object), Time)), axiom_uses(delta, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(falling(Object)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3942).
axiom(holds_at(neg(falling(Object)), Time),
   
    [ holds_at(height(Object, 0), Time),
      not(happens(hitGround(Object), Time)),
      axiom_uses(delta, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3942).

 /*  not(holds_at(height(Object, 0), Time)) :-
       holds_at(falling(Object), Time),
       not(happens(hitGround(Object), Time)),
       axiom_uses(delta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3942).

 /*  [holds_at(falling(Object), Time), not(happens(hitGround(Object), Time)), axiom_uses(delta, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(height(Object, 0)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3942).
axiom(holds_at(neg(height(Object, 0)), Time),
   
    [ holds_at(falling(Object), Time),
      not(happens(hitGround(Object), Time)),
      axiom_uses(delta, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3942).

 /*  not(axiom_uses(delta)) :-
       not(happens(hitGround(Object), Time)),
       holds_at(falling(Object), Time),
       holds_at(height(Object, 0), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3942).

 /*  fix_axiom_head(Time) ->
       [not(axiom_uses(delta)), ->, not(axiom_uses(delta, Time))].
 */

 /*  [not(happens(hitGround(Object), Time)), holds_at(falling(Object), Time), holds_at(height(Object, 0), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(axiom_uses(delta, Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3942).
axiom(not(axiom_uses(delta, Time)),
   
    [ not(happens(hitGround(Object), Time)),
      holds_at(falling(Object), Time),
      holds_at(height(Object, 0), Time)
    ]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3946
% Delta: 
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3946).
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3946
% Happens(Drop(Nathan,Apple),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3946).

 /*  [axiom_uses(delta, Axiom_uses_Ret)] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          happens(drop(nathan, apple), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3946).
axiom(happens(drop(nathan, apple), start),
    [axiom_uses(delta, Axiom_uses_Ret)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3948
%; Psi
% [object,height1,height2,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3951
% HoldsAt(Height(object,height1),time) &
% HoldsAt(Height(object,height2),time) ->
% height1=height2.
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3953
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3951).

 /*  holds_at(height(Object, Height1), Time), holds_at(height(Object, Height2), Time) ->
       equals(Height1, Height2).
 */

 /*  not(holds_at(height(Object, Height1), Time)) :-
       holds_at(height(Object, Height2), Time),
       not(equals(Height1, Height2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3951).

 /*  [holds_at(height(Object, Height2), Time), not(equals(Height1, Height2))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(height(Object, Height1)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3951).
axiom(holds_at(neg(height(Object, Height1)), Time),
   
    [ holds_at(height(Object, Height2), Time),
      not(equals(Height1, Height2))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3951).

 /*  not(holds_at(height(Object, Height2), Time)) :-
       holds_at(height(Object, Height1), Time),
       not(equals(Height1, Height2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3951).

 /*  [holds_at(height(Object, Height1), Time), not(equals(Height1, Height2))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(height(Object, Height2)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3951).
axiom(holds_at(neg(height(Object, Height2)), Time),
   
    [ holds_at(height(Object, Height1), Time),
      not(equals(Height2, Height1))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3955
%; Pi
% [object,height1,height2,offset,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3958
% HoldsAt(Height(object,height1),time) &
% height2 = (height1 - offset) ->
% Trajectory(Falling(object),time,Height(object,height2),offset).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3960
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3958).

 /*  holds_at(height(Object, Height1), Time), equals(Height2, Height1-Offset) ->
       trajectory(falling(Object),
                  Time,
                  height(Object, Height2),
                  Offset).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3958).

 /*  trajectory(falling(Object), Time, height(Object, Height2), Offset) :-
       holds_at(height(Object, Height1), Time),
       equals(Height2, Height1-Offset).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3958).

 /*  [holds_at(height(Object, Height1), Time), equals(Height2, Height1-Offset)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          trajectory(falling(Object),
                     Time,
                     height(Object, Height2),
                     Offset)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3958).
axiom(trajectory(falling(Object), Time, height(Object, Height2), Offset),
   
    [ holds_at(height(Object, Height1), Time),
      equals(Height2, Height1-Offset)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3958).

 /*  not(holds_at(height(Object, Height1), Time)) :-
       equals(Height2, Height1-Offset),
       not(trajectory(falling(Object),
                      Time,
                      height(Object, Height2),
                      Offset)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3958).

 /*  [equals(Height2, Height1-Offset), not(trajectory(falling(Object), Time, height(Object, Height2), Offset))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(height(Object, Height1)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3958).
axiom(holds_at(neg(height(Object, Height1)), Time),
   
    [ equals(Height2, Height1-Offset),
      not(trajectory(falling(Object),
                     Time,
                     height(Object, Height2),
                     Offset))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3962
% [object,height,offset,time]
% HoldsAt(Height(object,height),time) ->
% AntiTrajectory(Falling(object),time,Height(object,height),offset).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3964

 /*  holds_at(height(Object, Height), Time) ->
       antiTrajectory(falling(Object),
                      Time,
                      height(Object, Height),
                      Offset).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3964).

 /*  antiTrajectory(falling(Object), Time, height(Object, Height), Offset) :-
       holds_at(height(Object, Height), Time).
 */

 /*  [holds_at(height(Object, Height), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          antiTrajectory(falling(Object),
                         Time,
                         height(Object, Height),
                         Offset)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3964).
axiom(antiTrajectory(falling(Object), Time, height(Object, Height), Offset),
    [holds_at(height(Object, Height), Time)]).

 /*  not(holds_at(height(Object, Height), Time)) :-
       not(antiTrajectory(falling(Object),
                          Time,
                          height(Object, Height),
                          Offset)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3964).

 /*  [not(antiTrajectory(falling(Object), Time, height(Object, Height), Offset))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(height(Object, Height)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3964).
axiom(holds_at(neg(height(Object, Height)), Time),
   
    [ not(antiTrajectory(falling(Object),
                         Time,
                         height(Object, Height),
                         Offset))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3966
%; Gamma


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3968
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3969).
% !HoldsAt(Falling(Apple),0).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(falling(apple)), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3969).
axiom(holds_at(neg(falling(apple)), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3969
% HoldsAt(Height(Apple,3),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3969).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(height(apple, 3), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3969).
axiom(holds_at(height(apple, 3), start),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3971
% completion Delta Happens
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3971).
==> completion(delta).
==> completion(happens).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3973
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3974).
% range time 0 5
==> range(time,0,5).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3974
% range height 0 3
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3974).
==> range(height,0,3).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:3975
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',3976).
% range offset 1 3
==> range(offset,1,3).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter3/Telephone2.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4003
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4004).
% load foundations/Root.e
:- load_e('foundations/Root.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4004
% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4004).
:- load_e('foundations/EC.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4006
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4007).
% sort agent
==> sort(agent).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4007
% sort phone
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4007).
==> sort(phone).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4009
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4010).
% agent Agent1, Agent2
==> t(agent,agent1).
==> t(agent,agent2).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4010
% phone Phone1, Phone2
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4010).
==> t(phone,phone1).
==> t(phone,phone2).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4012
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4013).
% fluent Ringing(phone,phone)
fluent(ringing(phone,phone)).
==> mpred_prop(ringing(phone,phone),fluent).
==> meta_argtypes(ringing(phone,phone)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4013
% fluent DialTone(phone)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4013).
fluent(dialTone(phone)).
==> mpred_prop(dialTone(phone),fluent).
==> meta_argtypes(dialTone(phone)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4014
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4015).
% fluent BusySignal(phone)
fluent(busySignal(phone)).
==> mpred_prop(busySignal(phone),fluent).
==> meta_argtypes(busySignal(phone)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4015
% fluent Idle(phone)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4015).
fluent(idle(phone)).
==> mpred_prop(idle(phone),fluent).
==> meta_argtypes(idle(phone)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4016
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4017).
% fluent Connected(phone,phone)
fluent(connected(phone,phone)).
==> mpred_prop(connected(phone,phone),fluent).
==> meta_argtypes(connected(phone,phone)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4017
% fluent Disconnected(phone)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4017).
fluent(disconnected(phone)).
==> mpred_prop(disconnected(phone),fluent).
==> meta_argtypes(disconnected(phone)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4019
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4020).
% event PickUp(agent,phone)
event(pickUp(agent,phone)).
==> mpred_prop(pickUp(agent,phone),event).
==> meta_argtypes(pickUp(agent,phone)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4020
% event SetDown(agent,phone)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4020).
event(setDown(agent,phone)).
==> mpred_prop(setDown(agent,phone),event).
==> meta_argtypes(setDown(agent,phone)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4021
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4022).
% event Dial(agent,phone,phone)
event(dial(agent,phone,phone)).
==> mpred_prop(dial(agent,phone,phone),event).
==> meta_argtypes(dial(agent,phone,phone)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4023
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4024).
%; Sigma
% [agent,phone,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4026
% HoldsAt(Idle(phone),time) ->
% Initiates(PickUp(agent,phone),DialTone(phone),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4026).

 /*  [holds_at(idle(Phone), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(pickUp(Agent, Phone),
                    dialTone(Phone),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4026).
axiom(initiates(pickUp(Agent, Phone), dialTone(Phone), Time),
    [holds_at(idle(Phone), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4029
% [agent,phone,time]
% HoldsAt(Idle(phone),time) ->
% Terminates(PickUp(agent,phone),Idle(phone),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4031

 /*  [holds_at(idle(Phone), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(pickUp(Agent, Phone),
                     idle(Phone),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4031).
axiom(terminates(pickUp(Agent, Phone), idle(Phone), Time),
    [holds_at(idle(Phone), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4033
% [agent,phone,time]
% HoldsAt(DialTone(phone),time) ->
% Initiates(SetDown(agent,phone),Idle(phone),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4035

 /*  [holds_at(dialTone(Phone), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(setDown(Agent, Phone),
                    idle(Phone),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4035).
axiom(initiates(setDown(Agent, Phone), idle(Phone), Time),
    [holds_at(dialTone(Phone), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4037
% [agent,phone,time]
% HoldsAt(DialTone(phone),time) ->
% Terminates(SetDown(agent,phone),DialTone(phone),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4039

 /*  [holds_at(dialTone(Phone), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(setDown(Agent, Phone),
                     dialTone(Phone),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4039).
axiom(terminates(setDown(Agent, Phone), dialTone(Phone), Time),
    [holds_at(dialTone(Phone), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4041
% [agent,phone1,phone2,time]
% HoldsAt(DialTone(phone1),time) &
% HoldsAt(Idle(phone2),time) ->
% Initiates(Dial(agent,phone1,phone2),Ringing(phone1,phone2),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4044
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4043).

 /*  [holds_at(dialTone(Phone1), Time), holds_at(idle(Phone2), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(dial(Agent, Phone1, Phone2),
                    ringing(Phone1, Phone2),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4043).
axiom(initiates(dial(Agent, Phone1, Phone2), ringing(Phone1, Phone2), Time),
   
    [ holds_at(dialTone(Phone1), Time),
      holds_at(idle(Phone2), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4046
% [agent,phone1,phone2,time]
% HoldsAt(DialTone(phone1),time) &
% HoldsAt(Idle(phone2),time) ->
% Terminates(Dial(agent,phone1,phone2),DialTone(phone1),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4049
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4048).

 /*  [holds_at(dialTone(Phone1), Time), holds_at(idle(Phone2), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(dial(Agent, Phone1, Phone2),
                     dialTone(Phone1),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4048).
axiom(terminates(dial(Agent, Phone1, Phone2), dialTone(Phone1), Time),
   
    [ holds_at(dialTone(Phone1), Time),
      holds_at(idle(Phone2), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4051
% [agent,phone1,phone2,time]
% HoldsAt(DialTone(phone1),time) &
% HoldsAt(Idle(phone2),time) ->
% Terminates(Dial(agent,phone1,phone2),Idle(phone2),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4054
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4053).

 /*  [holds_at(dialTone(Phone1), Time), holds_at(idle(Phone2), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(dial(Agent, Phone1, Phone2),
                     idle(Phone2),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4053).
axiom(terminates(dial(Agent, Phone1, Phone2), idle(Phone2), Time),
   
    [ holds_at(dialTone(Phone1), Time),
      holds_at(idle(Phone2), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4056
% [agent,phone1,phone2,time]
% HoldsAt(DialTone(phone1),time) &
% !HoldsAt(Idle(phone2),time) ->
% Initiates(Dial(agent,phone1,phone2),BusySignal(phone1),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4059
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4058).

 /*  [holds_at(dialTone(Phone1), Time), holds_at(neg(idle(Phone2)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(dial(Agent, Phone1, Phone2),
                    busySignal(Phone1),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4058).
axiom(initiates(dial(Agent, Phone1, Phone2), busySignal(Phone1), Time),
   
    [ holds_at(dialTone(Phone1), Time),
      holds_at(neg(idle(Phone2)), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4061
% [agent,phone1,phone2,time]
% HoldsAt(DialTone(phone1),time) &
% !HoldsAt(Idle(phone2),time) ->
% Terminates(Dial(agent,phone1,phone2),DialTone(phone1),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4064
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4063).

 /*  [holds_at(dialTone(Phone1), Time), holds_at(neg(idle(Phone2)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(dial(Agent, Phone1, Phone2),
                     dialTone(Phone1),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4063).
axiom(terminates(dial(Agent, Phone1, Phone2), dialTone(Phone1), Time),
   
    [ holds_at(dialTone(Phone1), Time),
      holds_at(neg(idle(Phone2)), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4066
% [agent,phone,time]
% HoldsAt(BusySignal(phone),time) ->
% Initiates(SetDown(agent,phone),Idle(phone),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4068

 /*  [holds_at(busySignal(Phone), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(setDown(Agent, Phone),
                    idle(Phone),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4068).
axiom(initiates(setDown(Agent, Phone), idle(Phone), Time),
    [holds_at(busySignal(Phone), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4070
% [agent,phone,time]
% HoldsAt(BusySignal(phone),time) ->
% Terminates(SetDown(agent,phone),BusySignal(phone),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4072

 /*  [holds_at(busySignal(Phone), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(setDown(Agent, Phone),
                     busySignal(Phone),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4072).
axiom(terminates(setDown(Agent, Phone), busySignal(Phone), Time),
    [holds_at(busySignal(Phone), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4074
% [agent,phone1,phone2,time]
% HoldsAt(Ringing(phone1,phone2),time) ->
% Initiates(SetDown(agent,phone1),Idle(phone1),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4076

 /*  [holds_at(ringing(Phone1, Phone2), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(setDown(Agent, Phone1),
                    idle(Phone1),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4076).
axiom(initiates(setDown(Agent, Phone1), idle(Phone1), Time),
    [holds_at(ringing(Phone1, Phone2), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4078
% [agent,phone1,phone2,time]
% HoldsAt(Ringing(phone1,phone2),time) ->
% Initiates(SetDown(agent,phone1),Idle(phone2),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4080

 /*  [holds_at(ringing(Phone1, Phone2), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(setDown(Agent, Phone1),
                    idle(Phone2),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4080).
axiom(initiates(setDown(Agent, Phone1), idle(Phone2), Time),
    [holds_at(ringing(Phone1, Phone2), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4082
% [agent,phone1,phone2,time]
% HoldsAt(Ringing(phone1,phone2),time) ->
% Terminates(SetDown(agent,phone1),Ringing(phone1,phone2),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4084

 /*  [holds_at(ringing(Phone1, Phone2), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(setDown(Agent, Phone1),
                     ringing(Phone1, Phone2),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4084).
axiom(terminates(setDown(Agent, Phone1), ringing(Phone1, Phone2), Time),
    [holds_at(ringing(Phone1, Phone2), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4086
% [agent,phone1,phone2,time]
% HoldsAt(Ringing(phone1,phone2),time) ->
% Initiates(PickUp(agent,phone2),Connected(phone1,phone2),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4088

 /*  [holds_at(ringing(Phone1, Phone2), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(pickUp(Agent, Phone2),
                    connected(Phone1, Phone2),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4088).
axiom(initiates(pickUp(Agent, Phone2), connected(Phone1, Phone2), Time),
    [holds_at(ringing(Phone1, Phone2), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4090
% [agent,phone1,phone2,time]
% HoldsAt(Ringing(phone1,phone2),time) ->
% Terminates(PickUp(agent,phone2),Ringing(phone1,phone2),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4092

 /*  [holds_at(ringing(Phone1, Phone2), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(pickUp(Agent, Phone2),
                     ringing(Phone1, Phone2),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4092).
axiom(terminates(pickUp(Agent, Phone2), ringing(Phone1, Phone2), Time),
    [holds_at(ringing(Phone1, Phone2), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4094
% [agent,phone1,phone2,time]
% HoldsAt(Connected(phone1,phone2),time) ->
% Initiates(SetDown(agent,phone1),Idle(phone1),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4096

 /*  [holds_at(connected(Phone1, Phone2), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(setDown(Agent, Phone1),
                    idle(Phone1),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4096).
axiom(initiates(setDown(Agent, Phone1), idle(Phone1), Time),
    [holds_at(connected(Phone1, Phone2), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4098
% [agent,phone1,phone2,time]
% HoldsAt(Connected(phone1,phone2),time) ->
% Initiates(SetDown(agent,phone1),Disconnected(phone2),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4100

 /*  [holds_at(connected(Phone1, Phone2), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(setDown(Agent, Phone1),
                    disconnected(Phone2),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4100).
axiom(initiates(setDown(Agent, Phone1), disconnected(Phone2), Time),
    [holds_at(connected(Phone1, Phone2), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4102
% [agent,phone1,phone2,time]
% HoldsAt(Connected(phone1,phone2),time) ->
% Terminates(SetDown(agent,phone1),Connected(phone1,phone2),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4104

 /*  [holds_at(connected(Phone1, Phone2), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(setDown(Agent, Phone1),
                     connected(Phone1, Phone2),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4104).
axiom(terminates(setDown(Agent, Phone1), connected(Phone1, Phone2), Time),
    [holds_at(connected(Phone1, Phone2), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4106
% [agent,phone1,phone2,time]
% HoldsAt(Connected(phone1,phone2),time) ->
% Initiates(SetDown(agent,phone2),Idle(phone2),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4108

 /*  [holds_at(connected(Phone1, Phone2), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(setDown(Agent, Phone2),
                    idle(Phone2),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4108).
axiom(initiates(setDown(Agent, Phone2), idle(Phone2), Time),
    [holds_at(connected(Phone1, Phone2), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4110
% [agent,phone1,phone2,time]
% HoldsAt(Connected(phone1,phone2),time) ->
% Initiates(SetDown(agent,phone2),Disconnected(phone1),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4112

 /*  [holds_at(connected(Phone1, Phone2), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(setDown(Agent, Phone2),
                    disconnected(Phone1),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4112).
axiom(initiates(setDown(Agent, Phone2), disconnected(Phone1), Time),
    [holds_at(connected(Phone1, Phone2), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4114
% [agent,phone1,phone2,time]
% HoldsAt(Connected(phone1,phone2),time) ->
% Terminates(SetDown(agent,phone2),Connected(phone1,phone2),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4116

 /*  [holds_at(connected(Phone1, Phone2), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(setDown(Agent, Phone2),
                     connected(Phone1, Phone2),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4116).
axiom(terminates(setDown(Agent, Phone2), connected(Phone1, Phone2), Time),
    [holds_at(connected(Phone1, Phone2), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4118
% [agent,phone,time]
% HoldsAt(Disconnected(phone),time) ->
% Initiates(SetDown(agent,phone),Idle(phone),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4120

 /*  [holds_at(disconnected(Phone), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(setDown(Agent, Phone),
                    idle(Phone),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4120).
axiom(initiates(setDown(Agent, Phone), idle(Phone), Time),
    [holds_at(disconnected(Phone), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4122
% [agent,phone,time]
% HoldsAt(Disconnected(phone),time) ->
% Terminates(SetDown(agent,phone),Disconnected(phone),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4124

 /*  [holds_at(disconnected(Phone), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(setDown(Agent, Phone),
                     disconnected(Phone),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4124).
axiom(terminates(setDown(Agent, Phone), disconnected(Phone), Time),
    [holds_at(disconnected(Phone), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4126
%; Delta


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4128
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4129).
% Happens(PickUp(Agent1,Phone1),0).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          happens(pickUp(agent1, phone1), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4129).
axiom(happens(pickUp(agent1, phone1), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4129
% Happens(Dial(Agent1,Phone1,Phone2),1).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4129).

 /*  [b(start, Maptime), ignore(start+1==Maptime)] ->
       ta(Ta_Param,
          tvs1=[start+1],
          tvs2=[Maptime, start],
          happens(dial(agent1, phone1, phone2), Maptime)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4129).
axiom(happens(dial(agent1, phone1, phone2), Maptime),
    [b(start, Maptime)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4130
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4131).
% Happens(PickUp(Agent2,Phone2),2).

 /*  [b(start, Start2), toffset(start, 2, Start2), ignore(start+2==Start2)] ->
       ta(Ta_Param,
          tvs1=[start+2],
          tvs2=[Start2, start],
          happens(pickUp(agent2, phone2), Start2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4131).
axiom(happens(pickUp(agent2, phone2), Start2),
    [b(start, Start2), toffset(start, 2, Start2)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4132
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4133).
%; Psi
% [phone,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4135
% !HoldsAt(Ringing(phone,phone),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4135).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(ringing(Phone, Phone)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4135).
axiom(holds_at(neg(ringing(Phone, Phone)), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4137
% [phone1,phone2,time]
% HoldsAt(Ringing(phone1,phone2),time) &
% phone1!=phone2 ->
% !HoldsAt(Ringing(phone2,phone1),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4140
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4139).

 /*  holds_at(ringing(Phone1, Phone2), Time), diff(Phone1, Phone2) ->
       holds_at(neg(ringing(Phone2, Phone1)), Time).
 */

 /*  holds_at(neg(ringing(Phone2, Phone1)), Time) :-
       holds_at(ringing(Phone1, Phone2), Time),
       diff(Phone1, Phone2).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4139).

 /*  [holds_at(ringing(Phone1, Phone2), Time), diff(Phone1, Phone2)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(ringing(Phone2, Phone1)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4139).
axiom(holds_at(neg(ringing(Phone2, Phone1)), Time),
   
    [ holds_at(ringing(Phone1, Phone2), Time),
      diff(Phone1, Phone2)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4139).

 /*  not(holds_at(ringing(Phone1, Phone2), Time)) :-
       diff(Phone1, Phone2),
       not(holds_at(neg(ringing(Phone2, Phone1)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4139).

 /*  [diff(Phone1, Phone2), holds_at(ringing(Phone2, Phone1), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(ringing(Phone1, Phone2)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4139).
axiom(holds_at(neg(ringing(Phone1, Phone2)), Time),
   
    [ diff(Phone1, Phone2),
      holds_at(ringing(Phone2, Phone1), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4142
% [phone,time]
% !HoldsAt(Connected(phone,phone),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4144).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(connected(Phone, Phone)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4144).
axiom(holds_at(neg(connected(Phone, Phone)), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4145
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4146).
% [phone1,phone2,time]
% HoldsAt(Connected(phone1,phone2),time) &
% phone1!=phone2 ->
% !HoldsAt(Connected(phone2,phone1),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4148
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4146).

 /*  holds_at(connected(Phone1, Phone2), Time), diff(Phone1, Phone2) ->
       holds_at(neg(connected(Phone2, Phone1)), Time).
 */

 /*  holds_at(neg(connected(Phone2, Phone1)), Time) :-
       holds_at(connected(Phone1, Phone2), Time),
       diff(Phone1, Phone2).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4146).

 /*  [holds_at(connected(Phone1, Phone2), Time), diff(Phone1, Phone2)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(connected(Phone2, Phone1)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4146).
axiom(holds_at(neg(connected(Phone2, Phone1)), Time),
   
    [ holds_at(connected(Phone1, Phone2), Time),
      diff(Phone1, Phone2)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4146).

 /*  not(holds_at(connected(Phone1, Phone2), Time)) :-
       diff(Phone1, Phone2),
       not(holds_at(neg(connected(Phone2, Phone1)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4146).

 /*  [diff(Phone1, Phone2), holds_at(connected(Phone2, Phone1), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(connected(Phone1, Phone2)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4146).
axiom(holds_at(neg(connected(Phone1, Phone2)), Time),
   
    [ diff(Phone1, Phone2),
      holds_at(connected(Phone2, Phone1), Time)
    ]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4150
% mutex Idle, DialTone, BusySignal, Disconnected
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4150).

 /*  fix_axiom_head(Time) ->
       [mutex(idle), ->, holds_at(mutex(idle), Time)].
 */

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(mutex(idle), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4150).
axiom(holds_at(mutex(idle), Time),
    []).

 /*  fix_axiom_head(Time1) ->
       [mutex(dialTone), ->, holds_at(mutex(dialTone), Time1)].
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4150).

 /*  [] ->
       ta(Time1,
          tvs1=[Time1],
          tvs2=[Time1],
          holds_at(mutex(dialTone), Time1)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4150).
axiom(holds_at(mutex(dialTone), Time1),
    []).

 /*  fix_axiom_head(Time2) ->
       [mutex(busySignal), ->, holds_at(mutex(busySignal), Time2)].
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4150).

 /*  [] ->
       ta(Time2,
          tvs1=[Time2],
          tvs2=[Time2],
          holds_at(mutex(busySignal), Time2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4150).
axiom(holds_at(mutex(busySignal), Time2),
    []).

 /*  fix_axiom_head(Time3) ->
       [mutex(disconnected), ->, holds_at(mutex(disconnected), Time3)].
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4150).

 /*  [] ->
       ta(Time3,
          tvs1=[Time3],
          tvs2=[Time3],
          holds_at(mutex(disconnected), Time3)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4150).
axiom(holds_at(mutex(disconnected), Time3),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4152
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4153).
% [phone1,phone2,time]
% HoldsAt(Idle(phone1),time) ->
% !HoldsAt(Ringing(phone1,phone2),time) &
% !HoldsAt(Connected(phone1,phone2),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4155
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4153).

 /*  holds_at(idle(Phone1), Time) ->
       holds_at(neg(ringing(Phone1, Phone2)), Time),
       holds_at(neg(connected(Phone1, Phone2)), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4153).

 /*  not(holds_at(idle(Phone1), Time)) :-
       (   not(holds_at(neg(ringing(Phone1, Phone2)), Time))
       ;   not(holds_at(neg(connected(Phone1, Phone2)), Time))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4153).

 /*  [(holds_at(ringing(Phone1, Phone2), Time);holds_at(connected(Phone1, Phone2), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(idle(Phone1)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4153).
axiom(holds_at(neg(idle(Phone1)), Time),
   
    [  (holds_at(ringing(Phone1, Phone2), Time);holds_at(connected(Phone1, Phone2), Time))
    ]).

 /*  holds_at(neg(ringing(Phone1, Phone2)), Time) :-
       holds_at(idle(Phone1), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4153).

 /*  [holds_at(idle(Phone1), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(ringing(Phone1, Phone2)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4153).
axiom(holds_at(neg(ringing(Phone1, Phone2)), Time),
    [holds_at(idle(Phone1), Time)]).

 /*  holds_at(neg(connected(Phone1, Phone2)), Time) :-
       holds_at(idle(Phone1), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4153).

 /*  [holds_at(idle(Phone1), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(connected(Phone1, Phone2)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4153).
axiom(holds_at(neg(connected(Phone1, Phone2)), Time),
    [holds_at(idle(Phone1), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4157
%; etc.
%; Gamma
% [phone]
 
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4161
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4162).
% HoldsAt(Idle(phone),0).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(idle(Phone), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4162).
axiom(holds_at(idle(Phone), start),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4163
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4164).
% completion Happens
==> completion(happens).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4165
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4166).
% range time 0 3
==> range(time,0,3).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4166
% range offset 1 1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4166).
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter3/Telephone1.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4194
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4195).
% load foundations/Root.e
:- load_e('foundations/Root.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4195
% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4195).
:- load_e('foundations/EC.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4197
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4198).
% sort agent
==> sort(agent).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4198
% sort phone
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4198).
==> sort(phone).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4200
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4201).
% agent Agent1, Agent2
==> t(agent,agent1).
==> t(agent,agent2).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4201
% phone Phone1, Phone2
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4201).
==> t(phone,phone1).
==> t(phone,phone2).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4203
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4204).
% fluent Ringing(phone,phone)
fluent(ringing(phone,phone)).
==> mpred_prop(ringing(phone,phone),fluent).
==> meta_argtypes(ringing(phone,phone)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4204
% fluent DialTone(phone)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4204).
fluent(dialTone(phone)).
==> mpred_prop(dialTone(phone),fluent).
==> meta_argtypes(dialTone(phone)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4205
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4206).
% fluent BusySignal(phone)
fluent(busySignal(phone)).
==> mpred_prop(busySignal(phone),fluent).
==> meta_argtypes(busySignal(phone)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4206
% fluent Idle(phone)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4206).
fluent(idle(phone)).
==> mpred_prop(idle(phone),fluent).
==> meta_argtypes(idle(phone)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4207
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4208).
% fluent Connected(phone,phone)
fluent(connected(phone,phone)).
==> mpred_prop(connected(phone,phone),fluent).
==> meta_argtypes(connected(phone,phone)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4208
% fluent Disconnected(phone)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4208).
fluent(disconnected(phone)).
==> mpred_prop(disconnected(phone),fluent).
==> meta_argtypes(disconnected(phone)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4210
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4211).
% event PickUp(agent,phone)
event(pickUp(agent,phone)).
==> mpred_prop(pickUp(agent,phone),event).
==> meta_argtypes(pickUp(agent,phone)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4211
% event SetDown(agent,phone)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4211).
event(setDown(agent,phone)).
==> mpred_prop(setDown(agent,phone),event).
==> meta_argtypes(setDown(agent,phone)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4212
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4213).
% event Dial(agent,phone,phone)
event(dial(agent,phone,phone)).
==> mpred_prop(dial(agent,phone,phone),event).
==> meta_argtypes(dial(agent,phone,phone)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4214
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4215).
%; Sigma
% [agent,phone,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4217
% HoldsAt(Idle(phone),time) ->
% Initiates(PickUp(agent,phone),DialTone(phone),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4217).

 /*  [holds_at(idle(Phone), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(pickUp(Agent, Phone),
                    dialTone(Phone),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4217).
axiom(initiates(pickUp(Agent, Phone), dialTone(Phone), Time),
    [holds_at(idle(Phone), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4220
% [agent,phone,time]
% HoldsAt(Idle(phone),time) ->
% Terminates(PickUp(agent,phone),Idle(phone),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4222

 /*  [holds_at(idle(Phone), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(pickUp(Agent, Phone),
                     idle(Phone),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4222).
axiom(terminates(pickUp(Agent, Phone), idle(Phone), Time),
    [holds_at(idle(Phone), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4224
% [agent,phone,time]
% HoldsAt(DialTone(phone),time) ->
% Initiates(SetDown(agent,phone),Idle(phone),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4226

 /*  [holds_at(dialTone(Phone), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(setDown(Agent, Phone),
                    idle(Phone),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4226).
axiom(initiates(setDown(Agent, Phone), idle(Phone), Time),
    [holds_at(dialTone(Phone), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4228
% [agent,phone,time]
% HoldsAt(DialTone(phone),time) ->
% Terminates(SetDown(agent,phone),DialTone(phone),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4230

 /*  [holds_at(dialTone(Phone), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(setDown(Agent, Phone),
                     dialTone(Phone),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4230).
axiom(terminates(setDown(Agent, Phone), dialTone(Phone), Time),
    [holds_at(dialTone(Phone), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4232
% [agent,phone1,phone2,time]
% HoldsAt(DialTone(phone1),time) &
% HoldsAt(Idle(phone2),time) ->
% Initiates(Dial(agent,phone1,phone2),Ringing(phone1,phone2),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4235
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4234).

 /*  [holds_at(dialTone(Phone1), Time), holds_at(idle(Phone2), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(dial(Agent, Phone1, Phone2),
                    ringing(Phone1, Phone2),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4234).
axiom(initiates(dial(Agent, Phone1, Phone2), ringing(Phone1, Phone2), Time),
   
    [ holds_at(dialTone(Phone1), Time),
      holds_at(idle(Phone2), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4237
% [agent,phone1,phone2,time]
% HoldsAt(DialTone(phone1),time) &
% HoldsAt(Idle(phone2),time) ->
% Terminates(Dial(agent,phone1,phone2),DialTone(phone1),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4240
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4239).

 /*  [holds_at(dialTone(Phone1), Time), holds_at(idle(Phone2), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(dial(Agent, Phone1, Phone2),
                     dialTone(Phone1),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4239).
axiom(terminates(dial(Agent, Phone1, Phone2), dialTone(Phone1), Time),
   
    [ holds_at(dialTone(Phone1), Time),
      holds_at(idle(Phone2), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4242
% [agent,phone1,phone2,time]
% HoldsAt(DialTone(phone1),time) &
% HoldsAt(Idle(phone2),time) ->
% Terminates(Dial(agent,phone1,phone2),Idle(phone2),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4245
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4244).

 /*  [holds_at(dialTone(Phone1), Time), holds_at(idle(Phone2), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(dial(Agent, Phone1, Phone2),
                     idle(Phone2),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4244).
axiom(terminates(dial(Agent, Phone1, Phone2), idle(Phone2), Time),
   
    [ holds_at(dialTone(Phone1), Time),
      holds_at(idle(Phone2), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4247
% [agent,phone1,phone2,time]
% HoldsAt(DialTone(phone1),time) &
% !HoldsAt(Idle(phone2),time) ->
% Initiates(Dial(agent,phone1,phone2),BusySignal(phone1),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4250
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4249).

 /*  [holds_at(dialTone(Phone1), Time), holds_at(neg(idle(Phone2)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(dial(Agent, Phone1, Phone2),
                    busySignal(Phone1),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4249).
axiom(initiates(dial(Agent, Phone1, Phone2), busySignal(Phone1), Time),
   
    [ holds_at(dialTone(Phone1), Time),
      holds_at(neg(idle(Phone2)), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4252
% [agent,phone1,phone2,time]
% HoldsAt(DialTone(phone1),time) &
% !HoldsAt(Idle(phone2),time) ->
% Terminates(Dial(agent,phone1,phone2),DialTone(phone1),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4255
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4254).

 /*  [holds_at(dialTone(Phone1), Time), holds_at(neg(idle(Phone2)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(dial(Agent, Phone1, Phone2),
                     dialTone(Phone1),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4254).
axiom(terminates(dial(Agent, Phone1, Phone2), dialTone(Phone1), Time),
   
    [ holds_at(dialTone(Phone1), Time),
      holds_at(neg(idle(Phone2)), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4257
% [agent,phone,time]
% HoldsAt(BusySignal(phone),time) ->
% Initiates(SetDown(agent,phone),Idle(phone),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4259

 /*  [holds_at(busySignal(Phone), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(setDown(Agent, Phone),
                    idle(Phone),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4259).
axiom(initiates(setDown(Agent, Phone), idle(Phone), Time),
    [holds_at(busySignal(Phone), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4261
% [agent,phone,time]
% HoldsAt(BusySignal(phone),time) ->
% Terminates(SetDown(agent,phone),BusySignal(phone),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4263

 /*  [holds_at(busySignal(Phone), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(setDown(Agent, Phone),
                     busySignal(Phone),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4263).
axiom(terminates(setDown(Agent, Phone), busySignal(Phone), Time),
    [holds_at(busySignal(Phone), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4265
% [agent,phone1,phone2,time]
% HoldsAt(Ringing(phone1,phone2),time) ->
% Initiates(SetDown(agent,phone1),Idle(phone1),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4267

 /*  [holds_at(ringing(Phone1, Phone2), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(setDown(Agent, Phone1),
                    idle(Phone1),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4267).
axiom(initiates(setDown(Agent, Phone1), idle(Phone1), Time),
    [holds_at(ringing(Phone1, Phone2), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4269
% [agent,phone1,phone2,time]
% HoldsAt(Ringing(phone1,phone2),time) ->
% Initiates(SetDown(agent,phone1),Idle(phone2),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4271

 /*  [holds_at(ringing(Phone1, Phone2), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(setDown(Agent, Phone1),
                    idle(Phone2),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4271).
axiom(initiates(setDown(Agent, Phone1), idle(Phone2), Time),
    [holds_at(ringing(Phone1, Phone2), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4273
% [agent,phone1,phone2,time]
% HoldsAt(Ringing(phone1,phone2),time) ->
% Terminates(SetDown(agent,phone1),Ringing(phone1,phone2),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4275

 /*  [holds_at(ringing(Phone1, Phone2), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(setDown(Agent, Phone1),
                     ringing(Phone1, Phone2),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4275).
axiom(terminates(setDown(Agent, Phone1), ringing(Phone1, Phone2), Time),
    [holds_at(ringing(Phone1, Phone2), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4277
% [agent,phone1,phone2,time]
% HoldsAt(Ringing(phone1,phone2),time) ->
% Initiates(PickUp(agent,phone2),Connected(phone1,phone2),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4279

 /*  [holds_at(ringing(Phone1, Phone2), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(pickUp(Agent, Phone2),
                    connected(Phone1, Phone2),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4279).
axiom(initiates(pickUp(Agent, Phone2), connected(Phone1, Phone2), Time),
    [holds_at(ringing(Phone1, Phone2), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4281
% [agent,phone1,phone2,time]
% HoldsAt(Ringing(phone1,phone2),time) ->
% Terminates(PickUp(agent,phone2),Ringing(phone1,phone2),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4283

 /*  [holds_at(ringing(Phone1, Phone2), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(pickUp(Agent, Phone2),
                     ringing(Phone1, Phone2),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4283).
axiom(terminates(pickUp(Agent, Phone2), ringing(Phone1, Phone2), Time),
    [holds_at(ringing(Phone1, Phone2), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4285
% [agent,phone1,phone2,time]
% HoldsAt(Connected(phone1,phone2),time) ->
% Initiates(SetDown(agent,phone1),Idle(phone1),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4287

 /*  [holds_at(connected(Phone1, Phone2), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(setDown(Agent, Phone1),
                    idle(Phone1),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4287).
axiom(initiates(setDown(Agent, Phone1), idle(Phone1), Time),
    [holds_at(connected(Phone1, Phone2), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4289
% [agent,phone1,phone2,time]
% HoldsAt(Connected(phone1,phone2),time) ->
% Initiates(SetDown(agent,phone1),Disconnected(phone2),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4291

 /*  [holds_at(connected(Phone1, Phone2), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(setDown(Agent, Phone1),
                    disconnected(Phone2),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4291).
axiom(initiates(setDown(Agent, Phone1), disconnected(Phone2), Time),
    [holds_at(connected(Phone1, Phone2), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4293
% [agent,phone1,phone2,time]
% HoldsAt(Connected(phone1,phone2),time) ->
% Terminates(SetDown(agent,phone1),Connected(phone1,phone2),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4295

 /*  [holds_at(connected(Phone1, Phone2), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(setDown(Agent, Phone1),
                     connected(Phone1, Phone2),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4295).
axiom(terminates(setDown(Agent, Phone1), connected(Phone1, Phone2), Time),
    [holds_at(connected(Phone1, Phone2), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4297
% [agent,phone1,phone2,time]
% HoldsAt(Connected(phone1,phone2),time) ->
% Initiates(SetDown(agent,phone2),Idle(phone2),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4299

 /*  [holds_at(connected(Phone1, Phone2), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(setDown(Agent, Phone2),
                    idle(Phone2),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4299).
axiom(initiates(setDown(Agent, Phone2), idle(Phone2), Time),
    [holds_at(connected(Phone1, Phone2), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4301
% [agent,phone1,phone2,time]
% HoldsAt(Connected(phone1,phone2),time) ->
% Initiates(SetDown(agent,phone2),Disconnected(phone1),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4303

 /*  [holds_at(connected(Phone1, Phone2), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(setDown(Agent, Phone2),
                    disconnected(Phone1),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4303).
axiom(initiates(setDown(Agent, Phone2), disconnected(Phone1), Time),
    [holds_at(connected(Phone1, Phone2), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4305
% [agent,phone1,phone2,time]
% HoldsAt(Connected(phone1,phone2),time) ->
% Terminates(SetDown(agent,phone2),Connected(phone1,phone2),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4307

 /*  [holds_at(connected(Phone1, Phone2), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(setDown(Agent, Phone2),
                     connected(Phone1, Phone2),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4307).
axiom(terminates(setDown(Agent, Phone2), connected(Phone1, Phone2), Time),
    [holds_at(connected(Phone1, Phone2), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4309
% [agent,phone,time]
% HoldsAt(Disconnected(phone),time) ->
% Initiates(SetDown(agent,phone),Idle(phone),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4311

 /*  [holds_at(disconnected(Phone), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(setDown(Agent, Phone),
                    idle(Phone),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4311).
axiom(initiates(setDown(Agent, Phone), idle(Phone), Time),
    [holds_at(disconnected(Phone), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4313
% [agent,phone,time]
% HoldsAt(Disconnected(phone),time) ->
% Terminates(SetDown(agent,phone),Disconnected(phone),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4315

 /*  [holds_at(disconnected(Phone), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(setDown(Agent, Phone),
                     disconnected(Phone),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4315).
axiom(terminates(setDown(Agent, Phone), disconnected(Phone), Time),
    [holds_at(disconnected(Phone), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4317
%; Delta

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4319
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4320).
% Delta: 
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4319
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4320).
% Happens(PickUp(Agent1,Phone1),0).

 /*  [axiom_uses(delta, Axiom_uses_Ret)] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          happens(pickUp(agent1, phone1), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4320).
axiom(happens(pickUp(agent1, phone1), start),
    [axiom_uses(delta, Axiom_uses_Ret)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4320
% Delta: 
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4320).
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4320
% Happens(Dial(Agent1,Phone1,Phone2),1).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4320).

 /*  [axiom_uses(delta, Axiom_uses_Ret), b(start, Maptime), ignore(start+1==Maptime)] ->
       ta(Ta_Param,
          tvs1=[start+1],
          tvs2=[Maptime, start],
          happens(dial(agent1, phone1, phone2), Maptime)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4320).
axiom(happens(dial(agent1, phone1, phone2), Maptime),
    [axiom_uses(delta, Axiom_uses_Ret), b(start, Maptime)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4321
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4322).
% Delta: 
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4321
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4322).
% Happens(PickUp(Agent2,Phone2),2).

 /*  [axiom_uses(delta, Axiom_uses_Ret), b(start, Start2), toffset(start, 2, Start2), ignore(start+2==Start2)] ->
       ta(Ta_Param,
          tvs1=[start+2],
          tvs2=[Start2, start],
          happens(pickUp(agent2, phone2), Start2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4322).
axiom(happens(pickUp(agent2, phone2), Start2),
   
    [ axiom_uses(delta, Axiom_uses_Ret),
      b(start, Start2),
      toffset(start, 2, Start2)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4323
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4324).
%; Gamma
% [phone]
 % HoldsAt(Idle(phone),0).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4325
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4326).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(idle(Phone), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4326).
axiom(holds_at(idle(Phone), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4326
% [phone]
 % !HoldsAt(DialTone(phone),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4326).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(dialTone(Phone)), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4326).
axiom(holds_at(neg(dialTone(Phone)), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4327
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4328).
% [phone]
 % !HoldsAt(BusySignal(phone),0).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(busySignal(Phone)), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4328).
axiom(holds_at(neg(busySignal(Phone)), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4328
% [phone1,phone2]
 % !HoldsAt(Ringing(phone1,phone2),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4328).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(ringing(Phone1, Phone2)), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4328).
axiom(holds_at(neg(ringing(Phone1, Phone2)), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4329
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4330).
% [phone1,phone2]
 % !HoldsAt(Connected(phone1,phone2),0).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(connected(Phone1, Phone2)), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4330).
axiom(holds_at(neg(connected(Phone1, Phone2)), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4330
% [phone]
 % !HoldsAt(Disconnected(phone),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4330).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(disconnected(Phone)), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4330).
axiom(holds_at(neg(disconnected(Phone)), start),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4332
% completion Delta Happens
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4332).
==> completion(delta).
==> completion(happens).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4334
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4335).
% range time 0 3
==> range(time,0,3).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4335
% range offset 1 1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4335).
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter12/DefaultLocation.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4363
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4364).
% load foundations/Root.e
:- load_e('foundations/Root.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4364
% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4364).
:- load_e('foundations/EC.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4366
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4367).
% sort object
==> sort(object).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4367
% sort agent: object
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4367).
==> subsort(agent,object).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4368
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4369).
% sort device: object
==> subsort(device,object).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4369
% sort tv: device
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4369).
==> subsort(tv,device).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4370
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4371).
% sort room
==> sort(room).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4372
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4373).
% agent Nathan
==> t(agent,nathan).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4373
% tv TV
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4373).
==> t(tv,tv).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4374
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4375).
% room LivingRoom, Kitchen
==> t(room,livingRoom).
==> t(room,kitchen).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4376
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4377).
% event TurnOn(agent,device)
event(turnOn(agent,device)).
==> mpred_prop(turnOn(agent,device),event).
==> meta_argtypes(turnOn(agent,device)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4377
% event Walk(agent,room,room)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4377).
event(walk(agent,room,room)).
==> mpred_prop(walk(agent,room,room),event).
==> meta_argtypes(walk(agent,room,room)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4379
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4380).
% fluent InRoom(object,room)
fluent(inRoom(object,room)).
==> mpred_prop(inRoom(object,room),fluent).
==> meta_argtypes(inRoom(object,room)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4380
% fluent On(device)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4380).
fluent(on(device)).
==> mpred_prop(on(device),fluent).
==> meta_argtypes(on(device)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4381
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4382).
% fluent PluggedIn(device)
fluent(pluggedIn(device)).
==> mpred_prop(pluggedIn(device),fluent).
==> meta_argtypes(pluggedIn(device)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4382
% fluent BrokenSwitch(device)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4382).
fluent(brokenSwitch(device)).
==> mpred_prop(brokenSwitch(device),fluent).
==> meta_argtypes(brokenSwitch(device)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4384
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4385).
% predicate Ab1(device,time)
predicate(ab1(device,time)).
==> mpred_prop(ab1(device,time),predicate).
==> meta_argtypes(ab1(device,time)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4385
% predicate Ab2(room,time)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4385).
predicate(ab2(room,time)).
==> mpred_prop(ab2(room,time),predicate).
==> meta_argtypes(ab2(room,time)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4387
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4388).
%; Sigma
% [agent,room1,room2,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4390
% Initiates(Walk(agent,room1,room2),InRoom(agent,room2),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4390).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(walk(Agent, Room1, Room2),
                    inRoom(Agent, Room2),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4390).
axiom(initiates(walk(Agent, Room1, Room2), inRoom(Agent, Room2), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4392
% [agent,room1,room2,time]
% room1!=% room2 ->
% Terminates(Walk(agent,room1,room2),InRoom(agent,room1),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4394

 /*  [diff(Room1, Room2)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(walk(Agent, Room1, Room2),
                     inRoom(Agent, Room1),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4394).
axiom(terminates(walk(Agent, Room1, Room2), inRoom(Agent, Room1), Time),
    [diff(Room1, Room2)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4396
% [agent,device,time]
% !Ab1(device,time) ->
% Initiates(TurnOn(agent,device),On(device),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4398

 /*  [not(ab1(Device, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(turnOn(Agent, Device), on(Device), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4398).
axiom(initiates(turnOn(Agent, Device), on(Device), Time),
    [not(ab1(Device, Time))]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4400
%; Delta
% [agent,room1,room2,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4403
% Happens(Walk(agent,room1,room2),time) ->
% room1!=room2 &
% HoldsAt(InRoom(agent,room1),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4405
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4403).

 /*  happens(walk(Agent, Room1, Room2), Time) ->
       diff(Room1, Room2),
       holds_at(inRoom(Agent, Room1), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4403).

 /*  not(happens(walk(Agent, Room1, Room2), Time)) :-
       (   not(diff(Room1, Room2))
       ;   not(holds_at(inRoom(Agent, Room1), Time))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4403).

 /*  [(equals(Room1, Room2);holds_at(neg(inRoom(Agent, Room1)), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(walk(Agent, Room1, Room2), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4403).
axiom(not(happens(walk(Agent, Room1, Room2), Time)),
   
    [  (equals(Room1, Room2);holds_at(neg(inRoom(Agent, Room1)), Time))
    ]).

 /*  holds_at(inRoom(Agent, Room1), Time) :-
       happens(walk(Agent, Room1, Room2), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4403).

 /*  [holds_at(metreqs(walk(Agent, Room1, Room2)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(walk(Agent, Room1, Room2), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4403).
axiom(requires(walk(Agent, Room1, Room2), Time),
    [holds_at(metreqs(walk(Agent, Room1, Room2)), Time)]).

 /*  [holds_at(inRoom(Agent, Room1), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(walk(Agent, Room1, Room2)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4403).
axiom(holds_at(metreqs(walk(Agent, Room1, Room2)), Time),
    [holds_at(inRoom(Agent, Room1), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4407
% [agent,device,time]
% Happens(TurnOn(agent,device),time) ->
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4409
% {room}%  HoldsAt(InRoom(agent,room),time) &
%        HoldsAt(InRoom(device,room),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4409).

 /*  exists([Room],
    happens(turnOn(Agent, Device), Time) ->
       holds_at(inRoom(Agent, Room), Time),
       holds_at(inRoom(Device, Room), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4409).

 /*  not(happens(turnOn(Agent, Device), Time)) :-
       (   not(holds_at(inRoom(Agent, Room), Time))
       ;   not(holds_at(inRoom(Device, Room), Time))
       ),
       some(Room, '$kolem_Fn_397'(Agent, Device, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4409).

 /*  [(holds_at(neg(inRoom(Agent, Room)), Time);holds_at(neg(inRoom(Device, Room)), Time)), some(Room, '$kolem_Fn_397'(Agent, Device, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(turnOn(Agent, Device), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4409).
axiom(not(happens(turnOn(Agent, Device), Time)),
   
    [  (holds_at(neg(inRoom(Agent, Room)), Time);holds_at(neg(inRoom(Device, Room)), Time)),
      some(Room, '$kolem_Fn_397'(Agent, Device, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4409).

 /*  holds_at(inRoom(Agent, Room), Time) :-
       happens(turnOn(Agent, Device), Time),
       some(Room, '$kolem_Fn_397'(Agent, Device, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4409).

 /*  [happens(turnOn(Agent, Device), Time), some(Room, '$kolem_Fn_397'(Agent, Device, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(inRoom(Agent, Room), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4409).
axiom(holds_at(inRoom(Agent, Room), Time),
   
    [ happens(turnOn(Agent, Device), Time),
      some(Room, '$kolem_Fn_397'(Agent, Device, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4409).

 /*  holds_at(inRoom(Device, Room), Time) :-
       happens(turnOn(Agent, Device), Time),
       some(Room, '$kolem_Fn_397'(Agent, Device, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4409).

 /*  [happens(turnOn(Agent, Device), Time), some(Room, '$kolem_Fn_397'(Agent, Device, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(inRoom(Device, Room), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4409).
axiom(holds_at(inRoom(Device, Room), Time),
   
    [ happens(turnOn(Agent, Device), Time),
      some(Room, '$kolem_Fn_397'(Agent, Device, Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4412
% [event1,event2,time]
% Happens(event1,time) &
% Happens(event2,time) ->
% event1=event2.
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4415
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4414).

 /*  happens(Event1, Time), happens(Event2, Time) ->
       equals(Event1, Event2).
 */

 /*  not(happens(Event1, Time)) :-
       happens(Event2, Time),
       not(equals(Event1, Event2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4414).

 /*  [happens(Event2, Time), not(equals(Event1, Event2))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(Event1, Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4414).
axiom(not(happens(Event1, Time)),
    [happens(Event2, Time), not(equals(Event1, Event2))]).

 /*  not(happens(Event2, Time)) :-
       happens(Event1, Time),
       not(equals(Event1, Event2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4414).

 /*  [happens(Event1, Time), not(equals(Event1, Event2))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(Event2, Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4414).
axiom(not(happens(Event2, Time)),
    [happens(Event1, Time), not(equals(Event2, Event1))]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4417
%; Theta

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4419
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4420).
% Theta: 
next_axiom_uses(theta).
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4419
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4420).
% [device,time]
 % HoldsAt(BrokenSwitch(device),time) -> Ab1(device,time).

 /*  axiom_uses(theta) ->
       ( holds_at(brokenSwitch(Device), Time)->ab1(Device, Time)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4420).

 /*  ab1(Device, Time) :-
       holds_at(brokenSwitch(Device), Time),
       axiom_uses(theta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4420).

 /*  fix_axiom_head(Time) ->
       [axiom_uses(theta), ->, axiom_uses(theta, Time)].
 */

 /*  [holds_at(brokenSwitch(Device), Time), axiom_uses(theta, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          ab1(Device, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4420).
axiom(ab1(Device, Time),
   
    [ holds_at(brokenSwitch(Device), Time),
      axiom_uses(theta, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4420).

 /*  not(holds_at(brokenSwitch(Device), Time)) :-
       not(ab1(Device, Time)),
       axiom_uses(theta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4420).

 /*  [not(ab1(Device, Time)), axiom_uses(theta, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(brokenSwitch(Device)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4420).
axiom(holds_at(neg(brokenSwitch(Device)), Time),
    [not(ab1(Device, Time)), axiom_uses(theta, Time)]).

 /*  not(axiom_uses(theta)) :-
       not(ab1(Device, Time)),
       holds_at(brokenSwitch(Device), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4420).

 /*  fix_axiom_head(Time) ->
       [not(axiom_uses(theta)), ->, not(axiom_uses(theta, Time))].
 */

 /*  [not(ab1(Device, Time)), holds_at(brokenSwitch(Device), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(axiom_uses(theta, Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4420).
axiom(not(axiom_uses(theta, Time)),
   
    [ not(ab1(Device, Time)),
      holds_at(brokenSwitch(Device), Time)
    ]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4420
% Theta: 
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4420).
next_axiom_uses(theta).
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4420
% [device,time]
 % !HoldsAt(PluggedIn(device),time) -> Ab1(device,time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4420).

 /*  axiom_uses(theta) ->
       ( holds_at(neg(pluggedIn(Device)), Time)->ab1(Device, Time)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4420).

 /*  ab1(Device, Time) :-
       holds_at(neg(pluggedIn(Device)), Time),
       axiom_uses(theta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4420).

 /*  fix_axiom_head(Time) ->
       [axiom_uses(theta), ->, axiom_uses(theta, Time)].
 */

 /*  [holds_at(neg(pluggedIn(Device)), Time), axiom_uses(theta, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          ab1(Device, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4420).
axiom(ab1(Device, Time),
   
    [ holds_at(neg(pluggedIn(Device)), Time),
      axiom_uses(theta, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4420).

 /*  not(holds_at(neg(pluggedIn(Device)), Time)) :-
       not(ab1(Device, Time)),
       axiom_uses(theta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4420).

 /*  [not(ab1(Device, Time)), axiom_uses(theta, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(pluggedIn(Device), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4420).
axiom(holds_at(pluggedIn(Device), Time),
    [not(ab1(Device, Time)), axiom_uses(theta, Time)]).

 /*  not(axiom_uses(theta)) :-
       not(ab1(Device, Time)),
       holds_at(neg(pluggedIn(Device)), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4420).

 /*  fix_axiom_head(Time) ->
       [not(axiom_uses(theta)), ->, not(axiom_uses(theta, Time))].
 */

 /*  [not(ab1(Device, Time)), holds_at(neg(pluggedIn(Device)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(axiom_uses(theta, Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4420).
axiom(not(axiom_uses(theta, Time)),
   
    [ not(ab1(Device, Time)),
      holds_at(neg(pluggedIn(Device)), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4422
%; Psi
% [object,room1,room2,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4425
% HoldsAt(InRoom(object,room1),time) &
% HoldsAt(InRoom(object,room2),time) ->
% room1=room2.
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4427
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4425).

 /*  holds_at(inRoom(Object, Room1), Time), holds_at(inRoom(Object, Room2), Time) ->
       equals(Room1, Room2).
 */

 /*  not(holds_at(inRoom(Object, Room1), Time)) :-
       holds_at(inRoom(Object, Room2), Time),
       not(equals(Room1, Room2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4425).

 /*  [holds_at(inRoom(Object, Room2), Time), not(equals(Room1, Room2))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(inRoom(Object, Room1)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4425).
axiom(holds_at(neg(inRoom(Object, Room1)), Time),
   
    [ holds_at(inRoom(Object, Room2), Time),
      not(equals(Room1, Room2))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4425).

 /*  not(holds_at(inRoom(Object, Room2), Time)) :-
       holds_at(inRoom(Object, Room1), Time),
       not(equals(Room1, Room2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4425).

 /*  [holds_at(inRoom(Object, Room1), Time), not(equals(Room1, Room2))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(inRoom(Object, Room2)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4425).
axiom(holds_at(neg(inRoom(Object, Room2)), Time),
   
    [ holds_at(inRoom(Object, Room1), Time),
      not(equals(Room2, Room1))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4429
%; Gamma
% [tv]
 % !HoldsAt(On(tv),0).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4431
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4432).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(on(Tv)), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4432).
axiom(holds_at(neg(on(Tv)), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4432
% [tv]
 % !HoldsAt(BrokenSwitch(tv),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4432).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(brokenSwitch(Tv)), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4432).
axiom(holds_at(neg(brokenSwitch(Tv)), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4433
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4434).
% [tv]
 % HoldsAt(PluggedIn(tv),0).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(pluggedIn(Tv), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4434).
axiom(holds_at(pluggedIn(Tv), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4435
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4436).
% HoldsAt(InRoom(Nathan,Kitchen),0).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(inRoom(nathan, kitchen), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4436).
axiom(holds_at(inRoom(nathan, kitchen), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4437
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4438).
% [time]
% !Ab2(LivingRoom,time) ->
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4439
% {tv}%  HoldsAt(InRoom(tv,LivingRoom),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4440).

 /*  exists([Tv],
    not(ab2(livingRoom, Time)) ->
       holds_at(inRoom(Tv, livingRoom), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4440).

 /*  holds_at(inRoom(Tv, livingRoom), Time) :-
       not(ab2(livingRoom, Time)),
       some(Tv, '$kolem_Fn_398'(Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4440).

 /*  [not(ab2(livingRoom, Time)), some(Tv, '$kolem_Fn_398'(Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(inRoom(Tv, livingRoom), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4440).
axiom(holds_at(inRoom(Tv, livingRoom), Time),
    [not(ab2(livingRoom, Time)), some(Tv, '$kolem_Fn_398'(Time))]).

 /*  ab2(livingRoom, Time) :-
       not(holds_at(inRoom(Tv, livingRoom), Time)),
       some(Tv, '$kolem_Fn_398'(Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4440).

 /*  [holds_at(neg(inRoom(Tv, livingRoom)), Time), some(Tv, '$kolem_Fn_398'(Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          ab2(livingRoom, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4440).
axiom(ab2(livingRoom, Time),
   
    [ holds_at(neg(inRoom(Tv, livingRoom)), Time),
      some(Tv, '$kolem_Fn_398'(Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4441
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4442).
%; goal
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4443
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4444).
% {tv} 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4443
% Happens(TurnOn(Nathan,tv),1).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4444).

 /*  exists([Tv],
    happens(turnOn(nathan,Tv),start+1)).
 */

 /*  happens(turnOn(nathan, Tv), start+1) :-
       some(Tv, '$kolem_Fn_399').
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4444).

 /*  [some(Tv, '$kolem_Fn_399'), b(start, Maptime), ignore(start+1==Maptime)] ->
       ta(Ta_Param,
          tvs1=[start+1],
          tvs2=[Maptime, start],
          happens(turnOn(nathan, Tv), Maptime)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4444).
axiom(happens(turnOn(nathan, Tv), Maptime),
    [some(Tv, '$kolem_Fn_399'), b(start, Maptime)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4445
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4446).
%; for two TVs:
%;[tv,time] !HoldsAt(InRoom(tv,Kitchen),time).
%;[tv,time] {room} HoldsAt(InRoom(tv,room),time).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4449
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4450).
% completion Theta Ab1
==> completion(theta).
==> completion(ab1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4450
% completion Theta Ab2
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4450).
==> completion(theta).
==> completion(ab2).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4452
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4453).
% range time 0 2
==> range(time,0,2).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4453
% range offset 1 1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4453).
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter12/Device.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4481
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4482).
% load foundations/Root.e
:- load_e('foundations/Root.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4482
% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4482).
:- load_e('foundations/EC.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4484
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4485).
% sort agent
==> sort(agent).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4485
% sort device
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4485).
==> sort(device).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4487
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4488).
% agent Nathan
==> t(agent,nathan).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4488
% device Device1, AntiqueDevice1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4488).
==> t(device,device1).
==> t(device,antiqueDevice1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4490
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4491).
% predicate Ab1(device,time)
predicate(ab1(device,time)).
==> mpred_prop(ab1(device,time),predicate).
==> meta_argtypes(ab1(device,time)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4492
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4493).
% fluent On(device)
fluent(on(device)).
==> mpred_prop(on(device),fluent).
==> meta_argtypes(on(device)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4493
% fluent PluggedIn(device)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4493).
fluent(pluggedIn(device)).
==> mpred_prop(pluggedIn(device),fluent).
==> meta_argtypes(pluggedIn(device)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4494
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4495).
% fluent BrokenSwitch(device)
fluent(brokenSwitch(device)).
==> mpred_prop(brokenSwitch(device),fluent).
==> meta_argtypes(brokenSwitch(device)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4496
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4497).
% event TurnOn(agent,device)
event(turnOn(agent,device)).
==> mpred_prop(turnOn(agent,device),event).
==> meta_argtypes(turnOn(agent,device)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4498
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4499).
%; Sigma
% [agent,device,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4501
% !Ab1(device,time) ->
% Initiates(TurnOn(agent,device),On(device),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4501).

 /*  [not(ab1(Device, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(turnOn(Agent, Device), on(Device), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4501).
axiom(initiates(turnOn(Agent, Device), on(Device), Time),
    [not(ab1(Device, Time))]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4504
%; Delta


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4506
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4507).
% Happens(TurnOn(Nathan,Device1),0).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          happens(turnOn(nathan, device1), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4507).
axiom(happens(turnOn(nathan, device1), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4508
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4509).
%; Theta

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4510
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4511).
% Theta: 
next_axiom_uses(theta).
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4510
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4511).
% [device,time]
 % HoldsAt(BrokenSwitch(device),time) -> Ab1(device,time).

 /*  axiom_uses(theta) ->
       ( holds_at(brokenSwitch(Device), Time)->ab1(Device, Time)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4511).

 /*  ab1(Device, Time) :-
       holds_at(brokenSwitch(Device), Time),
       axiom_uses(theta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4511).

 /*  fix_axiom_head(Time) ->
       [axiom_uses(theta), ->, axiom_uses(theta, Time)].
 */

 /*  [holds_at(brokenSwitch(Device), Time), axiom_uses(theta, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          ab1(Device, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4511).
axiom(ab1(Device, Time),
   
    [ holds_at(brokenSwitch(Device), Time),
      axiom_uses(theta, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4511).

 /*  not(holds_at(brokenSwitch(Device), Time)) :-
       not(ab1(Device, Time)),
       axiom_uses(theta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4511).

 /*  [not(ab1(Device, Time)), axiom_uses(theta, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(brokenSwitch(Device)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4511).
axiom(holds_at(neg(brokenSwitch(Device)), Time),
    [not(ab1(Device, Time)), axiom_uses(theta, Time)]).

 /*  not(axiom_uses(theta)) :-
       not(ab1(Device, Time)),
       holds_at(brokenSwitch(Device), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4511).

 /*  fix_axiom_head(Time) ->
       [not(axiom_uses(theta)), ->, not(axiom_uses(theta, Time))].
 */

 /*  [not(ab1(Device, Time)), holds_at(brokenSwitch(Device), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(axiom_uses(theta, Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4511).
axiom(not(axiom_uses(theta, Time)),
   
    [ not(ab1(Device, Time)),
      holds_at(brokenSwitch(Device), Time)
    ]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4511
% Theta: 
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4511).
next_axiom_uses(theta).
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4511
% [device,time]
 % !HoldsAt(PluggedIn(device),time) -> Ab1(device,time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4511).

 /*  axiom_uses(theta) ->
       ( holds_at(neg(pluggedIn(Device)), Time)->ab1(Device, Time)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4511).

 /*  ab1(Device, Time) :-
       holds_at(neg(pluggedIn(Device)), Time),
       axiom_uses(theta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4511).

 /*  fix_axiom_head(Time) ->
       [axiom_uses(theta), ->, axiom_uses(theta, Time)].
 */

 /*  [holds_at(neg(pluggedIn(Device)), Time), axiom_uses(theta, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          ab1(Device, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4511).
axiom(ab1(Device, Time),
   
    [ holds_at(neg(pluggedIn(Device)), Time),
      axiom_uses(theta, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4511).

 /*  not(holds_at(neg(pluggedIn(Device)), Time)) :-
       not(ab1(Device, Time)),
       axiom_uses(theta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4511).

 /*  [not(ab1(Device, Time)), axiom_uses(theta, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(pluggedIn(Device), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4511).
axiom(holds_at(pluggedIn(Device), Time),
    [not(ab1(Device, Time)), axiom_uses(theta, Time)]).

 /*  not(axiom_uses(theta)) :-
       not(ab1(Device, Time)),
       holds_at(neg(pluggedIn(Device)), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4511).

 /*  fix_axiom_head(Time) ->
       [not(axiom_uses(theta)), ->, not(axiom_uses(theta, Time))].
 */

 /*  [not(ab1(Device, Time)), holds_at(neg(pluggedIn(Device)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(axiom_uses(theta, Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4511).
axiom(not(axiom_uses(theta, Time)),
   
    [ not(ab1(Device, Time)),
      holds_at(neg(pluggedIn(Device)), Time)
    ]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4512
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4513).
% Theta: 
next_axiom_uses(theta).
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4512
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4513).
% [time]
 % Ab1(AntiqueDevice1,time).

 /*  fix_axiom_head(Axiom_head_Ret) ->
       [axiom_uses(theta), ->, axiom_uses(theta, Axiom_head_Ret)].
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4513).

 /*  [axiom_uses(theta, Axiom_head_Ret)] ->
       ta(Axiom_head_Ret, tvs1=[], tvs2=[], ab1(antiqueDevice1, Time)).
 */
axiom(ab1(antiqueDevice1, Time),
    [axiom_uses(theta, Axiom_head_Ret)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4514
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4515).
%; Gamma


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4516
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4517).
% !HoldsAt(On(Device1),0).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(on(device1)), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4517).
axiom(holds_at(neg(on(device1)), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4517
% !HoldsAt(BrokenSwitch(Device1),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4517).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(brokenSwitch(device1)), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4517).
axiom(holds_at(neg(brokenSwitch(device1)), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4518
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4519).
% HoldsAt(PluggedIn(Device1),0).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(pluggedIn(device1), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4519).
axiom(holds_at(pluggedIn(device1), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4520
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4521).
%; added:
% [time]
 % !HoldsAt(On(AntiqueDevice1),time).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(on(antiqueDevice1)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4521).
axiom(holds_at(neg(on(antiqueDevice1)), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4522
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4523).
% [time]
 % HoldsAt(PluggedIn(AntiqueDevice1),time).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(pluggedIn(antiqueDevice1), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4523).
axiom(holds_at(pluggedIn(antiqueDevice1), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4524
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4525).
%; entailed:
%; HoldsAt(On(Device1),1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4527
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4528).
% completion Theta Ab1
==> completion(theta).
==> completion(ab1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4528
% completion Happens
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4528).
==> completion(happens).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4530
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4531).
% range time 0 1
==> range(time,0,1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4531
% range offset 1 1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4531).
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter12/ErraticDevice.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4559
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4560).
% load foundations/Root.e
:- load_e('foundations/Root.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4560
% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4560).
:- load_e('foundations/EC.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4562
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4563).
% sort agent
==> sort(agent).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4563
% sort device
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4563).
==> sort(device).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4565
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4566).
% agent Nathan
==> t(agent,nathan).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4566
% device Device1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4566).
==> t(device,device1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4568
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4569).
% predicate Ab1(device,time)
predicate(ab1(device,time)).
==> mpred_prop(ab1(device,time),predicate).
==> meta_argtypes(ab1(device,time)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4570
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4571).
% fluent On(device)
fluent(on(device)).
==> mpred_prop(on(device),fluent).
==> meta_argtypes(on(device)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4571
% fluent PluggedIn(device)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4571).
fluent(pluggedIn(device)).
==> mpred_prop(pluggedIn(device),fluent).
==> meta_argtypes(pluggedIn(device)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4572
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4573).
% fluent BrokenSwitch(device)
fluent(brokenSwitch(device)).
==> mpred_prop(brokenSwitch(device),fluent).
==> meta_argtypes(brokenSwitch(device)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4573
% fluent Erratic(device)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4573).
fluent(erratic(device)).
==> mpred_prop(erratic(device),fluent).
==> meta_argtypes(erratic(device)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4575
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4576).
% fluent DeterminingFluent(device)
fluent(determiningFluent(device)).
==> mpred_prop(determiningFluent(device),fluent).
==> meta_argtypes(determiningFluent(device)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4576
% noninertial DeterminingFluent
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4576).
==> noninertial(determiningFluent).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4578
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4579).
% event TurnOn(agent,device)
event(turnOn(agent,device)).
==> mpred_prop(turnOn(agent,device),event).
==> meta_argtypes(turnOn(agent,device)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4580
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4581).
%; Sigma
% [agent,device,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4583
% !Ab1(device,time) ->
% Initiates(TurnOn(agent,device),On(device),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4583).

 /*  [not(ab1(Device, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(turnOn(Agent, Device), on(Device), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4583).
axiom(initiates(turnOn(Agent, Device), on(Device), Time),
    [not(ab1(Device, Time))]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4586
%; Delta


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4588
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4589).
% Happens(TurnOn(Nathan,Device1),0).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          happens(turnOn(nathan, device1), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4589).
axiom(happens(turnOn(nathan, device1), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4590
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4591).
%; Theta

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4593
% Theta: 
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4593).
next_axiom_uses(theta).
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4593
% [device,time]
 % HoldsAt(BrokenSwitch(device),time) -> Ab1(device,time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4593).

 /*  axiom_uses(theta) ->
       ( holds_at(brokenSwitch(Device), Time)->ab1(Device, Time)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4593).

 /*  ab1(Device, Time) :-
       holds_at(brokenSwitch(Device), Time),
       axiom_uses(theta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4593).

 /*  fix_axiom_head(Time) ->
       [axiom_uses(theta), ->, axiom_uses(theta, Time)].
 */

 /*  [holds_at(brokenSwitch(Device), Time), axiom_uses(theta, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          ab1(Device, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4593).
axiom(ab1(Device, Time),
   
    [ holds_at(brokenSwitch(Device), Time),
      axiom_uses(theta, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4593).

 /*  not(holds_at(brokenSwitch(Device), Time)) :-
       not(ab1(Device, Time)),
       axiom_uses(theta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4593).

 /*  [not(ab1(Device, Time)), axiom_uses(theta, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(brokenSwitch(Device)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4593).
axiom(holds_at(neg(brokenSwitch(Device)), Time),
    [not(ab1(Device, Time)), axiom_uses(theta, Time)]).

 /*  not(axiom_uses(theta)) :-
       not(ab1(Device, Time)),
       holds_at(brokenSwitch(Device), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4593).

 /*  fix_axiom_head(Time) ->
       [not(axiom_uses(theta)), ->, not(axiom_uses(theta, Time))].
 */

 /*  [not(ab1(Device, Time)), holds_at(brokenSwitch(Device), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(axiom_uses(theta, Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4593).
axiom(not(axiom_uses(theta, Time)),
   
    [ not(ab1(Device, Time)),
      holds_at(brokenSwitch(Device), Time)
    ]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4594
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4595).
% Theta: 
next_axiom_uses(theta).
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4594
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4595).
% [device,time]
% HoldsAt(Erratic(device),time) & HoldsAt(DeterminingFluent(device),time) ->
% Ab1(device,time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4596

 /*  axiom_uses(theta) ->
       ( holds_at(erratic(Device), Time), holds_at(determiningFluent(Device), Time)->ab1(Device, Time)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4595).

 /*  ab1(Device, Time) :-
       ( holds_at(erratic(Device), Time),
         holds_at(determiningFluent(Device), Time)
       ),
       axiom_uses(theta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4595).

 /*  fix_axiom_head(Time) ->
       [axiom_uses(theta), ->, axiom_uses(theta, Time)].
 */

 /*  [holds_at(erratic(Device), Time), holds_at(determiningFluent(Device), Time), axiom_uses(theta, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          ab1(Device, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4595).
axiom(ab1(Device, Time),
   
    [ holds_at(erratic(Device), Time),
      holds_at(determiningFluent(Device), Time),
      axiom_uses(theta, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4595).

 /*  not(holds_at(erratic(Device), Time)) :-
       holds_at(determiningFluent(Device), Time),
       not(ab1(Device, Time)),
       axiom_uses(theta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4595).

 /*  [holds_at(determiningFluent(Device), Time), not(ab1(Device, Time)), axiom_uses(theta, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(erratic(Device)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4595).
axiom(holds_at(neg(erratic(Device)), Time),
   
    [ holds_at(determiningFluent(Device), Time),
      not(ab1(Device, Time)),
      axiom_uses(theta, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4595).

 /*  not(holds_at(determiningFluent(Device), Time)) :-
       holds_at(erratic(Device), Time),
       not(ab1(Device, Time)),
       axiom_uses(theta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4595).

 /*  [holds_at(erratic(Device), Time), not(ab1(Device, Time)), axiom_uses(theta, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(determiningFluent(Device)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4595).
axiom(holds_at(neg(determiningFluent(Device)), Time),
   
    [ holds_at(erratic(Device), Time),
      not(ab1(Device, Time)),
      axiom_uses(theta, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4595).

 /*  not(axiom_uses(theta)) :-
       not(ab1(Device, Time)),
       holds_at(erratic(Device), Time),
       holds_at(determiningFluent(Device), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4595).

 /*  fix_axiom_head(Time) ->
       [not(axiom_uses(theta)), ->, not(axiom_uses(theta, Time))].
 */

 /*  [not(ab1(Device, Time)), holds_at(erratic(Device), Time), holds_at(determiningFluent(Device), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(axiom_uses(theta, Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4595).
axiom(not(axiom_uses(theta, Time)),
   
    [ not(ab1(Device, Time)),
      holds_at(erratic(Device), Time),
      holds_at(determiningFluent(Device), Time)
    ]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4598
% Theta: 
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4598).
next_axiom_uses(theta).
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4598
% [device,time]
 % !HoldsAt(PluggedIn(device),time) -> Ab1(device,time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4598).

 /*  axiom_uses(theta) ->
       ( holds_at(neg(pluggedIn(Device)), Time)->ab1(Device, Time)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4598).

 /*  ab1(Device, Time) :-
       holds_at(neg(pluggedIn(Device)), Time),
       axiom_uses(theta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4598).

 /*  fix_axiom_head(Time) ->
       [axiom_uses(theta), ->, axiom_uses(theta, Time)].
 */

 /*  [holds_at(neg(pluggedIn(Device)), Time), axiom_uses(theta, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          ab1(Device, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4598).
axiom(ab1(Device, Time),
   
    [ holds_at(neg(pluggedIn(Device)), Time),
      axiom_uses(theta, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4598).

 /*  not(holds_at(neg(pluggedIn(Device)), Time)) :-
       not(ab1(Device, Time)),
       axiom_uses(theta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4598).

 /*  [not(ab1(Device, Time)), axiom_uses(theta, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(pluggedIn(Device), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4598).
axiom(holds_at(pluggedIn(Device), Time),
    [not(ab1(Device, Time)), axiom_uses(theta, Time)]).

 /*  not(axiom_uses(theta)) :-
       not(ab1(Device, Time)),
       holds_at(neg(pluggedIn(Device)), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4598).

 /*  fix_axiom_head(Time) ->
       [not(axiom_uses(theta)), ->, not(axiom_uses(theta, Time))].
 */

 /*  [not(ab1(Device, Time)), holds_at(neg(pluggedIn(Device)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(axiom_uses(theta, Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4598).
axiom(not(axiom_uses(theta, Time)),
   
    [ not(ab1(Device, Time)),
      holds_at(neg(pluggedIn(Device)), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4600
%; Gamma


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4602
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4603).
% !HoldsAt(On(Device1),0).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(on(device1)), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4603).
axiom(holds_at(neg(on(device1)), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4603
% !HoldsAt(BrokenSwitch(Device1),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4603).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(brokenSwitch(device1)), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4603).
axiom(holds_at(neg(brokenSwitch(device1)), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4604
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4605).
% HoldsAt(Erratic(Device1),0).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(erratic(device1), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4605).
axiom(holds_at(erratic(device1), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4605
% HoldsAt(PluggedIn(Device1),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4605).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(pluggedIn(device1), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4605).
axiom(holds_at(pluggedIn(device1), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4607
%; added:


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4608
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4609).
% HoldsAt(DeterminingFluent(Device1),1).

 /*  [b(start, Time), ignore(start+1==Time)] ->
       ta(Ta_Param,
          tvs1=[start+1],
          tvs2=[Time, start],
          holds_at(determiningFluent(device1), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4609).
axiom(holds_at(determiningFluent(device1), Time),
    [b(start, Time)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4610
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4611).
% completion Theta Ab1
==> completion(theta).
==> completion(ab1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4611
% completion Happens
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4611).
==> completion(happens).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4613
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4614).
% range time 0 1
==> range(time,0,1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4614
% range offset 1 1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4614).
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter12/DefaultEvent.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4642
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4643).
% option modeldiff on
:- set_ec_option(modeldiff, on).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4644
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4645).
% load foundations/Root.e
:- load_e('foundations/Root.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4645
% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4645).
:- load_e('foundations/EC.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4647
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4648).
% sort agent
==> sort(agent).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4648
% sort clock
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4648).
==> sort(clock).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4650
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4651).
% fluent Beeping(clock)
fluent(beeping(clock)).
==> mpred_prop(beeping(clock),fluent).
==> meta_argtypes(beeping(clock)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4651
% fluent AlarmTime(clock,time)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4651).
fluent(alarmTime(clock,time)).
==> mpred_prop(alarmTime(clock,time),fluent).
==> meta_argtypes(alarmTime(clock,time)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4652
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4653).
% fluent AlarmOn(clock)
fluent(alarmOn(clock)).
==> mpred_prop(alarmOn(clock),fluent).
==> meta_argtypes(alarmOn(clock)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4654
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4655).
% event SetAlarmTime(agent,clock,time)
event(setAlarmTime(agent,clock,time)).
==> mpred_prop(setAlarmTime(agent,clock,time),event).
==> meta_argtypes(setAlarmTime(agent,clock,time)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4655
% event StartBeeping(clock)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4655).
event(startBeeping(clock)).
==> mpred_prop(startBeeping(clock),event).
==> meta_argtypes(startBeeping(clock)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4656
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4657).
% event TurnOnAlarm(agent,clock)
event(turnOnAlarm(agent,clock)).
==> mpred_prop(turnOnAlarm(agent,clock),event).
==> meta_argtypes(turnOnAlarm(agent,clock)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4657
% event TurnOffAlarm(agent,clock)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4657).
event(turnOffAlarm(agent,clock)).
==> mpred_prop(turnOffAlarm(agent,clock),event).
==> meta_argtypes(turnOffAlarm(agent,clock)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4659
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4660).
% predicate Ab1(clock,time)
predicate(ab1(clock,time)).
==> mpred_prop(ab1(clock,time),predicate).
==> meta_argtypes(ab1(clock,time)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4661
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4662).
% agent Nathan
==> t(agent,nathan).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4662
% clock Clock
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4662).
==> t(clock,clock).
%; Sigma
% [agent,clock,time1,time2,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4667
% HoldsAt(AlarmTime(clock,time1),time) &
% time1!=time2 ->
% Initiates(SetAlarmTime(agent,clock,time2),AlarmTime(clock,time2),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4669
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4667).

 /*  [holds_at(alarmTime(Clock, Time1), Time), diff(Time1, Time2)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(setAlarmTime(Agent, Clock, Time2),
                    alarmTime(Clock, Time2),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4667).
axiom(initiates(setAlarmTime(Agent, Clock, Time2), alarmTime(Clock, Time2), Time),
   
    [ holds_at(alarmTime(Clock, Time1), Time),
      diff(Time2, Time1)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4671
% [agent,clock,time1,time2,time]
% HoldsAt(AlarmTime(clock,time1),time) &
% time1!=time2 ->
% Terminates(SetAlarmTime(agent,clock,time2),AlarmTime(clock,time1),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4674
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4673).

 /*  [holds_at(alarmTime(Clock, Time1), Time), diff(Time1, Time2)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(setAlarmTime(Agent, Clock, Time2),
                     alarmTime(Clock, Time1),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4673).
axiom(terminates(setAlarmTime(Agent, Clock, Time2), alarmTime(Clock, Time1), Time),
   
    [ holds_at(alarmTime(Clock, Time1), Time),
      diff(Time1, Time2)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4676
% [agent,clock,time]
% Initiates(TurnOnAlarm(agent,clock),AlarmOn(clock),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4678).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(turnOnAlarm(Agent, Clock),
                    alarmOn(Clock),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4678).
axiom(initiates(turnOnAlarm(Agent, Clock), alarmOn(Clock), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4679
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4680).
% [agent,clock,time]
% Terminates(TurnOffAlarm(agent,clock),AlarmOn(clock),time).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(turnOffAlarm(Agent, Clock),
                     alarmOn(Clock),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4680).
axiom(terminates(turnOffAlarm(Agent, Clock), alarmOn(Clock), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4682
% [clock,time]
% Initiates(StartBeeping(clock),Beeping(clock),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4684).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(startBeeping(Clock), beeping(Clock), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4684).
axiom(initiates(startBeeping(Clock), beeping(Clock), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4685
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4686).
% [agent,clock,time]
% Terminates(TurnOffAlarm(agent,clock),Beeping(clock),time).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(turnOffAlarm(Agent, Clock),
                     beeping(Clock),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4686).
axiom(terminates(turnOffAlarm(Agent, Clock), beeping(Clock), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4688
%; Delta
% [clock,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4691
% HoldsAt(AlarmTime(clock,time),time) &
% HoldsAt(AlarmOn(clock),time) &
% !Ab1(clock,time) ->
% Happens(StartBeeping(clock),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4694
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4691).

 /*  holds_at(alarmTime(Clock, Time), Time), holds_at(alarmOn(Clock), Time), not(ab1(Clock, Time)) ->
       happens(startBeeping(Clock), Time).
 */

 /*  happens(startBeeping(Clock), Time) :-
       holds_at(alarmTime(Clock, Time), Time),
       holds_at(alarmOn(Clock), Time),
       not(ab1(Clock, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4691).

 /*  [holds_at(alarmTime(Clock, Time), Time), holds_at(alarmOn(Clock), Time), not(ab1(Clock, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(startBeeping(Clock), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4691).
axiom(happens(startBeeping(Clock), Time),
   
    [ holds_at(alarmTime(Clock, Time), Time),
      holds_at(alarmOn(Clock), Time),
      not(ab1(Clock, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4691).

 /*  not(holds_at(alarmTime(Clock, Time), Time)) :-
       ( holds_at(alarmOn(Clock), Time),
         not(ab1(Clock, Time))
       ),
       not(happens(startBeeping(Clock), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4691).

 /*  [holds_at(alarmOn(Clock), Time), not(ab1(Clock, Time)), not(happens(startBeeping(Clock), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(alarmTime(Clock, Time)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4691).
axiom(holds_at(neg(alarmTime(Clock, Time)), Time),
   
    [ holds_at(alarmOn(Clock), Time),
      not(ab1(Clock, Time)),
      not(happens(startBeeping(Clock), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4691).

 /*  not(holds_at(alarmOn(Clock), Time)) :-
       not(ab1(Clock, Time)),
       holds_at(alarmTime(Clock, Time), Time),
       not(happens(startBeeping(Clock), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4691).

 /*  [not(ab1(Clock, Time)), holds_at(alarmTime(Clock, Time), Time), not(happens(startBeeping(Clock), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(alarmOn(Clock)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4691).
axiom(holds_at(neg(alarmOn(Clock)), Time),
   
    [ not(ab1(Clock, Time)),
      holds_at(alarmTime(Clock, Time), Time),
      not(happens(startBeeping(Clock), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4691).

 /*  ab1(Clock, Time) :-
       holds_at(alarmOn(Clock), Time),
       holds_at(alarmTime(Clock, Time), Time),
       not(happens(startBeeping(Clock), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4691).

 /*  [holds_at(alarmOn(Clock), Time), holds_at(alarmTime(Clock, Time), Time), not(happens(startBeeping(Clock), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          ab1(Clock, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4691).
axiom(ab1(Clock, Time),
   
    [ holds_at(alarmOn(Clock), Time),
      holds_at(alarmTime(Clock, Time), Time),
      not(happens(startBeeping(Clock), Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4696
% Happens(SetAlarmTime(Nathan,Clock,2),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4696).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          happens(setAlarmTime(nathan, clock, 2), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4696).
axiom(happens(setAlarmTime(nathan, clock, 2), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4697
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4698).
% Happens(TurnOnAlarm(Nathan,Clock),1).

 /*  [b(start, Maptime), ignore(start+1==Maptime)] ->
       ta(Ta_Param,
          tvs1=[start+1],
          tvs2=[Maptime, start],
          happens(turnOnAlarm(nathan, clock), Maptime)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4698).
axiom(happens(turnOnAlarm(nathan, clock), Maptime),
    [b(start, Maptime)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4699
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4700).
%; Psi
% [clock,time1,time2,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4702
% HoldsAt(AlarmTime(clock,time1),time) &
% HoldsAt(AlarmTime(clock,time2),time) ->
% time1=time2.
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4704
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4702).

 /*  holds_at(alarmTime(Clock, Time1), Time), holds_at(alarmTime(Clock, Time2), Time) ->
       equals(Time1, Time2).
 */

 /*  not(holds_at(alarmTime(Clock, Time1), Time)) :-
       holds_at(alarmTime(Clock, Time2), Time),
       not(equals(Time1, Time2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4702).

 /*  [holds_at(alarmTime(Clock, Time2), Time), not(equals(Time1, Time2))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(alarmTime(Clock, Time1)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4702).
axiom(holds_at(neg(alarmTime(Clock, Time1)), Time),
   
    [ holds_at(alarmTime(Clock, Time2), Time),
      not(equals(Time1, Time2))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4702).

 /*  not(holds_at(alarmTime(Clock, Time2), Time)) :-
       holds_at(alarmTime(Clock, Time1), Time),
       not(equals(Time1, Time2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4702).

 /*  [holds_at(alarmTime(Clock, Time1), Time), not(equals(Time1, Time2))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(alarmTime(Clock, Time2)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4702).
axiom(holds_at(neg(alarmTime(Clock, Time2)), Time),
   
    [ holds_at(alarmTime(Clock, Time1), Time),
      not(equals(Time2, Time1))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4706
%; Gamma


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4708
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4709).
% !HoldsAt(AlarmOn(Clock),0).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(alarmOn(clock)), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4709).
axiom(holds_at(neg(alarmOn(clock)), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4709
% !HoldsAt(Beeping(Clock),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4709).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(beeping(clock)), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4709).
axiom(holds_at(neg(beeping(clock)), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4710
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4711).
% HoldsAt(AlarmTime(Clock,3),0).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(alarmTime(clock, 3), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4711).
axiom(holds_at(alarmTime(clock, 3), start),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4712
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4713).
% completion Happens
==> completion(happens).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4713
% completion Theta Ab1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4713).
==> completion(theta).
==> completion(ab1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4715
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4716).
% range time 0 3
==> range(time,0,3).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4716
% range offset 1 1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4716).
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter12/MethodD.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; Method (D)
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4746
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4747).
% load foundations/Root.e
:- load_e('foundations/Root.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4747
% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4747).
:- load_e('foundations/EC.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4749
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4750).
% sort object
==> sort(object).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4751
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4752).
% object A,B
==> t(object,a).
==> t(object,b).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4753
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4754).
% fluent P(object)
fluent(p(object)).
==> mpred_prop(p(object),fluent).
==> meta_argtypes(p(object)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4754
% fluent Q(object)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4754).
fluent(q(object)).
==> mpred_prop(q(object),fluent).
==> meta_argtypes(q(object)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4755
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4756).
% fluent R(object)
fluent(r(object)).
==> mpred_prop(r(object),fluent).
==> meta_argtypes(r(object)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4757
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4758).
% predicate Ab1(object,time)
predicate(ab1(object,time)).
==> mpred_prop(ab1(object,time),predicate).
==> meta_argtypes(ab1(object,time)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4758
% predicate Ab2(object,time)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4758).
predicate(ab2(object,time)).
==> mpred_prop(ab2(object,time),predicate).
==> meta_argtypes(ab2(object,time)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4760
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4761).
% [object,time]
% HoldsAt(P(object),time) & !Ab1(object,time) ->
% HoldsAt(Q(object),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4762

 /*  holds_at(p(Object), Time), not(ab1(Object, Time)) ->
       holds_at(q(Object), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4761).

 /*  holds_at(q(Object), Time) :-
       holds_at(p(Object), Time),
       not(ab1(Object, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4761).

 /*  [holds_at(p(Object), Time), not(ab1(Object, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(q(Object), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4761).
axiom(holds_at(q(Object), Time),
    [holds_at(p(Object), Time), not(ab1(Object, Time))]).

 /*  not(holds_at(p(Object), Time)) :-
       not(ab1(Object, Time)),
       not(holds_at(q(Object), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4761).

 /*  [not(ab1(Object, Time)), holds_at(neg(q(Object)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(p(Object)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4761).
axiom(holds_at(neg(p(Object)), Time),
   
    [ not(ab1(Object, Time)),
      holds_at(neg(q(Object)), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4761).

 /*  ab1(Object, Time) :-
       holds_at(p(Object), Time),
       not(holds_at(q(Object), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4761).

 /*  [holds_at(p(Object), Time), holds_at(neg(q(Object)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          ab1(Object, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4761).
axiom(ab1(Object, Time),
   
    [ holds_at(p(Object), Time),
      holds_at(neg(q(Object)), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4764
% [object,time]
% HoldsAt(R(object),time) & !Ab2(object,time) ->
% !HoldsAt(Q(object),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4766

 /*  holds_at(r(Object), Time), not(ab2(Object, Time)) ->
       holds_at(neg(q(Object)), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4766).

 /*  holds_at(neg(q(Object)), Time) :-
       holds_at(r(Object), Time),
       not(ab2(Object, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4766).

 /*  [holds_at(r(Object), Time), not(ab2(Object, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(q(Object)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4766).
axiom(holds_at(neg(q(Object)), Time),
    [holds_at(r(Object), Time), not(ab2(Object, Time))]).

 /*  not(holds_at(r(Object), Time)) :-
       not(ab2(Object, Time)),
       not(holds_at(neg(q(Object)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4766).

 /*  [not(ab2(Object, Time)), holds_at(q(Object), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(r(Object)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4766).
axiom(holds_at(neg(r(Object)), Time),
    [not(ab2(Object, Time)), holds_at(q(Object), Time)]).

 /*  ab2(Object, Time) :-
       holds_at(r(Object), Time),
       not(holds_at(neg(q(Object)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4766).

 /*  [holds_at(r(Object), Time), holds_at(q(Object), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          ab2(Object, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4766).
axiom(ab2(Object, Time),
   
    [ holds_at(r(Object), Time),
      holds_at(q(Object), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4768
% [object,time]
% HoldsAt(R(object),time) -> HoldsAt(P(object),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4770).

 /*  holds_at(r(Object), Time) ->
       holds_at(p(Object), Time).
 */

 /*  holds_at(p(Object), Time) :-
       holds_at(r(Object), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4770).

 /*  [holds_at(r(Object), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(p(Object), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4770).
axiom(holds_at(p(Object), Time),
    [holds_at(r(Object), Time)]).

 /*  not(holds_at(r(Object), Time)) :-
       not(holds_at(p(Object), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4770).

 /*  [holds_at(neg(p(Object)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(r(Object)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4770).
axiom(holds_at(neg(r(Object)), Time),
    [holds_at(neg(p(Object)), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4771
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4772).
% HoldsAt(R(A),0).

 /*  [] ->
       ta(Ta_Param, tvs1=[start], tvs2=[start], holds_at(r(a), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4772).
axiom(holds_at(r(a), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4772
% HoldsAt(P(B),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4772).

 /*  [] ->
       ta(Ta_Param, tvs1=[start], tvs2=[start], holds_at(p(b), start)).
 */
axiom(holds_at(p(b), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4773
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4774).
% !HoldsAt(R(B),0).

 /*  [] ->
       ta(Ta_Param, tvs1=[start], tvs2=[start], holds_at(neg(r(b)), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4774).
axiom(holds_at(neg(r(b)), start),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4775
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4776).
% Theta: 
next_axiom_uses(theta).
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4776
% [object,time]
% HoldsAt(R(object),time) -> Ab1(object,time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4778).

 /*  axiom_uses(theta) ->
       ( holds_at(r(Object), Time)->ab1(Object, Time)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4778).

 /*  ab1(Object, Time) :-
       holds_at(r(Object), Time),
       axiom_uses(theta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4778).

 /*  fix_axiom_head(Time) ->
       [axiom_uses(theta), ->, axiom_uses(theta, Time)].
 */

 /*  [holds_at(r(Object), Time), axiom_uses(theta, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          ab1(Object, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4778).
axiom(ab1(Object, Time),
    [holds_at(r(Object), Time), axiom_uses(theta, Time)]).

 /*  not(holds_at(r(Object), Time)) :-
       not(ab1(Object, Time)),
       axiom_uses(theta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4778).

 /*  [not(ab1(Object, Time)), axiom_uses(theta, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(r(Object)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4778).
axiom(holds_at(neg(r(Object)), Time),
    [not(ab1(Object, Time)), axiom_uses(theta, Time)]).

 /*  not(axiom_uses(theta)) :-
       not(ab1(Object, Time)),
       holds_at(r(Object), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4778).

 /*  fix_axiom_head(Time) ->
       [not(axiom_uses(theta)), ->, not(axiom_uses(theta, Time))].
 */

 /*  [not(ab1(Object, Time)), holds_at(r(Object), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(axiom_uses(theta, Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4778).
axiom(not(axiom_uses(theta, Time)),
    [not(ab1(Object, Time)), holds_at(r(Object), Time)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4779
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4780).
% range time 0 0
==> range(time,0,0).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4780
% range offset 1 1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4780).
==> range(offset,1,1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4782
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4783).
% completion Theta Ab1
==> completion(theta).
==> completion(ab1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4783
% completion Theta Ab2
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4783).
==> completion(theta).
==> completion(ab2).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter12/BrokenDevice.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4811
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4812).
% load foundations/Root.e
:- load_e('foundations/Root.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4812
% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4812).
:- load_e('foundations/EC.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4814
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4815).
% sort agent
==> sort(agent).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4815
% sort device
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4815).
==> sort(device).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4817
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4818).
% agent Nathan
==> t(agent,nathan).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4818
% device Device1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4818).
==> t(device,device1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4820
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4821).
% predicate Ab1(device,time)
predicate(ab1(device,time)).
==> mpred_prop(ab1(device,time),predicate).
==> meta_argtypes(ab1(device,time)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4822
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4823).
% fluent On(device)
fluent(on(device)).
==> mpred_prop(on(device),fluent).
==> meta_argtypes(on(device)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4823
% fluent PluggedIn(device)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4823).
fluent(pluggedIn(device)).
==> mpred_prop(pluggedIn(device),fluent).
==> meta_argtypes(pluggedIn(device)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4824
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4825).
% fluent BrokenSwitch(device)
fluent(brokenSwitch(device)).
==> mpred_prop(brokenSwitch(device),fluent).
==> meta_argtypes(brokenSwitch(device)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4826
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4827).
% event TurnOn(agent,device)
event(turnOn(agent,device)).
==> mpred_prop(turnOn(agent,device),event).
==> meta_argtypes(turnOn(agent,device)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4828
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4829).
%; Sigma
% [agent,device,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4831
% !Ab1(device,time) ->
% Initiates(TurnOn(agent,device),On(device),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4831).

 /*  [not(ab1(Device, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(turnOn(Agent, Device), on(Device), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4831).
axiom(initiates(turnOn(Agent, Device), on(Device), Time),
    [not(ab1(Device, Time))]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4834
%; Delta


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4836
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4837).
% Happens(TurnOn(Nathan,Device1),0).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          happens(turnOn(nathan, device1), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4837).
axiom(happens(turnOn(nathan, device1), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4838
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4839).
%; Theta

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4840
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4841).
% Theta: 
next_axiom_uses(theta).
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4840
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4841).
% [device,time]
 % HoldsAt(BrokenSwitch(device),time) -> Ab1(device,time).

 /*  axiom_uses(theta) ->
       ( holds_at(brokenSwitch(Device), Time)->ab1(Device, Time)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4841).

 /*  ab1(Device, Time) :-
       holds_at(brokenSwitch(Device), Time),
       axiom_uses(theta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4841).

 /*  fix_axiom_head(Time) ->
       [axiom_uses(theta), ->, axiom_uses(theta, Time)].
 */

 /*  [holds_at(brokenSwitch(Device), Time), axiom_uses(theta, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          ab1(Device, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4841).
axiom(ab1(Device, Time),
   
    [ holds_at(brokenSwitch(Device), Time),
      axiom_uses(theta, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4841).

 /*  not(holds_at(brokenSwitch(Device), Time)) :-
       not(ab1(Device, Time)),
       axiom_uses(theta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4841).

 /*  [not(ab1(Device, Time)), axiom_uses(theta, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(brokenSwitch(Device)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4841).
axiom(holds_at(neg(brokenSwitch(Device)), Time),
    [not(ab1(Device, Time)), axiom_uses(theta, Time)]).

 /*  not(axiom_uses(theta)) :-
       not(ab1(Device, Time)),
       holds_at(brokenSwitch(Device), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4841).

 /*  fix_axiom_head(Time) ->
       [not(axiom_uses(theta)), ->, not(axiom_uses(theta, Time))].
 */

 /*  [not(ab1(Device, Time)), holds_at(brokenSwitch(Device), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(axiom_uses(theta, Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4841).
axiom(not(axiom_uses(theta, Time)),
   
    [ not(ab1(Device, Time)),
      holds_at(brokenSwitch(Device), Time)
    ]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4841
% Theta: 
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4841).
next_axiom_uses(theta).
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4841
% [device,time]
 % !HoldsAt(PluggedIn(device),time) -> Ab1(device,time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4841).

 /*  axiom_uses(theta) ->
       ( holds_at(neg(pluggedIn(Device)), Time)->ab1(Device, Time)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4841).

 /*  ab1(Device, Time) :-
       holds_at(neg(pluggedIn(Device)), Time),
       axiom_uses(theta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4841).

 /*  fix_axiom_head(Time) ->
       [axiom_uses(theta), ->, axiom_uses(theta, Time)].
 */

 /*  [holds_at(neg(pluggedIn(Device)), Time), axiom_uses(theta, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          ab1(Device, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4841).
axiom(ab1(Device, Time),
   
    [ holds_at(neg(pluggedIn(Device)), Time),
      axiom_uses(theta, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4841).

 /*  not(holds_at(neg(pluggedIn(Device)), Time)) :-
       not(ab1(Device, Time)),
       axiom_uses(theta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4841).

 /*  [not(ab1(Device, Time)), axiom_uses(theta, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(pluggedIn(Device), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4841).
axiom(holds_at(pluggedIn(Device), Time),
    [not(ab1(Device, Time)), axiom_uses(theta, Time)]).

 /*  not(axiom_uses(theta)) :-
       not(ab1(Device, Time)),
       holds_at(neg(pluggedIn(Device)), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4841).

 /*  fix_axiom_head(Time) ->
       [not(axiom_uses(theta)), ->, not(axiom_uses(theta, Time))].
 */

 /*  [not(ab1(Device, Time)), holds_at(neg(pluggedIn(Device)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(axiom_uses(theta, Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4841).
axiom(not(axiom_uses(theta, Time)),
   
    [ not(ab1(Device, Time)),
      holds_at(neg(pluggedIn(Device)), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4843
%; Gamma


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4845
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4846).
% !HoldsAt(On(Device1),0).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(on(device1)), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4846).
axiom(holds_at(neg(on(device1)), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4846
% HoldsAt(BrokenSwitch(Device1),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4846).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(brokenSwitch(device1), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4846).
axiom(holds_at(brokenSwitch(device1), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4848
%; added:


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4849
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4850).
% HoldsAt(PluggedIn(Device1),0).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(pluggedIn(device1), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4850).
axiom(holds_at(pluggedIn(device1), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4851
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4852).
%; entailed:
%; !HoldsAt(On(Device1),1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4854
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4855).
% completion Theta Ab1
==> completion(theta).
==> completion(ab1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4855
% completion Happens
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4855).
==> completion(happens).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4857
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4858).
% range time 0 1
==> range(time,0,1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4858
% range offset 1 1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4858).
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter12/MethodB.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; Method (D)
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4888
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4889).
% load foundations/Root.e
:- load_e('foundations/Root.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4889
% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4889).
:- load_e('foundations/EC.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4891
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4892).
% sort object
==> sort(object).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4893
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4894).
% object A,B
==> t(object,a).
==> t(object,b).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4895
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4896).
% fluent P(object)
fluent(p(object)).
==> mpred_prop(p(object),fluent).
==> meta_argtypes(p(object)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4896
% fluent Q(object)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4896).
fluent(q(object)).
==> mpred_prop(q(object),fluent).
==> meta_argtypes(q(object)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4897
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4898).
% predicate Ab(object,time)
predicate(ab(object,time)).
==> mpred_prop(ab(object,time),predicate).
==> meta_argtypes(ab(object,time)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4899
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4900).
% [object,time]
% HoldsAt(P(object),time) & !Ab(object,time) ->
% HoldsAt(Q(object),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4901

 /*  holds_at(p(Object), Time), not(ab(Object, Time)) ->
       holds_at(q(Object), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4900).

 /*  holds_at(q(Object), Time) :-
       holds_at(p(Object), Time),
       not(ab(Object, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4900).

 /*  [holds_at(p(Object), Time), not(ab(Object, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(q(Object), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4900).
axiom(holds_at(q(Object), Time),
    [holds_at(p(Object), Time), not(ab(Object, Time))]).

 /*  not(holds_at(p(Object), Time)) :-
       not(ab(Object, Time)),
       not(holds_at(q(Object), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4900).

 /*  [not(ab(Object, Time)), holds_at(neg(q(Object)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(p(Object)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4900).
axiom(holds_at(neg(p(Object)), Time),
   
    [ not(ab(Object, Time)),
      holds_at(neg(q(Object)), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4900).

 /*  ab(Object, Time) :-
       holds_at(p(Object), Time),
       not(holds_at(q(Object), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4900).

 /*  [holds_at(p(Object), Time), holds_at(neg(q(Object)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          ab(Object, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4900).
axiom(ab(Object, Time),
   
    [ holds_at(p(Object), Time),
      holds_at(neg(q(Object)), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4903
% HoldsAt(P(A),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4903).

 /*  [] ->
       ta(Ta_Param, tvs1=[start], tvs2=[start], holds_at(p(a), start)).
 */
axiom(holds_at(p(a), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4904
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4905).
% HoldsAt(P(B),0).

 /*  [] ->
       ta(Ta_Param, tvs1=[start], tvs2=[start], holds_at(p(b), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4905).
axiom(holds_at(p(b), start),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4906
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4907).
% Theta: 
next_axiom_uses(theta).
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4906
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4907).
% Ab(A,0).

 /*  fix_axiom_head(Axiom_head_Ret) ->
       [axiom_uses(theta), ->, axiom_uses(theta, Axiom_head_Ret)].
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4907).

 /*  [axiom_uses(theta, Axiom_head_Ret)] ->
       ta(Axiom_head_Ret, tvs1=[], tvs2=[], ab(a, 0)).
 */
axiom(ab(a, 0),
    [axiom_uses(theta, Axiom_head_Ret)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4908
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4909).
% range time 0 0
==> range(time,0,0).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4909
% range offset 1 1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4909).
==> range(offset,1,1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4911
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4912).
% completion Theta Ab
==> completion(theta).
==> completion(ab).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter13/ModelFinding.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4939
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4940).
% load foundations/Root.e
:- load_e('foundations/Root.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4940
% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4940).
:- load_e('foundations/EC.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4942
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4943).
% sort agent
==> sort(agent).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4944
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4945).
% fluent Awake(agent)
fluent(awake(agent)).
==> mpred_prop(awake(agent),fluent).
==> meta_argtypes(awake(agent)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4945
% event WakeUp(agent)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4945).
event(wakeUp(agent)).
==> mpred_prop(wakeUp(agent),event).
==> meta_argtypes(wakeUp(agent)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4947
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4948).
% [agent,time]
 % Initiates(WakeUp(agent),Awake(agent),time).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(wakeUp(Agent), awake(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4948).
axiom(initiates(wakeUp(Agent), awake(Agent), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4948
% [agent,time]
 % Happens(WakeUp(agent),time) -> !HoldsAt(Awake(agent),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4948).

 /*  happens(wakeUp(Agent), Time) ->
       holds_at(neg(awake(Agent)), Time).
 */

 /*  holds_at(neg(awake(Agent)), Time) :-
       happens(wakeUp(Agent), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4948).

 /*  [holds_at(metreqs(wakeUp(Agent)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(wakeUp(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4948).
axiom(requires(wakeUp(Agent), Time),
    [holds_at(metreqs(wakeUp(Agent)), Time)]).

 /*  [holds_at(neg(awake(Agent)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(wakeUp(Agent)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4948).
axiom(holds_at(metreqs(wakeUp(Agent)), Time),
    [holds_at(neg(awake(Agent)), Time)]).

 /*  not(happens(wakeUp(Agent), Time)) :-
       not(holds_at(neg(awake(Agent)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4948).

 /*  [holds_at(awake(Agent), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(wakeUp(Agent), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4948).
axiom(not(happens(wakeUp(Agent), Time)),
    [holds_at(awake(Agent), Time)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4950
% agent James
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4950).
==> t(agent,james).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4952
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4953).
% range time 0 1
==> range(time,0,1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4953
% range offset 1 1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4953).
==> range(offset,1,1).
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter13/Postdiction.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4979
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4980).
% load foundations/Root.e
:- load_e('foundations/Root.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4980
% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4980).
:- load_e('foundations/EC.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4982
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4983).
% sort agent
==> sort(agent).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4984
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4985).
% fluent Awake(agent)
fluent(awake(agent)).
==> mpred_prop(awake(agent),fluent).
==> meta_argtypes(awake(agent)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4985
% event WakeUp(agent)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4985).
event(wakeUp(agent)).
==> mpred_prop(wakeUp(agent),event).
==> meta_argtypes(wakeUp(agent)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4987
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4988).
% [agent,time]
 % Initiates(WakeUp(agent),Awake(agent),time).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(wakeUp(Agent), awake(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4988).
axiom(initiates(wakeUp(Agent), awake(Agent), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4988
% [agent,time]
 % Happens(WakeUp(agent),time) -> !HoldsAt(Awake(agent),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4988).

 /*  happens(wakeUp(Agent), Time) ->
       holds_at(neg(awake(Agent)), Time).
 */

 /*  holds_at(neg(awake(Agent)), Time) :-
       happens(wakeUp(Agent), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4988).

 /*  [holds_at(metreqs(wakeUp(Agent)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(wakeUp(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4988).
axiom(requires(wakeUp(Agent), Time),
    [holds_at(metreqs(wakeUp(Agent)), Time)]).

 /*  [holds_at(neg(awake(Agent)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(wakeUp(Agent)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4988).
axiom(holds_at(metreqs(wakeUp(Agent)), Time),
    [holds_at(neg(awake(Agent)), Time)]).

 /*  not(happens(wakeUp(Agent), Time)) :-
       not(holds_at(neg(awake(Agent)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4988).

 /*  [holds_at(awake(Agent), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(wakeUp(Agent), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4988).
axiom(not(happens(wakeUp(Agent), Time)),
    [holds_at(awake(Agent), Time)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4990
% agent James
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4990).
==> t(agent,james).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4991
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4992).
% Delta: 
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4991
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4992).
% Happens(WakeUp(James),0).

 /*  [axiom_uses(delta, Axiom_uses_Ret)] ->
       ta(Ta_Param, tvs1=[start], tvs2=[start], happens(wakeUp(james), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4992).
axiom(happens(wakeUp(james), start),
    [axiom_uses(delta, Axiom_uses_Ret)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4992
% HoldsAt(Awake(James),1).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4992).

 /*  [b(start, Time), ignore(start+1==Time)] ->
       ta(Ta_Param,
          tvs1=[start+1],
          tvs2=[Time, start],
          holds_at(awake(james), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4992).
axiom(holds_at(awake(james), Time),
    [b(start, Time)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4994
% completion Delta Happens
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4994).
==> completion(delta).
==> completion(happens).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4996
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4997).
% range time 0 1
==> range(time,0,1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:4997
% range offset 1 1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',4997).
==> range(offset,1,1).
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter13/Deduction2.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5023
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5024).
% option timediff off
:- set_ec_option(timediff, off).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5025
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5026).
% load foundations/Root.e
:- load_e('foundations/Root.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5026
% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5026).
:- load_e('foundations/EC.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5028
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5029).
% sort agent
==> sort(agent).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5030
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5031).
% fluent Awake(agent)
fluent(awake(agent)).
==> mpred_prop(awake(agent),fluent).
==> meta_argtypes(awake(agent)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5031
% event WakeUp(agent)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5031).
event(wakeUp(agent)).
==> mpred_prop(wakeUp(agent),event).
==> meta_argtypes(wakeUp(agent)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5033
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5034).
% [agent,time]
 % Initiates(WakeUp(agent),Awake(agent),time).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(wakeUp(Agent), awake(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5034).
axiom(initiates(wakeUp(Agent), awake(Agent), Time),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5035
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5036).
% agent James
==> t(agent,james).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5036
% !HoldsAt(Awake(James),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5036).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(awake(james)), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5036).
axiom(holds_at(neg(awake(james)), start),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5037
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5038).
% Delta: 
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5037
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5038).
% Happens(WakeUp(James),0).

 /*  [axiom_uses(delta, Axiom_uses_Ret)] ->
       ta(Ta_Param, tvs1=[start], tvs2=[start], happens(wakeUp(james), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5038).
axiom(happens(wakeUp(james), start),
    [axiom_uses(delta, Axiom_uses_Ret)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5039
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5040).
% completion Delta Happens
==> completion(delta).
==> completion(happens).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5041
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5042).
% range time 0 1
==> range(time,0,1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5042
% range offset 1 1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5042).
==> range(offset,1,1).
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter13/Deduction1.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5068
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5069).
% load foundations/Root.e
:- load_e('foundations/Root.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5069
% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5069).
:- load_e('foundations/EC.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5071
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5072).
% sort agent
==> sort(agent).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5073
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5074).
% fluent Awake(agent)
fluent(awake(agent)).
==> mpred_prop(awake(agent),fluent).
==> meta_argtypes(awake(agent)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5074
% event WakeUp(agent)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5074).
event(wakeUp(agent)).
==> mpred_prop(wakeUp(agent),event).
==> meta_argtypes(wakeUp(agent)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5076
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5077).
% [agent,time]
 % Initiates(WakeUp(agent),Awake(agent),time).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(wakeUp(Agent), awake(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5077).
axiom(initiates(wakeUp(Agent), awake(Agent), Time),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5078
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5079).
% agent James
==> t(agent,james).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5079
% !HoldsAt(Awake(James),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5079).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(awake(james)), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5079).
axiom(holds_at(neg(awake(james)), start),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5080
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5081).
% Delta: 
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5080
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5081).
% Happens(WakeUp(James),0).

 /*  [axiom_uses(delta, Axiom_uses_Ret)] ->
       ta(Ta_Param, tvs1=[start], tvs2=[start], happens(wakeUp(james), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5081).
axiom(happens(wakeUp(james), start),
    [axiom_uses(delta, Axiom_uses_Ret)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5082
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5083).
% completion Delta Happens
==> completion(delta).
==> completion(happens).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5084
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5085).
% range time 0 1
==> range(time,0,1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5085
% range offset 1 1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5085).
==> range(offset,1,1).
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter13/Abduction.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5111
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5112).
% load foundations/Root.e
:- load_e('foundations/Root.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5112
% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5112).
:- load_e('foundations/EC.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5114
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5115).
% sort agent
==> sort(agent).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5116
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5117).
% fluent Awake(agent)
fluent(awake(agent)).
==> mpred_prop(awake(agent),fluent).
==> meta_argtypes(awake(agent)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5117
% event WakeUp(agent)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5117).
event(wakeUp(agent)).
==> mpred_prop(wakeUp(agent),event).
==> meta_argtypes(wakeUp(agent)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5119
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5120).
% [agent,time]
 % Initiates(WakeUp(agent),Awake(agent),time).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(wakeUp(Agent), awake(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5120).
axiom(initiates(wakeUp(Agent), awake(Agent), Time),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5121
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5122).
% agent James
==> t(agent,james).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5122
% !HoldsAt(Awake(James),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5122).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(awake(james)), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5122).
axiom(holds_at(neg(awake(james)), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5123
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5124).
% HoldsAt(Awake(James),1).

 /*  [b(start, Time), ignore(start+1==Time)] ->
       ta(Ta_Param,
          tvs1=[start+1],
          tvs2=[Time, start],
          holds_at(awake(james), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5124).
axiom(holds_at(awake(james), Time),
    [b(start, Time)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5125
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5126).
% range time 0 1
==> range(time,0,1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5126
% range offset 1 1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5126).
==> range(offset,1,1).
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter4/AlarmClock.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5152
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5153).
% load foundations/Root.e
:- load_e('foundations/Root.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5153
% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5153).
:- load_e('foundations/EC.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5155
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5156).
% sort agent
==> sort(agent).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5156
% sort clock
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5156).
==> sort(clock).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5158
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5159).
% fluent Beeping(clock)
fluent(beeping(clock)).
==> mpred_prop(beeping(clock),fluent).
==> meta_argtypes(beeping(clock)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5159
% fluent AlarmTime(clock,time)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5159).
fluent(alarmTime(clock,time)).
==> mpred_prop(alarmTime(clock,time),fluent).
==> meta_argtypes(alarmTime(clock,time)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5160
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5161).
% fluent AlarmOn(clock)
fluent(alarmOn(clock)).
==> mpred_prop(alarmOn(clock),fluent).
==> meta_argtypes(alarmOn(clock)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5162
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5163).
% event SetAlarmTime(agent,clock,time)
event(setAlarmTime(agent,clock,time)).
==> mpred_prop(setAlarmTime(agent,clock,time),event).
==> meta_argtypes(setAlarmTime(agent,clock,time)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5163
% event StartBeeping(clock)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5163).
event(startBeeping(clock)).
==> mpred_prop(startBeeping(clock),event).
==> meta_argtypes(startBeeping(clock)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5164
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5165).
% event TurnOnAlarm(agent,clock)
event(turnOnAlarm(agent,clock)).
==> mpred_prop(turnOnAlarm(agent,clock),event).
==> meta_argtypes(turnOnAlarm(agent,clock)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5165
% event TurnOffAlarm(agent,clock)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5165).
event(turnOffAlarm(agent,clock)).
==> mpred_prop(turnOffAlarm(agent,clock),event).
==> meta_argtypes(turnOffAlarm(agent,clock)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5167
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5168).
% agent Nathan
==> t(agent,nathan).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5168
% clock Clock
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5168).
==> t(clock,clock).
%; Sigma
% [agent,clock,time1,time2,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5173
% HoldsAt(AlarmTime(clock,time1),time) &
% time1!=time2 ->
% Initiates(SetAlarmTime(agent,clock,time2),AlarmTime(clock,time2),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5175
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5173).

 /*  [holds_at(alarmTime(Clock, Time1), Time), diff(Time1, Time2)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(setAlarmTime(Agent, Clock, Time2),
                    alarmTime(Clock, Time2),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5173).
axiom(initiates(setAlarmTime(Agent, Clock, Time2), alarmTime(Clock, Time2), Time),
   
    [ holds_at(alarmTime(Clock, Time1), Time),
      diff(Time2, Time1)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5177
% [agent,clock,time1,time2,time]
% HoldsAt(AlarmTime(clock,time1),time) &
% time1!=time2 ->
% Terminates(SetAlarmTime(agent,clock,time2),AlarmTime(clock,time1),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5180
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5179).

 /*  [holds_at(alarmTime(Clock, Time1), Time), diff(Time1, Time2)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(setAlarmTime(Agent, Clock, Time2),
                     alarmTime(Clock, Time1),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5179).
axiom(terminates(setAlarmTime(Agent, Clock, Time2), alarmTime(Clock, Time1), Time),
   
    [ holds_at(alarmTime(Clock, Time1), Time),
      diff(Time1, Time2)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5182
% [agent,clock,time]
% Initiates(TurnOnAlarm(agent,clock),AlarmOn(clock),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5184).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(turnOnAlarm(Agent, Clock),
                    alarmOn(Clock),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5184).
axiom(initiates(turnOnAlarm(Agent, Clock), alarmOn(Clock), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5185
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5186).
% [agent,clock,time]
% Terminates(TurnOffAlarm(agent,clock),AlarmOn(clock),time).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(turnOffAlarm(Agent, Clock),
                     alarmOn(Clock),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5186).
axiom(terminates(turnOffAlarm(Agent, Clock), alarmOn(Clock), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5188
% [clock,time]
% Initiates(StartBeeping(clock),Beeping(clock),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5190).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(startBeeping(Clock), beeping(Clock), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5190).
axiom(initiates(startBeeping(Clock), beeping(Clock), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5191
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5192).
% [agent,clock,time]
% Terminates(TurnOffAlarm(agent,clock),Beeping(clock),time).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(turnOffAlarm(Agent, Clock),
                     beeping(Clock),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5192).
axiom(terminates(turnOffAlarm(Agent, Clock), beeping(Clock), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5194
%; Delta
% [clock,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5197
% HoldsAt(AlarmTime(clock,time),time) &
% HoldsAt(AlarmOn(clock),time) ->
% Happens(StartBeeping(clock),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5199
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5197).

 /*  holds_at(alarmTime(Clock, Time), Time), holds_at(alarmOn(Clock), Time) ->
       happens(startBeeping(Clock), Time).
 */

 /*  happens(startBeeping(Clock), Time) :-
       holds_at(alarmTime(Clock, Time), Time),
       holds_at(alarmOn(Clock), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5197).

 /*  [holds_at(alarmTime(Clock, Time), Time), holds_at(alarmOn(Clock), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(startBeeping(Clock), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5197).
axiom(happens(startBeeping(Clock), Time),
   
    [ holds_at(alarmTime(Clock, Time), Time),
      holds_at(alarmOn(Clock), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5197).

 /*  not(holds_at(alarmTime(Clock, Time), Time)) :-
       holds_at(alarmOn(Clock), Time),
       not(happens(startBeeping(Clock), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5197).

 /*  [holds_at(alarmOn(Clock), Time), not(happens(startBeeping(Clock), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(alarmTime(Clock, Time)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5197).
axiom(holds_at(neg(alarmTime(Clock, Time)), Time),
   
    [ holds_at(alarmOn(Clock), Time),
      not(happens(startBeeping(Clock), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5197).

 /*  not(holds_at(alarmOn(Clock), Time)) :-
       holds_at(alarmTime(Clock, Time), Time),
       not(happens(startBeeping(Clock), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5197).

 /*  [holds_at(alarmTime(Clock, Time), Time), not(happens(startBeeping(Clock), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(alarmOn(Clock)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5197).
axiom(holds_at(neg(alarmOn(Clock)), Time),
   
    [ holds_at(alarmTime(Clock, Time), Time),
      not(happens(startBeeping(Clock), Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5201
% Happens(SetAlarmTime(Nathan,Clock,2),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5201).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          happens(setAlarmTime(nathan, clock, 2), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5201).
axiom(happens(setAlarmTime(nathan, clock, 2), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5202
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5203).
% Happens(TurnOnAlarm(Nathan,Clock),1).

 /*  [b(start, Maptime), ignore(start+1==Maptime)] ->
       ta(Ta_Param,
          tvs1=[start+1],
          tvs2=[Maptime, start],
          happens(turnOnAlarm(nathan, clock), Maptime)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5203).
axiom(happens(turnOnAlarm(nathan, clock), Maptime),
    [b(start, Maptime)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5204
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5205).
%; Psi
% [clock,time1,time2,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5207
% HoldsAt(AlarmTime(clock,time1),time) &
% HoldsAt(AlarmTime(clock,time2),time) ->
% time1=time2.
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5209
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5207).

 /*  holds_at(alarmTime(Clock, Time1), Time), holds_at(alarmTime(Clock, Time2), Time) ->
       equals(Time1, Time2).
 */

 /*  not(holds_at(alarmTime(Clock, Time1), Time)) :-
       holds_at(alarmTime(Clock, Time2), Time),
       not(equals(Time1, Time2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5207).

 /*  [holds_at(alarmTime(Clock, Time2), Time), not(equals(Time1, Time2))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(alarmTime(Clock, Time1)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5207).
axiom(holds_at(neg(alarmTime(Clock, Time1)), Time),
   
    [ holds_at(alarmTime(Clock, Time2), Time),
      not(equals(Time1, Time2))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5207).

 /*  not(holds_at(alarmTime(Clock, Time2), Time)) :-
       holds_at(alarmTime(Clock, Time1), Time),
       not(equals(Time1, Time2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5207).

 /*  [holds_at(alarmTime(Clock, Time1), Time), not(equals(Time1, Time2))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(alarmTime(Clock, Time2)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5207).
axiom(holds_at(neg(alarmTime(Clock, Time2)), Time),
   
    [ holds_at(alarmTime(Clock, Time1), Time),
      not(equals(Time2, Time1))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5211
%; Gamma


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5213
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5214).
% !HoldsAt(AlarmOn(Clock),0).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(alarmOn(clock)), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5214).
axiom(holds_at(neg(alarmOn(clock)), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5214
% !HoldsAt(Beeping(Clock),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5214).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(beeping(clock)), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5214).
axiom(holds_at(neg(beeping(clock)), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5215
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5216).
% HoldsAt(AlarmTime(Clock,3),0).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(alarmTime(clock, 3), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5216).
axiom(holds_at(alarmTime(clock, 3), start),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5217
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5218).
% completion Happens
==> completion(happens).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5219
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5220).
% range time 0 3
==> range(time,0,3).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5220
% range offset 1 1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5220).
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter4/BankAccountServiceFee.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5248
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5249).
% option modeldiff on
:- set_ec_option(modeldiff, on).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5250
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5251).
% load foundations/Root.e
:- load_e('foundations/Root.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5251
% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5251).
:- load_e('foundations/EC.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5253
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5254).
% sort account
==> sort(account).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5254
% sort value: integer
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5254).
==> subsort(value,integer).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5256
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5257).
% account Account1, Account2
==> t(account,account1).
==> t(account,account2).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5258
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5259).
% predicate EndOfMonth(time)
predicate(endOfMonth(time)).
==> mpred_prop(endOfMonth(time),predicate).
==> meta_argtypes(endOfMonth(time)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5259
% function ServiceFee(account): value
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5259).
function(serviceFee(account)).
==> mpred_prop(serviceFee(account),function).
==> meta_argtypes(serviceFee(account)).
predicate(serviceFeePred(account,value)).
==> mpred_prop(serviceFeePred(account,value),predicate).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5259).
==> meta_argtypes(serviceFeePred(account,value)).

 /*  fix_axiom_head(Time) ->
       
       [ functional_predicate(serviceFee, serviceFeePred),
          (->),
         holds_at(functional_predicate(serviceFee, serviceFeePred), Time)
       ].
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5259).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(functional_predicate(serviceFee, serviceFeePred), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5259).
axiom(holds_at(functional_predicate(serviceFee, serviceFeePred), Time),
    []).
==> resultIsa(serviceFee,value).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5260
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5261).
% function MinimumBalance(account): value
function(minimumBalance(account)).
==> mpred_prop(minimumBalance(account),function).
==> meta_argtypes(minimumBalance(account)).
predicate(minimumBalancePred(account,value)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5261).
==> mpred_prop(minimumBalancePred(account,value),predicate).
==> meta_argtypes(minimumBalancePred(account,value)).

 /*  fix_axiom_head(Time) ->
       
       [ functional_predicate(minimumBalance, minimumBalancePred),
          (->),
         holds_at(functional_predicate(minimumBalance, minimumBalancePred),
                  Time)
       ].
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5261).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(functional_predicate(minimumBalance, minimumBalancePred),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5261).
axiom(holds_at(functional_predicate(minimumBalance, minimumBalancePred), Time),
    []).
==> resultIsa(minimumBalance,value).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5262
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5263).
% fluent ServiceFeeCharged(account)
fluent(serviceFeeCharged(account)).
==> mpred_prop(serviceFeeCharged(account),fluent).
==> meta_argtypes(serviceFeeCharged(account)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5263
% fluent Balance(account,value)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5263).
fluent(balance(account,value)).
==> mpred_prop(balance(account,value),fluent).
==> meta_argtypes(balance(account,value)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5265
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5266).
% event Transfer(account,account,value)
event(transfer(account,account,value)).
==> mpred_prop(transfer(account,account,value),event).
==> meta_argtypes(transfer(account,account,value)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5266
% event MonthlyReset(account)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5266).
event(monthlyReset(account)).
==> mpred_prop(monthlyReset(account),event).
==> meta_argtypes(monthlyReset(account)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5267
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5268).
% event ChargeServiceFee(account)
event(chargeServiceFee(account)).
==> mpred_prop(chargeServiceFee(account),event).
==> meta_argtypes(chargeServiceFee(account)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5269
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5270).
%; Sigma
% [account1,account2,value1,value2,value3,value4,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5272
% HoldsAt(Balance(account1,value1),time) &
% HoldsAt(Balance(account2,value2),time) &
% value3>0 &
% value1>=value3 &
% value4=(value2+value3) ->
% Initiates(Transfer(account1,account2,value3),Balance(account2,value4),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5277
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5272).

 /*  [holds_at(balance(Account1, Value1), Time), holds_at(balance(Account2, Value2), Time), comparison(Value3, 0, >), comparison(Value1, Value3, >=), equals(Value4, Value2+Value3)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(transfer(Account1, Account2, Value3),
                    balance(Account2, Value4),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5272).
axiom(initiates(transfer(Account1, Account2, Value3), balance(Account2, Value4), Time),
   
    [ holds_at(balance(Account1, Value1), Time),
      holds_at(balance(Account2, Value2), Time),
      comparison(Value3, 0, >),
      comparison(Value1, Value3, >=),
      equals(Value4, Value2+Value3)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5279
% [account1,account2,value1,value2,value3,time]
% HoldsAt(Balance(account1,value1),time) &
% HoldsAt(Balance(account2,value2),time) &
% value3>0 &
% value1>=value3 ->
% Terminates(Transfer(account1,account2,value3),Balance(account2,value2),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5284
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5281).

 /*  [holds_at(balance(Account1, Value1), Time), holds_at(balance(Account2, Value2), Time), comparison(Value3, 0, >), comparison(Value1, Value3, >=)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(transfer(Account1, Account2, Value3),
                     balance(Account2, Value2),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5281).
axiom(terminates(transfer(Account1, Account2, Value3), balance(Account2, Value2), Time),
   
    [ holds_at(balance(Account1, Value1), Time),
      holds_at(balance(Account2, Value2), Time),
      comparison(Value3, 0, >),
      comparison(Value1, Value3, >=)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5286
% [account1,account2,value1,value2,value3,value4,time]
% HoldsAt(Balance(account1,value1),time) &
% HoldsAt(Balance(account2,value2),time) &
% value3>0 &
% value1>=value3 &
% value4=(value1-value3) ->
% Initiates(Transfer(account1,account2,value3),Balance(account1,value4),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5292
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5288).

 /*  [holds_at(balance(Account1, Value1), Time), holds_at(balance(Account2, Value2), Time), comparison(Value3, 0, >), comparison(Value1, Value3, >=), equals(Value4, Value1-Value3)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(transfer(Account1, Account2, Value3),
                    balance(Account1, Value4),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5288).
axiom(initiates(transfer(Account1, Account2, Value3), balance(Account1, Value4), Time),
   
    [ holds_at(balance(Account1, Value1), Time),
      holds_at(balance(Account2, Value2), Time),
      comparison(Value3, 0, >),
      comparison(Value1, Value3, >=),
      equals(Value4, Value1-Value3)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5294
% [account1,account2,value1,value2,value3,time]
% HoldsAt(Balance(account1,value1),time) &
% HoldsAt(Balance(account2,value2),time) &
% value3>0 &
% value1>=value3 ->
% Terminates(Transfer(account1,account2,value3),Balance(account1,value1),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5299
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5296).

 /*  [holds_at(balance(Account1, Value1), Time), holds_at(balance(Account2, Value2), Time), comparison(Value3, 0, >), comparison(Value1, Value3, >=)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(transfer(Account1, Account2, Value3),
                     balance(Account1, Value1),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5296).
axiom(terminates(transfer(Account1, Account2, Value3), balance(Account1, Value1), Time),
   
    [ holds_at(balance(Account1, Value1), Time),
      holds_at(balance(Account2, Value2), Time),
      comparison(Value3, 0, >),
      comparison(Value1, Value3, >=)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5301
% [account,time]
% Initiates(ChargeServiceFee(account),ServiceFeeCharged(account),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5303).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(chargeServiceFee(Account),
                    serviceFeeCharged(Account),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5303).
axiom(initiates(chargeServiceFee(Account), serviceFeeCharged(Account), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5304
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5305).
% [account,time]
% Terminates(MonthlyReset(account),ServiceFeeCharged(account),time).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(monthlyReset(Account),
                     serviceFeeCharged(Account),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5305).
axiom(terminates(monthlyReset(Account), serviceFeeCharged(Account), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5307
% [account,value1,value2,time]
% HoldsAt(Balance(account,value1),time) &
% value2 = (value1-ServiceFee(account)) ->
% Initiates(ChargeServiceFee(account),
%           Balance(account,value2),
%           time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5312
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5309).

 /*  [holds_at(balance(Account, Value1), Time), equals(Value2, Value1-serviceFee(Account))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(chargeServiceFee(Account),
                    balance(Account, Value2),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5309).
axiom(initiates(chargeServiceFee(Account), balance(Account, Value2), Time),
   
    [ holds_at(balance(Account, Value1), Time),
      equals(Value2, Value1-serviceFee(Account))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5314
% [account,value,time]
% HoldsAt(Balance(account,value),time) ->
% Terminates(ChargeServiceFee(account),Balance(account,value),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5316

 /*  [holds_at(balance(Account, Value), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(chargeServiceFee(Account),
                     balance(Account, Value),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5316).
axiom(terminates(chargeServiceFee(Account), balance(Account, Value), Time),
    [holds_at(balance(Account, Value), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5318
%; Delta
% [account,value,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5321
% HoldsAt(Balance(account,value),time) &
% value<MinimumBalance(account) &
% !HoldsAt(ServiceFeeCharged(account),time) ->
% Happens(ChargeServiceFee(account),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5324
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5321).

 /*  holds_at(balance(Account, Value), Time), Value<minimumBalance(Account), holds_at(neg(serviceFeeCharged(Account)), Time) ->
       happens(chargeServiceFee(Account), Time).
 */

 /*  happens(chargeServiceFee(Account), Time) :-
       holds_at(balance(Account, Value), Time),
       comparison(Value, minimumBalance(Account), <),
       holds_at(neg(serviceFeeCharged(Account)), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5321).

 /*  [holds_at(balance(Account, Value), Time), comparison(Value, minimumBalance(Account), <), holds_at(neg(serviceFeeCharged(Account)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(chargeServiceFee(Account), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5321).
axiom(happens(chargeServiceFee(Account), Time),
   
    [ holds_at(balance(Account, Value), Time),
      comparison(Value, minimumBalance(Account), <),
      holds_at(neg(serviceFeeCharged(Account)), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5321).

 /*  not(holds_at(balance(Account, Value), Time)) :-
       ( comparison(Value, minimumBalance(Account), <),
         holds_at(neg(serviceFeeCharged(Account)), Time)
       ),
       not(happens(chargeServiceFee(Account), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5321).

 /*  [comparison(Value, minimumBalance(Account), <), holds_at(neg(serviceFeeCharged(Account)), Time), not(happens(chargeServiceFee(Account), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(balance(Account, Value)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5321).
axiom(holds_at(neg(balance(Account, Value)), Time),
   
    [ comparison(Value, minimumBalance(Account), <),
      holds_at(neg(serviceFeeCharged(Account)), Time),
      not(happens(chargeServiceFee(Account), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5321).

 /*  not(holds_at(neg(serviceFeeCharged(Account)), Time)) :-
       comparison(Value, minimumBalance(Account), <),
       holds_at(balance(Account, Value), Time),
       not(happens(chargeServiceFee(Account), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5321).

 /*  [comparison(Value, minimumBalance(Account), <), holds_at(balance(Account, Value), Time), not(happens(chargeServiceFee(Account), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(serviceFeeCharged(Account), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5321).
axiom(holds_at(serviceFeeCharged(Account), Time),
   
    [ comparison(Value, minimumBalance(Account), <),
      holds_at(balance(Account, Value), Time),
      not(happens(chargeServiceFee(Account), Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5326
% [account,time]
% EndOfMonth(time) ->
% Happens(MonthlyReset(account),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5328

 /*  endOfMonth(Time) ->
       happens(monthlyReset(Account), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5328).

 /*  happens(monthlyReset(Account), Time) :-
       endOfMonth(Time).
 */

 /*  [endOfMonth(Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(monthlyReset(Account), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5328).
axiom(happens(monthlyReset(Account), Time),
    [endOfMonth(Time)]).

 /*  not(endOfMonth(Time)) :-
       not(happens(monthlyReset(Account), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5328).

 /*  [not(happens(monthlyReset(Account), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(endOfMonth(Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5328).
axiom(not(endOfMonth(Time)),
    [not(happens(monthlyReset(Account), Time))]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5330
% Happens(Transfer(Account1,Account2,1),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5330).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          happens(transfer(account1, account2, 1), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5330).
axiom(happens(transfer(account1, account2, 1), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5331
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5332).
% Happens(Transfer(Account1,Account2,1),0).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          happens(transfer(account1, account2, 1), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5332).
axiom(happens(transfer(account1, account2, 1), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5333
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5334).
%; Psi
% [account,value1,value2,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5336
% HoldsAt(Balance(account,value1),time) &
% HoldsAt(Balance(account,value2),time) ->
% value1=value2.
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5338
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5336).

 /*  holds_at(balance(Account, Value1), Time), holds_at(balance(Account, Value2), Time) ->
       equals(Value1, Value2).
 */

 /*  not(holds_at(balance(Account, Value1), Time)) :-
       holds_at(balance(Account, Value2), Time),
       not(equals(Value1, Value2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5336).

 /*  [holds_at(balance(Account, Value2), Time), not(equals(Value1, Value2))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(balance(Account, Value1)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5336).
axiom(holds_at(neg(balance(Account, Value1)), Time),
   
    [ holds_at(balance(Account, Value2), Time),
      not(equals(Value1, Value2))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5336).

 /*  not(holds_at(balance(Account, Value2), Time)) :-
       holds_at(balance(Account, Value1), Time),
       not(equals(Value1, Value2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5336).

 /*  [holds_at(balance(Account, Value1), Time), not(equals(Value1, Value2))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(balance(Account, Value2)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5336).
axiom(holds_at(neg(balance(Account, Value2)), Time),
   
    [ holds_at(balance(Account, Value1), Time),
      not(equals(Value2, Value1))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5340
%; Gamma


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5342
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5343).
% !HoldsAt(ServiceFeeCharged(Account1),0).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(serviceFeeCharged(account1)), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5343).
axiom(holds_at(neg(serviceFeeCharged(account1)), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5343
% !HoldsAt(ServiceFeeCharged(Account2),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5343).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(serviceFeeCharged(account2)), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5343).
axiom(holds_at(neg(serviceFeeCharged(account2)), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5344
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5345).
% HoldsAt(Balance(Account1,3),0).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(balance(account1, 3), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5345).
axiom(holds_at(balance(account1, 3), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5345
% HoldsAt(Balance(Account2,1),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5345).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(balance(account2, 1), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5345).
axiom(holds_at(balance(account2, 1), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5346
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5347).
% MinimumBalance(Account1)=3.

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], equals(minimumBalance(account1), 3)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5347).
axiom(equals(minimumBalance(account1), 3),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5347
% MinimumBalance(Account2)=1.
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5347).

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], equals(minimumBalance(account2), 1)).
 */
axiom(equals(minimumBalance(account2), 1),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5348
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5349).
% ServiceFee(Account1)=1.

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], equals(serviceFee(account1), 1)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5349).
axiom(equals(serviceFee(account1), 1),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5349
% ServiceFee(Account2)=1.
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5349).

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], equals(serviceFee(account2), 1)).
 */
axiom(equals(serviceFee(account2), 1),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5350
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5351).
% [time]
 % !EndOfMonth(time).
 %  not(endOfMonth(Time)).

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], not(endOfMonth(Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5351).
axiom(not(endOfMonth(Time)),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5352
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5353).
% completion Happens
==> completion(happens).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5354
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5355).
% range time 0 3
==> range(time,0,3).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5355
% range value 1 3
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5355).
==> range(value,1,3).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5356
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5357).
% range offset 1 1
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Exercises/Counter.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{DeneckerDupreBelleghem:1998,
%;   author = "Marc Denecker and Daniele Theseider Dupr\'{e} and Kristof Van Belleghem",
%;   year = "1998",
%;   title = "An inductive definition approach to ramifications",
%;   journal = "Link{\"{o}}ping Electronic Articles in Computer and Information Science",
%;   volume = "3",
%;   number = "007",
%; }
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5393
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5394).
% load foundations/Root.e
:- load_e('foundations/Root.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5394
% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5394).
:- load_e('foundations/EC.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5396
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5397).
% sort counter
==> sort(counter).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5397
% counter Counter1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5397).
==> t(counter,counter1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5399
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5400).
% event FalseToTrue(counter)
event(falseToTrue(counter)).
==> mpred_prop(falseToTrue(counter),event).
==> meta_argtypes(falseToTrue(counter)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5400
% event TrueToFalse(counter)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5400).
event(trueToFalse(counter)).
==> mpred_prop(trueToFalse(counter),event).
==> meta_argtypes(trueToFalse(counter)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5402
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5403).
% fluent Count(counter,integer)
fluent(count(counter,integer)).
==> mpred_prop(count(counter,integer),fluent).
==> meta_argtypes(count(counter,integer)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5403
% fluent True(counter)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5403).
fluent(true(counter)).
==> mpred_prop(true(counter),fluent).
==> meta_argtypes(true(counter)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5404
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5405).
% fluent InputLine(counter)
fluent(inputLine(counter)).
==> mpred_prop(inputLine(counter),fluent).
==> meta_argtypes(inputLine(counter)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5405
% noninertial InputLine
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5405).
==> noninertial(inputLine).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5407
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5408).
% Delta: 
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5407
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5408).
% [counter,time]
% !HoldsAt(True(counter),time) &
% HoldsAt(InputLine(counter),time) ->
% Happens(FalseToTrue(counter),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5410
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5408).

 /*  axiom_uses(delta) ->
       ( holds_at(neg(true(Counter)), Time), holds_at(inputLine(Counter), Time)->happens(falseToTrue(Counter), Time)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5408).

 /*  happens(falseToTrue(Counter), Time) :-
       ( holds_at(neg(true(Counter)), Time),
         holds_at(inputLine(Counter), Time)
       ),
       axiom_uses(delta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5408).

 /*  [holds_at(neg(true(Counter)), Time), holds_at(inputLine(Counter), Time), axiom_uses(delta, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(falseToTrue(Counter), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5408).
axiom(happens(falseToTrue(Counter), Time),
   
    [ holds_at(neg(true(Counter)), Time),
      holds_at(inputLine(Counter), Time),
      axiom_uses(delta, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5408).

 /*  not(holds_at(neg(true(Counter)), Time)) :-
       holds_at(inputLine(Counter), Time),
       not(happens(falseToTrue(Counter), Time)),
       axiom_uses(delta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5408).

 /*  [holds_at(inputLine(Counter), Time), not(happens(falseToTrue(Counter), Time)), axiom_uses(delta, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(true(Counter), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5408).
axiom(holds_at(true(Counter), Time),
   
    [ holds_at(inputLine(Counter), Time),
      not(happens(falseToTrue(Counter), Time)),
      axiom_uses(delta, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5408).

 /*  not(holds_at(inputLine(Counter), Time)) :-
       holds_at(neg(true(Counter)), Time),
       not(happens(falseToTrue(Counter), Time)),
       axiom_uses(delta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5408).

 /*  [holds_at(neg(true(Counter)), Time), not(happens(falseToTrue(Counter), Time)), axiom_uses(delta, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(inputLine(Counter)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5408).
axiom(holds_at(neg(inputLine(Counter)), Time),
   
    [ holds_at(neg(true(Counter)), Time),
      not(happens(falseToTrue(Counter), Time)),
      axiom_uses(delta, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5408).

 /*  not(axiom_uses(delta)) :-
       not(happens(falseToTrue(Counter), Time)),
       holds_at(neg(true(Counter)), Time),
       holds_at(inputLine(Counter), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5408).

 /*  fix_axiom_head(Time) ->
       [not(axiom_uses(delta)), ->, not(axiom_uses(delta, Time))].
 */

 /*  [not(happens(falseToTrue(Counter), Time)), holds_at(neg(true(Counter)), Time), holds_at(inputLine(Counter), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(axiom_uses(delta, Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5408).
axiom(not(axiom_uses(delta, Time)),
   
    [ not(happens(falseToTrue(Counter), Time)),
      holds_at(neg(true(Counter)), Time),
      holds_at(inputLine(Counter), Time)
    ]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5412
% Delta: 
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5412).
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5412
% [counter,time]
% HoldsAt(True(counter),time) &
% !HoldsAt(InputLine(counter),time) ->
% Happens(TrueToFalse(counter),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5415
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5414).

 /*  axiom_uses(delta) ->
       ( holds_at(true(Counter), Time), holds_at(neg(inputLine(Counter)), Time)->happens(trueToFalse(Counter), Time)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5414).

 /*  happens(trueToFalse(Counter), Time) :-
       ( holds_at(true(Counter), Time),
         holds_at(neg(inputLine(Counter)), Time)
       ),
       axiom_uses(delta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5414).

 /*  [holds_at(true(Counter), Time), holds_at(neg(inputLine(Counter)), Time), axiom_uses(delta, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(trueToFalse(Counter), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5414).
axiom(happens(trueToFalse(Counter), Time),
   
    [ holds_at(true(Counter), Time),
      holds_at(neg(inputLine(Counter)), Time),
      axiom_uses(delta, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5414).

 /*  not(holds_at(true(Counter), Time)) :-
       holds_at(neg(inputLine(Counter)), Time),
       not(happens(trueToFalse(Counter), Time)),
       axiom_uses(delta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5414).

 /*  [holds_at(neg(inputLine(Counter)), Time), not(happens(trueToFalse(Counter), Time)), axiom_uses(delta, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(true(Counter)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5414).
axiom(holds_at(neg(true(Counter)), Time),
   
    [ holds_at(neg(inputLine(Counter)), Time),
      not(happens(trueToFalse(Counter), Time)),
      axiom_uses(delta, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5414).

 /*  not(holds_at(neg(inputLine(Counter)), Time)) :-
       holds_at(true(Counter), Time),
       not(happens(trueToFalse(Counter), Time)),
       axiom_uses(delta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5414).

 /*  [holds_at(true(Counter), Time), not(happens(trueToFalse(Counter), Time)), axiom_uses(delta, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(inputLine(Counter), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5414).
axiom(holds_at(inputLine(Counter), Time),
   
    [ holds_at(true(Counter), Time),
      not(happens(trueToFalse(Counter), Time)),
      axiom_uses(delta, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5414).

 /*  not(axiom_uses(delta)) :-
       not(happens(trueToFalse(Counter), Time)),
       holds_at(true(Counter), Time),
       holds_at(neg(inputLine(Counter)), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5414).

 /*  fix_axiom_head(Time) ->
       [not(axiom_uses(delta)), ->, not(axiom_uses(delta, Time))].
 */

 /*  [not(happens(trueToFalse(Counter), Time)), holds_at(true(Counter), Time), holds_at(neg(inputLine(Counter)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(axiom_uses(delta, Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5414).
axiom(not(axiom_uses(delta, Time)),
   
    [ not(happens(trueToFalse(Counter), Time)),
      holds_at(true(Counter), Time),
      holds_at(neg(inputLine(Counter)), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5417
% [counter,time]
 % Initiates(FalseToTrue(counter),True(counter),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5417).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(falseToTrue(Counter), true(Counter), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5417).
axiom(initiates(falseToTrue(Counter), true(Counter), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5419
% [counter,time]
 % Terminates(TrueToFalse(counter),True(counter),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5419).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(trueToFalse(Counter), true(Counter), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5419).
axiom(terminates(trueToFalse(Counter), true(Counter), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5421
% [counter,integer1,integer2,time]
% HoldsAt(Count(counter,integer1),time) &
% (integer2 = (integer1 + 1)) ->
% Initiates(FalseToTrue(counter),Count(counter,integer2),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5424
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5423).

 /*  [holds_at(count(Counter, Integer1), Time), equals(Integer2, Integer1+1)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(falseToTrue(Counter),
                    count(Counter, Integer2),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5423).
axiom(initiates(falseToTrue(Counter), count(Counter, Integer2), Time),
   
    [ holds_at(count(Counter, Integer1), Time),
      equals(Integer2, Integer1+1)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5426
% [counter,integer,time]
% HoldsAt(Count(counter,integer),time) ->
% Terminates(FalseToTrue(counter),Count(counter,integer),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5428

 /*  [holds_at(count(Counter, Integer), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(falseToTrue(Counter),
                     count(Counter, Integer),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5428).
axiom(terminates(falseToTrue(Counter), count(Counter, Integer), Time),
    [holds_at(count(Counter, Integer), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5430
% [counter,integer1,integer2,time]
% HoldsAt(Count(counter,integer1),time) &
% HoldsAt(Count(counter,integer2),time) ->
% integer1 = integer2.
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5433
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5432).

 /*  holds_at(count(Counter, Integer1), Time), holds_at(count(Counter, Integer2), Time) ->
       equals(Integer1, Integer2).
 */

 /*  not(holds_at(count(Counter, Integer1), Time)) :-
       holds_at(count(Counter, Integer2), Time),
       not(equals(Integer1, Integer2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5432).

 /*  [holds_at(count(Counter, Integer2), Time), not(equals(Integer1, Integer2))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(count(Counter, Integer1)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5432).
axiom(holds_at(neg(count(Counter, Integer1)), Time),
   
    [ holds_at(count(Counter, Integer2), Time),
      not(equals(Integer1, Integer2))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5432).

 /*  not(holds_at(count(Counter, Integer2), Time)) :-
       holds_at(count(Counter, Integer1), Time),
       not(equals(Integer1, Integer2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5432).

 /*  [holds_at(count(Counter, Integer1), Time), not(equals(Integer1, Integer2))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(count(Counter, Integer2)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5432).
axiom(holds_at(neg(count(Counter, Integer2)), Time),
   
    [ holds_at(count(Counter, Integer1), Time),
      not(equals(Integer2, Integer1))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5435
% !HoldsAt(True(Counter1),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5435).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(true(counter1)), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5435).
axiom(holds_at(neg(true(counter1)), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5436
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5437).
% !HoldsAt(InputLine(Counter1),0).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(inputLine(counter1)), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5437).
axiom(holds_at(neg(inputLine(counter1)), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5437
% HoldsAt(InputLine(Counter1),1).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5437).

 /*  [b(start, Time), ignore(start+1==Time)] ->
       ta(Ta_Param,
          tvs1=[start+1],
          tvs2=[Time, start],
          holds_at(inputLine(counter1), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5437).
axiom(holds_at(inputLine(counter1), Time),
    [b(start, Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5438
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5439).
% HoldsAt(InputLine(Counter1),2).

 /*  [b(start, Start2), toffset(start, 2, Start2), ignore(start+2==Start2)] ->
       ta(Ta_Param,
          tvs1=[start+2],
          tvs2=[Start2, start],
          holds_at(inputLine(counter1), Start2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5439).
axiom(holds_at(inputLine(counter1), Start2),
    [b(start, Start2), toffset(start, 2, Start2)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5439
% HoldsAt(InputLine(Counter1),3).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5439).

 /*  [b(start, Start3), toffset(start, 3, Start3), ignore(start+3==Start3)] ->
       ta(Ta_Param,
          tvs1=[start+3],
          tvs2=[Start3, start],
          holds_at(inputLine(counter1), Start3)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5439).
axiom(holds_at(inputLine(counter1), Start3),
    [b(start, Start3), toffset(start, 3, Start3)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5440
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5441).
% !HoldsAt(InputLine(Counter1),4).

 /*  [b(start, Start4), toffset(start, 4, Start4), ignore(start+4==Start4)] ->
       ta(Ta_Param,
          tvs1=[start+4],
          tvs2=[Start4, start],
          holds_at(neg(inputLine(counter1)), Start4)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5441).
axiom(holds_at(neg(inputLine(counter1)), Start4),
    [b(start, Start4), toffset(start, 4, Start4)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5441
% !HoldsAt(InputLine(Counter1),5).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5441).

 /*  [b(start, Start5), toffset(start, 5, Start5), ignore(start+5==Start5)] ->
       ta(Ta_Param,
          tvs1=[start+5],
          tvs2=[Start5, start],
          holds_at(neg(inputLine(counter1)), Start5)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5441).
axiom(holds_at(neg(inputLine(counter1)), Start5),
    [b(start, Start5), toffset(start, 5, Start5)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5442
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5443).
% !HoldsAt(InputLine(Counter1),6).

 /*  [b(start, Start6), toffset(start, 6, Start6), ignore(start+6==Start6)] ->
       ta(Ta_Param,
          tvs1=[start+6],
          tvs2=[Start6, start],
          holds_at(neg(inputLine(counter1)), Start6)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5443).
axiom(holds_at(neg(inputLine(counter1)), Start6),
    [b(start, Start6), toffset(start, 6, Start6)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5443
% HoldsAt(InputLine(Counter1),7).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5443).

 /*  [b(start, Start7), toffset(start, 7, Start7), ignore(start+7==Start7)] ->
       ta(Ta_Param,
          tvs1=[start+7],
          tvs2=[Start7, start],
          holds_at(inputLine(counter1), Start7)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5443).
axiom(holds_at(inputLine(counter1), Start7),
    [b(start, Start7), toffset(start, 7, Start7)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5444
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5445).
% HoldsAt(InputLine(Counter1),8).

 /*  [b(start, Start8), toffset(start, 8, Start8), ignore(start+8==Start8)] ->
       ta(Ta_Param,
          tvs1=[start+8],
          tvs2=[Start8, start],
          holds_at(inputLine(counter1), Start8)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5445).
axiom(holds_at(inputLine(counter1), Start8),
    [b(start, Start8), toffset(start, 8, Start8)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5445
% HoldsAt(InputLine(Counter1),9).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5445).

 /*  [b(start, Start9), toffset(start, 9, Start9), ignore(start+9==Start9)] ->
       ta(Ta_Param,
          tvs1=[start+9],
          tvs2=[Start9, start],
          holds_at(inputLine(counter1), Start9)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5445).
axiom(holds_at(inputLine(counter1), Start9),
    [b(start, Start9), toffset(start, 9, Start9)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5447
% HoldsAt(Count(Counter1,0),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5447).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(count(counter1, 0), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5447).
axiom(holds_at(count(counter1, 0), start),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5449
% completion Happens
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5449).
==> completion(happens).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5451
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5452).
% range integer 0 6
==> range(integer,0,6).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5452
% range time 0 10
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5452).
==> range(time,0,10).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5453
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5454).
% range offset 1 1
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Exercises/TeacherTells.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5481
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5482).
% option modeldiff on
:- set_ec_option(modeldiff, on).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5483
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5484).
% load foundations/Root.e
:- load_e('foundations/Root.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5484
% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5484).
:- load_e('foundations/EC.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5486
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5487).
% sort agent
==> sort(agent).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5487
% sort room
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5487).
==> sort(room).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5488
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5489).
% sort fact
==> sort(fact).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5490
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5491).
% agent Teacher, Student
==> t(agent,teacher).
==> t(agent,student).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5491
% room Kitchen, Classroom
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5491).
==> t(room,kitchen).
==> t(room,classroom).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5492
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5493).
% fact Fact1, Fact2
==> t(fact,fact1).
==> t(fact,fact2).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5494
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5495).
% fluent InRoom(agent,room)
fluent(inRoom(agent,room)).
==> mpred_prop(inRoom(agent,room),fluent).
==> meta_argtypes(inRoom(agent,room)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5495
% fluent ListeningTo(agent,agent)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5495).
fluent(listeningTo(agent,agent)).
==> mpred_prop(listeningTo(agent,agent),fluent).
==> meta_argtypes(listeningTo(agent,agent)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5496
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5497).
% fluent Know(agent,fact)
fluent(know(agent,fact)).
==> mpred_prop(know(agent,fact),fluent).
==> meta_argtypes(know(agent,fact)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5498
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5499).
% event Tell(agent,agent,fact)
event(tell(agent,agent,fact)).
==> mpred_prop(tell(agent,agent,fact),event).
==> meta_argtypes(tell(agent,agent,fact)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5500
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5501).
%; Sigma
% [agent1,agent2,fact,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5503
% (
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5503
% {room} HoldsAt(InRoom(agent1,room),time) &
%         HoldsAt(InRoom(agent2,room),time)) &
% HoldsAt(ListeningTo(agent2,agent1),time) ->
% Initiates(Tell(agent1,agent2,fact),Know(agent2,fact),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5506
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5503).

 /*  exists([Room],
    (holds_at(inRoom(Agent1, Room), Time), holds_at(inRoom(Agent2, Room), Time)), holds_at(listeningTo(Agent2, Agent1), Time) ->
       initiates(tell(Agent1, Agent2, Fact),
                 know(Agent2, Fact),
                 Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5503).

 /*  initiates(tell(Agent1, Agent2, Fact), know(Agent2, Fact), Time) :-
       ( ( holds_at(inRoom(Agent1, Room), Time),
           holds_at(inRoom(Agent2, Room), Time)
         ),
         holds_at(listeningTo(Agent2, Agent1), Time)
       ),
       some(Room,
            '$kolem_Fn_400'(Agent1, Time, Agent2, Fact)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5503).

 /*  [holds_at(inRoom(Agent1, Room), Time), holds_at(inRoom(Agent2, Room), Time), holds_at(listeningTo(Agent2, Agent1), Time), some(Room, '$kolem_Fn_400'(Agent1, Time, Agent2, Fact))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(tell(Agent1, Agent2, Fact),
                    know(Agent2, Fact),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5503).
axiom(initiates(tell(Agent1, Agent2, Fact), know(Agent2, Fact), Time),
   
    [ holds_at(inRoom(Agent1, Room), Time),
      holds_at(inRoom(Agent2, Room), Time),
      holds_at(listeningTo(Agent2, Agent1), Time),
      some(Room,
           '$kolem_Fn_400'(Agent1, Time, Agent2, Fact))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5503).

 /*  not(holds_at(inRoom(Agent1, Room), Time)) :-
       holds_at(inRoom(Agent2, Room), Time),
       holds_at(listeningTo(Agent2, Agent1), Time),
       not(initiates(tell(Agent1, Agent2, Fact),
                     know(Agent2, Fact),
                     Time)),
       some(Room,
            '$kolem_Fn_400'(Agent1, Time, Agent2, Fact)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5503).

 /*  [holds_at(inRoom(Agent2, Room), Time), holds_at(listeningTo(Agent2, Agent1), Time), not(initiates(tell(Agent1, Agent2, Fact), know(Agent2, Fact), Time)), some(Room, '$kolem_Fn_400'(Agent1, Time, Agent2, Fact))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(inRoom(Agent1, Room)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5503).
axiom(holds_at(neg(inRoom(Agent1, Room)), Time),
   
    [ holds_at(inRoom(Agent2, Room), Time),
      holds_at(listeningTo(Agent2, Agent1), Time),
      not(initiates(tell(Agent1, Agent2, Fact),
                    know(Agent2, Fact),
                    Time)),
      some(Room,
           '$kolem_Fn_400'(Agent1, Time, Agent2, Fact))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5503).

 /*  not(holds_at(inRoom(Agent2, Room), Time)) :-
       holds_at(inRoom(Agent1, Room), Time),
       holds_at(listeningTo(Agent2, Agent1), Time),
       not(initiates(tell(Agent1, Agent2, Fact),
                     know(Agent2, Fact),
                     Time)),
       some(Room,
            '$kolem_Fn_400'(Agent1, Time, Agent2, Fact)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5503).

 /*  [holds_at(inRoom(Agent1, Room), Time), holds_at(listeningTo(Agent2, Agent1), Time), not(initiates(tell(Agent1, Agent2, Fact), know(Agent2, Fact), Time)), some(Room, '$kolem_Fn_400'(Agent1, Time, Agent2, Fact))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(inRoom(Agent2, Room)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5503).
axiom(holds_at(neg(inRoom(Agent2, Room)), Time),
   
    [ holds_at(inRoom(Agent1, Room), Time),
      holds_at(listeningTo(Agent2, Agent1), Time),
      not(initiates(tell(Agent1, Agent2, Fact),
                    know(Agent2, Fact),
                    Time)),
      some(Room,
           '$kolem_Fn_400'(Agent1, Time, Agent2, Fact))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5503).

 /*  not(holds_at(listeningTo(Agent2, Agent1), Time)) :-
       ( holds_at(inRoom(Agent1, Room), Time),
         holds_at(inRoom(Agent2, Room), Time)
       ),
       not(initiates(tell(Agent1, Agent2, Fact),
                     know(Agent2, Fact),
                     Time)),
       some(Room,
            '$kolem_Fn_400'(Agent1, Time, Agent2, Fact)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5503).

 /*  [holds_at(inRoom(Agent1, Room), Time), holds_at(inRoom(Agent2, Room), Time), not(initiates(tell(Agent1, Agent2, Fact), know(Agent2, Fact), Time)), some(Room, '$kolem_Fn_400'(Agent1, Time, Agent2, Fact))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(listeningTo(Agent2, Agent1)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5503).
axiom(holds_at(neg(listeningTo(Agent2, Agent1)), Time),
   
    [ holds_at(inRoom(Agent1, Room), Time),
      holds_at(inRoom(Agent2, Room), Time),
      not(initiates(tell(Agent1, Agent2, Fact),
                    know(Agent2, Fact),
                    Time)),
      some(Room,
           '$kolem_Fn_400'(Agent1, Time, Agent2, Fact))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5508
%; Delta


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5510
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5511).
% Happens(Tell(Teacher,Student,Fact1),0).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          happens(tell(teacher, student, fact1), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5511).
axiom(happens(tell(teacher, student, fact1), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5512
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5513).
%; Psi
% [agent,room1,room2,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5515
% HoldsAt(InRoom(agent,room1),time) &
% HoldsAt(InRoom(agent,room2),time) ->
% room1 = room2.
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5517
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5515).

 /*  holds_at(inRoom(Agent, Room1), Time), holds_at(inRoom(Agent, Room2), Time) ->
       equals(Room1, Room2).
 */

 /*  not(holds_at(inRoom(Agent, Room1), Time)) :-
       holds_at(inRoom(Agent, Room2), Time),
       not(equals(Room1, Room2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5515).

 /*  [holds_at(inRoom(Agent, Room2), Time), not(equals(Room1, Room2))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(inRoom(Agent, Room1)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5515).
axiom(holds_at(neg(inRoom(Agent, Room1)), Time),
   
    [ holds_at(inRoom(Agent, Room2), Time),
      not(equals(Room1, Room2))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5515).

 /*  not(holds_at(inRoom(Agent, Room2), Time)) :-
       holds_at(inRoom(Agent, Room1), Time),
       not(equals(Room1, Room2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5515).

 /*  [holds_at(inRoom(Agent, Room1), Time), not(equals(Room1, Room2))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(inRoom(Agent, Room2)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5515).
axiom(holds_at(neg(inRoom(Agent, Room2)), Time),
   
    [ holds_at(inRoom(Agent, Room1), Time),
      not(equals(Room2, Room1))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5519
%; Gamma
% [agent,fact]
 % !HoldsAt(Know(agent,fact),0).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5521
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5522).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(know(Agent, Fact)), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5522).
axiom(holds_at(neg(know(Agent, Fact)), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5522
% [agent1,agent2]
 % HoldsAt(ListeningTo(agent1,agent2),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5522).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(listeningTo(Agent1, Agent2), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5522).
axiom(holds_at(listeningTo(Agent1, Agent2), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5523
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5524).
% [agent]
 % HoldsAt(InRoom(agent,Classroom),0).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(inRoom(Agent, classroom), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5524).
axiom(holds_at(inRoom(Agent, classroom), start),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5525
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5526).
% completion Happens
==> completion(happens).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5527
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5528).
% range time 0 1
==> range(time,0,1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5528
% range offset 1 1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5528).
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Exercises/MixingPaints.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5556
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5557).
% load foundations/Root.e
:- load_e('foundations/Root.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5557
% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5557).
:- load_e('foundations/EC.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5559
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5560).
% sort palette
==> sort(palette).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5560
% sort color
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5560).
==> sort(color).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5562
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5563).
% palette Palette1
==> t(palette,palette1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5563
% color Red, Yellow, Blue, Green
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5563).
==> t(color,red).
==> t(color,yellow).
==> t(color,blue).
==> t(color,green).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5565
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5566).
% event PlaceOnPalette(palette,color)
event(placeOnPalette(palette,color)).
==> mpred_prop(placeOnPalette(palette,color),event).
==> meta_argtypes(placeOnPalette(palette,color)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5566
% fluent OnPalette(palette,color)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5566).
fluent(onPalette(palette,color)).
==> mpred_prop(onPalette(palette,color),fluent).
==> meta_argtypes(onPalette(palette,color)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5568
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5569).
% [palette,color,time]
% !Happens(PlaceOnPalette(palette,Yellow),time) |
% !Happens(PlaceOnPalette(palette,Blue),time) ->
% Initiates(PlaceOnPalette(palette,color),OnPalette(palette,color),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5571
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5569).

 /*  [(not(happens(placeOnPalette(Palette, yellow), Time));not(happens(placeOnPalette(Palette, blue), Time)))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(placeOnPalette(Palette, Color),
                    onPalette(Palette, Color),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5569).
axiom(initiates(placeOnPalette(Palette, Color), onPalette(Palette, Color), Time),
   
    [  (not(happens(placeOnPalette(Palette, yellow), Time));not(happens(placeOnPalette(Palette, blue), Time)))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5573
% [palette,color1,color2,time]
% Happens(PlaceOnPalette(palette,Yellow),time) &
% color1 = Blue &
% color2 = Green ->
% Initiates(PlaceOnPalette(palette,color1),OnPalette(palette,color2),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5577
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5575).

 /*  [happens(placeOnPalette(Palette, yellow), Time), equals(Color1, blue), equals(Color2, green)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(placeOnPalette(Palette, Color1),
                    onPalette(Palette, Color2),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5575).
axiom(initiates(placeOnPalette(Palette, Color1), onPalette(Palette, Color2), Time),
   
    [ happens(placeOnPalette(Palette, yellow), Time),
      equals(Color1, blue),
      equals(Color2, green)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5579
% [palette,color1,color2,time]
% !(Happens(PlaceOnPalette(palette,Yellow),time) &
%   Happens(PlaceOnPalette(palette,Blue),time)) &
% HoldsAt(OnPalette(palette,color1),time) &
% color1 != color2 ->
% Terminates(PlaceOnPalette(palette,color2),OnPalette(palette,color1),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5584
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5581).

 /*  [(not(happens(placeOnPalette(Palette, yellow), Time));not(happens(placeOnPalette(Palette, blue), Time))), holds_at(onPalette(Palette, Color1), Time), diff(Color1, Color2)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(placeOnPalette(Palette, Color2),
                     onPalette(Palette, Color1),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5581).
axiom(terminates(placeOnPalette(Palette, Color2), onPalette(Palette, Color1), Time),
   
    [  (not(happens(placeOnPalette(Palette, yellow), Time));not(happens(placeOnPalette(Palette, blue), Time))),
      holds_at(onPalette(Palette, Color1), Time),
      diff(Color1, Color2)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5586
% [palette,color1,color2,time]
% Happens(PlaceOnPalette(palette,Yellow),time) &
% HoldsAt(OnPalette(palette,color2),time) &
% color1 = Blue &
% color2 != Green ->
% Terminates(PlaceOnPalette(palette,color1),OnPalette(palette,color2),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5591
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5588).

 /*  [happens(placeOnPalette(Palette, yellow), Time), holds_at(onPalette(Palette, Color2), Time), equals(Color1, blue), diff(Color2, green)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(placeOnPalette(Palette, Color1),
                     onPalette(Palette, Color2),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5588).
axiom(terminates(placeOnPalette(Palette, Color1), onPalette(Palette, Color2), Time),
   
    [ happens(placeOnPalette(Palette, yellow), Time),
      holds_at(onPalette(Palette, Color2), Time),
      equals(Color1, blue),
      diff(Color2, green)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5593
%; state constraint
% [palette,color1,color2,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5596
% HoldsAt(OnPalette(palette,color1),time) &
% HoldsAt(OnPalette(palette,color2),time) ->
% color1 = color2.
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5598
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5596).

 /*  holds_at(onPalette(Palette, Color1), Time), holds_at(onPalette(Palette, Color2), Time) ->
       equals(Color1, Color2).
 */

 /*  not(holds_at(onPalette(Palette, Color1), Time)) :-
       holds_at(onPalette(Palette, Color2), Time),
       not(equals(Color1, Color2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5596).

 /*  [holds_at(onPalette(Palette, Color2), Time), not(equals(Color1, Color2))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(onPalette(Palette, Color1)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5596).
axiom(holds_at(neg(onPalette(Palette, Color1)), Time),
   
    [ holds_at(onPalette(Palette, Color2), Time),
      not(equals(Color1, Color2))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5596).

 /*  not(holds_at(onPalette(Palette, Color2), Time)) :-
       holds_at(onPalette(Palette, Color1), Time),
       not(equals(Color1, Color2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5596).

 /*  [holds_at(onPalette(Palette, Color1), Time), not(equals(Color1, Color2))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(onPalette(Palette, Color2)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5596).
axiom(holds_at(neg(onPalette(Palette, Color2)), Time),
   
    [ holds_at(onPalette(Palette, Color1), Time),
      not(equals(Color2, Color1))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5600
%; (1) place green over red


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5601
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5602).
% HoldsAt(OnPalette(Palette1,Red),0).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(onPalette(palette1, red), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5602).
axiom(holds_at(onPalette(palette1, red), start),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5602
% Delta: 
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5602).
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5602
% Happens(PlaceOnPalette(Palette1,Green),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5602).

 /*  [axiom_uses(delta, Axiom_uses_Ret)] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          happens(placeOnPalette(palette1, green), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5602).
axiom(happens(placeOnPalette(palette1, green), start),
    [axiom_uses(delta, Axiom_uses_Ret)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5604
%; (2) place yellow+blue over green

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5605
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5606).
% Delta: 
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5605
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5606).
% Happens(PlaceOnPalette(Palette1,Yellow),1).

 /*  [axiom_uses(delta, Axiom_uses_Ret), b(start, Maptime), ignore(start+1==Maptime)] ->
       ta(Ta_Param,
          tvs1=[start+1],
          tvs2=[Maptime, start],
          happens(placeOnPalette(palette1, yellow), Maptime)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5606).
axiom(happens(placeOnPalette(palette1, yellow), Maptime),
    [axiom_uses(delta, Axiom_uses_Ret), b(start, Maptime)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5606
% Delta: 
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5606).
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5606
% Happens(PlaceOnPalette(Palette1,Blue),1).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5606).

 /*  [axiom_uses(delta, Axiom_uses_Ret), b(start, Maptime), ignore(start+1==Maptime)] ->
       ta(Ta_Param,
          tvs1=[start+1],
          tvs2=[Maptime, start],
          happens(placeOnPalette(palette1, blue), Maptime)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5606).
axiom(happens(placeOnPalette(palette1, blue), Maptime),
    [axiom_uses(delta, Axiom_uses_Ret), b(start, Maptime)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5608
%; (3) place yellow

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5609
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5610).
% Delta: 
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5609
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5610).
% Happens(PlaceOnPalette(Palette1,Yellow),2).

 /*  [axiom_uses(delta, Axiom_uses_Ret), b(start, Start2), toffset(start, 2, Start2), ignore(start+2==Start2)] ->
       ta(Ta_Param,
          tvs1=[start+2],
          tvs2=[Start2, start],
          happens(placeOnPalette(palette1, yellow), Start2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5610).
axiom(happens(placeOnPalette(palette1, yellow), Start2),
   
    [ axiom_uses(delta, Axiom_uses_Ret),
      b(start, Start2),
      toffset(start, 2, Start2)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5611
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5612).
%; (4) place blue

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5612
% Delta: 
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5612
% Happens(PlaceOnPalette(Palette1,Blue),3).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5612).

 /*  [axiom_uses(delta, Axiom_uses_Ret), b(start, Start3), toffset(start, 3, Start3), ignore(start+3==Start3)] ->
       ta(Ta_Param,
          tvs1=[start+3],
          tvs2=[Start3, start],
          happens(placeOnPalette(palette1, blue), Start3)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5612).
axiom(happens(placeOnPalette(palette1, blue), Start3),
   
    [ axiom_uses(delta, Axiom_uses_Ret),
      b(start, Start3),
      toffset(start, 3, Start3)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5614
%; (5) place green

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5615
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5616).
% Delta: 
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5615
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5616).
% Happens(PlaceOnPalette(Palette1,Yellow),4).

 /*  [axiom_uses(delta, Axiom_uses_Ret), b(start, Start4), toffset(start, 4, Start4), ignore(start+4==Start4)] ->
       ta(Ta_Param,
          tvs1=[start+4],
          tvs2=[Start4, start],
          happens(placeOnPalette(palette1, yellow), Start4)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5616).
axiom(happens(placeOnPalette(palette1, yellow), Start4),
   
    [ axiom_uses(delta, Axiom_uses_Ret),
      b(start, Start4),
      toffset(start, 4, Start4)
    ]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5616
% Delta: 
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5616).
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5616
% Happens(PlaceOnPalette(Palette1,Blue),4).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5616).

 /*  [axiom_uses(delta, Axiom_uses_Ret), b(start, Start4), toffset(start, 4, Start4), ignore(start+4==Start4)] ->
       ta(Ta_Param,
          tvs1=[start+4],
          tvs2=[Start4, start],
          happens(placeOnPalette(palette1, blue), Start4)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5616).
axiom(happens(placeOnPalette(palette1, blue), Start4),
   
    [ axiom_uses(delta, Axiom_uses_Ret),
      b(start, Start4),
      toffset(start, 4, Start4)
    ]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5618
% completion Delta Happens
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5618).
==> completion(delta).
==> completion(happens).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5620
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5621).
% range time 0 5
==> range(time,0,5).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5621
% range offset 1 1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5621).
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Exercises/SnoozeAlarm.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; Example: Alarm Clock with snooze alarm added
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5651
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5652).
% load foundations/Root.e
:- load_e('foundations/Root.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5652
% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5652).
:- load_e('foundations/EC.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5654
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5655).
% sort agent
==> sort(agent).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5655
% sort clock
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5655).
==> sort(clock).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5657
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5658).
% fluent Beeping(clock)
fluent(beeping(clock)).
==> mpred_prop(beeping(clock),fluent).
==> meta_argtypes(beeping(clock)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5658
% fluent AlarmTime(clock,time)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5658).
fluent(alarmTime(clock,time)).
==> mpred_prop(alarmTime(clock,time),fluent).
==> meta_argtypes(alarmTime(clock,time)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5659
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5660).
% fluent AlarmOn(clock)
fluent(alarmOn(clock)).
==> mpred_prop(alarmOn(clock),fluent).
==> meta_argtypes(alarmOn(clock)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5661
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5662).
% event SetAlarmTime(agent,clock,time)
event(setAlarmTime(agent,clock,time)).
==> mpred_prop(setAlarmTime(agent,clock,time),event).
==> meta_argtypes(setAlarmTime(agent,clock,time)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5662
% event StartBeeping(clock)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5662).
event(startBeeping(clock)).
==> mpred_prop(startBeeping(clock),event).
==> meta_argtypes(startBeeping(clock)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5663
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5664).
% event TurnOnAlarm(agent,clock)
event(turnOnAlarm(agent,clock)).
==> mpred_prop(turnOnAlarm(agent,clock),event).
==> meta_argtypes(turnOnAlarm(agent,clock)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5664
% event TurnOffAlarm(agent,clock)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5664).
event(turnOffAlarm(agent,clock)).
==> mpred_prop(turnOffAlarm(agent,clock),event).
==> meta_argtypes(turnOffAlarm(agent,clock)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5666
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5667).
% event PressSnooze(agent,clock)
event(pressSnooze(agent,clock)).
==> mpred_prop(pressSnooze(agent,clock),event).
==> meta_argtypes(pressSnooze(agent,clock)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5668
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5669).
% agent Nathan
==> t(agent,nathan).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5669
% clock Clock
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5669).
==> t(clock,clock).
%; Sigma
% [agent,clock,time1,time2,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5674
% HoldsAt(AlarmTime(clock,time1),time) &
% time1!=time2 ->
% Initiates(SetAlarmTime(agent,clock,time2),AlarmTime(clock,time2),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5676
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5674).

 /*  [holds_at(alarmTime(Clock, Time1), Time), diff(Time1, Time2)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(setAlarmTime(Agent, Clock, Time2),
                    alarmTime(Clock, Time2),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5674).
axiom(initiates(setAlarmTime(Agent, Clock, Time2), alarmTime(Clock, Time2), Time),
   
    [ holds_at(alarmTime(Clock, Time1), Time),
      diff(Time2, Time1)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5678
% [agent,clock,time1,time2,time]
% HoldsAt(AlarmTime(clock,time1),time) &
% time1!=time2 ->
% Terminates(SetAlarmTime(agent,clock,time2),AlarmTime(clock,time1),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5681
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5680).

 /*  [holds_at(alarmTime(Clock, Time1), Time), diff(Time1, Time2)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(setAlarmTime(Agent, Clock, Time2),
                     alarmTime(Clock, Time1),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5680).
axiom(terminates(setAlarmTime(Agent, Clock, Time2), alarmTime(Clock, Time1), Time),
   
    [ holds_at(alarmTime(Clock, Time1), Time),
      diff(Time1, Time2)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5683
% [agent,clock,time]
% Initiates(TurnOnAlarm(agent,clock),AlarmOn(clock),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5685).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(turnOnAlarm(Agent, Clock),
                    alarmOn(Clock),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5685).
axiom(initiates(turnOnAlarm(Agent, Clock), alarmOn(Clock), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5686
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5687).
% [agent,clock,time]
% Terminates(TurnOffAlarm(agent,clock),AlarmOn(clock),time).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(turnOffAlarm(Agent, Clock),
                     alarmOn(Clock),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5687).
axiom(terminates(turnOffAlarm(Agent, Clock), alarmOn(Clock), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5689
% [clock,time]
% Initiates(StartBeeping(clock),Beeping(clock),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5691).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(startBeeping(Clock), beeping(Clock), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5691).
axiom(initiates(startBeeping(Clock), beeping(Clock), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5692
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5693).
% [agent,clock,time]
% Terminates(TurnOffAlarm(agent,clock),Beeping(clock),time).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(turnOffAlarm(Agent, Clock),
                     beeping(Clock),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5693).
axiom(terminates(turnOffAlarm(Agent, Clock), beeping(Clock), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5695
%; added axioms:
% [agent,clock,time2,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5698
% HoldsAt(Beeping(clock),time) &
% time2 = time+9 ->
% Initiates(PressSnooze(agent,clock),AlarmTime(clock,time2),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5700
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5698).

 /*  [ignore(Time+9==B_Ret), b(Time, B_Ret), holds_at(beeping(Clock), Time), equals(Time2, B_Ret)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time, B_Ret],
          initiates(pressSnooze(Agent, Clock),
                    alarmTime(Clock, Time2),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5698).
axiom(initiates(pressSnooze(Agent, Clock), alarmTime(Clock, Time2), Time),
   
    [ b(Time, B_Ret),
      holds_at(beeping(Clock), Time),
      equals(Time2, B_Ret)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5702
% [agent,clock,time1,time2,time]
% HoldsAt(Beeping(clock),time) &
% HoldsAt(AlarmTime(clock,time1),time) &
% time2 = time+9 &
% time1 != time2 ->
% Terminates(PressSnooze(agent,clock),AlarmTime(clock,time1),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5707
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5704).

 /*  [ignore(Time+9==B_Ret), b(Time, B_Ret), holds_at(beeping(Clock), Time), holds_at(alarmTime(Clock, Time1), Time), equals(Time2, B_Ret), diff(Time1, Time2)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time, B_Ret],
          terminates(pressSnooze(Agent, Clock),
                     alarmTime(Clock, Time1),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5704).
axiom(terminates(pressSnooze(Agent, Clock), alarmTime(Clock, Time1), Time),
   
    [ b(Time, B_Ret),
      holds_at(beeping(Clock), Time),
      holds_at(alarmTime(Clock, Time1), Time),
      equals(Time2, B_Ret),
      diff(Time1, Time2)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5709
% [agent,clock,time]
% Terminates(PressSnooze(agent,clock),Beeping(clock),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5711).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(pressSnooze(Agent, Clock),
                     beeping(Clock),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5711).
axiom(terminates(pressSnooze(Agent, Clock), beeping(Clock), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5712
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5713).
%; Delta
% [clock,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5715
% HoldsAt(AlarmTime(clock,time),time) &
% HoldsAt(AlarmOn(clock),time) ->
% Happens(StartBeeping(clock),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5717
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5715).

 /*  holds_at(alarmTime(Clock, Time), Time), holds_at(alarmOn(Clock), Time) ->
       happens(startBeeping(Clock), Time).
 */

 /*  happens(startBeeping(Clock), Time) :-
       holds_at(alarmTime(Clock, Time), Time),
       holds_at(alarmOn(Clock), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5715).

 /*  [holds_at(alarmTime(Clock, Time), Time), holds_at(alarmOn(Clock), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(startBeeping(Clock), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5715).
axiom(happens(startBeeping(Clock), Time),
   
    [ holds_at(alarmTime(Clock, Time), Time),
      holds_at(alarmOn(Clock), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5715).

 /*  not(holds_at(alarmTime(Clock, Time), Time)) :-
       holds_at(alarmOn(Clock), Time),
       not(happens(startBeeping(Clock), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5715).

 /*  [holds_at(alarmOn(Clock), Time), not(happens(startBeeping(Clock), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(alarmTime(Clock, Time)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5715).
axiom(holds_at(neg(alarmTime(Clock, Time)), Time),
   
    [ holds_at(alarmOn(Clock), Time),
      not(happens(startBeeping(Clock), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5715).

 /*  not(holds_at(alarmOn(Clock), Time)) :-
       holds_at(alarmTime(Clock, Time), Time),
       not(happens(startBeeping(Clock), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5715).

 /*  [holds_at(alarmTime(Clock, Time), Time), not(happens(startBeeping(Clock), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(alarmOn(Clock)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5715).
axiom(holds_at(neg(alarmOn(Clock)), Time),
   
    [ holds_at(alarmTime(Clock, Time), Time),
      not(happens(startBeeping(Clock), Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5719
% Happens(SetAlarmTime(Nathan,Clock,2),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5719).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          happens(setAlarmTime(nathan, clock, 2), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5719).
axiom(happens(setAlarmTime(nathan, clock, 2), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5720
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5721).
% Happens(TurnOnAlarm(Nathan,Clock),1).

 /*  [b(start, Maptime), ignore(start+1==Maptime)] ->
       ta(Ta_Param,
          tvs1=[start+1],
          tvs2=[Maptime, start],
          happens(turnOnAlarm(nathan, clock), Maptime)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5721).
axiom(happens(turnOnAlarm(nathan, clock), Maptime),
    [b(start, Maptime)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5721
% Happens(PressSnooze(Nathan,Clock),4).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5721).

 /*  [b(start, Start4), toffset(start, 4, Start4), ignore(start+4==Start4)] ->
       ta(Ta_Param,
          tvs1=[start+4],
          tvs2=[Start4, start],
          happens(pressSnooze(nathan, clock), Start4)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5721).
axiom(happens(pressSnooze(nathan, clock), Start4),
    [b(start, Start4), toffset(start, 4, Start4)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5723
%; Psi
% [clock,time1,time2,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5726
% HoldsAt(AlarmTime(clock,time1),time) &
% HoldsAt(AlarmTime(clock,time2),time) ->
% time1=time2.
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5728
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5726).

 /*  holds_at(alarmTime(Clock, Time1), Time), holds_at(alarmTime(Clock, Time2), Time) ->
       equals(Time1, Time2).
 */

 /*  not(holds_at(alarmTime(Clock, Time1), Time)) :-
       holds_at(alarmTime(Clock, Time2), Time),
       not(equals(Time1, Time2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5726).

 /*  [holds_at(alarmTime(Clock, Time2), Time), not(equals(Time1, Time2))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(alarmTime(Clock, Time1)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5726).
axiom(holds_at(neg(alarmTime(Clock, Time1)), Time),
   
    [ holds_at(alarmTime(Clock, Time2), Time),
      not(equals(Time1, Time2))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5726).

 /*  not(holds_at(alarmTime(Clock, Time2), Time)) :-
       holds_at(alarmTime(Clock, Time1), Time),
       not(equals(Time1, Time2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5726).

 /*  [holds_at(alarmTime(Clock, Time1), Time), not(equals(Time1, Time2))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(alarmTime(Clock, Time2)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5726).
axiom(holds_at(neg(alarmTime(Clock, Time2)), Time),
   
    [ holds_at(alarmTime(Clock, Time1), Time),
      not(equals(Time2, Time1))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5730
%; Gamma


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5732
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5733).
% !HoldsAt(AlarmOn(Clock),0).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(alarmOn(clock)), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5733).
axiom(holds_at(neg(alarmOn(clock)), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5733
% !HoldsAt(Beeping(Clock),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5733).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(beeping(clock)), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5733).
axiom(holds_at(neg(beeping(clock)), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5734
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5735).
% HoldsAt(AlarmTime(Clock,3),0).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(alarmTime(clock, 3), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5735).
axiom(holds_at(alarmTime(clock, 3), start),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5736
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5737).
% completion Happens
==> completion(happens).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5738
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5739).
% range time 0 15
==> range(time,0,15).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5739
% range offset 1 1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5739).
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Exercises/TelephoneBugs.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; Example: Telephone
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5769
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5770).
% load foundations/Root.e
:- load_e('foundations/Root.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5770
% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5770).
:- load_e('foundations/EC.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5772
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5773).
% sort agent
==> sort(agent).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5773
% sort phone
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5773).
==> sort(phone).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5775
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5776).
% agent Agent1, Agent2
==> t(agent,agent1).
==> t(agent,agent2).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5776
% phone Phone1, Phone2
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5776).
==> t(phone,phone1).
==> t(phone,phone2).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5778
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5779).
% fluent Ringing(phone,phone)
fluent(ringing(phone,phone)).
==> mpred_prop(ringing(phone,phone),fluent).
==> meta_argtypes(ringing(phone,phone)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5779
% fluent DialTone(phone)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5779).
fluent(dialTone(phone)).
==> mpred_prop(dialTone(phone),fluent).
==> meta_argtypes(dialTone(phone)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5780
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5781).
% fluent BusySignal(phone)
fluent(busySignal(phone)).
==> mpred_prop(busySignal(phone),fluent).
==> meta_argtypes(busySignal(phone)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5781
% fluent Idle(phone)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5781).
fluent(idle(phone)).
==> mpred_prop(idle(phone),fluent).
==> meta_argtypes(idle(phone)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5782
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5783).
% fluent Connected(phone,phone)
fluent(connected(phone,phone)).
==> mpred_prop(connected(phone,phone),fluent).
==> meta_argtypes(connected(phone,phone)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5783
% fluent Disconnected(phone)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5783).
fluent(disconnected(phone)).
==> mpred_prop(disconnected(phone),fluent).
==> meta_argtypes(disconnected(phone)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5785
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5786).
% event PickUp(agent,phone)
event(pickUp(agent,phone)).
==> mpred_prop(pickUp(agent,phone),event).
==> meta_argtypes(pickUp(agent,phone)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5786
% event SetDown(agent,phone)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5786).
event(setDown(agent,phone)).
==> mpred_prop(setDown(agent,phone),event).
==> meta_argtypes(setDown(agent,phone)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5787
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5788).
% event Dial(agent,phone,phone)
event(dial(agent,phone,phone)).
==> mpred_prop(dial(agent,phone,phone),event).
==> meta_argtypes(dial(agent,phone,phone)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5789
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5790).
%; Sigma
% [agent,phone,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5792
% HoldsAt(Idle(phone),time) ->
% Initiates(PickUp(agent,phone),DialTone(phone),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5792).

 /*  [holds_at(idle(Phone), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(pickUp(Agent, Phone),
                    dialTone(Phone),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5792).
axiom(initiates(pickUp(Agent, Phone), dialTone(Phone), Time),
    [holds_at(idle(Phone), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5795
% [agent,phone,time]
% HoldsAt(Idle(phone),time) ->
% Terminates(PickUp(agent,phone),Idle(phone),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5797

 /*  [holds_at(idle(Phone), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(pickUp(Agent, Phone),
                     idle(Phone),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5797).
axiom(terminates(pickUp(Agent, Phone), idle(Phone), Time),
    [holds_at(idle(Phone), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5799
% [agent,phone,time]
% HoldsAt(DialTone(phone),time) ->
% Initiates(SetDown(agent,phone),Idle(phone),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5801

 /*  [holds_at(dialTone(Phone), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(setDown(Agent, Phone),
                    idle(Phone),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5801).
axiom(initiates(setDown(Agent, Phone), idle(Phone), Time),
    [holds_at(dialTone(Phone), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5803
% [agent,phone,time]
% HoldsAt(DialTone(phone),time) ->
% Terminates(SetDown(agent,phone),DialTone(phone),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5805

 /*  [holds_at(dialTone(Phone), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(setDown(Agent, Phone),
                     dialTone(Phone),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5805).
axiom(terminates(setDown(Agent, Phone), dialTone(Phone), Time),
    [holds_at(dialTone(Phone), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5807
% [agent,phone1,phone2,time]
% HoldsAt(DialTone(phone1),time) &
% HoldsAt(Idle(phone2),time) ->
% Initiates(Dial(agent,phone1,phone2),Ringing(phone1,phone2),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5810
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5809).

 /*  [holds_at(dialTone(Phone1), Time), holds_at(idle(Phone2), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(dial(Agent, Phone1, Phone2),
                    ringing(Phone1, Phone2),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5809).
axiom(initiates(dial(Agent, Phone1, Phone2), ringing(Phone1, Phone2), Time),
   
    [ holds_at(dialTone(Phone1), Time),
      holds_at(idle(Phone2), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5812
% [agent,phone1,phone2,time]
% HoldsAt(DialTone(phone1),time) &
% HoldsAt(Idle(phone2),time) ->
% Terminates(Dial(agent,phone1,phone2),DialTone(phone1),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5815
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5814).

 /*  [holds_at(dialTone(Phone1), Time), holds_at(idle(Phone2), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(dial(Agent, Phone1, Phone2),
                     dialTone(Phone1),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5814).
axiom(terminates(dial(Agent, Phone1, Phone2), dialTone(Phone1), Time),
   
    [ holds_at(dialTone(Phone1), Time),
      holds_at(idle(Phone2), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5817
% [agent,phone1,phone2,time]
% HoldsAt(DialTone(phone1),time) &
% HoldsAt(Idle(phone2),time) ->
% Terminates(Dial(agent,phone1,phone2),Idle(phone2),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5820
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5819).

 /*  [holds_at(dialTone(Phone1), Time), holds_at(idle(Phone2), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(dial(Agent, Phone1, Phone2),
                     idle(Phone2),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5819).
axiom(terminates(dial(Agent, Phone1, Phone2), idle(Phone2), Time),
   
    [ holds_at(dialTone(Phone1), Time),
      holds_at(idle(Phone2), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5822
% [agent,phone1,phone2,time]
% HoldsAt(DialTone(phone1),time) &
% !HoldsAt(Idle(phone2),time) ->
% Initiates(Dial(agent,phone1,phone2),BusySignal(phone1),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5825
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5824).

 /*  [holds_at(dialTone(Phone1), Time), holds_at(neg(idle(Phone2)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(dial(Agent, Phone1, Phone2),
                    busySignal(Phone1),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5824).
axiom(initiates(dial(Agent, Phone1, Phone2), busySignal(Phone1), Time),
   
    [ holds_at(dialTone(Phone1), Time),
      holds_at(neg(idle(Phone2)), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5827
% [agent,phone1,phone2,time]
% HoldsAt(DialTone(phone1),time) &
% !HoldsAt(Idle(phone2),time) ->
% Terminates(Dial(agent,phone1,phone2),DialTone(phone1),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5830
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5829).

 /*  [holds_at(dialTone(Phone1), Time), holds_at(neg(idle(Phone2)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(dial(Agent, Phone1, Phone2),
                     dialTone(Phone1),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5829).
axiom(terminates(dial(Agent, Phone1, Phone2), dialTone(Phone1), Time),
   
    [ holds_at(dialTone(Phone1), Time),
      holds_at(neg(idle(Phone2)), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5832
% [agent,phone,time]
% HoldsAt(BusySignal(phone),time) ->
% Initiates(SetDown(agent,phone),Idle(phone),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5834

 /*  [holds_at(busySignal(Phone), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(setDown(Agent, Phone),
                    idle(Phone),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5834).
axiom(initiates(setDown(Agent, Phone), idle(Phone), Time),
    [holds_at(busySignal(Phone), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5836
% [agent,phone,time]
% HoldsAt(BusySignal(phone),time) ->
% Terminates(SetDown(agent,phone),BusySignal(phone),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5838

 /*  [holds_at(busySignal(Phone), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(setDown(Agent, Phone),
                     busySignal(Phone),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5838).
axiom(terminates(setDown(Agent, Phone), busySignal(Phone), Time),
    [holds_at(busySignal(Phone), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5840
% [agent,phone1,phone2,time]
% HoldsAt(Ringing(phone1,phone2),time) ->
% Initiates(SetDown(agent,phone1),Idle(phone1),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5842

 /*  [holds_at(ringing(Phone1, Phone2), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(setDown(Agent, Phone1),
                    idle(Phone1),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5842).
axiom(initiates(setDown(Agent, Phone1), idle(Phone1), Time),
    [holds_at(ringing(Phone1, Phone2), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5844
% [agent,phone1,phone2,time]
% HoldsAt(Ringing(phone1,phone2),time) ->
% Initiates(SetDown(agent,phone1),Idle(phone2),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5846

 /*  [holds_at(ringing(Phone1, Phone2), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(setDown(Agent, Phone1),
                    idle(Phone2),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5846).
axiom(initiates(setDown(Agent, Phone1), idle(Phone2), Time),
    [holds_at(ringing(Phone1, Phone2), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5848
% [agent,phone1,phone2,time]
% HoldsAt(Ringing(phone1,phone2),time) ->
% Terminates(SetDown(agent,phone1),Ringing(phone1,phone2),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5850

 /*  [holds_at(ringing(Phone1, Phone2), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(setDown(Agent, Phone1),
                     ringing(Phone1, Phone2),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5850).
axiom(terminates(setDown(Agent, Phone1), ringing(Phone1, Phone2), Time),
    [holds_at(ringing(Phone1, Phone2), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5852
% [agent,phone1,phone2,time]
% HoldsAt(Ringing(phone1,phone2),time) ->
% Initiates(PickUp(agent,phone2),Connected(phone1,phone2),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5854

 /*  [holds_at(ringing(Phone1, Phone2), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(pickUp(Agent, Phone2),
                    connected(Phone1, Phone2),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5854).
axiom(initiates(pickUp(Agent, Phone2), connected(Phone1, Phone2), Time),
    [holds_at(ringing(Phone1, Phone2), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5856
% [agent,phone1,phone2,time]
% HoldsAt(Ringing(phone1,phone2),time) ->
% Terminates(PickUp(agent,phone2),Ringing(phone1,phone2),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5858

 /*  [holds_at(ringing(Phone1, Phone2), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(pickUp(Agent, Phone2),
                     ringing(Phone1, Phone2),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5858).
axiom(terminates(pickUp(Agent, Phone2), ringing(Phone1, Phone2), Time),
    [holds_at(ringing(Phone1, Phone2), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5860
% [agent,phone1,phone2,time]
% HoldsAt(Connected(phone1,phone2),time) ->
% Initiates(SetDown(agent,phone1),Idle(phone1),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5862

 /*  [holds_at(connected(Phone1, Phone2), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(setDown(Agent, Phone1),
                    idle(Phone1),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5862).
axiom(initiates(setDown(Agent, Phone1), idle(Phone1), Time),
    [holds_at(connected(Phone1, Phone2), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5864
% [agent,phone1,phone2,time]
% HoldsAt(Connected(phone1,phone2),time) ->
% Initiates(SetDown(agent,phone1),Disconnected(phone2),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5866

 /*  [holds_at(connected(Phone1, Phone2), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(setDown(Agent, Phone1),
                    disconnected(Phone2),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5866).
axiom(initiates(setDown(Agent, Phone1), disconnected(Phone2), Time),
    [holds_at(connected(Phone1, Phone2), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5868
% [agent,phone1,phone2,time]
% HoldsAt(Connected(phone1,phone2),time) ->
% Terminates(SetDown(agent,phone1),Connected(phone1,phone2),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5870

 /*  [holds_at(connected(Phone1, Phone2), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(setDown(Agent, Phone1),
                     connected(Phone1, Phone2),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5870).
axiom(terminates(setDown(Agent, Phone1), connected(Phone1, Phone2), Time),
    [holds_at(connected(Phone1, Phone2), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5872
% [agent,phone1,phone2,time]
% HoldsAt(Connected(phone1,phone2),time) ->
% Initiates(SetDown(agent,phone2),Idle(phone2),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5874

 /*  [holds_at(connected(Phone1, Phone2), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(setDown(Agent, Phone2),
                    idle(Phone2),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5874).
axiom(initiates(setDown(Agent, Phone2), idle(Phone2), Time),
    [holds_at(connected(Phone1, Phone2), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5876
% [agent,phone1,phone2,time]
% HoldsAt(Connected(phone1,phone2),time) ->
% Initiates(SetDown(agent,phone2),Disconnected(phone1),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5878

 /*  [holds_at(connected(Phone1, Phone2), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(setDown(Agent, Phone2),
                    disconnected(Phone1),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5878).
axiom(initiates(setDown(Agent, Phone2), disconnected(Phone1), Time),
    [holds_at(connected(Phone1, Phone2), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5880
% [agent,phone1,phone2,time]
% HoldsAt(Connected(phone1,phone2),time) ->
% Terminates(SetDown(agent,phone2),Connected(phone1,phone2),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5882

 /*  [holds_at(connected(Phone1, Phone2), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(setDown(Agent, Phone2),
                     connected(Phone1, Phone2),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5882).
axiom(terminates(setDown(Agent, Phone2), connected(Phone1, Phone2), Time),
    [holds_at(connected(Phone1, Phone2), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5884
% [agent,phone,time]
% HoldsAt(Disconnected(phone),time) ->
% Initiates(SetDown(agent,phone),Idle(phone),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5886

 /*  [holds_at(disconnected(Phone), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(setDown(Agent, Phone),
                    idle(Phone),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5886).
axiom(initiates(setDown(Agent, Phone), idle(Phone), Time),
    [holds_at(disconnected(Phone), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5888
% [agent,phone,time]
% HoldsAt(Disconnected(phone),time) ->
% Terminates(SetDown(agent,phone),Disconnected(phone),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5890

 /*  [holds_at(disconnected(Phone), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(setDown(Agent, Phone),
                     disconnected(Phone),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5890).
axiom(terminates(setDown(Agent, Phone), disconnected(Phone), Time),
    [holds_at(disconnected(Phone), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5892
%; Delta
%; (1) Two agents dial each other simultaneously without first
%; picking up phone.


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5896
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5897).
% Happens(Dial(Agent1,Phone1,Phone2),0).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          happens(dial(agent1, phone1, phone2), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5897).
axiom(happens(dial(agent1, phone1, phone2), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5897
% Happens(Dial(Agent2,Phone2,Phone1),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5897).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          happens(dial(agent2, phone2, phone1), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5897).
axiom(happens(dial(agent2, phone2, phone1), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5899
%; (2) Two agents dial each other simultaneously.


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5900
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5901).
% Happens(PickUp(Agent1,Phone1),1).

 /*  [b(start, Maptime), ignore(start+1==Maptime)] ->
       ta(Ta_Param,
          tvs1=[start+1],
          tvs2=[Maptime, start],
          happens(pickUp(agent1, phone1), Maptime)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5901).
axiom(happens(pickUp(agent1, phone1), Maptime),
    [b(start, Maptime)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5901
% Happens(PickUp(Agent2,Phone2),1).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5901).

 /*  [b(start, Maptime), ignore(start+1==Maptime)] ->
       ta(Ta_Param,
          tvs1=[start+1],
          tvs2=[Maptime, start],
          happens(pickUp(agent2, phone2), Maptime)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5901).
axiom(happens(pickUp(agent2, phone2), Maptime),
    [b(start, Maptime)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5902
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5903).
% Happens(Dial(Agent1,Phone1,Phone2),2).

 /*  [b(start, Start2), toffset(start, 2, Start2), ignore(start+2==Start2)] ->
       ta(Ta_Param,
          tvs1=[start+2],
          tvs2=[Start2, start],
          happens(dial(agent1, phone1, phone2), Start2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5903).
axiom(happens(dial(agent1, phone1, phone2), Start2),
    [b(start, Start2), toffset(start, 2, Start2)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5903
% Happens(Dial(Agent2,Phone2,Phone1),2).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5903).

 /*  [b(start, Start2), toffset(start, 2, Start2), ignore(start+2==Start2)] ->
       ta(Ta_Param,
          tvs1=[start+2],
          tvs2=[Start2, start],
          happens(dial(agent2, phone2, phone1), Start2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5903).
axiom(happens(dial(agent2, phone2, phone1), Start2),
    [b(start, Start2), toffset(start, 2, Start2)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5904
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5905).
% Happens(SetDown(Agent1,Phone1),3).

 /*  [b(start, Start3), toffset(start, 3, Start3), ignore(start+3==Start3)] ->
       ta(Ta_Param,
          tvs1=[start+3],
          tvs2=[Start3, start],
          happens(setDown(agent1, phone1), Start3)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5905).
axiom(happens(setDown(agent1, phone1), Start3),
    [b(start, Start3), toffset(start, 3, Start3)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5905
% Happens(SetDown(Agent2,Phone2),3).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5905).

 /*  [b(start, Start3), toffset(start, 3, Start3), ignore(start+3==Start3)] ->
       ta(Ta_Param,
          tvs1=[start+3],
          tvs2=[Start3, start],
          happens(setDown(agent2, phone2), Start3)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5905).
axiom(happens(setDown(agent2, phone2), Start3),
    [b(start, Start3), toffset(start, 3, Start3)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5907
%; (3) One agent dials another agent just as the other
%; agent picks up the phone.


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5909
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5910).
% Happens(PickUp(Agent1,Phone1),4).

 /*  [b(start, Start4), toffset(start, 4, Start4), ignore(start+4==Start4)] ->
       ta(Ta_Param,
          tvs1=[start+4],
          tvs2=[Start4, start],
          happens(pickUp(agent1, phone1), Start4)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5910).
axiom(happens(pickUp(agent1, phone1), Start4),
    [b(start, Start4), toffset(start, 4, Start4)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5910
% Happens(Dial(Agent1,Phone1,Phone2),5).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5910).

 /*  [b(start, Start5), toffset(start, 5, Start5), ignore(start+5==Start5)] ->
       ta(Ta_Param,
          tvs1=[start+5],
          tvs2=[Start5, start],
          happens(dial(agent1, phone1, phone2), Start5)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5910).
axiom(happens(dial(agent1, phone1, phone2), Start5),
    [b(start, Start5), toffset(start, 5, Start5)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5911
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5912).
% Happens(PickUp(Agent2,Phone2),5).

 /*  [b(start, Start5), toffset(start, 5, Start5), ignore(start+5==Start5)] ->
       ta(Ta_Param,
          tvs1=[start+5],
          tvs2=[Start5, start],
          happens(pickUp(agent2, phone2), Start5)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5912).
axiom(happens(pickUp(agent2, phone2), Start5),
    [b(start, Start5), toffset(start, 5, Start5)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5913
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5914).
%; Psi
% [phone,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5916
% !HoldsAt(Ringing(phone,phone),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5916).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(ringing(Phone, Phone)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5916).
axiom(holds_at(neg(ringing(Phone, Phone)), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5918
% [phone1,phone2,time]
% HoldsAt(Ringing(phone1,phone2),time) &
% phone1!=phone2 ->
% !HoldsAt(Ringing(phone2,phone1),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5921
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5920).

 /*  holds_at(ringing(Phone1, Phone2), Time), diff(Phone1, Phone2) ->
       holds_at(neg(ringing(Phone2, Phone1)), Time).
 */

 /*  holds_at(neg(ringing(Phone2, Phone1)), Time) :-
       holds_at(ringing(Phone1, Phone2), Time),
       diff(Phone1, Phone2).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5920).

 /*  [holds_at(ringing(Phone1, Phone2), Time), diff(Phone1, Phone2)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(ringing(Phone2, Phone1)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5920).
axiom(holds_at(neg(ringing(Phone2, Phone1)), Time),
   
    [ holds_at(ringing(Phone1, Phone2), Time),
      diff(Phone1, Phone2)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5920).

 /*  not(holds_at(ringing(Phone1, Phone2), Time)) :-
       diff(Phone1, Phone2),
       not(holds_at(neg(ringing(Phone2, Phone1)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5920).

 /*  [diff(Phone1, Phone2), holds_at(ringing(Phone2, Phone1), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(ringing(Phone1, Phone2)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5920).
axiom(holds_at(neg(ringing(Phone1, Phone2)), Time),
   
    [ diff(Phone1, Phone2),
      holds_at(ringing(Phone2, Phone1), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5923
% [phone,time]
% !HoldsAt(Connected(phone,phone),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5925).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(connected(Phone, Phone)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5925).
axiom(holds_at(neg(connected(Phone, Phone)), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5926
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5927).
% [phone1,phone2,time]
% HoldsAt(Connected(phone1,phone2),time) &
% phone1!=phone2 ->
% !HoldsAt(Connected(phone2,phone1),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5929
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5927).

 /*  holds_at(connected(Phone1, Phone2), Time), diff(Phone1, Phone2) ->
       holds_at(neg(connected(Phone2, Phone1)), Time).
 */

 /*  holds_at(neg(connected(Phone2, Phone1)), Time) :-
       holds_at(connected(Phone1, Phone2), Time),
       diff(Phone1, Phone2).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5927).

 /*  [holds_at(connected(Phone1, Phone2), Time), diff(Phone1, Phone2)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(connected(Phone2, Phone1)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5927).
axiom(holds_at(neg(connected(Phone2, Phone1)), Time),
   
    [ holds_at(connected(Phone1, Phone2), Time),
      diff(Phone1, Phone2)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5927).

 /*  not(holds_at(connected(Phone1, Phone2), Time)) :-
       diff(Phone1, Phone2),
       not(holds_at(neg(connected(Phone2, Phone1)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5927).

 /*  [diff(Phone1, Phone2), holds_at(connected(Phone2, Phone1), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(connected(Phone1, Phone2)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5927).
axiom(holds_at(neg(connected(Phone1, Phone2)), Time),
   
    [ diff(Phone1, Phone2),
      holds_at(connected(Phone2, Phone1), Time)
    ]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5931
% mutex Idle, DialTone, BusySignal, Disconnected
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5931).

 /*  fix_axiom_head(Time) ->
       [mutex(idle), ->, holds_at(mutex(idle), Time)].
 */

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(mutex(idle), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5931).
axiom(holds_at(mutex(idle), Time),
    []).

 /*  fix_axiom_head(Time1) ->
       [mutex(dialTone), ->, holds_at(mutex(dialTone), Time1)].
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5931).

 /*  [] ->
       ta(Time1,
          tvs1=[Time1],
          tvs2=[Time1],
          holds_at(mutex(dialTone), Time1)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5931).
axiom(holds_at(mutex(dialTone), Time1),
    []).

 /*  fix_axiom_head(Time2) ->
       [mutex(busySignal), ->, holds_at(mutex(busySignal), Time2)].
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5931).

 /*  [] ->
       ta(Time2,
          tvs1=[Time2],
          tvs2=[Time2],
          holds_at(mutex(busySignal), Time2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5931).
axiom(holds_at(mutex(busySignal), Time2),
    []).

 /*  fix_axiom_head(Time3) ->
       [mutex(disconnected), ->, holds_at(mutex(disconnected), Time3)].
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5931).

 /*  [] ->
       ta(Time3,
          tvs1=[Time3],
          tvs2=[Time3],
          holds_at(mutex(disconnected), Time3)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5931).
axiom(holds_at(mutex(disconnected), Time3),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5933
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5934).
% [phone1,phone2,time]
% HoldsAt(Idle(phone1),time) ->
% !HoldsAt(Ringing(phone1,phone2),time) &
% !HoldsAt(Connected(phone1,phone2),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5936
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5934).

 /*  holds_at(idle(Phone1), Time) ->
       holds_at(neg(ringing(Phone1, Phone2)), Time),
       holds_at(neg(connected(Phone1, Phone2)), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5934).

 /*  not(holds_at(idle(Phone1), Time)) :-
       (   not(holds_at(neg(ringing(Phone1, Phone2)), Time))
       ;   not(holds_at(neg(connected(Phone1, Phone2)), Time))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5934).

 /*  [(holds_at(ringing(Phone1, Phone2), Time);holds_at(connected(Phone1, Phone2), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(idle(Phone1)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5934).
axiom(holds_at(neg(idle(Phone1)), Time),
   
    [  (holds_at(ringing(Phone1, Phone2), Time);holds_at(connected(Phone1, Phone2), Time))
    ]).

 /*  holds_at(neg(ringing(Phone1, Phone2)), Time) :-
       holds_at(idle(Phone1), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5934).

 /*  [holds_at(idle(Phone1), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(ringing(Phone1, Phone2)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5934).
axiom(holds_at(neg(ringing(Phone1, Phone2)), Time),
    [holds_at(idle(Phone1), Time)]).

 /*  holds_at(neg(connected(Phone1, Phone2)), Time) :-
       holds_at(idle(Phone1), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5934).

 /*  [holds_at(idle(Phone1), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(connected(Phone1, Phone2)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5934).
axiom(holds_at(neg(connected(Phone1, Phone2)), Time),
    [holds_at(idle(Phone1), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5938
%; contradicts (3) above:
%;[phone1,phone2,time]
%;HoldsAt(DialTone(phone2),time) ->
%;!HoldsAt(Ringing(phone1,phone2),time) &
%;!HoldsAt(Connected(phone1,phone2),time).
%; etc.
%; Gamma
% [phone]
 
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5948
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5949).
% HoldsAt(Idle(phone),0).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(idle(Phone), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5949).
axiom(holds_at(idle(Phone), start),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5950
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5951).
% completion Happens
==> completion(happens).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5952
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5953).
% range time 0 6
==> range(time,0,6).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5953
% range offset 1 1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5953).
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter11/HungryCat.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @inproceedings{WinikoffEtAl:2002,
%;   author = "Michael Winikoff and Lin Padgham and James Harland and John Thangarajah",
%;   year = "2002",
%;   title = "Declarative \& procedural goals in intelligent agent systems",
%;   editor = "Dieter Fensel and Fausto Giunchiglia and Deborah McGuinness and Mary-Anne Williams",
%;   booktitle = "\uppercase{P}roceedings of the \uppercase{E}ighth \uppercase{I}nternational \uppercase{C}onference on \uppercase{P}rinciples of \uppercase{K}nowledge \uppercase{R}epresentation and \uppercase{R}easoning",
%;   pages = "470--481",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann",
%; }
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5992
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5993).
% load foundations/Root.e
:- load_e('foundations/Root.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5993
% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5993).
:- load_e('foundations/EC.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5995
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5996).
% sort object
==> sort(object).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5996
% sort agent: object
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5996).
==> subsort(agent,object).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5997
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5998).
% sort food: object
==> subsort(food,object).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5998
% sort surface
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',5998).
==> sort(surface).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:5999
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6000).
% sort plan
==> sort(plan).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6001
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6002).
% reified sort belief
reified_sort(belief).
==> mpred_prop(belief,reified_sort).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6003
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6004).
% agent Cat
==> t(agent,cat).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6004
% surface Floor, Chair, Shelf, Table
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6004).
==> t(surface,floor).
==> t(surface,chair).
==> t(surface,shelf).
==> t(surface,table).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6005
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6006).
% food Food1, Food2
==> t(food,food1).
==> t(food,food2).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6006
% plan P1, P1a, P1b, P2, P2a
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6006).
==> t(plan,p1).
==> t(plan,p1a).
==> t(plan,p1b).
==> t(plan,p2).
==> t(plan,p2a).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6008
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6009).
% predicate SelectedPlan(agent,belief,plan,time)
predicate(selectedPlan(agent,belief,plan,time)).
==> mpred_prop(selectedPlan(agent,belief,plan,time),predicate).
==> meta_argtypes(selectedPlan(agent,belief,plan,time)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6009
% predicate SoundPlan(agent,belief,plan,time)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6009).
predicate(soundPlan(agent,belief,plan,time)).
==> mpred_prop(soundPlan(agent,belief,plan,time),predicate).
==> meta_argtypes(soundPlan(agent,belief,plan,time)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6011
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6012).
% fluent On(object,surface)
fluent(on(object,surface)).
==> mpred_prop(on(object,surface),fluent).
==> meta_argtypes(on(object,surface)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6012
% fluent Goal(agent,belief)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6012).
fluent(goal(agent,belief)).
==> mpred_prop(goal(agent,belief),fluent).
==> meta_argtypes(goal(agent,belief)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6013
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6014).
% fluent CanJump(surface,surface)
fluent(canJump(surface,surface)).
==> mpred_prop(canJump(surface,surface),fluent).
==> meta_argtypes(canJump(surface,surface)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6014
% fluent Plan(agent,belief,plan)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6014).
fluent(plan(agent,belief,plan)).
==> mpred_prop(plan(agent,belief,plan),fluent).
==> meta_argtypes(plan(agent,belief,plan)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6015
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6016).
% fluent Satiated(agent)
fluent(satiated(agent)).
==> mpred_prop(satiated(agent),fluent).
==> meta_argtypes(satiated(agent)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6016
% fluent Believe(agent,belief)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6016).
fluent(believe(agent,belief)).
==> mpred_prop(believe(agent,belief),fluent).
==> meta_argtypes(believe(agent,belief)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6018
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6019).
% event AddPlan(agent,belief,plan)
event(addPlan(agent,belief,plan)).
==> mpred_prop(addPlan(agent,belief,plan),event).
==> meta_argtypes(addPlan(agent,belief,plan)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6019
% event DropPlan(agent,belief,plan)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6019).
event(dropPlan(agent,belief,plan)).
==> mpred_prop(dropPlan(agent,belief,plan),event).
==> meta_argtypes(dropPlan(agent,belief,plan)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6020
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6021).
% event Jump(agent,surface,surface)
event(jump(agent,surface,surface)).
==> mpred_prop(jump(agent,surface,surface),event).
==> meta_argtypes(jump(agent,surface,surface)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6021
% event Move(surface,surface,surface)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6021).
event(move(surface,surface,surface)).
==> mpred_prop(move(surface,surface,surface),event).
==> meta_argtypes(move(surface,surface,surface)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6022
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6023).
% event Eat(agent,food)
event(eat(agent,food)).
==> mpred_prop(eat(agent,food),event).
==> meta_argtypes(eat(agent,food)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6023
% event Wait(agent)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6023).
event(wait(agent)).
==> mpred_prop(wait(agent),event).
==> meta_argtypes(wait(agent)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6025
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6026).
% belief BSatiated(agent)

 /*  fix_axiom_head(Time) ->
       
       [ belief(bSatiated(agent)),
          (->),
         holds_at(belief(bSatiated(agent)), Time)
       ].
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6026).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(belief(bSatiated(agent)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6026).
axiom(holds_at(belief(bSatiated(agent)), Time),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6026
% belief BCanJump(surface,surface)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6026).

 /*  fix_axiom_head(Time) ->
       
       [ belief(bCanJump(surface, surface)),
          (->),
         holds_at(belief(bCanJump(surface, surface)), Time)
       ].
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6026).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(belief(bCanJump(surface, surface)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6026).
axiom(holds_at(belief(bCanJump(surface, surface)), Time),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6027
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6028).
% belief BOn(object,surface)

 /*  fix_axiom_head(Time) ->
       
       [ belief(bOn(object, surface)),
          (->),
         holds_at(belief(bOn(object, surface)), Time)
       ].
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6028).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(belief(bOn(object, surface)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6028).
axiom(holds_at(belief(bOn(object, surface)), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6029
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6030).
%; Sigma
%; A5
% [agent,belief,plan,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6033
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6034).
% Initiates(AddPlan(agent,belief,plan),Plan(agent,belief,plan),time).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(addPlan(Agent, Belief, Plan),
                    plan(Agent, Belief, Plan),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6034).
axiom(initiates(addPlan(Agent, Belief, Plan), plan(Agent, Belief, Plan), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6035
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6036).
%; A6
% [agent,belief,plan,time]
% Terminates(DropPlan(agent,belief,plan),Plan(agent,belief,plan),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6037
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6038).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(dropPlan(Agent, Belief, Plan),
                     plan(Agent, Belief, Plan),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6038).
axiom(terminates(dropPlan(Agent, Belief, Plan), plan(Agent, Belief, Plan), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6039
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6040).
% [agent,surface1,surface2,time]
% HoldsAt(On(agent,surface1),time) &
% HoldsAt(CanJump(surface1,surface2),time) ->
% Initiates(Jump(agent,surface1,surface2),On(agent,surface2),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6042
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6040).

 /*  [holds_at(on(Agent, Surface1), Time), holds_at(canJump(Surface1, Surface2), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(jump(Agent, Surface1, Surface2),
                    on(Agent, Surface2),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6040).
axiom(initiates(jump(Agent, Surface1, Surface2), on(Agent, Surface2), Time),
   
    [ holds_at(on(Agent, Surface1), Time),
      holds_at(canJump(Surface1, Surface2), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6044
% [agent,surface1,surface2,time]
% HoldsAt(On(agent,surface1),time) &
% HoldsAt(CanJump(surface1,surface2),time) ->
% Terminates(Jump(agent,surface1,surface2),On(agent,surface1),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6047
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6046).

 /*  [holds_at(on(Agent, Surface1), Time), holds_at(canJump(Surface1, Surface2), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(jump(Agent, Surface1, Surface2),
                     on(Agent, Surface1),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6046).
axiom(terminates(jump(Agent, Surface1, Surface2), on(Agent, Surface1), Time),
   
    [ holds_at(on(Agent, Surface1), Time),
      holds_at(canJump(Surface1, Surface2), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6049
% [surface1,surface2,surface3,time]
% Initiates(Move(surface1,surface2,surface3),CanJump(surface1,surface3),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6051).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(move(Surface1, Surface2, Surface3),
                    canJump(Surface1, Surface3),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6051).
axiom(initiates(move(Surface1, Surface2, Surface3), canJump(Surface1, Surface3), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6052
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6053).
% [surface1,surface2,surface3,time]
% Terminates(Move(surface1,surface2,surface3),CanJump(surface1,surface2),time).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(move(Surface1, Surface2, Surface3),
                     canJump(Surface1, Surface2),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6053).
axiom(terminates(move(Surface1, Surface2, Surface3), canJump(Surface1, Surface2), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6055
% [agent,food,surface,time]
% HoldsAt(On(agent,surface),time) &
% HoldsAt(On(food,surface),time) ->
% Initiates(Eat(agent,food),Satiated(agent),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6058
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6057).

 /*  [holds_at(on(Agent, Surface), Time), holds_at(on(Food, Surface), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(eat(Agent, Food), satiated(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6057).
axiom(initiates(eat(Agent, Food), satiated(Agent), Time),
   
    [ holds_at(on(Agent, Surface), Time),
      holds_at(on(Food, Surface), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6060
% [agent,food,surface,time]
% HoldsAt(On(agent,surface),time) &
% HoldsAt(On(food,surface),time) ->
% Terminates(Eat(agent,food),On(food,surface),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6063
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6062).

 /*  [holds_at(on(Agent, Surface), Time), holds_at(on(Food, Surface), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(eat(Agent, Food),
                     on(Food, Surface),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6062).
axiom(terminates(eat(Agent, Food), on(Food, Surface), Time),
   
    [ holds_at(on(Agent, Surface), Time),
      holds_at(on(Food, Surface), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6065
% [agent,surface1,surface2,belief,time]
% HoldsAt(Believe(agent,BOn(agent,surface1)),time) &
% HoldsAt(Believe(agent,BCanJump(surface1,surface2)),time) &
% (belief = BOn(agent,surface2)) ->
% Initiates(Jump(agent,surface1,surface2),
%           Believe(agent,belief),
%           time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6071
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6067).

 /*  [holds_at(believe(Agent, bOn(Agent, Surface1)), Time), holds_at(believe(Agent, bCanJump(Surface1, Surface2)), Time), equals(Belief, bOn(Agent, Surface2))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(jump(Agent, Surface1, Surface2),
                    believe(Agent, Belief),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6067).
axiom(initiates(jump(Agent, Surface1, Surface2), believe(Agent, Belief), Time),
   
    [ holds_at(believe(Agent, bOn(Agent, Surface1)),
               Time),
      holds_at(believe(Agent, bCanJump(Surface1, Surface2)),
               Time),
      equals(Belief, bOn(Agent, Surface2))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6073
% [agent,surface1,surface2,belief,time]
% HoldsAt(Believe(agent,BOn(agent,surface1)),time) &
% HoldsAt(Believe(agent,BCanJump(surface1,surface2)),time) &
% (belief = BOn(agent,surface1)) ->
% Terminates(Jump(agent,surface1,surface2),
%            Believe(agent,belief),
%            time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6079
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6075).

 /*  [holds_at(believe(Agent, bOn(Agent, Surface1)), Time), holds_at(believe(Agent, bCanJump(Surface1, Surface2)), Time), equals(Belief, bOn(Agent, Surface1))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(jump(Agent, Surface1, Surface2),
                     believe(Agent, Belief),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6075).
axiom(terminates(jump(Agent, Surface1, Surface2), believe(Agent, Belief), Time),
   
    [ holds_at(believe(Agent, bOn(Agent, Surface1)),
               Time),
      holds_at(believe(Agent, bCanJump(Surface1, Surface2)),
               Time),
      equals(Belief, bOn(Agent, Surface1))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6081
% [agent,surface1,surface2,surface3,belief,time]
% (belief = BCanJump(surface1,surface3)) ->
% Initiates(Move(surface1,surface2,surface3),
%           Believe(agent,belief),
%           time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6085
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6083).

 /*  [equals(Belief, bCanJump(Surface1, Surface3))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(move(Surface1, Surface2, Surface3),
                    believe(Agent, Belief),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6083).
axiom(initiates(move(Surface1, Surface2, Surface3), believe(Agent, Belief), Time),
    [equals(Belief, bCanJump(Surface1, Surface3))]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6087
% [agent,surface1,surface2,surface3,belief,time]
% (belief = BCanJump(surface1,surface2)) ->
% Terminates(Move(surface1,surface2,surface3),
%            Believe(agent,belief),
%            time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6091
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6089).

 /*  [equals(Belief, bCanJump(Surface1, Surface2))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(move(Surface1, Surface2, Surface3),
                     believe(Agent, Belief),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6089).
axiom(terminates(move(Surface1, Surface2, Surface3), believe(Agent, Belief), Time),
    [equals(Belief, bCanJump(Surface1, Surface2))]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6093
% [agent,food,surface,belief,time]
% HoldsAt(Believe(agent,BOn(agent,surface)),time) &
% HoldsAt(Believe(agent,BOn(food,surface)),time) &
% (belief = BSatiated(agent)) ->
% Initiates(Eat(agent,food),Believe(agent,belief),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6097
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6095).

 /*  [holds_at(believe(Agent, bOn(Agent, Surface)), Time), holds_at(believe(Agent, bOn(Food, Surface)), Time), equals(Belief, bSatiated(Agent))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(eat(Agent, Food),
                    believe(Agent, Belief),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6095).
axiom(initiates(eat(Agent, Food), believe(Agent, Belief), Time),
   
    [ holds_at(believe(Agent, bOn(Agent, Surface)), Time),
      holds_at(believe(Agent, bOn(Food, Surface)), Time),
      equals(Belief, bSatiated(Agent))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6099
% [agent,food,surface,belief,time]
% HoldsAt(Believe(agent,BOn(agent,surface)),time) &
% HoldsAt(Believe(agent,BOn(food,surface)),time) &
% (belief = BOn(food,surface)) ->
% Terminates(Eat(agent,food),Believe(agent,belief),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6103
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6101).

 /*  [holds_at(believe(Agent, bOn(Agent, Surface)), Time), holds_at(believe(Agent, bOn(Food, Surface)), Time), equals(Belief, bOn(Food, Surface))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(eat(Agent, Food),
                     believe(Agent, Belief),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6101).
axiom(terminates(eat(Agent, Food), believe(Agent, Belief), Time),
   
    [ holds_at(believe(Agent, bOn(Agent, Surface)), Time),
      holds_at(believe(Agent, bOn(Food, Surface)), Time),
      equals(Belief, bOn(Food, Surface))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6105
%; Delta
%; A7
% [agent,belief,plan,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6109
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6110).
% HoldsAt(Goal(agent,belief),time) &
% !HoldsAt(Believe(agent,belief),time) &
% SelectedPlan(agent,belief,plan,time) &
% (!{plan1} HoldsAt(Plan(agent,belief,plan1),time)) ->
% Happens(AddPlan(agent,belief,plan),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6113
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6110).

 /*  holds_at(goal(Agent, Belief), Time), holds_at(neg(believe(Agent, Belief)), Time), selectedPlan(Agent, Belief, Plan, Time), not(exists([Plan1], holds_at(plan(Agent, Belief, Plan1), Time))) ->
       happens(addPlan(Agent, Belief, Plan), Time).
 */

 /*  happens(addPlan(Agent, Belief, Plan), Time) :-
       holds_at(goal(Agent, Belief), Time),
       holds_at(neg(believe(Agent, Belief)), Time),
       selectedPlan(Agent, Belief, Plan, Time),
       not(holds_at(plan(Agent, Belief, Plan1), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6110).

 /*  [holds_at(goal(Agent, Belief), Time), holds_at(neg(believe(Agent, Belief)), Time), selectedPlan(Agent, Belief, Plan, Time), holds_at(neg(plan(Agent, Belief, Plan1)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(addPlan(Agent, Belief, Plan), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6110).
axiom(happens(addPlan(Agent, Belief, Plan), Time),
   
    [ holds_at(goal(Agent, Belief), Time),
      holds_at(neg(believe(Agent, Belief)), Time),
      selectedPlan(Agent, Belief, Plan, Time),
      holds_at(neg(plan(Agent, Belief, Plan1)), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6110).

 /*  not(holds_at(goal(Agent, Belief), Time)) :-
       ( holds_at(neg(believe(Agent, Belief)), Time),
         selectedPlan(Agent, Belief, Plan, Time),
         not(holds_at(plan(Agent, Belief, Plan1), Time))
       ),
       not(happens(addPlan(Agent, Belief, Plan), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6110).

 /*  [holds_at(neg(believe(Agent, Belief)), Time), selectedPlan(Agent, Belief, Plan, Time), holds_at(neg(plan(Agent, Belief, Plan1)), Time), not(happens(addPlan(Agent, Belief, Plan), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(goal(Agent, Belief)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6110).
axiom(holds_at(neg(goal(Agent, Belief)), Time),
   
    [ holds_at(neg(believe(Agent, Belief)), Time),
      selectedPlan(Agent, Belief, Plan, Time),
      holds_at(neg(plan(Agent, Belief, Plan1)), Time),
      not(happens(addPlan(Agent, Belief, Plan), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6110).

 /*  not(holds_at(neg(believe(Agent, Belief)), Time)) :-
       ( selectedPlan(Agent, Belief, Plan, Time),
         not(holds_at(plan(Agent, Belief, Plan1), Time))
       ),
       holds_at(goal(Agent, Belief), Time),
       not(happens(addPlan(Agent, Belief, Plan), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6110).

 /*  [selectedPlan(Agent, Belief, Plan, Time), holds_at(neg(plan(Agent, Belief, Plan1)), Time), holds_at(goal(Agent, Belief), Time), not(happens(addPlan(Agent, Belief, Plan), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(believe(Agent, Belief), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6110).
axiom(holds_at(believe(Agent, Belief), Time),
   
    [ selectedPlan(Agent, Belief, Plan, Time),
      holds_at(neg(plan(Agent, Belief, Plan1)), Time),
      holds_at(goal(Agent, Belief), Time),
      not(happens(addPlan(Agent, Belief, Plan), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6110).

 /*  not(selectedPlan(Agent, Belief, Plan, Time)) :-
       not(holds_at(plan(Agent, Belief, Plan1), Time)),
       holds_at(neg(believe(Agent, Belief)), Time),
       holds_at(goal(Agent, Belief), Time),
       not(happens(addPlan(Agent, Belief, Plan), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6110).

 /*  [holds_at(neg(plan(Agent, Belief, Plan1)), Time), holds_at(neg(believe(Agent, Belief)), Time), holds_at(goal(Agent, Belief), Time), not(happens(addPlan(Agent, Belief, Plan), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(selectedPlan(Agent, Belief, Plan, Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6110).
axiom(not(selectedPlan(Agent, Belief, Plan, Time)),
   
    [ holds_at(neg(plan(Agent, Belief, Plan1)), Time),
      holds_at(neg(believe(Agent, Belief)), Time),
      holds_at(goal(Agent, Belief), Time),
      not(happens(addPlan(Agent, Belief, Plan), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6110).

 /*  holds_at(plan(Agent, Belief, Plan1), Time) :-
       selectedPlan(Agent, Belief, Plan, Time),
       holds_at(neg(believe(Agent, Belief)), Time),
       holds_at(goal(Agent, Belief), Time),
       not(happens(addPlan(Agent, Belief, Plan), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6110).

 /*  [selectedPlan(Agent, Belief, Plan, Time), holds_at(neg(believe(Agent, Belief)), Time), holds_at(goal(Agent, Belief), Time), not(happens(addPlan(Agent, Belief, Plan), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(plan(Agent, Belief, Plan1), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6110).
axiom(holds_at(plan(Agent, Belief, Plan1), Time),
   
    [ selectedPlan(Agent, Belief, Plan, Time),
      holds_at(neg(believe(Agent, Belief)), Time),
      holds_at(goal(Agent, Belief), Time),
      not(happens(addPlan(Agent, Belief, Plan), Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6115
%; A8
% [agent,belief,time]
% HoldsAt(Plan(agent,belief,P1),time) &
% !HoldsAt(Believe(agent,belief),time) &
% SoundPlan(agent,belief,P1,time) ->
% Happens(Jump(Cat,Floor,Chair),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6120
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6117).

 /*  holds_at(plan(Agent, Belief, p1), Time), holds_at(neg(believe(Agent, Belief)), Time), soundPlan(Agent, Belief, p1, Time) ->
       happens(jump(cat, floor, chair), Time).
 */

 /*  happens(jump(cat, floor, chair), Time) :-
       holds_at(plan(Agent, Belief, p1), Time),
       holds_at(neg(believe(Agent, Belief)), Time),
       soundPlan(Agent, Belief, p1, Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6117).

 /*  [holds_at(plan(Agent, Belief, p1), Time), holds_at(neg(believe(Agent, Belief)), Time), soundPlan(Agent, Belief, p1, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(jump(cat, floor, chair), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6117).
axiom(happens(jump(cat, floor, chair), Time),
   
    [ holds_at(plan(Agent, Belief, p1), Time),
      holds_at(neg(believe(Agent, Belief)), Time),
      soundPlan(Agent, Belief, p1, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6117).

 /*  not(holds_at(plan(Agent, Belief, p1), Time)) :-
       ( holds_at(neg(believe(Agent, Belief)), Time),
         soundPlan(Agent, Belief, p1, Time)
       ),
       not(happens(jump(cat, floor, chair), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6117).

 /*  [holds_at(neg(believe(Agent, Belief)), Time), soundPlan(Agent, Belief, p1, Time), not(happens(jump(cat, floor, chair), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(plan(Agent, Belief, p1)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6117).
axiom(holds_at(neg(plan(Agent, Belief, p1)), Time),
   
    [ holds_at(neg(believe(Agent, Belief)), Time),
      soundPlan(Agent, Belief, p1, Time),
      not(happens(jump(cat, floor, chair), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6117).

 /*  not(holds_at(neg(believe(Agent, Belief)), Time)) :-
       soundPlan(Agent, Belief, p1, Time),
       holds_at(plan(Agent, Belief, p1), Time),
       not(happens(jump(cat, floor, chair), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6117).

 /*  [soundPlan(Agent, Belief, p1, Time), holds_at(plan(Agent, Belief, p1), Time), not(happens(jump(cat, floor, chair), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(believe(Agent, Belief), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6117).
axiom(holds_at(believe(Agent, Belief), Time),
   
    [ soundPlan(Agent, Belief, p1, Time),
      holds_at(plan(Agent, Belief, p1), Time),
      not(happens(jump(cat, floor, chair), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6117).

 /*  not(soundPlan(Agent, Belief, p1, Time)) :-
       holds_at(neg(believe(Agent, Belief)), Time),
       holds_at(plan(Agent, Belief, p1), Time),
       not(happens(jump(cat, floor, chair), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6117).

 /*  [holds_at(neg(believe(Agent, Belief)), Time), holds_at(plan(Agent, Belief, p1), Time), not(happens(jump(cat, floor, chair), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(soundPlan(Agent, Belief, p1, Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6117).
axiom(not(soundPlan(Agent, Belief, p1, Time)),
   
    [ holds_at(neg(believe(Agent, Belief)), Time),
      holds_at(plan(Agent, Belief, p1), Time),
      not(happens(jump(cat, floor, chair), Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6122
% [agent,belief,time]
% HoldsAt(Plan(agent,belief,P1a),time) &
% !HoldsAt(Believe(agent,belief),time) &
% SoundPlan(agent,belief,P1a,time) ->
% Happens(Wait(Cat),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6126
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6124).

 /*  holds_at(plan(Agent, Belief, p1a), Time), holds_at(neg(believe(Agent, Belief)), Time), soundPlan(Agent, Belief, p1a, Time) ->
       happens(wait(cat), Time).
 */

 /*  happens(wait(cat), Time) :-
       holds_at(plan(Agent, Belief, p1a), Time),
       holds_at(neg(believe(Agent, Belief)), Time),
       soundPlan(Agent, Belief, p1a, Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6124).

 /*  [holds_at(plan(Agent, Belief, p1a), Time), holds_at(neg(believe(Agent, Belief)), Time), soundPlan(Agent, Belief, p1a, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(wait(cat), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6124).
axiom(happens(wait(cat), Time),
   
    [ holds_at(plan(Agent, Belief, p1a), Time),
      holds_at(neg(believe(Agent, Belief)), Time),
      soundPlan(Agent, Belief, p1a, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6124).

 /*  not(holds_at(plan(Agent, Belief, p1a), Time)) :-
       ( holds_at(neg(believe(Agent, Belief)), Time),
         soundPlan(Agent, Belief, p1a, Time)
       ),
       not(happens(wait(cat), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6124).

 /*  [holds_at(neg(believe(Agent, Belief)), Time), soundPlan(Agent, Belief, p1a, Time), not(happens(wait(cat), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(plan(Agent, Belief, p1a)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6124).
axiom(holds_at(neg(plan(Agent, Belief, p1a)), Time),
   
    [ holds_at(neg(believe(Agent, Belief)), Time),
      soundPlan(Agent, Belief, p1a, Time),
      not(happens(wait(cat), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6124).

 /*  not(holds_at(neg(believe(Agent, Belief)), Time)) :-
       soundPlan(Agent, Belief, p1a, Time),
       holds_at(plan(Agent, Belief, p1a), Time),
       not(happens(wait(cat), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6124).

 /*  [soundPlan(Agent, Belief, p1a, Time), holds_at(plan(Agent, Belief, p1a), Time), not(happens(wait(cat), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(believe(Agent, Belief), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6124).
axiom(holds_at(believe(Agent, Belief), Time),
   
    [ soundPlan(Agent, Belief, p1a, Time),
      holds_at(plan(Agent, Belief, p1a), Time),
      not(happens(wait(cat), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6124).

 /*  not(soundPlan(Agent, Belief, p1a, Time)) :-
       holds_at(neg(believe(Agent, Belief)), Time),
       holds_at(plan(Agent, Belief, p1a), Time),
       not(happens(wait(cat), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6124).

 /*  [holds_at(neg(believe(Agent, Belief)), Time), holds_at(plan(Agent, Belief, p1a), Time), not(happens(wait(cat), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(soundPlan(Agent, Belief, p1a, Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6124).
axiom(not(soundPlan(Agent, Belief, p1a, Time)),
   
    [ holds_at(neg(believe(Agent, Belief)), Time),
      holds_at(plan(Agent, Belief, p1a), Time),
      not(happens(wait(cat), Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6128
% [agent,belief,time]
% HoldsAt(Plan(agent,belief,P2),time) &
% !HoldsAt(Believe(agent,belief),time) &
% SoundPlan(agent,belief,P2,time) ->
% Happens(Jump(Cat,Chair,Shelf),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6132
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6130).

 /*  holds_at(plan(Agent, Belief, p2), Time), holds_at(neg(believe(Agent, Belief)), Time), soundPlan(Agent, Belief, p2, Time) ->
       happens(jump(cat, chair, shelf), Time).
 */

 /*  happens(jump(cat, chair, shelf), Time) :-
       holds_at(plan(Agent, Belief, p2), Time),
       holds_at(neg(believe(Agent, Belief)), Time),
       soundPlan(Agent, Belief, p2, Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6130).

 /*  [holds_at(plan(Agent, Belief, p2), Time), holds_at(neg(believe(Agent, Belief)), Time), soundPlan(Agent, Belief, p2, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(jump(cat, chair, shelf), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6130).
axiom(happens(jump(cat, chair, shelf), Time),
   
    [ holds_at(plan(Agent, Belief, p2), Time),
      holds_at(neg(believe(Agent, Belief)), Time),
      soundPlan(Agent, Belief, p2, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6130).

 /*  not(holds_at(plan(Agent, Belief, p2), Time)) :-
       ( holds_at(neg(believe(Agent, Belief)), Time),
         soundPlan(Agent, Belief, p2, Time)
       ),
       not(happens(jump(cat, chair, shelf), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6130).

 /*  [holds_at(neg(believe(Agent, Belief)), Time), soundPlan(Agent, Belief, p2, Time), not(happens(jump(cat, chair, shelf), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(plan(Agent, Belief, p2)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6130).
axiom(holds_at(neg(plan(Agent, Belief, p2)), Time),
   
    [ holds_at(neg(believe(Agent, Belief)), Time),
      soundPlan(Agent, Belief, p2, Time),
      not(happens(jump(cat, chair, shelf), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6130).

 /*  not(holds_at(neg(believe(Agent, Belief)), Time)) :-
       soundPlan(Agent, Belief, p2, Time),
       holds_at(plan(Agent, Belief, p2), Time),
       not(happens(jump(cat, chair, shelf), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6130).

 /*  [soundPlan(Agent, Belief, p2, Time), holds_at(plan(Agent, Belief, p2), Time), not(happens(jump(cat, chair, shelf), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(believe(Agent, Belief), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6130).
axiom(holds_at(believe(Agent, Belief), Time),
   
    [ soundPlan(Agent, Belief, p2, Time),
      holds_at(plan(Agent, Belief, p2), Time),
      not(happens(jump(cat, chair, shelf), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6130).

 /*  not(soundPlan(Agent, Belief, p2, Time)) :-
       holds_at(neg(believe(Agent, Belief)), Time),
       holds_at(plan(Agent, Belief, p2), Time),
       not(happens(jump(cat, chair, shelf), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6130).

 /*  [holds_at(neg(believe(Agent, Belief)), Time), holds_at(plan(Agent, Belief, p2), Time), not(happens(jump(cat, chair, shelf), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(soundPlan(Agent, Belief, p2, Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6130).
axiom(not(soundPlan(Agent, Belief, p2, Time)),
   
    [ holds_at(neg(believe(Agent, Belief)), Time),
      holds_at(plan(Agent, Belief, p2), Time),
      not(happens(jump(cat, chair, shelf), Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6134
%; A9
% [agent,belief,plan,time]
% HoldsAt(Plan(agent,belief,plan),time) ->
% Happens(DropPlan(agent,belief,plan),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6137
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6136).

 /*  holds_at(plan(Agent, Belief, Plan), Time) ->
       happens(dropPlan(Agent, Belief, Plan), Time).
 */

 /*  happens(dropPlan(Agent, Belief, Plan), Time) :-
       holds_at(plan(Agent, Belief, Plan), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6136).

 /*  [holds_at(plan(Agent, Belief, Plan), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(dropPlan(Agent, Belief, Plan), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6136).
axiom(happens(dropPlan(Agent, Belief, Plan), Time),
    [holds_at(plan(Agent, Belief, Plan), Time)]).

 /*  not(holds_at(plan(Agent, Belief, Plan), Time)) :-
       not(happens(dropPlan(Agent, Belief, Plan), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6136).

 /*  [not(happens(dropPlan(Agent, Belief, Plan), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(plan(Agent, Belief, Plan)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6136).
axiom(holds_at(neg(plan(Agent, Belief, Plan)), Time),
    [not(happens(dropPlan(Agent, Belief, Plan), Time))]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6139
%; A10
% [agent,belief,time]
% HoldsAt(Plan(agent,belief,P1),time) &
% !HoldsAt(Believe(agent,belief),time) &
% SoundPlan(agent,belief,P1,time) ->
% Happens(AddPlan(agent,belief,P1a),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6144
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6141).

 /*  holds_at(plan(Agent, Belief, p1), Time), holds_at(neg(believe(Agent, Belief)), Time), soundPlan(Agent, Belief, p1, Time) ->
       happens(addPlan(Agent, Belief, p1a), Time).
 */

 /*  happens(addPlan(Agent, Belief, p1a), Time) :-
       holds_at(plan(Agent, Belief, p1), Time),
       holds_at(neg(believe(Agent, Belief)), Time),
       soundPlan(Agent, Belief, p1, Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6141).

 /*  [holds_at(plan(Agent, Belief, p1), Time), holds_at(neg(believe(Agent, Belief)), Time), soundPlan(Agent, Belief, p1, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(addPlan(Agent, Belief, p1a), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6141).
axiom(happens(addPlan(Agent, Belief, p1a), Time),
   
    [ holds_at(plan(Agent, Belief, p1), Time),
      holds_at(neg(believe(Agent, Belief)), Time),
      soundPlan(Agent, Belief, p1, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6141).

 /*  not(holds_at(plan(Agent, Belief, p1), Time)) :-
       ( holds_at(neg(believe(Agent, Belief)), Time),
         soundPlan(Agent, Belief, p1, Time)
       ),
       not(happens(addPlan(Agent, Belief, p1a), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6141).

 /*  [holds_at(neg(believe(Agent, Belief)), Time), soundPlan(Agent, Belief, p1, Time), not(happens(addPlan(Agent, Belief, p1a), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(plan(Agent, Belief, p1)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6141).
axiom(holds_at(neg(plan(Agent, Belief, p1)), Time),
   
    [ holds_at(neg(believe(Agent, Belief)), Time),
      soundPlan(Agent, Belief, p1, Time),
      not(happens(addPlan(Agent, Belief, p1a), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6141).

 /*  not(holds_at(neg(believe(Agent, Belief)), Time)) :-
       soundPlan(Agent, Belief, p1, Time),
       holds_at(plan(Agent, Belief, p1), Time),
       not(happens(addPlan(Agent, Belief, p1a), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6141).

 /*  [soundPlan(Agent, Belief, p1, Time), holds_at(plan(Agent, Belief, p1), Time), not(happens(addPlan(Agent, Belief, p1a), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(believe(Agent, Belief), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6141).
axiom(holds_at(believe(Agent, Belief), Time),
   
    [ soundPlan(Agent, Belief, p1, Time),
      holds_at(plan(Agent, Belief, p1), Time),
      not(happens(addPlan(Agent, Belief, p1a), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6141).

 /*  not(soundPlan(Agent, Belief, p1, Time)) :-
       holds_at(neg(believe(Agent, Belief)), Time),
       holds_at(plan(Agent, Belief, p1), Time),
       not(happens(addPlan(Agent, Belief, p1a), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6141).

 /*  [holds_at(neg(believe(Agent, Belief)), Time), holds_at(plan(Agent, Belief, p1), Time), not(happens(addPlan(Agent, Belief, p1a), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(soundPlan(Agent, Belief, p1, Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6141).
axiom(not(soundPlan(Agent, Belief, p1, Time)),
   
    [ holds_at(neg(believe(Agent, Belief)), Time),
      holds_at(plan(Agent, Belief, p1), Time),
      not(happens(addPlan(Agent, Belief, p1a), Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6146
% [agent,belief,time]
% HoldsAt(Plan(agent,belief,P1a),time) &
% !HoldsAt(Believe(agent,belief),time) &
% SoundPlan(agent,belief,P1a,time) ->
% Happens(AddPlan(agent,belief,P1b),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6150
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6148).

 /*  holds_at(plan(Agent, Belief, p1a), Time), holds_at(neg(believe(Agent, Belief)), Time), soundPlan(Agent, Belief, p1a, Time) ->
       happens(addPlan(Agent, Belief, p1b), Time).
 */

 /*  happens(addPlan(Agent, Belief, p1b), Time) :-
       holds_at(plan(Agent, Belief, p1a), Time),
       holds_at(neg(believe(Agent, Belief)), Time),
       soundPlan(Agent, Belief, p1a, Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6148).

 /*  [holds_at(plan(Agent, Belief, p1a), Time), holds_at(neg(believe(Agent, Belief)), Time), soundPlan(Agent, Belief, p1a, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(addPlan(Agent, Belief, p1b), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6148).
axiom(happens(addPlan(Agent, Belief, p1b), Time),
   
    [ holds_at(plan(Agent, Belief, p1a), Time),
      holds_at(neg(believe(Agent, Belief)), Time),
      soundPlan(Agent, Belief, p1a, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6148).

 /*  not(holds_at(plan(Agent, Belief, p1a), Time)) :-
       ( holds_at(neg(believe(Agent, Belief)), Time),
         soundPlan(Agent, Belief, p1a, Time)
       ),
       not(happens(addPlan(Agent, Belief, p1b), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6148).

 /*  [holds_at(neg(believe(Agent, Belief)), Time), soundPlan(Agent, Belief, p1a, Time), not(happens(addPlan(Agent, Belief, p1b), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(plan(Agent, Belief, p1a)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6148).
axiom(holds_at(neg(plan(Agent, Belief, p1a)), Time),
   
    [ holds_at(neg(believe(Agent, Belief)), Time),
      soundPlan(Agent, Belief, p1a, Time),
      not(happens(addPlan(Agent, Belief, p1b), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6148).

 /*  not(holds_at(neg(believe(Agent, Belief)), Time)) :-
       soundPlan(Agent, Belief, p1a, Time),
       holds_at(plan(Agent, Belief, p1a), Time),
       not(happens(addPlan(Agent, Belief, p1b), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6148).

 /*  [soundPlan(Agent, Belief, p1a, Time), holds_at(plan(Agent, Belief, p1a), Time), not(happens(addPlan(Agent, Belief, p1b), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(believe(Agent, Belief), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6148).
axiom(holds_at(believe(Agent, Belief), Time),
   
    [ soundPlan(Agent, Belief, p1a, Time),
      holds_at(plan(Agent, Belief, p1a), Time),
      not(happens(addPlan(Agent, Belief, p1b), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6148).

 /*  not(soundPlan(Agent, Belief, p1a, Time)) :-
       holds_at(neg(believe(Agent, Belief)), Time),
       holds_at(plan(Agent, Belief, p1a), Time),
       not(happens(addPlan(Agent, Belief, p1b), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6148).

 /*  [holds_at(neg(believe(Agent, Belief)), Time), holds_at(plan(Agent, Belief, p1a), Time), not(happens(addPlan(Agent, Belief, p1b), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(soundPlan(Agent, Belief, p1a, Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6148).
axiom(not(soundPlan(Agent, Belief, p1a, Time)),
   
    [ holds_at(neg(believe(Agent, Belief)), Time),
      holds_at(plan(Agent, Belief, p1a), Time),
      not(happens(addPlan(Agent, Belief, p1b), Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6152
% [agent,belief,time]
% HoldsAt(Plan(agent,belief,P2),time) &
% !HoldsAt(Believe(agent,belief),time) &
% SoundPlan(agent,belief,P2,time) ->
% Happens(AddPlan(agent,belief,P2a),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6156
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6154).

 /*  holds_at(plan(Agent, Belief, p2), Time), holds_at(neg(believe(Agent, Belief)), Time), soundPlan(Agent, Belief, p2, Time) ->
       happens(addPlan(Agent, Belief, p2a), Time).
 */

 /*  happens(addPlan(Agent, Belief, p2a), Time) :-
       holds_at(plan(Agent, Belief, p2), Time),
       holds_at(neg(believe(Agent, Belief)), Time),
       soundPlan(Agent, Belief, p2, Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6154).

 /*  [holds_at(plan(Agent, Belief, p2), Time), holds_at(neg(believe(Agent, Belief)), Time), soundPlan(Agent, Belief, p2, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(addPlan(Agent, Belief, p2a), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6154).
axiom(happens(addPlan(Agent, Belief, p2a), Time),
   
    [ holds_at(plan(Agent, Belief, p2), Time),
      holds_at(neg(believe(Agent, Belief)), Time),
      soundPlan(Agent, Belief, p2, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6154).

 /*  not(holds_at(plan(Agent, Belief, p2), Time)) :-
       ( holds_at(neg(believe(Agent, Belief)), Time),
         soundPlan(Agent, Belief, p2, Time)
       ),
       not(happens(addPlan(Agent, Belief, p2a), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6154).

 /*  [holds_at(neg(believe(Agent, Belief)), Time), soundPlan(Agent, Belief, p2, Time), not(happens(addPlan(Agent, Belief, p2a), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(plan(Agent, Belief, p2)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6154).
axiom(holds_at(neg(plan(Agent, Belief, p2)), Time),
   
    [ holds_at(neg(believe(Agent, Belief)), Time),
      soundPlan(Agent, Belief, p2, Time),
      not(happens(addPlan(Agent, Belief, p2a), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6154).

 /*  not(holds_at(neg(believe(Agent, Belief)), Time)) :-
       soundPlan(Agent, Belief, p2, Time),
       holds_at(plan(Agent, Belief, p2), Time),
       not(happens(addPlan(Agent, Belief, p2a), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6154).

 /*  [soundPlan(Agent, Belief, p2, Time), holds_at(plan(Agent, Belief, p2), Time), not(happens(addPlan(Agent, Belief, p2a), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(believe(Agent, Belief), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6154).
axiom(holds_at(believe(Agent, Belief), Time),
   
    [ soundPlan(Agent, Belief, p2, Time),
      holds_at(plan(Agent, Belief, p2), Time),
      not(happens(addPlan(Agent, Belief, p2a), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6154).

 /*  not(soundPlan(Agent, Belief, p2, Time)) :-
       holds_at(neg(believe(Agent, Belief)), Time),
       holds_at(plan(Agent, Belief, p2), Time),
       not(happens(addPlan(Agent, Belief, p2a), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6154).

 /*  [holds_at(neg(believe(Agent, Belief)), Time), holds_at(plan(Agent, Belief, p2), Time), not(happens(addPlan(Agent, Belief, p2a), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(soundPlan(Agent, Belief, p2, Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6154).
axiom(not(soundPlan(Agent, Belief, p2, Time)),
   
    [ holds_at(neg(believe(Agent, Belief)), Time),
      holds_at(plan(Agent, Belief, p2), Time),
      not(happens(addPlan(Agent, Belief, p2a), Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6158
%; reactive behavior
% [agent,food,surface,time]
% !HoldsAt(Satiated(agent),time) &
% HoldsAt(On(agent,surface),time) &
% HoldsAt(On(food,surface),time) ->
% Happens(Eat(agent,food),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6163
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6160).

 /*  holds_at(neg(satiated(Agent)), Time), holds_at(on(Agent, Surface), Time), holds_at(on(Food, Surface), Time) ->
       happens(eat(Agent, Food), Time).
 */

 /*  happens(eat(Agent, Food), Time) :-
       holds_at(neg(satiated(Agent)), Time),
       holds_at(on(Agent, Surface), Time),
       holds_at(on(Food, Surface), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6160).

 /*  [holds_at(neg(satiated(Agent)), Time), holds_at(on(Agent, Surface), Time), holds_at(on(Food, Surface), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(eat(Agent, Food), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6160).
axiom(happens(eat(Agent, Food), Time),
   
    [ holds_at(neg(satiated(Agent)), Time),
      holds_at(on(Agent, Surface), Time),
      holds_at(on(Food, Surface), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6160).

 /*  not(holds_at(neg(satiated(Agent)), Time)) :-
       ( holds_at(on(Agent, Surface), Time),
         holds_at(on(Food, Surface), Time)
       ),
       not(happens(eat(Agent, Food), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6160).

 /*  [holds_at(on(Agent, Surface), Time), holds_at(on(Food, Surface), Time), not(happens(eat(Agent, Food), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(satiated(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6160).
axiom(holds_at(satiated(Agent), Time),
   
    [ holds_at(on(Agent, Surface), Time),
      holds_at(on(Food, Surface), Time),
      not(happens(eat(Agent, Food), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6160).

 /*  not(holds_at(on(Agent, Surface), Time)) :-
       holds_at(on(Food, Surface), Time),
       holds_at(neg(satiated(Agent)), Time),
       not(happens(eat(Agent, Food), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6160).

 /*  [holds_at(on(Food, Surface), Time), holds_at(neg(satiated(Agent)), Time), not(happens(eat(Agent, Food), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(on(Agent, Surface)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6160).
axiom(holds_at(neg(on(Agent, Surface)), Time),
   
    [ holds_at(on(Food, Surface), Time),
      holds_at(neg(satiated(Agent)), Time),
      not(happens(eat(Agent, Food), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6160).

 /*  not(holds_at(on(Food, Surface), Time)) :-
       holds_at(on(Agent, Surface), Time),
       holds_at(neg(satiated(Agent)), Time),
       not(happens(eat(Agent, Food), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6160).

 /*  [holds_at(on(Agent, Surface), Time), holds_at(neg(satiated(Agent)), Time), not(happens(eat(Agent, Food), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(on(Food, Surface)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6160).
axiom(holds_at(neg(on(Food, Surface)), Time),
   
    [ holds_at(on(Agent, Surface), Time),
      holds_at(neg(satiated(Agent)), Time),
      not(happens(eat(Agent, Food), Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6165
%; narrative


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6167
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6168).
% Happens(Move(Chair,Table,Shelf),2).

 /*  [b(start, Start2), toffset(start, 2, Start2), ignore(start+2==Start2)] ->
       ta(Ta_Param,
          tvs1=[start+2],
          tvs2=[Start2, start],
          happens(move(chair, table, shelf), Start2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6168).
axiom(happens(move(chair, table, shelf), Start2),
    [b(start, Start2), toffset(start, 2, Start2)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6169
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6170).
%; SelectedPlan - plan library
%;[agent,belief,plan,time]
%;SelectedPlan(agent,belief,plan,time) <->
%;(agent=Cat & belief=BSatiated(Cat) & plan=P1 & time=0) |
%;(agent=Cat & belief=BSatiated(Cat) & plan=P2 & time=4).
% [agent,belief,plan,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6177
% SelectedPlan(agent,belief,plan,time) <->
% ({surface1,surface2,surface3,food}
%  HoldsAt(Believe(agent,BOn(agent,surface1)),time) &
%  HoldsAt(Believe(agent,BCanJump(surface1,surface2)),time) &
%  HoldsAt(Believe(agent,BCanJump(surface2,surface3)),time) &
%  HoldsAt(Believe(agent,BOn(food,surface3)),time) &
%  belief=BSatiated(agent) &
%  plan=P1 &
%  time=0) |
% ({surface1,surface2,surface3,food}
%  HoldsAt(Believe(agent,BOn(agent,surface1)),time) &
%  HoldsAt(Believe(agent,BCanJump(surface1,surface2)),time) &
%  HoldsAt(Believe(agent,BCanJump(surface2,surface3)),time) &
%  HoldsAt(Believe(agent,BOn(food,surface3)),time) &
%  belief=BSatiated(agent) &
%  plan=P2 &
%  time=4).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6193
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6177).

 /*  selectedPlan(Agent, Belief, Plan, Time) <->
       (   exists([Surface1, Surface2, Surface3, Food],
                   (holds_at(believe(Agent, bOn(Agent, Surface1)), Time), holds_at(believe(Agent, bCanJump(Surface1, Surface2)), Time), holds_at(believe(Agent, bCanJump(Surface2, Surface3)), Time), holds_at(believe(Agent, bOn(Food, Surface3)), Time), equals(Belief, bSatiated(Agent)), equals(Plan, p1), equals(Time, 0)))
       ;   exists([Surface18, Surface29, Surface310, Food11],
                   (holds_at(believe(Agent, bOn(Agent, Surface18)), Time), holds_at(believe(Agent, bCanJump(Surface18, Surface29)), Time), holds_at(believe(Agent, bCanJump(Surface29, Surface310)), Time), holds_at(believe(Agent, bOn(Food11, Surface310)), Time), equals(Belief, bSatiated(Agent)), equals(Plan, p2), equals(Time, 4)))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6177).

 /*  [selectedPlan] <->
       
       [  (;),
         exists,
         holds_at,
         believe,
         bOn,
         holds_at,
         believe,
         bCanJump,
         holds_at,
         believe,
         bCanJump,
         holds_at,
         believe,
         bOn,
         equals,
         bSatiated,
         equals,
         p1,
         equals,
         exists,
         holds_at,
         believe,
         bOn,
         holds_at,
         believe,
         bCanJump,
         holds_at,
         believe,
         bCanJump,
         holds_at,
         believe,
         bOn,
         equals,
         bSatiated,
         equals,
         p2,
         equals
       ].
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6177).

 /*  selectedPlan(Agent, Belief, Plan, Time) ->
       (   exists([Surface1, Surface2, Surface3, Food],
                   (holds_at(believe(Agent, bOn(Agent, Surface1)), Time), holds_at(believe(Agent, bCanJump(Surface1, Surface2)), Time), holds_at(believe(Agent, bCanJump(Surface2, Surface3)), Time), holds_at(believe(Agent, bOn(Food, Surface3)), Time), equals(Belief, bSatiated(Agent)), equals(Plan, p1), equals(Time, 0)))
       ;   exists([Surface18, Surface29, Surface310, Food11],
                   (holds_at(believe(Agent, bOn(Agent, Surface18)), Time), holds_at(believe(Agent, bCanJump(Surface18, Surface29)), Time), holds_at(believe(Agent, bCanJump(Surface29, Surface310)), Time), holds_at(believe(Agent, bOn(Food11, Surface310)), Time), equals(Belief, bSatiated(Agent)), equals(Plan, p2), equals(Time, 4)))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6177).

 /*  not(selectedPlan(Agent, Belief, Plan, Time)) :-
       (   not(holds_at(believe(Agent, bOn(Agent, Surface1)),
                        Time))
       ;   not(holds_at(believe(Agent,
                                bCanJump(Surface1, Surface2)),
                        Time))
       ;   not(holds_at(believe(Agent,
                                bCanJump(Surface2, Surface3)),
                        Time))
       ;   not(holds_at(believe(Agent, bOn(Food, Surface3)),
                        Time))
       ;   not(equals(Belief, bSatiated(Agent)))
       ;   not(equals(Plan, p1))
       ;   not(equals(Time, 0))
       ),
       (   not(holds_at(believe(Agent, bOn(Agent, Surface18)),
                        Time))
       ;   not(holds_at(believe(Agent,
                                bCanJump(Surface18, Surface29)),
                        Time))
       ;   not(holds_at(believe(Agent,
                                bCanJump(Surface29, Surface310)),
                        Time))
       ;   not(holds_at(believe(Agent, bOn(Food11, Surface310)),
                        Time))
       ;   not(equals(Belief, bSatiated(Agent)))
       ;   not(equals(Plan, p2))
       ;   not(equals(Time, 4))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6177).

 /*  fix_axiom_head(Time) ->
       
       [  (not(holds_at(believe(Agent, bOn(Agent, Surface1)), Time));not(holds_at(believe(Agent, bCanJump(Surface1, Surface2)), Time));not(holds_at(believe(Agent, bCanJump(Surface2, Surface3)), Time));not(holds_at(believe(Agent, bOn(Food, Surface3)), Time));not(equals(Belief, bSatiated(Agent)));not(equals(Plan, p1));not(equals(Time, 0))),
          (->),
          (holds_at(neg(believe(Agent, bOn(Agent, Surface1))), Time);holds_at(neg(believe(Agent, bCanJump(Surface1, Surface2))), Time);holds_at(neg(believe(Agent, bCanJump(Surface2, Surface3))), Time);holds_at(neg(believe(Agent, bOn(Food, Surface3))), Time);not(equals(Belief, bSatiated(Agent)));not(equals(Plan, p1));not(equals(Time, 0)))
       ].
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6177).

 /*  fix_axiom_head(Time) ->
       
       [  (not(holds_at(believe(Agent, bOn(Agent, Surface18)), Time));not(holds_at(believe(Agent, bCanJump(Surface18, Surface29)), Time));not(holds_at(believe(Agent, bCanJump(Surface29, Surface310)), Time));not(holds_at(believe(Agent, bOn(Food11, Surface310)), Time));not(equals(Belief, bSatiated(Agent)));not(equals(Plan, p2));not(equals(Time, 4))),
          (->),
          (holds_at(neg(believe(Agent, bOn(Agent, Surface18))), Time);holds_at(neg(believe(Agent, bCanJump(Surface18, Surface29))), Time);holds_at(neg(believe(Agent, bCanJump(Surface29, Surface310))), Time);holds_at(neg(believe(Agent, bOn(Food11, Surface310))), Time);not(equals(Belief, bSatiated(Agent)));not(equals(Plan, p2));not(equals(Time, 4)))
       ].
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6177).

 /*  [(holds_at(neg(believe(Agent, bOn(Agent, Surface1))), Time);holds_at(neg(believe(Agent, bCanJump(Surface1, Surface2))), Time);holds_at(neg(believe(Agent, bCanJump(Surface2, Surface3))), Time);holds_at(neg(believe(Agent, bOn(Food, Surface3))), Time);not(equals(Belief, bSatiated(Agent)));not(equals(Plan, p1));not(equals(Time, 0))),  (holds_at(neg(believe(Agent, bOn(Agent, Surface18))), Time);holds_at(neg(believe(Agent, bCanJump(Surface18, Surface29))), Time);holds_at(neg(believe(Agent, bCanJump(Surface29, Surface310))), Time);holds_at(neg(believe(Agent, bOn(Food11, Surface310))), Time);not(equals(Belief, bSatiated(Agent)));not(equals(Plan, p2));not(equals(Time, 4)))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(selectedPlan(Agent, Belief, Plan, Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6177).
axiom(not(selectedPlan(Agent, Belief, Plan, Time)),
   
    [  (holds_at(neg(believe(Agent, bOn(Agent, Surface1))), Time);holds_at(neg(believe(Agent, bCanJump(Surface1, Surface2))), Time);holds_at(neg(believe(Agent, bCanJump(Surface2, Surface3))), Time);holds_at(neg(believe(Agent, bOn(Food, Surface3))), Time);not(equals(Belief, bSatiated(Agent)));not(equals(Plan, p1));not(equals(Time, 0))),
       (holds_at(neg(believe(Agent, bOn(Agent, Surface18))), Time);holds_at(neg(believe(Agent, bCanJump(Surface18, Surface29))), Time);holds_at(neg(believe(Agent, bCanJump(Surface29, Surface310))), Time);holds_at(neg(believe(Agent, bOn(Food11, Surface310))), Time);not(equals(Belief, bSatiated(Agent)));not(equals(Plan, p2));not(equals(Time, 4)))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6177).

 /*  holds_at(believe(Agent, bOn(Agent, Surface1)), Time) :-
       (   not(holds_at(believe(Agent, bOn(Agent, Surface18)),
                        Time))
       ;   not(holds_at(believe(Agent,
                                bCanJump(Surface18, Surface29)),
                        Time))
       ;   not(holds_at(believe(Agent,
                                bCanJump(Surface29, Surface310)),
                        Time))
       ;   not(holds_at(believe(Agent, bOn(Food11, Surface310)),
                        Time))
       ;   not(equals(Belief, bSatiated(Agent)))
       ;   not(equals(Plan, p2))
       ;   not(equals(Time, 4))
       ),
       selectedPlan(Agent, Belief, Plan, Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6177).

 /*  [(holds_at(neg(believe(Agent, bOn(Agent, Surface18))), Time);holds_at(neg(believe(Agent, bCanJump(Surface18, Surface29))), Time);holds_at(neg(believe(Agent, bCanJump(Surface29, Surface310))), Time);holds_at(neg(believe(Agent, bOn(Food11, Surface310))), Time);not(equals(Belief, bSatiated(Agent)));not(equals(Plan, p2));not(equals(Time, 4))), selectedPlan(Agent, Belief, Plan, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(believe(Agent, bOn(Agent, Surface1)),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6177).
axiom(holds_at(believe(Agent, bOn(Agent, Surface1)), Time),
   
    [  (holds_at(neg(believe(Agent, bOn(Agent, Surface18))), Time);holds_at(neg(believe(Agent, bCanJump(Surface18, Surface29))), Time);holds_at(neg(believe(Agent, bCanJump(Surface29, Surface310))), Time);holds_at(neg(believe(Agent, bOn(Food11, Surface310))), Time);not(equals(Belief, bSatiated(Agent)));not(equals(Plan, p2));not(equals(Time, 4))),
      selectedPlan(Agent, Belief, Plan, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6177).

 /*  holds_at(believe(Agent, bCanJump(Surface1, Surface2)), Time) :-
       (   not(holds_at(believe(Agent, bOn(Agent, Surface18)),
                        Time))
       ;   not(holds_at(believe(Agent,
                                bCanJump(Surface18, Surface29)),
                        Time))
       ;   not(holds_at(believe(Agent,
                                bCanJump(Surface29, Surface310)),
                        Time))
       ;   not(holds_at(believe(Agent, bOn(Food11, Surface310)),
                        Time))
       ;   not(equals(Belief, bSatiated(Agent)))
       ;   not(equals(Plan, p2))
       ;   not(equals(Time, 4))
       ),
       selectedPlan(Agent, Belief, Plan, Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6177).

 /*  [(holds_at(neg(believe(Agent, bOn(Agent, Surface18))), Time);holds_at(neg(believe(Agent, bCanJump(Surface18, Surface29))), Time);holds_at(neg(believe(Agent, bCanJump(Surface29, Surface310))), Time);holds_at(neg(believe(Agent, bOn(Food11, Surface310))), Time);not(equals(Belief, bSatiated(Agent)));not(equals(Plan, p2));not(equals(Time, 4))), selectedPlan(Agent, Belief, Plan, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(believe(Agent, bCanJump(Surface1, Surface2)),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6177).
axiom(holds_at(believe(Agent, bCanJump(Surface1, Surface2)), Time),
   
    [  (holds_at(neg(believe(Agent, bOn(Agent, Surface18))), Time);holds_at(neg(believe(Agent, bCanJump(Surface18, Surface29))), Time);holds_at(neg(believe(Agent, bCanJump(Surface29, Surface310))), Time);holds_at(neg(believe(Agent, bOn(Food11, Surface310))), Time);not(equals(Belief, bSatiated(Agent)));not(equals(Plan, p2));not(equals(Time, 4))),
      selectedPlan(Agent, Belief, Plan, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6177).

 /*  holds_at(believe(Agent, bCanJump(Surface2, Surface3)), Time) :-
       (   not(holds_at(believe(Agent, bOn(Agent, Surface18)),
                        Time))
       ;   not(holds_at(believe(Agent,
                                bCanJump(Surface18, Surface29)),
                        Time))
       ;   not(holds_at(believe(Agent,
                                bCanJump(Surface29, Surface310)),
                        Time))
       ;   not(holds_at(believe(Agent, bOn(Food11, Surface310)),
                        Time))
       ;   not(equals(Belief, bSatiated(Agent)))
       ;   not(equals(Plan, p2))
       ;   not(equals(Time, 4))
       ),
       selectedPlan(Agent, Belief, Plan, Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6177).

 /*  [(holds_at(neg(believe(Agent, bOn(Agent, Surface18))), Time);holds_at(neg(believe(Agent, bCanJump(Surface18, Surface29))), Time);holds_at(neg(believe(Agent, bCanJump(Surface29, Surface310))), Time);holds_at(neg(believe(Agent, bOn(Food11, Surface310))), Time);not(equals(Belief, bSatiated(Agent)));not(equals(Plan, p2));not(equals(Time, 4))), selectedPlan(Agent, Belief, Plan, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(believe(Agent, bCanJump(Surface2, Surface3)),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6177).
axiom(holds_at(believe(Agent, bCanJump(Surface2, Surface3)), Time),
   
    [  (holds_at(neg(believe(Agent, bOn(Agent, Surface18))), Time);holds_at(neg(believe(Agent, bCanJump(Surface18, Surface29))), Time);holds_at(neg(believe(Agent, bCanJump(Surface29, Surface310))), Time);holds_at(neg(believe(Agent, bOn(Food11, Surface310))), Time);not(equals(Belief, bSatiated(Agent)));not(equals(Plan, p2));not(equals(Time, 4))),
      selectedPlan(Agent, Belief, Plan, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6177).

 /*  holds_at(believe(Agent, bOn(Food, Surface3)), Time) :-
       (   not(holds_at(believe(Agent, bOn(Agent, Surface18)),
                        Time))
       ;   not(holds_at(believe(Agent,
                                bCanJump(Surface18, Surface29)),
                        Time))
       ;   not(holds_at(believe(Agent,
                                bCanJump(Surface29, Surface310)),
                        Time))
       ;   not(holds_at(believe(Agent, bOn(Food11, Surface310)),
                        Time))
       ;   not(equals(Belief, bSatiated(Agent)))
       ;   not(equals(Plan, p2))
       ;   not(equals(Time, 4))
       ),
       selectedPlan(Agent, Belief, Plan, Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6177).

 /*  [(holds_at(neg(believe(Agent, bOn(Agent, Surface18))), Time);holds_at(neg(believe(Agent, bCanJump(Surface18, Surface29))), Time);holds_at(neg(believe(Agent, bCanJump(Surface29, Surface310))), Time);holds_at(neg(believe(Agent, bOn(Food11, Surface310))), Time);not(equals(Belief, bSatiated(Agent)));not(equals(Plan, p2));not(equals(Time, 4))), selectedPlan(Agent, Belief, Plan, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(believe(Agent, bOn(Food, Surface3)),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6177).
axiom(holds_at(believe(Agent, bOn(Food, Surface3)), Time),
   
    [  (holds_at(neg(believe(Agent, bOn(Agent, Surface18))), Time);holds_at(neg(believe(Agent, bCanJump(Surface18, Surface29))), Time);holds_at(neg(believe(Agent, bCanJump(Surface29, Surface310))), Time);holds_at(neg(believe(Agent, bOn(Food11, Surface310))), Time);not(equals(Belief, bSatiated(Agent)));not(equals(Plan, p2));not(equals(Time, 4))),
      selectedPlan(Agent, Belief, Plan, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6177).

 /*  holds_at(believe(Agent, bOn(Agent, Surface18)), Time) :-
       (   not(holds_at(believe(Agent, bOn(Agent, Surface1)),
                        Time))
       ;   not(holds_at(believe(Agent,
                                bCanJump(Surface1, Surface2)),
                        Time))
       ;   not(holds_at(believe(Agent,
                                bCanJump(Surface2, Surface3)),
                        Time))
       ;   not(holds_at(believe(Agent, bOn(Food, Surface3)),
                        Time))
       ;   not(equals(Belief, bSatiated(Agent)))
       ;   not(equals(Plan, p1))
       ;   not(equals(Time, 0))
       ),
       selectedPlan(Agent, Belief, Plan, Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6177).

 /*  [(holds_at(neg(believe(Agent, bOn(Agent, Surface1))), Time);holds_at(neg(believe(Agent, bCanJump(Surface1, Surface2))), Time);holds_at(neg(believe(Agent, bCanJump(Surface2, Surface3))), Time);holds_at(neg(believe(Agent, bOn(Food, Surface3))), Time);not(equals(Belief, bSatiated(Agent)));not(equals(Plan, p1));not(equals(Time, 0))), selectedPlan(Agent, Belief, Plan, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(believe(Agent, bOn(Agent, Surface18)),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6177).
axiom(holds_at(believe(Agent, bOn(Agent, Surface18)), Time),
   
    [  (holds_at(neg(believe(Agent, bOn(Agent, Surface1))), Time);holds_at(neg(believe(Agent, bCanJump(Surface1, Surface2))), Time);holds_at(neg(believe(Agent, bCanJump(Surface2, Surface3))), Time);holds_at(neg(believe(Agent, bOn(Food, Surface3))), Time);not(equals(Belief, bSatiated(Agent)));not(equals(Plan, p1));not(equals(Time, 0))),
      selectedPlan(Agent, Belief, Plan, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6177).

 /*  holds_at(believe(Agent, bCanJump(Surface18, Surface29)), Time) :-
       (   not(holds_at(believe(Agent, bOn(Agent, Surface1)),
                        Time))
       ;   not(holds_at(believe(Agent,
                                bCanJump(Surface1, Surface2)),
                        Time))
       ;   not(holds_at(believe(Agent,
                                bCanJump(Surface2, Surface3)),
                        Time))
       ;   not(holds_at(believe(Agent, bOn(Food, Surface3)),
                        Time))
       ;   not(equals(Belief, bSatiated(Agent)))
       ;   not(equals(Plan, p1))
       ;   not(equals(Time, 0))
       ),
       selectedPlan(Agent, Belief, Plan, Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6177).

 /*  [(holds_at(neg(believe(Agent, bOn(Agent, Surface1))), Time);holds_at(neg(believe(Agent, bCanJump(Surface1, Surface2))), Time);holds_at(neg(believe(Agent, bCanJump(Surface2, Surface3))), Time);holds_at(neg(believe(Agent, bOn(Food, Surface3))), Time);not(equals(Belief, bSatiated(Agent)));not(equals(Plan, p1));not(equals(Time, 0))), selectedPlan(Agent, Belief, Plan, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(believe(Agent, bCanJump(Surface18, Surface29)),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6177).
axiom(holds_at(believe(Agent, bCanJump(Surface18, Surface29)), Time),
   
    [  (holds_at(neg(believe(Agent, bOn(Agent, Surface1))), Time);holds_at(neg(believe(Agent, bCanJump(Surface1, Surface2))), Time);holds_at(neg(believe(Agent, bCanJump(Surface2, Surface3))), Time);holds_at(neg(believe(Agent, bOn(Food, Surface3))), Time);not(equals(Belief, bSatiated(Agent)));not(equals(Plan, p1));not(equals(Time, 0))),
      selectedPlan(Agent, Belief, Plan, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6177).

 /*  holds_at(believe(Agent, bCanJump(Surface29, Surface310)), Time) :-
       (   not(holds_at(believe(Agent, bOn(Agent, Surface1)),
                        Time))
       ;   not(holds_at(believe(Agent,
                                bCanJump(Surface1, Surface2)),
                        Time))
       ;   not(holds_at(believe(Agent,
                                bCanJump(Surface2, Surface3)),
                        Time))
       ;   not(holds_at(believe(Agent, bOn(Food, Surface3)),
                        Time))
       ;   not(equals(Belief, bSatiated(Agent)))
       ;   not(equals(Plan, p1))
       ;   not(equals(Time, 0))
       ),
       selectedPlan(Agent, Belief, Plan, Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6177).

 /*  [(holds_at(neg(believe(Agent, bOn(Agent, Surface1))), Time);holds_at(neg(believe(Agent, bCanJump(Surface1, Surface2))), Time);holds_at(neg(believe(Agent, bCanJump(Surface2, Surface3))), Time);holds_at(neg(believe(Agent, bOn(Food, Surface3))), Time);not(equals(Belief, bSatiated(Agent)));not(equals(Plan, p1));not(equals(Time, 0))), selectedPlan(Agent, Belief, Plan, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(believe(Agent,
                           bCanJump(Surface29, Surface310)),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6177).
axiom(holds_at(believe(Agent, bCanJump(Surface29, Surface310)), Time),
   
    [  (holds_at(neg(believe(Agent, bOn(Agent, Surface1))), Time);holds_at(neg(believe(Agent, bCanJump(Surface1, Surface2))), Time);holds_at(neg(believe(Agent, bCanJump(Surface2, Surface3))), Time);holds_at(neg(believe(Agent, bOn(Food, Surface3))), Time);not(equals(Belief, bSatiated(Agent)));not(equals(Plan, p1));not(equals(Time, 0))),
      selectedPlan(Agent, Belief, Plan, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6177).

 /*  holds_at(believe(Agent, bOn(Food11, Surface310)), Time) :-
       (   not(holds_at(believe(Agent, bOn(Agent, Surface1)),
                        Time))
       ;   not(holds_at(believe(Agent,
                                bCanJump(Surface1, Surface2)),
                        Time))
       ;   not(holds_at(believe(Agent,
                                bCanJump(Surface2, Surface3)),
                        Time))
       ;   not(holds_at(believe(Agent, bOn(Food, Surface3)),
                        Time))
       ;   not(equals(Belief, bSatiated(Agent)))
       ;   not(equals(Plan, p1))
       ;   not(equals(Time, 0))
       ),
       selectedPlan(Agent, Belief, Plan, Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6177).

 /*  [(holds_at(neg(believe(Agent, bOn(Agent, Surface1))), Time);holds_at(neg(believe(Agent, bCanJump(Surface1, Surface2))), Time);holds_at(neg(believe(Agent, bCanJump(Surface2, Surface3))), Time);holds_at(neg(believe(Agent, bOn(Food, Surface3))), Time);not(equals(Belief, bSatiated(Agent)));not(equals(Plan, p1));not(equals(Time, 0))), selectedPlan(Agent, Belief, Plan, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(believe(Agent, bOn(Food11, Surface310)),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6177).
axiom(holds_at(believe(Agent, bOn(Food11, Surface310)), Time),
   
    [  (holds_at(neg(believe(Agent, bOn(Agent, Surface1))), Time);holds_at(neg(believe(Agent, bCanJump(Surface1, Surface2))), Time);holds_at(neg(believe(Agent, bCanJump(Surface2, Surface3))), Time);holds_at(neg(believe(Agent, bOn(Food, Surface3))), Time);not(equals(Belief, bSatiated(Agent)));not(equals(Plan, p1));not(equals(Time, 0))),
      selectedPlan(Agent, Belief, Plan, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6177).

 /*  exists([Surface1, Surface2, Surface3, Food],  (holds_at(believe(Agent, bOn(Agent, Surface1)), Time), holds_at(believe(Agent, bCanJump(Surface1, Surface2)), Time), holds_at(believe(Agent, bCanJump(Surface2, Surface3)), Time), holds_at(believe(Agent, bOn(Food, Surface3)), Time), equals(Belief, bSatiated(Agent)), equals(Plan, p1), equals(Time, 0)));exists([Surface18, Surface29, Surface310, Food11],  (holds_at(believe(Agent, bOn(Agent, Surface18)), Time), holds_at(believe(Agent, bCanJump(Surface18, Surface29)), Time), holds_at(believe(Agent, bCanJump(Surface29, Surface310)), Time), holds_at(believe(Agent, bOn(Food11, Surface310)), Time), equals(Belief, bSatiated(Agent)), equals(Plan, p2), equals(Time, 4))) ->
       selectedPlan(Agent, Belief, Plan, Time).
 */

 /*  selectedPlan(Agent, Belief, Plan, Time) :-
       (   holds_at(believe(Agent, bOn(Agent, Surface1)),
                    Time),
           holds_at(believe(Agent, bCanJump(Surface1, Surface2)),
                    Time),
           holds_at(believe(Agent, bCanJump(Surface2, Surface3)),
                    Time),
           holds_at(believe(Agent, bOn(Food, Surface3)),
                    Time),
           equals(Belief, bSatiated(Agent)),
           equals(Plan, p1),
           equals(Time, 0)
       ;   holds_at(believe(Agent, bOn(Agent, Surface18)),
                    Time),
           holds_at(believe(Agent,
                            bCanJump(Surface18, Surface29)),
                    Time),
           holds_at(believe(Agent,
                            bCanJump(Surface29, Surface310)),
                    Time),
           holds_at(believe(Agent, bOn(Food11, Surface310)),
                    Time),
           equals(Belief, bSatiated(Agent)),
           equals(Plan, p2),
           equals(Time, 4)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6177).

 /*  [(holds_at(believe(Agent, bOn(Agent, Surface1)), Time), holds_at(believe(Agent, bCanJump(Surface1, Surface2)), Time), holds_at(believe(Agent, bCanJump(Surface2, Surface3)), Time), holds_at(believe(Agent, bOn(Food, Surface3)), Time), equals(Belief, bSatiated(Agent)), equals(Plan, p1), equals(Time, 0);holds_at(believe(Agent, bOn(Agent, Surface18)), Time), holds_at(believe(Agent, bCanJump(Surface18, Surface29)), Time), holds_at(believe(Agent, bCanJump(Surface29, Surface310)), Time), holds_at(believe(Agent, bOn(Food11, Surface310)), Time), equals(Belief, bSatiated(Agent)), equals(Plan, p2), equals(Time, 4))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          selectedPlan(Agent, Belief, Plan, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6177).
axiom(selectedPlan(Agent, Belief, Plan, Time),
   
    [  (holds_at(believe(Agent, bOn(Agent, Surface1)), Time), holds_at(believe(Agent, bCanJump(Surface1, Surface2)), Time), holds_at(believe(Agent, bCanJump(Surface2, Surface3)), Time), holds_at(believe(Agent, bOn(Food, Surface3)), Time), equals(Belief, bSatiated(Agent)), equals(Plan, p1), equals(Time, 0);holds_at(believe(Agent, bOn(Agent, Surface18)), Time), holds_at(believe(Agent, bCanJump(Surface18, Surface29)), Time), holds_at(believe(Agent, bCanJump(Surface29, Surface310)), Time), holds_at(believe(Agent, bOn(Food11, Surface310)), Time), equals(Belief, bSatiated(Agent)), equals(Plan, p2), equals(Time, 4))
    ]).

 /*  not(holds_at(believe(Agent, bOn(Agent, Surface1)), Time)) :-
       ( holds_at(believe(Agent, bCanJump(Surface1, Surface2)),
                  Time),
         holds_at(believe(Agent, bCanJump(Surface2, Surface3)),
                  Time),
         holds_at(believe(Agent, bOn(Food, Surface3)), Time),
         equals(Belief, bSatiated(Agent)),
         equals(Plan, p1),
         equals(Time, 0)
       ),
       not(selectedPlan(Agent, Belief, Plan, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6177).

 /*  [holds_at(believe(Agent, bCanJump(Surface1, Surface2)), Time), holds_at(believe(Agent, bCanJump(Surface2, Surface3)), Time), holds_at(believe(Agent, bOn(Food, Surface3)), Time), equals(Belief, bSatiated(Agent)), equals(Plan, p1), equals(Time, 0), not(selectedPlan(Agent, Belief, Plan, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(believe(Agent, bOn(Agent, Surface1))),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6177).
axiom(holds_at(neg(believe(Agent, bOn(Agent, Surface1))), Time),
   
    [ holds_at(believe(Agent, bCanJump(Surface1, Surface2)),
               Time),
      holds_at(believe(Agent, bCanJump(Surface2, Surface3)),
               Time),
      holds_at(believe(Agent, bOn(Food, Surface3)), Time),
      equals(Belief, bSatiated(Agent)),
      equals(Plan, p1),
      equals(Time, 0),
      not(selectedPlan(Agent, Belief, Plan, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6177).

 /*  not(holds_at(believe(Agent, bCanJump(Surface1, Surface2)), Time)) :-
       ( holds_at(believe(Agent, bCanJump(Surface2, Surface3)),
                  Time),
         holds_at(believe(Agent, bOn(Food, Surface3)), Time),
         equals(Belief, bSatiated(Agent)),
         equals(Plan, p1),
         equals(Time, 0)
       ),
       holds_at(believe(Agent, bOn(Agent, Surface1)), Time),
       not(selectedPlan(Agent, Belief, Plan, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6177).

 /*  [holds_at(believe(Agent, bCanJump(Surface2, Surface3)), Time), holds_at(believe(Agent, bOn(Food, Surface3)), Time), equals(Belief, bSatiated(Agent)), equals(Plan, p1), equals(Time, 0), holds_at(believe(Agent, bOn(Agent, Surface1)), Time), not(selectedPlan(Agent, Belief, Plan, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(believe(Agent,
                               bCanJump(Surface1, Surface2))),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6177).
axiom(holds_at(neg(believe(Agent, bCanJump(Surface1, Surface2))), Time),
   
    [ holds_at(believe(Agent, bCanJump(Surface2, Surface3)),
               Time),
      holds_at(believe(Agent, bOn(Food, Surface3)), Time),
      equals(Belief, bSatiated(Agent)),
      equals(Plan, p1),
      equals(Time, 0),
      holds_at(believe(Agent, bOn(Agent, Surface1)),
               Time),
      not(selectedPlan(Agent, Belief, Plan, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6177).

 /*  not(holds_at(believe(Agent, bCanJump(Surface2, Surface3)), Time)) :-
       ( holds_at(believe(Agent, bOn(Food, Surface3)), Time),
         equals(Belief, bSatiated(Agent)),
         equals(Plan, p1),
         equals(Time, 0)
       ),
       holds_at(believe(Agent, bCanJump(Surface1, Surface2)),
                Time),
       holds_at(believe(Agent, bOn(Agent, Surface1)), Time),
       not(selectedPlan(Agent, Belief, Plan, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6177).

 /*  [holds_at(believe(Agent, bOn(Food, Surface3)), Time), equals(Belief, bSatiated(Agent)), equals(Plan, p1), equals(Time, 0), holds_at(believe(Agent, bCanJump(Surface1, Surface2)), Time), holds_at(believe(Agent, bOn(Agent, Surface1)), Time), not(selectedPlan(Agent, Belief, Plan, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(believe(Agent,
                               bCanJump(Surface2, Surface3))),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6177).
axiom(holds_at(neg(believe(Agent, bCanJump(Surface2, Surface3))), Time),
   
    [ holds_at(believe(Agent, bOn(Food, Surface3)), Time),
      equals(Belief, bSatiated(Agent)),
      equals(Plan, p1),
      equals(Time, 0),
      holds_at(believe(Agent, bCanJump(Surface1, Surface2)),
               Time),
      holds_at(believe(Agent, bOn(Agent, Surface1)),
               Time),
      not(selectedPlan(Agent, Belief, Plan, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6177).

 /*  not(holds_at(believe(Agent, bOn(Food, Surface3)), Time)) :-
       ( equals(Belief, bSatiated(Agent)),
         equals(Plan, p1),
         equals(Time, 0)
       ),
       holds_at(believe(Agent, bCanJump(Surface2, Surface3)),
                Time),
       holds_at(believe(Agent, bCanJump(Surface1, Surface2)),
                Time),
       holds_at(believe(Agent, bOn(Agent, Surface1)), Time),
       not(selectedPlan(Agent, Belief, Plan, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6177).

 /*  [equals(Belief, bSatiated(Agent)), equals(Plan, p1), equals(Time, 0), holds_at(believe(Agent, bCanJump(Surface2, Surface3)), Time), holds_at(believe(Agent, bCanJump(Surface1, Surface2)), Time), holds_at(believe(Agent, bOn(Agent, Surface1)), Time), not(selectedPlan(Agent, Belief, Plan, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(believe(Agent, bOn(Food, Surface3))),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6177).
axiom(holds_at(neg(believe(Agent, bOn(Food, Surface3))), Time),
   
    [ equals(Belief, bSatiated(Agent)),
      equals(Plan, p1),
      equals(Time, 0),
      holds_at(believe(Agent, bCanJump(Surface2, Surface3)),
               Time),
      holds_at(believe(Agent, bCanJump(Surface1, Surface2)),
               Time),
      holds_at(believe(Agent, bOn(Agent, Surface1)),
               Time),
      not(selectedPlan(Agent, Belief, Plan, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6177).

 /*  not(holds_at(believe(Agent, bOn(Agent, Surface18)), Time)) :-
       ( holds_at(believe(Agent, bCanJump(Surface18, Surface29)),
                  Time),
         holds_at(believe(Agent, bCanJump(Surface29, Surface310)),
                  Time),
         holds_at(believe(Agent, bOn(Food11, Surface310)),
                  Time),
         equals(Belief, bSatiated(Agent)),
         equals(Plan, p2),
         equals(Time, 4)
       ),
       not(selectedPlan(Agent, Belief, Plan, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6177).

 /*  [holds_at(believe(Agent, bCanJump(Surface18, Surface29)), Time), holds_at(believe(Agent, bCanJump(Surface29, Surface310)), Time), holds_at(believe(Agent, bOn(Food11, Surface310)), Time), equals(Belief, bSatiated(Agent)), equals(Plan, p2), equals(Time, 4), not(selectedPlan(Agent, Belief, Plan, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(believe(Agent, bOn(Agent, Surface18))),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6177).
axiom(holds_at(neg(believe(Agent, bOn(Agent, Surface18))), Time),
   
    [ holds_at(believe(Agent, bCanJump(Surface18, Surface29)),
               Time),
      holds_at(believe(Agent, bCanJump(Surface29, Surface310)),
               Time),
      holds_at(believe(Agent, bOn(Food11, Surface310)),
               Time),
      equals(Belief, bSatiated(Agent)),
      equals(Plan, p2),
      equals(Time, 4),
      not(selectedPlan(Agent, Belief, Plan, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6177).

 /*  not(holds_at(believe(Agent, bCanJump(Surface18, Surface29)), Time)) :-
       ( holds_at(believe(Agent, bCanJump(Surface29, Surface310)),
                  Time),
         holds_at(believe(Agent, bOn(Food11, Surface310)),
                  Time),
         equals(Belief, bSatiated(Agent)),
         equals(Plan, p2),
         equals(Time, 4)
       ),
       holds_at(believe(Agent, bOn(Agent, Surface18)), Time),
       not(selectedPlan(Agent, Belief, Plan, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6177).

 /*  [holds_at(believe(Agent, bCanJump(Surface29, Surface310)), Time), holds_at(believe(Agent, bOn(Food11, Surface310)), Time), equals(Belief, bSatiated(Agent)), equals(Plan, p2), equals(Time, 4), holds_at(believe(Agent, bOn(Agent, Surface18)), Time), not(selectedPlan(Agent, Belief, Plan, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(believe(Agent,
                               bCanJump(Surface18, Surface29))),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6177).
axiom(holds_at(neg(believe(Agent, bCanJump(Surface18, Surface29))), Time),
   
    [ holds_at(believe(Agent, bCanJump(Surface29, Surface310)),
               Time),
      holds_at(believe(Agent, bOn(Food11, Surface310)),
               Time),
      equals(Belief, bSatiated(Agent)),
      equals(Plan, p2),
      equals(Time, 4),
      holds_at(believe(Agent, bOn(Agent, Surface18)),
               Time),
      not(selectedPlan(Agent, Belief, Plan, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6177).

 /*  not(holds_at(believe(Agent, bCanJump(Surface29, Surface310)), Time)) :-
       ( holds_at(believe(Agent, bOn(Food11, Surface310)),
                  Time),
         equals(Belief, bSatiated(Agent)),
         equals(Plan, p2),
         equals(Time, 4)
       ),
       holds_at(believe(Agent, bCanJump(Surface18, Surface29)),
                Time),
       holds_at(believe(Agent, bOn(Agent, Surface18)), Time),
       not(selectedPlan(Agent, Belief, Plan, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6177).

 /*  [holds_at(believe(Agent, bOn(Food11, Surface310)), Time), equals(Belief, bSatiated(Agent)), equals(Plan, p2), equals(Time, 4), holds_at(believe(Agent, bCanJump(Surface18, Surface29)), Time), holds_at(believe(Agent, bOn(Agent, Surface18)), Time), not(selectedPlan(Agent, Belief, Plan, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(believe(Agent,
                               bCanJump(Surface29, Surface310))),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6177).
axiom(holds_at(neg(believe(Agent, bCanJump(Surface29, Surface310))), Time),
   
    [ holds_at(believe(Agent, bOn(Food11, Surface310)),
               Time),
      equals(Belief, bSatiated(Agent)),
      equals(Plan, p2),
      equals(Time, 4),
      holds_at(believe(Agent, bCanJump(Surface18, Surface29)),
               Time),
      holds_at(believe(Agent, bOn(Agent, Surface18)),
               Time),
      not(selectedPlan(Agent, Belief, Plan, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6177).

 /*  not(holds_at(believe(Agent, bOn(Food11, Surface310)), Time)) :-
       ( equals(Belief, bSatiated(Agent)),
         equals(Plan, p2),
         equals(Time, 4)
       ),
       holds_at(believe(Agent, bCanJump(Surface29, Surface310)),
                Time),
       holds_at(believe(Agent, bCanJump(Surface18, Surface29)),
                Time),
       holds_at(believe(Agent, bOn(Agent, Surface18)), Time),
       not(selectedPlan(Agent, Belief, Plan, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6177).

 /*  [equals(Belief, bSatiated(Agent)), equals(Plan, p2), equals(Time, 4), holds_at(believe(Agent, bCanJump(Surface29, Surface310)), Time), holds_at(believe(Agent, bCanJump(Surface18, Surface29)), Time), holds_at(believe(Agent, bOn(Agent, Surface18)), Time), not(selectedPlan(Agent, Belief, Plan, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(believe(Agent, bOn(Food11, Surface310))),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6177).
axiom(holds_at(neg(believe(Agent, bOn(Food11, Surface310))), Time),
   
    [ equals(Belief, bSatiated(Agent)),
      equals(Plan, p2),
      equals(Time, 4),
      holds_at(believe(Agent, bCanJump(Surface29, Surface310)),
               Time),
      holds_at(believe(Agent, bCanJump(Surface18, Surface29)),
               Time),
      holds_at(believe(Agent, bOn(Agent, Surface18)),
               Time),
      not(selectedPlan(Agent, Belief, Plan, Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6196
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6197).
%; SoundPlan
% [agent,belief,plan,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6199
% SoundPlan(agent,belief,plan,time) <->
% (plan=P1 ->
%  HoldsAt(Believe(agent,BCanJump(Floor,Chair)),time) &
%  HoldsAt(Believe(agent,BCanJump(Chair,Table)),time)) &
% ((plan=P1a | plan=P1b) ->
%   HoldsAt(Believe(agent,BCanJump(Chair,Table)),time)).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6204
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6199).

 /*  soundPlan(Agent, Belief, Plan, Time) <->
       ( equals(Plan, p1)->holds_at(believe(Agent, bCanJump(floor, chair)), Time), holds_at(believe(Agent, bCanJump(chair, table)), Time)
       ),
       ( equals(Plan, p1a);equals(Plan, p1b)->holds_at(believe(Agent, bCanJump(chair, table)), Time)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6199).

 /*  [soundPlan] <->
       
       [  (->),
         equals,
         p1,
         holds_at,
         believe,
         bCanJump,
         floor,
         chair,
         holds_at,
         believe,
         bCanJump,
         chair,
          (table),
          (->),
          (;),
         equals,
         p1a,
         equals,
         p1b,
         holds_at,
         believe,
         bCanJump,
         chair,
          (table)
       ].
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6199).

 /*  soundPlan(Agent, Belief, Plan, Time) ->
       ( equals(Plan, p1)->holds_at(believe(Agent, bCanJump(floor, chair)), Time), holds_at(believe(Agent, bCanJump(chair, table)), Time)
       ),
       ( equals(Plan, p1a);equals(Plan, p1b)->holds_at(believe(Agent, bCanJump(chair, table)), Time)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6199).

 /*  not(soundPlan(Agent, Belief, Plan, Time)) :-
       (   equals(Plan, p1),
           (   not(holds_at(believe(Agent, bCanJump(floor, chair)),
                            Time))
           ;   not(holds_at(believe(Agent, bCanJump(chair, table)),
                            Time))
           )
       ;   not(holds_at(believe(Agent, bCanJump(chair, table)), Time)),
           (   equals(Plan, p1a)
           ;   equals(Plan, p1b)
           )
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6199).

 /*  fix_axiom_head(Time) ->
       
       [  (equals(Plan, p1), (not(holds_at(believe(Agent, bCanJump(floor, chair)), Time));not(holds_at(believe(Agent, bCanJump(chair, table)), Time)));not(holds_at(believe(Agent, bCanJump(chair, table)), Time)), (equals(Plan, p1a);equals(Plan, p1b))),
          (->),
          (equals(Plan, p1), (holds_at(neg(believe(Agent, bCanJump(floor, chair))), Time);holds_at(neg(believe(Agent, bCanJump(chair, table))), Time));holds_at(neg(believe(Agent, bCanJump(chair, table))), Time), (equals(Plan, p1a);equals(Plan, p1b)))
       ].
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6199).

 /*  [(equals(Plan, p1), (holds_at(neg(believe(Agent, bCanJump(floor, chair))), Time);holds_at(neg(believe(Agent, bCanJump(chair, table))), Time));holds_at(neg(believe(Agent, bCanJump(chair, table))), Time), (equals(Plan, p1a);equals(Plan, p1b)))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(soundPlan(Agent, Belief, Plan, Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6199).
axiom(not(soundPlan(Agent, Belief, Plan, Time)),
   
    [  (equals(Plan, p1), (holds_at(neg(believe(Agent, bCanJump(floor, chair))), Time);holds_at(neg(believe(Agent, bCanJump(chair, table))), Time));holds_at(neg(believe(Agent, bCanJump(chair, table))), Time), (equals(Plan, p1a);equals(Plan, p1b)))
    ]).

 /*  holds_at(believe(Agent, bCanJump(floor, chair)), Time) :-
       equals(Plan, p1),
       soundPlan(Agent, Belief, Plan, Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6199).

 /*  [equals(Plan, p1), soundPlan(Agent, Belief, Plan, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(believe(Agent, bCanJump(floor, chair)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6199).
axiom(holds_at(believe(Agent, bCanJump(floor, chair)), Time),
   
    [ equals(Plan, p1),
      soundPlan(Agent, Belief, Plan, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6199).

 /*  holds_at(believe(Agent, bCanJump(chair, table)), Time) :-
       equals(Plan, p1),
       soundPlan(Agent, Belief, Plan, Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6199).

 /*  [equals(Plan, p1), soundPlan(Agent, Belief, Plan, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(believe(Agent, bCanJump(chair, table)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6199).
axiom(holds_at(believe(Agent, bCanJump(chair, table)), Time),
   
    [ equals(Plan, p1),
      soundPlan(Agent, Belief, Plan, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6199).

 /*  holds_at(believe(Agent, bCanJump(chair, table)), Time) :-
       (   equals(Plan, p1a)
       ;   equals(Plan, p1b)
       ),
       soundPlan(Agent, Belief, Plan, Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6199).

 /*  [(equals(Plan, p1a);equals(Plan, p1b)), soundPlan(Agent, Belief, Plan, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(believe(Agent, bCanJump(chair, table)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6199).
axiom(holds_at(believe(Agent, bCanJump(chair, table)), Time),
   
    [  (equals(Plan, p1a);equals(Plan, p1b)),
      soundPlan(Agent, Belief, Plan, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6199).

 /*  (equals(Plan, p1)->holds_at(believe(Agent, bCanJump(floor, chair)), Time), holds_at(believe(Agent, bCanJump(chair, table)), Time)), (equals(Plan, p1a);equals(Plan, p1b)->holds_at(believe(Agent, bCanJump(chair, table)), Time)) ->
       soundPlan(Agent, Belief, Plan, Time).
 */

 /*  soundPlan(Agent, Belief, Plan, Time) :-
       (   holds_at(believe(Agent, bCanJump(floor, chair)), Time),
           holds_at(believe(Agent, bCanJump(chair, table)), Time)
       ;   not(equals(Plan, p1))
       ),
       (   holds_at(believe(Agent, bCanJump(chair, table)), Time)
       ;   not(equals(Plan, p1a)),
           not(equals(Plan, p1b))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6199).

 /*  [(holds_at(believe(Agent, bCanJump(floor, chair)), Time), holds_at(believe(Agent, bCanJump(chair, table)), Time);not(equals(Plan, p1))),  (holds_at(believe(Agent, bCanJump(chair, table)), Time);not(equals(Plan, p1a)), not(equals(Plan, p1b)))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          soundPlan(Agent, Belief, Plan, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6199).
axiom(soundPlan(Agent, Belief, Plan, Time),
   
    [  (holds_at(believe(Agent, bCanJump(floor, chair)), Time), holds_at(believe(Agent, bCanJump(chair, table)), Time);not(equals(Plan, p1))),
       (holds_at(believe(Agent, bCanJump(chair, table)), Time);not(equals(Plan, p1a)), not(equals(Plan, p1b)))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6199).

 /*  not(holds_at(believe(Agent, bCanJump(floor, chair)), Time)) :-
       holds_at(believe(Agent, bCanJump(chair, table)), Time),
       (   holds_at(believe(Agent, bCanJump(chair, table)), Time)
       ;   not(equals(Plan, p1a)),
           not(equals(Plan, p1b))
       ),
       not(soundPlan(Agent, Belief, Plan, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6199).

 /*  [holds_at(believe(Agent, bCanJump(chair, table)), Time),  (holds_at(believe(Agent, bCanJump(chair, table)), Time);not(equals(Plan, p1a)), not(equals(Plan, p1b))), not(soundPlan(Agent, Belief, Plan, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(believe(Agent, bCanJump(floor, chair))), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6199).
axiom(holds_at(neg(believe(Agent, bCanJump(floor, chair))), Time),
   
    [ holds_at(believe(Agent, bCanJump(chair, table)), Time),
       (holds_at(believe(Agent, bCanJump(chair, table)), Time);not(equals(Plan, p1a)), not(equals(Plan, p1b))),
      not(soundPlan(Agent, Belief, Plan, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6199).

 /*  not(holds_at(believe(Agent, bCanJump(chair, table)), Time)) :-
       holds_at(believe(Agent, bCanJump(floor, chair)), Time),
       (   holds_at(believe(Agent, bCanJump(chair, table)), Time)
       ;   not(equals(Plan, p1a)),
           not(equals(Plan, p1b))
       ),
       not(soundPlan(Agent, Belief, Plan, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6199).

 /*  [holds_at(believe(Agent, bCanJump(floor, chair)), Time),  (holds_at(believe(Agent, bCanJump(chair, table)), Time);not(equals(Plan, p1a)), not(equals(Plan, p1b))), not(soundPlan(Agent, Belief, Plan, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(believe(Agent, bCanJump(chair, table))), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6199).
axiom(holds_at(neg(believe(Agent, bCanJump(chair, table))), Time),
   
    [ holds_at(believe(Agent, bCanJump(floor, chair)), Time),
       (holds_at(believe(Agent, bCanJump(chair, table)), Time);not(equals(Plan, p1a)), not(equals(Plan, p1b))),
      not(soundPlan(Agent, Belief, Plan, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6199).

 /*  not(holds_at(believe(Agent, bCanJump(chair, table)), Time)) :-
       (   holds_at(believe(Agent, bCanJump(floor, chair)), Time),
           holds_at(believe(Agent, bCanJump(chair, table)), Time)
       ;   not(equals(Plan, p1))
       ),
       not(soundPlan(Agent, Belief, Plan, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6199).

 /*  [(holds_at(believe(Agent, bCanJump(floor, chair)), Time), holds_at(believe(Agent, bCanJump(chair, table)), Time);not(equals(Plan, p1))), not(soundPlan(Agent, Belief, Plan, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(believe(Agent, bCanJump(chair, table))), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6199).
axiom(holds_at(neg(believe(Agent, bCanJump(chair, table))), Time),
   
    [  (holds_at(believe(Agent, bCanJump(floor, chair)), Time), holds_at(believe(Agent, bCanJump(chair, table)), Time);not(equals(Plan, p1))),
      not(soundPlan(Agent, Belief, Plan, Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6206
%; Gamma
% [agent,belief]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6209
% HoldsAt(Goal(agent,belief),0) <->
% (agent=Cat & belief=BSatiated(Cat)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6209).

 /*  holds_at(goal(Agent, Belief), start) <->
       equals(Agent, cat),
       equals(Belief, bSatiated(cat)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6209).

 /*  [holds_at, goal, start] <->
       [equals, cat, equals, bSatiated, cat].
 */

 /*  holds_at(goal(Agent, Belief), start) ->
       equals(Agent, cat),
       equals(Belief, bSatiated(cat)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6209).

 /*  not(holds_at(goal(Agent, Belief), start)) :-
       (   not(equals(Agent, cat))
       ;   not(equals(Belief, bSatiated(cat)))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6209).

 /*  [(not(equals(Agent, cat));not(equals(Belief, bSatiated(cat))))] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(goal(Agent, Belief)), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6209).
axiom(holds_at(neg(goal(Agent, Belief)), start),
    [(not(equals(Agent, cat));not(equals(Belief, bSatiated(cat))))]).

 /*  equals(Agent, cat), equals(Belief, bSatiated(cat)) ->
       holds_at(goal(Agent, Belief), start).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6209).

 /*  holds_at(goal(Agent, Belief), start) :-
       equals(Agent, cat),
       equals(Belief, bSatiated(cat)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6209).

 /*  [equals(Agent, cat), equals(Belief, bSatiated(cat))] ->
       ta(Ta_Param3,
          tvs1=[start],
          tvs2=[start],
          holds_at(goal(Agent, Belief), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6209).
axiom(holds_at(goal(Agent, Belief), start),
    [equals(Agent, cat), equals(Belief, bSatiated(cat))]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6212
% [agent,belief,plan]
 % !HoldsAt(Plan(agent,belief,plan),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6212).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(plan(Agent, Belief, Plan)), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6212).
axiom(holds_at(neg(plan(Agent, Belief, Plan)), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6214
% [object,surface]
 % HoldsAt(On(object,surface),0) <->
% (object=Cat & surface=Floor) |
% (object=Food1 & surface=Table) |
% (object=Food2 & surface=Shelf).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6217
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6214).

 /*  holds_at(on(Object, Surface), start) <->
       (   equals(Object, cat),
           equals(Surface, floor)
       ;   equals(Object, food1),
           equals(Surface, table)
       ;   equals(Object, food2),
           equals(Surface, shelf)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6214).

 /*  [holds_at, on, start] <->
       
       [  (;),
         equals,
         cat,
         equals,
         floor,
          (;),
         equals,
         food1,
         equals,
          (table),
         equals,
         food2,
         equals,
         shelf
       ].
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6214).

 /*  holds_at(on(Object, Surface), start) ->
       (   equals(Object, cat),
           equals(Surface, floor)
       ;   equals(Object, food1),
           equals(Surface, table)
       ;   equals(Object, food2),
           equals(Surface, shelf)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6214).

 /*  not(holds_at(on(Object, Surface), start)) :-
       (   not(equals(Object, cat))
       ;   not(equals(Surface, floor))
       ),
       (   not(equals(Object, food1))
       ;   not(equals(Surface, table))
       ),
       (   not(equals(Object, food2))
       ;   not(equals(Surface, shelf))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6214).

 /*  [(not(equals(Object, cat));not(equals(Surface, floor))),  (not(equals(Object, food1));not(equals(Surface, table))),  (not(equals(Object, food2));not(equals(Surface, shelf)))] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(on(Object, Surface)), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6214).
axiom(holds_at(neg(on(Object, Surface)), start),
   
    [  (not(equals(Object, cat));not(equals(Surface, floor))),
       (not(equals(Object, food1));not(equals(Surface, table))),
       (not(equals(Object, food2));not(equals(Surface, shelf)))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6214).

 /*  equals(Object, cat), equals(Surface, floor);equals(Object, food1), equals(Surface, table);equals(Object, food2), equals(Surface, shelf) ->
       holds_at(on(Object, Surface), start).
 */

 /*  holds_at(on(Object, Surface), start) :-
       (   equals(Object, cat),
           equals(Surface, floor)
       ;   equals(Object, food1),
           equals(Surface, table)
       ;   equals(Object, food2),
           equals(Surface, shelf)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6214).

 /*  [(equals(Object, cat), equals(Surface, floor);equals(Object, food1), equals(Surface, table);equals(Object, food2), equals(Surface, shelf))] ->
       ta(Ta_Param3,
          tvs1=[start],
          tvs2=[start],
          holds_at(on(Object, Surface), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6214).
axiom(holds_at(on(Object, Surface), start),
   
    [  (equals(Object, cat), equals(Surface, floor);equals(Object, food1), equals(Surface, table);equals(Object, food2), equals(Surface, shelf))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6219
% [surface1,surface2]
 % HoldsAt(CanJump(surface1,surface2),0) <->
% (surface1=Floor & surface2=Chair) |
% (surface1=Chair & surface2=Table) |
% (surface1=Shelf & surface2=Table).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6222
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6219).

 /*  holds_at(canJump(Surface1, Surface2), start) <->
       (   equals(Surface1, floor),
           equals(Surface2, chair)
       ;   equals(Surface1, chair),
           equals(Surface2, table)
       ;   equals(Surface1, shelf),
           equals(Surface2, table)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6219).

 /*  [holds_at, canJump, start] <->
       
       [  (;),
         equals,
         floor,
         equals,
         chair,
          (;),
         equals,
         chair,
         equals,
          (table),
         equals,
         shelf,
         equals,
          (table)
       ].
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6219).

 /*  holds_at(canJump(Surface1, Surface2), start) ->
       (   equals(Surface1, floor),
           equals(Surface2, chair)
       ;   equals(Surface1, chair),
           equals(Surface2, table)
       ;   equals(Surface1, shelf),
           equals(Surface2, table)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6219).

 /*  not(holds_at(canJump(Surface1, Surface2), start)) :-
       (   not(equals(Surface1, floor))
       ;   not(equals(Surface2, chair))
       ),
       (   not(equals(Surface1, chair))
       ;   not(equals(Surface2, table))
       ),
       (   not(equals(Surface1, shelf))
       ;   not(equals(Surface2, table))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6219).

 /*  [(not(equals(Surface1, floor));not(equals(Surface2, chair))),  (not(equals(Surface1, chair));not(equals(Surface2, table))),  (not(equals(Surface1, shelf));not(equals(Surface2, table)))] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(canJump(Surface1, Surface2)), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6219).
axiom(holds_at(neg(canJump(Surface1, Surface2)), start),
   
    [  (not(equals(Surface1, floor));not(equals(Surface2, chair))),
       (not(equals(Surface1, chair));not(equals(Surface2, table))),
       (not(equals(Surface1, shelf));not(equals(Surface2, table)))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6219).

 /*  equals(Surface1, floor), equals(Surface2, chair);equals(Surface1, chair), equals(Surface2, table);equals(Surface1, shelf), equals(Surface2, table) ->
       holds_at(canJump(Surface1, Surface2), start).
 */

 /*  holds_at(canJump(Surface1, Surface2), start) :-
       (   equals(Surface1, floor),
           equals(Surface2, chair)
       ;   equals(Surface1, chair),
           equals(Surface2, table)
       ;   equals(Surface1, shelf),
           equals(Surface2, table)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6219).

 /*  [(equals(Surface1, floor), equals(Surface2, chair);equals(Surface1, chair), equals(Surface2, table);equals(Surface1, shelf), equals(Surface2, table))] ->
       ta(Ta_Param3,
          tvs1=[start],
          tvs2=[start],
          holds_at(canJump(Surface1, Surface2), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6219).
axiom(holds_at(canJump(Surface1, Surface2), start),
   
    [  (equals(Surface1, floor), equals(Surface2, chair);equals(Surface1, chair), equals(Surface2, table);equals(Surface1, shelf), equals(Surface2, table))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6224
% [agent,object,surface]
% HoldsAt(Believe(agent,BOn(object,surface)),0) <->
% (agent=Cat & object=Cat & surface=Floor) |
% (agent=Cat & object=Food1 & surface=Table).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6227
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6226).

 /*  holds_at(believe(Agent, bOn(Object, Surface)), start) <->
       (   equals(Agent, cat),
           equals(Object, cat),
           equals(Surface, floor)
       ;   equals(Agent, cat),
           equals(Object, food1),
           equals(Surface, table)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6226).

 /*  [holds_at, believe, bOn, start] <->
       
       [  (;),
         equals,
         cat,
         equals,
         cat,
         equals,
         floor,
         equals,
         cat,
         equals,
         food1,
         equals,
          (table)
       ].
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6226).

 /*  holds_at(believe(Agent, bOn(Object, Surface)), start) ->
       (   equals(Agent, cat),
           equals(Object, cat),
           equals(Surface, floor)
       ;   equals(Agent, cat),
           equals(Object, food1),
           equals(Surface, table)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6226).

 /*  not(holds_at(believe(Agent, bOn(Object, Surface)), start)) :-
       (   not(equals(Agent, cat))
       ;   not(equals(Object, cat))
       ;   not(equals(Surface, floor))
       ),
       (   not(equals(Agent, cat))
       ;   not(equals(Object, food1))
       ;   not(equals(Surface, table))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6226).

 /*  [(not(equals(Agent, cat));not(equals(Object, cat));not(equals(Surface, floor))),  (not(equals(Agent, cat));not(equals(Object, food1));not(equals(Surface, table)))] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(believe(Agent, bOn(Object, Surface))),
                   start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6226).
axiom(holds_at(neg(believe(Agent, bOn(Object, Surface))), start),
   
    [  (not(equals(Agent, cat));not(equals(Object, cat));not(equals(Surface, floor))),
       (not(equals(Agent, cat));not(equals(Object, food1));not(equals(Surface, table)))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6226).

 /*  equals(Agent, cat), equals(Object, cat), equals(Surface, floor);equals(Agent, cat), equals(Object, food1), equals(Surface, table) ->
       holds_at(believe(Agent, bOn(Object, Surface)), start).
 */

 /*  holds_at(believe(Agent, bOn(Object, Surface)), start) :-
       (   equals(Agent, cat),
           equals(Object, cat),
           equals(Surface, floor)
       ;   equals(Agent, cat),
           equals(Object, food1),
           equals(Surface, table)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6226).

 /*  [(equals(Agent, cat), equals(Object, cat), equals(Surface, floor);equals(Agent, cat), equals(Object, food1), equals(Surface, table))] ->
       ta(Ta_Param4,
          tvs1=[start],
          tvs2=[start],
          holds_at(believe(Agent, bOn(Object, Surface)), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6226).
axiom(holds_at(believe(Agent, bOn(Object, Surface)), start),
   
    [  (equals(Agent, cat), equals(Object, cat), equals(Surface, floor);equals(Agent, cat), equals(Object, food1), equals(Surface, table))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6229
% [agent,surface1,surface2]
% HoldsAt(Believe(agent,BCanJump(surface1,surface2)),0) <->
% (agent=Cat & surface1=Floor & surface2=Chair) |
% (agent=Cat & surface1=Chair & surface2=Table) |
% (agent=Cat & surface1=Shelf & surface2=Table).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6233
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6231).

 /*  holds_at(believe(Agent, bCanJump(Surface1, Surface2)), start) <->
       (   equals(Agent, cat),
           equals(Surface1, floor),
           equals(Surface2, chair)
       ;   equals(Agent, cat),
           equals(Surface1, chair),
           equals(Surface2, table)
       ;   equals(Agent, cat),
           equals(Surface1, shelf),
           equals(Surface2, table)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6231).

 /*  [holds_at, believe, bCanJump, start] <->
       
       [  (;),
         equals,
         cat,
         equals,
         floor,
         equals,
         chair,
          (;),
         equals,
         cat,
         equals,
         chair,
         equals,
          (table),
         equals,
         cat,
         equals,
         shelf,
         equals,
          (table)
       ].
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6231).

 /*  holds_at(believe(Agent, bCanJump(Surface1, Surface2)), start) ->
       (   equals(Agent, cat),
           equals(Surface1, floor),
           equals(Surface2, chair)
       ;   equals(Agent, cat),
           equals(Surface1, chair),
           equals(Surface2, table)
       ;   equals(Agent, cat),
           equals(Surface1, shelf),
           equals(Surface2, table)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6231).

 /*  not(holds_at(believe(Agent, bCanJump(Surface1, Surface2)), start)) :-
       (   not(equals(Agent, cat))
       ;   not(equals(Surface1, floor))
       ;   not(equals(Surface2, chair))
       ),
       (   not(equals(Agent, cat))
       ;   not(equals(Surface1, chair))
       ;   not(equals(Surface2, table))
       ),
       (   not(equals(Agent, cat))
       ;   not(equals(Surface1, shelf))
       ;   not(equals(Surface2, table))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6231).

 /*  [(not(equals(Agent, cat));not(equals(Surface1, floor));not(equals(Surface2, chair))),  (not(equals(Agent, cat));not(equals(Surface1, chair));not(equals(Surface2, table))),  (not(equals(Agent, cat));not(equals(Surface1, shelf));not(equals(Surface2, table)))] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(believe(Agent,
                               bCanJump(Surface1, Surface2))),
                   start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6231).
axiom(holds_at(neg(believe(Agent, bCanJump(Surface1, Surface2))), start),
   
    [  (not(equals(Agent, cat));not(equals(Surface1, floor));not(equals(Surface2, chair))),
       (not(equals(Agent, cat));not(equals(Surface1, chair));not(equals(Surface2, table))),
       (not(equals(Agent, cat));not(equals(Surface1, shelf));not(equals(Surface2, table)))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6231).

 /*  equals(Agent, cat), equals(Surface1, floor), equals(Surface2, chair);equals(Agent, cat), equals(Surface1, chair), equals(Surface2, table);equals(Agent, cat), equals(Surface1, shelf), equals(Surface2, table) ->
       holds_at(believe(Agent, bCanJump(Surface1, Surface2)),
                start).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6231).

 /*  holds_at(believe(Agent, bCanJump(Surface1, Surface2)), start) :-
       (   equals(Agent, cat),
           equals(Surface1, floor),
           equals(Surface2, chair)
       ;   equals(Agent, cat),
           equals(Surface1, chair),
           equals(Surface2, table)
       ;   equals(Agent, cat),
           equals(Surface1, shelf),
           equals(Surface2, table)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6231).

 /*  [(equals(Agent, cat), equals(Surface1, floor), equals(Surface2, chair);equals(Agent, cat), equals(Surface1, chair), equals(Surface2, table);equals(Agent, cat), equals(Surface1, shelf), equals(Surface2, table))] ->
       ta(Ta_Param4,
          tvs1=[start],
          tvs2=[start],
          holds_at(believe(Agent, bCanJump(Surface1, Surface2)),
                   start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6231).
axiom(holds_at(believe(Agent, bCanJump(Surface1, Surface2)), start),
   
    [  (equals(Agent, cat), equals(Surface1, floor), equals(Surface2, chair);equals(Agent, cat), equals(Surface1, chair), equals(Surface2, table);equals(Agent, cat), equals(Surface1, shelf), equals(Surface2, table))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6235
% !HoldsAt(Believe(Cat,BSatiated(Cat)),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6235).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(believe(cat, bSatiated(cat))), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6235).
axiom(holds_at(neg(believe(cat, bSatiated(cat))), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6237
%; ADDED:


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6238
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6239).
% !HoldsAt(Satiated(Cat),0).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(satiated(cat)), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6239).
axiom(holds_at(neg(satiated(cat)), start),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6240
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6241).
% completion Happens
==> completion(happens).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6242
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6243).
% range time 0 7
==> range(time,0,7).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6243
% range offset 1 1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6243).
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2006/Chapter11/Lottery.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{OrtonyCloreCollins:1988,
%;   author = "Andrew Ortony and Gerald L. Clore and Allan M. Collins",
%;   year = "1988",
%;   title = "The Cognitive Structure of Emotions",
%;   address = "Cambridge",
%;   publisher = "Cambridge University Press",
%; }
%;
%; @book{Mueller:2006,
%;   author = "Erik T. Mueller",
%;   year = "2006",
%;   title = "Commonsense Reasoning",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann/Elsevier",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6279
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6280).
% option modeldiff on
:- set_ec_option(modeldiff, on).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6281
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6282).
% load foundations/Root.e
:- load_e('foundations/Root.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6282
% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6282).
:- load_e('foundations/EC.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6284
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6285).
% sort agent
==> sort(agent).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6285
% sort aboutevent
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6285).
==> sort(aboutevent).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6286
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6287).
% sort desirability: integer
==> subsort(desirability,integer).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6288
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6289).
% agent Kate, Lisa
==> t(agent,kate).
==> t(agent,lisa).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6289
% aboutevent WinLotteryKate, WinLotteryLisa
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6289).
==> t(aboutevent,winLotteryKate).
==> t(aboutevent,winLotteryLisa).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6291
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6292).
% fluent Joy(agent,aboutevent)
fluent(joy(agent,aboutevent)).
==> mpred_prop(joy(agent,aboutevent),fluent).
==> meta_argtypes(joy(agent,aboutevent)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6292
% fluent Desirability(agent,agent,aboutevent,desirability)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6292).
fluent(desirability(agent,agent,aboutevent,desirability)).
==> mpred_prop(desirability(agent,agent,aboutevent,desirability),
	       fluent).
==> meta_argtypes(desirability(agent,agent,aboutevent,desirability)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6293
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6294).
% fluent Believe(agent,aboutevent)
fluent(believe(agent,aboutevent)).
==> mpred_prop(believe(agent,aboutevent),fluent).
==> meta_argtypes(believe(agent,aboutevent)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6294
% fluent Like(agent,agent)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6294).
fluent(like(agent,agent)).
==> mpred_prop(like(agent,agent),fluent).
==> meta_argtypes(like(agent,agent)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6295
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6296).
% fluent HappyFor(agent,agent,aboutevent)
fluent(happyFor(agent,agent,aboutevent)).
==> mpred_prop(happyFor(agent,agent,aboutevent),fluent).
==> meta_argtypes(happyFor(agent,agent,aboutevent)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6297
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6298).
% event WinLottery(agent)
event(winLottery(agent)).
==> mpred_prop(winLottery(agent),event).
==> meta_argtypes(winLottery(agent)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6298
% event AddJoy(agent,aboutevent)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6298).
event(addJoy(agent,aboutevent)).
==> mpred_prop(addJoy(agent,aboutevent),event).
==> meta_argtypes(addJoy(agent,aboutevent)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6299
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6300).
% event AddHappyFor(agent,agent,aboutevent)
event(addHappyFor(agent,agent,aboutevent)).
==> mpred_prop(addHappyFor(agent,agent,aboutevent),event).
==> meta_argtypes(addHappyFor(agent,agent,aboutevent)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6301
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6302).
%; Sigma
% [agent,aboutevent,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6304
% Initiates(AddJoy(agent,aboutevent),Joy(agent,aboutevent),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6304).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(addJoy(Agent, Aboutevent),
                    joy(Agent, Aboutevent),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6304).
axiom(initiates(addJoy(Agent, Aboutevent), joy(Agent, Aboutevent), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6306
% [agent1,agent2,aboutevent,time]
% Initiates(AddHappyFor(agent1,agent2,aboutevent),
%           HappyFor(agent1,agent2,aboutevent),
%           time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6309
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6308).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(addHappyFor(Agent1, Agent2, Aboutevent),
                    happyFor(Agent1, Agent2, Aboutevent),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6308).
axiom(initiates(addHappyFor(Agent1, Agent2, Aboutevent), happyFor(Agent1, Agent2, Aboutevent), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6311
% [agent1,agent2,aboutevent,time]
% (agent1=Kate & aboutevent=WinLotteryKate) |
% (agent1=Lisa & aboutevent=WinLotteryLisa) ->
% Initiates(WinLottery(agent1),Believe(agent2,aboutevent),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6314
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6313).

 /*  [(equals(Agent1, kate), equals(Aboutevent, winLotteryKate);equals(Agent1, lisa), equals(Aboutevent, winLotteryLisa))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(winLottery(Agent1),
                    believe(Agent2, Aboutevent),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6313).
axiom(initiates(winLottery(Agent1), believe(Agent2, Aboutevent), Time),
   
    [  (equals(Agent1, kate), equals(Aboutevent, winLotteryKate);equals(Agent1, lisa), equals(Aboutevent, winLotteryLisa))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6316
%; Delta
% [agent,aboutevent,desirability,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6319
% !HoldsAt(Joy(agent,aboutevent),time) &
% HoldsAt(Desirability(agent,agent,aboutevent,desirability),time) &
% desirability=1 &
% HoldsAt(Believe(agent,aboutevent),time) ->
% Happens(AddJoy(agent,aboutevent),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6323
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6319).

 /*  holds_at(neg(joy(Agent, Aboutevent)), Time), holds_at(desirability(Agent, Agent, Aboutevent, Desirability), Time), equals(Desirability, 1), holds_at(believe(Agent, Aboutevent), Time) ->
       happens(addJoy(Agent, Aboutevent), Time).
 */

 /*  happens(addJoy(Agent, Aboutevent), Time) :-
       holds_at(neg(joy(Agent, Aboutevent)), Time),
       holds_at(desirability(Agent,
                             Agent,
                             Aboutevent,
                             Desirability),
                Time),
       equals(Desirability, 1),
       holds_at(believe(Agent, Aboutevent), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6319).

 /*  [holds_at(neg(joy(Agent, Aboutevent)), Time), holds_at(desirability(Agent, Agent, Aboutevent, Desirability), Time), equals(Desirability, 1), holds_at(believe(Agent, Aboutevent), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(addJoy(Agent, Aboutevent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6319).
axiom(happens(addJoy(Agent, Aboutevent), Time),
   
    [ holds_at(neg(joy(Agent, Aboutevent)), Time),
      holds_at(desirability(Agent,
                            Agent,
                            Aboutevent,
                            Desirability),
               Time),
      equals(Desirability, 1),
      holds_at(believe(Agent, Aboutevent), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6319).

 /*  not(holds_at(neg(joy(Agent, Aboutevent)), Time)) :-
       ( holds_at(desirability(Agent,
                               Agent,
                               Aboutevent,
                               Desirability),
                  Time),
         equals(Desirability, 1),
         holds_at(believe(Agent, Aboutevent), Time)
       ),
       not(happens(addJoy(Agent, Aboutevent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6319).

 /*  [holds_at(desirability(Agent, Agent, Aboutevent, Desirability), Time), equals(Desirability, 1), holds_at(believe(Agent, Aboutevent), Time), not(happens(addJoy(Agent, Aboutevent), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(joy(Agent, Aboutevent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6319).
axiom(holds_at(joy(Agent, Aboutevent), Time),
   
    [ holds_at(desirability(Agent,
                            Agent,
                            Aboutevent,
                            Desirability),
               Time),
      equals(Desirability, 1),
      holds_at(believe(Agent, Aboutevent), Time),
      not(happens(addJoy(Agent, Aboutevent), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6319).

 /*  not(holds_at(desirability(Agent, Agent, Aboutevent, Desirability), Time)) :-
       ( equals(Desirability, 1),
         holds_at(believe(Agent, Aboutevent), Time)
       ),
       holds_at(neg(joy(Agent, Aboutevent)), Time),
       not(happens(addJoy(Agent, Aboutevent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6319).

 /*  [equals(Desirability, 1), holds_at(believe(Agent, Aboutevent), Time), holds_at(neg(joy(Agent, Aboutevent)), Time), not(happens(addJoy(Agent, Aboutevent), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(desirability(Agent,
                                    Agent,
                                    Aboutevent,
                                    Desirability)),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6319).
axiom(holds_at(neg(desirability(Agent, Agent, Aboutevent, Desirability)), Time),
   
    [ equals(Desirability, 1),
      holds_at(believe(Agent, Aboutevent), Time),
      holds_at(neg(joy(Agent, Aboutevent)), Time),
      not(happens(addJoy(Agent, Aboutevent), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6319).

 /*  not(holds_at(believe(Agent, Aboutevent), Time)) :-
       equals(Desirability, 1),
       holds_at(desirability(Agent,
                             Agent,
                             Aboutevent,
                             Desirability),
                Time),
       holds_at(neg(joy(Agent, Aboutevent)), Time),
       not(happens(addJoy(Agent, Aboutevent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6319).

 /*  [equals(Desirability, 1), holds_at(desirability(Agent, Agent, Aboutevent, Desirability), Time), holds_at(neg(joy(Agent, Aboutevent)), Time), not(happens(addJoy(Agent, Aboutevent), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(believe(Agent, Aboutevent)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6319).
axiom(holds_at(neg(believe(Agent, Aboutevent)), Time),
   
    [ equals(Desirability, 1),
      holds_at(desirability(Agent,
                            Agent,
                            Aboutevent,
                            Desirability),
               Time),
      holds_at(neg(joy(Agent, Aboutevent)), Time),
      not(happens(addJoy(Agent, Aboutevent), Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6325
% [agent1,agent2,aboutevent,desirability1,desirability2,time]
% !HoldsAt(HappyFor(agent1,agent2,aboutevent),time) &
% HoldsAt(Desirability(agent1,agent2,aboutevent,desirability1),time) &
% desirability1=1 &
% HoldsAt(Desirability(agent1,agent1,aboutevent,desirability2),time) &
% desirability2=1 &
% HoldsAt(Like(agent1,agent2),time) &
% HoldsAt(Believe(agent1,aboutevent),time) &
% agent1 != agent2 ->
% Happens(AddHappyFor(agent1,agent2,aboutevent),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6334
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6327).

 /*  holds_at(neg(happyFor(Agent1, Agent2, Aboutevent)), Time), holds_at(desirability(Agent1, Agent2, Aboutevent, Desirability1), Time), equals(Desirability1, 1), holds_at(desirability(Agent1, Agent1, Aboutevent, Desirability2), Time), equals(Desirability2, 1), holds_at(like(Agent1, Agent2), Time), holds_at(believe(Agent1, Aboutevent), Time), diff(Agent1, Agent2) ->
       happens(addHappyFor(Agent1, Agent2, Aboutevent),
               Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6327).

 /*  happens(addHappyFor(Agent1, Agent2, Aboutevent), Time) :-
       holds_at(neg(happyFor(Agent1, Agent2, Aboutevent)),
                Time),
       holds_at(desirability(Agent1,
                             Agent2,
                             Aboutevent,
                             Desirability1),
                Time),
       equals(Desirability1, 1),
       holds_at(desirability(Agent1,
                             Agent1,
                             Aboutevent,
                             Desirability2),
                Time),
       equals(Desirability2, 1),
       holds_at(like(Agent1, Agent2), Time),
       holds_at(believe(Agent1, Aboutevent), Time),
       diff(Agent1, Agent2).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6327).

 /*  [holds_at(neg(happyFor(Agent1, Agent2, Aboutevent)), Time), holds_at(desirability(Agent1, Agent2, Aboutevent, Desirability1), Time), equals(Desirability1, 1), holds_at(desirability(Agent1, Agent1, Aboutevent, Desirability2), Time), equals(Desirability2, 1), holds_at(like(Agent1, Agent2), Time), holds_at(believe(Agent1, Aboutevent), Time), diff(Agent1, Agent2)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(addHappyFor(Agent1, Agent2, Aboutevent),
                  Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6327).
axiom(happens(addHappyFor(Agent1, Agent2, Aboutevent), Time),
   
    [ holds_at(neg(happyFor(Agent1, Agent2, Aboutevent)),
               Time),
      holds_at(desirability(Agent1,
                            Agent2,
                            Aboutevent,
                            Desirability1),
               Time),
      equals(Desirability1, 1),
      holds_at(desirability(Agent1,
                            Agent1,
                            Aboutevent,
                            Desirability2),
               Time),
      equals(Desirability2, 1),
      holds_at(like(Agent1, Agent2), Time),
      holds_at(believe(Agent1, Aboutevent), Time),
      diff(Agent1, Agent2)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6327).

 /*  not(holds_at(neg(happyFor(Agent1, Agent2, Aboutevent)), Time)) :-
       ( holds_at(desirability(Agent1,
                               Agent2,
                               Aboutevent,
                               Desirability1),
                  Time),
         equals(Desirability1, 1),
         holds_at(desirability(Agent1,
                               Agent1,
                               Aboutevent,
                               Desirability2),
                  Time),
         equals(Desirability2, 1),
         holds_at(like(Agent1, Agent2), Time),
         holds_at(believe(Agent1, Aboutevent), Time),
         diff(Agent1, Agent2)
       ),
       not(happens(addHappyFor(Agent1, Agent2, Aboutevent),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6327).

 /*  [holds_at(desirability(Agent1, Agent2, Aboutevent, Desirability1), Time), equals(Desirability1, 1), holds_at(desirability(Agent1, Agent1, Aboutevent, Desirability2), Time), equals(Desirability2, 1), holds_at(like(Agent1, Agent2), Time), holds_at(believe(Agent1, Aboutevent), Time), diff(Agent1, Agent2), not(happens(addHappyFor(Agent1, Agent2, Aboutevent), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(happyFor(Agent1, Agent2, Aboutevent),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6327).
axiom(holds_at(happyFor(Agent1, Agent2, Aboutevent), Time),
   
    [ holds_at(desirability(Agent1,
                            Agent2,
                            Aboutevent,
                            Desirability1),
               Time),
      equals(Desirability1, 1),
      holds_at(desirability(Agent1,
                            Agent1,
                            Aboutevent,
                            Desirability2),
               Time),
      equals(Desirability2, 1),
      holds_at(like(Agent1, Agent2), Time),
      holds_at(believe(Agent1, Aboutevent), Time),
      diff(Agent1, Agent2),
      not(happens(addHappyFor(Agent1, Agent2, Aboutevent),
                  Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6327).

 /*  not(holds_at(desirability(Agent1, Agent2, Aboutevent, Desirability1), Time)) :-
       ( equals(Desirability1, 1),
         holds_at(desirability(Agent1,
                               Agent1,
                               Aboutevent,
                               Desirability2),
                  Time),
         equals(Desirability2, 1),
         holds_at(like(Agent1, Agent2), Time),
         holds_at(believe(Agent1, Aboutevent), Time),
         diff(Agent1, Agent2)
       ),
       holds_at(neg(happyFor(Agent1, Agent2, Aboutevent)),
                Time),
       not(happens(addHappyFor(Agent1, Agent2, Aboutevent),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6327).

 /*  [equals(Desirability1, 1), holds_at(desirability(Agent1, Agent1, Aboutevent, Desirability2), Time), equals(Desirability2, 1), holds_at(like(Agent1, Agent2), Time), holds_at(believe(Agent1, Aboutevent), Time), diff(Agent1, Agent2), holds_at(neg(happyFor(Agent1, Agent2, Aboutevent)), Time), not(happens(addHappyFor(Agent1, Agent2, Aboutevent), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(desirability(Agent1,
                                    Agent2,
                                    Aboutevent,
                                    Desirability1)),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6327).
axiom(holds_at(neg(desirability(Agent1, Agent2, Aboutevent, Desirability1)), Time),
   
    [ equals(Desirability1, 1),
      holds_at(desirability(Agent1,
                            Agent1,
                            Aboutevent,
                            Desirability2),
               Time),
      equals(Desirability2, 1),
      holds_at(like(Agent1, Agent2), Time),
      holds_at(believe(Agent1, Aboutevent), Time),
      diff(Agent1, Agent2),
      holds_at(neg(happyFor(Agent1, Agent2, Aboutevent)),
               Time),
      not(happens(addHappyFor(Agent1, Agent2, Aboutevent),
                  Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6327).

 /*  not(holds_at(desirability(Agent1, Agent1, Aboutevent, Desirability2), Time)) :-
       ( equals(Desirability2, 1),
         holds_at(like(Agent1, Agent2), Time),
         holds_at(believe(Agent1, Aboutevent), Time),
         diff(Agent1, Agent2)
       ),
       equals(Desirability1, 1),
       holds_at(desirability(Agent1,
                             Agent2,
                             Aboutevent,
                             Desirability1),
                Time),
       holds_at(neg(happyFor(Agent1, Agent2, Aboutevent)),
                Time),
       not(happens(addHappyFor(Agent1, Agent2, Aboutevent),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6327).

 /*  [equals(Desirability2, 1), holds_at(like(Agent1, Agent2), Time), holds_at(believe(Agent1, Aboutevent), Time), diff(Agent1, Agent2), equals(Desirability1, 1), holds_at(desirability(Agent1, Agent2, Aboutevent, Desirability1), Time), holds_at(neg(happyFor(Agent1, Agent2, Aboutevent)), Time), not(happens(addHappyFor(Agent1, Agent2, Aboutevent), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(desirability(Agent1,
                                    Agent1,
                                    Aboutevent,
                                    Desirability2)),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6327).
axiom(holds_at(neg(desirability(Agent1, Agent1, Aboutevent, Desirability2)), Time),
   
    [ equals(Desirability2, 1),
      holds_at(like(Agent1, Agent2), Time),
      holds_at(believe(Agent1, Aboutevent), Time),
      diff(Agent1, Agent2),
      equals(Desirability1, 1),
      holds_at(desirability(Agent1,
                            Agent2,
                            Aboutevent,
                            Desirability1),
               Time),
      holds_at(neg(happyFor(Agent1, Agent2, Aboutevent)),
               Time),
      not(happens(addHappyFor(Agent1, Agent2, Aboutevent),
                  Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6327).

 /*  not(holds_at(like(Agent1, Agent2), Time)) :-
       ( holds_at(believe(Agent1, Aboutevent), Time),
         diff(Agent1, Agent2)
       ),
       equals(Desirability2, 1),
       holds_at(desirability(Agent1,
                             Agent1,
                             Aboutevent,
                             Desirability2),
                Time),
       equals(Desirability1, 1),
       holds_at(desirability(Agent1,
                             Agent2,
                             Aboutevent,
                             Desirability1),
                Time),
       holds_at(neg(happyFor(Agent1, Agent2, Aboutevent)),
                Time),
       not(happens(addHappyFor(Agent1, Agent2, Aboutevent),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6327).

 /*  [holds_at(believe(Agent1, Aboutevent), Time), diff(Agent1, Agent2), equals(Desirability2, 1), holds_at(desirability(Agent1, Agent1, Aboutevent, Desirability2), Time), equals(Desirability1, 1), holds_at(desirability(Agent1, Agent2, Aboutevent, Desirability1), Time), holds_at(neg(happyFor(Agent1, Agent2, Aboutevent)), Time), not(happens(addHappyFor(Agent1, Agent2, Aboutevent), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(like(Agent1, Agent2)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6327).
axiom(holds_at(neg(like(Agent1, Agent2)), Time),
   
    [ holds_at(believe(Agent1, Aboutevent), Time),
      diff(Agent1, Agent2),
      equals(Desirability2, 1),
      holds_at(desirability(Agent1,
                            Agent1,
                            Aboutevent,
                            Desirability2),
               Time),
      equals(Desirability1, 1),
      holds_at(desirability(Agent1,
                            Agent2,
                            Aboutevent,
                            Desirability1),
               Time),
      holds_at(neg(happyFor(Agent1, Agent2, Aboutevent)),
               Time),
      not(happens(addHappyFor(Agent1, Agent2, Aboutevent),
                  Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6327).

 /*  not(holds_at(believe(Agent1, Aboutevent), Time)) :-
       diff(Agent1, Agent2),
       holds_at(like(Agent1, Agent2), Time),
       equals(Desirability2, 1),
       holds_at(desirability(Agent1,
                             Agent1,
                             Aboutevent,
                             Desirability2),
                Time),
       equals(Desirability1, 1),
       holds_at(desirability(Agent1,
                             Agent2,
                             Aboutevent,
                             Desirability1),
                Time),
       holds_at(neg(happyFor(Agent1, Agent2, Aboutevent)),
                Time),
       not(happens(addHappyFor(Agent1, Agent2, Aboutevent),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6327).

 /*  [diff(Agent1, Agent2), holds_at(like(Agent1, Agent2), Time), equals(Desirability2, 1), holds_at(desirability(Agent1, Agent1, Aboutevent, Desirability2), Time), equals(Desirability1, 1), holds_at(desirability(Agent1, Agent2, Aboutevent, Desirability1), Time), holds_at(neg(happyFor(Agent1, Agent2, Aboutevent)), Time), not(happens(addHappyFor(Agent1, Agent2, Aboutevent), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(believe(Agent1, Aboutevent)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6327).
axiom(holds_at(neg(believe(Agent1, Aboutevent)), Time),
   
    [ diff(Agent1, Agent2),
      holds_at(like(Agent1, Agent2), Time),
      equals(Desirability2, 1),
      holds_at(desirability(Agent1,
                            Agent1,
                            Aboutevent,
                            Desirability2),
               Time),
      equals(Desirability1, 1),
      holds_at(desirability(Agent1,
                            Agent2,
                            Aboutevent,
                            Desirability1),
               Time),
      holds_at(neg(happyFor(Agent1, Agent2, Aboutevent)),
               Time),
      not(happens(addHappyFor(Agent1, Agent2, Aboutevent),
                  Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6336
% Happens(WinLottery(Kate),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6336).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          happens(winLottery(kate), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6336).
axiom(happens(winLottery(kate), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6338
%; Psi
% [agent1,agent2,aboutevent,desirability1,desirability2,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6341
% HoldsAt(Desirability(agent1,agent2,aboutevent,desirability1),time) &
% HoldsAt(Desirability(agent1,agent2,aboutevent,desirability2),time) ->
% desirability1 = desirability2.
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6343
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6341).

 /*  holds_at(desirability(Agent1, Agent2, Aboutevent, Desirability1), Time), holds_at(desirability(Agent1, Agent2, Aboutevent, Desirability2), Time) ->
       equals(Desirability1, Desirability2).
 */

 /*  not(holds_at(desirability(Agent1, Agent2, Aboutevent, Desirability1), Time)) :-
       holds_at(desirability(Agent1,
                             Agent2,
                             Aboutevent,
                             Desirability2),
                Time),
       not(equals(Desirability1, Desirability2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6341).

 /*  [holds_at(desirability(Agent1, Agent2, Aboutevent, Desirability2), Time), not(equals(Desirability1, Desirability2))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(desirability(Agent1,
                                    Agent2,
                                    Aboutevent,
                                    Desirability1)),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6341).
axiom(holds_at(neg(desirability(Agent1, Agent2, Aboutevent, Desirability1)), Time),
   
    [ holds_at(desirability(Agent1,
                            Agent2,
                            Aboutevent,
                            Desirability2),
               Time),
      not(equals(Desirability1, Desirability2))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6341).

 /*  not(holds_at(desirability(Agent1, Agent2, Aboutevent, Desirability2), Time)) :-
       holds_at(desirability(Agent1,
                             Agent2,
                             Aboutevent,
                             Desirability1),
                Time),
       not(equals(Desirability1, Desirability2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6341).

 /*  [holds_at(desirability(Agent1, Agent2, Aboutevent, Desirability1), Time), not(equals(Desirability1, Desirability2))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(desirability(Agent1,
                                    Agent2,
                                    Aboutevent,
                                    Desirability2)),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6341).
axiom(holds_at(neg(desirability(Agent1, Agent2, Aboutevent, Desirability2)), Time),
   
    [ holds_at(desirability(Agent1,
                            Agent2,
                            Aboutevent,
                            Desirability1),
               Time),
      not(equals(Desirability2, Desirability1))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6345
%; Gamma
% [agent,aboutevent]
 % !HoldsAt(Joy(agent,aboutevent),0).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6347
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6348).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(joy(Agent, Aboutevent)), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6348).
axiom(holds_at(neg(joy(Agent, Aboutevent)), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6348
% [agent1,agent2,aboutevent]
 % !HoldsAt(HappyFor(agent1,agent2,aboutevent),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6348).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(happyFor(Agent1, Agent2, Aboutevent)),
                   start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6348).
axiom(holds_at(neg(happyFor(Agent1, Agent2, Aboutevent)), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6349
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6350).
% [aboutevent]
 % !HoldsAt(Believe(Kate,aboutevent),0).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(believe(kate, Aboutevent)), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6350).
axiom(holds_at(neg(believe(kate, Aboutevent)), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6350
% [aboutevent]
 % !HoldsAt(Believe(Lisa,aboutevent),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6350).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(believe(lisa, Aboutevent)), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6350).
axiom(holds_at(neg(believe(lisa, Aboutevent)), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6351
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6352).
% [agent1,agent2,time]
 % HoldsAt(Like(agent1,agent2),time).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(like(Agent1, Agent2), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6352).
axiom(holds_at(like(Agent1, Agent2), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6353
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6354).
% [time]
 % HoldsAt(Desirability(Lisa,Kate,WinLotteryKate,1),time).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(desirability(lisa, kate, winLotteryKate, 1), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6354).
axiom(holds_at(desirability(lisa, kate, winLotteryKate, 1), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6354
% [time]
 % HoldsAt(Desirability(Kate,Kate,WinLotteryKate,1),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6354).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(desirability(kate, kate, winLotteryKate, 1), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6354).
axiom(holds_at(desirability(kate, kate, winLotteryKate, 1), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6355
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6356).
% [time]
 % HoldsAt(Desirability(Lisa,Lisa,WinLotteryKate,1),time).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(desirability(lisa, lisa, winLotteryKate, 1), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6356).
axiom(holds_at(desirability(lisa, lisa, winLotteryKate, 1), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6356
% [time]
 % HoldsAt(Desirability(Kate,Kate,WinLotteryLisa,0),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6356).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(desirability(kate, kate, winLotteryLisa, 0), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6356).
axiom(holds_at(desirability(kate, kate, winLotteryLisa, 0), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6357
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6358).
% [time]
 % HoldsAt(Desirability(Kate,Lisa,WinLotteryLisa,0),time).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(desirability(kate, lisa, winLotteryLisa, 0), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6358).
axiom(holds_at(desirability(kate, lisa, winLotteryLisa, 0), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6358
% [time]
 % HoldsAt(Desirability(Kate,Kate,WinLotteryLisa,0),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6358).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(desirability(kate, kate, winLotteryLisa, 0), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6358).
axiom(holds_at(desirability(kate, kate, winLotteryLisa, 0), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6359
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6360).
% [time]
 % HoldsAt(Desirability(Kate,Lisa,WinLotteryKate,0),time).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(desirability(kate, lisa, winLotteryKate, 0), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6360).
axiom(holds_at(desirability(kate, lisa, winLotteryKate, 0), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6360
% [time]
 % HoldsAt(Desirability(Lisa,Lisa,WinLotteryLisa,0),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6360).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(desirability(lisa, lisa, winLotteryLisa, 0), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6360).
axiom(holds_at(desirability(lisa, lisa, winLotteryLisa, 0), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6361
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6362).
% [time]
 % HoldsAt(Desirability(Lisa,Kate,WinLotteryLisa,1),time).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(desirability(lisa, kate, winLotteryLisa, 1), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6362).
axiom(holds_at(desirability(lisa, kate, winLotteryLisa, 1), Time),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6363
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6364).
% completion Happens
==> completion(happens).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6365
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6366).
% range time 0 3
==> range(time,0,3).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6366
% range desirability -1 1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6366).
==> range(desirability,-1,1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6367
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6368).
% range offset 1 1
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Manual/Example1a.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; deduction

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6388
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6389).
% option timediff off
:- set_ec_option(timediff, off).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6390
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6391).
% load foundations/Root.e
:- load_e('foundations/Root.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6391
% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6391).
:- load_e('foundations/EC.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6393
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6394).
% sort agent
==> sort(agent).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6395
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6396).
% fluent Awake(agent)
fluent(awake(agent)).
==> mpred_prop(awake(agent),fluent).
==> meta_argtypes(awake(agent)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6396
% event WakeUp(agent)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6396).
event(wakeUp(agent)).
==> mpred_prop(wakeUp(agent),event).
==> meta_argtypes(wakeUp(agent)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6398
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6399).
% [agent,time]
 % Initiates(WakeUp(agent),Awake(agent),time).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(wakeUp(Agent), awake(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6399).
axiom(initiates(wakeUp(Agent), awake(Agent), Time),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6400
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6401).
% agent James
==> t(agent,james).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6401
% !HoldsAt(Awake(James),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6401).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(awake(james)), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6401).
axiom(holds_at(neg(awake(james)), start),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6402
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6403).
% Delta: 
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6402
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6403).
% Happens(WakeUp(James),0).

 /*  [axiom_uses(delta, Axiom_uses_Ret)] ->
       ta(Ta_Param, tvs1=[start], tvs2=[start], happens(wakeUp(james), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6403).
axiom(happens(wakeUp(james), start),
    [axiom_uses(delta, Axiom_uses_Ret)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6404
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6405).
% completion Delta Happens
==> completion(delta).
==> completion(happens).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6406
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6407).
% range time 0 1
==> range(time,0,1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6407
% range offset 1 1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6407).
==> range(offset,1,1).
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Manual/Example1.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; deduction

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6426
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6427).
% load foundations/Root.e
:- load_e('foundations/Root.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6427
% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6427).
:- load_e('foundations/EC.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6429
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6430).
% sort agent
==> sort(agent).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6431
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6432).
% fluent Awake(agent)
fluent(awake(agent)).
==> mpred_prop(awake(agent),fluent).
==> meta_argtypes(awake(agent)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6432
% event WakeUp(agent)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6432).
event(wakeUp(agent)).
==> mpred_prop(wakeUp(agent),event).
==> meta_argtypes(wakeUp(agent)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6434
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6435).
% [agent,time]
 % Initiates(WakeUp(agent),Awake(agent),time).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(wakeUp(Agent), awake(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6435).
axiom(initiates(wakeUp(Agent), awake(Agent), Time),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6436
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6437).
% agent James
==> t(agent,james).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6437
% !HoldsAt(Awake(James),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6437).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(awake(james)), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6437).
axiom(holds_at(neg(awake(james)), start),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6438
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6439).
% Delta: 
next_axiom_uses(delta).
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6438
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6439).
% Happens(WakeUp(James),0).

 /*  [axiom_uses(delta, Axiom_uses_Ret)] ->
       ta(Ta_Param, tvs1=[start], tvs2=[start], happens(wakeUp(james), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6439).
axiom(happens(wakeUp(james), start),
    [axiom_uses(delta, Axiom_uses_Ret)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6440
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6441).
% completion Delta Happens
==> completion(delta).
==> completion(happens).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6442
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6443).
% range time 0 1
==> range(time,0,1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6443
% range offset 1 1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6443).
==> range(offset,1,1).
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Manual/Example4.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6460
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6461).
% load foundations/Root.e
:- load_e('foundations/Root.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6461
% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6461).
:- load_e('foundations/EC.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6463
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6464).
% sort agent
==> sort(agent).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6465
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6466).
% fluent Awake(agent)
fluent(awake(agent)).
==> mpred_prop(awake(agent),fluent).
==> meta_argtypes(awake(agent)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6466
% event WakeUp(agent)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6466).
event(wakeUp(agent)).
==> mpred_prop(wakeUp(agent),event).
==> meta_argtypes(wakeUp(agent)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6468
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6469).
% [agent,time]
 % Initiates(WakeUp(agent),Awake(agent),time).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(wakeUp(Agent), awake(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6469).
axiom(initiates(wakeUp(Agent), awake(Agent), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6469
% [agent,time]
 % Happens(WakeUp(agent),time) -> !HoldsAt(Awake(agent),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6469).

 /*  happens(wakeUp(Agent), Time) ->
       holds_at(neg(awake(Agent)), Time).
 */

 /*  holds_at(neg(awake(Agent)), Time) :-
       happens(wakeUp(Agent), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6469).

 /*  [holds_at(metreqs(wakeUp(Agent)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(wakeUp(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6469).
axiom(requires(wakeUp(Agent), Time),
    [holds_at(metreqs(wakeUp(Agent)), Time)]).

 /*  [holds_at(neg(awake(Agent)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(wakeUp(Agent)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6469).
axiom(holds_at(metreqs(wakeUp(Agent)), Time),
    [holds_at(neg(awake(Agent)), Time)]).

 /*  not(happens(wakeUp(Agent), Time)) :-
       not(holds_at(neg(awake(Agent)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6469).

 /*  [holds_at(awake(Agent), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(wakeUp(Agent), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6469).
axiom(not(happens(wakeUp(Agent), Time)),
    [holds_at(awake(Agent), Time)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6471
% agent James, Jessie
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6471).
==> t(agent,james).
==> t(agent,jessie).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6472
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6473).
% !HoldsAt(Awake(James),0).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(awake(james)), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6473).
axiom(holds_at(neg(awake(james)), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6473
% !HoldsAt(Awake(Jessie),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6473).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(awake(jessie)), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6473).
axiom(holds_at(neg(awake(jessie)), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6474
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6475).
% HoldsAt(Awake(James),1).

 /*  [b(start, Time), ignore(start+1==Time)] ->
       ta(Ta_Param,
          tvs1=[start+1],
          tvs2=[Time, start],
          holds_at(awake(james), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6475).
axiom(holds_at(awake(james), Time),
    [b(start, Time)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6476
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6477).
% range time 0 1
==> range(time,0,1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6477
% range offset 1 1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6477).
==> range(offset,1,1).
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Manual/Example3.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6494
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6495).
% load foundations/Root.e
:- load_e('foundations/Root.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6495
% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6495).
:- load_e('foundations/EC.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6497
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6498).
% sort agent
==> sort(agent).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6499
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6500).
% fluent Awake(agent)
fluent(awake(agent)).
==> mpred_prop(awake(agent),fluent).
==> meta_argtypes(awake(agent)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6500
% event WakeUp(agent)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6500).
event(wakeUp(agent)).
==> mpred_prop(wakeUp(agent),event).
==> meta_argtypes(wakeUp(agent)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6502
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6503).
% [agent,time]
 % Initiates(WakeUp(agent),Awake(agent),time).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(wakeUp(Agent), awake(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6503).
axiom(initiates(wakeUp(Agent), awake(Agent), Time),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6504
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6505).
% agent James, Jessie
==> t(agent,james).
==> t(agent,jessie).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6505
% !HoldsAt(Awake(James),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6505).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(awake(james)), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6505).
axiom(holds_at(neg(awake(james)), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6506
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6507).
% HoldsAt(Awake(James),1).

 /*  [b(start, Time), ignore(start+1==Time)] ->
       ta(Ta_Param,
          tvs1=[start+1],
          tvs2=[Time, start],
          holds_at(awake(james), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6507).
axiom(holds_at(awake(james), Time),
    [b(start, Time)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6508
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6509).
% range time 0 1
==> range(time,0,1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6509
% range offset 1 1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6509).
==> range(offset,1,1).
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Manual/Example2.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6526
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6527).
% load foundations/Root.e
:- load_e('foundations/Root.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6527
% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6527).
:- load_e('foundations/EC.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6529
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6530).
% sort agent
==> sort(agent).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6531
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6532).
% fluent Awake(agent)
fluent(awake(agent)).
==> mpred_prop(awake(agent),fluent).
==> meta_argtypes(awake(agent)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6532
% event WakeUp(agent)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6532).
event(wakeUp(agent)).
==> mpred_prop(wakeUp(agent),event).
==> meta_argtypes(wakeUp(agent)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6534
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6535).
% [agent,time]
 % Initiates(WakeUp(agent),Awake(agent),time).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(wakeUp(Agent), awake(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6535).
axiom(initiates(wakeUp(Agent), awake(Agent), Time),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6536
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6537).
% agent James
==> t(agent,james).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6537
% !HoldsAt(Awake(James),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6537).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(awake(james)), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6537).
axiom(holds_at(neg(awake(james)), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6538
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6539).
% HoldsAt(Awake(James),1).

 /*  [b(start, Time), ignore(start+1==Time)] ->
       ta(Ta_Param,
          tvs1=[start+1],
          tvs2=[Time, start],
          holds_at(awake(james), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6539).
axiom(holds_at(awake(james), Time),
    [b(start, Time)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6540
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6541).
% range time 0 1
==> range(time,0,1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6541
% range offset 1 1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6541).
==> range(offset,1,1).
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2004b/RunningAndDriving2.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @inproceedings{Mueller:2004b,
%;   author = "Erik T. Mueller",
%;   year = "2004",
%;   title = "A tool for satisfiability-based commonsense reasoning in the event calculus",
%;   editor = "Valerie Barr and Zdravko Markov",
%;   booktitle = "\uppercase{P}roceedings of the \uppercase{S}eventeenth \uppercase{I}nternational \uppercase{F}lorida \uppercase{A}rtificial \uppercase{I}ntelligence \uppercase{R}esearch \uppercase{S}ociety \uppercase{C}onference",
%;   pages = "147--152",
%;   address = "Menlo Park, CA",
%;   publisher = "AAAI Press",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6570
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6571).
% load foundations/Root.e
:- load_e('foundations/Root.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6571
% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6571).
:- load_e('foundations/EC.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6573
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6574).
% sort agent
==> sort(agent).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6575
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6576).
% fluent Tired(agent)
fluent(tired(agent)).
==> mpred_prop(tired(agent),fluent).
==> meta_argtypes(tired(agent)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6577
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6578).
% event Move(agent)
event(move(agent)).
==> mpred_prop(move(agent),event).
==> meta_argtypes(move(agent)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6578
% event Run(agent)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6578).
event(run(agent)).
==> mpred_prop(run(agent),event).
==> meta_argtypes(run(agent)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6579
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6580).
% event Drive(agent)
event(drive(agent)).
==> mpred_prop(drive(agent),event).
==> meta_argtypes(drive(agent)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6581
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6582).
% [agent,time]
% Happens(Move(agent),time) ->
% Happens(Run(agent),time) | Happens(Drive(agent),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6583

 /*  happens(move(Agent), Time) ->
       (   happens(run(Agent), Time)
       ;   happens(drive(Agent), Time)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6582).

 /*  happens(run(Agent), Time) :-
       not(happens(drive(Agent), Time)),
       happens(move(Agent), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6582).

 /*  [not(happens(drive(Agent), Time)), happens(move(Agent), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(run(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6582).
axiom(happens(run(Agent), Time),
   
    [ not(happens(drive(Agent), Time)),
      happens(move(Agent), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6582).

 /*  happens(drive(Agent), Time) :-
       not(happens(run(Agent), Time)),
       happens(move(Agent), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6582).

 /*  [not(happens(run(Agent), Time)), happens(move(Agent), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(drive(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6582).
axiom(happens(drive(Agent), Time),
   
    [ not(happens(run(Agent), Time)),
      happens(move(Agent), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6582).

 /*  not(happens(move(Agent), Time)) :-
       not(happens(run(Agent), Time)),
       not(happens(drive(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6582).

 /*  [not(happens(run(Agent), Time)), not(happens(drive(Agent), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(move(Agent), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6582).
axiom(not(happens(move(Agent), Time)),
   
    [ not(happens(run(Agent), Time)),
      not(happens(drive(Agent), Time))
    ]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6585
% xor Run, Drive
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6585).
==> xor([run,drive]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6587
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6588).
% [agent,time]
 % Initiates(Run(agent),Tired(agent),time).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(run(Agent), tired(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6588).
axiom(initiates(run(Agent), tired(Agent), Time),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6589
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6590).
% agent James
==> t(agent,james).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6591
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6592).
% !HoldsAt(Tired(James),0).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(tired(james)), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6592).
axiom(holds_at(neg(tired(james)), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6592
% Happens(Move(James),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6592).

 /*  [] ->
       ta(Ta_Param, tvs1=[start], tvs2=[start], happens(move(james), start)).
 */
axiom(happens(move(james), start),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6594
% range time 0 1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6594).
==> range(time,0,1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6595
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6596).
% range offset 1 1
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2004b/OffOn.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @inproceedings{Mueller:2004b,
%;   author = "Erik T. Mueller",
%;   year = "2004",
%;   title = "A tool for satisfiability-based commonsense reasoning in the event calculus",
%;   editor = "Valerie Barr and Zdravko Markov",
%;   booktitle = "\uppercase{P}roceedings of the \uppercase{S}eventeenth \uppercase{I}nternational \uppercase{F}lorida \uppercase{A}rtificial \uppercase{I}ntelligence \uppercase{R}esearch \uppercase{S}ociety \uppercase{C}onference",
%;   pages = "147--152",
%;   address = "Menlo Park, CA",
%;   publisher = "AAAI Press",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6626
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6627).
% load foundations/Root.e
:- load_e('foundations/Root.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6627
% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6627).
:- load_e('foundations/EC.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6629
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6630).
% sort agent
==> sort(agent).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6630
% sort switch
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6630).
==> sort(switch).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6632
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6633).
% fluent On(switch)
fluent(on(switch)).
==> mpred_prop(on(switch),fluent).
==> meta_argtypes(on(switch)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6633
% fluent Off(switch)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6633).
fluent(off(switch)).
==> mpred_prop(off(switch),fluent).
==> meta_argtypes(off(switch)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6634
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6635).
% event TurnOn(agent,switch)
event(turnOn(agent,switch)).
==> mpred_prop(turnOn(agent,switch),event).
==> meta_argtypes(turnOn(agent,switch)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6635
% event TurnOff(agent,switch)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6635).
event(turnOff(agent,switch)).
==> mpred_prop(turnOff(agent,switch),event).
==> meta_argtypes(turnOff(agent,switch)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6637
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6638).
% noninertial Off
==> noninertial(off).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6639
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6640).
% [switch,time]
 % HoldsAt(Off(switch),time) <-> !HoldsAt(On(switch),time).

 /*  holds_at(off(Switch), Time) <->
       holds_at(neg(on(Switch)), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6640).

 /*  [holds_at, off] <->
       [holds_at, neg, on].
 */

 /*  holds_at(off(Switch), Time) ->
       holds_at(neg(on(Switch)), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6640).

 /*  holds_at(neg(on(Switch)), Time) :-
       holds_at(off(Switch), Time).
 */

 /*  [holds_at(off(Switch), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(on(Switch)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6640).
axiom(holds_at(neg(on(Switch)), Time),
    [holds_at(off(Switch), Time)]).

 /*  not(holds_at(off(Switch), Time)) :-
       not(holds_at(neg(on(Switch)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6640).

 /*  [holds_at(on(Switch), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(off(Switch)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6640).
axiom(holds_at(neg(off(Switch)), Time),
    [holds_at(on(Switch), Time)]).

 /*  holds_at(neg(on(Switch)), Time) ->
       holds_at(off(Switch), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6640).

 /*  holds_at(off(Switch), Time) :-
       holds_at(neg(on(Switch)), Time).
 */

 /*  [holds_at(neg(on(Switch)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(off(Switch), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6640).
axiom(holds_at(off(Switch), Time),
    [holds_at(neg(on(Switch)), Time)]).

 /*  not(holds_at(neg(on(Switch)), Time)) :-
       not(holds_at(off(Switch), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6640).

 /*  [holds_at(neg(off(Switch)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(on(Switch), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6640).
axiom(holds_at(on(Switch), Time),
    [holds_at(neg(off(Switch)), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6641
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6642).
% [agent,switch,time]
 % Initiates(TurnOn(agent,switch),On(switch),time).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(turnOn(Agent, Switch), on(Switch), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6642).
axiom(initiates(turnOn(Agent, Switch), on(Switch), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6642
% [agent,switch,time]
 % Terminates(TurnOff(agent,switch),On(switch),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6642).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(turnOff(Agent, Switch),
                     on(Switch),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6642).
axiom(terminates(turnOff(Agent, Switch), on(Switch), Time),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6644
% agent James
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6644).
==> t(agent,james).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6645
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6646).
% switch Switch1
==> t(switch,switch1).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6647
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6648).
% !HoldsAt(On(Switch1),0).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(on(switch1)), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6648).
axiom(holds_at(neg(on(switch1)), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6648
% Happens(TurnOn(James,Switch1),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6648).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          happens(turnOn(james, switch1), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6648).
axiom(happens(turnOn(james, switch1), start),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6650
% range time 0 1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6650).
==> range(time,0,1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6651
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6652).
% range offset 1 1
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2004b/TV2.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @inproceedings{Mueller:2004b,
%;   author = "Erik T. Mueller",
%;   year = "2004",
%;   title = "A tool for satisfiability-based commonsense reasoning in the event calculus",
%;   editor = "Valerie Barr and Zdravko Markov",
%;   booktitle = "\uppercase{P}roceedings of the \uppercase{S}eventeenth \uppercase{I}nternational \uppercase{F}lorida \uppercase{A}rtificial \uppercase{I}ntelligence \uppercase{R}esearch \uppercase{S}ociety \uppercase{C}onference",
%;   pages = "147--152",
%;   address = "Menlo Park, CA",
%;   publisher = "AAAI Press",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6682
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6683).
% load foundations/Root.e
:- load_e('foundations/Root.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6683
% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6683).
:- load_e('foundations/EC.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6685
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6686).
% sort agent
==> sort(agent).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6686
% sort switch
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6686).
==> sort(switch).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6687
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6688).
% sort tv
==> sort(tv).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6689
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6690).
% function TVOf(switch): tv
function(tVOf(switch)).
==> mpred_prop(tVOf(switch),function).
==> meta_argtypes(tVOf(switch)).
predicate(tV(switch,tv)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6690).
==> mpred_prop(tV(switch,tv),predicate).
==> meta_argtypes(tV(switch,tv)).

 /*  fix_axiom_head(Time) ->
       
       [ functional_predicate(tVOf, tV),
          (->),
         holds_at(functional_predicate(tVOf, tV), Time)
       ].
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6690).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(functional_predicate(tVOf, tV), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6690).
axiom(holds_at(functional_predicate(tVOf, tV), Time),
    []).
==> resultIsa(tVOf,tv).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6690
% fluent SwitchOn(switch)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6690).
fluent(switchOn(switch)).
==> mpred_prop(switchOn(switch),fluent).
==> meta_argtypes(switchOn(switch)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6691
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6692).
% fluent TVOn(tv)
fluent(tVOn(tv)).
==> mpred_prop(tVOn(tv),fluent).
==> meta_argtypes(tVOn(tv)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6692
% fluent PluggedIn(tv)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6692).
fluent(pluggedIn(tv)).
==> mpred_prop(pluggedIn(tv),fluent).
==> meta_argtypes(pluggedIn(tv)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6693
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6694).
% event TurnOn(agent,switch)
event(turnOn(agent,switch)).
==> mpred_prop(turnOn(agent,switch),event).
==> meta_argtypes(turnOn(agent,switch)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6694
% event TurnOff(agent,switch)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6694).
event(turnOff(agent,switch)).
==> mpred_prop(turnOff(agent,switch),event).
==> meta_argtypes(turnOff(agent,switch)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6696
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6697).
% [agent,switch,time]
 % Initiates(TurnOn(agent,switch),SwitchOn(switch),time).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(turnOn(Agent, Switch),
                    switchOn(Switch),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6697).
axiom(initiates(turnOn(Agent, Switch), switchOn(Switch), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6698
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6699).
% [agent,switch,tv,time]
% TVOf(switch)=tv & HoldsAt(PluggedIn(tv),time) ->
% Initiates(TurnOn(agent,switch),TVOn(tv),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6700

 /*  [equals(tVOf(Switch), Tv), holds_at(pluggedIn(Tv), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(turnOn(Agent, Switch), tVOn(Tv), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6699).
axiom(initiates(turnOn(Agent, Switch), tVOn(Tv), Time),
   
    [ equals(tVOf(Switch), Tv),
      holds_at(pluggedIn(Tv), Time)
    ]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6702
% agent James
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6702).
==> t(agent,james).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6703
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6704).
% switch Switch1
==> t(switch,switch1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6704
% tv TV1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6704).
==> t(tv,tv1).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6706
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6707).
% TVOf(Switch1)=TV1.

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], equals(tVOf(switch1), tv1)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6707).
axiom(equals(tVOf(switch1), tv1),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6707
% !HoldsAt(PluggedIn(TV1),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6707).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(pluggedIn(tv1)), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6707).
axiom(holds_at(neg(pluggedIn(tv1)), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6708
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6709).
% !HoldsAt(SwitchOn(Switch1),0).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(switchOn(switch1)), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6709).
axiom(holds_at(neg(switchOn(switch1)), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6709
% !HoldsAt(TVOn(TV1),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6709).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(tVOn(tv1)), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6709).
axiom(holds_at(neg(tVOn(tv1)), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6710
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6711).
% Happens(TurnOn(James,Switch1),0).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          happens(turnOn(james, switch1), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6711).
axiom(happens(turnOn(james, switch1), start),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6712
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6713).
% range time 0 1
==> range(time,0,1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6713
% range offset 1 1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6713).
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2004b/Approve.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; example of concurrent events with cumulative or canceling effects
%;
%; @inproceedings{Mueller:2004b,
%;   author = "Erik T. Mueller",
%;   year = "2004",
%;   title = "A tool for satisfiability-based commonsense reasoning in the event calculus",
%;   editor = "Valerie Barr and Zdravko Markov",
%;   booktitle = "\uppercase{P}roceedings of the \uppercase{S}eventeenth \uppercase{I}nternational \uppercase{F}lorida \uppercase{A}rtificial \uppercase{I}ntelligence \uppercase{R}esearch \uppercase{S}ociety \uppercase{C}onference",
%;   pages = "147--152",
%;   address = "Menlo Park, CA",
%;   publisher = "AAAI Press",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6746
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6747).
% load foundations/Root.e
:- load_e('foundations/Root.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6747
% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6747).
:- load_e('foundations/EC.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6749
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6750).
% sort agent
==> sort(agent).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6751
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6752).
% event ApproveOf(agent,agent)
event(approveOf(agent,agent)).
==> mpred_prop(approveOf(agent,agent),event).
==> meta_argtypes(approveOf(agent,agent)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6752
% event DisapproveOf(agent,agent)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6752).
event(disapproveOf(agent,agent)).
==> mpred_prop(disapproveOf(agent,agent),event).
==> meta_argtypes(disapproveOf(agent,agent)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6753
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6754).
% fluent Happy(agent)
fluent(happy(agent)).
==> mpred_prop(happy(agent),fluent).
==> meta_argtypes(happy(agent)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6754
% fluent Confused(agent)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6754).
fluent(confused(agent)).
==> mpred_prop(confused(agent),fluent).
==> meta_argtypes(confused(agent)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6756
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6757).
% [agent1,agent2,time]
% !Happens(DisapproveOf(agent1,agent2),time) ->
% Initiates(ApproveOf(agent1,agent2),Happy(agent2),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6758

 /*  [not(happens(disapproveOf(Agent1, Agent2), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(approveOf(Agent1, Agent2),
                    happy(Agent2),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6757).
axiom(initiates(approveOf(Agent1, Agent2), happy(Agent2), Time),
    [not(happens(disapproveOf(Agent1, Agent2), Time))]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6760
% [agent1,agent2,time]
% !Happens(ApproveOf(agent1,agent2),time) ->
% Terminates(DisapproveOf(agent1,agent2),Happy(agent2),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6762

 /*  [not(happens(approveOf(Agent1, Agent2), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(disapproveOf(Agent1, Agent2),
                     happy(Agent2),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6762).
axiom(terminates(disapproveOf(Agent1, Agent2), happy(Agent2), Time),
    [not(happens(approveOf(Agent1, Agent2), Time))]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6764
% [agent1,agent2,time]
% Happens(DisapproveOf(agent1,agent2),time) ->
% Initiates(ApproveOf(agent1,agent2),Confused(agent2),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6766

 /*  [holds_at(metreqs(disapproveOf(Agent1, Agent2)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(disapproveOf(Agent1, Agent2), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6766).
axiom(requires(disapproveOf(Agent1, Agent2), Time),
    [holds_at(metreqs(disapproveOf(Agent1, Agent2)), Time)]).

 /*  [initiates(approveOf(Agent1, Agent2), confused(Agent2), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(disapproveOf(Agent1, Agent2)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6766).
axiom(holds_at(metreqs(disapproveOf(Agent1, Agent2)), Time),
   
    [ initiates(approveOf(Agent1, Agent2),
                confused(Agent2),
                Time)
    ]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6768
% agent James, Peter
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6768).
==> t(agent,james).
==> t(agent,peter).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6770
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6771).
% [agent]
 % !HoldsAt(Happy(agent),0) & !HoldsAt(Confused(agent),0).

 /*   holds_at(neg(happy(Agent)), start),
      holds_at(neg(confused(Agent)), start).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6771).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(happy(Agent)), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6771).
axiom(holds_at(neg(happy(Agent)), start),
    []).

 /*  [] ->
       ta(Ta_Param2,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(confused(Agent)), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6771).
axiom(holds_at(neg(confused(Agent)), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6772
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6773).
% Happens(ApproveOf(Peter,James),0).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          happens(approveOf(peter, james), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6773).
axiom(happens(approveOf(peter, james), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6773
% Happens(DisapproveOf(Peter,James),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6773).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          happens(disapproveOf(peter, james), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6773).
axiom(happens(disapproveOf(peter, james), start),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6775
% completion Happens
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6775).
==> completion(happens).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6777
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6778).
% range time 0 1
==> range(time,0,1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6778
% range offset 1 1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6778).
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2004b/Leaf.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @inproceedings{Mueller:2004b,
%;   author = "Erik T. Mueller",
%;   year = "2004",
%;   title = "A tool for satisfiability-based commonsense reasoning in the event calculus",
%;   editor = "Valerie Barr and Zdravko Markov",
%;   booktitle = "\uppercase{P}roceedings of the \uppercase{S}eventeenth \uppercase{I}nternational \uppercase{F}lorida \uppercase{A}rtificial \uppercase{I}ntelligence \uppercase{R}esearch \uppercase{S}ociety \uppercase{C}onference",
%;   pages = "147--152",
%;   address = "Menlo Park, CA",
%;   publisher = "AAAI Press",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6809
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6810).
% option trajectory on
:- set_ec_option(trajectory, on).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6811
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6812).
% load foundations/Root.e
:- load_e('foundations/Root.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6812
% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6812).
:- load_e('foundations/EC.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6814
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6815).
% sort object
==> sort(object).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6815
% sort height: integer
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6815).
==> subsort(height,integer).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6817
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6818).
% fluent Height(object,height)
fluent(height(object,height)).
==> mpred_prop(height(object,height),fluent).
==> meta_argtypes(height(object,height)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6818
% fluent Falling(object)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6818).
fluent(falling(object)).
==> mpred_prop(falling(object),fluent).
==> meta_argtypes(falling(object)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6819
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6820).
% event StartFalling(object)
event(startFalling(object)).
==> mpred_prop(startFalling(object),event).
==> meta_argtypes(startFalling(object)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6820
% event HitsGround(object)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6820).
event(hitsGround(object)).
==> mpred_prop(hitsGround(object),event).
==> meta_argtypes(hitsGround(object)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6822
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6823).
% [object,height1,height2,time]
% HoldsAt(Height(object,height1),time) &
% HoldsAt(Height(object,height2),time) ->
% height1=height2.
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6825
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6823).

 /*  holds_at(height(Object, Height1), Time), holds_at(height(Object, Height2), Time) ->
       equals(Height1, Height2).
 */

 /*  not(holds_at(height(Object, Height1), Time)) :-
       holds_at(height(Object, Height2), Time),
       not(equals(Height1, Height2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6823).

 /*  [holds_at(height(Object, Height2), Time), not(equals(Height1, Height2))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(height(Object, Height1)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6823).
axiom(holds_at(neg(height(Object, Height1)), Time),
   
    [ holds_at(height(Object, Height2), Time),
      not(equals(Height1, Height2))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6823).

 /*  not(holds_at(height(Object, Height2), Time)) :-
       holds_at(height(Object, Height1), Time),
       not(equals(Height1, Height2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6823).

 /*  [holds_at(height(Object, Height1), Time), not(equals(Height1, Height2))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(height(Object, Height2)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6823).
axiom(holds_at(neg(height(Object, Height2)), Time),
   
    [ holds_at(height(Object, Height1), Time),
      not(equals(Height2, Height1))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6827
% [object,time]
% Initiates(StartFalling(object),Falling(object),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6829).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(startFalling(Object), falling(Object), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6829).
axiom(initiates(startFalling(Object), falling(Object), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6830
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6831).
% [object,height,time]
% Releases(StartFalling(object),Height(object,height),time).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          releases(startFalling(Object),
                   height(Object, Height),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6831).
axiom(releases(startFalling(Object), height(Object, Height), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6833
% [object,height1,height2,offset,time]
% HoldsAt(Height(object,height1),time) &
% height2=height1-offset ->
% Trajectory(Falling(object),time,Height(object,height2),offset).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6836
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6835).

 /*  holds_at(height(Object, Height1), Time), equals(Height2, Height1-Offset) ->
       trajectory(falling(Object),
                  Time,
                  height(Object, Height2),
                  Offset).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6835).

 /*  trajectory(falling(Object), Time, height(Object, Height2), Offset) :-
       holds_at(height(Object, Height1), Time),
       equals(Height2, Height1-Offset).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6835).

 /*  [holds_at(height(Object, Height1), Time), equals(Height2, Height1-Offset)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          trajectory(falling(Object),
                     Time,
                     height(Object, Height2),
                     Offset)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6835).
axiom(trajectory(falling(Object), Time, height(Object, Height2), Offset),
   
    [ holds_at(height(Object, Height1), Time),
      equals(Height2, Height1-Offset)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6835).

 /*  not(holds_at(height(Object, Height1), Time)) :-
       equals(Height2, Height1-Offset),
       not(trajectory(falling(Object),
                      Time,
                      height(Object, Height2),
                      Offset)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6835).

 /*  [equals(Height2, Height1-Offset), not(trajectory(falling(Object), Time, height(Object, Height2), Offset))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(height(Object, Height1)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6835).
axiom(holds_at(neg(height(Object, Height1)), Time),
   
    [ equals(Height2, Height1-Offset),
      not(trajectory(falling(Object),
                     Time,
                     height(Object, Height2),
                     Offset))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6838
% [object,time]
% HoldsAt(Falling(object),time) &
% HoldsAt(Height(object,0),time) ->
% Happens(HitsGround(object),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6841
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6840).

 /*  holds_at(falling(Object), Time), holds_at(height(Object, 0), Time) ->
       happens(hitsGround(Object), Time).
 */

 /*  happens(hitsGround(Object), Time) :-
       holds_at(falling(Object), Time),
       holds_at(height(Object, 0), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6840).

 /*  [holds_at(falling(Object), Time), holds_at(height(Object, 0), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(hitsGround(Object), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6840).
axiom(happens(hitsGround(Object), Time),
   
    [ holds_at(falling(Object), Time),
      holds_at(height(Object, 0), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6840).

 /*  not(holds_at(falling(Object), Time)) :-
       holds_at(height(Object, 0), Time),
       not(happens(hitsGround(Object), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6840).

 /*  [holds_at(height(Object, 0), Time), not(happens(hitsGround(Object), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(falling(Object)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6840).
axiom(holds_at(neg(falling(Object)), Time),
   
    [ holds_at(height(Object, 0), Time),
      not(happens(hitsGround(Object), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6840).

 /*  not(holds_at(height(Object, 0), Time)) :-
       holds_at(falling(Object), Time),
       not(happens(hitsGround(Object), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6840).

 /*  [holds_at(falling(Object), Time), not(happens(hitsGround(Object), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(height(Object, 0)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6840).
axiom(holds_at(neg(height(Object, 0)), Time),
   
    [ holds_at(falling(Object), Time),
      not(happens(hitsGround(Object), Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6843
%;[object,height1,height2,time]
%;HoldsAt(Height(object,height1),time) &
%;height1 != height2 ->
%;Terminates(HitsGround(object),Height(object,height2),time).
% [object,height,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6849
% HoldsAt(Height(object,height),time) ->
% Initiates(HitsGround(object),Height(object,height),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6849).

 /*  [holds_at(height(Object, Height), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(hitsGround(Object),
                    height(Object, Height),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6849).
axiom(initiates(hitsGround(Object), height(Object, Height), Time),
    [holds_at(height(Object, Height), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6852
% [object,time]
% Terminates(HitsGround(object),Falling(object),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6854).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(hitsGround(Object), falling(Object), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6854).
axiom(terminates(hitsGround(Object), falling(Object), Time),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6855
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6856).
% object Leaf
==> t(object,leaf).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6857
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6858).
% !HoldsAt(Falling(Leaf),0).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(falling(leaf)), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6858).
axiom(holds_at(neg(falling(leaf)), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6858
% HoldsAt(Height(Leaf,4),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6858).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(height(leaf, 4), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6858).
axiom(holds_at(height(leaf, 4), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6859
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6860).
% Happens(StartFalling(Leaf),2).

 /*  [b(start, Start2), toffset(start, 2, Start2), ignore(start+2==Start2)] ->
       ta(Ta_Param,
          tvs1=[start+2],
          tvs2=[Start2, start],
          happens(startFalling(leaf), Start2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6860).
axiom(happens(startFalling(leaf), Start2),
    [b(start, Start2), toffset(start, 2, Start2)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6861
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6862).
% completion Happens
==> completion(happens).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6863
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6864).
% range time 0 7
==> range(time,0,7).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6864
% range offset 1 4
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6864).
==> range(offset,1,4).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6865
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6866).
% range height 0 4
==> range(height,0,4).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2004b/RunningAndDriving1.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @inproceedings{Mueller:2004b,
%;   author = "Erik T. Mueller",
%;   year = "2004",
%;   title = "A tool for satisfiability-based commonsense reasoning in the event calculus",
%;   editor = "Valerie Barr and Zdravko Markov",
%;   booktitle = "\uppercase{P}roceedings of the \uppercase{S}eventeenth \uppercase{I}nternational \uppercase{F}lorida \uppercase{A}rtificial \uppercase{I}ntelligence \uppercase{R}esearch \uppercase{S}ociety \uppercase{C}onference",
%;   pages = "147--152",
%;   address = "Menlo Park, CA",
%;   publisher = "AAAI Press",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6896
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6897).
% load foundations/Root.e
:- load_e('foundations/Root.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6897
% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6897).
:- load_e('foundations/EC.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6899
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6900).
% sort agent
==> sort(agent).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6901
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6902).
% fluent Tired(agent)
fluent(tired(agent)).
==> mpred_prop(tired(agent),fluent).
==> meta_argtypes(tired(agent)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6903
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6904).
% event Move(agent)
event(move(agent)).
==> mpred_prop(move(agent),event).
==> meta_argtypes(move(agent)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6904
% event Run(agent)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6904).
event(run(agent)).
==> mpred_prop(run(agent),event).
==> meta_argtypes(run(agent)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6905
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6906).
% event Drive(agent)
event(drive(agent)).
==> mpred_prop(drive(agent),event).
==> meta_argtypes(drive(agent)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6907
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6908).
% [agent,time]
% Happens(Move(agent),time) ->
% Happens(Run(agent),time) | Happens(Drive(agent),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6909

 /*  happens(move(Agent), Time) ->
       (   happens(run(Agent), Time)
       ;   happens(drive(Agent), Time)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6908).

 /*  happens(run(Agent), Time) :-
       not(happens(drive(Agent), Time)),
       happens(move(Agent), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6908).

 /*  [not(happens(drive(Agent), Time)), happens(move(Agent), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(run(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6908).
axiom(happens(run(Agent), Time),
   
    [ not(happens(drive(Agent), Time)),
      happens(move(Agent), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6908).

 /*  happens(drive(Agent), Time) :-
       not(happens(run(Agent), Time)),
       happens(move(Agent), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6908).

 /*  [not(happens(run(Agent), Time)), happens(move(Agent), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(drive(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6908).
axiom(happens(drive(Agent), Time),
   
    [ not(happens(run(Agent), Time)),
      happens(move(Agent), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6908).

 /*  not(happens(move(Agent), Time)) :-
       not(happens(run(Agent), Time)),
       not(happens(drive(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6908).

 /*  [not(happens(run(Agent), Time)), not(happens(drive(Agent), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(move(Agent), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6908).
axiom(not(happens(move(Agent), Time)),
   
    [ not(happens(run(Agent), Time)),
      not(happens(drive(Agent), Time))
    ]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6911
% xor Run, Drive
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6911).
==> xor([run,drive]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6913
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6914).
% [agent,time]
 % Initiates(Run(agent),Tired(agent),time).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(run(Agent), tired(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6914).
axiom(initiates(run(Agent), tired(Agent), Time),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6915
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6916).
% agent James
==> t(agent,james).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6917
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6918).
% !HoldsAt(Tired(James),0).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(tired(james)), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6918).
axiom(holds_at(neg(tired(james)), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6918
% Happens(Move(James),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6918).

 /*  [] ->
       ta(Ta_Param, tvs1=[start], tvs2=[start], happens(move(james), start)).
 */
axiom(happens(move(james), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6919
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6920).
% HoldsAt(Tired(James),1).

 /*  [b(start, Time), ignore(start+1==Time)] ->
       ta(Ta_Param,
          tvs1=[start+1],
          tvs2=[Time, start],
          holds_at(tired(james), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6920).
axiom(holds_at(tired(james), Time),
    [b(start, Time)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6921
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6922).
% range time 0 1
==> range(time,0,1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6922
% range offset 1 1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6922).
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2004b/TV1.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @inproceedings{Mueller:2004b,
%;   author = "Erik T. Mueller",
%;   year = "2004",
%;   title = "A tool for satisfiability-based commonsense reasoning in the event calculus",
%;   editor = "Valerie Barr and Zdravko Markov",
%;   booktitle = "\uppercase{P}roceedings of the \uppercase{S}eventeenth \uppercase{I}nternational \uppercase{F}lorida \uppercase{A}rtificial \uppercase{I}ntelligence \uppercase{R}esearch \uppercase{S}ociety \uppercase{C}onference",
%;   pages = "147--152",
%;   address = "Menlo Park, CA",
%;   publisher = "AAAI Press",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6953
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6954).
% load foundations/Root.e
:- load_e('foundations/Root.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6954
% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6954).
:- load_e('foundations/EC.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6956
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6957).
% sort agent
==> sort(agent).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6957
% sort switch
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6957).
==> sort(switch).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6958
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6959).
% sort tv
==> sort(tv).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6960
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6961).
% function TVOf(switch): tv
function(tVOf(switch)).
==> mpred_prop(tVOf(switch),function).
==> meta_argtypes(tVOf(switch)).
predicate(tV(switch,tv)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6961).
==> mpred_prop(tV(switch,tv),predicate).
==> meta_argtypes(tV(switch,tv)).

 /*  fix_axiom_head(Time) ->
       
       [ functional_predicate(tVOf, tV),
          (->),
         holds_at(functional_predicate(tVOf, tV), Time)
       ].
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6961).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(functional_predicate(tVOf, tV), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6961).
axiom(holds_at(functional_predicate(tVOf, tV), Time),
    []).
==> resultIsa(tVOf,tv).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6961
% fluent SwitchOn(switch)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6961).
fluent(switchOn(switch)).
==> mpred_prop(switchOn(switch),fluent).
==> meta_argtypes(switchOn(switch)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6962
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6963).
% fluent TVOn(tv)
fluent(tVOn(tv)).
==> mpred_prop(tVOn(tv),fluent).
==> meta_argtypes(tVOn(tv)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6963
% fluent PluggedIn(tv)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6963).
fluent(pluggedIn(tv)).
==> mpred_prop(pluggedIn(tv),fluent).
==> meta_argtypes(pluggedIn(tv)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6964
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6965).
% event TurnOn(agent,switch)
event(turnOn(agent,switch)).
==> mpred_prop(turnOn(agent,switch),event).
==> meta_argtypes(turnOn(agent,switch)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6965
% event TurnOff(agent,switch)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6965).
event(turnOff(agent,switch)).
==> mpred_prop(turnOff(agent,switch),event).
==> meta_argtypes(turnOff(agent,switch)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6967
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6968).
% [agent,switch,time]
 % Initiates(TurnOn(agent,switch),SwitchOn(switch),time).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(turnOn(Agent, Switch),
                    switchOn(Switch),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6968).
axiom(initiates(turnOn(Agent, Switch), switchOn(Switch), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6969
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6970).
% [agent,switch,tv,time]
% TVOf(switch)=tv & HoldsAt(PluggedIn(tv),time) ->
% Initiates(TurnOn(agent,switch),TVOn(tv),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6971

 /*  [equals(tVOf(Switch), Tv), holds_at(pluggedIn(Tv), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(turnOn(Agent, Switch), tVOn(Tv), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6970).
axiom(initiates(turnOn(Agent, Switch), tVOn(Tv), Time),
   
    [ equals(tVOf(Switch), Tv),
      holds_at(pluggedIn(Tv), Time)
    ]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6973
% agent James
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6973).
==> t(agent,james).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6974
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6975).
% switch Switch1
==> t(switch,switch1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6975
% tv TV1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6975).
==> t(tv,tv1).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6977
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6978).
% TVOf(Switch1)=TV1.

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], equals(tVOf(switch1), tv1)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6978).
axiom(equals(tVOf(switch1), tv1),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6978
% HoldsAt(PluggedIn(TV1),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6978).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(pluggedIn(tv1), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6978).
axiom(holds_at(pluggedIn(tv1), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6979
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6980).
% !HoldsAt(SwitchOn(Switch1),0).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(switchOn(switch1)), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6980).
axiom(holds_at(neg(switchOn(switch1)), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6980
% !HoldsAt(TVOn(TV1),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6980).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(tVOn(tv1)), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6980).
axiom(holds_at(neg(tVOn(tv1)), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6981
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6982).
% Happens(TurnOn(James,Switch1),0).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          happens(turnOn(james, switch1), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6982).
axiom(happens(turnOn(james, switch1), start),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6983
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6984).
% range time 0 1
==> range(time,0,1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:6984
% range offset 1 1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',6984).
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2004b/RouletteWheel.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @inproceedings{Mueller:2004b,
%;   author = "Erik T. Mueller",
%;   year = "2004",
%;   title = "A tool for satisfiability-based commonsense reasoning in the event calculus",
%;   editor = "Valerie Barr and Zdravko Markov",
%;   booktitle = "\uppercase{P}roceedings of the \uppercase{S}eventeenth \uppercase{I}nternational \uppercase{F}lorida \uppercase{A}rtificial \uppercase{I}ntelligence \uppercase{R}esearch \uppercase{S}ociety \uppercase{C}onference",
%;   pages = "147--152",
%;   address = "Menlo Park, CA",
%;   publisher = "AAAI Press",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7015
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7016).
% load foundations/Root.e
:- load_e('foundations/Root.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7016
% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7016).
:- load_e('foundations/EC.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7018
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7019).
% sort wheel
==> sort(wheel).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7019
% sort value: integer
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7019).
==> subsort(value,integer).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7021
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7022).
% fluent WheelValueDeterminingFluent(wheel,value)
fluent(wheelValueDeterminingFluent(wheel,value)).
==> mpred_prop(wheelValueDeterminingFluent(wheel,value),fluent).
==> meta_argtypes(wheelValueDeterminingFluent(wheel,value)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7022
% fluent WheelValue(wheel,value)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7022).
fluent(wheelValue(wheel,value)).
==> mpred_prop(wheelValue(wheel,value),fluent).
==> meta_argtypes(wheelValue(wheel,value)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7023
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7024).
% noninertial WheelValueDeterminingFluent
==> noninertial(wheelValueDeterminingFluent).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7024
% event Spin(wheel)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7024).
event(spin(wheel)).
==> mpred_prop(spin(wheel),event).
==> meta_argtypes(spin(wheel)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7026
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7027).
% [wheel,value1,value2,time]
% HoldsAt(WheelValue(wheel,value1),time) &
% HoldsAt(WheelValue(wheel,value2),time) ->
% value1=value2.
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7029
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7027).

 /*  holds_at(wheelValue(Wheel, Value1), Time), holds_at(wheelValue(Wheel, Value2), Time) ->
       equals(Value1, Value2).
 */

 /*  not(holds_at(wheelValue(Wheel, Value1), Time)) :-
       holds_at(wheelValue(Wheel, Value2), Time),
       not(equals(Value1, Value2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7027).

 /*  [holds_at(wheelValue(Wheel, Value2), Time), not(equals(Value1, Value2))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(wheelValue(Wheel, Value1)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7027).
axiom(holds_at(neg(wheelValue(Wheel, Value1)), Time),
   
    [ holds_at(wheelValue(Wheel, Value2), Time),
      not(equals(Value1, Value2))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7027).

 /*  not(holds_at(wheelValue(Wheel, Value2), Time)) :-
       holds_at(wheelValue(Wheel, Value1), Time),
       not(equals(Value1, Value2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7027).

 /*  [holds_at(wheelValue(Wheel, Value1), Time), not(equals(Value1, Value2))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(wheelValue(Wheel, Value2)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7027).
axiom(holds_at(neg(wheelValue(Wheel, Value2)), Time),
   
    [ holds_at(wheelValue(Wheel, Value1), Time),
      not(equals(Value2, Value1))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7031
% [wheel,value1,value2,time]
% HoldsAt(WheelValueDeterminingFluent(wheel,value1),time) &
% HoldsAt(WheelValueDeterminingFluent(wheel,value2),time) ->
% value1=value2.
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7034
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7033).

 /*  holds_at(wheelValueDeterminingFluent(Wheel, Value1), Time), holds_at(wheelValueDeterminingFluent(Wheel, Value2), Time) ->
       equals(Value1, Value2).
 */

 /*  not(holds_at(wheelValueDeterminingFluent(Wheel, Value1), Time)) :-
       holds_at(wheelValueDeterminingFluent(Wheel, Value2), Time),
       not(equals(Value1, Value2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7033).

 /*  [holds_at(wheelValueDeterminingFluent(Wheel, Value2), Time), not(equals(Value1, Value2))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(wheelValueDeterminingFluent(Wheel, Value1)),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7033).
axiom(holds_at(neg(wheelValueDeterminingFluent(Wheel, Value1)), Time),
   
    [ holds_at(wheelValueDeterminingFluent(Wheel, Value2),
               Time),
      not(equals(Value1, Value2))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7033).

 /*  not(holds_at(wheelValueDeterminingFluent(Wheel, Value2), Time)) :-
       holds_at(wheelValueDeterminingFluent(Wheel, Value1), Time),
       not(equals(Value1, Value2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7033).

 /*  [holds_at(wheelValueDeterminingFluent(Wheel, Value1), Time), not(equals(Value1, Value2))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(wheelValueDeterminingFluent(Wheel, Value2)),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7033).
axiom(holds_at(neg(wheelValueDeterminingFluent(Wheel, Value2)), Time),
   
    [ holds_at(wheelValueDeterminingFluent(Wheel, Value1),
               Time),
      not(equals(Value2, Value1))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7036
% [wheel,value,time]
% HoldsAt(WheelValueDeterminingFluent(wheel,value),time) ->
% Initiates(Spin(wheel),WheelValue(wheel,value),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7038

 /*  [holds_at(wheelValueDeterminingFluent(Wheel, Value), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(spin(Wheel),
                    wheelValue(Wheel, Value),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7038).
axiom(initiates(spin(Wheel), wheelValue(Wheel, Value), Time),
   
    [ holds_at(wheelValueDeterminingFluent(Wheel, Value),
               Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7040
% [wheel,value1,value2,time]
% HoldsAt(WheelValue(wheel,value1),time) &
% HoldsAt(WheelValueDeterminingFluent(wheel,value2),time) &
% value1!=value2 ->
% Terminates(Spin(wheel),WheelValue(wheel,value1),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7044
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7042).

 /*  [holds_at(wheelValue(Wheel, Value1), Time), holds_at(wheelValueDeterminingFluent(Wheel, Value2), Time), diff(Value1, Value2)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(spin(Wheel),
                     wheelValue(Wheel, Value1),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7042).
axiom(terminates(spin(Wheel), wheelValue(Wheel, Value1), Time),
   
    [ holds_at(wheelValue(Wheel, Value1), Time),
      holds_at(wheelValueDeterminingFluent(Wheel, Value2),
               Time),
      diff(Value1, Value2)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7046
% [wheel,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7047
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7048).
% {value} % HoldsAt(WheelValueDeterminingFluent(wheel,value),time).

 /*  exists([Value],
    holds_at(wheelValueDeterminingFluent(Wheel,Value),
   	 Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7048).

 /*  holds_at(wheelValueDeterminingFluent(Wheel, Value), Time) :-
       some(Value, '$kolem_Fn_406'(Wheel, Time)).
 */

 /*  [some(Value, '$kolem_Fn_406'(Wheel, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(wheelValueDeterminingFluent(Wheel, Value),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7048).
axiom(holds_at(wheelValueDeterminingFluent(Wheel, Value), Time),
    [some(Value, '$kolem_Fn_406'(Wheel, Time))]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7049
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7050).
% wheel Wheel
==> t(wheel,wheel).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7051
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7052).
% HoldsAt(WheelValue(Wheel,7),0).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(wheelValue(wheel, 7), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7052).
axiom(holds_at(wheelValue(wheel, 7), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7052
% Happens(Spin(Wheel),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7052).

 /*  [] ->
       ta(Ta_Param, tvs1=[start], tvs2=[start], happens(spin(wheel), start)).
 */
axiom(happens(spin(wheel), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7053
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7054).
% HoldsAt(WheelValueDeterminingFluent(Wheel,7),1).

 /*  [b(start, Time), ignore(start+1==Time)] ->
       ta(Ta_Param,
          tvs1=[start+1],
          tvs2=[Time, start],
          holds_at(wheelValueDeterminingFluent(wheel, 7), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7054).
axiom(holds_at(wheelValueDeterminingFluent(wheel, 7), Time),
    [b(start, Time)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7055
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7056).
% completion Happens
==> completion(happens).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7057
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7058).
% range value 7 10
==> range(value,7,10).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7058
% range time 0 1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7058).
==> range(time,0,1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7059
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7060).
% range offset 1 1
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Mueller2004b/PickUp.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @inproceedings{Mueller:2004b,
%;   author = "Erik T. Mueller",
%;   year = "2004",
%;   title = "A tool for satisfiability-based commonsense reasoning in the event calculus",
%;   editor = "Valerie Barr and Zdravko Markov",
%;   booktitle = "\uppercase{P}roceedings of the \uppercase{S}eventeenth \uppercase{I}nternational \uppercase{F}lorida \uppercase{A}rtificial \uppercase{I}ntelligence \uppercase{R}esearch \uppercase{S}ociety \uppercase{C}onference",
%;   pages = "147--152",
%;   address = "Menlo Park, CA",
%;   publisher = "AAAI Press",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7090
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7091).
% load foundations/Root.e
:- load_e('foundations/Root.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7091
% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7091).
:- load_e('foundations/EC.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7093
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7094).
% sort object
==> sort(object).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7094
% sort agent: object
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7094).
==> subsort(agent,object).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7095
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7096).
% sort physobj: object
==> subsort(physobj,object).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7096
% sort location
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7096).
==> sort(location).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7098
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7099).
% fluent At(object,location)
fluent(at(object,location)).
==> mpred_prop(at(object,location),fluent).
==> meta_argtypes(at(object,location)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7099
% fluent Holding(agent,physobj)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7099).
fluent(holding(agent,physobj)).
==> mpred_prop(holding(agent,physobj),fluent).
==> meta_argtypes(holding(agent,physobj)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7100
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7101).
% event PickUp(agent,physobj)
event(pickUp(agent,physobj)).
==> mpred_prop(pickUp(agent,physobj),event).
==> meta_argtypes(pickUp(agent,physobj)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7101
% event SetDown(agent,physobj)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7101).
event(setDown(agent,physobj)).
==> mpred_prop(setDown(agent,physobj),event).
==> meta_argtypes(setDown(agent,physobj)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7102
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7103).
% event Move(agent,location,location)
event(move(agent,location,location)).
==> mpred_prop(move(agent,location,location),event).
==> meta_argtypes(move(agent,location,location)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7104
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7105).
%; state constraints
% [agent,location,physobj,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7107
% HoldsAt(At(agent,location),time) &
% HoldsAt(Holding(agent,physobj),time) ->
% HoldsAt(At(physobj,location),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7109
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7107).

 /*  holds_at(at(Agent, Location), Time), holds_at(holding(Agent, Physobj), Time) ->
       holds_at(at(Physobj, Location), Time).
 */

 /*  holds_at(at(Physobj, Location), Time) :-
       holds_at(at(Agent, Location), Time),
       holds_at(holding(Agent, Physobj), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7107).

 /*  [holds_at(at(Agent, Location), Time), holds_at(holding(Agent, Physobj), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(at(Physobj, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7107).
axiom(holds_at(at(Physobj, Location), Time),
   
    [ holds_at(at(Agent, Location), Time),
      holds_at(holding(Agent, Physobj), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7107).

 /*  not(holds_at(at(Agent, Location), Time)) :-
       holds_at(holding(Agent, Physobj), Time),
       not(holds_at(at(Physobj, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7107).

 /*  [holds_at(holding(Agent, Physobj), Time), holds_at(neg(at(Physobj, Location)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(at(Agent, Location)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7107).
axiom(holds_at(neg(at(Agent, Location)), Time),
   
    [ holds_at(holding(Agent, Physobj), Time),
      holds_at(neg(at(Physobj, Location)), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7107).

 /*  not(holds_at(holding(Agent, Physobj), Time)) :-
       holds_at(at(Agent, Location), Time),
       not(holds_at(at(Physobj, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7107).

 /*  [holds_at(at(Agent, Location), Time), holds_at(neg(at(Physobj, Location)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(holding(Agent, Physobj)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7107).
axiom(holds_at(neg(holding(Agent, Physobj)), Time),
   
    [ holds_at(at(Agent, Location), Time),
      holds_at(neg(at(Physobj, Location)), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7111
% [object,location1,location2,time]
% HoldsAt(At(object,location1),time) &
% HoldsAt(At(object,location2),time) ->
% location1=location2.
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7114
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7113).

 /*  holds_at(at(Object, Location1), Time), holds_at(at(Object, Location2), Time) ->
       equals(Location1, Location2).
 */

 /*  not(holds_at(at(Object, Location1), Time)) :-
       holds_at(at(Object, Location2), Time),
       not(equals(Location1, Location2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7113).

 /*  [holds_at(at(Object, Location2), Time), not(equals(Location1, Location2))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(at(Object, Location1)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7113).
axiom(holds_at(neg(at(Object, Location1)), Time),
   
    [ holds_at(at(Object, Location2), Time),
      not(equals(Location1, Location2))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7113).

 /*  not(holds_at(at(Object, Location2), Time)) :-
       holds_at(at(Object, Location1), Time),
       not(equals(Location1, Location2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7113).

 /*  [holds_at(at(Object, Location1), Time), not(equals(Location1, Location2))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(at(Object, Location2)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7113).
axiom(holds_at(neg(at(Object, Location2)), Time),
   
    [ holds_at(at(Object, Location1), Time),
      not(equals(Location2, Location1))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7116
%; effect axioms
% [agent,location1,location2,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7119
% Initiates(Move(agent,location1,location2),At(agent,location2),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7119).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(move(Agent, Location1, Location2),
                    at(Agent, Location2),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7119).
axiom(initiates(move(Agent, Location1, Location2), at(Agent, Location2), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7121
% [agent,location1,location2,time]
% Terminates(Move(agent,location1,location2),At(agent,location1),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7123).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(move(Agent, Location1, Location2),
                     at(Agent, Location1),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7123).
axiom(terminates(move(Agent, Location1, Location2), at(Agent, Location1), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7124
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7125).
% [agent,physobj,time]
% Initiates(PickUp(agent,physobj),Holding(agent,physobj),time).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(pickUp(Agent, Physobj),
                    holding(Agent, Physobj),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7125).
axiom(initiates(pickUp(Agent, Physobj), holding(Agent, Physobj), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7127
% [agent,physobj,time]
% Terminates(SetDown(agent,physobj),Holding(agent,physobj),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7129).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(setDown(Agent, Physobj),
                     holding(Agent, Physobj),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7129).
axiom(terminates(setDown(Agent, Physobj), holding(Agent, Physobj), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7130
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7131).
%; preconditions
% [agent,location1,location2,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7133
% Happens(Move(agent,location1,location2),time) ->
% HoldsAt(At(agent,location1),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7133).

 /*  happens(move(Agent, Location1, Location2), Time) ->
       holds_at(at(Agent, Location1), Time).
 */

 /*  holds_at(at(Agent, Location1), Time) :-
       happens(move(Agent, Location1, Location2), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7133).

 /*  [holds_at(metreqs(move(Agent, Location1, Location2)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(move(Agent, Location1, Location2), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7133).
axiom(requires(move(Agent, Location1, Location2), Time),
   
    [ holds_at(metreqs(move(Agent, Location1, Location2)),
               Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7133).

 /*  [holds_at(at(Agent, Location1), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(move(Agent, Location1, Location2)),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7133).
axiom(holds_at(metreqs(move(Agent, Location1, Location2)), Time),
    [holds_at(at(Agent, Location1), Time)]).

 /*  not(happens(move(Agent, Location1, Location2), Time)) :-
       not(holds_at(at(Agent, Location1), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7133).

 /*  [holds_at(neg(at(Agent, Location1)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(move(Agent, Location1, Location2),
                      Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7133).
axiom(not(happens(move(Agent, Location1, Location2), Time)),
    [holds_at(neg(at(Agent, Location1)), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7136
% [agent,physobj,time]
% Happens(PickUp(agent,physobj),time) ->
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7138
% {location}%  HoldsAt(At(agent,location),time) &
%            HoldsAt(At(physobj,location),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7138).

 /*  exists([Location],
    happens(pickUp(Agent, Physobj), Time) ->
       holds_at(at(Agent, Location), Time),
       holds_at(at(Physobj, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7138).

 /*  not(happens(pickUp(Agent, Physobj), Time)) :-
       (   not(holds_at(at(Agent, Location), Time))
       ;   not(holds_at(at(Physobj, Location), Time))
       ),
       some(Location, '$kolem_Fn_407'(Agent, Physobj, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7138).

 /*  [(holds_at(neg(at(Agent, Location)), Time);holds_at(neg(at(Physobj, Location)), Time)), some(Location, '$kolem_Fn_407'(Agent, Physobj, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(pickUp(Agent, Physobj), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7138).
axiom(not(happens(pickUp(Agent, Physobj), Time)),
   
    [  (holds_at(neg(at(Agent, Location)), Time);holds_at(neg(at(Physobj, Location)), Time)),
      some(Location, '$kolem_Fn_407'(Agent, Physobj, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7138).

 /*  holds_at(at(Agent, Location), Time) :-
       happens(pickUp(Agent, Physobj), Time),
       some(Location, '$kolem_Fn_407'(Agent, Physobj, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7138).

 /*  [happens(pickUp(Agent, Physobj), Time), some(Location, '$kolem_Fn_407'(Agent, Physobj, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(at(Agent, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7138).
axiom(holds_at(at(Agent, Location), Time),
   
    [ happens(pickUp(Agent, Physobj), Time),
      some(Location, '$kolem_Fn_407'(Agent, Physobj, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7138).

 /*  holds_at(at(Physobj, Location), Time) :-
       happens(pickUp(Agent, Physobj), Time),
       some(Location, '$kolem_Fn_407'(Agent, Physobj, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7138).

 /*  [happens(pickUp(Agent, Physobj), Time), some(Location, '$kolem_Fn_407'(Agent, Physobj, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(at(Physobj, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7138).
axiom(holds_at(at(Physobj, Location), Time),
   
    [ happens(pickUp(Agent, Physobj), Time),
      some(Location, '$kolem_Fn_407'(Agent, Physobj, Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7141
%; releases
% [agent,physobj,location,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7144
% Releases(PickUp(agent,physobj),At(physobj,location),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7144).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          releases(pickUp(Agent, Physobj),
                   at(Physobj, Location),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7144).
axiom(releases(pickUp(Agent, Physobj), at(Physobj, Location), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7146
% [agent,physobj,location,time]
% HoldsAt(At(agent,location),time) ->
% Initiates(SetDown(agent,physobj),At(physobj,location),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7148

 /*  [holds_at(at(Agent, Location), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(setDown(Agent, Physobj),
                    at(Physobj, Location),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7148).
axiom(initiates(setDown(Agent, Physobj), at(Physobj, Location), Time),
    [holds_at(at(Agent, Location), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7150
%;[agent,physobj,location1,location2,time]
%;HoldsAt(At(agent,location1),time) &
%;location1 != location2 ->
%;Terminates(SetDown(agent,physobj),At(physobj,location2),time).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7155
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7156).
% agent James
==> t(agent,james).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7156
% physobj Coin
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7156).
==> t(physobj,coin).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7157
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7158).
% location L1, L2, L3, L4
==> t(location,l1).
==> t(location,l2).
==> t(location,l3).
==> t(location,l4).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7159
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7160).
% !HoldsAt(Holding(James,Coin),0).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(holding(james, coin)), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7160).
axiom(holds_at(neg(holding(james, coin)), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7160
% HoldsAt(At(Coin,L4),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7160).

 /*  [] ->
       ta(Ta_Param, tvs1=[start], tvs2=[start], holds_at(at(coin, l4), start)).
 */
axiom(holds_at(at(coin, l4), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7161
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7162).
% HoldsAt(At(James,L1),0).

 /*  [] ->
       ta(Ta_Param, tvs1=[start], tvs2=[start], holds_at(at(james, l1), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7162).
axiom(holds_at(at(james, l1), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7162
% Happens(Move(James,L1,L2),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7162).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          happens(move(james, l1, l2), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7162).
axiom(happens(move(james, l1, l2), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7163
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7164).
% Happens(Move(James,L2,L3),1).

 /*  [b(start, Maptime), ignore(start+1==Maptime)] ->
       ta(Ta_Param,
          tvs1=[start+1],
          tvs2=[Maptime, start],
          happens(move(james, l2, l3), Maptime)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7164).
axiom(happens(move(james, l2, l3), Maptime),
    [b(start, Maptime)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7164
% Happens(Move(James,L3,L4),2).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7164).

 /*  [b(start, Start2), toffset(start, 2, Start2), ignore(start+2==Start2)] ->
       ta(Ta_Param,
          tvs1=[start+2],
          tvs2=[Start2, start],
          happens(move(james, l3, l4), Start2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7164).
axiom(happens(move(james, l3, l4), Start2),
    [b(start, Start2), toffset(start, 2, Start2)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7165
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7166).
% Happens(PickUp(James,Coin),3).

 /*  [b(start, Start3), toffset(start, 3, Start3), ignore(start+3==Start3)] ->
       ta(Ta_Param,
          tvs1=[start+3],
          tvs2=[Start3, start],
          happens(pickUp(james, coin), Start3)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7166).
axiom(happens(pickUp(james, coin), Start3),
    [b(start, Start3), toffset(start, 3, Start3)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7166
% Happens(Move(James,L4,L3),4).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7166).

 /*  [b(start, Start4), toffset(start, 4, Start4), ignore(start+4==Start4)] ->
       ta(Ta_Param,
          tvs1=[start+4],
          tvs2=[Start4, start],
          happens(move(james, l4, l3), Start4)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7166).
axiom(happens(move(james, l4, l3), Start4),
    [b(start, Start4), toffset(start, 4, Start4)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7167
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7168).
% Happens(Move(James,L3,L2),5).

 /*  [b(start, Start5), toffset(start, 5, Start5), ignore(start+5==Start5)] ->
       ta(Ta_Param,
          tvs1=[start+5],
          tvs2=[Start5, start],
          happens(move(james, l3, l2), Start5)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7168).
axiom(happens(move(james, l3, l2), Start5),
    [b(start, Start5), toffset(start, 5, Start5)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7168
% Happens(SetDown(James,Coin),6).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7168).

 /*  [b(start, Start6), toffset(start, 6, Start6), ignore(start+6==Start6)] ->
       ta(Ta_Param,
          tvs1=[start+6],
          tvs2=[Start6, start],
          happens(setDown(james, coin), Start6)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7168).
axiom(happens(setDown(james, coin), Start6),
    [b(start, Start6), toffset(start, 6, Start6)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7169
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7170).
% Happens(Move(James,L2,L3),7).

 /*  [b(start, Start7), toffset(start, 7, Start7), ignore(start+7==Start7)] ->
       ta(Ta_Param,
          tvs1=[start+7],
          tvs2=[Start7, start],
          happens(move(james, l2, l3), Start7)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7170).
axiom(happens(move(james, l2, l3), Start7),
    [b(start, Start7), toffset(start, 7, Start7)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7170
% Happens(Move(James,L3,L4),8).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7170).

 /*  [b(start, Start8), toffset(start, 8, Start8), ignore(start+8==Start8)] ->
       ta(Ta_Param,
          tvs1=[start+8],
          tvs2=[Start8, start],
          happens(move(james, l3, l4), Start8)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7170).
axiom(happens(move(james, l3, l4), Start8),
    [b(start, Start8), toffset(start, 8, Start8)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7172
% completion Happens
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7172).
==> completion(happens).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7174
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7175).
% range time 0 9
==> range(time,0,9).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7175
% range offset 1 1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7175).
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/FrankEtAl2003/Story1.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{FrankEtAl:2003,
%;   author = "Stefan L. Frank and Mathieu Koppen and Leo G. M. Noordman and Wietske Vonk",
%;   year = "2003",
%;   title = "Modeling knowledge-based inferences in story comprehension",
%;   journal = "Cognitive Science",
%;   volume = "27",
%;   pages = "875--910",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7204
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7205).
% option modeldiff on
:- set_ec_option(modeldiff, on).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7206
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7207).
% load foundations/Root.e
:- load_e('foundations/Root.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7207
% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7207).
:- load_e('foundations/EC.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7209
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7210).
% sort agent
==> sort(agent).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7211
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7212).
% load examples/FrankEtAl2003/FrankEtAl.e
:- load_e('examples/FrankEtAl2003/FrankEtAl.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7213
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7214).
% agent Bob, Jilly
==> t(agent,bob).
==> t(agent,jilly).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7215
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7216).
% !HoldsAt(Raining(),0).

 /*  [] ->
       ta(Ta_Param, tvs1=[start], tvs2=[start], holds_at(neg(raining), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7216).
axiom(holds_at(neg(raining), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7216
% !HoldsAt(SunShining(),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7216).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(sunShining), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7216).
axiom(holds_at(neg(sunShining), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7218
% (HoldsAt(PlaySoccer(Bob),1) & HoldsAt(PlaySoccer(Jilly),1)) |
% (HoldsAt(PlayHideAndSeek(Bob),1) & HoldsAt(PlayHideAndSeek(Jilly),1)) |
% (HoldsAt(PlayComputerGame(Bob),1) & HoldsAt(PlayComputerGame(Jilly),1)).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7220
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7218).

 /*   (   holds_at(playSoccer(bob), start+1),
          holds_at(playSoccer(jilly), start+1)
      ;   holds_at(playHideAndSeek(bob), start+1),
          holds_at(playHideAndSeek(jilly), start+1)
      ;   holds_at(playComputerGame(bob), start+1),
          holds_at(playComputerGame(jilly), start+1)
      ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7218).

 /*  holds_at(playSoccer(bob), start+1) :-
       (   not(holds_at(playHideAndSeek(bob), start+1))
       ;   not(holds_at(playHideAndSeek(jilly), start+1))
       ),
       (   not(holds_at(playComputerGame(bob), start+1))
       ;   not(holds_at(playComputerGame(jilly), start+1))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7218).

 /*  [(holds_at(neg(playHideAndSeek(bob)), Time);holds_at(neg(playHideAndSeek(jilly)), Time)),  (holds_at(neg(playComputerGame(bob)), Time);holds_at(neg(playComputerGame(jilly)), Time)), b(start, Time), ignore(start+1==Time)] ->
       ta(Ta_Param,
          tvs1=[start+1],
          tvs2=[Time, start],
          holds_at(playSoccer(bob), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7218).
axiom(holds_at(playSoccer(bob), Time),
   
    [  (holds_at(neg(playHideAndSeek(bob)), Time);holds_at(neg(playHideAndSeek(jilly)), Time)),
       (holds_at(neg(playComputerGame(bob)), Time);holds_at(neg(playComputerGame(jilly)), Time)),
      b(start, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7218).

 /*  holds_at(playSoccer(jilly), start+1) :-
       (   not(holds_at(playHideAndSeek(bob), start+1))
       ;   not(holds_at(playHideAndSeek(jilly), start+1))
       ),
       (   not(holds_at(playComputerGame(bob), start+1))
       ;   not(holds_at(playComputerGame(jilly), start+1))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7218).

 /*  [(holds_at(neg(playHideAndSeek(bob)), Time2);holds_at(neg(playHideAndSeek(jilly)), Time2)),  (holds_at(neg(playComputerGame(bob)), Time2);holds_at(neg(playComputerGame(jilly)), Time2)), b(start, Time2), ignore(start+1==Time2)] ->
       ta(Ta_Param3,
          tvs1=[start+1],
          tvs2=[Time2, start],
          holds_at(playSoccer(jilly), Time2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7218).
axiom(holds_at(playSoccer(jilly), Time2),
   
    [  (holds_at(neg(playHideAndSeek(bob)), Time2);holds_at(neg(playHideAndSeek(jilly)), Time2)),
       (holds_at(neg(playComputerGame(bob)), Time2);holds_at(neg(playComputerGame(jilly)), Time2)),
      b(start, Time2)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7218).

 /*  holds_at(playHideAndSeek(bob), start+1) :-
       (   not(holds_at(playComputerGame(bob), start+1))
       ;   not(holds_at(playComputerGame(jilly), start+1))
       ),
       (   not(holds_at(playSoccer(bob), start+1))
       ;   not(holds_at(playSoccer(jilly), start+1))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7218).

 /*  [(holds_at(neg(playComputerGame(bob)), Time4);holds_at(neg(playComputerGame(jilly)), Time4)),  (holds_at(neg(playSoccer(bob)), Time4);holds_at(neg(playSoccer(jilly)), Time4)), b(start, Time4), ignore(start+1==Time4)] ->
       ta(Ta_Param5,
          tvs1=[start+1],
          tvs2=[Time4, start],
          holds_at(playHideAndSeek(bob), Time4)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7218).
axiom(holds_at(playHideAndSeek(bob), Time4),
   
    [  (holds_at(neg(playComputerGame(bob)), Time4);holds_at(neg(playComputerGame(jilly)), Time4)),
       (holds_at(neg(playSoccer(bob)), Time4);holds_at(neg(playSoccer(jilly)), Time4)),
      b(start, Time4)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7218).

 /*  holds_at(playHideAndSeek(jilly), start+1) :-
       (   not(holds_at(playComputerGame(bob), start+1))
       ;   not(holds_at(playComputerGame(jilly), start+1))
       ),
       (   not(holds_at(playSoccer(bob), start+1))
       ;   not(holds_at(playSoccer(jilly), start+1))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7218).

 /*  [(holds_at(neg(playComputerGame(bob)), Time6);holds_at(neg(playComputerGame(jilly)), Time6)),  (holds_at(neg(playSoccer(bob)), Time6);holds_at(neg(playSoccer(jilly)), Time6)), b(start, Time6), ignore(start+1==Time6)] ->
       ta(Ta_Param7,
          tvs1=[start+1],
          tvs2=[Time6, start],
          holds_at(playHideAndSeek(jilly), Time6)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7218).
axiom(holds_at(playHideAndSeek(jilly), Time6),
   
    [  (holds_at(neg(playComputerGame(bob)), Time6);holds_at(neg(playComputerGame(jilly)), Time6)),
       (holds_at(neg(playSoccer(bob)), Time6);holds_at(neg(playSoccer(jilly)), Time6)),
      b(start, Time6)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7218).

 /*  holds_at(playComputerGame(bob), start+1) :-
       (   not(holds_at(playHideAndSeek(bob), start+1))
       ;   not(holds_at(playHideAndSeek(jilly), start+1))
       ),
       (   not(holds_at(playSoccer(bob), start+1))
       ;   not(holds_at(playSoccer(jilly), start+1))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7218).

 /*  [(holds_at(neg(playHideAndSeek(bob)), Time8);holds_at(neg(playHideAndSeek(jilly)), Time8)),  (holds_at(neg(playSoccer(bob)), Time8);holds_at(neg(playSoccer(jilly)), Time8)), b(start, Time8), ignore(start+1==Time8)] ->
       ta(Ta_Param9,
          tvs1=[start+1],
          tvs2=[Time8, start],
          holds_at(playComputerGame(bob), Time8)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7218).
axiom(holds_at(playComputerGame(bob), Time8),
   
    [  (holds_at(neg(playHideAndSeek(bob)), Time8);holds_at(neg(playHideAndSeek(jilly)), Time8)),
       (holds_at(neg(playSoccer(bob)), Time8);holds_at(neg(playSoccer(jilly)), Time8)),
      b(start, Time8)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7218).

 /*  holds_at(playComputerGame(jilly), start+1) :-
       (   not(holds_at(playHideAndSeek(bob), start+1))
       ;   not(holds_at(playHideAndSeek(jilly), start+1))
       ),
       (   not(holds_at(playSoccer(bob), start+1))
       ;   not(holds_at(playSoccer(jilly), start+1))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7218).

 /*  [(holds_at(neg(playHideAndSeek(bob)), Time10);holds_at(neg(playHideAndSeek(jilly)), Time10)),  (holds_at(neg(playSoccer(bob)), Time10);holds_at(neg(playSoccer(jilly)), Time10)), b(start, Time10), ignore(start+1==Time10)] ->
       ta(Ta_Param11,
          tvs1=[start+1],
          tvs2=[Time10, start],
          holds_at(playComputerGame(jilly), Time10)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7218).
axiom(holds_at(playComputerGame(jilly), Time10),
   
    [  (holds_at(neg(playHideAndSeek(bob)), Time10);holds_at(neg(playHideAndSeek(jilly)), Time10)),
       (holds_at(neg(playSoccer(bob)), Time10);holds_at(neg(playSoccer(jilly)), Time10)),
      b(start, Time10)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7222
% HoldsAt(Win(Bob),1) | HoldsAt(Win(Jilly),1).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7222).

 /*   (   holds_at(win(bob), start+1)
      ;   holds_at(win(jilly), start+1)
      ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7222).

 /*  holds_at(win(bob), start+1) :-
       not(holds_at(win(jilly), start+1)).
 */

 /*  [holds_at(neg(win(jilly)), Time), b(start, Time), ignore(start+1==Time)] ->
       ta(Ta_Param,
          tvs1=[start+1],
          tvs2=[Time, start],
          holds_at(win(bob), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7222).
axiom(holds_at(win(bob), Time),
    [holds_at(neg(win(jilly)), Time), b(start, Time)]).

 /*  holds_at(win(jilly), start+1) :-
       not(holds_at(win(bob), start+1)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7222).

 /*  [holds_at(neg(win(bob)), Time2), b(start, Time2), ignore(start+1==Time2)] ->
       ta(Ta_Param3,
          tvs1=[start+1],
          tvs2=[Time2, start],
          holds_at(win(jilly), Time2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7222).
axiom(holds_at(win(jilly), Time2),
    [holds_at(neg(win(bob)), Time2), b(start, Time2)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7224
% range time 0 1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7224).
==> range(time,0,1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7225
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7226).
% range offset 0 0
==> range(offset,0,0).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/FrankEtAl2003/FrankEtAl.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{FrankEtAl:2003,
%;   author = "Stefan L. Frank and Mathieu Koppen and Leo G. M. Noordman and Wietske Vonk",
%;   year = "2003",
%;   title = "Modeling knowledge-based inferences in story comprehension",
%;   journal = "Cognitive Science",
%;   volume = "27",
%;   pages = "875--910",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7254
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7255).
% fluent SunShining()
fluent(sunShining).
==> mpred_prop(sunShining,fluent).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7255
% fluent Raining()
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7255).
fluent(raining).
==> mpred_prop(raining,fluent).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7256
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7257).
% fluent Outside(agent)
fluent(outside(agent)).
==> mpred_prop(outside(agent),fluent).
==> meta_argtypes(outside(agent)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7257
% fluent PlaySoccer(agent)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7257).
fluent(playSoccer(agent)).
==> mpred_prop(playSoccer(agent),fluent).
==> meta_argtypes(playSoccer(agent)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7258
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7259).
% fluent PlayHideAndSeek(agent)
fluent(playHideAndSeek(agent)).
==> mpred_prop(playHideAndSeek(agent),fluent).
==> meta_argtypes(playHideAndSeek(agent)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7259
% fluent PlayComputerGame(agent)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7259).
fluent(playComputerGame(agent)).
==> mpred_prop(playComputerGame(agent),fluent).
==> meta_argtypes(playComputerGame(agent)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7260
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7261).
% fluent PlayWithDog(agent)
fluent(playWithDog(agent)).
==> mpred_prop(playWithDog(agent),fluent).
==> meta_argtypes(playWithDog(agent)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7261
% fluent Win(agent)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7261).
fluent(win(agent)).
==> mpred_prop(win(agent),fluent).
==> meta_argtypes(win(agent)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7263
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7264).
% noninertial Outside, PlaySoccer, PlayHideAndSeek, PlayComputerGame
==> noninertial(outside).
==> noninertial(playSoccer).
==> noninertial(playHideAndSeek).
==> noninertial(playComputerGame).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7264
% noninertial PlayWithDog, Win
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7264).
==> noninertial(playWithDog).
==> noninertial(win).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7266
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7267).
% xor PlaySoccer, PlayHideAndSeek, PlayComputerGame, PlayWithDog
==> xor([playSoccer,playHideAndSeek,playComputerGame,playWithDog]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7268
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7269).
% [agent,time]
% HoldsAt(PlaySoccer(agent),time) ->
% HoldsAt(Outside(agent),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7270

 /*  holds_at(playSoccer(Agent), Time) ->
       holds_at(outside(Agent), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7269).

 /*  holds_at(outside(Agent), Time) :-
       holds_at(playSoccer(Agent), Time).
 */

 /*  [holds_at(playSoccer(Agent), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(outside(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7269).
axiom(holds_at(outside(Agent), Time),
    [holds_at(playSoccer(Agent), Time)]).

 /*  not(holds_at(playSoccer(Agent), Time)) :-
       not(holds_at(outside(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7269).

 /*  [holds_at(neg(outside(Agent)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(playSoccer(Agent)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7269).
axiom(holds_at(neg(playSoccer(Agent)), Time),
    [holds_at(neg(outside(Agent)), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7272
% [agent,time]
% HoldsAt(PlaySoccer(agent),time) ->
% ({agent1} agent1!=agent & HoldsAt(PlaySoccer(agent1),time)).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7274

 /*  holds_at(playSoccer(Agent), Time) ->
       exists([Agent1],
               (diff(Agent1, Agent), holds_at(playSoccer(Agent1), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7274).

 /*  not(holds_at(playSoccer(Agent), Time)) :-
       (   not(diff(Agent1, Agent))
       ;   not(holds_at(playSoccer(Agent1), Time))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7274).

 /*  [(equals(Agent1, Agent);holds_at(neg(playSoccer(Agent1)), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(playSoccer(Agent)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7274).
axiom(holds_at(neg(playSoccer(Agent)), Time),
   
    [  (equals(Agent, Agent1);holds_at(neg(playSoccer(Agent1)), Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7276
% [agent,time]
% HoldsAt(PlayHideAndSeek(agent),time) ->
% ({agent1} agent1!=agent & HoldsAt(PlayHideAndSeek(agent1),time)).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7278

 /*  holds_at(playHideAndSeek(Agent), Time) ->
       exists([Agent1],
               (diff(Agent1, Agent), holds_at(playHideAndSeek(Agent1), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7278).

 /*  not(holds_at(playHideAndSeek(Agent), Time)) :-
       (   not(diff(Agent1, Agent))
       ;   not(holds_at(playHideAndSeek(Agent1), Time))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7278).

 /*  [(equals(Agent1, Agent);holds_at(neg(playHideAndSeek(Agent1)), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(playHideAndSeek(Agent)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7278).
axiom(holds_at(neg(playHideAndSeek(Agent)), Time),
   
    [  (equals(Agent, Agent1);holds_at(neg(playHideAndSeek(Agent1)), Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7280
% [agent,time]
% HoldsAt(PlayComputerGame(agent),time) ->
% !HoldsAt(Outside(agent),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7282

 /*  holds_at(playComputerGame(Agent), Time) ->
       holds_at(neg(outside(Agent)), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7282).

 /*  holds_at(neg(outside(Agent)), Time) :-
       holds_at(playComputerGame(Agent), Time).
 */

 /*  [holds_at(playComputerGame(Agent), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(outside(Agent)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7282).
axiom(holds_at(neg(outside(Agent)), Time),
    [holds_at(playComputerGame(Agent), Time)]).

 /*  not(holds_at(playComputerGame(Agent), Time)) :-
       not(holds_at(neg(outside(Agent)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7282).

 /*  [holds_at(outside(Agent), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(playComputerGame(Agent)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7282).
axiom(holds_at(neg(playComputerGame(Agent)), Time),
    [holds_at(outside(Agent), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7284
% [agent,time]
% HoldsAt(Win(agent),time) ->
% (HoldsAt(PlaySoccer(agent),time) |
%  HoldsAt(PlayHideAndSeek(agent),time) |
%  (HoldsAt(PlayComputerGame(agent),time) &
%   ({agent1} agent1!=agent & HoldsAt(PlayComputerGame(agent1),time)))).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7289
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7286).

 /*  holds_at(win(Agent), Time) ->
       (   holds_at(playSoccer(Agent), Time)
       ;   holds_at(playHideAndSeek(Agent), Time)
       ;   holds_at(playComputerGame(Agent), Time),
           exists([Agent1],
                   (diff(Agent1, Agent), holds_at(playComputerGame(Agent1), Time)))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7286).

 /*  not(holds_at(win(Agent), Time)) :-
       not(holds_at(playSoccer(Agent), Time)),
       not(holds_at(playHideAndSeek(Agent), Time)),
       (   not(holds_at(playComputerGame(Agent), Time))
       ;   not(diff(Agent1, Agent))
       ;   not(holds_at(playComputerGame(Agent1), Time))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7286).

 /*  [holds_at(neg(playSoccer(Agent)), Time), holds_at(neg(playHideAndSeek(Agent)), Time),  (holds_at(neg(playComputerGame(Agent)), Time);equals(Agent1, Agent);holds_at(neg(playComputerGame(Agent1)), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(win(Agent)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7286).
axiom(holds_at(neg(win(Agent)), Time),
   
    [ holds_at(neg(playSoccer(Agent)), Time),
      holds_at(neg(playHideAndSeek(Agent)), Time),
       (holds_at(neg(playComputerGame(Agent)), Time);equals(Agent, Agent1);holds_at(neg(playComputerGame(Agent1)), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7286).

 /*  holds_at(playSoccer(Agent), Time) :-
       ( not(holds_at(playHideAndSeek(Agent), Time)),
         (   not(holds_at(playComputerGame(Agent), Time))
         ;   not(diff(Agent1, Agent))
         ;   not(holds_at(playComputerGame(Agent1), Time))
         )
       ),
       holds_at(win(Agent), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7286).

 /*  [holds_at(neg(playHideAndSeek(Agent)), Time),  (holds_at(neg(playComputerGame(Agent)), Time);equals(Agent1, Agent);holds_at(neg(playComputerGame(Agent1)), Time)), holds_at(win(Agent), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(playSoccer(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7286).
axiom(holds_at(playSoccer(Agent), Time),
   
    [ holds_at(neg(playHideAndSeek(Agent)), Time),
       (holds_at(neg(playComputerGame(Agent)), Time);equals(Agent, Agent1);holds_at(neg(playComputerGame(Agent1)), Time)),
      holds_at(win(Agent), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7286).

 /*  holds_at(playHideAndSeek(Agent), Time) :-
       (   not(holds_at(playComputerGame(Agent), Time))
       ;   not(diff(Agent1, Agent))
       ;   not(holds_at(playComputerGame(Agent1), Time))
       ),
       not(holds_at(playSoccer(Agent), Time)),
       holds_at(win(Agent), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7286).

 /*  [(holds_at(neg(playComputerGame(Agent)), Time);equals(Agent1, Agent);holds_at(neg(playComputerGame(Agent1)), Time)), holds_at(neg(playSoccer(Agent)), Time), holds_at(win(Agent), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(playHideAndSeek(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7286).
axiom(holds_at(playHideAndSeek(Agent), Time),
   
    [  (holds_at(neg(playComputerGame(Agent)), Time);equals(Agent, Agent1);holds_at(neg(playComputerGame(Agent1)), Time)),
      holds_at(neg(playSoccer(Agent)), Time),
      holds_at(win(Agent), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7286).

 /*  holds_at(playComputerGame(Agent), Time) :-
       not(holds_at(playHideAndSeek(Agent), Time)),
       not(holds_at(playSoccer(Agent), Time)),
       holds_at(win(Agent), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7286).

 /*  [holds_at(neg(playHideAndSeek(Agent)), Time), holds_at(neg(playSoccer(Agent)), Time), holds_at(win(Agent), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(playComputerGame(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7286).
axiom(holds_at(playComputerGame(Agent), Time),
   
    [ holds_at(neg(playHideAndSeek(Agent)), Time),
      holds_at(neg(playSoccer(Agent)), Time),
      holds_at(win(Agent), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7286).

 /*  holds_at(playComputerGame(Agent1), Time) :-
       not(holds_at(playHideAndSeek(Agent), Time)),
       not(holds_at(playSoccer(Agent), Time)),
       holds_at(win(Agent), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7286).

 /*  [holds_at(neg(playHideAndSeek(Agent)), Time), holds_at(neg(playSoccer(Agent)), Time), holds_at(win(Agent), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(playComputerGame(Agent1), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7286).
axiom(holds_at(playComputerGame(Agent1), Time),
   
    [ holds_at(neg(playHideAndSeek(Agent)), Time),
      holds_at(neg(playSoccer(Agent)), Time),
      holds_at(win(Agent), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7291
% [agent,time]
% HoldsAt(PlaySoccer(agent),time) &
% HoldsAt(Win(agent),time) ->
% !HoldsAt(PlaySoccer(agent),time+1).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7294
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7293).

 /*  holds_at(playSoccer(Agent), Time), holds_at(win(Agent), Time) ->
       holds_at(neg(playSoccer(Agent)), Time+1).
 */

 /*  holds_at(neg(playSoccer(Agent)), Time+1) :-
       holds_at(playSoccer(Agent), Time),
       holds_at(win(Agent), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7293).

 /*  [holds_at(playSoccer(Agent), Time), holds_at(win(Agent), Time), b(Time, Time2), ignore(Time+1==Time2)] ->
       ta(Time,
          tvs1=[Time, Time+1],
          tvs2=[Time, Time2],
          holds_at(neg(playSoccer(Agent)), Time2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7293).
axiom(holds_at(neg(playSoccer(Agent)), Time2),
   
    [ holds_at(playSoccer(Agent), Time),
      holds_at(win(Agent), Time),
      b(Time, Time2)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7293).

 /*  not(holds_at(playSoccer(Agent), Time)) :-
       holds_at(win(Agent), Time),
       not(holds_at(neg(playSoccer(Agent)), Time+1)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7293).

 /*  [holds_at(win(Agent), Time), holds_at(playSoccer(Agent), Time3), b(Time, Time3), ignore(Time+1==Time3)] ->
       ta(Time,
          tvs1=[Time, Time+1],
          tvs2=[Time, Time3],
          holds_at(neg(playSoccer(Agent)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7293).
axiom(holds_at(neg(playSoccer(Agent)), Time),
   
    [ holds_at(win(Agent), Time),
      holds_at(playSoccer(Agent), Time3),
      b(Time, Time3)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7293).

 /*  not(holds_at(win(Agent), Time)) :-
       holds_at(playSoccer(Agent), Time),
       not(holds_at(neg(playSoccer(Agent)), Time+1)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7293).

 /*  [holds_at(playSoccer(Agent), Time), holds_at(playSoccer(Agent), Time4), b(Time, Time4), ignore(Time+1==Time4)] ->
       ta(Time,
          tvs1=[Time, Time+1],
          tvs2=[Time, Time4],
          holds_at(neg(win(Agent)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7293).
axiom(holds_at(neg(win(Agent)), Time),
   
    [ holds_at(playSoccer(Agent), Time),
      holds_at(playSoccer(Agent), Time4),
      b(Time, Time4)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7296
% [agent,time]
% HoldsAt(PlayHideAndSeek(agent),time) &
% HoldsAt(Win(agent),time) ->
% !HoldsAt(PlayHideAndSeek(agent),time+1).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7299
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7298).

 /*  holds_at(playHideAndSeek(Agent), Time), holds_at(win(Agent), Time) ->
       holds_at(neg(playHideAndSeek(Agent)), Time+1).
 */

 /*  holds_at(neg(playHideAndSeek(Agent)), Time+1) :-
       holds_at(playHideAndSeek(Agent), Time),
       holds_at(win(Agent), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7298).

 /*  [holds_at(playHideAndSeek(Agent), Time), holds_at(win(Agent), Time), b(Time, Time2), ignore(Time+1==Time2)] ->
       ta(Time,
          tvs1=[Time, Time+1],
          tvs2=[Time, Time2],
          holds_at(neg(playHideAndSeek(Agent)), Time2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7298).
axiom(holds_at(neg(playHideAndSeek(Agent)), Time2),
   
    [ holds_at(playHideAndSeek(Agent), Time),
      holds_at(win(Agent), Time),
      b(Time, Time2)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7298).

 /*  not(holds_at(playHideAndSeek(Agent), Time)) :-
       holds_at(win(Agent), Time),
       not(holds_at(neg(playHideAndSeek(Agent)), Time+1)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7298).

 /*  [holds_at(win(Agent), Time), holds_at(playHideAndSeek(Agent), Time3), b(Time, Time3), ignore(Time+1==Time3)] ->
       ta(Time,
          tvs1=[Time, Time+1],
          tvs2=[Time, Time3],
          holds_at(neg(playHideAndSeek(Agent)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7298).
axiom(holds_at(neg(playHideAndSeek(Agent)), Time),
   
    [ holds_at(win(Agent), Time),
      holds_at(playHideAndSeek(Agent), Time3),
      b(Time, Time3)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7298).

 /*  not(holds_at(win(Agent), Time)) :-
       holds_at(playHideAndSeek(Agent), Time),
       not(holds_at(neg(playHideAndSeek(Agent)), Time+1)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7298).

 /*  [holds_at(playHideAndSeek(Agent), Time), holds_at(playHideAndSeek(Agent), Time4), b(Time, Time4), ignore(Time+1==Time4)] ->
       ta(Time,
          tvs1=[Time, Time+1],
          tvs2=[Time, Time4],
          holds_at(neg(win(Agent)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7298).
axiom(holds_at(neg(win(Agent)), Time),
   
    [ holds_at(playHideAndSeek(Agent), Time),
      holds_at(playHideAndSeek(Agent), Time4),
      b(Time, Time4)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7301
% [agent,time]
% HoldsAt(PlayComputerGame(agent),time) &
% HoldsAt(Win(agent),time) ->
% !HoldsAt(PlayComputerGame(agent),time+1).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7304
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7303).

 /*  holds_at(playComputerGame(Agent), Time), holds_at(win(Agent), Time) ->
       holds_at(neg(playComputerGame(Agent)), Time+1).
 */

 /*  holds_at(neg(playComputerGame(Agent)), Time+1) :-
       holds_at(playComputerGame(Agent), Time),
       holds_at(win(Agent), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7303).

 /*  [holds_at(playComputerGame(Agent), Time), holds_at(win(Agent), Time), b(Time, Time2), ignore(Time+1==Time2)] ->
       ta(Time,
          tvs1=[Time, Time+1],
          tvs2=[Time, Time2],
          holds_at(neg(playComputerGame(Agent)), Time2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7303).
axiom(holds_at(neg(playComputerGame(Agent)), Time2),
   
    [ holds_at(playComputerGame(Agent), Time),
      holds_at(win(Agent), Time),
      b(Time, Time2)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7303).

 /*  not(holds_at(playComputerGame(Agent), Time)) :-
       holds_at(win(Agent), Time),
       not(holds_at(neg(playComputerGame(Agent)), Time+1)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7303).

 /*  [holds_at(win(Agent), Time), holds_at(playComputerGame(Agent), Time3), b(Time, Time3), ignore(Time+1==Time3)] ->
       ta(Time,
          tvs1=[Time, Time+1],
          tvs2=[Time, Time3],
          holds_at(neg(playComputerGame(Agent)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7303).
axiom(holds_at(neg(playComputerGame(Agent)), Time),
   
    [ holds_at(win(Agent), Time),
      holds_at(playComputerGame(Agent), Time3),
      b(Time, Time3)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7303).

 /*  not(holds_at(win(Agent), Time)) :-
       holds_at(playComputerGame(Agent), Time),
       not(holds_at(neg(playComputerGame(Agent)), Time+1)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7303).

 /*  [holds_at(playComputerGame(Agent), Time), holds_at(playComputerGame(Agent), Time4), b(Time, Time4), ignore(Time+1==Time4)] ->
       ta(Time,
          tvs1=[Time, Time+1],
          tvs2=[Time, Time4],
          holds_at(neg(win(Agent)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7303).
axiom(holds_at(neg(win(Agent)), Time),
   
    [ holds_at(playComputerGame(Agent), Time),
      holds_at(playComputerGame(Agent), Time4),
      b(Time, Time4)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7306
% [agent,time]
% HoldsAt(Win(agent),time) ->
% HoldsAt(PlaySoccer(agent),time-1) |
% HoldsAt(PlayHideAndSeek(agent),time-1) |
% HoldsAt(PlayComputerGame(agent),time-1).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7310
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7308).

 /*  holds_at(win(Agent), Time) ->
       (   holds_at(playSoccer(Agent), Time-1)
       ;   holds_at(playHideAndSeek(Agent), Time-1)
       ;   holds_at(playComputerGame(Agent), Time-1)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7308).

 /*  holds_at(playSoccer(Agent), Time-1) :-
       ( not(holds_at(playHideAndSeek(Agent), Time-1)),
         not(holds_at(playComputerGame(Agent), Time-1))
       ),
       holds_at(win(Agent), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7308).

 /*  [holds_at(neg(playHideAndSeek(Agent)), Time2), holds_at(neg(playComputerGame(Agent)), Time2), holds_at(win(Agent), Time), b(Time2, Time), ignore(Time-1==Time2)] ->
       ta(Time,
          tvs1=[Time, Time-1],
          tvs2=[Time, Time2],
          holds_at(playSoccer(Agent), Time2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7308).
axiom(holds_at(playSoccer(Agent), Time2),
   
    [ holds_at(neg(playHideAndSeek(Agent)), Time2),
      holds_at(neg(playComputerGame(Agent)), Time2),
      holds_at(win(Agent), Time),
      b(Time2, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7308).

 /*  holds_at(playHideAndSeek(Agent), Time-1) :-
       not(holds_at(playComputerGame(Agent), Time-1)),
       not(holds_at(playSoccer(Agent), Time-1)),
       holds_at(win(Agent), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7308).

 /*  [holds_at(neg(playComputerGame(Agent)), Time3), holds_at(neg(playSoccer(Agent)), Time3), holds_at(win(Agent), Time), b(Time3, Time), ignore(Time-1==Time3)] ->
       ta(Time,
          tvs1=[Time, Time-1],
          tvs2=[Time, Time3],
          holds_at(playHideAndSeek(Agent), Time3)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7308).
axiom(holds_at(playHideAndSeek(Agent), Time3),
   
    [ holds_at(neg(playComputerGame(Agent)), Time3),
      holds_at(neg(playSoccer(Agent)), Time3),
      holds_at(win(Agent), Time),
      b(Time3, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7308).

 /*  holds_at(playComputerGame(Agent), Time-1) :-
       not(holds_at(playHideAndSeek(Agent), Time-1)),
       not(holds_at(playSoccer(Agent), Time-1)),
       holds_at(win(Agent), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7308).

 /*  [holds_at(neg(playHideAndSeek(Agent)), Time4), holds_at(neg(playSoccer(Agent)), Time4), holds_at(win(Agent), Time), b(Time4, Time), ignore(Time-1==Time4)] ->
       ta(Time,
          tvs1=[Time, Time-1],
          tvs2=[Time, Time4],
          holds_at(playComputerGame(Agent), Time4)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7308).
axiom(holds_at(playComputerGame(Agent), Time4),
   
    [ holds_at(neg(playHideAndSeek(Agent)), Time4),
      holds_at(neg(playSoccer(Agent)), Time4),
      holds_at(win(Agent), Time),
      b(Time4, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7308).

 /*  not(holds_at(win(Agent), Time)) :-
       not(holds_at(playSoccer(Agent), Time-1)),
       not(holds_at(playHideAndSeek(Agent), Time-1)),
       not(holds_at(playComputerGame(Agent), Time-1)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7308).

 /*  [holds_at(neg(playSoccer(Agent)), Time5), holds_at(neg(playHideAndSeek(Agent)), Time5), holds_at(neg(playComputerGame(Agent)), Time5), b(Time5, Time), ignore(Time-1==Time5)] ->
       ta(Time,
          tvs1=[Time, Time-1],
          tvs2=[Time, Time5],
          holds_at(neg(win(Agent)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7308).
axiom(holds_at(neg(win(Agent)), Time),
   
    [ holds_at(neg(playSoccer(Agent)), Time5),
      holds_at(neg(playHideAndSeek(Agent)), Time5),
      holds_at(neg(playComputerGame(Agent)), Time5),
      b(Time5, Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7312
% [agent,time]
% HoldsAt(PlaySoccer(agent),time) ->
% !HoldsAt(Raining(),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7314

 /*  holds_at(playSoccer(Agent), Time) ->
       holds_at(neg(raining), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7314).

 /*  holds_at(neg(raining), Time) :-
       holds_at(playSoccer(Agent), Time).
 */

 /*  [holds_at(playSoccer(Agent), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(raining), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7314).
axiom(holds_at(neg(raining), Time),
    [holds_at(playSoccer(Agent), Time)]).

 /*  not(holds_at(playSoccer(Agent), Time)) :-
       not(holds_at(neg(raining), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7314).

 /*  [holds_at(raining, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(playSoccer(Agent)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7314).
axiom(holds_at(neg(playSoccer(Agent)), Time),
    [holds_at(raining, Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7316
% [agent,time]
% HoldsAt(Win(agent),time) ->
% !({agent1} agent1!=agent & HoldsAt(Win(agent1),time)).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7318

 /*  holds_at(win(Agent), Time) ->
       not(exists([Agent1],
                   (diff(Agent1, Agent), holds_at(win(Agent1), Time)))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7318).

 /*  not(holds_at(win(Agent1), Time)) :-
       diff(Agent1, Agent),
       holds_at(win(Agent), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7318).

 /*  [diff(Agent1, Agent), holds_at(win(Agent), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(win(Agent1)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7318).
axiom(holds_at(neg(win(Agent1)), Time),
    [diff(Agent1, Agent), holds_at(win(Agent), Time)]).

 /*  not(holds_at(win(Agent), Time)) :-
       diff(Agent1, Agent),
       holds_at(win(Agent1), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7318).

 /*  [diff(Agent1, Agent), holds_at(win(Agent1), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(win(Agent)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7318).
axiom(holds_at(neg(win(Agent)), Time),
    [diff(Agent, Agent1), holds_at(win(Agent1), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7320
% [agent1,agent2,time]
% HoldsAt(PlayHideAndSeek(agent1),time) &
% HoldsAt(PlayHideAndSeek(agent2),time) ->
% ((HoldsAt(Outside(agent1),time) & HoldsAt(Outside(agent2),time)) |
%  (!HoldsAt(Outside(agent1),time) & !HoldsAt(Outside(agent2),time))).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7324
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7322).

 /*  holds_at(playHideAndSeek(Agent1), Time), holds_at(playHideAndSeek(Agent2), Time) ->
       (   holds_at(outside(Agent1), Time),
           holds_at(outside(Agent2), Time)
       ;   holds_at(neg(outside(Agent1)), Time),
           holds_at(neg(outside(Agent2)), Time)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7322).

 /*  not(holds_at(playHideAndSeek(Agent1), Time)) :-
       holds_at(playHideAndSeek(Agent2), Time),
       (   not(holds_at(outside(Agent1), Time))
       ;   not(holds_at(outside(Agent2), Time))
       ),
       (   not(holds_at(neg(outside(Agent1)), Time))
       ;   not(holds_at(neg(outside(Agent2)), Time))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7322).

 /*  [holds_at(playHideAndSeek(Agent2), Time),  (holds_at(neg(outside(Agent1)), Time);holds_at(neg(outside(Agent2)), Time)),  (holds_at(outside(Agent1), Time);holds_at(outside(Agent2), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(playHideAndSeek(Agent1)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7322).
axiom(holds_at(neg(playHideAndSeek(Agent1)), Time),
   
    [ holds_at(playHideAndSeek(Agent2), Time),
       (holds_at(neg(outside(Agent1)), Time);holds_at(neg(outside(Agent2)), Time)),
       (holds_at(outside(Agent1), Time);holds_at(outside(Agent2), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7322).

 /*  not(holds_at(playHideAndSeek(Agent2), Time)) :-
       holds_at(playHideAndSeek(Agent1), Time),
       (   not(holds_at(outside(Agent1), Time))
       ;   not(holds_at(outside(Agent2), Time))
       ),
       (   not(holds_at(neg(outside(Agent1)), Time))
       ;   not(holds_at(neg(outside(Agent2)), Time))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7322).

 /*  [holds_at(playHideAndSeek(Agent1), Time),  (holds_at(neg(outside(Agent1)), Time);holds_at(neg(outside(Agent2)), Time)),  (holds_at(outside(Agent1), Time);holds_at(outside(Agent2), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(playHideAndSeek(Agent2)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7322).
axiom(holds_at(neg(playHideAndSeek(Agent2)), Time),
   
    [ holds_at(playHideAndSeek(Agent1), Time),
       (holds_at(neg(outside(Agent1)), Time);holds_at(neg(outside(Agent2)), Time)),
       (holds_at(outside(Agent1), Time);holds_at(outside(Agent2), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7322).

 /*  holds_at(outside(Agent1), Time) :-
       (   not(holds_at(neg(outside(Agent1)), Time))
       ;   not(holds_at(neg(outside(Agent2)), Time))
       ),
       holds_at(playHideAndSeek(Agent1), Time),
       holds_at(playHideAndSeek(Agent2), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7322).

 /*  [(holds_at(outside(Agent1), Time);holds_at(outside(Agent2), Time)), holds_at(playHideAndSeek(Agent1), Time), holds_at(playHideAndSeek(Agent2), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(outside(Agent1), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7322).
axiom(holds_at(outside(Agent1), Time),
   
    [  (holds_at(outside(Agent1), Time);holds_at(outside(Agent2), Time)),
      holds_at(playHideAndSeek(Agent1), Time),
      holds_at(playHideAndSeek(Agent2), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7322).

 /*  holds_at(outside(Agent2), Time) :-
       (   not(holds_at(neg(outside(Agent1)), Time))
       ;   not(holds_at(neg(outside(Agent2)), Time))
       ),
       holds_at(playHideAndSeek(Agent1), Time),
       holds_at(playHideAndSeek(Agent2), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7322).

 /*  [(holds_at(outside(Agent1), Time);holds_at(outside(Agent2), Time)), holds_at(playHideAndSeek(Agent1), Time), holds_at(playHideAndSeek(Agent2), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(outside(Agent2), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7322).
axiom(holds_at(outside(Agent2), Time),
   
    [  (holds_at(outside(Agent1), Time);holds_at(outside(Agent2), Time)),
      holds_at(playHideAndSeek(Agent1), Time),
      holds_at(playHideAndSeek(Agent2), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7322).

 /*  holds_at(neg(outside(Agent1)), Time) :-
       (   not(holds_at(outside(Agent1), Time))
       ;   not(holds_at(outside(Agent2), Time))
       ),
       holds_at(playHideAndSeek(Agent1), Time),
       holds_at(playHideAndSeek(Agent2), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7322).

 /*  [(holds_at(neg(outside(Agent1)), Time);holds_at(neg(outside(Agent2)), Time)), holds_at(playHideAndSeek(Agent1), Time), holds_at(playHideAndSeek(Agent2), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(outside(Agent1)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7322).
axiom(holds_at(neg(outside(Agent1)), Time),
   
    [  (holds_at(neg(outside(Agent1)), Time);holds_at(neg(outside(Agent2)), Time)),
      holds_at(playHideAndSeek(Agent1), Time),
      holds_at(playHideAndSeek(Agent2), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7322).

 /*  holds_at(neg(outside(Agent2)), Time) :-
       (   not(holds_at(outside(Agent1), Time))
       ;   not(holds_at(outside(Agent2), Time))
       ),
       holds_at(playHideAndSeek(Agent1), Time),
       holds_at(playHideAndSeek(Agent2), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7322).

 /*  [(holds_at(neg(outside(Agent1)), Time);holds_at(neg(outside(Agent2)), Time)), holds_at(playHideAndSeek(Agent1), Time), holds_at(playHideAndSeek(Agent2), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(outside(Agent2)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7322).
axiom(holds_at(neg(outside(Agent2)), Time),
   
    [  (holds_at(neg(outside(Agent1)), Time);holds_at(neg(outside(Agent2)), Time)),
      holds_at(playHideAndSeek(Agent1), Time),
      holds_at(playHideAndSeek(Agent2), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7326
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/GiunchigliaEtAl2004/MonkeyPrediction.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{Giunchiglia:2004,
%;   author = "Enrico Giunchiglia and Joohyung Lee and Vladimir Lifschitz and Norman C. McCain and Hudson Turner",
%;   year = "2004",
%;   title = "Nonmonotonic causal theories",
%;   journal = "Artificial Intelligence",
%;   volume = "153",
%;   pages = "49--104",
%; }
%;
%; deduction

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7355
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7356).
% load foundations/Root.e
:- load_e('foundations/Root.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7356
% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7356).
:- load_e('foundations/EC.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7357
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7358).
% load examples/GiunchigliaEtAl2004/MonkeyBananas.e
:- load_e('examples/GiunchigliaEtAl2004/MonkeyBananas.e', changed).
:- if(is_e_toplevel).
:- endif.


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7359
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7360).
% HoldsAt(At(Monkey,L1),0).

 /*  [] ->
       ta(Ta_Param, tvs1=[start], tvs2=[start], holds_at(at(monkey, l1), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7360).
axiom(holds_at(at(monkey, l1), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7360
% HoldsAt(At(Bananas,L2),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7360).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(at(bananas, l2), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7360).
axiom(holds_at(at(bananas, l2), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7361
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7362).
% HoldsAt(At(Box,L3),0).

 /*  [] ->
       ta(Ta_Param, tvs1=[start], tvs2=[start], holds_at(at(box, l3), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7362).
axiom(holds_at(at(box, l3), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7362
% Happens(Walk(L3),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7362).

 /*  [] ->
       ta(Ta_Param, tvs1=[start], tvs2=[start], happens(walk(l3), start)).
 */
axiom(happens(walk(l3), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7363
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7364).
% Happens(PushBox(L2),1).

 /*  [b(start, Maptime), ignore(start+1==Maptime)] ->
       ta(Ta_Param,
          tvs1=[start+1],
          tvs2=[Maptime, start],
          happens(pushBox(l2), Maptime)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7364).
axiom(happens(pushBox(l2), Maptime),
    [b(start, Maptime)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7365
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7366).
% completion Happens
==> completion(happens).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7367
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7368).
% range time 0 2
==> range(time,0,2).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7368
% range offset 0 0
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7368).
==> range(offset,0,0).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/GiunchigliaEtAl2004/MonkeyPlanning.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{Giunchiglia:2004,
%;   author = "Enrico Giunchiglia and Joohyung Lee and Vladimir Lifschitz and Norman C. McCain and Hudson Turner",
%;   year = "2004",
%;   title = "Nonmonotonic causal theories",
%;   journal = "Artificial Intelligence",
%;   volume = "153",
%;   pages = "49--104",
%; }
%;
%; planning

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7399
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7400).
% load foundations/Root.e
:- load_e('foundations/Root.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7400
% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7400).
:- load_e('foundations/EC.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7401
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7402).
% load examples/GiunchigliaEtAl2004/MonkeyBananas.e
:- load_e('examples/GiunchigliaEtAl2004/MonkeyBananas.e', changed).
:- if(is_e_toplevel).
:- endif.


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7403
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7404).
% HoldsAt(At(Monkey,L1),0).

 /*  [] ->
       ta(Ta_Param, tvs1=[start], tvs2=[start], holds_at(at(monkey, l1), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7404).
axiom(holds_at(at(monkey, l1), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7404
% HoldsAt(At(Bananas,L2),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7404).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(at(bananas, l2), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7404).
axiom(holds_at(at(bananas, l2), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7405
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7406).
% HoldsAt(At(Box,L3),0).

 /*  [] ->
       ta(Ta_Param, tvs1=[start], tvs2=[start], holds_at(at(box, l3), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7406).
axiom(holds_at(at(box, l3), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7406
% HoldsAt(HasBananas(),4).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7406).

 /*  [b(start, Start4), toffset(start, 4, Start4), ignore(start+4==Start4)] ->
       ta(Ta_Param,
          tvs1=[start+4],
          tvs2=[Start4, start],
          holds_at(hasBananas, Start4)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7406).
axiom(holds_at(hasBananas, Start4),
    [b(start, Start4), toffset(start, 4, Start4)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7408
%; PLAN Happens(Walk(L3),0).
%; PLAN Happens(PushBox(L2),1).
%; PLAN Happens(ClimbOn(),2).
%; PLAN Happens(GraspBananas(),3).
%; one event at a time
% [event1,event2,time]
 
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7414
% Happens(event1,time) & Happens(event2,time) ->
% event1=event2.
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7414).

 /*  happens(Event1, Time), happens(Event2, Time) ->
       equals(Event1, Event2).
 */

 /*  not(happens(Event1, Time)) :-
       happens(Event2, Time),
       not(equals(Event1, Event2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7414).

 /*  [happens(Event2, Time), not(equals(Event1, Event2))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(Event1, Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7414).
axiom(not(happens(Event1, Time)),
    [happens(Event2, Time), not(equals(Event1, Event2))]).

 /*  not(happens(Event2, Time)) :-
       happens(Event1, Time),
       not(equals(Event1, Event2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7414).

 /*  [happens(Event1, Time), not(equals(Event1, Event2))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(Event2, Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7414).
axiom(not(happens(Event2, Time)),
    [happens(Event1, Time), not(equals(Event2, Event1))]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7417
% range time 0 4
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7417).
==> range(time,0,4).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7418
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7419).
% range offset 0 0
==> range(offset,0,0).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/GiunchigliaEtAl2004/MonkeyPostdiction.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{Giunchiglia:2004,
%;   author = "Enrico Giunchiglia and Joohyung Lee and Vladimir Lifschitz and Norman C. McCain and Hudson Turner",
%;   year = "2004",
%;   title = "Nonmonotonic causal theories",
%;   journal = "Artificial Intelligence",
%;   volume = "153",
%;   pages = "49--104",
%; }
%;
%; postdiction

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7449
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7450).
% load foundations/Root.e
:- load_e('foundations/Root.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7450
% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7450).
:- load_e('foundations/EC.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7451
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7452).
% load examples/GiunchigliaEtAl2004/MonkeyBananas.e
:- load_e('examples/GiunchigliaEtAl2004/MonkeyBananas.e', changed).
:- if(is_e_toplevel).
:- endif.


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7453
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7454).
% HoldsAt(At(Monkey,L1),0).

 /*  [] ->
       ta(Ta_Param, tvs1=[start], tvs2=[start], holds_at(at(monkey, l1), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7454).
axiom(holds_at(at(monkey, l1), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7454
% HoldsAt(At(Bananas,L2),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7454).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(at(bananas, l2), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7454).
axiom(holds_at(at(bananas, l2), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7455
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7456).
% Happens(Walk(L3),0).

 /*  [] ->
       ta(Ta_Param, tvs1=[start], tvs2=[start], happens(walk(l3), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7456).
axiom(happens(walk(l3), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7456
% Happens(PushBox(L2),1).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7456).

 /*  [b(start, Maptime), ignore(start+1==Maptime)] ->
       ta(Ta_Param,
          tvs1=[start+1],
          tvs2=[Maptime, start],
          happens(pushBox(l2), Maptime)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7456).
axiom(happens(pushBox(l2), Maptime),
    [b(start, Maptime)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7458
% completion Happens
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7458).
==> completion(happens).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7460
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7461).
% range time 0 2
==> range(time,0,2).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7461
% range offset 0 0
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7461).
==> range(offset,0,0).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/GiunchigliaEtAl2004/MonkeyBananas.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{Giunchiglia:2004,
%;   author = "Enrico Giunchiglia and Joohyung Lee and Vladimir Lifschitz and Norman C. McCain and Hudson Turner",
%;   year = "2004",
%;   title = "Nonmonotonic causal theories",
%;   journal = "Artificial Intelligence",
%;   volume = "153",
%;   pages = "49--104",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7490
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7491).
% sort object
==> sort(object).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7491
% sort location
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7491).
==> sort(location).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7493
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7494).
% object Monkey, Bananas, Box
==> t(object,monkey).
==> t(object,bananas).
==> t(object,box).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7494
% location L1, L2, L3
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7494).
==> t(location,l1).
==> t(location,l2).
==> t(location,l3).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7496
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7497).
% fluent At(object,location)
fluent(at(object,location)).
==> mpred_prop(at(object,location),fluent).
==> meta_argtypes(at(object,location)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7497
% fluent OnBox()
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7497).
fluent(onBox).
==> mpred_prop(onBox,fluent).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7498
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7499).
% fluent HasBananas()
fluent(hasBananas).
==> mpred_prop(hasBananas,fluent).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7500
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7501).
% event Walk(location)
event(walk(location)).
==> mpred_prop(walk(location),event).
==> meta_argtypes(walk(location)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7501
% event PushBox(location)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7501).
event(pushBox(location)).
==> mpred_prop(pushBox(location),event).
==> meta_argtypes(pushBox(location)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7502
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7503).
% event ClimbOn()
event(climbOn).
==> mpred_prop(climbOn,event).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7503
% event ClimbOff()
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7503).
event(climbOff).
==> mpred_prop(climbOff,event).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7504
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7505).
% event GraspBananas()
event(graspBananas).
==> mpred_prop(graspBananas,event).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7506
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7507).
% [object,location1,location2,time]
% HoldsAt(At(object,location1),time) &
% HoldsAt(At(object,location2),time) ->
% location1=location2.
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7509
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7507).

 /*  holds_at(at(Object, Location1), Time), holds_at(at(Object, Location2), Time) ->
       equals(Location1, Location2).
 */

 /*  not(holds_at(at(Object, Location1), Time)) :-
       holds_at(at(Object, Location2), Time),
       not(equals(Location1, Location2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7507).

 /*  [holds_at(at(Object, Location2), Time), not(equals(Location1, Location2))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(at(Object, Location1)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7507).
axiom(holds_at(neg(at(Object, Location1)), Time),
   
    [ holds_at(at(Object, Location2), Time),
      not(equals(Location1, Location2))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7507).

 /*  not(holds_at(at(Object, Location2), Time)) :-
       holds_at(at(Object, Location1), Time),
       not(equals(Location1, Location2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7507).

 /*  [holds_at(at(Object, Location1), Time), not(equals(Location1, Location2))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(at(Object, Location2)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7507).
axiom(holds_at(neg(at(Object, Location2)), Time),
   
    [ holds_at(at(Object, Location1), Time),
      not(equals(Location2, Location1))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7511
% [object,location,time]
% object=% Monkey ->
% Initiates(Walk(location),At(object,location),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7513

 /*  [equals(Object, monkey)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(walk(Location),
                    at(Object, Location),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7513).
axiom(initiates(walk(Location), at(Object, Location), Time),
    [equals(Object, monkey)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7515
% [object,location1,location2,time]
% object=% Monkey &
% HoldsAt(At(object,location1),time) ->
% Terminates(Walk(location2),At(object,location1),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7518
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7517).

 /*  [equals(Object, monkey), holds_at(at(Object, Location1), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(walk(Location2),
                     at(Object, Location1),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7517).
axiom(terminates(walk(Location2), at(Object, Location1), Time),
   
    [ equals(Object, monkey),
      holds_at(at(Object, Location1), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7520
% [location,time]
% Happens(Walk(location),time) ->
% !HoldsAt(At(Monkey,location),time) &
% !HoldsAt(OnBox(),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7523
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7522).

 /*  happens(walk(Location), Time) ->
       holds_at(neg(at(monkey, Location)), Time),
       holds_at(neg(onBox), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7522).

 /*  not(happens(walk(Location), Time)) :-
       (   not(holds_at(neg(at(monkey, Location)), Time))
       ;   not(holds_at(neg(onBox), Time))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7522).

 /*  [(holds_at(at(monkey, Location), Time);holds_at(onBox, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(walk(Location), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7522).
axiom(not(happens(walk(Location), Time)),
   
    [  (holds_at(at(monkey, Location), Time);holds_at(onBox, Time))
    ]).

 /*  holds_at(neg(at(monkey, Location)), Time) :-
       happens(walk(Location), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7522).

 /*  [holds_at(metreqs(walk(Location)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(walk(Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7522).
axiom(requires(walk(Location), Time),
    [holds_at(metreqs(walk(Location)), Time)]).

 /*  [holds_at(neg(at(monkey, Location)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(walk(Location)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7522).
axiom(holds_at(metreqs(walk(Location)), Time),
    [holds_at(neg(at(monkey, Location)), Time)]).

 /*  holds_at(neg(onBox), Time) :-
       happens(walk(Location), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7522).

 /*  [holds_at(metreqs(walk(Location)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(walk(Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7522).
axiom(requires(walk(Location), Time),
    [holds_at(metreqs(walk(Location)), Time)]).

 /*  [holds_at(neg(onBox), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(walk(Location)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7522).
axiom(holds_at(metreqs(walk(Location)), Time),
    [holds_at(neg(onBox), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7525
% [location,time]
% HoldsAt(HasBananas(),time) &
% HoldsAt(At(Monkey,location),time) ->
% HoldsAt(At(Bananas,location),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7528
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7527).

 /*  holds_at(hasBananas, Time), holds_at(at(monkey, Location), Time) ->
       holds_at(at(bananas, Location), Time).
 */

 /*  holds_at(at(bananas, Location), Time) :-
       holds_at(hasBananas, Time),
       holds_at(at(monkey, Location), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7527).

 /*  [holds_at(hasBananas, Time), holds_at(at(monkey, Location), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(at(bananas, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7527).
axiom(holds_at(at(bananas, Location), Time),
   
    [ holds_at(hasBananas, Time),
      holds_at(at(monkey, Location), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7527).

 /*  not(holds_at(hasBananas, Time)) :-
       holds_at(at(monkey, Location), Time),
       not(holds_at(at(bananas, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7527).

 /*  [holds_at(at(monkey, Location), Time), holds_at(neg(at(bananas, Location)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(hasBananas), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7527).
axiom(holds_at(neg(hasBananas), Time),
   
    [ holds_at(at(monkey, Location), Time),
      holds_at(neg(at(bananas, Location)), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7527).

 /*  not(holds_at(at(monkey, Location), Time)) :-
       holds_at(hasBananas, Time),
       not(holds_at(at(bananas, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7527).

 /*  [holds_at(hasBananas, Time), holds_at(neg(at(bananas, Location)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(at(monkey, Location)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7527).
axiom(holds_at(neg(at(monkey, Location)), Time),
   
    [ holds_at(hasBananas, Time),
      holds_at(neg(at(bananas, Location)), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7530
% [object,location,time]
% object=% Box | object=Monkey ->
% Initiates(PushBox(location),At(object,location),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7532

 /*  [(equals(Object, box);equals(Object, monkey))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(pushBox(Location),
                    at(Object, Location),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7532).
axiom(initiates(pushBox(Location), at(Object, Location), Time),
    [(equals(Object, box);equals(Object, monkey))]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7534
% [object,location1,location2,time]
% (object=Box | object=Monkey) &
% HoldsAt(At(object,location1),time) ->
% Terminates(PushBox(location2),At(object,location1),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7537
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7536).

 /*  [(equals(Object, box);equals(Object, monkey)), holds_at(at(Object, Location1), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(pushBox(Location2),
                     at(Object, Location1),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7536).
axiom(terminates(pushBox(Location2), at(Object, Location1), Time),
   
    [  (equals(Object, box);equals(Object, monkey)),
      holds_at(at(Object, Location1), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7539
% [location,time]
% Happens(PushBox(location),time) ->
% ({location1}
%   HoldsAt(At(Box,location1),time) &
%   HoldsAt(At(Monkey,location1),time)) &
% !HoldsAt(At(Monkey,location),time) &
% !HoldsAt(OnBox(),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7545
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7541).

 /*  happens(pushBox(Location), Time) ->
       exists([Location1],
               (holds_at(at(box, Location1), Time), holds_at(at(monkey, Location1), Time))),
       holds_at(neg(at(monkey, Location)), Time),
       holds_at(neg(onBox), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7541).

 /*  not(happens(pushBox(Location), Time)) :-
       (   (   not(holds_at(at(box, Location1), Time))
           ;   not(holds_at(at(monkey, Location1), Time))
           )
       ;   not(holds_at(neg(at(monkey, Location)), Time))
       ;   not(holds_at(neg(onBox), Time))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7541).

 /*  [((holds_at(neg(at(box, Location1)), Time);holds_at(neg(at(monkey, Location1)), Time));holds_at(at(monkey, Location), Time);holds_at(onBox, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(pushBox(Location), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7541).
axiom(not(happens(pushBox(Location), Time)),
   
    [  ((holds_at(neg(at(box, Location1)), Time);holds_at(neg(at(monkey, Location1)), Time));holds_at(at(monkey, Location), Time);holds_at(onBox, Time))
    ]).

 /*  holds_at(at(box, Location1), Time) :-
       happens(pushBox(Location), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7541).

 /*  [holds_at(metreqs(pushBox(Location)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(pushBox(Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7541).
axiom(requires(pushBox(Location), Time),
    [holds_at(metreqs(pushBox(Location)), Time)]).

 /*  [holds_at(at(box, Location1), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(pushBox(Location)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7541).
axiom(holds_at(metreqs(pushBox(Location)), Time),
    [holds_at(at(box, Location1), Time)]).

 /*  holds_at(at(monkey, Location1), Time) :-
       happens(pushBox(Location), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7541).

 /*  [holds_at(metreqs(pushBox(Location)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(pushBox(Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7541).
axiom(requires(pushBox(Location), Time),
    [holds_at(metreqs(pushBox(Location)), Time)]).

 /*  [holds_at(at(monkey, Location1), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(pushBox(Location)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7541).
axiom(holds_at(metreqs(pushBox(Location)), Time),
    [holds_at(at(monkey, Location1), Time)]).

 /*  holds_at(neg(at(monkey, Location)), Time) :-
       happens(pushBox(Location), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7541).

 /*  [holds_at(metreqs(pushBox(Location)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(pushBox(Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7541).
axiom(requires(pushBox(Location), Time),
    [holds_at(metreqs(pushBox(Location)), Time)]).

 /*  [holds_at(neg(at(monkey, Location)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(pushBox(Location)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7541).
axiom(holds_at(metreqs(pushBox(Location)), Time),
    [holds_at(neg(at(monkey, Location)), Time)]).

 /*  holds_at(neg(onBox), Time) :-
       happens(pushBox(Location), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7541).

 /*  [holds_at(metreqs(pushBox(Location)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(pushBox(Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7541).
axiom(requires(pushBox(Location), Time),
    [holds_at(metreqs(pushBox(Location)), Time)]).

 /*  [holds_at(neg(onBox), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(pushBox(Location)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7541).
axiom(holds_at(metreqs(pushBox(Location)), Time),
    [holds_at(neg(onBox), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7547
% [time]
 % Initiates(ClimbOn(),OnBox(),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7547).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(climbOn, onBox, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7547).
axiom(initiates(climbOn, onBox, Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7549
% [time]
% Happens(ClimbOn(),time) ->
% !HoldsAt(OnBox(),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7551

 /*  happens(climbOn, Time) ->
       holds_at(neg(onBox), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7551).

 /*  holds_at(neg(onBox), Time) :-
       happens(climbOn, Time).
 */

 /*  [holds_at(metreqs(climbOn), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(climbOn, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7551).
axiom(requires(climbOn, Time),
    [holds_at(metreqs(climbOn), Time)]).

 /*  [holds_at(neg(onBox), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(climbOn), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7551).
axiom(holds_at(metreqs(climbOn), Time),
    [holds_at(neg(onBox), Time)]).

 /*  not(happens(climbOn, Time)) :-
       not(holds_at(neg(onBox), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7551).

 /*  [holds_at(onBox, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(climbOn, Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7551).
axiom(not(happens(climbOn, Time)),
    [holds_at(onBox, Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7553
% [time]
 % Terminates(ClimbOff(),OnBox(),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7553).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(climbOff, onBox, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7553).
axiom(terminates(climbOff, onBox, Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7555
% [time]
% Happens(ClimbOff(),time) ->
% HoldsAt(OnBox(),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7557

 /*  happens(climbOff, Time) ->
       holds_at(onBox, Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7557).

 /*  holds_at(onBox, Time) :-
       happens(climbOff, Time).
 */

 /*  [holds_at(metreqs(climbOff), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(climbOff, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7557).
axiom(requires(climbOff, Time),
    [holds_at(metreqs(climbOff), Time)]).

 /*  [holds_at(onBox, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(climbOff), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7557).
axiom(holds_at(metreqs(climbOff), Time),
    [holds_at(onBox, Time)]).

 /*  not(happens(climbOff, Time)) :-
       not(holds_at(onBox, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7557).

 /*  [holds_at(neg(onBox), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(climbOff, Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7557).
axiom(not(happens(climbOff, Time)),
    [holds_at(neg(onBox), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7559
% [time]
 % Initiates(GraspBananas(),HasBananas(),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7559).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(graspBananas, hasBananas, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7559).
axiom(initiates(graspBananas, hasBananas, Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7561
% [object,location,time]
% object=% Bananas ->
% Releases(GraspBananas(),At(object,location),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7563

 /*  [equals(Object, bananas)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          releases(graspBananas, at(Object, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7563).
axiom(releases(graspBananas, at(Object, Location), Time),
    [equals(Object, bananas)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7565
% [time]
% Happens(GraspBananas(),time) ->
% ({location1}
%   HoldsAt(At(Bananas,location1),time) &
%   HoldsAt(At(Monkey,location1),time)) &
% HoldsAt(OnBox(),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7570
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7567).

 /*  happens(graspBananas, Time) ->
       exists([Location1],
               (holds_at(at(bananas, Location1), Time), holds_at(at(monkey, Location1), Time))),
       holds_at(onBox, Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7567).

 /*  not(happens(graspBananas, Time)) :-
       (   not(holds_at(onBox, Time))
       ;   not(holds_at(at(bananas, Location1), Time))
       ;   not(holds_at(at(monkey, Location1), Time))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7567).

 /*  [(holds_at(neg(onBox), Time);holds_at(neg(at(bananas, Location1)), Time);holds_at(neg(at(monkey, Location1)), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(graspBananas, Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7567).
axiom(not(happens(graspBananas, Time)),
   
    [  (holds_at(neg(onBox), Time);holds_at(neg(at(bananas, Location1)), Time);holds_at(neg(at(monkey, Location1)), Time))
    ]).

 /*  holds_at(onBox, Time) :-
       happens(graspBananas, Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7567).

 /*  [holds_at(metreqs(graspBananas), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(graspBananas, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7567).
axiom(requires(graspBananas, Time),
    [holds_at(metreqs(graspBananas), Time)]).

 /*  [holds_at(onBox, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(graspBananas), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7567).
axiom(holds_at(metreqs(graspBananas), Time),
    [holds_at(onBox, Time)]).

 /*  holds_at(at(bananas, Location1), Time) :-
       happens(graspBananas, Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7567).

 /*  [holds_at(metreqs(graspBananas), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(graspBananas, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7567).
axiom(requires(graspBananas, Time),
    [holds_at(metreqs(graspBananas), Time)]).

 /*  [holds_at(at(bananas, Location1), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(graspBananas), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7567).
axiom(holds_at(metreqs(graspBananas), Time),
    [holds_at(at(bananas, Location1), Time)]).

 /*  holds_at(at(monkey, Location1), Time) :-
       happens(graspBananas, Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7567).

 /*  [holds_at(metreqs(graspBananas), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(graspBananas, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7567).
axiom(requires(graspBananas, Time),
    [holds_at(metreqs(graspBananas), Time)]).

 /*  [holds_at(at(monkey, Location1), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(graspBananas), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7567).
axiom(holds_at(metreqs(graspBananas), Time),
    [holds_at(at(monkey, Location1), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7572
% [time]
% HoldsAt(OnBox(),time) ->
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7574
% {location1}%  HoldsAt(At(Box,location1),time) &
%             HoldsAt(At(Monkey,location1),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7574).

 /*  exists([Location1],
    holds_at(onBox, Time) ->
       holds_at(at(box, Location1), Time),
       holds_at(at(monkey, Location1), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7574).

 /*  not(holds_at(onBox, Time)) :-
       (   not(holds_at(at(box, Location1), Time))
       ;   not(holds_at(at(monkey, Location1), Time))
       ),
       some(Location1, '$kolem_Fn_414'(Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7574).

 /*  [(holds_at(neg(at(box, Location1)), Time);holds_at(neg(at(monkey, Location1)), Time)), some(Location1, '$kolem_Fn_414'(Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(onBox), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7574).
axiom(holds_at(neg(onBox), Time),
   
    [  (holds_at(neg(at(box, Location1)), Time);holds_at(neg(at(monkey, Location1)), Time)),
      some(Location1, '$kolem_Fn_414'(Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7574).

 /*  holds_at(at(box, Location1), Time) :-
       holds_at(onBox, Time),
       some(Location1, '$kolem_Fn_414'(Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7574).

 /*  [holds_at(onBox, Time), some(Location1, '$kolem_Fn_414'(Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(at(box, Location1), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7574).
axiom(holds_at(at(box, Location1), Time),
   
    [ holds_at(onBox, Time),
      some(Location1, '$kolem_Fn_414'(Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7574).

 /*  holds_at(at(monkey, Location1), Time) :-
       holds_at(onBox, Time),
       some(Location1, '$kolem_Fn_414'(Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7574).

 /*  [holds_at(onBox, Time), some(Location1, '$kolem_Fn_414'(Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(at(monkey, Location1), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7574).
axiom(holds_at(at(monkey, Location1), Time),
   
    [ holds_at(onBox, Time),
      some(Location1, '$kolem_Fn_414'(Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7577
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Antoniou1997/Student.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; conflicting defaults: method (D)
%; \fullciteA[p. 157]{Antoniou:1997}
%;
%; @book{Antoniou:1997,
%;   author = "Grigoris Antoniou",
%;   year = "1997",
%;   title = "Nonmonotonic Reasoning",
%;   address = "Cambridge, MA",
%;   publisher = "MIT Press",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7606
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7607).
% load foundations/Root.e
:- load_e('foundations/Root.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7607
% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7607).
:- load_e('foundations/EC.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7609
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7610).
% sort x
==> sort(x).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7611
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7612).
% predicate Adult(x)
predicate(adult(x)).
==> mpred_prop(adult(x),predicate).
==> meta_argtypes(adult(x)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7612
% predicate Student(x)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7612).
predicate(student(x)).
==> mpred_prop(student(x),predicate).
==> meta_argtypes(student(x)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7613
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7614).
% predicate Employed(x)
predicate(employed(x)).
==> mpred_prop(employed(x),predicate).
==> meta_argtypes(employed(x)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7614
% predicate Ab1(x)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7614).
predicate(ab1(x)).
==> mpred_prop(ab1(x),predicate).
==> meta_argtypes(ab1(x)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7615
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7616).
% predicate Ab2(x)
predicate(ab2(x)).
==> mpred_prop(ab2(x),predicate).
==> meta_argtypes(ab2(x)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7617
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7618).
% x Mary
==> t(x,mary).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7619
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7620).
% Student(Mary).

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], student(mary)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7620).
axiom(student(mary),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7621
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7622).
% [x]
 % Adult(x) & !Ab1(x) -> Employed(x).

 /*  adult(X), not(ab1(X, Ab1_Ret)) ->
       employed(X).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7622).

 /*  employed(X) :-
       adult(X),
       not(ab1(X, Ab1_Ret)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7622).

 /*  [adult(X), not(ab1(X, Ab1_Ret))] ->
       ta(Ta_Param, tvs1=[], tvs2=[], employed(X)).
 */
axiom(employed(X),
    [adult(X), not(ab1(X, Ab1_Ret))]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7622).

 /*  not(adult(X)) :-
       not(ab1(X, Ab1_Ret)),
       not(employed(X)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7622).

 /*  [not(ab1(X, Ab1_Ret)), not(employed(X))] ->
       ta(Ta_Param3, tvs1=[], tvs2=[], not(adult(X))).
 */
axiom(not(adult(X)),
    [not(ab1(X, Ab1_Ret)), not(employed(X))]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7622).

 /*  ab1(X, Ab1_Ret) :-
       adult(X),
       not(employed(X)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7622).

 /*  [adult(X), not(employed(X))] ->
       ta(Ta_Param4, tvs1=[], tvs2=[], ab1(X, Ab1_Ret)).
 */
axiom(ab1(X, Ab1_Ret),
    [adult(X), not(employed(X))]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7622
% [x]
 % Student(x) & !Ab2(x) -> !Employed(x).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7622).

 /*  student(X), not(ab2(X, Ab2_Ret)) ->
       not(employed(X)).
 */

 /*  not(employed(X)) :-
       student(X),
       not(ab2(X, Ab2_Ret)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7622).

 /*  [student(X), not(ab2(X, Ab2_Ret))] ->
       ta(Ta_Param, tvs1=[], tvs2=[], not(employed(X))).
 */
axiom(not(employed(X)),
    [student(X), not(ab2(X, Ab2_Ret))]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7622).

 /*  not(student(X)) :-
       not(ab2(X, Ab2_Ret)),
       employed(X).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7622).

 /*  [not(ab2(X, Ab2_Ret)), employed(X)] ->
       ta(Ta_Param3, tvs1=[], tvs2=[], not(student(X))).
 */
axiom(not(student(X)),
    [not(ab2(X, Ab2_Ret)), employed(X)]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7622).

 /*  ab2(X, Ab2_Ret) :-
       student(X),
       employed(X).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7622).

 /*  [student(X), employed(X)] ->
       ta(Ta_Param4, tvs1=[], tvs2=[], ab2(X, Ab2_Ret)).
 */
axiom(ab2(X, Ab2_Ret),
    [student(X), employed(X)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7623
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7624).
% [x]
 % Student(x) -> Adult(x).

 /*  student(X) ->
       adult(X).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7624).

 /*  adult(X) :-
       student(X).
 */

 /*  [student(X)] ->
       ta(Ta_Param, tvs1=[], tvs2=[], adult(X)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7624).
axiom(adult(X),
    [student(X)]).

 /*  not(student(X)) :-
       not(adult(X)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7624).

 /*  [not(adult(X))] ->
       ta(Ta_Param2, tvs1=[], tvs2=[], not(student(X))).
 */
axiom(not(student(X)),
    [not(adult(X))]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7624
% Theta: 
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7624).
next_axiom_uses(theta).
 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7624
% [x]
 % Student(x) -> Ab1(x).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7624).

 /*  axiom_uses(theta) ->
       ( student(X)->ab1(X, Ab1_Ret)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7624).

 /*  ab1(X, Ab1_Ret) :-
       student(X),
       axiom_uses(theta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7624).

 /*  fix_axiom_head(Axiom_head_Ret) ->
       [axiom_uses(theta), ->, axiom_uses(theta, Axiom_head_Ret)].
 */

 /*  [student(X), axiom_uses(theta, Axiom_head_Ret)] ->
       ta(Axiom_head_Ret, tvs1=[], tvs2=[], ab1(X, Ab1_Ret)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7624).
axiom(ab1(X, Ab1_Ret),
    [student(X), axiom_uses(theta, Axiom_head_Ret)]).

 /*  not(student(X)) :-
       not(ab1(X, Ab1_Ret)),
       axiom_uses(theta).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7624).

 /*  fix_axiom_head(Axiom_head_Ret3) ->
       [axiom_uses(theta), ->, axiom_uses(theta, Axiom_head_Ret3)].
 */

 /*  [not(ab1(X, Ab1_Ret)), axiom_uses(theta, Axiom_head_Ret3)] ->
       ta(Axiom_head_Ret3, tvs1=[], tvs2=[], not(student(X))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7624).
axiom(not(student(X)),
    [not(ab1(X, Ab1_Ret)), axiom_uses(theta, Axiom_head_Ret3)]).

 /*  not(axiom_uses(theta)) :-
       not(ab1(X, Ab1_Ret)),
       student(X).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7624).

 /*  fix_axiom_head(Axiom_head_Ret4) ->
       [not(axiom_uses(theta)), ->, not(axiom_uses(theta, Axiom_head_Ret4))].
 */

 /*  [not(ab1(X, Ab1_Ret)), student(X)] ->
       ta(Axiom_head_Ret4,
          tvs1=[],
          tvs2=[],
          not(axiom_uses(theta, Axiom_head_Ret4))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7624).
axiom(not(axiom_uses(theta, Axiom_head_Ret4)),
    [not(ab1(X, Ab1_Ret)), student(X)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7626
% range time 0 0
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7626).
==> range(time,0,0).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7627
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7628).
% range offset 1 1
==> range(offset,1,1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7629
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7630).
% completion Theta Ab1
==> completion(theta).
==> completion(ab1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7630
% completion Theta Ab2
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7630).
==> completion(theta).
==> completion(ab2).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Antoniou1997/Dropout.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; dealing with conflicting defaults by adding conditions
%; to one of the conflicting rules
%; \fullciteA[p. 56]{Antoniou:1997}
%;
%; @book{Antoniou:1997,
%;   author = "Grigoris Antoniou",
%;   year = "1997",
%;   title = "Nonmonotonic Reasoning",
%;   address = "Cambridge, MA",
%;   publisher = "MIT Press",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7662
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7663).
% load foundations/Root.e
:- load_e('foundations/Root.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7663
% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7663).
:- load_e('foundations/EC.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7665
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7666).
% sort x
==> sort(x).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7667
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7668).
% predicate Dropout(x)
predicate(dropout(x)).
==> mpred_prop(dropout(x),predicate).
==> meta_argtypes(dropout(x)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7668
% predicate Adult(x)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7668).
predicate(adult(x)).
==> mpred_prop(adult(x),predicate).
==> meta_argtypes(adult(x)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7669
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7670).
% predicate Employed(x)
predicate(employed(x)).
==> mpred_prop(employed(x),predicate).
==> meta_argtypes(employed(x)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7670
% predicate Ab1(x)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7670).
predicate(ab1(x)).
==> mpred_prop(ab1(x),predicate).
==> meta_argtypes(ab1(x)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7671
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7672).
% predicate Ab2(x)
predicate(ab2(x)).
==> mpred_prop(ab2(x),predicate).
==> meta_argtypes(ab2(x)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7673
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7674).
% x Bill
==> t(x,bill).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7675
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7676).
% Dropout(Bill).

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], dropout(bill)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7676).
axiom(dropout(bill),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7677
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7678).
% [x]
 % Dropout(x) & !Ab1(x) -> Adult(x).

 /*  dropout(X), not(ab1(X, Ab1_Ret)) ->
       adult(X).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7678).

 /*  adult(X) :-
       dropout(X),
       not(ab1(X, Ab1_Ret)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7678).

 /*  [dropout(X), not(ab1(X, Ab1_Ret))] ->
       ta(Ta_Param, tvs1=[], tvs2=[], adult(X)).
 */
axiom(adult(X),
    [dropout(X), not(ab1(X, Ab1_Ret))]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7678).

 /*  not(dropout(X)) :-
       not(ab1(X, Ab1_Ret)),
       not(adult(X)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7678).

 /*  [not(ab1(X, Ab1_Ret)), not(adult(X))] ->
       ta(Ta_Param3, tvs1=[], tvs2=[], not(dropout(X))).
 */
axiom(not(dropout(X)),
    [not(ab1(X, Ab1_Ret)), not(adult(X))]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7678).

 /*  ab1(X, Ab1_Ret) :-
       dropout(X),
       not(adult(X)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7678).

 /*  [dropout(X), not(adult(X))] ->
       ta(Ta_Param4, tvs1=[], tvs2=[], ab1(X, Ab1_Ret)).
 */
axiom(ab1(X, Ab1_Ret),
    [dropout(X), not(adult(X))]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7678
% [x]
 % Adult(x) & !Dropout(x) & !Ab2(x) -> Employed(x).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7678).

 /*  adult(X), not(dropout(X)), not(ab2(X, Ab2_Ret)) ->
       employed(X).
 */

 /*  employed(X) :-
       adult(X),
       not(dropout(X)),
       not(ab2(X, Ab2_Ret)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7678).

 /*  [adult(X), not(dropout(X)), not(ab2(X, Ab2_Ret))] ->
       ta(Ta_Param, tvs1=[], tvs2=[], employed(X)).
 */
axiom(employed(X),
    [adult(X), not(dropout(X)), not(ab2(X, Ab2_Ret))]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7678).

 /*  not(adult(X)) :-
       ( not(dropout(X)),
         not(ab2(X, Ab2_Ret))
       ),
       not(employed(X)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7678).

 /*  [not(dropout(X)), not(ab2(X, Ab2_Ret)), not(employed(X))] ->
       ta(Ta_Param3, tvs1=[], tvs2=[], not(adult(X))).
 */
axiom(not(adult(X)),
   
    [ not(dropout(X)),
      not(ab2(X, Ab2_Ret)),
      not(employed(X))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7678).

 /*  dropout(X) :-
       not(ab2(X, Ab2_Ret)),
       adult(X),
       not(employed(X)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7678).

 /*  [not(ab2(X, Ab2_Ret)), adult(X), not(employed(X))] ->
       ta(Ta_Param4, tvs1=[], tvs2=[], dropout(X)).
 */
axiom(dropout(X),
    [not(ab2(X, Ab2_Ret)), adult(X), not(employed(X))]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7678).

 /*  ab2(X, Ab2_Ret) :-
       not(dropout(X)),
       adult(X),
       not(employed(X)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7678).

 /*  [not(dropout(X)), adult(X), not(employed(X))] ->
       ta(Ta_Param5, tvs1=[], tvs2=[], ab2(X, Ab2_Ret)).
 */
axiom(ab2(X, Ab2_Ret),
    [not(dropout(X)), adult(X), not(employed(X))]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7680
% range time 0 0
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7680).
==> range(time,0,0).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7681
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7682).
% range offset 1 1
==> range(offset,1,1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7683
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7684).
% completion Theta Ab1
==> completion(theta).
==> completion(ab1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7684
% completion Theta Ab2
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7684).
==> completion(theta).
==> completion(ab2).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Shanahan1999/Happy.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @incollection{Shanahan:1999,
%;   author = "Shanahan, Murray",
%;   year = "1999",
%;   title = "The Event Calculus explained",
%;   editor = "Michael J. Wooldridge and Manuela M. Veloso",
%;   booktitle = "Artificial Intelligence Today: Recent Trends and Developments",
%;   series = "Lecture Notes in Computer Science",
%;   volume = "1600",
%;   pages = "409--430",
%;   address = "Berlin",
%;   publisher = "Springer",
%; }
%;
%; deduction
%;
%; modifications from Shanahan's formulation:
%; InitiallyN -> !HoldsAt
%; InitiallyP -> HoldsAt
%; timestamps
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7724
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7725).
% load foundations/Root.e
:- load_e('foundations/Root.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7725
% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7725).
:- load_e('foundations/EC.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7727
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7728).
% sort person
==> sort(person).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7728
% event Feed(person)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7728).
event(feed(person)).
==> mpred_prop(feed(person),event).
==> meta_argtypes(feed(person)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7729
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7730).
% event Clothe(person)
event(clothe(person)).
==> mpred_prop(clothe(person),event).
==> meta_argtypes(clothe(person)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7730
% fluent Happy(person)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7730).
fluent(happy(person)).
==> mpred_prop(happy(person),fluent).
==> meta_argtypes(happy(person)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7731
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7732).
% fluent Hungry(person)
fluent(hungry(person)).
==> mpred_prop(hungry(person),fluent).
==> meta_argtypes(hungry(person)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7732
% fluent Cold(person)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7732).
fluent(cold(person)).
==> mpred_prop(cold(person),fluent).
==> meta_argtypes(cold(person)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7733
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7734).
% noninertial Happy
==> noninertial(happy).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7735
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7736).
% [person,time]
% HoldsAt(Happy(person),time) <->
% !HoldsAt(Hungry(person),time) &
% !HoldsAt(Cold(person),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7738
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7736).

 /*  holds_at(happy(Person), Time) <->
       holds_at(neg(hungry(Person)), Time),
       holds_at(neg(cold(Person)), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7736).

 /*  [holds_at, happy] <->
       [holds_at, neg, hungry, holds_at, neg, cold].
 */

 /*  holds_at(happy(Person), Time) ->
       holds_at(neg(hungry(Person)), Time),
       holds_at(neg(cold(Person)), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7736).

 /*  not(holds_at(happy(Person), Time)) :-
       (   not(holds_at(neg(hungry(Person)), Time))
       ;   not(holds_at(neg(cold(Person)), Time))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7736).

 /*  [(holds_at(hungry(Person), Time);holds_at(cold(Person), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(happy(Person)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7736).
axiom(holds_at(neg(happy(Person)), Time),
   
    [  (holds_at(hungry(Person), Time);holds_at(cold(Person), Time))
    ]).

 /*  holds_at(neg(hungry(Person)), Time) :-
       holds_at(happy(Person), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7736).

 /*  [holds_at(happy(Person), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(hungry(Person)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7736).
axiom(holds_at(neg(hungry(Person)), Time),
    [holds_at(happy(Person), Time)]).

 /*  holds_at(neg(cold(Person)), Time) :-
       holds_at(happy(Person), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7736).

 /*  [holds_at(happy(Person), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(cold(Person)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7736).
axiom(holds_at(neg(cold(Person)), Time),
    [holds_at(happy(Person), Time)]).

 /*  holds_at(neg(hungry(Person)), Time), holds_at(neg(cold(Person)), Time) ->
       holds_at(happy(Person), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7736).

 /*  holds_at(happy(Person), Time) :-
       holds_at(neg(hungry(Person)), Time),
       holds_at(neg(cold(Person)), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7736).

 /*  [holds_at(neg(hungry(Person)), Time), holds_at(neg(cold(Person)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(happy(Person), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7736).
axiom(holds_at(happy(Person), Time),
   
    [ holds_at(neg(hungry(Person)), Time),
      holds_at(neg(cold(Person)), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7736).

 /*  not(holds_at(neg(hungry(Person)), Time)) :-
       holds_at(neg(cold(Person)), Time),
       not(holds_at(happy(Person), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7736).

 /*  [holds_at(neg(cold(Person)), Time), holds_at(neg(happy(Person)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(hungry(Person), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7736).
axiom(holds_at(hungry(Person), Time),
   
    [ holds_at(neg(cold(Person)), Time),
      holds_at(neg(happy(Person)), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7736).

 /*  not(holds_at(neg(cold(Person)), Time)) :-
       holds_at(neg(hungry(Person)), Time),
       not(holds_at(happy(Person), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7736).

 /*  [holds_at(neg(hungry(Person)), Time), holds_at(neg(happy(Person)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(cold(Person), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7736).
axiom(holds_at(cold(Person), Time),
   
    [ holds_at(neg(hungry(Person)), Time),
      holds_at(neg(happy(Person)), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7740
% [person,time]
% Terminates(Feed(person),Hungry(person),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7742).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(feed(Person), hungry(Person), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7742).
axiom(terminates(feed(Person), hungry(Person), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7743
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7744).
% [person,time]
% Terminates(Clothe(person),Cold(person),time).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(clothe(Person), cold(Person), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7744).
axiom(terminates(clothe(Person), cold(Person), Time),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7746
% person Fred
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7746).
==> t(person,fred).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7748
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7749).
% HoldsAt(Hungry(Fred),0).

 /*  [] ->
       ta(Ta_Param, tvs1=[start], tvs2=[start], holds_at(hungry(fred), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7749).
axiom(holds_at(hungry(fred), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7749
% !HoldsAt(Cold(Fred),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7749).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(cold(fred)), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7749).
axiom(holds_at(neg(cold(fred)), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7750
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7751).
% Happens(Feed(Fred),1).

 /*  [b(start, Maptime), ignore(start+1==Maptime)] ->
       ta(Ta_Param,
          tvs1=[start+1],
          tvs2=[Maptime, start],
          happens(feed(fred), Maptime)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7751).
axiom(happens(feed(fred), Maptime),
    [b(start, Maptime)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7752
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7753).
% completion Happens
==> completion(happens).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7754
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7755).
% range time 0 2
==> range(time,0,2).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7755
% range offset 1 1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7755).
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Shanahan1999/ThielscherCircuit.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{Thielscher:1997,
%;   author = "Michael Thielscher",
%;   year = "1997",
%;   title = "Ramification and causality",
%;   journal = "Artificial Intelligence",
%;   volume = "89",
%;   pages = "317--364",
%; }
%;
%; @incollection{Shanahan:1999,
%;   author = "Shanahan, Murray",
%;   year = "1999",
%;   title = "The Event Calculus explained",
%;   editor = "Michael J. Wooldridge and Manuela M. Veloso",
%;   booktitle = "Artificial Intelligence Today: Recent Trends and Developments",
%;   series = "Lecture Notes in Computer Science",
%;   volume = "1600",
%;   pages = "409--430",
%;   address = "Berlin",
%;   publisher = "Springer",
%; }
%;
%; deduction
%;
%; modifications from Shanahan's formulation:
%; timestamps
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7802
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7803).
% load foundations/Root.e
:- load_e('foundations/Root.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7803
% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7803).
:- load_e('foundations/EC.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7804
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7805).
% load foundations/ECCausal.e
:- load_e('foundations/ECCausal.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7806
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7807).
% event LightOn()
event(lightOn).
==> mpred_prop(lightOn,event).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7807
% event Close1()
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7807).
event(close1).
==> mpred_prop(close1,event).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7808
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7809).
% event Open2()
event(open2).
==> mpred_prop(open2,event).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7809
% event CloseRelay()
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7809).
event(closeRelay).
==> mpred_prop(closeRelay,event).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7811
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7812).
% fluent Light()
fluent(light).
==> mpred_prop(light,fluent).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7812
% fluent Switch1()
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7812).
fluent(switch1).
==> mpred_prop(switch1,fluent).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7813
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7814).
% fluent Switch2()
fluent(switch2).
==> mpred_prop(switch2,fluent).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7814
% fluent Switch3()
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7814).
fluent(switch3).
==> mpred_prop(switch3,fluent).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7815
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7816).
% fluent Relay()
fluent(relay).
==> mpred_prop(relay,fluent).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7817
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7818).
% [time]
% Stopped(Light(),time) &
% Initiated(Switch1(),time) &
% Initiated(Switch2(),time) ->
% Happens(LightOn(),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7821
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7818).

 /*  stopped(light, Time), initiated(switch1, Time), initiated(switch2, Time) ->
       happens(lightOn, Time).
 */

 /*  happens(lightOn, Time) :-
       stopped(light, Time),
       initiated(switch1, Time),
       initiated(switch2, Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7818).

 /*  [stopped(light, Time), initiated(switch1, Time), initiated(switch2, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(lightOn, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7818).
axiom(happens(lightOn, Time),
   
    [ stopped(light, Time),
      initiated(switch1, Time),
      initiated(switch2, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7818).

 /*  not(stopped(light, Time)) :-
       ( initiated(switch1, Time),
         initiated(switch2, Time)
       ),
       not(happens(lightOn, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7818).

 /*  [initiated(switch1, Time), initiated(switch2, Time), not(happens(lightOn, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(stopped(light, Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7818).
axiom(not(stopped(light, Time)),
   
    [ initiated(switch1, Time),
      initiated(switch2, Time),
      not(happens(lightOn, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7818).

 /*  not(initiated(switch1, Time)) :-
       initiated(switch2, Time),
       stopped(light, Time),
       not(happens(lightOn, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7818).

 /*  [initiated(switch2, Time), stopped(light, Time), not(happens(lightOn, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(initiated(switch1, Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7818).
axiom(not(initiated(switch1, Time)),
   
    [ initiated(switch2, Time),
      stopped(light, Time),
      not(happens(lightOn, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7818).

 /*  not(initiated(switch2, Time)) :-
       initiated(switch1, Time),
       stopped(light, Time),
       not(happens(lightOn, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7818).

 /*  [initiated(switch1, Time), stopped(light, Time), not(happens(lightOn, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(initiated(switch2, Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7818).
axiom(not(initiated(switch2, Time)),
   
    [ initiated(switch1, Time),
      stopped(light, Time),
      not(happens(lightOn, Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7823
% [time]
% Started(Switch2(),time) &
% Initiated(Relay(),time) ->
% Happens(Open2(),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7826
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7825).

 /*  started(switch2, Time), initiated(relay, Time) ->
       happens(open2, Time).
 */

 /*  happens(open2, Time) :-
       started(switch2, Time),
       initiated(relay, Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7825).

 /*  [started(switch2, Time), initiated(relay, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(open2, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7825).
axiom(happens(open2, Time),
    [started(switch2, Time), initiated(relay, Time)]).

 /*  not(started(switch2, Time)) :-
       initiated(relay, Time),
       not(happens(open2, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7825).

 /*  [initiated(relay, Time), not(happens(open2, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(started(switch2, Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7825).
axiom(not(started(switch2, Time)),
    [initiated(relay, Time), not(happens(open2, Time))]).

 /*  not(initiated(relay, Time)) :-
       started(switch2, Time),
       not(happens(open2, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7825).

 /*  [started(switch2, Time), not(happens(open2, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(initiated(relay, Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7825).
axiom(not(initiated(relay, Time)),
    [started(switch2, Time), not(happens(open2, Time))]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7828
% [time]
% Stopped(Relay(),time) &
% Initiated(Switch1(),time) &
% Initiated(Switch3(),time) ->
% Happens(CloseRelay(),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7832
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7830).

 /*  stopped(relay, Time), initiated(switch1, Time), initiated(switch3, Time) ->
       happens(closeRelay, Time).
 */

 /*  happens(closeRelay, Time) :-
       stopped(relay, Time),
       initiated(switch1, Time),
       initiated(switch3, Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7830).

 /*  [stopped(relay, Time), initiated(switch1, Time), initiated(switch3, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(closeRelay, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7830).
axiom(happens(closeRelay, Time),
   
    [ stopped(relay, Time),
      initiated(switch1, Time),
      initiated(switch3, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7830).

 /*  not(stopped(relay, Time)) :-
       ( initiated(switch1, Time),
         initiated(switch3, Time)
       ),
       not(happens(closeRelay, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7830).

 /*  [initiated(switch1, Time), initiated(switch3, Time), not(happens(closeRelay, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(stopped(relay, Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7830).
axiom(not(stopped(relay, Time)),
   
    [ initiated(switch1, Time),
      initiated(switch3, Time),
      not(happens(closeRelay, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7830).

 /*  not(initiated(switch1, Time)) :-
       initiated(switch3, Time),
       stopped(relay, Time),
       not(happens(closeRelay, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7830).

 /*  [initiated(switch3, Time), stopped(relay, Time), not(happens(closeRelay, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(initiated(switch1, Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7830).
axiom(not(initiated(switch1, Time)),
   
    [ initiated(switch3, Time),
      stopped(relay, Time),
      not(happens(closeRelay, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7830).

 /*  not(initiated(switch3, Time)) :-
       initiated(switch1, Time),
       stopped(relay, Time),
       not(happens(closeRelay, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7830).

 /*  [initiated(switch1, Time), stopped(relay, Time), not(happens(closeRelay, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(initiated(switch3, Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7830).
axiom(not(initiated(switch3, Time)),
   
    [ initiated(switch1, Time),
      stopped(relay, Time),
      not(happens(closeRelay, Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7834
% [time]
 % Initiates(LightOn(),Light(),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7834).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(lightOn, light, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7834).
axiom(initiates(lightOn, light, Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7836
% [time]
 % Terminates(Open2(),Switch2(),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7836).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(open2, switch2, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7836).
axiom(terminates(open2, switch2, Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7838
% [time]
 % Initiates(CloseRelay(),Relay(),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7838).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(closeRelay, relay, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7838).
axiom(initiates(closeRelay, relay, Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7840
% [time]
 % Initiates(Close1(),Switch1(),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7840).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(close1, switch1, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7840).
axiom(initiates(close1, switch1, Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7842
% !HoldsAt(Switch1(),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7842).

 /*  [] ->
       ta(Ta_Param, tvs1=[start], tvs2=[start], holds_at(neg(switch1), start)).
 */
axiom(holds_at(neg(switch1), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7843
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7844).
% HoldsAt(Switch2(),0).

 /*  [] ->
       ta(Ta_Param, tvs1=[start], tvs2=[start], holds_at(switch2, start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7844).
axiom(holds_at(switch2, start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7844
% HoldsAt(Switch3(),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7844).

 /*  [] ->
       ta(Ta_Param, tvs1=[start], tvs2=[start], holds_at(switch3, start)).
 */
axiom(holds_at(switch3, start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7845
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7846).
% !HoldsAt(Relay(),0).

 /*  [] ->
       ta(Ta_Param, tvs1=[start], tvs2=[start], holds_at(neg(relay), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7846).
axiom(holds_at(neg(relay), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7846
% !HoldsAt(Light(),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7846).

 /*  [] ->
       ta(Ta_Param, tvs1=[start], tvs2=[start], holds_at(neg(light), start)).
 */
axiom(holds_at(neg(light), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7848
% Happens(Close1(),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7848).

 /*  [] ->
       ta(Ta_Param, tvs1=[start], tvs2=[start], happens(close1, start)).
 */
axiom(happens(close1, start),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7850
% completion Happens
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7850).
==> completion(happens).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7852
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7853).
% range time 0 1
==> range(time,0,1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7853
% range offset 1 1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7853).
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Shanahan1999/CoinToss.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{Kartha:1994,
%;   author = "G. Neelakantan Kartha",
%;   year = "1994",
%;   title = "Two counterexamples related to \uppercase{B}aker's approach to the frame problem",
%;   journal = "Artificial Intelligence",
%;   volume = "69",
%;   number = "1--2",
%;   pages = "379--391",
%; }
%;
%; @incollection{Shanahan:1999,
%;   author = "Shanahan, Murray",
%;   year = "1999",
%;   title = "The Event Calculus explained",
%;   editor = "Michael J. Wooldridge and Manuela M. Veloso",
%;   booktitle = "Artificial Intelligence Today: Recent Trends and Developments",
%;   series = "Lecture Notes in Computer Science",
%;   volume = "1600",
%;   pages = "409--430",
%;   address = "Berlin",
%;   publisher = "Springer",
%; }
%;
%; model finding
%;
%; modifications from Shanahan's formulation:
%; InitiallyP -> HoldsAt
%; pruning of models irrelevant to example
%; timestamps
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7903
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7904).
% load foundations/Root.e
:- load_e('foundations/Root.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7904
% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7904).
:- load_e('foundations/EC.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7906
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7907).
% event Toss()
event(toss).
==> mpred_prop(toss,event).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7907
% fluent ItsHeads()
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7907).
fluent(itsHeads).
==> mpred_prop(itsHeads,fluent).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7908
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7909).
% fluent Heads()
fluent(heads).
==> mpred_prop(heads,fluent).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7909
% noninertial ItsHeads
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7909).
==> noninertial(itsHeads).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7911
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7912).
% [time]
 % HoldsAt(ItsHeads(),time) -> Initiates(Toss(),Heads(),time).

 /*  [holds_at(itsHeads, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(toss, heads, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7912).
axiom(initiates(toss, heads, Time),
    [holds_at(itsHeads, Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7912
% [time]
 % !HoldsAt(ItsHeads(),time) -> Terminates(Toss(),Heads(),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7912).

 /*  [holds_at(neg(itsHeads), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(toss, heads, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7912).
axiom(terminates(toss, heads, Time),
    [holds_at(neg(itsHeads), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7914
% HoldsAt(Heads(),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7914).

 /*  [] ->
       ta(Ta_Param, tvs1=[start], tvs2=[start], holds_at(heads, start)).
 */
axiom(holds_at(heads, start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7915
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7916).
% Happens(Toss(),1).

 /*  [b(start, Maptime), ignore(start+1==Maptime)] ->
       ta(Ta_Param,
          tvs1=[start+1],
          tvs2=[Maptime, start],
          happens(toss, Maptime)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7916).
axiom(happens(toss, Maptime),
    [b(start, Maptime)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7916
% Happens(Toss(),2).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7916).

 /*  [b(start, Start2), toffset(start, 2, Start2), ignore(start+2==Start2)] ->
       ta(Ta_Param,
          tvs1=[start+2],
          tvs2=[Start2, start],
          happens(toss, Start2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7916).
axiom(happens(toss, Start2),
    [b(start, Start2), toffset(start, 2, Start2)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7917
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7918).
% Happens(Toss(),3).

 /*  [b(start, Start3), toffset(start, 3, Start3), ignore(start+3==Start3)] ->
       ta(Ta_Param,
          tvs1=[start+3],
          tvs2=[Start3, start],
          happens(toss, Start3)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7918).
axiom(happens(toss, Start3),
    [b(start, Start3), toffset(start, 3, Start3)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7919
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7920).
%; prune models irrelevant to example:


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7920
% HoldsAt(ItsHeads(),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7920).

 /*  [] ->
       ta(Ta_Param, tvs1=[start], tvs2=[start], holds_at(itsHeads, start)).
 */
axiom(holds_at(itsHeads, start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7921
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7922).
% HoldsAt(ItsHeads(),4).

 /*  [b(start, Start4), toffset(start, 4, Start4), ignore(start+4==Start4)] ->
       ta(Ta_Param,
          tvs1=[start+4],
          tvs2=[Start4, start],
          holds_at(itsHeads, Start4)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7922).
axiom(holds_at(itsHeads, Start4),
    [b(start, Start4), toffset(start, 4, Start4)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7923
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7924).
% completion Happens
==> completion(happens).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7925
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7926).
% range time 0 4
==> range(time,0,4).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7926
% range offset 1 1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7926).
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Shanahan1999/ChessBoard.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; due to Raymond Reiter
%;
%; @inproceedings{KarthaLifschitz:1994,
%;   author = "G. Neelakantan Kartha and Vladimir Lifschitz",
%;   year = "1994",
%;   title = "Actions with indirect effects (preliminary report)",
%;   editor = "Jon Doyle and Erik Sandewall and Pietro Torasso",
%;   booktitle = "\uppercase{P}roceedings of the \uppercase{F}ourth \uppercase{I}nternational \uppercase{C}onference on \uppercase{P}rinciples of \uppercase{K}nowledge \uppercase{R}epresentation and \uppercase{R}easoning",
%;   pages = "341--350",
%;   address = "San Francisco",
%;   publisher = "Morgan Kaufmann",
%; }
%;
%; @incollection{Shanahan:1999,
%;   author = "Shanahan, Murray",
%;   year = "1999",
%;   title = "The Event Calculus explained",
%;   editor = "Michael J. Wooldridge and Manuela M. Veloso",
%;   booktitle = "Artificial Intelligence Today: Recent Trends and Developments",
%;   series = "Lecture Notes in Computer Science",
%;   volume = "1600",
%;   pages = "409--430",
%;   address = "Berlin",
%;   publisher = "Springer",
%; }
%;
%; model finding
%;
%; modifications from Shanahan's formulation:
%; InitiallyN -> !HoldsAt
%; pruning of models irrelevant to example
%; timestamps
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7979
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7980).
% load foundations/Root.e
:- load_e('foundations/Root.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7980
% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7980).
:- load_e('foundations/EC.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7982
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7983).
% event Throw()
event(throw).
==> mpred_prop(throw,event).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7983
% fluent ItsBlack()
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7983).
fluent(itsBlack).
==> mpred_prop(itsBlack,fluent).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7984
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7985).
% fluent ItsWhite()
fluent(itsWhite).
==> mpred_prop(itsWhite,fluent).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7985
% fluent OnBlack()
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7985).
fluent(onBlack).
==> mpred_prop(onBlack,fluent).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7986
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7987).
% fluent OnWhite()
fluent(onWhite).
==> mpred_prop(onWhite,fluent).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7987
% noninertial ItsBlack, ItsWhite
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7987).
==> noninertial(itsBlack).
==> noninertial(itsWhite).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7989
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7990).
% [time]
% HoldsAt(ItsWhite(),time) ->
% Initiates(Throw(),OnWhite(),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7991

 /*  [holds_at(itsWhite, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(throw, onWhite, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7990).
axiom(initiates(throw, onWhite, Time),
    [holds_at(itsWhite, Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7993
% [time]
% HoldsAt(ItsBlack(),time) ->
% Initiates(Throw(),OnBlack(),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7995

 /*  [holds_at(itsBlack, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(throw, onBlack, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7995).
axiom(initiates(throw, onBlack, Time),
    [holds_at(itsBlack, Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7997
% [time]
 % HoldsAt(ItsWhite(),time) | HoldsAt(ItsBlack(),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7997).

 /*   (   holds_at(itsWhite, Time)
      ;   holds_at(itsBlack, Time)
      ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7997).

 /*  holds_at(itsWhite, Time) :-
       not(holds_at(itsBlack, Time)).
 */

 /*  [holds_at(neg(itsBlack), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(itsWhite, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7997).
axiom(holds_at(itsWhite, Time),
    [holds_at(neg(itsBlack), Time)]).

 /*  holds_at(itsBlack, Time) :-
       not(holds_at(itsWhite, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7997).

 /*  [holds_at(neg(itsWhite), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(itsBlack, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7997).
axiom(holds_at(itsBlack, Time),
    [holds_at(neg(itsWhite), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:7999
% !HoldsAt(OnWhite(),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',7999).

 /*  [] ->
       ta(Ta_Param, tvs1=[start], tvs2=[start], holds_at(neg(onWhite), start)).
 */
axiom(holds_at(neg(onWhite), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8000
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8001).
% !HoldsAt(OnBlack(),0).

 /*  [] ->
       ta(Ta_Param, tvs1=[start], tvs2=[start], holds_at(neg(onBlack), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8001).
axiom(holds_at(neg(onBlack), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8001
% Happens(Throw(),1).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8001).

 /*  [b(start, Maptime), ignore(start+1==Maptime)] ->
       ta(Ta_Param,
          tvs1=[start+1],
          tvs2=[Maptime, start],
          happens(throw, Maptime)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8001).
axiom(happens(throw, Maptime),
    [b(start, Maptime)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8003
%; prune models irrelevant to example:


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8004
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8005).
% HoldsAt(ItsWhite(),0).

 /*  [] ->
       ta(Ta_Param, tvs1=[start], tvs2=[start], holds_at(itsWhite, start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8005).
axiom(holds_at(itsWhite, start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8005
% HoldsAt(ItsBlack(),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8005).

 /*  [] ->
       ta(Ta_Param, tvs1=[start], tvs2=[start], holds_at(itsBlack, start)).
 */
axiom(holds_at(itsBlack, start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8006
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8007).
% HoldsAt(ItsWhite(),2).

 /*  [b(start, Start2), toffset(start, 2, Start2), ignore(start+2==Start2)] ->
       ta(Ta_Param,
          tvs1=[start+2],
          tvs2=[Start2, start],
          holds_at(itsWhite, Start2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8007).
axiom(holds_at(itsWhite, Start2),
    [b(start, Start2), toffset(start, 2, Start2)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8007
% HoldsAt(ItsBlack(),2).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8007).

 /*  [b(start, Start2), toffset(start, 2, Start2), ignore(start+2==Start2)] ->
       ta(Ta_Param,
          tvs1=[start+2],
          tvs2=[Start2, start],
          holds_at(itsBlack, Start2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8007).
axiom(holds_at(itsBlack, Start2),
    [b(start, Start2), toffset(start, 2, Start2)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8009
% completion Happens
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8009).
==> completion(happens).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8011
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8012).
% range time 0 2
==> range(time,0,2).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8012
% range offset 1 1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8012).
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/Shanahan1999/RussianTurkey.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @book{Sandewall:1994,
%;   author = "Sandewall, Erik",
%;   year = "1994",
%;   title = "Features and Fluents: The Representation of Knowledge about Dynamical Systems",
%;   volume = "I",
%;   address = "Oxford",
%;   publisher = "Oxford University Press",
%; }
%;
%; @incollection{Shanahan:1999,
%;   author = "Shanahan, Murray",
%;   year = "1999",
%;   title = "The Event Calculus explained",
%;   editor = "Michael J. Wooldridge and Manuela M. Veloso",
%;   booktitle = "Artificial Intelligence Today: Recent Trends and Developments",
%;   series = "Lecture Notes in Computer Science",
%;   volume = "1600",
%;   pages = "409--430",
%;   address = "Berlin",
%;   publisher = "Springer",
%; }
%;
%; model finding
%;
%; modifications from Shanahan's formulation:
%; InitiallyP -> HoldsAt
%; added [time] Terminates(Shoot(),Loaded(),time).
%; added !HoldsAt(Loaded(),0) to prune models
%; timestamps
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8062
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8063).
% load foundations/Root.e
:- load_e('foundations/Root.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8063
% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8063).
:- load_e('foundations/EC.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8065
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8066).
% event Load()
event(load).
==> mpred_prop(load,event).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8066
% event Shoot()
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8066).
event(shoot).
==> mpred_prop(shoot,event).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8067
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8068).
% event Spin()
event(spin).
==> mpred_prop(spin,event).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8068
% fluent Loaded()
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8068).
fluent(loaded).
==> mpred_prop(loaded,fluent).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8069
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8070).
% fluent Alive()
fluent(alive).
==> mpred_prop(alive,fluent).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8071
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8072).
% [time]
 % Initiates(Load(),Loaded(),time).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(load, loaded, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8072).
axiom(initiates(load, loaded, Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8072
% [time]
 % HoldsAt(Loaded(),time) -> Terminates(Shoot(),Alive(),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8072).

 /*  [holds_at(loaded, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(shoot, alive, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8072).
axiom(terminates(shoot, alive, Time),
    [holds_at(loaded, Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8073
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8074).
% [time]
 % Releases(Spin(),Loaded(),time).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          releases(spin, loaded, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8074).
axiom(releases(spin, loaded, Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8074
% [time]
 % Terminates(Shoot(),Loaded(),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8074).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(shoot, loaded, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8074).
axiom(terminates(shoot, loaded, Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8076
% HoldsAt(Alive(),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8076).

 /*  [] ->
       ta(Ta_Param, tvs1=[start], tvs2=[start], holds_at(alive, start)).
 */
axiom(holds_at(alive, start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8077
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8078).
% !HoldsAt(Loaded(),0).

 /*  [] ->
       ta(Ta_Param, tvs1=[start], tvs2=[start], holds_at(neg(loaded), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8078).
axiom(holds_at(neg(loaded), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8078
% Happens(Load(),1).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8078).

 /*  [b(start, Maptime), ignore(start+1==Maptime)] ->
       ta(Ta_Param,
          tvs1=[start+1],
          tvs2=[Maptime, start],
          happens(load, Maptime)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8078).
axiom(happens(load, Maptime),
    [b(start, Maptime)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8079
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8080).
% Happens(Spin(),2).

 /*  [b(start, Start2), toffset(start, 2, Start2), ignore(start+2==Start2)] ->
       ta(Ta_Param,
          tvs1=[start+2],
          tvs2=[Start2, start],
          happens(spin, Start2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8080).
axiom(happens(spin, Start2),
    [b(start, Start2), toffset(start, 2, Start2)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8080
% Happens(Shoot(),3).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8080).

 /*  [b(start, Start3), toffset(start, 3, Start3), ignore(start+3==Start3)] ->
       ta(Ta_Param,
          tvs1=[start+3],
          tvs2=[Start3, start],
          happens(shoot, Start3)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8080).
axiom(happens(shoot, Start3),
    [b(start, Start3), toffset(start, 3, Start3)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8082
% completion Happens
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8082).
==> completion(happens).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8084
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8085).
% range time 0 4
==> range(time,0,4).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8085
% range offset 1 1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8085).
==> range(offset,1,1).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/AkmanEtAl2004/ZooTest4.2.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{Akman:2004,
%;   author = "Varol Akman and Selim T. Erdogan and Joohyung Lee and Vladimir Lifschitz and Hudson Turner",
%;   year = "2004",
%;   title = "Representing the zoo world and the traffic world in the language of the causal calculator",
%;   journal = "Artificial Intelligence",
%;   volume = "153",
%;   pages = "105--140",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8114
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8115).
% option encoding 3
:- set_ec_option(encoding, 3).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8116
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8117).
% load foundations/Root.e
:- load_e('foundations/Root.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8117
% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8117).
:- load_e('foundations/EC.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8118
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8119).
% load examples/AkmanEtAl2004/ZooWorld.e
:- load_e('examples/AkmanEtAl2004/ZooWorld.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8120
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8121).
% human Homer
==> t(human,homer).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8121
% elephant Jumbo
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8121).
==> t(elephant,jumbo).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8123
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8124).
% Species(Homer)=HumanSpecies.

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], equals(species(homer), humanSpecies)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8124).
axiom(equals(species(homer), humanSpecies),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8124
% Adult(Homer).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8124).

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], adult(homer)).
 */
axiom(adult(homer),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8125
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8126).
% Species(Jumbo)=ElephantSpecies.

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], equals(species(jumbo), elephantSpecies)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8126).
axiom(equals(species(jumbo), elephantSpecies),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8126
% Adult(Jumbo).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8126).

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], adult(jumbo)).
 */
axiom(adult(jumbo),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8128
% !HoldsAt(Opened(GateAO),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8128).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(opened(gateAO)), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8128).
axiom(holds_at(neg(opened(gateAO)), start),
    []).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8129
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8130).
% {position} 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8129
% HoldsAt(Pos(Homer,position),0) & Outside=Loc(position).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8130).

 /*  exists([Position],
     holds_at(pos(homer, Position), start),
      equals(outside, loc(Position))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8130).

 /*  holds_at(pos(homer, Position), start) :-
       some(Position, '$kolem_Fn_415').
 */

 /*  [some(Position, '$kolem_Fn_415')] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(pos(homer, Position), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8130).
axiom(holds_at(pos(homer, Position), start),
    [some(Position, '$kolem_Fn_415')]).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8130
% {position} 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8130
% HoldsAt(Pos(Jumbo,position),0) & CageA=Loc(position).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8130).

 /*  exists([Position],
     holds_at(pos(jumbo, Position), start),
      equals(cageA, loc(Position))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8130).

 /*  holds_at(pos(jumbo, Position), start) :-
       some(Position, '$kolem_Fn_416').
 */

 /*  [some(Position, '$kolem_Fn_416')] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(pos(jumbo, Position), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8130).
axiom(holds_at(pos(jumbo, Position), start),
    [some(Position, '$kolem_Fn_416')]).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8132
% {position} 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8132
% HoldsAt(Pos(Homer,position),5) & CageA=Loc(position).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8132).

 /*  exists([Position],
     holds_at(pos(homer, Position), start+5),
      equals(cageA, loc(Position))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8132).

 /*  holds_at(pos(homer, Position), start+5) :-
       some(Position, '$kolem_Fn_417').
 */

 /*  [some(Position, '$kolem_Fn_417'), b(start, Start5), toffset(start, 5, Start5), ignore(start+5==Start5)] ->
       ta(Ta_Param,
          tvs1=[start+5],
          tvs2=[Start5, start],
          holds_at(pos(homer, Position), Start5)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8132).
axiom(holds_at(pos(homer, Position), Start5),
   
    [ some(Position, '$kolem_Fn_417'),
      b(start, Start5),
      toffset(start, 5, Start5)
    ]).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8133
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8134).
% {position} 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8133
% HoldsAt(Pos(Jumbo,position),5) & Outside=Loc(position).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8134).

 /*  exists([Position],
     holds_at(pos(jumbo, Position), start+5),
      equals(outside, loc(Position))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8134).

 /*  holds_at(pos(jumbo, Position), start+5) :-
       some(Position, '$kolem_Fn_418').
 */

 /*  [some(Position, '$kolem_Fn_418'), b(start, Start5), toffset(start, 5, Start5), ignore(start+5==Start5)] ->
       ta(Ta_Param,
          tvs1=[start+5],
          tvs2=[Start5, start],
          holds_at(pos(jumbo, Position), Start5)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8134).
axiom(holds_at(pos(jumbo, Position), Start5),
   
    [ some(Position, '$kolem_Fn_418'),
      b(start, Start5),
      toffset(start, 5, Start5)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8135
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8136).
% [animal,time]
 % !HoldsAt(Mounted(Homer,animal),time).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(mounted(homer, Animal)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8136).
axiom(holds_at(neg(mounted(homer, Animal)), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8137
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8138).
% [human]
 % HoldsAt(PosDeterminingFluent(human,1),5).

 /*  [b(start, Start5), toffset(start, 5, Start5), ignore(start+5==Start5)] ->
       ta(Ta_Param,
          tvs1=[start+5],
          tvs2=[Start5, start],
          holds_at(posDeterminingFluent(Human, 1), Start5)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8138).
axiom(holds_at(posDeterminingFluent(Human, 1), Start5),
    [b(start, Start5), toffset(start, 5, Start5)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8138
% [event,animal]
 % !HoldsAt(DoneBy(event,animal),5).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8138).

 /*  [b(start, Start5), toffset(start, 5, Start5), ignore(start+5==Start5)] ->
       ta(Ta_Param,
          tvs1=[start+5],
          tvs2=[Start5, start],
          holds_at(neg(doneBy(Event, Animal)), Start5)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8138).
axiom(holds_at(neg(doneBy(Event, Animal)), Start5),
    [b(start, Start5), toffset(start, 5, Start5)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8140
%;HoldsAt(Pos(Homer,7),0).
%;HoldsAt(Pos(Jumbo,4),0).
%;Happens(Move(Jumbo,3),0).
%;Happens(Open(Homer,GateAO),0).
%;Happens(Move(Homer,4),1).
%;Happens(Move(Jumbo,1),1).
%;Happens(Move(Jumbo,3),2).
%;Happens(Mount(Homer,Jumbo),2).
%;Happens(Move(Jumbo,4),3).
%;!Happens(Move(Homer,2),3).
%;Happens(Move(Jumbo,7),4).
%;!Happens(Mount(Homer,Jumbo),3).
%;!Happens(Mount(Homer,Jumbo),4).
%;[position] !Happens(Move(Homer,position),4).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8155
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8156).
% range time 0 5
==> range(time,0,5).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8156
% range position 1 8
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8156).
==> range(position,1,8).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8157
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8158).
% range offset 0 0
==> range(offset,0,0).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8159
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8160).
% completion Happens
==> completion(happens).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/AkmanEtAl2004/ZooTest5.1.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{Akman:2004,
%;   author = "Varol Akman and Selim T. Erdogan and Joohyung Lee and Vladimir Lifschitz and Hudson Turner",
%;   year = "2004",
%;   title = "Representing the zoo world and the traffic world in the language of the causal calculator",
%;   journal = "Artificial Intelligence",
%;   volume = "153",
%;   pages = "105--140",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8188
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8189).
% option encoding 3
:- set_ec_option(encoding, 3).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8190
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8191).
% load foundations/Root.e
:- load_e('foundations/Root.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8191
% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8191).
:- load_e('foundations/EC.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8192
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8193).
% load examples/AkmanEtAl2004/ZooWorld.e
:- load_e('examples/AkmanEtAl2004/ZooWorld.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8194
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8195).
% human Homer
==> t(human,homer).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8195
% elephant Jumbo
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8195).
==> t(elephant,jumbo).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8196
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8197).
% horse Silver
==> t(horse,silver).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8198
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8199).
% Species(Homer)=HumanSpecies.

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], equals(species(homer), humanSpecies)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8199).
axiom(equals(species(homer), humanSpecies),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8199
% Adult(Homer).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8199).

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], adult(homer)).
 */
axiom(adult(homer),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8200
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8201).
% Species(Jumbo)=ElephantSpecies.

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], equals(species(jumbo), elephantSpecies)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8201).
axiom(equals(species(jumbo), elephantSpecies),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8201
% Adult(Jumbo).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8201).

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], adult(jumbo)).
 */
axiom(adult(jumbo),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8202
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8203).
% Species(Silver)=HorseSpecies.

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], equals(species(silver), horseSpecies)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8203).
axiom(equals(species(silver), horseSpecies),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8203
% Adult(Silver).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8203).

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], adult(silver)).
 */
axiom(adult(silver),
    []).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8205
% {position}


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8206
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8207).
% !HoldsAt(Pos(Homer,position),0) &
% HoldsAt(Pos(Jumbo,position),0) &
% HoldsAt(Pos(Homer,position),1) &
% !HoldsAt(Pos(Jumbo,position),1).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8209
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8207).

 /*  exists([Position],
     holds_at(neg(pos(homer, Position)), start),
      holds_at(pos(jumbo, Position), start),
      holds_at(pos(homer, Position), start+1),
      holds_at(neg(pos(jumbo, Position)), start+1)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8207).

 /*  holds_at(neg(pos(homer, Position)), start) :-
       some(Position, '$kolem_Fn_419').
 */

 /*  [some(Position, '$kolem_Fn_419')] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(pos(homer, Position)), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8207).
axiom(holds_at(neg(pos(homer, Position)), start),
    [some(Position, '$kolem_Fn_419')]).

 /*  holds_at(pos(jumbo, Position), start) :-
       some(Position, '$kolem_Fn_419').
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8207).

 /*  [some(Position, '$kolem_Fn_419')] ->
       ta(Ta_Param3,
          tvs1=[start],
          tvs2=[start],
          holds_at(pos(jumbo, Position), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8207).
axiom(holds_at(pos(jumbo, Position), start),
    [some(Position, '$kolem_Fn_419')]).

 /*  holds_at(pos(homer, Position), start+1) :-
       some(Position, '$kolem_Fn_419').
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8207).

 /*  [some(Position, '$kolem_Fn_419'), b(start, Time), ignore(start+1==Time)] ->
       ta(Ta_Param5,
          tvs1=[start+1],
          tvs2=[Time, start],
          holds_at(pos(homer, Position), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8207).
axiom(holds_at(pos(homer, Position), Time),
    [some(Position, '$kolem_Fn_419'), b(start, Time)]).

 /*  holds_at(neg(pos(jumbo, Position)), start+1) :-
       some(Position, '$kolem_Fn_419').
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8207).

 /*  [some(Position, '$kolem_Fn_419'), b(start, Time6), ignore(start+1==Time6)] ->
       ta(Ta_Param7,
          tvs1=[start+1],
          tvs2=[Time6, start],
          holds_at(neg(pos(jumbo, Position)), Time6)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8207).
axiom(holds_at(neg(pos(jumbo, Position)), Time6),
    [some(Position, '$kolem_Fn_419'), b(start, Time6)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8210
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8211).
% HoldsAt(Mounted(Homer,Silver),0).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(mounted(homer, silver), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8211).
axiom(holds_at(mounted(homer, silver), start),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8212
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8213).
% option manualrelease on
:- set_ec_option(manualrelease, on).
:- if(is_e_toplevel).
:- endif.


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8213
% [human, animal]
 % !ReleasedAt(Mounted(human, animal),0).
 %  not(releasedAt(mounted(Human,Animal),0)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8213).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[],
          tvs2=[],
          not(releasedAt(mounted(Human, Animal), 0))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8213).
axiom(not(releasedAt(mounted(Human, Animal), 0)),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8214
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8215).
% [gate]
 % !ReleasedAt(Opened(gate),0).
 %  not(releasedAt(opened(Gate),0)).

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], not(releasedAt(opened(Gate), 0))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8215).
axiom(not(releasedAt(opened(Gate), 0)),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8215
% [position]
 % ReleasedAt(Pos(Homer,position),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8215).

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], releasedAt(pos(homer, Position), 0)).
 */
axiom(releasedAt(pos(homer, Position), 0),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8216
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8217).
% [position]
 % !ReleasedAt(Pos(Jumbo,position),0).
 %  not(releasedAt(pos(jumbo,Position),0)).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[],
          tvs2=[],
          not(releasedAt(pos(jumbo, Position), 0))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8217).
axiom(not(releasedAt(pos(jumbo, Position), 0)),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8217
% [position]
 % !ReleasedAt(Pos(Silver,position),0).
 %  not(releasedAt(pos(silver,Position),0)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8217).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[],
          tvs2=[],
          not(releasedAt(pos(silver, Position), 0))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8217).
axiom(not(releasedAt(pos(silver, Position), 0)),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8219
% [human]
 % HoldsAt(PosDeterminingFluent(human,1),1).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8219).

 /*  [b(start, Time), ignore(start+1==Time)] ->
       ta(Ta_Param,
          tvs1=[start+1],
          tvs2=[Time, start],
          holds_at(posDeterminingFluent(Human, 1), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8219).
axiom(holds_at(posDeterminingFluent(Human, 1), Time),
    [b(start, Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8220
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8221).
% [event,animal]
 % !HoldsAt(DoneBy(event,animal),1).

 /*  [b(start, Time), ignore(start+1==Time)] ->
       ta(Ta_Param,
          tvs1=[start+1],
          tvs2=[Time, start],
          holds_at(neg(doneBy(Event, Animal)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8221).
axiom(holds_at(neg(doneBy(Event, Animal)), Time),
    [b(start, Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8222
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8223).
%;HoldsAt(Opened(GateAO),0).
%;HoldsAt(Pos(Homer,3),0).
%;HoldsAt(Pos(Jumbo,2),0).
%;HoldsAt(Pos(Silver,3),0).
%;Happens(Move(Jumbo,4),0).
%;Happens(ThrowOff(Silver,Homer),0).
%;HoldsAt(PosDeterminingFluent(Homer,2),0).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8230
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8231).
% range time 0 1
==> range(time,0,1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8231
% range position 1 8
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8231).
==> range(position,1,8).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8232
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8233).
% range offset 0 0
==> range(offset,0,0).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/AkmanEtAl2004/ZooTest3.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{Akman:2004,
%;   author = "Varol Akman and Selim T. Erdogan and Joohyung Lee and Vladimir Lifschitz and Hudson Turner",
%;   year = "2004",
%;   title = "Representing the zoo world and the traffic world in the language of the causal calculator",
%;   journal = "Artificial Intelligence",
%;   volume = "153",
%;   pages = "105--140",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8261
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8262).
% option encoding 3
:- set_ec_option(encoding, 3).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8263
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8264).
% load foundations/Root.e
:- load_e('foundations/Root.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8264
% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8264).
:- load_e('foundations/EC.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8265
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8266).
% load examples/AkmanEtAl2004/ZooWorld.e
:- load_e('examples/AkmanEtAl2004/ZooWorld.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8267
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8268).
% human Homer
==> t(human,homer).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8268
% dog Snoopy
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8268).
==> t(dog,snoopy).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8270
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8271).
% Species(Homer)=HumanSpecies.

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], equals(species(homer), humanSpecies)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8271).
axiom(equals(species(homer), humanSpecies),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8271
% Adult(Homer).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8271).

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], adult(homer)).
 */
axiom(adult(homer),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8272
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8273).
% Species(Snoopy)=DogSpecies.

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], equals(species(snoopy), dogSpecies)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8273).
axiom(equals(species(snoopy), dogSpecies),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8273
% Adult(Snoopy).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8273).

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], adult(snoopy)).
 */
axiom(adult(snoopy),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8275
% !HoldsAt(Opened(GateAO),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8275).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(opened(gateAO)), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8275).
axiom(holds_at(neg(opened(gateAO)), start),
    []).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8276
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8277).
% {position} 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8276
% HoldsAt(Pos(Homer,position),0) & Outside=Loc(position).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8277).

 /*  exists([Position],
     holds_at(pos(homer, Position), start),
      equals(outside, loc(Position))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8277).

 /*  holds_at(pos(homer, Position), start) :-
       some(Position, '$kolem_Fn_420').
 */

 /*  [some(Position, '$kolem_Fn_420')] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(pos(homer, Position), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8277).
axiom(holds_at(pos(homer, Position), start),
    [some(Position, '$kolem_Fn_420')]).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8277
% {position} 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8277
% HoldsAt(Pos(Snoopy,position),0) & CageA=Loc(position).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8277).

 /*  exists([Position],
     holds_at(pos(snoopy, Position), start),
      equals(cageA, loc(Position))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8277).

 /*  holds_at(pos(snoopy, Position), start) :-
       some(Position, '$kolem_Fn_421').
 */

 /*  [some(Position, '$kolem_Fn_421')] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(pos(snoopy, Position), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8277).
axiom(holds_at(pos(snoopy, Position), start),
    [some(Position, '$kolem_Fn_421')]).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8279
% {position} 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8279
% HoldsAt(Pos(Homer,position),2) & CageA=Loc(position).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8279).

 /*  exists([Position],
     holds_at(pos(homer, Position), start+2),
      equals(cageA, loc(Position))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8279).

 /*  holds_at(pos(homer, Position), start+2) :-
       some(Position, '$kolem_Fn_422').
 */

 /*  [some(Position, '$kolem_Fn_422'), b(start, Start2), toffset(start, 2, Start2), ignore(start+2==Start2)] ->
       ta(Ta_Param,
          tvs1=[start+2],
          tvs2=[Start2, start],
          holds_at(pos(homer, Position), Start2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8279).
axiom(holds_at(pos(homer, Position), Start2),
   
    [ some(Position, '$kolem_Fn_422'),
      b(start, Start2),
      toffset(start, 2, Start2)
    ]).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8280
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8281).
% {position} 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8280
% HoldsAt(Pos(Snoopy,position),2) & Outside=Loc(position).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8281).

 /*  exists([Position],
     holds_at(pos(snoopy, Position), start+2),
      equals(outside, loc(Position))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8281).

 /*  holds_at(pos(snoopy, Position), start+2) :-
       some(Position, '$kolem_Fn_423').
 */

 /*  [some(Position, '$kolem_Fn_423'), b(start, Start2), toffset(start, 2, Start2), ignore(start+2==Start2)] ->
       ta(Ta_Param,
          tvs1=[start+2],
          tvs2=[Start2, start],
          holds_at(pos(snoopy, Position), Start2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8281).
axiom(holds_at(pos(snoopy, Position), Start2),
   
    [ some(Position, '$kolem_Fn_423'),
      b(start, Start2),
      toffset(start, 2, Start2)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8282
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8283).
% [human]
 % HoldsAt(PosDeterminingFluent(human,1),2).

 /*  [b(start, Start2), toffset(start, 2, Start2), ignore(start+2==Start2)] ->
       ta(Ta_Param,
          tvs1=[start+2],
          tvs2=[Start2, start],
          holds_at(posDeterminingFluent(Human, 1), Start2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8283).
axiom(holds_at(posDeterminingFluent(Human, 1), Start2),
    [b(start, Start2), toffset(start, 2, Start2)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8283
% [event,animal]
 % !HoldsAt(DoneBy(event,animal),2).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8283).

 /*  [b(start, Start2), toffset(start, 2, Start2), ignore(start+2==Start2)] ->
       ta(Ta_Param,
          tvs1=[start+2],
          tvs2=[Start2, start],
          holds_at(neg(doneBy(Event, Animal)), Start2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8283).
axiom(holds_at(neg(doneBy(Event, Animal)), Start2),
    [b(start, Start2), toffset(start, 2, Start2)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8285
% range time 0 2
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8285).
==> range(time,0,2).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8286
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8287).
% range position 1 8
==> range(position,1,8).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8287
% range offset 0 0
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8287).
==> range(offset,0,0).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/AkmanEtAl2004/ZooWorld.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{Akman:2004,
%;   author = "Varol Akman and Selim T. Erdogan and Joohyung Lee and Vladimir Lifschitz and Hudson Turner",
%;   year = "2004",
%;   title = "Representing the zoo world and the traffic world in the language of the causal calculator",
%;   journal = "Artificial Intelligence",
%;   volume = "153",
%;   pages = "105--140",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8316
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8317).
% sort position: integer
==> subsort(position,integer).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8317
% sort location
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8317).
==> sort(location).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8318
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8319).
% sort cage: location
==> subsort(cage,location).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8319
% sort gate
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8319).
==> sort(gate).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8320
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8321).
% sort animal
==> sort(animal).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8321
% sort elephant: animal
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8321).
==> subsort(elephant,animal).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8322
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8323).
% sort horse: animal
==> subsort(horse,animal).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8323
% sort dog: animal
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8323).
==> subsort(dog,animal).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8324
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8325).
% sort human: animal
==> subsort(human,animal).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8325
% sort species
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8325).
==> sort(species).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8327
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8328).
% function Loc(position): location
function(loc(position)).
==> mpred_prop(loc(position),function).
==> meta_argtypes(loc(position)).
predicate(locPred(position,location)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8328).
==> mpred_prop(locPred(position,location),predicate).
==> meta_argtypes(locPred(position,location)).

 /*  fix_axiom_head(Time) ->
       
       [ functional_predicate(loc, locPred),
          (->),
         holds_at(functional_predicate(loc, locPred), Time)
       ].
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8328).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(functional_predicate(loc, locPred), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8328).
axiom(holds_at(functional_predicate(loc, locPred), Time),
    []).
==> resultIsa(loc,location).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8328
% function Side1(gate): position
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8328).
function(side1(gate)).
==> mpred_prop(side1(gate),function).
==> meta_argtypes(side1(gate)).
predicate(side1Pred(gate,position)).
==> mpred_prop(side1Pred(gate,position),predicate).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8328).
==> meta_argtypes(side1Pred(gate,position)).

 /*  fix_axiom_head(Time) ->
       
       [ functional_predicate(side1, side1Pred),
          (->),
         holds_at(functional_predicate(side1, side1Pred), Time)
       ].
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8328).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(functional_predicate(side1, side1Pred), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8328).
axiom(holds_at(functional_predicate(side1, side1Pred), Time),
    []).
==> resultIsa(side1,position).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8329
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8330).
% function Side2(gate): position
function(side2(gate)).
==> mpred_prop(side2(gate),function).
==> meta_argtypes(side2(gate)).
predicate(side2Pred(gate,position)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8330).
==> mpred_prop(side2Pred(gate,position),predicate).
==> meta_argtypes(side2Pred(gate,position)).

 /*  fix_axiom_head(Time) ->
       
       [ functional_predicate(side2, side2Pred),
          (->),
         holds_at(functional_predicate(side2, side2Pred), Time)
       ].
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8330).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(functional_predicate(side2, side2Pred), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8330).
axiom(holds_at(functional_predicate(side2, side2Pred), Time),
    []).
==> resultIsa(side2,position).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8330
% function Species(animal): species
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8330).
function(species(animal)).
==> mpred_prop(species(animal),function).
==> meta_argtypes(species(animal)).
predicate(speciesPred(animal,species)).
==> mpred_prop(speciesPred(animal,species),predicate).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8330).
==> meta_argtypes(speciesPred(animal,species)).

 /*  fix_axiom_head(Time) ->
       
       [ functional_predicate(species, speciesPred),
          (->),
         holds_at(functional_predicate(species, speciesPred), Time)
       ].
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8330).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(functional_predicate(species, speciesPred), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8330).
axiom(holds_at(functional_predicate(species, speciesPred), Time),
    []).
==> resultIsa(species,species).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8332
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8333).
% predicate Accessible(position,position,time)
predicate(accessible(position,position,time)).
==> mpred_prop(accessible(position,position,time),predicate).
==> meta_argtypes(accessible(position,position,time)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8333
% predicate Adult(animal)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8333).
predicate(adult(animal)).
==> mpred_prop(adult(animal),predicate).
==> meta_argtypes(adult(animal)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8334
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8335).
% predicate Large(animal)
predicate(large(animal)).
==> mpred_prop(large(animal),predicate).
==> meta_argtypes(large(animal)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8335
% predicate LargeSpecies(species)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8335).
predicate(largeSpecies(species)).
==> mpred_prop(largeSpecies(species),predicate).
==> meta_argtypes(largeSpecies(species)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8336
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8337).
% predicate Neighbor(position,position)
predicate(neighbor(position,position)).
==> mpred_prop(neighbor(position,position),predicate).
==> meta_argtypes(neighbor(position,position)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8337
% predicate Sides(position,position,gate)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8337).
predicate(sides(position,position,gate)).
==> mpred_prop(sides(position,position,gate),predicate).
==> meta_argtypes(sides(position,position,gate)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8339
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8340).
% event Close(human,gate)
event(close(human,gate)).
==> mpred_prop(close(human,gate),event).
==> meta_argtypes(close(human,gate)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8340
% event GetOff(human,animal)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8340).
event(getOff(human,animal)).
==> mpred_prop(getOff(human,animal),event).
==> meta_argtypes(getOff(human,animal)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8341
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8342).
% event Mount(human,animal)
event(mount(human,animal)).
==> mpred_prop(mount(human,animal),event).
==> meta_argtypes(mount(human,animal)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8342
% event Move(animal,position)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8342).
event(move(animal,position)).
==> mpred_prop(move(animal,position),event).
==> meta_argtypes(move(animal,position)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8343
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8344).
% event Open(human,gate)
event(open(human,gate)).
==> mpred_prop(open(human,gate),event).
==> meta_argtypes(open(human,gate)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8344
% event ThrowOff(animal,human)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8344).
event(throwOff(animal,human)).
==> mpred_prop(throwOff(animal,human),event).
==> meta_argtypes(throwOff(animal,human)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8346
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8347).
% fluent AbnormalEncroachment(human)
fluent(abnormalEncroachment(human)).
==> mpred_prop(abnormalEncroachment(human),fluent).
==> meta_argtypes(abnormalEncroachment(human)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8347
% noninertial AbnormalEncroachment
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8347).
==> noninertial(abnormalEncroachment).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8348
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8349).
% fluent DoneBy(event,animal)
fluent(doneBy(event,animal)).
==> mpred_prop(doneBy(event,animal),fluent).
==> meta_argtypes(doneBy(event,animal)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8349
% noninertial DoneBy
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8349).
==> noninertial(doneBy).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8350
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8351).
% fluent Mounted(human,animal)
fluent(mounted(human,animal)).
==> mpred_prop(mounted(human,animal),fluent).
==> meta_argtypes(mounted(human,animal)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8351
% fluent MountFails(human)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8351).
fluent(mountFails(human)).
==> mpred_prop(mountFails(human),fluent).
==> meta_argtypes(mountFails(human)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8352
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8353).
% noninertial MountFails
==> noninertial(mountFails).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8353
% fluent Moves(animal)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8353).
fluent(moves(animal)).
==> mpred_prop(moves(animal),fluent).
==> meta_argtypes(moves(animal)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8354
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8355).
% noninertial Moves
==> noninertial(moves).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8355
% fluent Opened(gate)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8355).
fluent(opened(gate)).
==> mpred_prop(opened(gate),fluent).
==> meta_argtypes(opened(gate)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8356
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8357).
% fluent Pos(animal,position)
fluent(pos(animal,position)).
==> mpred_prop(pos(animal,position),fluent).
==> meta_argtypes(pos(animal,position)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8357
% fluent PosDeterminingFluent(human,position)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8357).
fluent(posDeterminingFluent(human,position)).
==> mpred_prop(posDeterminingFluent(human,position),fluent).
==> meta_argtypes(posDeterminingFluent(human,position)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8358
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8359).
% noninertial PosDeterminingFluent
==> noninertial(posDeterminingFluent).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8359
% fluent ThrowOffFails(animal,human)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8359).
fluent(throwOffFails(animal,human)).
==> mpred_prop(throwOffFails(animal,human),fluent).
==> meta_argtypes(throwOffFails(animal,human)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8360
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8361).
% noninertial ThrowOffFails
==> noninertial(throwOffFails).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8362
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8363).
% species HumanSpecies, ElephantSpecies, HorseSpecies, DogSpecies
==> t(species,humanSpecies).
==> t(species,elephantSpecies).
==> t(species,horseSpecies).
==> t(species,dogSpecies).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8363
% location Outside
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8363).
==> t(location,outside).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8365
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8366).
% LargeSpecies(HumanSpecies).

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], largeSpecies(humanSpecies)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8366).
axiom(largeSpecies(humanSpecies),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8366
% LargeSpecies(ElephantSpecies).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8366).

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], largeSpecies(elephantSpecies)).
 */
axiom(largeSpecies(elephantSpecies),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8367
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8368).
% LargeSpecies(HorseSpecies).

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], largeSpecies(horseSpecies)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8368).
axiom(largeSpecies(horseSpecies),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8368
% !LargeSpecies(DogSpecies).
 %  not(largeSpecies(dogSpecies)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8368).

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], not(largeSpecies(dogSpecies))).
 */
axiom(not(largeSpecies(dogSpecies)),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8370
% [event,animal,time]
% HoldsAt(DoneBy(event,animal),time) <->
% (Happens(event,time) &
%  (({gate} event=Close(animal,gate)) |
%   ({animal1} event=GetOff(animal,animal1))|
%   ({animal1} event=Mount(animal,animal1))|
%   ({position} event=Move(animal,position))|
%   ({gate} event=Open(animal,gate)) |
%   ({human1} event=ThrowOff(animal,human1)))).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8378
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8372).

 /*  holds_at(doneBy(Event, Animal), Time) <->
       happens(Event, Time),
       (   exists([Gate],
                  equals(Event, close(Animal, Gate)))
       ;   exists([Animal1],
                  equals(Event, getOff(Animal, Animal1)))
       ;   exists([Animal15],
                  equals(Event, mount(Animal, Animal15)))
       ;   exists([Position],
                  equals(Event, move(Animal, Position)))
       ;   exists([Gate7],
                  equals(Event, open(Animal, Gate7)))
       ;   exists([Human1],
                  equals(Event, throwOff(Animal, Human1)))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8372).

 /*  [holds_at, doneBy] <->
       
       [ happens,
          (;),
         exists,
         equals,
         close,
          (;),
         exists,
         equals,
         getOff,
          (;),
         exists,
         equals,
         mount,
          (;),
         exists,
         equals,
         move,
          (;),
         exists,
         equals,
         open,
         exists,
         equals,
         throwOff
       ].
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8372).

 /*  holds_at(doneBy(Event, Animal), Time) ->
       happens(Event, Time),
       (   exists([Gate],
                  equals(Event, close(Animal, Gate)))
       ;   exists([Animal1],
                  equals(Event, getOff(Animal, Animal1)))
       ;   exists([Animal15],
                  equals(Event, mount(Animal, Animal15)))
       ;   exists([Position],
                  equals(Event, move(Animal, Position)))
       ;   exists([Gate7],
                  equals(Event, open(Animal, Gate7)))
       ;   exists([Human1],
                  equals(Event, throwOff(Animal, Human1)))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8372).

 /*  not(holds_at(doneBy(Event, Animal), Time)) :-
       (   not(happens(Event, Time))
       ;   not(equals(Event, close(Animal, Gate))),
           not(equals(Event, getOff(Animal, Animal1))),
           not(equals(Event, mount(Animal, Animal15))),
           not(equals(Event, move(Animal, Position))),
           not(equals(Event, open(Animal, Gate7))),
           not(equals(Event, throwOff(Animal, Human1)))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8372).

 /*  [(not(happens(Event, Time));not(equals(Event, close(Animal, Gate))), not(equals(Event, getOff(Animal, Animal1))), not(equals(Event, mount(Animal, Animal15))), not(equals(Event, move(Animal, Position))), not(equals(Event, open(Animal, Gate7))), not(equals(Event, throwOff(Animal, Human1))))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(doneBy(Event, Animal)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8372).
axiom(holds_at(neg(doneBy(Event, Animal)), Time),
   
    [  (not(happens(Event, Time));not(equals(Event, close(Animal, Gate))), not(equals(Event, getOff(Animal, Animal1))), not(equals(Event, mount(Animal, Animal15))), not(equals(Event, move(Animal, Position))), not(equals(Event, open(Animal, Gate7))), not(equals(Event, throwOff(Animal, Human1))))
    ]).

 /*  happens(Event, Time) :-
       holds_at(doneBy(Event, Animal), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8372).

 /*  [holds_at(doneBy(Event, Animal), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(Event, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8372).
axiom(happens(Event, Time),
    [holds_at(doneBy(Event, Animal), Time)]).

 /*  happens(Event, Time), (exists([Gate], equals(Event, close(Animal, Gate)));exists([Animal1], equals(Event, getOff(Animal, Animal1)));exists([Animal15], equals(Event, mount(Animal, Animal15)));exists([Position], equals(Event, move(Animal, Position)));exists([Gate7], equals(Event, open(Animal, Gate7)));exists([Human1], equals(Event, throwOff(Animal, Human1)))) ->
       holds_at(doneBy(Event, Animal), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8372).

 /*  holds_at(doneBy(Event, Animal), Time) :-
       happens(Event, Time),
       (   equals(Event, close(Animal, Gate))
       ;   equals(Event, getOff(Animal, Animal1))
       ;   equals(Event, mount(Animal, Animal15))
       ;   equals(Event, move(Animal, Position))
       ;   equals(Event, open(Animal, Gate7))
       ;   equals(Event, throwOff(Animal, Human1))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8372).

 /*  [happens(Event, Time),  (equals(Event, close(Animal, Gate));equals(Event, getOff(Animal, Animal1));equals(Event, mount(Animal, Animal15));equals(Event, move(Animal, Position));equals(Event, open(Animal, Gate7));equals(Event, throwOff(Animal, Human1)))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(doneBy(Event, Animal), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8372).
axiom(holds_at(doneBy(Event, Animal), Time),
   
    [ happens(Event, Time),
       (equals(Event, close(Animal, Gate));equals(Event, getOff(Animal, Animal1));equals(Event, mount(Animal, Animal15));equals(Event, move(Animal, Position));equals(Event, open(Animal, Gate7));equals(Event, throwOff(Animal, Human1)))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8372).

 /*  not(happens(Event, Time)) :-
       (   equals(Event, close(Animal, Gate))
       ;   equals(Event, getOff(Animal, Animal1))
       ;   equals(Event, mount(Animal, Animal15))
       ;   equals(Event, move(Animal, Position))
       ;   equals(Event, open(Animal, Gate7))
       ;   equals(Event, throwOff(Animal, Human1))
       ),
       not(holds_at(doneBy(Event, Animal), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8372).

 /*  [(equals(Event, close(Animal, Gate));equals(Event, getOff(Animal, Animal1));equals(Event, mount(Animal, Animal15));equals(Event, move(Animal, Position));equals(Event, open(Animal, Gate7));equals(Event, throwOff(Animal, Human1))), holds_at(neg(doneBy(Event, Animal)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(Event, Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8372).
axiom(not(happens(Event, Time)),
   
    [  (equals(Event, close(Animal, Gate));equals(Event, getOff(Animal, Animal1));equals(Event, mount(Animal, Animal15));equals(Event, move(Animal, Position));equals(Event, open(Animal, Gate7));equals(Event, throwOff(Animal, Human1))),
      holds_at(neg(doneBy(Event, Animal)), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8380
% [event1,event2,animal,time]
% HoldsAt(DoneBy(event1,animal),time) &
% HoldsAt(DoneBy(event2,animal),time) ->
% event1=event2.
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8383
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8382).

 /*  holds_at(doneBy(Event1, Animal), Time), holds_at(doneBy(Event2, Animal), Time) ->
       equals(Event1, Event2).
 */

 /*  not(holds_at(doneBy(Event1, Animal), Time)) :-
       holds_at(doneBy(Event2, Animal), Time),
       not(equals(Event1, Event2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8382).

 /*  [holds_at(doneBy(Event2, Animal), Time), not(equals(Event1, Event2))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(doneBy(Event1, Animal)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8382).
axiom(holds_at(neg(doneBy(Event1, Animal)), Time),
   
    [ holds_at(doneBy(Event2, Animal), Time),
      not(equals(Event1, Event2))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8382).

 /*  not(holds_at(doneBy(Event2, Animal), Time)) :-
       holds_at(doneBy(Event1, Animal), Time),
       not(equals(Event1, Event2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8382).

 /*  [holds_at(doneBy(Event1, Animal), Time), not(equals(Event1, Event2))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(doneBy(Event2, Animal)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8382).
axiom(holds_at(neg(doneBy(Event2, Animal)), Time),
   
    [ holds_at(doneBy(Event1, Animal), Time),
      not(equals(Event2, Event1))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8385
% [animal]
 % Large(animal) <-> (Adult(animal) & LargeSpecies(Species(animal))).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8385).

 /*  large(Animal) <->
       adult(Animal),
       largeSpecies(species(Animal)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8385).

 /*  [large] <->
       [adult, largeSpecies, species].
 */

 /*  large(Animal) ->
       adult(Animal),
       largeSpecies(species(Animal)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8385).

 /*  not(large(Animal)) :-
       (   not(adult(Animal))
       ;   not(largeSpecies(species(Animal)))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8385).

 /*  [(not(adult(Animal));not(largeSpecies(species(Animal))))] ->
       ta(Ta_Param, tvs1=[], tvs2=[], not(large(Animal))).
 */
axiom(not(large(Animal)),
    [(not(adult(Animal));not(largeSpecies(species(Animal))))]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8385).

 /*  adult(Animal) :-
       large(Animal).
 */

 /*  [large(Animal)] ->
       ta(Ta_Param2, tvs1=[], tvs2=[], adult(Animal)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8385).
axiom(adult(Animal),
    [large(Animal)]).

 /*  largeSpecies(species(Animal)) :-
       large(Animal).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8385).

 /*  [large(Animal)] ->
       ta(Ta_Param3, tvs1=[], tvs2=[], largeSpecies(species(Animal))).
 */
axiom(largeSpecies(species(Animal)),
    [large(Animal)]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8385).

 /*  adult(Animal), largeSpecies(species(Animal)) ->
       large(Animal).
 */

 /*  large(Animal) :-
       adult(Animal),
       largeSpecies(species(Animal)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8385).

 /*  [adult(Animal), largeSpecies(species(Animal))] ->
       ta(Ta_Param4, tvs1=[], tvs2=[], large(Animal)).
 */
axiom(large(Animal),
    [adult(Animal), largeSpecies(species(Animal))]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8385).

 /*  not(adult(Animal)) :-
       largeSpecies(species(Animal)),
       not(large(Animal)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8385).

 /*  [largeSpecies(species(Animal)), not(large(Animal))] ->
       ta(Ta_Param5, tvs1=[], tvs2=[], not(adult(Animal))).
 */
axiom(not(adult(Animal)),
    [largeSpecies(species(Animal)), not(large(Animal))]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8385).

 /*  not(largeSpecies(species(Animal))) :-
       adult(Animal),
       not(large(Animal)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8385).

 /*  [adult(Animal), not(large(Animal))] ->
       ta(Ta_Param6,
          tvs1=[],
          tvs2=[],
          not(largeSpecies(species(Animal)))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8385).
axiom(not(largeSpecies(species(Animal))),
    [adult(Animal), not(large(Animal))]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8387
% [position]
 
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8387
% {position1} % position1!=% position & Neighbor(position,position1).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8387).

 /*  exists([Position1],
     diff(Position1, Position),
      neighbor(Position, Position1)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8387).

 /*  neighbor(Position, Position1) :-
       some(Position1, '$kolem_Fn_436'(Position)).
 */

 /*  [some(Position1, '$kolem_Fn_436'(Position))] ->
       ta(Ta_Param,
          tvs1=[],
          tvs2=[],
          neighbor(Position, Position1)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8387).
axiom(neighbor(Position, Position1),
    [some(Position1, '$kolem_Fn_436'(Position))]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8389
% [position]
 % !Neighbor(position,position).
 %  not(neighbor(Position,Position)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8389).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[],
          tvs2=[],
          not(neighbor(Position, Position))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8389).
axiom(not(neighbor(Position, Position)),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8391
% [position1,position2]
% Neighbor(position1,position2) ->
% Neighbor(position2,position1).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8393

 /*  neighbor(Position1, Position2) ->
       neighbor(Position2, Position1).
 */


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8395
% [cage]
 % cage!=% Outside.
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8395).

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], diff(Cage, outside)).
 */
axiom(diff(Cage, outside),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8397
% [position1,position2,gate]
% Sides(position1,position2,gate) <->
% ((Side1(gate)=position1 &
%   Side2(gate)=position2) |
%  (Side2(gate)=position1 &
%   Side1(gate)=position2)).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8402
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8399).

 /*  sides(Position1, Position2, Gate) <->
       (   equals(side1(Gate), Position1),
           equals(side2(Gate), Position2)
       ;   equals(side2(Gate), Position1),
           equals(side1(Gate), Position2)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8399).

 /*  [sides] <->
       [;, equals, side1, equals, side2, equals, side2, equals, side1].
 */

 /*  sides(Position1, Position2, Gate) ->
       (   equals(side1(Gate), Position1),
           equals(side2(Gate), Position2)
       ;   equals(side2(Gate), Position1),
           equals(side1(Gate), Position2)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8399).

 /*  not(sides(Position1, Position2, Gate)) :-
       (   not(equals(side1(Gate), Position1))
       ;   not(equals(side2(Gate), Position2))
       ),
       (   not(equals(side2(Gate), Position1))
       ;   not(equals(side1(Gate), Position2))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8399).

 /*  [(not(equals(side1(Gate), Position1));not(equals(side2(Gate), Position2))),  (not(equals(side2(Gate), Position1));not(equals(side1(Gate), Position2)))] ->
       ta(Ta_Param,
          tvs1=[],
          tvs2=[],
          not(sides(Position1, Position2, Gate))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8399).
axiom(not(sides(Position1, Position2, Gate)),
   
    [  (not(equals(side1(Gate), Position1));not(equals(side2(Gate), Position2))),
       (not(equals(side2(Gate), Position1));not(equals(side1(Gate), Position2)))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8399).

 /*  equals(side1(Gate), Position1), equals(side2(Gate), Position2);equals(side2(Gate), Position1), equals(side1(Gate), Position2) ->
       sides(Position1, Position2, Gate).
 */

 /*  sides(Position1, Position2, Gate) :-
       (   equals(side1(Gate), Position1),
           equals(side2(Gate), Position2)
       ;   equals(side2(Gate), Position1),
           equals(side1(Gate), Position2)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8399).

 /*  [(equals(side1(Gate), Position1), equals(side2(Gate), Position2);equals(side2(Gate), Position1), equals(side1(Gate), Position2))] ->
       ta(Ta_Param4,
          tvs1=[],
          tvs2=[],
          sides(Position1, Position2, Gate)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8399).
axiom(sides(Position1, Position2, Gate),
   
    [  (equals(side1(Gate), Position1), equals(side2(Gate), Position2);equals(side2(Gate), Position1), equals(side1(Gate), Position2))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8404
% [gate]
 % Loc(Side1(gate))!=Loc(Side2(gate)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8404).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[],
          tvs2=[],
          diff(loc(side1(Gate)), loc(side2(Gate)))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8404).
axiom(diff(loc(side1(Gate)), loc(side2(Gate))),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8406
% [position1,position2,gate1,gate2]
% Sides(position1,position2,gate1) &
% Sides(position1,position2,gate2) ->
% gate1=gate2.
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8409
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8408).

 /*  sides(Position1, Position2, Gate1), sides(Position1, Position2, Gate2) ->
       equals(Gate1, Gate2).
 */

 /*  not(sides(Position1, Position2, Gate1)) :-
       sides(Position1, Position2, Gate2),
       not(equals(Gate1, Gate2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8408).

 /*  [sides(Position1, Position2, Gate2), not(equals(Gate1, Gate2))] ->
       ta(Ta_Param,
          tvs1=[],
          tvs2=[],
          not(sides(Position1, Position2, Gate1))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8408).
axiom(not(sides(Position1, Position2, Gate1)),
   
    [ sides(Position1, Position2, Gate2),
      not(equals(Gate1, Gate2))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8408).

 /*  not(sides(Position1, Position2, Gate2)) :-
       sides(Position1, Position2, Gate1),
       not(equals(Gate1, Gate2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8408).

 /*  [sides(Position1, Position2, Gate1), not(equals(Gate1, Gate2))] ->
       ta(Ta_Param5,
          tvs1=[],
          tvs2=[],
          not(sides(Position1, Position2, Gate2))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8408).
axiom(not(sides(Position1, Position2, Gate2)),
   
    [ sides(Position1, Position2, Gate1),
      not(equals(Gate2, Gate1))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8411
% [position1,position2,gate]
% Sides(position1,position2,gate) ->
% Neighbor(position1,position2).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8413

 /*  sides(Position1, Position2, Gate) ->
       neighbor(Position1, Position2).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8413).

 /*  neighbor(Position1, Position2) :-
       sides(Position1, Position2, Gate).
 */

 /*  [sides(Position1, Position2, Gate)] ->
       ta(Ta_Param,
          tvs1=[],
          tvs2=[],
          neighbor(Position1, Position2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8413).
axiom(neighbor(Position1, Position2),
    [sides(Position1, Position2, Gate)]).

 /*  not(sides(Position1, Position2, Gate)) :-
       not(neighbor(Position1, Position2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8413).

 /*  [not(neighbor(Position1, Position2))] ->
       ta(Ta_Param4,
          tvs1=[],
          tvs2=[],
          not(sides(Position1, Position2, Gate))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8413).
axiom(not(sides(Position1, Position2, Gate)),
    [not(neighbor(Position1, Position2))]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8415
% [position1,position2]
% Loc(position1) != Loc(position2) &
% Neighbor(position1,position2) ->
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8418
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8417).
% {gate}%  Sides(position1,position2,gate).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8419).

 /*  exists([Gate],
    diff(loc(Position1), loc(Position2)), neighbor(Position1, Position2) ->
       sides(Position1, Position2, Gate)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8419).

 /*  sides(Position1, Position2, Gate) :-
       ( diff(loc(Position1), loc(Position2)),
         neighbor(Position1, Position2)
       ),
       some(Gate, '$kolem_Fn_437'(Position1, Position2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8419).

 /*  [diff(loc(Position1), loc(Position2)), neighbor(Position1, Position2), some(Gate, '$kolem_Fn_437'(Position1, Position2))] ->
       ta(Ta_Param,
          tvs1=[],
          tvs2=[],
          sides(Position1, Position2, Gate)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8419).
axiom(sides(Position1, Position2, Gate),
   
    [ diff(loc(Position1), loc(Position2)),
      neighbor(Position1, Position2),
      some(Gate, '$kolem_Fn_437'(Position1, Position2))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8419).

 /*  not(neighbor(Position1, Position2)) :-
       diff(loc(Position1), loc(Position2)),
       not(sides(Position1, Position2, Gate)),
       some(Gate, '$kolem_Fn_437'(Position1, Position2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8419).

 /*  [diff(loc(Position1), loc(Position2)), not(sides(Position1, Position2, Gate)), some(Gate, '$kolem_Fn_437'(Position1, Position2))] ->
       ta(Ta_Param5,
          tvs1=[],
          tvs2=[],
          not(neighbor(Position1, Position2))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8419).
axiom(not(neighbor(Position1, Position2)),
   
    [ diff(loc(Position1), loc(Position2)),
      not(sides(Position1, Position2, Gate)),
      some(Gate, '$kolem_Fn_437'(Position1, Position2))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8420
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8421).
% [animal,position1,position2,time]
% HoldsAt(Pos(animal,position1),time) &
% HoldsAt(Pos(animal,position2),time) ->
% position1=position2.
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8423
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8421).

 /*  holds_at(pos(Animal, Position1), Time), holds_at(pos(Animal, Position2), Time) ->
       equals(Position1, Position2).
 */

 /*  not(holds_at(pos(Animal, Position1), Time)) :-
       holds_at(pos(Animal, Position2), Time),
       not(equals(Position1, Position2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8421).

 /*  [holds_at(pos(Animal, Position2), Time), not(equals(Position1, Position2))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(pos(Animal, Position1)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8421).
axiom(holds_at(neg(pos(Animal, Position1)), Time),
   
    [ holds_at(pos(Animal, Position2), Time),
      not(equals(Position1, Position2))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8421).

 /*  not(holds_at(pos(Animal, Position2), Time)) :-
       holds_at(pos(Animal, Position1), Time),
       not(equals(Position1, Position2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8421).

 /*  [holds_at(pos(Animal, Position1), Time), not(equals(Position1, Position2))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(pos(Animal, Position2)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8421).
axiom(holds_at(neg(pos(Animal, Position2)), Time),
   
    [ holds_at(pos(Animal, Position1), Time),
      not(equals(Position2, Position1))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8425
% [animal,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8426
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8427).
% {position} % HoldsAt(Pos(animal,position),time).

 /*  exists([Position],
    holds_at(pos(Animal,Position),Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8427).

 /*  holds_at(pos(Animal, Position), Time) :-
       some(Position, '$kolem_Fn_438'(Animal, Time)).
 */

 /*  [some(Position, '$kolem_Fn_438'(Animal, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(pos(Animal, Position), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8427).
axiom(holds_at(pos(Animal, Position), Time),
    [some(Position, '$kolem_Fn_438'(Animal, Time))]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8428
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8429).
% [animal1,animal2,position,time]
% (animal1!=animal2 &
%  Large(animal1) &
%  Large(animal2) &
%  HoldsAt(Pos(animal1,position),time) &
%  HoldsAt(Pos(animal2,position),time)) ->
% (({human} human=animal1 & HoldsAt(Mounted(human,animal2),time)) |
%  ({human} human=animal2 & HoldsAt(Mounted(human,animal1),time))).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8435
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8429).

 /*  diff(Animal1, Animal2), large(Animal1), large(Animal2), holds_at(pos(Animal1, Position), Time), holds_at(pos(Animal2, Position), Time) ->
       (   exists([Human],
                   (equals(Human, Animal1), holds_at(mounted(Human, Animal2), Time)))
       ;   exists([Human5],
                   (equals(Human5, Animal2), holds_at(mounted(Human5, Animal1), Time)))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8429).

 /*  not(large(Animal1)) :-
       ( large(Animal2),
         holds_at(pos(Animal1, Position), Time),
         holds_at(pos(Animal2, Position), Time)
       ),
       diff(Animal1, Animal2),
       (   not(equals(Human, Animal1))
       ;   not(holds_at(mounted(Human, Animal2), Time))
       ),
       (   not(equals(Human5, Animal2))
       ;   not(holds_at(mounted(Human5, Animal1), Time))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8429).

 /*  fix_axiom_head(Time) ->
       
       [  (not(equals(Human, Animal1));not(holds_at(mounted(Human, Animal2), Time))),
          (->),
          (not(equals(Human, Animal1));holds_at(neg(mounted(Human, Animal2)), Time))
       ].
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8429).

 /*  fix_axiom_head(Time) ->
       
       [  (not(equals(Human5, Animal2));not(holds_at(mounted(Human5, Animal1), Time))),
          (->),
          (not(equals(Human5, Animal2));holds_at(neg(mounted(Human5, Animal1)), Time))
       ].
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8429).

 /*  [large(Animal2), holds_at(pos(Animal1, Position), Time), holds_at(pos(Animal2, Position), Time), diff(Animal1, Animal2),  (not(equals(Human, Animal1));holds_at(neg(mounted(Human, Animal2)), Time)),  (not(equals(Human5, Animal2));holds_at(neg(mounted(Human5, Animal1)), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(large(Animal1))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8429).
axiom(not(large(Animal1)),
   
    [ large(Animal2),
      holds_at(pos(Animal1, Position), Time),
      holds_at(pos(Animal2, Position), Time),
      diff(Animal1, Animal2),
       (not(equals(Animal1, Human));holds_at(neg(mounted(Human, Animal2)), Time)),
       (not(equals(Human5, Animal2));holds_at(neg(mounted(Human5, Animal1)), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8429).

 /*  not(large(Animal2)) :-
       ( holds_at(pos(Animal1, Position), Time),
         holds_at(pos(Animal2, Position), Time)
       ),
       large(Animal1),
       diff(Animal1, Animal2),
       (   not(equals(Human, Animal1))
       ;   not(holds_at(mounted(Human, Animal2), Time))
       ),
       (   not(equals(Human5, Animal2))
       ;   not(holds_at(mounted(Human5, Animal1), Time))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8429).

 /*  fix_axiom_head(Time) ->
       
       [  (not(equals(Human, Animal1));not(holds_at(mounted(Human, Animal2), Time))),
          (->),
          (not(equals(Human, Animal1));holds_at(neg(mounted(Human, Animal2)), Time))
       ].
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8429).

 /*  fix_axiom_head(Time) ->
       
       [  (not(equals(Human5, Animal2));not(holds_at(mounted(Human5, Animal1), Time))),
          (->),
          (not(equals(Human5, Animal2));holds_at(neg(mounted(Human5, Animal1)), Time))
       ].
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8429).

 /*  [holds_at(pos(Animal1, Position), Time), holds_at(pos(Animal2, Position), Time), large(Animal1), diff(Animal1, Animal2),  (not(equals(Human, Animal1));holds_at(neg(mounted(Human, Animal2)), Time)),  (not(equals(Human5, Animal2));holds_at(neg(mounted(Human5, Animal1)), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(large(Animal2))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8429).
axiom(not(large(Animal2)),
   
    [ holds_at(pos(Animal1, Position), Time),
      holds_at(pos(Animal2, Position), Time),
      large(Animal1),
      diff(Animal2, Animal1),
       (not(equals(Human, Animal1));holds_at(neg(mounted(Human, Animal2)), Time)),
       (not(equals(Animal2, Human5));holds_at(neg(mounted(Human5, Animal1)), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8429).

 /*  not(holds_at(pos(Animal1, Position), Time)) :-
       holds_at(pos(Animal2, Position), Time),
       large(Animal2),
       large(Animal1),
       diff(Animal1, Animal2),
       (   not(equals(Human, Animal1))
       ;   not(holds_at(mounted(Human, Animal2), Time))
       ),
       (   not(equals(Human5, Animal2))
       ;   not(holds_at(mounted(Human5, Animal1), Time))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8429).

 /*  [holds_at(pos(Animal2, Position), Time), large(Animal2), large(Animal1), diff(Animal1, Animal2),  (not(equals(Human, Animal1));holds_at(neg(mounted(Human, Animal2)), Time)),  (not(equals(Human5, Animal2));holds_at(neg(mounted(Human5, Animal1)), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(pos(Animal1, Position)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8429).
axiom(holds_at(neg(pos(Animal1, Position)), Time),
   
    [ holds_at(pos(Animal2, Position), Time),
      large(Animal2),
      large(Animal1),
      diff(Animal1, Animal2),
       (not(equals(Animal1, Human));holds_at(neg(mounted(Human, Animal2)), Time)),
       (not(equals(Human5, Animal2));holds_at(neg(mounted(Human5, Animal1)), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8429).

 /*  not(holds_at(pos(Animal2, Position), Time)) :-
       holds_at(pos(Animal1, Position), Time),
       large(Animal2),
       large(Animal1),
       diff(Animal1, Animal2),
       (   not(equals(Human, Animal1))
       ;   not(holds_at(mounted(Human, Animal2), Time))
       ),
       (   not(equals(Human5, Animal2))
       ;   not(holds_at(mounted(Human5, Animal1), Time))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8429).

 /*  [holds_at(pos(Animal1, Position), Time), large(Animal2), large(Animal1), diff(Animal1, Animal2),  (not(equals(Human, Animal1));holds_at(neg(mounted(Human, Animal2)), Time)),  (not(equals(Human5, Animal2));holds_at(neg(mounted(Human5, Animal1)), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(pos(Animal2, Position)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8429).
axiom(holds_at(neg(pos(Animal2, Position)), Time),
   
    [ holds_at(pos(Animal1, Position), Time),
      large(Animal2),
      large(Animal1),
      diff(Animal2, Animal1),
       (not(equals(Human, Animal1));holds_at(neg(mounted(Human, Animal2)), Time)),
       (not(equals(Animal2, Human5));holds_at(neg(mounted(Human5, Animal1)), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8429).

 /*  holds_at(mounted(Human, Animal2), Time) :-
       (   not(equals(Human5, Animal2))
       ;   not(holds_at(mounted(Human5, Animal1), Time))
       ),
       diff(Animal1, Animal2),
       large(Animal1),
       large(Animal2),
       holds_at(pos(Animal1, Position), Time),
       holds_at(pos(Animal2, Position), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8429).

 /*  [(not(equals(Human5, Animal2));holds_at(neg(mounted(Human5, Animal1)), Time)), diff(Animal1, Animal2), large(Animal1), large(Animal2), holds_at(pos(Animal1, Position), Time), holds_at(pos(Animal2, Position), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(mounted(Human, Animal2), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8429).
axiom(holds_at(mounted(Human, Animal2), Time),
   
    [  (not(equals(Animal2, Human5));holds_at(neg(mounted(Human5, Animal1)), Time)),
      diff(Animal2, Animal1),
      large(Animal1),
      large(Animal2),
      holds_at(pos(Animal1, Position), Time),
      holds_at(pos(Animal2, Position), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8429).

 /*  holds_at(mounted(Human5, Animal1), Time) :-
       (   not(equals(Human, Animal1))
       ;   not(holds_at(mounted(Human, Animal2), Time))
       ),
       diff(Animal1, Animal2),
       large(Animal1),
       large(Animal2),
       holds_at(pos(Animal1, Position), Time),
       holds_at(pos(Animal2, Position), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8429).

 /*  [(not(equals(Human, Animal1));holds_at(neg(mounted(Human, Animal2)), Time)), diff(Animal1, Animal2), large(Animal1), large(Animal2), holds_at(pos(Animal1, Position), Time), holds_at(pos(Animal2, Position), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(mounted(Human5, Animal1), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8429).
axiom(holds_at(mounted(Human5, Animal1), Time),
   
    [  (not(equals(Animal1, Human));holds_at(neg(mounted(Human, Animal2)), Time)),
      diff(Animal1, Animal2),
      large(Animal1),
      large(Animal2),
      holds_at(pos(Animal1, Position), Time),
      holds_at(pos(Animal2, Position), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8437
% [human,position1,position2,time]
% HoldsAt(PosDeterminingFluent(human,position1),time) &
% HoldsAt(PosDeterminingFluent(human,position2),time) ->
% position1=position2.
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8440
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8439).

 /*  holds_at(posDeterminingFluent(Human, Position1), Time), holds_at(posDeterminingFluent(Human, Position2), Time) ->
       equals(Position1, Position2).
 */

 /*  not(holds_at(posDeterminingFluent(Human, Position1), Time)) :-
       holds_at(posDeterminingFluent(Human, Position2), Time),
       not(equals(Position1, Position2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8439).

 /*  [holds_at(posDeterminingFluent(Human, Position2), Time), not(equals(Position1, Position2))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(posDeterminingFluent(Human, Position1)),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8439).
axiom(holds_at(neg(posDeterminingFluent(Human, Position1)), Time),
   
    [ holds_at(posDeterminingFluent(Human, Position2), Time),
      not(equals(Position1, Position2))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8439).

 /*  not(holds_at(posDeterminingFluent(Human, Position2), Time)) :-
       holds_at(posDeterminingFluent(Human, Position1), Time),
       not(equals(Position1, Position2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8439).

 /*  [holds_at(posDeterminingFluent(Human, Position1), Time), not(equals(Position1, Position2))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(posDeterminingFluent(Human, Position2)),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8439).
axiom(holds_at(neg(posDeterminingFluent(Human, Position2)), Time),
   
    [ holds_at(posDeterminingFluent(Human, Position1), Time),
      not(equals(Position2, Position1))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8442
% [animal,position,time]
% Initiates(Move(animal,position),Pos(animal,position),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8444).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(move(Animal, Position),
                    pos(Animal, Position),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8444).
axiom(initiates(move(Animal, Position), pos(Animal, Position), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8445
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8446).
% [animal,position1,position2,time]
% HoldsAt(Pos(animal,position1),time) ->
% Terminates(Move(animal,position2),Pos(animal,position1),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8447

 /*  [holds_at(pos(Animal, Position1), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(move(Animal, Position2),
                     pos(Animal, Position1),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8446).
axiom(terminates(move(Animal, Position2), pos(Animal, Position1), Time),
    [holds_at(pos(Animal, Position1), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8449
% [animal,position,time]
% Happens(Move(animal,position),time) ->
% !HoldsAt(Pos(animal,position),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8451

 /*  happens(move(Animal, Position), Time) ->
       holds_at(neg(pos(Animal, Position)), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8451).

 /*  holds_at(neg(pos(Animal, Position)), Time) :-
       happens(move(Animal, Position), Time).
 */

 /*  [holds_at(metreqs(move(Animal, Position)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(move(Animal, Position), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8451).
axiom(requires(move(Animal, Position), Time),
    [holds_at(metreqs(move(Animal, Position)), Time)]).

 /*  [holds_at(neg(pos(Animal, Position)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(move(Animal, Position)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8451).
axiom(holds_at(metreqs(move(Animal, Position)), Time),
    [holds_at(neg(pos(Animal, Position)), Time)]).

 /*  not(happens(move(Animal, Position), Time)) :-
       not(holds_at(neg(pos(Animal, Position)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8451).

 /*  [holds_at(pos(Animal, Position), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(move(Animal, Position), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8451).
axiom(not(happens(move(Animal, Position), Time)),
    [holds_at(pos(Animal, Position), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8453
% [human,position,time]
% Happens(Move(human,position),time) ->
% !{animal} HoldsAt(Mounted(human,animal),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8455

 /*  happens(move(Human, Position), Time) ->
       not(exists([Animal],
                  holds_at(mounted(Human, Animal), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8455).

 /*  not(holds_at(mounted(Human, Animal), Time)) :-
       happens(move(Human, Position), Time).
 */

 /*  [holds_at(metreqs(move(Human, Position)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(move(Human, Position), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8455).
axiom(requires(move(Human, Position), Time),
    [holds_at(metreqs(move(Human, Position)), Time)]).

 /*  [holds_at(neg(mounted(Human, Animal)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(move(Human, Position)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8455).
axiom(holds_at(metreqs(move(Human, Position)), Time),
    [holds_at(neg(mounted(Human, Animal)), Time)]).

 /*  not(happens(move(Human, Position), Time)) :-
       holds_at(mounted(Human, Animal), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8455).

 /*  [holds_at(mounted(Human, Animal), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(move(Human, Position), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8455).
axiom(not(happens(move(Human, Position), Time)),
    [holds_at(mounted(Human, Animal), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8457
% [human,gate,time]
% Initiates(Open(human,gate),Opened(gate),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8459).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(open(Human, Gate), opened(Gate), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8459).
axiom(initiates(open(Human, Gate), opened(Gate), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8460
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8461).
% [human,gate,time]
% Happens(Open(human,gate),time) ->
% !HoldsAt(Opened(gate),time) &
% (!{animal} HoldsAt(Mounted(human,animal),time)) &
% ({position}
%  (Side1(gate)=position | Side2(gate)=position) &
%  HoldsAt(Pos(human,position),time)).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8466
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8461).

 /*  happens(open(Human, Gate), Time) ->
       holds_at(neg(opened(Gate)), Time),
       not(exists([Animal],
                  holds_at(mounted(Human, Animal), Time))),
       exists([Position],
               ((equals(side1(Gate), Position);equals(side2(Gate), Position)), holds_at(pos(Human, Position), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8461).

 /*  not(happens(open(Human, Gate), Time)) :-
       (   not(holds_at(neg(opened(Gate)), Time))
       ;   holds_at(mounted(Human, Animal), Time)
       ;   not(equals(side1(Gate), Position)),
           not(equals(side2(Gate), Position))
       ;   not(holds_at(pos(Human, Position), Time))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8461).

 /*  [(holds_at(opened(Gate), Time);holds_at(mounted(Human, Animal), Time);not(equals(side1(Gate), Position)), not(equals(side2(Gate), Position));holds_at(neg(pos(Human, Position)), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(open(Human, Gate), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8461).
axiom(not(happens(open(Human, Gate), Time)),
   
    [  (holds_at(opened(Gate), Time);holds_at(mounted(Human, Animal), Time);not(equals(side1(Gate), Position)), not(equals(side2(Gate), Position));holds_at(neg(pos(Human, Position)), Time))
    ]).

 /*  holds_at(neg(opened(Gate)), Time) :-
       happens(open(Human, Gate), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8461).

 /*  [holds_at(metreqs(open(Human, Gate)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(open(Human, Gate), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8461).
axiom(requires(open(Human, Gate), Time),
    [holds_at(metreqs(open(Human, Gate)), Time)]).

 /*  [holds_at(neg(opened(Gate)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(open(Human, Gate)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8461).
axiom(holds_at(metreqs(open(Human, Gate)), Time),
    [holds_at(neg(opened(Gate)), Time)]).

 /*  not(holds_at(mounted(Human, Animal), Time)) :-
       happens(open(Human, Gate), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8461).

 /*  [holds_at(metreqs(open(Human, Gate)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(open(Human, Gate), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8461).
axiom(requires(open(Human, Gate), Time),
    [holds_at(metreqs(open(Human, Gate)), Time)]).

 /*  [holds_at(neg(mounted(Human, Animal)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(open(Human, Gate)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8461).
axiom(holds_at(metreqs(open(Human, Gate)), Time),
    [holds_at(neg(mounted(Human, Animal)), Time)]).

 /*  holds_at(pos(Human, Position), Time) :-
       happens(open(Human, Gate), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8461).

 /*  [holds_at(metreqs(open(Human, Gate)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(open(Human, Gate), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8461).
axiom(requires(open(Human, Gate), Time),
    [holds_at(metreqs(open(Human, Gate)), Time)]).

 /*  [holds_at(pos(Human, Position), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(open(Human, Gate)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8461).
axiom(holds_at(metreqs(open(Human, Gate)), Time),
    [holds_at(pos(Human, Position), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8468
% [human,gate,time]
% Terminates(Close(human,gate),Opened(gate),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8470).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(close(Human, Gate), opened(Gate), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8470).
axiom(terminates(close(Human, Gate), opened(Gate), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8471
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8472).
% [human,gate,time]
% Happens(Close(human,gate),time) ->
% HoldsAt(Opened(gate),time) &
% (!{animal} HoldsAt(Mounted(human,animal),time)) &
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8475
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8472).
% {position}% 
% (Side1(gate)=position | Side2(gate)=position) &
% HoldsAt(Pos(human,position),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8477
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8476).

 /*  exists([Position],
    happens(close(Human, Gate), Time) ->
       holds_at(opened(Gate), Time),
       not(exists([Animal],
                  holds_at(mounted(Human, Animal), Time))),
       (   equals(side1(Gate), Position)
       ;   equals(side2(Gate), Position)
       ),
       holds_at(pos(Human, Position), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8476).

 /*  not(happens(close(Human, Gate), Time)) :-
       (   not(holds_at(opened(Gate), Time))
       ;   holds_at(mounted(Human, Animal), Time)
       ;   not(equals(side1(Gate), Position)),
           not(equals(side2(Gate), Position))
       ;   not(holds_at(pos(Human, Position), Time))
       ),
       some(Position,
            '$kolem_Fn_444'(Human, Gate, Time, Animal)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8476).

 /*  [(holds_at(neg(opened(Gate)), Time);holds_at(mounted(Human, Animal), Time);not(equals(side1(Gate), Position)), not(equals(side2(Gate), Position));holds_at(neg(pos(Human, Position)), Time)), some(Position, '$kolem_Fn_444'(Human, Gate, Time, Animal))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(close(Human, Gate), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8476).
axiom(not(happens(close(Human, Gate), Time)),
   
    [  (holds_at(neg(opened(Gate)), Time);holds_at(mounted(Human, Animal), Time);not(equals(side1(Gate), Position)), not(equals(side2(Gate), Position));holds_at(neg(pos(Human, Position)), Time)),
      some(Position,
           '$kolem_Fn_444'(Human, Gate, Time, Animal))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8476).

 /*  holds_at(opened(Gate), Time) :-
       happens(close(Human, Gate), Time),
       some(Position,
            '$kolem_Fn_444'(Human, Gate, Time, Animal)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8476).

 /*  [happens(close(Human, Gate), Time), some(Position, '$kolem_Fn_444'(Human, Gate, Time, Animal))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(opened(Gate), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8476).
axiom(holds_at(opened(Gate), Time),
   
    [ happens(close(Human, Gate), Time),
      some(Position,
           '$kolem_Fn_444'(Human, Gate, Time, Animal))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8476).

 /*  not(holds_at(mounted(Human, Animal), Time)) :-
       happens(close(Human, Gate), Time),
       some(Position,
            '$kolem_Fn_444'(Human, Gate, Time, Animal)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8476).

 /*  [happens(close(Human, Gate), Time), some(Position, '$kolem_Fn_444'(Human, Gate, Time, Animal))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(mounted(Human, Animal)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8476).
axiom(holds_at(neg(mounted(Human, Animal)), Time),
   
    [ happens(close(Human, Gate), Time),
      some(Position,
           '$kolem_Fn_444'(Human, Gate, Time, Animal))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8476).

 /*  holds_at(pos(Human, Position), Time) :-
       happens(close(Human, Gate), Time),
       some(Position,
            '$kolem_Fn_444'(Human, Gate, Time, Animal)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8476).

 /*  [happens(close(Human, Gate), Time), some(Position, '$kolem_Fn_444'(Human, Gate, Time, Animal))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(pos(Human, Position), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8476).
axiom(holds_at(pos(Human, Position), Time),
   
    [ happens(close(Human, Gate), Time),
      some(Position,
           '$kolem_Fn_444'(Human, Gate, Time, Animal))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8479
% [human,animal,position,time]
% HoldsAt(Mounted(human,animal),time) &
% HoldsAt(Pos(animal,position),time) ->
% HoldsAt(Pos(human,position),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8482
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8481).

 /*  holds_at(mounted(Human, Animal), Time), holds_at(pos(Animal, Position), Time) ->
       holds_at(pos(Human, Position), Time).
 */

 /*  holds_at(pos(Human, Position), Time) :-
       holds_at(mounted(Human, Animal), Time),
       holds_at(pos(Animal, Position), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8481).

 /*  [holds_at(mounted(Human, Animal), Time), holds_at(pos(Animal, Position), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(pos(Human, Position), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8481).
axiom(holds_at(pos(Human, Position), Time),
   
    [ holds_at(mounted(Human, Animal), Time),
      holds_at(pos(Animal, Position), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8481).

 /*  not(holds_at(mounted(Human, Animal), Time)) :-
       holds_at(pos(Animal, Position), Time),
       not(holds_at(pos(Human, Position), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8481).

 /*  [holds_at(pos(Animal, Position), Time), holds_at(neg(pos(Human, Position)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(mounted(Human, Animal)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8481).
axiom(holds_at(neg(mounted(Human, Animal)), Time),
   
    [ holds_at(pos(Animal, Position), Time),
      holds_at(neg(pos(Human, Position)), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8481).

 /*  not(holds_at(pos(Animal, Position), Time)) :-
       holds_at(mounted(Human, Animal), Time),
       not(holds_at(pos(Human, Position), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8481).

 /*  [holds_at(mounted(Human, Animal), Time), holds_at(neg(pos(Human, Position)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(pos(Animal, Position)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8481).
axiom(holds_at(neg(pos(Animal, Position)), Time),
   
    [ holds_at(mounted(Human, Animal), Time),
      holds_at(neg(pos(Human, Position)), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8484
% [animal,time]
% HoldsAt(Moves(animal),time) <->
% ({position}
%  HoldsAt(Pos(animal,position),time) &
%  !HoldsAt(Pos(animal,position),time+1)).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8488
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8486).

 /*  holds_at(moves(Animal), Time) <->
       exists([Position],
               (holds_at(pos(Animal, Position), Time), holds_at(neg(pos(Animal, Position)), Time+1))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8486).

 /*  [holds_at, moves] <->
       [exists, holds_at, pos, holds_at, neg, pos, +].
 */

 /*  holds_at(moves(Animal), Time) ->
       exists([Position],
               (holds_at(pos(Animal, Position), Time), holds_at(neg(pos(Animal, Position)), Time+1))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8486).

 /*  not(holds_at(moves(Animal), Time)) :-
       (   not(holds_at(pos(Animal, Position), Time))
       ;   not(holds_at(neg(pos(Animal, Position)), Time+1))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8486).

 /*  [(holds_at(neg(pos(Animal, Position)), Time);holds_at(pos(Animal, Position), Time3)), b(Time, Time3), ignore(Time+1==Time3)] ->
       ta(Time,
          tvs1=[Time, Time+1],
          tvs2=[Time, Time3],
          holds_at(neg(moves(Animal)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8486).
axiom(holds_at(neg(moves(Animal)), Time),
   
    [  (holds_at(neg(pos(Animal, Position)), Time);holds_at(pos(Animal, Position), Time3)),
      b(Time, Time3)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8486).

 /*  holds_at(pos(Animal, Position), Time) :-
       holds_at(moves(Animal), Time).
 */

 /*  [holds_at(moves(Animal), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(pos(Animal, Position), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8486).
axiom(holds_at(pos(Animal, Position), Time),
    [holds_at(moves(Animal), Time)]).

 /*  holds_at(neg(pos(Animal, Position)), Time+1) :-
       holds_at(moves(Animal), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8486).

 /*  [holds_at(moves(Animal), Time), b(Time, Time4), ignore(Time+1==Time4)] ->
       ta(Time,
          tvs1=[Time, Time+1],
          tvs2=[Time, Time4],
          holds_at(neg(pos(Animal, Position)), Time4)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8486).
axiom(holds_at(neg(pos(Animal, Position)), Time4),
    [holds_at(moves(Animal), Time), b(Time, Time4)]).

 /*  exists([Position],  (holds_at(pos(Animal, Position), Time), holds_at(neg(pos(Animal, Position)), Time+1))) ->
       holds_at(moves(Animal), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8486).

 /*  holds_at(moves(Animal), Time) :-
       holds_at(pos(Animal, Position), Time),
       holds_at(neg(pos(Animal, Position)), Time+1).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8486).

 /*  [holds_at(pos(Animal, Position), Time), holds_at(neg(pos(Animal, Position)), Time5), b(Time, Time5), ignore(Time+1==Time5)] ->
       ta(Time,
          tvs1=[Time, Time+1],
          tvs2=[Time, Time5],
          holds_at(moves(Animal), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8486).
axiom(holds_at(moves(Animal), Time),
   
    [ holds_at(pos(Animal, Position), Time),
      holds_at(neg(pos(Animal, Position)), Time5),
      b(Time, Time5)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8486).

 /*  not(holds_at(pos(Animal, Position), Time)) :-
       holds_at(neg(pos(Animal, Position)), Time+1),
       not(holds_at(moves(Animal), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8486).

 /*  [holds_at(neg(pos(Animal, Position)), Time6), holds_at(neg(moves(Animal)), Time), b(Time, Time6), ignore(Time+1==Time6)] ->
       ta(Time,
          tvs1=[Time, Time+1],
          tvs2=[Time, Time6],
          holds_at(neg(pos(Animal, Position)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8486).
axiom(holds_at(neg(pos(Animal, Position)), Time),
   
    [ holds_at(neg(pos(Animal, Position)), Time6),
      holds_at(neg(moves(Animal)), Time),
      b(Time, Time6)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8486).

 /*  not(holds_at(neg(pos(Animal, Position)), Time+1)) :-
       holds_at(pos(Animal, Position), Time),
       not(holds_at(moves(Animal), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8486).

 /*  [holds_at(pos(Animal, Position), Time), holds_at(neg(moves(Animal)), Time), b(Time, Time7), ignore(Time+1==Time7)] ->
       ta(Time,
          tvs1=[Time, Time+1],
          tvs2=[Time, Time7],
          holds_at(pos(Animal, Position), Time7)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8486).
axiom(holds_at(pos(Animal, Position), Time7),
   
    [ holds_at(pos(Animal, Position), Time),
      holds_at(neg(moves(Animal)), Time),
      b(Time, Time7)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8490
% [human,time]
% HoldsAt(MountFails(human),time) <->
% ({animal}
%   Happens(Mount(human,animal),time) &
%   HoldsAt(Moves(animal),time)).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8494
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8492).

 /*  holds_at(mountFails(Human), Time) <->
       exists([Animal],
               (happens(mount(Human, Animal), Time), holds_at(moves(Animal), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8492).

 /*  [holds_at, mountFails] <->
       [exists, happens, mount, holds_at, moves].
 */

 /*  holds_at(mountFails(Human), Time) ->
       exists([Animal],
               (happens(mount(Human, Animal), Time), holds_at(moves(Animal), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8492).

 /*  not(holds_at(mountFails(Human), Time)) :-
       (   not(happens(mount(Human, Animal), Time))
       ;   not(holds_at(moves(Animal), Time))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8492).

 /*  [(not(happens(mount(Human, Animal), Time));holds_at(neg(moves(Animal)), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(mountFails(Human)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8492).
axiom(holds_at(neg(mountFails(Human)), Time),
   
    [  (not(happens(mount(Human, Animal), Time));holds_at(neg(moves(Animal)), Time))
    ]).

 /*  happens(mount(Human, Animal), Time) :-
       holds_at(mountFails(Human), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8492).

 /*  [holds_at(mountFails(Human), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(mount(Human, Animal), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8492).
axiom(happens(mount(Human, Animal), Time),
    [holds_at(mountFails(Human), Time)]).

 /*  holds_at(moves(Animal), Time) :-
       holds_at(mountFails(Human), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8492).

 /*  [holds_at(mountFails(Human), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(moves(Animal), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8492).
axiom(holds_at(moves(Animal), Time),
    [holds_at(mountFails(Human), Time)]).

 /*  exists([Animal],  (happens(mount(Human, Animal), Time), holds_at(moves(Animal), Time))) ->
       holds_at(mountFails(Human), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8492).

 /*  holds_at(mountFails(Human), Time) :-
       happens(mount(Human, Animal), Time),
       holds_at(moves(Animal), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8492).

 /*  [happens(mount(Human, Animal), Time), holds_at(moves(Animal), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(mountFails(Human), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8492).
axiom(holds_at(mountFails(Human), Time),
   
    [ happens(mount(Human, Animal), Time),
      holds_at(moves(Animal), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8492).

 /*  not(happens(mount(Human, Animal), Time)) :-
       holds_at(moves(Animal), Time),
       not(holds_at(mountFails(Human), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8492).

 /*  [holds_at(moves(Animal), Time), holds_at(neg(mountFails(Human)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(mount(Human, Animal), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8492).
axiom(not(happens(mount(Human, Animal), Time)),
   
    [ holds_at(moves(Animal), Time),
      holds_at(neg(mountFails(Human)), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8492).

 /*  not(holds_at(moves(Animal), Time)) :-
       happens(mount(Human, Animal), Time),
       not(holds_at(mountFails(Human), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8492).

 /*  [happens(mount(Human, Animal), Time), holds_at(neg(mountFails(Human)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(moves(Animal)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8492).
axiom(holds_at(neg(moves(Animal)), Time),
   
    [ happens(mount(Human, Animal), Time),
      holds_at(neg(mountFails(Human)), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8496
% [human,animal,position,time]
% !HoldsAt(Moves(animal),time) ->
% Releases(Mount(human,animal),Pos(human,position),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8498

 /*  [holds_at(neg(moves(Animal)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          releases(mount(Human, Animal),
                   pos(Human, Position),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8498).
axiom(releases(mount(Human, Animal), pos(Human, Position), Time),
    [holds_at(neg(moves(Animal)), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8500
% [human,animal,time]
% !HoldsAt(Moves(animal),time) ->
% Initiates(Mount(human,animal),Mounted(human,animal),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8502

 /*  [holds_at(neg(moves(Animal)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(mount(Human, Animal),
                    mounted(Human, Animal),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8502).
axiom(initiates(mount(Human, Animal), mounted(Human, Animal), Time),
    [holds_at(neg(moves(Animal)), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8504
% [human,animal,position,time]
% HoldsAt(Pos(animal,position),time) &
% HoldsAt(Moves(animal),time) ->
% Initiates(Mount(human,animal),Pos(human,position),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8507
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8506).

 /*  [holds_at(pos(Animal, Position), Time), holds_at(moves(Animal), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(mount(Human, Animal),
                    pos(Human, Position),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8506).
axiom(initiates(mount(Human, Animal), pos(Human, Position), Time),
   
    [ holds_at(pos(Animal, Position), Time),
      holds_at(moves(Animal), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8509
% [human,animal,position,time]
% HoldsAt(Pos(human,position),time) &
% HoldsAt(Moves(animal),time) ->
% Terminates(Mount(human,animal),Pos(human,position),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8512
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8511).

 /*  [holds_at(pos(Human, Position), Time), holds_at(moves(Animal), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(mount(Human, Animal),
                     pos(Human, Position),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8511).
axiom(terminates(mount(Human, Animal), pos(Human, Position), Time),
   
    [ holds_at(pos(Human, Position), Time),
      holds_at(moves(Animal), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8514
% [human,animal,time]
% Happens(Mount(human,animal),time) ->
% Large(animal).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8516

 /*  happens(mount(Human, Animal), Time) ->
       large(Animal).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8516).

 /*  large(Animal) :-
       happens(mount(Human, Animal), Time).
 */

 /*  [holds_at(metreqs(mount(Human, Animal)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(mount(Human, Animal), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8516).
axiom(requires(mount(Human, Animal), Time),
    [holds_at(metreqs(mount(Human, Animal)), Time)]).

 /*  [large(Animal)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(mount(Human, Animal)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8516).
axiom(holds_at(metreqs(mount(Human, Animal)), Time),
    [large(Animal)]).

 /*  not(happens(mount(Human, Animal), Time)) :-
       not(large(Animal)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8516).

 /*  [not(large(Animal))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(mount(Human, Animal), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8516).
axiom(not(happens(mount(Human, Animal), Time)),
    [not(large(Animal))]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8518
% [human,animal,time]
% HoldsAt(Mounted(human,animal),time) ->
% Large(animal).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8520

 /*  holds_at(mounted(Human, Animal), Time) ->
       large(Animal).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8520).

 /*  large(Animal) :-
       holds_at(mounted(Human, Animal), Time).
 */

 /*  [holds_at(mounted(Human, Animal), Time)] ->
       ta(Time, tvs1=[Time], tvs2=[Time], large(Animal)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8520).
axiom(large(Animal),
    [holds_at(mounted(Human, Animal), Time)]).

 /*  not(holds_at(mounted(Human, Animal), Time)) :-
       not(large(Animal)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8520).

 /*  [not(large(Animal))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(mounted(Human, Animal)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8520).
axiom(holds_at(neg(mounted(Human, Animal)), Time),
    [not(large(Animal))]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8522
% [human1,human2,time]
% Happens(Mount(human1,human2),time) ->
% !Large(human1).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8524

 /*  happens(mount(Human1, Human2), Time) ->
       not(large(Human1)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8524).

 /*  not(large(Human1)) :-
       happens(mount(Human1, Human2), Time).
 */

 /*  [holds_at(metreqs(mount(Human1, Human2)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(mount(Human1, Human2), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8524).
axiom(requires(mount(Human1, Human2), Time),
    [holds_at(metreqs(mount(Human1, Human2)), Time)]).

 /*  [not(large(Human1))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(mount(Human1, Human2)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8524).
axiom(holds_at(metreqs(mount(Human1, Human2)), Time),
    [not(large(Human1))]).

 /*  not(happens(mount(Human1, Human2), Time)) :-
       large(Human1).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8524).

 /*  [large(Human1)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(mount(Human1, Human2), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8524).
axiom(not(happens(mount(Human1, Human2), Time)),
    [large(Human1)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8526
% [human1,human2,time]
% HoldsAt(Mounted(human1,human2),time) ->
% !Large(human1).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8528

 /*  holds_at(mounted(Human1, Human2), Time) ->
       not(large(Human1)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8528).

 /*  not(large(Human1)) :-
       holds_at(mounted(Human1, Human2), Time).
 */

 /*  [holds_at(mounted(Human1, Human2), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(large(Human1))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8528).
axiom(not(large(Human1)),
    [holds_at(mounted(Human1, Human2), Time)]).

 /*  not(holds_at(mounted(Human1, Human2), Time)) :-
       large(Human1).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8528).

 /*  [large(Human1)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(mounted(Human1, Human2)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8528).
axiom(holds_at(neg(mounted(Human1, Human2)), Time),
    [large(Human1)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8530
% [human,animal,time]
% Happens(Mount(human,animal),time) ->
% !{human1} human1!=human & HoldsAt(Mounted(human1,animal),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8532

 /*  happens(mount(Human, Animal), Time) ->
       not(exists([Human1],
                   (diff(Human1, Human), holds_at(mounted(Human1, Animal), Time)))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8532).

 /*  not(holds_at(mounted(Human1, Animal), Time)) :-
       diff(Human1, Human),
       happens(mount(Human, Animal), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8532).

 /*  [diff(Human1, Human), happens(mount(Human, Animal), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(mounted(Human1, Animal)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8532).
axiom(holds_at(neg(mounted(Human1, Animal)), Time),
   
    [ diff(Human1, Human),
      happens(mount(Human, Animal), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8532).

 /*  not(happens(mount(Human, Animal), Time)) :-
       diff(Human1, Human),
       holds_at(mounted(Human1, Animal), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8532).

 /*  [diff(Human1, Human), holds_at(mounted(Human1, Animal), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(mount(Human, Animal), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8532).
axiom(not(happens(mount(Human, Animal), Time)),
   
    [ diff(Human, Human1),
      holds_at(mounted(Human1, Animal), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8534
% [human1,human2,animal,time]
% HoldsAt(Mounted(human1,animal),time) &
% HoldsAt(Mounted(human2,animal),time) ->
% human1=human2.
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8537
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8536).

 /*  holds_at(mounted(Human1, Animal), Time), holds_at(mounted(Human2, Animal), Time) ->
       equals(Human1, Human2).
 */

 /*  not(holds_at(mounted(Human1, Animal), Time)) :-
       holds_at(mounted(Human2, Animal), Time),
       not(equals(Human1, Human2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8536).

 /*  [holds_at(mounted(Human2, Animal), Time), not(equals(Human1, Human2))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(mounted(Human1, Animal)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8536).
axiom(holds_at(neg(mounted(Human1, Animal)), Time),
   
    [ holds_at(mounted(Human2, Animal), Time),
      not(equals(Human1, Human2))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8536).

 /*  not(holds_at(mounted(Human2, Animal), Time)) :-
       holds_at(mounted(Human1, Animal), Time),
       not(equals(Human1, Human2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8536).

 /*  [holds_at(mounted(Human1, Animal), Time), not(equals(Human1, Human2))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(mounted(Human2, Animal)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8536).
axiom(holds_at(neg(mounted(Human2, Animal)), Time),
   
    [ holds_at(mounted(Human1, Animal), Time),
      not(equals(Human2, Human1))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8539
% [human,animal,time]
% Happens(Mount(human,animal),time) ->
% !{human1} human1!=human & HoldsAt(Mounted(human1,human),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8541

 /*  happens(mount(Human, Animal), Time) ->
       not(exists([Human1],
                   (diff(Human1, Human), holds_at(mounted(Human1, Human), Time)))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8541).

 /*  not(holds_at(mounted(Human1, Human), Time)) :-
       diff(Human1, Human),
       happens(mount(Human, Animal), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8541).

 /*  [diff(Human1, Human), happens(mount(Human, Animal), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(mounted(Human1, Human)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8541).
axiom(holds_at(neg(mounted(Human1, Human)), Time),
   
    [ diff(Human1, Human),
      happens(mount(Human, Animal), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8541).

 /*  not(happens(mount(Human, Animal), Time)) :-
       diff(Human1, Human),
       holds_at(mounted(Human1, Human), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8541).

 /*  [diff(Human1, Human), holds_at(mounted(Human1, Human), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(mount(Human, Animal), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8541).
axiom(not(happens(mount(Human, Animal), Time)),
   
    [ diff(Human, Human1),
      holds_at(mounted(Human1, Human), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8543
% [human1,human2,time]
% Happens(Mount(human1,human2),time) ->
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8545
% {animal}%  HoldsAt(Mounted(human2,animal),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8545).

 /*  exists([Animal],
    happens(mount(Human1, Human2), Time) ->
       holds_at(mounted(Human2, Animal), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8545).

 /*  holds_at(mounted(Human2, Animal), Time) :-
       happens(mount(Human1, Human2), Time),
       some(Animal, '$kolem_Fn_452'(Human1, Human2, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8545).

 /*  [happens(mount(Human1, Human2), Time), some(Animal, '$kolem_Fn_452'(Human1, Human2, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(mounted(Human2, Animal), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8545).
axiom(holds_at(mounted(Human2, Animal), Time),
   
    [ happens(mount(Human1, Human2), Time),
      some(Animal, '$kolem_Fn_452'(Human1, Human2, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8545).

 /*  not(happens(mount(Human1, Human2), Time)) :-
       not(holds_at(mounted(Human2, Animal), Time)),
       some(Animal, '$kolem_Fn_452'(Human1, Human2, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8545).

 /*  [holds_at(neg(mounted(Human2, Animal)), Time), some(Animal, '$kolem_Fn_452'(Human1, Human2, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(mount(Human1, Human2), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8545).
axiom(not(happens(mount(Human1, Human2), Time)),
   
    [ holds_at(neg(mounted(Human2, Animal)), Time),
      some(Animal, '$kolem_Fn_452'(Human1, Human2, Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8547
% [human1,human2,time]
% HoldsAt(Mounted(human1,human2),time) ->
% !{animal} HoldsAt(Mounted(human2,animal),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8549

 /*  holds_at(mounted(Human1, Human2), Time) ->
       not(exists([Animal],
                  holds_at(mounted(Human2, Animal), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8549).

 /*  not(holds_at(mounted(Human2, Animal), Time)) :-
       holds_at(mounted(Human1, Human2), Time).
 */

 /*  [holds_at(mounted(Human1, Human2), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(mounted(Human2, Animal)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8549).
axiom(holds_at(neg(mounted(Human2, Animal)), Time),
    [holds_at(mounted(Human1, Human2), Time)]).

 /*  not(holds_at(mounted(Human1, Human2), Time)) :-
       holds_at(mounted(Human2, Animal), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8549).

 /*  [holds_at(mounted(Human2, Animal), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(mounted(Human1, Human2)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8549).
axiom(holds_at(neg(mounted(Human1, Human2)), Time),
    [holds_at(mounted(Human2, Animal), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8551
% [human,animal,time]
% Happens(Mount(human,animal),time) ->
% !{animal1} HoldsAt(Mounted(human,animal1),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8553

 /*  happens(mount(Human, Animal), Time) ->
       not(exists([Animal1],
                  holds_at(mounted(Human, Animal1), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8553).

 /*  not(holds_at(mounted(Human, Animal1), Time)) :-
       happens(mount(Human, Animal), Time).
 */

 /*  [holds_at(metreqs(mount(Human, Animal)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(mount(Human, Animal), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8553).
axiom(requires(mount(Human, Animal), Time),
    [holds_at(metreqs(mount(Human, Animal)), Time)]).

 /*  [holds_at(neg(mounted(Human, Animal1)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(mount(Human, Animal)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8553).
axiom(holds_at(metreqs(mount(Human, Animal)), Time),
    [holds_at(neg(mounted(Human, Animal1)), Time)]).

 /*  not(happens(mount(Human, Animal), Time)) :-
       holds_at(mounted(Human, Animal1), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8553).

 /*  [holds_at(mounted(Human, Animal1), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(mount(Human, Animal), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8553).
axiom(not(happens(mount(Human, Animal), Time)),
    [holds_at(mounted(Human, Animal1), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8555
% [human,animal,time]
% !HoldsAt(Moves(animal),time) ->
% Terminates(GetOff(human,animal),Mounted(human,animal),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8557

 /*  [holds_at(neg(moves(Animal)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(getOff(Human, Animal),
                     mounted(Human, Animal),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8557).
axiom(terminates(getOff(Human, Animal), mounted(Human, Animal), Time),
    [holds_at(neg(moves(Animal)), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8559
% [human,animal,position,time]
% !HoldsAt(Moves(animal),time) &
% HoldsAt(PosDeterminingFluent(human,position),time) ->
% Initiates(GetOff(human,animal),Pos(human,position),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8562
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8561).

 /*  [holds_at(neg(moves(Animal)), Time), holds_at(posDeterminingFluent(Human, Position), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(getOff(Human, Animal),
                    pos(Human, Position),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8561).
axiom(initiates(getOff(Human, Animal), pos(Human, Position), Time),
   
    [ holds_at(neg(moves(Animal)), Time),
      holds_at(posDeterminingFluent(Human, Position), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8564
% [human,animal,position,time]
% !HoldsAt(Moves(animal),time) &
% HoldsAt(Pos(human,position),time) ->
% Terminates(GetOff(human,animal),Pos(human,position),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8567
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8566).

 /*  [holds_at(neg(moves(Animal)), Time), holds_at(pos(Human, Position), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(getOff(Human, Animal),
                     pos(Human, Position),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8566).
axiom(terminates(getOff(Human, Animal), pos(Human, Position), Time),
   
    [ holds_at(neg(moves(Animal)), Time),
      holds_at(pos(Human, Position), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8569
% [human,animal,position1,position2,time]
% !HoldsAt(Moves(animal),time) &
% HoldsAt(Pos(human,position1),time) &
% position1!=position2 ->
% Terminates(GetOff(human,animal),Pos(human,position2),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8573
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8571).

 /*  [holds_at(neg(moves(Animal)), Time), holds_at(pos(Human, Position1), Time), diff(Position1, Position2)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(getOff(Human, Animal),
                     pos(Human, Position2),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8571).
axiom(terminates(getOff(Human, Animal), pos(Human, Position2), Time),
   
    [ holds_at(neg(moves(Animal)), Time),
      holds_at(pos(Human, Position1), Time),
      diff(Position2, Position1)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8575
% [human,animal,time]
% Happens(GetOff(human,animal),time) ->
% HoldsAt(Mounted(human,animal),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8577

 /*  happens(getOff(Human, Animal), Time) ->
       holds_at(mounted(Human, Animal), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8577).

 /*  holds_at(mounted(Human, Animal), Time) :-
       happens(getOff(Human, Animal), Time).
 */

 /*  [holds_at(metreqs(getOff(Human, Animal)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(getOff(Human, Animal), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8577).
axiom(requires(getOff(Human, Animal), Time),
    [holds_at(metreqs(getOff(Human, Animal)), Time)]).

 /*  [holds_at(mounted(Human, Animal), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(getOff(Human, Animal)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8577).
axiom(holds_at(metreqs(getOff(Human, Animal)), Time),
    [holds_at(mounted(Human, Animal), Time)]).

 /*  not(happens(getOff(Human, Animal), Time)) :-
       not(holds_at(mounted(Human, Animal), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8577).

 /*  [holds_at(neg(mounted(Human, Animal)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(getOff(Human, Animal), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8577).
axiom(not(happens(getOff(Human, Animal), Time)),
    [holds_at(neg(mounted(Human, Animal)), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8579
% [animal1,human,time]
% HoldsAt(ThrowOffFails(animal1,human),time) <->
% ({position,animal2}
%  animal2!=human &
%  HoldsAt(PosDeterminingFluent(human,position),time) &
%  Large(animal2) &
%  HoldsAt(Pos(animal2,position),time+1)).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8585
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8581).

 /*  holds_at(throwOffFails(Animal1, Human), Time) <->
       exists([Position, Animal2],
               (diff(Animal2, Human), holds_at(posDeterminingFluent(Human, Position), Time), large(Animal2), holds_at(pos(Animal2, Position), Time+1))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8581).

 /*  [holds_at, throwOffFails] <->
       [exists, diff, holds_at, posDeterminingFluent, large, holds_at, pos, +].
 */

 /*  holds_at(throwOffFails(Animal1, Human), Time) ->
       exists([Position, Animal2],
               (diff(Animal2, Human), holds_at(posDeterminingFluent(Human, Position), Time), large(Animal2), holds_at(pos(Animal2, Position), Time+1))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8581).

 /*  not(holds_at(throwOffFails(Animal1, Human), Time)) :-
       (   not(diff(Animal2, Human))
       ;   not(holds_at(posDeterminingFluent(Human, Position),
                        Time))
       ;   not(large(Animal2))
       ;   not(holds_at(pos(Animal2, Position), Time+1))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8581).

 /*  [(equals(Animal2, Human);holds_at(neg(posDeterminingFluent(Human, Position)), Time);not(large(Animal2));holds_at(neg(pos(Animal2, Position)), Time5)), b(Time, Time5), ignore(Time+1==Time5)] ->
       ta(Time,
          tvs1=[Time, Time+1],
          tvs2=[Time, Time5],
          holds_at(neg(throwOffFails(Animal1, Human)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8581).
axiom(holds_at(neg(throwOffFails(Animal1, Human)), Time),
   
    [  (equals(Human, Animal2);holds_at(neg(posDeterminingFluent(Human, Position)), Time);not(large(Animal2));holds_at(neg(pos(Animal2, Position)), Time5)),
      b(Time, Time5)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8581).

 /*  holds_at(posDeterminingFluent(Human, Position), Time) :-
       holds_at(throwOffFails(Animal1, Human), Time).
 */

 /*  [holds_at(throwOffFails(Animal1, Human), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(posDeterminingFluent(Human, Position), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8581).
axiom(holds_at(posDeterminingFluent(Human, Position), Time),
    [holds_at(throwOffFails(Animal1, Human), Time)]).

 /*  large(Animal2) :-
       holds_at(throwOffFails(Animal1, Human), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8581).

 /*  [holds_at(throwOffFails(Animal1, Human), Time)] ->
       ta(Time, tvs1=[Time], tvs2=[Time], large(Animal2)).
 */
axiom(large(Animal2),
    [holds_at(throwOffFails(Animal1, Human), Time)]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8581).

 /*  holds_at(pos(Animal2, Position), Time+1) :-
       holds_at(throwOffFails(Animal1, Human), Time).
 */

 /*  [holds_at(throwOffFails(Animal1, Human), Time), b(Time, Time6), ignore(Time+1==Time6)] ->
       ta(Time,
          tvs1=[Time, Time+1],
          tvs2=[Time, Time6],
          holds_at(pos(Animal2, Position), Time6)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8581).
axiom(holds_at(pos(Animal2, Position), Time6),
   
    [ holds_at(throwOffFails(Animal1, Human), Time),
      b(Time, Time6)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8581).

 /*  exists([Position, Animal2],  (diff(Animal2, Human), holds_at(posDeterminingFluent(Human, Position), Time), large(Animal2), holds_at(pos(Animal2, Position), Time+1))) ->
       holds_at(throwOffFails(Animal1, Human), Time).
 */

 /*  holds_at(throwOffFails(Animal1, Human), Time) :-
       diff(Animal2, Human),
       holds_at(posDeterminingFluent(Human, Position), Time),
       large(Animal2),
       holds_at(pos(Animal2, Position), Time+1).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8581).

 /*  [diff(Animal2, Human), holds_at(posDeterminingFluent(Human, Position), Time), large(Animal2), holds_at(pos(Animal2, Position), Time7), b(Time, Time7), ignore(Time+1==Time7)] ->
       ta(Time,
          tvs1=[Time, Time+1],
          tvs2=[Time, Time7],
          holds_at(throwOffFails(Animal1, Human), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8581).
axiom(holds_at(throwOffFails(Animal1, Human), Time),
   
    [ diff(Human, Animal2),
      holds_at(posDeterminingFluent(Human, Position), Time),
      large(Animal2),
      holds_at(pos(Animal2, Position), Time7),
      b(Time, Time7)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8581).

 /*  not(holds_at(posDeterminingFluent(Human, Position), Time)) :-
       ( large(Animal2),
         holds_at(pos(Animal2, Position), Time+1)
       ),
       diff(Animal2, Human),
       not(holds_at(throwOffFails(Animal1, Human), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8581).

 /*  [large(Animal2), holds_at(pos(Animal2, Position), Time8), diff(Animal2, Human), holds_at(neg(throwOffFails(Animal1, Human)), Time), b(Time, Time8), ignore(Time+1==Time8)] ->
       ta(Time,
          tvs1=[Time, Time+1],
          tvs2=[Time, Time8],
          holds_at(neg(posDeterminingFluent(Human, Position)),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8581).
axiom(holds_at(neg(posDeterminingFluent(Human, Position)), Time),
   
    [ large(Animal2),
      holds_at(pos(Animal2, Position), Time8),
      diff(Human, Animal2),
      holds_at(neg(throwOffFails(Animal1, Human)), Time),
      b(Time, Time8)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8581).

 /*  not(large(Animal2)) :-
       holds_at(pos(Animal2, Position), Time+1),
       holds_at(posDeterminingFluent(Human, Position), Time),
       diff(Animal2, Human),
       not(holds_at(throwOffFails(Animal1, Human), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8581).

 /*  [holds_at(pos(Animal2, Position), Time9), holds_at(posDeterminingFluent(Human, Position), Time), diff(Animal2, Human), holds_at(neg(throwOffFails(Animal1, Human)), Time), b(Time, Time9), ignore(Time+1==Time9)] ->
       ta(Time,
          tvs1=[Time, Time+1],
          tvs2=[Time, Time9],
          not(large(Animal2))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8581).
axiom(not(large(Animal2)),
   
    [ holds_at(pos(Animal2, Position), Time9),
      holds_at(posDeterminingFluent(Human, Position), Time),
      diff(Animal2, Human),
      holds_at(neg(throwOffFails(Animal1, Human)), Time),
      b(Time, Time9)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8581).

 /*  not(holds_at(pos(Animal2, Position), Time+1)) :-
       large(Animal2),
       holds_at(posDeterminingFluent(Human, Position), Time),
       diff(Animal2, Human),
       not(holds_at(throwOffFails(Animal1, Human), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8581).

 /*  [large(Animal2), holds_at(posDeterminingFluent(Human, Position), Time), diff(Animal2, Human), holds_at(neg(throwOffFails(Animal1, Human)), Time), b(Time, Time10), ignore(Time+1==Time10)] ->
       ta(Time,
          tvs1=[Time, Time+1],
          tvs2=[Time, Time10],
          holds_at(neg(pos(Animal2, Position)), Time10)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8581).
axiom(holds_at(neg(pos(Animal2, Position)), Time10),
   
    [ large(Animal2),
      holds_at(posDeterminingFluent(Human, Position), Time),
      diff(Animal2, Human),
      holds_at(neg(throwOffFails(Animal1, Human)), Time),
      b(Time, Time10)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8587
% [animal,human,position,time]
% HoldsAt(PosDeterminingFluent(human,position),time) &
% !HoldsAt(ThrowOffFails(animal,human),time) ->
% Initiates(ThrowOff(animal,human),Pos(human,position),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8590
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8589).

 /*  [holds_at(posDeterminingFluent(Human, Position), Time), holds_at(neg(throwOffFails(Animal, Human)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(throwOff(Animal, Human),
                    pos(Human, Position),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8589).
axiom(initiates(throwOff(Animal, Human), pos(Human, Position), Time),
   
    [ holds_at(posDeterminingFluent(Human, Position), Time),
      holds_at(neg(throwOffFails(Animal, Human)), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8592
% [animal,human,position,time]
% HoldsAt(Pos(human,position),time) &
% !HoldsAt(ThrowOffFails(animal,human),time) ->
% Terminates(ThrowOff(animal,human),Pos(human,position),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8595
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8594).

 /*  [holds_at(pos(Human, Position), Time), holds_at(neg(throwOffFails(Animal, Human)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(throwOff(Animal, Human),
                     pos(Human, Position),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8594).
axiom(terminates(throwOff(Animal, Human), pos(Human, Position), Time),
   
    [ holds_at(pos(Human, Position), Time),
      holds_at(neg(throwOffFails(Animal, Human)), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8597
% [animal,human,position1,position2,time]
% !HoldsAt(ThrowOffFails(animal,human),time) &
% HoldsAt(Pos(human,position1),time) &
% !HoldsAt(PosDeterminingFluent(human,position2),time) &
% position1!=position2 ->
% Terminates(ThrowOff(animal,human),Pos(human,position2),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8602
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8599).

 /*  [holds_at(neg(throwOffFails(Animal, Human)), Time), holds_at(pos(Human, Position1), Time), holds_at(neg(posDeterminingFluent(Human, Position2)), Time), diff(Position1, Position2)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(throwOff(Animal, Human),
                     pos(Human, Position2),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8599).
axiom(terminates(throwOff(Animal, Human), pos(Human, Position2), Time),
   
    [ holds_at(neg(throwOffFails(Animal, Human)), Time),
      holds_at(pos(Human, Position1), Time),
      holds_at(neg(posDeterminingFluent(Human, Position2)),
               Time),
      diff(Position2, Position1)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8604
% [human,time]
% (!{animal} Happens(ThrowOff(animal,human),time) |
%            Happens(GetOff(human,animal),time)) ->
% HoldsAt(PosDeterminingFluent(human,1),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8607
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8606).

 /*  not(exists([Animal],  (happens(throwOff(Animal, Human), Time);happens(getOff(Human, Animal), Time)))) ->
       holds_at(posDeterminingFluent(Human, 1), Time).
 */

 /*  holds_at(posDeterminingFluent(Human, 1), Time) :-
       not(happens(throwOff(Animal, Human), Time)),
       not(happens(getOff(Human, Animal), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8606).

 /*  [not(happens(throwOff(Animal, Human), Time)), not(happens(getOff(Human, Animal), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(posDeterminingFluent(Human, 1), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8606).
axiom(holds_at(posDeterminingFluent(Human, 1), Time),
   
    [ not(happens(throwOff(Animal, Human), Time)),
      not(happens(getOff(Human, Animal), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8606).

 /*  happens(throwOff(Animal, Human), Time) :-
       not(happens(getOff(Human, Animal), Time)),
       not(holds_at(posDeterminingFluent(Human, 1), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8606).

 /*  [not(happens(getOff(Human, Animal), Time)), holds_at(neg(posDeterminingFluent(Human, 1)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(throwOff(Animal, Human), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8606).
axiom(happens(throwOff(Animal, Human), Time),
   
    [ not(happens(getOff(Human, Animal), Time)),
      holds_at(neg(posDeterminingFluent(Human, 1)), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8606).

 /*  happens(getOff(Human, Animal), Time) :-
       not(happens(throwOff(Animal, Human), Time)),
       not(holds_at(posDeterminingFluent(Human, 1), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8606).

 /*  [not(happens(throwOff(Animal, Human), Time)), holds_at(neg(posDeterminingFluent(Human, 1)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(getOff(Human, Animal), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8606).
axiom(happens(getOff(Human, Animal), Time),
   
    [ not(happens(throwOff(Animal, Human), Time)),
      holds_at(neg(posDeterminingFluent(Human, 1)), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8609
% [human,position,animal1,animal2,time]
% HoldsAt(PosDeterminingFluent(human,position),time) &
% HoldsAt(ThrowOffFails(animal1,human),time) &
% HoldsAt(Pos(animal2,position),time) ->
% Initiates(ThrowOff(animal1,human),Mounted(human,animal2),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8613
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8611).

 /*  [holds_at(posDeterminingFluent(Human, Position), Time), holds_at(throwOffFails(Animal1, Human), Time), holds_at(pos(Animal2, Position), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(throwOff(Animal1, Human),
                    mounted(Human, Animal2),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8611).
axiom(initiates(throwOff(Animal1, Human), mounted(Human, Animal2), Time),
   
    [ holds_at(posDeterminingFluent(Human, Position), Time),
      holds_at(throwOffFails(Animal1, Human), Time),
      holds_at(pos(Animal2, Position), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8615
% [human,animal,time]
% !HoldsAt(ThrowOffFails(animal,human),time) ->
% Terminates(ThrowOff(animal,human),Mounted(human,animal),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8617

 /*  [holds_at(neg(throwOffFails(Animal, Human)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(throwOff(Animal, Human),
                     mounted(Human, Animal),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8617).
axiom(terminates(throwOff(Animal, Human), mounted(Human, Animal), Time),
    [holds_at(neg(throwOffFails(Animal, Human)), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8619
% [animal,human,time]
% Happens(ThrowOff(animal,human),time) ->
% HoldsAt(Mounted(human,animal),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8621

 /*  happens(throwOff(Animal, Human), Time) ->
       holds_at(mounted(Human, Animal), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8621).

 /*  holds_at(mounted(Human, Animal), Time) :-
       happens(throwOff(Animal, Human), Time).
 */

 /*  [holds_at(metreqs(throwOff(Animal, Human)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(throwOff(Animal, Human), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8621).
axiom(requires(throwOff(Animal, Human), Time),
    [holds_at(metreqs(throwOff(Animal, Human)), Time)]).

 /*  [holds_at(mounted(Human, Animal), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(throwOff(Animal, Human)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8621).
axiom(holds_at(metreqs(throwOff(Animal, Human)), Time),
    [holds_at(mounted(Human, Animal), Time)]).

 /*  not(happens(throwOff(Animal, Human), Time)) :-
       not(holds_at(mounted(Human, Animal), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8621).

 /*  [holds_at(neg(mounted(Human, Animal)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(throwOff(Animal, Human), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8621).
axiom(not(happens(throwOff(Animal, Human), Time)),
    [holds_at(neg(mounted(Human, Animal)), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8623
% [animal,human,time]
% Happens(ThrowOff(animal,human),time) ->
% !Happens(GetOff(human,animal),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8625

 /*  happens(throwOff(Animal, Human), Time) ->
       not(happens(getOff(Human, Animal), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8625).

 /*  not(happens(getOff(Human, Animal), Time)) :-
       happens(throwOff(Animal, Human), Time).
 */

 /*  [happens(throwOff(Animal, Human), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(getOff(Human, Animal), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8625).
axiom(not(happens(getOff(Human, Animal), Time)),
    [happens(throwOff(Animal, Human), Time)]).

 /*  not(happens(throwOff(Animal, Human), Time)) :-
       happens(getOff(Human, Animal), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8625).

 /*  [happens(getOff(Human, Animal), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(throwOff(Animal, Human), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8625).
axiom(not(happens(throwOff(Animal, Human), Time)),
    [happens(getOff(Human, Animal), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8627
% [animal,human,time]
% Happens(GetOff(human,animal),time) ->
% !Happens(ThrowOff(animal,human),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8629

 /*  happens(getOff(Human, Animal), Time) ->
       not(happens(throwOff(Animal, Human), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8629).

 /*  not(happens(throwOff(Animal, Human), Time)) :-
       happens(getOff(Human, Animal), Time).
 */

 /*  [happens(getOff(Human, Animal), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(throwOff(Animal, Human), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8629).
axiom(not(happens(throwOff(Animal, Human), Time)),
    [happens(getOff(Human, Animal), Time)]).

 /*  not(happens(getOff(Human, Animal), Time)) :-
       happens(throwOff(Animal, Human), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8629).

 /*  [happens(throwOff(Animal, Human), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(getOff(Human, Animal), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8629).
axiom(not(happens(getOff(Human, Animal), Time)),
    [happens(throwOff(Animal, Human), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8631
% [position1,position2,time]
% Accessible(position1,position2,time) <->
% (Neighbor(position1,position2) &
%  !{gate} Sides(position1,position2,gate) &
%          !HoldsAt(Opened(gate),time)).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8635
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8633).

 /*  accessible(Position1, Position2, Time) <->
       not(exists([Gate],
                   (neighbor(Position1, Position2), sides(Position1, Position2, Gate), holds_at(neg(opened(Gate)), Time)))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8633).

 /*  [accessible] <->
       [not, exists, neighbor, sides, holds_at, neg, opened].
 */

 /*  accessible(Position1, Position2, Time) ->
       not(exists([Gate],
                   (neighbor(Position1, Position2), sides(Position1, Position2, Gate), holds_at(neg(opened(Gate)), Time)))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8633).

 /*  not(neighbor(Position1, Position2)) :-
       ( sides(Position1, Position2, Gate),
         holds_at(neg(opened(Gate)), Time)
       ),
       accessible(Position1, Position2, Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8633).

 /*  [sides(Position1, Position2, Gate), holds_at(neg(opened(Gate)), Time), accessible(Position1, Position2, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(neighbor(Position1, Position2))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8633).
axiom(not(neighbor(Position1, Position2)),
   
    [ sides(Position1, Position2, Gate),
      holds_at(neg(opened(Gate)), Time),
      accessible(Position1, Position2, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8633).

 /*  not(sides(Position1, Position2, Gate)) :-
       holds_at(neg(opened(Gate)), Time),
       neighbor(Position1, Position2),
       accessible(Position1, Position2, Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8633).

 /*  [holds_at(neg(opened(Gate)), Time), neighbor(Position1, Position2), accessible(Position1, Position2, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(sides(Position1, Position2, Gate))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8633).
axiom(not(sides(Position1, Position2, Gate)),
   
    [ holds_at(neg(opened(Gate)), Time),
      neighbor(Position1, Position2),
      accessible(Position1, Position2, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8633).

 /*  not(holds_at(neg(opened(Gate)), Time)) :-
       sides(Position1, Position2, Gate),
       neighbor(Position1, Position2),
       accessible(Position1, Position2, Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8633).

 /*  [sides(Position1, Position2, Gate), neighbor(Position1, Position2), accessible(Position1, Position2, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(opened(Gate), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8633).
axiom(holds_at(opened(Gate), Time),
   
    [ sides(Position1, Position2, Gate),
      neighbor(Position1, Position2),
      accessible(Position1, Position2, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8633).

 /*  not(accessible(Position1, Position2, Time)) :-
       neighbor(Position1, Position2),
       sides(Position1, Position2, Gate),
       holds_at(neg(opened(Gate)), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8633).

 /*  [neighbor(Position1, Position2), sides(Position1, Position2, Gate), holds_at(neg(opened(Gate)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(accessible(Position1, Position2, Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8633).
axiom(not(accessible(Position1, Position2, Time)),
   
    [ neighbor(Position1, Position2),
      sides(Position1, Position2, Gate),
      holds_at(neg(opened(Gate)), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8633).

 /*  not(exists([Gate],  (neighbor(Position1, Position2), sides(Position1, Position2, Gate), holds_at(neg(opened(Gate)), Time)))) ->
       accessible(Position1, Position2, Time).
 */

 /*  accessible(Position1, Position2, Time) :-
       (   not(neighbor(Position1, Position2))
       ;   not(sides(Position1, Position2, Gate))
       ;   not(holds_at(neg(opened(Gate)), Time))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8633).

 /*  fix_axiom_head(Time) ->
       
       [  (not(neighbor(Position1, Position2));not(sides(Position1, Position2, Gate));not(holds_at(neg(opened(Gate)), Time))),
          (->),
          (not(neighbor(Position1, Position2));not(sides(Position1, Position2, Gate));holds_at(opened(Gate), Time))
       ].
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8633).

 /*  [(not(neighbor(Position1, Position2));not(sides(Position1, Position2, Gate));holds_at(opened(Gate), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          accessible(Position1, Position2, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8633).
axiom(accessible(Position1, Position2, Time),
   
    [  (not(neighbor(Position1, Position2));not(sides(Position1, Position2, Gate));holds_at(opened(Gate), Time))
    ]).

 /*  neighbor(Position1, Position2) :-
       not(accessible(Position1, Position2, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8633).

 /*  [not(accessible(Position1, Position2, Time))] ->
       ta(Ta_Param,
          tvs1=[],
          tvs2=[],
          neighbor(Position1, Position2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8633).
axiom(neighbor(Position1, Position2),
    [not(accessible(Position1, Position2, Time))]).

 /*  sides(Position1, Position2, Gate) :-
       not(accessible(Position1, Position2, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8633).

 /*  [not(accessible(Position1, Position2, Time))] ->
       ta(Ta_Param5,
          tvs1=[],
          tvs2=[],
          sides(Position1, Position2, Gate)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8633).
axiom(sides(Position1, Position2, Gate),
    [not(accessible(Position1, Position2, Time))]).

 /*  holds_at(neg(opened(Gate)), Time) :-
       not(accessible(Position1, Position2, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8633).

 /*  [not(accessible(Position1, Position2, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(opened(Gate)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8633).
axiom(holds_at(neg(opened(Gate)), Time),
    [not(accessible(Position1, Position2, Time))]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8637
% [animal,position1,position2,time]
% (position1!=position2 &
%  HoldsAt(Pos(animal,position1),time) &
%  HoldsAt(Pos(animal,position2),time+1)) ->
% Accessible(position1,position2,time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8641
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8639).

 /*  diff(Position1, Position2), holds_at(pos(Animal, Position1), Time), holds_at(pos(Animal, Position2), Time+1) ->
       accessible(Position1, Position2, Time).
 */

 /*  accessible(Position1, Position2, Time) :-
       diff(Position1, Position2),
       holds_at(pos(Animal, Position1), Time),
       holds_at(pos(Animal, Position2), Time+1).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8639).

 /*  [diff(Position1, Position2), holds_at(pos(Animal, Position1), Time), holds_at(pos(Animal, Position2), Time4), b(Time, Time4), ignore(Time+1==Time4)] ->
       ta(Time,
          tvs1=[Time, Time+1],
          tvs2=[Time, Time4],
          accessible(Position1, Position2, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8639).
axiom(accessible(Position1, Position2, Time),
   
    [ diff(Position1, Position2),
      holds_at(pos(Animal, Position1), Time),
      holds_at(pos(Animal, Position2), Time4),
      b(Time, Time4)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8639).

 /*  not(holds_at(pos(Animal, Position1), Time)) :-
       holds_at(pos(Animal, Position2), Time+1),
       diff(Position1, Position2),
       not(accessible(Position1, Position2, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8639).

 /*  [holds_at(pos(Animal, Position2), Time5), diff(Position1, Position2), not(accessible(Position1, Position2, Time)), b(Time, Time5), ignore(Time+1==Time5)] ->
       ta(Time,
          tvs1=[Time, Time+1],
          tvs2=[Time, Time5],
          holds_at(neg(pos(Animal, Position1)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8639).
axiom(holds_at(neg(pos(Animal, Position1)), Time),
   
    [ holds_at(pos(Animal, Position2), Time5),
      diff(Position1, Position2),
      not(accessible(Position1, Position2, Time)),
      b(Time, Time5)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8639).

 /*  not(holds_at(pos(Animal, Position2), Time+1)) :-
       holds_at(pos(Animal, Position1), Time),
       diff(Position1, Position2),
       not(accessible(Position1, Position2, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8639).

 /*  [holds_at(pos(Animal, Position1), Time), diff(Position1, Position2), not(accessible(Position1, Position2, Time)), b(Time, Time6), ignore(Time+1==Time6)] ->
       ta(Time,
          tvs1=[Time, Time+1],
          tvs2=[Time, Time6],
          holds_at(neg(pos(Animal, Position2)), Time6)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8639).
axiom(holds_at(neg(pos(Animal, Position2)), Time6),
   
    [ holds_at(pos(Animal, Position1), Time),
      diff(Position2, Position1),
      not(accessible(Position1, Position2, Time)),
      b(Time, Time6)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8643
% [human,time]
% HoldsAt(AbnormalEncroachment(human),time) <->
% (HoldsAt(MountFails(human),time) |
%  ({position,animal1,animal2}
%    HoldsAt(PosDeterminingFluent(human,position),time) &
%    !HoldsAt(ThrowOffFails(animal2,human),time) &
%    Happens(ThrowOff(animal2,human),time) &
%    animal1!=human &
%    Large(animal1) &
%    HoldsAt(Pos(animal1,position),time) &
%    !HoldsAt(Pos(animal1,position),time+1))).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8653
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8645).

 /*  holds_at(abnormalEncroachment(Human), Time) <->
       (   holds_at(mountFails(Human), Time)
       ;   exists([Position, Animal1, Animal2],
                   (holds_at(posDeterminingFluent(Human, Position), Time), holds_at(neg(throwOffFails(Animal2, Human)), Time), happens(throwOff(Animal2, Human), Time), diff(Animal1, Human), large(Animal1), holds_at(pos(Animal1, Position), Time), holds_at(neg(pos(Animal1, Position)), Time+1)))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8645).

 /*  [holds_at, abnormalEncroachment] <->
       
       [  (;),
         holds_at,
         mountFails,
         exists,
         holds_at,
         posDeterminingFluent,
         holds_at,
         neg,
         throwOffFails,
         happens,
         throwOff,
         diff,
         large,
         holds_at,
         pos,
         holds_at,
         neg,
         pos,
          (+)
       ].
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8645).

 /*  holds_at(abnormalEncroachment(Human), Time) ->
       (   holds_at(mountFails(Human), Time)
       ;   exists([Position, Animal1, Animal2],
                   (holds_at(posDeterminingFluent(Human, Position), Time), holds_at(neg(throwOffFails(Animal2, Human)), Time), happens(throwOff(Animal2, Human), Time), diff(Animal1, Human), large(Animal1), holds_at(pos(Animal1, Position), Time), holds_at(neg(pos(Animal1, Position)), Time+1)))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8645).

 /*  not(holds_at(abnormalEncroachment(Human), Time)) :-
       not(holds_at(mountFails(Human), Time)),
       (   not(holds_at(posDeterminingFluent(Human, Position),
                        Time))
       ;   not(holds_at(neg(throwOffFails(Animal2, Human)), Time))
       ;   not(happens(throwOff(Animal2, Human), Time))
       ;   not(diff(Animal1, Human))
       ;   not(large(Animal1))
       ;   not(holds_at(pos(Animal1, Position), Time))
       ;   not(holds_at(neg(pos(Animal1, Position)), Time+1))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8645).

 /*  [holds_at(neg(mountFails(Human)), Time),  (holds_at(neg(posDeterminingFluent(Human, Position)), Time);holds_at(throwOffFails(Animal2, Human), Time);not(happens(throwOff(Animal2, Human), Time));equals(Animal1, Human);not(large(Animal1));holds_at(neg(pos(Animal1, Position)), Time);holds_at(pos(Animal1, Position), Time5)), b(Time, Time5), ignore(Time+1==Time5)] ->
       ta(Time,
          tvs1=[Time, Time+1],
          tvs2=[Time, Time5],
          holds_at(neg(abnormalEncroachment(Human)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8645).
axiom(holds_at(neg(abnormalEncroachment(Human)), Time),
   
    [ holds_at(neg(mountFails(Human)), Time),
       (holds_at(neg(posDeterminingFluent(Human, Position)), Time);holds_at(throwOffFails(Animal2, Human), Time);not(happens(throwOff(Animal2, Human), Time));equals(Human, Animal1);not(large(Animal1));holds_at(neg(pos(Animal1, Position)), Time);holds_at(pos(Animal1, Position), Time5)),
      b(Time, Time5)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8645).

 /*  holds_at(mountFails(Human), Time) :-
       (   not(holds_at(posDeterminingFluent(Human, Position),
                        Time))
       ;   not(holds_at(neg(throwOffFails(Animal2, Human)), Time))
       ;   not(happens(throwOff(Animal2, Human), Time))
       ;   not(diff(Animal1, Human))
       ;   not(large(Animal1))
       ;   not(holds_at(pos(Animal1, Position), Time))
       ;   not(holds_at(neg(pos(Animal1, Position)), Time+1))
       ),
       holds_at(abnormalEncroachment(Human), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8645).

 /*  [(holds_at(neg(posDeterminingFluent(Human, Position)), Time);holds_at(throwOffFails(Animal2, Human), Time);not(happens(throwOff(Animal2, Human), Time));equals(Animal1, Human);not(large(Animal1));holds_at(neg(pos(Animal1, Position)), Time);holds_at(pos(Animal1, Position), Time6)), holds_at(abnormalEncroachment(Human), Time), b(Time, Time6), ignore(Time+1==Time6)] ->
       ta(Time,
          tvs1=[Time, Time+1],
          tvs2=[Time, Time6],
          holds_at(mountFails(Human), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8645).
axiom(holds_at(mountFails(Human), Time),
   
    [  (holds_at(neg(posDeterminingFluent(Human, Position)), Time);holds_at(throwOffFails(Animal2, Human), Time);not(happens(throwOff(Animal2, Human), Time));equals(Human, Animal1);not(large(Animal1));holds_at(neg(pos(Animal1, Position)), Time);holds_at(pos(Animal1, Position), Time6)),
      holds_at(abnormalEncroachment(Human), Time),
      b(Time, Time6)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8645).

 /*  holds_at(posDeterminingFluent(Human, Position), Time) :-
       not(holds_at(mountFails(Human), Time)),
       holds_at(abnormalEncroachment(Human), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8645).

 /*  [holds_at(neg(mountFails(Human)), Time), holds_at(abnormalEncroachment(Human), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(posDeterminingFluent(Human, Position), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8645).
axiom(holds_at(posDeterminingFluent(Human, Position), Time),
   
    [ holds_at(neg(mountFails(Human)), Time),
      holds_at(abnormalEncroachment(Human), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8645).

 /*  holds_at(neg(throwOffFails(Animal2, Human)), Time) :-
       not(holds_at(mountFails(Human), Time)),
       holds_at(abnormalEncroachment(Human), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8645).

 /*  [holds_at(neg(mountFails(Human)), Time), holds_at(abnormalEncroachment(Human), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(throwOffFails(Animal2, Human)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8645).
axiom(holds_at(neg(throwOffFails(Animal2, Human)), Time),
   
    [ holds_at(neg(mountFails(Human)), Time),
      holds_at(abnormalEncroachment(Human), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8645).

 /*  happens(throwOff(Animal2, Human), Time) :-
       not(holds_at(mountFails(Human), Time)),
       holds_at(abnormalEncroachment(Human), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8645).

 /*  [holds_at(neg(mountFails(Human)), Time), holds_at(abnormalEncroachment(Human), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(throwOff(Animal2, Human), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8645).
axiom(happens(throwOff(Animal2, Human), Time),
   
    [ holds_at(neg(mountFails(Human)), Time),
      holds_at(abnormalEncroachment(Human), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8645).

 /*  large(Animal1) :-
       not(holds_at(mountFails(Human), Time)),
       holds_at(abnormalEncroachment(Human), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8645).

 /*  [holds_at(neg(mountFails(Human)), Time), holds_at(abnormalEncroachment(Human), Time)] ->
       ta(Time, tvs1=[Time], tvs2=[Time], large(Animal1)).
 */
axiom(large(Animal1),
   
    [ holds_at(neg(mountFails(Human)), Time),
      holds_at(abnormalEncroachment(Human), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8645).

 /*  holds_at(pos(Animal1, Position), Time) :-
       not(holds_at(mountFails(Human), Time)),
       holds_at(abnormalEncroachment(Human), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8645).

 /*  [holds_at(neg(mountFails(Human)), Time), holds_at(abnormalEncroachment(Human), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(pos(Animal1, Position), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8645).
axiom(holds_at(pos(Animal1, Position), Time),
   
    [ holds_at(neg(mountFails(Human)), Time),
      holds_at(abnormalEncroachment(Human), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8645).

 /*  holds_at(neg(pos(Animal1, Position)), Time+1) :-
       not(holds_at(mountFails(Human), Time)),
       holds_at(abnormalEncroachment(Human), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8645).

 /*  [holds_at(neg(mountFails(Human)), Time), holds_at(abnormalEncroachment(Human), Time), b(Time, Time7), ignore(Time+1==Time7)] ->
       ta(Time,
          tvs1=[Time, Time+1],
          tvs2=[Time, Time7],
          holds_at(neg(pos(Animal1, Position)), Time7)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8645).
axiom(holds_at(neg(pos(Animal1, Position)), Time7),
   
    [ holds_at(neg(mountFails(Human)), Time),
      holds_at(abnormalEncroachment(Human), Time),
      b(Time, Time7)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8645).

 /*  holds_at(mountFails(Human), Time);exists([Position, Animal1, Animal2],  (holds_at(posDeterminingFluent(Human, Position), Time), holds_at(neg(throwOffFails(Animal2, Human)), Time), happens(throwOff(Animal2, Human), Time), diff(Animal1, Human), large(Animal1), holds_at(pos(Animal1, Position), Time), holds_at(neg(pos(Animal1, Position)), Time+1))) ->
       holds_at(abnormalEncroachment(Human), Time).
 */

 /*  holds_at(abnormalEncroachment(Human), Time) :-
       (   holds_at(mountFails(Human), Time)
       ;   holds_at(posDeterminingFluent(Human, Position), Time),
           holds_at(neg(throwOffFails(Animal2, Human)), Time),
           happens(throwOff(Animal2, Human), Time),
           diff(Animal1, Human),
           large(Animal1),
           holds_at(pos(Animal1, Position), Time),
           holds_at(neg(pos(Animal1, Position)), Time+1)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8645).

 /*  [(holds_at(mountFails(Human), Time);holds_at(posDeterminingFluent(Human, Position), Time), holds_at(neg(throwOffFails(Animal2, Human)), Time), happens(throwOff(Animal2, Human), Time), diff(Animal1, Human), large(Animal1), holds_at(pos(Animal1, Position), Time), holds_at(neg(pos(Animal1, Position)), Time8)), b(Time, Time8), ignore(Time+1==Time8)] ->
       ta(Time,
          tvs1=[Time, Time+1],
          tvs2=[Time, Time8],
          holds_at(abnormalEncroachment(Human), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8645).
axiom(holds_at(abnormalEncroachment(Human), Time),
   
    [  (holds_at(mountFails(Human), Time);holds_at(posDeterminingFluent(Human, Position), Time), holds_at(neg(throwOffFails(Animal2, Human)), Time), happens(throwOff(Animal2, Human), Time), diff(Human, Animal1), large(Animal1), holds_at(pos(Animal1, Position), Time), holds_at(neg(pos(Animal1, Position)), Time8)),
      b(Time, Time8)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8645).

 /*  not(holds_at(mountFails(Human), Time)) :-
       not(holds_at(abnormalEncroachment(Human), Time)).
 */

 /*  [holds_at(neg(abnormalEncroachment(Human)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(mountFails(Human)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8645).
axiom(holds_at(neg(mountFails(Human)), Time),
    [holds_at(neg(abnormalEncroachment(Human)), Time)]).

 /*  not(holds_at(posDeterminingFluent(Human, Position), Time)) :-
       ( holds_at(neg(throwOffFails(Animal2, Human)), Time),
         happens(throwOff(Animal2, Human), Time),
         diff(Animal1, Human),
         large(Animal1),
         holds_at(pos(Animal1, Position), Time),
         holds_at(neg(pos(Animal1, Position)), Time+1)
       ),
       not(holds_at(abnormalEncroachment(Human), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8645).

 /*  [holds_at(neg(throwOffFails(Animal2, Human)), Time), happens(throwOff(Animal2, Human), Time), diff(Animal1, Human), large(Animal1), holds_at(pos(Animal1, Position), Time), holds_at(neg(pos(Animal1, Position)), Time9), holds_at(neg(abnormalEncroachment(Human)), Time), b(Time, Time9), ignore(Time+1==Time9)] ->
       ta(Time,
          tvs1=[Time, Time+1],
          tvs2=[Time, Time9],
          holds_at(neg(posDeterminingFluent(Human, Position)),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8645).
axiom(holds_at(neg(posDeterminingFluent(Human, Position)), Time),
   
    [ holds_at(neg(throwOffFails(Animal2, Human)), Time),
      happens(throwOff(Animal2, Human), Time),
      diff(Human, Animal1),
      large(Animal1),
      holds_at(pos(Animal1, Position), Time),
      holds_at(neg(pos(Animal1, Position)), Time9),
      holds_at(neg(abnormalEncroachment(Human)), Time),
      b(Time, Time9)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8645).

 /*  not(holds_at(neg(throwOffFails(Animal2, Human)), Time)) :-
       ( happens(throwOff(Animal2, Human), Time),
         diff(Animal1, Human),
         large(Animal1),
         holds_at(pos(Animal1, Position), Time),
         holds_at(neg(pos(Animal1, Position)), Time+1)
       ),
       holds_at(posDeterminingFluent(Human, Position), Time),
       not(holds_at(abnormalEncroachment(Human), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8645).

 /*  [happens(throwOff(Animal2, Human), Time), diff(Animal1, Human), large(Animal1), holds_at(pos(Animal1, Position), Time), holds_at(neg(pos(Animal1, Position)), Time10), holds_at(posDeterminingFluent(Human, Position), Time), holds_at(neg(abnormalEncroachment(Human)), Time), b(Time, Time10), ignore(Time+1==Time10)] ->
       ta(Time,
          tvs1=[Time, Time+1],
          tvs2=[Time, Time10],
          holds_at(throwOffFails(Animal2, Human), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8645).
axiom(holds_at(throwOffFails(Animal2, Human), Time),
   
    [ happens(throwOff(Animal2, Human), Time),
      diff(Human, Animal1),
      large(Animal1),
      holds_at(pos(Animal1, Position), Time),
      holds_at(neg(pos(Animal1, Position)), Time10),
      holds_at(posDeterminingFluent(Human, Position), Time),
      holds_at(neg(abnormalEncroachment(Human)), Time),
      b(Time, Time10)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8645).

 /*  not(happens(throwOff(Animal2, Human), Time)) :-
       ( diff(Animal1, Human),
         large(Animal1),
         holds_at(pos(Animal1, Position), Time),
         holds_at(neg(pos(Animal1, Position)), Time+1)
       ),
       holds_at(neg(throwOffFails(Animal2, Human)), Time),
       holds_at(posDeterminingFluent(Human, Position), Time),
       not(holds_at(abnormalEncroachment(Human), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8645).

 /*  [diff(Animal1, Human), large(Animal1), holds_at(pos(Animal1, Position), Time), holds_at(neg(pos(Animal1, Position)), Time11), holds_at(neg(throwOffFails(Animal2, Human)), Time), holds_at(posDeterminingFluent(Human, Position), Time), holds_at(neg(abnormalEncroachment(Human)), Time), b(Time, Time11), ignore(Time+1==Time11)] ->
       ta(Time,
          tvs1=[Time, Time+1],
          tvs2=[Time, Time11],
          not(happens(throwOff(Animal2, Human), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8645).
axiom(not(happens(throwOff(Animal2, Human), Time)),
   
    [ diff(Human, Animal1),
      large(Animal1),
      holds_at(pos(Animal1, Position), Time),
      holds_at(neg(pos(Animal1, Position)), Time11),
      holds_at(neg(throwOffFails(Animal2, Human)), Time),
      holds_at(posDeterminingFluent(Human, Position), Time),
      holds_at(neg(abnormalEncroachment(Human)), Time),
      b(Time, Time11)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8645).

 /*  not(large(Animal1)) :-
       ( holds_at(pos(Animal1, Position), Time),
         holds_at(neg(pos(Animal1, Position)), Time+1)
       ),
       diff(Animal1, Human),
       happens(throwOff(Animal2, Human), Time),
       holds_at(neg(throwOffFails(Animal2, Human)), Time),
       holds_at(posDeterminingFluent(Human, Position), Time),
       not(holds_at(abnormalEncroachment(Human), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8645).

 /*  [holds_at(pos(Animal1, Position), Time), holds_at(neg(pos(Animal1, Position)), Time12), diff(Animal1, Human), happens(throwOff(Animal2, Human), Time), holds_at(neg(throwOffFails(Animal2, Human)), Time), holds_at(posDeterminingFluent(Human, Position), Time), holds_at(neg(abnormalEncroachment(Human)), Time), b(Time, Time12), ignore(Time+1==Time12)] ->
       ta(Time,
          tvs1=[Time, Time+1],
          tvs2=[Time, Time12],
          not(large(Animal1))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8645).
axiom(not(large(Animal1)),
   
    [ holds_at(pos(Animal1, Position), Time),
      holds_at(neg(pos(Animal1, Position)), Time12),
      diff(Animal1, Human),
      happens(throwOff(Animal2, Human), Time),
      holds_at(neg(throwOffFails(Animal2, Human)), Time),
      holds_at(posDeterminingFluent(Human, Position), Time),
      holds_at(neg(abnormalEncroachment(Human)), Time),
      b(Time, Time12)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8645).

 /*  not(holds_at(pos(Animal1, Position), Time)) :-
       holds_at(neg(pos(Animal1, Position)), Time+1),
       large(Animal1),
       diff(Animal1, Human),
       happens(throwOff(Animal2, Human), Time),
       holds_at(neg(throwOffFails(Animal2, Human)), Time),
       holds_at(posDeterminingFluent(Human, Position), Time),
       not(holds_at(abnormalEncroachment(Human), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8645).

 /*  [holds_at(neg(pos(Animal1, Position)), Time13), large(Animal1), diff(Animal1, Human), happens(throwOff(Animal2, Human), Time), holds_at(neg(throwOffFails(Animal2, Human)), Time), holds_at(posDeterminingFluent(Human, Position), Time), holds_at(neg(abnormalEncroachment(Human)), Time), b(Time, Time13), ignore(Time+1==Time13)] ->
       ta(Time,
          tvs1=[Time, Time+1],
          tvs2=[Time, Time13],
          holds_at(neg(pos(Animal1, Position)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8645).
axiom(holds_at(neg(pos(Animal1, Position)), Time),
   
    [ holds_at(neg(pos(Animal1, Position)), Time13),
      large(Animal1),
      diff(Animal1, Human),
      happens(throwOff(Animal2, Human), Time),
      holds_at(neg(throwOffFails(Animal2, Human)), Time),
      holds_at(posDeterminingFluent(Human, Position), Time),
      holds_at(neg(abnormalEncroachment(Human)), Time),
      b(Time, Time13)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8645).

 /*  not(holds_at(neg(pos(Animal1, Position)), Time+1)) :-
       holds_at(pos(Animal1, Position), Time),
       large(Animal1),
       diff(Animal1, Human),
       happens(throwOff(Animal2, Human), Time),
       holds_at(neg(throwOffFails(Animal2, Human)), Time),
       holds_at(posDeterminingFluent(Human, Position), Time),
       not(holds_at(abnormalEncroachment(Human), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8645).

 /*  [holds_at(pos(Animal1, Position), Time), large(Animal1), diff(Animal1, Human), happens(throwOff(Animal2, Human), Time), holds_at(neg(throwOffFails(Animal2, Human)), Time), holds_at(posDeterminingFluent(Human, Position), Time), holds_at(neg(abnormalEncroachment(Human)), Time), b(Time, Time14), ignore(Time+1==Time14)] ->
       ta(Time,
          tvs1=[Time, Time+1],
          tvs2=[Time, Time14],
          holds_at(pos(Animal1, Position), Time14)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8645).
axiom(holds_at(pos(Animal1, Position), Time14),
   
    [ holds_at(pos(Animal1, Position), Time),
      large(Animal1),
      diff(Animal1, Human),
      happens(throwOff(Animal2, Human), Time),
      holds_at(neg(throwOffFails(Animal2, Human)), Time),
      holds_at(posDeterminingFluent(Human, Position), Time),
      holds_at(neg(abnormalEncroachment(Human)), Time),
      b(Time, Time14)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8655
% [animal1,animal2,position,time]
% HoldsAt(Pos(animal1,position),time) &
% !HoldsAt(Pos(animal1,position),time+1) &
% !HoldsAt(Pos(animal2,position),time) &
% HoldsAt(Pos(animal2,position),time+1) ->
% (!Large(animal1) |
%  !Large(animal2) |
%  ({human} human=animal2 & HoldsAt(AbnormalEncroachment(human),time))).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8662
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8657).

 /*  holds_at(pos(Animal1, Position), Time), holds_at(neg(pos(Animal1, Position)), Time+1), holds_at(neg(pos(Animal2, Position)), Time), holds_at(pos(Animal2, Position), Time+1) ->
       (   not(large(Animal1))
       ;   not(large(Animal2))
       ;   exists([Human],
                   (equals(Human, Animal2), holds_at(abnormalEncroachment(Human), Time)))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8657).

 /*  not(holds_at(pos(Animal1, Position), Time)) :-
       ( holds_at(neg(pos(Animal1, Position)), Time+1),
         holds_at(neg(pos(Animal2, Position)), Time),
         holds_at(pos(Animal2, Position), Time+1)
       ),
       large(Animal1),
       large(Animal2),
       (   not(equals(Human, Animal2))
       ;   not(holds_at(abnormalEncroachment(Human), Time))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8657).

 /*  [holds_at(neg(pos(Animal1, Position)), Time5), holds_at(neg(pos(Animal2, Position)), Time), holds_at(pos(Animal2, Position), Time5), large(Animal1), large(Animal2),  (not(equals(Human, Animal2));holds_at(neg(abnormalEncroachment(Human)), Time)), b(Time, Time5), ignore(Time+1==Time5)] ->
       ta(Time,
          tvs1=[Time, Time+1],
          tvs2=[Time, Time5],
          holds_at(neg(pos(Animal1, Position)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8657).
axiom(holds_at(neg(pos(Animal1, Position)), Time),
   
    [ holds_at(neg(pos(Animal1, Position)), Time5),
      holds_at(neg(pos(Animal2, Position)), Time),
      holds_at(pos(Animal2, Position), Time5),
      large(Animal1),
      large(Animal2),
       (not(equals(Human, Animal2));holds_at(neg(abnormalEncroachment(Human)), Time)),
      b(Time, Time5)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8657).

 /*  not(holds_at(neg(pos(Animal1, Position)), Time+1)) :-
       ( holds_at(neg(pos(Animal2, Position)), Time),
         holds_at(pos(Animal2, Position), Time+1)
       ),
       holds_at(pos(Animal1, Position), Time),
       large(Animal1),
       large(Animal2),
       (   not(equals(Human, Animal2))
       ;   not(holds_at(abnormalEncroachment(Human), Time))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8657).

 /*  [holds_at(neg(pos(Animal2, Position)), Time), holds_at(pos(Animal2, Position), Time6), holds_at(pos(Animal1, Position), Time), large(Animal1), large(Animal2),  (not(equals(Human, Animal2));holds_at(neg(abnormalEncroachment(Human)), Time)), b(Time, Time6), ignore(Time+1==Time6)] ->
       ta(Time,
          tvs1=[Time, Time+1],
          tvs2=[Time, Time6],
          holds_at(pos(Animal1, Position), Time6)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8657).
axiom(holds_at(pos(Animal1, Position), Time6),
   
    [ holds_at(neg(pos(Animal2, Position)), Time),
      holds_at(pos(Animal2, Position), Time6),
      holds_at(pos(Animal1, Position), Time),
      large(Animal1),
      large(Animal2),
       (not(equals(Human, Animal2));holds_at(neg(abnormalEncroachment(Human)), Time)),
      b(Time, Time6)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8657).

 /*  not(holds_at(neg(pos(Animal2, Position)), Time)) :-
       holds_at(pos(Animal2, Position), Time+1),
       holds_at(neg(pos(Animal1, Position)), Time+1),
       holds_at(pos(Animal1, Position), Time),
       large(Animal1),
       large(Animal2),
       (   not(equals(Human, Animal2))
       ;   not(holds_at(abnormalEncroachment(Human), Time))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8657).

 /*  [holds_at(pos(Animal2, Position), Time7), holds_at(neg(pos(Animal1, Position)), Time7), holds_at(pos(Animal1, Position), Time), large(Animal1), large(Animal2),  (not(equals(Human, Animal2));holds_at(neg(abnormalEncroachment(Human)), Time)), b(Time, Time7), ignore(Time+1==Time7)] ->
       ta(Time,
          tvs1=[Time, Time+1],
          tvs2=[Time, Time7],
          holds_at(pos(Animal2, Position), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8657).
axiom(holds_at(pos(Animal2, Position), Time),
   
    [ holds_at(pos(Animal2, Position), Time7),
      holds_at(neg(pos(Animal1, Position)), Time7),
      holds_at(pos(Animal1, Position), Time),
      large(Animal1),
      large(Animal2),
       (not(equals(Animal2, Human));holds_at(neg(abnormalEncroachment(Human)), Time)),
      b(Time, Time7)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8657).

 /*  not(holds_at(pos(Animal2, Position), Time+1)) :-
       holds_at(neg(pos(Animal2, Position)), Time),
       holds_at(neg(pos(Animal1, Position)), Time+1),
       holds_at(pos(Animal1, Position), Time),
       large(Animal1),
       large(Animal2),
       (   not(equals(Human, Animal2))
       ;   not(holds_at(abnormalEncroachment(Human), Time))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8657).

 /*  [holds_at(neg(pos(Animal2, Position)), Time), holds_at(neg(pos(Animal1, Position)), Time8), holds_at(pos(Animal1, Position), Time), large(Animal1), large(Animal2),  (not(equals(Human, Animal2));holds_at(neg(abnormalEncroachment(Human)), Time)), b(Time, Time8), ignore(Time+1==Time8)] ->
       ta(Time,
          tvs1=[Time, Time+1],
          tvs2=[Time, Time8],
          holds_at(neg(pos(Animal2, Position)), Time8)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8657).
axiom(holds_at(neg(pos(Animal2, Position)), Time8),
   
    [ holds_at(neg(pos(Animal2, Position)), Time),
      holds_at(neg(pos(Animal1, Position)), Time8),
      holds_at(pos(Animal1, Position), Time),
      large(Animal1),
      large(Animal2),
       (not(equals(Animal2, Human));holds_at(neg(abnormalEncroachment(Human)), Time)),
      b(Time, Time8)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8657).

 /*  not(large(Animal1)) :-
       ( large(Animal2),
         (   not(equals(Human, Animal2))
         ;   not(holds_at(abnormalEncroachment(Human), Time))
         )
       ),
       holds_at(pos(Animal1, Position), Time),
       holds_at(neg(pos(Animal1, Position)), Time+1),
       holds_at(neg(pos(Animal2, Position)), Time),
       holds_at(pos(Animal2, Position), Time+1).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8657).

 /*  fix_axiom_head(Time) ->
       
       [  (not(equals(Human, Animal2));not(holds_at(abnormalEncroachment(Human), Time))),
          (->),
          (not(equals(Human, Animal2));holds_at(neg(abnormalEncroachment(Human)), Time))
       ].
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8657).

 /*  [large(Animal2),  (not(equals(Human, Animal2));holds_at(neg(abnormalEncroachment(Human)), Time)), holds_at(pos(Animal1, Position), Time), holds_at(neg(pos(Animal1, Position)), Time9), holds_at(neg(pos(Animal2, Position)), Time), holds_at(pos(Animal2, Position), Time9), b(Time, Time9), ignore(Time+1==Time9)] ->
       ta(Time,
          tvs1=[Time, Time+1],
          tvs2=[Time, Time9],
          not(large(Animal1))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8657).
axiom(not(large(Animal1)),
   
    [ large(Animal2),
       (not(equals(Human, Animal2));holds_at(neg(abnormalEncroachment(Human)), Time)),
      holds_at(pos(Animal1, Position), Time),
      holds_at(neg(pos(Animal1, Position)), Time9),
      holds_at(neg(pos(Animal2, Position)), Time),
      holds_at(pos(Animal2, Position), Time9),
      b(Time, Time9)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8657).

 /*  not(large(Animal2)) :-
       (   not(equals(Human, Animal2))
       ;   not(holds_at(abnormalEncroachment(Human), Time))
       ),
       large(Animal1),
       holds_at(pos(Animal1, Position), Time),
       holds_at(neg(pos(Animal1, Position)), Time+1),
       holds_at(neg(pos(Animal2, Position)), Time),
       holds_at(pos(Animal2, Position), Time+1).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8657).

 /*  fix_axiom_head(Time) ->
       
       [  (not(equals(Human, Animal2));not(holds_at(abnormalEncroachment(Human), Time))),
          (->),
          (not(equals(Human, Animal2));holds_at(neg(abnormalEncroachment(Human)), Time))
       ].
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8657).

 /*  [(not(equals(Human, Animal2));holds_at(neg(abnormalEncroachment(Human)), Time)), large(Animal1), holds_at(pos(Animal1, Position), Time), holds_at(neg(pos(Animal1, Position)), Time10), holds_at(neg(pos(Animal2, Position)), Time), holds_at(pos(Animal2, Position), Time10), b(Time, Time10), ignore(Time+1==Time10)] ->
       ta(Time,
          tvs1=[Time, Time+1],
          tvs2=[Time, Time10],
          not(large(Animal2))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8657).
axiom(not(large(Animal2)),
   
    [  (not(equals(Animal2, Human));holds_at(neg(abnormalEncroachment(Human)), Time)),
      large(Animal1),
      holds_at(pos(Animal1, Position), Time),
      holds_at(neg(pos(Animal1, Position)), Time10),
      holds_at(neg(pos(Animal2, Position)), Time),
      holds_at(pos(Animal2, Position), Time10),
      b(Time, Time10)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8657).

 /*  holds_at(abnormalEncroachment(Human), Time) :-
       large(Animal2),
       large(Animal1),
       holds_at(pos(Animal1, Position), Time),
       holds_at(neg(pos(Animal1, Position)), Time+1),
       holds_at(neg(pos(Animal2, Position)), Time),
       holds_at(pos(Animal2, Position), Time+1).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8657).

 /*  [large(Animal2), large(Animal1), holds_at(pos(Animal1, Position), Time), holds_at(neg(pos(Animal1, Position)), Time11), holds_at(neg(pos(Animal2, Position)), Time), holds_at(pos(Animal2, Position), Time11), b(Time, Time11), ignore(Time+1==Time11)] ->
       ta(Time,
          tvs1=[Time, Time+1],
          tvs2=[Time, Time11],
          holds_at(abnormalEncroachment(Human), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8657).
axiom(holds_at(abnormalEncroachment(Human), Time),
   
    [ large(Animal2),
      large(Animal1),
      holds_at(pos(Animal1, Position), Time),
      holds_at(neg(pos(Animal1, Position)), Time11),
      holds_at(neg(pos(Animal2, Position)), Time),
      holds_at(pos(Animal2, Position), Time11),
      b(Time, Time11)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8664
% [animal1,animal2,position1,position2,time]
% animal1!=% animal2 &
% Large(animal1) & Large(animal2) &
% HoldsAt(Pos(animal1,position1),time) &
% HoldsAt(Pos(animal1,position2),time+1) &
% HoldsAt(Pos(animal2,position1),time) &
% HoldsAt(Pos(animal2,position2),time+1) ->
% !{gate} Sides(position1,position2,gate).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8671
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8666).

 /*  diff(Animal1, Animal2), large(Animal1), large(Animal2), holds_at(pos(Animal1, Position1), Time), holds_at(pos(Animal1, Position2), Time+1), holds_at(pos(Animal2, Position1), Time), holds_at(pos(Animal2, Position2), Time+1) ->
       not(exists([Gate], sides(Position1, Position2, Gate))).
 */

 /*  not(sides(Position1, Position2, Gate)) :-
       diff(Animal1, Animal2),
       large(Animal1),
       large(Animal2),
       holds_at(pos(Animal1, Position1), Time),
       holds_at(pos(Animal1, Position2), Time+1),
       holds_at(pos(Animal2, Position1), Time),
       holds_at(pos(Animal2, Position2), Time+1).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8666).

 /*  [diff(Animal1, Animal2), large(Animal1), large(Animal2), holds_at(pos(Animal1, Position1), Time), holds_at(pos(Animal1, Position2), Time6), holds_at(pos(Animal2, Position1), Time), holds_at(pos(Animal2, Position2), Time6), b(Time, Time6), ignore(Time+1==Time6)] ->
       ta(Time,
          tvs1=[Time, Time+1],
          tvs2=[Time, Time6],
          not(sides(Position1, Position2, Gate))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8666).
axiom(not(sides(Position1, Position2, Gate)),
   
    [ diff(Animal1, Animal2),
      large(Animal1),
      large(Animal2),
      holds_at(pos(Animal1, Position1), Time),
      holds_at(pos(Animal1, Position2), Time6),
      holds_at(pos(Animal2, Position1), Time),
      holds_at(pos(Animal2, Position2), Time6),
      b(Time, Time6)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8666).

 /*  not(large(Animal1)) :-
       ( large(Animal2),
         holds_at(pos(Animal1, Position1), Time),
         holds_at(pos(Animal1, Position2), Time+1),
         holds_at(pos(Animal2, Position1), Time),
         holds_at(pos(Animal2, Position2), Time+1)
       ),
       diff(Animal1, Animal2),
       sides(Position1, Position2, Gate).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8666).

 /*  [large(Animal2), holds_at(pos(Animal1, Position1), Time), holds_at(pos(Animal1, Position2), Time7), holds_at(pos(Animal2, Position1), Time), holds_at(pos(Animal2, Position2), Time7), diff(Animal1, Animal2), sides(Position1, Position2, Gate), b(Time, Time7), ignore(Time+1==Time7)] ->
       ta(Time,
          tvs1=[Time, Time+1],
          tvs2=[Time, Time7],
          not(large(Animal1))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8666).
axiom(not(large(Animal1)),
   
    [ large(Animal2),
      holds_at(pos(Animal1, Position1), Time),
      holds_at(pos(Animal1, Position2), Time7),
      holds_at(pos(Animal2, Position1), Time),
      holds_at(pos(Animal2, Position2), Time7),
      diff(Animal1, Animal2),
      sides(Position1, Position2, Gate),
      b(Time, Time7)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8666).

 /*  not(large(Animal2)) :-
       ( holds_at(pos(Animal1, Position1), Time),
         holds_at(pos(Animal1, Position2), Time+1),
         holds_at(pos(Animal2, Position1), Time),
         holds_at(pos(Animal2, Position2), Time+1)
       ),
       large(Animal1),
       diff(Animal1, Animal2),
       sides(Position1, Position2, Gate).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8666).

 /*  [holds_at(pos(Animal1, Position1), Time), holds_at(pos(Animal1, Position2), Time8), holds_at(pos(Animal2, Position1), Time), holds_at(pos(Animal2, Position2), Time8), large(Animal1), diff(Animal1, Animal2), sides(Position1, Position2, Gate), b(Time, Time8), ignore(Time+1==Time8)] ->
       ta(Time,
          tvs1=[Time, Time+1],
          tvs2=[Time, Time8],
          not(large(Animal2))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8666).
axiom(not(large(Animal2)),
   
    [ holds_at(pos(Animal1, Position1), Time),
      holds_at(pos(Animal1, Position2), Time8),
      holds_at(pos(Animal2, Position1), Time),
      holds_at(pos(Animal2, Position2), Time8),
      large(Animal1),
      diff(Animal2, Animal1),
      sides(Position1, Position2, Gate),
      b(Time, Time8)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8666).

 /*  not(holds_at(pos(Animal1, Position1), Time)) :-
       ( holds_at(pos(Animal1, Position2), Time+1),
         holds_at(pos(Animal2, Position1), Time),
         holds_at(pos(Animal2, Position2), Time+1)
       ),
       large(Animal2),
       large(Animal1),
       diff(Animal1, Animal2),
       sides(Position1, Position2, Gate).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8666).

 /*  [holds_at(pos(Animal1, Position2), Time9), holds_at(pos(Animal2, Position1), Time), holds_at(pos(Animal2, Position2), Time9), large(Animal2), large(Animal1), diff(Animal1, Animal2), sides(Position1, Position2, Gate), b(Time, Time9), ignore(Time+1==Time9)] ->
       ta(Time,
          tvs1=[Time, Time+1],
          tvs2=[Time, Time9],
          holds_at(neg(pos(Animal1, Position1)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8666).
axiom(holds_at(neg(pos(Animal1, Position1)), Time),
   
    [ holds_at(pos(Animal1, Position2), Time9),
      holds_at(pos(Animal2, Position1), Time),
      holds_at(pos(Animal2, Position2), Time9),
      large(Animal2),
      large(Animal1),
      diff(Animal1, Animal2),
      sides(Position1, Position2, Gate),
      b(Time, Time9)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8666).

 /*  not(holds_at(pos(Animal1, Position2), Time+1)) :-
       ( holds_at(pos(Animal2, Position1), Time),
         holds_at(pos(Animal2, Position2), Time+1)
       ),
       holds_at(pos(Animal1, Position1), Time),
       large(Animal2),
       large(Animal1),
       diff(Animal1, Animal2),
       sides(Position1, Position2, Gate).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8666).

 /*  [holds_at(pos(Animal2, Position1), Time), holds_at(pos(Animal2, Position2), Time10), holds_at(pos(Animal1, Position1), Time), large(Animal2), large(Animal1), diff(Animal1, Animal2), sides(Position1, Position2, Gate), b(Time, Time10), ignore(Time+1==Time10)] ->
       ta(Time,
          tvs1=[Time, Time+1],
          tvs2=[Time, Time10],
          holds_at(neg(pos(Animal1, Position2)), Time10)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8666).
axiom(holds_at(neg(pos(Animal1, Position2)), Time10),
   
    [ holds_at(pos(Animal2, Position1), Time),
      holds_at(pos(Animal2, Position2), Time10),
      holds_at(pos(Animal1, Position1), Time),
      large(Animal2),
      large(Animal1),
      diff(Animal1, Animal2),
      sides(Position1, Position2, Gate),
      b(Time, Time10)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8666).

 /*  not(holds_at(pos(Animal2, Position1), Time)) :-
       holds_at(pos(Animal2, Position2), Time+1),
       holds_at(pos(Animal1, Position2), Time+1),
       holds_at(pos(Animal1, Position1), Time),
       large(Animal2),
       large(Animal1),
       diff(Animal1, Animal2),
       sides(Position1, Position2, Gate).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8666).

 /*  [holds_at(pos(Animal2, Position2), Time11), holds_at(pos(Animal1, Position2), Time11), holds_at(pos(Animal1, Position1), Time), large(Animal2), large(Animal1), diff(Animal1, Animal2), sides(Position1, Position2, Gate), b(Time, Time11), ignore(Time+1==Time11)] ->
       ta(Time,
          tvs1=[Time, Time+1],
          tvs2=[Time, Time11],
          holds_at(neg(pos(Animal2, Position1)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8666).
axiom(holds_at(neg(pos(Animal2, Position1)), Time),
   
    [ holds_at(pos(Animal2, Position2), Time11),
      holds_at(pos(Animal1, Position2), Time11),
      holds_at(pos(Animal1, Position1), Time),
      large(Animal2),
      large(Animal1),
      diff(Animal2, Animal1),
      sides(Position1, Position2, Gate),
      b(Time, Time11)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8666).

 /*  not(holds_at(pos(Animal2, Position2), Time+1)) :-
       holds_at(pos(Animal2, Position1), Time),
       holds_at(pos(Animal1, Position2), Time+1),
       holds_at(pos(Animal1, Position1), Time),
       large(Animal2),
       large(Animal1),
       diff(Animal1, Animal2),
       sides(Position1, Position2, Gate).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8666).

 /*  [holds_at(pos(Animal2, Position1), Time), holds_at(pos(Animal1, Position2), Time12), holds_at(pos(Animal1, Position1), Time), large(Animal2), large(Animal1), diff(Animal1, Animal2), sides(Position1, Position2, Gate), b(Time, Time12), ignore(Time+1==Time12)] ->
       ta(Time,
          tvs1=[Time, Time+1],
          tvs2=[Time, Time12],
          holds_at(neg(pos(Animal2, Position2)), Time12)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8666).
axiom(holds_at(neg(pos(Animal2, Position2)), Time12),
   
    [ holds_at(pos(Animal2, Position1), Time),
      holds_at(pos(Animal1, Position2), Time12),
      holds_at(pos(Animal1, Position1), Time),
      large(Animal2),
      large(Animal1),
      diff(Animal2, Animal1),
      sides(Position1, Position2, Gate),
      b(Time, Time12)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8673
% [animal1,animal2,position1,position2,time]
% animal1!=% animal2 &
% Large(animal1) & Large(animal2) &
% HoldsAt(Pos(animal1,position1),time) &
% HoldsAt(Pos(animal1,position2),time+1) &
% HoldsAt(Pos(animal2,position2),time) &
% HoldsAt(Pos(animal2,position1),time+1) ->
% !{gate} Sides(position1,position2,gate).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8680
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8675).

 /*  diff(Animal1, Animal2), large(Animal1), large(Animal2), holds_at(pos(Animal1, Position1), Time), holds_at(pos(Animal1, Position2), Time+1), holds_at(pos(Animal2, Position2), Time), holds_at(pos(Animal2, Position1), Time+1) ->
       not(exists([Gate], sides(Position1, Position2, Gate))).
 */

 /*  not(sides(Position1, Position2, Gate)) :-
       diff(Animal1, Animal2),
       large(Animal1),
       large(Animal2),
       holds_at(pos(Animal1, Position1), Time),
       holds_at(pos(Animal1, Position2), Time+1),
       holds_at(pos(Animal2, Position2), Time),
       holds_at(pos(Animal2, Position1), Time+1).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8675).

 /*  [diff(Animal1, Animal2), large(Animal1), large(Animal2), holds_at(pos(Animal1, Position1), Time), holds_at(pos(Animal1, Position2), Time6), holds_at(pos(Animal2, Position2), Time), holds_at(pos(Animal2, Position1), Time6), b(Time, Time6), ignore(Time+1==Time6)] ->
       ta(Time,
          tvs1=[Time, Time+1],
          tvs2=[Time, Time6],
          not(sides(Position1, Position2, Gate))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8675).
axiom(not(sides(Position1, Position2, Gate)),
   
    [ diff(Animal1, Animal2),
      large(Animal1),
      large(Animal2),
      holds_at(pos(Animal1, Position1), Time),
      holds_at(pos(Animal1, Position2), Time6),
      holds_at(pos(Animal2, Position2), Time),
      holds_at(pos(Animal2, Position1), Time6),
      b(Time, Time6)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8675).

 /*  not(large(Animal1)) :-
       ( large(Animal2),
         holds_at(pos(Animal1, Position1), Time),
         holds_at(pos(Animal1, Position2), Time+1),
         holds_at(pos(Animal2, Position2), Time),
         holds_at(pos(Animal2, Position1), Time+1)
       ),
       diff(Animal1, Animal2),
       sides(Position1, Position2, Gate).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8675).

 /*  [large(Animal2), holds_at(pos(Animal1, Position1), Time), holds_at(pos(Animal1, Position2), Time7), holds_at(pos(Animal2, Position2), Time), holds_at(pos(Animal2, Position1), Time7), diff(Animal1, Animal2), sides(Position1, Position2, Gate), b(Time, Time7), ignore(Time+1==Time7)] ->
       ta(Time,
          tvs1=[Time, Time+1],
          tvs2=[Time, Time7],
          not(large(Animal1))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8675).
axiom(not(large(Animal1)),
   
    [ large(Animal2),
      holds_at(pos(Animal1, Position1), Time),
      holds_at(pos(Animal1, Position2), Time7),
      holds_at(pos(Animal2, Position2), Time),
      holds_at(pos(Animal2, Position1), Time7),
      diff(Animal1, Animal2),
      sides(Position1, Position2, Gate),
      b(Time, Time7)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8675).

 /*  not(large(Animal2)) :-
       ( holds_at(pos(Animal1, Position1), Time),
         holds_at(pos(Animal1, Position2), Time+1),
         holds_at(pos(Animal2, Position2), Time),
         holds_at(pos(Animal2, Position1), Time+1)
       ),
       large(Animal1),
       diff(Animal1, Animal2),
       sides(Position1, Position2, Gate).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8675).

 /*  [holds_at(pos(Animal1, Position1), Time), holds_at(pos(Animal1, Position2), Time8), holds_at(pos(Animal2, Position2), Time), holds_at(pos(Animal2, Position1), Time8), large(Animal1), diff(Animal1, Animal2), sides(Position1, Position2, Gate), b(Time, Time8), ignore(Time+1==Time8)] ->
       ta(Time,
          tvs1=[Time, Time+1],
          tvs2=[Time, Time8],
          not(large(Animal2))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8675).
axiom(not(large(Animal2)),
   
    [ holds_at(pos(Animal1, Position1), Time),
      holds_at(pos(Animal1, Position2), Time8),
      holds_at(pos(Animal2, Position2), Time),
      holds_at(pos(Animal2, Position1), Time8),
      large(Animal1),
      diff(Animal2, Animal1),
      sides(Position1, Position2, Gate),
      b(Time, Time8)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8675).

 /*  not(holds_at(pos(Animal1, Position1), Time)) :-
       ( holds_at(pos(Animal1, Position2), Time+1),
         holds_at(pos(Animal2, Position2), Time),
         holds_at(pos(Animal2, Position1), Time+1)
       ),
       large(Animal2),
       large(Animal1),
       diff(Animal1, Animal2),
       sides(Position1, Position2, Gate).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8675).

 /*  [holds_at(pos(Animal1, Position2), Time9), holds_at(pos(Animal2, Position2), Time), holds_at(pos(Animal2, Position1), Time9), large(Animal2), large(Animal1), diff(Animal1, Animal2), sides(Position1, Position2, Gate), b(Time, Time9), ignore(Time+1==Time9)] ->
       ta(Time,
          tvs1=[Time, Time+1],
          tvs2=[Time, Time9],
          holds_at(neg(pos(Animal1, Position1)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8675).
axiom(holds_at(neg(pos(Animal1, Position1)), Time),
   
    [ holds_at(pos(Animal1, Position2), Time9),
      holds_at(pos(Animal2, Position2), Time),
      holds_at(pos(Animal2, Position1), Time9),
      large(Animal2),
      large(Animal1),
      diff(Animal1, Animal2),
      sides(Position1, Position2, Gate),
      b(Time, Time9)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8675).

 /*  not(holds_at(pos(Animal1, Position2), Time+1)) :-
       ( holds_at(pos(Animal2, Position2), Time),
         holds_at(pos(Animal2, Position1), Time+1)
       ),
       holds_at(pos(Animal1, Position1), Time),
       large(Animal2),
       large(Animal1),
       diff(Animal1, Animal2),
       sides(Position1, Position2, Gate).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8675).

 /*  [holds_at(pos(Animal2, Position2), Time), holds_at(pos(Animal2, Position1), Time10), holds_at(pos(Animal1, Position1), Time), large(Animal2), large(Animal1), diff(Animal1, Animal2), sides(Position1, Position2, Gate), b(Time, Time10), ignore(Time+1==Time10)] ->
       ta(Time,
          tvs1=[Time, Time+1],
          tvs2=[Time, Time10],
          holds_at(neg(pos(Animal1, Position2)), Time10)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8675).
axiom(holds_at(neg(pos(Animal1, Position2)), Time10),
   
    [ holds_at(pos(Animal2, Position2), Time),
      holds_at(pos(Animal2, Position1), Time10),
      holds_at(pos(Animal1, Position1), Time),
      large(Animal2),
      large(Animal1),
      diff(Animal1, Animal2),
      sides(Position1, Position2, Gate),
      b(Time, Time10)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8675).

 /*  not(holds_at(pos(Animal2, Position2), Time)) :-
       holds_at(pos(Animal2, Position1), Time+1),
       holds_at(pos(Animal1, Position2), Time+1),
       holds_at(pos(Animal1, Position1), Time),
       large(Animal2),
       large(Animal1),
       diff(Animal1, Animal2),
       sides(Position1, Position2, Gate).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8675).

 /*  [holds_at(pos(Animal2, Position1), Time11), holds_at(pos(Animal1, Position2), Time11), holds_at(pos(Animal1, Position1), Time), large(Animal2), large(Animal1), diff(Animal1, Animal2), sides(Position1, Position2, Gate), b(Time, Time11), ignore(Time+1==Time11)] ->
       ta(Time,
          tvs1=[Time, Time+1],
          tvs2=[Time, Time11],
          holds_at(neg(pos(Animal2, Position2)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8675).
axiom(holds_at(neg(pos(Animal2, Position2)), Time),
   
    [ holds_at(pos(Animal2, Position1), Time11),
      holds_at(pos(Animal1, Position2), Time11),
      holds_at(pos(Animal1, Position1), Time),
      large(Animal2),
      large(Animal1),
      diff(Animal2, Animal1),
      sides(Position1, Position2, Gate),
      b(Time, Time11)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8675).

 /*  not(holds_at(pos(Animal2, Position1), Time+1)) :-
       holds_at(pos(Animal2, Position2), Time),
       holds_at(pos(Animal1, Position2), Time+1),
       holds_at(pos(Animal1, Position1), Time),
       large(Animal2),
       large(Animal1),
       diff(Animal1, Animal2),
       sides(Position1, Position2, Gate).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8675).

 /*  [holds_at(pos(Animal2, Position2), Time), holds_at(pos(Animal1, Position2), Time12), holds_at(pos(Animal1, Position1), Time), large(Animal2), large(Animal1), diff(Animal1, Animal2), sides(Position1, Position2, Gate), b(Time, Time12), ignore(Time+1==Time12)] ->
       ta(Time,
          tvs1=[Time, Time+1],
          tvs2=[Time, Time12],
          holds_at(neg(pos(Animal2, Position1)), Time12)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8675).
axiom(holds_at(neg(pos(Animal2, Position1)), Time12),
   
    [ holds_at(pos(Animal2, Position2), Time),
      holds_at(pos(Animal1, Position2), Time12),
      holds_at(pos(Animal1, Position1), Time),
      large(Animal2),
      large(Animal1),
      diff(Animal2, Animal1),
      sides(Position1, Position2, Gate),
      b(Time, Time12)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8682
% [gate,position1,position2,time]
% HoldsAt(Opened(gate),time) &
% !HoldsAt(Opened(gate),time+1) &
% Sides(position1,position2,gate) ->
% !{animal}
% HoldsAt(Pos(animal,position1),time) &
% HoldsAt(Pos(animal,position2),time+1).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8688
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8684).

 /*  holds_at(opened(Gate), Time), holds_at(neg(opened(Gate)), Time+1), sides(Position1, Position2, Gate) ->
       not(exists([Animal],
                   (holds_at(pos(Animal, Position1), Time), holds_at(pos(Animal, Position2), Time+1)))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8684).

 /*  not(holds_at(pos(Animal, Position1), Time)) :-
       holds_at(pos(Animal, Position2), Time+1),
       holds_at(opened(Gate), Time),
       holds_at(neg(opened(Gate)), Time+1),
       sides(Position1, Position2, Gate).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8684).

 /*  [holds_at(pos(Animal, Position2), Time5), holds_at(opened(Gate), Time), holds_at(neg(opened(Gate)), Time5), sides(Position1, Position2, Gate), b(Time, Time5), ignore(Time+1==Time5)] ->
       ta(Time,
          tvs1=[Time, Time+1],
          tvs2=[Time, Time5],
          holds_at(neg(pos(Animal, Position1)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8684).
axiom(holds_at(neg(pos(Animal, Position1)), Time),
   
    [ holds_at(pos(Animal, Position2), Time5),
      holds_at(opened(Gate), Time),
      holds_at(neg(opened(Gate)), Time5),
      sides(Position1, Position2, Gate),
      b(Time, Time5)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8684).

 /*  not(holds_at(pos(Animal, Position2), Time+1)) :-
       holds_at(pos(Animal, Position1), Time),
       holds_at(opened(Gate), Time),
       holds_at(neg(opened(Gate)), Time+1),
       sides(Position1, Position2, Gate).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8684).

 /*  [holds_at(pos(Animal, Position1), Time), holds_at(opened(Gate), Time), holds_at(neg(opened(Gate)), Time6), sides(Position1, Position2, Gate), b(Time, Time6), ignore(Time+1==Time6)] ->
       ta(Time,
          tvs1=[Time, Time+1],
          tvs2=[Time, Time6],
          holds_at(neg(pos(Animal, Position2)), Time6)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8684).
axiom(holds_at(neg(pos(Animal, Position2)), Time6),
   
    [ holds_at(pos(Animal, Position1), Time),
      holds_at(opened(Gate), Time),
      holds_at(neg(opened(Gate)), Time6),
      sides(Position1, Position2, Gate),
      b(Time, Time6)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8684).

 /*  not(holds_at(opened(Gate), Time)) :-
       ( holds_at(neg(opened(Gate)), Time+1),
         sides(Position1, Position2, Gate)
       ),
       holds_at(pos(Animal, Position1), Time),
       holds_at(pos(Animal, Position2), Time+1).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8684).

 /*  [holds_at(neg(opened(Gate)), Time7), sides(Position1, Position2, Gate), holds_at(pos(Animal, Position1), Time), holds_at(pos(Animal, Position2), Time7), b(Time, Time7), ignore(Time+1==Time7)] ->
       ta(Time,
          tvs1=[Time, Time+1],
          tvs2=[Time, Time7],
          holds_at(neg(opened(Gate)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8684).
axiom(holds_at(neg(opened(Gate)), Time),
   
    [ holds_at(neg(opened(Gate)), Time7),
      sides(Position1, Position2, Gate),
      holds_at(pos(Animal, Position1), Time),
      holds_at(pos(Animal, Position2), Time7),
      b(Time, Time7)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8684).

 /*  not(holds_at(neg(opened(Gate)), Time+1)) :-
       sides(Position1, Position2, Gate),
       holds_at(opened(Gate), Time),
       holds_at(pos(Animal, Position1), Time),
       holds_at(pos(Animal, Position2), Time+1).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8684).

 /*  [sides(Position1, Position2, Gate), holds_at(opened(Gate), Time), holds_at(pos(Animal, Position1), Time), holds_at(pos(Animal, Position2), Time8), b(Time, Time8), ignore(Time+1==Time8)] ->
       ta(Time,
          tvs1=[Time, Time+1],
          tvs2=[Time, Time8],
          holds_at(opened(Gate), Time8)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8684).
axiom(holds_at(opened(Gate), Time8),
   
    [ sides(Position1, Position2, Gate),
      holds_at(opened(Gate), Time),
      holds_at(pos(Animal, Position1), Time),
      holds_at(pos(Animal, Position2), Time8),
      b(Time, Time8)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8684).

 /*  not(sides(Position1, Position2, Gate)) :-
       holds_at(neg(opened(Gate)), Time+1),
       holds_at(opened(Gate), Time),
       holds_at(pos(Animal, Position1), Time),
       holds_at(pos(Animal, Position2), Time+1).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8684).

 /*  [holds_at(neg(opened(Gate)), Time9), holds_at(opened(Gate), Time), holds_at(pos(Animal, Position1), Time), holds_at(pos(Animal, Position2), Time9), b(Time, Time9), ignore(Time+1==Time9)] ->
       ta(Time,
          tvs1=[Time, Time+1],
          tvs2=[Time, Time9],
          not(sides(Position1, Position2, Gate))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8684).
axiom(not(sides(Position1, Position2, Gate)),
   
    [ holds_at(neg(opened(Gate)), Time9),
      holds_at(opened(Gate), Time),
      holds_at(pos(Animal, Position1), Time),
      holds_at(pos(Animal, Position2), Time9),
      b(Time, Time9)
    ]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8690
% gate GateAO
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8690).
==> t(gate,gateAO).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8691
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8692).
% cage CageA
==> t(cage,cageA).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8693
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8694).
% Loc(1)=CageA.

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], equals(loc(1), cageA)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8694).
axiom(equals(loc(1), cageA),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8694
% Loc(2)=CageA.
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8694).

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], equals(loc(2), cageA)).
 */
axiom(equals(loc(2), cageA),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8695
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8696).
% Loc(3)=CageA.

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], equals(loc(3), cageA)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8696).
axiom(equals(loc(3), cageA),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8696
% Loc(4)=CageA.
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8696).

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], equals(loc(4), cageA)).
 */
axiom(equals(loc(4), cageA),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8697
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8698).
% Loc(5)=Outside.

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], equals(loc(5), outside)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8698).
axiom(equals(loc(5), outside),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8698
% Loc(6)=Outside.
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8698).

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], equals(loc(6), outside)).
 */
axiom(equals(loc(6), outside),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8699
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8700).
% Loc(7)=Outside.

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], equals(loc(7), outside)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8700).
axiom(equals(loc(7), outside),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8700
% Loc(8)=Outside.
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8700).

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], equals(loc(8), outside)).
 */
axiom(equals(loc(8), outside),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8702
% [position1,position2]
% Neighbor(position1,position2) <->
% ((position1=1 & position2=2) |
%  (position1=1 & position2=3) |
%  (position1=1 & position2=4) |
%  (position1=2 & position2=3) |
%  (position1=2 & position2=4) |
%  (position1=3 & position2=4) |
%  (position1=5 & position2=6) |
%  (position1=5 & position2=7) |
%  (position1=5 & position2=8) |
%  (position1=6 & position2=7) |
%  (position1=6 & position2=8) |
%  (position1=7 & position2=8) |
%  (position2=1 & position1=2) |
%  (position2=1 & position1=3) |
%  (position2=1 & position1=4) |
%  (position2=2 & position1=3) |
%  (position2=2 & position1=4) |
%  (position2=3 & position1=4) |
%  (position2=5 & position1=6) |
%  (position2=5 & position1=7) |
%  (position2=5 & position1=8) |
%  (position2=6 & position1=7) |
%  (position2=6 & position1=8) |
%  (position2=7 & position1=8) |
%  (position1=4 & position2=7) |
%  (position2=4 & position1=7)).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8729
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8704).

 /*  neighbor(Position1, Position2) <->
       (   equals(Position1, 1),
           equals(Position2, 2)
       ;   equals(Position1, 1),
           equals(Position2, 3)
       ;   equals(Position1, 1),
           equals(Position2, 4)
       ;   equals(Position1, 2),
           equals(Position2, 3)
       ;   equals(Position1, 2),
           equals(Position2, 4)
       ;   equals(Position1, 3),
           equals(Position2, 4)
       ;   equals(Position1, 5),
           equals(Position2, 6)
       ;   equals(Position1, 5),
           equals(Position2, 7)
       ;   equals(Position1, 5),
           equals(Position2, 8)
       ;   equals(Position1, 6),
           equals(Position2, 7)
       ;   equals(Position1, 6),
           equals(Position2, 8)
       ;   equals(Position1, 7),
           equals(Position2, 8)
       ;   equals(Position2, 1),
           equals(Position1, 2)
       ;   equals(Position2, 1),
           equals(Position1, 3)
       ;   equals(Position2, 1),
           equals(Position1, 4)
       ;   equals(Position2, 2),
           equals(Position1, 3)
       ;   equals(Position2, 2),
           equals(Position1, 4)
       ;   equals(Position2, 3),
           equals(Position1, 4)
       ;   equals(Position2, 5),
           equals(Position1, 6)
       ;   equals(Position2, 5),
           equals(Position1, 7)
       ;   equals(Position2, 5),
           equals(Position1, 8)
       ;   equals(Position2, 6),
           equals(Position1, 7)
       ;   equals(Position2, 6),
           equals(Position1, 8)
       ;   equals(Position2, 7),
           equals(Position1, 8)
       ;   equals(Position1, 4),
           equals(Position2, 7)
       ;   equals(Position2, 4),
           equals(Position1, 7)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8704).

 /*  [neighbor] <->
       
       [  (;),
         equals,
         equals,
          (;),
         equals,
         equals,
          (;),
         equals,
         equals,
          (;),
         equals,
         equals,
          (;),
         equals,
         equals,
          (;),
         equals,
         equals,
          (;),
         equals,
         equals,
          (;),
         equals,
         equals,
          (;),
         equals,
         equals,
          (;),
         equals,
         equals,
          (;),
         equals,
         equals,
          (;),
         equals,
         equals,
          (;),
         equals,
         equals,
          (;),
         equals,
         equals,
          (;),
         equals,
         equals,
          (;),
         equals,
         equals,
          (;),
         equals,
         equals,
          (;),
         equals,
         equals,
          (;),
         equals,
         equals,
          (;),
         equals,
         equals,
          (;),
         equals,
         equals,
          (;),
         equals,
         equals,
          (;),
         equals,
         equals,
          (;),
         equals,
         equals,
          (;),
         equals,
         equals,
         equals,
         equals
       ].
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8704).

 /*  neighbor(Position1, Position2) ->
       (   equals(Position1, 1),
           equals(Position2, 2)
       ;   equals(Position1, 1),
           equals(Position2, 3)
       ;   equals(Position1, 1),
           equals(Position2, 4)
       ;   equals(Position1, 2),
           equals(Position2, 3)
       ;   equals(Position1, 2),
           equals(Position2, 4)
       ;   equals(Position1, 3),
           equals(Position2, 4)
       ;   equals(Position1, 5),
           equals(Position2, 6)
       ;   equals(Position1, 5),
           equals(Position2, 7)
       ;   equals(Position1, 5),
           equals(Position2, 8)
       ;   equals(Position1, 6),
           equals(Position2, 7)
       ;   equals(Position1, 6),
           equals(Position2, 8)
       ;   equals(Position1, 7),
           equals(Position2, 8)
       ;   equals(Position2, 1),
           equals(Position1, 2)
       ;   equals(Position2, 1),
           equals(Position1, 3)
       ;   equals(Position2, 1),
           equals(Position1, 4)
       ;   equals(Position2, 2),
           equals(Position1, 3)
       ;   equals(Position2, 2),
           equals(Position1, 4)
       ;   equals(Position2, 3),
           equals(Position1, 4)
       ;   equals(Position2, 5),
           equals(Position1, 6)
       ;   equals(Position2, 5),
           equals(Position1, 7)
       ;   equals(Position2, 5),
           equals(Position1, 8)
       ;   equals(Position2, 6),
           equals(Position1, 7)
       ;   equals(Position2, 6),
           equals(Position1, 8)
       ;   equals(Position2, 7),
           equals(Position1, 8)
       ;   equals(Position1, 4),
           equals(Position2, 7)
       ;   equals(Position2, 4),
           equals(Position1, 7)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8704).

 /*  not(neighbor(Position1, Position2)) :-
       (   not(equals(Position1, 1))
       ;   not(equals(Position2, 2))
       ),
       (   not(equals(Position1, 1))
       ;   not(equals(Position2, 3))
       ),
       (   not(equals(Position1, 1))
       ;   not(equals(Position2, 4))
       ),
       (   not(equals(Position1, 2))
       ;   not(equals(Position2, 3))
       ),
       (   not(equals(Position1, 2))
       ;   not(equals(Position2, 4))
       ),
       (   not(equals(Position1, 3))
       ;   not(equals(Position2, 4))
       ),
       (   not(equals(Position1, 5))
       ;   not(equals(Position2, 6))
       ),
       (   not(equals(Position1, 5))
       ;   not(equals(Position2, 7))
       ),
       (   not(equals(Position1, 5))
       ;   not(equals(Position2, 8))
       ),
       (   not(equals(Position1, 6))
       ;   not(equals(Position2, 7))
       ),
       (   not(equals(Position1, 6))
       ;   not(equals(Position2, 8))
       ),
       (   not(equals(Position1, 7))
       ;   not(equals(Position2, 8))
       ),
       (   not(equals(Position2, 1))
       ;   not(equals(Position1, 2))
       ),
       (   not(equals(Position2, 1))
       ;   not(equals(Position1, 3))
       ),
       (   not(equals(Position2, 1))
       ;   not(equals(Position1, 4))
       ),
       (   not(equals(Position2, 2))
       ;   not(equals(Position1, 3))
       ),
       (   not(equals(Position2, 2))
       ;   not(equals(Position1, 4))
       ),
       (   not(equals(Position2, 3))
       ;   not(equals(Position1, 4))
       ),
       (   not(equals(Position2, 5))
       ;   not(equals(Position1, 6))
       ),
       (   not(equals(Position2, 5))
       ;   not(equals(Position1, 7))
       ),
       (   not(equals(Position2, 5))
       ;   not(equals(Position1, 8))
       ),
       (   not(equals(Position2, 6))
       ;   not(equals(Position1, 7))
       ),
       (   not(equals(Position2, 6))
       ;   not(equals(Position1, 8))
       ),
       (   not(equals(Position2, 7))
       ;   not(equals(Position1, 8))
       ),
       (   not(equals(Position1, 4))
       ;   not(equals(Position2, 7))
       ),
       (   not(equals(Position2, 4))
       ;   not(equals(Position1, 7))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8704).

 /*  [(not(equals(Position1, 1));not(equals(Position2, 2))),  (not(equals(Position1, 1));not(equals(Position2, 3))),  (not(equals(Position1, 1));not(equals(Position2, 4))),  (not(equals(Position1, 2));not(equals(Position2, 3))),  (not(equals(Position1, 2));not(equals(Position2, 4))),  (not(equals(Position1, 3));not(equals(Position2, 4))),  (not(equals(Position1, 5));not(equals(Position2, 6))),  (not(equals(Position1, 5));not(equals(Position2, 7))),  (not(equals(Position1, 5));not(equals(Position2, 8))),  (not(equals(Position1, 6));not(equals(Position2, 7))),  (not(equals(Position1, 6));not(equals(Position2, 8))),  (not(equals(Position1, 7));not(equals(Position2, 8))),  (not(equals(Position2, 1));not(equals(Position1, 2))),  (not(equals(Position2, 1));not(equals(Position1, 3))),  (not(equals(Position2, 1));not(equals(Position1, 4))),  (not(equals(Position2, 2));not(equals(Position1, 3))),  (not(equals(Position2, 2));not(equals(Position1, 4))),  (not(equals(Position2, 3));not(equals(Position1, 4))),  (not(equals(Position2, 5));not(equals(Position1, 6))),  (not(equals(Position2, 5));not(equals(Position1, 7))),  (not(equals(Position2, 5));not(equals(Position1, 8))),  (not(equals(Position2, 6));not(equals(Position1, 7))),  (not(equals(Position2, 6));not(equals(Position1, 8))),  (not(equals(Position2, 7));not(equals(Position1, 8))),  (not(equals(Position1, 4));not(equals(Position2, 7))),  (not(equals(Position2, 4));not(equals(Position1, 7)))] ->
       ta(Ta_Param,
          tvs1=[],
          tvs2=[],
          not(neighbor(Position1, Position2))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8704).
axiom(not(neighbor(Position1, Position2)),
   
    [  (not(equals(Position1, 1));not(equals(Position2, 2))),
       (not(equals(Position1, 1));not(equals(Position2, 3))),
       (not(equals(Position1, 1));not(equals(Position2, 4))),
       (not(equals(Position1, 2));not(equals(Position2, 3))),
       (not(equals(Position1, 2));not(equals(Position2, 4))),
       (not(equals(Position1, 3));not(equals(Position2, 4))),
       (not(equals(Position1, 5));not(equals(Position2, 6))),
       (not(equals(Position1, 5));not(equals(Position2, 7))),
       (not(equals(Position1, 5));not(equals(Position2, 8))),
       (not(equals(Position1, 6));not(equals(Position2, 7))),
       (not(equals(Position1, 6));not(equals(Position2, 8))),
       (not(equals(Position1, 7));not(equals(Position2, 8))),
       (not(equals(Position2, 1));not(equals(Position1, 2))),
       (not(equals(Position2, 1));not(equals(Position1, 3))),
       (not(equals(Position2, 1));not(equals(Position1, 4))),
       (not(equals(Position2, 2));not(equals(Position1, 3))),
       (not(equals(Position2, 2));not(equals(Position1, 4))),
       (not(equals(Position2, 3));not(equals(Position1, 4))),
       (not(equals(Position2, 5));not(equals(Position1, 6))),
       (not(equals(Position2, 5));not(equals(Position1, 7))),
       (not(equals(Position2, 5));not(equals(Position1, 8))),
       (not(equals(Position2, 6));not(equals(Position1, 7))),
       (not(equals(Position2, 6));not(equals(Position1, 8))),
       (not(equals(Position2, 7));not(equals(Position1, 8))),
       (not(equals(Position1, 4));not(equals(Position2, 7))),
       (not(equals(Position2, 4));not(equals(Position1, 7)))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8704).

 /*  equals(Position1, 1), equals(Position2, 2);equals(Position1, 1), equals(Position2, 3);equals(Position1, 1), equals(Position2, 4);equals(Position1, 2), equals(Position2, 3);equals(Position1, 2), equals(Position2, 4);equals(Position1, 3), equals(Position2, 4);equals(Position1, 5), equals(Position2, 6);equals(Position1, 5), equals(Position2, 7);equals(Position1, 5), equals(Position2, 8);equals(Position1, 6), equals(Position2, 7);equals(Position1, 6), equals(Position2, 8);equals(Position1, 7), equals(Position2, 8);equals(Position2, 1), equals(Position1, 2);equals(Position2, 1), equals(Position1, 3);equals(Position2, 1), equals(Position1, 4);equals(Position2, 2), equals(Position1, 3);equals(Position2, 2), equals(Position1, 4);equals(Position2, 3), equals(Position1, 4);equals(Position2, 5), equals(Position1, 6);equals(Position2, 5), equals(Position1, 7);equals(Position2, 5), equals(Position1, 8);equals(Position2, 6), equals(Position1, 7);equals(Position2, 6), equals(Position1, 8);equals(Position2, 7), equals(Position1, 8);equals(Position1, 4), equals(Position2, 7);equals(Position2, 4), equals(Position1, 7) ->
       neighbor(Position1, Position2).
 */

 /*  neighbor(Position1, Position2) :-
       (   equals(Position1, 1),
           equals(Position2, 2)
       ;   equals(Position1, 1),
           equals(Position2, 3)
       ;   equals(Position1, 1),
           equals(Position2, 4)
       ;   equals(Position1, 2),
           equals(Position2, 3)
       ;   equals(Position1, 2),
           equals(Position2, 4)
       ;   equals(Position1, 3),
           equals(Position2, 4)
       ;   equals(Position1, 5),
           equals(Position2, 6)
       ;   equals(Position1, 5),
           equals(Position2, 7)
       ;   equals(Position1, 5),
           equals(Position2, 8)
       ;   equals(Position1, 6),
           equals(Position2, 7)
       ;   equals(Position1, 6),
           equals(Position2, 8)
       ;   equals(Position1, 7),
           equals(Position2, 8)
       ;   equals(Position2, 1),
           equals(Position1, 2)
       ;   equals(Position2, 1),
           equals(Position1, 3)
       ;   equals(Position2, 1),
           equals(Position1, 4)
       ;   equals(Position2, 2),
           equals(Position1, 3)
       ;   equals(Position2, 2),
           equals(Position1, 4)
       ;   equals(Position2, 3),
           equals(Position1, 4)
       ;   equals(Position2, 5),
           equals(Position1, 6)
       ;   equals(Position2, 5),
           equals(Position1, 7)
       ;   equals(Position2, 5),
           equals(Position1, 8)
       ;   equals(Position2, 6),
           equals(Position1, 7)
       ;   equals(Position2, 6),
           equals(Position1, 8)
       ;   equals(Position2, 7),
           equals(Position1, 8)
       ;   equals(Position1, 4),
           equals(Position2, 7)
       ;   equals(Position2, 4),
           equals(Position1, 7)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8704).

 /*  [(equals(Position1, 1), equals(Position2, 2);equals(Position1, 1), equals(Position2, 3);equals(Position1, 1), equals(Position2, 4);equals(Position1, 2), equals(Position2, 3);equals(Position1, 2), equals(Position2, 4);equals(Position1, 3), equals(Position2, 4);equals(Position1, 5), equals(Position2, 6);equals(Position1, 5), equals(Position2, 7);equals(Position1, 5), equals(Position2, 8);equals(Position1, 6), equals(Position2, 7);equals(Position1, 6), equals(Position2, 8);equals(Position1, 7), equals(Position2, 8);equals(Position2, 1), equals(Position1, 2);equals(Position2, 1), equals(Position1, 3);equals(Position2, 1), equals(Position1, 4);equals(Position2, 2), equals(Position1, 3);equals(Position2, 2), equals(Position1, 4);equals(Position2, 3), equals(Position1, 4);equals(Position2, 5), equals(Position1, 6);equals(Position2, 5), equals(Position1, 7);equals(Position2, 5), equals(Position1, 8);equals(Position2, 6), equals(Position1, 7);equals(Position2, 6), equals(Position1, 8);equals(Position2, 7), equals(Position1, 8);equals(Position1, 4), equals(Position2, 7);equals(Position2, 4), equals(Position1, 7))] ->
       ta(Ta_Param3,
          tvs1=[],
          tvs2=[],
          neighbor(Position1, Position2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8704).
axiom(neighbor(Position1, Position2),
   
    [  (equals(Position1, 1), equals(Position2, 2);equals(Position1, 1), equals(Position2, 3);equals(Position1, 1), equals(Position2, 4);equals(Position1, 2), equals(Position2, 3);equals(Position1, 2), equals(Position2, 4);equals(Position1, 3), equals(Position2, 4);equals(Position1, 5), equals(Position2, 6);equals(Position1, 5), equals(Position2, 7);equals(Position1, 5), equals(Position2, 8);equals(Position1, 6), equals(Position2, 7);equals(Position1, 6), equals(Position2, 8);equals(Position1, 7), equals(Position2, 8);equals(Position2, 1), equals(Position1, 2);equals(Position2, 1), equals(Position1, 3);equals(Position2, 1), equals(Position1, 4);equals(Position2, 2), equals(Position1, 3);equals(Position2, 2), equals(Position1, 4);equals(Position2, 3), equals(Position1, 4);equals(Position2, 5), equals(Position1, 6);equals(Position2, 5), equals(Position1, 7);equals(Position2, 5), equals(Position1, 8);equals(Position2, 6), equals(Position1, 7);equals(Position2, 6), equals(Position1, 8);equals(Position2, 7), equals(Position1, 8);equals(Position1, 4), equals(Position2, 7);equals(Position2, 4), equals(Position1, 7))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8731
% Side1(GateAO)=4.
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8731).

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], equals(side1(gateAO), 4)).
 */
axiom(equals(side1(gateAO), 4),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8732
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8733).
% Side2(GateAO)=7.

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], equals(side2(gateAO), 7)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8733).
axiom(equals(side2(gateAO), 7),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8734
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8735).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/AkmanEtAl2004/ZooTest4.1.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{Akman:2004,
%;   author = "Varol Akman and Selim T. Erdogan and Joohyung Lee and Vladimir Lifschitz and Hudson Turner",
%;   year = "2004",
%;   title = "Representing the zoo world and the traffic world in the language of the causal calculator",
%;   journal = "Artificial Intelligence",
%;   volume = "153",
%;   pages = "105--140",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8761
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8762).
% option encoding 3
:- set_ec_option(encoding, 3).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8763
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8764).
% load foundations/Root.e
:- load_e('foundations/Root.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8764
% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8764).
:- load_e('foundations/EC.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8765
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8766).
% load examples/AkmanEtAl2004/ZooWorld.e
:- load_e('examples/AkmanEtAl2004/ZooWorld.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8767
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8768).
% human Homer
==> t(human,homer).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8768
% elephant Jumbo
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8768).
==> t(elephant,jumbo).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8770
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8771).
% Species(Homer)=HumanSpecies.

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], equals(species(homer), humanSpecies)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8771).
axiom(equals(species(homer), humanSpecies),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8771
% Adult(Homer).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8771).

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], adult(homer)).
 */
axiom(adult(homer),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8772
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8773).
% Species(Jumbo)=ElephantSpecies.

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], equals(species(jumbo), elephantSpecies)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8773).
axiom(equals(species(jumbo), elephantSpecies),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8773
% Adult(Jumbo).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8773).

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], adult(jumbo)).
 */
axiom(adult(jumbo),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8775
% !HoldsAt(Opened(GateAO),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8775).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(opened(gateAO)), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8775).
axiom(holds_at(neg(opened(gateAO)), start),
    []).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8776
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8777).
% {position} 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8776
% HoldsAt(Pos(Homer,position),0) & Outside=Loc(position).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8777).

 /*  exists([Position],
     holds_at(pos(homer, Position), start),
      equals(outside, loc(Position))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8777).

 /*  holds_at(pos(homer, Position), start) :-
       some(Position, '$kolem_Fn_466').
 */

 /*  [some(Position, '$kolem_Fn_466')] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(pos(homer, Position), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8777).
axiom(holds_at(pos(homer, Position), start),
    [some(Position, '$kolem_Fn_466')]).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8777
% {position} 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8777
% HoldsAt(Pos(Jumbo,position),0) & CageA=Loc(position).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8777).

 /*  exists([Position],
     holds_at(pos(jumbo, Position), start),
      equals(cageA, loc(Position))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8777).

 /*  holds_at(pos(jumbo, Position), start) :-
       some(Position, '$kolem_Fn_467').
 */

 /*  [some(Position, '$kolem_Fn_467')] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(pos(jumbo, Position), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8777).
axiom(holds_at(pos(jumbo, Position), start),
    [some(Position, '$kolem_Fn_467')]).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8779
% {position} 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8779
% HoldsAt(Pos(Homer,position),4) & CageA=Loc(position).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8779).

 /*  exists([Position],
     holds_at(pos(homer, Position), start+4),
      equals(cageA, loc(Position))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8779).

 /*  holds_at(pos(homer, Position), start+4) :-
       some(Position, '$kolem_Fn_468').
 */

 /*  [some(Position, '$kolem_Fn_468'), b(start, Start4), toffset(start, 4, Start4), ignore(start+4==Start4)] ->
       ta(Ta_Param,
          tvs1=[start+4],
          tvs2=[Start4, start],
          holds_at(pos(homer, Position), Start4)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8779).
axiom(holds_at(pos(homer, Position), Start4),
   
    [ some(Position, '$kolem_Fn_468'),
      b(start, Start4),
      toffset(start, 4, Start4)
    ]).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8780
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8781).
% {position} 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8780
% HoldsAt(Pos(Jumbo,position),4) & Outside=Loc(position).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8781).

 /*  exists([Position],
     holds_at(pos(jumbo, Position), start+4),
      equals(outside, loc(Position))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8781).

 /*  holds_at(pos(jumbo, Position), start+4) :-
       some(Position, '$kolem_Fn_469').
 */

 /*  [some(Position, '$kolem_Fn_469'), b(start, Start4), toffset(start, 4, Start4), ignore(start+4==Start4)] ->
       ta(Ta_Param,
          tvs1=[start+4],
          tvs2=[Start4, start],
          holds_at(pos(jumbo, Position), Start4)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8781).
axiom(holds_at(pos(jumbo, Position), Start4),
   
    [ some(Position, '$kolem_Fn_469'),
      b(start, Start4),
      toffset(start, 4, Start4)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8782
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8783).
% [human]
 % HoldsAt(PosDeterminingFluent(human,1),4).

 /*  [b(start, Start4), toffset(start, 4, Start4), ignore(start+4==Start4)] ->
       ta(Ta_Param,
          tvs1=[start+4],
          tvs2=[Start4, start],
          holds_at(posDeterminingFluent(Human, 1), Start4)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8783).
axiom(holds_at(posDeterminingFluent(Human, 1), Start4),
    [b(start, Start4), toffset(start, 4, Start4)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8783
% [event,animal]
 % !HoldsAt(DoneBy(event,animal),4).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8783).

 /*  [b(start, Start4), toffset(start, 4, Start4), ignore(start+4==Start4)] ->
       ta(Ta_Param,
          tvs1=[start+4],
          tvs2=[Start4, start],
          holds_at(neg(doneBy(Event, Animal)), Start4)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8783).
axiom(holds_at(neg(doneBy(Event, Animal)), Start4),
    [b(start, Start4), toffset(start, 4, Start4)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8785
%; ccalc.2.0b.8.3 single model
%;HoldsAt(Pos(Homer,7),0).
%;HoldsAt(Pos(Jumbo,2),0).
%;Happens(Move(Jumbo,4),0).
%;Happens(Open(Homer,GateAO),0).
%;Happens(Mount(Homer,Jumbo),1).
%;Happens(ThrowOff(Jumbo,Homer),2).
%;HoldsAt(PosDeterminingFluent(Homer,1),2).
%;Happens(Move(Jumbo,7),3).
%;Happens(Mount(Homer,Jumbo),3).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8796
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8797).
% range time 0 4
==> range(time,0,4).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8797
% range position 1 8
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8797).
==> range(position,1,8).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8798
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8799).
% range offset 0 0
==> range(offset,0,0).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/AkmanEtAl2004/ZooTest2.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{Akman:2004,
%;   author = "Varol Akman and Selim T. Erdogan and Joohyung Lee and Vladimir Lifschitz and Hudson Turner",
%;   year = "2004",
%;   title = "Representing the zoo world and the traffic world in the language of the causal calculator",
%;   journal = "Artificial Intelligence",
%;   volume = "153",
%;   pages = "105--140",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8827
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8828).
% option encoding 3
:- set_ec_option(encoding, 3).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8829
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8830).
% load foundations/Root.e
:- load_e('foundations/Root.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8830
% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8830).
:- load_e('foundations/EC.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8831
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8832).
% load examples/AkmanEtAl2004/ZooWorld.e
:- load_e('examples/AkmanEtAl2004/ZooWorld.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8833
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8834).
% human Homer
==> t(human,homer).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8835
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8836).
% Species(Homer)=HumanSpecies.

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], equals(species(homer), humanSpecies)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8836).
axiom(equals(species(homer), humanSpecies),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8836
% Adult(Homer).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8836).

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], adult(homer)).
 */
axiom(adult(homer),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8838
% !HoldsAt(Opened(GateAO),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8838).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(opened(gateAO)), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8838).
axiom(holds_at(neg(opened(gateAO)), start),
    []).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8839
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8840).
% {position} 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8839
% HoldsAt(Pos(Homer,position),0) & Outside=Loc(position).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8840).

 /*  exists([Position],
     holds_at(pos(homer, Position), start),
      equals(outside, loc(Position))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8840).

 /*  holds_at(pos(homer, Position), start) :-
       some(Position, '$kolem_Fn_470').
 */

 /*  [some(Position, '$kolem_Fn_470')] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(pos(homer, Position), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8840).
axiom(holds_at(pos(homer, Position), start),
    [some(Position, '$kolem_Fn_470')]).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8840
% {position} 


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8840
% HoldsAt(Pos(Homer,position),2) & CageA=Loc(position).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8840).

 /*  exists([Position],
     holds_at(pos(homer, Position), start+2),
      equals(cageA, loc(Position))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8840).

 /*  holds_at(pos(homer, Position), start+2) :-
       some(Position, '$kolem_Fn_471').
 */

 /*  [some(Position, '$kolem_Fn_471'), b(start, Start2), toffset(start, 2, Start2), ignore(start+2==Start2)] ->
       ta(Ta_Param,
          tvs1=[start+2],
          tvs2=[Start2, start],
          holds_at(pos(homer, Position), Start2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8840).
axiom(holds_at(pos(homer, Position), Start2),
   
    [ some(Position, '$kolem_Fn_471'),
      b(start, Start2),
      toffset(start, 2, Start2)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8842
% [human]
 % HoldsAt(PosDeterminingFluent(human,1),2).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8842).

 /*  [b(start, Start2), toffset(start, 2, Start2), ignore(start+2==Start2)] ->
       ta(Ta_Param,
          tvs1=[start+2],
          tvs2=[Start2, start],
          holds_at(posDeterminingFluent(Human, 1), Start2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8842).
axiom(holds_at(posDeterminingFluent(Human, 1), Start2),
    [b(start, Start2), toffset(start, 2, Start2)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8843
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8844).
% [event,animal]
 % !HoldsAt(DoneBy(event,animal),2).

 /*  [b(start, Start2), toffset(start, 2, Start2), ignore(start+2==Start2)] ->
       ta(Ta_Param,
          tvs1=[start+2],
          tvs2=[Start2, start],
          holds_at(neg(doneBy(Event, Animal)), Start2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8844).
axiom(holds_at(neg(doneBy(Event, Animal)), Start2),
    [b(start, Start2), toffset(start, 2, Start2)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8845
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8846).
% range time 0 2
==> range(time,0,2).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8846
% range position 1 8
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8846).
==> range(position,1,8).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8847
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8848).
% range offset 0 0
==> range(offset,0,0).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/AkmanEtAl2004/ZooTest6.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{Akman:2004,
%;   author = "Varol Akman and Selim T. Erdogan and Joohyung Lee and Vladimir Lifschitz and Hudson Turner",
%;   year = "2004",
%;   title = "Representing the zoo world and the traffic world in the language of the causal calculator",
%;   journal = "Artificial Intelligence",
%;   volume = "153",
%;   pages = "105--140",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8876
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8877).
% option encoding 3
:- set_ec_option(encoding, 3).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8878
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8879).
% load foundations/Root.e
:- load_e('foundations/Root.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8879
% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8879).
:- load_e('foundations/EC.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8880
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8881).
% load examples/AkmanEtAl2004/ZooWorld.e
:- load_e('examples/AkmanEtAl2004/ZooWorld.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8882
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8883).
% human Homer
==> t(human,homer).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8883
% elephant Jumbo
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8883).
==> t(elephant,jumbo).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8885
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8886).
% Species(Homer)=HumanSpecies.

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], equals(species(homer), humanSpecies)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8886).
axiom(equals(species(homer), humanSpecies),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8886
% Adult(Homer).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8886).

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], adult(homer)).
 */
axiom(adult(homer),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8887
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8888).
% Species(Jumbo)=ElephantSpecies.

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], equals(species(jumbo), elephantSpecies)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8888).
axiom(equals(species(jumbo), elephantSpecies),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8888
% Adult(Jumbo).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8888).

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], adult(jumbo)).
 */
axiom(adult(jumbo),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8890
% HoldsAt(Mounted(Homer,Jumbo),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8890).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(mounted(homer, jumbo), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8890).
axiom(holds_at(mounted(homer, jumbo), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8891
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8892).
% HoldsAt(Pos(Jumbo,1),0).

 /*  [] ->
       ta(Ta_Param, tvs1=[start], tvs2=[start], holds_at(pos(jumbo, 1), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8892).
axiom(holds_at(pos(jumbo, 1), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8892
% Happens(ThrowOff(Jumbo,Homer),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8892).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          happens(throwOff(jumbo, homer), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8892).
axiom(happens(throwOff(jumbo, homer), start),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8894
% option manualrelease on
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8894).
:- set_ec_option(manualrelease, on).
:- if(is_e_toplevel).
:- endif.


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8895
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8894).
% [human, animal]
 % !ReleasedAt(Mounted(human, animal),0).
 %  not(releasedAt(mounted(Human,Animal),0)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8896).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[],
          tvs2=[],
          not(releasedAt(mounted(Human, Animal), 0))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8896).
axiom(not(releasedAt(mounted(Human, Animal), 0)),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8896
% [gate]
 % !ReleasedAt(Opened(gate),0).
 %  not(releasedAt(opened(Gate),0)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8896).

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], not(releasedAt(opened(Gate), 0))).
 */
axiom(not(releasedAt(opened(Gate), 0)),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8897
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8898).
% [position]
 % ReleasedAt(Pos(Homer,position),0).

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], releasedAt(pos(homer, Position), 0)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8898).
axiom(releasedAt(pos(homer, Position), 0),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8898
% [position]
 % !ReleasedAt(Pos(Jumbo,position),0).
 %  not(releasedAt(pos(jumbo,Position),0)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8898).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[],
          tvs2=[],
          not(releasedAt(pos(jumbo, Position), 0))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8898).
axiom(not(releasedAt(pos(jumbo, Position), 0)),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8900
% [human]
 % HoldsAt(PosDeterminingFluent(human,1),1).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8900).

 /*  [b(start, Time), ignore(start+1==Time)] ->
       ta(Ta_Param,
          tvs1=[start+1],
          tvs2=[Time, start],
          holds_at(posDeterminingFluent(Human, 1), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8900).
axiom(holds_at(posDeterminingFluent(Human, 1), Time),
    [b(start, Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8901
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8902).
% [event,animal]
 % !HoldsAt(DoneBy(event,animal),1).

 /*  [b(start, Time), ignore(start+1==Time)] ->
       ta(Ta_Param,
          tvs1=[start+1],
          tvs2=[Time, start],
          holds_at(neg(doneBy(Event, Animal)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8902).
axiom(holds_at(neg(doneBy(Event, Animal)), Time),
    [b(start, Time)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8903
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8904).
% range time 0 1
==> range(time,0,1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8904
% range position 1 8
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8904).
==> range(position,1,8).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8905
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8906).
% range offset 0 0
==> range(offset,0,0).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/AkmanEtAl2004/ZooTest1.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors: 
%; IBM - Initial implementation
%;
%; @article{Akman:2004,
%;   author = "Varol Akman and Selim T. Erdogan and Joohyung Lee and Vladimir Lifschitz and Hudson Turner",
%;   year = "2004",
%;   title = "Representing the zoo world and the traffic world in the language of the causal calculator",
%;   journal = "Artificial Intelligence",
%;   volume = "153",
%;   pages = "105--140",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8934
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8935).
% option encoding 3
:- set_ec_option(encoding, 3).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8936
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8937).
% load foundations/Root.e
:- load_e('foundations/Root.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8937
% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8937).
:- load_e('foundations/EC.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8938
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8939).
% load examples/AkmanEtAl2004/ZooWorld.e
:- load_e('examples/AkmanEtAl2004/ZooWorld.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8940
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8941).
% human Homer
==> t(human,homer).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8941
% elephant Jumbo
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8941).
==> t(elephant,jumbo).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8943
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8944).
% Species(Homer)=HumanSpecies.

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], equals(species(homer), humanSpecies)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8944).
axiom(equals(species(homer), humanSpecies),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8944
% Adult(Homer).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8944).

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], adult(homer)).
 */
axiom(adult(homer),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8945
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8946).
% Species(Jumbo)=ElephantSpecies.

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], equals(species(jumbo), elephantSpecies)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8946).
axiom(equals(species(jumbo), elephantSpecies),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8946
% Adult(Jumbo).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8946).

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], adult(jumbo)).
 */
axiom(adult(jumbo),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8948
% !HoldsAt(Opened(GateAO),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8948).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(opened(gateAO)), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8948).
axiom(holds_at(neg(opened(gateAO)), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8949
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8950).
% HoldsAt(Pos(Homer,6),0).

 /*  [] ->
       ta(Ta_Param, tvs1=[start], tvs2=[start], holds_at(pos(homer, 6), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8950).
axiom(holds_at(pos(homer, 6), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8950
% [time]
 % HoldsAt(Pos(Jumbo,1),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8950).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(pos(jumbo, 1), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8950).
axiom(holds_at(pos(jumbo, 1), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8952
%; goal


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8953
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8954).
% HoldsAt(Mounted(Homer,Jumbo),4).

 /*  [b(start, Start4), toffset(start, 4, Start4), ignore(start+4==Start4)] ->
       ta(Ta_Param,
          tvs1=[start+4],
          tvs2=[Start4, start],
          holds_at(mounted(homer, jumbo), Start4)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8954).
axiom(holds_at(mounted(homer, jumbo), Start4),
    [b(start, Start4), toffset(start, 4, Start4)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8955
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8956).
%;ABDUCE
%;Happens(Move(Homer,7),0).
%;Happens(Open(Homer,GateAO),1).
%;Happens(Move(Homer,4),2).
%;Happens(Mount(Homer,Jumbo),3).
% [human]
 
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8961
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8962).
% HoldsAt(PosDeterminingFluent(human,1),4).

 /*  [b(start, Start4), toffset(start, 4, Start4), ignore(start+4==Start4)] ->
       ta(Ta_Param,
          tvs1=[start+4],
          tvs2=[Start4, start],
          holds_at(posDeterminingFluent(Human, 1), Start4)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8962).
axiom(holds_at(posDeterminingFluent(Human, 1), Start4),
    [b(start, Start4), toffset(start, 4, Start4)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8962
% [event,animal]
 % !HoldsAt(DoneBy(event,animal),4).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8962).

 /*  [b(start, Start4), toffset(start, 4, Start4), ignore(start+4==Start4)] ->
       ta(Ta_Param,
          tvs1=[start+4],
          tvs2=[Start4, start],
          holds_at(neg(doneBy(Event, Animal)), Start4)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8962).
axiom(holds_at(neg(doneBy(Event, Animal)), Start4),
    [b(start, Start4), toffset(start, 4, Start4)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8964
% range time 0 4
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8964).
==> range(time,0,4).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8965
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8966).
% range position 1 8
==> range(position,1,8).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8966
% range offset 0 0
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8966).
==> range(offset,0,0).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8968
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8969).
% option timediff off
:- set_ec_option(timediff, off).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8969
% option modeldiff on
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8969).
:- set_ec_option(modeldiff, on).
:- if(is_e_toplevel).
:- endif.
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: examples/AkmanEtAl2004/ZooTest5.2.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{Akman:2004,
%;   author = "Varol Akman and Selim T. Erdogan and Joohyung Lee and Vladimir Lifschitz and Hudson Turner",
%;   year = "2004",
%;   title = "Representing the zoo world and the traffic world in the language of the causal calculator",
%;   journal = "Artificial Intelligence",
%;   volume = "153",
%;   pages = "105--140",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:8998
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',8999).
% option encoding 3
:- set_ec_option(encoding, 3).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:9000
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',9001).
% load foundations/Root.e
:- load_e('foundations/Root.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:9001
% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',9001).
:- load_e('foundations/EC.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:9002
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',9003).
% load examples/AkmanEtAl2004/ZooWorld.e
:- load_e('examples/AkmanEtAl2004/ZooWorld.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:9004
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',9005).
% human Homer
==> t(human,homer).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:9005
% elephant Jumbo
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',9005).
==> t(elephant,jumbo).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:9006
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',9007).
% horse Silver
==> t(horse,silver).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:9008
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',9009).
% Species(Homer)=HumanSpecies.

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], equals(species(homer), humanSpecies)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',9009).
axiom(equals(species(homer), humanSpecies),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:9009
% Adult(Homer).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',9009).

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], adult(homer)).
 */
axiom(adult(homer),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:9010
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',9011).
% Species(Jumbo)=ElephantSpecies.

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], equals(species(jumbo), elephantSpecies)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',9011).
axiom(equals(species(jumbo), elephantSpecies),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:9011
% Adult(Jumbo).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',9011).

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], adult(jumbo)).
 */
axiom(adult(jumbo),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:9012
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',9013).
% Species(Silver)=HorseSpecies.

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], equals(species(silver), horseSpecies)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',9013).
axiom(equals(species(silver), horseSpecies),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:9013
% Adult(Silver).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',9013).

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], adult(silver)).
 */
axiom(adult(silver),
    []).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:9015
% {position}


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:9016
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',9017).
% !HoldsAt(Pos(Homer,position),0) &
% HoldsAt(Pos(Jumbo,position),0) &
% HoldsAt(Pos(Homer,position),1) &
% !HoldsAt(Pos(Jumbo,position),1).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:9019
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',9017).

 /*  exists([Position],
     holds_at(neg(pos(homer, Position)), start),
      holds_at(pos(jumbo, Position), start),
      holds_at(pos(homer, Position), start+1),
      holds_at(neg(pos(jumbo, Position)), start+1)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',9017).

 /*  holds_at(neg(pos(homer, Position)), start) :-
       some(Position, '$kolem_Fn_472').
 */

 /*  [some(Position, '$kolem_Fn_472')] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(pos(homer, Position)), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',9017).
axiom(holds_at(neg(pos(homer, Position)), start),
    [some(Position, '$kolem_Fn_472')]).

 /*  holds_at(pos(jumbo, Position), start) :-
       some(Position, '$kolem_Fn_472').
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',9017).

 /*  [some(Position, '$kolem_Fn_472')] ->
       ta(Ta_Param3,
          tvs1=[start],
          tvs2=[start],
          holds_at(pos(jumbo, Position), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',9017).
axiom(holds_at(pos(jumbo, Position), start),
    [some(Position, '$kolem_Fn_472')]).

 /*  holds_at(pos(homer, Position), start+1) :-
       some(Position, '$kolem_Fn_472').
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',9017).

 /*  [some(Position, '$kolem_Fn_472'), b(start, Time), ignore(start+1==Time)] ->
       ta(Ta_Param5,
          tvs1=[start+1],
          tvs2=[Time, start],
          holds_at(pos(homer, Position), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',9017).
axiom(holds_at(pos(homer, Position), Time),
    [some(Position, '$kolem_Fn_472'), b(start, Time)]).

 /*  holds_at(neg(pos(jumbo, Position)), start+1) :-
       some(Position, '$kolem_Fn_472').
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',9017).

 /*  [some(Position, '$kolem_Fn_472'), b(start, Time6), ignore(start+1==Time6)] ->
       ta(Ta_Param7,
          tvs1=[start+1],
          tvs2=[Time6, start],
          holds_at(neg(pos(jumbo, Position)), Time6)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',9017).
axiom(holds_at(neg(pos(jumbo, Position)), Time6),
    [some(Position, '$kolem_Fn_472'), b(start, Time6)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:9020
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',9021).
% [animal,time]
 % !Happens(ThrowOff(animal,Homer),time).
 %  not(happens(throwOff(Animal,homer),Time)).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(throwOff(Animal, homer), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',9021).
axiom(not(happens(throwOff(Animal, homer), Time)),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:9022
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',9023).
% [human]
 % HoldsAt(PosDeterminingFluent(human,1),1).

 /*  [b(start, Time), ignore(start+1==Time)] ->
       ta(Ta_Param,
          tvs1=[start+1],
          tvs2=[Time, start],
          holds_at(posDeterminingFluent(Human, 1), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',9023).
axiom(holds_at(posDeterminingFluent(Human, 1), Time),
    [b(start, Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:9023
% [event,animal]
 % !HoldsAt(DoneBy(event,animal),1).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',9023).

 /*  [b(start, Time), ignore(start+1==Time)] ->
       ta(Ta_Param,
          tvs1=[start+1],
          tvs2=[Time, start],
          holds_at(neg(doneBy(Event, Animal)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',9023).
axiom(holds_at(neg(doneBy(Event, Animal)), Time),
    [b(start, Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:9025
%;HoldsAt(Opened(GateAO),0).
%;HoldsAt(Pos(Homer,3),0).
%;HoldsAt(Pos(Jumbo,2),0).
%;HoldsAt(Pos(Silver,7),0).
%;Happens(Move(Jumbo,4),0).
%;Happens(Move(Silver,8),0).
%;Happens(Mount(Homer,Jumbo),0).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:9033
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',9034).
% range time 0 1
==> range(time,0,1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:9034
% range position 1 8
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',9034).
==> range(position,1,8).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e:9035
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_examples.e',9036).
% range offset 0 0
==> range(offset,0,0).
%; End of file.
