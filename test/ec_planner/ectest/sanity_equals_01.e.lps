:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/Example4.e',27).
% From E: 
% 
% :-call_pel_directive(translate(unskipped,'/pack/logicmoo_ec/test/ec_planner/ectest/sanity_equals_01.e.lps')).
:- call_pel_directive(translate(unskipped,
                                '/pack/logicmoo_ec/test/ec_planner/ectest/sanity_equals_01.e.lps')).
:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(lps).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/Example4.e',27).
% From E: 
% 
% :-call_pel_directive(translate(begining,'/pack/logicmoo_ec/test/ec_planner/ectest/sanity_equals_01.e.lps')).
:- call_pel_directive(translate(begining,
                                '/pack/logicmoo_ec/test/ec_planner/ectest/sanity_equals_01.e.lps')).
% Sat, 10 Oct 2020 14:57:15 GMT File: <stream>(0x5597f2c0b900)

% predicate Neighbor(position,position)
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/sanity_equals_01.e',2).
% From E: 
% 
% predicate(neighbor(position,position)).
mpred_prop(neighbor(position,position),predicate).
predicates([neighbor/2]).


:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/sanity_equals_01.e',4).
% [position1,position2]
% Neighbor(position1,position2) <->
% ((position1=1 & position2=2) |
%  (position1=1 & position2=3) |
%  (position1=1 & position2=4) |
%  (position1=2 & position2=3) |
%  (position1=2 & position2=4) |
%  (position1=3 & position2=4) |
%  (position1=5 & position2=6) |
%  (position1=5 & position2=7) |
%  (position1=5 & position2=8) |
%  (position1=6 & position2=7) |
%  (position1=6 & position2=8) |
%  (position1=7 & position2=8) |
%  (position2=1 & position1=2) |
%  (position2=1 & position1=3) |
%  (position2=1 & position1=4) |
%  (position2=2 & position1=3) |
%  (position2=2 & position1=4) |
%  (position2=3 & position1=4) |
%  (position2=5 & position1=6) |
%  (position2=5 & position1=7) |
%  (position2=5 & position1=8) |
%  (position2=6 & position1=7) |
%  (position2=6 & position1=8) |
%  (position2=7 & position1=8) |
%  (position1=4 & position2=7) |
%  (position2=4 & position1=7)).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/sanity_equals_01.e',4).
% From E: 
% 
% <->(
%    neighbor(Position1,Position2), 
%    ((Position1=1 , 
%      Position2=2) ; 
%      (Position1=1 , 
%       Position2=3) ; 
%      (Position1=1 , 
%       Position2=4) ; 
%      (Position1=2 , 
%       Position2=3) ; 
%      (Position1=2 , 
%       Position2=4) ; 
%      (Position1=3 , 
%       Position2=4) ; 
%      (Position1=5 , 
%       Position2=6) ; 
%      (Position1=5 , 
%       Position2=7) ; 
%      (Position1=5 , 
%       Position2=8) ; 
%      (Position1=6 , 
%       Position2=7) ; 
%      (Position1=6 , 
%       Position2=8) ; 
%      (Position1=7 , 
%       Position2=8) ; 
%      (Position2=1 , 
%       Position1=2) ; 
%      (Position2=1 , 
%       Position1=3) ; 
%      (Position2=1 , 
%       Position1=4) ; 
%      (Position2=2 , 
%       Position1=3) ; 
%      (Position2=2 , 
%       Position1=4) ; 
%      (Position2=3 , 
%       Position1=4) ; 
%      (Position2=5 , 
%       Position1=6) ; 
%      (Position2=5 , 
%       Position1=7) ; 
%      (Position2=5 , 
%       Position1=8) ; 
%      (Position2=6 , 
%       Position1=7) ; 
%      (Position2=6 , 
%       Position1=8) ; 
%      (Position2=7 , 
%       Position1=8) ; 
%      (Position1=4 , 
%       Position2=7) ; 
%     (Position2=4 , 
%      Position1=7))).
:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/sanity_equals_01.e',4).
neighbor(Position1, Position2) <->
    (   Position1=1,
        Position2=2
    ;   Position1=1,
        Position2=3
    ;   Position1=1,
        Position2=4
    ;   Position1=2,
        Position2=3
    ;   Position1=2,
        Position2=4
    ;   Position1=3,
        Position2=4
    ;   Position1=5,
        Position2=6
    ;   Position1=5,
        Position2=7
    ;   Position1=5,
        Position2=8
    ;   Position1=6,
        Position2=7
    ;   Position1=6,
        Position2=8
    ;   Position1=7,
        Position2=8
    ;   Position2=1,
        Position1=2
    ;   Position2=1,
        Position1=3
    ;   Position2=1,
        Position1=4
    ;   Position2=2,
        Position1=3
    ;   Position2=2,
        Position1=4
    ;   Position2=3,
        Position1=4
    ;   Position2=5,
        Position1=6
    ;   Position2=5,
        Position1=7
    ;   Position2=5,
        Position1=8
    ;   Position2=6,
        Position1=7
    ;   Position2=6,
        Position1=8
    ;   Position2=7,
        Position1=8
    ;   Position1=4,
        Position2=7
    ;   Position2=4,
        Position1=7
    ).


%; Prolog code starts with ;:-
:- include(sanity_equals_01_extra).

:-was_s_l('/pack/logicmoo_ec/test/ec_planner/ectest/sanity_equals_01.e',39).
% From E: 
% 
% :-call_pel_directive(translate(ending,'/pack/logicmoo_ec/test/ec_planner/ectest/sanity_equals_01.e.lps')).
:- call_pel_directive(translate(ending,
                                '/pack/logicmoo_ec/test/ec_planner/ectest/sanity_equals_01.e.lps')).
