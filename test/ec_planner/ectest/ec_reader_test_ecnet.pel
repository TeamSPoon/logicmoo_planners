:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(pfc).
% Wed, 01 Apr 2020 20:03:32 GMT
% From ../ectest/ec_reader_test_ecnet.pel:4
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test.e',4647).

 /*  loading(load_e_pl,
   	'/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e').
 */
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: foundations/Root.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:17
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',18).
% sort boolean
==> sort(boolean).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:18
% sort integer
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',18).
==> sort(integer).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:19
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',20).
% reified sort predicate
reified_sort(predicate).
==> mpred_prop(predicate,reified_sort).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:20
% reified sort function
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',20).
reified_sort(function).
==> mpred_prop(function,reified_sort).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: foundations/EC.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; Event Calculus (EC)
%;
%; @incollection{MillerShanahan:2002,
%;   author = "Rob Miller and Murray Shanahan",
%;   year = "2002",
%;   title = "Some alternative formulations of the event calculus",
%;   editor = "Antonis C. Kakas and Fariba Sadri",
%;   booktitle = "Computational Logic: Logic Programming and Beyond: Essays in Honour of \uppercase{R}obert \uppercase{A}. \uppercase{K}owalski, Part \uppercase{II}",
%;   series = "Lecture Notes in Computer Science",
%;   volume = "2408",
%;   pages = "452--490",
%;   address = "Berlin",
%;   publisher = "Springer",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:56
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',57).
% sort time: integer
==> subsort(time,integer).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:57
% sort offset: integer
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',57).
==> subsort(offset,integer).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:59
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',60).
% reified sort fluent
reified_sort(fluent).
==> mpred_prop(fluent,reified_sort).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:60
% reified sort event
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',60).
reified_sort(event).
==> mpred_prop(event,reified_sort).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:62
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',63).
% predicate Happens(event,time)
predicate(happens(event,time)).
==> mpred_prop(happens(event,time),predicate).
==> meta_argtypes(happens(event,time)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:63
% predicate HoldsAt(fluent,time)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',63).
predicate(holds_at(fluent,time)).
==> mpred_prop(holds_at(fluent,time),predicate).
==> meta_argtypes(holds_at(fluent,time)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:64
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',65).
% predicate ReleasedAt(fluent,time)
predicate(releasedAt(fluent,time)).
==> mpred_prop(releasedAt(fluent,time),predicate).
==> meta_argtypes(releasedAt(fluent,time)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:65
% predicate Initiates(event,fluent,time)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',65).
predicate(initiates(event,fluent,time)).
==> mpred_prop(initiates(event,fluent,time),predicate).
==> meta_argtypes(initiates(event,fluent,time)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:66
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',67).
% predicate Terminates(event,fluent,time)
predicate(terminates(event,fluent,time)).
==> mpred_prop(terminates(event,fluent,time),predicate).
==> meta_argtypes(terminates(event,fluent,time)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:67
% predicate Releases(event,fluent,time)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',67).
predicate(releases(event,fluent,time)).
==> mpred_prop(releases(event,fluent,time),predicate).
==> meta_argtypes(releases(event,fluent,time)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:68
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',69).
% predicate Trajectory(fluent,time,fluent,offset)
predicate(trajectory(fluent,time,fluent,offset)).
==> mpred_prop(trajectory(fluent,time,fluent,offset),predicate).
==> meta_argtypes(trajectory(fluent,time,fluent,offset)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:70
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',71).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: foundations/DEC.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; Discrete Event Calculus (DEC)
%;
%; @article{Mueller:2004a,
%;   author = "Erik T. Mueller",
%;   year = "2004",
%;   title = "Event calculus reasoning through satisfiability",
%;   journal = "Journal of Logic and Computation",
%;   volume = "14",
%;   number = "5",
%;   pages = "703--730",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:101
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',102).
% sort time: integer
==> subsort(time,integer).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:102
% sort offset: integer
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',102).
==> subsort(offset,integer).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:104
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',105).
% reified sort fluent
reified_sort(fluent).
==> mpred_prop(fluent,reified_sort).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:105
% reified sort event
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',105).
reified_sort(event).
==> mpred_prop(event,reified_sort).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:107
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',108).
% predicate Happens(event,time)
predicate(happens(event,time)).
==> mpred_prop(happens(event,time),predicate).
==> meta_argtypes(happens(event,time)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:108
% predicate HoldsAt(fluent,time)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',108).
predicate(holds_at(fluent,time)).
==> mpred_prop(holds_at(fluent,time),predicate).
==> meta_argtypes(holds_at(fluent,time)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:109
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',110).
% predicate ReleasedAt(fluent,time)
predicate(releasedAt(fluent,time)).
==> mpred_prop(releasedAt(fluent,time),predicate).
==> meta_argtypes(releasedAt(fluent,time)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:111
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',112).
% predicate Initiates(event,fluent,time)
predicate(initiates(event,fluent,time)).
==> mpred_prop(initiates(event,fluent,time),predicate).
==> meta_argtypes(initiates(event,fluent,time)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:112
% predicate Terminates(event,fluent,time)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',112).
predicate(terminates(event,fluent,time)).
==> mpred_prop(terminates(event,fluent,time),predicate).
==> meta_argtypes(terminates(event,fluent,time)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:113
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',114).
% predicate Releases(event,fluent,time)
predicate(releases(event,fluent,time)).
==> mpred_prop(releases(event,fluent,time),predicate).
==> meta_argtypes(releases(event,fluent,time)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:115
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',116).
% [fluent,time]
% (HoldsAt(fluent,time) &
%  !ReleasedAt(fluent,time+1) &
%  !({event} Happens(event,time) & Terminates(event,fluent,time))) ->
% HoldsAt(fluent,time+1).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:119
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',116).

 /*  holds_at(Fluent, Time), not(releasedAt(Fluent, Time+1)), not(exists([Event],  (happens(Event, Time), terminates(Event, Fluent, Time)))) ->
       holds_at(Fluent, Time+1).
 */

 /*  holds_at(Fluent, Time+1) :-
       holds_at(Fluent, Time),
       not(releasedAt(Fluent, Time+1)),
       (   not(happens(Event, Time))
       ;   not(terminates(Event, Fluent, Time))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',116).

 /*  [holds_at(Fluent, Time), not(releasedAt(Fluent, Time+1)),  (not(happens(Event, Time));not(terminates(Event, Fluent, Time))), b(Time, Time3), ignore(Time+1==Time3)] ->
       ta(Time,
          tvs1=[Time, Time+1],
          tvs2=[Time, Time3],
          holds_at(Fluent, Time3)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',116).
axiom(holds_at(Fluent, Time3),
   
    [ holds_at(Fluent, Time),
      not(releasedAt(Fluent, Time3)),
       (not(happens(Event, Time));not(terminates(Event, Fluent, Time))),
      b(Time, Time3)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',116).

 /*  not(holds_at(Fluent, Time)) :-
       ( not(releasedAt(Fluent, Time+1)),
         (   not(happens(Event, Time))
         ;   not(terminates(Event, Fluent, Time))
         )
       ),
       not(holds_at(Fluent, Time+1)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',116).

 /*  [not(releasedAt(Fluent, Time+1)),  (not(happens(Event, Time));not(terminates(Event, Fluent, Time))), holds_at(neg(Fluent), Time4), b(Time, Time4), ignore(Time+1==Time4)] ->
       ta(Time,
          tvs1=[Time, Time+1],
          tvs2=[Time, Time4],
          holds_at(neg(Fluent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',116).
axiom(holds_at(neg(Fluent), Time),
   
    [ not(releasedAt(Fluent, Time4)),
       (not(happens(Event, Time));not(terminates(Event, Fluent, Time))),
      holds_at(neg(Fluent), Time4),
      b(Time, Time4)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',116).

 /*  releasedAt(Fluent, Time+1) :-
       (   not(happens(Event, Time))
       ;   not(terminates(Event, Fluent, Time))
       ),
       holds_at(Fluent, Time),
       not(holds_at(Fluent, Time+1)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',116).

 /*  [(not(happens(Event, Time));not(terminates(Event, Fluent, Time))), holds_at(Fluent, Time), holds_at(neg(Fluent), Time5), b(Time, Time5), ignore(Time+1==Time5)] ->
       ta(Time,
          tvs1=[Time, Time+1],
          tvs2=[Time, Time5],
          releasedAt(Fluent, Time+1)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',116).
axiom(releasedAt(Fluent, Time5),
   
    [  (not(happens(Event, Time));not(terminates(Event, Fluent, Time))),
      holds_at(Fluent, Time),
      holds_at(neg(Fluent), Time5),
      b(Time, Time5)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',116).

 /*  happens(Event, Time) :-
       not(releasedAt(Fluent, Time+1)),
       holds_at(Fluent, Time),
       not(holds_at(Fluent, Time+1)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',116).

 /*  [not(releasedAt(Fluent, Time+1)), holds_at(Fluent, Time), holds_at(neg(Fluent), Time6), b(Time, Time6), ignore(Time+1==Time6)] ->
       ta(Time,
          tvs1=[Time, Time+1],
          tvs2=[Time, Time6],
          happens(Event, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',116).
axiom(happens(Event, Time),
   
    [ not(releasedAt(Fluent, Time6)),
      holds_at(Fluent, Time),
      holds_at(neg(Fluent), Time6),
      b(Time, Time6)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',116).

 /*  terminates(Event, Fluent, Time) :-
       not(releasedAt(Fluent, Time+1)),
       holds_at(Fluent, Time),
       not(holds_at(Fluent, Time+1)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',116).

 /*  [not(releasedAt(Fluent, Time+1)), holds_at(Fluent, Time), holds_at(neg(Fluent), Time7), b(Time, Time7), ignore(Time+1==Time7)] ->
       ta(Time,
          tvs1=[Time, Time+1],
          tvs2=[Time, Time7],
          terminates(Event, Fluent, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',116).
axiom(terminates(Event, Fluent, Time),
   
    [ not(releasedAt(Fluent, Time7)),
      holds_at(Fluent, Time),
      holds_at(neg(Fluent), Time7),
      b(Time, Time7)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:121
% [fluent,time]
% (!HoldsAt(fluent,time) &
%  !ReleasedAt(fluent,time+1) &
%  !({event} Happens(event,time) & Initiates(event,fluent,time))) ->
% !HoldsAt(fluent,time+1).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:125
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',123).

 /*  holds_at(neg(Fluent), Time), not(releasedAt(Fluent, Time+1)), not(exists([Event],  (happens(Event, Time), initiates(Event, Fluent, Time)))) ->
       holds_at(neg(Fluent), Time+1).
 */

 /*  holds_at(neg(Fluent), Time+1) :-
       holds_at(neg(Fluent), Time),
       not(releasedAt(Fluent, Time+1)),
       (   not(happens(Event, Time))
       ;   not(initiates(Event, Fluent, Time))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',123).

 /*  [holds_at(neg(Fluent), Time), not(releasedAt(Fluent, Time+1)),  (not(happens(Event, Time));not(initiates(Event, Fluent, Time))), b(Time, Time3), ignore(Time+1==Time3)] ->
       ta(Time,
          tvs1=[Time, Time+1],
          tvs2=[Time, Time3],
          holds_at(neg(Fluent), Time3)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',123).
axiom(holds_at(neg(Fluent), Time3),
   
    [ holds_at(neg(Fluent), Time),
      not(releasedAt(Fluent, Time3)),
       (not(happens(Event, Time));not(initiates(Event, Fluent, Time))),
      b(Time, Time3)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',123).

 /*  not(holds_at(neg(Fluent), Time)) :-
       ( not(releasedAt(Fluent, Time+1)),
         (   not(happens(Event, Time))
         ;   not(initiates(Event, Fluent, Time))
         )
       ),
       not(holds_at(neg(Fluent), Time+1)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',123).

 /*  [not(releasedAt(Fluent, Time+1)),  (not(happens(Event, Time));not(initiates(Event, Fluent, Time))), holds_at(Fluent, Time4), b(Time, Time4), ignore(Time+1==Time4)] ->
       ta(Time,
          tvs1=[Time, Time+1],
          tvs2=[Time, Time4],
          holds_at(Fluent, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',123).
axiom(holds_at(Fluent, Time),
   
    [ not(releasedAt(Fluent, Time4)),
       (not(happens(Event, Time));not(initiates(Event, Fluent, Time))),
      holds_at(Fluent, Time4),
      b(Time, Time4)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',123).

 /*  releasedAt(Fluent, Time+1) :-
       (   not(happens(Event, Time))
       ;   not(initiates(Event, Fluent, Time))
       ),
       holds_at(neg(Fluent), Time),
       not(holds_at(neg(Fluent), Time+1)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',123).

 /*  [(not(happens(Event, Time));not(initiates(Event, Fluent, Time))), holds_at(neg(Fluent), Time), holds_at(Fluent, Time5), b(Time, Time5), ignore(Time+1==Time5)] ->
       ta(Time,
          tvs1=[Time, Time+1],
          tvs2=[Time, Time5],
          releasedAt(Fluent, Time+1)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',123).
axiom(releasedAt(Fluent, Time5),
   
    [  (not(happens(Event, Time));not(initiates(Event, Fluent, Time))),
      holds_at(neg(Fluent), Time),
      holds_at(Fluent, Time5),
      b(Time, Time5)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',123).

 /*  happens(Event, Time) :-
       not(releasedAt(Fluent, Time+1)),
       holds_at(neg(Fluent), Time),
       not(holds_at(neg(Fluent), Time+1)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',123).

 /*  [not(releasedAt(Fluent, Time+1)), holds_at(neg(Fluent), Time), holds_at(Fluent, Time6), b(Time, Time6), ignore(Time+1==Time6)] ->
       ta(Time,
          tvs1=[Time, Time+1],
          tvs2=[Time, Time6],
          happens(Event, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',123).
axiom(happens(Event, Time),
   
    [ not(releasedAt(Fluent, Time6)),
      holds_at(neg(Fluent), Time),
      holds_at(Fluent, Time6),
      b(Time, Time6)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',123).

 /*  initiates(Event, Fluent, Time) :-
       not(releasedAt(Fluent, Time+1)),
       holds_at(neg(Fluent), Time),
       not(holds_at(neg(Fluent), Time+1)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',123).

 /*  [not(releasedAt(Fluent, Time+1)), holds_at(neg(Fluent), Time), holds_at(Fluent, Time7), b(Time, Time7), ignore(Time+1==Time7)] ->
       ta(Time,
          tvs1=[Time, Time+1],
          tvs2=[Time, Time7],
          initiates(Event, Fluent, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',123).
axiom(initiates(Event, Fluent, Time),
   
    [ not(releasedAt(Fluent, Time7)),
      holds_at(neg(Fluent), Time),
      holds_at(Fluent, Time7),
      b(Time, Time7)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:127
% [fluent,time]
% (!ReleasedAt(fluent,time) &
%  !({event} Happens(event,time) & Releases(event,fluent,time))) ->
% !ReleasedAt(fluent,time+1).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:130
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',129).

 /*  not(releasedAt(Fluent, Time)), not(exists([Event],  (happens(Event, Time), releases(Event, Fluent, Time)))) ->
       not(releasedAt(Fluent, Time+1)).
 */

 /*  not(releasedAt(Fluent, Time+1)) :-
       not(releasedAt(Fluent, Time)),
       (   not(happens(Event, Time))
       ;   not(releases(Event, Fluent, Time))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',129).

 /*  [ignore(Time+1==Time3), b(Time, Time3), not(releasedAt(Fluent, Time)),  (not(happens(Event, Time));not(releases(Event, Fluent, Time)))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time, Time3],
          not(releasedAt(Fluent, Time3))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',129).
axiom(not(releasedAt(Fluent, Time3)),
   
    [ b(Time, Time3),
      not(releasedAt(Fluent, Time)),
       (not(happens(Event, Time));not(releases(Event, Fluent, Time)))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',129).

 /*  releasedAt(Fluent, Time) :-
       (   not(happens(Event, Time))
       ;   not(releases(Event, Fluent, Time))
       ),
       releasedAt(Fluent, Time+1).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',129).

 /*  [ignore(Time+1==Time4), b(Time, Time4),  (not(happens(Event, Time));not(releases(Event, Fluent, Time))), releasedAt(Fluent, Time4)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time, Time4],
          releasedAt(Fluent, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',129).
axiom(releasedAt(Fluent, Time),
   
    [ b(Time, Time4),
       (not(happens(Event, Time));not(releases(Event, Fluent, Time))),
      releasedAt(Fluent, Time4)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',129).

 /*  happens(Event, Time) :-
       not(releasedAt(Fluent, Time)),
       releasedAt(Fluent, Time+1).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',129).

 /*  [ignore(Time+1==Time5), b(Time, Time5), not(releasedAt(Fluent, Time)), releasedAt(Fluent, Time5)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time, Time5],
          happens(Event, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',129).
axiom(happens(Event, Time),
   
    [ b(Time, Time5),
      not(releasedAt(Fluent, Time)),
      releasedAt(Fluent, Time5)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',129).

 /*  releases(Event, Fluent, Time) :-
       not(releasedAt(Fluent, Time)),
       releasedAt(Fluent, Time+1).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',129).

 /*  [ignore(Time+1==Time6), b(Time, Time6), not(releasedAt(Fluent, Time)), releasedAt(Fluent, Time6)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time, Time6],
          releases(Event, Fluent, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',129).
axiom(releases(Event, Fluent, Time),
   
    [ b(Time, Time6),
      not(releasedAt(Fluent, Time)),
      releasedAt(Fluent, Time6)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:132
% [fluent,time]
% (ReleasedAt(fluent,time) &
%  !({event} Happens(event,time) &
%    (Initiates(event,fluent,time) |
%     Terminates(event,fluent,time)))) ->
% ReleasedAt(fluent,time+1).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:137
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',134).

 /*  releasedAt(Fluent, Time), not(exists([Event],  (happens(Event, Time), (initiates(Event, Fluent, Time);terminates(Event, Fluent, Time))))) ->
       releasedAt(Fluent, Time+1).
 */

 /*  releasedAt(Fluent, Time+1) :-
       releasedAt(Fluent, Time),
       (   not(happens(Event, Time))
       ;   not(initiates(Event, Fluent, Time)),
           not(terminates(Event, Fluent, Time))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',134).

 /*  [ignore(Time+1==Time3), b(Time, Time3), releasedAt(Fluent, Time),  (not(happens(Event, Time));not(initiates(Event, Fluent, Time)), not(terminates(Event, Fluent, Time)))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time, Time3],
          releasedAt(Fluent, Time3)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',134).
axiom(releasedAt(Fluent, Time3),
   
    [ b(Time, Time3),
      releasedAt(Fluent, Time),
       (not(happens(Event, Time));not(initiates(Event, Fluent, Time)), not(terminates(Event, Fluent, Time)))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',134).

 /*  not(releasedAt(Fluent, Time)) :-
       (   not(happens(Event, Time))
       ;   not(initiates(Event, Fluent, Time)),
           not(terminates(Event, Fluent, Time))
       ),
       not(releasedAt(Fluent, Time+1)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',134).

 /*  [ignore(Time+1==Time4), b(Time, Time4),  (not(happens(Event, Time));not(initiates(Event, Fluent, Time)), not(terminates(Event, Fluent, Time))), not(releasedAt(Fluent, Time4))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time, Time4],
          not(releasedAt(Fluent, Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',134).
axiom(not(releasedAt(Fluent, Time)),
   
    [ b(Time, Time4),
       (not(happens(Event, Time));not(initiates(Event, Fluent, Time)), not(terminates(Event, Fluent, Time))),
      not(releasedAt(Fluent, Time4))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',134).

 /*  happens(Event, Time) :-
       releasedAt(Fluent, Time),
       not(releasedAt(Fluent, Time+1)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',134).

 /*  [ignore(Time+1==Time5), b(Time, Time5), releasedAt(Fluent, Time), not(releasedAt(Fluent, Time5))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time, Time5],
          happens(Event, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',134).
axiom(happens(Event, Time),
   
    [ b(Time, Time5),
      releasedAt(Fluent, Time),
      not(releasedAt(Fluent, Time5))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',134).

 /*  initiates(Event, Fluent, Time) :-
       not(terminates(Event, Fluent, Time)),
       releasedAt(Fluent, Time),
       not(releasedAt(Fluent, Time+1)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',134).

 /*  [ignore(Time+1==Time6), b(Time, Time6), not(terminates(Event, Fluent, Time)), releasedAt(Fluent, Time), not(releasedAt(Fluent, Time6))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time, Time6],
          initiates(Event, Fluent, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',134).
axiom(initiates(Event, Fluent, Time),
   
    [ b(Time, Time6),
      not(terminates(Event, Fluent, Time)),
      releasedAt(Fluent, Time),
      not(releasedAt(Fluent, Time6))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',134).

 /*  terminates(Event, Fluent, Time) :-
       not(initiates(Event, Fluent, Time)),
       releasedAt(Fluent, Time),
       not(releasedAt(Fluent, Time+1)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',134).

 /*  [ignore(Time+1==Time7), b(Time, Time7), not(initiates(Event, Fluent, Time)), releasedAt(Fluent, Time), not(releasedAt(Fluent, Time7))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time, Time7],
          terminates(Event, Fluent, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',134).
axiom(terminates(Event, Fluent, Time),
   
    [ b(Time, Time7),
      not(initiates(Event, Fluent, Time)),
      releasedAt(Fluent, Time),
      not(releasedAt(Fluent, Time7))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:139
% [event,fluent,time]
% (Happens(event,time) & Initiates(event,fluent,time)) ->
% (HoldsAt(fluent,time+1) & !ReleasedAt(fluent,time+1)).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:141

 /*  happens(Event, Time), initiates(Event, Fluent, Time) ->
       holds_at(Fluent, Time+1),
       not(releasedAt(Fluent, Time+1)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',141).

 /*  not(happens(Event, Time)) :-
       initiates(Event, Fluent, Time),
       (   not(holds_at(Fluent, Time+1))
       ;   releasedAt(Fluent, Time+1)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',141).

 /*  [initiates(Event, Fluent, Time),  (holds_at(neg(Fluent), Time3);releasedAt(Fluent, Time+1)), b(Time, Time3), ignore(Time+1==Time3)] ->
       ta(Time,
          tvs1=[Time, Time+1],
          tvs2=[Time, Time3],
          not(happens(Event, Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',141).
axiom(not(happens(Event, Time)),
   
    [ initiates(Event, Fluent, Time),
       (holds_at(neg(Fluent), Time3);releasedAt(Fluent, Time3)),
      b(Time, Time3)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',141).

 /*  not(initiates(Event, Fluent, Time)) :-
       happens(Event, Time),
       (   not(holds_at(Fluent, Time+1))
       ;   releasedAt(Fluent, Time+1)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',141).

 /*  [happens(Event, Time),  (holds_at(neg(Fluent), Time4);releasedAt(Fluent, Time+1)), b(Time, Time4), ignore(Time+1==Time4)] ->
       ta(Time,
          tvs1=[Time, Time+1],
          tvs2=[Time, Time4],
          not(initiates(Event, Fluent, Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',141).
axiom(not(initiates(Event, Fluent, Time)),
   
    [ happens(Event, Time),
       (holds_at(neg(Fluent), Time4);releasedAt(Fluent, Time4)),
      b(Time, Time4)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',141).

 /*  holds_at(Fluent, Time+1) :-
       happens(Event, Time),
       initiates(Event, Fluent, Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',141).

 /*  [happens(Event, Time), initiates(Event, Fluent, Time), b(Time, Time5), ignore(Time+1==Time5)] ->
       ta(Time,
          tvs1=[Time, Time+1],
          tvs2=[Time, Time5],
          holds_at(Fluent, Time5)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',141).
axiom(holds_at(Fluent, Time5),
   
    [ happens(Event, Time),
      initiates(Event, Fluent, Time),
      b(Time, Time5)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',141).

 /*  not(releasedAt(Fluent, Time+1)) :-
       happens(Event, Time),
       initiates(Event, Fluent, Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',141).

 /*  [ignore(Time+1==Time6), b(Time, Time6), happens(Event, Time), initiates(Event, Fluent, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time, Time6],
          not(releasedAt(Fluent, Time6))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',141).
axiom(not(releasedAt(Fluent, Time6)),
   
    [ b(Time, Time6),
      happens(Event, Time),
      initiates(Event, Fluent, Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:143
% [event,fluent,time]
% (Happens(event,time) & Terminates(event,fluent,time)) ->
% (!HoldsAt(fluent,time+1) & !ReleasedAt(fluent,time+1)).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:145

 /*  happens(Event, Time), terminates(Event, Fluent, Time) ->
       holds_at(neg(Fluent), Time+1),
       not(releasedAt(Fluent, Time+1)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',145).

 /*  not(happens(Event, Time)) :-
       terminates(Event, Fluent, Time),
       (   not(holds_at(neg(Fluent), Time+1))
       ;   releasedAt(Fluent, Time+1)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',145).

 /*  [terminates(Event, Fluent, Time),  (holds_at(Fluent, Time3);releasedAt(Fluent, Time+1)), b(Time, Time3), ignore(Time+1==Time3)] ->
       ta(Time,
          tvs1=[Time, Time+1],
          tvs2=[Time, Time3],
          not(happens(Event, Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',145).
axiom(not(happens(Event, Time)),
   
    [ terminates(Event, Fluent, Time),
       (holds_at(Fluent, Time3);releasedAt(Fluent, Time3)),
      b(Time, Time3)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',145).

 /*  not(terminates(Event, Fluent, Time)) :-
       happens(Event, Time),
       (   not(holds_at(neg(Fluent), Time+1))
       ;   releasedAt(Fluent, Time+1)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',145).

 /*  [happens(Event, Time),  (holds_at(Fluent, Time4);releasedAt(Fluent, Time+1)), b(Time, Time4), ignore(Time+1==Time4)] ->
       ta(Time,
          tvs1=[Time, Time+1],
          tvs2=[Time, Time4],
          not(terminates(Event, Fluent, Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',145).
axiom(not(terminates(Event, Fluent, Time)),
   
    [ happens(Event, Time),
       (holds_at(Fluent, Time4);releasedAt(Fluent, Time4)),
      b(Time, Time4)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',145).

 /*  holds_at(neg(Fluent), Time+1) :-
       happens(Event, Time),
       terminates(Event, Fluent, Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',145).

 /*  [happens(Event, Time), terminates(Event, Fluent, Time), b(Time, Time5), ignore(Time+1==Time5)] ->
       ta(Time,
          tvs1=[Time, Time+1],
          tvs2=[Time, Time5],
          holds_at(neg(Fluent), Time5)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',145).
axiom(holds_at(neg(Fluent), Time5),
   
    [ happens(Event, Time),
      terminates(Event, Fluent, Time),
      b(Time, Time5)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',145).

 /*  not(releasedAt(Fluent, Time+1)) :-
       happens(Event, Time),
       terminates(Event, Fluent, Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',145).

 /*  [ignore(Time+1==Time6), b(Time, Time6), happens(Event, Time), terminates(Event, Fluent, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time, Time6],
          not(releasedAt(Fluent, Time6))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',145).
axiom(not(releasedAt(Fluent, Time6)),
   
    [ b(Time, Time6),
      happens(Event, Time),
      terminates(Event, Fluent, Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:147
% [event,fluent,time]
% (Happens(event,time) & Releases(event,fluent,time)) ->
% ReleasedAt(fluent,time+1).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:149

 /*  happens(Event, Time), releases(Event, Fluent, Time) ->
       releasedAt(Fluent, Time+1).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',149).

 /*  releasedAt(Fluent, Time+1) :-
       happens(Event, Time),
       releases(Event, Fluent, Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',149).

 /*  [ignore(Time+1==Time3), b(Time, Time3), happens(Event, Time), releases(Event, Fluent, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time, Time3],
          releasedAt(Fluent, Time3)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',149).
axiom(releasedAt(Fluent, Time3),
   
    [ b(Time, Time3),
      happens(Event, Time),
      releases(Event, Fluent, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',149).

 /*  not(happens(Event, Time)) :-
       releases(Event, Fluent, Time),
       not(releasedAt(Fluent, Time+1)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',149).

 /*  [ignore(Time+1==Time4), b(Time, Time4), releases(Event, Fluent, Time), not(releasedAt(Fluent, Time4))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time, Time4],
          not(happens(Event, Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',149).
axiom(not(happens(Event, Time)),
   
    [ b(Time, Time4),
      releases(Event, Fluent, Time),
      not(releasedAt(Fluent, Time4))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',149).

 /*  not(releases(Event, Fluent, Time)) :-
       happens(Event, Time),
       not(releasedAt(Fluent, Time+1)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',149).

 /*  [ignore(Time+1==Time5), b(Time, Time5), happens(Event, Time), not(releasedAt(Fluent, Time5))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time, Time5],
          not(releases(Event, Fluent, Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',149).
axiom(not(releases(Event, Fluent, Time)),
   
    [ b(Time, Time5),
      happens(Event, Time),
      not(releasedAt(Fluent, Time5))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:151
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: foundations/ECCausal.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; Causal Constraints
%;
%; @inproceedings{Shanahan:1999a,
%;   author = "Murray Shanahan",
%;   year = "1999",
%;   title = "The ramification problem in the event calculus",
%;   booktitle = "\uppercase{P}roceedings of the \uppercase{S}ixteenth \uppercase{I}nternational \uppercase{J}oint \uppercase{C}onference on \uppercase{A}rtificial \uppercase{I}ntelligence",
%;   pages = "140--146",
%;   address = "San Mateo, CA",
%;   publisher = "Morgan Kaufmann",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:182
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',183).
% predicate Started(fluent,time)
predicate(started(fluent,time)).
==> mpred_prop(started(fluent,time),predicate).
==> meta_argtypes(started(fluent,time)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:183
% predicate Stopped(fluent,time)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',183).
predicate(stopped(fluent,time)).
==> mpred_prop(stopped(fluent,time),predicate).
==> meta_argtypes(stopped(fluent,time)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:185
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',186).
% [fluent,time]
% Started(fluent,time) <->
% (HoldsAt(fluent,time) |
%  ({event} Happens(event,time) & Initiates(event,fluent,time))).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:188
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',186).

 /*  started(Fluent, Time) <->
       (   holds_at(Fluent, Time)
       ;   exists([Event],
                   (happens(Event, Time), initiates(Event, Fluent, Time)))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',186).

 /*  [started] <->
       [;, holds_at, exists, happens, initiates].
 */

 /*  started(Fluent, Time) ->
       (   holds_at(Fluent, Time)
       ;   exists([Event],
                   (happens(Event, Time), initiates(Event, Fluent, Time)))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',186).

 /*  not(started(Fluent, Time)) :-
       not(holds_at(Fluent, Time)),
       (   not(happens(Event, Time))
       ;   not(initiates(Event, Fluent, Time))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',186).

 /*  [holds_at(neg(Fluent), Time),  (not(happens(Event, Time));not(initiates(Event, Fluent, Time)))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(started(Fluent, Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',186).
axiom(not(started(Fluent, Time)),
   
    [ holds_at(neg(Fluent), Time),
       (not(happens(Event, Time));not(initiates(Event, Fluent, Time)))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',186).

 /*  holds_at(Fluent, Time) :-
       (   not(happens(Event, Time))
       ;   not(initiates(Event, Fluent, Time))
       ),
       started(Fluent, Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',186).

 /*  [(not(happens(Event, Time));not(initiates(Event, Fluent, Time))), started(Fluent, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(Fluent, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',186).
axiom(holds_at(Fluent, Time),
   
    [  (not(happens(Event, Time));not(initiates(Event, Fluent, Time))),
      started(Fluent, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',186).

 /*  happens(Event, Time) :-
       not(holds_at(Fluent, Time)),
       started(Fluent, Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',186).

 /*  [holds_at(neg(Fluent), Time), started(Fluent, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(Event, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',186).
axiom(happens(Event, Time),
    [holds_at(neg(Fluent), Time), started(Fluent, Time)]).

 /*  initiates(Event, Fluent, Time) :-
       not(holds_at(Fluent, Time)),
       started(Fluent, Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',186).

 /*  [holds_at(neg(Fluent), Time), started(Fluent, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(Event, Fluent, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',186).
axiom(initiates(Event, Fluent, Time),
    [holds_at(neg(Fluent), Time), started(Fluent, Time)]).

 /*  holds_at(Fluent, Time);exists([Event],  (happens(Event, Time), initiates(Event, Fluent, Time))) ->
       started(Fluent, Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',186).

 /*  started(Fluent, Time) :-
       (   holds_at(Fluent, Time)
       ;   happens(Event, Time),
           initiates(Event, Fluent, Time)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',186).

 /*  [(holds_at(Fluent, Time);happens(Event, Time), initiates(Event, Fluent, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          started(Fluent, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',186).
axiom(started(Fluent, Time),
   
    [  (holds_at(Fluent, Time);happens(Event, Time), initiates(Event, Fluent, Time))
    ]).

 /*  not(holds_at(Fluent, Time)) :-
       not(started(Fluent, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',186).

 /*  [not(started(Fluent, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(Fluent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',186).
axiom(holds_at(neg(Fluent), Time),
    [not(started(Fluent, Time))]).

 /*  not(happens(Event, Time)) :-
       initiates(Event, Fluent, Time),
       not(started(Fluent, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',186).

 /*  [initiates(Event, Fluent, Time), not(started(Fluent, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(Event, Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',186).
axiom(not(happens(Event, Time)),
   
    [ initiates(Event, Fluent, Time),
      not(started(Fluent, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',186).

 /*  not(initiates(Event, Fluent, Time)) :-
       happens(Event, Time),
       not(started(Fluent, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',186).

 /*  [happens(Event, Time), not(started(Fluent, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(initiates(Event, Fluent, Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',186).
axiom(not(initiates(Event, Fluent, Time)),
    [happens(Event, Time), not(started(Fluent, Time))]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:190
% [fluent,time]
% Stopped(fluent,time) <->
% (!HoldsAt(fluent,time) |
%  ({event} Happens(event,time) & Terminates(event,fluent,time))).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:193
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',192).

 /*  stopped(Fluent, Time) <->
       (   holds_at(neg(Fluent), Time)
       ;   exists([Event],
                   (happens(Event, Time), terminates(Event, Fluent, Time)))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',192).

 /*  [stopped] <->
       [;, holds_at, neg, exists, happens, terminates].
 */

 /*  stopped(Fluent, Time) ->
       (   holds_at(neg(Fluent), Time)
       ;   exists([Event],
                   (happens(Event, Time), terminates(Event, Fluent, Time)))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',192).

 /*  not(stopped(Fluent, Time)) :-
       not(holds_at(neg(Fluent), Time)),
       (   not(happens(Event, Time))
       ;   not(terminates(Event, Fluent, Time))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',192).

 /*  [holds_at(Fluent, Time),  (not(happens(Event, Time));not(terminates(Event, Fluent, Time)))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(stopped(Fluent, Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',192).
axiom(not(stopped(Fluent, Time)),
   
    [ holds_at(Fluent, Time),
       (not(happens(Event, Time));not(terminates(Event, Fluent, Time)))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',192).

 /*  holds_at(neg(Fluent), Time) :-
       (   not(happens(Event, Time))
       ;   not(terminates(Event, Fluent, Time))
       ),
       stopped(Fluent, Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',192).

 /*  [(not(happens(Event, Time));not(terminates(Event, Fluent, Time))), stopped(Fluent, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(Fluent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',192).
axiom(holds_at(neg(Fluent), Time),
   
    [  (not(happens(Event, Time));not(terminates(Event, Fluent, Time))),
      stopped(Fluent, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',192).

 /*  happens(Event, Time) :-
       not(holds_at(neg(Fluent), Time)),
       stopped(Fluent, Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',192).

 /*  [holds_at(Fluent, Time), stopped(Fluent, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(Event, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',192).
axiom(happens(Event, Time),
    [holds_at(Fluent, Time), stopped(Fluent, Time)]).

 /*  terminates(Event, Fluent, Time) :-
       not(holds_at(neg(Fluent), Time)),
       stopped(Fluent, Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',192).

 /*  [holds_at(Fluent, Time), stopped(Fluent, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(Event, Fluent, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',192).
axiom(terminates(Event, Fluent, Time),
    [holds_at(Fluent, Time), stopped(Fluent, Time)]).

 /*  holds_at(neg(Fluent), Time);exists([Event],  (happens(Event, Time), terminates(Event, Fluent, Time))) ->
       stopped(Fluent, Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',192).

 /*  stopped(Fluent, Time) :-
       (   holds_at(neg(Fluent), Time)
       ;   happens(Event, Time),
           terminates(Event, Fluent, Time)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',192).

 /*  [(holds_at(neg(Fluent), Time);happens(Event, Time), terminates(Event, Fluent, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          stopped(Fluent, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',192).
axiom(stopped(Fluent, Time),
   
    [  (holds_at(neg(Fluent), Time);happens(Event, Time), terminates(Event, Fluent, Time))
    ]).

 /*  not(holds_at(neg(Fluent), Time)) :-
       not(stopped(Fluent, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',192).

 /*  [not(stopped(Fluent, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(Fluent, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',192).
axiom(holds_at(Fluent, Time),
    [not(stopped(Fluent, Time))]).

 /*  not(happens(Event, Time)) :-
       terminates(Event, Fluent, Time),
       not(stopped(Fluent, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',192).

 /*  [terminates(Event, Fluent, Time), not(stopped(Fluent, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(Event, Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',192).
axiom(not(happens(Event, Time)),
   
    [ terminates(Event, Fluent, Time),
      not(stopped(Fluent, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',192).

 /*  not(terminates(Event, Fluent, Time)) :-
       happens(Event, Time),
       not(stopped(Fluent, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',192).

 /*  [happens(Event, Time), not(stopped(Fluent, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(terminates(Event, Fluent, Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',192).
axiom(not(terminates(Event, Fluent, Time)),
    [happens(Event, Time), not(stopped(Fluent, Time))]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:195
% predicate Initiated(fluent,time)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',195).
predicate(initiated(fluent,time)).
==> mpred_prop(initiated(fluent,time),predicate).
==> meta_argtypes(initiated(fluent,time)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:196
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',197).
% predicate Terminated(fluent,time)
predicate(terminated(fluent,time)).
==> mpred_prop(terminated(fluent,time),predicate).
==> meta_argtypes(terminated(fluent,time)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:198
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',199).
% [fluent,time]
% Initiated(fluent,time) <->
% (Started(fluent,time) &
%  !({event} Happens(event,time) & Terminates(event,fluent,time))).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:201
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',199).

 /*  initiated(Fluent, Time) <->
       started(Fluent, Time),
       not(exists([Event],
                   (happens(Event, Time), terminates(Event, Fluent, Time)))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',199).

 /*  [initiated] <->
       [started, not, exists, happens, terminates].
 */

 /*  initiated(Fluent, Time) ->
       started(Fluent, Time),
       not(exists([Event],
                   (happens(Event, Time), terminates(Event, Fluent, Time)))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',199).

 /*  not(initiated(Fluent, Time)) :-
       (   not(started(Fluent, Time))
       ;   happens(Event, Time),
           terminates(Event, Fluent, Time)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',199).

 /*  [(not(started(Fluent, Time));happens(Event, Time), terminates(Event, Fluent, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(initiated(Fluent, Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',199).
axiom(not(initiated(Fluent, Time)),
   
    [  (not(started(Fluent, Time));happens(Event, Time), terminates(Event, Fluent, Time))
    ]).

 /*  started(Fluent, Time) :-
       initiated(Fluent, Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',199).

 /*  [initiated(Fluent, Time)] ->
       ta(Ta_Param, tvs1=[], tvs2=[], started(Fluent, Time)).
 */
axiom(started(Fluent, Time),
    [initiated(Fluent, Time)]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',199).

 /*  not(happens(Event, Time)) :-
       terminates(Event, Fluent, Time),
       initiated(Fluent, Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',199).

 /*  [terminates(Event, Fluent, Time), initiated(Fluent, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(Event, Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',199).
axiom(not(happens(Event, Time)),
   
    [ terminates(Event, Fluent, Time),
      initiated(Fluent, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',199).

 /*  not(terminates(Event, Fluent, Time)) :-
       happens(Event, Time),
       initiated(Fluent, Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',199).

 /*  [happens(Event, Time), initiated(Fluent, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(terminates(Event, Fluent, Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',199).
axiom(not(terminates(Event, Fluent, Time)),
    [happens(Event, Time), initiated(Fluent, Time)]).

 /*  started(Fluent, Time), not(exists([Event],  (happens(Event, Time), terminates(Event, Fluent, Time)))) ->
       initiated(Fluent, Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',199).

 /*  initiated(Fluent, Time) :-
       started(Fluent, Time),
       (   not(happens(Event, Time))
       ;   not(terminates(Event, Fluent, Time))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',199).

 /*  [started(Fluent, Time),  (not(happens(Event, Time));not(terminates(Event, Fluent, Time)))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiated(Fluent, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',199).
axiom(initiated(Fluent, Time),
   
    [ started(Fluent, Time),
       (not(happens(Event, Time));not(terminates(Event, Fluent, Time)))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',199).

 /*  not(started(Fluent, Time)) :-
       (   not(happens(Event, Time))
       ;   not(terminates(Event, Fluent, Time))
       ),
       not(initiated(Fluent, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',199).

 /*  [(not(happens(Event, Time));not(terminates(Event, Fluent, Time))), not(initiated(Fluent, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(started(Fluent, Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',199).
axiom(not(started(Fluent, Time)),
   
    [  (not(happens(Event, Time));not(terminates(Event, Fluent, Time))),
      not(initiated(Fluent, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',199).

 /*  happens(Event, Time) :-
       started(Fluent, Time),
       not(initiated(Fluent, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',199).

 /*  [started(Fluent, Time), not(initiated(Fluent, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(Event, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',199).
axiom(happens(Event, Time),
    [started(Fluent, Time), not(initiated(Fluent, Time))]).

 /*  terminates(Event, Fluent, Time) :-
       started(Fluent, Time),
       not(initiated(Fluent, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',199).

 /*  [started(Fluent, Time), not(initiated(Fluent, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(Event, Fluent, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',199).
axiom(terminates(Event, Fluent, Time),
    [started(Fluent, Time), not(initiated(Fluent, Time))]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:203
% [fluent,time]
% Terminated(fluent,time) <->
% (Stopped(fluent,time) &
%  !({event} Happens(event,time) & Initiates(event,fluent,time))).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:206
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',205).

 /*  terminated(Fluent, Time) <->
       stopped(Fluent, Time),
       not(exists([Event],
                   (happens(Event, Time), initiates(Event, Fluent, Time)))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',205).

 /*  [terminated] <->
       [stopped, not, exists, happens, initiates].
 */

 /*  terminated(Fluent, Time) ->
       stopped(Fluent, Time),
       not(exists([Event],
                   (happens(Event, Time), initiates(Event, Fluent, Time)))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',205).

 /*  not(terminated(Fluent, Time)) :-
       (   not(stopped(Fluent, Time))
       ;   happens(Event, Time),
           initiates(Event, Fluent, Time)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',205).

 /*  [(not(stopped(Fluent, Time));happens(Event, Time), initiates(Event, Fluent, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(terminated(Fluent, Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',205).
axiom(not(terminated(Fluent, Time)),
   
    [  (not(stopped(Fluent, Time));happens(Event, Time), initiates(Event, Fluent, Time))
    ]).

 /*  stopped(Fluent, Time) :-
       terminated(Fluent, Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',205).

 /*  [terminated(Fluent, Time)] ->
       ta(Ta_Param, tvs1=[], tvs2=[], stopped(Fluent, Time)).
 */
axiom(stopped(Fluent, Time),
    [terminated(Fluent, Time)]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',205).

 /*  not(happens(Event, Time)) :-
       initiates(Event, Fluent, Time),
       terminated(Fluent, Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',205).

 /*  [initiates(Event, Fluent, Time), terminated(Fluent, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(Event, Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',205).
axiom(not(happens(Event, Time)),
   
    [ initiates(Event, Fluent, Time),
      terminated(Fluent, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',205).

 /*  not(initiates(Event, Fluent, Time)) :-
       happens(Event, Time),
       terminated(Fluent, Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',205).

 /*  [happens(Event, Time), terminated(Fluent, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(initiates(Event, Fluent, Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',205).
axiom(not(initiates(Event, Fluent, Time)),
    [happens(Event, Time), terminated(Fluent, Time)]).

 /*  stopped(Fluent, Time), not(exists([Event],  (happens(Event, Time), initiates(Event, Fluent, Time)))) ->
       terminated(Fluent, Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',205).

 /*  terminated(Fluent, Time) :-
       stopped(Fluent, Time),
       (   not(happens(Event, Time))
       ;   not(initiates(Event, Fluent, Time))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',205).

 /*  [stopped(Fluent, Time),  (not(happens(Event, Time));not(initiates(Event, Fluent, Time)))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminated(Fluent, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',205).
axiom(terminated(Fluent, Time),
   
    [ stopped(Fluent, Time),
       (not(happens(Event, Time));not(initiates(Event, Fluent, Time)))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',205).

 /*  not(stopped(Fluent, Time)) :-
       (   not(happens(Event, Time))
       ;   not(initiates(Event, Fluent, Time))
       ),
       not(terminated(Fluent, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',205).

 /*  [(not(happens(Event, Time));not(initiates(Event, Fluent, Time))), not(terminated(Fluent, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(stopped(Fluent, Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',205).
axiom(not(stopped(Fluent, Time)),
   
    [  (not(happens(Event, Time));not(initiates(Event, Fluent, Time))),
      not(terminated(Fluent, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',205).

 /*  happens(Event, Time) :-
       stopped(Fluent, Time),
       not(terminated(Fluent, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',205).

 /*  [stopped(Fluent, Time), not(terminated(Fluent, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(Event, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',205).
axiom(happens(Event, Time),
   
    [ stopped(Fluent, Time),
      not(terminated(Fluent, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',205).

 /*  initiates(Event, Fluent, Time) :-
       stopped(Fluent, Time),
       not(terminated(Fluent, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',205).

 /*  [stopped(Fluent, Time), not(terminated(Fluent, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(Event, Fluent, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',205).
axiom(initiates(Event, Fluent, Time),
   
    [ stopped(Fluent, Time),
      not(terminated(Fluent, Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:208
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: foundations/ECTraj.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @incollection{MillerShanahan:2002,
%;   author = "Rob Miller and Murray Shanahan",
%;   year = "2002",
%;   title = "Some alternative formulations of the event calculus",
%;   editor = "Antonis C. Kakas and Fariba Sadri",
%;   booktitle = "Computational Logic: Logic Programming and Beyond: Essays in Honour of \uppercase{R}obert \uppercase{A}. \uppercase{K}owalski, Part \uppercase{II}",
%;   series = "Lecture Notes in Computer Science",
%;   volume = "2408",
%;   pages = "452--490",
%;   address = "Berlin",
%;   publisher = "Springer",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:240
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',241).
% predicate Clipped(time,fluent,time)
predicate(clipped(time,fluent,time)).
==> mpred_prop(clipped(time,fluent,time),predicate).
==> meta_argtypes(clipped(time,fluent,time)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:241
% predicate Declipped(time,fluent,time)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',241).
predicate(declipped(time,fluent,time)).
==> mpred_prop(declipped(time,fluent,time),predicate).
==> meta_argtypes(declipped(time,fluent,time)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:243
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',244).
% predicate Trajectory(fluent,time,fluent,offset)
predicate(trajectory(fluent,time,fluent,offset)).
==> mpred_prop(trajectory(fluent,time,fluent,offset),predicate).
==> meta_argtypes(trajectory(fluent,time,fluent,offset)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:244
% predicate AntiTrajectory(fluent,time,fluent,offset)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',244).
predicate(antiTrajectory(fluent,time,fluent,offset)).
==> mpred_prop(antiTrajectory(fluent,time,fluent,offset),predicate).
==> meta_argtypes(antiTrajectory(fluent,time,fluent,offset)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:246
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',247).
% [event,fluent,fluent2,offset,time]
% Happens(event,time) &
% Initiates(event,fluent,time) &
% 0 < offset &
% Trajectory(fluent,time,fluent2,offset) &
% !Clipped(time,fluent,time+offset) ->
% HoldsAt(fluent2,time+offset).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:252
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',247).

 /*  happens(Event, Time), initiates(Event, Fluent, Time), 0<Offset, trajectory(Fluent, Time, Fluent2, Offset), not(clipped(Time, Fluent, Time+Offset)) ->
       holds_at(Fluent2, Time+Offset).
 */

 /*  holds_at(Fluent2, Time+Offset) :-
       happens(Event, Time),
       initiates(Event, Fluent, Time),
       comparison(0, Offset, <),
       trajectory(Fluent, Time, Fluent2, Offset),
       not(clipped(Time, Fluent, Time+Offset)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',247).

 /*  [happens(Event, Time), initiates(Event, Fluent, Time), comparison(0, Offset, <), trajectory(Fluent, Time, Fluent2, Offset), not(clipped(Time, Fluent, Time5)), b(Time, Time5), toffset(Time, Offset, Time5), ignore(Time+Offset==Time5)] ->
       ta(Time,
          tvs1=[Time, Time+Offset],
          tvs2=[Time, Time5],
          holds_at(Fluent2, Time5)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',247).
axiom(holds_at(Fluent2, Time5),
   
    [ happens(Event, Time),
      initiates(Event, Fluent, Time),
      comparison(0, Offset, <),
      trajectory(Fluent, Time, Fluent2, Offset),
      not(clipped(Time, Fluent, Time5)),
      b(Time, Time5),
      toffset(Time, Offset, Time5)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',247).

 /*  not(happens(Event, Time)) :-
       ( initiates(Event, Fluent, Time),
         comparison(0, Offset, <),
         trajectory(Fluent, Time, Fluent2, Offset),
         not(clipped(Time, Fluent, Time+Offset))
       ),
       not(holds_at(Fluent2, Time+Offset)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',247).

 /*  [initiates(Event, Fluent, Time), comparison(0, Offset, <), trajectory(Fluent, Time, Fluent2, Offset), not(clipped(Time, Fluent, Time6)), holds_at(neg(Fluent2), Time6), b(Time, Time6), toffset(Time, Offset, Time6), ignore(Time+Offset==Time6)] ->
       ta(Time,
          tvs1=[Time, Time+Offset],
          tvs2=[Time, Time6],
          not(happens(Event, Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',247).
axiom(not(happens(Event, Time)),
   
    [ initiates(Event, Fluent, Time),
      comparison(0, Offset, <),
      trajectory(Fluent, Time, Fluent2, Offset),
      not(clipped(Time, Fluent, Time6)),
      holds_at(neg(Fluent2), Time6),
      b(Time, Time6),
      toffset(Time, Offset, Time6)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',247).

 /*  not(initiates(Event, Fluent, Time)) :-
       ( comparison(0, Offset, <),
         trajectory(Fluent, Time, Fluent2, Offset),
         not(clipped(Time, Fluent, Time+Offset))
       ),
       happens(Event, Time),
       not(holds_at(Fluent2, Time+Offset)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',247).

 /*  [comparison(0, Offset, <), trajectory(Fluent, Time, Fluent2, Offset), not(clipped(Time, Fluent, Time7)), happens(Event, Time), holds_at(neg(Fluent2), Time7), b(Time, Time7), toffset(Time, Offset, Time7), ignore(Time+Offset==Time7)] ->
       ta(Time,
          tvs1=[Time, Time+Offset],
          tvs2=[Time, Time7],
          not(initiates(Event, Fluent, Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',247).
axiom(not(initiates(Event, Fluent, Time)),
   
    [ comparison(0, Offset, <),
      trajectory(Fluent, Time, Fluent2, Offset),
      not(clipped(Time, Fluent, Time7)),
      happens(Event, Time),
      holds_at(neg(Fluent2), Time7),
      b(Time, Time7),
      toffset(Time, Offset, Time7)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',247).

 /*  not(trajectory(Fluent, Time, Fluent2, Offset)) :-
       not(clipped(Time, Fluent, Time+Offset)),
       comparison(0, Offset, <),
       initiates(Event, Fluent, Time),
       happens(Event, Time),
       not(holds_at(Fluent2, Time+Offset)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',247).

 /*  [not(clipped(Time, Fluent, Time8)), comparison(0, Offset, <), initiates(Event, Fluent, Time), happens(Event, Time), holds_at(neg(Fluent2), Time8), b(Time, Time8), toffset(Time, Offset, Time8), ignore(Time+Offset==Time8)] ->
       ta(Time,
          tvs1=[Time, Time+Offset],
          tvs2=[Time, Time8],
          not(trajectory(Fluent, Time, Fluent2, Offset))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',247).
axiom(not(trajectory(Fluent, Time, Fluent2, Offset)),
   
    [ not(clipped(Time, Fluent, Time8)),
      comparison(0, Offset, <),
      initiates(Event, Fluent, Time),
      happens(Event, Time),
      holds_at(neg(Fluent2), Time8),
      b(Time, Time8),
      toffset(Time, Offset, Time8)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',247).

 /*  clipped(Time, Fluent, Time+Offset) :-
       trajectory(Fluent, Time, Fluent2, Offset),
       comparison(0, Offset, <),
       initiates(Event, Fluent, Time),
       happens(Event, Time),
       not(holds_at(Fluent2, Time+Offset)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',247).

 /*  [trajectory(Fluent, Time, Fluent2, Offset), comparison(0, Offset, <), initiates(Event, Fluent, Time), happens(Event, Time), holds_at(neg(Fluent2), Time9), b(Time, Time9), toffset(Time, Offset, Time9), ignore(Time+Offset==Time9)] ->
       ta(Time,
          tvs1=[Time, Time+Offset],
          tvs2=[Time, Time9],
          clipped(Time, Fluent, Time9)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',247).
axiom(clipped(Time, Fluent, Time9),
   
    [ trajectory(Fluent, Time, Fluent2, Offset),
      comparison(0, Offset, <),
      initiates(Event, Fluent, Time),
      happens(Event, Time),
      holds_at(neg(Fluent2), Time9),
      b(Time, Time9),
      toffset(Time, Offset, Time9)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:254
% [event,fluent,fluent2,offset,time]
% Happens(event,time) &
% Terminates(event,fluent,time) &
% 0 < offset &
% AntiTrajectory(fluent,time,fluent2,offset) &
% !Declipped(time,fluent,time+offset) ->
% HoldsAt(fluent2,time+offset).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:260
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',256).

 /*  happens(Event, Time), terminates(Event, Fluent, Time), 0<Offset, antiTrajectory(Fluent, Time, Fluent2, Offset), not(declipped(Time, Fluent, Time+Offset)) ->
       holds_at(Fluent2, Time+Offset).
 */

 /*  holds_at(Fluent2, Time+Offset) :-
       happens(Event, Time),
       terminates(Event, Fluent, Time),
       comparison(0, Offset, <),
       antiTrajectory(Fluent, Time, Fluent2, Offset),
       not(declipped(Time, Fluent, Time+Offset)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',256).

 /*  [happens(Event, Time), terminates(Event, Fluent, Time), comparison(0, Offset, <), antiTrajectory(Fluent, Time, Fluent2, Offset), not(declipped(Time, Fluent, Time5)), b(Time, Time5), toffset(Time, Offset, Time5), ignore(Time+Offset==Time5)] ->
       ta(Time,
          tvs1=[Time, Time+Offset],
          tvs2=[Time, Time5],
          holds_at(Fluent2, Time5)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',256).
axiom(holds_at(Fluent2, Time5),
   
    [ happens(Event, Time),
      terminates(Event, Fluent, Time),
      comparison(0, Offset, <),
      antiTrajectory(Fluent, Time, Fluent2, Offset),
      not(declipped(Time, Fluent, Time5)),
      b(Time, Time5),
      toffset(Time, Offset, Time5)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',256).

 /*  not(happens(Event, Time)) :-
       ( terminates(Event, Fluent, Time),
         comparison(0, Offset, <),
         antiTrajectory(Fluent, Time, Fluent2, Offset),
         not(declipped(Time, Fluent, Time+Offset))
       ),
       not(holds_at(Fluent2, Time+Offset)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',256).

 /*  [terminates(Event, Fluent, Time), comparison(0, Offset, <), antiTrajectory(Fluent, Time, Fluent2, Offset), not(declipped(Time, Fluent, Time6)), holds_at(neg(Fluent2), Time6), b(Time, Time6), toffset(Time, Offset, Time6), ignore(Time+Offset==Time6)] ->
       ta(Time,
          tvs1=[Time, Time+Offset],
          tvs2=[Time, Time6],
          not(happens(Event, Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',256).
axiom(not(happens(Event, Time)),
   
    [ terminates(Event, Fluent, Time),
      comparison(0, Offset, <),
      antiTrajectory(Fluent, Time, Fluent2, Offset),
      not(declipped(Time, Fluent, Time6)),
      holds_at(neg(Fluent2), Time6),
      b(Time, Time6),
      toffset(Time, Offset, Time6)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',256).

 /*  not(terminates(Event, Fluent, Time)) :-
       ( comparison(0, Offset, <),
         antiTrajectory(Fluent, Time, Fluent2, Offset),
         not(declipped(Time, Fluent, Time+Offset))
       ),
       happens(Event, Time),
       not(holds_at(Fluent2, Time+Offset)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',256).

 /*  [comparison(0, Offset, <), antiTrajectory(Fluent, Time, Fluent2, Offset), not(declipped(Time, Fluent, Time7)), happens(Event, Time), holds_at(neg(Fluent2), Time7), b(Time, Time7), toffset(Time, Offset, Time7), ignore(Time+Offset==Time7)] ->
       ta(Time,
          tvs1=[Time, Time+Offset],
          tvs2=[Time, Time7],
          not(terminates(Event, Fluent, Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',256).
axiom(not(terminates(Event, Fluent, Time)),
   
    [ comparison(0, Offset, <),
      antiTrajectory(Fluent, Time, Fluent2, Offset),
      not(declipped(Time, Fluent, Time7)),
      happens(Event, Time),
      holds_at(neg(Fluent2), Time7),
      b(Time, Time7),
      toffset(Time, Offset, Time7)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',256).

 /*  not(antiTrajectory(Fluent, Time, Fluent2, Offset)) :-
       not(declipped(Time, Fluent, Time+Offset)),
       comparison(0, Offset, <),
       terminates(Event, Fluent, Time),
       happens(Event, Time),
       not(holds_at(Fluent2, Time+Offset)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',256).

 /*  [not(declipped(Time, Fluent, Time8)), comparison(0, Offset, <), terminates(Event, Fluent, Time), happens(Event, Time), holds_at(neg(Fluent2), Time8), b(Time, Time8), toffset(Time, Offset, Time8), ignore(Time+Offset==Time8)] ->
       ta(Time,
          tvs1=[Time, Time+Offset],
          tvs2=[Time, Time8],
          not(antiTrajectory(Fluent, Time, Fluent2, Offset))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',256).
axiom(not(antiTrajectory(Fluent, Time, Fluent2, Offset)),
   
    [ not(declipped(Time, Fluent, Time8)),
      comparison(0, Offset, <),
      terminates(Event, Fluent, Time),
      happens(Event, Time),
      holds_at(neg(Fluent2), Time8),
      b(Time, Time8),
      toffset(Time, Offset, Time8)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',256).

 /*  declipped(Time, Fluent, Time+Offset) :-
       antiTrajectory(Fluent, Time, Fluent2, Offset),
       comparison(0, Offset, <),
       terminates(Event, Fluent, Time),
       happens(Event, Time),
       not(holds_at(Fluent2, Time+Offset)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',256).

 /*  [antiTrajectory(Fluent, Time, Fluent2, Offset), comparison(0, Offset, <), terminates(Event, Fluent, Time), happens(Event, Time), holds_at(neg(Fluent2), Time9), b(Time, Time9), toffset(Time, Offset, Time9), ignore(Time+Offset==Time9)] ->
       ta(Time,
          tvs1=[Time, Time+Offset],
          tvs2=[Time, Time9],
          declipped(Time, Fluent, Time9)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',256).
axiom(declipped(Time, Fluent, Time9),
   
    [ antiTrajectory(Fluent, Time, Fluent2, Offset),
      comparison(0, Offset, <),
      terminates(Event, Fluent, Time),
      happens(Event, Time),
      holds_at(neg(Fluent2), Time9),
      b(Time, Time9),
      toffset(Time, Offset, Time9)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:262
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: ecnet/Ontology.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; integer
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:283
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',284).
% sort diameter: integer
==> subsort(diameter,integer).
%; object

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:287
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',288).
% sort object
==> sort(object).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:289
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',290).
% sort agent: object
==> subsort(agent,object).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:291
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',292).
% sort physobj: object
==> subsort(physobj,object).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:292
% sort bed: physobj
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',292).
==> subsort(bed,physobj).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:293
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',294).
% sort snowflake: physobj
==> subsort(snowflake,physobj).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:294
% sort sky: physobj
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',294).
==> subsort(sky,physobj).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:296
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',297).
% sort stuff: physobj
==> subsort(stuff,physobj).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:298
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',299).
% sort surface: physobj
==> subsort(surface,physobj).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:299
% sort ground: surface
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',299).
==> subsort(ground,surface).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:301
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',302).
% sort snow: stuff
==> subsort(snow,stuff).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:302
% sort ball
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',302).
==> sort(ball).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:304
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',305).
% sort food: physobj
==> subsort(food,physobj).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:305
% sort fruit: food
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',305).
==> subsort(fruit,food).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:306
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',307).
% sort orange: fruit
==> subsort(orange,fruit).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:307
% sort salad: food
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',307).
==> subsort(salad,food).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:309
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',310).
% sort clothing: physobj
==> subsort(clothing,physobj).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:310
% sort scarf: clothing
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',310).
==> subsort(scarf,clothing).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:311
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',312).
% sort hat: clothing
==> subsort(hat,clothing).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:313
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',314).
% sort vegetablematter: physobj
==> subsort(vegetablematter,physobj).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:314
% sort coal: vegetablematter
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',314).
==> subsort(coal,vegetablematter).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:316
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',317).
% sort bodypart: physobj
==> subsort(bodypart,physobj).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:317
% sort hand: bodypart
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',317).
==> subsort(hand,bodypart).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:319
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',320).
% sort papertowels: physobj
==> subsort(papertowels,physobj).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:320
% sort device: physobj
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',320).
==> subsort(device,physobj).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:321
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',322).
% sort electronicdevice: device
==> subsort(electronicdevice,device).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:322
% sort lamp: electronicdevice
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',322).
==> subsort(lamp,electronicdevice).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:324
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',325).
% sort cat: physobj
==> subsort(cat,physobj).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:325
% sort horse: physobj
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',325).
==> subsort(horse,physobj).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:327
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',328).
% sort weapon: physobj
==> subsort(weapon,physobj).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:328
% sort gun: weapon
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',328).
==> subsort(gun,weapon).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:329
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',330).
% sort bomb: weapon
==> subsort(bomb,weapon).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:330
% sort bullet: weapon
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',330).
==> subsort(bullet,weapon).
%; location

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:334
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',335).
% sort location
==> sort(location).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:335
% sort room: location, outside: location
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',335).
==> subsort(room,location).
==> subsort(outside,location).
%; portal

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:339
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',340).
% sort portal
==> sort(portal).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:340
% sort door: portal, staircase: portal
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',340).
==> subsort(door,portal).
==> subsort(staircase,portal).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:341
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',342).
% sort street: portal
==> subsort(street,portal).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:342
% sort track: portal
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',342).
==> subsort(track,portal).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:344
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',345).
% sort building
==> sort(building).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:346
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',347).
% sort fire: object
==> subsort(fire,object).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:347
% sort smoke: physobj
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',347).
==> subsort(smoke,physobj).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:349
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',350).
% sort furniture: physobj
==> subsort(furniture,physobj).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:350
% sort chair: furniture
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',350).
==> subsort(chair,furniture).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:351
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',352).
% sort table: furniture
==> subsort(table,furniture).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:353
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',354).
% sort bill: physobj
==> subsort(bill,physobj).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:354
% sort ticket: physobj
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',354).
==> subsort(ticket,physobj).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:355
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',356).
% sort envelope: physobj
==> subsort(envelope,physobj).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:357
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',358).
% sort text: physobj
==> subsort(text,physobj).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:358
% sort book: text
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',358).
==> subsort(book,text).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:359
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',360).
% sort letter: text
==> subsort(letter,text).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:360
% sort menu: text
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',360).
==> subsort(menu,text).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:362
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',363).
% sort paper: physobj
==> subsort(paper,physobj).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:364
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',365).
% sort content
==> sort(content).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:365
% sort script
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',365).
==> sort(script).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:367
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',368).
% sort container: physobj
==> subsort(container,physobj).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:368
% sort cigarette: physobj
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',368).
==> subsort(cigarette,physobj).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:369
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',370).
% sort ashtray: physobj
==> subsort(ashtray,physobj).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:370
% sort umbrella: physobj
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',370).
==> subsort(umbrella,physobj).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:372
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',373).
% sort pen: physobj
==> subsort(pen,physobj).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: ecnet/RTSpace.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; RTSpace: room-scale topological space
%;
%; We use topological and metric representations of space,
%; at two levels of granularity---room-scale and object-scale.
%; The RTSpace representation deals with topological space at
%; the scale of rooms and outdoor locations.
%; This representation of space consists of locations, which
%; are connected by portals. There are two types of locations:
%; rooms and outside areas (outsides).
%;
%; object is at location.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:404
% fluent At(object,location)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',404).
fluent(at(object,location)).
==> mpred_prop(at(object,location),fluent).
==> meta_argtypes(at(object,location)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:405
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',406).
% manualrelease At

 /*  fix_axiom_head(Time) ->
       [manualrelease(at), ->, holds_at(manualrelease(at), Time)].
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',406).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(manualrelease(at), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',406).
axiom(holds_at(manualrelease(at), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:407
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',408).
% [object1,location,time]
% (
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:408
% {object2} PartOf(object1,object2)) ->
% ReleasedAt(At(object1,location),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',408).

 /*  exists([Object2],
    partOf(Object1, Object2) ->
       releasedAt(at(Object1, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',408).

 /*  releasedAt(at(Object1, Location), Time) :-
       partOf(Object1, Object2),
       some(Object2, '$kolem_Fn_330'(Object1, Location, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',408).

 /*  [partOf(Object1, Object2), some(Object2, '$kolem_Fn_330'(Object1, Location, Time))] ->
       ta(Ta_Param,
          tvs1=[],
          tvs2=[],
          releasedAt(at(Object1, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',408).
axiom(releasedAt(at(Object1, Location), Time),
   
    [ partOf(Object1, Object2),
      some(Object2,
           '$kolem_Fn_330'(Object1, Location, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',408).

 /*  not(partOf(Object1, Object2)) :-
       not(releasedAt(at(Object1, Location), Time)),
       some(Object2, '$kolem_Fn_330'(Object1, Location, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',408).

 /*  [not(releasedAt(at(Object1, Location), Time)), some(Object2, '$kolem_Fn_330'(Object1, Location, Time))] ->
       ta(Ta_Param6,
          tvs1=[],
          tvs2=[],
          not(partOf(Object1, Object2))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',408).
axiom(not(partOf(Object1, Object2)),
   
    [ not(releasedAt(at(Object1, Location), Time)),
      some(Object2,
           '$kolem_Fn_330'(Object1, Location, Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:411
%; A state constraint says that an object
%; is at one location at a time:
% [object,location1,location2,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:414
% HoldsAt(At(object,location1),time) &
% HoldsAt(At(object,location2),time) ->
% location1=location2.
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:416
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',414).

 /*  holds_at(at(Object, Location1), Time), holds_at(at(Object, Location2), Time) ->
       equals(Location1, Location2).
 */

 /*  not(holds_at(at(Object, Location1), Time)) :-
       holds_at(at(Object, Location2), Time),
       not(equals(Location1, Location2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',414).

 /*  [holds_at(at(Object, Location2), Time), not(equals(Location1, Location2))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(at(Object, Location1)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',414).
axiom(holds_at(neg(at(Object, Location1)), Time),
   
    [ holds_at(at(Object, Location2), Time),
      not(equals(Location1, Location2))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',414).

 /*  not(holds_at(at(Object, Location2), Time)) :-
       holds_at(at(Object, Location1), Time),
       not(equals(Location1, Location2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',414).

 /*  [holds_at(at(Object, Location1), Time), not(equals(Location1, Location2))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(at(Object, Location2)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',414).
axiom(holds_at(neg(at(Object, Location2)), Time),
   
    [ holds_at(at(Object, Location1), Time),
      not(equals(Location2, Location1))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:418
%; connectivity
%; Side one of portal is location.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:421
% function Side1(portal): location
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',421).
function(side1(portal)).
==> mpred_prop(side1(portal),function).
==> meta_argtypes(side1(portal)).
predicate(side1Pred(portal,location)).
==> mpred_prop(side1Pred(portal,location),predicate).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',421).
==> meta_argtypes(side1Pred(portal,location)).

 /*  fix_axiom_head(Time) ->
       
       [ functional_predicate(side1, side1Pred),
          (->),
         holds_at(functional_predicate(side1, side1Pred), Time)
       ].
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',421).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(functional_predicate(side1, side1Pred), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',421).
axiom(holds_at(functional_predicate(side1, side1Pred), Time),
    []).
==> resultIsa(side1,location).
%; Side two of portal is location.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:423
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',424).
% function Side2(portal): location
function(side2(portal)).
==> mpred_prop(side2(portal),function).
==> meta_argtypes(side2(portal)).
predicate(side2Pred(portal,location)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',424).
==> mpred_prop(side2Pred(portal,location),predicate).
==> meta_argtypes(side2Pred(portal,location)).

 /*  fix_axiom_head(Time) ->
       
       [ functional_predicate(side2, side2Pred),
          (->),
         holds_at(functional_predicate(side2, side2Pred), Time)
       ].
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',424).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(functional_predicate(side2, side2Pred), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',424).
axiom(holds_at(functional_predicate(side2, side2Pred), Time),
    []).
==> resultIsa(side2,location).
%; The building of room is building.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:426
% function BuildingOf(room): building
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',426).
function(buildingOf(room)).
==> mpred_prop(buildingOf(room),function).
==> meta_argtypes(buildingOf(room)).
predicate(building(room,building)).
==> mpred_prop(building(room,building),predicate).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',426).
==> meta_argtypes(building(room,building)).

 /*  fix_axiom_head(Time) ->
       
       [ functional_predicate(buildingOf, building),
          (->),
         holds_at(functional_predicate(buildingOf, building), Time)
       ].
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',426).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(functional_predicate(buildingOf, building), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',426).
axiom(holds_at(functional_predicate(buildingOf, building), Time),
    []).
==> resultIsa(buildingOf,building).
%; object is at a location that has portal.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:429
% fluent NearPortal(object,portal)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',429).
fluent(nearPortal(object,portal)).
==> mpred_prop(nearPortal(object,portal),fluent).
==> meta_argtypes(nearPortal(object,portal)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:430
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',431).
% noninertial NearPortal
==> noninertial(nearPortal).
%; A state constraint says that an object is near
%; a portal if and only if there is a location such that
%; the object is at the location and one of the sides
%; of the portal is the location:
% [object,portal,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:437
% HoldsAt(NearPortal(object,portal),time) <->
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:438
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',437).
% {location}% 
%  (Side1(portal)=location|
%   Side2(portal)=location) &
%  HoldsAt(At(object,location),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:441
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',439).

 /*  exists([Location],
    holds_at(nearPortal(Object, Portal), Time) <->
       (   equals(side1(Portal), Location)
       ;   equals(side2(Portal), Location)
       ),
       holds_at(at(Object, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',439).

 /*  not(holds_at(nearPortal(Object, Portal), Time)) :-
       (   not(equals(side1(Portal), Location)),
           not(equals(side2(Portal), Location))
       ;   not(holds_at(at(Object, Location), Time))
       ),
       some(Location, '$kolem_Fn_331'(Object, Portal, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',439).

 /*  [(not(equals(side1(Portal), Location)), not(equals(side2(Portal), Location));holds_at(neg(at(Object, Location)), Time)), some(Location, '$kolem_Fn_331'(Object, Portal, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(nearPortal(Object, Portal)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',439).
axiom(holds_at(neg(nearPortal(Object, Portal)), Time),
   
    [  (not(equals(side1(Portal), Location)), not(equals(side2(Portal), Location));holds_at(neg(at(Object, Location)), Time)),
      some(Location, '$kolem_Fn_331'(Object, Portal, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',439).

 /*  holds_at(at(Object, Location), Time) :-
       holds_at(nearPortal(Object, Portal), Time),
       some(Location, '$kolem_Fn_331'(Object, Portal, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',439).

 /*  [holds_at(nearPortal(Object, Portal), Time), some(Location, '$kolem_Fn_331'(Object, Portal, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(at(Object, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',439).
axiom(holds_at(at(Object, Location), Time),
   
    [ holds_at(nearPortal(Object, Portal), Time),
      some(Location, '$kolem_Fn_331'(Object, Portal, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',439).

 /*  holds_at(nearPortal(Object, Portal), Time) :-
       ( holds_at(at(Object, Location), Time),
         (   equals(side1(Portal), Location)
         ;   equals(side2(Portal), Location)
         )
       ),
       some(Location, '$kolem_Fn_331'(Object, Portal, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',439).

 /*  [holds_at(at(Object, Location), Time),  (equals(side1(Portal), Location);equals(side2(Portal), Location)), some(Location, '$kolem_Fn_331'(Object, Portal, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(nearPortal(Object, Portal), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',439).
axiom(holds_at(nearPortal(Object, Portal), Time),
   
    [ holds_at(at(Object, Location), Time),
       (equals(side1(Portal), Location);equals(side2(Portal), Location)),
      some(Location, '$kolem_Fn_331'(Object, Portal, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',439).

 /*  not(holds_at(at(Object, Location), Time)) :-
       (   equals(side1(Portal), Location)
       ;   equals(side2(Portal), Location)
       ),
       not(holds_at(nearPortal(Object, Portal), Time)),
       some(Location, '$kolem_Fn_331'(Object, Portal, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',439).

 /*  [(equals(side1(Portal), Location);equals(side2(Portal), Location)), holds_at(neg(nearPortal(Object, Portal)), Time), some(Location, '$kolem_Fn_331'(Object, Portal, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(at(Object, Location)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',439).
axiom(holds_at(neg(at(Object, Location)), Time),
   
    [  (equals(side1(Portal), Location);equals(side2(Portal), Location)),
      holds_at(neg(nearPortal(Object, Portal)), Time),
      some(Location, '$kolem_Fn_331'(Object, Portal, Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:443
%; locking and unlocking doors
%; agent unlocks door.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:446
% event DoorUnlock(agent,door)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',446).
event(doorUnlock(agent,door)).
==> mpred_prop(doorUnlock(agent,door),event).
==> meta_argtypes(doorUnlock(agent,door)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:447
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',446).
%; agent locks door.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:448
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',449).
% event DoorLock(agent,door)
event(doorLock(agent,door)).
==> mpred_prop(doorLock(agent,door),event).
==> meta_argtypes(doorLock(agent,door)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:449
%; door is unlocked.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:450
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',451).
% fluent DoorUnlocked(door)
fluent(doorUnlocked(door)).
==> mpred_prop(doorUnlocked(door),fluent).
==> meta_argtypes(doorUnlocked(door)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:452
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',453).
%; A precondition axiom states that
%; for an agent to unlock a door,
%; the agent must be awake,
%; the door must not already be unlocked, and
%; the agent must be near the door:
% [agent,door,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:458
% Happens(DoorUnlock(agent,door),time) ->
% HoldsAt(Awake(agent),time) &
% !HoldsAt(DoorUnlocked(door),time) &
% HoldsAt(NearPortal(agent,door),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:461
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',458).

 /*  happens(doorUnlock(Agent, Door), Time) ->
       holds_at(awake(Agent), Time),
       holds_at(neg(doorUnlocked(Door)), Time),
       holds_at(nearPortal(Agent, Door), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',458).

 /*  not(happens(doorUnlock(Agent, Door), Time)) :-
       (   not(holds_at(awake(Agent), Time))
       ;   not(holds_at(neg(doorUnlocked(Door)), Time))
       ;   not(holds_at(nearPortal(Agent, Door), Time))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',458).

 /*  [(holds_at(neg(awake(Agent)), Time);holds_at(doorUnlocked(Door), Time);holds_at(neg(nearPortal(Agent, Door)), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(doorUnlock(Agent, Door), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',458).
axiom(not(happens(doorUnlock(Agent, Door), Time)),
   
    [  (holds_at(neg(awake(Agent)), Time);holds_at(doorUnlocked(Door), Time);holds_at(neg(nearPortal(Agent, Door)), Time))
    ]).

 /*  holds_at(awake(Agent), Time) :-
       happens(doorUnlock(Agent, Door), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',458).

 /*  [holds_at(metreqs(doorUnlock(Agent, Door)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(doorUnlock(Agent, Door), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',458).
axiom(requires(doorUnlock(Agent, Door), Time),
    [holds_at(metreqs(doorUnlock(Agent, Door)), Time)]).

 /*  [holds_at(awake(Agent), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(doorUnlock(Agent, Door)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',458).
axiom(holds_at(metreqs(doorUnlock(Agent, Door)), Time),
    [holds_at(awake(Agent), Time)]).

 /*  holds_at(neg(doorUnlocked(Door)), Time) :-
       happens(doorUnlock(Agent, Door), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',458).

 /*  [holds_at(metreqs(doorUnlock(Agent, Door)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(doorUnlock(Agent, Door), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',458).
axiom(requires(doorUnlock(Agent, Door), Time),
    [holds_at(metreqs(doorUnlock(Agent, Door)), Time)]).

 /*  [holds_at(neg(doorUnlocked(Door)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(doorUnlock(Agent, Door)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',458).
axiom(holds_at(metreqs(doorUnlock(Agent, Door)), Time),
    [holds_at(neg(doorUnlocked(Door)), Time)]).

 /*  holds_at(nearPortal(Agent, Door), Time) :-
       happens(doorUnlock(Agent, Door), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',458).

 /*  [holds_at(metreqs(doorUnlock(Agent, Door)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(doorUnlock(Agent, Door), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',458).
axiom(requires(doorUnlock(Agent, Door), Time),
    [holds_at(metreqs(doorUnlock(Agent, Door)), Time)]).

 /*  [holds_at(nearPortal(Agent, Door), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(doorUnlock(Agent, Door)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',458).
axiom(holds_at(metreqs(doorUnlock(Agent, Door)), Time),
    [holds_at(nearPortal(Agent, Door), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:463
%; An effect axiom states that
%; if an agent unlocks a door,
%; the door will be unlocked:
% [agent,door,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:467
% Initiates(DoorUnlock(agent,door),DoorUnlocked(door),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',467).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(doorUnlock(Agent, Door),
                    doorUnlocked(Door),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',467).
axiom(initiates(doorUnlock(Agent, Door), doorUnlocked(Door), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:469
%; A precondition axiom states that
%; for an agent to lock a door,
%; the agent must be awake,
%; the door must be unlocked, and
%; the agent must be near the door:
% [agent,door,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:475
% Happens(DoorLock(agent,door),time) ->
% HoldsAt(Awake(agent),time) &
% HoldsAt(DoorUnlocked(door),time) &
% HoldsAt(NearPortal(agent,door),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:478
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',475).

 /*  happens(doorLock(Agent, Door), Time) ->
       holds_at(awake(Agent), Time),
       holds_at(doorUnlocked(Door), Time),
       holds_at(nearPortal(Agent, Door), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',475).

 /*  not(happens(doorLock(Agent, Door), Time)) :-
       (   not(holds_at(awake(Agent), Time))
       ;   not(holds_at(doorUnlocked(Door), Time))
       ;   not(holds_at(nearPortal(Agent, Door), Time))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',475).

 /*  [(holds_at(neg(awake(Agent)), Time);holds_at(neg(doorUnlocked(Door)), Time);holds_at(neg(nearPortal(Agent, Door)), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(doorLock(Agent, Door), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',475).
axiom(not(happens(doorLock(Agent, Door), Time)),
   
    [  (holds_at(neg(awake(Agent)), Time);holds_at(neg(doorUnlocked(Door)), Time);holds_at(neg(nearPortal(Agent, Door)), Time))
    ]).

 /*  holds_at(awake(Agent), Time) :-
       happens(doorLock(Agent, Door), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',475).

 /*  [holds_at(metreqs(doorLock(Agent, Door)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(doorLock(Agent, Door), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',475).
axiom(requires(doorLock(Agent, Door), Time),
    [holds_at(metreqs(doorLock(Agent, Door)), Time)]).

 /*  [holds_at(awake(Agent), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(doorLock(Agent, Door)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',475).
axiom(holds_at(metreqs(doorLock(Agent, Door)), Time),
    [holds_at(awake(Agent), Time)]).

 /*  holds_at(doorUnlocked(Door), Time) :-
       happens(doorLock(Agent, Door), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',475).

 /*  [holds_at(metreqs(doorLock(Agent, Door)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(doorLock(Agent, Door), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',475).
axiom(requires(doorLock(Agent, Door), Time),
    [holds_at(metreqs(doorLock(Agent, Door)), Time)]).

 /*  [holds_at(doorUnlocked(Door), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(doorLock(Agent, Door)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',475).
axiom(holds_at(metreqs(doorLock(Agent, Door)), Time),
    [holds_at(doorUnlocked(Door), Time)]).

 /*  holds_at(nearPortal(Agent, Door), Time) :-
       happens(doorLock(Agent, Door), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',475).

 /*  [holds_at(metreqs(doorLock(Agent, Door)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(doorLock(Agent, Door), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',475).
axiom(requires(doorLock(Agent, Door), Time),
    [holds_at(metreqs(doorLock(Agent, Door)), Time)]).

 /*  [holds_at(nearPortal(Agent, Door), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(doorLock(Agent, Door)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',475).
axiom(holds_at(metreqs(doorLock(Agent, Door)), Time),
    [holds_at(nearPortal(Agent, Door), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:480
%; An effect axiom states that
%; if an agent locks a door,
%; the door will no longer be unlocked.
% [agent,door,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:484
% Terminates(DoorLock(agent,door),DoorUnlocked(door),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',484).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(doorLock(Agent, Door),
                     doorUnlocked(Door),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',484).
axiom(terminates(doorLock(Agent, Door), doorUnlocked(Door), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:486
%; A state constraint says that if a door is open,
%; it is unlocked:
% [door,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:489
% HoldsAt(DoorIsOpen(door),time) -> HoldsAt(DoorUnlocked(door),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',489).

 /*  holds_at(doorIsOpen(Door), Time) ->
       holds_at(doorUnlocked(Door), Time).
 */

 /*  holds_at(doorUnlocked(Door), Time) :-
       holds_at(doorIsOpen(Door), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',489).

 /*  [holds_at(doorIsOpen(Door), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(doorUnlocked(Door), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',489).
axiom(holds_at(doorUnlocked(Door), Time),
    [holds_at(doorIsOpen(Door), Time)]).

 /*  not(holds_at(doorIsOpen(Door), Time)) :-
       not(holds_at(doorUnlocked(Door), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',489).

 /*  [holds_at(neg(doorUnlocked(Door)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(doorIsOpen(Door)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',489).
axiom(holds_at(neg(doorIsOpen(Door)), Time),
    [holds_at(neg(doorUnlocked(Door)), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:491
%; opening and closing doors
%; agent opens door.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:494
% event DoorOpen(agent,door)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',494).
event(doorOpen(agent,door)).
==> mpred_prop(doorOpen(agent,door),event).
==> meta_argtypes(doorOpen(agent,door)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:495
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',494).
%; agent closes door.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:496
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',497).
% event DoorClose(agent,door)
event(doorClose(agent,door)).
==> mpred_prop(doorClose(agent,door),event).
==> meta_argtypes(doorClose(agent,door)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:497
%; door is open.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:498
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',499).
% fluent DoorIsOpen(door)
fluent(doorIsOpen(door)).
==> mpred_prop(doorIsOpen(door),fluent).
==> meta_argtypes(doorIsOpen(door)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:500
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',501).
%; A precondition axiom states that
%; for an agent to open a door,
%; the agent must be awake,
%; the door must not already be open,
%; the door must be unlocked, and
%; the agent must be near the door:
% [agent,door,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:507
% Happens(DoorOpen(agent,door),time) ->
% HoldsAt(Awake(agent),time) &
% !HoldsAt(DoorIsOpen(door),time) &
% HoldsAt(DoorUnlocked(door),time) &
% HoldsAt(NearPortal(agent,door),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:511
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',507).

 /*  happens(doorOpen(Agent, Door), Time) ->
       holds_at(awake(Agent), Time),
       holds_at(neg(doorIsOpen(Door)), Time),
       holds_at(doorUnlocked(Door), Time),
       holds_at(nearPortal(Agent, Door), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',507).

 /*  not(happens(doorOpen(Agent, Door), Time)) :-
       (   not(holds_at(awake(Agent), Time))
       ;   not(holds_at(neg(doorIsOpen(Door)), Time))
       ;   not(holds_at(doorUnlocked(Door), Time))
       ;   not(holds_at(nearPortal(Agent, Door), Time))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',507).

 /*  [(holds_at(neg(awake(Agent)), Time);holds_at(doorIsOpen(Door), Time);holds_at(neg(doorUnlocked(Door)), Time);holds_at(neg(nearPortal(Agent, Door)), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(doorOpen(Agent, Door), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',507).
axiom(not(happens(doorOpen(Agent, Door), Time)),
   
    [  (holds_at(neg(awake(Agent)), Time);holds_at(doorIsOpen(Door), Time);holds_at(neg(doorUnlocked(Door)), Time);holds_at(neg(nearPortal(Agent, Door)), Time))
    ]).

 /*  holds_at(awake(Agent), Time) :-
       happens(doorOpen(Agent, Door), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',507).

 /*  [holds_at(metreqs(doorOpen(Agent, Door)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(doorOpen(Agent, Door), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',507).
axiom(requires(doorOpen(Agent, Door), Time),
    [holds_at(metreqs(doorOpen(Agent, Door)), Time)]).

 /*  [holds_at(awake(Agent), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(doorOpen(Agent, Door)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',507).
axiom(holds_at(metreqs(doorOpen(Agent, Door)), Time),
    [holds_at(awake(Agent), Time)]).

 /*  holds_at(neg(doorIsOpen(Door)), Time) :-
       happens(doorOpen(Agent, Door), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',507).

 /*  [holds_at(metreqs(doorOpen(Agent, Door)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(doorOpen(Agent, Door), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',507).
axiom(requires(doorOpen(Agent, Door), Time),
    [holds_at(metreqs(doorOpen(Agent, Door)), Time)]).

 /*  [holds_at(neg(doorIsOpen(Door)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(doorOpen(Agent, Door)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',507).
axiom(holds_at(metreqs(doorOpen(Agent, Door)), Time),
    [holds_at(neg(doorIsOpen(Door)), Time)]).

 /*  holds_at(doorUnlocked(Door), Time) :-
       happens(doorOpen(Agent, Door), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',507).

 /*  [holds_at(metreqs(doorOpen(Agent, Door)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(doorOpen(Agent, Door), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',507).
axiom(requires(doorOpen(Agent, Door), Time),
    [holds_at(metreqs(doorOpen(Agent, Door)), Time)]).

 /*  [holds_at(doorUnlocked(Door), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(doorOpen(Agent, Door)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',507).
axiom(holds_at(metreqs(doorOpen(Agent, Door)), Time),
    [holds_at(doorUnlocked(Door), Time)]).

 /*  holds_at(nearPortal(Agent, Door), Time) :-
       happens(doorOpen(Agent, Door), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',507).

 /*  [holds_at(metreqs(doorOpen(Agent, Door)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(doorOpen(Agent, Door), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',507).
axiom(requires(doorOpen(Agent, Door), Time),
    [holds_at(metreqs(doorOpen(Agent, Door)), Time)]).

 /*  [holds_at(nearPortal(Agent, Door), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(doorOpen(Agent, Door)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',507).
axiom(holds_at(metreqs(doorOpen(Agent, Door)), Time),
    [holds_at(nearPortal(Agent, Door), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:513
%; An effect axiom states that
%; if an agent opens a door,
%; the door will be open:
% [agent,door,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:517
% Initiates(DoorOpen(agent,door),DoorIsOpen(door),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',517).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(doorOpen(Agent, Door),
                    doorIsOpen(Door),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',517).
axiom(initiates(doorOpen(Agent, Door), doorIsOpen(Door), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:519
%; A precondition axiom states that
%; for an agent to close a door,
%; the agent must be awake,
%; the door must be open,
%; the door must be unlocked, and
%; the agent must be near the door:
% [agent,door,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:526
% Happens(DoorClose(agent,door),time) ->
% HoldsAt(Awake(agent),time) &
% HoldsAt(DoorIsOpen(door),time) &
% HoldsAt(DoorUnlocked(door),time) &
% HoldsAt(NearPortal(agent,door),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:530
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',526).

 /*  happens(doorClose(Agent, Door), Time) ->
       holds_at(awake(Agent), Time),
       holds_at(doorIsOpen(Door), Time),
       holds_at(doorUnlocked(Door), Time),
       holds_at(nearPortal(Agent, Door), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',526).

 /*  not(happens(doorClose(Agent, Door), Time)) :-
       (   not(holds_at(awake(Agent), Time))
       ;   not(holds_at(doorIsOpen(Door), Time))
       ;   not(holds_at(doorUnlocked(Door), Time))
       ;   not(holds_at(nearPortal(Agent, Door), Time))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',526).

 /*  [(holds_at(neg(awake(Agent)), Time);holds_at(neg(doorIsOpen(Door)), Time);holds_at(neg(doorUnlocked(Door)), Time);holds_at(neg(nearPortal(Agent, Door)), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(doorClose(Agent, Door), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',526).
axiom(not(happens(doorClose(Agent, Door), Time)),
   
    [  (holds_at(neg(awake(Agent)), Time);holds_at(neg(doorIsOpen(Door)), Time);holds_at(neg(doorUnlocked(Door)), Time);holds_at(neg(nearPortal(Agent, Door)), Time))
    ]).

 /*  holds_at(awake(Agent), Time) :-
       happens(doorClose(Agent, Door), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',526).

 /*  [holds_at(metreqs(doorClose(Agent, Door)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(doorClose(Agent, Door), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',526).
axiom(requires(doorClose(Agent, Door), Time),
    [holds_at(metreqs(doorClose(Agent, Door)), Time)]).

 /*  [holds_at(awake(Agent), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(doorClose(Agent, Door)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',526).
axiom(holds_at(metreqs(doorClose(Agent, Door)), Time),
    [holds_at(awake(Agent), Time)]).

 /*  holds_at(doorIsOpen(Door), Time) :-
       happens(doorClose(Agent, Door), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',526).

 /*  [holds_at(metreqs(doorClose(Agent, Door)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(doorClose(Agent, Door), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',526).
axiom(requires(doorClose(Agent, Door), Time),
    [holds_at(metreqs(doorClose(Agent, Door)), Time)]).

 /*  [holds_at(doorIsOpen(Door), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(doorClose(Agent, Door)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',526).
axiom(holds_at(metreqs(doorClose(Agent, Door)), Time),
    [holds_at(doorIsOpen(Door), Time)]).

 /*  holds_at(doorUnlocked(Door), Time) :-
       happens(doorClose(Agent, Door), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',526).

 /*  [holds_at(metreqs(doorClose(Agent, Door)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(doorClose(Agent, Door), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',526).
axiom(requires(doorClose(Agent, Door), Time),
    [holds_at(metreqs(doorClose(Agent, Door)), Time)]).

 /*  [holds_at(doorUnlocked(Door), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(doorClose(Agent, Door)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',526).
axiom(holds_at(metreqs(doorClose(Agent, Door)), Time),
    [holds_at(doorUnlocked(Door), Time)]).

 /*  holds_at(nearPortal(Agent, Door), Time) :-
       happens(doorClose(Agent, Door), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',526).

 /*  [holds_at(metreqs(doorClose(Agent, Door)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(doorClose(Agent, Door), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',526).
axiom(requires(doorClose(Agent, Door), Time),
    [holds_at(metreqs(doorClose(Agent, Door)), Time)]).

 /*  [holds_at(nearPortal(Agent, Door), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(doorClose(Agent, Door)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',526).
axiom(holds_at(metreqs(doorClose(Agent, Door)), Time),
    [holds_at(nearPortal(Agent, Door), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:532
%; An effect axiom states that
%; if an agent closes a door,
%; the door will no longer be open:
% [agent,door,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:536
% Terminates(DoorClose(agent,door),DoorIsOpen(door),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',536).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(doorClose(Agent, Door),
                     doorIsOpen(Door),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',536).
axiom(terminates(doorClose(Agent, Door), doorIsOpen(Door), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:538
%; passing through doors
%; agent walks through side one of door.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:541
% event WalkThroughDoor12(agent,door)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',541).
event(walkThroughDoor12(agent,door)).
==> mpred_prop(walkThroughDoor12(agent,door),event).
==> meta_argtypes(walkThroughDoor12(agent,door)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:542
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',541).
%; agent walks through side two of door.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:543
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',544).
% event WalkThroughDoor21(agent,door)
event(walkThroughDoor21(agent,door)).
==> mpred_prop(walkThroughDoor21(agent,door),event).
==> meta_argtypes(walkThroughDoor21(agent,door)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:545
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',546).
%; Precondition axioms state that
%; for an agent to walk through a side of a door,
%; the agent must be awake and standing,
%; the door must be open, and
%; the agent must be at the side of the door that
%; the agent walks through:
% [agent,door,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:552
% Happens(WalkThroughDoor12(agent,door),time) ->
% HoldsAt(Awake(agent),time) &
% HoldsAt(Standing(agent),time) &
% HoldsAt(DoorIsOpen(door),time) &
% HoldsAt(At(agent,Side1(door)),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:556
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',552).

 /*  happens(walkThroughDoor12(Agent, Door), Time) ->
       holds_at(awake(Agent), Time),
       holds_at(standing(Agent), Time),
       holds_at(doorIsOpen(Door), Time),
       holds_at(at(Agent, side1(Door)), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',552).

 /*  not(happens(walkThroughDoor12(Agent, Door), Time)) :-
       (   not(holds_at(awake(Agent), Time))
       ;   not(holds_at(standing(Agent), Time))
       ;   not(holds_at(doorIsOpen(Door), Time))
       ;   not(holds_at(at(Agent, side1(Door)), Time))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',552).

 /*  [(holds_at(neg(awake(Agent)), Time);holds_at(neg(standing(Agent)), Time);holds_at(neg(doorIsOpen(Door)), Time);holds_at(neg(at(Agent, side1(Door))), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(walkThroughDoor12(Agent, Door), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',552).
axiom(not(happens(walkThroughDoor12(Agent, Door), Time)),
   
    [  (holds_at(neg(awake(Agent)), Time);holds_at(neg(standing(Agent)), Time);holds_at(neg(doorIsOpen(Door)), Time);holds_at(neg(at(Agent, side1(Door))), Time))
    ]).

 /*  holds_at(awake(Agent), Time) :-
       happens(walkThroughDoor12(Agent, Door), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',552).

 /*  [holds_at(metreqs(walkThroughDoor12(Agent, Door)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(walkThroughDoor12(Agent, Door), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',552).
axiom(requires(walkThroughDoor12(Agent, Door), Time),
    [holds_at(metreqs(walkThroughDoor12(Agent, Door)), Time)]).

 /*  [holds_at(awake(Agent), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(walkThroughDoor12(Agent, Door)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',552).
axiom(holds_at(metreqs(walkThroughDoor12(Agent, Door)), Time),
    [holds_at(awake(Agent), Time)]).

 /*  holds_at(standing(Agent), Time) :-
       happens(walkThroughDoor12(Agent, Door), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',552).

 /*  [holds_at(metreqs(walkThroughDoor12(Agent, Door)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(walkThroughDoor12(Agent, Door), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',552).
axiom(requires(walkThroughDoor12(Agent, Door), Time),
    [holds_at(metreqs(walkThroughDoor12(Agent, Door)), Time)]).

 /*  [holds_at(standing(Agent), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(walkThroughDoor12(Agent, Door)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',552).
axiom(holds_at(metreqs(walkThroughDoor12(Agent, Door)), Time),
    [holds_at(standing(Agent), Time)]).

 /*  holds_at(doorIsOpen(Door), Time) :-
       happens(walkThroughDoor12(Agent, Door), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',552).

 /*  [holds_at(metreqs(walkThroughDoor12(Agent, Door)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(walkThroughDoor12(Agent, Door), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',552).
axiom(requires(walkThroughDoor12(Agent, Door), Time),
    [holds_at(metreqs(walkThroughDoor12(Agent, Door)), Time)]).

 /*  [holds_at(doorIsOpen(Door), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(walkThroughDoor12(Agent, Door)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',552).
axiom(holds_at(metreqs(walkThroughDoor12(Agent, Door)), Time),
    [holds_at(doorIsOpen(Door), Time)]).

 /*  holds_at(at(Agent, side1(Door)), Time) :-
       happens(walkThroughDoor12(Agent, Door), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',552).

 /*  [holds_at(metreqs(walkThroughDoor12(Agent, Door)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(walkThroughDoor12(Agent, Door), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',552).
axiom(requires(walkThroughDoor12(Agent, Door), Time),
    [holds_at(metreqs(walkThroughDoor12(Agent, Door)), Time)]).

 /*  [holds_at(at(Agent, side1(Door)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(walkThroughDoor12(Agent, Door)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',552).
axiom(holds_at(metreqs(walkThroughDoor12(Agent, Door)), Time),
    [holds_at(at(Agent, side1(Door)), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:558
% [agent,door,time]
% Happens(WalkThroughDoor21(agent,door),time) ->
% HoldsAt(Awake(agent),time) &
% HoldsAt(Standing(agent),time) &
% HoldsAt(DoorIsOpen(door),time) &
% HoldsAt(At(agent,Side2(door)),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:563
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',560).

 /*  happens(walkThroughDoor21(Agent, Door), Time) ->
       holds_at(awake(Agent), Time),
       holds_at(standing(Agent), Time),
       holds_at(doorIsOpen(Door), Time),
       holds_at(at(Agent, side2(Door)), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',560).

 /*  not(happens(walkThroughDoor21(Agent, Door), Time)) :-
       (   not(holds_at(awake(Agent), Time))
       ;   not(holds_at(standing(Agent), Time))
       ;   not(holds_at(doorIsOpen(Door), Time))
       ;   not(holds_at(at(Agent, side2(Door)), Time))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',560).

 /*  [(holds_at(neg(awake(Agent)), Time);holds_at(neg(standing(Agent)), Time);holds_at(neg(doorIsOpen(Door)), Time);holds_at(neg(at(Agent, side2(Door))), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(walkThroughDoor21(Agent, Door), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',560).
axiom(not(happens(walkThroughDoor21(Agent, Door), Time)),
   
    [  (holds_at(neg(awake(Agent)), Time);holds_at(neg(standing(Agent)), Time);holds_at(neg(doorIsOpen(Door)), Time);holds_at(neg(at(Agent, side2(Door))), Time))
    ]).

 /*  holds_at(awake(Agent), Time) :-
       happens(walkThroughDoor21(Agent, Door), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',560).

 /*  [holds_at(metreqs(walkThroughDoor21(Agent, Door)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(walkThroughDoor21(Agent, Door), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',560).
axiom(requires(walkThroughDoor21(Agent, Door), Time),
    [holds_at(metreqs(walkThroughDoor21(Agent, Door)), Time)]).

 /*  [holds_at(awake(Agent), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(walkThroughDoor21(Agent, Door)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',560).
axiom(holds_at(metreqs(walkThroughDoor21(Agent, Door)), Time),
    [holds_at(awake(Agent), Time)]).

 /*  holds_at(standing(Agent), Time) :-
       happens(walkThroughDoor21(Agent, Door), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',560).

 /*  [holds_at(metreqs(walkThroughDoor21(Agent, Door)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(walkThroughDoor21(Agent, Door), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',560).
axiom(requires(walkThroughDoor21(Agent, Door), Time),
    [holds_at(metreqs(walkThroughDoor21(Agent, Door)), Time)]).

 /*  [holds_at(standing(Agent), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(walkThroughDoor21(Agent, Door)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',560).
axiom(holds_at(metreqs(walkThroughDoor21(Agent, Door)), Time),
    [holds_at(standing(Agent), Time)]).

 /*  holds_at(doorIsOpen(Door), Time) :-
       happens(walkThroughDoor21(Agent, Door), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',560).

 /*  [holds_at(metreqs(walkThroughDoor21(Agent, Door)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(walkThroughDoor21(Agent, Door), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',560).
axiom(requires(walkThroughDoor21(Agent, Door), Time),
    [holds_at(metreqs(walkThroughDoor21(Agent, Door)), Time)]).

 /*  [holds_at(doorIsOpen(Door), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(walkThroughDoor21(Agent, Door)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',560).
axiom(holds_at(metreqs(walkThroughDoor21(Agent, Door)), Time),
    [holds_at(doorIsOpen(Door), Time)]).

 /*  holds_at(at(Agent, side2(Door)), Time) :-
       happens(walkThroughDoor21(Agent, Door), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',560).

 /*  [holds_at(metreqs(walkThroughDoor21(Agent, Door)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(walkThroughDoor21(Agent, Door), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',560).
axiom(requires(walkThroughDoor21(Agent, Door), Time),
    [holds_at(metreqs(walkThroughDoor21(Agent, Door)), Time)]).

 /*  [holds_at(at(Agent, side2(Door)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(walkThroughDoor21(Agent, Door)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',560).
axiom(holds_at(metreqs(walkThroughDoor21(Agent, Door)), Time),
    [holds_at(at(Agent, side2(Door)), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:565
%; Effect axioms state that
%; if an agent walks through one side of a door,
%; the agent will be at the other side of the door:
% [agent,door,location,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:569
% Side2(door)=location ->
% Initiates(WalkThroughDoor12(agent,door),At(agent,location),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',569).

 /*  [equals(side2(Door), Location)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(walkThroughDoor12(Agent, Door),
                    at(Agent, Location),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',569).
axiom(initiates(walkThroughDoor12(Agent, Door), at(Agent, Location), Time),
    [equals(side2(Door), Location)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:572
% [agent,door,location,time]
% Side1(door)=location ->
% Initiates(WalkThroughDoor21(agent,door),At(agent,location),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:574

 /*  [equals(side1(Door), Location)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(walkThroughDoor21(Agent, Door),
                    at(Agent, Location),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',574).
axiom(initiates(walkThroughDoor21(Agent, Door), at(Agent, Location), Time),
    [equals(side1(Door), Location)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:576
% [agent,door,location,time]
% Side1(door)=location ->
% Terminates(WalkThroughDoor12(agent,door),At(agent,location),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:578

 /*  [equals(side1(Door), Location)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(walkThroughDoor12(Agent, Door),
                     at(Agent, Location),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',578).
axiom(terminates(walkThroughDoor12(Agent, Door), at(Agent, Location), Time),
    [equals(side1(Door), Location)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:580
% [agent,door,location,time]
% Side2(door)=location ->
% Terminates(WalkThroughDoor21(agent,door),At(agent,location),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:582

 /*  [equals(side2(Door), Location)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(walkThroughDoor21(Agent, Door),
                     at(Agent, Location),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',582).
axiom(terminates(walkThroughDoor21(Agent, Door), at(Agent, Location), Time),
    [equals(side2(Door), Location)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:584
%; walking from one end of a street to another
%; agent walks from the first end of street to the second end.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:587
% event WalkStreet12(agent,street)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',587).
event(walkStreet12(agent,street)).
==> mpred_prop(walkStreet12(agent,street),event).
==> meta_argtypes(walkStreet12(agent,street)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:588
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',587).
%; agent walks from the second end of street to the first end.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:589
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',590).
% event WalkStreet21(agent,street)
event(walkStreet21(agent,street)).
==> mpred_prop(walkStreet21(agent,street),event).
==> meta_argtypes(walkStreet21(agent,street)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:591
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',592).
%; Precondition axioms state that
%; for an agent to walk from one end of a street to another,
%; the agent must be awake,
%; the agent must be standing, and
%; the agent must be at the first end of the street:
% [agent,street,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:597
% Happens(WalkStreet12(agent,street),time) ->
% HoldsAt(Awake(agent),time) &
% HoldsAt(Standing(agent),time) &
% HoldsAt(At(agent,Side1(street)),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:600
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',597).

 /*  happens(walkStreet12(Agent, Street), Time) ->
       holds_at(awake(Agent), Time),
       holds_at(standing(Agent), Time),
       holds_at(at(Agent, side1(Street)), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',597).

 /*  not(happens(walkStreet12(Agent, Street), Time)) :-
       (   not(holds_at(awake(Agent), Time))
       ;   not(holds_at(standing(Agent), Time))
       ;   not(holds_at(at(Agent, side1(Street)), Time))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',597).

 /*  [(holds_at(neg(awake(Agent)), Time);holds_at(neg(standing(Agent)), Time);holds_at(neg(at(Agent, side1(Street))), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(walkStreet12(Agent, Street), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',597).
axiom(not(happens(walkStreet12(Agent, Street), Time)),
   
    [  (holds_at(neg(awake(Agent)), Time);holds_at(neg(standing(Agent)), Time);holds_at(neg(at(Agent, side1(Street))), Time))
    ]).

 /*  holds_at(awake(Agent), Time) :-
       happens(walkStreet12(Agent, Street), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',597).

 /*  [holds_at(metreqs(walkStreet12(Agent, Street)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(walkStreet12(Agent, Street), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',597).
axiom(requires(walkStreet12(Agent, Street), Time),
    [holds_at(metreqs(walkStreet12(Agent, Street)), Time)]).

 /*  [holds_at(awake(Agent), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(walkStreet12(Agent, Street)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',597).
axiom(holds_at(metreqs(walkStreet12(Agent, Street)), Time),
    [holds_at(awake(Agent), Time)]).

 /*  holds_at(standing(Agent), Time) :-
       happens(walkStreet12(Agent, Street), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',597).

 /*  [holds_at(metreqs(walkStreet12(Agent, Street)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(walkStreet12(Agent, Street), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',597).
axiom(requires(walkStreet12(Agent, Street), Time),
    [holds_at(metreqs(walkStreet12(Agent, Street)), Time)]).

 /*  [holds_at(standing(Agent), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(walkStreet12(Agent, Street)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',597).
axiom(holds_at(metreqs(walkStreet12(Agent, Street)), Time),
    [holds_at(standing(Agent), Time)]).

 /*  holds_at(at(Agent, side1(Street)), Time) :-
       happens(walkStreet12(Agent, Street), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',597).

 /*  [holds_at(metreqs(walkStreet12(Agent, Street)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(walkStreet12(Agent, Street), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',597).
axiom(requires(walkStreet12(Agent, Street), Time),
    [holds_at(metreqs(walkStreet12(Agent, Street)), Time)]).

 /*  [holds_at(at(Agent, side1(Street)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(walkStreet12(Agent, Street)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',597).
axiom(holds_at(metreqs(walkStreet12(Agent, Street)), Time),
    [holds_at(at(Agent, side1(Street)), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:602
% [agent,street,time]
% Happens(WalkStreet21(agent,street),time) ->
% HoldsAt(Awake(agent),time) &
% HoldsAt(Standing(agent),time) &
% HoldsAt(At(agent,Side2(street)),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:606
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',604).

 /*  happens(walkStreet21(Agent, Street), Time) ->
       holds_at(awake(Agent), Time),
       holds_at(standing(Agent), Time),
       holds_at(at(Agent, side2(Street)), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',604).

 /*  not(happens(walkStreet21(Agent, Street), Time)) :-
       (   not(holds_at(awake(Agent), Time))
       ;   not(holds_at(standing(Agent), Time))
       ;   not(holds_at(at(Agent, side2(Street)), Time))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',604).

 /*  [(holds_at(neg(awake(Agent)), Time);holds_at(neg(standing(Agent)), Time);holds_at(neg(at(Agent, side2(Street))), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(walkStreet21(Agent, Street), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',604).
axiom(not(happens(walkStreet21(Agent, Street), Time)),
   
    [  (holds_at(neg(awake(Agent)), Time);holds_at(neg(standing(Agent)), Time);holds_at(neg(at(Agent, side2(Street))), Time))
    ]).

 /*  holds_at(awake(Agent), Time) :-
       happens(walkStreet21(Agent, Street), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',604).

 /*  [holds_at(metreqs(walkStreet21(Agent, Street)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(walkStreet21(Agent, Street), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',604).
axiom(requires(walkStreet21(Agent, Street), Time),
    [holds_at(metreqs(walkStreet21(Agent, Street)), Time)]).

 /*  [holds_at(awake(Agent), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(walkStreet21(Agent, Street)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',604).
axiom(holds_at(metreqs(walkStreet21(Agent, Street)), Time),
    [holds_at(awake(Agent), Time)]).

 /*  holds_at(standing(Agent), Time) :-
       happens(walkStreet21(Agent, Street), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',604).

 /*  [holds_at(metreqs(walkStreet21(Agent, Street)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(walkStreet21(Agent, Street), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',604).
axiom(requires(walkStreet21(Agent, Street), Time),
    [holds_at(metreqs(walkStreet21(Agent, Street)), Time)]).

 /*  [holds_at(standing(Agent), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(walkStreet21(Agent, Street)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',604).
axiom(holds_at(metreqs(walkStreet21(Agent, Street)), Time),
    [holds_at(standing(Agent), Time)]).

 /*  holds_at(at(Agent, side2(Street)), Time) :-
       happens(walkStreet21(Agent, Street), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',604).

 /*  [holds_at(metreqs(walkStreet21(Agent, Street)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(walkStreet21(Agent, Street), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',604).
axiom(requires(walkStreet21(Agent, Street), Time),
    [holds_at(metreqs(walkStreet21(Agent, Street)), Time)]).

 /*  [holds_at(at(Agent, side2(Street)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(walkStreet21(Agent, Street)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',604).
axiom(holds_at(metreqs(walkStreet21(Agent, Street)), Time),
    [holds_at(at(Agent, side2(Street)), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:608
%; Effect axioms state that
%; if an agent walks from one end of a street to another,
%; the agent will be at the other end of the street:
% [agent,street,location,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:612
% Side2(street)=location ->
% Initiates(WalkStreet12(agent,street),At(agent,location),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',612).

 /*  [equals(side2(Street), Location)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(walkStreet12(Agent, Street),
                    at(Agent, Location),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',612).
axiom(initiates(walkStreet12(Agent, Street), at(Agent, Location), Time),
    [equals(side2(Street), Location)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:615
% [agent,street,location,time]
% Side1(street)=location ->
% Initiates(WalkStreet21(agent,street),At(agent,location),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:617

 /*  [equals(side1(Street), Location)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(walkStreet21(Agent, Street),
                    at(Agent, Location),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',617).
axiom(initiates(walkStreet21(Agent, Street), at(Agent, Location), Time),
    [equals(side1(Street), Location)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:619
% [agent,street,location,time]
% Side1(street)=location ->
% Terminates(WalkStreet12(agent,street),At(agent,location),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:621

 /*  [equals(side1(Street), Location)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(walkStreet12(Agent, Street),
                     at(Agent, Location),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',621).
axiom(terminates(walkStreet12(Agent, Street), at(Agent, Location), Time),
    [equals(side1(Street), Location)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:623
% [agent,street,location,time]
% Side2(street)=location ->
% Terminates(WalkStreet21(agent,street),At(agent,location),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:625

 /*  [equals(side2(Street), Location)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(walkStreet21(Agent, Street),
                     at(Agent, Location),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',625).
axiom(terminates(walkStreet21(Agent, Street), at(Agent, Location), Time),
    [equals(side2(Street), Location)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:627
%; floors
%; The floor of room is integer.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:630
% function Floor(room): integer
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',630).
function(floor(room)).
==> mpred_prop(floor(room),function).
==> meta_argtypes(floor(room)).
predicate(floorPred(room,integer)).
==> mpred_prop(floorPred(room,integer),predicate).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',630).
==> meta_argtypes(floorPred(room,integer)).

 /*  fix_axiom_head(Time) ->
       
       [ functional_predicate(floor, floorPred),
          (->),
         holds_at(functional_predicate(floor, floorPred), Time)
       ].
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',630).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(functional_predicate(floor, floorPred), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',630).
axiom(holds_at(functional_predicate(floor, floorPred), Time),
    []).
==> resultIsa(floor,integer).
%; walking up and down staircases
%; agent walks down staircase.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:635
% event WalkDownStaircase(agent,staircase)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',635).
event(walkDownStaircase(agent,staircase)).
==> mpred_prop(walkDownStaircase(agent,staircase),event).
==> meta_argtypes(walkDownStaircase(agent,staircase)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:636
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',635).
%; agent walks up staircase.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:637
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',638).
% event WalkUpStaircase(agent,staircase)
event(walkUpStaircase(agent,staircase)).
==> mpred_prop(walkUpStaircase(agent,staircase),event).
==> meta_argtypes(walkUpStaircase(agent,staircase)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:639
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',640).
%; Precondition axioms state that
%; for an agent to walk down (up) a staircase,
%; the agent must be awake, standing, and
%; at the top (bottom) of the staircase:
% [agent,staircase,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:644
% Happens(WalkDownStaircase(agent,staircase),time) ->
% HoldsAt(Awake(agent),time) &
% HoldsAt(Standing(agent),time) &
% HoldsAt(At(agent,Side2(staircase)),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:647
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',644).

 /*  happens(walkDownStaircase(Agent, Staircase), Time) ->
       holds_at(awake(Agent), Time),
       holds_at(standing(Agent), Time),
       holds_at(at(Agent, side2(Staircase)), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',644).

 /*  not(happens(walkDownStaircase(Agent, Staircase), Time)) :-
       (   not(holds_at(awake(Agent), Time))
       ;   not(holds_at(standing(Agent), Time))
       ;   not(holds_at(at(Agent, side2(Staircase)), Time))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',644).

 /*  [(holds_at(neg(awake(Agent)), Time);holds_at(neg(standing(Agent)), Time);holds_at(neg(at(Agent, side2(Staircase))), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(walkDownStaircase(Agent, Staircase), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',644).
axiom(not(happens(walkDownStaircase(Agent, Staircase), Time)),
   
    [  (holds_at(neg(awake(Agent)), Time);holds_at(neg(standing(Agent)), Time);holds_at(neg(at(Agent, side2(Staircase))), Time))
    ]).

 /*  holds_at(awake(Agent), Time) :-
       happens(walkDownStaircase(Agent, Staircase), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',644).

 /*  [holds_at(metreqs(walkDownStaircase(Agent, Staircase)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(walkDownStaircase(Agent, Staircase), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',644).
axiom(requires(walkDownStaircase(Agent, Staircase), Time),
   
    [ holds_at(metreqs(walkDownStaircase(Agent, Staircase)),
               Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',644).

 /*  [holds_at(awake(Agent), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(walkDownStaircase(Agent, Staircase)),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',644).
axiom(holds_at(metreqs(walkDownStaircase(Agent, Staircase)), Time),
    [holds_at(awake(Agent), Time)]).

 /*  holds_at(standing(Agent), Time) :-
       happens(walkDownStaircase(Agent, Staircase), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',644).

 /*  [holds_at(metreqs(walkDownStaircase(Agent, Staircase)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(walkDownStaircase(Agent, Staircase), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',644).
axiom(requires(walkDownStaircase(Agent, Staircase), Time),
   
    [ holds_at(metreqs(walkDownStaircase(Agent, Staircase)),
               Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',644).

 /*  [holds_at(standing(Agent), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(walkDownStaircase(Agent, Staircase)),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',644).
axiom(holds_at(metreqs(walkDownStaircase(Agent, Staircase)), Time),
    [holds_at(standing(Agent), Time)]).

 /*  holds_at(at(Agent, side2(Staircase)), Time) :-
       happens(walkDownStaircase(Agent, Staircase), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',644).

 /*  [holds_at(metreqs(walkDownStaircase(Agent, Staircase)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(walkDownStaircase(Agent, Staircase), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',644).
axiom(requires(walkDownStaircase(Agent, Staircase), Time),
   
    [ holds_at(metreqs(walkDownStaircase(Agent, Staircase)),
               Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',644).

 /*  [holds_at(at(Agent, side2(Staircase)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(walkDownStaircase(Agent, Staircase)),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',644).
axiom(holds_at(metreqs(walkDownStaircase(Agent, Staircase)), Time),
    [holds_at(at(Agent, side2(Staircase)), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:649
% [agent,staircase,time]
% Happens(WalkUpStaircase(agent,staircase),time) ->
% HoldsAt(Awake(agent),time) &
% HoldsAt(Standing(agent),time) &
% HoldsAt(At(agent,Side1(staircase)),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:653
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',651).

 /*  happens(walkUpStaircase(Agent, Staircase), Time) ->
       holds_at(awake(Agent), Time),
       holds_at(standing(Agent), Time),
       holds_at(at(Agent, side1(Staircase)), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',651).

 /*  not(happens(walkUpStaircase(Agent, Staircase), Time)) :-
       (   not(holds_at(awake(Agent), Time))
       ;   not(holds_at(standing(Agent), Time))
       ;   not(holds_at(at(Agent, side1(Staircase)), Time))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',651).

 /*  [(holds_at(neg(awake(Agent)), Time);holds_at(neg(standing(Agent)), Time);holds_at(neg(at(Agent, side1(Staircase))), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(walkUpStaircase(Agent, Staircase), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',651).
axiom(not(happens(walkUpStaircase(Agent, Staircase), Time)),
   
    [  (holds_at(neg(awake(Agent)), Time);holds_at(neg(standing(Agent)), Time);holds_at(neg(at(Agent, side1(Staircase))), Time))
    ]).

 /*  holds_at(awake(Agent), Time) :-
       happens(walkUpStaircase(Agent, Staircase), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',651).

 /*  [holds_at(metreqs(walkUpStaircase(Agent, Staircase)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(walkUpStaircase(Agent, Staircase), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',651).
axiom(requires(walkUpStaircase(Agent, Staircase), Time),
   
    [ holds_at(metreqs(walkUpStaircase(Agent, Staircase)),
               Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',651).

 /*  [holds_at(awake(Agent), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(walkUpStaircase(Agent, Staircase)),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',651).
axiom(holds_at(metreqs(walkUpStaircase(Agent, Staircase)), Time),
    [holds_at(awake(Agent), Time)]).

 /*  holds_at(standing(Agent), Time) :-
       happens(walkUpStaircase(Agent, Staircase), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',651).

 /*  [holds_at(metreqs(walkUpStaircase(Agent, Staircase)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(walkUpStaircase(Agent, Staircase), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',651).
axiom(requires(walkUpStaircase(Agent, Staircase), Time),
   
    [ holds_at(metreqs(walkUpStaircase(Agent, Staircase)),
               Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',651).

 /*  [holds_at(standing(Agent), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(walkUpStaircase(Agent, Staircase)),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',651).
axiom(holds_at(metreqs(walkUpStaircase(Agent, Staircase)), Time),
    [holds_at(standing(Agent), Time)]).

 /*  holds_at(at(Agent, side1(Staircase)), Time) :-
       happens(walkUpStaircase(Agent, Staircase), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',651).

 /*  [holds_at(metreqs(walkUpStaircase(Agent, Staircase)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(walkUpStaircase(Agent, Staircase), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',651).
axiom(requires(walkUpStaircase(Agent, Staircase), Time),
   
    [ holds_at(metreqs(walkUpStaircase(Agent, Staircase)),
               Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',651).

 /*  [holds_at(at(Agent, side1(Staircase)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(walkUpStaircase(Agent, Staircase)),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',651).
axiom(holds_at(metreqs(walkUpStaircase(Agent, Staircase)), Time),
    [holds_at(at(Agent, side1(Staircase)), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:655
%; Effect axioms state that
%; if an agent walks down (up) a staircase,
%; the agent will be at the bottom (top) of the staircase:
% [agent,staircase,room,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:659
% Side1(staircase)=room ->
% Initiates(WalkDownStaircase(agent,staircase),At(agent,room),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',659).

 /*  [equals(side1(Staircase), Room)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(walkDownStaircase(Agent, Staircase),
                    at(Agent, Room),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',659).
axiom(initiates(walkDownStaircase(Agent, Staircase), at(Agent, Room), Time),
    [equals(side1(Staircase), Room)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:662
% [agent,staircase,room,time]
% Side2(staircase)=room ->
% Terminates(WalkDownStaircase(agent,staircase),At(agent,room),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:664

 /*  [equals(side2(Staircase), Room)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(walkDownStaircase(Agent, Staircase),
                     at(Agent, Room),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',664).
axiom(terminates(walkDownStaircase(Agent, Staircase), at(Agent, Room), Time),
    [equals(side2(Staircase), Room)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:666
% [agent,staircase,room,time]
% Side2(staircase)=room ->
% Initiates(WalkUpStaircase(agent,staircase),At(agent,room),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:668

 /*  [equals(side2(Staircase), Room)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(walkUpStaircase(Agent, Staircase),
                    at(Agent, Room),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',668).
axiom(initiates(walkUpStaircase(Agent, Staircase), at(Agent, Room), Time),
    [equals(side2(Staircase), Room)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:670
% [agent,staircase,room,time]
% Side1(staircase)=room ->
% Terminates(WalkUpStaircase(agent,staircase),At(agent,room),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:672

 /*  [equals(side1(Staircase), Room)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(walkUpStaircase(Agent, Staircase),
                     at(Agent, Room),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',672).
axiom(terminates(walkUpStaircase(Agent, Staircase), at(Agent, Room), Time),
    [equals(side1(Staircase), Room)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:674
%; A state constraint says that if an agent is outside,
%; the agent is dressed.
% [agent,outside,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:677
% HoldsAt(At(agent,outside),time) ->
% HoldsAt(Dressed(agent),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',677).

 /*  holds_at(at(Agent, Outside), Time) ->
       holds_at(dressed(Agent), Time).
 */

 /*  holds_at(dressed(Agent), Time) :-
       holds_at(at(Agent, Outside), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',677).

 /*  [holds_at(at(Agent, Outside), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(dressed(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',677).
axiom(holds_at(dressed(Agent), Time),
    [holds_at(at(Agent, Outside), Time)]).

 /*  not(holds_at(at(Agent, Outside), Time)) :-
       not(holds_at(dressed(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',677).

 /*  [holds_at(neg(dressed(Agent)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(at(Agent, Outside)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',677).
axiom(holds_at(neg(at(Agent, Outside)), Time),
    [holds_at(neg(dressed(Agent)), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:680
%; room looks out onto outside.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:681
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',682).
% function LookOutOnto(room): outside
function(lookOutOnto(room)).
==> mpred_prop(lookOutOnto(room),function).
==> meta_argtypes(lookOutOnto(room)).
predicate(lookOutOntoPred(room,outside)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',682).
==> mpred_prop(lookOutOntoPred(room,outside),predicate).
==> meta_argtypes(lookOutOntoPred(room,outside)).

 /*  fix_axiom_head(Time) ->
       
       [ functional_predicate(lookOutOnto, lookOutOntoPred),
          (->),
         holds_at(functional_predicate(lookOutOnto, lookOutOntoPred), Time)
       ].
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',682).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(functional_predicate(lookOutOnto, lookOutOntoPred), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',682).
axiom(holds_at(functional_predicate(lookOutOnto, lookOutOntoPred), Time),
    []).
==> resultIsa(lookOutOnto,outside).
%; location1 is adjacent to location2.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:684
% predicate Adjacent(location,location)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',684).
predicate(adjacent(location,location)).
==> mpred_prop(adjacent(location,location),predicate).
==> meta_argtypes(adjacent(location,location)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:686
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',687).
%; A state constraint says that
%; two locations are adjacent if and only if
%; they have a portal in common:
% [location1,location2]
 
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:689
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',690).
% Adjacent(location1,location2) <->
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:690
% {portal}% 
% (Side1(portal)=location1 &
%  Side2(portal)=location2) |
% (Side2(portal)=location1 &
%  Side1(portal)=location2).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:694
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',690).

 /*  exists([Portal],
    adjacent(Location1, Location2) <->
       (   equals(side1(Portal), Location1),
           equals(side2(Portal), Location2)
       ;   equals(side2(Portal), Location1),
           equals(side1(Portal), Location2)
       )).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',690).

 /*  adjacent(Location1, Location2) :-
       (   equals(side1(Portal), Location1),
           equals(side2(Portal), Location2)
       ;   equals(side2(Portal), Location1),
           equals(side1(Portal), Location2)
       ),
       some(Portal, '$kolem_Fn_332'(Location1, Location2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',690).

 /*  [(equals(side1(Portal), Location1), equals(side2(Portal), Location2);equals(side2(Portal), Location1), equals(side1(Portal), Location2)), some(Portal, '$kolem_Fn_332'(Location1, Location2))] ->
       ta(Ta_Param,
          tvs1=[],
          tvs2=[],
          adjacent(Location1, Location2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',690).
axiom(adjacent(Location1, Location2),
   
    [  (equals(side1(Portal), Location1), equals(side2(Portal), Location2);equals(side2(Portal), Location1), equals(side1(Portal), Location2)),
      some(Portal, '$kolem_Fn_332'(Location1, Location2))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',690).

 /*  not(adjacent(Location1, Location2)) :-
       ( (   not(equals(side1(Portal), Location1))
         ;   not(equals(side2(Portal), Location2))
         ),
         (   not(equals(side2(Portal), Location1))
         ;   not(equals(side1(Portal), Location2))
         )
       ),
       some(Portal, '$kolem_Fn_332'(Location1, Location2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',690).

 /*  [(not(equals(side1(Portal), Location1));not(equals(side2(Portal), Location2))),  (not(equals(side2(Portal), Location1));not(equals(side1(Portal), Location2))), some(Portal, '$kolem_Fn_332'(Location1, Location2))] ->
       ta(Ta_Param5,
          tvs1=[],
          tvs2=[],
          not(adjacent(Location1, Location2))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',690).
axiom(not(adjacent(Location1, Location2)),
   
    [  (not(equals(side1(Portal), Location1));not(equals(side2(Portal), Location2))),
       (not(equals(side2(Portal), Location1));not(equals(side1(Portal), Location2))),
      some(Portal, '$kolem_Fn_332'(Location1, Location2))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:696
%; The ground of outside is ground.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:697
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',698).
% function GroundOf(outside): ground
function(groundOf(outside)).
==> mpred_prop(groundOf(outside),function).
==> meta_argtypes(groundOf(outside)).
predicate(ground(outside,ground)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',698).
==> mpred_prop(ground(outside,ground),predicate).
==> meta_argtypes(ground(outside,ground)).

 /*  fix_axiom_head(Time) ->
       
       [ functional_predicate(groundOf, ground),
          (->),
         holds_at(functional_predicate(groundOf, ground), Time)
       ].
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',698).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(functional_predicate(groundOf, ground), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',698).
axiom(holds_at(functional_predicate(groundOf, ground), Time),
    []).
==> resultIsa(groundOf,ground).
%; The sky of outside is sky.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:699
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',700).
% function SkyOf(outside): sky
function(skyOf(outside)).
==> mpred_prop(skyOf(outside),function).
==> meta_argtypes(skyOf(outside)).
predicate(sky(outside,sky)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',700).
==> mpred_prop(sky(outside,sky),predicate).
==> meta_argtypes(sky(outside,sky)).

 /*  fix_axiom_head(Time) ->
       
       [ functional_predicate(skyOf, sky),
          (->),
         holds_at(functional_predicate(skyOf, sky), Time)
       ].
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',700).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(functional_predicate(skyOf, sky), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',700).
axiom(holds_at(functional_predicate(skyOf, sky), Time),
    []).
==> resultIsa(skyOf,sky).
%; State constraints fix the location of ground and sky:
% [outside,ground,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:703
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',704).
% GroundOf(outside) = ground ->
% HoldsAt(At(ground,outside),time).

 /*  equals(groundOf(Outside), Ground) ->
       holds_at(at(Ground, Outside), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',704).

 /*  holds_at(at(Ground, Outside), Time) :-
       equals(groundOf(Outside), Ground).
 */

 /*  [equals(groundOf(Outside), Ground)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(at(Ground, Outside), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',704).
axiom(holds_at(at(Ground, Outside), Time),
    [equals(groundOf(Outside), Ground)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:706
% [outside,sky,time]
% SkyOf(outside) = sky ->
% HoldsAt(At(sky,outside),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:708

 /*  equals(skyOf(Outside), Sky) ->
       holds_at(at(Sky, Outside), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',708).

 /*  holds_at(at(Sky, Outside), Time) :-
       equals(skyOf(Outside), Sky).
 */

 /*  [equals(skyOf(Outside), Sky)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(at(Sky, Outside), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',708).
axiom(holds_at(at(Sky, Outside), Time),
    [equals(skyOf(Outside), Sky)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:710
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: ecnet/OTSpace.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; OTSpace: object-scale topological space
%;
%; The OTSpace representation deals with topological space at
%; the scale of objects such as agents (humans and animals)
%; and physical objects.
%;
%; PartOf
%; physobj is a part of object.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:738
% predicate PartOf(physobj,object)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',738).
predicate(partOf(physobj,object)).
==> mpred_prop(partOf(physobj,object),predicate).
==> meta_argtypes(partOf(physobj,object)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:740
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',741).
%; A state constraint says that if a physical object
%; is part of an object, the location of the
%; physical object is the same as the location of the object:
% [physobj,object,location,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:744
% PartOf(physobj,object) &
% HoldsAt(At(object,location),time) ->
% HoldsAt(At(physobj,location),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:746
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',744).

 /*  partOf(Physobj, Object), holds_at(at(Object, Location), Time) ->
       holds_at(at(Physobj, Location), Time).
 */

 /*  holds_at(at(Physobj, Location), Time) :-
       partOf(Physobj, Object),
       holds_at(at(Object, Location), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',744).

 /*  [partOf(Physobj, Object), holds_at(at(Object, Location), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(at(Physobj, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',744).
axiom(holds_at(at(Physobj, Location), Time),
   
    [ partOf(Physobj, Object),
      holds_at(at(Object, Location), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',744).

 /*  not(partOf(Physobj, Object)) :-
       holds_at(at(Object, Location), Time),
       not(holds_at(at(Physobj, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',744).

 /*  [holds_at(at(Object, Location), Time), holds_at(neg(at(Physobj, Location)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(partOf(Physobj, Object))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',744).
axiom(not(partOf(Physobj, Object)),
   
    [ holds_at(at(Object, Location), Time),
      holds_at(neg(at(Physobj, Location)), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',744).

 /*  not(holds_at(at(Object, Location), Time)) :-
       partOf(Physobj, Object),
       not(holds_at(at(Physobj, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',744).

 /*  [partOf(Physobj, Object), holds_at(neg(at(Physobj, Location)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(at(Object, Location)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',744).
axiom(holds_at(neg(at(Object, Location)), Time),
   
    [ partOf(Physobj, Object),
      holds_at(neg(at(Physobj, Location)), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:748
%; rolling a snowball bigger
%; agent rolls stuff1 along stuff2.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:751
% event RollAlong(agent,stuff,stuff)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',751).
event(rollAlong(agent,stuff,stuff)).
==> mpred_prop(rollAlong(agent,stuff,stuff),event).
==> meta_argtypes(rollAlong(agent,stuff,stuff)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:752
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',751).
%; The diameter of ball is diameter.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:753
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',754).
% fluent Diameter(ball,diameter)
fluent(diameter(ball,diameter)).
==> mpred_prop(diameter(ball,diameter),fluent).
==> meta_argtypes(diameter(ball,diameter)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:755
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',756).
%; A state constraint says that a ball has a unique diameter:
% [ball,diameter1,diameter2,time]
% HoldsAt(Diameter(ball,diameter1),time) &
% HoldsAt(Diameter(ball,diameter2),time) ->
% diameter1=diameter2.
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:759
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',758).

 /*  holds_at(diameter(Ball, Diameter1), Time), holds_at(diameter(Ball, Diameter2), Time) ->
       equals(Diameter1, Diameter2).
 */

 /*  not(holds_at(diameter(Ball, Diameter1), Time)) :-
       holds_at(diameter(Ball, Diameter2), Time),
       not(equals(Diameter1, Diameter2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',758).

 /*  [holds_at(diameter(Ball, Diameter2), Time), not(equals(Diameter1, Diameter2))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(diameter(Ball, Diameter1)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',758).
axiom(holds_at(neg(diameter(Ball, Diameter1)), Time),
   
    [ holds_at(diameter(Ball, Diameter2), Time),
      not(equals(Diameter1, Diameter2))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',758).

 /*  not(holds_at(diameter(Ball, Diameter2), Time)) :-
       holds_at(diameter(Ball, Diameter1), Time),
       not(equals(Diameter1, Diameter2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',758).

 /*  [holds_at(diameter(Ball, Diameter1), Time), not(equals(Diameter1, Diameter2))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(diameter(Ball, Diameter2)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',758).
axiom(holds_at(neg(diameter(Ball, Diameter2)), Time),
   
    [ holds_at(diameter(Ball, Diameter1), Time),
      not(equals(Diameter2, Diameter1))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:761
%; Effect axiom state that if an agent rolls some snow along
%; some other snow, the diameter of the first snow will increase:
% [agent,snow1,snow2,diameter1,diameter2,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:764
% HoldsAt(Diameter(snow1,diameter1),time) &
% diameter2 = diameter1+1 ->
% Initiates(RollAlong(agent,snow1,snow2),
%           Diameter(snow1,diameter2),
%           time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:768
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',764).

 /*  [holds_at(diameter(Snow1, Diameter1), Time), equals(Diameter2, Diameter1+1)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(rollAlong(Agent, Snow1, Snow2),
                    diameter(Snow1, Diameter2),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',764).
axiom(initiates(rollAlong(Agent, Snow1, Snow2), diameter(Snow1, Diameter2), Time),
   
    [ holds_at(diameter(Snow1, Diameter1), Time),
      equals(Diameter2, Diameter1+1)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:770
% [agent,snow1,snow2,diameter1,time]
% HoldsAt(Diameter(snow1,diameter1),time) ->
% Terminates(RollAlong(agent,snow1,snow2),
%            Diameter(snow1,diameter1),
%            time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:774
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',772).

 /*  [holds_at(diameter(Snow1, Diameter1), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(rollAlong(Agent, Snow1, Snow2),
                     diameter(Snow1, Diameter1),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',772).
axiom(terminates(rollAlong(Agent, Snow1, Snow2), diameter(Snow1, Diameter1), Time),
    [holds_at(diameter(Snow1, Diameter1), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:776
%; A precondition axiom states that
%; for an agent to roll some snow along some other snow,
%; there must be a location such that
%; the agent is at the location,
%; the first snow is at the location, and
%; the second snow is at the location:
%;[agent,snow1,snow2,time]
%;Happens(RollAlong(agent,snow1,snow2),time) ->
%;{location}
%;HoldsAt(At(agent,location),time) &
%;HoldsAt(At(snow1,location),time) &
%;HoldsAt(At(snow2,location),time).
%; motion
%; object moves (in place).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:792
% event Move(object)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',792).
event(move(object)).
==> mpred_prop(move(object),event).
==> meta_argtypes(move(object)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:794
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',795).
%; Holding
%; agent is holding physobj.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:797
% fluent Holding(agent,physobj)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',797).
fluent(holding(agent,physobj)).
==> mpred_prop(holding(agent,physobj),fluent).
==> meta_argtypes(holding(agent,physobj)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:798
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',797).
%; agent holds or picks up physobj.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:799
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',800).
% event Hold(agent,physobj)
event(hold(agent,physobj)).
==> mpred_prop(hold(agent,physobj),event).
==> meta_argtypes(hold(agent,physobj)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:800
%; agent picks up some stuff1 from stuff2.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:801
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',802).
% event HoldSome(agent,stuff,stuff)
event(holdSome(agent,stuff,stuff)).
==> mpred_prop(holdSome(agent,stuff,stuff),event).
==> meta_argtypes(holdSome(agent,stuff,stuff)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:802
%; agent releases or lets go of physobj.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:803
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',804).
% event LetGoOf(agent,physobj)
event(letGoOf(agent,physobj)).
==> mpred_prop(letGoOf(agent,physobj),event).
==> meta_argtypes(letGoOf(agent,physobj)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:805
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',806).
%; An effect axiom states that if an agent holds
%; a physical object, the agent will be holding the
%; physical object:
% [agent,physobj,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:809
% Initiates(Hold(agent,physobj),Holding(agent,physobj),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',809).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(hold(Agent, Physobj),
                    holding(Agent, Physobj),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',809).
axiom(initiates(hold(Agent, Physobj), holding(Agent, Physobj), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:811
%; A precondition axiom states that
%; for an agent to hold a physical object,
%; there must be a location such that
%; the agent is at the location and
%; the physical object is at the location:
%;[agent,physobj,time]
%;Happens(Hold(agent,physobj),time) ->
%;{location}
%;  HoldsAt(At(agent,location),time) &
%;  HoldsAt(At(physobj,location),time).
%; An effect axiom states that if an agent
%; lets go of a physical object, the agent is no longer holding
%; the physical object:
% [agent,physobj,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:826
% Terminates(LetGoOf(agent,physobj),Holding(agent,physobj),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',826).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(letGoOf(Agent, Physobj),
                     holding(Agent, Physobj),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',826).
axiom(terminates(letGoOf(Agent, Physobj), holding(Agent, Physobj), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:828
%; A precondition axiom states that
%; for an agent to let go of a physical object,
%; the agent must be holding the physical object:
% [agent,physobj,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:832
% Happens(LetGoOf(agent,physobj),time) ->
% HoldsAt(Holding(agent,physobj),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',832).

 /*  happens(letGoOf(Agent, Physobj), Time) ->
       holds_at(holding(Agent, Physobj), Time).
 */

 /*  holds_at(holding(Agent, Physobj), Time) :-
       happens(letGoOf(Agent, Physobj), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',832).

 /*  [holds_at(metreqs(letGoOf(Agent, Physobj)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(letGoOf(Agent, Physobj), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',832).
axiom(requires(letGoOf(Agent, Physobj), Time),
    [holds_at(metreqs(letGoOf(Agent, Physobj)), Time)]).

 /*  [holds_at(holding(Agent, Physobj), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(letGoOf(Agent, Physobj)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',832).
axiom(holds_at(metreqs(letGoOf(Agent, Physobj)), Time),
    [holds_at(holding(Agent, Physobj), Time)]).

 /*  not(happens(letGoOf(Agent, Physobj), Time)) :-
       not(holds_at(holding(Agent, Physobj), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',832).

 /*  [holds_at(neg(holding(Agent, Physobj)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(letGoOf(Agent, Physobj), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',832).
axiom(not(happens(letGoOf(Agent, Physobj), Time)),
    [holds_at(neg(holding(Agent, Physobj)), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:835
%; A releases axiom states that if an agent holds
%; a physical object,
%; the physical object's location will be released
%; from inertia:
% [agent,physobj,location,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:840
% Releases(Hold(agent,physobj),At(physobj,location),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',840).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          releases(hold(Agent, Physobj),
                   at(Physobj, Location),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',840).
axiom(releases(hold(Agent, Physobj), at(Physobj, Location), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:842
%; A state constraint says that if an agent is holding
%; a physical object and the agent is at a location,
%; the physical object is also at the location:
% [agent,physobj,location,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:846
% HoldsAt(Holding(agent,physobj),time) &
% HoldsAt(At(agent,location),time) ->
% HoldsAt(At(physobj,location),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:848
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',846).

 /*  holds_at(holding(Agent, Physobj), Time), holds_at(at(Agent, Location), Time) ->
       holds_at(at(Physobj, Location), Time).
 */

 /*  holds_at(at(Physobj, Location), Time) :-
       holds_at(holding(Agent, Physobj), Time),
       holds_at(at(Agent, Location), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',846).

 /*  [holds_at(holding(Agent, Physobj), Time), holds_at(at(Agent, Location), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(at(Physobj, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',846).
axiom(holds_at(at(Physobj, Location), Time),
   
    [ holds_at(holding(Agent, Physobj), Time),
      holds_at(at(Agent, Location), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',846).

 /*  not(holds_at(holding(Agent, Physobj), Time)) :-
       holds_at(at(Agent, Location), Time),
       not(holds_at(at(Physobj, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',846).

 /*  [holds_at(at(Agent, Location), Time), holds_at(neg(at(Physobj, Location)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(holding(Agent, Physobj)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',846).
axiom(holds_at(neg(holding(Agent, Physobj)), Time),
   
    [ holds_at(at(Agent, Location), Time),
      holds_at(neg(at(Physobj, Location)), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',846).

 /*  not(holds_at(at(Agent, Location), Time)) :-
       holds_at(holding(Agent, Physobj), Time),
       not(holds_at(at(Physobj, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',846).

 /*  [holds_at(holding(Agent, Physobj), Time), holds_at(neg(at(Physobj, Location)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(at(Agent, Location)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',846).
axiom(holds_at(neg(at(Agent, Location)), Time),
   
    [ holds_at(holding(Agent, Physobj), Time),
      holds_at(neg(at(Physobj, Location)), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:850
%; A releases axiom states that if an agent holds
%; a physical object,
%; the locations of the parts of the physical object
%; will be released from inertia:
% [agent,physobj1,physobj2,location,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:855
% PartOf(physobj1,physobj2) ->
% Releases(Hold(agent,physobj2),At(physobj1,location),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',855).

 /*  [partOf(Physobj1, Physobj2)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          releases(hold(Agent, Physobj2),
                   at(Physobj1, Location),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',855).
axiom(releases(hold(Agent, Physobj2), at(Physobj1, Location), Time),
    [partOf(Physobj1, Physobj2)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:858
%; Further, if an agent holds a physical object,
%; the locations of the physical objects of which
%; the physical object is a part
%; will be released from inertia:
% [agent,physobj1,physobj2,location,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:863
% PartOf(physobj1,physobj2) ->
% Releases(Hold(agent,physobj1),At(physobj2,location),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',863).

 /*  [partOf(Physobj1, Physobj2)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          releases(hold(Agent, Physobj1),
                   at(Physobj2, Location),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',863).
axiom(releases(hold(Agent, Physobj1), at(Physobj2, Location), Time),
    [partOf(Physobj1, Physobj2)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:866
%;[agent,physobj,location1,location2,time]
%;(!{object} PartOf(physobj,object)) &
%;HoldsAt(At(agent,location1),time) &
%;location1 != location2 ->
%;Terminates(LetGoOf(agent,physobj),At(physobj,location2),time).
% [agent,physobj,location,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:873
% (!{object} PartOf(physobj,object)) &
% HoldsAt(At(agent,location),time) ->
% Initiates(LetGoOf(agent,physobj),At(physobj,location),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:875
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',873).

 /*  [not(partOf(Physobj, Object)), holds_at(at(Agent, Location), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(letGoOf(Agent, Physobj),
                    at(Physobj, Location),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',873).
axiom(initiates(letGoOf(Agent, Physobj), at(Physobj, Location), Time),
   
    [ not(partOf(Physobj, Object)),
      holds_at(at(Agent, Location), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:877
%;[agent,physobj1,physobj2,location1,location2,time]
%;PartOf(physobj1,physobj2) &
%;(!{object} PartOf(physobj2,object)) &
%;HoldsAt(At(agent,location1),time) &
%;location1 != location2 ->
%;Terminates(LetGoOf(agent,physobj1),At(physobj2,location2),time).
% [agent,physobj1,physobj2,location,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:885
% PartOf(physobj1,physobj2) &
% (!{object} PartOf(physobj2,object)) &
% HoldsAt(At(agent,location),time) ->
% Initiates(LetGoOf(agent,physobj1),At(physobj2,location),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:888
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',885).

 /*  [partOf(Physobj1, Physobj2), not(partOf(Physobj2, Object)), holds_at(at(Agent, Location), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(letGoOf(Agent, Physobj1),
                    at(Physobj2, Location),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',885).
axiom(initiates(letGoOf(Agent, Physobj1), at(Physobj2, Location), Time),
   
    [ partOf(Physobj1, Physobj2),
      not(partOf(Physobj2, Object)),
      holds_at(at(Agent, Location), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:890
%; An effect axiom states that if an agent is at a location
%; and lets go of a physical object, the physical object
%; will be at the location:
% [agent,physobj,location,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:894
% HoldsAt(At(agent,location),time) ->
% Initiates(LetGoOf(agent,physobj),At(physobj,location),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',894).

 /*  [holds_at(at(Agent, Location), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(letGoOf(Agent, Physobj),
                    at(Physobj, Location),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',894).
axiom(initiates(letGoOf(Agent, Physobj), at(Physobj, Location), Time),
    [holds_at(at(Agent, Location), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:897
%; An effect axiom states that if an agent picks up
%; some stuff out of some other stuff, the agent will
%; be holding the first stuff:
% [agent,stuff1,stuff2,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:901
% Initiates(HoldSome(agent,stuff1,stuff2),
%           Holding(agent,stuff1),
%           time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:903
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',901).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(holdSome(Agent, Stuff1, Stuff2),
                    holding(Agent, Stuff1),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',901).
axiom(initiates(holdSome(Agent, Stuff1, Stuff2), holding(Agent, Stuff1), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:905
%; A precondition axiom states that
%; for an agent to pick up some stuff out of some other stuff,
%; the first stuff must be a part of the second stuff and
%; there must be a location such that the agent is at the location,
%; the first stuff is at the location, and the second stuff is
%; at the location:
% [agent,stuff1,stuff2,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:912
% Happens(HoldSome(agent,stuff1,stuff2),time) ->
% PartOf(stuff1,stuff2) &
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:914
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',912).
% {location}% 
%   HoldsAt(At(agent,location),time) &
%   HoldsAt(At(stuff1,location),time) &
%   HoldsAt(At(stuff2,location),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:917
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',915).

 /*  exists([Location],
    happens(holdSome(Agent, Stuff1, Stuff2), Time) ->
       partOf(Stuff1, Stuff2),
       holds_at(at(Agent, Location), Time),
       holds_at(at(Stuff1, Location), Time),
       holds_at(at(Stuff2, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',915).

 /*  not(happens(holdSome(Agent, Stuff1, Stuff2), Time)) :-
       (   not(partOf(Stuff1, Stuff2))
       ;   not(holds_at(at(Agent, Location), Time))
       ;   not(holds_at(at(Stuff1, Location), Time))
       ;   not(holds_at(at(Stuff2, Location), Time))
       ),
       some(Location,
            '$kolem_Fn_335'(Agent, Stuff1, Stuff2, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',915).

 /*  [(not(partOf(Stuff1, Stuff2));holds_at(neg(at(Agent, Location)), Time);holds_at(neg(at(Stuff1, Location)), Time);holds_at(neg(at(Stuff2, Location)), Time)), some(Location, '$kolem_Fn_335'(Agent, Stuff1, Stuff2, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(holdSome(Agent, Stuff1, Stuff2), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',915).
axiom(not(happens(holdSome(Agent, Stuff1, Stuff2), Time)),
   
    [  (not(partOf(Stuff1, Stuff2));holds_at(neg(at(Agent, Location)), Time);holds_at(neg(at(Stuff1, Location)), Time);holds_at(neg(at(Stuff2, Location)), Time)),
      some(Location,
           '$kolem_Fn_335'(Agent, Stuff1, Stuff2, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',915).

 /*  partOf(Stuff1, Stuff2) :-
       happens(holdSome(Agent, Stuff1, Stuff2), Time),
       some(Location,
            '$kolem_Fn_335'(Agent, Stuff1, Stuff2, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',915).

 /*  [happens(holdSome(Agent, Stuff1, Stuff2), Time), some(Location, '$kolem_Fn_335'(Agent, Stuff1, Stuff2, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          partOf(Stuff1, Stuff2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',915).
axiom(partOf(Stuff1, Stuff2),
   
    [ happens(holdSome(Agent, Stuff1, Stuff2), Time),
      some(Location,
           '$kolem_Fn_335'(Agent, Stuff1, Stuff2, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',915).

 /*  holds_at(at(Agent, Location), Time) :-
       happens(holdSome(Agent, Stuff1, Stuff2), Time),
       some(Location,
            '$kolem_Fn_335'(Agent, Stuff1, Stuff2, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',915).

 /*  [happens(holdSome(Agent, Stuff1, Stuff2), Time), some(Location, '$kolem_Fn_335'(Agent, Stuff1, Stuff2, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(at(Agent, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',915).
axiom(holds_at(at(Agent, Location), Time),
   
    [ happens(holdSome(Agent, Stuff1, Stuff2), Time),
      some(Location,
           '$kolem_Fn_335'(Agent, Stuff1, Stuff2, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',915).

 /*  holds_at(at(Stuff1, Location), Time) :-
       happens(holdSome(Agent, Stuff1, Stuff2), Time),
       some(Location,
            '$kolem_Fn_335'(Agent, Stuff1, Stuff2, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',915).

 /*  [happens(holdSome(Agent, Stuff1, Stuff2), Time), some(Location, '$kolem_Fn_335'(Agent, Stuff1, Stuff2, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(at(Stuff1, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',915).
axiom(holds_at(at(Stuff1, Location), Time),
   
    [ happens(holdSome(Agent, Stuff1, Stuff2), Time),
      some(Location,
           '$kolem_Fn_335'(Agent, Stuff1, Stuff2, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',915).

 /*  holds_at(at(Stuff2, Location), Time) :-
       happens(holdSome(Agent, Stuff1, Stuff2), Time),
       some(Location,
            '$kolem_Fn_335'(Agent, Stuff1, Stuff2, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',915).

 /*  [happens(holdSome(Agent, Stuff1, Stuff2), Time), some(Location, '$kolem_Fn_335'(Agent, Stuff1, Stuff2, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(at(Stuff2, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',915).
axiom(holds_at(at(Stuff2, Location), Time),
   
    [ happens(holdSome(Agent, Stuff1, Stuff2), Time),
      some(Location,
           '$kolem_Fn_335'(Agent, Stuff1, Stuff2, Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:919
%; A releases axiom states that if an agent picks up some
%; stuff out of some other stuff,
%; the first stuff's location will be released
%; from inertia:
% [agent,stuff1,stuff2,location,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:924
% Releases(HoldSome(agent,stuff1,stuff2),At(stuff1,location),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',924).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          releases(holdSome(Agent, Stuff1, Stuff2),
                   at(Stuff1, Location),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',924).
axiom(releases(holdSome(Agent, Stuff1, Stuff2), at(Stuff1, Location), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:926
%; Inside
%; physobj1 is inside physobj2.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:929
% fluent Inside(physobj,physobj)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',929).
fluent(inside(physobj,physobj)).
==> mpred_prop(inside(physobj,physobj),fluent).
==> meta_argtypes(inside(physobj,physobj)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:930
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',929).
%; agent puts physobj1 inside physobj2.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:931
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',932).
% event PutInside(agent,physobj,physobj)
event(putInside(agent,physobj,physobj)).
==> mpred_prop(putInside(agent,physobj,physobj),event).
==> meta_argtypes(putInside(agent,physobj,physobj)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:932
%; agent takes physobj1 out of physobj2.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:933
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',934).
% event TakeOutOf(agent,physobj,physobj)
event(takeOutOf(agent,physobj,physobj)).
==> mpred_prop(takeOutOf(agent,physobj,physobj),event).
==> meta_argtypes(takeOutOf(agent,physobj,physobj)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:935
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',936).
%; A state constraint says that a physical object cannot
%; be inside itself:
% [physobj1,physobj2,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:938
% HoldsAt(Inside(physobj1,physobj2),time) ->
% physobj1!=physobj2.
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',938).

 /*  holds_at(inside(Physobj1, Physobj2), Time) ->
       diff(Physobj1, Physobj2).
 */

 /*  not(holds_at(inside(Physobj1, Physobj2), Time)) :-
       not(diff(Physobj1, Physobj2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',938).

 /*  [equals(Physobj1, Physobj2)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(inside(Physobj1, Physobj2)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',938).
axiom(holds_at(neg(inside(Physobj1, Physobj2)), Time),
    [equals(Physobj1, Physobj2)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:941
%; A state constraint says that if a physical object is
%; inside another physical object, the second physical object
%; is not inside the first physical object:
% [physobj1,physobj2,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:945
% HoldsAt(Inside(physobj1,physobj2),time) ->
% !HoldsAt(Inside(physobj2,physobj1),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',945).

 /*  holds_at(inside(Physobj1, Physobj2), Time) ->
       holds_at(neg(inside(Physobj2, Physobj1)), Time).
 */

 /*  holds_at(neg(inside(Physobj2, Physobj1)), Time) :-
       holds_at(inside(Physobj1, Physobj2), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',945).

 /*  [holds_at(inside(Physobj1, Physobj2), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(inside(Physobj2, Physobj1)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',945).
axiom(holds_at(neg(inside(Physobj2, Physobj1)), Time),
    [holds_at(inside(Physobj1, Physobj2), Time)]).

 /*  not(holds_at(inside(Physobj1, Physobj2), Time)) :-
       not(holds_at(neg(inside(Physobj2, Physobj1)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',945).

 /*  [holds_at(inside(Physobj2, Physobj1), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(inside(Physobj1, Physobj2)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',945).
axiom(holds_at(neg(inside(Physobj1, Physobj2)), Time),
    [holds_at(inside(Physobj2, Physobj1), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:948
%; An effect axiom states that if an agent puts a physical
%; object inside another physical object, the first
%; physical object will be inside the second physical object:
% [agent,physobj1,physobj2,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:952
% Initiates(PutInside(agent,physobj1,physobj2),
%           Inside(physobj1,physobj2),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',952).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(putInside(Agent, Physobj1, Physobj2),
                    inside(Physobj1, Physobj2),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',952).
axiom(initiates(putInside(Agent, Physobj1, Physobj2), inside(Physobj1, Physobj2), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:955
%; An effect axiom states that if an agent puts a physical
%; object inside another physical object, the agent will
%; no longer be holding the first physical object:
% [agent,physobj1,physobj2,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:959
% Terminates(PutInside(agent,physobj1,physobj2),
%            Holding(agent,physobj1),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',959).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(putInside(Agent, Physobj1, Physobj2),
                     holding(Agent, Physobj1),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',959).
axiom(terminates(putInside(Agent, Physobj1, Physobj2), holding(Agent, Physobj1), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:962
%; A precondition axiom states that
%; for an agent to put a physical object inside another
%; physical object,
%; the agent must be holding the first physical object
%; and there must be a location such that
%; the agent is at the location and
%; the second physical object is at the location:
%;[agent,physobj1,physobj2,time]
%;Happens(PutInside(agent,physobj1,physobj2),time) ->
%;HoldsAt(Holding(agent,physobj1),time) &
%;{location}
%; HoldsAt(At(agent,location),time) &
%; HoldsAt(At(physobj2,location),time).
%; An effect axiom states that
%; if an agent takes a physical object out of another
%; physical object, the first physical object
%; will no longer be inside the second physical object:
% [agent,physobj1,physobj2,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:981
% Terminates(TakeOutOf(agent,physobj1,physobj2),
%            Inside(physobj1,physobj2),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',981).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(takeOutOf(Agent, Physobj1, Physobj2),
                     inside(Physobj1, Physobj2),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',981).
axiom(terminates(takeOutOf(Agent, Physobj1, Physobj2), inside(Physobj1, Physobj2), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:984
%; A precondition axiom states that
%; for an agent to take a physical object out of another
%; physical object,
%; the first physical object must be inside the second physical object
%; and there must be a location such that
%; the agent is at the location,
%; the first physical object is at the location, and
%; the second physical object is at the location:
% [agent,physobj1,physobj2,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:993
% Happens(TakeOutOf(agent,physobj1,physobj2),time) ->
% HoldsAt(Inside(physobj1,physobj2),time) &
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:995
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',993).
% {location}% 
%  HoldsAt(At(agent,location),time) &
%  HoldsAt(At(physobj1,location),time) &
%  HoldsAt(At(physobj2,location),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:998
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',996).

 /*  exists([Location],
    happens(takeOutOf(Agent, Physobj1, Physobj2), Time) ->
       holds_at(inside(Physobj1, Physobj2), Time),
       holds_at(at(Agent, Location), Time),
       holds_at(at(Physobj1, Location), Time),
       holds_at(at(Physobj2, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',996).

 /*  not(happens(takeOutOf(Agent, Physobj1, Physobj2), Time)) :-
       (   not(holds_at(inside(Physobj1, Physobj2), Time))
       ;   not(holds_at(at(Agent, Location), Time))
       ;   not(holds_at(at(Physobj1, Location), Time))
       ;   not(holds_at(at(Physobj2, Location), Time))
       ),
       some(Location,
            '$kolem_Fn_336'(Agent, Physobj1, Physobj2, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',996).

 /*  [(holds_at(neg(inside(Physobj1, Physobj2)), Time);holds_at(neg(at(Agent, Location)), Time);holds_at(neg(at(Physobj1, Location)), Time);holds_at(neg(at(Physobj2, Location)), Time)), some(Location, '$kolem_Fn_336'(Agent, Physobj1, Physobj2, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(takeOutOf(Agent, Physobj1, Physobj2),
                      Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',996).
axiom(not(happens(takeOutOf(Agent, Physobj1, Physobj2), Time)),
   
    [  (holds_at(neg(inside(Physobj1, Physobj2)), Time);holds_at(neg(at(Agent, Location)), Time);holds_at(neg(at(Physobj1, Location)), Time);holds_at(neg(at(Physobj2, Location)), Time)),
      some(Location,
           '$kolem_Fn_336'(Agent, Physobj1, Physobj2, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',996).

 /*  holds_at(inside(Physobj1, Physobj2), Time) :-
       happens(takeOutOf(Agent, Physobj1, Physobj2), Time),
       some(Location,
            '$kolem_Fn_336'(Agent, Physobj1, Physobj2, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',996).

 /*  [happens(takeOutOf(Agent, Physobj1, Physobj2), Time), some(Location, '$kolem_Fn_336'(Agent, Physobj1, Physobj2, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(inside(Physobj1, Physobj2), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',996).
axiom(holds_at(inside(Physobj1, Physobj2), Time),
   
    [ happens(takeOutOf(Agent, Physobj1, Physobj2), Time),
      some(Location,
           '$kolem_Fn_336'(Agent, Physobj1, Physobj2, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',996).

 /*  holds_at(at(Agent, Location), Time) :-
       happens(takeOutOf(Agent, Physobj1, Physobj2), Time),
       some(Location,
            '$kolem_Fn_336'(Agent, Physobj1, Physobj2, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',996).

 /*  [happens(takeOutOf(Agent, Physobj1, Physobj2), Time), some(Location, '$kolem_Fn_336'(Agent, Physobj1, Physobj2, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(at(Agent, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',996).
axiom(holds_at(at(Agent, Location), Time),
   
    [ happens(takeOutOf(Agent, Physobj1, Physobj2), Time),
      some(Location,
           '$kolem_Fn_336'(Agent, Physobj1, Physobj2, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',996).

 /*  holds_at(at(Physobj1, Location), Time) :-
       happens(takeOutOf(Agent, Physobj1, Physobj2), Time),
       some(Location,
            '$kolem_Fn_336'(Agent, Physobj1, Physobj2, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',996).

 /*  [happens(takeOutOf(Agent, Physobj1, Physobj2), Time), some(Location, '$kolem_Fn_336'(Agent, Physobj1, Physobj2, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(at(Physobj1, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',996).
axiom(holds_at(at(Physobj1, Location), Time),
   
    [ happens(takeOutOf(Agent, Physobj1, Physobj2), Time),
      some(Location,
           '$kolem_Fn_336'(Agent, Physobj1, Physobj2, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',996).

 /*  holds_at(at(Physobj2, Location), Time) :-
       happens(takeOutOf(Agent, Physobj1, Physobj2), Time),
       some(Location,
            '$kolem_Fn_336'(Agent, Physobj1, Physobj2, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',996).

 /*  [happens(takeOutOf(Agent, Physobj1, Physobj2), Time), some(Location, '$kolem_Fn_336'(Agent, Physobj1, Physobj2, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(at(Physobj2, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',996).
axiom(holds_at(at(Physobj2, Location), Time),
   
    [ happens(takeOutOf(Agent, Physobj1, Physobj2), Time),
      some(Location,
           '$kolem_Fn_336'(Agent, Physobj1, Physobj2, Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1000
%; A releases axiom states that if an agent puts a physical
%; object inside another physical object,
%; the first physical object's location will be released
%; from inertia:
% [agent,physobj1,physobj2,location,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1005
% Releases(PutInside(agent,physobj1,physobj2),
%          At(physobj1,location),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1005).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          releases(putInside(Agent, Physobj1, Physobj2),
                   at(Physobj1, Location),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1005).
axiom(releases(putInside(Agent, Physobj1, Physobj2), at(Physobj1, Location), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1008
%; A state constraint says that if a physical object is inside
%; another physical object and the second physical object is
%; at a location, the first physical object is also at the location:
% [physobj1,physobj2,location,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1012
% HoldsAt(Inside(physobj1,physobj2),time) &
% HoldsAt(At(physobj2,location),time) ->
% HoldsAt(At(physobj1,location),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1014
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1012).

 /*  holds_at(inside(Physobj1, Physobj2), Time), holds_at(at(Physobj2, Location), Time) ->
       holds_at(at(Physobj1, Location), Time).
 */

 /*  holds_at(at(Physobj1, Location), Time) :-
       holds_at(inside(Physobj1, Physobj2), Time),
       holds_at(at(Physobj2, Location), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1012).

 /*  [holds_at(inside(Physobj1, Physobj2), Time), holds_at(at(Physobj2, Location), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(at(Physobj1, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1012).
axiom(holds_at(at(Physobj1, Location), Time),
   
    [ holds_at(inside(Physobj1, Physobj2), Time),
      holds_at(at(Physobj2, Location), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1012).

 /*  not(holds_at(inside(Physobj1, Physobj2), Time)) :-
       holds_at(at(Physobj2, Location), Time),
       not(holds_at(at(Physobj1, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1012).

 /*  [holds_at(at(Physobj2, Location), Time), holds_at(neg(at(Physobj1, Location)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(inside(Physobj1, Physobj2)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1012).
axiom(holds_at(neg(inside(Physobj1, Physobj2)), Time),
   
    [ holds_at(at(Physobj2, Location), Time),
      holds_at(neg(at(Physobj1, Location)), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1012).

 /*  not(holds_at(at(Physobj2, Location), Time)) :-
       holds_at(inside(Physobj1, Physobj2), Time),
       not(holds_at(at(Physobj1, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1012).

 /*  [holds_at(inside(Physobj1, Physobj2), Time), holds_at(neg(at(Physobj1, Location)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(at(Physobj2, Location)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1012).
axiom(holds_at(neg(at(Physobj2, Location)), Time),
   
    [ holds_at(inside(Physobj1, Physobj2), Time),
      holds_at(neg(at(Physobj1, Location)), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1016
%; An effect axiom states that if an agent takes a physical
%; object out of another physical object,
%; the agent will be holding the first physical object:
% [agent,physobj1,physobj2,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1020
% Initiates(TakeOutOf(agent,physobj1,physobj2),
%           Holding(agent,physobj1),
%           time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1022
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1020).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(takeOutOf(Agent, Physobj1, Physobj2),
                    holding(Agent, Physobj1),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1020).
axiom(initiates(takeOutOf(Agent, Physobj1, Physobj2), holding(Agent, Physobj1), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1024
%; On
%; physobj1 is on physobj2.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1027
% fluent On(physobj,physobj)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1027).
fluent(on(physobj,physobj)).
==> mpred_prop(on(physobj,physobj),fluent).
==> meta_argtypes(on(physobj,physobj)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1029
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1030).
%; agent places physobj1 on physobj2.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1030
% event PlaceOn(agent,physobj,physobj)
event(placeOn(agent,physobj,physobj)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1030).
==> mpred_prop(placeOn(agent,physobj,physobj),event).
==> meta_argtypes(placeOn(agent,physobj,physobj)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1031
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1030).
%; agent takes physobj1 off of physobj2.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1032
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1033).
% event TakeOffOf(agent,physobj,physobj)
event(takeOffOf(agent,physobj,physobj)).
==> mpred_prop(takeOffOf(agent,physobj,physobj),event).
==> meta_argtypes(takeOffOf(agent,physobj,physobj)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1034
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1035).
%; A state constraint says that a physical object cannot
%; be on itself:
% [physobj1,physobj2,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1037
% HoldsAt(On(physobj1,physobj2),time) ->
% physobj1!=physobj2.
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1037).

 /*  holds_at(on(Physobj1, Physobj2), Time) ->
       diff(Physobj1, Physobj2).
 */

 /*  not(holds_at(on(Physobj1, Physobj2), Time)) :-
       not(diff(Physobj1, Physobj2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1037).

 /*  [equals(Physobj1, Physobj2)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(on(Physobj1, Physobj2)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1037).
axiom(holds_at(neg(on(Physobj1, Physobj2)), Time),
    [equals(Physobj1, Physobj2)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1040
%; A state constraint says that if a physical object is
%; on another physical object, the second physical object
%; is not on the first physical object:
% [physobj1,physobj2,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1044
% HoldsAt(On(physobj1,physobj2),time) ->
% !HoldsAt(On(physobj2,physobj1),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1044).

 /*  holds_at(on(Physobj1, Physobj2), Time) ->
       holds_at(neg(on(Physobj2, Physobj1)), Time).
 */

 /*  holds_at(neg(on(Physobj2, Physobj1)), Time) :-
       holds_at(on(Physobj1, Physobj2), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1044).

 /*  [holds_at(on(Physobj1, Physobj2), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(on(Physobj2, Physobj1)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1044).
axiom(holds_at(neg(on(Physobj2, Physobj1)), Time),
    [holds_at(on(Physobj1, Physobj2), Time)]).

 /*  not(holds_at(on(Physobj1, Physobj2), Time)) :-
       not(holds_at(neg(on(Physobj2, Physobj1)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1044).

 /*  [holds_at(on(Physobj2, Physobj1), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(on(Physobj1, Physobj2)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1044).
axiom(holds_at(neg(on(Physobj1, Physobj2)), Time),
    [holds_at(on(Physobj2, Physobj1), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1047
%; An effect axiom states that if an agent places a physical
%; object on another physical object, the first
%; physical object will be on the second physical object:
% [agent,physobj1,physobj2,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1051
% Initiates(PlaceOn(agent,physobj1,physobj2),
%           On(physobj1,physobj2),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1051).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(placeOn(Agent, Physobj1, Physobj2),
                    on(Physobj1, Physobj2),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1051).
axiom(initiates(placeOn(Agent, Physobj1, Physobj2), on(Physobj1, Physobj2), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1054
%; An effect axiom states that if an agent places a physical
%; object on another physical object, the agent will
%; no longer be holding the first physical object:
% [agent,physobj1,physobj2,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1058
% Terminates(PlaceOn(agent,physobj1,physobj2),
%            Holding(agent,physobj1),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1058).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(placeOn(Agent, Physobj1, Physobj2),
                     holding(Agent, Physobj1),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1058).
axiom(terminates(placeOn(Agent, Physobj1, Physobj2), holding(Agent, Physobj1), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1061
%; A precondition axiom states that
%; for an agent to place a physical object on another
%; physical object,
%; the agent must be holding the first physical object
%; and there must be a location such that
%; the agent is at the location and
%; the second physical object is at the location:
%;[agent,physobj1,physobj2,time]
%;Happens(PlaceOn(agent,physobj1,physobj2),time) ->
%;HoldsAt(Holding(agent,physobj1),time) &
%;{location}
%; HoldsAt(At(agent,location),time) &
%; HoldsAt(At(physobj2,location),time).
%; An effect axiom states that
%; if an agent takes a physical object off of another
%; physical object, the first physical object
%; will no longer be on the second physical object:
% [agent,physobj1,physobj2,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1080
% Terminates(TakeOffOf(agent,physobj1,physobj2),
%            On(physobj1,physobj2),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1080).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(takeOffOf(Agent, Physobj1, Physobj2),
                     on(Physobj1, Physobj2),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1080).
axiom(terminates(takeOffOf(Agent, Physobj1, Physobj2), on(Physobj1, Physobj2), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1083
%; An effect axiom states that if an agent takes a physical
%; object off of another physical object,
%; the agent will be holding the first physical object:
% [agent,physobj1,physobj2,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1087
% Initiates(TakeOffOf(agent,physobj1,physobj2),
%           Holding(agent,physobj1),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1087).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(takeOffOf(Agent, Physobj1, Physobj2),
                    holding(Agent, Physobj1),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1087).
axiom(initiates(takeOffOf(Agent, Physobj1, Physobj2), holding(Agent, Physobj1), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1090
%; A precondition axiom states that
%; for an agent to take a physical object off of another
%; physical object,
%; the first physical object must be on the second physical object
%; and there must be a location such that
%; the agent is at the location and
%; the first physical object is at the location:
%; the second physical object is at the location:
% [agent,physobj1,physobj2,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1099
% Happens(TakeOffOf(agent,physobj1,physobj2),time) ->
% HoldsAt(On(physobj1,physobj2),time) &
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1101
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1099).
% {location}% 
%  HoldsAt(At(agent,location),time) &
%  HoldsAt(At(physobj1,location),time) &
%  HoldsAt(At(physobj2,location),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1104
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1102).

 /*  exists([Location],
    happens(takeOffOf(Agent, Physobj1, Physobj2), Time) ->
       holds_at(on(Physobj1, Physobj2), Time),
       holds_at(at(Agent, Location), Time),
       holds_at(at(Physobj1, Location), Time),
       holds_at(at(Physobj2, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1102).

 /*  not(happens(takeOffOf(Agent, Physobj1, Physobj2), Time)) :-
       (   not(holds_at(on(Physobj1, Physobj2), Time))
       ;   not(holds_at(at(Agent, Location), Time))
       ;   not(holds_at(at(Physobj1, Location), Time))
       ;   not(holds_at(at(Physobj2, Location), Time))
       ),
       some(Location,
            '$kolem_Fn_337'(Agent, Physobj1, Physobj2, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1102).

 /*  [(holds_at(neg(on(Physobj1, Physobj2)), Time);holds_at(neg(at(Agent, Location)), Time);holds_at(neg(at(Physobj1, Location)), Time);holds_at(neg(at(Physobj2, Location)), Time)), some(Location, '$kolem_Fn_337'(Agent, Physobj1, Physobj2, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(takeOffOf(Agent, Physobj1, Physobj2),
                      Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1102).
axiom(not(happens(takeOffOf(Agent, Physobj1, Physobj2), Time)),
   
    [  (holds_at(neg(on(Physobj1, Physobj2)), Time);holds_at(neg(at(Agent, Location)), Time);holds_at(neg(at(Physobj1, Location)), Time);holds_at(neg(at(Physobj2, Location)), Time)),
      some(Location,
           '$kolem_Fn_337'(Agent, Physobj1, Physobj2, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1102).

 /*  holds_at(on(Physobj1, Physobj2), Time) :-
       happens(takeOffOf(Agent, Physobj1, Physobj2), Time),
       some(Location,
            '$kolem_Fn_337'(Agent, Physobj1, Physobj2, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1102).

 /*  [happens(takeOffOf(Agent, Physobj1, Physobj2), Time), some(Location, '$kolem_Fn_337'(Agent, Physobj1, Physobj2, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(on(Physobj1, Physobj2), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1102).
axiom(holds_at(on(Physobj1, Physobj2), Time),
   
    [ happens(takeOffOf(Agent, Physobj1, Physobj2), Time),
      some(Location,
           '$kolem_Fn_337'(Agent, Physobj1, Physobj2, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1102).

 /*  holds_at(at(Agent, Location), Time) :-
       happens(takeOffOf(Agent, Physobj1, Physobj2), Time),
       some(Location,
            '$kolem_Fn_337'(Agent, Physobj1, Physobj2, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1102).

 /*  [happens(takeOffOf(Agent, Physobj1, Physobj2), Time), some(Location, '$kolem_Fn_337'(Agent, Physobj1, Physobj2, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(at(Agent, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1102).
axiom(holds_at(at(Agent, Location), Time),
   
    [ happens(takeOffOf(Agent, Physobj1, Physobj2), Time),
      some(Location,
           '$kolem_Fn_337'(Agent, Physobj1, Physobj2, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1102).

 /*  holds_at(at(Physobj1, Location), Time) :-
       happens(takeOffOf(Agent, Physobj1, Physobj2), Time),
       some(Location,
            '$kolem_Fn_337'(Agent, Physobj1, Physobj2, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1102).

 /*  [happens(takeOffOf(Agent, Physobj1, Physobj2), Time), some(Location, '$kolem_Fn_337'(Agent, Physobj1, Physobj2, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(at(Physobj1, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1102).
axiom(holds_at(at(Physobj1, Location), Time),
   
    [ happens(takeOffOf(Agent, Physobj1, Physobj2), Time),
      some(Location,
           '$kolem_Fn_337'(Agent, Physobj1, Physobj2, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1102).

 /*  holds_at(at(Physobj2, Location), Time) :-
       happens(takeOffOf(Agent, Physobj1, Physobj2), Time),
       some(Location,
            '$kolem_Fn_337'(Agent, Physobj1, Physobj2, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1102).

 /*  [happens(takeOffOf(Agent, Physobj1, Physobj2), Time), some(Location, '$kolem_Fn_337'(Agent, Physobj1, Physobj2, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(at(Physobj2, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1102).
axiom(holds_at(at(Physobj2, Location), Time),
   
    [ happens(takeOffOf(Agent, Physobj1, Physobj2), Time),
      some(Location,
           '$kolem_Fn_337'(Agent, Physobj1, Physobj2, Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1106
%; A releases axiom states that if an agent places a physical
%; object on another physical object,
%; the first physical object's location will be released
%; from inertia:
% [agent,physobj1,physobj2,location,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1111
% Releases(PlaceOn(agent,physobj1,physobj2),
%          At(physobj1,location),
%          time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1113
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1111).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          releases(placeOn(Agent, Physobj1, Physobj2),
                   at(Physobj1, Location),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1111).
axiom(releases(placeOn(Agent, Physobj1, Physobj2), at(Physobj1, Location), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1115
%; A state constraint says that if a physical object is on
%; another physical object and the second physical object is
%; at a location, the first physical object is also at the location:
% [physobj1,physobj2,location,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1119
% HoldsAt(On(physobj1,physobj2),time) &
% HoldsAt(At(physobj2,location),time) ->
% HoldsAt(At(physobj1,location),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1121
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1119).

 /*  holds_at(on(Physobj1, Physobj2), Time), holds_at(at(Physobj2, Location), Time) ->
       holds_at(at(Physobj1, Location), Time).
 */

 /*  holds_at(at(Physobj1, Location), Time) :-
       holds_at(on(Physobj1, Physobj2), Time),
       holds_at(at(Physobj2, Location), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1119).

 /*  [holds_at(on(Physobj1, Physobj2), Time), holds_at(at(Physobj2, Location), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(at(Physobj1, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1119).
axiom(holds_at(at(Physobj1, Location), Time),
   
    [ holds_at(on(Physobj1, Physobj2), Time),
      holds_at(at(Physobj2, Location), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1119).

 /*  not(holds_at(on(Physobj1, Physobj2), Time)) :-
       holds_at(at(Physobj2, Location), Time),
       not(holds_at(at(Physobj1, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1119).

 /*  [holds_at(at(Physobj2, Location), Time), holds_at(neg(at(Physobj1, Location)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(on(Physobj1, Physobj2)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1119).
axiom(holds_at(neg(on(Physobj1, Physobj2)), Time),
   
    [ holds_at(at(Physobj2, Location), Time),
      holds_at(neg(at(Physobj1, Location)), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1119).

 /*  not(holds_at(at(Physobj2, Location), Time)) :-
       holds_at(on(Physobj1, Physobj2), Time),
       not(holds_at(at(Physobj1, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1119).

 /*  [holds_at(on(Physobj1, Physobj2), Time), holds_at(neg(at(Physobj1, Location)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(at(Physobj2, Location)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1119).
axiom(holds_at(neg(at(Physobj2, Location)), Time),
   
    [ holds_at(on(Physobj1, Physobj2), Time),
      holds_at(neg(at(Physobj1, Location)), Time)
    ]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1123
% fluent Near(agent,object)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1123).
fluent(near(agent,object)).
==> mpred_prop(near(agent,object),fluent).
==> meta_argtypes(near(agent,object)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1124
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1125).
% event WalkFromTo(agent,object,object)
event(walkFromTo(agent,object,object)).
==> mpred_prop(walkFromTo(agent,object,object),event).
==> meta_argtypes(walkFromTo(agent,object,object)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1125
% event WalkFrom(agent,object)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1125).
event(walkFrom(agent,object)).
==> mpred_prop(walkFrom(agent,object),event).
==> meta_argtypes(walkFrom(agent,object)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1126
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1127).
% event RunFromTo(agent,object,object)
event(runFromTo(agent,object,object)).
==> mpred_prop(runFromTo(agent,object,object),event).
==> meta_argtypes(runFromTo(agent,object,object)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1128
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1129).
% [agent,object1,object2,time]
% Initiates(WalkFromTo(agent,object1,object2),
%           Near(agent,object2),
%           time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1131
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1129).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(walkFromTo(Agent, Object1, Object2),
                    near(Agent, Object2),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1129).
axiom(initiates(walkFromTo(Agent, Object1, Object2), near(Agent, Object2), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1133
% [agent,object1,object2,time]
% Terminates(WalkFromTo(agent,object1,object2),
%            Near(agent,object1),
%            time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1136
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1135).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(walkFromTo(Agent, Object1, Object2),
                     near(Agent, Object1),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1135).
axiom(terminates(walkFromTo(Agent, Object1, Object2), near(Agent, Object1), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1138
% [agent,object1,object2,time]
% Happens(WalkFromTo(agent,object1,object2),time) ->
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1140
% {location}% 
% HoldsAt(At(agent,location),time) &
% HoldsAt(At(object1,location),time) &
% HoldsAt(At(object2,location),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1143
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1140).

 /*  exists([Location],
    happens(walkFromTo(Agent, Object1, Object2), Time) ->
       holds_at(at(Agent, Location), Time),
       holds_at(at(Object1, Location), Time),
       holds_at(at(Object2, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1140).

 /*  not(happens(walkFromTo(Agent, Object1, Object2), Time)) :-
       (   not(holds_at(at(Agent, Location), Time))
       ;   not(holds_at(at(Object1, Location), Time))
       ;   not(holds_at(at(Object2, Location), Time))
       ),
       some(Location,
            '$kolem_Fn_338'(Agent, Object1, Object2, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1140).

 /*  [(holds_at(neg(at(Agent, Location)), Time);holds_at(neg(at(Object1, Location)), Time);holds_at(neg(at(Object2, Location)), Time)), some(Location, '$kolem_Fn_338'(Agent, Object1, Object2, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(walkFromTo(Agent, Object1, Object2),
                      Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1140).
axiom(not(happens(walkFromTo(Agent, Object1, Object2), Time)),
   
    [  (holds_at(neg(at(Agent, Location)), Time);holds_at(neg(at(Object1, Location)), Time);holds_at(neg(at(Object2, Location)), Time)),
      some(Location,
           '$kolem_Fn_338'(Agent, Object1, Object2, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1140).

 /*  holds_at(at(Agent, Location), Time) :-
       happens(walkFromTo(Agent, Object1, Object2), Time),
       some(Location,
            '$kolem_Fn_338'(Agent, Object1, Object2, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1140).

 /*  [happens(walkFromTo(Agent, Object1, Object2), Time), some(Location, '$kolem_Fn_338'(Agent, Object1, Object2, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(at(Agent, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1140).
axiom(holds_at(at(Agent, Location), Time),
   
    [ happens(walkFromTo(Agent, Object1, Object2), Time),
      some(Location,
           '$kolem_Fn_338'(Agent, Object1, Object2, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1140).

 /*  holds_at(at(Object1, Location), Time) :-
       happens(walkFromTo(Agent, Object1, Object2), Time),
       some(Location,
            '$kolem_Fn_338'(Agent, Object1, Object2, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1140).

 /*  [happens(walkFromTo(Agent, Object1, Object2), Time), some(Location, '$kolem_Fn_338'(Agent, Object1, Object2, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(at(Object1, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1140).
axiom(holds_at(at(Object1, Location), Time),
   
    [ happens(walkFromTo(Agent, Object1, Object2), Time),
      some(Location,
           '$kolem_Fn_338'(Agent, Object1, Object2, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1140).

 /*  holds_at(at(Object2, Location), Time) :-
       happens(walkFromTo(Agent, Object1, Object2), Time),
       some(Location,
            '$kolem_Fn_338'(Agent, Object1, Object2, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1140).

 /*  [happens(walkFromTo(Agent, Object1, Object2), Time), some(Location, '$kolem_Fn_338'(Agent, Object1, Object2, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(at(Object2, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1140).
axiom(holds_at(at(Object2, Location), Time),
   
    [ happens(walkFromTo(Agent, Object1, Object2), Time),
      some(Location,
           '$kolem_Fn_338'(Agent, Object1, Object2, Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1145
% [agent,object1,object2,time]
% Initiates(RunFromTo(agent,object1,object2),
%           Near(agent,object2),
%           time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1148
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1147).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(runFromTo(Agent, Object1, Object2),
                    near(Agent, Object2),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1147).
axiom(initiates(runFromTo(Agent, Object1, Object2), near(Agent, Object2), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1150
% [agent,object1,object2,time]
% Terminates(RunFromTo(agent,object1,object2),
%            Near(agent,object1),
%            time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1153
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1152).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(runFromTo(Agent, Object1, Object2),
                     near(Agent, Object1),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1152).
axiom(terminates(runFromTo(Agent, Object1, Object2), near(Agent, Object1), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1155
% [agent,object1,object2,time]
% Happens(RunFromTo(agent,object1,object2),time) ->
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1157
% {location}% 
% HoldsAt(At(agent,location),time) &
% HoldsAt(At(object1,location),time) &
% HoldsAt(At(object2,location),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1160
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1157).

 /*  exists([Location],
    happens(runFromTo(Agent, Object1, Object2), Time) ->
       holds_at(at(Agent, Location), Time),
       holds_at(at(Object1, Location), Time),
       holds_at(at(Object2, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1157).

 /*  not(happens(runFromTo(Agent, Object1, Object2), Time)) :-
       (   not(holds_at(at(Agent, Location), Time))
       ;   not(holds_at(at(Object1, Location), Time))
       ;   not(holds_at(at(Object2, Location), Time))
       ),
       some(Location,
            '$kolem_Fn_339'(Agent, Object1, Object2, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1157).

 /*  [(holds_at(neg(at(Agent, Location)), Time);holds_at(neg(at(Object1, Location)), Time);holds_at(neg(at(Object2, Location)), Time)), some(Location, '$kolem_Fn_339'(Agent, Object1, Object2, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(runFromTo(Agent, Object1, Object2),
                      Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1157).
axiom(not(happens(runFromTo(Agent, Object1, Object2), Time)),
   
    [  (holds_at(neg(at(Agent, Location)), Time);holds_at(neg(at(Object1, Location)), Time);holds_at(neg(at(Object2, Location)), Time)),
      some(Location,
           '$kolem_Fn_339'(Agent, Object1, Object2, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1157).

 /*  holds_at(at(Agent, Location), Time) :-
       happens(runFromTo(Agent, Object1, Object2), Time),
       some(Location,
            '$kolem_Fn_339'(Agent, Object1, Object2, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1157).

 /*  [happens(runFromTo(Agent, Object1, Object2), Time), some(Location, '$kolem_Fn_339'(Agent, Object1, Object2, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(at(Agent, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1157).
axiom(holds_at(at(Agent, Location), Time),
   
    [ happens(runFromTo(Agent, Object1, Object2), Time),
      some(Location,
           '$kolem_Fn_339'(Agent, Object1, Object2, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1157).

 /*  holds_at(at(Object1, Location), Time) :-
       happens(runFromTo(Agent, Object1, Object2), Time),
       some(Location,
            '$kolem_Fn_339'(Agent, Object1, Object2, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1157).

 /*  [happens(runFromTo(Agent, Object1, Object2), Time), some(Location, '$kolem_Fn_339'(Agent, Object1, Object2, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(at(Object1, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1157).
axiom(holds_at(at(Object1, Location), Time),
   
    [ happens(runFromTo(Agent, Object1, Object2), Time),
      some(Location,
           '$kolem_Fn_339'(Agent, Object1, Object2, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1157).

 /*  holds_at(at(Object2, Location), Time) :-
       happens(runFromTo(Agent, Object1, Object2), Time),
       some(Location,
            '$kolem_Fn_339'(Agent, Object1, Object2, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1157).

 /*  [happens(runFromTo(Agent, Object1, Object2), Time), some(Location, '$kolem_Fn_339'(Agent, Object1, Object2, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(at(Object2, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1157).
axiom(holds_at(at(Object2, Location), Time),
   
    [ happens(runFromTo(Agent, Object1, Object2), Time),
      some(Location,
           '$kolem_Fn_339'(Agent, Object1, Object2, Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1162
% [agent,object,time]
% Terminates(WalkFrom(agent,object),
%            Near(agent,object),
%            time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1165
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1164).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(walkFrom(Agent, Object),
                     near(Agent, Object),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1164).
axiom(terminates(walkFrom(Agent, Object), near(Agent, Object), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1167
% [agent,object,location,door,time]
% HoldsAt(Near(agent,object),time) &
% HoldsAt(At(agent,location),time) &
% HoldsAt(At(object,location),time) &
% Side1(door)=location &
% Happens(WalkThroughDoor12(agent,door),time) ->
% Happens(WalkFrom(agent,object),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1173
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1169).

 /*  holds_at(near(Agent, Object), Time), holds_at(at(Agent, Location), Time), holds_at(at(Object, Location), Time), equals(side1(Door), Location), happens(walkThroughDoor12(Agent, Door), Time) ->
       happens(walkFrom(Agent, Object), Time).
 */

 /*  happens(walkFrom(Agent, Object), Time) :-
       holds_at(near(Agent, Object), Time),
       holds_at(at(Agent, Location), Time),
       holds_at(at(Object, Location), Time),
       equals(side1(Door), Location),
       happens(walkThroughDoor12(Agent, Door), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1169).

 /*  [holds_at(near(Agent, Object), Time), holds_at(at(Agent, Location), Time), holds_at(at(Object, Location), Time), equals(side1(Door), Location), happens(walkThroughDoor12(Agent, Door), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(walkFrom(Agent, Object), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1169).
axiom(happens(walkFrom(Agent, Object), Time),
   
    [ holds_at(near(Agent, Object), Time),
      holds_at(at(Agent, Location), Time),
      holds_at(at(Object, Location), Time),
      equals(side1(Door), Location),
      happens(walkThroughDoor12(Agent, Door), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1169).

 /*  not(holds_at(near(Agent, Object), Time)) :-
       ( holds_at(at(Agent, Location), Time),
         holds_at(at(Object, Location), Time),
         equals(side1(Door), Location),
         happens(walkThroughDoor12(Agent, Door), Time)
       ),
       not(happens(walkFrom(Agent, Object), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1169).

 /*  [holds_at(at(Agent, Location), Time), holds_at(at(Object, Location), Time), equals(side1(Door), Location), happens(walkThroughDoor12(Agent, Door), Time), not(happens(walkFrom(Agent, Object), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(near(Agent, Object)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1169).
axiom(holds_at(neg(near(Agent, Object)), Time),
   
    [ holds_at(at(Agent, Location), Time),
      holds_at(at(Object, Location), Time),
      equals(side1(Door), Location),
      happens(walkThroughDoor12(Agent, Door), Time),
      not(happens(walkFrom(Agent, Object), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1169).

 /*  not(holds_at(at(Agent, Location), Time)) :-
       ( holds_at(at(Object, Location), Time),
         equals(side1(Door), Location),
         happens(walkThroughDoor12(Agent, Door), Time)
       ),
       holds_at(near(Agent, Object), Time),
       not(happens(walkFrom(Agent, Object), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1169).

 /*  [holds_at(at(Object, Location), Time), equals(side1(Door), Location), happens(walkThroughDoor12(Agent, Door), Time), holds_at(near(Agent, Object), Time), not(happens(walkFrom(Agent, Object), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(at(Agent, Location)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1169).
axiom(holds_at(neg(at(Agent, Location)), Time),
   
    [ holds_at(at(Object, Location), Time),
      equals(side1(Door), Location),
      happens(walkThroughDoor12(Agent, Door), Time),
      holds_at(near(Agent, Object), Time),
      not(happens(walkFrom(Agent, Object), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1169).

 /*  not(holds_at(at(Object, Location), Time)) :-
       ( equals(side1(Door), Location),
         happens(walkThroughDoor12(Agent, Door), Time)
       ),
       holds_at(at(Agent, Location), Time),
       holds_at(near(Agent, Object), Time),
       not(happens(walkFrom(Agent, Object), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1169).

 /*  [equals(side1(Door), Location), happens(walkThroughDoor12(Agent, Door), Time), holds_at(at(Agent, Location), Time), holds_at(near(Agent, Object), Time), not(happens(walkFrom(Agent, Object), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(at(Object, Location)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1169).
axiom(holds_at(neg(at(Object, Location)), Time),
   
    [ equals(side1(Door), Location),
      happens(walkThroughDoor12(Agent, Door), Time),
      holds_at(at(Agent, Location), Time),
      holds_at(near(Agent, Object), Time),
      not(happens(walkFrom(Agent, Object), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1169).

 /*  not(happens(walkThroughDoor12(Agent, Door), Time)) :-
       equals(side1(Door), Location),
       holds_at(at(Object, Location), Time),
       holds_at(at(Agent, Location), Time),
       holds_at(near(Agent, Object), Time),
       not(happens(walkFrom(Agent, Object), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1169).

 /*  [equals(side1(Door), Location), holds_at(at(Object, Location), Time), holds_at(at(Agent, Location), Time), holds_at(near(Agent, Object), Time), not(happens(walkFrom(Agent, Object), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(walkThroughDoor12(Agent, Door), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1169).
axiom(not(happens(walkThroughDoor12(Agent, Door), Time)),
   
    [ equals(side1(Door), Location),
      holds_at(at(Object, Location), Time),
      holds_at(at(Agent, Location), Time),
      holds_at(near(Agent, Object), Time),
      not(happens(walkFrom(Agent, Object), Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1175
% [agent,object,location,door,time]
% HoldsAt(Near(agent,object),time) &
% HoldsAt(At(agent,location),time) &
% HoldsAt(At(object,location),time) &
% Side2(door)=location &
% Happens(WalkThroughDoor21(agent,door),time) ->
% Happens(WalkFrom(agent,object),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1181
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1177).

 /*  holds_at(near(Agent, Object), Time), holds_at(at(Agent, Location), Time), holds_at(at(Object, Location), Time), equals(side2(Door), Location), happens(walkThroughDoor21(Agent, Door), Time) ->
       happens(walkFrom(Agent, Object), Time).
 */

 /*  happens(walkFrom(Agent, Object), Time) :-
       holds_at(near(Agent, Object), Time),
       holds_at(at(Agent, Location), Time),
       holds_at(at(Object, Location), Time),
       equals(side2(Door), Location),
       happens(walkThroughDoor21(Agent, Door), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1177).

 /*  [holds_at(near(Agent, Object), Time), holds_at(at(Agent, Location), Time), holds_at(at(Object, Location), Time), equals(side2(Door), Location), happens(walkThroughDoor21(Agent, Door), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(walkFrom(Agent, Object), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1177).
axiom(happens(walkFrom(Agent, Object), Time),
   
    [ holds_at(near(Agent, Object), Time),
      holds_at(at(Agent, Location), Time),
      holds_at(at(Object, Location), Time),
      equals(side2(Door), Location),
      happens(walkThroughDoor21(Agent, Door), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1177).

 /*  not(holds_at(near(Agent, Object), Time)) :-
       ( holds_at(at(Agent, Location), Time),
         holds_at(at(Object, Location), Time),
         equals(side2(Door), Location),
         happens(walkThroughDoor21(Agent, Door), Time)
       ),
       not(happens(walkFrom(Agent, Object), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1177).

 /*  [holds_at(at(Agent, Location), Time), holds_at(at(Object, Location), Time), equals(side2(Door), Location), happens(walkThroughDoor21(Agent, Door), Time), not(happens(walkFrom(Agent, Object), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(near(Agent, Object)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1177).
axiom(holds_at(neg(near(Agent, Object)), Time),
   
    [ holds_at(at(Agent, Location), Time),
      holds_at(at(Object, Location), Time),
      equals(side2(Door), Location),
      happens(walkThroughDoor21(Agent, Door), Time),
      not(happens(walkFrom(Agent, Object), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1177).

 /*  not(holds_at(at(Agent, Location), Time)) :-
       ( holds_at(at(Object, Location), Time),
         equals(side2(Door), Location),
         happens(walkThroughDoor21(Agent, Door), Time)
       ),
       holds_at(near(Agent, Object), Time),
       not(happens(walkFrom(Agent, Object), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1177).

 /*  [holds_at(at(Object, Location), Time), equals(side2(Door), Location), happens(walkThroughDoor21(Agent, Door), Time), holds_at(near(Agent, Object), Time), not(happens(walkFrom(Agent, Object), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(at(Agent, Location)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1177).
axiom(holds_at(neg(at(Agent, Location)), Time),
   
    [ holds_at(at(Object, Location), Time),
      equals(side2(Door), Location),
      happens(walkThroughDoor21(Agent, Door), Time),
      holds_at(near(Agent, Object), Time),
      not(happens(walkFrom(Agent, Object), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1177).

 /*  not(holds_at(at(Object, Location), Time)) :-
       ( equals(side2(Door), Location),
         happens(walkThroughDoor21(Agent, Door), Time)
       ),
       holds_at(at(Agent, Location), Time),
       holds_at(near(Agent, Object), Time),
       not(happens(walkFrom(Agent, Object), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1177).

 /*  [equals(side2(Door), Location), happens(walkThroughDoor21(Agent, Door), Time), holds_at(at(Agent, Location), Time), holds_at(near(Agent, Object), Time), not(happens(walkFrom(Agent, Object), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(at(Object, Location)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1177).
axiom(holds_at(neg(at(Object, Location)), Time),
   
    [ equals(side2(Door), Location),
      happens(walkThroughDoor21(Agent, Door), Time),
      holds_at(at(Agent, Location), Time),
      holds_at(near(Agent, Object), Time),
      not(happens(walkFrom(Agent, Object), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1177).

 /*  not(happens(walkThroughDoor21(Agent, Door), Time)) :-
       equals(side2(Door), Location),
       holds_at(at(Object, Location), Time),
       holds_at(at(Agent, Location), Time),
       holds_at(near(Agent, Object), Time),
       not(happens(walkFrom(Agent, Object), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1177).

 /*  [equals(side2(Door), Location), holds_at(at(Object, Location), Time), holds_at(at(Agent, Location), Time), holds_at(near(Agent, Object), Time), not(happens(walkFrom(Agent, Object), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(walkThroughDoor21(Agent, Door), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1177).
axiom(not(happens(walkThroughDoor21(Agent, Door), Time)),
   
    [ equals(side2(Door), Location),
      holds_at(at(Object, Location), Time),
      holds_at(at(Agent, Location), Time),
      holds_at(near(Agent, Object), Time),
      not(happens(walkFrom(Agent, Object), Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1183
% [agent,object,room,staircase,time]
% HoldsAt(Near(agent,object),time) &
% HoldsAt(At(agent,room),time) &
% HoldsAt(At(object,room),time) &
% Side1(staircase)=room &
% Happens(WalkUpStaircase(agent,staircase),time) ->
% Happens(WalkFrom(agent,object),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1189
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1185).

 /*  holds_at(near(Agent, Object), Time), holds_at(at(Agent, Room), Time), holds_at(at(Object, Room), Time), equals(side1(Staircase), Room), happens(walkUpStaircase(Agent, Staircase), Time) ->
       happens(walkFrom(Agent, Object), Time).
 */

 /*  happens(walkFrom(Agent, Object), Time) :-
       holds_at(near(Agent, Object), Time),
       holds_at(at(Agent, Room), Time),
       holds_at(at(Object, Room), Time),
       equals(side1(Staircase), Room),
       happens(walkUpStaircase(Agent, Staircase), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1185).

 /*  [holds_at(near(Agent, Object), Time), holds_at(at(Agent, Room), Time), holds_at(at(Object, Room), Time), equals(side1(Staircase), Room), happens(walkUpStaircase(Agent, Staircase), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(walkFrom(Agent, Object), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1185).
axiom(happens(walkFrom(Agent, Object), Time),
   
    [ holds_at(near(Agent, Object), Time),
      holds_at(at(Agent, Room), Time),
      holds_at(at(Object, Room), Time),
      equals(side1(Staircase), Room),
      happens(walkUpStaircase(Agent, Staircase), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1185).

 /*  not(holds_at(near(Agent, Object), Time)) :-
       ( holds_at(at(Agent, Room), Time),
         holds_at(at(Object, Room), Time),
         equals(side1(Staircase), Room),
         happens(walkUpStaircase(Agent, Staircase), Time)
       ),
       not(happens(walkFrom(Agent, Object), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1185).

 /*  [holds_at(at(Agent, Room), Time), holds_at(at(Object, Room), Time), equals(side1(Staircase), Room), happens(walkUpStaircase(Agent, Staircase), Time), not(happens(walkFrom(Agent, Object), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(near(Agent, Object)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1185).
axiom(holds_at(neg(near(Agent, Object)), Time),
   
    [ holds_at(at(Agent, Room), Time),
      holds_at(at(Object, Room), Time),
      equals(side1(Staircase), Room),
      happens(walkUpStaircase(Agent, Staircase), Time),
      not(happens(walkFrom(Agent, Object), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1185).

 /*  not(holds_at(at(Agent, Room), Time)) :-
       ( holds_at(at(Object, Room), Time),
         equals(side1(Staircase), Room),
         happens(walkUpStaircase(Agent, Staircase), Time)
       ),
       holds_at(near(Agent, Object), Time),
       not(happens(walkFrom(Agent, Object), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1185).

 /*  [holds_at(at(Object, Room), Time), equals(side1(Staircase), Room), happens(walkUpStaircase(Agent, Staircase), Time), holds_at(near(Agent, Object), Time), not(happens(walkFrom(Agent, Object), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(at(Agent, Room)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1185).
axiom(holds_at(neg(at(Agent, Room)), Time),
   
    [ holds_at(at(Object, Room), Time),
      equals(side1(Staircase), Room),
      happens(walkUpStaircase(Agent, Staircase), Time),
      holds_at(near(Agent, Object), Time),
      not(happens(walkFrom(Agent, Object), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1185).

 /*  not(holds_at(at(Object, Room), Time)) :-
       ( equals(side1(Staircase), Room),
         happens(walkUpStaircase(Agent, Staircase), Time)
       ),
       holds_at(at(Agent, Room), Time),
       holds_at(near(Agent, Object), Time),
       not(happens(walkFrom(Agent, Object), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1185).

 /*  [equals(side1(Staircase), Room), happens(walkUpStaircase(Agent, Staircase), Time), holds_at(at(Agent, Room), Time), holds_at(near(Agent, Object), Time), not(happens(walkFrom(Agent, Object), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(at(Object, Room)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1185).
axiom(holds_at(neg(at(Object, Room)), Time),
   
    [ equals(side1(Staircase), Room),
      happens(walkUpStaircase(Agent, Staircase), Time),
      holds_at(at(Agent, Room), Time),
      holds_at(near(Agent, Object), Time),
      not(happens(walkFrom(Agent, Object), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1185).

 /*  not(happens(walkUpStaircase(Agent, Staircase), Time)) :-
       equals(side1(Staircase), Room),
       holds_at(at(Object, Room), Time),
       holds_at(at(Agent, Room), Time),
       holds_at(near(Agent, Object), Time),
       not(happens(walkFrom(Agent, Object), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1185).

 /*  [equals(side1(Staircase), Room), holds_at(at(Object, Room), Time), holds_at(at(Agent, Room), Time), holds_at(near(Agent, Object), Time), not(happens(walkFrom(Agent, Object), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(walkUpStaircase(Agent, Staircase), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1185).
axiom(not(happens(walkUpStaircase(Agent, Staircase), Time)),
   
    [ equals(side1(Staircase), Room),
      holds_at(at(Object, Room), Time),
      holds_at(at(Agent, Room), Time),
      holds_at(near(Agent, Object), Time),
      not(happens(walkFrom(Agent, Object), Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1191
% [agent,object,room,staircase,time]
% HoldsAt(Near(agent,object),time) &
% HoldsAt(At(agent,room),time) &
% HoldsAt(At(object,room),time) &
% Side2(staircase)=room &
% Happens(WalkDownStaircase(agent,staircase),time) ->
% Happens(WalkFrom(agent,object),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1197
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1193).

 /*  holds_at(near(Agent, Object), Time), holds_at(at(Agent, Room), Time), holds_at(at(Object, Room), Time), equals(side2(Staircase), Room), happens(walkDownStaircase(Agent, Staircase), Time) ->
       happens(walkFrom(Agent, Object), Time).
 */

 /*  happens(walkFrom(Agent, Object), Time) :-
       holds_at(near(Agent, Object), Time),
       holds_at(at(Agent, Room), Time),
       holds_at(at(Object, Room), Time),
       equals(side2(Staircase), Room),
       happens(walkDownStaircase(Agent, Staircase), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1193).

 /*  [holds_at(near(Agent, Object), Time), holds_at(at(Agent, Room), Time), holds_at(at(Object, Room), Time), equals(side2(Staircase), Room), happens(walkDownStaircase(Agent, Staircase), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(walkFrom(Agent, Object), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1193).
axiom(happens(walkFrom(Agent, Object), Time),
   
    [ holds_at(near(Agent, Object), Time),
      holds_at(at(Agent, Room), Time),
      holds_at(at(Object, Room), Time),
      equals(side2(Staircase), Room),
      happens(walkDownStaircase(Agent, Staircase), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1193).

 /*  not(holds_at(near(Agent, Object), Time)) :-
       ( holds_at(at(Agent, Room), Time),
         holds_at(at(Object, Room), Time),
         equals(side2(Staircase), Room),
         happens(walkDownStaircase(Agent, Staircase), Time)
       ),
       not(happens(walkFrom(Agent, Object), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1193).

 /*  [holds_at(at(Agent, Room), Time), holds_at(at(Object, Room), Time), equals(side2(Staircase), Room), happens(walkDownStaircase(Agent, Staircase), Time), not(happens(walkFrom(Agent, Object), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(near(Agent, Object)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1193).
axiom(holds_at(neg(near(Agent, Object)), Time),
   
    [ holds_at(at(Agent, Room), Time),
      holds_at(at(Object, Room), Time),
      equals(side2(Staircase), Room),
      happens(walkDownStaircase(Agent, Staircase), Time),
      not(happens(walkFrom(Agent, Object), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1193).

 /*  not(holds_at(at(Agent, Room), Time)) :-
       ( holds_at(at(Object, Room), Time),
         equals(side2(Staircase), Room),
         happens(walkDownStaircase(Agent, Staircase), Time)
       ),
       holds_at(near(Agent, Object), Time),
       not(happens(walkFrom(Agent, Object), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1193).

 /*  [holds_at(at(Object, Room), Time), equals(side2(Staircase), Room), happens(walkDownStaircase(Agent, Staircase), Time), holds_at(near(Agent, Object), Time), not(happens(walkFrom(Agent, Object), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(at(Agent, Room)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1193).
axiom(holds_at(neg(at(Agent, Room)), Time),
   
    [ holds_at(at(Object, Room), Time),
      equals(side2(Staircase), Room),
      happens(walkDownStaircase(Agent, Staircase), Time),
      holds_at(near(Agent, Object), Time),
      not(happens(walkFrom(Agent, Object), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1193).

 /*  not(holds_at(at(Object, Room), Time)) :-
       ( equals(side2(Staircase), Room),
         happens(walkDownStaircase(Agent, Staircase), Time)
       ),
       holds_at(at(Agent, Room), Time),
       holds_at(near(Agent, Object), Time),
       not(happens(walkFrom(Agent, Object), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1193).

 /*  [equals(side2(Staircase), Room), happens(walkDownStaircase(Agent, Staircase), Time), holds_at(at(Agent, Room), Time), holds_at(near(Agent, Object), Time), not(happens(walkFrom(Agent, Object), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(at(Object, Room)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1193).
axiom(holds_at(neg(at(Object, Room)), Time),
   
    [ equals(side2(Staircase), Room),
      happens(walkDownStaircase(Agent, Staircase), Time),
      holds_at(at(Agent, Room), Time),
      holds_at(near(Agent, Object), Time),
      not(happens(walkFrom(Agent, Object), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1193).

 /*  not(happens(walkDownStaircase(Agent, Staircase), Time)) :-
       equals(side2(Staircase), Room),
       holds_at(at(Object, Room), Time),
       holds_at(at(Agent, Room), Time),
       holds_at(near(Agent, Object), Time),
       not(happens(walkFrom(Agent, Object), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1193).

 /*  [equals(side2(Staircase), Room), holds_at(at(Object, Room), Time), holds_at(at(Agent, Room), Time), holds_at(near(Agent, Object), Time), not(happens(walkFrom(Agent, Object), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(walkDownStaircase(Agent, Staircase), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1193).
axiom(not(happens(walkDownStaircase(Agent, Staircase), Time)),
   
    [ equals(side2(Staircase), Room),
      holds_at(at(Object, Room), Time),
      holds_at(at(Agent, Room), Time),
      holds_at(near(Agent, Object), Time),
      not(happens(walkFrom(Agent, Object), Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1199
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: ecnet/OMSpace.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; OMSpace: object-scale metric space
%;
%; The OMSpace representation deals with metric space at
%; the scale of objects.
%;
%; @article{Morgenstern:2001,
%;   author = "Morgenstern, Leora",
%;   year = "2001",
%;   title = "Mid-sized axiomatizations of commonsense problems: A case study in egg cracking",
%;   journal = "Studia Logica",
%;   volume = "67",
%;   pages = "333--384",
%; }
%;
%; @article{Shanahan:2003,
%;   author = "Shanahan, Murray",
%;   year = "2004",
%;   title = "An attempt to formalise a non-trivial benchmark problem in common sense reasoning",
%;   journal = "Artificial Intelligence",
%;   volume = "153",
%;   pages = "141--165",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1241
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1242).
% sort height: integer
==> subsort(height,integer).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1242
% sort distance: integer
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1242).
==> subsort(distance,integer).
%; Height
%; The height of object is height.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1247
% fluent Height(object,height)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1247).
fluent(height(object,height)).
==> mpred_prop(height(object,height),fluent).
==> meta_argtypes(height(object,height)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1249
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1250).
%; State constraint represent the fact that each
%; object has a unique height:
% [object,height1,height2,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1252
% HoldsAt(Height(object,height1),time) &
% HoldsAt(Height(object,height2),time) ->
% height1=height2.
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1254
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1252).

 /*  holds_at(height(Object, Height1), Time), holds_at(height(Object, Height2), Time) ->
       equals(Height1, Height2).
 */

 /*  not(holds_at(height(Object, Height1), Time)) :-
       holds_at(height(Object, Height2), Time),
       not(equals(Height1, Height2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1252).

 /*  [holds_at(height(Object, Height2), Time), not(equals(Height1, Height2))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(height(Object, Height1)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1252).
axiom(holds_at(neg(height(Object, Height1)), Time),
   
    [ holds_at(height(Object, Height2), Time),
      not(equals(Height1, Height2))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1252).

 /*  not(holds_at(height(Object, Height2), Time)) :-
       holds_at(height(Object, Height1), Time),
       not(equals(Height1, Height2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1252).

 /*  [holds_at(height(Object, Height1), Time), not(equals(Height1, Height2))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(height(Object, Height2)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1252).
axiom(holds_at(neg(height(Object, Height2)), Time),
   
    [ holds_at(height(Object, Height1), Time),
      not(equals(Height2, Height1))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1256
% [object,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1257
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1258).
% {height}% HoldsAt(Height(object,height),time).

 /*  exists([Height],
    holds_at(height(Object,Height),Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1258).

 /*  holds_at(height(Object, Height), Time) :-
       some(Height, '$kolem_Fn_340'(Object, Time)).
 */

 /*  [some(Height, '$kolem_Fn_340'(Object, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(height(Object, Height), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1258).
axiom(holds_at(height(Object, Height), Time),
    [some(Height, '$kolem_Fn_340'(Object, Time))]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1260
%; falling
%; physobj1 is falling from physobj2 to physobj3.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1263
% fluent FallingFromTo(physobj,physobj,physobj)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1263).
fluent(fallingFromTo(physobj,physobj,physobj)).
==> mpred_prop(fallingFromTo(physobj,physobj,physobj),fluent).
==> meta_argtypes(fallingFromTo(physobj,physobj,physobj)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1264
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1263).
%; physobj1 starts falling from physobj2 to physobj3.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1265
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1266).
% event StartFallingFromTo(physobj,physobj,physobj)
event(startFallingFromTo(physobj,physobj,physobj)).
==> mpred_prop(startFallingFromTo(physobj,physobj,physobj),event).
==> meta_argtypes(startFallingFromTo(physobj,physobj,physobj)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1266
%; physobj1 collides with physobj2.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1267
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1268).
% event CollideWith(physobj,physobj)
event(collideWith(physobj,physobj)).
==> mpred_prop(collideWith(physobj,physobj),event).
==> meta_argtypes(collideWith(physobj,physobj)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1269
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1270).
%; An effect axiom states that if a first physical object starts
%; falling from a second physical object to a third physical
%; object, the first physical object will be falling from the
%; second physical object to the third physical object:
% [physobj1,physobj2,physobj3,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1274
% Initiates(StartFallingFromTo(physobj1,physobj2,physobj3),
%           FallingFromTo(physobj1,physobj2,physobj3),
%           time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1276
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1274).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(startFallingFromTo(Physobj1,
                                       Physobj2,
                                       Physobj3),
                    fallingFromTo(Physobj1, Physobj2, Physobj3),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1274).
axiom(initiates(startFallingFromTo(Physobj1, Physobj2, Physobj3), fallingFromTo(Physobj1, Physobj2, Physobj3), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1278
%; A precondition axiom states that for
%; a first physical object to start
%; falling from a second physical object to a third physical
%; object,
%; the height of the first physical object and the
%; second physical object must be the same.
% [physobj1,physobj2,physobj3,height1,height2,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1285
% Happens(StartFallingFromTo(physobj1,physobj2,physobj3),time) &
% HoldsAt(Height(physobj1,height1),time) &
% HoldsAt(Height(physobj2,height2),time) ->
% height1=height2.
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1288
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1285).

 /*  happens(startFallingFromTo(Physobj1, Physobj2, Physobj3), Time), holds_at(height(Physobj1, Height1), Time), holds_at(height(Physobj2, Height2), Time) ->
       equals(Height1, Height2).
 */

 /*  not(happens(startFallingFromTo(Physobj1, Physobj2, Physobj3), Time)) :-
       ( holds_at(height(Physobj1, Height1), Time),
         holds_at(height(Physobj2, Height2), Time)
       ),
       not(equals(Height1, Height2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1285).

 /*  [holds_at(height(Physobj1, Height1), Time), holds_at(height(Physobj2, Height2), Time), not(equals(Height1, Height2))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(startFallingFromTo(Physobj1,
                                         Physobj2,
                                         Physobj3),
                      Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1285).
axiom(not(happens(startFallingFromTo(Physobj1, Physobj2, Physobj3), Time)),
   
    [ holds_at(height(Physobj1, Height1), Time),
      holds_at(height(Physobj2, Height2), Time),
      not(equals(Height1, Height2))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1285).

 /*  not(holds_at(height(Physobj1, Height1), Time)) :-
       holds_at(height(Physobj2, Height2), Time),
       happens(startFallingFromTo(Physobj1, Physobj2, Physobj3),
               Time),
       not(equals(Height1, Height2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1285).

 /*  [holds_at(height(Physobj2, Height2), Time), happens(startFallingFromTo(Physobj1, Physobj2, Physobj3), Time), not(equals(Height1, Height2))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(height(Physobj1, Height1)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1285).
axiom(holds_at(neg(height(Physobj1, Height1)), Time),
   
    [ holds_at(height(Physobj2, Height2), Time),
      happens(startFallingFromTo(Physobj1, Physobj2, Physobj3),
              Time),
      not(equals(Height1, Height2))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1285).

 /*  not(holds_at(height(Physobj2, Height2), Time)) :-
       holds_at(height(Physobj1, Height1), Time),
       happens(startFallingFromTo(Physobj1, Physobj2, Physobj3),
               Time),
       not(equals(Height1, Height2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1285).

 /*  [holds_at(height(Physobj1, Height1), Time), happens(startFallingFromTo(Physobj1, Physobj2, Physobj3), Time), not(equals(Height1, Height2))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(height(Physobj2, Height2)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1285).
axiom(holds_at(neg(height(Physobj2, Height2)), Time),
   
    [ holds_at(height(Physobj1, Height1), Time),
      happens(startFallingFromTo(Physobj1, Physobj2, Physobj3),
              Time),
      not(equals(Height2, Height1))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1290
%; A state constraint says that a physical object
%; cannot fall from itself, cannot fall to itself,
%; and cannot fall from and to the same physical object:
% [physobj1,physobj2,physobj3,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1294
% HoldsAt(FallingFromTo(physobj1,physobj2,physobj3),time) ->
% physobj1!=physobj2 &
% physobj1!=physobj3 &
% physobj2!=physobj3.
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1297
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1294).

 /*  holds_at(fallingFromTo(Physobj1, Physobj2, Physobj3), Time) ->
       diff(Physobj1, Physobj2),
       diff(Physobj1, Physobj3),
       diff(Physobj2, Physobj3).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1294).

 /*  not(holds_at(fallingFromTo(Physobj1, Physobj2, Physobj3), Time)) :-
       (   not(diff(Physobj1, Physobj2))
       ;   not(diff(Physobj1, Physobj3))
       ;   not(diff(Physobj2, Physobj3))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1294).

 /*  [(equals(Physobj1, Physobj2);equals(Physobj1, Physobj3);equals(Physobj2, Physobj3))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(fallingFromTo(Physobj1,
                                     Physobj2,
                                     Physobj3)),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1294).
axiom(holds_at(neg(fallingFromTo(Physobj1, Physobj2, Physobj3)), Time),
   
    [  (equals(Physobj1, Physobj2);equals(Physobj1, Physobj3);equals(Physobj2, Physobj3))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1299
%; A state constraint says that the sky cannot fall:
% [sky,physobj1,physobj2,time]
% !HoldsAt(FallingFromTo(sky,physobj1,physobj2),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1301

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(fallingFromTo(Sky, Physobj1, Physobj2)),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1301).
axiom(holds_at(neg(fallingFromTo(Sky, Physobj1, Physobj2)), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1303
%; A releases axiom states that if
%; if a first physical object starts
%; falling from a second physical object to a third physical
%; object, the height of the first physical object
%; will be released from inertia:
% [physobj1,physobj2,physobj3,height,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1309
% Releases(StartFallingFromTo(physobj1,physobj2,physobj3),
%          Height(physobj1,height),
%          time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1311
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1309).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          releases(startFallingFromTo(Physobj1,
                                      Physobj2,
                                      Physobj3),
                   height(Physobj1, Height),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1309).
axiom(releases(startFallingFromTo(Physobj1, Physobj2, Physobj3), height(Physobj1, Height), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1313
%; A trajectory axiom states that
%; if a first physical object starts falling
%; from a second physical object
%; to a third physical object
%; at a time and
%; the first physical object has a height at the time,
%; then the first physical object will have a height
%; equal to the height minus an offset
%; at a time equal to the time plus the offset:
% [physobj1,physobj2,physobj3,height1,height2,offset,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1323
% HoldsAt(Height(physobj1,height1),time) &
% height2=height1-offset ->
% Trajectory(FallingFromTo(physobj1,physobj2,physobj3),time,
%            Height(physobj1,height2),offset).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1326
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1323).

 /*  holds_at(height(Physobj1, Height1), Time), equals(Height2, Height1-Offset) ->
       trajectory(fallingFromTo(Physobj1, Physobj2, Physobj3),
                  Time,
                  height(Physobj1, Height2),
                  Offset).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1323).

 /*  trajectory(fallingFromTo(Physobj1, Physobj2, Physobj3), Time, height(Physobj1, Height2), Offset) :-
       holds_at(height(Physobj1, Height1), Time),
       equals(Height2, Height1-Offset).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1323).

 /*  [holds_at(height(Physobj1, Height1), Time), equals(Height2, Height1-Offset)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          trajectory(fallingFromTo(Physobj1, Physobj2, Physobj3),
                     Time,
                     height(Physobj1, Height2),
                     Offset)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1323).
axiom(trajectory(fallingFromTo(Physobj1, Physobj2, Physobj3), Time, height(Physobj1, Height2), Offset),
   
    [ holds_at(height(Physobj1, Height1), Time),
      equals(Height2, Height1-Offset)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1323).

 /*  not(holds_at(height(Physobj1, Height1), Time)) :-
       equals(Height2, Height1-Offset),
       not(trajectory(fallingFromTo(Physobj1, Physobj2, Physobj3),
                      Time,
                      height(Physobj1, Height2),
                      Offset)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1323).

 /*  [equals(Height2, Height1-Offset), not(trajectory(fallingFromTo(Physobj1, Physobj2, Physobj3), Time, height(Physobj1, Height2), Offset))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(height(Physobj1, Height1)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1323).
axiom(holds_at(neg(height(Physobj1, Height1)), Time),
   
    [ equals(Height2, Height1-Offset),
      not(trajectory(fallingFromTo(Physobj1,
                                   Physobj2,
                                   Physobj3),
                     Time,
                     height(Physobj1, Height2),
                     Offset))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1328
%; A trigger axiom states that
%; if a first physical object is falling
%; from a second physical object
%; to a third physical object and
%; the height of the first physical object
%; is the same as the height of the third physical object,
%; the first physical object collides with the
%; third physical object:
% [physobj1,physobj2,physobj3,height,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1337
% HoldsAt(FallingFromTo(physobj1,physobj2,physobj3),time) &
% HoldsAt(Height(physobj1,height),time) &
% HoldsAt(Height(physobj3,height),time) ->
% Happens(CollideWith(physobj1,physobj3),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1340
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1337).

 /*  holds_at(fallingFromTo(Physobj1, Physobj2, Physobj3), Time), holds_at(height(Physobj1, Height), Time), holds_at(height(Physobj3, Height), Time) ->
       happens(collideWith(Physobj1, Physobj3), Time).
 */

 /*  happens(collideWith(Physobj1, Physobj3), Time) :-
       holds_at(fallingFromTo(Physobj1, Physobj2, Physobj3),
                Time),
       holds_at(height(Physobj1, Height), Time),
       holds_at(height(Physobj3, Height), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1337).

 /*  [holds_at(fallingFromTo(Physobj1, Physobj2, Physobj3), Time), holds_at(height(Physobj1, Height), Time), holds_at(height(Physobj3, Height), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(collideWith(Physobj1, Physobj3), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1337).
axiom(happens(collideWith(Physobj1, Physobj3), Time),
   
    [ holds_at(fallingFromTo(Physobj1, Physobj2, Physobj3),
               Time),
      holds_at(height(Physobj1, Height), Time),
      holds_at(height(Physobj3, Height), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1337).

 /*  not(holds_at(fallingFromTo(Physobj1, Physobj2, Physobj3), Time)) :-
       ( holds_at(height(Physobj1, Height), Time),
         holds_at(height(Physobj3, Height), Time)
       ),
       not(happens(collideWith(Physobj1, Physobj3), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1337).

 /*  [holds_at(height(Physobj1, Height), Time), holds_at(height(Physobj3, Height), Time), not(happens(collideWith(Physobj1, Physobj3), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(fallingFromTo(Physobj1,
                                     Physobj2,
                                     Physobj3)),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1337).
axiom(holds_at(neg(fallingFromTo(Physobj1, Physobj2, Physobj3)), Time),
   
    [ holds_at(height(Physobj1, Height), Time),
      holds_at(height(Physobj3, Height), Time),
      not(happens(collideWith(Physobj1, Physobj3), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1337).

 /*  not(holds_at(height(Physobj1, Height), Time)) :-
       holds_at(height(Physobj3, Height), Time),
       holds_at(fallingFromTo(Physobj1, Physobj2, Physobj3),
                Time),
       not(happens(collideWith(Physobj1, Physobj3), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1337).

 /*  [holds_at(height(Physobj3, Height), Time), holds_at(fallingFromTo(Physobj1, Physobj2, Physobj3), Time), not(happens(collideWith(Physobj1, Physobj3), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(height(Physobj1, Height)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1337).
axiom(holds_at(neg(height(Physobj1, Height)), Time),
   
    [ holds_at(height(Physobj3, Height), Time),
      holds_at(fallingFromTo(Physobj1, Physobj2, Physobj3),
               Time),
      not(happens(collideWith(Physobj1, Physobj3), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1337).

 /*  not(holds_at(height(Physobj3, Height), Time)) :-
       holds_at(height(Physobj1, Height), Time),
       holds_at(fallingFromTo(Physobj1, Physobj2, Physobj3),
                Time),
       not(happens(collideWith(Physobj1, Physobj3), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1337).

 /*  [holds_at(height(Physobj1, Height), Time), holds_at(fallingFromTo(Physobj1, Physobj2, Physobj3), Time), not(happens(collideWith(Physobj1, Physobj3), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(height(Physobj3, Height)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1337).
axiom(holds_at(neg(height(Physobj3, Height)), Time),
   
    [ holds_at(height(Physobj1, Height), Time),
      holds_at(fallingFromTo(Physobj1, Physobj2, Physobj3),
               Time),
      not(happens(collideWith(Physobj1, Physobj3), Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1342
%; An effect axiom states that
%; if a first physical object is falling
%; from a second physical object
%; to a third physical object and
%; the first physical object collides with
%; the third physical object,
%; the first physical object will be on the third physical object:
% [physobj1,physobj2,physobj3,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1350
% HoldsAt(FallingFromTo(physobj1,physobj2,physobj3),time) ->
% Initiates(CollideWith(physobj1,physobj3),
%           On(physobj1,physobj3),
%           time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1353
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1350).

 /*  [holds_at(fallingFromTo(Physobj1, Physobj2, Physobj3), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(collideWith(Physobj1, Physobj3),
                    on(Physobj1, Physobj3),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1350).
axiom(initiates(collideWith(Physobj1, Physobj3), on(Physobj1, Physobj3), Time),
   
    [ holds_at(fallingFromTo(Physobj1, Physobj2, Physobj3),
               Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1355
%; An effect axiom states that
%; if a physical object collides with another
%; physical object,
%; the height of the first physical object will
%; be the height of the second physical object:
% [physobj1,physobj2,height,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1361
% HoldsAt(Height(physobj2,height),time) ->
% Initiates(CollideWith(physobj1,physobj2),
%           Height(physobj1,height),
%           time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1364
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1361).

 /*  [holds_at(height(Physobj2, Height), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(collideWith(Physobj1, Physobj2),
                    height(Physobj1, Height),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1361).
axiom(initiates(collideWith(Physobj1, Physobj2), height(Physobj1, Height), Time),
    [holds_at(height(Physobj2, Height), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1366
%;[physobj1,physobj2,height1,height2,time]
%;HoldsAt(Height(physobj2,height1),time) &
%;height1 != height2 ->
%;Terminates(CollideWith(physobj1,physobj2),
%;           Height(physobj1,height2),
%;           time).
%; An effect axiom states that
%; if a first physical object is falling
%; from a second physical object
%; to a third physical object and
%; the first physical object collides with
%; the third physical object,
%; the first physical object will no longer be
%; falling from the second physical object to the
%; third physical object:
% [physobj1,physobj2,physobj3,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1383
% HoldsAt(FallingFromTo(physobj1,physobj2,physobj3),time) ->
% Terminates(CollideWith(physobj1,physobj3),
%            FallingFromTo(physobj1,physobj2,physobj3),
%            time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1386
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1383).

 /*  [holds_at(fallingFromTo(Physobj1, Physobj2, Physobj3), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(collideWith(Physobj1, Physobj3),
                     fallingFromTo(Physobj1, Physobj2, Physobj3),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1383).
axiom(terminates(collideWith(Physobj1, Physobj3), fallingFromTo(Physobj1, Physobj2, Physobj3), Time),
   
    [ holds_at(fallingFromTo(Physobj1, Physobj2, Physobj3),
               Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1388
%; flying
%; agent is flying from physobj1 to physobj2.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1391
% fluent FlyingFromTo(agent,physobj,physobj)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1391).
fluent(flyingFromTo(agent,physobj,physobj)).
==> mpred_prop(flyingFromTo(agent,physobj,physobj),fluent).
==> meta_argtypes(flyingFromTo(agent,physobj,physobj)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1392
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1391).
%; agent starts flying from physobj1 to physobj2.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1393
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1394).
% event StartFlyingFromTo(agent,physobj,physobj)
event(startFlyingFromTo(agent,physobj,physobj)).
==> mpred_prop(startFlyingFromTo(agent,physobj,physobj),event).
==> meta_argtypes(startFlyingFromTo(agent,physobj,physobj)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1394
%; agent reaches physobj.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1395
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1396).
% event Reach(agent,physobj)
event(reach(agent,physobj)).
==> mpred_prop(reach(agent,physobj),event).
==> meta_argtypes(reach(agent,physobj)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1397
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1398).
%; An effect axiom states that if an agent starts
%; flying from a physical object to another physical object,
%; the agent will be flying from the first physical object
%; to the second physical object:
% [agent,physobj1,physobj2,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1402
% Initiates(StartFlyingFromTo(agent,physobj1,physobj2),
%           FlyingFromTo(agent,physobj1,physobj2),
%           time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1404
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1402).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(startFlyingFromTo(Agent, Physobj1, Physobj2),
                    flyingFromTo(Agent, Physobj1, Physobj2),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1402).
axiom(initiates(startFlyingFromTo(Agent, Physobj1, Physobj2), flyingFromTo(Agent, Physobj1, Physobj2), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1406
%; A precondition axiom states that for
%; an agent to start flying from a physical object to
%; another physical object,
%; the height of the agent and
%; the first physical object must be the same:
% [agent,physobj1,physobj2,height1,height2,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1412
% Happens(StartFlyingFromTo(agent,physobj1,physobj2),time) &
% HoldsAt(Height(agent,height1),time) &
% HoldsAt(Height(physobj1,height2),time) ->
% height1=height2.
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1415
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1412).

 /*  happens(startFlyingFromTo(Agent, Physobj1, Physobj2), Time), holds_at(height(Agent, Height1), Time), holds_at(height(Physobj1, Height2), Time) ->
       equals(Height1, Height2).
 */

 /*  not(happens(startFlyingFromTo(Agent, Physobj1, Physobj2), Time)) :-
       ( holds_at(height(Agent, Height1), Time),
         holds_at(height(Physobj1, Height2), Time)
       ),
       not(equals(Height1, Height2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1412).

 /*  [holds_at(height(Agent, Height1), Time), holds_at(height(Physobj1, Height2), Time), not(equals(Height1, Height2))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(startFlyingFromTo(Agent,
                                        Physobj1,
                                        Physobj2),
                      Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1412).
axiom(not(happens(startFlyingFromTo(Agent, Physobj1, Physobj2), Time)),
   
    [ holds_at(height(Agent, Height1), Time),
      holds_at(height(Physobj1, Height2), Time),
      not(equals(Height1, Height2))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1412).

 /*  not(holds_at(height(Agent, Height1), Time)) :-
       holds_at(height(Physobj1, Height2), Time),
       happens(startFlyingFromTo(Agent, Physobj1, Physobj2),
               Time),
       not(equals(Height1, Height2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1412).

 /*  [holds_at(height(Physobj1, Height2), Time), happens(startFlyingFromTo(Agent, Physobj1, Physobj2), Time), not(equals(Height1, Height2))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(height(Agent, Height1)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1412).
axiom(holds_at(neg(height(Agent, Height1)), Time),
   
    [ holds_at(height(Physobj1, Height2), Time),
      happens(startFlyingFromTo(Agent, Physobj1, Physobj2),
              Time),
      not(equals(Height1, Height2))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1412).

 /*  not(holds_at(height(Physobj1, Height2), Time)) :-
       holds_at(height(Agent, Height1), Time),
       happens(startFlyingFromTo(Agent, Physobj1, Physobj2),
               Time),
       not(equals(Height1, Height2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1412).

 /*  [holds_at(height(Agent, Height1), Time), happens(startFlyingFromTo(Agent, Physobj1, Physobj2), Time), not(equals(Height1, Height2))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(height(Physobj1, Height2)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1412).
axiom(holds_at(neg(height(Physobj1, Height2)), Time),
   
    [ holds_at(height(Agent, Height1), Time),
      happens(startFlyingFromTo(Agent, Physobj1, Physobj2),
              Time),
      not(equals(Height2, Height1))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1417
%; A state constraint says that an agent
%; cannot fly from and to the same physical object:
% [agent,physobj1,physobj2,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1420
% HoldsAt(FlyingFromTo(agent,physobj1,physobj2),time) ->
% physobj1!=physobj2.
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1420).

 /*  holds_at(flyingFromTo(Agent, Physobj1, Physobj2), Time) ->
       diff(Physobj1, Physobj2).
 */

 /*  not(holds_at(flyingFromTo(Agent, Physobj1, Physobj2), Time)) :-
       not(diff(Physobj1, Physobj2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1420).

 /*  [equals(Physobj1, Physobj2)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(flyingFromTo(Agent, Physobj1, Physobj2)),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1420).
axiom(holds_at(neg(flyingFromTo(Agent, Physobj1, Physobj2)), Time),
    [equals(Physobj1, Physobj2)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1423
%; A releases axiom states that if an agent
%; starts flying from a physical object to another
%; physical object, the height of the agent will
%; be released from inertia:
% [agent,physobj1,physobj2,height,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1428
% Releases(StartFlyingFromTo(agent,physobj1,physobj2),
%          Height(agent,height),
%          time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1430
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1428).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          releases(startFlyingFromTo(Agent, Physobj1, Physobj2),
                   height(Agent, Height),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1428).
axiom(releases(startFlyingFromTo(Agent, Physobj1, Physobj2), height(Agent, Height), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1432
%; A trajectory axiom states that
%; if an agent starts flying from
%; from a physical object
%; to another physical object
%; at a time and
%; the agent has a height at the time,
%; then the agent will have a height
%; equal to the height plus an offset
%; at a time equal to the time plus the offset:
% [agent,physobj1,physobj2,height1,height2,offset,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1442
% HoldsAt(Height(agent,height1),time) &
% height2=height1+offset ->
% Trajectory(FlyingFromTo(agent,physobj1,physobj2),time,
%            Height(agent,height2),offset).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1445
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1442).

 /*  holds_at(height(Agent, Height1), Time), equals(Height2, Height1+Offset) ->
       trajectory(flyingFromTo(Agent, Physobj1, Physobj2),
                  Time,
                  height(Agent, Height2),
                  Offset).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1442).

 /*  trajectory(flyingFromTo(Agent, Physobj1, Physobj2), Time, height(Agent, Height2), Offset) :-
       holds_at(height(Agent, Height1), Time),
       equals(Height2, Height1+Offset).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1442).

 /*  [holds_at(height(Agent, Height1), Time), equals(Height2, Height1+Offset)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          trajectory(flyingFromTo(Agent, Physobj1, Physobj2),
                     Time,
                     height(Agent, Height2),
                     Offset)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1442).
axiom(trajectory(flyingFromTo(Agent, Physobj1, Physobj2), Time, height(Agent, Height2), Offset),
   
    [ holds_at(height(Agent, Height1), Time),
      equals(Height2, Height1+Offset)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1442).

 /*  not(holds_at(height(Agent, Height1), Time)) :-
       equals(Height2, Height1+Offset),
       not(trajectory(flyingFromTo(Agent, Physobj1, Physobj2),
                      Time,
                      height(Agent, Height2),
                      Offset)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1442).

 /*  [equals(Height2, Height1+Offset), not(trajectory(flyingFromTo(Agent, Physobj1, Physobj2), Time, height(Agent, Height2), Offset))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(height(Agent, Height1)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1442).
axiom(holds_at(neg(height(Agent, Height1)), Time),
   
    [ equals(Height2, Height1+Offset),
      not(trajectory(flyingFromTo(Agent, Physobj1, Physobj2),
                     Time,
                     height(Agent, Height2),
                     Offset))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1447
%; A trigger axiom states that
%; if an agent is flying
%; from a physical object
%; to another physical object and
%; the height of the agent
%; is the same as the height of the second physical object,
%; the agent reaches the second physical object:
% [agent,physobj1,physobj2,height,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1455
% HoldsAt(FlyingFromTo(agent,physobj1,physobj2),time) &
% HoldsAt(Height(agent,height),time) &
% HoldsAt(Height(physobj2,height),time) ->
% Happens(Reach(agent,physobj2),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1458
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1455).

 /*  holds_at(flyingFromTo(Agent, Physobj1, Physobj2), Time), holds_at(height(Agent, Height), Time), holds_at(height(Physobj2, Height), Time) ->
       happens(reach(Agent, Physobj2), Time).
 */

 /*  happens(reach(Agent, Physobj2), Time) :-
       holds_at(flyingFromTo(Agent, Physobj1, Physobj2),
                Time),
       holds_at(height(Agent, Height), Time),
       holds_at(height(Physobj2, Height), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1455).

 /*  [holds_at(flyingFromTo(Agent, Physobj1, Physobj2), Time), holds_at(height(Agent, Height), Time), holds_at(height(Physobj2, Height), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(reach(Agent, Physobj2), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1455).
axiom(happens(reach(Agent, Physobj2), Time),
   
    [ holds_at(flyingFromTo(Agent, Physobj1, Physobj2),
               Time),
      holds_at(height(Agent, Height), Time),
      holds_at(height(Physobj2, Height), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1455).

 /*  not(holds_at(flyingFromTo(Agent, Physobj1, Physobj2), Time)) :-
       ( holds_at(height(Agent, Height), Time),
         holds_at(height(Physobj2, Height), Time)
       ),
       not(happens(reach(Agent, Physobj2), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1455).

 /*  [holds_at(height(Agent, Height), Time), holds_at(height(Physobj2, Height), Time), not(happens(reach(Agent, Physobj2), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(flyingFromTo(Agent, Physobj1, Physobj2)),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1455).
axiom(holds_at(neg(flyingFromTo(Agent, Physobj1, Physobj2)), Time),
   
    [ holds_at(height(Agent, Height), Time),
      holds_at(height(Physobj2, Height), Time),
      not(happens(reach(Agent, Physobj2), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1455).

 /*  not(holds_at(height(Agent, Height), Time)) :-
       holds_at(height(Physobj2, Height), Time),
       holds_at(flyingFromTo(Agent, Physobj1, Physobj2),
                Time),
       not(happens(reach(Agent, Physobj2), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1455).

 /*  [holds_at(height(Physobj2, Height), Time), holds_at(flyingFromTo(Agent, Physobj1, Physobj2), Time), not(happens(reach(Agent, Physobj2), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(height(Agent, Height)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1455).
axiom(holds_at(neg(height(Agent, Height)), Time),
   
    [ holds_at(height(Physobj2, Height), Time),
      holds_at(flyingFromTo(Agent, Physobj1, Physobj2),
               Time),
      not(happens(reach(Agent, Physobj2), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1455).

 /*  not(holds_at(height(Physobj2, Height), Time)) :-
       holds_at(height(Agent, Height), Time),
       holds_at(flyingFromTo(Agent, Physobj1, Physobj2),
                Time),
       not(happens(reach(Agent, Physobj2), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1455).

 /*  [holds_at(height(Agent, Height), Time), holds_at(flyingFromTo(Agent, Physobj1, Physobj2), Time), not(happens(reach(Agent, Physobj2), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(height(Physobj2, Height)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1455).
axiom(holds_at(neg(height(Physobj2, Height)), Time),
   
    [ holds_at(height(Agent, Height), Time),
      holds_at(flyingFromTo(Agent, Physobj1, Physobj2),
               Time),
      not(happens(reach(Agent, Physobj2), Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1460
%; An effect axiom states that
%; if an agent reaches a physical object,
%; the height of the agent will be the
%; height of the physical object:
% [agent,physobj,height,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1465
% HoldsAt(Height(physobj,height),time) ->
% Initiates(Reach(agent,physobj),Height(agent,height),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1465).

 /*  [holds_at(height(Physobj, Height), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(reach(Agent, Physobj),
                    height(Agent, Height),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1465).
axiom(initiates(reach(Agent, Physobj), height(Agent, Height), Time),
    [holds_at(height(Physobj, Height), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1468
%;[agent,physobj,height1,height2,time]
%;HoldsAt(Height(physobj,height1),time) &
%;height1!=height2 ->
%;Terminates(Reach(agent,physobj),Height(agent,height2),time).
%; An effect axiom states that
%; if an agent is flying
%; from a physical object
%; to another physical object and
%; the agent reaches the second physical object,
%; the agent will no longer be
%; flying from the first physical object
%; to the second physical object:
% [agent,physobj1,physobj2,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1482
% HoldsAt(FlyingFromTo(agent,physobj1,physobj2),time) ->
% Terminates(Reach(agent,physobj2),
%            FlyingFromTo(agent,physobj1,physobj2),
%            time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1485
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1482).

 /*  [holds_at(flyingFromTo(Agent, Physobj1, Physobj2), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(reach(Agent, Physobj2),
                     flyingFromTo(Agent, Physobj1, Physobj2),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1482).
axiom(terminates(reach(Agent, Physobj2), flyingFromTo(Agent, Physobj1, Physobj2), Time),
   
    [ holds_at(flyingFromTo(Agent, Physobj1, Physobj2),
               Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1487
%; A releases axiom states that
%; if an agent holds a physical object,
%; the height of the physical object is released from inertia:
% [agent,physobj,height,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1491
% Releases(Hold(agent,physobj),Height(physobj,height),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1491).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          releases(hold(Agent, Physobj),
                   height(Physobj, Height),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1491).
axiom(releases(hold(Agent, Physobj), height(Physobj, Height), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1493
%;[agent,physobj,height1,height2,time]
%;(!{object} PartOf(physobj,object)) &
%;HoldsAt(Height(physobj,height1),time) &
%;height1 != height2 ->
%;Terminates(LetGoOf(agent,physobj),Height(physobj,height2),time).
% [agent,physobj,height,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1500
% (!{object} PartOf(physobj,object)) &
% HoldsAt(Height(physobj,height),time) ->
% Initiates(LetGoOf(agent,physobj),Height(physobj,height),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1502
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1500).

 /*  [not(partOf(Physobj, Object)), holds_at(height(Physobj, Height), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(letGoOf(Agent, Physobj),
                    height(Physobj, Height),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1500).
axiom(initiates(letGoOf(Agent, Physobj), height(Physobj, Height), Time),
   
    [ not(partOf(Physobj, Object)),
      holds_at(height(Physobj, Height), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1504
%; A state constraint says that
%; if an agent is holding a physical object and
%; the height of the agent is height,
%; the height of the physical object is height:
% [agent,physobj,height,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1509
% HoldsAt(Holding(agent,physobj),time) &
% HoldsAt(Height(agent,height),time) ->
% HoldsAt(Height(physobj,height),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1511
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1509).

 /*  holds_at(holding(Agent, Physobj), Time), holds_at(height(Agent, Height), Time) ->
       holds_at(height(Physobj, Height), Time).
 */

 /*  holds_at(height(Physobj, Height), Time) :-
       holds_at(holding(Agent, Physobj), Time),
       holds_at(height(Agent, Height), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1509).

 /*  [holds_at(holding(Agent, Physobj), Time), holds_at(height(Agent, Height), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(height(Physobj, Height), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1509).
axiom(holds_at(height(Physobj, Height), Time),
   
    [ holds_at(holding(Agent, Physobj), Time),
      holds_at(height(Agent, Height), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1509).

 /*  not(holds_at(holding(Agent, Physobj), Time)) :-
       holds_at(height(Agent, Height), Time),
       not(holds_at(height(Physobj, Height), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1509).

 /*  [holds_at(height(Agent, Height), Time), holds_at(neg(height(Physobj, Height)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(holding(Agent, Physobj)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1509).
axiom(holds_at(neg(holding(Agent, Physobj)), Time),
   
    [ holds_at(height(Agent, Height), Time),
      holds_at(neg(height(Physobj, Height)), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1509).

 /*  not(holds_at(height(Agent, Height), Time)) :-
       holds_at(holding(Agent, Physobj), Time),
       not(holds_at(height(Physobj, Height), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1509).

 /*  [holds_at(holding(Agent, Physobj), Time), holds_at(neg(height(Physobj, Height)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(height(Agent, Height)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1509).
axiom(holds_at(neg(height(Agent, Height)), Time),
   
    [ holds_at(holding(Agent, Physobj), Time),
      holds_at(neg(height(Physobj, Height)), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1513
%; A state constraint says that if a physical object
%; is part of an object,
%; the height of the physical object
%; is the same as the height of the object:
% [physobj,object,height,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1518
% PartOf(physobj,object) &
% HoldsAt(Height(object,height),time) ->
% HoldsAt(Height(physobj,height),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1520
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1518).

 /*  partOf(Physobj, Object), holds_at(height(Object, Height), Time) ->
       holds_at(height(Physobj, Height), Time).
 */

 /*  holds_at(height(Physobj, Height), Time) :-
       partOf(Physobj, Object),
       holds_at(height(Object, Height), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1518).

 /*  [partOf(Physobj, Object), holds_at(height(Object, Height), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(height(Physobj, Height), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1518).
axiom(holds_at(height(Physobj, Height), Time),
   
    [ partOf(Physobj, Object),
      holds_at(height(Object, Height), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1518).

 /*  not(partOf(Physobj, Object)) :-
       holds_at(height(Object, Height), Time),
       not(holds_at(height(Physobj, Height), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1518).

 /*  [holds_at(height(Object, Height), Time), holds_at(neg(height(Physobj, Height)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(partOf(Physobj, Object))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1518).
axiom(not(partOf(Physobj, Object)),
   
    [ holds_at(height(Object, Height), Time),
      holds_at(neg(height(Physobj, Height)), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1518).

 /*  not(holds_at(height(Object, Height), Time)) :-
       partOf(Physobj, Object),
       not(holds_at(height(Physobj, Height), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1518).

 /*  [partOf(Physobj, Object), holds_at(neg(height(Physobj, Height)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(height(Object, Height)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1518).
axiom(holds_at(neg(height(Object, Height)), Time),
   
    [ partOf(Physobj, Object),
      holds_at(neg(height(Physobj, Height)), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1522
%;event Catch(agent,physobj)
%;event HitFromTo(agent,physobj,object,object)
%;fluent Distance(physobj,physobj,distance)
%;fluent FlyingAcrossFromTo(physobj,object,object)
%;[agent,physobj1,physobj2,physobj3,time]
%;Initiates(HitFromTo(agent,physobj1,physobj2,physobj3),
%;          FlyingAcrossFromTo(physobj1,physobj2,physobj3),
%;          time).
%;[agent,physobj1,physobj2,physobj3,distance,time]
%;Releases(HitFromTo(agent,physobj1,physobj2,physobj3),
%;         Distance(physobj1,physobj2,distance),
%;         time).
%;[agent,physobj1,physobj2,physobj3,distance,time]
%;Releases(HitFromTo(agent,physobj1,physobj2,physobj3),
%;         Distance(physobj1,physobj3,distance),
%;         time).
%;[physobj1,physobj2,physobj3,offset,time]
%;Trajectory(FlyingAcrossFromTo(physobj1,physobj2,physobj3),time,
%;           Distance(physobj1,physobj2,offset),offset).
%;[physobj1,physobj2,physobj3,distance1,distance2,offset,time]
%;HoldsAt(Distance(physobj2,physobj3,distance1),time) &
%;distance2 = distance1 - time ->
%;Trajectory(FlyingAcrossFromTo(physobj1,physobj2,physobj3),time,
%;           Distance(physobj1,physobj3,distance2),offset).
%;[agent,physobj1,physobj2,physobj3,time]
%;HoldsAt(FlyingAcrossFromTo(physobj1,physobj2,physobj3),time) ->
%;Initiates(Catch(agent,physobj1),
%;          Holding(agent,physobj1),
%;          time).
%;[agent,physobj1,physobj2,physobj3,time]
%;HoldsAt(FlyingAcrossFromTo(physobj1,physobj2,physobj3),time) ->
%;Terminates(Catch(agent,physobj1),
%;           FlyingAcrossFromTo(physobj1,physobj2,physobj3),
%;           time).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: ecnet/GSpace.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; GSpace: grid space
%;
%; @book{Mueller:1998,
%;   author = "Erik T. Mueller",
%;   year = "1998",
%;   title = "Natural Language Processing with \uppercase{T}hought\uppercase{T}reasure",
%;   address = "New York",
%;   publisher = "Signiform",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1593
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1594).
% sort coord: integer
==> subsort(coord,integer).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1594
% sort grid
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1594).
==> sort(grid).
%; object is at (coord1, coord2) in grid.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1597
% fluent GridAt(grid,object,coord,coord)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1597).
fluent(gridAt(grid,object,coord,coord)).
==> mpred_prop(gridAt(grid,object,coord,coord),fluent).
==> meta_argtypes(gridAt(grid,object,coord,coord)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1599
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1600).
%; agent walks from (coord1, coord2)
%; to (coord3, coord4) in grid.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1601
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1602).
% event GridWalk(grid,agent,coord,coord,coord,coord)
event(gridWalk(grid,agent,coord,coord,coord,coord)).
==> mpred_prop(gridWalk(grid,agent,coord,coord,coord,coord),event).
==> meta_argtypes(gridWalk(grid,agent,coord,coord,coord,coord)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1603
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1604).
%; A state constraint says that for a given grid an
%; object is at one cell in that grid at a time:
% [grid,object,coord1,coord2,coord3,coord4,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1606
% HoldsAt(GridAt(grid,object,coord1,coord2),time) &
% HoldsAt(GridAt(grid,object,coord3,coord4),time) ->
% coord1=coord3 & coord2=coord4.
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1608
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1606).

 /*  holds_at(gridAt(Grid, Object, Coord1, Coord2), Time), holds_at(gridAt(Grid, Object, Coord3, Coord4), Time) ->
       equals(Coord1, Coord3),
       equals(Coord2, Coord4).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1606).

 /*  not(holds_at(gridAt(Grid, Object, Coord1, Coord2), Time)) :-
       holds_at(gridAt(Grid, Object, Coord3, Coord4),
                Time),
       (   not(equals(Coord1, Coord3))
       ;   not(equals(Coord2, Coord4))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1606).

 /*  [holds_at(gridAt(Grid, Object, Coord3, Coord4), Time),  (not(equals(Coord1, Coord3));not(equals(Coord2, Coord4)))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(gridAt(Grid, Object, Coord1, Coord2)),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1606).
axiom(holds_at(neg(gridAt(Grid, Object, Coord1, Coord2)), Time),
   
    [ holds_at(gridAt(Grid, Object, Coord3, Coord4),
               Time),
       (not(equals(Coord1, Coord3));not(equals(Coord2, Coord4)))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1606).

 /*  not(holds_at(gridAt(Grid, Object, Coord3, Coord4), Time)) :-
       holds_at(gridAt(Grid, Object, Coord1, Coord2),
                Time),
       (   not(equals(Coord1, Coord3))
       ;   not(equals(Coord2, Coord4))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1606).

 /*  [holds_at(gridAt(Grid, Object, Coord1, Coord2), Time),  (not(equals(Coord1, Coord3));not(equals(Coord2, Coord4)))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(gridAt(Grid, Object, Coord3, Coord4)),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1606).
axiom(holds_at(neg(gridAt(Grid, Object, Coord3, Coord4)), Time),
   
    [ holds_at(gridAt(Grid, Object, Coord1, Coord2),
               Time),
       (not(equals(Coord3, Coord1));not(equals(Coord4, Coord2)))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1610
%; An effect axiom states that
%; if an agent walks from one cell in a grid to another cell,
%; the agent will be at second cell:
% [grid,agent,coord1,coord2,coord3,coord4,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1614
% Initiates(GridWalk(grid,agent,coord1,coord2,coord3,coord4),
%           GridAt(grid,agent,coord3,coord4),
%           time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1616
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1614).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(gridWalk(Grid,
                             Agent,
                             Coord1,
                             Coord2,
                             Coord3,
                             Coord4),
                    gridAt(Grid, Agent, Coord3, Coord4),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1614).
axiom(initiates(gridWalk(Grid, Agent, Coord1, Coord2, Coord3, Coord4), gridAt(Grid, Agent, Coord3, Coord4), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1618
%; An effect axiom states that
%; if an agent walks from one cell in a grid to another cell,
%; the agent will no longer be at the first cell:
% [grid,agent,coord1,coord2,coord3,coord4,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1622
% Terminates(GridWalk(grid,agent,coord1,coord2,coord3,coord4),
%            GridAt(grid,agent,coord1,coord2),
%            time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1624
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1622).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(gridWalk(Grid,
                              Agent,
                              Coord1,
                              Coord2,
                              Coord3,
                              Coord4),
                     gridAt(Grid, Agent, Coord1, Coord2),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1622).
axiom(terminates(gridWalk(Grid, Agent, Coord1, Coord2, Coord3, Coord4), gridAt(Grid, Agent, Coord1, Coord2), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1626
%; A precondition axiom states that for an agent to walk
%; from one cell in a grid to another cell, the agent
%; must be at the first cell, the second cell must not
%; be occupied, and the first cell must be adjacent to
%; the second cell:
% [grid,agent,coord1,coord2,coord3,coord4,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1632
% Happens(GridWalk(grid,agent,coord1,coord2,coord3,coord4),time) ->
% HoldsAt(GridAt(grid,agent,coord1,coord2),time) &
% (!{object} HoldsAt(GridAt(grid,object,coord3,coord4),time)) &
% (coord1=coord3 |
%  coord1=coord3+1 |
%  coord1=coord3-1) &
% (coord2=coord4 |
%  coord2=coord4+1 |
%  coord2=coord4-1).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1640
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1632).

 /*  happens(gridWalk(Grid, Agent, Coord1, Coord2, Coord3, Coord4), Time) ->
       holds_at(gridAt(Grid, Agent, Coord1, Coord2),
                Time),
       not(exists([Object],
                  holds_at(gridAt(Grid,
                                  Object,
                                  Coord3,
                                  Coord4),
                           Time))),
       (   equals(Coord1, Coord3)
       ;   equals(Coord1, Coord3+1)
       ;   equals(Coord1, Coord3-1)
       ),
       (   equals(Coord2, Coord4)
       ;   equals(Coord2, Coord4+1)
       ;   equals(Coord2, Coord4-1)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1632).

 /*  not(happens(gridWalk(Grid, Agent, Coord1, Coord2, Coord3, Coord4), Time)) :-
       (   not(holds_at(gridAt(Grid, Agent, Coord1, Coord2),
                        Time))
       ;   holds_at(gridAt(Grid, Object, Coord3, Coord4),
                    Time)
       ;   not(equals(Coord1, Coord3)),
           not(equals(Coord1, Coord3+1)),
           not(equals(Coord1, Coord3-1))
       ;   not(equals(Coord2, Coord4)),
           not(equals(Coord2, Coord4+1)),
           not(equals(Coord2, Coord4-1))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1632).

 /*  [(holds_at(neg(gridAt(Grid, Agent, Coord1, Coord2)), Time);holds_at(gridAt(Grid, Object, Coord3, Coord4), Time);not(equals(Coord1, Coord3)), not(equals(Coord1, Coord3+1)), not(equals(Coord1, Coord3-1));not(equals(Coord2, Coord4)), not(equals(Coord2, Coord4+1)), not(equals(Coord2, Coord4-1)))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(gridWalk(Grid,
                               Agent,
                               Coord1,
                               Coord2,
                               Coord3,
                               Coord4),
                      Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1632).
axiom(not(happens(gridWalk(Grid, Agent, Coord1, Coord2, Coord3, Coord4), Time)),
   
    [  (holds_at(neg(gridAt(Grid, Agent, Coord1, Coord2)), Time);holds_at(gridAt(Grid, Object, Coord3, Coord4), Time);not(equals(Coord1, Coord3)), not(equals(Coord1, Coord3+1)), not(equals(Coord1, Coord3-1));not(equals(Coord2, Coord4)), not(equals(Coord2, Coord4+1)), not(equals(Coord2, Coord4-1)))
    ]).

 /*  holds_at(gridAt(Grid, Agent, Coord1, Coord2), Time) :-
       happens(gridWalk(Grid,
                        Agent,
                        Coord1,
                        Coord2,
                        Coord3,
                        Coord4),
               Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1632).

 /*  [holds_at(metreqs(gridWalk(Grid, Agent, Coord1, Coord2, Coord3, Coord4)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(gridWalk(Grid,
                            Agent,
                            Coord1,
                            Coord2,
                            Coord3,
                            Coord4),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1632).
axiom(requires(gridWalk(Grid, Agent, Coord1, Coord2, Coord3, Coord4), Time),
   
    [ holds_at(metreqs(gridWalk(Grid,
                                Agent,
                                Coord1,
                                Coord2,
                                Coord3,
                                Coord4)),
               Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1632).

 /*  [holds_at(gridAt(Grid, Agent, Coord1, Coord2), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(gridWalk(Grid,
                                    Agent,
                                    Coord1,
                                    Coord2,
                                    Coord3,
                                    Coord4)),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1632).
axiom(holds_at(metreqs(gridWalk(Grid, Agent, Coord1, Coord2, Coord3, Coord4)), Time),
   
    [ holds_at(gridAt(Grid, Agent, Coord1, Coord2),
               Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1632).

 /*  not(holds_at(gridAt(Grid, Object, Coord3, Coord4), Time)) :-
       happens(gridWalk(Grid,
                        Agent,
                        Coord1,
                        Coord2,
                        Coord3,
                        Coord4),
               Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1632).

 /*  [holds_at(metreqs(gridWalk(Grid, Agent, Coord1, Coord2, Coord3, Coord4)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(gridWalk(Grid,
                            Agent,
                            Coord1,
                            Coord2,
                            Coord3,
                            Coord4),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1632).
axiom(requires(gridWalk(Grid, Agent, Coord1, Coord2, Coord3, Coord4), Time),
   
    [ holds_at(metreqs(gridWalk(Grid,
                                Agent,
                                Coord1,
                                Coord2,
                                Coord3,
                                Coord4)),
               Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1632).

 /*  [holds_at(neg(gridAt(Grid, Object, Coord3, Coord4)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(gridWalk(Grid,
                                    Agent,
                                    Coord1,
                                    Coord2,
                                    Coord3,
                                    Coord4)),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1632).
axiom(holds_at(metreqs(gridWalk(Grid, Agent, Coord1, Coord2, Coord3, Coord4)), Time),
   
    [ holds_at(neg(gridAt(Grid, Object, Coord3, Coord4)),
               Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1642
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: ecnet/PolySpace.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @phdthesis{Cassimatis:2002,
%;   author = "Nicholas L. Cassimatis",
%;   year = "2002",
%;   title = "Polyscheme: A Cognitive Architecture for Integrating Multiple Representation and Inference Schemes",
%;   address = "Cambridge, MA",
%;   school = "Program in Media Arts and Sciences, School of Architecture and Planning, Massachusetts Institute of Technology",
%; }
%;
%; sorts

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1670
% sort object
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1670).
==> sort(object).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1671
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1672).
% sort xcoord: integer
==> subsort(xcoord,integer).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1672
% sort ycoord: integer
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1672).
==> subsort(ycoord,integer).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1673
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1674).
% sort grid
==> sort(grid).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1674
% sort shape
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1674).
==> sort(shape).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1675
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1676).
% sort color
==> sort(color).
%; constants

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1678
% shape Round,Square
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1678).
==> t(shape,round).
==> t(shape,square).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1679
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1680).
% color Red,Green
==> t(color,red).
==> t(color,green).
%; predicates, fluents, and events

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1682
% predicate Equal(object,object)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1682).
predicate(equal(object,object)).
==> mpred_prop(equal(object,object),predicate).
==> meta_argtypes(equal(object,object)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1683
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1684).
% predicate Shape(object,shape)
predicate(shape(object,shape)).
==> mpred_prop(shape(object,shape),predicate).
==> meta_argtypes(shape(object,shape)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1684
% predicate Color(object,color)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1684).
predicate(color(object,color)).
==> mpred_prop(color(object,color),predicate).
==> meta_argtypes(color(object,color)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1685
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1686).
% fluent Location(grid,object,xcoord,ycoord)
fluent(location(grid,object,xcoord,ycoord)).
==> mpred_prop(location(grid,object,xcoord,ycoord),fluent).
==> meta_argtypes(location(grid,object,xcoord,ycoord)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1686
% event Move(grid,object,xcoord,ycoord,xcoord,ycoord)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1686).
event(move(grid,object,xcoord,ycoord,xcoord,ycoord)).
==> mpred_prop(move(grid,object,xcoord,ycoord,xcoord,ycoord),event).
==> meta_argtypes(move(grid,object,xcoord,ycoord,xcoord,ycoord)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1688
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1689).
%; axioms
% [object1,object2]
 % Equal(object1,object2) -> Equal(object2,object1).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1690
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1691).

 /*  equal(Object1, Object2) ->
       equal(Object2, Object1).
 */


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1692
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1693).
%; objects have unique shape
% [object,shape1,shape2]
% Shape(object,shape1) & Shape(object,shape2) ->
% shape1=shape2.
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1695

 /*  shape(Object, Shape1), shape(Object, Shape2) ->
       equals(Shape1, Shape2).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1695).

 /*  not(shape(Object, Shape1)) :-
       shape(Object, Shape2),
       not(equals(Shape1, Shape2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1695).

 /*  [shape(Object, Shape2), not(equals(Shape1, Shape2))] ->
       ta(Ta_Param, tvs1=[], tvs2=[], not(shape(Object, Shape1))).
 */
axiom(not(shape(Object, Shape1)),
    [shape(Object, Shape2), not(equals(Shape1, Shape2))]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1695).

 /*  not(shape(Object, Shape2)) :-
       shape(Object, Shape1),
       not(equals(Shape1, Shape2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1695).

 /*  [shape(Object, Shape1), not(equals(Shape1, Shape2))] ->
       ta(Ta_Param4, tvs1=[], tvs2=[], not(shape(Object, Shape2))).
 */
axiom(not(shape(Object, Shape2)),
    [shape(Object, Shape1), not(equals(Shape2, Shape1))]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1697
%; objects have unique color
% [object,color1,color2]
% Color(object,color1) & Color(object,color2) ->
% color1=color2.
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1700
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1699).

 /*  color(Object, Color1), color(Object, Color2) ->
       equals(Color1, Color2).
 */

 /*  not(color(Object, Color1)) :-
       color(Object, Color2),
       not(equals(Color1, Color2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1699).

 /*  [color(Object, Color2), not(equals(Color1, Color2))] ->
       ta(Ta_Param, tvs1=[], tvs2=[], not(color(Object, Color1))).
 */
axiom(not(color(Object, Color1)),
    [color(Object, Color2), not(equals(Color1, Color2))]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1699).

 /*  not(color(Object, Color2)) :-
       color(Object, Color1),
       not(equals(Color1, Color2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1699).

 /*  [color(Object, Color1), not(equals(Color1, Color2))] ->
       ta(Ta_Param4, tvs1=[], tvs2=[], not(color(Object, Color2))).
 */
axiom(not(color(Object, Color2)),
    [color(Object, Color1), not(equals(Color2, Color1))]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1702
%; if objects are the same, they have the same shape
% [object1,object2]
% Equal(object1,object2) ->
% ({shape} Shape(object1,shape) & Shape(object2,shape)).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1705
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1704).

 /*  equal(Object1, Object2) ->
       exists([Shape],
               (shape(Object1, Shape), shape(Object2, Shape))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1704).

 /*  not(equal(Object1, Object2)) :-
       (   not(shape(Object1, Shape))
       ;   not(shape(Object2, Shape))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1704).

 /*  [(not(shape(Object1, Shape));not(shape(Object2, Shape)))] ->
       ta(Ta_Param, tvs1=[], tvs2=[], not(equal(Object1, Object2))).
 */
axiom(not(equal(Object1, Object2)),
   
    [  (not(shape(Object1, Shape));not(shape(Object2, Shape)))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1704).

 /*  shape(Object1, Shape) :-
       equal(Object1, Object2).
 */

 /*  [equal(Object1, Object2)] ->
       ta(Ta_Param4, tvs1=[], tvs2=[], shape(Object1, Shape)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1704).
axiom(shape(Object1, Shape),
    [equal(Object1, Object2)]).

 /*  shape(Object2, Shape) :-
       equal(Object1, Object2).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1704).

 /*  [equal(Object1, Object2)] ->
       ta(Ta_Param5, tvs1=[], tvs2=[], shape(Object2, Shape)).
 */
axiom(shape(Object2, Shape),
    [equal(Object1, Object2)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1707
%; if objects are the same, they have the same color
% [object1,object2]
% Equal(object1,object2) ->
% ({color} Color(object1,color) & Color(object2,color)).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1710
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1709).

 /*  equal(Object1, Object2) ->
       exists([Color],
               (color(Object1, Color), color(Object2, Color))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1709).

 /*  not(equal(Object1, Object2)) :-
       (   not(color(Object1, Color))
       ;   not(color(Object2, Color))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1709).

 /*  [(not(color(Object1, Color));not(color(Object2, Color)))] ->
       ta(Ta_Param, tvs1=[], tvs2=[], not(equal(Object1, Object2))).
 */
axiom(not(equal(Object1, Object2)),
   
    [  (not(color(Object1, Color));not(color(Object2, Color)))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1709).

 /*  color(Object1, Color) :-
       equal(Object1, Object2).
 */

 /*  [equal(Object1, Object2)] ->
       ta(Ta_Param4, tvs1=[], tvs2=[], color(Object1, Color)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1709).
axiom(color(Object1, Color),
    [equal(Object1, Object2)]).

 /*  color(Object2, Color) :-
       equal(Object1, Object2).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1709).

 /*  [equal(Object1, Object2)] ->
       ta(Ta_Param5, tvs1=[], tvs2=[], color(Object2, Color)).
 */
axiom(color(Object2, Color),
    [equal(Object1, Object2)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1712
%; if objects are the same, they have the same location
% [grid,object1,object2,xcoord1,ycoord1,xcoord2,ycoord2,time]
% Equal(object1,object2) ->
% (HoldsAt(Location(grid,object1,xcoord1,ycoord1),time) &
%  HoldsAt(Location(grid,object2,xcoord2,ycoord2),time) ->
%  xcoord1=xcoord2 & ycoord1=ycoord2).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1717
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1714).

 /*  equal(Object1, Object2) ->
       ( holds_at(location(Grid, Object1, Xcoord1, Ycoord1), Time), holds_at(location(Grid, Object2, Xcoord2, Ycoord2), Time)->equals(Xcoord1, Xcoord2), equals(Ycoord1, Ycoord2)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1714).

 /*  not(equal(Object1, Object2)) :-
       ( holds_at(location(Grid, Object1, Xcoord1, Ycoord1),
                  Time),
         holds_at(location(Grid, Object2, Xcoord2, Ycoord2),
                  Time)
       ),
       (   not(equals(Xcoord1, Xcoord2))
       ;   not(equals(Ycoord1, Ycoord2))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1714).

 /*  [holds_at(location(Grid, Object1, Xcoord1, Ycoord1), Time), holds_at(location(Grid, Object2, Xcoord2, Ycoord2), Time),  (not(equals(Xcoord1, Xcoord2));not(equals(Ycoord1, Ycoord2)))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(equal(Object1, Object2))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1714).
axiom(not(equal(Object1, Object2)),
   
    [ holds_at(location(Grid, Object1, Xcoord1, Ycoord1),
               Time),
      holds_at(location(Grid, Object2, Xcoord2, Ycoord2),
               Time),
       (not(equals(Xcoord1, Xcoord2));not(equals(Ycoord1, Ycoord2)))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1714).

 /*  not(holds_at(location(Grid, Object1, Xcoord1, Ycoord1), Time)) :-
       holds_at(location(Grid, Object2, Xcoord2, Ycoord2),
                Time),
       (   not(equals(Xcoord1, Xcoord2))
       ;   not(equals(Ycoord1, Ycoord2))
       ),
       equal(Object1, Object2).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1714).

 /*  [holds_at(location(Grid, Object2, Xcoord2, Ycoord2), Time),  (not(equals(Xcoord1, Xcoord2));not(equals(Ycoord1, Ycoord2))), equal(Object1, Object2)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(location(Grid,
                                Object1,
                                Xcoord1,
                                Ycoord1)),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1714).
axiom(holds_at(neg(location(Grid, Object1, Xcoord1, Ycoord1)), Time),
   
    [ holds_at(location(Grid, Object2, Xcoord2, Ycoord2),
               Time),
       (not(equals(Xcoord1, Xcoord2));not(equals(Ycoord1, Ycoord2))),
      equal(Object1, Object2)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1714).

 /*  not(holds_at(location(Grid, Object2, Xcoord2, Ycoord2), Time)) :-
       holds_at(location(Grid, Object1, Xcoord1, Ycoord1),
                Time),
       (   not(equals(Xcoord1, Xcoord2))
       ;   not(equals(Ycoord1, Ycoord2))
       ),
       equal(Object1, Object2).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1714).

 /*  [holds_at(location(Grid, Object1, Xcoord1, Ycoord1), Time),  (not(equals(Xcoord1, Xcoord2));not(equals(Ycoord1, Ycoord2))), equal(Object1, Object2)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(location(Grid,
                                Object2,
                                Xcoord2,
                                Ycoord2)),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1714).
axiom(holds_at(neg(location(Grid, Object2, Xcoord2, Ycoord2)), Time),
   
    [ holds_at(location(Grid, Object1, Xcoord1, Ycoord1),
               Time),
       (not(equals(Xcoord2, Xcoord1));not(equals(Ycoord2, Ycoord1))),
      equal(Object1, Object2)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1719
%; object in one location at a time
% [grid,object,xcoord1,ycoord1,xcoord2,ycoord2,time]
% HoldsAt(Location(grid,object,xcoord1,ycoord1),time) &
% HoldsAt(Location(grid,object,xcoord2,ycoord2),time) ->
% xcoord1=xcoord2 & ycoord1=ycoord2.
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1723
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1721).

 /*  holds_at(location(Grid, Object, Xcoord1, Ycoord1), Time), holds_at(location(Grid, Object, Xcoord2, Ycoord2), Time) ->
       equals(Xcoord1, Xcoord2),
       equals(Ycoord1, Ycoord2).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1721).

 /*  not(holds_at(location(Grid, Object, Xcoord1, Ycoord1), Time)) :-
       holds_at(location(Grid, Object, Xcoord2, Ycoord2),
                Time),
       (   not(equals(Xcoord1, Xcoord2))
       ;   not(equals(Ycoord1, Ycoord2))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1721).

 /*  [holds_at(location(Grid, Object, Xcoord2, Ycoord2), Time),  (not(equals(Xcoord1, Xcoord2));not(equals(Ycoord1, Ycoord2)))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(location(Grid,
                                Object,
                                Xcoord1,
                                Ycoord1)),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1721).
axiom(holds_at(neg(location(Grid, Object, Xcoord1, Ycoord1)), Time),
   
    [ holds_at(location(Grid, Object, Xcoord2, Ycoord2),
               Time),
       (not(equals(Xcoord1, Xcoord2));not(equals(Ycoord1, Ycoord2)))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1721).

 /*  not(holds_at(location(Grid, Object, Xcoord2, Ycoord2), Time)) :-
       holds_at(location(Grid, Object, Xcoord1, Ycoord1),
                Time),
       (   not(equals(Xcoord1, Xcoord2))
       ;   not(equals(Ycoord1, Ycoord2))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1721).

 /*  [holds_at(location(Grid, Object, Xcoord1, Ycoord1), Time),  (not(equals(Xcoord1, Xcoord2));not(equals(Ycoord1, Ycoord2)))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(location(Grid,
                                Object,
                                Xcoord2,
                                Ycoord2)),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1721).
axiom(holds_at(neg(location(Grid, Object, Xcoord2, Ycoord2)), Time),
   
    [ holds_at(location(Grid, Object, Xcoord1, Ycoord1),
               Time),
       (not(equals(Xcoord2, Xcoord1));not(equals(Ycoord2, Ycoord1)))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1725
%; objects have locations
% [grid,object,time]
% (
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1727
% {xcoord,ycoord} HoldsAt(Location(grid,object,xcoord,ycoord),time)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1727).

 /*  exists([Xcoord,Ycoord],
    holds_at(location(Grid,Object,Xcoord,Ycoord),
   	 Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1727).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(location(Grid, Object, Xcoord, Ycoord),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1727).
axiom(holds_at(location(Grid, Object, Xcoord, Ycoord), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1729
%; different objects are not at same location
% [grid,object1,object2,xcoord1,ycoord1,time]
% HoldsAt(Location(grid,object1,xcoord1,ycoord1),time) &
% HoldsAt(Location(grid,object2,xcoord1,ycoord1),time) ->
% Equal(object1,object2).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1733
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1731).

 /*  holds_at(location(Grid, Object1, Xcoord1, Ycoord1), Time), holds_at(location(Grid, Object2, Xcoord1, Ycoord1), Time) ->
       equal(Object1, Object2).
 */

 /*  equal(Object1, Object2) :-
       holds_at(location(Grid, Object1, Xcoord1, Ycoord1),
                Time),
       holds_at(location(Grid, Object2, Xcoord1, Ycoord1),
                Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1731).

 /*  [holds_at(location(Grid, Object1, Xcoord1, Ycoord1), Time), holds_at(location(Grid, Object2, Xcoord1, Ycoord1), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          equal(Object1, Object2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1731).
axiom(equal(Object1, Object2),
   
    [ holds_at(location(Grid, Object1, Xcoord1, Ycoord1),
               Time),
      holds_at(location(Grid, Object2, Xcoord1, Ycoord1),
               Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1731).

 /*  not(holds_at(location(Grid, Object1, Xcoord1, Ycoord1), Time)) :-
       holds_at(location(Grid, Object2, Xcoord1, Ycoord1),
                Time),
       not(equal(Object1, Object2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1731).

 /*  [holds_at(location(Grid, Object2, Xcoord1, Ycoord1), Time), not(equal(Object1, Object2))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(location(Grid,
                                Object1,
                                Xcoord1,
                                Ycoord1)),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1731).
axiom(holds_at(neg(location(Grid, Object1, Xcoord1, Ycoord1)), Time),
   
    [ holds_at(location(Grid, Object2, Xcoord1, Ycoord1),
               Time),
      not(equal(Object1, Object2))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1731).

 /*  not(holds_at(location(Grid, Object2, Xcoord1, Ycoord1), Time)) :-
       holds_at(location(Grid, Object1, Xcoord1, Ycoord1),
                Time),
       not(equal(Object1, Object2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1731).

 /*  [holds_at(location(Grid, Object1, Xcoord1, Ycoord1), Time), not(equal(Object1, Object2))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(location(Grid,
                                Object2,
                                Xcoord1,
                                Ycoord1)),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1731).
axiom(holds_at(neg(location(Grid, Object2, Xcoord1, Ycoord1)), Time),
   
    [ holds_at(location(Grid, Object1, Xcoord1, Ycoord1),
               Time),
      not(equal(Object1, Object2))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1735
%; moving to a location causes an object to be at that location
% [grid,object,xcoord1,ycoord1,xcoord2,ycoord2,time]
% Initiates(Move(grid,object,xcoord1,ycoord1,xcoord2,ycoord2),
%           Location(grid,object,xcoord2,ycoord2),
%           time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1739
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1737).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(move(Grid,
                         Object,
                         Xcoord1,
                         Ycoord1,
                         Xcoord2,
                         Ycoord2),
                    location(Grid, Object, Xcoord2, Ycoord2),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1737).
axiom(initiates(move(Grid, Object, Xcoord1, Ycoord1, Xcoord2, Ycoord2), location(Grid, Object, Xcoord2, Ycoord2), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1741
%; moving to a location causes the object no longer to be at its previous
%; location
% [grid,object,xcoord1,ycoord1,xcoord2,ycoord2,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1744
% Terminates(Move(grid,object,xcoord1,ycoord1,xcoord2,ycoord2),
%            Location(grid,object,xcoord1,ycoord1),
%            time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1746
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1744).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(move(Grid,
                          Object,
                          Xcoord1,
                          Ycoord1,
                          Xcoord2,
                          Ycoord2),
                     location(Grid,
                              Object,
                              Xcoord1,
                              Ycoord1),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1744).
axiom(terminates(move(Grid, Object, Xcoord1, Ycoord1, Xcoord2, Ycoord2), location(Grid, Object, Xcoord1, Ycoord1), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1748
%;; allow diagonal movements
%;[grid,object,xcoord1,ycoord1,xcoord2,ycoord2,time]
%;Happens(Move(grid,object,xcoord1,ycoord1,xcoord2,ycoord2),time) ->
%;HoldsAt(Location(grid,object,xcoord1,ycoord1),time) &
%;(xcoord1=xcoord2 |
%; xcoord1=xcoord2+1 |
%; xcoord1=xcoord2-1) &
%;(ycoord1=ycoord2 |
%; ycoord1=ycoord2+1 |
%; ycoord1=ycoord2-1).
%; only allow right angle movements
% [grid,object,xcoord1,ycoord1,xcoord2,ycoord2,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1761
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1762).
% Happens(Move(grid,object,xcoord1,ycoord1,xcoord2,ycoord2),time) ->
% HoldsAt(Location(grid,object,xcoord1,ycoord1),time) &
% ((xcoord1=xcoord2 & (ycoord1=ycoord2+1 | ycoord1=ycoord2-1)) |
%  (ycoord1=ycoord2 & (xcoord1=xcoord2+1 | xcoord1=xcoord2-1))).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1764
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1762).

 /*  happens(move(Grid, Object, Xcoord1, Ycoord1, Xcoord2, Ycoord2), Time) ->
       holds_at(location(Grid, Object, Xcoord1, Ycoord1),
                Time),
       (   equals(Xcoord1, Xcoord2),
           (   equals(Ycoord1, Ycoord2+1)
           ;   equals(Ycoord1, Ycoord2-1)
           )
       ;   equals(Ycoord1, Ycoord2),
           (   equals(Xcoord1, Xcoord2+1)
           ;   equals(Xcoord1, Xcoord2-1)
           )
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1762).

 /*  not(happens(move(Grid, Object, Xcoord1, Ycoord1, Xcoord2, Ycoord2), Time)) :-
       (   not(holds_at(location(Grid,
                                 Object,
                                 Xcoord1,
                                 Ycoord1),
                        Time))
       ;   (   not(equals(Xcoord1, Xcoord2))
           ;   not(equals(Ycoord1, Ycoord2+1)),
               not(equals(Ycoord1, Ycoord2-1))
           ),
           (   not(equals(Ycoord1, Ycoord2))
           ;   not(equals(Xcoord1, Xcoord2+1)),
               not(equals(Xcoord1, Xcoord2-1))
           )
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1762).

 /*  [(holds_at(neg(location(Grid, Object, Xcoord1, Ycoord1)), Time);(not(equals(Xcoord1, Xcoord2));not(equals(Ycoord1, Ycoord2+1)), not(equals(Ycoord1, Ycoord2-1))), (not(equals(Ycoord1, Ycoord2));not(equals(Xcoord1, Xcoord2+1)), not(equals(Xcoord1, Xcoord2-1))))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(move(Grid,
                           Object,
                           Xcoord1,
                           Ycoord1,
                           Xcoord2,
                           Ycoord2),
                      Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1762).
axiom(not(happens(move(Grid, Object, Xcoord1, Ycoord1, Xcoord2, Ycoord2), Time)),
   
    [  (holds_at(neg(location(Grid, Object, Xcoord1, Ycoord1)), Time);(not(equals(Xcoord1, Xcoord2));not(equals(Ycoord1, Ycoord2+1)), not(equals(Ycoord1, Ycoord2-1))), (not(equals(Ycoord1, Ycoord2));not(equals(Xcoord1, Xcoord2+1)), not(equals(Xcoord1, Xcoord2-1))))
    ]).

 /*  holds_at(location(Grid, Object, Xcoord1, Ycoord1), Time) :-
       happens(move(Grid,
                    Object,
                    Xcoord1,
                    Ycoord1,
                    Xcoord2,
                    Ycoord2),
               Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1762).

 /*  [holds_at(metreqs(move(Grid, Object, Xcoord1, Ycoord1, Xcoord2, Ycoord2)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(move(Grid,
                        Object,
                        Xcoord1,
                        Ycoord1,
                        Xcoord2,
                        Ycoord2),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1762).
axiom(requires(move(Grid, Object, Xcoord1, Ycoord1, Xcoord2, Ycoord2), Time),
   
    [ holds_at(metreqs(move(Grid,
                            Object,
                            Xcoord1,
                            Ycoord1,
                            Xcoord2,
                            Ycoord2)),
               Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1762).

 /*  [holds_at(location(Grid, Object, Xcoord1, Ycoord1), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(move(Grid,
                                Object,
                                Xcoord1,
                                Ycoord1,
                                Xcoord2,
                                Ycoord2)),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1762).
axiom(holds_at(metreqs(move(Grid, Object, Xcoord1, Ycoord1, Xcoord2, Ycoord2)), Time),
   
    [ holds_at(location(Grid, Object, Xcoord1, Ycoord1),
               Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1766
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: ecnet/HandTo.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1785
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1786).
% event HandTo(agent,agent,physobj)
event(handTo(agent,agent,physobj)).
==> mpred_prop(handTo(agent,agent,physobj),event).
==> meta_argtypes(handTo(agent,agent,physobj)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1787
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1788).
% [agent1,agent2,physobj,time]
% Initiates(HandTo(agent1,agent2,physobj),
%           Holding(agent2,physobj),
%           time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1790
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1788).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(handTo(Agent1, Agent2, Physobj),
                    holding(Agent2, Physobj),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1788).
axiom(initiates(handTo(Agent1, Agent2, Physobj), holding(Agent2, Physobj), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1792
% [agent1,agent2,physobj,time]
% Terminates(HandTo(agent1,agent2,physobj),
%            Holding(agent1,physobj),
%            time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1795
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1794).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(handTo(Agent1, Agent2, Physobj),
                     holding(Agent1, Physobj),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1794).
axiom(terminates(handTo(Agent1, Agent2, Physobj), holding(Agent1, Physobj), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1797
% [agent1,agent2,physobj,time]
% Happens(HandTo(agent1,agent2,physobj),time) ->
% HoldsAt(Holding(agent1,physobj),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1799

 /*  happens(handTo(Agent1, Agent2, Physobj), Time) ->
       holds_at(holding(Agent1, Physobj), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1799).

 /*  holds_at(holding(Agent1, Physobj), Time) :-
       happens(handTo(Agent1, Agent2, Physobj), Time).
 */

 /*  [holds_at(metreqs(handTo(Agent1, Agent2, Physobj)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(handTo(Agent1, Agent2, Physobj), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1799).
axiom(requires(handTo(Agent1, Agent2, Physobj), Time),
   
    [ holds_at(metreqs(handTo(Agent1, Agent2, Physobj)),
               Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1799).

 /*  [holds_at(holding(Agent1, Physobj), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(handTo(Agent1, Agent2, Physobj)),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1799).
axiom(holds_at(metreqs(handTo(Agent1, Agent2, Physobj)), Time),
    [holds_at(holding(Agent1, Physobj), Time)]).

 /*  not(happens(handTo(Agent1, Agent2, Physobj), Time)) :-
       not(holds_at(holding(Agent1, Physobj), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1799).

 /*  [holds_at(neg(holding(Agent1, Physobj)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(handTo(Agent1, Agent2, Physobj), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1799).
axiom(not(happens(handTo(Agent1, Agent2, Physobj), Time)),
    [holds_at(neg(holding(Agent1, Physobj)), Time)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1801
% event ShakeHands(agent,agent)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1801).
event(shakeHands(agent,agent)).
==> mpred_prop(shakeHands(agent,agent),event).
==> meta_argtypes(shakeHands(agent,agent)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1803
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1804).
% event WriteOn(agent,paper,pen)
event(writeOn(agent,paper,pen)).
==> mpred_prop(writeOn(agent,paper,pen),event).
==> meta_argtypes(writeOn(agent,paper,pen)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1807
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1808).
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: ecnet/Container.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%;
%; Container: container
%;
%; linkage to OTSpace(M):
% [agent,container1,container2,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1827
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1828).
% Happens(TakeOutOf(agent,container1,container2),time) ->
% HoldsAt(ContainerIsOpen(container2),time).

 /*  happens(takeOutOf(Agent, Container1, Container2), Time) ->
       holds_at(containerIsOpen(Container2), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1828).

 /*  holds_at(containerIsOpen(Container2), Time) :-
       happens(takeOutOf(Agent, Container1, Container2),
               Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1828).

 /*  [holds_at(metreqs(takeOutOf(Agent, Container1, Container2)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(takeOutOf(Agent, Container1, Container2),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1828).
axiom(requires(takeOutOf(Agent, Container1, Container2), Time),
   
    [ holds_at(metreqs(takeOutOf(Agent,
                                 Container1,
                                 Container2)),
               Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1828).

 /*  [holds_at(containerIsOpen(Container2), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(takeOutOf(Agent,
                                     Container1,
                                     Container2)),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1828).
axiom(holds_at(metreqs(takeOutOf(Agent, Container1, Container2)), Time),
    [holds_at(containerIsOpen(Container2), Time)]).

 /*  not(happens(takeOutOf(Agent, Container1, Container2), Time)) :-
       not(holds_at(containerIsOpen(Container2), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1828).

 /*  [holds_at(neg(containerIsOpen(Container2)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(takeOutOf(Agent, Container1, Container2),
                      Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1828).
axiom(not(happens(takeOutOf(Agent, Container1, Container2), Time)),
    [holds_at(neg(containerIsOpen(Container2)), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1830
% [agent,container1,container2,time]
% Happens(PutInside(agent,container1,container2),time) ->
% HoldsAt(ContainerIsOpen(container2),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1832

 /*  happens(putInside(Agent, Container1, Container2), Time) ->
       holds_at(containerIsOpen(Container2), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1832).

 /*  holds_at(containerIsOpen(Container2), Time) :-
       happens(putInside(Agent, Container1, Container2),
               Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1832).

 /*  [holds_at(metreqs(putInside(Agent, Container1, Container2)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(putInside(Agent, Container1, Container2),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1832).
axiom(requires(putInside(Agent, Container1, Container2), Time),
   
    [ holds_at(metreqs(putInside(Agent,
                                 Container1,
                                 Container2)),
               Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1832).

 /*  [holds_at(containerIsOpen(Container2), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(putInside(Agent,
                                     Container1,
                                     Container2)),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1832).
axiom(holds_at(metreqs(putInside(Agent, Container1, Container2)), Time),
    [holds_at(containerIsOpen(Container2), Time)]).

 /*  not(happens(putInside(Agent, Container1, Container2), Time)) :-
       not(holds_at(containerIsOpen(Container2), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1832).

 /*  [holds_at(neg(containerIsOpen(Container2)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(putInside(Agent, Container1, Container2),
                      Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1832).
axiom(not(happens(putInside(Agent, Container1, Container2), Time)),
    [holds_at(neg(containerIsOpen(Container2)), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1834
%; agent opens container.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1835
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1836).
% event ContainerOpen(agent,container)
event(containerOpen(agent,container)).
==> mpred_prop(containerOpen(agent,container),event).
==> meta_argtypes(containerOpen(agent,container)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1837
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1838).
%; agent closes container.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1838
% event ContainerClose(agent,container)
event(containerClose(agent,container)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1838).
==> mpred_prop(containerClose(agent,container),event).
==> meta_argtypes(containerClose(agent,container)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1840
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1841).
%; container is open.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1841
% fluent ContainerIsOpen(container)
fluent(containerIsOpen(container)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1841).
==> mpred_prop(containerIsOpen(container),fluent).
==> meta_argtypes(containerIsOpen(container)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1843
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1844).
% fluent ContainerClosed(container)
fluent(containerClosed(container)).
==> mpred_prop(containerClosed(container),fluent).
==> meta_argtypes(containerClosed(container)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1844
% noninertial ContainerClosed
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1844).
==> noninertial(containerClosed).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1846
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1847).
% [container,time]
% HoldsAt(ContainerClosed(container),time) <->
% !HoldsAt(ContainerIsOpen(container),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1848

 /*  holds_at(containerClosed(Container), Time) <->
       holds_at(neg(containerIsOpen(Container)), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1847).

 /*  [holds_at, containerClosed] <->
       [holds_at, neg, containerIsOpen].
 */

 /*  holds_at(containerClosed(Container), Time) ->
       holds_at(neg(containerIsOpen(Container)), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1847).

 /*  holds_at(neg(containerIsOpen(Container)), Time) :-
       holds_at(containerClosed(Container), Time).
 */

 /*  [holds_at(containerClosed(Container), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(containerIsOpen(Container)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1847).
axiom(holds_at(neg(containerIsOpen(Container)), Time),
    [holds_at(containerClosed(Container), Time)]).

 /*  not(holds_at(containerClosed(Container), Time)) :-
       not(holds_at(neg(containerIsOpen(Container)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1847).

 /*  [holds_at(containerIsOpen(Container), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(containerClosed(Container)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1847).
axiom(holds_at(neg(containerClosed(Container)), Time),
    [holds_at(containerIsOpen(Container), Time)]).

 /*  holds_at(neg(containerIsOpen(Container)), Time) ->
       holds_at(containerClosed(Container), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1847).

 /*  holds_at(containerClosed(Container), Time) :-
       holds_at(neg(containerIsOpen(Container)), Time).
 */

 /*  [holds_at(neg(containerIsOpen(Container)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(containerClosed(Container), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1847).
axiom(holds_at(containerClosed(Container), Time),
    [holds_at(neg(containerIsOpen(Container)), Time)]).

 /*  not(holds_at(neg(containerIsOpen(Container)), Time)) :-
       not(holds_at(containerClosed(Container), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1847).

 /*  [holds_at(neg(containerClosed(Container)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(containerIsOpen(Container), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1847).
axiom(holds_at(containerIsOpen(Container), Time),
    [holds_at(neg(containerClosed(Container)), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1850
%; A precondition axiom states that
%; for an agent to open a container,
%; the agent must be awake,
%; the container must not already be open, and
%; the agent must be holding the container.
% [agent,container,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1856
% Happens(ContainerOpen(agent,container),time) ->
% HoldsAt(Awake(agent),time) &
% !HoldsAt(ContainerIsOpen(container),time) &
% HoldsAt(Holding(agent,container),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1859
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1856).

 /*  happens(containerOpen(Agent, Container), Time) ->
       holds_at(awake(Agent), Time),
       holds_at(neg(containerIsOpen(Container)), Time),
       holds_at(holding(Agent, Container), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1856).

 /*  not(happens(containerOpen(Agent, Container), Time)) :-
       (   not(holds_at(awake(Agent), Time))
       ;   not(holds_at(neg(containerIsOpen(Container)), Time))
       ;   not(holds_at(holding(Agent, Container), Time))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1856).

 /*  [(holds_at(neg(awake(Agent)), Time);holds_at(containerIsOpen(Container), Time);holds_at(neg(holding(Agent, Container)), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(containerOpen(Agent, Container), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1856).
axiom(not(happens(containerOpen(Agent, Container), Time)),
   
    [  (holds_at(neg(awake(Agent)), Time);holds_at(containerIsOpen(Container), Time);holds_at(neg(holding(Agent, Container)), Time))
    ]).

 /*  holds_at(awake(Agent), Time) :-
       happens(containerOpen(Agent, Container), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1856).

 /*  [holds_at(metreqs(containerOpen(Agent, Container)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(containerOpen(Agent, Container), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1856).
axiom(requires(containerOpen(Agent, Container), Time),
    [holds_at(metreqs(containerOpen(Agent, Container)), Time)]).

 /*  [holds_at(awake(Agent), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(containerOpen(Agent, Container)),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1856).
axiom(holds_at(metreqs(containerOpen(Agent, Container)), Time),
    [holds_at(awake(Agent), Time)]).

 /*  holds_at(neg(containerIsOpen(Container)), Time) :-
       happens(containerOpen(Agent, Container), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1856).

 /*  [holds_at(metreqs(containerOpen(Agent, Container)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(containerOpen(Agent, Container), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1856).
axiom(requires(containerOpen(Agent, Container), Time),
    [holds_at(metreqs(containerOpen(Agent, Container)), Time)]).

 /*  [holds_at(neg(containerIsOpen(Container)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(containerOpen(Agent, Container)),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1856).
axiom(holds_at(metreqs(containerOpen(Agent, Container)), Time),
    [holds_at(neg(containerIsOpen(Container)), Time)]).

 /*  holds_at(holding(Agent, Container), Time) :-
       happens(containerOpen(Agent, Container), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1856).

 /*  [holds_at(metreqs(containerOpen(Agent, Container)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(containerOpen(Agent, Container), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1856).
axiom(requires(containerOpen(Agent, Container), Time),
    [holds_at(metreqs(containerOpen(Agent, Container)), Time)]).

 /*  [holds_at(holding(Agent, Container), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(containerOpen(Agent, Container)),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1856).
axiom(holds_at(metreqs(containerOpen(Agent, Container)), Time),
    [holds_at(holding(Agent, Container), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1861
%; An effect axiom states that
%; if an agent opens a container,
%; the container will be open:
% [agent,container,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1865
% Initiates(ContainerOpen(agent,container),ContainerIsOpen(container),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1865).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(containerOpen(Agent, Container),
                    containerIsOpen(Container),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1865).
axiom(initiates(containerOpen(Agent, Container), containerIsOpen(Container), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1867
%; A precondition axiom states that
%; for an agent to close a container,
%; the agent must be awake,
%; the container must be open, and
%; the agent must be holding the container.
% [agent,container,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1873
% Happens(ContainerClose(agent,container),time) ->
% HoldsAt(Awake(agent),time) &
% HoldsAt(ContainerIsOpen(container),time) &
% HoldsAt(Holding(agent,container),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1876
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1873).

 /*  happens(containerClose(Agent, Container), Time) ->
       holds_at(awake(Agent), Time),
       holds_at(containerIsOpen(Container), Time),
       holds_at(holding(Agent, Container), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1873).

 /*  not(happens(containerClose(Agent, Container), Time)) :-
       (   not(holds_at(awake(Agent), Time))
       ;   not(holds_at(containerIsOpen(Container), Time))
       ;   not(holds_at(holding(Agent, Container), Time))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1873).

 /*  [(holds_at(neg(awake(Agent)), Time);holds_at(neg(containerIsOpen(Container)), Time);holds_at(neg(holding(Agent, Container)), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(containerClose(Agent, Container), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1873).
axiom(not(happens(containerClose(Agent, Container), Time)),
   
    [  (holds_at(neg(awake(Agent)), Time);holds_at(neg(containerIsOpen(Container)), Time);holds_at(neg(holding(Agent, Container)), Time))
    ]).

 /*  holds_at(awake(Agent), Time) :-
       happens(containerClose(Agent, Container), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1873).

 /*  [holds_at(metreqs(containerClose(Agent, Container)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(containerClose(Agent, Container), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1873).
axiom(requires(containerClose(Agent, Container), Time),
   
    [ holds_at(metreqs(containerClose(Agent, Container)),
               Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1873).

 /*  [holds_at(awake(Agent), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(containerClose(Agent, Container)),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1873).
axiom(holds_at(metreqs(containerClose(Agent, Container)), Time),
    [holds_at(awake(Agent), Time)]).

 /*  holds_at(containerIsOpen(Container), Time) :-
       happens(containerClose(Agent, Container), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1873).

 /*  [holds_at(metreqs(containerClose(Agent, Container)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(containerClose(Agent, Container), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1873).
axiom(requires(containerClose(Agent, Container), Time),
   
    [ holds_at(metreqs(containerClose(Agent, Container)),
               Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1873).

 /*  [holds_at(containerIsOpen(Container), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(containerClose(Agent, Container)),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1873).
axiom(holds_at(metreqs(containerClose(Agent, Container)), Time),
    [holds_at(containerIsOpen(Container), Time)]).

 /*  holds_at(holding(Agent, Container), Time) :-
       happens(containerClose(Agent, Container), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1873).

 /*  [holds_at(metreqs(containerClose(Agent, Container)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(containerClose(Agent, Container), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1873).
axiom(requires(containerClose(Agent, Container), Time),
   
    [ holds_at(metreqs(containerClose(Agent, Container)),
               Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1873).

 /*  [holds_at(holding(Agent, Container), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(containerClose(Agent, Container)),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1873).
axiom(holds_at(metreqs(containerClose(Agent, Container)), Time),
    [holds_at(holding(Agent, Container), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1878
%; An effect axiom states that
%; if an agent closes a container,
%; the container will no longer be open:
% [agent,container,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1882
% Terminates(ContainerClose(agent,container),ContainerIsOpen(container),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1882).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(containerClose(Agent, Container),
                     containerIsOpen(Container),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1882).
axiom(terminates(containerClose(Agent, Container), containerIsOpen(Container), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1884
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: ecnet/SpeechAct.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; The SpeechAct representation deals with a few speech acts
%; \fullcite{Searle:1969}.
%;
%; @book{Searle:1969,
%;   author = "John R. Searle",
%;   year = "1969",
%;   title = "Speech Acts: An Essay in the Philosophy of Language",
%;   address = "Cambridge",
%;   publisher = "Cambridge University Press",
%; }
%;
%; We handle
%; the illocutionary acts of
%; inviting someone into one's house (a form of request) and
%; greeting someone,
%; and the expressive speech act of crying for joy.
%;
%; inviting in
%; agent1 invites agent2 into room.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1923
% event InviteIn(agent,agent,room)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1923).
event(inviteIn(agent,agent,room)).
==> mpred_prop(inviteIn(agent,agent,room),event).
==> meta_argtypes(inviteIn(agent,agent,room)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1924
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1923).
%; agent1 is invited into room by agent2.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1925
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1926).
% fluent InvitedIn(agent,room,agent)
fluent(invitedIn(agent,room,agent)).
==> mpred_prop(invitedIn(agent,room,agent),fluent).
==> meta_argtypes(invitedIn(agent,room,agent)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1927
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1928).
%; A precondition axiom states that for
%; an agent to invite another agent into a room,
%; the first agent must be in the room and
%; there must be an outside area such that
%; the second agent is at the outside area and
%; the outside area is adjacent to the room:
% [agent1,agent2,room,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1934
% Happens(InviteIn(agent1,agent2,room),time) ->
% HoldsAt(At(agent1,room),time) &
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1936
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1934).
% {outside}% 
% HoldsAt(At(agent2,outside),time) &
% Adjacent(room,outside).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1938
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1937).

 /*  exists([Outside],
    happens(inviteIn(Agent1, Agent2, Room), Time) ->
       holds_at(at(Agent1, Room), Time),
       holds_at(at(Agent2, Outside), Time),
       adjacent(Room, Outside)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1937).

 /*  not(happens(inviteIn(Agent1, Agent2, Room), Time)) :-
       (   not(holds_at(at(Agent1, Room), Time))
       ;   not(holds_at(at(Agent2, Outside), Time))
       ;   not(adjacent(Room, Outside))
       ),
       some(Outside,
            '$kolem_Fn_346'(Agent1, Agent2, Room, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1937).

 /*  [(holds_at(neg(at(Agent1, Room)), Time);holds_at(neg(at(Agent2, Outside)), Time);not(adjacent(Room, Outside))), some(Outside, '$kolem_Fn_346'(Agent1, Agent2, Room, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(inviteIn(Agent1, Agent2, Room), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1937).
axiom(not(happens(inviteIn(Agent1, Agent2, Room), Time)),
   
    [  (holds_at(neg(at(Agent1, Room)), Time);holds_at(neg(at(Agent2, Outside)), Time);not(adjacent(Room, Outside))),
      some(Outside,
           '$kolem_Fn_346'(Agent1, Agent2, Room, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1937).

 /*  holds_at(at(Agent1, Room), Time) :-
       happens(inviteIn(Agent1, Agent2, Room), Time),
       some(Outside,
            '$kolem_Fn_346'(Agent1, Agent2, Room, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1937).

 /*  [happens(inviteIn(Agent1, Agent2, Room), Time), some(Outside, '$kolem_Fn_346'(Agent1, Agent2, Room, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(at(Agent1, Room), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1937).
axiom(holds_at(at(Agent1, Room), Time),
   
    [ happens(inviteIn(Agent1, Agent2, Room), Time),
      some(Outside,
           '$kolem_Fn_346'(Agent1, Agent2, Room, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1937).

 /*  holds_at(at(Agent2, Outside), Time) :-
       happens(inviteIn(Agent1, Agent2, Room), Time),
       some(Outside,
            '$kolem_Fn_346'(Agent1, Agent2, Room, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1937).

 /*  [happens(inviteIn(Agent1, Agent2, Room), Time), some(Outside, '$kolem_Fn_346'(Agent1, Agent2, Room, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(at(Agent2, Outside), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1937).
axiom(holds_at(at(Agent2, Outside), Time),
   
    [ happens(inviteIn(Agent1, Agent2, Room), Time),
      some(Outside,
           '$kolem_Fn_346'(Agent1, Agent2, Room, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1937).

 /*  adjacent(Room, Outside) :-
       happens(inviteIn(Agent1, Agent2, Room), Time),
       some(Outside,
            '$kolem_Fn_346'(Agent1, Agent2, Room, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1937).

 /*  [happens(inviteIn(Agent1, Agent2, Room), Time), some(Outside, '$kolem_Fn_346'(Agent1, Agent2, Room, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          adjacent(Room, Outside)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1937).
axiom(adjacent(Room, Outside),
   
    [ happens(inviteIn(Agent1, Agent2, Room), Time),
      some(Outside,
           '$kolem_Fn_346'(Agent1, Agent2, Room, Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1940
%; An effect axiom states that if
%; an agent invites another agent into a room,
%; the second agent will be invited into the room by the first agent:
% [agent1,agent2,room,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1944
% Initiates(InviteIn(agent1,agent2,room),
%           InvitedIn(agent2,room,agent1),
%           time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1946
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1944).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(inviteIn(Agent1, Agent2, Room),
                    invitedIn(Agent2, Room, Agent1),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1944).
axiom(initiates(inviteIn(Agent1, Agent2, Room), invitedIn(Agent2, Room, Agent1), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1948
%; agent intends to walk into room.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1949
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1950).
% event IntendToWalkIn(agent,room)
event(intendToWalkIn(agent,room)).
==> mpred_prop(intendToWalkIn(agent,room),event).
==> meta_argtypes(intendToWalkIn(agent,room)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1950
%; agent has the intention to walk into room.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1951
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1952).
% fluent IntentionToWalkIn(agent,room)
fluent(intentionToWalkIn(agent,room)).
==> mpred_prop(intentionToWalkIn(agent,room),fluent).
==> meta_argtypes(intentionToWalkIn(agent,room)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1952
%; agent acts on the intention to walk into room.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1953
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1954).
% fluent ActOnIntentionToWalkIn(agent,room)
fluent(actOnIntentionToWalkIn(agent,room)).
==> mpred_prop(actOnIntentionToWalkIn(agent,room),fluent).
==> meta_argtypes(actOnIntentionToWalkIn(agent,room)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1954
% noninertial ActOnIntentionToWalkIn
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1954).
==> noninertial(actOnIntentionToWalkIn).
%; A trigger axiom states that
%; if an agent is invited into a room by another agent,
%; the first agent likes the second agent, and
%; the first agent does not already have the intention to
%; walk into the room,
%; the first agent intends to walk into the room:
% [agent1,agent2,room,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1963
% HoldsAt(InvitedIn(agent1,room,agent2),time) &
% HoldsAt(Like(agent1,agent2),time) &
% !HoldsAt(IntentionToWalkIn(agent1,room),time) ->
% Happens(IntendToWalkIn(agent1,room),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1966
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1963).

 /*  holds_at(invitedIn(Agent1, Room, Agent2), Time), holds_at(like(Agent1, Agent2), Time), holds_at(neg(intentionToWalkIn(Agent1, Room)), Time) ->
       happens(intendToWalkIn(Agent1, Room), Time).
 */

 /*  happens(intendToWalkIn(Agent1, Room), Time) :-
       holds_at(invitedIn(Agent1, Room, Agent2), Time),
       holds_at(like(Agent1, Agent2), Time),
       holds_at(neg(intentionToWalkIn(Agent1, Room)), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1963).

 /*  [holds_at(invitedIn(Agent1, Room, Agent2), Time), holds_at(like(Agent1, Agent2), Time), holds_at(neg(intentionToWalkIn(Agent1, Room)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(intendToWalkIn(Agent1, Room), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1963).
axiom(happens(intendToWalkIn(Agent1, Room), Time),
   
    [ holds_at(invitedIn(Agent1, Room, Agent2), Time),
      holds_at(like(Agent1, Agent2), Time),
      holds_at(neg(intentionToWalkIn(Agent1, Room)), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1963).

 /*  not(holds_at(invitedIn(Agent1, Room, Agent2), Time)) :-
       ( holds_at(like(Agent1, Agent2), Time),
         holds_at(neg(intentionToWalkIn(Agent1, Room)), Time)
       ),
       not(happens(intendToWalkIn(Agent1, Room), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1963).

 /*  [holds_at(like(Agent1, Agent2), Time), holds_at(neg(intentionToWalkIn(Agent1, Room)), Time), not(happens(intendToWalkIn(Agent1, Room), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(invitedIn(Agent1, Room, Agent2)),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1963).
axiom(holds_at(neg(invitedIn(Agent1, Room, Agent2)), Time),
   
    [ holds_at(like(Agent1, Agent2), Time),
      holds_at(neg(intentionToWalkIn(Agent1, Room)), Time),
      not(happens(intendToWalkIn(Agent1, Room), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1963).

 /*  not(holds_at(like(Agent1, Agent2), Time)) :-
       holds_at(neg(intentionToWalkIn(Agent1, Room)), Time),
       holds_at(invitedIn(Agent1, Room, Agent2), Time),
       not(happens(intendToWalkIn(Agent1, Room), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1963).

 /*  [holds_at(neg(intentionToWalkIn(Agent1, Room)), Time), holds_at(invitedIn(Agent1, Room, Agent2), Time), not(happens(intendToWalkIn(Agent1, Room), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(like(Agent1, Agent2)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1963).
axiom(holds_at(neg(like(Agent1, Agent2)), Time),
   
    [ holds_at(neg(intentionToWalkIn(Agent1, Room)), Time),
      holds_at(invitedIn(Agent1, Room, Agent2), Time),
      not(happens(intendToWalkIn(Agent1, Room), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1963).

 /*  not(holds_at(neg(intentionToWalkIn(Agent1, Room)), Time)) :-
       holds_at(like(Agent1, Agent2), Time),
       holds_at(invitedIn(Agent1, Room, Agent2), Time),
       not(happens(intendToWalkIn(Agent1, Room), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1963).

 /*  [holds_at(like(Agent1, Agent2), Time), holds_at(invitedIn(Agent1, Room, Agent2), Time), not(happens(intendToWalkIn(Agent1, Room), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(intentionToWalkIn(Agent1, Room), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1963).
axiom(holds_at(intentionToWalkIn(Agent1, Room), Time),
   
    [ holds_at(like(Agent1, Agent2), Time),
      holds_at(invitedIn(Agent1, Room, Agent2), Time),
      not(happens(intendToWalkIn(Agent1, Room), Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1968
%; An effect axiom states that
%; if an agent intends to walk into a room,
%; the agent will have the intention to walk into the room:
% [agent,room,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1972
% Initiates(IntendToWalkIn(agent,room),
%           IntentionToWalkIn(agent,room),
%           time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1974
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1972).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(intendToWalkIn(Agent, Room),
                    intentionToWalkIn(Agent, Room),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1972).
axiom(initiates(intendToWalkIn(Agent, Room), intentionToWalkIn(Agent, Room), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1976
%; Two trigger axioms state that
%; if an agent has the intention to walk into a room,
%; the agent acts on the intention to walk into the room,
%; the agent is at a location,
%; side one (two) of a door is the room,
%; side two (one) of the door is the location,
%; agent will walk through side two (one) of the door:
% [agent,room,location,door,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1984
% HoldsAt(IntentionToWalkIn(agent,room),time) &
% HoldsAt(ActOnIntentionToWalkIn(agent,room),time) &
% HoldsAt(At(agent,location),time) &
% Side1(door)=room &
% Side2(door)=location ->
% Happens(WalkThroughDoor21(agent,door),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1989
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1984).

 /*  holds_at(intentionToWalkIn(Agent, Room), Time), holds_at(actOnIntentionToWalkIn(Agent, Room), Time), holds_at(at(Agent, Location), Time), equals(side1(Door), Room), equals(side2(Door), Location) ->
       happens(walkThroughDoor21(Agent, Door), Time).
 */

 /*  happens(walkThroughDoor21(Agent, Door), Time) :-
       holds_at(intentionToWalkIn(Agent, Room), Time),
       holds_at(actOnIntentionToWalkIn(Agent, Room), Time),
       holds_at(at(Agent, Location), Time),
       equals(side1(Door), Room),
       equals(side2(Door), Location).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1984).

 /*  [holds_at(intentionToWalkIn(Agent, Room), Time), holds_at(actOnIntentionToWalkIn(Agent, Room), Time), holds_at(at(Agent, Location), Time), equals(side1(Door), Room), equals(side2(Door), Location)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(walkThroughDoor21(Agent, Door), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1984).
axiom(happens(walkThroughDoor21(Agent, Door), Time),
   
    [ holds_at(intentionToWalkIn(Agent, Room), Time),
      holds_at(actOnIntentionToWalkIn(Agent, Room), Time),
      holds_at(at(Agent, Location), Time),
      equals(side1(Door), Room),
      equals(side2(Door), Location)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1984).

 /*  not(holds_at(intentionToWalkIn(Agent, Room), Time)) :-
       ( holds_at(actOnIntentionToWalkIn(Agent, Room), Time),
         holds_at(at(Agent, Location), Time),
         equals(side1(Door), Room),
         equals(side2(Door), Location)
       ),
       not(happens(walkThroughDoor21(Agent, Door), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1984).

 /*  [holds_at(actOnIntentionToWalkIn(Agent, Room), Time), holds_at(at(Agent, Location), Time), equals(side1(Door), Room), equals(side2(Door), Location), not(happens(walkThroughDoor21(Agent, Door), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(intentionToWalkIn(Agent, Room)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1984).
axiom(holds_at(neg(intentionToWalkIn(Agent, Room)), Time),
   
    [ holds_at(actOnIntentionToWalkIn(Agent, Room), Time),
      holds_at(at(Agent, Location), Time),
      equals(side1(Door), Room),
      equals(side2(Door), Location),
      not(happens(walkThroughDoor21(Agent, Door), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1984).

 /*  not(holds_at(actOnIntentionToWalkIn(Agent, Room), Time)) :-
       ( holds_at(at(Agent, Location), Time),
         equals(side1(Door), Room),
         equals(side2(Door), Location)
       ),
       holds_at(intentionToWalkIn(Agent, Room), Time),
       not(happens(walkThroughDoor21(Agent, Door), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1984).

 /*  [holds_at(at(Agent, Location), Time), equals(side1(Door), Room), equals(side2(Door), Location), holds_at(intentionToWalkIn(Agent, Room), Time), not(happens(walkThroughDoor21(Agent, Door), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(actOnIntentionToWalkIn(Agent, Room)),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1984).
axiom(holds_at(neg(actOnIntentionToWalkIn(Agent, Room)), Time),
   
    [ holds_at(at(Agent, Location), Time),
      equals(side1(Door), Room),
      equals(side2(Door), Location),
      holds_at(intentionToWalkIn(Agent, Room), Time),
      not(happens(walkThroughDoor21(Agent, Door), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1984).

 /*  not(holds_at(at(Agent, Location), Time)) :-
       ( equals(side1(Door), Room),
         equals(side2(Door), Location)
       ),
       holds_at(actOnIntentionToWalkIn(Agent, Room), Time),
       holds_at(intentionToWalkIn(Agent, Room), Time),
       not(happens(walkThroughDoor21(Agent, Door), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1984).

 /*  [equals(side1(Door), Room), equals(side2(Door), Location), holds_at(actOnIntentionToWalkIn(Agent, Room), Time), holds_at(intentionToWalkIn(Agent, Room), Time), not(happens(walkThroughDoor21(Agent, Door), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(at(Agent, Location)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1984).
axiom(holds_at(neg(at(Agent, Location)), Time),
   
    [ equals(side1(Door), Room),
      equals(side2(Door), Location),
      holds_at(actOnIntentionToWalkIn(Agent, Room), Time),
      holds_at(intentionToWalkIn(Agent, Room), Time),
      not(happens(walkThroughDoor21(Agent, Door), Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1991
% [agent,room,location,door,time]
% HoldsAt(IntentionToWalkIn(agent,room),time) &
% HoldsAt(ActOnIntentionToWalkIn(agent,room),time) &
% HoldsAt(At(agent,location),time) &
% Side2(door)=room &
% Side1(door)=location ->
% Happens(WalkThroughDoor12(agent,door),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1997
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1993).

 /*  holds_at(intentionToWalkIn(Agent, Room), Time), holds_at(actOnIntentionToWalkIn(Agent, Room), Time), holds_at(at(Agent, Location), Time), equals(side2(Door), Room), equals(side1(Door), Location) ->
       happens(walkThroughDoor12(Agent, Door), Time).
 */

 /*  happens(walkThroughDoor12(Agent, Door), Time) :-
       holds_at(intentionToWalkIn(Agent, Room), Time),
       holds_at(actOnIntentionToWalkIn(Agent, Room), Time),
       holds_at(at(Agent, Location), Time),
       equals(side2(Door), Room),
       equals(side1(Door), Location).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1993).

 /*  [holds_at(intentionToWalkIn(Agent, Room), Time), holds_at(actOnIntentionToWalkIn(Agent, Room), Time), holds_at(at(Agent, Location), Time), equals(side2(Door), Room), equals(side1(Door), Location)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(walkThroughDoor12(Agent, Door), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1993).
axiom(happens(walkThroughDoor12(Agent, Door), Time),
   
    [ holds_at(intentionToWalkIn(Agent, Room), Time),
      holds_at(actOnIntentionToWalkIn(Agent, Room), Time),
      holds_at(at(Agent, Location), Time),
      equals(side2(Door), Room),
      equals(side1(Door), Location)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1993).

 /*  not(holds_at(intentionToWalkIn(Agent, Room), Time)) :-
       ( holds_at(actOnIntentionToWalkIn(Agent, Room), Time),
         holds_at(at(Agent, Location), Time),
         equals(side2(Door), Room),
         equals(side1(Door), Location)
       ),
       not(happens(walkThroughDoor12(Agent, Door), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1993).

 /*  [holds_at(actOnIntentionToWalkIn(Agent, Room), Time), holds_at(at(Agent, Location), Time), equals(side2(Door), Room), equals(side1(Door), Location), not(happens(walkThroughDoor12(Agent, Door), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(intentionToWalkIn(Agent, Room)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1993).
axiom(holds_at(neg(intentionToWalkIn(Agent, Room)), Time),
   
    [ holds_at(actOnIntentionToWalkIn(Agent, Room), Time),
      holds_at(at(Agent, Location), Time),
      equals(side2(Door), Room),
      equals(side1(Door), Location),
      not(happens(walkThroughDoor12(Agent, Door), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1993).

 /*  not(holds_at(actOnIntentionToWalkIn(Agent, Room), Time)) :-
       ( holds_at(at(Agent, Location), Time),
         equals(side2(Door), Room),
         equals(side1(Door), Location)
       ),
       holds_at(intentionToWalkIn(Agent, Room), Time),
       not(happens(walkThroughDoor12(Agent, Door), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1993).

 /*  [holds_at(at(Agent, Location), Time), equals(side2(Door), Room), equals(side1(Door), Location), holds_at(intentionToWalkIn(Agent, Room), Time), not(happens(walkThroughDoor12(Agent, Door), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(actOnIntentionToWalkIn(Agent, Room)),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1993).
axiom(holds_at(neg(actOnIntentionToWalkIn(Agent, Room)), Time),
   
    [ holds_at(at(Agent, Location), Time),
      equals(side2(Door), Room),
      equals(side1(Door), Location),
      holds_at(intentionToWalkIn(Agent, Room), Time),
      not(happens(walkThroughDoor12(Agent, Door), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1993).

 /*  not(holds_at(at(Agent, Location), Time)) :-
       ( equals(side2(Door), Room),
         equals(side1(Door), Location)
       ),
       holds_at(actOnIntentionToWalkIn(Agent, Room), Time),
       holds_at(intentionToWalkIn(Agent, Room), Time),
       not(happens(walkThroughDoor12(Agent, Door), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1993).

 /*  [equals(side2(Door), Room), equals(side1(Door), Location), holds_at(actOnIntentionToWalkIn(Agent, Room), Time), holds_at(intentionToWalkIn(Agent, Room), Time), not(happens(walkThroughDoor12(Agent, Door), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(at(Agent, Location)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',1993).
axiom(holds_at(neg(at(Agent, Location)), Time),
   
    [ equals(side2(Door), Room),
      equals(side1(Door), Location),
      holds_at(actOnIntentionToWalkIn(Agent, Room), Time),
      holds_at(intentionToWalkIn(Agent, Room), Time),
      not(happens(walkThroughDoor12(Agent, Door), Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:1999
%; Two effect axioms state that
%; if side one (two) of a door is a room and
%; an agent walks through side two (one) of the door,
%; the agent will no longer have the intention to
%; walk into the room:
% [agent,room,door,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2005
% Side1(door)=room ->
% Terminates(WalkThroughDoor21(agent,door),
%            IntentionToWalkIn(agent,room),
%            time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2008
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2005).

 /*  [equals(side1(Door), Room)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(walkThroughDoor21(Agent, Door),
                     intentionToWalkIn(Agent, Room),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2005).
axiom(terminates(walkThroughDoor21(Agent, Door), intentionToWalkIn(Agent, Room), Time),
    [equals(side1(Door), Room)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2010
% [agent,room,door,time]
% Side2(door)=room ->
% Terminates(WalkThroughDoor12(agent,door),
%            IntentionToWalkIn(agent,room),
%            time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2014
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2012).

 /*  [equals(side2(Door), Room)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(walkThroughDoor12(Agent, Door),
                     intentionToWalkIn(Agent, Room),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2012).
axiom(terminates(walkThroughDoor12(Agent, Door), intentionToWalkIn(Agent, Room), Time),
    [equals(side2(Door), Room)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2016
%; agent greets object.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2017
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2018).
% event Greet(agent,object)
event(greet(agent,object)).
==> mpred_prop(greet(agent,object),event).
==> meta_argtypes(greet(agent,object)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2019
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2020).
% event SayPleasedToMeet(agent,agent)
event(sayPleasedToMeet(agent,agent)).
==> mpred_prop(sayPleasedToMeet(agent,agent),event).
==> meta_argtypes(sayPleasedToMeet(agent,agent)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2021
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2022).
%; agent says goodbye to object.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2022
% event SayGoodbye(agent,object)
event(sayGoodbye(agent,object)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2022).
==> mpred_prop(sayGoodbye(agent,object),event).
==> meta_argtypes(sayGoodbye(agent,object)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2024
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2025).
% event TalkAbout(agent,content)
event(talkAbout(agent,content)).
==> mpred_prop(talkAbout(agent,content),event).
==> meta_argtypes(talkAbout(agent,content)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2026
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2027).
% event Converse(agent,agent)
event(converse(agent,agent)).
==> mpred_prop(converse(agent,agent),event).
==> meta_argtypes(converse(agent,agent)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2028
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2029).
% [agent1,agent2,time]
% Happens(Converse(agent1,agent2),time) ->
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2030
% {location}% 
% HoldsAt(At(agent1,location),time) &
% HoldsAt(At(agent2,location),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2032
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2031).

 /*  exists([Location],
    happens(converse(Agent1, Agent2), Time) ->
       holds_at(at(Agent1, Location), Time),
       holds_at(at(Agent2, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2031).

 /*  not(happens(converse(Agent1, Agent2), Time)) :-
       (   not(holds_at(at(Agent1, Location), Time))
       ;   not(holds_at(at(Agent2, Location), Time))
       ),
       some(Location, '$kolem_Fn_347'(Agent1, Agent2, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2031).

 /*  [(holds_at(neg(at(Agent1, Location)), Time);holds_at(neg(at(Agent2, Location)), Time)), some(Location, '$kolem_Fn_347'(Agent1, Agent2, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(converse(Agent1, Agent2), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2031).
axiom(not(happens(converse(Agent1, Agent2), Time)),
   
    [  (holds_at(neg(at(Agent1, Location)), Time);holds_at(neg(at(Agent2, Location)), Time)),
      some(Location, '$kolem_Fn_347'(Agent1, Agent2, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2031).

 /*  holds_at(at(Agent1, Location), Time) :-
       happens(converse(Agent1, Agent2), Time),
       some(Location, '$kolem_Fn_347'(Agent1, Agent2, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2031).

 /*  [happens(converse(Agent1, Agent2), Time), some(Location, '$kolem_Fn_347'(Agent1, Agent2, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(at(Agent1, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2031).
axiom(holds_at(at(Agent1, Location), Time),
   
    [ happens(converse(Agent1, Agent2), Time),
      some(Location, '$kolem_Fn_347'(Agent1, Agent2, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2031).

 /*  holds_at(at(Agent2, Location), Time) :-
       happens(converse(Agent1, Agent2), Time),
       some(Location, '$kolem_Fn_347'(Agent1, Agent2, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2031).

 /*  [happens(converse(Agent1, Agent2), Time), some(Location, '$kolem_Fn_347'(Agent1, Agent2, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(at(Agent2, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2031).
axiom(holds_at(at(Agent2, Location), Time),
   
    [ happens(converse(Agent1, Agent2), Time),
      some(Location, '$kolem_Fn_347'(Agent1, Agent2, Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2034
%; A precondition axiom states that for
%; an agent to greet an object,
%; there must be a location such that
%; the agent is at the location and
%; the object is at the location:
% [agent,object,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2040
% Happens(Greet(agent,object),time) ->
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2041
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2040).
% {location}% 
% HoldsAt(At(agent,location),time) &
% HoldsAt(At(object,location),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2043
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2042).

 /*  exists([Location],
    happens(greet(Agent, Object), Time) ->
       holds_at(at(Agent, Location), Time),
       holds_at(at(Object, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2042).

 /*  not(happens(greet(Agent, Object), Time)) :-
       (   not(holds_at(at(Agent, Location), Time))
       ;   not(holds_at(at(Object, Location), Time))
       ),
       some(Location, '$kolem_Fn_348'(Agent, Object, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2042).

 /*  [(holds_at(neg(at(Agent, Location)), Time);holds_at(neg(at(Object, Location)), Time)), some(Location, '$kolem_Fn_348'(Agent, Object, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(greet(Agent, Object), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2042).
axiom(not(happens(greet(Agent, Object), Time)),
   
    [  (holds_at(neg(at(Agent, Location)), Time);holds_at(neg(at(Object, Location)), Time)),
      some(Location, '$kolem_Fn_348'(Agent, Object, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2042).

 /*  holds_at(at(Agent, Location), Time) :-
       happens(greet(Agent, Object), Time),
       some(Location, '$kolem_Fn_348'(Agent, Object, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2042).

 /*  [happens(greet(Agent, Object), Time), some(Location, '$kolem_Fn_348'(Agent, Object, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(at(Agent, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2042).
axiom(holds_at(at(Agent, Location), Time),
   
    [ happens(greet(Agent, Object), Time),
      some(Location, '$kolem_Fn_348'(Agent, Object, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2042).

 /*  holds_at(at(Object, Location), Time) :-
       happens(greet(Agent, Object), Time),
       some(Location, '$kolem_Fn_348'(Agent, Object, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2042).

 /*  [happens(greet(Agent, Object), Time), some(Location, '$kolem_Fn_348'(Agent, Object, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(at(Object, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2042).
axiom(holds_at(at(Object, Location), Time),
   
    [ happens(greet(Agent, Object), Time),
      some(Location, '$kolem_Fn_348'(Agent, Object, Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2045
% [agent,object,time]
% Happens(SayGoodbye(agent,object),time) ->
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2047
% {location}% 
% HoldsAt(At(agent,location),time) &
% HoldsAt(At(object,location),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2049
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2047).

 /*  exists([Location],
    happens(sayGoodbye(Agent, Object), Time) ->
       holds_at(at(Agent, Location), Time),
       holds_at(at(Object, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2047).

 /*  not(happens(sayGoodbye(Agent, Object), Time)) :-
       (   not(holds_at(at(Agent, Location), Time))
       ;   not(holds_at(at(Object, Location), Time))
       ),
       some(Location, '$kolem_Fn_349'(Agent, Object, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2047).

 /*  [(holds_at(neg(at(Agent, Location)), Time);holds_at(neg(at(Object, Location)), Time)), some(Location, '$kolem_Fn_349'(Agent, Object, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(sayGoodbye(Agent, Object), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2047).
axiom(not(happens(sayGoodbye(Agent, Object), Time)),
   
    [  (holds_at(neg(at(Agent, Location)), Time);holds_at(neg(at(Object, Location)), Time)),
      some(Location, '$kolem_Fn_349'(Agent, Object, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2047).

 /*  holds_at(at(Agent, Location), Time) :-
       happens(sayGoodbye(Agent, Object), Time),
       some(Location, '$kolem_Fn_349'(Agent, Object, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2047).

 /*  [happens(sayGoodbye(Agent, Object), Time), some(Location, '$kolem_Fn_349'(Agent, Object, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(at(Agent, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2047).
axiom(holds_at(at(Agent, Location), Time),
   
    [ happens(sayGoodbye(Agent, Object), Time),
      some(Location, '$kolem_Fn_349'(Agent, Object, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2047).

 /*  holds_at(at(Object, Location), Time) :-
       happens(sayGoodbye(Agent, Object), Time),
       some(Location, '$kolem_Fn_349'(Agent, Object, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2047).

 /*  [happens(sayGoodbye(Agent, Object), Time), some(Location, '$kolem_Fn_349'(Agent, Object, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(at(Object, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2047).
axiom(holds_at(at(Object, Location), Time),
   
    [ happens(sayGoodbye(Agent, Object), Time),
      some(Location, '$kolem_Fn_349'(Agent, Object, Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2051
%; speech: expression of emotions
%; agent cries for joy.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2054
% event CryForJoy(agent)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2054).
event(cryForJoy(agent)).
==> mpred_prop(cryForJoy(agent),event).
==> meta_argtypes(cryForJoy(agent)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2056
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2057).
%; A precondition axiom states that for
%; an agent to cry for joy,
%; the agent must be happy:
% [agent,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2060
% Happens(CryForJoy(agent),time) ->
% HoldsAt(Happy(agent),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2060).

 /*  happens(cryForJoy(Agent), Time) ->
       holds_at(happy(Agent), Time).
 */

 /*  holds_at(happy(Agent), Time) :-
       happens(cryForJoy(Agent), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2060).

 /*  [holds_at(metreqs(cryForJoy(Agent)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(cryForJoy(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2060).
axiom(requires(cryForJoy(Agent), Time),
    [holds_at(metreqs(cryForJoy(Agent)), Time)]).

 /*  [holds_at(happy(Agent), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(cryForJoy(Agent)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2060).
axiom(holds_at(metreqs(cryForJoy(Agent)), Time),
    [holds_at(happy(Agent), Time)]).

 /*  not(happens(cryForJoy(Agent), Time)) :-
       not(holds_at(happy(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2060).

 /*  [holds_at(neg(happy(Agent)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(cryForJoy(Agent), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2060).
axiom(not(happens(cryForJoy(Agent), Time)),
    [holds_at(neg(happy(Agent)), Time)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2063
% event Threaten(agent,agent,weapon)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2063).
event(threaten(agent,agent,weapon)).
==> mpred_prop(threaten(agent,agent,weapon),event).
==> meta_argtypes(threaten(agent,agent,weapon)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2065
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2066).
% event ReleaseFromThreat(agent,agent)
event(releaseFromThreat(agent,agent)).
==> mpred_prop(releaseFromThreat(agent,agent),event).
==> meta_argtypes(releaseFromThreat(agent,agent)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2067
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2068).
% fluent ThreatenedBy(agent,agent)
fluent(threatenedBy(agent,agent)).
==> mpred_prop(threatenedBy(agent,agent),fluent).
==> meta_argtypes(threatenedBy(agent,agent)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2069
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2070).
% [agent1,agent2,weapon,time]
% Happens(Threaten(agent1,agent2,weapon), time) ->
% HoldsAt(Holding(agent1,weapon),time) &
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2072
% {location}% 
% HoldsAt(At(agent1,location),time) &
% HoldsAt(At(agent2,location),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2074
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2073).

 /*  exists([Location],
    happens(threaten(Agent1, Agent2, Weapon), Time) ->
       holds_at(holding(Agent1, Weapon), Time),
       holds_at(at(Agent1, Location), Time),
       holds_at(at(Agent2, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2073).

 /*  not(happens(threaten(Agent1, Agent2, Weapon), Time)) :-
       (   not(holds_at(holding(Agent1, Weapon), Time))
       ;   not(holds_at(at(Agent1, Location), Time))
       ;   not(holds_at(at(Agent2, Location), Time))
       ),
       some(Location,
            '$kolem_Fn_350'(Agent1, Agent2, Weapon, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2073).

 /*  [(holds_at(neg(holding(Agent1, Weapon)), Time);holds_at(neg(at(Agent1, Location)), Time);holds_at(neg(at(Agent2, Location)), Time)), some(Location, '$kolem_Fn_350'(Agent1, Agent2, Weapon, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(threaten(Agent1, Agent2, Weapon),
                      Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2073).
axiom(not(happens(threaten(Agent1, Agent2, Weapon), Time)),
   
    [  (holds_at(neg(holding(Agent1, Weapon)), Time);holds_at(neg(at(Agent1, Location)), Time);holds_at(neg(at(Agent2, Location)), Time)),
      some(Location,
           '$kolem_Fn_350'(Agent1, Agent2, Weapon, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2073).

 /*  holds_at(holding(Agent1, Weapon), Time) :-
       happens(threaten(Agent1, Agent2, Weapon), Time),
       some(Location,
            '$kolem_Fn_350'(Agent1, Agent2, Weapon, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2073).

 /*  [happens(threaten(Agent1, Agent2, Weapon), Time), some(Location, '$kolem_Fn_350'(Agent1, Agent2, Weapon, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(holding(Agent1, Weapon), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2073).
axiom(holds_at(holding(Agent1, Weapon), Time),
   
    [ happens(threaten(Agent1, Agent2, Weapon), Time),
      some(Location,
           '$kolem_Fn_350'(Agent1, Agent2, Weapon, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2073).

 /*  holds_at(at(Agent1, Location), Time) :-
       happens(threaten(Agent1, Agent2, Weapon), Time),
       some(Location,
            '$kolem_Fn_350'(Agent1, Agent2, Weapon, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2073).

 /*  [happens(threaten(Agent1, Agent2, Weapon), Time), some(Location, '$kolem_Fn_350'(Agent1, Agent2, Weapon, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(at(Agent1, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2073).
axiom(holds_at(at(Agent1, Location), Time),
   
    [ happens(threaten(Agent1, Agent2, Weapon), Time),
      some(Location,
           '$kolem_Fn_350'(Agent1, Agent2, Weapon, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2073).

 /*  holds_at(at(Agent2, Location), Time) :-
       happens(threaten(Agent1, Agent2, Weapon), Time),
       some(Location,
            '$kolem_Fn_350'(Agent1, Agent2, Weapon, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2073).

 /*  [happens(threaten(Agent1, Agent2, Weapon), Time), some(Location, '$kolem_Fn_350'(Agent1, Agent2, Weapon, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(at(Agent2, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2073).
axiom(holds_at(at(Agent2, Location), Time),
   
    [ happens(threaten(Agent1, Agent2, Weapon), Time),
      some(Location,
           '$kolem_Fn_350'(Agent1, Agent2, Weapon, Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2076
% [agent1,agent2,weapon,time]
% Happens(Threaten(agent1,agent2,weapon), time) ->
% Happens(BecomeAngryAt(agent2,agent1),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2078

 /*  happens(threaten(Agent1, Agent2, Weapon), Time) ->
       happens(becomeAngryAt(Agent2, Agent1), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2078).

 /*  happens(becomeAngryAt(Agent2, Agent1), Time) :-
       happens(threaten(Agent1, Agent2, Weapon), Time).
 */

 /*  [happens(threaten(Agent1, Agent2, Weapon), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(becomeAngryAt(Agent2, Agent1), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2078).
axiom(happens(becomeAngryAt(Agent2, Agent1), Time),
    [happens(threaten(Agent1, Agent2, Weapon), Time)]).

 /*  not(happens(threaten(Agent1, Agent2, Weapon), Time)) :-
       not(happens(becomeAngryAt(Agent2, Agent1), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2078).

 /*  [not(happens(becomeAngryAt(Agent2, Agent1), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(threaten(Agent1, Agent2, Weapon),
                      Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2078).
axiom(not(happens(threaten(Agent1, Agent2, Weapon), Time)),
    [not(happens(becomeAngryAt(Agent2, Agent1), Time))]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2080
% [agent1,agent2,weapon,time]
% Initiates(Threaten(agent1,agent2,weapon),
%           ThreatenedBy(agent2,agent1),
%           time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2083
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2082).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(threaten(Agent1, Agent2, Weapon),
                    threatenedBy(Agent2, Agent1),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2082).
axiom(initiates(threaten(Agent1, Agent2, Weapon), threatenedBy(Agent2, Agent1), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2085
% [agent1,agent2,time]
% Terminates(ReleaseFromThreat(agent1,agent2),
%            ThreatenedBy(agent2,agent1),
%            time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2088
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2087).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(releaseFromThreat(Agent1, Agent2),
                     threatenedBy(Agent2, Agent1),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2087).
axiom(terminates(releaseFromThreat(Agent1, Agent2), threatenedBy(Agent2, Agent1), Time),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2090
% event Order(agent,agent,physobj)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2090).
event(order(agent,agent,physobj)).
==> mpred_prop(order(agent,agent,physobj),event).
==> meta_argtypes(order(agent,agent,physobj)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2092
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2093).
% fluent KnowOrder(agent,agent,physobj)
fluent(knowOrder(agent,agent,physobj)).
==> mpred_prop(knowOrder(agent,agent,physobj),fluent).
==> meta_argtypes(knowOrder(agent,agent,physobj)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2094
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2095).
% [agent1,agent2,physobj,time]
% Initiates(Order(agent1,agent2,physobj),
%           KnowOrder(agent2,agent1,physobj),
%           time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2097
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2095).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(order(Agent1, Agent2, Physobj),
                    knowOrder(Agent2, Agent1, Physobj),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2095).
axiom(initiates(order(Agent1, Agent2, Physobj), knowOrder(Agent2, Agent1, Physobj), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2099
% [agent1,agent2,physobj,time]
% Happens(Order(agent1,agent2,physobj),time) ->
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2101
% {location}% 
% HoldsAt(At(agent1,location),time) &
% HoldsAt(At(agent2,location),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2103
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2101).

 /*  exists([Location],
    happens(order(Agent1, Agent2, Physobj), Time) ->
       holds_at(at(Agent1, Location), Time),
       holds_at(at(Agent2, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2101).

 /*  not(happens(order(Agent1, Agent2, Physobj), Time)) :-
       (   not(holds_at(at(Agent1, Location), Time))
       ;   not(holds_at(at(Agent2, Location), Time))
       ),
       some(Location,
            '$kolem_Fn_351'(Agent1, Agent2, Physobj, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2101).

 /*  [(holds_at(neg(at(Agent1, Location)), Time);holds_at(neg(at(Agent2, Location)), Time)), some(Location, '$kolem_Fn_351'(Agent1, Agent2, Physobj, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(order(Agent1, Agent2, Physobj), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2101).
axiom(not(happens(order(Agent1, Agent2, Physobj), Time)),
   
    [  (holds_at(neg(at(Agent1, Location)), Time);holds_at(neg(at(Agent2, Location)), Time)),
      some(Location,
           '$kolem_Fn_351'(Agent1, Agent2, Physobj, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2101).

 /*  holds_at(at(Agent1, Location), Time) :-
       happens(order(Agent1, Agent2, Physobj), Time),
       some(Location,
            '$kolem_Fn_351'(Agent1, Agent2, Physobj, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2101).

 /*  [happens(order(Agent1, Agent2, Physobj), Time), some(Location, '$kolem_Fn_351'(Agent1, Agent2, Physobj, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(at(Agent1, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2101).
axiom(holds_at(at(Agent1, Location), Time),
   
    [ happens(order(Agent1, Agent2, Physobj), Time),
      some(Location,
           '$kolem_Fn_351'(Agent1, Agent2, Physobj, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2101).

 /*  holds_at(at(Agent2, Location), Time) :-
       happens(order(Agent1, Agent2, Physobj), Time),
       some(Location,
            '$kolem_Fn_351'(Agent1, Agent2, Physobj, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2101).

 /*  [happens(order(Agent1, Agent2, Physobj), Time), some(Location, '$kolem_Fn_351'(Agent1, Agent2, Physobj, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(at(Agent2, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2101).
axiom(holds_at(at(Agent2, Location), Time),
   
    [ happens(order(Agent1, Agent2, Physobj), Time),
      some(Location,
           '$kolem_Fn_351'(Agent1, Agent2, Physobj, Time))
    ]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2105
% event Request(agent,agent,physobj)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2105).
event(request(agent,agent,physobj)).
==> mpred_prop(request(agent,agent,physobj),event).
==> meta_argtypes(request(agent,agent,physobj)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2107
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2108).
% fluent KnowRequest(agent,agent,physobj)
fluent(knowRequest(agent,agent,physobj)).
==> mpred_prop(knowRequest(agent,agent,physobj),fluent).
==> meta_argtypes(knowRequest(agent,agent,physobj)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2109
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2110).
% [agent1,agent2,physobj,time]
% Initiates(Request(agent1,agent2,physobj),
%           KnowRequest(agent2,agent1,physobj),
%           time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2112
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2110).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(request(Agent1, Agent2, Physobj),
                    knowRequest(Agent2, Agent1, Physobj),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2110).
axiom(initiates(request(Agent1, Agent2, Physobj), knowRequest(Agent2, Agent1, Physobj), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2114
% [agent1,agent2,physobj,time]
% Happens(Request(agent1,agent2,physobj),time) ->
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2116
% {location}% 
% HoldsAt(At(agent1,location),time) &
% HoldsAt(At(agent2,location),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2118
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2116).

 /*  exists([Location],
    happens(request(Agent1, Agent2, Physobj), Time) ->
       holds_at(at(Agent1, Location), Time),
       holds_at(at(Agent2, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2116).

 /*  not(happens(request(Agent1, Agent2, Physobj), Time)) :-
       (   not(holds_at(at(Agent1, Location), Time))
       ;   not(holds_at(at(Agent2, Location), Time))
       ),
       some(Location,
            '$kolem_Fn_352'(Agent1, Agent2, Physobj, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2116).

 /*  [(holds_at(neg(at(Agent1, Location)), Time);holds_at(neg(at(Agent2, Location)), Time)), some(Location, '$kolem_Fn_352'(Agent1, Agent2, Physobj, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(request(Agent1, Agent2, Physobj),
                      Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2116).
axiom(not(happens(request(Agent1, Agent2, Physobj), Time)),
   
    [  (holds_at(neg(at(Agent1, Location)), Time);holds_at(neg(at(Agent2, Location)), Time)),
      some(Location,
           '$kolem_Fn_352'(Agent1, Agent2, Physobj, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2116).

 /*  holds_at(at(Agent1, Location), Time) :-
       happens(request(Agent1, Agent2, Physobj), Time),
       some(Location,
            '$kolem_Fn_352'(Agent1, Agent2, Physobj, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2116).

 /*  [happens(request(Agent1, Agent2, Physobj), Time), some(Location, '$kolem_Fn_352'(Agent1, Agent2, Physobj, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(at(Agent1, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2116).
axiom(holds_at(at(Agent1, Location), Time),
   
    [ happens(request(Agent1, Agent2, Physobj), Time),
      some(Location,
           '$kolem_Fn_352'(Agent1, Agent2, Physobj, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2116).

 /*  holds_at(at(Agent2, Location), Time) :-
       happens(request(Agent1, Agent2, Physobj), Time),
       some(Location,
            '$kolem_Fn_352'(Agent1, Agent2, Physobj, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2116).

 /*  [happens(request(Agent1, Agent2, Physobj), Time), some(Location, '$kolem_Fn_352'(Agent1, Agent2, Physobj, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(at(Agent2, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2116).
axiom(holds_at(at(Agent2, Location), Time),
   
    [ happens(request(Agent1, Agent2, Physobj), Time),
      some(Location,
           '$kolem_Fn_352'(Agent1, Agent2, Physobj, Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2120
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: ecnet/Sleep.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; The Sleep representation deals with the activity of sleeping and
%; body posture.
%; It is similar to the finite automaton representation of sleep
%; used in ThoughtTreasure \fullcite[chap. 7]{Mueller:1998}.
%;
%; @book{Mueller:1998,
%;   author = "Erik T. Mueller",
%;   year = "1998",
%;   title = "Natural Language Processing with \uppercase{T}hought\uppercase{T}reasure",
%;   address = "New York",
%;   publisher = "Signiform",
%; }
%;
%; sleep
%; agent wakes up.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2155
% event WakeUp(agent)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2155).
event(wakeUp(agent)).
==> mpred_prop(wakeUp(agent),event).
==> meta_argtypes(wakeUp(agent)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2157
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2158).
%; agent gets tired.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2158
% event GetTired(agent)
event(getTired(agent)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2158).
==> mpred_prop(getTired(agent),event).
==> meta_argtypes(getTired(agent)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2160
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2161).
%; agent falls asleep.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2161
% event FallAsleep(agent)
event(fallAsleep(agent)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2161).
==> mpred_prop(fallAsleep(agent),event).
==> meta_argtypes(fallAsleep(agent)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2163
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2164).
%; agent is asleep.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2164
% fluent Sleep0(agent)
fluent(sleep0(agent)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2164).
==> mpred_prop(sleep0(agent),fluent).
==> meta_argtypes(sleep0(agent)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2165
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2164).
%; agent is awake and in bed.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2166
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2167).
% fluent Sleep1(agent)
fluent(sleep1(agent)).
==> mpred_prop(sleep1(agent),fluent).
==> meta_argtypes(sleep1(agent)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2167
%; agent is awake, out of bed, and undressed.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2168
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2169).
% fluent Sleep2(agent)
fluent(sleep2(agent)).
==> mpred_prop(sleep2(agent),fluent).
==> meta_argtypes(sleep2(agent)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2169
%; agent is awake and dressed.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2170
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2171).
% fluent Sleep3(agent)
fluent(sleep3(agent)).
==> mpred_prop(sleep3(agent),fluent).
==> meta_argtypes(sleep3(agent)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2171
%; agent is tired and dressed.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2172
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2173).
% fluent Sleep4(agent)
fluent(sleep4(agent)).
==> mpred_prop(sleep4(agent),fluent).
==> meta_argtypes(sleep4(agent)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2173
%; agent is tired and undressed.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2174
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2175).
% fluent Sleep5(agent)
fluent(sleep5(agent)).
==> mpred_prop(sleep5(agent),fluent).
==> meta_argtypes(sleep5(agent)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2175
%; agent is in bed, waiting to fall asleep.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2176
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2177).
% fluent Sleep6(agent)
fluent(sleep6(agent)).
==> mpred_prop(sleep6(agent),fluent).
==> meta_argtypes(sleep6(agent)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2178
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2179).
%; At any time, an agent is in one of seven sleep states:

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2179
% xor Sleep0, Sleep1, Sleep2, Sleep3, Sleep4, Sleep5, Sleep6
==> xor([sleep0,sleep1,sleep2,sleep3,sleep4,sleep5,sleep6]).
%; constraints
%; agent is asleep.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2184
% fluent Asleep(agent)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2184).
fluent(asleep(agent)).
==> mpred_prop(asleep(agent),fluent).
==> meta_argtypes(asleep(agent)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2185
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2184).
%; agent is awake.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2186
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2187).
% fluent Awake(agent)
fluent(awake(agent)).
==> mpred_prop(awake(agent),fluent).
==> meta_argtypes(awake(agent)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2187
% noninertial Asleep
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2187).
==> noninertial(asleep).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2188
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2189).
% noninertial Awake
==> noninertial(awake).
%; Sleep0 indicates that the agent is asleep:
% [agent,time]
 
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2191
% HoldsAt(Asleep(agent),time) <-> HoldsAt(Sleep0(agent),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2191).

 /*  holds_at(asleep(Agent), Time) <->
       holds_at(sleep0(Agent), Time).
 */

 /*  [holds_at, asleep] <->
       [holds_at, sleep0].
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2191).

 /*  holds_at(asleep(Agent), Time) ->
       holds_at(sleep0(Agent), Time).
 */

 /*  holds_at(sleep0(Agent), Time) :-
       holds_at(asleep(Agent), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2191).

 /*  [holds_at(asleep(Agent), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(sleep0(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2191).
axiom(holds_at(sleep0(Agent), Time),
    [holds_at(asleep(Agent), Time)]).

 /*  not(holds_at(asleep(Agent), Time)) :-
       not(holds_at(sleep0(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2191).

 /*  [holds_at(neg(sleep0(Agent)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(asleep(Agent)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2191).
axiom(holds_at(neg(asleep(Agent)), Time),
    [holds_at(neg(sleep0(Agent)), Time)]).

 /*  holds_at(sleep0(Agent), Time) ->
       holds_at(asleep(Agent), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2191).

 /*  holds_at(asleep(Agent), Time) :-
       holds_at(sleep0(Agent), Time).
 */

 /*  [holds_at(sleep0(Agent), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(asleep(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2191).
axiom(holds_at(asleep(Agent), Time),
    [holds_at(sleep0(Agent), Time)]).

 /*  not(holds_at(sleep0(Agent), Time)) :-
       not(holds_at(asleep(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2191).

 /*  [holds_at(neg(asleep(Agent)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(sleep0(Agent)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2191).
axiom(holds_at(neg(sleep0(Agent)), Time),
    [holds_at(neg(asleep(Agent)), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2193
%; In all other sleep states, the agent is awake:
% [agent,time]
% HoldsAt(Awake(agent),time) <->
% HoldsAt(Sleep1(agent),time) |
% HoldsAt(Sleep2(agent),time) |
% HoldsAt(Sleep3(agent),time) |
% HoldsAt(Sleep4(agent),time) |
% HoldsAt(Sleep5(agent),time) |
% HoldsAt(Sleep6(agent),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2201
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2195).

 /*  holds_at(awake(Agent), Time) <->
       (   holds_at(sleep1(Agent), Time)
       ;   holds_at(sleep2(Agent), Time)
       ;   holds_at(sleep3(Agent), Time)
       ;   holds_at(sleep4(Agent), Time)
       ;   holds_at(sleep5(Agent), Time)
       ;   holds_at(sleep6(Agent), Time)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2195).

 /*  [holds_at, awake] <->
       
       [  (;),
         holds_at,
         sleep1,
          (;),
         holds_at,
         sleep2,
          (;),
         holds_at,
         sleep3,
          (;),
         holds_at,
         sleep4,
          (;),
         holds_at,
         sleep5,
         holds_at,
         sleep6
       ].
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2195).

 /*  holds_at(awake(Agent), Time) ->
       (   holds_at(sleep1(Agent), Time)
       ;   holds_at(sleep2(Agent), Time)
       ;   holds_at(sleep3(Agent), Time)
       ;   holds_at(sleep4(Agent), Time)
       ;   holds_at(sleep5(Agent), Time)
       ;   holds_at(sleep6(Agent), Time)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2195).

 /*  holds_at(sleep1(Agent), Time) :-
       ( not(holds_at(sleep2(Agent), Time)),
         not(holds_at(sleep3(Agent), Time)),
         not(holds_at(sleep4(Agent), Time)),
         not(holds_at(sleep5(Agent), Time)),
         not(holds_at(sleep6(Agent), Time))
       ),
       holds_at(awake(Agent), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2195).

 /*  [holds_at(neg(sleep2(Agent)), Time), holds_at(neg(sleep3(Agent)), Time), holds_at(neg(sleep4(Agent)), Time), holds_at(neg(sleep5(Agent)), Time), holds_at(neg(sleep6(Agent)), Time), holds_at(awake(Agent), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(sleep1(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2195).
axiom(holds_at(sleep1(Agent), Time),
   
    [ holds_at(neg(sleep2(Agent)), Time),
      holds_at(neg(sleep3(Agent)), Time),
      holds_at(neg(sleep4(Agent)), Time),
      holds_at(neg(sleep5(Agent)), Time),
      holds_at(neg(sleep6(Agent)), Time),
      holds_at(awake(Agent), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2195).

 /*  holds_at(sleep2(Agent), Time) :-
       ( not(holds_at(sleep3(Agent), Time)),
         not(holds_at(sleep4(Agent), Time)),
         not(holds_at(sleep5(Agent), Time)),
         not(holds_at(sleep6(Agent), Time))
       ),
       not(holds_at(sleep1(Agent), Time)),
       holds_at(awake(Agent), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2195).

 /*  [holds_at(neg(sleep3(Agent)), Time), holds_at(neg(sleep4(Agent)), Time), holds_at(neg(sleep5(Agent)), Time), holds_at(neg(sleep6(Agent)), Time), holds_at(neg(sleep1(Agent)), Time), holds_at(awake(Agent), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(sleep2(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2195).
axiom(holds_at(sleep2(Agent), Time),
   
    [ holds_at(neg(sleep3(Agent)), Time),
      holds_at(neg(sleep4(Agent)), Time),
      holds_at(neg(sleep5(Agent)), Time),
      holds_at(neg(sleep6(Agent)), Time),
      holds_at(neg(sleep1(Agent)), Time),
      holds_at(awake(Agent), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2195).

 /*  holds_at(sleep3(Agent), Time) :-
       ( not(holds_at(sleep4(Agent), Time)),
         not(holds_at(sleep5(Agent), Time)),
         not(holds_at(sleep6(Agent), Time))
       ),
       not(holds_at(sleep2(Agent), Time)),
       not(holds_at(sleep1(Agent), Time)),
       holds_at(awake(Agent), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2195).

 /*  [holds_at(neg(sleep4(Agent)), Time), holds_at(neg(sleep5(Agent)), Time), holds_at(neg(sleep6(Agent)), Time), holds_at(neg(sleep2(Agent)), Time), holds_at(neg(sleep1(Agent)), Time), holds_at(awake(Agent), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(sleep3(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2195).
axiom(holds_at(sleep3(Agent), Time),
   
    [ holds_at(neg(sleep4(Agent)), Time),
      holds_at(neg(sleep5(Agent)), Time),
      holds_at(neg(sleep6(Agent)), Time),
      holds_at(neg(sleep2(Agent)), Time),
      holds_at(neg(sleep1(Agent)), Time),
      holds_at(awake(Agent), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2195).

 /*  holds_at(sleep4(Agent), Time) :-
       ( not(holds_at(sleep5(Agent), Time)),
         not(holds_at(sleep6(Agent), Time))
       ),
       not(holds_at(sleep3(Agent), Time)),
       not(holds_at(sleep2(Agent), Time)),
       not(holds_at(sleep1(Agent), Time)),
       holds_at(awake(Agent), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2195).

 /*  [holds_at(neg(sleep5(Agent)), Time), holds_at(neg(sleep6(Agent)), Time), holds_at(neg(sleep3(Agent)), Time), holds_at(neg(sleep2(Agent)), Time), holds_at(neg(sleep1(Agent)), Time), holds_at(awake(Agent), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(sleep4(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2195).
axiom(holds_at(sleep4(Agent), Time),
   
    [ holds_at(neg(sleep5(Agent)), Time),
      holds_at(neg(sleep6(Agent)), Time),
      holds_at(neg(sleep3(Agent)), Time),
      holds_at(neg(sleep2(Agent)), Time),
      holds_at(neg(sleep1(Agent)), Time),
      holds_at(awake(Agent), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2195).

 /*  holds_at(sleep5(Agent), Time) :-
       not(holds_at(sleep6(Agent), Time)),
       not(holds_at(sleep4(Agent), Time)),
       not(holds_at(sleep3(Agent), Time)),
       not(holds_at(sleep2(Agent), Time)),
       not(holds_at(sleep1(Agent), Time)),
       holds_at(awake(Agent), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2195).

 /*  [holds_at(neg(sleep6(Agent)), Time), holds_at(neg(sleep4(Agent)), Time), holds_at(neg(sleep3(Agent)), Time), holds_at(neg(sleep2(Agent)), Time), holds_at(neg(sleep1(Agent)), Time), holds_at(awake(Agent), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(sleep5(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2195).
axiom(holds_at(sleep5(Agent), Time),
   
    [ holds_at(neg(sleep6(Agent)), Time),
      holds_at(neg(sleep4(Agent)), Time),
      holds_at(neg(sleep3(Agent)), Time),
      holds_at(neg(sleep2(Agent)), Time),
      holds_at(neg(sleep1(Agent)), Time),
      holds_at(awake(Agent), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2195).

 /*  holds_at(sleep6(Agent), Time) :-
       not(holds_at(sleep5(Agent), Time)),
       not(holds_at(sleep4(Agent), Time)),
       not(holds_at(sleep3(Agent), Time)),
       not(holds_at(sleep2(Agent), Time)),
       not(holds_at(sleep1(Agent), Time)),
       holds_at(awake(Agent), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2195).

 /*  [holds_at(neg(sleep5(Agent)), Time), holds_at(neg(sleep4(Agent)), Time), holds_at(neg(sleep3(Agent)), Time), holds_at(neg(sleep2(Agent)), Time), holds_at(neg(sleep1(Agent)), Time), holds_at(awake(Agent), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(sleep6(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2195).
axiom(holds_at(sleep6(Agent), Time),
   
    [ holds_at(neg(sleep5(Agent)), Time),
      holds_at(neg(sleep4(Agent)), Time),
      holds_at(neg(sleep3(Agent)), Time),
      holds_at(neg(sleep2(Agent)), Time),
      holds_at(neg(sleep1(Agent)), Time),
      holds_at(awake(Agent), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2195).

 /*  not(holds_at(awake(Agent), Time)) :-
       not(holds_at(sleep1(Agent), Time)),
       not(holds_at(sleep2(Agent), Time)),
       not(holds_at(sleep3(Agent), Time)),
       not(holds_at(sleep4(Agent), Time)),
       not(holds_at(sleep5(Agent), Time)),
       not(holds_at(sleep6(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2195).

 /*  [holds_at(neg(sleep1(Agent)), Time), holds_at(neg(sleep2(Agent)), Time), holds_at(neg(sleep3(Agent)), Time), holds_at(neg(sleep4(Agent)), Time), holds_at(neg(sleep5(Agent)), Time), holds_at(neg(sleep6(Agent)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(awake(Agent)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2195).
axiom(holds_at(neg(awake(Agent)), Time),
   
    [ holds_at(neg(sleep1(Agent)), Time),
      holds_at(neg(sleep2(Agent)), Time),
      holds_at(neg(sleep3(Agent)), Time),
      holds_at(neg(sleep4(Agent)), Time),
      holds_at(neg(sleep5(Agent)), Time),
      holds_at(neg(sleep6(Agent)), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2195).

 /*  holds_at(sleep1(Agent), Time);holds_at(sleep2(Agent), Time);holds_at(sleep3(Agent), Time);holds_at(sleep4(Agent), Time);holds_at(sleep5(Agent), Time);holds_at(sleep6(Agent), Time) ->
       holds_at(awake(Agent), Time).
 */

 /*  holds_at(awake(Agent), Time) :-
       (   holds_at(sleep1(Agent), Time)
       ;   holds_at(sleep2(Agent), Time)
       ;   holds_at(sleep3(Agent), Time)
       ;   holds_at(sleep4(Agent), Time)
       ;   holds_at(sleep5(Agent), Time)
       ;   holds_at(sleep6(Agent), Time)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2195).

 /*  [(holds_at(sleep1(Agent), Time);holds_at(sleep2(Agent), Time);holds_at(sleep3(Agent), Time);holds_at(sleep4(Agent), Time);holds_at(sleep5(Agent), Time);holds_at(sleep6(Agent), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(awake(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2195).
axiom(holds_at(awake(Agent), Time),
   
    [  (holds_at(sleep1(Agent), Time);holds_at(sleep2(Agent), Time);holds_at(sleep3(Agent), Time);holds_at(sleep4(Agent), Time);holds_at(sleep5(Agent), Time);holds_at(sleep6(Agent), Time))
    ]).

 /*  not(holds_at(sleep1(Agent), Time)) :-
       not(holds_at(awake(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2195).

 /*  [holds_at(neg(awake(Agent)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(sleep1(Agent)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2195).
axiom(holds_at(neg(sleep1(Agent)), Time),
    [holds_at(neg(awake(Agent)), Time)]).

 /*  not(holds_at(sleep2(Agent), Time)) :-
       not(holds_at(awake(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2195).

 /*  [holds_at(neg(awake(Agent)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(sleep2(Agent)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2195).
axiom(holds_at(neg(sleep2(Agent)), Time),
    [holds_at(neg(awake(Agent)), Time)]).

 /*  not(holds_at(sleep3(Agent), Time)) :-
       not(holds_at(awake(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2195).

 /*  [holds_at(neg(awake(Agent)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(sleep3(Agent)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2195).
axiom(holds_at(neg(sleep3(Agent)), Time),
    [holds_at(neg(awake(Agent)), Time)]).

 /*  not(holds_at(sleep4(Agent), Time)) :-
       not(holds_at(awake(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2195).

 /*  [holds_at(neg(awake(Agent)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(sleep4(Agent)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2195).
axiom(holds_at(neg(sleep4(Agent)), Time),
    [holds_at(neg(awake(Agent)), Time)]).

 /*  not(holds_at(sleep5(Agent), Time)) :-
       not(holds_at(awake(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2195).

 /*  [holds_at(neg(awake(Agent)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(sleep5(Agent)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2195).
axiom(holds_at(neg(sleep5(Agent)), Time),
    [holds_at(neg(awake(Agent)), Time)]).

 /*  not(holds_at(sleep6(Agent), Time)) :-
       not(holds_at(awake(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2195).

 /*  [holds_at(neg(awake(Agent)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(sleep6(Agent)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2195).
axiom(holds_at(neg(sleep6(Agent)), Time),
    [holds_at(neg(awake(Agent)), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2203
%; A number of axioms are used to specify the transitions of
%; a finite automaton.
%;--
%; Waking up causes a transition from Sleep0
%; to Sleep1:
% [agent,time]
 
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2209
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2210).
% Terminates(WakeUp(agent),Sleep0(agent),time).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(wakeUp(Agent), sleep0(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2210).
axiom(terminates(wakeUp(Agent), sleep0(Agent), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2211
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2212).
% [agent,time]
 % Initiates(WakeUp(agent),Sleep1(agent),time).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(wakeUp(Agent), sleep1(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2212).
axiom(initiates(wakeUp(Agent), sleep1(Agent), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2213
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2214).
% [agent,time]
 % Happens(WakeUp(agent),time) -> HoldsAt(Sleep0(agent),time).

 /*  happens(wakeUp(Agent), Time) ->
       holds_at(sleep0(Agent), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2214).

 /*  holds_at(sleep0(Agent), Time) :-
       happens(wakeUp(Agent), Time).
 */

 /*  [holds_at(metreqs(wakeUp(Agent)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(wakeUp(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2214).
axiom(requires(wakeUp(Agent), Time),
    [holds_at(metreqs(wakeUp(Agent)), Time)]).

 /*  [holds_at(sleep0(Agent), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(wakeUp(Agent)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2214).
axiom(holds_at(metreqs(wakeUp(Agent)), Time),
    [holds_at(sleep0(Agent), Time)]).

 /*  not(happens(wakeUp(Agent), Time)) :-
       not(holds_at(sleep0(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2214).

 /*  [holds_at(neg(sleep0(Agent)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(wakeUp(Agent), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2214).
axiom(not(happens(wakeUp(Agent), Time)),
    [holds_at(neg(sleep0(Agent)), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2215
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2216).
%;--
%; Getting out of bed causes a transition from Sleep1
%; to Sleep2:
% [agent,bed,time]
 
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2219
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2220).
% Terminates(RiseFrom(agent,bed),Sleep1(agent),time).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(riseFrom(Agent, Bed),
                     sleep1(Agent),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2220).
axiom(terminates(riseFrom(Agent, Bed), sleep1(Agent), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2221
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2222).
% [agent,bed,time]
 % Initiates(RiseFrom(agent,bed),Sleep2(agent),time).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(riseFrom(Agent, Bed),
                    sleep2(Agent),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2222).
axiom(initiates(riseFrom(Agent, Bed), sleep2(Agent), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2223
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2224).
% [agent,bed,time]
% Happens(RiseFrom(agent,bed),time) -> HoldsAt(Sleep1(agent),time).

 /*  happens(riseFrom(Agent, Bed), Time) ->
       holds_at(sleep1(Agent), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2224).

 /*  holds_at(sleep1(Agent), Time) :-
       happens(riseFrom(Agent, Bed), Time).
 */

 /*  [holds_at(metreqs(riseFrom(Agent, Bed)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(riseFrom(Agent, Bed), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2224).
axiom(requires(riseFrom(Agent, Bed), Time),
    [holds_at(metreqs(riseFrom(Agent, Bed)), Time)]).

 /*  [holds_at(sleep1(Agent), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(riseFrom(Agent, Bed)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2224).
axiom(holds_at(metreqs(riseFrom(Agent, Bed)), Time),
    [holds_at(sleep1(Agent), Time)]).

 /*  not(happens(riseFrom(Agent, Bed), Time)) :-
       not(holds_at(sleep1(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2224).

 /*  [holds_at(neg(sleep1(Agent)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(riseFrom(Agent, Bed), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2224).
axiom(not(happens(riseFrom(Agent, Bed), Time)),
    [holds_at(neg(sleep1(Agent)), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2226
%;--
%; Getting dressed causes a transition from Sleep2
%; to Sleep3, the normal state of awakeness:
% [agent,time]
 
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2230
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2231).
% Terminates(GetDressed(agent),Sleep2(agent),time).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(getDressed(Agent), sleep2(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2231).
axiom(terminates(getDressed(Agent), sleep2(Agent), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2232
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2233).
% [agent,time]
 % Initiates(GetDressed(agent),Sleep3(agent),time).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(getDressed(Agent), sleep3(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2233).
axiom(initiates(getDressed(Agent), sleep3(Agent), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2234
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2235).
% [agent,time]
 % Happens(GetDressed(agent),time) -> HoldsAt(Sleep2(agent),time).

 /*  happens(getDressed(Agent), Time) ->
       holds_at(sleep2(Agent), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2235).

 /*  holds_at(sleep2(Agent), Time) :-
       happens(getDressed(Agent), Time).
 */

 /*  [holds_at(metreqs(getDressed(Agent)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(getDressed(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2235).
axiom(requires(getDressed(Agent), Time),
    [holds_at(metreqs(getDressed(Agent)), Time)]).

 /*  [holds_at(sleep2(Agent), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(getDressed(Agent)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2235).
axiom(holds_at(metreqs(getDressed(Agent)), Time),
    [holds_at(sleep2(Agent), Time)]).

 /*  not(happens(getDressed(Agent), Time)) :-
       not(holds_at(sleep2(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2235).

 /*  [holds_at(neg(sleep2(Agent)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(getDressed(Agent), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2235).
axiom(not(happens(getDressed(Agent), Time)),
    [holds_at(neg(sleep2(Agent)), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2236
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2237).
%;--
%; Getting tired causes a transition from Sleep3
%; to Sleep4:
% [agent,time]
 
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2240
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2241).
% Terminates(GetTired(agent),Sleep3(agent),time).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(getTired(Agent), sleep3(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2241).
axiom(terminates(getTired(Agent), sleep3(Agent), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2242
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2243).
% [agent,time]
 % Initiates(GetTired(agent),Sleep4(agent),time).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(getTired(Agent), sleep4(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2243).
axiom(initiates(getTired(Agent), sleep4(Agent), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2244
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2245).
% [agent,time]
 % Happens(GetTired(agent),time) -> HoldsAt(Sleep3(agent),time).

 /*  happens(getTired(Agent), Time) ->
       holds_at(sleep3(Agent), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2245).

 /*  holds_at(sleep3(Agent), Time) :-
       happens(getTired(Agent), Time).
 */

 /*  [holds_at(metreqs(getTired(Agent)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(getTired(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2245).
axiom(requires(getTired(Agent), Time),
    [holds_at(metreqs(getTired(Agent)), Time)]).

 /*  [holds_at(sleep3(Agent), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(getTired(Agent)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2245).
axiom(holds_at(metreqs(getTired(Agent)), Time),
    [holds_at(sleep3(Agent), Time)]).

 /*  not(happens(getTired(Agent), Time)) :-
       not(holds_at(sleep3(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2245).

 /*  [holds_at(neg(sleep3(Agent)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(getTired(Agent), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2245).
axiom(not(happens(getTired(Agent), Time)),
    [holds_at(neg(sleep3(Agent)), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2246
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2247).
%;--
%; Getting undressed causes a transition from Sleep4
%; to Sleep5:
% [agent,time]
 
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2250
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2251).
% Terminates(GetUndressed(agent),Sleep4(agent),time).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(getUndressed(Agent), sleep4(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2251).
axiom(terminates(getUndressed(Agent), sleep4(Agent), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2252
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2253).
% [agent,time]
 % Initiates(GetUndressed(agent),Sleep5(agent),time).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(getUndressed(Agent), sleep5(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2253).
axiom(initiates(getUndressed(Agent), sleep5(Agent), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2254
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2255).
% [agent,time]
 % Happens(GetUndressed(agent),time) -> HoldsAt(Sleep4(agent),time).

 /*  happens(getUndressed(Agent), Time) ->
       holds_at(sleep4(Agent), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2255).

 /*  holds_at(sleep4(Agent), Time) :-
       happens(getUndressed(Agent), Time).
 */

 /*  [holds_at(metreqs(getUndressed(Agent)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(getUndressed(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2255).
axiom(requires(getUndressed(Agent), Time),
    [holds_at(metreqs(getUndressed(Agent)), Time)]).

 /*  [holds_at(sleep4(Agent), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(getUndressed(Agent)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2255).
axiom(holds_at(metreqs(getUndressed(Agent)), Time),
    [holds_at(sleep4(Agent), Time)]).

 /*  not(happens(getUndressed(Agent), Time)) :-
       not(holds_at(sleep4(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2255).

 /*  [holds_at(neg(sleep4(Agent)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(getUndressed(Agent), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2255).
axiom(not(happens(getUndressed(Agent), Time)),
    [holds_at(neg(sleep4(Agent)), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2256
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2257).
%;--
%; Lying on a bed causes a transition from Sleep5
%; to Sleep6:
% [agent,bed,time]
 
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2260
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2261).
% Terminates(LieOn(agent,bed),Sleep5(agent),time).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(lieOn(Agent, Bed), sleep5(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2261).
axiom(terminates(lieOn(Agent, Bed), sleep5(Agent), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2262
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2263).
% [agent,bed,time]
 % Initiates(LieOn(agent,bed),Sleep6(agent),time).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(lieOn(Agent, Bed), sleep6(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2263).
axiom(initiates(lieOn(Agent, Bed), sleep6(Agent), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2264
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2265).
% [agent,bed,time]
 % Happens(LieOn(agent,bed),time) -> HoldsAt(Sleep5(agent),time).

 /*  happens(lieOn(Agent, Bed), Time) ->
       holds_at(sleep5(Agent), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2265).

 /*  holds_at(sleep5(Agent), Time) :-
       happens(lieOn(Agent, Bed), Time).
 */

 /*  [holds_at(metreqs(lieOn(Agent, Bed)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(lieOn(Agent, Bed), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2265).
axiom(requires(lieOn(Agent, Bed), Time),
    [holds_at(metreqs(lieOn(Agent, Bed)), Time)]).

 /*  [holds_at(sleep5(Agent), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(lieOn(Agent, Bed)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2265).
axiom(holds_at(metreqs(lieOn(Agent, Bed)), Time),
    [holds_at(sleep5(Agent), Time)]).

 /*  not(happens(lieOn(Agent, Bed), Time)) :-
       not(holds_at(sleep5(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2265).

 /*  [holds_at(neg(sleep5(Agent)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(lieOn(Agent, Bed), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2265).
axiom(not(happens(lieOn(Agent, Bed), Time)),
    [holds_at(neg(sleep5(Agent)), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2266
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2267).
%;--
%; Falling asleep causes a transition from Sleep6
%; to Sleep0:
% [agent,time]
 
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2270
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2271).
% Terminates(FallAsleep(agent),Sleep6(agent),time).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(fallAsleep(Agent), sleep6(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2271).
axiom(terminates(fallAsleep(Agent), sleep6(Agent), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2272
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2273).
% [agent,time]
 % Initiates(FallAsleep(agent),Sleep0(agent),time).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(fallAsleep(Agent), sleep0(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2273).
axiom(initiates(fallAsleep(Agent), sleep0(Agent), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2274
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2275).
% [agent,time]
 % Happens(FallAsleep(agent),time) -> HoldsAt(Sleep6(agent),time).

 /*  happens(fallAsleep(Agent), Time) ->
       holds_at(sleep6(Agent), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2275).

 /*  holds_at(sleep6(Agent), Time) :-
       happens(fallAsleep(Agent), Time).
 */

 /*  [holds_at(metreqs(fallAsleep(Agent)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(fallAsleep(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2275).
axiom(requires(fallAsleep(Agent), Time),
    [holds_at(metreqs(fallAsleep(Agent)), Time)]).

 /*  [holds_at(sleep6(Agent), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(fallAsleep(Agent)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2275).
axiom(holds_at(metreqs(fallAsleep(Agent)), Time),
    [holds_at(sleep6(Agent), Time)]).

 /*  not(happens(fallAsleep(Agent), Time)) :-
       not(holds_at(sleep6(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2275).

 /*  [holds_at(neg(sleep6(Agent)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(fallAsleep(Agent), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2275).
axiom(not(happens(fallAsleep(Agent), Time)),
    [holds_at(neg(sleep6(Agent)), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2276
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2277).
%;--
%; agent acts on being in state Sleep5.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2279
% fluent ActOnSleep5(agent)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2279).
fluent(actOnSleep5(agent)).
==> mpred_prop(actOnSleep5(agent),fluent).
==> meta_argtypes(actOnSleep5(agent)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2280
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2281).
% noninertial ActOnSleep5
==> noninertial(actOnSleep5).
%; We reduce the number of models by asserting that
%; an agent only acts on being in state Sleep5 while in
%; that state:
% [agent,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2286
% !HoldsAt(Sleep5(agent),time) ->
% !HoldsAt(ActOnSleep5(agent),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2286).

 /*  holds_at(neg(sleep5(Agent)), Time) ->
       holds_at(neg(actOnSleep5(Agent)), Time).
 */

 /*  holds_at(neg(actOnSleep5(Agent)), Time) :-
       holds_at(neg(sleep5(Agent)), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2286).

 /*  [holds_at(neg(sleep5(Agent)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(actOnSleep5(Agent)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2286).
axiom(holds_at(neg(actOnSleep5(Agent)), Time),
    [holds_at(neg(sleep5(Agent)), Time)]).

 /*  not(holds_at(neg(sleep5(Agent)), Time)) :-
       not(holds_at(neg(actOnSleep5(Agent)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2286).

 /*  [holds_at(actOnSleep5(Agent), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(sleep5(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2286).
axiom(holds_at(sleep5(Agent), Time),
    [holds_at(actOnSleep5(Agent), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2289
%; Undressed is like IntentionToPlay
%; ActOnSleep5 is like ActOnIntentionToPlay
%; A trigger axiom states that if an agent is in state Sleep5,
%; the agent acts on this state, the agent is in a room, and
%; a bed is at the room, the agent lies on the bed:
% [agent,room,bed,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2296
% HoldsAt(Sleep5(agent),time) &
% HoldsAt(ActOnSleep5(agent),time) &
% HoldsAt(At(agent,room),time) &
% HoldsAt(At(bed,room),time) ->
% Happens(LieOn(agent,bed),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2300
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2296).

 /*  holds_at(sleep5(Agent), Time), holds_at(actOnSleep5(Agent), Time), holds_at(at(Agent, Room), Time), holds_at(at(Bed, Room), Time) ->
       happens(lieOn(Agent, Bed), Time).
 */

 /*  happens(lieOn(Agent, Bed), Time) :-
       holds_at(sleep5(Agent), Time),
       holds_at(actOnSleep5(Agent), Time),
       holds_at(at(Agent, Room), Time),
       holds_at(at(Bed, Room), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2296).

 /*  [holds_at(sleep5(Agent), Time), holds_at(actOnSleep5(Agent), Time), holds_at(at(Agent, Room), Time), holds_at(at(Bed, Room), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(lieOn(Agent, Bed), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2296).
axiom(happens(lieOn(Agent, Bed), Time),
   
    [ holds_at(sleep5(Agent), Time),
      holds_at(actOnSleep5(Agent), Time),
      holds_at(at(Agent, Room), Time),
      holds_at(at(Bed, Room), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2296).

 /*  not(holds_at(sleep5(Agent), Time)) :-
       ( holds_at(actOnSleep5(Agent), Time),
         holds_at(at(Agent, Room), Time),
         holds_at(at(Bed, Room), Time)
       ),
       not(happens(lieOn(Agent, Bed), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2296).

 /*  [holds_at(actOnSleep5(Agent), Time), holds_at(at(Agent, Room), Time), holds_at(at(Bed, Room), Time), not(happens(lieOn(Agent, Bed), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(sleep5(Agent)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2296).
axiom(holds_at(neg(sleep5(Agent)), Time),
   
    [ holds_at(actOnSleep5(Agent), Time),
      holds_at(at(Agent, Room), Time),
      holds_at(at(Bed, Room), Time),
      not(happens(lieOn(Agent, Bed), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2296).

 /*  not(holds_at(actOnSleep5(Agent), Time)) :-
       ( holds_at(at(Agent, Room), Time),
         holds_at(at(Bed, Room), Time)
       ),
       holds_at(sleep5(Agent), Time),
       not(happens(lieOn(Agent, Bed), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2296).

 /*  [holds_at(at(Agent, Room), Time), holds_at(at(Bed, Room), Time), holds_at(sleep5(Agent), Time), not(happens(lieOn(Agent, Bed), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(actOnSleep5(Agent)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2296).
axiom(holds_at(neg(actOnSleep5(Agent)), Time),
   
    [ holds_at(at(Agent, Room), Time),
      holds_at(at(Bed, Room), Time),
      holds_at(sleep5(Agent), Time),
      not(happens(lieOn(Agent, Bed), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2296).

 /*  not(holds_at(at(Agent, Room), Time)) :-
       holds_at(at(Bed, Room), Time),
       holds_at(actOnSleep5(Agent), Time),
       holds_at(sleep5(Agent), Time),
       not(happens(lieOn(Agent, Bed), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2296).

 /*  [holds_at(at(Bed, Room), Time), holds_at(actOnSleep5(Agent), Time), holds_at(sleep5(Agent), Time), not(happens(lieOn(Agent, Bed), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(at(Agent, Room)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2296).
axiom(holds_at(neg(at(Agent, Room)), Time),
   
    [ holds_at(at(Bed, Room), Time),
      holds_at(actOnSleep5(Agent), Time),
      holds_at(sleep5(Agent), Time),
      not(happens(lieOn(Agent, Bed), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2296).

 /*  not(holds_at(at(Bed, Room), Time)) :-
       holds_at(at(Agent, Room), Time),
       holds_at(actOnSleep5(Agent), Time),
       holds_at(sleep5(Agent), Time),
       not(happens(lieOn(Agent, Bed), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2296).

 /*  [holds_at(at(Agent, Room), Time), holds_at(actOnSleep5(Agent), Time), holds_at(sleep5(Agent), Time), not(happens(lieOn(Agent, Bed), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(at(Bed, Room)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2296).
axiom(holds_at(neg(at(Bed, Room)), Time),
   
    [ holds_at(at(Agent, Room), Time),
      holds_at(actOnSleep5(Agent), Time),
      holds_at(sleep5(Agent), Time),
      not(happens(lieOn(Agent, Bed), Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2302
%; A precondition axiom states that for
%; an agent to lie on a bed,
%; the agent must be in state Sleep5,
%; the agent must act on this state, and
%; there must be a room such that
%; the agent is in the room and the bed is in the room:
% [agent,bed,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2309
% Happens(LieOn(agent,bed),time) ->
% HoldsAt(Sleep5(agent),time) &
% HoldsAt(ActOnSleep5(agent),time) &
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2312
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2309).
% {room}% 
%  HoldsAt(At(agent,room),time) &
%  HoldsAt(At(bed,room),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2314
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2313).

 /*  exists([Room],
    happens(lieOn(Agent, Bed), Time) ->
       holds_at(sleep5(Agent), Time),
       holds_at(actOnSleep5(Agent), Time),
       holds_at(at(Agent, Room), Time),
       holds_at(at(Bed, Room), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2313).

 /*  not(happens(lieOn(Agent, Bed), Time)) :-
       (   not(holds_at(sleep5(Agent), Time))
       ;   not(holds_at(actOnSleep5(Agent), Time))
       ;   not(holds_at(at(Agent, Room), Time))
       ;   not(holds_at(at(Bed, Room), Time))
       ),
       some(Room, '$kolem_Fn_353'(Agent, Bed, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2313).

 /*  [(holds_at(neg(sleep5(Agent)), Time);holds_at(neg(actOnSleep5(Agent)), Time);holds_at(neg(at(Agent, Room)), Time);holds_at(neg(at(Bed, Room)), Time)), some(Room, '$kolem_Fn_353'(Agent, Bed, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(lieOn(Agent, Bed), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2313).
axiom(not(happens(lieOn(Agent, Bed), Time)),
   
    [  (holds_at(neg(sleep5(Agent)), Time);holds_at(neg(actOnSleep5(Agent)), Time);holds_at(neg(at(Agent, Room)), Time);holds_at(neg(at(Bed, Room)), Time)),
      some(Room, '$kolem_Fn_353'(Agent, Bed, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2313).

 /*  holds_at(sleep5(Agent), Time) :-
       happens(lieOn(Agent, Bed), Time),
       some(Room, '$kolem_Fn_353'(Agent, Bed, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2313).

 /*  [happens(lieOn(Agent, Bed), Time), some(Room, '$kolem_Fn_353'(Agent, Bed, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(sleep5(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2313).
axiom(holds_at(sleep5(Agent), Time),
   
    [ happens(lieOn(Agent, Bed), Time),
      some(Room, '$kolem_Fn_353'(Agent, Bed, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2313).

 /*  holds_at(actOnSleep5(Agent), Time) :-
       happens(lieOn(Agent, Bed), Time),
       some(Room, '$kolem_Fn_353'(Agent, Bed, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2313).

 /*  [happens(lieOn(Agent, Bed), Time), some(Room, '$kolem_Fn_353'(Agent, Bed, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(actOnSleep5(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2313).
axiom(holds_at(actOnSleep5(Agent), Time),
   
    [ happens(lieOn(Agent, Bed), Time),
      some(Room, '$kolem_Fn_353'(Agent, Bed, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2313).

 /*  holds_at(at(Agent, Room), Time) :-
       happens(lieOn(Agent, Bed), Time),
       some(Room, '$kolem_Fn_353'(Agent, Bed, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2313).

 /*  [happens(lieOn(Agent, Bed), Time), some(Room, '$kolem_Fn_353'(Agent, Bed, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(at(Agent, Room), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2313).
axiom(holds_at(at(Agent, Room), Time),
   
    [ happens(lieOn(Agent, Bed), Time),
      some(Room, '$kolem_Fn_353'(Agent, Bed, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2313).

 /*  holds_at(at(Bed, Room), Time) :-
       happens(lieOn(Agent, Bed), Time),
       some(Room, '$kolem_Fn_353'(Agent, Bed, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2313).

 /*  [happens(lieOn(Agent, Bed), Time), some(Room, '$kolem_Fn_353'(Agent, Bed, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(at(Bed, Room), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2313).
axiom(holds_at(at(Bed, Room), Time),
   
    [ happens(lieOn(Agent, Bed), Time),
      some(Room, '$kolem_Fn_353'(Agent, Bed, Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2316
%; (body) posture
%; agent lies on physobj.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2319
% event LieOn(agent,physobj)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2319).
event(lieOn(agent,physobj)).
==> mpred_prop(lieOn(agent,physobj),event).
==> meta_argtypes(lieOn(agent,physobj)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2321
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2322).
%; agent sits on physobj.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2322
% event SitOn(agent,physobj)
event(sitOn(agent,physobj)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2322).
==> mpred_prop(sitOn(agent,physobj),event).
==> meta_argtypes(sitOn(agent,physobj)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2324
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2325).
% [agent,physobj,time]
% Happens(SitOn(agent,physobj),time) ->
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2326
% {location}% 
%  HoldsAt(At(agent,location),time) &
%  HoldsAt(At(physobj,location),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2328
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2327).

 /*  exists([Location],
    happens(sitOn(Agent, Physobj), Time) ->
       holds_at(at(Agent, Location), Time),
       holds_at(at(Physobj, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2327).

 /*  not(happens(sitOn(Agent, Physobj), Time)) :-
       (   not(holds_at(at(Agent, Location), Time))
       ;   not(holds_at(at(Physobj, Location), Time))
       ),
       some(Location, '$kolem_Fn_354'(Agent, Physobj, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2327).

 /*  [(holds_at(neg(at(Agent, Location)), Time);holds_at(neg(at(Physobj, Location)), Time)), some(Location, '$kolem_Fn_354'(Agent, Physobj, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(sitOn(Agent, Physobj), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2327).
axiom(not(happens(sitOn(Agent, Physobj), Time)),
   
    [  (holds_at(neg(at(Agent, Location)), Time);holds_at(neg(at(Physobj, Location)), Time)),
      some(Location, '$kolem_Fn_354'(Agent, Physobj, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2327).

 /*  holds_at(at(Agent, Location), Time) :-
       happens(sitOn(Agent, Physobj), Time),
       some(Location, '$kolem_Fn_354'(Agent, Physobj, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2327).

 /*  [happens(sitOn(Agent, Physobj), Time), some(Location, '$kolem_Fn_354'(Agent, Physobj, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(at(Agent, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2327).
axiom(holds_at(at(Agent, Location), Time),
   
    [ happens(sitOn(Agent, Physobj), Time),
      some(Location, '$kolem_Fn_354'(Agent, Physobj, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2327).

 /*  holds_at(at(Physobj, Location), Time) :-
       happens(sitOn(Agent, Physobj), Time),
       some(Location, '$kolem_Fn_354'(Agent, Physobj, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2327).

 /*  [happens(sitOn(Agent, Physobj), Time), some(Location, '$kolem_Fn_354'(Agent, Physobj, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(at(Physobj, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2327).
axiom(holds_at(at(Physobj, Location), Time),
   
    [ happens(sitOn(Agent, Physobj), Time),
      some(Location, '$kolem_Fn_354'(Agent, Physobj, Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2330
%; agent rises from physobj.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2331
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2332).
% event RiseFrom(agent,physobj)
event(riseFrom(agent,physobj)).
==> mpred_prop(riseFrom(agent,physobj),event).
==> meta_argtypes(riseFrom(agent,physobj)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2333
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2334).
%; agent is lying on physobj.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2334
% fluent LyingOn(agent,physobj)
fluent(lyingOn(agent,physobj)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2334).
==> mpred_prop(lyingOn(agent,physobj),fluent).
==> meta_argtypes(lyingOn(agent,physobj)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2335
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2334).
%; agent is sitting on physobj.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2336
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2337).
% fluent SittingOn(agent,physobj)
fluent(sittingOn(agent,physobj)).
==> mpred_prop(sittingOn(agent,physobj),fluent).
==> meta_argtypes(sittingOn(agent,physobj)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2337
%; agent is standing.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2338
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2339).
% fluent Standing(agent)
fluent(standing(agent)).
==> mpred_prop(standing(agent),fluent).
==> meta_argtypes(standing(agent)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2340
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2341).
%; agent is lying down.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2341
% fluent Lying(agent)
fluent(lying(agent)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2341).
==> mpred_prop(lying(agent),fluent).
==> meta_argtypes(lying(agent)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2342
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2341).
%; agent is sitting.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2343
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2344).
% fluent Sitting(agent)
fluent(sitting(agent)).
==> mpred_prop(sitting(agent),fluent).
==> meta_argtypes(sitting(agent)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2344
% noninertial Lying
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2344).
==> noninertial(lying).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2345
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2346).
% noninertial Sitting
==> noninertial(sitting).
%; At any time, an agent is either lying, sitting, or standing:

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2348
% xor Lying, Sitting, Standing
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2348).
==> xor([lying,sitting,standing]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2350
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2351).
% [agent,physobj,time]
% HoldsAt(LyingOn(agent,physobj),time) ->
% HoldsAt(Lying(agent),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2352

 /*  holds_at(lyingOn(Agent, Physobj), Time) ->
       holds_at(lying(Agent), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2351).

 /*  holds_at(lying(Agent), Time) :-
       holds_at(lyingOn(Agent, Physobj), Time).
 */

 /*  [holds_at(lyingOn(Agent, Physobj), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(lying(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2351).
axiom(holds_at(lying(Agent), Time),
    [holds_at(lyingOn(Agent, Physobj), Time)]).

 /*  not(holds_at(lyingOn(Agent, Physobj), Time)) :-
       not(holds_at(lying(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2351).

 /*  [holds_at(neg(lying(Agent)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(lyingOn(Agent, Physobj)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2351).
axiom(holds_at(neg(lyingOn(Agent, Physobj)), Time),
    [holds_at(neg(lying(Agent)), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2354
% [agent,physobj,time]
% HoldsAt(SittingOn(agent,physobj),time) ->
% HoldsAt(Sitting(agent),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2356

 /*  holds_at(sittingOn(Agent, Physobj), Time) ->
       holds_at(sitting(Agent), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2356).

 /*  holds_at(sitting(Agent), Time) :-
       holds_at(sittingOn(Agent, Physobj), Time).
 */

 /*  [holds_at(sittingOn(Agent, Physobj), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(sitting(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2356).
axiom(holds_at(sitting(Agent), Time),
    [holds_at(sittingOn(Agent, Physobj), Time)]).

 /*  not(holds_at(sittingOn(Agent, Physobj), Time)) :-
       not(holds_at(sitting(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2356).

 /*  [holds_at(neg(sitting(Agent)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(sittingOn(Agent, Physobj)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2356).
axiom(holds_at(neg(sittingOn(Agent, Physobj)), Time),
    [holds_at(neg(sitting(Agent)), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2358
%; State constraints represent that an agent can lie or sit
%; on at most one object at a time:
% [agent,physobj1,physobj2,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2361
% HoldsAt(LyingOn(agent,physobj1),time) &
% HoldsAt(LyingOn(agent,physobj2),time) ->
% physobj1=physobj2.
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2363
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2361).

 /*  holds_at(lyingOn(Agent, Physobj1), Time), holds_at(lyingOn(Agent, Physobj2), Time) ->
       equals(Physobj1, Physobj2).
 */

 /*  not(holds_at(lyingOn(Agent, Physobj1), Time)) :-
       holds_at(lyingOn(Agent, Physobj2), Time),
       not(equals(Physobj1, Physobj2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2361).

 /*  [holds_at(lyingOn(Agent, Physobj2), Time), not(equals(Physobj1, Physobj2))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(lyingOn(Agent, Physobj1)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2361).
axiom(holds_at(neg(lyingOn(Agent, Physobj1)), Time),
   
    [ holds_at(lyingOn(Agent, Physobj2), Time),
      not(equals(Physobj1, Physobj2))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2361).

 /*  not(holds_at(lyingOn(Agent, Physobj2), Time)) :-
       holds_at(lyingOn(Agent, Physobj1), Time),
       not(equals(Physobj1, Physobj2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2361).

 /*  [holds_at(lyingOn(Agent, Physobj1), Time), not(equals(Physobj1, Physobj2))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(lyingOn(Agent, Physobj2)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2361).
axiom(holds_at(neg(lyingOn(Agent, Physobj2)), Time),
   
    [ holds_at(lyingOn(Agent, Physobj1), Time),
      not(equals(Physobj2, Physobj1))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2365
% [agent,physobj1,physobj2,time]
% HoldsAt(SittingOn(agent,physobj1),time) &
% HoldsAt(SittingOn(agent,physobj2),time) ->
% physobj1=physobj2.
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2368
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2367).

 /*  holds_at(sittingOn(Agent, Physobj1), Time), holds_at(sittingOn(Agent, Physobj2), Time) ->
       equals(Physobj1, Physobj2).
 */

 /*  not(holds_at(sittingOn(Agent, Physobj1), Time)) :-
       holds_at(sittingOn(Agent, Physobj2), Time),
       not(equals(Physobj1, Physobj2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2367).

 /*  [holds_at(sittingOn(Agent, Physobj2), Time), not(equals(Physobj1, Physobj2))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(sittingOn(Agent, Physobj1)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2367).
axiom(holds_at(neg(sittingOn(Agent, Physobj1)), Time),
   
    [ holds_at(sittingOn(Agent, Physobj2), Time),
      not(equals(Physobj1, Physobj2))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2367).

 /*  not(holds_at(sittingOn(Agent, Physobj2), Time)) :-
       holds_at(sittingOn(Agent, Physobj1), Time),
       not(equals(Physobj1, Physobj2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2367).

 /*  [holds_at(sittingOn(Agent, Physobj1), Time), not(equals(Physobj1, Physobj2))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(sittingOn(Agent, Physobj2)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2367).
axiom(holds_at(neg(sittingOn(Agent, Physobj2)), Time),
   
    [ holds_at(sittingOn(Agent, Physobj1), Time),
      not(equals(Physobj2, Physobj1))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2370
%; An effect axiom states that if an agent is standing and
%; lies on a physical object, the agent will be lying on
%; the physical object:
% [agent,physobj,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2374
% HoldsAt(Standing(agent),time) ->
% Initiates(LieOn(agent,physobj),
%           LyingOn(agent,physobj),
%           time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2377
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2374).

 /*  [holds_at(standing(Agent), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(lieOn(Agent, Physobj),
                    lyingOn(Agent, Physobj),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2374).
axiom(initiates(lieOn(Agent, Physobj), lyingOn(Agent, Physobj), Time),
    [holds_at(standing(Agent), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2379
%; An effect axiom states that if an agent
%; lies on a physical object, the agent will no longer
%; be standing:
% [agent,physobj,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2383
% Terminates(LieOn(agent,physobj),
%            Standing(agent),
%            time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2385
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2383).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(lieOn(Agent, Physobj),
                     standing(Agent),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2383).
axiom(terminates(lieOn(Agent, Physobj), standing(Agent), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2387
%; An effect axiom states that if an agent is standing and
%; sits on a physical object, the agent will be sitting on
%; the physical object:
% [agent,physobj,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2391
% HoldsAt(Standing(agent),time) ->
% Initiates(SitOn(agent,physobj),
%           SittingOn(agent,physobj),
%           time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2394
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2391).

 /*  [holds_at(standing(Agent), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(sitOn(Agent, Physobj),
                    sittingOn(Agent, Physobj),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2391).
axiom(initiates(sitOn(Agent, Physobj), sittingOn(Agent, Physobj), Time),
    [holds_at(standing(Agent), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2396
%; An effect axiom states that if an agent
%; sits on a physical object, the agent will no longer
%; be standing:
% [agent,physobj,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2400
% Terminates(SitOn(agent,physobj),
%            Standing(agent),
%            time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2402
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2400).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(sitOn(Agent, Physobj),
                     standing(Agent),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2400).
axiom(terminates(sitOn(Agent, Physobj), standing(Agent), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2404
%; An effect axiom states that if an agent
%; is sitting or lying on a physical object and
%; the agent rises from the physical object,
%; the agent will be standing:
% [agent,physobj,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2409
% (HoldsAt(SittingOn(agent,physobj),time) |
%  HoldsAt(LyingOn(agent,physobj),time)) ->
% Initiates(RiseFrom(agent,physobj),
%           Standing(agent),
%           time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2413
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2409).

 /*  [(holds_at(sittingOn(Agent, Physobj), Time);holds_at(lyingOn(Agent, Physobj), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(riseFrom(Agent, Physobj),
                    standing(Agent),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2409).
axiom(initiates(riseFrom(Agent, Physobj), standing(Agent), Time),
   
    [  (holds_at(sittingOn(Agent, Physobj), Time);holds_at(lyingOn(Agent, Physobj), Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2415
%; An effect axiom states that if an agent is sitting on
%; a physical object and the agent rises from the physical
%; object, the agent will no longer be sitting on the
%; physical object:
% [agent,physobj,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2420
% HoldsAt(SittingOn(agent,physobj),time) ->
% Terminates(RiseFrom(agent,physobj),
%            SittingOn(agent,physobj),
%            time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2423
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2420).

 /*  [holds_at(sittingOn(Agent, Physobj), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(riseFrom(Agent, Physobj),
                     sittingOn(Agent, Physobj),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2420).
axiom(terminates(riseFrom(Agent, Physobj), sittingOn(Agent, Physobj), Time),
    [holds_at(sittingOn(Agent, Physobj), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2425
%; An effect axiom states that if an agent is lying on
%; a physical object and the agent rises from the physical
%; object, the agent will no longer be lying on the
%; physical object:
% [agent,physobj,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2430
% HoldsAt(LyingOn(agent,physobj),time) ->
% Terminates(RiseFrom(agent,physobj),
%            LyingOn(agent,physobj),
%            time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2433
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2430).

 /*  [holds_at(lyingOn(Agent, Physobj), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(riseFrom(Agent, Physobj),
                     lyingOn(Agent, Physobj),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2430).
axiom(terminates(riseFrom(Agent, Physobj), lyingOn(Agent, Physobj), Time),
    [holds_at(lyingOn(Agent, Physobj), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2435
%; dressing
%; agent gets undressed.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2438
% event GetDressed(agent)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2438).
event(getDressed(agent)).
==> mpred_prop(getDressed(agent),event).
==> meta_argtypes(getDressed(agent)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2439
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2438).
%; agent gets dressed.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2440
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2441).
% event GetUndressed(agent)
event(getUndressed(agent)).
==> mpred_prop(getUndressed(agent),event).
==> meta_argtypes(getUndressed(agent)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2441
%; agent is dressed.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2442
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2443).
% fluent Dressed(agent)
fluent(dressed(agent)).
==> mpred_prop(dressed(agent),fluent).
==> meta_argtypes(dressed(agent)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2444
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2445).
%; Effect axioms deal with getting dressed and undressed:
% [agent,time]
 % Initiates(GetDressed(agent),Dressed(agent),time).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(getDressed(Agent), dressed(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2445).
axiom(initiates(getDressed(Agent), dressed(Agent), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2446
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2447).
% [agent,time]
 % Terminates(GetUndressed(agent),Dressed(agent),time).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(getUndressed(Agent), dressed(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2447).
axiom(terminates(getUndressed(Agent), dressed(Agent), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2448
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2449).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: ecnet/Sleeping.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{Mueller:2004c,
%;   author = "Erik T. Mueller",
%;   year = "2004",
%;   title = "Understanding script-based stories using commonsense reasoning",
%;   journal = "Cognitive Systems Research",
%;   volume = "5",
%;   number = "4",
%;   pages = "307--340",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2477
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2478).
% option modeldiff on
:- set_ec_option(modeldiff, on).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2479
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2480).
% ignore Love, ThreatenedBy

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], ignore(love)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2480).
axiom(ignore(love),
    []).

 /*  [] ->
       ta(Ta_Param1, tvs1=[], tvs2=[], ignore(threatenedBy)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2480).
axiom(ignore(threatenedBy),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2480
% ignore LookOutOnto, Floor, BuildingOf, SkyOf, GroundOf
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2480).

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], ignore(lookOutOnto)).
 */
axiom(ignore(lookOutOnto),
    []).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2480).

 /*  [] ->
       ta(Ta_Param1, tvs1=[], tvs2=[], ignore(floor)).
 */
axiom(ignore(floor),
    []).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2480).

 /*  [] ->
       ta(Ta_Param2, tvs1=[], tvs2=[], ignore(buildingOf)).
 */
axiom(ignore(buildingOf),
    []).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2480).

 /*  [] ->
       ta(Ta_Param3, tvs1=[], tvs2=[], ignore(skyOf)).
 */
axiom(ignore(skyOf),
    []).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2480).

 /*  [] ->
       ta(Ta_Param4, tvs1=[], tvs2=[], ignore(groundOf)).
 */
axiom(ignore(groundOf),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2481
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2482).
% ignore Inside, Near

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], ignore(inside)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2482).
axiom(ignore(inside),
    []).

 /*  [] ->
       ta(Ta_Param1, tvs1=[], tvs2=[], ignore(near)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2482).
axiom(ignore(near),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2482
% ignore See
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2482).

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], ignore(see)).
 */
axiom(ignore(see),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2484
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2485).
% ignore ActOnSleep5

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], ignore(actOnSleep5)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2485).
axiom(ignore(actOnSleep5),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2486
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2487).
% option renaming off
:- set_ec_option(renaming, off).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2488
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2489).
% load foundations/Root.e
:- load_e('foundations/Root.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2489
% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2489).
:- load_e('foundations/EC.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2490
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2491).
% load answers/Mueller2003/Ontology.e
:- load_e('answers/Mueller2003/Ontology.e', changed).
:- if(is_e_toplevel).
 %  load(changed,'answers/Mueller2003/Ontology.e').
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2491
% load answers/Mueller2004c/RTSpaceM.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2491).
:- load_e('answers/Mueller2004c/RTSpaceM.e', changed).
:- if(is_e_toplevel).
 %  load(changed,'answers/Mueller2004c/RTSpaceM.e').
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2492
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2493).
% load answers/Mueller2004c/OTSpaceM.e
:- load_e('answers/Mueller2004c/OTSpaceM.e', changed).
:- if(is_e_toplevel).
 %  load(changed,'answers/Mueller2004c/OTSpaceM.e').
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2493
% load answers/Mueller2004c/Cognition.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2493).
:- load_e('answers/Mueller2004c/Cognition.e', changed).
:- if(is_e_toplevel).
 %  load(changed,'answers/Mueller2004c/Cognition.e').
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2494
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2495).
% load answers/Mueller2003/Sleep.e
:- load_e('answers/Mueller2003/Sleep.e', changed).
:- if(is_e_toplevel).
 %  load(changed,'answers/Mueller2003/Sleep.e').
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2496
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2497).
% door Door1
==> t(door,door1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2498
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2499).
% room Room0
==> t(room,room0).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2500
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2501).
% room Room1
==> t(room,room1).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2502
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2503).
% Side1(Door1)=Room0.

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], equals(side1(door1), room0)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2503).
axiom(equals(side1(door1), room0),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2503
% Side2(Door1)=Room1.
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2503).

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], equals(side2(door1), room1)).
 */
axiom(equals(side2(door1), room1),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2505
% agent Sleeper1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2505).
==> t(agent,sleeper1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2507
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2508).
% bed Bed1
==> t(bed,bed1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2509
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2510).
% outside Outside1
==> t(outside,outside1).
%; initial state
% [agent,object]
 
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2512
% !HoldsAt(Holding(agent,object),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2512).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(holding(Agent, Object)), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2512).
axiom(holds_at(neg(holding(Agent, Object)), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2513
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2514).
% [agent,physobj]
 % !HoldsAt(SittingOn(agent,physobj),0).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(sittingOn(Agent, Physobj)), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2514).
axiom(holds_at(neg(sittingOn(Agent, Physobj)), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2514
% [agent,physobj]
 % !HoldsAt(LyingOn(agent,physobj),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2514).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(lyingOn(Agent, Physobj)), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2514).
axiom(holds_at(neg(lyingOn(Agent, Physobj)), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2515
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2516).
% HoldsAt(Dressed(Sleeper1),0).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(dressed(sleeper1), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2516).
axiom(holds_at(dressed(sleeper1), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2516
% HoldsAt(Awake(Sleeper1),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2516).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(awake(sleeper1), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2516).
axiom(holds_at(awake(sleeper1), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2517
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2518).
% HoldsAt(Sleep3(Sleeper1),0).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(sleep3(sleeper1), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2518).
axiom(holds_at(sleep3(sleeper1), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2518
% HoldsAt(Standing(Sleeper1),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2518).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(standing(sleeper1), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2518).
axiom(holds_at(standing(sleeper1), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2519
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2520).
% HoldsAt(DoorUnlocked(Door1),0).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(doorUnlocked(door1), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2520).
axiom(holds_at(doorUnlocked(door1), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2520
% HoldsAt(DoorIsOpen(Door1),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2520).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(doorIsOpen(door1), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2520).
axiom(holds_at(doorIsOpen(door1), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2521
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2522).
% HoldsAt(At(Sleeper1,Room0),0).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(at(sleeper1, room0), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2522).
axiom(holds_at(at(sleeper1, room0), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2522
% HoldsAt(At(Bed1,Room1),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2522).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(at(bed1, room1), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2522).
axiom(holds_at(at(bed1, room1), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2524
%; narrative


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2525
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2526).
% Happens(GetTired(Sleeper1),0).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          happens(getTired(sleeper1), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2526).
axiom(happens(getTired(sleeper1), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2526
% Happens(WalkThroughDoor12(Sleeper1,Door1),1).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2526).

 /*  [b(start, Maptime), ignore(start+1==Maptime)] ->
       ta(Ta_Param,
          tvs1=[start+1],
          tvs2=[Maptime, start],
          happens(walkThroughDoor12(sleeper1, door1), Maptime)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2526).
axiom(happens(walkThroughDoor12(sleeper1, door1), Maptime),
    [b(start, Maptime)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2527
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2528).
% Happens(GetUndressed(Sleeper1),2).

 /*  [b(start, Start2), toffset(start, 2, Start2), ignore(start+2==Start2)] ->
       ta(Ta_Param,
          tvs1=[start+2],
          tvs2=[Start2, start],
          happens(getUndressed(sleeper1), Start2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2528).
axiom(happens(getUndressed(sleeper1), Start2),
    [b(start, Start2), toffset(start, 2, Start2)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2528
% Happens(LieOn(Sleeper1,Bed1),3).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2528).

 /*  [b(start, Start3), toffset(start, 3, Start3), ignore(start+3==Start3)] ->
       ta(Ta_Param,
          tvs1=[start+3],
          tvs2=[Start3, start],
          happens(lieOn(sleeper1, bed1), Start3)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2528).
axiom(happens(lieOn(sleeper1, bed1), Start3),
    [b(start, Start3), toffset(start, 3, Start3)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2529
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2530).
% Happens(FallAsleep(Sleeper1),4).

 /*  [b(start, Start4), toffset(start, 4, Start4), ignore(start+4==Start4)] ->
       ta(Ta_Param,
          tvs1=[start+4],
          tvs2=[Start4, start],
          happens(fallAsleep(sleeper1), Start4)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2530).
axiom(happens(fallAsleep(sleeper1), Start4),
    [b(start, Start4), toffset(start, 4, Start4)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2530
% Happens(Dream(Sleeper1),5).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2530).

 /*  [b(start, Start5), toffset(start, 5, Start5), ignore(start+5==Start5)] ->
       ta(Ta_Param,
          tvs1=[start+5],
          tvs2=[Start5, start],
          happens(dream(sleeper1), Start5)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2530).
axiom(happens(dream(sleeper1), Start5),
    [b(start, Start5), toffset(start, 5, Start5)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2531
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2532).
% Happens(WakeUp(Sleeper1),6).

 /*  [b(start, Start6), toffset(start, 6, Start6), ignore(start+6==Start6)] ->
       ta(Ta_Param,
          tvs1=[start+6],
          tvs2=[Start6, start],
          happens(wakeUp(sleeper1), Start6)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2532).
axiom(happens(wakeUp(sleeper1), Start6),
    [b(start, Start6), toffset(start, 6, Start6)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2532
% Happens(RiseFrom(Sleeper1,Bed1),7).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2532).

 /*  [b(start, Start7), toffset(start, 7, Start7), ignore(start+7==Start7)] ->
       ta(Ta_Param,
          tvs1=[start+7],
          tvs2=[Start7, start],
          happens(riseFrom(sleeper1, bed1), Start7)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2532).
axiom(happens(riseFrom(sleeper1, bed1), Start7),
    [b(start, Start7), toffset(start, 7, Start7)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2533
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2534).
% Happens(GetDressed(Sleeper1),8).

 /*  [b(start, Start8), toffset(start, 8, Start8), ignore(start+8==Start8)] ->
       ta(Ta_Param,
          tvs1=[start+8],
          tvs2=[Start8, start],
          happens(getDressed(sleeper1), Start8)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2534).
axiom(happens(getDressed(sleeper1), Start8),
    [b(start, Start8), toffset(start, 8, Start8)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2534
% Happens(WalkThroughDoor21(Sleeper1,Door1),9).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2534).

 /*  [b(start, Start9), toffset(start, 9, Start9), ignore(start+9==Start9)] ->
       ta(Ta_Param,
          tvs1=[start+9],
          tvs2=[Start9, start],
          happens(walkThroughDoor21(sleeper1, door1), Start9)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2534).
axiom(happens(walkThroughDoor21(sleeper1, door1), Start9),
    [b(start, Start9), toffset(start, 9, Start9)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2536
% range time 0 10
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2536).
==> range(time,0,10).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2537
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2538).
% range offset 0 0
==> range(offset,0,0).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2538
% range diameter 0 0
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2538).
==> range(diameter,0,0).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2540
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2541).
% completion Happens
==> completion(happens).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: ecnet/Rest.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{Mueller:InPress,
%;   author = "Erik T. Mueller",
%;   year = "in press",
%;   title = "Modelling space and time in narratives about restaurants",
%;   journal = "Literary and Linguistic Computing",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2568
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2569).
% option renaming off
:- set_ec_option(renaming, off).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2569
% option encoding 3
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2569).
:- set_ec_option(encoding, 3).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2571
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2572).
% load foundations/Root.e
:- load_e('foundations/Root.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2572
% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2572).
:- load_e('foundations/EC.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2573
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2574).
% load answers/Mueller2003/Ontology.e
:- load_e('answers/Mueller2003/Ontology.e', changed).
:- if(is_e_toplevel).
 %  load(changed,'answers/Mueller2003/Ontology.e').
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2574
% load answers/MuellerInPress/RepRest.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2574).
:- load_e('answers/MuellerInPress/RepRest.e', changed).
:- if(is_e_toplevel).
 %  load(changed,'answers/MuellerInPress/RepRest.e').
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2576
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2577).
% door MainEntrance1
==> t(door,mainEntrance1).
%; room-scale topological space

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2579
% outside Street1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2579).
==> t(outside,street1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2580
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2581).
% room DiningRoom1
==> t(room,diningRoom1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2581
% door KitchenDoor1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2581).
==> t(door,kitchenDoor1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2582
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2583).
% room Kitchen1
==> t(room,kitchen1).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2583
% Side1(MainEntrance1)=Street1.
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2583).

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], equals(side1(mainEntrance1), street1)).
 */
axiom(equals(side1(mainEntrance1), street1),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2584
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2585).
% Side2(MainEntrance1)=DiningRoom1.

 /*  [] ->
       ta(Ta_Param,
          tvs1=[],
          tvs2=[],
          equals(side2(mainEntrance1), diningRoom1)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2585).
axiom(equals(side2(mainEntrance1), diningRoom1),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2585
% Side1(KitchenDoor1)=DiningRoom1.
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2585).

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], equals(side1(kitchenDoor1), diningRoom1)).
 */
axiom(equals(side1(kitchenDoor1), diningRoom1),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2586
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2587).
% Side2(KitchenDoor1)=Kitchen1.

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], equals(side2(kitchenDoor1), kitchen1)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2587).
axiom(equals(side2(kitchenDoor1), kitchen1),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2588
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2589).
% agent Customer1
==> t(agent,customer1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2589
% menu Menu1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2589).
==> t(menu,menu1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2590
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2591).
% chair Chair1
==> t(chair,chair1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2591
% food Food1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2591).
==> t(food,food1).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2592
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2593).
% HoldsAt(At(Customer1,Street1),0).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(at(customer1, street1), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2593).
axiom(holds_at(at(customer1, street1), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2593
% HoldsAt(Hungry(Customer1),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2593).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(hungry(customer1), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2593).
axiom(holds_at(hungry(customer1), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2594
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2595).
% HoldsAt(At(Chair1,DiningRoom1),0).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(at(chair1, diningRoom1), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2595).
axiom(holds_at(at(chair1, diningRoom1), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2595
% HoldsAt(At(Menu1,DiningRoom1),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2595).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(at(menu1, diningRoom1), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2595).
axiom(holds_at(at(menu1, diningRoom1), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2596
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2597).
% HoldsAt(On(Menu1,Table1),0).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(on(menu1, table1), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2597).
axiom(holds_at(on(menu1, table1), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2597
% HoldsAt(At(Food1,Kitchen1),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2597).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(at(food1, kitchen1), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2597).
axiom(holds_at(at(food1, kitchen1), start),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2599
% waiter Waiter1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2599).
==> t(waiter,waiter1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2600
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2601).
% cook Cook1
==> t(cook,cook1).
%; props

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2603
% table Table1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2603).
==> t(table,table1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2604
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2605).
% bill Bill1
==> t(bill,bill1).
%; restaurant

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2607
% restaurant Restaurant1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2607).
==> t(restaurant,restaurant1).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2608
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2609).
% CookOf(Restaurant1)=Cook1.

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], equals(cookOf(restaurant1), cook1)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2609).
axiom(equals(cookOf(restaurant1), cook1),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2609
% TableOf(Restaurant1)=Table1.
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2609).

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], equals(tableOf(restaurant1), table1)).
 */
axiom(equals(tableOf(restaurant1), table1),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2610
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2611).
% WaiterOf(Restaurant1)=Waiter1.

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], equals(waiterOf(restaurant1), waiter1)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2611).
axiom(equals(waiterOf(restaurant1), waiter1),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2611
% KitchenDoorOf(Restaurant1)=KitchenDoor1.
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2611).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[],
          tvs2=[],
          equals(kitchenDoorOf(restaurant1), kitchenDoor1)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2611).
axiom(equals(kitchenDoorOf(restaurant1), kitchenDoor1),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2612
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2613).
% BillOf(Restaurant1)=Bill1.

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], equals(billOf(restaurant1), bill1)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2613).
axiom(equals(billOf(restaurant1), bill1),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2614
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2615).
%; prune

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2615
% sort ona, onb
==> sort(ona).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2615).
==> sort(onb).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2616
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2617).
% fluent! On(ona,onb)
fluent(on(ona,onb)).
==> mpred_prop(on(ona,onb),fluent).
==> meta_argtypes(on(ona,onb)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2617
% event! PlaceOn(agent,ona,onb)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2617).
event(placeOn(agent,ona,onb)).
==> mpred_prop(placeOn(agent,ona,onb),event).
==> meta_argtypes(placeOn(agent,ona,onb)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2618
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2619).
% event! TakeOffOf(agent,ona,onb)
event(takeOffOf(agent,ona,onb)).
==> mpred_prop(takeOffOf(agent,ona,onb),event).
==> meta_argtypes(takeOffOf(agent,ona,onb)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2620
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2621).
% sort ordera, orderb, orderc
==> sort(ordera).
==> sort(orderb).
==> sort(orderc).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2621
% event! Order(ordera,orderb,orderc)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2621).
event(order(ordera,orderb,orderc)).
==> mpred_prop(order(ordera,orderb,orderc),event).
==> meta_argtypes(order(ordera,orderb,orderc)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2622
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2623).
% fluent! KnowOrder(orderb,ordera,orderc)
fluent(knowOrder(orderb,ordera,orderc)).
==> mpred_prop(knowOrder(orderb,ordera,orderc),fluent).
==> meta_argtypes(knowOrder(orderb,ordera,orderc)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2624
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2625).
% sort requesta, requestb, requestc
==> sort(requesta).
==> sort(requestb).
==> sort(requestc).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2625
% event! Request(requesta,requestb,requestc)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2625).
event(request(requesta,requestb,requestc)).
==> mpred_prop(request(requesta,requestb,requestc),event).
==> meta_argtypes(request(requesta,requestb,requestc)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2626
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2627).
% fluent! KnowRequest(requestb,requesta,requestc)
fluent(knowRequest(requestb,requesta,requestc)).
==> mpred_prop(knowRequest(requestb,requesta,requestc),fluent).
==> meta_argtypes(knowRequest(requestb,requesta,requestc)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2628
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2629).
% sort holda, holdb, holdc
==> sort(holda).
==> sort(holdb).
==> sort(holdc).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2629
% event! TakeOffOf(holda,holdb,holdc)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2629).
event(takeOffOf(holda,holdb,holdc)).
==> mpred_prop(takeOffOf(holda,holdb,holdc),event).
==> meta_argtypes(takeOffOf(holda,holdb,holdc)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2630
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2631).
% event! PickUp(holda,holdb)
event(pickUp(holda,holdb)).
==> mpred_prop(pickUp(holda,holdb),event).
==> meta_argtypes(pickUp(holda,holdb)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2631
% event! LetGoOf(holda,holdb)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2631).
event(letGoOf(holda,holdb)).
==> mpred_prop(letGoOf(holda,holdb),event).
==> meta_argtypes(letGoOf(holda,holdb)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2632
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2633).
% event! Hold(holda,holdb)
event(hold(holda,holdb)).
==> mpred_prop(hold(holda,holdb),event).
==> meta_argtypes(hold(holda,holdb)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2633
% fluent! Holding(holda,holdb)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2633).
fluent(holding(holda,holdb)).
==> mpred_prop(holding(holda,holdb),fluent).
==> meta_argtypes(holding(holda,holdb)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2635
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2636).
% sort sita, sitb
==> sort(sita).
==> sort(sitb).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2636
% event! LieOn(sita,sitb)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2636).
event(lieOn(sita,sitb)).
==> mpred_prop(lieOn(sita,sitb),event).
==> meta_argtypes(lieOn(sita,sitb)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2637
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2638).
% event! SitOn(sita,sitb)
event(sitOn(sita,sitb)).
==> mpred_prop(sitOn(sita,sitb),event).
==> meta_argtypes(sitOn(sita,sitb)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2638
% event! RiseFrom(sita,sitb)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2638).
event(riseFrom(sita,sitb)).
==> mpred_prop(riseFrom(sita,sitb),event).
==> meta_argtypes(riseFrom(sita,sitb)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2639
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2640).
% fluent! LyingOn(sita,sitb)
fluent(lyingOn(sita,sitb)).
==> mpred_prop(lyingOn(sita,sitb),fluent).
==> meta_argtypes(lyingOn(sita,sitb)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2640
% fluent! SittingOn(sita,sitb)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2640).
fluent(sittingOn(sita,sitb)).
==> mpred_prop(sittingOn(sita,sitb),fluent).
==> meta_argtypes(sittingOn(sita,sitb)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2642
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2643).
% sort greeta, greetb
==> sort(greeta).
==> sort(greetb).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2643
% event! Greet(greeta,greetb)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2643).
event(greet(greeta,greetb)).
==> mpred_prop(greet(greeta,greetb),event).
==> meta_argtypes(greet(greeta,greetb)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2645
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2646).
% ona! Menu1, Food1, Bill1
==> t(ona,menu1).
==> t(ona,food1).
==> t(ona,bill1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2646
% onb! Table1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2646).
==> t(onb,table1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2647
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2648).
% ordera! Customer1, Waiter1
==> t(ordera,customer1).
==> t(ordera,waiter1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2648
% orderb! Waiter1, Cook1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2648).
==> t(orderb,waiter1).
==> t(orderb,cook1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2649
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2650).
% orderc! Food1
==> t(orderc,food1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2650
% requesta! Customer1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2650).
==> t(requesta,customer1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2651
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2652).
% requestb! Waiter1
==> t(requestb,waiter1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2652
% requestc! Bill1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2652).
==> t(requestc,bill1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2653
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2654).
% holda! Customer1, Waiter1
==> t(holda,customer1).
==> t(holda,waiter1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2654
% holdb! Menu1, Food1, Bill1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2654).
==> t(holdb,menu1).
==> t(holdb,food1).
==> t(holdb,bill1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2655
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2656).
% holdc! Table1
==> t(holdc,table1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2656
% sita! Customer1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2656).
==> t(sita,customer1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2657
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2658).
% sitb! Chair1
==> t(sitb,chair1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2658
% greeta! Customer1, Waiter1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2658).
==> t(greeta,customer1).
==> t(greeta,waiter1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2659
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2660).
% greetb! Customer1, Waiter1
==> t(greetb,customer1).
==> t(greetb,waiter1).
%; initial situation


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2662
% HoldsAt(At(Waiter1,DiningRoom1),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2662).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(at(waiter1, diningRoom1), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2662).
axiom(holds_at(at(waiter1, diningRoom1), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2663
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2664).
% HoldsAt(At(Cook1,Kitchen1),0).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(at(cook1, kitchen1), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2664).
axiom(holds_at(at(cook1, kitchen1), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2664
% HoldsAt(At(Table1,DiningRoom1),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2664).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(at(table1, diningRoom1), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2664).
axiom(holds_at(at(table1, diningRoom1), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2665
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2666).
% !HoldsAt(On(Bill1,Table1),0).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(on(bill1, table1)), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2666).
axiom(holds_at(neg(on(bill1, table1)), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2666
% HoldsAt(At(Bill1,DiningRoom1),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2666).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(at(bill1, diningRoom1), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2666).
axiom(holds_at(at(bill1, diningRoom1), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2667
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2668).
% [agent]
 % HoldsAt(Standing(agent),0).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(standing(Agent), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2668).
axiom(holds_at(standing(Agent), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2668
% [agent,object]
 % !HoldsAt(Holding(agent,object),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2668).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(holding(Agent, Object)), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2668).
axiom(holds_at(neg(holding(Agent, Object)), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2669
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2670).
% [agent1,agent2,physobj]
 % !HoldsAt(KnowOrder(agent1,agent2,physobj),0).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(knowOrder(Agent1, Agent2, Physobj)), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2670).
axiom(holds_at(neg(knowOrder(Agent1, Agent2, Physobj)), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2670
% [agent1,agent2,physobj]
 % !HoldsAt(KnowRequest(agent1,agent2,physobj),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2670).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(knowRequest(Agent1, Agent2, Physobj)),
                   start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2670).
axiom(holds_at(neg(knowRequest(Agent1, Agent2, Physobj)), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2671
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2672).
% HoldsAt(BeWaiter0(Waiter1),0).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(beWaiter0(waiter1), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2672).
axiom(holds_at(beWaiter0(waiter1), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2672
% HoldsAt(BeCook0(Cook1),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2672).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(beCook0(cook1), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2672).
axiom(holds_at(beCook0(cook1), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2673
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2674).
% [food]
 % !HoldsAt(FoodPrepared(food),0).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(foodPrepared(Food)), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2674).
axiom(holds_at(neg(foodPrepared(Food)), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2674
% !HoldsAt(Hungry(Cook1),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2674).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(hungry(cook1)), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2674).
axiom(holds_at(neg(hungry(cook1)), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2675
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2676).
% !HoldsAt(Hungry(Waiter1),0).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(hungry(waiter1)), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2676).
axiom(holds_at(neg(hungry(waiter1)), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2677
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2678).
% Happens(WalkThroughDoor12(Customer1,MainEntrance1),0).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          happens(walkThroughDoor12(customer1, mainEntrance1), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2678).
axiom(happens(walkThroughDoor12(customer1, mainEntrance1), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2678
% Happens(Greet(Waiter1,Customer1),1).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2678).

 /*  [b(start, Maptime), ignore(start+1==Maptime)] ->
       ta(Ta_Param,
          tvs1=[start+1],
          tvs2=[Maptime, start],
          happens(greet(waiter1, customer1), Maptime)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2678).
axiom(happens(greet(waiter1, customer1), Maptime),
    [b(start, Maptime)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2679
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2680).
% Happens(SitOn(Customer1,Chair1),2).

 /*  [b(start, Start2), toffset(start, 2, Start2), ignore(start+2==Start2)] ->
       ta(Ta_Param,
          tvs1=[start+2],
          tvs2=[Start2, start],
          happens(sitOn(customer1, chair1), Start2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2680).
axiom(happens(sitOn(customer1, chair1), Start2),
    [b(start, Start2), toffset(start, 2, Start2)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2680
% Happens(TakeOffOf(Customer1,Menu1,Table1),3).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2680).

 /*  [b(start, Start3), toffset(start, 3, Start3), ignore(start+3==Start3)] ->
       ta(Ta_Param,
          tvs1=[start+3],
          tvs2=[Start3, start],
          happens(takeOffOf(customer1, menu1, table1), Start3)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2680).
axiom(happens(takeOffOf(customer1, menu1, table1), Start3),
    [b(start, Start3), toffset(start, 3, Start3)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2681
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2682).
% Happens(Order(Customer1,Waiter1,Food1),4).

 /*  [b(start, Start4), toffset(start, 4, Start4), ignore(start+4==Start4)] ->
       ta(Ta_Param,
          tvs1=[start+4],
          tvs2=[Start4, start],
          happens(order(customer1, waiter1, food1), Start4)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2682).
axiom(happens(order(customer1, waiter1, food1), Start4),
    [b(start, Start4), toffset(start, 4, Start4)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2682
% Happens(PlaceOn(Customer1,Menu1,Table1),5).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2682).

 /*  [b(start, Start5), toffset(start, 5, Start5), ignore(start+5==Start5)] ->
       ta(Ta_Param,
          tvs1=[start+5],
          tvs2=[Start5, start],
          happens(placeOn(customer1, menu1, table1), Start5)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2682).
axiom(happens(placeOn(customer1, menu1, table1), Start5),
    [b(start, Start5), toffset(start, 5, Start5)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2683
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2684).
% Happens(Eat(Customer1,Food1),11).

 /*  [b(start, Startd11), toffset(start, 11, Startd11), ignore(start+11==Startd11)] ->
       ta(Ta_Param,
          tvs1=[start+11],
          tvs2=[Startd11, start],
          happens(eat(customer1, food1), Startd11)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2684).
axiom(happens(eat(customer1, food1), Startd11),
    [b(start, Startd11), toffset(start, 11, Startd11)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2684
% Happens(Request(Customer1,Waiter1,Bill1),12).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2684).

 /*  [b(start, Startd12), toffset(start, 12, Startd12), ignore(start+12==Startd12)] ->
       ta(Ta_Param,
          tvs1=[start+12],
          tvs2=[Startd12, start],
          happens(request(customer1, waiter1, bill1), Startd12)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2684).
axiom(happens(request(customer1, waiter1, bill1), Startd12),
    [b(start, Startd12), toffset(start, 12, Startd12)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2685
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2686).
% Happens(Pay(Customer1,Waiter1),15).

 /*  [b(start, Startd15), toffset(start, 15, Startd15), ignore(start+15==Startd15)] ->
       ta(Ta_Param,
          tvs1=[start+15],
          tvs2=[Startd15, start],
          happens(pay(customer1, waiter1), Startd15)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2686).
axiom(happens(pay(customer1, waiter1), Startd15),
    [b(start, Startd15), toffset(start, 15, Startd15)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2686
% Happens(Tip(Customer1,Waiter1),15).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2686).

 /*  [b(start, Startd15), toffset(start, 15, Startd15), ignore(start+15==Startd15)] ->
       ta(Ta_Param,
          tvs1=[start+15],
          tvs2=[Startd15, start],
          happens(tip(customer1, waiter1), Startd15)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2686).
axiom(happens(tip(customer1, waiter1), Startd15),
    [b(start, Startd15), toffset(start, 15, Startd15)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2687
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2688).
% Happens(RiseFrom(Customer1,Chair1),16).

 /*  [b(start, Startd16), toffset(start, 16, Startd16), ignore(start+16==Startd16)] ->
       ta(Ta_Param,
          tvs1=[start+16],
          tvs2=[Startd16, start],
          happens(riseFrom(customer1, chair1), Startd16)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2688).
axiom(happens(riseFrom(customer1, chair1), Startd16),
    [b(start, Startd16), toffset(start, 16, Startd16)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2688
% Happens(SayGoodbye(Customer1,Waiter1),17).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2688).

 /*  [b(start, Startd17), toffset(start, 17, Startd17), ignore(start+17==Startd17)] ->
       ta(Ta_Param,
          tvs1=[start+17],
          tvs2=[Startd17, start],
          happens(sayGoodbye(customer1, waiter1), Startd17)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2688).
axiom(happens(sayGoodbye(customer1, waiter1), Startd17),
    [b(start, Startd17), toffset(start, 17, Startd17)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2689
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2690).
% Happens(WalkThroughDoor21(Customer1,MainEntrance1),18).

 /*  [b(start, Startd18), toffset(start, 18, Startd18), ignore(start+18==Startd18)] ->
       ta(Ta_Param,
          tvs1=[start+18],
          tvs2=[Startd18, start],
          happens(walkThroughDoor21(customer1, mainEntrance1), Startd18)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2690).
axiom(happens(walkThroughDoor21(customer1, mainEntrance1), Startd18),
    [b(start, Startd18), toffset(start, 18, Startd18)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2691
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2692).
% range time 0 19
==> range(time,0,19).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2692
% range offset 0 0
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2692).
==> range(offset,0,0).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2693
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2694).
% range diameter 0 0
==> range(diameter,0,0).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2695
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2696).
% completion Happens
==> completion(happens).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: ecnet/RepRest.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{Mueller:InPress,
%;   author = "Erik T. Mueller",
%;   year = "in press",
%;   title = "Modelling space and time in narratives about restaurants",
%;   journal = "Literary and Linguistic Computing",
%; }
%;
%;sort boolean
%;sort integer
%;reified sort predicate
%;reified sort function
%;
%;sort time: integer
%;sort offset: integer
%;
%;reified sort fluent
%;reified sort event
%;
%;predicate Happens(event,time)
%;predicate HoldsAt(fluent,time)
%;predicate ReleasedAt(fluent,time)
%;predicate Initiates(event,fluent,time)
%;predicate Terminates(event,fluent,time)
%;predicate Releases(event,fluent,time)
%;
%;sort diameter: integer
%;
%;sort object
%;
%;sort agent: object
%;
%;sort physobj: object
%;sort bed: physobj
%;sort snowflake: physobj
%;sort sky: physobj
%;
%;sort stuff: physobj
%;
%;sort surface: physobj
%;sort ground: surface
%;
%;sort snow: stuff
%;sort ball
%;
%;sort food: physobj
%;sort fruit: food
%;sort orange: fruit
%;sort salad: food
%;
%;sort clothing: physobj
%;sort scarf: clothing
%;sort hat: clothing
%;
%;sort vegetablematter: physobj
%;sort coal: vegetablematter
%;
%;sort bodypart: physobj
%;sort hand: bodypart
%;
%;sort papertowels: physobj
%;sort device: physobj
%;sort electronicdevice: device
%;sort lamp: electronicdevice
%;
%;sort cat: physobj
%;
%;sort weapon: physobj
%;sort gun: weapon
%;sort bomb: weapon
%;sort bullet: weapon
%;
%;sort location
%;sort room: location, outside: location
%;
%;sort portal
%;sort door: portal, staircase: portal
%;sort street: portal
%;
%;sort building
%;
%;sort fire: object
%;
%;sort furniture: physobj
%;sort chair: furniture
%;sort table: furniture
%;
%;sort menu: physobj
%;sort bill: physobj
%;
%;sort script
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2807
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2808).
% fluent Holding(agent,physobj)
fluent(holding(agent,physobj)).
==> mpred_prop(holding(agent,physobj),fluent).
==> meta_argtypes(holding(agent,physobj)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2808
% event PickUp(agent,physobj)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2808).
event(pickUp(agent,physobj)).
==> mpred_prop(pickUp(agent,physobj),event).
==> meta_argtypes(pickUp(agent,physobj)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2809
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2810).
% event LetGoOf(agent,physobj)
event(letGoOf(agent,physobj)).
==> mpred_prop(letGoOf(agent,physobj),event).
==> meta_argtypes(letGoOf(agent,physobj)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2811
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2812).
% [agent,physobj,time]
% Initiates(PickUp(agent,physobj),Holding(agent,physobj),time).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(pickUp(Agent, Physobj),
                    holding(Agent, Physobj),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2812).
axiom(initiates(pickUp(Agent, Physobj), holding(Agent, Physobj), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2814
% [agent,physobj,time]
% Happens(PickUp(agent,physobj),time) ->
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2816
% {location}% 
%   HoldsAt(At(agent,location),time) &
%   HoldsAt(At(physobj,location),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2818
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2816).

 /*  exists([Location],
    happens(pickUp(Agent, Physobj), Time) ->
       holds_at(at(Agent, Location), Time),
       holds_at(at(Physobj, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2816).

 /*  not(happens(pickUp(Agent, Physobj), Time)) :-
       (   not(holds_at(at(Agent, Location), Time))
       ;   not(holds_at(at(Physobj, Location), Time))
       ),
       some(Location, '$kolem_Fn_355'(Agent, Physobj, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2816).

 /*  [(holds_at(neg(at(Agent, Location)), Time);holds_at(neg(at(Physobj, Location)), Time)), some(Location, '$kolem_Fn_355'(Agent, Physobj, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(pickUp(Agent, Physobj), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2816).
axiom(not(happens(pickUp(Agent, Physobj), Time)),
   
    [  (holds_at(neg(at(Agent, Location)), Time);holds_at(neg(at(Physobj, Location)), Time)),
      some(Location, '$kolem_Fn_355'(Agent, Physobj, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2816).

 /*  holds_at(at(Agent, Location), Time) :-
       happens(pickUp(Agent, Physobj), Time),
       some(Location, '$kolem_Fn_355'(Agent, Physobj, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2816).

 /*  [happens(pickUp(Agent, Physobj), Time), some(Location, '$kolem_Fn_355'(Agent, Physobj, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(at(Agent, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2816).
axiom(holds_at(at(Agent, Location), Time),
   
    [ happens(pickUp(Agent, Physobj), Time),
      some(Location, '$kolem_Fn_355'(Agent, Physobj, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2816).

 /*  holds_at(at(Physobj, Location), Time) :-
       happens(pickUp(Agent, Physobj), Time),
       some(Location, '$kolem_Fn_355'(Agent, Physobj, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2816).

 /*  [happens(pickUp(Agent, Physobj), Time), some(Location, '$kolem_Fn_355'(Agent, Physobj, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(at(Physobj, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2816).
axiom(holds_at(at(Physobj, Location), Time),
   
    [ happens(pickUp(Agent, Physobj), Time),
      some(Location, '$kolem_Fn_355'(Agent, Physobj, Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2820
% [agent,physobj,time]
% Terminates(LetGoOf(agent,physobj),Holding(agent,physobj),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2822).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(letGoOf(Agent, Physobj),
                     holding(Agent, Physobj),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2822).
axiom(terminates(letGoOf(Agent, Physobj), holding(Agent, Physobj), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2823
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2824).
% [agent,physobj,time]
% Happens(LetGoOf(agent,physobj),time) ->
% HoldsAt(Holding(agent,physobj),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2825

 /*  happens(letGoOf(Agent, Physobj), Time) ->
       holds_at(holding(Agent, Physobj), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2824).

 /*  holds_at(holding(Agent, Physobj), Time) :-
       happens(letGoOf(Agent, Physobj), Time).
 */

 /*  [holds_at(metreqs(letGoOf(Agent, Physobj)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(letGoOf(Agent, Physobj), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2824).
axiom(requires(letGoOf(Agent, Physobj), Time),
    [holds_at(metreqs(letGoOf(Agent, Physobj)), Time)]).

 /*  [holds_at(holding(Agent, Physobj), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(letGoOf(Agent, Physobj)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2824).
axiom(holds_at(metreqs(letGoOf(Agent, Physobj)), Time),
    [holds_at(holding(Agent, Physobj), Time)]).

 /*  not(happens(letGoOf(Agent, Physobj), Time)) :-
       not(holds_at(holding(Agent, Physobj), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2824).

 /*  [holds_at(neg(holding(Agent, Physobj)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(letGoOf(Agent, Physobj), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2824).
axiom(not(happens(letGoOf(Agent, Physobj), Time)),
    [holds_at(neg(holding(Agent, Physobj)), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2827
% [agent,physobj,location,time]
% Releases(PickUp(agent,physobj),At(physobj,location),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2829).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          releases(pickUp(Agent, Physobj),
                   at(Physobj, Location),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2829).
axiom(releases(pickUp(Agent, Physobj), at(Physobj, Location), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2830
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2831).
% [agent,physobj,location,time]
% HoldsAt(Holding(agent,physobj),time) &
% HoldsAt(At(agent,location),time) ->
% HoldsAt(At(physobj,location),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2833
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2831).

 /*  holds_at(holding(Agent, Physobj), Time), holds_at(at(Agent, Location), Time) ->
       holds_at(at(Physobj, Location), Time).
 */

 /*  holds_at(at(Physobj, Location), Time) :-
       holds_at(holding(Agent, Physobj), Time),
       holds_at(at(Agent, Location), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2831).

 /*  [holds_at(holding(Agent, Physobj), Time), holds_at(at(Agent, Location), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(at(Physobj, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2831).
axiom(holds_at(at(Physobj, Location), Time),
   
    [ holds_at(holding(Agent, Physobj), Time),
      holds_at(at(Agent, Location), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2831).

 /*  not(holds_at(holding(Agent, Physobj), Time)) :-
       holds_at(at(Agent, Location), Time),
       not(holds_at(at(Physobj, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2831).

 /*  [holds_at(at(Agent, Location), Time), holds_at(neg(at(Physobj, Location)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(holding(Agent, Physobj)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2831).
axiom(holds_at(neg(holding(Agent, Physobj)), Time),
   
    [ holds_at(at(Agent, Location), Time),
      holds_at(neg(at(Physobj, Location)), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2831).

 /*  not(holds_at(at(Agent, Location), Time)) :-
       holds_at(holding(Agent, Physobj), Time),
       not(holds_at(at(Physobj, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2831).

 /*  [holds_at(holding(Agent, Physobj), Time), holds_at(neg(at(Physobj, Location)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(at(Agent, Location)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2831).
axiom(holds_at(neg(at(Agent, Location)), Time),
   
    [ holds_at(holding(Agent, Physobj), Time),
      holds_at(neg(at(Physobj, Location)), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2835
%;[agent,physobj,location1,location2,time]
%;HoldsAt(At(agent,location1),time) &
%;location1!=location2 ->
%;Terminates(LetGoOf(agent,physobj),At(physobj,location2),time).
% [agent,physobj,location,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2841
% HoldsAt(At(agent,location),time) ->
% Initiates(LetGoOf(agent,physobj),At(physobj,location),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2841).

 /*  [holds_at(at(Agent, Location), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(letGoOf(Agent, Physobj),
                    at(Physobj, Location),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2841).
axiom(initiates(letGoOf(Agent, Physobj), at(Physobj, Location), Time),
    [holds_at(at(Agent, Location), Time)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2844
% fluent On(physobj,physobj)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2844).
fluent(on(physobj,physobj)).
==> mpred_prop(on(physobj,physobj),fluent).
==> meta_argtypes(on(physobj,physobj)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2846
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2847).
% event PlaceOn(agent,physobj,physobj)
event(placeOn(agent,physobj,physobj)).
==> mpred_prop(placeOn(agent,physobj,physobj),event).
==> meta_argtypes(placeOn(agent,physobj,physobj)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2848
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2849).
% event TakeOffOf(agent,physobj,physobj)
event(takeOffOf(agent,physobj,physobj)).
==> mpred_prop(takeOffOf(agent,physobj,physobj),event).
==> meta_argtypes(takeOffOf(agent,physobj,physobj)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2850
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2851).
% [physobj1,physobj2,time]
% HoldsAt(On(physobj1,physobj2),time) ->
% physobj1!=physobj2.
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2852

 /*  holds_at(on(Physobj1, Physobj2), Time) ->
       diff(Physobj1, Physobj2).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2851).

 /*  not(holds_at(on(Physobj1, Physobj2), Time)) :-
       not(diff(Physobj1, Physobj2)).
 */

 /*  [equals(Physobj1, Physobj2)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(on(Physobj1, Physobj2)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2851).
axiom(holds_at(neg(on(Physobj1, Physobj2)), Time),
    [equals(Physobj1, Physobj2)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2854
% [physobj1,physobj2,time]
% HoldsAt(On(physobj1,physobj2),time) ->
% !HoldsAt(On(physobj2,physobj1),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2856

 /*  holds_at(on(Physobj1, Physobj2), Time) ->
       holds_at(neg(on(Physobj2, Physobj1)), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2856).

 /*  holds_at(neg(on(Physobj2, Physobj1)), Time) :-
       holds_at(on(Physobj1, Physobj2), Time).
 */

 /*  [holds_at(on(Physobj1, Physobj2), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(on(Physobj2, Physobj1)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2856).
axiom(holds_at(neg(on(Physobj2, Physobj1)), Time),
    [holds_at(on(Physobj1, Physobj2), Time)]).

 /*  not(holds_at(on(Physobj1, Physobj2), Time)) :-
       not(holds_at(neg(on(Physobj2, Physobj1)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2856).

 /*  [holds_at(on(Physobj2, Physobj1), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(on(Physobj1, Physobj2)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2856).
axiom(holds_at(neg(on(Physobj1, Physobj2)), Time),
    [holds_at(on(Physobj2, Physobj1), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2858
% [agent,physobj1,physobj2,time]
% Initiates(PlaceOn(agent,physobj1,physobj2),
%           On(physobj1,physobj2),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2860

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(placeOn(Agent, Physobj1, Physobj2),
                    on(Physobj1, Physobj2),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2860).
axiom(initiates(placeOn(Agent, Physobj1, Physobj2), on(Physobj1, Physobj2), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2862
% [agent,physobj1,physobj2,time]
% Terminates(PlaceOn(agent,physobj1,physobj2),
%            Holding(agent,physobj1),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2864

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(placeOn(Agent, Physobj1, Physobj2),
                     holding(Agent, Physobj1),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2864).
axiom(terminates(placeOn(Agent, Physobj1, Physobj2), holding(Agent, Physobj1), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2866
% [agent,physobj1,physobj2,time]
% Happens(PlaceOn(agent,physobj1,physobj2),time) ->
% HoldsAt(Holding(agent,physobj1),time) &
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2869
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2868).
% {location}% 
%  HoldsAt(At(agent,location),time) &
%  HoldsAt(At(physobj2,location),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2871
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2870).

 /*  exists([Location],
    happens(placeOn(Agent, Physobj1, Physobj2), Time) ->
       holds_at(holding(Agent, Physobj1), Time),
       holds_at(at(Agent, Location), Time),
       holds_at(at(Physobj2, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2870).

 /*  not(happens(placeOn(Agent, Physobj1, Physobj2), Time)) :-
       (   not(holds_at(holding(Agent, Physobj1), Time))
       ;   not(holds_at(at(Agent, Location), Time))
       ;   not(holds_at(at(Physobj2, Location), Time))
       ),
       some(Location,
            '$kolem_Fn_356'(Agent, Physobj1, Physobj2, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2870).

 /*  [(holds_at(neg(holding(Agent, Physobj1)), Time);holds_at(neg(at(Agent, Location)), Time);holds_at(neg(at(Physobj2, Location)), Time)), some(Location, '$kolem_Fn_356'(Agent, Physobj1, Physobj2, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(placeOn(Agent, Physobj1, Physobj2),
                      Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2870).
axiom(not(happens(placeOn(Agent, Physobj1, Physobj2), Time)),
   
    [  (holds_at(neg(holding(Agent, Physobj1)), Time);holds_at(neg(at(Agent, Location)), Time);holds_at(neg(at(Physobj2, Location)), Time)),
      some(Location,
           '$kolem_Fn_356'(Agent, Physobj1, Physobj2, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2870).

 /*  holds_at(holding(Agent, Physobj1), Time) :-
       happens(placeOn(Agent, Physobj1, Physobj2), Time),
       some(Location,
            '$kolem_Fn_356'(Agent, Physobj1, Physobj2, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2870).

 /*  [happens(placeOn(Agent, Physobj1, Physobj2), Time), some(Location, '$kolem_Fn_356'(Agent, Physobj1, Physobj2, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(holding(Agent, Physobj1), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2870).
axiom(holds_at(holding(Agent, Physobj1), Time),
   
    [ happens(placeOn(Agent, Physobj1, Physobj2), Time),
      some(Location,
           '$kolem_Fn_356'(Agent, Physobj1, Physobj2, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2870).

 /*  holds_at(at(Agent, Location), Time) :-
       happens(placeOn(Agent, Physobj1, Physobj2), Time),
       some(Location,
            '$kolem_Fn_356'(Agent, Physobj1, Physobj2, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2870).

 /*  [happens(placeOn(Agent, Physobj1, Physobj2), Time), some(Location, '$kolem_Fn_356'(Agent, Physobj1, Physobj2, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(at(Agent, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2870).
axiom(holds_at(at(Agent, Location), Time),
   
    [ happens(placeOn(Agent, Physobj1, Physobj2), Time),
      some(Location,
           '$kolem_Fn_356'(Agent, Physobj1, Physobj2, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2870).

 /*  holds_at(at(Physobj2, Location), Time) :-
       happens(placeOn(Agent, Physobj1, Physobj2), Time),
       some(Location,
            '$kolem_Fn_356'(Agent, Physobj1, Physobj2, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2870).

 /*  [happens(placeOn(Agent, Physobj1, Physobj2), Time), some(Location, '$kolem_Fn_356'(Agent, Physobj1, Physobj2, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(at(Physobj2, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2870).
axiom(holds_at(at(Physobj2, Location), Time),
   
    [ happens(placeOn(Agent, Physobj1, Physobj2), Time),
      some(Location,
           '$kolem_Fn_356'(Agent, Physobj1, Physobj2, Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2873
% [agent,physobj1,physobj2,time]
% Terminates(TakeOffOf(agent,physobj1,physobj2),
%            On(physobj1,physobj2),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2875

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(takeOffOf(Agent, Physobj1, Physobj2),
                     on(Physobj1, Physobj2),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2875).
axiom(terminates(takeOffOf(Agent, Physobj1, Physobj2), on(Physobj1, Physobj2), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2877
% [agent,physobj1,physobj2,time]
% Initiates(TakeOffOf(agent,physobj1,physobj2),
%           Holding(agent,physobj1),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2879

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(takeOffOf(Agent, Physobj1, Physobj2),
                    holding(Agent, Physobj1),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2879).
axiom(initiates(takeOffOf(Agent, Physobj1, Physobj2), holding(Agent, Physobj1), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2881
% [agent,physobj1,physobj2,location,time]
% Releases(TakeOffOf(agent,physobj1,physobj2),
%          At(physobj1,location),
%          time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2884
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2883).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          releases(takeOffOf(Agent, Physobj1, Physobj2),
                   at(Physobj1, Location),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2883).
axiom(releases(takeOffOf(Agent, Physobj1, Physobj2), at(Physobj1, Location), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2886
% [agent,physobj1,physobj2,time]
% Happens(TakeOffOf(agent,physobj1,physobj2),time) ->
% HoldsAt(On(physobj1,physobj2),time) &
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2889
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2888).
% {location}% 
%  HoldsAt(At(agent,location),time) &
%  HoldsAt(At(physobj1,location),time) &
%  HoldsAt(At(physobj2,location),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2892
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2890).

 /*  exists([Location],
    happens(takeOffOf(Agent, Physobj1, Physobj2), Time) ->
       holds_at(on(Physobj1, Physobj2), Time),
       holds_at(at(Agent, Location), Time),
       holds_at(at(Physobj1, Location), Time),
       holds_at(at(Physobj2, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2890).

 /*  not(happens(takeOffOf(Agent, Physobj1, Physobj2), Time)) :-
       (   not(holds_at(on(Physobj1, Physobj2), Time))
       ;   not(holds_at(at(Agent, Location), Time))
       ;   not(holds_at(at(Physobj1, Location), Time))
       ;   not(holds_at(at(Physobj2, Location), Time))
       ),
       some(Location,
            '$kolem_Fn_357'(Agent, Physobj1, Physobj2, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2890).

 /*  [(holds_at(neg(on(Physobj1, Physobj2)), Time);holds_at(neg(at(Agent, Location)), Time);holds_at(neg(at(Physobj1, Location)), Time);holds_at(neg(at(Physobj2, Location)), Time)), some(Location, '$kolem_Fn_357'(Agent, Physobj1, Physobj2, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(takeOffOf(Agent, Physobj1, Physobj2),
                      Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2890).
axiom(not(happens(takeOffOf(Agent, Physobj1, Physobj2), Time)),
   
    [  (holds_at(neg(on(Physobj1, Physobj2)), Time);holds_at(neg(at(Agent, Location)), Time);holds_at(neg(at(Physobj1, Location)), Time);holds_at(neg(at(Physobj2, Location)), Time)),
      some(Location,
           '$kolem_Fn_357'(Agent, Physobj1, Physobj2, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2890).

 /*  holds_at(on(Physobj1, Physobj2), Time) :-
       happens(takeOffOf(Agent, Physobj1, Physobj2), Time),
       some(Location,
            '$kolem_Fn_357'(Agent, Physobj1, Physobj2, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2890).

 /*  [happens(takeOffOf(Agent, Physobj1, Physobj2), Time), some(Location, '$kolem_Fn_357'(Agent, Physobj1, Physobj2, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(on(Physobj1, Physobj2), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2890).
axiom(holds_at(on(Physobj1, Physobj2), Time),
   
    [ happens(takeOffOf(Agent, Physobj1, Physobj2), Time),
      some(Location,
           '$kolem_Fn_357'(Agent, Physobj1, Physobj2, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2890).

 /*  holds_at(at(Agent, Location), Time) :-
       happens(takeOffOf(Agent, Physobj1, Physobj2), Time),
       some(Location,
            '$kolem_Fn_357'(Agent, Physobj1, Physobj2, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2890).

 /*  [happens(takeOffOf(Agent, Physobj1, Physobj2), Time), some(Location, '$kolem_Fn_357'(Agent, Physobj1, Physobj2, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(at(Agent, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2890).
axiom(holds_at(at(Agent, Location), Time),
   
    [ happens(takeOffOf(Agent, Physobj1, Physobj2), Time),
      some(Location,
           '$kolem_Fn_357'(Agent, Physobj1, Physobj2, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2890).

 /*  holds_at(at(Physobj1, Location), Time) :-
       happens(takeOffOf(Agent, Physobj1, Physobj2), Time),
       some(Location,
            '$kolem_Fn_357'(Agent, Physobj1, Physobj2, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2890).

 /*  [happens(takeOffOf(Agent, Physobj1, Physobj2), Time), some(Location, '$kolem_Fn_357'(Agent, Physobj1, Physobj2, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(at(Physobj1, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2890).
axiom(holds_at(at(Physobj1, Location), Time),
   
    [ happens(takeOffOf(Agent, Physobj1, Physobj2), Time),
      some(Location,
           '$kolem_Fn_357'(Agent, Physobj1, Physobj2, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2890).

 /*  holds_at(at(Physobj2, Location), Time) :-
       happens(takeOffOf(Agent, Physobj1, Physobj2), Time),
       some(Location,
            '$kolem_Fn_357'(Agent, Physobj1, Physobj2, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2890).

 /*  [happens(takeOffOf(Agent, Physobj1, Physobj2), Time), some(Location, '$kolem_Fn_357'(Agent, Physobj1, Physobj2, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(at(Physobj2, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2890).
axiom(holds_at(at(Physobj2, Location), Time),
   
    [ happens(takeOffOf(Agent, Physobj1, Physobj2), Time),
      some(Location,
           '$kolem_Fn_357'(Agent, Physobj1, Physobj2, Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2894
% [agent,physobj1,physobj2,location,time]
% Releases(PlaceOn(agent,physobj1,physobj2),
%          At(physobj1,location),
%          time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2897
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2896).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          releases(placeOn(Agent, Physobj1, Physobj2),
                   at(Physobj1, Location),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2896).
axiom(releases(placeOn(Agent, Physobj1, Physobj2), at(Physobj1, Location), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2899
% [physobj1,physobj2,location,time]
% HoldsAt(On(physobj1,physobj2),time) &
% HoldsAt(At(physobj2,location),time) ->
% HoldsAt(At(physobj1,location),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2902
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2901).

 /*  holds_at(on(Physobj1, Physobj2), Time), holds_at(at(Physobj2, Location), Time) ->
       holds_at(at(Physobj1, Location), Time).
 */

 /*  holds_at(at(Physobj1, Location), Time) :-
       holds_at(on(Physobj1, Physobj2), Time),
       holds_at(at(Physobj2, Location), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2901).

 /*  [holds_at(on(Physobj1, Physobj2), Time), holds_at(at(Physobj2, Location), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(at(Physobj1, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2901).
axiom(holds_at(at(Physobj1, Location), Time),
   
    [ holds_at(on(Physobj1, Physobj2), Time),
      holds_at(at(Physobj2, Location), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2901).

 /*  not(holds_at(on(Physobj1, Physobj2), Time)) :-
       holds_at(at(Physobj2, Location), Time),
       not(holds_at(at(Physobj1, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2901).

 /*  [holds_at(at(Physobj2, Location), Time), holds_at(neg(at(Physobj1, Location)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(on(Physobj1, Physobj2)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2901).
axiom(holds_at(neg(on(Physobj1, Physobj2)), Time),
   
    [ holds_at(at(Physobj2, Location), Time),
      holds_at(neg(at(Physobj1, Location)), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2901).

 /*  not(holds_at(at(Physobj2, Location), Time)) :-
       holds_at(on(Physobj1, Physobj2), Time),
       not(holds_at(at(Physobj1, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2901).

 /*  [holds_at(on(Physobj1, Physobj2), Time), holds_at(neg(at(Physobj1, Location)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(at(Physobj2, Location)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2901).
axiom(holds_at(neg(at(Physobj2, Location)), Time),
   
    [ holds_at(on(Physobj1, Physobj2), Time),
      holds_at(neg(at(Physobj1, Location)), Time)
    ]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2904
% fluent At(object,location)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2904).
fluent(at(object,location)).
==> mpred_prop(at(object,location),fluent).
==> meta_argtypes(at(object,location)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2906
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2907).
% [object,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2907
% {location} % HoldsAt(At(object,location),time).

 /*  exists([Location],
    holds_at(at(Object,Location),Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2907).

 /*  holds_at(at(Object, Location), Time) :-
       some(Location, '$kolem_Fn_358'(Object, Time)).
 */

 /*  [some(Location, '$kolem_Fn_358'(Object, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(at(Object, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2907).
axiom(holds_at(at(Object, Location), Time),
    [some(Location, '$kolem_Fn_358'(Object, Time))]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2909
% [object,location1,location2,time]
% HoldsAt(At(object,location1),time) &
% HoldsAt(At(object,location2),time) ->
% location1=location2.
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2912
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2911).

 /*  holds_at(at(Object, Location1), Time), holds_at(at(Object, Location2), Time) ->
       equals(Location1, Location2).
 */

 /*  not(holds_at(at(Object, Location1), Time)) :-
       holds_at(at(Object, Location2), Time),
       not(equals(Location1, Location2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2911).

 /*  [holds_at(at(Object, Location2), Time), not(equals(Location1, Location2))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(at(Object, Location1)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2911).
axiom(holds_at(neg(at(Object, Location1)), Time),
   
    [ holds_at(at(Object, Location2), Time),
      not(equals(Location1, Location2))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2911).

 /*  not(holds_at(at(Object, Location2), Time)) :-
       holds_at(at(Object, Location1), Time),
       not(equals(Location1, Location2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2911).

 /*  [holds_at(at(Object, Location1), Time), not(equals(Location1, Location2))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(at(Object, Location2)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2911).
axiom(holds_at(neg(at(Object, Location2)), Time),
   
    [ holds_at(at(Object, Location1), Time),
      not(equals(Location2, Location1))
    ]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2914
% function Side1(portal): location
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2914).
function(side1(portal)).
==> mpred_prop(side1(portal),function).
==> meta_argtypes(side1(portal)).
predicate(side1Pred(portal,location)).
==> mpred_prop(side1Pred(portal,location),predicate).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2914).
==> meta_argtypes(side1Pred(portal,location)).

 /*  fix_axiom_head(Time) ->
       
       [ functional_predicate(side1, side1Pred),
          (->),
         holds_at(functional_predicate(side1, side1Pred), Time)
       ].
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2914).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(functional_predicate(side1, side1Pred), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2914).
axiom(holds_at(functional_predicate(side1, side1Pred), Time),
    []).
==> resultIsa(side1,location).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2915
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2916).
% function Side2(portal): location
function(side2(portal)).
==> mpred_prop(side2(portal),function).
==> meta_argtypes(side2(portal)).
predicate(side2Pred(portal,location)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2916).
==> mpred_prop(side2Pred(portal,location),predicate).
==> meta_argtypes(side2Pred(portal,location)).

 /*  fix_axiom_head(Time) ->
       
       [ functional_predicate(side2, side2Pred),
          (->),
         holds_at(functional_predicate(side2, side2Pred), Time)
       ].
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2916).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(functional_predicate(side2, side2Pred), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2916).
axiom(holds_at(functional_predicate(side2, side2Pred), Time),
    []).
==> resultIsa(side2,location).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2917
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2918).
% fluent NearPortal(object,portal)
fluent(nearPortal(object,portal)).
==> mpred_prop(nearPortal(object,portal),fluent).
==> meta_argtypes(nearPortal(object,portal)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2918
% noninertial NearPortal
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2918).
==> noninertial(nearPortal).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2920
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2921).
% [object,portal,time]
% HoldsAt(NearPortal(object,portal),time) <->
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2922
% {location}% 
%  (Side1(portal)=location|
%   Side2(portal)=location) &
%  HoldsAt(At(object,location),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2925
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2923).

 /*  exists([Location],
    holds_at(nearPortal(Object, Portal), Time) <->
       (   equals(side1(Portal), Location)
       ;   equals(side2(Portal), Location)
       ),
       holds_at(at(Object, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2923).

 /*  not(holds_at(nearPortal(Object, Portal), Time)) :-
       (   not(equals(side1(Portal), Location)),
           not(equals(side2(Portal), Location))
       ;   not(holds_at(at(Object, Location), Time))
       ),
       some(Location, '$kolem_Fn_359'(Object, Portal, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2923).

 /*  [(not(equals(side1(Portal), Location)), not(equals(side2(Portal), Location));holds_at(neg(at(Object, Location)), Time)), some(Location, '$kolem_Fn_359'(Object, Portal, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(nearPortal(Object, Portal)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2923).
axiom(holds_at(neg(nearPortal(Object, Portal)), Time),
   
    [  (not(equals(side1(Portal), Location)), not(equals(side2(Portal), Location));holds_at(neg(at(Object, Location)), Time)),
      some(Location, '$kolem_Fn_359'(Object, Portal, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2923).

 /*  holds_at(at(Object, Location), Time) :-
       holds_at(nearPortal(Object, Portal), Time),
       some(Location, '$kolem_Fn_359'(Object, Portal, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2923).

 /*  [holds_at(nearPortal(Object, Portal), Time), some(Location, '$kolem_Fn_359'(Object, Portal, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(at(Object, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2923).
axiom(holds_at(at(Object, Location), Time),
   
    [ holds_at(nearPortal(Object, Portal), Time),
      some(Location, '$kolem_Fn_359'(Object, Portal, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2923).

 /*  holds_at(nearPortal(Object, Portal), Time) :-
       ( holds_at(at(Object, Location), Time),
         (   equals(side1(Portal), Location)
         ;   equals(side2(Portal), Location)
         )
       ),
       some(Location, '$kolem_Fn_359'(Object, Portal, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2923).

 /*  [holds_at(at(Object, Location), Time),  (equals(side1(Portal), Location);equals(side2(Portal), Location)), some(Location, '$kolem_Fn_359'(Object, Portal, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(nearPortal(Object, Portal), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2923).
axiom(holds_at(nearPortal(Object, Portal), Time),
   
    [ holds_at(at(Object, Location), Time),
       (equals(side1(Portal), Location);equals(side2(Portal), Location)),
      some(Location, '$kolem_Fn_359'(Object, Portal, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2923).

 /*  not(holds_at(at(Object, Location), Time)) :-
       (   equals(side1(Portal), Location)
       ;   equals(side2(Portal), Location)
       ),
       not(holds_at(nearPortal(Object, Portal), Time)),
       some(Location, '$kolem_Fn_359'(Object, Portal, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2923).

 /*  [(equals(side1(Portal), Location);equals(side2(Portal), Location)), holds_at(neg(nearPortal(Object, Portal)), Time), some(Location, '$kolem_Fn_359'(Object, Portal, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(at(Object, Location)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2923).
axiom(holds_at(neg(at(Object, Location)), Time),
   
    [  (equals(side1(Portal), Location);equals(side2(Portal), Location)),
      holds_at(neg(nearPortal(Object, Portal)), Time),
      some(Location, '$kolem_Fn_359'(Object, Portal, Time))
    ]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2927
% event WalkThroughDoor12(agent,door)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2927).
event(walkThroughDoor12(agent,door)).
==> mpred_prop(walkThroughDoor12(agent,door),event).
==> meta_argtypes(walkThroughDoor12(agent,door)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2928
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2929).
% event WalkThroughDoor21(agent,door)
event(walkThroughDoor21(agent,door)).
==> mpred_prop(walkThroughDoor21(agent,door),event).
==> meta_argtypes(walkThroughDoor21(agent,door)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2930
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2931).
% [agent,door,time]
% Happens(WalkThroughDoor12(agent,door),time) ->
% HoldsAt(Standing(agent),time) &
% HoldsAt(At(agent,Side1(door)),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2933
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2931).

 /*  happens(walkThroughDoor12(Agent, Door), Time) ->
       holds_at(standing(Agent), Time),
       holds_at(at(Agent, side1(Door)), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2931).

 /*  not(happens(walkThroughDoor12(Agent, Door), Time)) :-
       (   not(holds_at(standing(Agent), Time))
       ;   not(holds_at(at(Agent, side1(Door)), Time))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2931).

 /*  [(holds_at(neg(standing(Agent)), Time);holds_at(neg(at(Agent, side1(Door))), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(walkThroughDoor12(Agent, Door), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2931).
axiom(not(happens(walkThroughDoor12(Agent, Door), Time)),
   
    [  (holds_at(neg(standing(Agent)), Time);holds_at(neg(at(Agent, side1(Door))), Time))
    ]).

 /*  holds_at(standing(Agent), Time) :-
       happens(walkThroughDoor12(Agent, Door), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2931).

 /*  [holds_at(metreqs(walkThroughDoor12(Agent, Door)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(walkThroughDoor12(Agent, Door), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2931).
axiom(requires(walkThroughDoor12(Agent, Door), Time),
    [holds_at(metreqs(walkThroughDoor12(Agent, Door)), Time)]).

 /*  [holds_at(standing(Agent), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(walkThroughDoor12(Agent, Door)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2931).
axiom(holds_at(metreqs(walkThroughDoor12(Agent, Door)), Time),
    [holds_at(standing(Agent), Time)]).

 /*  holds_at(at(Agent, side1(Door)), Time) :-
       happens(walkThroughDoor12(Agent, Door), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2931).

 /*  [holds_at(metreqs(walkThroughDoor12(Agent, Door)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(walkThroughDoor12(Agent, Door), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2931).
axiom(requires(walkThroughDoor12(Agent, Door), Time),
    [holds_at(metreqs(walkThroughDoor12(Agent, Door)), Time)]).

 /*  [holds_at(at(Agent, side1(Door)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(walkThroughDoor12(Agent, Door)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2931).
axiom(holds_at(metreqs(walkThroughDoor12(Agent, Door)), Time),
    [holds_at(at(Agent, side1(Door)), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2935
% [agent,door,time]
% Happens(WalkThroughDoor21(agent,door),time) ->
% HoldsAt(Standing(agent),time) &
% HoldsAt(At(agent,Side2(door)),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2938
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2937).

 /*  happens(walkThroughDoor21(Agent, Door), Time) ->
       holds_at(standing(Agent), Time),
       holds_at(at(Agent, side2(Door)), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2937).

 /*  not(happens(walkThroughDoor21(Agent, Door), Time)) :-
       (   not(holds_at(standing(Agent), Time))
       ;   not(holds_at(at(Agent, side2(Door)), Time))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2937).

 /*  [(holds_at(neg(standing(Agent)), Time);holds_at(neg(at(Agent, side2(Door))), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(walkThroughDoor21(Agent, Door), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2937).
axiom(not(happens(walkThroughDoor21(Agent, Door), Time)),
   
    [  (holds_at(neg(standing(Agent)), Time);holds_at(neg(at(Agent, side2(Door))), Time))
    ]).

 /*  holds_at(standing(Agent), Time) :-
       happens(walkThroughDoor21(Agent, Door), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2937).

 /*  [holds_at(metreqs(walkThroughDoor21(Agent, Door)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(walkThroughDoor21(Agent, Door), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2937).
axiom(requires(walkThroughDoor21(Agent, Door), Time),
    [holds_at(metreqs(walkThroughDoor21(Agent, Door)), Time)]).

 /*  [holds_at(standing(Agent), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(walkThroughDoor21(Agent, Door)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2937).
axiom(holds_at(metreqs(walkThroughDoor21(Agent, Door)), Time),
    [holds_at(standing(Agent), Time)]).

 /*  holds_at(at(Agent, side2(Door)), Time) :-
       happens(walkThroughDoor21(Agent, Door), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2937).

 /*  [holds_at(metreqs(walkThroughDoor21(Agent, Door)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(walkThroughDoor21(Agent, Door), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2937).
axiom(requires(walkThroughDoor21(Agent, Door), Time),
    [holds_at(metreqs(walkThroughDoor21(Agent, Door)), Time)]).

 /*  [holds_at(at(Agent, side2(Door)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(walkThroughDoor21(Agent, Door)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2937).
axiom(holds_at(metreqs(walkThroughDoor21(Agent, Door)), Time),
    [holds_at(at(Agent, side2(Door)), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2940
% [agent,door,location,time]
% Side2(door)=location ->
% Initiates(WalkThroughDoor12(agent,door),At(agent,location),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2942

 /*  [equals(side2(Door), Location)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(walkThroughDoor12(Agent, Door),
                    at(Agent, Location),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2942).
axiom(initiates(walkThroughDoor12(Agent, Door), at(Agent, Location), Time),
    [equals(side2(Door), Location)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2944
% [agent,door,location,time]
% Side1(door)=location ->
% Initiates(WalkThroughDoor21(agent,door),At(agent,location),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2946

 /*  [equals(side1(Door), Location)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(walkThroughDoor21(Agent, Door),
                    at(Agent, Location),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2946).
axiom(initiates(walkThroughDoor21(Agent, Door), at(Agent, Location), Time),
    [equals(side1(Door), Location)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2948
% [agent,door,location,time]
% Side1(door)=location ->
% Terminates(WalkThroughDoor12(agent,door),At(agent,location),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2950

 /*  [equals(side1(Door), Location)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(walkThroughDoor12(Agent, Door),
                     at(Agent, Location),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2950).
axiom(terminates(walkThroughDoor12(Agent, Door), at(Agent, Location), Time),
    [equals(side1(Door), Location)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2952
% [agent,door,location,time]
% Side2(door)=location ->
% Terminates(WalkThroughDoor21(agent,door),At(agent,location),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2954

 /*  [equals(side2(Door), Location)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(walkThroughDoor21(Agent, Door),
                     at(Agent, Location),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2954).
axiom(terminates(walkThroughDoor21(Agent, Door), at(Agent, Location), Time),
    [equals(side2(Door), Location)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2956
% fluent Hungry(agent)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2956).
fluent(hungry(agent)).
==> mpred_prop(hungry(agent),fluent).
==> meta_argtypes(hungry(agent)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2958
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2959).
% fluent Satiated(agent)
fluent(satiated(agent)).
==> mpred_prop(satiated(agent),fluent).
==> meta_argtypes(satiated(agent)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2959
% noninertial Satiated
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2959).
==> noninertial(satiated).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2961
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2962).
% [agent,time]
 % HoldsAt(Hungry(agent),time) <-> !HoldsAt(Satiated(agent),time).

 /*  holds_at(hungry(Agent), Time) <->
       holds_at(neg(satiated(Agent)), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2962).

 /*  [holds_at, hungry] <->
       [holds_at, neg, satiated].
 */

 /*  holds_at(hungry(Agent), Time) ->
       holds_at(neg(satiated(Agent)), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2962).

 /*  holds_at(neg(satiated(Agent)), Time) :-
       holds_at(hungry(Agent), Time).
 */

 /*  [holds_at(hungry(Agent), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(satiated(Agent)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2962).
axiom(holds_at(neg(satiated(Agent)), Time),
    [holds_at(hungry(Agent), Time)]).

 /*  not(holds_at(hungry(Agent), Time)) :-
       not(holds_at(neg(satiated(Agent)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2962).

 /*  [holds_at(satiated(Agent), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(hungry(Agent)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2962).
axiom(holds_at(neg(hungry(Agent)), Time),
    [holds_at(satiated(Agent), Time)]).

 /*  holds_at(neg(satiated(Agent)), Time) ->
       holds_at(hungry(Agent), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2962).

 /*  holds_at(hungry(Agent), Time) :-
       holds_at(neg(satiated(Agent)), Time).
 */

 /*  [holds_at(neg(satiated(Agent)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(hungry(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2962).
axiom(holds_at(hungry(Agent), Time),
    [holds_at(neg(satiated(Agent)), Time)]).

 /*  not(holds_at(neg(satiated(Agent)), Time)) :-
       not(holds_at(hungry(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2962).

 /*  [holds_at(neg(hungry(Agent)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(satiated(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2962).
axiom(holds_at(satiated(Agent), Time),
    [holds_at(neg(hungry(Agent)), Time)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2963
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2964).
% event Eat(agent,food)
event(eat(agent,food)).
==> mpred_prop(eat(agent,food),event).
==> meta_argtypes(eat(agent,food)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2965
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2966).
% [agent,food,time]
% Happens(Eat(agent,food),time) ->
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2967
% {location}% 
% HoldsAt(At(agent,location),time) &
% HoldsAt(At(food,location),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2969
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2968).

 /*  exists([Location],
    happens(eat(Agent, Food), Time) ->
       holds_at(at(Agent, Location), Time),
       holds_at(at(Food, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2968).

 /*  not(happens(eat(Agent, Food), Time)) :-
       (   not(holds_at(at(Agent, Location), Time))
       ;   not(holds_at(at(Food, Location), Time))
       ),
       some(Location, '$kolem_Fn_360'(Agent, Food, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2968).

 /*  [(holds_at(neg(at(Agent, Location)), Time);holds_at(neg(at(Food, Location)), Time)), some(Location, '$kolem_Fn_360'(Agent, Food, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(eat(Agent, Food), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2968).
axiom(not(happens(eat(Agent, Food), Time)),
   
    [  (holds_at(neg(at(Agent, Location)), Time);holds_at(neg(at(Food, Location)), Time)),
      some(Location, '$kolem_Fn_360'(Agent, Food, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2968).

 /*  holds_at(at(Agent, Location), Time) :-
       happens(eat(Agent, Food), Time),
       some(Location, '$kolem_Fn_360'(Agent, Food, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2968).

 /*  [happens(eat(Agent, Food), Time), some(Location, '$kolem_Fn_360'(Agent, Food, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(at(Agent, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2968).
axiom(holds_at(at(Agent, Location), Time),
   
    [ happens(eat(Agent, Food), Time),
      some(Location, '$kolem_Fn_360'(Agent, Food, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2968).

 /*  holds_at(at(Food, Location), Time) :-
       happens(eat(Agent, Food), Time),
       some(Location, '$kolem_Fn_360'(Agent, Food, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2968).

 /*  [happens(eat(Agent, Food), Time), some(Location, '$kolem_Fn_360'(Agent, Food, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(at(Food, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2968).
axiom(holds_at(at(Food, Location), Time),
   
    [ happens(eat(Agent, Food), Time),
      some(Location, '$kolem_Fn_360'(Agent, Food, Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2971
% [agent,food,time]
% Terminates(Eat(agent,food),Hungry(agent),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2973).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(eat(Agent, Food), hungry(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2973).
axiom(terminates(eat(Agent, Food), hungry(Agent), Time),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2974
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2975).
% sort restaurant: script
==> subsort(restaurant,script).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2975
% sort waiter: agent
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2975).
==> subsort(waiter,agent).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2976
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2977).
% sort cook: agent
==> subsort(cook,agent).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2978
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2979).
% function BillOf(restaurant): bill
function(billOf(restaurant)).
==> mpred_prop(billOf(restaurant),function).
==> meta_argtypes(billOf(restaurant)).
predicate(bill(restaurant,bill)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2979).
==> mpred_prop(bill(restaurant,bill),predicate).
==> meta_argtypes(bill(restaurant,bill)).

 /*  fix_axiom_head(Time) ->
       
       [ functional_predicate(billOf, bill),
          (->),
         holds_at(functional_predicate(billOf, bill), Time)
       ].
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2979).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(functional_predicate(billOf, bill), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2979).
axiom(holds_at(functional_predicate(billOf, bill), Time),
    []).
==> resultIsa(billOf,bill).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2979
% function CookOf(restaurant): cook
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2979).
function(cookOf(restaurant)).
==> mpred_prop(cookOf(restaurant),function).
==> meta_argtypes(cookOf(restaurant)).
predicate(cook(restaurant,cook)).
==> mpred_prop(cook(restaurant,cook),predicate).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2979).
==> meta_argtypes(cook(restaurant,cook)).

 /*  fix_axiom_head(Time) ->
       
       [ functional_predicate(cookOf, cook),
          (->),
         holds_at(functional_predicate(cookOf, cook), Time)
       ].
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2979).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(functional_predicate(cookOf, cook), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2979).
axiom(holds_at(functional_predicate(cookOf, cook), Time),
    []).
==> resultIsa(cookOf,cook).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2980
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2981).
% function TableOf(restaurant): table
function(tableOf(restaurant)).
==> mpred_prop(tableOf(restaurant),function).
==> meta_argtypes(tableOf(restaurant)).
predicate(table(restaurant,table)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2981).
==> mpred_prop(table(restaurant,table),predicate).
==> meta_argtypes(table(restaurant,table)).

 /*  fix_axiom_head(Time) ->
       
       [ functional_predicate(tableOf, table),
          (->),
         holds_at(functional_predicate(tableOf, table), Time)
       ].
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2981).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(functional_predicate(tableOf, table), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2981).
axiom(holds_at(functional_predicate(tableOf, table), Time),
    []).
==> resultIsa(tableOf,table).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2981
% function WaiterOf(restaurant): waiter
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2981).
function(waiterOf(restaurant)).
==> mpred_prop(waiterOf(restaurant),function).
==> meta_argtypes(waiterOf(restaurant)).
predicate(waiter(restaurant,waiter)).
==> mpred_prop(waiter(restaurant,waiter),predicate).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2981).
==> meta_argtypes(waiter(restaurant,waiter)).

 /*  fix_axiom_head(Time) ->
       
       [ functional_predicate(waiterOf, waiter),
          (->),
         holds_at(functional_predicate(waiterOf, waiter), Time)
       ].
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2981).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(functional_predicate(waiterOf, waiter), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2981).
axiom(holds_at(functional_predicate(waiterOf, waiter), Time),
    []).
==> resultIsa(waiterOf,waiter).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2982
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2983).
% function KitchenDoorOf(restaurant): door
function(kitchenDoorOf(restaurant)).
==> mpred_prop(kitchenDoorOf(restaurant),function).
==> meta_argtypes(kitchenDoorOf(restaurant)).
predicate(kitchenDoor(restaurant,door)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2983).
==> mpred_prop(kitchenDoor(restaurant,door),predicate).
==> meta_argtypes(kitchenDoor(restaurant,door)).

 /*  fix_axiom_head(Time) ->
       
       [ functional_predicate(kitchenDoorOf, kitchenDoor),
          (->),
         holds_at(functional_predicate(kitchenDoorOf, kitchenDoor), Time)
       ].
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2983).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(functional_predicate(kitchenDoorOf, kitchenDoor), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2983).
axiom(holds_at(functional_predicate(kitchenDoorOf, kitchenDoor), Time),
    []).
==> resultIsa(kitchenDoorOf,door).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2984
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2985).
% fluent BeWaiter0(waiter)
fluent(beWaiter0(waiter)).
==> mpred_prop(beWaiter0(waiter),fluent).
==> meta_argtypes(beWaiter0(waiter)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2986
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2987).
% fluent BeWaiter1(waiter)
fluent(beWaiter1(waiter)).
==> mpred_prop(beWaiter1(waiter),fluent).
==> meta_argtypes(beWaiter1(waiter)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2988
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2989).
% fluent BeWaiter2(waiter)
fluent(beWaiter2(waiter)).
==> mpred_prop(beWaiter2(waiter),fluent).
==> meta_argtypes(beWaiter2(waiter)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2990
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2991).
% fluent BeWaiter3(waiter)
fluent(beWaiter3(waiter)).
==> mpred_prop(beWaiter3(waiter),fluent).
==> meta_argtypes(beWaiter3(waiter)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2992
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2993).
% fluent BeWaiter4(waiter)
fluent(beWaiter4(waiter)).
==> mpred_prop(beWaiter4(waiter),fluent).
==> meta_argtypes(beWaiter4(waiter)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2994
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2995).
% fluent BeWaiter5(waiter)
fluent(beWaiter5(waiter)).
==> mpred_prop(beWaiter5(waiter),fluent).
==> meta_argtypes(beWaiter5(waiter)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2996
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2997).
% fluent BeWaiter6(waiter)
fluent(beWaiter6(waiter)).
==> mpred_prop(beWaiter6(waiter),fluent).
==> meta_argtypes(beWaiter6(waiter)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:2998
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',2999).
% fluent BeWaiter7(waiter)
fluent(beWaiter7(waiter)).
==> mpred_prop(beWaiter7(waiter),fluent).
==> meta_argtypes(beWaiter7(waiter)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3000
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3001).
% fluent BeWaiter8(waiter)
fluent(beWaiter8(waiter)).
==> mpred_prop(beWaiter8(waiter),fluent).
==> meta_argtypes(beWaiter8(waiter)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3002
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3003).
% fluent BeWaiter9(waiter)
fluent(beWaiter9(waiter)).
==> mpred_prop(beWaiter9(waiter),fluent).
==> meta_argtypes(beWaiter9(waiter)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3004
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3005).
% xor BeWaiter0, BeWaiter1, BeWaiter2, BeWaiter3, BeWaiter4, BeWaiter5, BeWaiter6, BeWaiter7, BeWaiter8, BeWaiter9
==> xor([ beWaiter0,
	  beWaiter1,
	  beWaiter2,
	  beWaiter3,
	  beWaiter4,
	  beWaiter5,
	  beWaiter6,
	  beWaiter7,
	  beWaiter8,
	  beWaiter9
	]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3006
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3007).
% [waiter,agent,time]
% HoldsAt(BeWaiter0(waiter),time) ->
% Terminates(Greet(waiter,agent),
%            BeWaiter0(waiter),
%            time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3010
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3007).

 /*  [holds_at(beWaiter0(Waiter), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(greet(Waiter, Agent),
                     beWaiter0(Waiter),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3007).
axiom(terminates(greet(Waiter, Agent), beWaiter0(Waiter), Time),
    [holds_at(beWaiter0(Waiter), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3012
% [waiter,agent,time]
% HoldsAt(BeWaiter0(waiter),time) ->
% Initiates(Greet(waiter,agent),
%           BeWaiter1(waiter),
%           time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3016
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3014).

 /*  [holds_at(beWaiter0(Waiter), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(greet(Waiter, Agent),
                    beWaiter1(Waiter),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3014).
axiom(initiates(greet(Waiter, Agent), beWaiter1(Waiter), Time),
    [holds_at(beWaiter0(Waiter), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3018
% [waiter,agent,food,time]
% HoldsAt(BeWaiter1(waiter),time) ->
% Terminates(Order(agent,waiter,food),
%            BeWaiter1(waiter),
%            time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3022
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3020).

 /*  [holds_at(beWaiter1(Waiter), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(order(Agent, Waiter, Food),
                     beWaiter1(Waiter),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3020).
axiom(terminates(order(Agent, Waiter, Food), beWaiter1(Waiter), Time),
    [holds_at(beWaiter1(Waiter), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3024
% [waiter,agent,food,time]
% HoldsAt(BeWaiter1(waiter),time) ->
% Initiates(Order(agent,waiter,food),
%           BeWaiter2(waiter),
%           time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3028
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3026).

 /*  [holds_at(beWaiter1(Waiter), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(order(Agent, Waiter, Food),
                    beWaiter2(Waiter),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3026).
axiom(initiates(order(Agent, Waiter, Food), beWaiter2(Waiter), Time),
    [holds_at(beWaiter1(Waiter), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3030
% [restaurant,waiter,time]
% WaiterOf(restaurant)=waiter &
% HoldsAt(BeWaiter2(waiter),time) ->
% Happens(WalkThroughDoor12(waiter,KitchenDoorOf(restaurant)),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3033
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3032).

 /*  equals(waiterOf(Restaurant), Waiter), holds_at(beWaiter2(Waiter), Time) ->
       happens(walkThroughDoor12(Waiter, kitchenDoorOf(Restaurant)),
               Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3032).

 /*  happens(walkThroughDoor12(Waiter, kitchenDoorOf(Restaurant)), Time) :-
       equals(waiterOf(Restaurant), Waiter),
       holds_at(beWaiter2(Waiter), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3032).

 /*  [equals(waiterOf(Restaurant), Waiter), holds_at(beWaiter2(Waiter), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(walkThroughDoor12(Waiter, kitchenDoorOf(Restaurant)),
                  Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3032).
axiom(happens(walkThroughDoor12(Waiter, kitchenDoorOf(Restaurant)), Time),
   
    [ equals(waiterOf(Restaurant), Waiter),
      holds_at(beWaiter2(Waiter), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3032).

 /*  not(holds_at(beWaiter2(Waiter), Time)) :-
       equals(waiterOf(Restaurant), Waiter),
       not(happens(walkThroughDoor12(Waiter,
                                     kitchenDoorOf(Restaurant)),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3032).

 /*  [equals(waiterOf(Restaurant), Waiter), not(happens(walkThroughDoor12(Waiter, kitchenDoorOf(Restaurant)), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(beWaiter2(Waiter)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3032).
axiom(holds_at(neg(beWaiter2(Waiter)), Time),
   
    [ equals(waiterOf(Restaurant), Waiter),
      not(happens(walkThroughDoor12(Waiter,
                                    kitchenDoorOf(Restaurant)),
                  Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3035
% [restaurant,waiter,door,time]
% HoldsAt(BeWaiter2(waiter),time) &
% WaiterOf(restaurant)=waiter &
% KitchenDoorOf(restaurant)=door ->
% Terminates(WalkThroughDoor12(waiter,door),
%            BeWaiter2(waiter),
%            time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3041
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3037).

 /*  [holds_at(beWaiter2(Waiter), Time), equals(waiterOf(Restaurant), Waiter), equals(kitchenDoorOf(Restaurant), Door)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(walkThroughDoor12(Waiter, Door),
                     beWaiter2(Waiter),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3037).
axiom(terminates(walkThroughDoor12(Waiter, Door), beWaiter2(Waiter), Time),
   
    [ holds_at(beWaiter2(Waiter), Time),
      equals(waiterOf(Restaurant), Waiter),
      equals(kitchenDoorOf(Restaurant), Door)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3043
% [restaurant,waiter,door,time]
% HoldsAt(BeWaiter2(waiter),time) &
% WaiterOf(restaurant)=waiter &
% KitchenDoorOf(restaurant)=door ->
% Initiates(WalkThroughDoor12(waiter,door),
%           BeWaiter3(waiter),
%           time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3049
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3045).

 /*  [holds_at(beWaiter2(Waiter), Time), equals(waiterOf(Restaurant), Waiter), equals(kitchenDoorOf(Restaurant), Door)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(walkThroughDoor12(Waiter, Door),
                    beWaiter3(Waiter),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3045).
axiom(initiates(walkThroughDoor12(Waiter, Door), beWaiter3(Waiter), Time),
   
    [ holds_at(beWaiter2(Waiter), Time),
      equals(waiterOf(Restaurant), Waiter),
      equals(kitchenDoorOf(Restaurant), Door)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3051
% [restaurant,food,time]
% HoldsAt(BeWaiter3(WaiterOf(restaurant)),time) &
% ({agent} HoldsAt(KnowOrder(WaiterOf(restaurant),agent,food),time)) ->
% Happens(Order(WaiterOf(restaurant),CookOf(restaurant),food),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3054
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3053).

 /*  holds_at(beWaiter3(waiterOf(Restaurant)), Time), exists([Agent], holds_at(knowOrder(waiterOf(Restaurant), Agent, Food), Time)) ->
       happens(order(waiterOf(Restaurant),
                     cookOf(Restaurant),
                     Food),
               Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3053).

 /*  happens(order(waiterOf(Restaurant), cookOf(Restaurant), Food), Time) :-
       holds_at(beWaiter3(waiterOf(Restaurant)), Time),
       holds_at(knowOrder(waiterOf(Restaurant), Agent, Food),
                Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3053).

 /*  [holds_at(beWaiter3(waiterOf(Restaurant)), Time), holds_at(knowOrder(waiterOf(Restaurant), Agent, Food), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(order(waiterOf(Restaurant),
                        cookOf(Restaurant),
                        Food),
                  Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3053).
axiom(happens(order(waiterOf(Restaurant), cookOf(Restaurant), Food), Time),
   
    [ holds_at(beWaiter3(waiterOf(Restaurant)), Time),
      holds_at(knowOrder(waiterOf(Restaurant), Agent, Food),
               Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3053).

 /*  not(holds_at(beWaiter3(waiterOf(Restaurant)), Time)) :-
       holds_at(knowOrder(waiterOf(Restaurant), Agent, Food),
                Time),
       not(happens(order(waiterOf(Restaurant),
                         cookOf(Restaurant),
                         Food),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3053).

 /*  [holds_at(knowOrder(waiterOf(Restaurant), Agent, Food), Time), not(happens(order(waiterOf(Restaurant), cookOf(Restaurant), Food), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(beWaiter3(waiterOf(Restaurant))), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3053).
axiom(holds_at(neg(beWaiter3(waiterOf(Restaurant))), Time),
   
    [ holds_at(knowOrder(waiterOf(Restaurant), Agent, Food),
               Time),
      not(happens(order(waiterOf(Restaurant),
                        cookOf(Restaurant),
                        Food),
                  Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3053).

 /*  not(holds_at(knowOrder(waiterOf(Restaurant), Agent, Food), Time)) :-
       holds_at(beWaiter3(waiterOf(Restaurant)), Time),
       not(happens(order(waiterOf(Restaurant),
                         cookOf(Restaurant),
                         Food),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3053).

 /*  [holds_at(beWaiter3(waiterOf(Restaurant)), Time), not(happens(order(waiterOf(Restaurant), cookOf(Restaurant), Food), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(knowOrder(waiterOf(Restaurant),
                                 Agent,
                                 Food)),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3053).
axiom(holds_at(neg(knowOrder(waiterOf(Restaurant), Agent, Food)), Time),
   
    [ holds_at(beWaiter3(waiterOf(Restaurant)), Time),
      not(happens(order(waiterOf(Restaurant),
                        cookOf(Restaurant),
                        Food),
                  Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3056
% [restaurant,waiter,cook,food,time]
% WaiterOf(restaurant)=waiter &
% CookOf(restaurant)=cook &
% HoldsAt(BeWaiter3(waiter),time) ->
% Terminates(Order(waiter,cook,food),
%            BeWaiter3(waiter),
%            time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3062
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3058).

 /*  [equals(waiterOf(Restaurant), Waiter), equals(cookOf(Restaurant), Cook), holds_at(beWaiter3(Waiter), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(order(Waiter, Cook, Food),
                     beWaiter3(Waiter),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3058).
axiom(terminates(order(Waiter, Cook, Food), beWaiter3(Waiter), Time),
   
    [ equals(waiterOf(Restaurant), Waiter),
      equals(cookOf(Restaurant), Cook),
      holds_at(beWaiter3(Waiter), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3064
% [restaurant,waiter,cook,food,time]
% WaiterOf(restaurant)=waiter &
% CookOf(restaurant)=cook &
% HoldsAt(BeWaiter3(waiter),time) ->
% Initiates(Order(waiter,cook,food),
%           BeWaiter4(waiter),
%           time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3070
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3066).

 /*  [equals(waiterOf(Restaurant), Waiter), equals(cookOf(Restaurant), Cook), holds_at(beWaiter3(Waiter), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(order(Waiter, Cook, Food),
                    beWaiter4(Waiter),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3066).
axiom(initiates(order(Waiter, Cook, Food), beWaiter4(Waiter), Time),
   
    [ equals(waiterOf(Restaurant), Waiter),
      equals(cookOf(Restaurant), Cook),
      holds_at(beWaiter3(Waiter), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3072
% [waiter,food,time]
% HoldsAt(BeWaiter4(waiter),time) &
% ({agent} HoldsAt(KnowOrder(waiter,agent,food),time)) &
% HoldsAt(FoodPrepared(food),time) ->
% Happens(PickUp(waiter,food),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3076
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3074).

 /*  holds_at(beWaiter4(Waiter), Time), exists([Agent], holds_at(knowOrder(Waiter, Agent, Food), Time)), holds_at(foodPrepared(Food), Time) ->
       happens(pickUp(Waiter, Food), Time).
 */

 /*  happens(pickUp(Waiter, Food), Time) :-
       holds_at(beWaiter4(Waiter), Time),
       holds_at(knowOrder(Waiter, Agent, Food), Time),
       holds_at(foodPrepared(Food), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3074).

 /*  [holds_at(beWaiter4(Waiter), Time), holds_at(knowOrder(Waiter, Agent, Food), Time), holds_at(foodPrepared(Food), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(pickUp(Waiter, Food), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3074).
axiom(happens(pickUp(Waiter, Food), Time),
   
    [ holds_at(beWaiter4(Waiter), Time),
      holds_at(knowOrder(Waiter, Agent, Food), Time),
      holds_at(foodPrepared(Food), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3074).

 /*  not(holds_at(beWaiter4(Waiter), Time)) :-
       ( holds_at(knowOrder(Waiter, Agent, Food), Time),
         holds_at(foodPrepared(Food), Time)
       ),
       not(happens(pickUp(Waiter, Food), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3074).

 /*  [holds_at(knowOrder(Waiter, Agent, Food), Time), holds_at(foodPrepared(Food), Time), not(happens(pickUp(Waiter, Food), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(beWaiter4(Waiter)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3074).
axiom(holds_at(neg(beWaiter4(Waiter)), Time),
   
    [ holds_at(knowOrder(Waiter, Agent, Food), Time),
      holds_at(foodPrepared(Food), Time),
      not(happens(pickUp(Waiter, Food), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3074).

 /*  not(holds_at(knowOrder(Waiter, Agent, Food), Time)) :-
       holds_at(foodPrepared(Food), Time),
       holds_at(beWaiter4(Waiter), Time),
       not(happens(pickUp(Waiter, Food), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3074).

 /*  [holds_at(foodPrepared(Food), Time), holds_at(beWaiter4(Waiter), Time), not(happens(pickUp(Waiter, Food), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(knowOrder(Waiter, Agent, Food)),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3074).
axiom(holds_at(neg(knowOrder(Waiter, Agent, Food)), Time),
   
    [ holds_at(foodPrepared(Food), Time),
      holds_at(beWaiter4(Waiter), Time),
      not(happens(pickUp(Waiter, Food), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3074).

 /*  not(holds_at(foodPrepared(Food), Time)) :-
       holds_at(knowOrder(Waiter, Agent, Food), Time),
       holds_at(beWaiter4(Waiter), Time),
       not(happens(pickUp(Waiter, Food), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3074).

 /*  [holds_at(knowOrder(Waiter, Agent, Food), Time), holds_at(beWaiter4(Waiter), Time), not(happens(pickUp(Waiter, Food), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(foodPrepared(Food)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3074).
axiom(holds_at(neg(foodPrepared(Food)), Time),
   
    [ holds_at(knowOrder(Waiter, Agent, Food), Time),
      holds_at(beWaiter4(Waiter), Time),
      not(happens(pickUp(Waiter, Food), Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3078
% [waiter,food,time]
% HoldsAt(BeWaiter4(waiter),time) &
% ({agent} HoldsAt(KnowOrder(waiter,agent,food),time)) ->
% Terminates(PickUp(waiter,food),
%            BeWaiter4(waiter),
%            time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3083
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3080).

 /*  [holds_at(beWaiter4(Waiter), Time), holds_at(knowOrder(Waiter, Agent, Food), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(pickUp(Waiter, Food),
                     beWaiter4(Waiter),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3080).
axiom(terminates(pickUp(Waiter, Food), beWaiter4(Waiter), Time),
   
    [ holds_at(beWaiter4(Waiter), Time),
      holds_at(knowOrder(Waiter, Agent, Food), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3085
% [waiter,food,time]
% HoldsAt(BeWaiter4(waiter),time) &
% ({agent} HoldsAt(KnowOrder(waiter,agent,food),time)) ->
% Initiates(PickUp(waiter,food),
%           BeWaiter5(waiter),
%           time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3090
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3087).

 /*  [holds_at(beWaiter4(Waiter), Time), holds_at(knowOrder(Waiter, Agent, Food), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(pickUp(Waiter, Food),
                    beWaiter5(Waiter),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3087).
axiom(initiates(pickUp(Waiter, Food), beWaiter5(Waiter), Time),
   
    [ holds_at(beWaiter4(Waiter), Time),
      holds_at(knowOrder(Waiter, Agent, Food), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3092
% [restaurant,waiter,time]
% WaiterOf(restaurant)=waiter &
% HoldsAt(BeWaiter5(waiter),time) ->
% Happens(WalkThroughDoor21(waiter,KitchenDoorOf(restaurant)),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3095
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3094).

 /*  equals(waiterOf(Restaurant), Waiter), holds_at(beWaiter5(Waiter), Time) ->
       happens(walkThroughDoor21(Waiter, kitchenDoorOf(Restaurant)),
               Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3094).

 /*  happens(walkThroughDoor21(Waiter, kitchenDoorOf(Restaurant)), Time) :-
       equals(waiterOf(Restaurant), Waiter),
       holds_at(beWaiter5(Waiter), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3094).

 /*  [equals(waiterOf(Restaurant), Waiter), holds_at(beWaiter5(Waiter), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(walkThroughDoor21(Waiter, kitchenDoorOf(Restaurant)),
                  Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3094).
axiom(happens(walkThroughDoor21(Waiter, kitchenDoorOf(Restaurant)), Time),
   
    [ equals(waiterOf(Restaurant), Waiter),
      holds_at(beWaiter5(Waiter), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3094).

 /*  not(holds_at(beWaiter5(Waiter), Time)) :-
       equals(waiterOf(Restaurant), Waiter),
       not(happens(walkThroughDoor21(Waiter,
                                     kitchenDoorOf(Restaurant)),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3094).

 /*  [equals(waiterOf(Restaurant), Waiter), not(happens(walkThroughDoor21(Waiter, kitchenDoorOf(Restaurant)), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(beWaiter5(Waiter)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3094).
axiom(holds_at(neg(beWaiter5(Waiter)), Time),
   
    [ equals(waiterOf(Restaurant), Waiter),
      not(happens(walkThroughDoor21(Waiter,
                                    kitchenDoorOf(Restaurant)),
                  Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3097
% [restaurant,waiter,door,time]
% HoldsAt(BeWaiter5(waiter),time) &
% WaiterOf(restaurant)=waiter &
% KitchenDoorOf(restaurant)=door ->
% Terminates(WalkThroughDoor21(waiter,door),
%            BeWaiter5(waiter),
%            time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3103
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3099).

 /*  [holds_at(beWaiter5(Waiter), Time), equals(waiterOf(Restaurant), Waiter), equals(kitchenDoorOf(Restaurant), Door)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(walkThroughDoor21(Waiter, Door),
                     beWaiter5(Waiter),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3099).
axiom(terminates(walkThroughDoor21(Waiter, Door), beWaiter5(Waiter), Time),
   
    [ holds_at(beWaiter5(Waiter), Time),
      equals(waiterOf(Restaurant), Waiter),
      equals(kitchenDoorOf(Restaurant), Door)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3105
% [restaurant,waiter,door,time]
% HoldsAt(BeWaiter5(waiter),time) &
% WaiterOf(restaurant)=waiter &
% KitchenDoorOf(restaurant)=door ->
% Initiates(WalkThroughDoor21(waiter,door),
%           BeWaiter6(waiter),
%           time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3111
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3107).

 /*  [holds_at(beWaiter5(Waiter), Time), equals(waiterOf(Restaurant), Waiter), equals(kitchenDoorOf(Restaurant), Door)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(walkThroughDoor21(Waiter, Door),
                    beWaiter6(Waiter),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3107).
axiom(initiates(walkThroughDoor21(Waiter, Door), beWaiter6(Waiter), Time),
   
    [ holds_at(beWaiter5(Waiter), Time),
      equals(waiterOf(Restaurant), Waiter),
      equals(kitchenDoorOf(Restaurant), Door)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3113
% [restaurant,waiter,table,food,time]
% WaiterOf(restaurant)=waiter &
% TableOf(restaurant)=table &
% HoldsAt(BeWaiter6(waiter),time) &
% HoldsAt(Holding(waiter,food),time) ->
% Happens(PlaceOn(waiter,food,table),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3118
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3115).

 /*  equals(waiterOf(Restaurant), Waiter), equals(tableOf(Restaurant), Table), holds_at(beWaiter6(Waiter), Time), holds_at(holding(Waiter, Food), Time) ->
       happens(placeOn(Waiter, Food, Table), Time).
 */

 /*  happens(placeOn(Waiter, Food, Table), Time) :-
       equals(waiterOf(Restaurant), Waiter),
       equals(tableOf(Restaurant), Table),
       holds_at(beWaiter6(Waiter), Time),
       holds_at(holding(Waiter, Food), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3115).

 /*  [equals(waiterOf(Restaurant), Waiter), equals(tableOf(Restaurant), Table), holds_at(beWaiter6(Waiter), Time), holds_at(holding(Waiter, Food), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(placeOn(Waiter, Food, Table), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3115).
axiom(happens(placeOn(Waiter, Food, Table), Time),
   
    [ equals(waiterOf(Restaurant), Waiter),
      equals(tableOf(Restaurant), Table),
      holds_at(beWaiter6(Waiter), Time),
      holds_at(holding(Waiter, Food), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3115).

 /*  not(holds_at(beWaiter6(Waiter), Time)) :-
       holds_at(holding(Waiter, Food), Time),
       equals(tableOf(Restaurant), Table),
       equals(waiterOf(Restaurant), Waiter),
       not(happens(placeOn(Waiter, Food, Table), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3115).

 /*  [holds_at(holding(Waiter, Food), Time), equals(tableOf(Restaurant), Table), equals(waiterOf(Restaurant), Waiter), not(happens(placeOn(Waiter, Food, Table), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(beWaiter6(Waiter)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3115).
axiom(holds_at(neg(beWaiter6(Waiter)), Time),
   
    [ holds_at(holding(Waiter, Food), Time),
      equals(tableOf(Restaurant), Table),
      equals(waiterOf(Restaurant), Waiter),
      not(happens(placeOn(Waiter, Food, Table), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3115).

 /*  not(holds_at(holding(Waiter, Food), Time)) :-
       holds_at(beWaiter6(Waiter), Time),
       equals(tableOf(Restaurant), Table),
       equals(waiterOf(Restaurant), Waiter),
       not(happens(placeOn(Waiter, Food, Table), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3115).

 /*  [holds_at(beWaiter6(Waiter), Time), equals(tableOf(Restaurant), Table), equals(waiterOf(Restaurant), Waiter), not(happens(placeOn(Waiter, Food, Table), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(holding(Waiter, Food)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3115).
axiom(holds_at(neg(holding(Waiter, Food)), Time),
   
    [ holds_at(beWaiter6(Waiter), Time),
      equals(tableOf(Restaurant), Table),
      equals(waiterOf(Restaurant), Waiter),
      not(happens(placeOn(Waiter, Food, Table), Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3120
% [waiter,food,table,time]
% HoldsAt(BeWaiter6(waiter),time) ->
% Terminates(PlaceOn(waiter,food,table),
%            BeWaiter6(waiter),
%            time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3124
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3122).

 /*  [holds_at(beWaiter6(Waiter), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(placeOn(Waiter, Food, Table),
                     beWaiter6(Waiter),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3122).
axiom(terminates(placeOn(Waiter, Food, Table), beWaiter6(Waiter), Time),
    [holds_at(beWaiter6(Waiter), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3126
% [waiter,food,table,time]
% HoldsAt(BeWaiter6(waiter),time) ->
% Initiates(PlaceOn(waiter,food,table),
%           BeWaiter7(waiter),
%           time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3130
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3128).

 /*  [holds_at(beWaiter6(Waiter), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(placeOn(Waiter, Food, Table),
                    beWaiter7(Waiter),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3128).
axiom(initiates(placeOn(Waiter, Food, Table), beWaiter7(Waiter), Time),
    [holds_at(beWaiter6(Waiter), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3132
% [waiter,agent,bill,time]
% HoldsAt(BeWaiter7(waiter),time) ->
% Terminates(Request(agent,waiter,bill),
%            BeWaiter7(waiter),
%            time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3136
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3134).

 /*  [holds_at(beWaiter7(Waiter), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(request(Agent, Waiter, Bill),
                     beWaiter7(Waiter),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3134).
axiom(terminates(request(Agent, Waiter, Bill), beWaiter7(Waiter), Time),
    [holds_at(beWaiter7(Waiter), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3138
% [waiter,agent,bill,time]
% HoldsAt(BeWaiter7(waiter),time) ->
% Initiates(Request(agent,waiter,bill),
%           BeWaiter8(waiter),
%           time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3142
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3140).

 /*  [holds_at(beWaiter7(Waiter), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(request(Agent, Waiter, Bill),
                    beWaiter8(Waiter),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3140).
axiom(initiates(request(Agent, Waiter, Bill), beWaiter8(Waiter), Time),
    [holds_at(beWaiter7(Waiter), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3144
% [restaurant,waiter,bill,time]
% WaiterOf(restaurant)=waiter &
% BillOf(restaurant)=bill &
% HoldsAt(BeWaiter8(waiter),time) ->
% Happens(PickUp(waiter,bill),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3148
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3146).

 /*  equals(waiterOf(Restaurant), Waiter), equals(billOf(Restaurant), Bill), holds_at(beWaiter8(Waiter), Time) ->
       happens(pickUp(Waiter, Bill), Time).
 */

 /*  happens(pickUp(Waiter, Bill), Time) :-
       equals(waiterOf(Restaurant), Waiter),
       equals(billOf(Restaurant), Bill),
       holds_at(beWaiter8(Waiter), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3146).

 /*  [equals(waiterOf(Restaurant), Waiter), equals(billOf(Restaurant), Bill), holds_at(beWaiter8(Waiter), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(pickUp(Waiter, Bill), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3146).
axiom(happens(pickUp(Waiter, Bill), Time),
   
    [ equals(waiterOf(Restaurant), Waiter),
      equals(billOf(Restaurant), Bill),
      holds_at(beWaiter8(Waiter), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3146).

 /*  not(holds_at(beWaiter8(Waiter), Time)) :-
       equals(billOf(Restaurant), Bill),
       equals(waiterOf(Restaurant), Waiter),
       not(happens(pickUp(Waiter, Bill), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3146).

 /*  [equals(billOf(Restaurant), Bill), equals(waiterOf(Restaurant), Waiter), not(happens(pickUp(Waiter, Bill), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(beWaiter8(Waiter)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3146).
axiom(holds_at(neg(beWaiter8(Waiter)), Time),
   
    [ equals(billOf(Restaurant), Bill),
      equals(waiterOf(Restaurant), Waiter),
      not(happens(pickUp(Waiter, Bill), Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3150
% [waiter,bill,time]
% HoldsAt(BeWaiter8(waiter),time) ->
% Terminates(PickUp(waiter,bill),
%            BeWaiter8(waiter),
%            time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3154
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3152).

 /*  [holds_at(beWaiter8(Waiter), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(pickUp(Waiter, Bill),
                     beWaiter8(Waiter),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3152).
axiom(terminates(pickUp(Waiter, Bill), beWaiter8(Waiter), Time),
    [holds_at(beWaiter8(Waiter), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3156
% [waiter,bill,time]
% HoldsAt(BeWaiter8(waiter),time) ->
% Initiates(PickUp(waiter,bill),
%           BeWaiter9(waiter),
%           time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3160
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3158).

 /*  [holds_at(beWaiter8(Waiter), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(pickUp(Waiter, Bill),
                    beWaiter9(Waiter),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3158).
axiom(initiates(pickUp(Waiter, Bill), beWaiter9(Waiter), Time),
    [holds_at(beWaiter8(Waiter), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3162
% [restaurant,waiter,bill,table,time]
% WaiterOf(restaurant)=waiter &
% BillOf(restaurant)=bill &
% TableOf(restaurant)=table &
% HoldsAt(BeWaiter9(waiter),time) ->
% Happens(PlaceOn(waiter,bill,table),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3167
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3164).

 /*  equals(waiterOf(Restaurant), Waiter), equals(billOf(Restaurant), Bill), equals(tableOf(Restaurant), Table), holds_at(beWaiter9(Waiter), Time) ->
       happens(placeOn(Waiter, Bill, Table), Time).
 */

 /*  happens(placeOn(Waiter, Bill, Table), Time) :-
       equals(waiterOf(Restaurant), Waiter),
       equals(billOf(Restaurant), Bill),
       equals(tableOf(Restaurant), Table),
       holds_at(beWaiter9(Waiter), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3164).

 /*  [equals(waiterOf(Restaurant), Waiter), equals(billOf(Restaurant), Bill), equals(tableOf(Restaurant), Table), holds_at(beWaiter9(Waiter), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(placeOn(Waiter, Bill, Table), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3164).
axiom(happens(placeOn(Waiter, Bill, Table), Time),
   
    [ equals(waiterOf(Restaurant), Waiter),
      equals(billOf(Restaurant), Bill),
      equals(tableOf(Restaurant), Table),
      holds_at(beWaiter9(Waiter), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3164).

 /*  not(holds_at(beWaiter9(Waiter), Time)) :-
       equals(tableOf(Restaurant), Table),
       equals(billOf(Restaurant), Bill),
       equals(waiterOf(Restaurant), Waiter),
       not(happens(placeOn(Waiter, Bill, Table), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3164).

 /*  [equals(tableOf(Restaurant), Table), equals(billOf(Restaurant), Bill), equals(waiterOf(Restaurant), Waiter), not(happens(placeOn(Waiter, Bill, Table), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(beWaiter9(Waiter)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3164).
axiom(holds_at(neg(beWaiter9(Waiter)), Time),
   
    [ equals(tableOf(Restaurant), Table),
      equals(billOf(Restaurant), Bill),
      equals(waiterOf(Restaurant), Waiter),
      not(happens(placeOn(Waiter, Bill, Table), Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3169
% [waiter,bill,table,time]
% HoldsAt(BeWaiter9(waiter),time) ->
% Terminates(PlaceOn(waiter,bill,table),
%            BeWaiter9(waiter),
%            time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3173
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3171).

 /*  [holds_at(beWaiter9(Waiter), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(placeOn(Waiter, Bill, Table),
                     beWaiter9(Waiter),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3171).
axiom(terminates(placeOn(Waiter, Bill, Table), beWaiter9(Waiter), Time),
    [holds_at(beWaiter9(Waiter), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3175
% [waiter,bill,table,time]
% HoldsAt(BeWaiter9(waiter),time) ->
% Initiates(PlaceOn(waiter,bill,table),
%           BeWaiter0(waiter),
%           time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3179
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3177).

 /*  [holds_at(beWaiter9(Waiter), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(placeOn(Waiter, Bill, Table),
                    beWaiter0(Waiter),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3177).
axiom(initiates(placeOn(Waiter, Bill, Table), beWaiter0(Waiter), Time),
    [holds_at(beWaiter9(Waiter), Time)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3181
% fluent BeCook0(cook)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3181).
fluent(beCook0(cook)).
==> mpred_prop(beCook0(cook),fluent).
==> meta_argtypes(beCook0(cook)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3183
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3184).
% fluent BeCook1(cook)
fluent(beCook1(cook)).
==> mpred_prop(beCook1(cook),fluent).
==> meta_argtypes(beCook1(cook)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3185
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3186).
% xor BeCook0, BeCook1
==> xor([beCook0,beCook1]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3187
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3188).
% [cook,agent,food,time]
% HoldsAt(BeCook0(cook),time) ->
% Terminates(Order(agent,cook,food),
%            BeCook0(cook),
%            time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3191
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3188).

 /*  [holds_at(beCook0(Cook), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(order(Agent, Cook, Food),
                     beCook0(Cook),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3188).
axiom(terminates(order(Agent, Cook, Food), beCook0(Cook), Time),
    [holds_at(beCook0(Cook), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3193
% [cook,agent,food,time]
% HoldsAt(BeCook0(cook),time) ->
% Initiates(Order(agent,cook,food),
%           BeCook1(cook),
%           time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3197
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3195).

 /*  [holds_at(beCook0(Cook), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(order(Agent, Cook, Food),
                    beCook1(Cook),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3195).
axiom(initiates(order(Agent, Cook, Food), beCook1(Cook), Time),
    [holds_at(beCook0(Cook), Time)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3199
% event FoodPrepare(agent,food)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3199).
event(foodPrepare(agent,food)).
==> mpred_prop(foodPrepare(agent,food),event).
==> meta_argtypes(foodPrepare(agent,food)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3201
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3202).
% fluent FoodPrepared(food)
fluent(foodPrepared(food)).
==> mpred_prop(foodPrepared(food),fluent).
==> meta_argtypes(foodPrepared(food)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3203
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3204).
% [agent,food,time]
% Initiates(FoodPrepare(agent,food),
%           FoodPrepared(food),
%           time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3206
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3204).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(foodPrepare(Agent, Food),
                    foodPrepared(Food),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3204).
axiom(initiates(foodPrepare(Agent, Food), foodPrepared(Food), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3208
% [agent,food,time]
% Happens(FoodPrepare(agent,food),time) ->
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3210
% {location}% 
% HoldsAt(At(agent,location),time) &
% HoldsAt(At(food,location),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3212
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3210).

 /*  exists([Location],
    happens(foodPrepare(Agent, Food), Time) ->
       holds_at(at(Agent, Location), Time),
       holds_at(at(Food, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3210).

 /*  not(happens(foodPrepare(Agent, Food), Time)) :-
       (   not(holds_at(at(Agent, Location), Time))
       ;   not(holds_at(at(Food, Location), Time))
       ),
       some(Location, '$kolem_Fn_365'(Agent, Food, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3210).

 /*  [(holds_at(neg(at(Agent, Location)), Time);holds_at(neg(at(Food, Location)), Time)), some(Location, '$kolem_Fn_365'(Agent, Food, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(foodPrepare(Agent, Food), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3210).
axiom(not(happens(foodPrepare(Agent, Food), Time)),
   
    [  (holds_at(neg(at(Agent, Location)), Time);holds_at(neg(at(Food, Location)), Time)),
      some(Location, '$kolem_Fn_365'(Agent, Food, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3210).

 /*  holds_at(at(Agent, Location), Time) :-
       happens(foodPrepare(Agent, Food), Time),
       some(Location, '$kolem_Fn_365'(Agent, Food, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3210).

 /*  [happens(foodPrepare(Agent, Food), Time), some(Location, '$kolem_Fn_365'(Agent, Food, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(at(Agent, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3210).
axiom(holds_at(at(Agent, Location), Time),
   
    [ happens(foodPrepare(Agent, Food), Time),
      some(Location, '$kolem_Fn_365'(Agent, Food, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3210).

 /*  holds_at(at(Food, Location), Time) :-
       happens(foodPrepare(Agent, Food), Time),
       some(Location, '$kolem_Fn_365'(Agent, Food, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3210).

 /*  [happens(foodPrepare(Agent, Food), Time), some(Location, '$kolem_Fn_365'(Agent, Food, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(at(Food, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3210).
axiom(holds_at(at(Food, Location), Time),
   
    [ happens(foodPrepare(Agent, Food), Time),
      some(Location, '$kolem_Fn_365'(Agent, Food, Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3214
% [cook,agent,food,time]
% HoldsAt(BeCook1(cook),time) &
% HoldsAt(KnowOrder(cook,agent,food),time) ->
% Happens(FoodPrepare(cook,food),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3217
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3216).

 /*  holds_at(beCook1(Cook), Time), holds_at(knowOrder(Cook, Agent, Food), Time) ->
       happens(foodPrepare(Cook, Food), Time).
 */

 /*  happens(foodPrepare(Cook, Food), Time) :-
       holds_at(beCook1(Cook), Time),
       holds_at(knowOrder(Cook, Agent, Food), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3216).

 /*  [holds_at(beCook1(Cook), Time), holds_at(knowOrder(Cook, Agent, Food), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(foodPrepare(Cook, Food), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3216).
axiom(happens(foodPrepare(Cook, Food), Time),
   
    [ holds_at(beCook1(Cook), Time),
      holds_at(knowOrder(Cook, Agent, Food), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3216).

 /*  not(holds_at(beCook1(Cook), Time)) :-
       holds_at(knowOrder(Cook, Agent, Food), Time),
       not(happens(foodPrepare(Cook, Food), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3216).

 /*  [holds_at(knowOrder(Cook, Agent, Food), Time), not(happens(foodPrepare(Cook, Food), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(beCook1(Cook)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3216).
axiom(holds_at(neg(beCook1(Cook)), Time),
   
    [ holds_at(knowOrder(Cook, Agent, Food), Time),
      not(happens(foodPrepare(Cook, Food), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3216).

 /*  not(holds_at(knowOrder(Cook, Agent, Food), Time)) :-
       holds_at(beCook1(Cook), Time),
       not(happens(foodPrepare(Cook, Food), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3216).

 /*  [holds_at(beCook1(Cook), Time), not(happens(foodPrepare(Cook, Food), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(knowOrder(Cook, Agent, Food)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3216).
axiom(holds_at(neg(knowOrder(Cook, Agent, Food)), Time),
   
    [ holds_at(beCook1(Cook), Time),
      not(happens(foodPrepare(Cook, Food), Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3219
% [cook,food,time]
% HoldsAt(BeCook1(cook),time) ->
% Terminates(FoodPrepare(cook,food),
%            BeCook1(cook),
%            time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3223
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3221).

 /*  [holds_at(beCook1(Cook), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(foodPrepare(Cook, Food),
                     beCook1(Cook),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3221).
axiom(terminates(foodPrepare(Cook, Food), beCook1(Cook), Time),
    [holds_at(beCook1(Cook), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3225
% [cook,food,time]
% HoldsAt(BeCook1(cook),time) ->
% Initiates(FoodPrepare(cook,food),
%           BeCook0(cook),
%           time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3229
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3227).

 /*  [holds_at(beCook1(Cook), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(foodPrepare(Cook, Food),
                    beCook0(Cook),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3227).
axiom(initiates(foodPrepare(Cook, Food), beCook0(Cook), Time),
    [holds_at(beCook1(Cook), Time)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3231
% event Pay(agent,agent)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3231).
event(pay(agent,agent)).
==> mpred_prop(pay(agent,agent),event).
==> meta_argtypes(pay(agent,agent)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3233
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3234).
% event Tip(agent,agent)
event(tip(agent,agent)).
==> mpred_prop(tip(agent,agent),event).
==> meta_argtypes(tip(agent,agent)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3235
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3236).
% [agent,physobj,time]
% Happens(LieOn(agent,physobj),time) ->
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3237
% {room}% 
%  HoldsAt(At(agent,room),time) &
%  HoldsAt(At(physobj,room),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3239
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3238).

 /*  exists([Room],
    happens(lieOn(Agent, Physobj), Time) ->
       holds_at(at(Agent, Room), Time),
       holds_at(at(Physobj, Room), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3238).

 /*  not(happens(lieOn(Agent, Physobj), Time)) :-
       (   not(holds_at(at(Agent, Room), Time))
       ;   not(holds_at(at(Physobj, Room), Time))
       ),
       some(Room, '$kolem_Fn_366'(Agent, Physobj, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3238).

 /*  [(holds_at(neg(at(Agent, Room)), Time);holds_at(neg(at(Physobj, Room)), Time)), some(Room, '$kolem_Fn_366'(Agent, Physobj, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(lieOn(Agent, Physobj), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3238).
axiom(not(happens(lieOn(Agent, Physobj), Time)),
   
    [  (holds_at(neg(at(Agent, Room)), Time);holds_at(neg(at(Physobj, Room)), Time)),
      some(Room, '$kolem_Fn_366'(Agent, Physobj, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3238).

 /*  holds_at(at(Agent, Room), Time) :-
       happens(lieOn(Agent, Physobj), Time),
       some(Room, '$kolem_Fn_366'(Agent, Physobj, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3238).

 /*  [happens(lieOn(Agent, Physobj), Time), some(Room, '$kolem_Fn_366'(Agent, Physobj, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(at(Agent, Room), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3238).
axiom(holds_at(at(Agent, Room), Time),
   
    [ happens(lieOn(Agent, Physobj), Time),
      some(Room, '$kolem_Fn_366'(Agent, Physobj, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3238).

 /*  holds_at(at(Physobj, Room), Time) :-
       happens(lieOn(Agent, Physobj), Time),
       some(Room, '$kolem_Fn_366'(Agent, Physobj, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3238).

 /*  [happens(lieOn(Agent, Physobj), Time), some(Room, '$kolem_Fn_366'(Agent, Physobj, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(at(Physobj, Room), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3238).
axiom(holds_at(at(Physobj, Room), Time),
   
    [ happens(lieOn(Agent, Physobj), Time),
      some(Room, '$kolem_Fn_366'(Agent, Physobj, Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3241
% [agent,physobj,time]
% Happens(SitOn(agent,physobj),time) ->
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3243
% {room}% 
%  HoldsAt(At(agent,room),time) &
%  HoldsAt(At(physobj,room),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3245
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3243).

 /*  exists([Room],
    happens(sitOn(Agent, Physobj), Time) ->
       holds_at(at(Agent, Room), Time),
       holds_at(at(Physobj, Room), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3243).

 /*  not(happens(sitOn(Agent, Physobj), Time)) :-
       (   not(holds_at(at(Agent, Room), Time))
       ;   not(holds_at(at(Physobj, Room), Time))
       ),
       some(Room, '$kolem_Fn_367'(Agent, Physobj, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3243).

 /*  [(holds_at(neg(at(Agent, Room)), Time);holds_at(neg(at(Physobj, Room)), Time)), some(Room, '$kolem_Fn_367'(Agent, Physobj, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(sitOn(Agent, Physobj), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3243).
axiom(not(happens(sitOn(Agent, Physobj), Time)),
   
    [  (holds_at(neg(at(Agent, Room)), Time);holds_at(neg(at(Physobj, Room)), Time)),
      some(Room, '$kolem_Fn_367'(Agent, Physobj, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3243).

 /*  holds_at(at(Agent, Room), Time) :-
       happens(sitOn(Agent, Physobj), Time),
       some(Room, '$kolem_Fn_367'(Agent, Physobj, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3243).

 /*  [happens(sitOn(Agent, Physobj), Time), some(Room, '$kolem_Fn_367'(Agent, Physobj, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(at(Agent, Room), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3243).
axiom(holds_at(at(Agent, Room), Time),
   
    [ happens(sitOn(Agent, Physobj), Time),
      some(Room, '$kolem_Fn_367'(Agent, Physobj, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3243).

 /*  holds_at(at(Physobj, Room), Time) :-
       happens(sitOn(Agent, Physobj), Time),
       some(Room, '$kolem_Fn_367'(Agent, Physobj, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3243).

 /*  [happens(sitOn(Agent, Physobj), Time), some(Room, '$kolem_Fn_367'(Agent, Physobj, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(at(Physobj, Room), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3243).
axiom(holds_at(at(Physobj, Room), Time),
   
    [ happens(sitOn(Agent, Physobj), Time),
      some(Room, '$kolem_Fn_367'(Agent, Physobj, Time))
    ]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3247
% event LieOn(agent,physobj)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3247).
event(lieOn(agent,physobj)).
==> mpred_prop(lieOn(agent,physobj),event).
==> meta_argtypes(lieOn(agent,physobj)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3249
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3250).
% event SitOn(agent,physobj)
event(sitOn(agent,physobj)).
==> mpred_prop(sitOn(agent,physobj),event).
==> meta_argtypes(sitOn(agent,physobj)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3251
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3252).
% event RiseFrom(agent,physobj)
event(riseFrom(agent,physobj)).
==> mpred_prop(riseFrom(agent,physobj),event).
==> meta_argtypes(riseFrom(agent,physobj)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3253
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3254).
% fluent LyingOn(agent,physobj)
fluent(lyingOn(agent,physobj)).
==> mpred_prop(lyingOn(agent,physobj),fluent).
==> meta_argtypes(lyingOn(agent,physobj)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3254
% fluent SittingOn(agent,physobj)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3254).
fluent(sittingOn(agent,physobj)).
==> mpred_prop(sittingOn(agent,physobj),fluent).
==> meta_argtypes(sittingOn(agent,physobj)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3255
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3256).
% fluent Standing(agent)
fluent(standing(agent)).
==> mpred_prop(standing(agent),fluent).
==> meta_argtypes(standing(agent)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3257
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3258).
% fluent Lying(agent)
fluent(lying(agent)).
==> mpred_prop(lying(agent),fluent).
==> meta_argtypes(lying(agent)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3258
% fluent Sitting(agent)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3258).
fluent(sitting(agent)).
==> mpred_prop(sitting(agent),fluent).
==> meta_argtypes(sitting(agent)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3259
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3260).
% noninertial Lying
==> noninertial(lying).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3260
% noninertial Sitting
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3260).
==> noninertial(sitting).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3262
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3263).
% xor Lying, Sitting, Standing
==> xor([lying,sitting,standing]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3264
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3265).
% [agent,physobj,time]
% HoldsAt(LyingOn(agent,physobj),time) ->
% HoldsAt(Lying(agent),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3266

 /*  holds_at(lyingOn(Agent, Physobj), Time) ->
       holds_at(lying(Agent), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3265).

 /*  holds_at(lying(Agent), Time) :-
       holds_at(lyingOn(Agent, Physobj), Time).
 */

 /*  [holds_at(lyingOn(Agent, Physobj), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(lying(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3265).
axiom(holds_at(lying(Agent), Time),
    [holds_at(lyingOn(Agent, Physobj), Time)]).

 /*  not(holds_at(lyingOn(Agent, Physobj), Time)) :-
       not(holds_at(lying(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3265).

 /*  [holds_at(neg(lying(Agent)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(lyingOn(Agent, Physobj)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3265).
axiom(holds_at(neg(lyingOn(Agent, Physobj)), Time),
    [holds_at(neg(lying(Agent)), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3268
% [agent,physobj,time]
% HoldsAt(SittingOn(agent,physobj),time) ->
% HoldsAt(Sitting(agent),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3270

 /*  holds_at(sittingOn(Agent, Physobj), Time) ->
       holds_at(sitting(Agent), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3270).

 /*  holds_at(sitting(Agent), Time) :-
       holds_at(sittingOn(Agent, Physobj), Time).
 */

 /*  [holds_at(sittingOn(Agent, Physobj), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(sitting(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3270).
axiom(holds_at(sitting(Agent), Time),
    [holds_at(sittingOn(Agent, Physobj), Time)]).

 /*  not(holds_at(sittingOn(Agent, Physobj), Time)) :-
       not(holds_at(sitting(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3270).

 /*  [holds_at(neg(sitting(Agent)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(sittingOn(Agent, Physobj)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3270).
axiom(holds_at(neg(sittingOn(Agent, Physobj)), Time),
    [holds_at(neg(sitting(Agent)), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3272
% [agent,physobj1,physobj2,time]
% HoldsAt(LyingOn(agent,physobj1),time) &
% HoldsAt(LyingOn(agent,physobj2),time) ->
% physobj1=physobj2.
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3275
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3274).

 /*  holds_at(lyingOn(Agent, Physobj1), Time), holds_at(lyingOn(Agent, Physobj2), Time) ->
       equals(Physobj1, Physobj2).
 */

 /*  not(holds_at(lyingOn(Agent, Physobj1), Time)) :-
       holds_at(lyingOn(Agent, Physobj2), Time),
       not(equals(Physobj1, Physobj2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3274).

 /*  [holds_at(lyingOn(Agent, Physobj2), Time), not(equals(Physobj1, Physobj2))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(lyingOn(Agent, Physobj1)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3274).
axiom(holds_at(neg(lyingOn(Agent, Physobj1)), Time),
   
    [ holds_at(lyingOn(Agent, Physobj2), Time),
      not(equals(Physobj1, Physobj2))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3274).

 /*  not(holds_at(lyingOn(Agent, Physobj2), Time)) :-
       holds_at(lyingOn(Agent, Physobj1), Time),
       not(equals(Physobj1, Physobj2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3274).

 /*  [holds_at(lyingOn(Agent, Physobj1), Time), not(equals(Physobj1, Physobj2))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(lyingOn(Agent, Physobj2)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3274).
axiom(holds_at(neg(lyingOn(Agent, Physobj2)), Time),
   
    [ holds_at(lyingOn(Agent, Physobj1), Time),
      not(equals(Physobj2, Physobj1))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3277
% [agent,physobj1,physobj2,time]
% HoldsAt(SittingOn(agent,physobj1),time) &
% HoldsAt(SittingOn(agent,physobj2),time) ->
% physobj1=physobj2.
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3280
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3279).

 /*  holds_at(sittingOn(Agent, Physobj1), Time), holds_at(sittingOn(Agent, Physobj2), Time) ->
       equals(Physobj1, Physobj2).
 */

 /*  not(holds_at(sittingOn(Agent, Physobj1), Time)) :-
       holds_at(sittingOn(Agent, Physobj2), Time),
       not(equals(Physobj1, Physobj2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3279).

 /*  [holds_at(sittingOn(Agent, Physobj2), Time), not(equals(Physobj1, Physobj2))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(sittingOn(Agent, Physobj1)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3279).
axiom(holds_at(neg(sittingOn(Agent, Physobj1)), Time),
   
    [ holds_at(sittingOn(Agent, Physobj2), Time),
      not(equals(Physobj1, Physobj2))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3279).

 /*  not(holds_at(sittingOn(Agent, Physobj2), Time)) :-
       holds_at(sittingOn(Agent, Physobj1), Time),
       not(equals(Physobj1, Physobj2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3279).

 /*  [holds_at(sittingOn(Agent, Physobj1), Time), not(equals(Physobj1, Physobj2))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(sittingOn(Agent, Physobj2)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3279).
axiom(holds_at(neg(sittingOn(Agent, Physobj2)), Time),
   
    [ holds_at(sittingOn(Agent, Physobj1), Time),
      not(equals(Physobj2, Physobj1))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3282
% [agent,physobj,time]
% HoldsAt(Standing(agent),time) ->
% Initiates(LieOn(agent,physobj),
%           LyingOn(agent,physobj),
%           time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3286
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3284).

 /*  [holds_at(standing(Agent), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(lieOn(Agent, Physobj),
                    lyingOn(Agent, Physobj),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3284).
axiom(initiates(lieOn(Agent, Physobj), lyingOn(Agent, Physobj), Time),
    [holds_at(standing(Agent), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3288
% [agent,physobj,time]
% Terminates(LieOn(agent,physobj),
%            Standing(agent),
%            time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3291
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3290).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(lieOn(Agent, Physobj),
                     standing(Agent),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3290).
axiom(terminates(lieOn(Agent, Physobj), standing(Agent), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3293
% [agent,physobj,time]
% HoldsAt(Standing(agent),time) ->
% Initiates(SitOn(agent,physobj),
%           SittingOn(agent,physobj),
%           time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3297
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3295).

 /*  [holds_at(standing(Agent), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(sitOn(Agent, Physobj),
                    sittingOn(Agent, Physobj),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3295).
axiom(initiates(sitOn(Agent, Physobj), sittingOn(Agent, Physobj), Time),
    [holds_at(standing(Agent), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3299
% [agent,physobj,time]
% Terminates(SitOn(agent,physobj),
%            Standing(agent),
%            time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3302
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3301).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(sitOn(Agent, Physobj),
                     standing(Agent),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3301).
axiom(terminates(sitOn(Agent, Physobj), standing(Agent), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3304
% [agent,physobj,time]
% (HoldsAt(SittingOn(agent,physobj),time) |
%  HoldsAt(LyingOn(agent,physobj),time)) ->
% Initiates(RiseFrom(agent,physobj),
%           Standing(agent),
%           time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3309
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3306).

 /*  [(holds_at(sittingOn(Agent, Physobj), Time);holds_at(lyingOn(Agent, Physobj), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(riseFrom(Agent, Physobj),
                    standing(Agent),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3306).
axiom(initiates(riseFrom(Agent, Physobj), standing(Agent), Time),
   
    [  (holds_at(sittingOn(Agent, Physobj), Time);holds_at(lyingOn(Agent, Physobj), Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3311
% [agent,physobj,time]
% HoldsAt(LyingOn(agent,physobj),time) ->
% Terminates(RiseFrom(agent,physobj),
%            LyingOn(agent,physobj),
%            time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3315
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3313).

 /*  [holds_at(lyingOn(Agent, Physobj), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(riseFrom(Agent, Physobj),
                     lyingOn(Agent, Physobj),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3313).
axiom(terminates(riseFrom(Agent, Physobj), lyingOn(Agent, Physobj), Time),
    [holds_at(lyingOn(Agent, Physobj), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3317
% [agent,physobj,time]
% HoldsAt(SittingOn(agent,physobj),time) ->
% Terminates(RiseFrom(agent,physobj),
%            SittingOn(agent,physobj),
%            time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3321
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3319).

 /*  [holds_at(sittingOn(Agent, Physobj), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(riseFrom(Agent, Physobj),
                     sittingOn(Agent, Physobj),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3319).
axiom(terminates(riseFrom(Agent, Physobj), sittingOn(Agent, Physobj), Time),
    [holds_at(sittingOn(Agent, Physobj), Time)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3323
% event Greet(agent,agent)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3323).
event(greet(agent,agent)).
==> mpred_prop(greet(agent,agent),event).
==> meta_argtypes(greet(agent,agent)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3325
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3326).
% event SayGoodbye(agent,agent)
event(sayGoodbye(agent,agent)).
==> mpred_prop(sayGoodbye(agent,agent),event).
==> meta_argtypes(sayGoodbye(agent,agent)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3327
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3328).
% [agent1,agent2,time]
% Happens(Greet(agent1,agent2),time) ->
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3329
% {location}% 
% HoldsAt(At(agent1,location),time) &
% HoldsAt(At(agent2,location),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3331
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3330).

 /*  exists([Location],
    happens(greet(Agent1, Agent2), Time) ->
       holds_at(at(Agent1, Location), Time),
       holds_at(at(Agent2, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3330).

 /*  not(happens(greet(Agent1, Agent2), Time)) :-
       (   not(holds_at(at(Agent1, Location), Time))
       ;   not(holds_at(at(Agent2, Location), Time))
       ),
       some(Location, '$kolem_Fn_368'(Agent1, Agent2, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3330).

 /*  [(holds_at(neg(at(Agent1, Location)), Time);holds_at(neg(at(Agent2, Location)), Time)), some(Location, '$kolem_Fn_368'(Agent1, Agent2, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(greet(Agent1, Agent2), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3330).
axiom(not(happens(greet(Agent1, Agent2), Time)),
   
    [  (holds_at(neg(at(Agent1, Location)), Time);holds_at(neg(at(Agent2, Location)), Time)),
      some(Location, '$kolem_Fn_368'(Agent1, Agent2, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3330).

 /*  holds_at(at(Agent1, Location), Time) :-
       happens(greet(Agent1, Agent2), Time),
       some(Location, '$kolem_Fn_368'(Agent1, Agent2, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3330).

 /*  [happens(greet(Agent1, Agent2), Time), some(Location, '$kolem_Fn_368'(Agent1, Agent2, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(at(Agent1, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3330).
axiom(holds_at(at(Agent1, Location), Time),
   
    [ happens(greet(Agent1, Agent2), Time),
      some(Location, '$kolem_Fn_368'(Agent1, Agent2, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3330).

 /*  holds_at(at(Agent2, Location), Time) :-
       happens(greet(Agent1, Agent2), Time),
       some(Location, '$kolem_Fn_368'(Agent1, Agent2, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3330).

 /*  [happens(greet(Agent1, Agent2), Time), some(Location, '$kolem_Fn_368'(Agent1, Agent2, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(at(Agent2, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3330).
axiom(holds_at(at(Agent2, Location), Time),
   
    [ happens(greet(Agent1, Agent2), Time),
      some(Location, '$kolem_Fn_368'(Agent1, Agent2, Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3333
% [agent1,agent2,time]
% Happens(SayGoodbye(agent1,agent2),time) ->
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3335
% {location}% 
% HoldsAt(At(agent1,location),time) &
% HoldsAt(At(agent2,location),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3337
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3335).

 /*  exists([Location],
    happens(sayGoodbye(Agent1, Agent2), Time) ->
       holds_at(at(Agent1, Location), Time),
       holds_at(at(Agent2, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3335).

 /*  not(happens(sayGoodbye(Agent1, Agent2), Time)) :-
       (   not(holds_at(at(Agent1, Location), Time))
       ;   not(holds_at(at(Agent2, Location), Time))
       ),
       some(Location, '$kolem_Fn_369'(Agent1, Agent2, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3335).

 /*  [(holds_at(neg(at(Agent1, Location)), Time);holds_at(neg(at(Agent2, Location)), Time)), some(Location, '$kolem_Fn_369'(Agent1, Agent2, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(sayGoodbye(Agent1, Agent2), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3335).
axiom(not(happens(sayGoodbye(Agent1, Agent2), Time)),
   
    [  (holds_at(neg(at(Agent1, Location)), Time);holds_at(neg(at(Agent2, Location)), Time)),
      some(Location, '$kolem_Fn_369'(Agent1, Agent2, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3335).

 /*  holds_at(at(Agent1, Location), Time) :-
       happens(sayGoodbye(Agent1, Agent2), Time),
       some(Location, '$kolem_Fn_369'(Agent1, Agent2, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3335).

 /*  [happens(sayGoodbye(Agent1, Agent2), Time), some(Location, '$kolem_Fn_369'(Agent1, Agent2, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(at(Agent1, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3335).
axiom(holds_at(at(Agent1, Location), Time),
   
    [ happens(sayGoodbye(Agent1, Agent2), Time),
      some(Location, '$kolem_Fn_369'(Agent1, Agent2, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3335).

 /*  holds_at(at(Agent2, Location), Time) :-
       happens(sayGoodbye(Agent1, Agent2), Time),
       some(Location, '$kolem_Fn_369'(Agent1, Agent2, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3335).

 /*  [happens(sayGoodbye(Agent1, Agent2), Time), some(Location, '$kolem_Fn_369'(Agent1, Agent2, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(at(Agent2, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3335).
axiom(holds_at(at(Agent2, Location), Time),
   
    [ happens(sayGoodbye(Agent1, Agent2), Time),
      some(Location, '$kolem_Fn_369'(Agent1, Agent2, Time))
    ]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3339
% event Order(agent,agent,physobj)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3339).
event(order(agent,agent,physobj)).
==> mpred_prop(order(agent,agent,physobj),event).
==> meta_argtypes(order(agent,agent,physobj)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3341
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3342).
% fluent KnowOrder(agent,agent,physobj)
fluent(knowOrder(agent,agent,physobj)).
==> mpred_prop(knowOrder(agent,agent,physobj),fluent).
==> meta_argtypes(knowOrder(agent,agent,physobj)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3343
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3344).
% [agent1,agent2,physobj,time]
% Initiates(Order(agent1,agent2,physobj),
%           KnowOrder(agent2,agent1,physobj),
%           time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3346
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3344).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(order(Agent1, Agent2, Physobj),
                    knowOrder(Agent2, Agent1, Physobj),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3344).
axiom(initiates(order(Agent1, Agent2, Physobj), knowOrder(Agent2, Agent1, Physobj), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3348
% [agent1,agent2,physobj,time]
% Happens(Order(agent1,agent2,physobj),time) ->
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3350
% {location}% 
% HoldsAt(At(agent1,location),time) &
% HoldsAt(At(agent2,location),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3352
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3350).

 /*  exists([Location],
    happens(order(Agent1, Agent2, Physobj), Time) ->
       holds_at(at(Agent1, Location), Time),
       holds_at(at(Agent2, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3350).

 /*  not(happens(order(Agent1, Agent2, Physobj), Time)) :-
       (   not(holds_at(at(Agent1, Location), Time))
       ;   not(holds_at(at(Agent2, Location), Time))
       ),
       some(Location,
            '$kolem_Fn_370'(Agent1, Agent2, Physobj, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3350).

 /*  [(holds_at(neg(at(Agent1, Location)), Time);holds_at(neg(at(Agent2, Location)), Time)), some(Location, '$kolem_Fn_370'(Agent1, Agent2, Physobj, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(order(Agent1, Agent2, Physobj), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3350).
axiom(not(happens(order(Agent1, Agent2, Physobj), Time)),
   
    [  (holds_at(neg(at(Agent1, Location)), Time);holds_at(neg(at(Agent2, Location)), Time)),
      some(Location,
           '$kolem_Fn_370'(Agent1, Agent2, Physobj, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3350).

 /*  holds_at(at(Agent1, Location), Time) :-
       happens(order(Agent1, Agent2, Physobj), Time),
       some(Location,
            '$kolem_Fn_370'(Agent1, Agent2, Physobj, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3350).

 /*  [happens(order(Agent1, Agent2, Physobj), Time), some(Location, '$kolem_Fn_370'(Agent1, Agent2, Physobj, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(at(Agent1, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3350).
axiom(holds_at(at(Agent1, Location), Time),
   
    [ happens(order(Agent1, Agent2, Physobj), Time),
      some(Location,
           '$kolem_Fn_370'(Agent1, Agent2, Physobj, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3350).

 /*  holds_at(at(Agent2, Location), Time) :-
       happens(order(Agent1, Agent2, Physobj), Time),
       some(Location,
            '$kolem_Fn_370'(Agent1, Agent2, Physobj, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3350).

 /*  [happens(order(Agent1, Agent2, Physobj), Time), some(Location, '$kolem_Fn_370'(Agent1, Agent2, Physobj, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(at(Agent2, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3350).
axiom(holds_at(at(Agent2, Location), Time),
   
    [ happens(order(Agent1, Agent2, Physobj), Time),
      some(Location,
           '$kolem_Fn_370'(Agent1, Agent2, Physobj, Time))
    ]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3354
% event Request(agent,agent,physobj)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3354).
event(request(agent,agent,physobj)).
==> mpred_prop(request(agent,agent,physobj),event).
==> meta_argtypes(request(agent,agent,physobj)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3356
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3357).
% fluent KnowRequest(agent,agent,physobj)
fluent(knowRequest(agent,agent,physobj)).
==> mpred_prop(knowRequest(agent,agent,physobj),fluent).
==> meta_argtypes(knowRequest(agent,agent,physobj)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3358
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3359).
% [agent1,agent2,physobj,time]
% Initiates(Request(agent1,agent2,physobj),
%           KnowRequest(agent2,agent1,physobj),
%           time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3361
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3359).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(request(Agent1, Agent2, Physobj),
                    knowRequest(Agent2, Agent1, Physobj),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3359).
axiom(initiates(request(Agent1, Agent2, Physobj), knowRequest(Agent2, Agent1, Physobj), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3363
% [agent1,agent2,physobj,time]
% Happens(Request(agent1,agent2,physobj),time) ->
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3365
% {location}% 
% HoldsAt(At(agent1,location),time) &
% HoldsAt(At(agent2,location),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3367
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3365).

 /*  exists([Location],
    happens(request(Agent1, Agent2, Physobj), Time) ->
       holds_at(at(Agent1, Location), Time),
       holds_at(at(Agent2, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3365).

 /*  not(happens(request(Agent1, Agent2, Physobj), Time)) :-
       (   not(holds_at(at(Agent1, Location), Time))
       ;   not(holds_at(at(Agent2, Location), Time))
       ),
       some(Location,
            '$kolem_Fn_371'(Agent1, Agent2, Physobj, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3365).

 /*  [(holds_at(neg(at(Agent1, Location)), Time);holds_at(neg(at(Agent2, Location)), Time)), some(Location, '$kolem_Fn_371'(Agent1, Agent2, Physobj, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(request(Agent1, Agent2, Physobj),
                      Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3365).
axiom(not(happens(request(Agent1, Agent2, Physobj), Time)),
   
    [  (holds_at(neg(at(Agent1, Location)), Time);holds_at(neg(at(Agent2, Location)), Time)),
      some(Location,
           '$kolem_Fn_371'(Agent1, Agent2, Physobj, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3365).

 /*  holds_at(at(Agent1, Location), Time) :-
       happens(request(Agent1, Agent2, Physobj), Time),
       some(Location,
            '$kolem_Fn_371'(Agent1, Agent2, Physobj, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3365).

 /*  [happens(request(Agent1, Agent2, Physobj), Time), some(Location, '$kolem_Fn_371'(Agent1, Agent2, Physobj, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(at(Agent1, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3365).
axiom(holds_at(at(Agent1, Location), Time),
   
    [ happens(request(Agent1, Agent2, Physobj), Time),
      some(Location,
           '$kolem_Fn_371'(Agent1, Agent2, Physobj, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3365).

 /*  holds_at(at(Agent2, Location), Time) :-
       happens(request(Agent1, Agent2, Physobj), Time),
       some(Location,
            '$kolem_Fn_371'(Agent1, Agent2, Physobj, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3365).

 /*  [happens(request(Agent1, Agent2, Physobj), Time), some(Location, '$kolem_Fn_371'(Agent1, Agent2, Physobj, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(at(Agent2, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3365).
axiom(holds_at(at(Agent2, Location), Time),
   
    [ happens(request(Agent1, Agent2, Physobj), Time),
      some(Location,
           '$kolem_Fn_371'(Agent1, Agent2, Physobj, Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3369
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: ecnet/Diving.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; scuba diving
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3390
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3391).
% sort object
==> sort(object).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3391
% sort agent: object
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3391).
==> subsort(agent,object).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3392
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3393).
% sort diver: agent
==> subsort(diver,agent).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3393
% sort depth: integer
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3393).
==> subsort(depth,integer).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3394
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3395).
% sort boat: object
==> subsort(boat,object).
%; reference line, anchor line, shotline, SMB line, ...

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3397
% sort line: object
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3397).
==> subsort(line,object).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3399
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3400).
% sort equipment: object
==> subsort(equipment,object).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3400
% sort weight: equipment
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3400).
==> subsort(weight,equipment).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3401
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3402).
% sort fin: equipment
==> subsort(fin,equipment).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3402
% sort airtank: equipment
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3402).
==> subsort(airtank,equipment).
%; buoyancy compensator (BC)
%; buoyancy control device (BCD)

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3406
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3407).
% sort computer: equipment
==> subsort(computer,equipment).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3407
% sort bc: equipment
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3407).
==> subsort(bc,equipment).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3409
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3410).
% fluent AtDepth(object,depth)
fluent(atDepth(object,depth)).
==> mpred_prop(atDepth(object,depth),fluent).
==> meta_argtypes(atDepth(object,depth)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3411
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3412).
% [object,depth1,depth2,time]
% HoldsAt(AtDepth(object,depth1),time) &
% HoldsAt(AtDepth(object,depth2),time) ->
% depth1 = depth2.
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3414
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3412).

 /*  holds_at(atDepth(Object, Depth1), Time), holds_at(atDepth(Object, Depth2), Time) ->
       equals(Depth1, Depth2).
 */

 /*  not(holds_at(atDepth(Object, Depth1), Time)) :-
       holds_at(atDepth(Object, Depth2), Time),
       not(equals(Depth1, Depth2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3412).

 /*  [holds_at(atDepth(Object, Depth2), Time), not(equals(Depth1, Depth2))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(atDepth(Object, Depth1)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3412).
axiom(holds_at(neg(atDepth(Object, Depth1)), Time),
   
    [ holds_at(atDepth(Object, Depth2), Time),
      not(equals(Depth1, Depth2))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3412).

 /*  not(holds_at(atDepth(Object, Depth2), Time)) :-
       holds_at(atDepth(Object, Depth1), Time),
       not(equals(Depth1, Depth2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3412).

 /*  [holds_at(atDepth(Object, Depth1), Time), not(equals(Depth1, Depth2))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(atDepth(Object, Depth2)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3412).
axiom(holds_at(neg(atDepth(Object, Depth2)), Time),
   
    [ holds_at(atDepth(Object, Depth1), Time),
      not(equals(Depth2, Depth1))
    ]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3416
% event Ascend(diver,depth)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3416).
event(ascend(diver,depth)).
==> mpred_prop(ascend(diver,depth),event).
==> meta_argtypes(ascend(diver,depth)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3418
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3419).
% event Descend(diver,depth)
event(descend(diver,depth)).
==> mpred_prop(descend(diver,depth),event).
==> meta_argtypes(descend(diver,depth)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3420
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3421).
% [diver,depth1,depth2,time]
% HoldsAt(AtDepth(diver,depth1),time) &
% Happens(Descend(diver,depth2),time) ->
% depth2>depth1.
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3423
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3421).

 /*  holds_at(atDepth(Diver, Depth1), Time), happens(descend(Diver, Depth2), Time) ->
       Depth2>Depth1.
 */

 /*  comparison(Depth2, Depth1, >) :-
       holds_at(atDepth(Diver, Depth1), Time),
       happens(descend(Diver, Depth2), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3421).

 /*  [holds_at(atDepth(Diver, Depth1), Time), happens(descend(Diver, Depth2), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          comparison(Depth2, Depth1, >)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3421).
axiom(comparison(Depth2, Depth1, >),
   
    [ holds_at(atDepth(Diver, Depth1), Time),
      happens(descend(Diver, Depth2), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3421).

 /*  not(holds_at(atDepth(Diver, Depth1), Time)) :-
       happens(descend(Diver, Depth2), Time),
       not(comparison(Depth2, Depth1, >)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3421).

 /*  [happens(descend(Diver, Depth2), Time), not(comparison(Depth2, Depth1, >))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(atDepth(Diver, Depth1)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3421).
axiom(holds_at(neg(atDepth(Diver, Depth1)), Time),
   
    [ happens(descend(Diver, Depth2), Time),
      not(comparison(Depth2, Depth1, >))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3421).

 /*  not(happens(descend(Diver, Depth2), Time)) :-
       holds_at(atDepth(Diver, Depth1), Time),
       not(comparison(Depth2, Depth1, >)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3421).

 /*  [holds_at(atDepth(Diver, Depth1), Time), not(comparison(Depth2, Depth1, >))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(descend(Diver, Depth2), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3421).
axiom(not(happens(descend(Diver, Depth2), Time)),
   
    [ holds_at(atDepth(Diver, Depth1), Time),
      not(comparison(Depth2, Depth1, >))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3425
% [diver,depth1,depth2,time]
% HoldsAt(AtDepth(diver,depth1),time) &
% Happens(Ascend(diver,depth2),time) ->
% depth2<depth1.
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3428
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3427).

 /*  holds_at(atDepth(Diver, Depth1), Time), happens(ascend(Diver, Depth2), Time) ->
       Depth2<Depth1.
 */

 /*  comparison(Depth2, Depth1, <) :-
       holds_at(atDepth(Diver, Depth1), Time),
       happens(ascend(Diver, Depth2), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3427).

 /*  [holds_at(atDepth(Diver, Depth1), Time), happens(ascend(Diver, Depth2), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          comparison(Depth2, Depth1, <)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3427).
axiom(comparison(Depth2, Depth1, <),
   
    [ holds_at(atDepth(Diver, Depth1), Time),
      happens(ascend(Diver, Depth2), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3427).

 /*  not(holds_at(atDepth(Diver, Depth1), Time)) :-
       happens(ascend(Diver, Depth2), Time),
       not(comparison(Depth2, Depth1, <)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3427).

 /*  [happens(ascend(Diver, Depth2), Time), not(comparison(Depth2, Depth1, <))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(atDepth(Diver, Depth1)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3427).
axiom(holds_at(neg(atDepth(Diver, Depth1)), Time),
   
    [ happens(ascend(Diver, Depth2), Time),
      not(comparison(Depth2, Depth1, <))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3427).

 /*  not(happens(ascend(Diver, Depth2), Time)) :-
       holds_at(atDepth(Diver, Depth1), Time),
       not(comparison(Depth2, Depth1, <)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3427).

 /*  [holds_at(atDepth(Diver, Depth1), Time), not(comparison(Depth2, Depth1, <))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(ascend(Diver, Depth2), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3427).
axiom(not(happens(ascend(Diver, Depth2), Time)),
   
    [ holds_at(atDepth(Diver, Depth1), Time),
      not(comparison(Depth2, Depth1, <))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3430
% [diver,depth,time]
% Initiates(Descend(diver,depth),AtDepth(diver,depth),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3432).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(descend(Diver, Depth),
                    atDepth(Diver, Depth),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3432).
axiom(initiates(descend(Diver, Depth), atDepth(Diver, Depth), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3433
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3434).
% [diver,depth1,depth2,time]
% HoldsAt(AtDepth(diver,depth1),time) ->
% Terminates(Descend(diver,depth2),AtDepth(diver,depth1),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3435

 /*  [holds_at(atDepth(Diver, Depth1), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(descend(Diver, Depth2),
                     atDepth(Diver, Depth1),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3434).
axiom(terminates(descend(Diver, Depth2), atDepth(Diver, Depth1), Time),
    [holds_at(atDepth(Diver, Depth1), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3437
% [diver,depth,time]
% Initiates(Ascend(diver,depth),AtDepth(diver,depth),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3439).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(ascend(Diver, Depth),
                    atDepth(Diver, Depth),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3439).
axiom(initiates(ascend(Diver, Depth), atDepth(Diver, Depth), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3440
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3441).
% [diver,depth1,depth2,time]
% HoldsAt(AtDepth(diver,depth1),time) ->
% Terminates(Ascend(diver,depth2),AtDepth(diver,depth1),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3442

 /*  [holds_at(atDepth(Diver, Depth1), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(ascend(Diver, Depth2),
                     atDepth(Diver, Depth1),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3441).
axiom(terminates(ascend(Diver, Depth2), atDepth(Diver, Depth1), Time),
    [holds_at(atDepth(Diver, Depth1), Time)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3444
% fluent Wearing(diver,equipment)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3444).
fluent(wearing(diver,equipment)).
==> mpred_prop(wearing(diver,equipment),fluent).
==> meta_argtypes(wearing(diver,equipment)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3446
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3447).
% event PutOn(diver,equipment)
event(putOn(diver,equipment)).
==> mpred_prop(putOn(diver,equipment),event).
==> meta_argtypes(putOn(diver,equipment)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3448
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3449).
% event TakeOff(diver,equipment)
event(takeOff(diver,equipment)).
==> mpred_prop(takeOff(diver,equipment),event).
==> meta_argtypes(takeOff(diver,equipment)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3450
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3451).
% event Lose(diver,equipment)
event(lose(diver,equipment)).
==> mpred_prop(lose(diver,equipment),event).
==> meta_argtypes(lose(diver,equipment)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3452
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3453).
% [diver,equipment,depth,time]
% Releases(PutOn(diver,equipment),AtDepth(equipment,depth),time).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          releases(putOn(Diver, Equipment),
                   atDepth(Equipment, Depth),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3453).
axiom(releases(putOn(Diver, Equipment), atDepth(Equipment, Depth), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3455
% [diver,equipment,time]
% Releases(PutOn(diver,equipment),UnderWater(equipment),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3457).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          releases(putOn(Diver, Equipment),
                   underWater(Equipment),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3457).
axiom(releases(putOn(Diver, Equipment), underWater(Equipment), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3458
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3459).
% [diver,equipment,time]
% Happens(PutOn(diver,equipment),time) ->
% !{diver1} HoldsAt(Wearing(diver1,equipment),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3460

 /*  happens(putOn(Diver, Equipment), Time) ->
       not(exists([Diver1],
                  holds_at(wearing(Diver1, Equipment), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3459).

 /*  not(holds_at(wearing(Diver1, Equipment), Time)) :-
       happens(putOn(Diver, Equipment), Time).
 */

 /*  [holds_at(metreqs(putOn(Diver, Equipment)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(putOn(Diver, Equipment), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3459).
axiom(requires(putOn(Diver, Equipment), Time),
    [holds_at(metreqs(putOn(Diver, Equipment)), Time)]).

 /*  [holds_at(neg(wearing(Diver1, Equipment)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(putOn(Diver, Equipment)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3459).
axiom(holds_at(metreqs(putOn(Diver, Equipment)), Time),
    [holds_at(neg(wearing(Diver1, Equipment)), Time)]).

 /*  not(happens(putOn(Diver, Equipment), Time)) :-
       holds_at(wearing(Diver1, Equipment), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3459).

 /*  [holds_at(wearing(Diver1, Equipment), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(putOn(Diver, Equipment), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3459).
axiom(not(happens(putOn(Diver, Equipment), Time)),
    [holds_at(wearing(Diver1, Equipment), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3462
% [diver,depth,equipment,time]
% HoldsAt(Wearing(diver,equipment),time) ->
% (HoldsAt(AtDepth(diver,depth),time) <->
%  HoldsAt(AtDepth(equipment,depth),time)).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3465
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3464).

 /*  holds_at(wearing(Diver, Equipment), Time) ->
       ( holds_at(atDepth(Diver, Depth), Time)<->holds_at(atDepth(Equipment, Depth), Time)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3464).

 /*  not(holds_at(wearing(Diver, Equipment), Time)) :-
       (   not(holds_at(atDepth(Equipment, Depth), Time)),
           holds_at(atDepth(Diver, Depth), Time)
       ;   not(holds_at(atDepth(Diver, Depth), Time)),
           holds_at(atDepth(Equipment, Depth), Time)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3464).

 /*  [(holds_at(neg(atDepth(Equipment, Depth)), Time), holds_at(atDepth(Diver, Depth), Time);holds_at(neg(atDepth(Diver, Depth)), Time), holds_at(atDepth(Equipment, Depth), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(wearing(Diver, Equipment)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3464).
axiom(holds_at(neg(wearing(Diver, Equipment)), Time),
   
    [  (holds_at(neg(atDepth(Equipment, Depth)), Time), holds_at(atDepth(Diver, Depth), Time);holds_at(neg(atDepth(Diver, Depth)), Time), holds_at(atDepth(Equipment, Depth), Time))
    ]).

 /*  holds_at(atDepth(Equipment, Depth), Time) :-
       holds_at(atDepth(Diver, Depth), Time),
       holds_at(wearing(Diver, Equipment), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3464).

 /*  [holds_at(atDepth(Diver, Depth), Time), holds_at(wearing(Diver, Equipment), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(atDepth(Equipment, Depth), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3464).
axiom(holds_at(atDepth(Equipment, Depth), Time),
   
    [ holds_at(atDepth(Diver, Depth), Time),
      holds_at(wearing(Diver, Equipment), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3464).

 /*  not(holds_at(atDepth(Diver, Depth), Time)) :-
       not(holds_at(atDepth(Equipment, Depth), Time)),
       holds_at(wearing(Diver, Equipment), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3464).

 /*  [holds_at(neg(atDepth(Equipment, Depth)), Time), holds_at(wearing(Diver, Equipment), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(atDepth(Diver, Depth)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3464).
axiom(holds_at(neg(atDepth(Diver, Depth)), Time),
   
    [ holds_at(neg(atDepth(Equipment, Depth)), Time),
      holds_at(wearing(Diver, Equipment), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3464).

 /*  holds_at(atDepth(Diver, Depth), Time) :-
       holds_at(atDepth(Equipment, Depth), Time),
       holds_at(wearing(Diver, Equipment), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3464).

 /*  [holds_at(atDepth(Equipment, Depth), Time), holds_at(wearing(Diver, Equipment), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(atDepth(Diver, Depth), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3464).
axiom(holds_at(atDepth(Diver, Depth), Time),
   
    [ holds_at(atDepth(Equipment, Depth), Time),
      holds_at(wearing(Diver, Equipment), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3464).

 /*  not(holds_at(atDepth(Equipment, Depth), Time)) :-
       not(holds_at(atDepth(Diver, Depth), Time)),
       holds_at(wearing(Diver, Equipment), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3464).

 /*  [holds_at(neg(atDepth(Diver, Depth)), Time), holds_at(wearing(Diver, Equipment), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(atDepth(Equipment, Depth)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3464).
axiom(holds_at(neg(atDepth(Equipment, Depth)), Time),
   
    [ holds_at(neg(atDepth(Diver, Depth)), Time),
      holds_at(wearing(Diver, Equipment), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3467
% [diver,depth,object,time]
% HoldsAt(Holding(diver,object),time) ->
% (HoldsAt(AtDepth(diver,depth),time) <->
%  HoldsAt(AtDepth(object,depth),time)).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3470
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3469).

 /*  holds_at(holding(Diver, Object), Time) ->
       ( holds_at(atDepth(Diver, Depth), Time)<->holds_at(atDepth(Object, Depth), Time)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3469).

 /*  not(holds_at(holding(Diver, Object), Time)) :-
       (   not(holds_at(atDepth(Object, Depth), Time)),
           holds_at(atDepth(Diver, Depth), Time)
       ;   not(holds_at(atDepth(Diver, Depth), Time)),
           holds_at(atDepth(Object, Depth), Time)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3469).

 /*  [(holds_at(neg(atDepth(Object, Depth)), Time), holds_at(atDepth(Diver, Depth), Time);holds_at(neg(atDepth(Diver, Depth)), Time), holds_at(atDepth(Object, Depth), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(holding(Diver, Object)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3469).
axiom(holds_at(neg(holding(Diver, Object)), Time),
   
    [  (holds_at(neg(atDepth(Object, Depth)), Time), holds_at(atDepth(Diver, Depth), Time);holds_at(neg(atDepth(Diver, Depth)), Time), holds_at(atDepth(Object, Depth), Time))
    ]).

 /*  holds_at(atDepth(Object, Depth), Time) :-
       holds_at(atDepth(Diver, Depth), Time),
       holds_at(holding(Diver, Object), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3469).

 /*  [holds_at(atDepth(Diver, Depth), Time), holds_at(holding(Diver, Object), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(atDepth(Object, Depth), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3469).
axiom(holds_at(atDepth(Object, Depth), Time),
   
    [ holds_at(atDepth(Diver, Depth), Time),
      holds_at(holding(Diver, Object), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3469).

 /*  not(holds_at(atDepth(Diver, Depth), Time)) :-
       not(holds_at(atDepth(Object, Depth), Time)),
       holds_at(holding(Diver, Object), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3469).

 /*  [holds_at(neg(atDepth(Object, Depth)), Time), holds_at(holding(Diver, Object), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(atDepth(Diver, Depth)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3469).
axiom(holds_at(neg(atDepth(Diver, Depth)), Time),
   
    [ holds_at(neg(atDepth(Object, Depth)), Time),
      holds_at(holding(Diver, Object), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3469).

 /*  holds_at(atDepth(Diver, Depth), Time) :-
       holds_at(atDepth(Object, Depth), Time),
       holds_at(holding(Diver, Object), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3469).

 /*  [holds_at(atDepth(Object, Depth), Time), holds_at(holding(Diver, Object), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(atDepth(Diver, Depth), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3469).
axiom(holds_at(atDepth(Diver, Depth), Time),
   
    [ holds_at(atDepth(Object, Depth), Time),
      holds_at(holding(Diver, Object), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3469).

 /*  not(holds_at(atDepth(Object, Depth), Time)) :-
       not(holds_at(atDepth(Diver, Depth), Time)),
       holds_at(holding(Diver, Object), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3469).

 /*  [holds_at(neg(atDepth(Diver, Depth)), Time), holds_at(holding(Diver, Object), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(atDepth(Object, Depth)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3469).
axiom(holds_at(neg(atDepth(Object, Depth)), Time),
   
    [ holds_at(neg(atDepth(Diver, Depth)), Time),
      holds_at(holding(Diver, Object), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3472
% [diver,equipment,time]
% HoldsAt(Wearing(diver,equipment),time) ->
% (HoldsAt(UnderWater(diver),time) <->
%  HoldsAt(UnderWater(equipment),time)).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3475
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3474).

 /*  holds_at(wearing(Diver, Equipment), Time) ->
       ( holds_at(underWater(Diver), Time)<->holds_at(underWater(Equipment), Time)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3474).

 /*  not(holds_at(wearing(Diver, Equipment), Time)) :-
       (   not(holds_at(underWater(Equipment), Time)),
           holds_at(underWater(Diver), Time)
       ;   not(holds_at(underWater(Diver), Time)),
           holds_at(underWater(Equipment), Time)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3474).

 /*  [(holds_at(neg(underWater(Equipment)), Time), holds_at(underWater(Diver), Time);holds_at(neg(underWater(Diver)), Time), holds_at(underWater(Equipment), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(wearing(Diver, Equipment)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3474).
axiom(holds_at(neg(wearing(Diver, Equipment)), Time),
   
    [  (holds_at(neg(underWater(Equipment)), Time), holds_at(underWater(Diver), Time);holds_at(neg(underWater(Diver)), Time), holds_at(underWater(Equipment), Time))
    ]).

 /*  holds_at(underWater(Equipment), Time) :-
       holds_at(underWater(Diver), Time),
       holds_at(wearing(Diver, Equipment), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3474).

 /*  [holds_at(underWater(Diver), Time), holds_at(wearing(Diver, Equipment), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(underWater(Equipment), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3474).
axiom(holds_at(underWater(Equipment), Time),
   
    [ holds_at(underWater(Diver), Time),
      holds_at(wearing(Diver, Equipment), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3474).

 /*  not(holds_at(underWater(Diver), Time)) :-
       not(holds_at(underWater(Equipment), Time)),
       holds_at(wearing(Diver, Equipment), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3474).

 /*  [holds_at(neg(underWater(Equipment)), Time), holds_at(wearing(Diver, Equipment), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(underWater(Diver)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3474).
axiom(holds_at(neg(underWater(Diver)), Time),
   
    [ holds_at(neg(underWater(Equipment)), Time),
      holds_at(wearing(Diver, Equipment), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3474).

 /*  holds_at(underWater(Diver), Time) :-
       holds_at(underWater(Equipment), Time),
       holds_at(wearing(Diver, Equipment), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3474).

 /*  [holds_at(underWater(Equipment), Time), holds_at(wearing(Diver, Equipment), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(underWater(Diver), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3474).
axiom(holds_at(underWater(Diver), Time),
   
    [ holds_at(underWater(Equipment), Time),
      holds_at(wearing(Diver, Equipment), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3474).

 /*  not(holds_at(underWater(Equipment), Time)) :-
       not(holds_at(underWater(Diver), Time)),
       holds_at(wearing(Diver, Equipment), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3474).

 /*  [holds_at(neg(underWater(Diver)), Time), holds_at(wearing(Diver, Equipment), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(underWater(Equipment)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3474).
axiom(holds_at(neg(underWater(Equipment)), Time),
   
    [ holds_at(neg(underWater(Diver)), Time),
      holds_at(wearing(Diver, Equipment), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3477
% [diver,object,time]
% HoldsAt(Holding(diver,object),time) ->
% (HoldsAt(UnderWater(diver),time) <->
%  HoldsAt(UnderWater(object),time)).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3480
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3479).

 /*  holds_at(holding(Diver, Object), Time) ->
       ( holds_at(underWater(Diver), Time)<->holds_at(underWater(Object), Time)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3479).

 /*  not(holds_at(holding(Diver, Object), Time)) :-
       (   not(holds_at(underWater(Object), Time)),
           holds_at(underWater(Diver), Time)
       ;   not(holds_at(underWater(Diver), Time)),
           holds_at(underWater(Object), Time)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3479).

 /*  [(holds_at(neg(underWater(Object)), Time), holds_at(underWater(Diver), Time);holds_at(neg(underWater(Diver)), Time), holds_at(underWater(Object), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(holding(Diver, Object)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3479).
axiom(holds_at(neg(holding(Diver, Object)), Time),
   
    [  (holds_at(neg(underWater(Object)), Time), holds_at(underWater(Diver), Time);holds_at(neg(underWater(Diver)), Time), holds_at(underWater(Object), Time))
    ]).

 /*  holds_at(underWater(Object), Time) :-
       holds_at(underWater(Diver), Time),
       holds_at(holding(Diver, Object), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3479).

 /*  [holds_at(underWater(Diver), Time), holds_at(holding(Diver, Object), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(underWater(Object), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3479).
axiom(holds_at(underWater(Object), Time),
   
    [ holds_at(underWater(Diver), Time),
      holds_at(holding(Diver, Object), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3479).

 /*  not(holds_at(underWater(Diver), Time)) :-
       not(holds_at(underWater(Object), Time)),
       holds_at(holding(Diver, Object), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3479).

 /*  [holds_at(neg(underWater(Object)), Time), holds_at(holding(Diver, Object), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(underWater(Diver)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3479).
axiom(holds_at(neg(underWater(Diver)), Time),
   
    [ holds_at(neg(underWater(Object)), Time),
      holds_at(holding(Diver, Object), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3479).

 /*  holds_at(underWater(Diver), Time) :-
       holds_at(underWater(Object), Time),
       holds_at(holding(Diver, Object), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3479).

 /*  [holds_at(underWater(Object), Time), holds_at(holding(Diver, Object), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(underWater(Diver), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3479).
axiom(holds_at(underWater(Diver), Time),
   
    [ holds_at(underWater(Object), Time),
      holds_at(holding(Diver, Object), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3479).

 /*  not(holds_at(underWater(Object), Time)) :-
       not(holds_at(underWater(Diver), Time)),
       holds_at(holding(Diver, Object), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3479).

 /*  [holds_at(neg(underWater(Diver)), Time), holds_at(holding(Diver, Object), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(underWater(Object)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3479).
axiom(holds_at(neg(underWater(Object)), Time),
   
    [ holds_at(neg(underWater(Diver)), Time),
      holds_at(holding(Diver, Object), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3482
% [diver,depth,equipment,time]
% HoldsAt(AtDepth(diver,depth),time) &
% HoldsAt(Wearing(diver,equipment),time) ->
% Initiates(TakeOff(diver,equipment),AtDepth(equipment,depth),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3485
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3484).

 /*  [holds_at(atDepth(Diver, Depth), Time), holds_at(wearing(Diver, Equipment), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(takeOff(Diver, Equipment),
                    atDepth(Equipment, Depth),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3484).
axiom(initiates(takeOff(Diver, Equipment), atDepth(Equipment, Depth), Time),
   
    [ holds_at(atDepth(Diver, Depth), Time),
      holds_at(wearing(Diver, Equipment), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3487
% [diver,depth,equipment,time]
% !HoldsAt(AtDepth(diver,depth),time) &
% HoldsAt(Wearing(diver,equipment),time) ->
% Terminates(TakeOff(diver,equipment),AtDepth(equipment,depth),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3490
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3489).

 /*  [holds_at(neg(atDepth(Diver, Depth)), Time), holds_at(wearing(Diver, Equipment), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(takeOff(Diver, Equipment),
                     atDepth(Equipment, Depth),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3489).
axiom(terminates(takeOff(Diver, Equipment), atDepth(Equipment, Depth), Time),
   
    [ holds_at(neg(atDepth(Diver, Depth)), Time),
      holds_at(wearing(Diver, Equipment), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3492
% [diver,equipment,time]
% HoldsAt(UnderWater(diver),time) ->
% Initiates(TakeOff(diver,equipment),UnderWater(equipment),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3494

 /*  [holds_at(underWater(Diver), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(takeOff(Diver, Equipment),
                    underWater(Equipment),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3494).
axiom(initiates(takeOff(Diver, Equipment), underWater(Equipment), Time),
    [holds_at(underWater(Diver), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3496
% [diver,equipment,time]
% !HoldsAt(UnderWater(diver),time) ->
% Terminates(TakeOff(diver,equipment),UnderWater(equipment),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3498

 /*  [holds_at(neg(underWater(Diver)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(takeOff(Diver, Equipment),
                     underWater(Equipment),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3498).
axiom(terminates(takeOff(Diver, Equipment), underWater(Equipment), Time),
    [holds_at(neg(underWater(Diver)), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3500
% [diver,equipment,depth,time]
% HoldsAt(AtDepth(diver,depth),time) &
% HoldsAt(Wearing(diver,equipment),time) ->
% Initiates(Lose(diver,equipment),AtDepth(equipment,depth),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3503
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3502).

 /*  [holds_at(atDepth(Diver, Depth), Time), holds_at(wearing(Diver, Equipment), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(lose(Diver, Equipment),
                    atDepth(Equipment, Depth),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3502).
axiom(initiates(lose(Diver, Equipment), atDepth(Equipment, Depth), Time),
   
    [ holds_at(atDepth(Diver, Depth), Time),
      holds_at(wearing(Diver, Equipment), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3505
% [diver,equipment,depth,time]
% !HoldsAt(AtDepth(diver,depth),time) &
% HoldsAt(Wearing(diver,equipment),time) ->
% Terminates(Lose(diver,equipment),AtDepth(equipment,depth),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3508
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3507).

 /*  [holds_at(neg(atDepth(Diver, Depth)), Time), holds_at(wearing(Diver, Equipment), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(lose(Diver, Equipment),
                     atDepth(Equipment, Depth),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3507).
axiom(terminates(lose(Diver, Equipment), atDepth(Equipment, Depth), Time),
   
    [ holds_at(neg(atDepth(Diver, Depth)), Time),
      holds_at(wearing(Diver, Equipment), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3510
% [diver,equipment,time]
% HoldsAt(UnderWater(diver),time) ->
% Initiates(Lose(diver,equipment),UnderWater(equipment),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3512

 /*  [holds_at(underWater(Diver), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(lose(Diver, Equipment),
                    underWater(Equipment),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3512).
axiom(initiates(lose(Diver, Equipment), underWater(Equipment), Time),
    [holds_at(underWater(Diver), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3514
% [diver,equipment,time]
% !HoldsAt(UnderWater(diver),time) ->
% Terminates(Lose(diver,equipment),UnderWater(equipment),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3516

 /*  [holds_at(neg(underWater(Diver)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(lose(Diver, Equipment),
                     underWater(Equipment),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3516).
axiom(terminates(lose(Diver, Equipment), underWater(Equipment), Time),
    [holds_at(neg(underWater(Diver)), Time)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3518
% fluent Holding(diver,object)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3518).
fluent(holding(diver,object)).
==> mpred_prop(holding(diver,object),fluent).
==> meta_argtypes(holding(diver,object)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3520
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3521).
% [diver1,diver2,time]
% HoldsAt(Holding(diver1,diver2),time) ->
% !HoldsAt(Holding(diver2,diver1),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3522

 /*  holds_at(holding(Diver1, Diver2), Time) ->
       holds_at(neg(holding(Diver2, Diver1)), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3521).

 /*  holds_at(neg(holding(Diver2, Diver1)), Time) :-
       holds_at(holding(Diver1, Diver2), Time).
 */

 /*  [holds_at(holding(Diver1, Diver2), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(holding(Diver2, Diver1)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3521).
axiom(holds_at(neg(holding(Diver2, Diver1)), Time),
    [holds_at(holding(Diver1, Diver2), Time)]).

 /*  not(holds_at(holding(Diver1, Diver2), Time)) :-
       not(holds_at(neg(holding(Diver2, Diver1)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3521).

 /*  [holds_at(holding(Diver2, Diver1), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(holding(Diver1, Diver2)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3521).
axiom(holds_at(neg(holding(Diver1, Diver2)), Time),
    [holds_at(holding(Diver2, Diver1), Time)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3524
% event Grab(diver,object)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3524).
event(grab(diver,object)).
==> mpred_prop(grab(diver,object),event).
==> meta_argtypes(grab(diver,object)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3526
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3527).
% event LetGoOf(diver,object)
event(letGoOf(diver,object)).
==> mpred_prop(letGoOf(diver,object),event).
==> meta_argtypes(letGoOf(diver,object)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3528
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3529).
% [diver,object,time]
% Initiates(Grab(diver,object),Holding(diver,object),time).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(grab(Diver, Object),
                    holding(Diver, Object),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3529).
axiom(initiates(grab(Diver, Object), holding(Diver, Object), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3531
% [diver,object,time]
% Terminates(LetGoOf(diver,object),Holding(diver,object),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3533).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(letGoOf(Diver, Object),
                     holding(Diver, Object),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3533).
axiom(terminates(letGoOf(Diver, Object), holding(Diver, Object), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3534
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3535).
% [diver,object,depth,time]
% Releases(Grab(diver,object),AtDepth(object,depth),time).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          releases(grab(Diver, Object),
                   atDepth(Object, Depth),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3535).
axiom(releases(grab(Diver, Object), atDepth(Object, Depth), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3537
% [diver,object,time]
% Releases(Grab(diver,object),UnderWater(object),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3539).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          releases(grab(Diver, Object),
                   underWater(Object),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3539).
axiom(releases(grab(Diver, Object), underWater(Object), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3540
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3541).
% [diver,object,depth,time]
% HoldsAt(AtDepth(diver,depth),time) &
% HoldsAt(Holding(diver,object),time) ->
% Initiates(LetGoOf(diver,object),AtDepth(object,depth),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3543
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3541).

 /*  [holds_at(atDepth(Diver, Depth), Time), holds_at(holding(Diver, Object), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(letGoOf(Diver, Object),
                    atDepth(Object, Depth),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3541).
axiom(initiates(letGoOf(Diver, Object), atDepth(Object, Depth), Time),
   
    [ holds_at(atDepth(Diver, Depth), Time),
      holds_at(holding(Diver, Object), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3545
% [diver,object,depth,time]
% !HoldsAt(AtDepth(diver,depth),time) &
% HoldsAt(Holding(diver,object),time) ->
% Terminates(LetGoOf(diver,object),AtDepth(object,depth),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3548
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3547).

 /*  [holds_at(neg(atDepth(Diver, Depth)), Time), holds_at(holding(Diver, Object), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(letGoOf(Diver, Object),
                     atDepth(Object, Depth),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3547).
axiom(terminates(letGoOf(Diver, Object), atDepth(Object, Depth), Time),
   
    [ holds_at(neg(atDepth(Diver, Depth)), Time),
      holds_at(holding(Diver, Object), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3550
% [diver,object,time]
% HoldsAt(UnderWater(diver),time) ->
% Initiates(LetGoOf(diver,object),UnderWater(object),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3552

 /*  [holds_at(underWater(Diver), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(letGoOf(Diver, Object),
                    underWater(Object),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3552).
axiom(initiates(letGoOf(Diver, Object), underWater(Object), Time),
    [holds_at(underWater(Diver), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3554
% [diver,object,time]
% !HoldsAt(UnderWater(diver),time) ->
% Terminates(LetGoOf(diver,object),UnderWater(object),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3556

 /*  [holds_at(neg(underWater(Diver)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(letGoOf(Diver, Object),
                     underWater(Object),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3556).
axiom(terminates(letGoOf(Diver, Object), underWater(Object), Time),
    [holds_at(neg(underWater(Diver)), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3558
% [diver,equipment,time]
% Initiates(PutOn(diver,equipment),Wearing(diver,equipment),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3560).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(putOn(Diver, Equipment),
                    wearing(Diver, Equipment),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3560).
axiom(initiates(putOn(Diver, Equipment), wearing(Diver, Equipment), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3561
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3562).
% [diver,equipment,time]
% Happens(PutOn(diver,equipment),time) ->
% !HoldsAt(UnderWater(diver),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3563

 /*  happens(putOn(Diver, Equipment), Time) ->
       holds_at(neg(underWater(Diver)), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3562).

 /*  holds_at(neg(underWater(Diver)), Time) :-
       happens(putOn(Diver, Equipment), Time).
 */

 /*  [holds_at(metreqs(putOn(Diver, Equipment)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(putOn(Diver, Equipment), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3562).
axiom(requires(putOn(Diver, Equipment), Time),
    [holds_at(metreqs(putOn(Diver, Equipment)), Time)]).

 /*  [holds_at(neg(underWater(Diver)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(putOn(Diver, Equipment)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3562).
axiom(holds_at(metreqs(putOn(Diver, Equipment)), Time),
    [holds_at(neg(underWater(Diver)), Time)]).

 /*  not(happens(putOn(Diver, Equipment), Time)) :-
       not(holds_at(neg(underWater(Diver)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3562).

 /*  [holds_at(underWater(Diver), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(putOn(Diver, Equipment), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3562).
axiom(not(happens(putOn(Diver, Equipment), Time)),
    [holds_at(underWater(Diver), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3565
% [diver,equipment,time]
% Terminates(TakeOff(diver,equipment),Wearing(diver,equipment),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3567).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(takeOff(Diver, Equipment),
                     wearing(Diver, Equipment),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3567).
axiom(terminates(takeOff(Diver, Equipment), wearing(Diver, Equipment), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3568
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3569).
% [diver,equipment,time]
% Terminates(Lose(diver,equipment),Wearing(diver,equipment),time).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(lose(Diver, Equipment),
                     wearing(Diver, Equipment),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3569).
axiom(terminates(lose(Diver, Equipment), wearing(Diver, Equipment), Time),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3571
% fluent Vertical(diver)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3571).
fluent(vertical(diver)).
==> mpred_prop(vertical(diver),fluent).
==> meta_argtypes(vertical(diver)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3573
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3574).
% fluent HorizontalDown(diver)
fluent(horizontalDown(diver)).
==> mpred_prop(horizontalDown(diver),fluent).
==> meta_argtypes(horizontalDown(diver)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3575
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3576).
% fluent Inverted(diver)
fluent(inverted(diver)).
==> mpred_prop(inverted(diver),fluent).
==> meta_argtypes(inverted(diver)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3577
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3578).
% fluent HorizontalUp(diver)
fluent(horizontalUp(diver)).
==> mpred_prop(horizontalUp(diver),fluent).
==> meta_argtypes(horizontalUp(diver)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3579
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3580).
% xor Vertical, HorizontalDown, Inverted, HorizontalUp
==> xor([vertical,horizontalDown,inverted,horizontalUp]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3581
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3582).
% event RotatePitch(diver)
event(rotatePitch(diver)).
==> mpred_prop(rotatePitch(diver),event).
==> meta_argtypes(rotatePitch(diver)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3583
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3584).
% [diver,time]
% HoldsAt(Vertical(diver),time) ->
% Initiates(RotatePitch(diver),HorizontalDown(diver),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3585

 /*  [holds_at(vertical(Diver), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(rotatePitch(Diver),
                    horizontalDown(Diver),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3584).
axiom(initiates(rotatePitch(Diver), horizontalDown(Diver), Time),
    [holds_at(vertical(Diver), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3587
% [diver,time]
% HoldsAt(HorizontalDown(diver),time) ->
% Initiates(RotatePitch(diver),Inverted(diver),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3589

 /*  [holds_at(horizontalDown(Diver), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(rotatePitch(Diver), inverted(Diver), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3589).
axiom(initiates(rotatePitch(Diver), inverted(Diver), Time),
    [holds_at(horizontalDown(Diver), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3591
% [diver,time]
% HoldsAt(HorizontalDown(diver),time) ->
% Terminates(RotatePitch(diver),HorizontalDown(diver),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3593

 /*  [holds_at(horizontalDown(Diver), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(rotatePitch(Diver),
                     horizontalDown(Diver),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3593).
axiom(terminates(rotatePitch(Diver), horizontalDown(Diver), Time),
    [holds_at(horizontalDown(Diver), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3595
% [diver,time]
% HoldsAt(Inverted(diver),time) ->
% Initiates(RotatePitch(diver),HorizontalUp(diver),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3597

 /*  [holds_at(inverted(Diver), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(rotatePitch(Diver),
                    horizontalUp(Diver),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3597).
axiom(initiates(rotatePitch(Diver), horizontalUp(Diver), Time),
    [holds_at(inverted(Diver), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3599
% [diver,time]
% HoldsAt(Inverted(diver),time) ->
% Terminates(RotatePitch(diver),Inverted(diver),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3601

 /*  [holds_at(inverted(Diver), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(rotatePitch(Diver), inverted(Diver), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3601).
axiom(terminates(rotatePitch(Diver), inverted(Diver), Time),
    [holds_at(inverted(Diver), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3603
% [diver,time]
% HoldsAt(HorizontalUp(diver),time) ->
% Initiates(RotatePitch(diver),Vertical(diver),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3605

 /*  [holds_at(horizontalUp(Diver), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(rotatePitch(Diver), vertical(Diver), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3605).
axiom(initiates(rotatePitch(Diver), vertical(Diver), Time),
    [holds_at(horizontalUp(Diver), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3607
% [diver,time]
% HoldsAt(HorizontalUp(diver),time) ->
% Terminates(RotatePitch(diver),HorizontalUp(diver),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3609

 /*  [holds_at(horizontalUp(Diver), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(rotatePitch(Diver),
                     horizontalUp(Diver),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3609).
axiom(terminates(rotatePitch(Diver), horizontalUp(Diver), Time),
    [holds_at(horizontalUp(Diver), Time)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3611
% event RotateYaw(diver)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3611).
event(rotateYaw(diver)).
==> mpred_prop(rotateYaw(diver),event).
==> meta_argtypes(rotateYaw(diver)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3613
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3614).
%; try taking out Holding condition here
% [diver,time]
% Happens(Ascend1(diver),time) &
% !Happens(RapidAscendToSurface(diver),time) &
% !({diver1} HoldsAt(Holding(diver,diver1),time)) ->
% Happens(RotateYaw(diver),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3618
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3616).

 /*  happens(ascend1(Diver), Time), not(happens(rapidAscendToSurface(Diver), Time)), not(exists([Diver1], holds_at(holding(Diver, Diver1), Time))) ->
       happens(rotateYaw(Diver), Time).
 */

 /*  happens(rotateYaw(Diver), Time) :-
       happens(ascend1(Diver), Time),
       not(happens(rapidAscendToSurface(Diver), Time)),
       not(holds_at(holding(Diver, Diver1), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3616).

 /*  [happens(ascend1(Diver), Time), not(happens(rapidAscendToSurface(Diver), Time)), holds_at(neg(holding(Diver, Diver1)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(rotateYaw(Diver), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3616).
axiom(happens(rotateYaw(Diver), Time),
   
    [ happens(ascend1(Diver), Time),
      not(happens(rapidAscendToSurface(Diver), Time)),
      holds_at(neg(holding(Diver, Diver1)), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3616).

 /*  not(happens(ascend1(Diver), Time)) :-
       ( not(happens(rapidAscendToSurface(Diver), Time)),
         not(holds_at(holding(Diver, Diver1), Time))
       ),
       not(happens(rotateYaw(Diver), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3616).

 /*  [not(happens(rapidAscendToSurface(Diver), Time)), holds_at(neg(holding(Diver, Diver1)), Time), not(happens(rotateYaw(Diver), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(ascend1(Diver), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3616).
axiom(not(happens(ascend1(Diver), Time)),
   
    [ not(happens(rapidAscendToSurface(Diver), Time)),
      holds_at(neg(holding(Diver, Diver1)), Time),
      not(happens(rotateYaw(Diver), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3616).

 /*  happens(rapidAscendToSurface(Diver), Time) :-
       not(holds_at(holding(Diver, Diver1), Time)),
       happens(ascend1(Diver), Time),
       not(happens(rotateYaw(Diver), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3616).

 /*  [holds_at(neg(holding(Diver, Diver1)), Time), happens(ascend1(Diver), Time), not(happens(rotateYaw(Diver), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(rapidAscendToSurface(Diver), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3616).
axiom(happens(rapidAscendToSurface(Diver), Time),
   
    [ holds_at(neg(holding(Diver, Diver1)), Time),
      happens(ascend1(Diver), Time),
      not(happens(rotateYaw(Diver), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3616).

 /*  holds_at(holding(Diver, Diver1), Time) :-
       not(happens(rapidAscendToSurface(Diver), Time)),
       happens(ascend1(Diver), Time),
       not(happens(rotateYaw(Diver), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3616).

 /*  [not(happens(rapidAscendToSurface(Diver), Time)), happens(ascend1(Diver), Time), not(happens(rotateYaw(Diver), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(holding(Diver, Diver1), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3616).
axiom(holds_at(holding(Diver, Diver1), Time),
   
    [ not(happens(rapidAscendToSurface(Diver), Time)),
      happens(ascend1(Diver), Time),
      not(happens(rotateYaw(Diver), Time))
    ]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3620
% fluent UnderWater(object)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3620).
fluent(underWater(object)).
==> mpred_prop(underWater(object),fluent).
==> meta_argtypes(underWater(object)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3622
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3623).
% [object,depth,time]
% depth>% 0 &
% HoldsAt(AtDepth(object,depth),time) ->
% HoldsAt(UnderWater(object),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3625
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3623).

 /*  Depth>0, holds_at(atDepth(Object, Depth), Time) ->
       holds_at(underWater(Object), Time).
 */

 /*  holds_at(underWater(Object), Time) :-
       comparison(Depth, 0, >),
       holds_at(atDepth(Object, Depth), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3623).

 /*  [comparison(Depth, 0, >), holds_at(atDepth(Object, Depth), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(underWater(Object), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3623).
axiom(holds_at(underWater(Object), Time),
   
    [ comparison(Depth, 0, >),
      holds_at(atDepth(Object, Depth), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3623).

 /*  not(holds_at(atDepth(Object, Depth), Time)) :-
       comparison(Depth, 0, >),
       not(holds_at(underWater(Object), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3623).

 /*  [comparison(Depth, 0, >), holds_at(neg(underWater(Object)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(atDepth(Object, Depth)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3623).
axiom(holds_at(neg(atDepth(Object, Depth)), Time),
   
    [ comparison(Depth, 0, >),
      holds_at(neg(underWater(Object)), Time)
    ]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3627
% event EnterWater(object)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3627).
event(enterWater(object)).
==> mpred_prop(enterWater(object),event).
==> meta_argtypes(enterWater(object)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3629
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3630).
% event Surface(object)
event(surface(object)).
==> mpred_prop(surface(object),event).
==> meta_argtypes(surface(object)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3631
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3632).
% [object,time]
% Initiates(EnterWater(object),UnderWater(object),time).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(enterWater(Object), underWater(Object), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3632).
axiom(initiates(enterWater(Object), underWater(Object), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3634
% [diver,time]
% Happens(EnterWater(diver),time) ->
% !{diver1} HoldsAt(Holding(diver1,diver),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3636

 /*  happens(enterWater(Diver), Time) ->
       not(exists([Diver1],
                  holds_at(holding(Diver1, Diver), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3636).

 /*  not(holds_at(holding(Diver1, Diver), Time)) :-
       happens(enterWater(Diver), Time).
 */

 /*  [holds_at(metreqs(enterWater(Diver)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(enterWater(Diver), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3636).
axiom(requires(enterWater(Diver), Time),
    [holds_at(metreqs(enterWater(Diver)), Time)]).

 /*  [holds_at(neg(holding(Diver1, Diver)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(enterWater(Diver)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3636).
axiom(holds_at(metreqs(enterWater(Diver)), Time),
    [holds_at(neg(holding(Diver1, Diver)), Time)]).

 /*  not(happens(enterWater(Diver), Time)) :-
       holds_at(holding(Diver1, Diver), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3636).

 /*  [holds_at(holding(Diver1, Diver), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(enterWater(Diver), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3636).
axiom(not(happens(enterWater(Diver), Time)),
    [holds_at(holding(Diver1, Diver), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3638
% [object,depth,time]
% depth=% 0 ->
% Initiates(EnterWater(object),AtDepth(object,depth),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3640

 /*  [equals(Depth, 0)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(enterWater(Object),
                    atDepth(Object, Depth),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3640).
axiom(initiates(enterWater(Object), atDepth(Object, Depth), Time),
    [equals(Depth, 0)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3642
% [object,time]
% Terminates(Surface(object),UnderWater(object),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3644).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(surface(Object), underWater(Object), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3644).
axiom(terminates(surface(Object), underWater(Object), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3645
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3646).
% [diver,time]
% Terminates(Surface(diver),PositivelyBuoyant(diver),time).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(surface(Diver),
                     positivelyBuoyant(Diver),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3646).
axiom(terminates(surface(Diver), positivelyBuoyant(Diver), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3648
% [diver,time]
% Terminates(Surface(diver),NegativelyBuoyant(diver),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3650).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(surface(Diver),
                     negativelyBuoyant(Diver),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3650).
axiom(terminates(surface(Diver), negativelyBuoyant(Diver), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3651
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3652).
% [diver,time]
% Terminates(Surface(diver),NeutrallyBuoyant(diver),time).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(surface(Diver),
                     neutrallyBuoyant(Diver),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3652).
axiom(terminates(surface(Diver), neutrallyBuoyant(Diver), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3654
% [object,depth,time]
% Terminates(Surface(object),AtDepth(object,depth),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3656).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(surface(Object),
                     atDepth(Object, Depth),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3656).
axiom(terminates(surface(Object), atDepth(Object, Depth), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3657
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3658).
% [diver,time]
 % Happens(EnterWater(diver),time) ->
% HoldsAt(Vertical(diver),time).

 /*  happens(enterWater(Diver), Time) ->
       holds_at(vertical(Diver), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3658).

 /*  holds_at(vertical(Diver), Time) :-
       happens(enterWater(Diver), Time).
 */

 /*  [holds_at(metreqs(enterWater(Diver)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(enterWater(Diver), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3658).
axiom(requires(enterWater(Diver), Time),
    [holds_at(metreqs(enterWater(Diver)), Time)]).

 /*  [holds_at(vertical(Diver), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(enterWater(Diver)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3658).
axiom(holds_at(metreqs(enterWater(Diver)), Time),
    [holds_at(vertical(Diver), Time)]).

 /*  not(happens(enterWater(Diver), Time)) :-
       not(holds_at(vertical(Diver), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3658).

 /*  [holds_at(neg(vertical(Diver)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(enterWater(Diver), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3658).
axiom(not(happens(enterWater(Diver), Time)),
    [holds_at(neg(vertical(Diver)), Time)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3660
% fluent StandingOn(diver,boat)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3660).
fluent(standingOn(diver,boat)).
==> mpred_prop(standingOn(diver,boat),fluent).
==> meta_argtypes(standingOn(diver,boat)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3662
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3663).
% event StandOn(diver,boat)
event(standOn(diver,boat)).
==> mpred_prop(standOn(diver,boat),event).
==> meta_argtypes(standOn(diver,boat)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3664
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3665).
% [diver,boat,time]
% Terminates(EnterWater(diver),StandingOn(diver,boat),time).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(enterWater(Diver),
                     standingOn(Diver, Boat),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3665).
axiom(terminates(enterWater(Diver), standingOn(Diver, Boat), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3667
% [diver,boat,time]
% Initiates(StandOn(diver,boat),StandingOn(diver,boat),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3669).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(standOn(Diver, Boat),
                    standingOn(Diver, Boat),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3669).
axiom(initiates(standOn(Diver, Boat), standingOn(Diver, Boat), Time),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3670
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3671).
% fluent PositivelyBuoyant(diver)
fluent(positivelyBuoyant(diver)).
==> mpred_prop(positivelyBuoyant(diver),fluent).
==> meta_argtypes(positivelyBuoyant(diver)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3672
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3673).
% fluent NeutrallyBuoyant(diver)
fluent(neutrallyBuoyant(diver)).
==> mpred_prop(neutrallyBuoyant(diver),fluent).
==> meta_argtypes(neutrallyBuoyant(diver)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3674
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3675).
% fluent NegativelyBuoyant(diver)
fluent(negativelyBuoyant(diver)).
==> mpred_prop(negativelyBuoyant(diver),fluent).
==> meta_argtypes(negativelyBuoyant(diver)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3676
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3677).
% mutex PositivelyBuoyant, NeutrallyBuoyant, NegativelyBuoyant

 /*  fix_axiom_head(Time) ->
       
       [ mutex(positivelyBuoyant),
          (->),
         holds_at(mutex(positivelyBuoyant), Time)
       ].
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3677).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(mutex(positivelyBuoyant), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3677).
axiom(holds_at(mutex(positivelyBuoyant), Time),
    []).

 /*  fix_axiom_head(Time1) ->
       [mutex(neutrallyBuoyant), ->, holds_at(mutex(neutrallyBuoyant), Time1)].
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3677).

 /*  [] ->
       ta(Time1,
          tvs1=[Time1],
          tvs2=[Time1],
          holds_at(mutex(neutrallyBuoyant), Time1)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3677).
axiom(holds_at(mutex(neutrallyBuoyant), Time1),
    []).

 /*  fix_axiom_head(Time2) ->
       
       [ mutex(negativelyBuoyant),
          (->),
         holds_at(mutex(negativelyBuoyant), Time2)
       ].
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3677).

 /*  [] ->
       ta(Time2,
          tvs1=[Time2],
          tvs2=[Time2],
          holds_at(mutex(negativelyBuoyant), Time2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3677).
axiom(holds_at(mutex(negativelyBuoyant), Time2),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3678
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3679).
% [diver,time]
% HoldsAt(PositivelyBuoyant(diver),time) ->
% HoldsAt(UnderWater(diver),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3680

 /*  holds_at(positivelyBuoyant(Diver), Time) ->
       holds_at(underWater(Diver), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3679).

 /*  holds_at(underWater(Diver), Time) :-
       holds_at(positivelyBuoyant(Diver), Time).
 */

 /*  [holds_at(positivelyBuoyant(Diver), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(underWater(Diver), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3679).
axiom(holds_at(underWater(Diver), Time),
    [holds_at(positivelyBuoyant(Diver), Time)]).

 /*  not(holds_at(positivelyBuoyant(Diver), Time)) :-
       not(holds_at(underWater(Diver), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3679).

 /*  [holds_at(neg(underWater(Diver)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(positivelyBuoyant(Diver)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3679).
axiom(holds_at(neg(positivelyBuoyant(Diver)), Time),
    [holds_at(neg(underWater(Diver)), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3682
% [diver,time]
% HoldsAt(NeutrallyBuoyant(diver),time) ->
% HoldsAt(UnderWater(diver),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3684

 /*  holds_at(neutrallyBuoyant(Diver), Time) ->
       holds_at(underWater(Diver), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3684).

 /*  holds_at(underWater(Diver), Time) :-
       holds_at(neutrallyBuoyant(Diver), Time).
 */

 /*  [holds_at(neutrallyBuoyant(Diver), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(underWater(Diver), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3684).
axiom(holds_at(underWater(Diver), Time),
    [holds_at(neutrallyBuoyant(Diver), Time)]).

 /*  not(holds_at(neutrallyBuoyant(Diver), Time)) :-
       not(holds_at(underWater(Diver), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3684).

 /*  [holds_at(neg(underWater(Diver)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(neutrallyBuoyant(Diver)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3684).
axiom(holds_at(neg(neutrallyBuoyant(Diver)), Time),
    [holds_at(neg(underWater(Diver)), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3686
% [diver,time]
% HoldsAt(NegativelyBuoyant(diver),time) ->
% HoldsAt(UnderWater(diver),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3688

 /*  holds_at(negativelyBuoyant(Diver), Time) ->
       holds_at(underWater(Diver), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3688).

 /*  holds_at(underWater(Diver), Time) :-
       holds_at(negativelyBuoyant(Diver), Time).
 */

 /*  [holds_at(negativelyBuoyant(Diver), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(underWater(Diver), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3688).
axiom(holds_at(underWater(Diver), Time),
    [holds_at(negativelyBuoyant(Diver), Time)]).

 /*  not(holds_at(negativelyBuoyant(Diver), Time)) :-
       not(holds_at(underWater(Diver), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3688).

 /*  [holds_at(neg(underWater(Diver)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(negativelyBuoyant(Diver)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3688).
axiom(holds_at(neg(negativelyBuoyant(Diver)), Time),
    [holds_at(neg(underWater(Diver)), Time)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3690
% event PressDeflateButton(diver,bc)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3690).
event(pressDeflateButton(diver,bc)).
==> mpred_prop(pressDeflateButton(diver,bc),event).
==> meta_argtypes(pressDeflateButton(diver,bc)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3692
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3693).
% event PressDumpButton(diver,bc)
event(pressDumpButton(diver,bc)).
==> mpred_prop(pressDumpButton(diver,bc),event).
==> meta_argtypes(pressDumpButton(diver,bc)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3694
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3695).
% event PressInflateButton(diver,bc)
event(pressInflateButton(diver,bc)).
==> mpred_prop(pressInflateButton(diver,bc),event).
==> meta_argtypes(pressInflateButton(diver,bc)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3696
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3697).
% [diver,bc,time]
% Happens(PressDeflateButton(diver,bc),time) ->
% HoldsAt(Vertical(diver),time) &
% HoldsAt(UnderWater(bc),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3699
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3697).

 /*  happens(pressDeflateButton(Diver, Bc), Time) ->
       holds_at(vertical(Diver), Time),
       holds_at(underWater(Bc), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3697).

 /*  not(happens(pressDeflateButton(Diver, Bc), Time)) :-
       (   not(holds_at(vertical(Diver), Time))
       ;   not(holds_at(underWater(Bc), Time))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3697).

 /*  [(holds_at(neg(vertical(Diver)), Time);holds_at(neg(underWater(Bc)), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(pressDeflateButton(Diver, Bc), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3697).
axiom(not(happens(pressDeflateButton(Diver, Bc), Time)),
   
    [  (holds_at(neg(vertical(Diver)), Time);holds_at(neg(underWater(Bc)), Time))
    ]).

 /*  holds_at(vertical(Diver), Time) :-
       happens(pressDeflateButton(Diver, Bc), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3697).

 /*  [holds_at(metreqs(pressDeflateButton(Diver, Bc)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(pressDeflateButton(Diver, Bc), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3697).
axiom(requires(pressDeflateButton(Diver, Bc), Time),
    [holds_at(metreqs(pressDeflateButton(Diver, Bc)), Time)]).

 /*  [holds_at(vertical(Diver), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(pressDeflateButton(Diver, Bc)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3697).
axiom(holds_at(metreqs(pressDeflateButton(Diver, Bc)), Time),
    [holds_at(vertical(Diver), Time)]).

 /*  holds_at(underWater(Bc), Time) :-
       happens(pressDeflateButton(Diver, Bc), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3697).

 /*  [holds_at(metreqs(pressDeflateButton(Diver, Bc)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(pressDeflateButton(Diver, Bc), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3697).
axiom(requires(pressDeflateButton(Diver, Bc), Time),
    [holds_at(metreqs(pressDeflateButton(Diver, Bc)), Time)]).

 /*  [holds_at(underWater(Bc), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(pressDeflateButton(Diver, Bc)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3697).
axiom(holds_at(metreqs(pressDeflateButton(Diver, Bc)), Time),
    [holds_at(underWater(Bc), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3701
% [diver,bc,time]
% Happens(PressDumpButton(diver,bc),time) ->
% HoldsAt(Vertical(diver),time) &
% HoldsAt(UnderWater(bc),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3704
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3703).

 /*  happens(pressDumpButton(Diver, Bc), Time) ->
       holds_at(vertical(Diver), Time),
       holds_at(underWater(Bc), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3703).

 /*  not(happens(pressDumpButton(Diver, Bc), Time)) :-
       (   not(holds_at(vertical(Diver), Time))
       ;   not(holds_at(underWater(Bc), Time))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3703).

 /*  [(holds_at(neg(vertical(Diver)), Time);holds_at(neg(underWater(Bc)), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(pressDumpButton(Diver, Bc), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3703).
axiom(not(happens(pressDumpButton(Diver, Bc), Time)),
   
    [  (holds_at(neg(vertical(Diver)), Time);holds_at(neg(underWater(Bc)), Time))
    ]).

 /*  holds_at(vertical(Diver), Time) :-
       happens(pressDumpButton(Diver, Bc), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3703).

 /*  [holds_at(metreqs(pressDumpButton(Diver, Bc)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(pressDumpButton(Diver, Bc), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3703).
axiom(requires(pressDumpButton(Diver, Bc), Time),
    [holds_at(metreqs(pressDumpButton(Diver, Bc)), Time)]).

 /*  [holds_at(vertical(Diver), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(pressDumpButton(Diver, Bc)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3703).
axiom(holds_at(metreqs(pressDumpButton(Diver, Bc)), Time),
    [holds_at(vertical(Diver), Time)]).

 /*  holds_at(underWater(Bc), Time) :-
       happens(pressDumpButton(Diver, Bc), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3703).

 /*  [holds_at(metreqs(pressDumpButton(Diver, Bc)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(pressDumpButton(Diver, Bc), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3703).
axiom(requires(pressDumpButton(Diver, Bc), Time),
    [holds_at(metreqs(pressDumpButton(Diver, Bc)), Time)]).

 /*  [holds_at(underWater(Bc), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(pressDumpButton(Diver, Bc)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3703).
axiom(holds_at(metreqs(pressDumpButton(Diver, Bc)), Time),
    [holds_at(underWater(Bc), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3706
% [diver,bc,time]
 % Happens(PressDumpButton(diver,bc),time) ->
% HoldsAt(UncontrolledBuoyancy(diver),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3706).

 /*  happens(pressDumpButton(Diver, Bc), Time) ->
       holds_at(uncontrolledBuoyancy(Diver), Time).
 */

 /*  holds_at(uncontrolledBuoyancy(Diver), Time) :-
       happens(pressDumpButton(Diver, Bc), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3706).

 /*  [holds_at(metreqs(pressDumpButton(Diver, Bc)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(pressDumpButton(Diver, Bc), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3706).
axiom(requires(pressDumpButton(Diver, Bc), Time),
    [holds_at(metreqs(pressDumpButton(Diver, Bc)), Time)]).

 /*  [holds_at(uncontrolledBuoyancy(Diver), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(pressDumpButton(Diver, Bc)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3706).
axiom(holds_at(metreqs(pressDumpButton(Diver, Bc)), Time),
    [holds_at(uncontrolledBuoyancy(Diver), Time)]).

 /*  not(happens(pressDumpButton(Diver, Bc), Time)) :-
       not(holds_at(uncontrolledBuoyancy(Diver), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3706).

 /*  [holds_at(neg(uncontrolledBuoyancy(Diver)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(pressDumpButton(Diver, Bc), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3706).
axiom(not(happens(pressDumpButton(Diver, Bc), Time)),
    [holds_at(neg(uncontrolledBuoyancy(Diver)), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3709
% [diver,bc,time]
% HoldsAt(Wearing(diver,bc),time) ->
% Initiates(PressDeflateButton(diver,bc),NegativelyBuoyant(diver),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3711

 /*  [holds_at(wearing(Diver, Bc), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(pressDeflateButton(Diver, Bc),
                    negativelyBuoyant(Diver),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3711).
axiom(initiates(pressDeflateButton(Diver, Bc), negativelyBuoyant(Diver), Time),
    [holds_at(wearing(Diver, Bc), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3713
% [diver,bc,time]
% HoldsAt(Wearing(diver,bc),time) ->
% Terminates(PressDeflateButton(diver,bc),NeutrallyBuoyant(diver),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3715

 /*  [holds_at(wearing(Diver, Bc), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(pressDeflateButton(Diver, Bc),
                     neutrallyBuoyant(Diver),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3715).
axiom(terminates(pressDeflateButton(Diver, Bc), neutrallyBuoyant(Diver), Time),
    [holds_at(wearing(Diver, Bc), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3717
% [diver,bc,time]
% HoldsAt(Wearing(diver,bc),time) ->
% Terminates(PressDeflateButton(diver,bc),PositivelyBuoyant(diver),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3719

 /*  [holds_at(wearing(Diver, Bc), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(pressDeflateButton(Diver, Bc),
                     positivelyBuoyant(Diver),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3719).
axiom(terminates(pressDeflateButton(Diver, Bc), positivelyBuoyant(Diver), Time),
    [holds_at(wearing(Diver, Bc), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3721
% [diver,bc,time]
% HoldsAt(Wearing(diver,bc),time) ->
% Initiates(PressDumpButton(diver,bc),NegativelyBuoyant(diver),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3723

 /*  [holds_at(wearing(Diver, Bc), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(pressDumpButton(Diver, Bc),
                    negativelyBuoyant(Diver),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3723).
axiom(initiates(pressDumpButton(Diver, Bc), negativelyBuoyant(Diver), Time),
    [holds_at(wearing(Diver, Bc), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3725
% [diver,bc,time]
% HoldsAt(Wearing(diver,bc),time) ->
% Terminates(PressDumpButton(diver,bc),NeutrallyBuoyant(diver),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3727

 /*  [holds_at(wearing(Diver, Bc), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(pressDumpButton(Diver, Bc),
                     neutrallyBuoyant(Diver),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3727).
axiom(terminates(pressDumpButton(Diver, Bc), neutrallyBuoyant(Diver), Time),
    [holds_at(wearing(Diver, Bc), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3729
% [diver,bc,time]
% HoldsAt(Wearing(diver,bc),time) ->
% Terminates(PressDumpButton(diver,bc),PositivelyBuoyant(diver),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3731

 /*  [holds_at(wearing(Diver, Bc), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(pressDumpButton(Diver, Bc),
                     positivelyBuoyant(Diver),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3731).
axiom(terminates(pressDumpButton(Diver, Bc), positivelyBuoyant(Diver), Time),
    [holds_at(wearing(Diver, Bc), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3733
% [diver,bc,time]
% HoldsAt(Wearing(diver,bc),time) ->
% Initiates(PressInflateButton(diver,bc),NeutrallyBuoyant(diver),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3735

 /*  [holds_at(wearing(Diver, Bc), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(pressInflateButton(Diver, Bc),
                    neutrallyBuoyant(Diver),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3735).
axiom(initiates(pressInflateButton(Diver, Bc), neutrallyBuoyant(Diver), Time),
    [holds_at(wearing(Diver, Bc), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3737
% [diver,bc,time]
% HoldsAt(Wearing(diver,bc),time) ->
% Terminates(PressInflateButton(diver,bc),PositivelyBuoyant(diver),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3739

 /*  [holds_at(wearing(Diver, Bc), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(pressInflateButton(Diver, Bc),
                     positivelyBuoyant(Diver),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3739).
axiom(terminates(pressInflateButton(Diver, Bc), positivelyBuoyant(Diver), Time),
    [holds_at(wearing(Diver, Bc), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3741
% [diver,bc,time]
% HoldsAt(Wearing(diver,bc),time) ->
% Terminates(PressInflateButton(diver,bc),NegativelyBuoyant(diver),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3743

 /*  [holds_at(wearing(Diver, Bc), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(pressInflateButton(Diver, Bc),
                     negativelyBuoyant(Diver),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3743).
axiom(terminates(pressInflateButton(Diver, Bc), negativelyBuoyant(Diver), Time),
    [holds_at(wearing(Diver, Bc), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3745
% [diver,weight,time]
% HoldsAt(Wearing(diver,weight),time) ->
% Initiates(TakeOff(diver,weight),PositivelyBuoyant(diver),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3747

 /*  [holds_at(wearing(Diver, Weight), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(takeOff(Diver, Weight),
                    positivelyBuoyant(Diver),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3747).
axiom(initiates(takeOff(Diver, Weight), positivelyBuoyant(Diver), Time),
    [holds_at(wearing(Diver, Weight), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3749
% [diver,weight,time]
% HoldsAt(Wearing(diver,weight),time) ->
% Terminates(TakeOff(diver,weight),NegativelyBuoyant(diver),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3751

 /*  [holds_at(wearing(Diver, Weight), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(takeOff(Diver, Weight),
                     negativelyBuoyant(Diver),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3751).
axiom(terminates(takeOff(Diver, Weight), negativelyBuoyant(Diver), Time),
    [holds_at(wearing(Diver, Weight), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3753
% [diver,weight,time]
% HoldsAt(Wearing(diver,weight),time) ->
% Terminates(TakeOff(diver,weight),NeutrallyBuoyant(diver),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3755

 /*  [holds_at(wearing(Diver, Weight), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(takeOff(Diver, Weight),
                     neutrallyBuoyant(Diver),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3755).
axiom(terminates(takeOff(Diver, Weight), neutrallyBuoyant(Diver), Time),
    [holds_at(wearing(Diver, Weight), Time)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3757
% fluent UncontrolledBuoyancy(diver)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3757).
fluent(uncontrolledBuoyancy(diver)).
==> mpred_prop(uncontrolledBuoyancy(diver),fluent).
==> meta_argtypes(uncontrolledBuoyancy(diver)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3759
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3760).
% event LoseBuoyancyControl(diver)
event(loseBuoyancyControl(diver)).
==> mpred_prop(loseBuoyancyControl(diver),event).
==> meta_argtypes(loseBuoyancyControl(diver)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3761
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3762).
% predicate IsInexperiencedDiver(diver)
predicate(isInexperiencedDiver(diver)).
==> mpred_prop(isInexperiencedDiver(diver),predicate).
==> meta_argtypes(isInexperiencedDiver(diver)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3763
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3764).
% [diver,time]
% Happens(LoseBuoyancyControl(diver),time) ->
% IsInexperiencedDiver(diver).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3765

 /*  happens(loseBuoyancyControl(Diver), Time) ->
       isInexperiencedDiver(Diver).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3764).

 /*  isInexperiencedDiver(Diver) :-
       happens(loseBuoyancyControl(Diver), Time).
 */

 /*  [holds_at(metreqs(loseBuoyancyControl(Diver)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(loseBuoyancyControl(Diver), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3764).
axiom(requires(loseBuoyancyControl(Diver), Time),
    [holds_at(metreqs(loseBuoyancyControl(Diver)), Time)]).

 /*  [isInexperiencedDiver(Diver)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(loseBuoyancyControl(Diver)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3764).
axiom(holds_at(metreqs(loseBuoyancyControl(Diver)), Time),
    [isInexperiencedDiver(Diver)]).

 /*  not(happens(loseBuoyancyControl(Diver), Time)) :-
       not(isInexperiencedDiver(Diver)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3764).

 /*  [not(isInexperiencedDiver(Diver))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(loseBuoyancyControl(Diver), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3764).
axiom(not(happens(loseBuoyancyControl(Diver), Time)),
    [not(isInexperiencedDiver(Diver))]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3767
% [diver,time]
% Initiates(LoseBuoyancyControl(diver),UncontrolledBuoyancy(diver),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3769).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(loseBuoyancyControl(Diver),
                    uncontrolledBuoyancy(Diver),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3769).
axiom(initiates(loseBuoyancyControl(Diver), uncontrolledBuoyancy(Diver), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3770
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3771).
% [diver,time]
% Initiates(LoseBuoyancyControl(diver),PositivelyBuoyant(diver),time).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(loseBuoyancyControl(Diver),
                    positivelyBuoyant(Diver),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3771).
axiom(initiates(loseBuoyancyControl(Diver), positivelyBuoyant(Diver), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3773
% [diver,time]
% Terminates(LoseBuoyancyControl(diver),NegativelyBuoyant(diver),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3775).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(loseBuoyancyControl(Diver),
                     negativelyBuoyant(Diver),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3775).
axiom(terminates(loseBuoyancyControl(Diver), negativelyBuoyant(Diver), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3776
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3777).
% [diver,time]
% Terminates(LoseBuoyancyControl(diver),NeutrallyBuoyant(diver),time).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(loseBuoyancyControl(Diver),
                     neutrallyBuoyant(Diver),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3777).
axiom(terminates(loseBuoyancyControl(Diver), neutrallyBuoyant(Diver), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3779
%; determining fluent

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3780
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3781).
% fluent AscendDescendAmount(diver,depth)
fluent(ascendDescendAmount(diver,depth)).
==> mpred_prop(ascendDescendAmount(diver,depth),fluent).
==> meta_argtypes(ascendDescendAmount(diver,depth)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3781
% noninertial AscendDescendAmount
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3781).
==> noninertial(ascendDescendAmount).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3783
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3784).
% [diver,depth1,depth2,time]
% HoldsAt(AscendDescendAmount(diver,depth1),time) &
% HoldsAt(AscendDescendAmount(diver,depth2),time) ->
% depth1=depth2.
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3786
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3784).

 /*  holds_at(ascendDescendAmount(Diver, Depth1), Time), holds_at(ascendDescendAmount(Diver, Depth2), Time) ->
       equals(Depth1, Depth2).
 */

 /*  not(holds_at(ascendDescendAmount(Diver, Depth1), Time)) :-
       holds_at(ascendDescendAmount(Diver, Depth2), Time),
       not(equals(Depth1, Depth2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3784).

 /*  [holds_at(ascendDescendAmount(Diver, Depth2), Time), not(equals(Depth1, Depth2))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(ascendDescendAmount(Diver, Depth1)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3784).
axiom(holds_at(neg(ascendDescendAmount(Diver, Depth1)), Time),
   
    [ holds_at(ascendDescendAmount(Diver, Depth2), Time),
      not(equals(Depth1, Depth2))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3784).

 /*  not(holds_at(ascendDescendAmount(Diver, Depth2), Time)) :-
       holds_at(ascendDescendAmount(Diver, Depth1), Time),
       not(equals(Depth1, Depth2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3784).

 /*  [holds_at(ascendDescendAmount(Diver, Depth1), Time), not(equals(Depth1, Depth2))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(ascendDescendAmount(Diver, Depth2)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3784).
axiom(holds_at(neg(ascendDescendAmount(Diver, Depth2)), Time),
   
    [ holds_at(ascendDescendAmount(Diver, Depth1), Time),
      not(equals(Depth2, Depth1))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3788
% [diver,depth,time]
% Happens(Descend(diver,depth),time) ->
% HoldsAt(NegativelyBuoyant(diver),time) &
% ({depth1}
%  HoldsAt(AscendDescendAmount(diver,depth1),time) &
%  HoldsAt(AtDepth(diver,depth-depth1),time)).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3793
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3790).

 /*  happens(descend(Diver, Depth), Time) ->
       holds_at(negativelyBuoyant(Diver), Time),
       exists([Depth1],
               (holds_at(ascendDescendAmount(Diver, Depth1), Time), holds_at(atDepth(Diver, Depth-Depth1), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3790).

 /*  not(happens(descend(Diver, Depth), Time)) :-
       (   not(holds_at(negativelyBuoyant(Diver), Time))
       ;   not(holds_at(ascendDescendAmount(Diver, Depth1), Time))
       ;   not(holds_at(atDepth(Diver, Depth-Depth1),
                        Time))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3790).

 /*  [(holds_at(neg(negativelyBuoyant(Diver)), Time);holds_at(neg(ascendDescendAmount(Diver, Depth1)), Time);holds_at(neg(atDepth(Diver, Depth-Depth1)), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(descend(Diver, Depth), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3790).
axiom(not(happens(descend(Diver, Depth), Time)),
   
    [  (holds_at(neg(negativelyBuoyant(Diver)), Time);holds_at(neg(ascendDescendAmount(Diver, Depth1)), Time);holds_at(neg(atDepth(Diver, Depth-Depth1)), Time))
    ]).

 /*  holds_at(negativelyBuoyant(Diver), Time) :-
       happens(descend(Diver, Depth), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3790).

 /*  [holds_at(metreqs(descend(Diver, Depth)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(descend(Diver, Depth), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3790).
axiom(requires(descend(Diver, Depth), Time),
    [holds_at(metreqs(descend(Diver, Depth)), Time)]).

 /*  [holds_at(negativelyBuoyant(Diver), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(descend(Diver, Depth)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3790).
axiom(holds_at(metreqs(descend(Diver, Depth)), Time),
    [holds_at(negativelyBuoyant(Diver), Time)]).

 /*  holds_at(ascendDescendAmount(Diver, Depth1), Time) :-
       happens(descend(Diver, Depth), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3790).

 /*  [holds_at(metreqs(descend(Diver, Depth)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(descend(Diver, Depth), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3790).
axiom(requires(descend(Diver, Depth), Time),
    [holds_at(metreqs(descend(Diver, Depth)), Time)]).

 /*  [holds_at(ascendDescendAmount(Diver, Depth1), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(descend(Diver, Depth)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3790).
axiom(holds_at(metreqs(descend(Diver, Depth)), Time),
    [holds_at(ascendDescendAmount(Diver, Depth1), Time)]).

 /*  holds_at(atDepth(Diver, Depth-Depth1), Time) :-
       happens(descend(Diver, Depth), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3790).

 /*  [holds_at(metreqs(descend(Diver, Depth)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(descend(Diver, Depth), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3790).
axiom(requires(descend(Diver, Depth), Time),
    [holds_at(metreqs(descend(Diver, Depth)), Time)]).

 /*  [holds_at(atDepth(Diver, Depth-Depth1), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(descend(Diver, Depth)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3790).
axiom(holds_at(metreqs(descend(Diver, Depth)), Time),
    [holds_at(atDepth(Diver, Depth-Depth1), Time)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3795
% event KickUp(diver)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3795).
event(kickUp(diver)).
==> mpred_prop(kickUp(diver),event).
==> meta_argtypes(kickUp(diver)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3797
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3798).
% [diver,depth,time]
% Happens(Ascend(diver,depth),time) ->
% (HoldsAt(PositivelyBuoyant(diver),time) |
%  (HoldsAt(NeutrallyBuoyant(diver),time) & Happens(KickUp(diver),time))) &
% ({depth1}
%  HoldsAt(AscendDescendAmount(diver,depth1),time) &
%  HoldsAt(AtDepth(diver,depth+depth1),time)).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3803
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3798).

 /*  happens(ascend(Diver, Depth), Time) ->
       (   holds_at(positivelyBuoyant(Diver), Time)
       ;   holds_at(neutrallyBuoyant(Diver), Time),
           happens(kickUp(Diver), Time)
       ),
       exists([Depth1],
               (holds_at(ascendDescendAmount(Diver, Depth1), Time), holds_at(atDepth(Diver, Depth+Depth1), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3798).

 /*  not(happens(ascend(Diver, Depth), Time)) :-
       (   not(holds_at(positivelyBuoyant(Diver), Time)),
           (   not(holds_at(neutrallyBuoyant(Diver), Time))
           ;   not(happens(kickUp(Diver), Time))
           )
       ;   not(holds_at(ascendDescendAmount(Diver, Depth1), Time))
       ;   not(holds_at(atDepth(Diver, Depth+Depth1),
                        Time))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3798).

 /*  [(holds_at(neg(positivelyBuoyant(Diver)), Time), (holds_at(neg(neutrallyBuoyant(Diver)), Time);not(happens(kickUp(Diver), Time)));holds_at(neg(ascendDescendAmount(Diver, Depth1)), Time);holds_at(neg(atDepth(Diver, Depth+Depth1)), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(ascend(Diver, Depth), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3798).
axiom(not(happens(ascend(Diver, Depth), Time)),
   
    [  (holds_at(neg(positivelyBuoyant(Diver)), Time), (holds_at(neg(neutrallyBuoyant(Diver)), Time);not(happens(kickUp(Diver), Time)));holds_at(neg(ascendDescendAmount(Diver, Depth1)), Time);holds_at(neg(atDepth(Diver, Depth+Depth1)), Time))
    ]).

 /*  holds_at(positivelyBuoyant(Diver), Time) :-
       (   not(holds_at(neutrallyBuoyant(Diver), Time))
       ;   not(happens(kickUp(Diver), Time))
       ),
       happens(ascend(Diver, Depth), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3798).

 /*  [(holds_at(neg(neutrallyBuoyant(Diver)), Time);not(happens(kickUp(Diver), Time))), happens(ascend(Diver, Depth), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(positivelyBuoyant(Diver), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3798).
axiom(holds_at(positivelyBuoyant(Diver), Time),
   
    [  (holds_at(neg(neutrallyBuoyant(Diver)), Time);not(happens(kickUp(Diver), Time))),
      happens(ascend(Diver, Depth), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3798).

 /*  holds_at(neutrallyBuoyant(Diver), Time) :-
       not(holds_at(positivelyBuoyant(Diver), Time)),
       happens(ascend(Diver, Depth), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3798).

 /*  [holds_at(neg(positivelyBuoyant(Diver)), Time), happens(ascend(Diver, Depth), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neutrallyBuoyant(Diver), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3798).
axiom(holds_at(neutrallyBuoyant(Diver), Time),
   
    [ holds_at(neg(positivelyBuoyant(Diver)), Time),
      happens(ascend(Diver, Depth), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3798).

 /*  happens(kickUp(Diver), Time) :-
       not(holds_at(positivelyBuoyant(Diver), Time)),
       happens(ascend(Diver, Depth), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3798).

 /*  [holds_at(neg(positivelyBuoyant(Diver)), Time), happens(ascend(Diver, Depth), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(kickUp(Diver), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3798).
axiom(happens(kickUp(Diver), Time),
   
    [ holds_at(neg(positivelyBuoyant(Diver)), Time),
      happens(ascend(Diver, Depth), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3798).

 /*  holds_at(ascendDescendAmount(Diver, Depth1), Time) :-
       happens(ascend(Diver, Depth), Time).
 */

 /*  [holds_at(metreqs(ascend(Diver, Depth)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(ascend(Diver, Depth), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3798).
axiom(requires(ascend(Diver, Depth), Time),
    [holds_at(metreqs(ascend(Diver, Depth)), Time)]).

 /*  [holds_at(ascendDescendAmount(Diver, Depth1), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(ascend(Diver, Depth)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3798).
axiom(holds_at(metreqs(ascend(Diver, Depth)), Time),
    [holds_at(ascendDescendAmount(Diver, Depth1), Time)]).

 /*  holds_at(atDepth(Diver, Depth+Depth1), Time) :-
       happens(ascend(Diver, Depth), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3798).

 /*  [holds_at(metreqs(ascend(Diver, Depth)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(ascend(Diver, Depth), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3798).
axiom(requires(ascend(Diver, Depth), Time),
    [holds_at(metreqs(ascend(Diver, Depth)), Time)]).

 /*  [holds_at(atDepth(Diver, Depth+Depth1), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(ascend(Diver, Depth)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3798).
axiom(holds_at(metreqs(ascend(Diver, Depth)), Time),
    [holds_at(atDepth(Diver, Depth+Depth1), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3805
% [diver,time]
% Happens(KickUp(diver),time) ->
% HoldsAt(Vertical(diver),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3807

 /*  happens(kickUp(Diver), Time) ->
       holds_at(vertical(Diver), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3807).

 /*  holds_at(vertical(Diver), Time) :-
       happens(kickUp(Diver), Time).
 */

 /*  [holds_at(metreqs(kickUp(Diver)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(kickUp(Diver), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3807).
axiom(requires(kickUp(Diver), Time),
    [holds_at(metreqs(kickUp(Diver)), Time)]).

 /*  [holds_at(vertical(Diver), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(kickUp(Diver)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3807).
axiom(holds_at(metreqs(kickUp(Diver)), Time),
    [holds_at(vertical(Diver), Time)]).

 /*  not(happens(kickUp(Diver), Time)) :-
       not(holds_at(vertical(Diver), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3807).

 /*  [holds_at(neg(vertical(Diver)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(kickUp(Diver), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3807).
axiom(not(happens(kickUp(Diver), Time)),
    [holds_at(neg(vertical(Diver)), Time)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3809
% event SwimAround(diver)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3809).
event(swimAround(diver)).
==> mpred_prop(swimAround(diver),event).
==> meta_argtypes(swimAround(diver)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3811
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3812).
% [diver,time]
% Happens(SwimAround(diver),time) ->
% HoldsAt(HorizontalDown(diver),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3813

 /*  happens(swimAround(Diver), Time) ->
       holds_at(horizontalDown(Diver), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3812).

 /*  holds_at(horizontalDown(Diver), Time) :-
       happens(swimAround(Diver), Time).
 */

 /*  [holds_at(metreqs(swimAround(Diver)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(swimAround(Diver), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3812).
axiom(requires(swimAround(Diver), Time),
    [holds_at(metreqs(swimAround(Diver)), Time)]).

 /*  [holds_at(horizontalDown(Diver), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(swimAround(Diver)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3812).
axiom(holds_at(metreqs(swimAround(Diver)), Time),
    [holds_at(horizontalDown(Diver), Time)]).

 /*  not(happens(swimAround(Diver), Time)) :-
       not(holds_at(horizontalDown(Diver), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3812).

 /*  [holds_at(neg(horizontalDown(Diver)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(swimAround(Diver), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3812).
axiom(not(happens(swimAround(Diver), Time)),
    [holds_at(neg(horizontalDown(Diver)), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3815
%; signaling

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3817
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3818).
% event SignalDescend(diver,diver)
event(signalDescend(diver,diver)).
==> mpred_prop(signalDescend(diver,diver),event).
==> meta_argtypes(signalDescend(diver,diver)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3819
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3820).
% event SignalOutOfTime(diver,diver)
event(signalOutOfTime(diver,diver)).
==> mpred_prop(signalOutOfTime(diver,diver),event).
==> meta_argtypes(signalOutOfTime(diver,diver)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3821
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3822).
% event SignalAscend(diver,diver)
event(signalAscend(diver,diver)).
==> mpred_prop(signalAscend(diver,diver),event).
==> meta_argtypes(signalAscend(diver,diver)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3823
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3824).
%;[diver1,diver2,time]
%;Happens(SignalAscend(diver1,diver2),time) ->
%;Happens(SignalOutOfTime(diver1,diver2),time-1).
%;[diver1,diver2,time]
%;Happens(SignalDescend(diver1,diver2),time) ->
%;HoldsAt(See(diver1,diver2),time) &
%;HoldsAt(See(diver2,diver1),time).
%;[diver1,diver2,time]
%;Happens(SignalOutOfTime(diver1,diver2),time) ->
%;HoldsAt(See(diver1,diver2),time) &
%;HoldsAt(See(diver2,diver1),time).
%;[diver1,diver2,time]
%;Happens(SignalAscend(diver1,diver2),time) ->
%;HoldsAt(See(diver1,diver2),time) &
%;HoldsAt(See(diver2,diver1),time).
%;event LookAt(agent,object)
%;fluent See(agent,object)
%;[agent,object,time]
%;Initiates(LookAt(agent,object),See(agent,object),time).
%;[agent,object1,object2,time]
%;object1!=object2 ->
%;Terminates(LookAt(agent,object1),
%;           See(agent,object2),
%;           time).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3855
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3856).
% event Descend1(diver)
event(descend1(diver)).
==> mpred_prop(descend1(diver),event).
==> meta_argtypes(descend1(diver)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3857
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3858).
% event Ascend1(diver)
event(ascend1(diver)).
==> mpred_prop(ascend1(diver),event).
==> meta_argtypes(ascend1(diver)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3859
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3860).
%;[diver,object,time]
%;Terminates(Descend1(diver),See(diver,object),time).
%;[diver,object,time]
%;Terminates(Ascend1(diver),See(diver,object),time).
%;[diver,object,time]
%;Terminates(RotateYaw(diver),See(diver,object),time).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3868
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3869).
% event RapidAscendToSurface(diver)
event(rapidAscendToSurface(diver)).
==> mpred_prop(rapidAscendToSurface(diver),event).
==> meta_argtypes(rapidAscendToSurface(diver)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3870
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3871).
% [diver,time]
% Happens(Descend1(diver),time) <->
% ({depth} Happens(Descend(diver,depth),time)).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3872

 /*  happens(descend1(Diver), Time) <->
       exists([Depth], happens(descend(Diver, Depth), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3871).

 /*  [happens, descend1] <->
       [exists, happens, descend].
 */

 /*  happens(descend1(Diver), Time) ->
       exists([Depth], happens(descend(Diver, Depth), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3871).

 /*  happens(descend(Diver, Depth), Time) :-
       happens(descend1(Diver), Time).
 */

 /*  [happens(descend1(Diver), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(descend(Diver, Depth), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3871).
axiom(happens(descend(Diver, Depth), Time),
    [happens(descend1(Diver), Time)]).

 /*  not(happens(descend1(Diver), Time)) :-
       not(happens(descend(Diver, Depth), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3871).

 /*  [not(happens(descend(Diver, Depth), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(descend1(Diver), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3871).
axiom(not(happens(descend1(Diver), Time)),
    [not(happens(descend(Diver, Depth), Time))]).

 /*  exists([Depth], happens(descend(Diver, Depth), Time)) ->
       happens(descend1(Diver), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3871).

 /*  happens(descend1(Diver), Time) :-
       happens(descend(Diver, Depth), Time).
 */

 /*  [happens(descend(Diver, Depth), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(descend1(Diver), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3871).
axiom(happens(descend1(Diver), Time),
    [happens(descend(Diver, Depth), Time)]).

 /*  not(happens(descend(Diver, Depth), Time)) :-
       not(happens(descend1(Diver), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3871).

 /*  [not(happens(descend1(Diver), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(descend(Diver, Depth), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3871).
axiom(not(happens(descend(Diver, Depth), Time)),
    [not(happens(descend1(Diver), Time))]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3874
% [diver,time]
% Happens(Ascend1(diver),time) <->
% ({depth} Happens(Ascend(diver,depth),time)).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3876

 /*  happens(ascend1(Diver), Time) <->
       exists([Depth], happens(ascend(Diver, Depth), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3876).

 /*  [happens, ascend1] <->
       [exists, happens, ascend].
 */

 /*  happens(ascend1(Diver), Time) ->
       exists([Depth], happens(ascend(Diver, Depth), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3876).

 /*  happens(ascend(Diver, Depth), Time) :-
       happens(ascend1(Diver), Time).
 */

 /*  [happens(ascend1(Diver), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(ascend(Diver, Depth), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3876).
axiom(happens(ascend(Diver, Depth), Time),
    [happens(ascend1(Diver), Time)]).

 /*  not(happens(ascend1(Diver), Time)) :-
       not(happens(ascend(Diver, Depth), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3876).

 /*  [not(happens(ascend(Diver, Depth), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(ascend1(Diver), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3876).
axiom(not(happens(ascend1(Diver), Time)),
    [not(happens(ascend(Diver, Depth), Time))]).

 /*  exists([Depth], happens(ascend(Diver, Depth), Time)) ->
       happens(ascend1(Diver), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3876).

 /*  happens(ascend1(Diver), Time) :-
       happens(ascend(Diver, Depth), Time).
 */

 /*  [happens(ascend(Diver, Depth), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(ascend1(Diver), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3876).
axiom(happens(ascend1(Diver), Time),
    [happens(ascend(Diver, Depth), Time)]).

 /*  not(happens(ascend(Diver, Depth), Time)) :-
       not(happens(ascend1(Diver), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3876).

 /*  [not(happens(ascend1(Diver), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(ascend(Diver, Depth), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3876).
axiom(not(happens(ascend(Diver, Depth), Time)),
    [not(happens(ascend1(Diver), Time))]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3878
% [diver,time]
% Happens(RapidAscendToSurface(diver),time) ->
% Happens(Ascend(diver,0),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3880

 /*  happens(rapidAscendToSurface(Diver), Time) ->
       happens(ascend(Diver, 0), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3880).

 /*  happens(ascend(Diver, 0), Time) :-
       happens(rapidAscendToSurface(Diver), Time).
 */

 /*  [happens(rapidAscendToSurface(Diver), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(ascend(Diver, 0), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3880).
axiom(happens(ascend(Diver, 0), Time),
    [happens(rapidAscendToSurface(Diver), Time)]).

 /*  not(happens(rapidAscendToSurface(Diver), Time)) :-
       not(happens(ascend(Diver, 0), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3880).

 /*  [not(happens(ascend(Diver, 0), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(rapidAscendToSurface(Diver), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3880).
axiom(not(happens(rapidAscendToSurface(Diver), Time)),
    [not(happens(ascend(Diver, 0), Time))]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3882
% event AscendLine(diver,line)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3882).
event(ascendLine(diver,line)).
==> mpred_prop(ascendLine(diver,line),event).
==> meta_argtypes(ascendLine(diver,line)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3884
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3885).
% [diver,line,time]
% Happens(AscendLine(diver,line),time) ->
% Happens(Ascend1(diver),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3886

 /*  happens(ascendLine(Diver, Line), Time) ->
       happens(ascend1(Diver), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3885).

 /*  happens(ascend1(Diver), Time) :-
       happens(ascendLine(Diver, Line), Time).
 */

 /*  [happens(ascendLine(Diver, Line), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(ascend1(Diver), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3885).
axiom(happens(ascend1(Diver), Time),
    [happens(ascendLine(Diver, Line), Time)]).

 /*  not(happens(ascendLine(Diver, Line), Time)) :-
       not(happens(ascend1(Diver), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3885).

 /*  [not(happens(ascend1(Diver), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(ascendLine(Diver, Line), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3885).
axiom(not(happens(ascendLine(Diver, Line), Time)),
    [not(happens(ascend1(Diver), Time))]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3888
% fluent Disoriented(diver)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3888).
fluent(disoriented(diver)).
==> mpred_prop(disoriented(diver),fluent).
==> meta_argtypes(disoriented(diver)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3890
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3891).
% event BecomeDisoriented(diver)
event(becomeDisoriented(diver)).
==> mpred_prop(becomeDisoriented(diver),event).
==> meta_argtypes(becomeDisoriented(diver)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3892
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3893).
% event BecomeReoriented(diver)
event(becomeReoriented(diver)).
==> mpred_prop(becomeReoriented(diver),event).
==> meta_argtypes(becomeReoriented(diver)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3894
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3895).
% [diver,time]
% Initiates(BecomeDisoriented(diver),Disoriented(diver),time).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(becomeDisoriented(Diver),
                    disoriented(Diver),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3895).
axiom(initiates(becomeDisoriented(Diver), disoriented(Diver), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3897
% [diver,time]
% Terminates(BecomeReoriented(diver),Disoriented(diver),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3899).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(becomeReoriented(Diver),
                     disoriented(Diver),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3899).
axiom(terminates(becomeReoriented(Diver), disoriented(Diver), Time),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3900
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3901).
% fluent DisturbedSilt()
fluent(disturbedSilt).
==> mpred_prop(disturbedSilt,fluent).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3902
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3903).
% event DisturbSilt(diver)
event(disturbSilt(diver)).
==> mpred_prop(disturbSilt(diver),event).
==> meta_argtypes(disturbSilt(diver)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3904
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3905).
% [diver,time]
% Initiates(DisturbSilt(diver),DisturbedSilt(),time).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(disturbSilt(Diver), disturbedSilt, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3905).
axiom(initiates(disturbSilt(Diver), disturbedSilt, Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3907
% [diver,time]
% Happens(BecomeDisoriented(diver),time) ->
% (!HoldsAt(DisturbedSilt(),time-1) &
%  HoldsAt(DisturbedSilt(),time)).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3910
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3909).

 /*  happens(becomeDisoriented(Diver), Time) ->
       holds_at(neg(disturbedSilt), Time-1),
       holds_at(disturbedSilt, Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3909).

 /*  not(happens(becomeDisoriented(Diver), Time)) :-
       (   not(holds_at(neg(disturbedSilt), Time-1))
       ;   not(holds_at(disturbedSilt, Time))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3909).

 /*  [(holds_at(disturbedSilt, Time2);holds_at(neg(disturbedSilt), Time)), b(Time2, Time), ignore(Time-1==Time2)] ->
       ta(Time,
          tvs1=[Time, Time-1],
          tvs2=[Time, Time2],
          not(happens(becomeDisoriented(Diver), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3909).
axiom(not(happens(becomeDisoriented(Diver), Time)),
   
    [  (holds_at(disturbedSilt, Time2);holds_at(neg(disturbedSilt), Time)),
      b(Time2, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3909).

 /*  holds_at(neg(disturbedSilt), Time-1) :-
       happens(becomeDisoriented(Diver), Time).
 */

 /*  [holds_at(metreqs(becomeDisoriented(Diver)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(becomeDisoriented(Diver), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3909).
axiom(requires(becomeDisoriented(Diver), Time),
    [holds_at(metreqs(becomeDisoriented(Diver)), Time)]).

 /*  [holds_at(neg(disturbedSilt), Time4), b(Time4, Time), ignore(Time-1==Time4)] ->
       ta(Time,
          tvs1=[Time, Time-1],
          tvs2=[Time, Time4],
          holds_at(metreqs(becomeDisoriented(Diver)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3909).
axiom(holds_at(metreqs(becomeDisoriented(Diver)), Time),
    [holds_at(neg(disturbedSilt), Time4), b(Time4, Time)]).

 /*  holds_at(disturbedSilt, Time) :-
       happens(becomeDisoriented(Diver), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3909).

 /*  [holds_at(metreqs(becomeDisoriented(Diver)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(becomeDisoriented(Diver), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3909).
axiom(requires(becomeDisoriented(Diver), Time),
    [holds_at(metreqs(becomeDisoriented(Diver)), Time)]).

 /*  [holds_at(disturbedSilt, Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(becomeDisoriented(Diver)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3909).
axiom(holds_at(metreqs(becomeDisoriented(Diver)), Time),
    [holds_at(disturbedSilt, Time)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3912
% event Panic(diver)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3912).
event(panic(diver)).
==> mpred_prop(panic(diver),event).
==> meta_argtypes(panic(diver)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3914
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3915).
% [diver,time]
 % Happens(Panic(diver),time) ->
% HoldsAt(Disoriented(diver),time) |
% HoldsAt(UncontrolledBuoyancy(diver),time) |
% ({equipment} Happens(Lose(diver,equipment),time-1)) |
% Happens(Vomit(diver),time-1).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3918
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3915).

 /*  happens(panic(Diver), Time) ->
       (   holds_at(disoriented(Diver), Time)
       ;   holds_at(uncontrolledBuoyancy(Diver), Time)
       ;   exists([Equipment],
                  happens(lose(Diver, Equipment), Time-1))
       ;   happens(vomit(Diver), Time-1)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3915).

 /*  holds_at(disoriented(Diver), Time) :-
       ( not(holds_at(uncontrolledBuoyancy(Diver), Time)),
         not(happens(lose(Diver, Equipment), Time-1)),
         not(happens(vomit(Diver), Time-1))
       ),
       happens(panic(Diver), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3915).

 /*  [holds_at(neg(uncontrolledBuoyancy(Diver)), Time), not(happens(lose(Diver, Equipment), Maptime)), not(happens(vomit(Diver), Maptime)), happens(panic(Diver), Time), b(Maptime, Time), ignore(Time-1==Maptime)] ->
       ta(Time,
          tvs1=[Time, Time-1],
          tvs2=[Time, Maptime],
          holds_at(disoriented(Diver), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3915).
axiom(holds_at(disoriented(Diver), Time),
   
    [ holds_at(neg(uncontrolledBuoyancy(Diver)), Time),
      not(happens(lose(Diver, Equipment), Maptime)),
      not(happens(vomit(Diver), Maptime)),
      happens(panic(Diver), Time),
      b(Maptime, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3915).

 /*  holds_at(uncontrolledBuoyancy(Diver), Time) :-
       ( not(happens(lose(Diver, Equipment), Time-1)),
         not(happens(vomit(Diver), Time-1))
       ),
       not(holds_at(disoriented(Diver), Time)),
       happens(panic(Diver), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3915).

 /*  [not(happens(lose(Diver, Equipment), Maptime4)), not(happens(vomit(Diver), Maptime4)), holds_at(neg(disoriented(Diver)), Time), happens(panic(Diver), Time), b(Maptime4, Time), ignore(Time-1==Maptime4)] ->
       ta(Time,
          tvs1=[Time, Time-1],
          tvs2=[Time, Maptime4],
          holds_at(uncontrolledBuoyancy(Diver), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3915).
axiom(holds_at(uncontrolledBuoyancy(Diver), Time),
   
    [ not(happens(lose(Diver, Equipment), Maptime4)),
      not(happens(vomit(Diver), Maptime4)),
      holds_at(neg(disoriented(Diver)), Time),
      happens(panic(Diver), Time),
      b(Maptime4, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3915).

 /*  happens(lose(Diver, Equipment), Time-1) :-
       not(happens(vomit(Diver), Time-1)),
       not(holds_at(uncontrolledBuoyancy(Diver), Time)),
       not(holds_at(disoriented(Diver), Time)),
       happens(panic(Diver), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3915).

 /*  [not(happens(vomit(Diver), Maptime5)), holds_at(neg(uncontrolledBuoyancy(Diver)), Time), holds_at(neg(disoriented(Diver)), Time), happens(panic(Diver), Time), b(Maptime5, Time), ignore(Time-1==Maptime5)] ->
       ta(Time,
          tvs1=[Time, Time-1],
          tvs2=[Time, Maptime5],
          happens(lose(Diver, Equipment), Maptime5)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3915).
axiom(happens(lose(Diver, Equipment), Maptime5),
   
    [ not(happens(vomit(Diver), Maptime5)),
      holds_at(neg(uncontrolledBuoyancy(Diver)), Time),
      holds_at(neg(disoriented(Diver)), Time),
      happens(panic(Diver), Time),
      b(Maptime5, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3915).

 /*  happens(vomit(Diver), Time-1) :-
       not(happens(lose(Diver, Equipment), Time-1)),
       not(holds_at(uncontrolledBuoyancy(Diver), Time)),
       not(holds_at(disoriented(Diver), Time)),
       happens(panic(Diver), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3915).

 /*  [not(happens(lose(Diver, Equipment), Maptime6)), holds_at(neg(uncontrolledBuoyancy(Diver)), Time), holds_at(neg(disoriented(Diver)), Time), happens(panic(Diver), Time), b(Maptime6, Time), ignore(Time-1==Maptime6)] ->
       ta(Time,
          tvs1=[Time, Time-1],
          tvs2=[Time, Maptime6],
          happens(vomit(Diver), Maptime6)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3915).
axiom(happens(vomit(Diver), Maptime6),
   
    [ not(happens(lose(Diver, Equipment), Maptime6)),
      holds_at(neg(uncontrolledBuoyancy(Diver)), Time),
      holds_at(neg(disoriented(Diver)), Time),
      happens(panic(Diver), Time),
      b(Maptime6, Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3915).

 /*  not(happens(panic(Diver), Time)) :-
       not(holds_at(disoriented(Diver), Time)),
       not(holds_at(uncontrolledBuoyancy(Diver), Time)),
       not(happens(lose(Diver, Equipment), Time-1)),
       not(happens(vomit(Diver), Time-1)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3915).

 /*  [holds_at(neg(disoriented(Diver)), Time), holds_at(neg(uncontrolledBuoyancy(Diver)), Time), not(happens(lose(Diver, Equipment), Maptime7)), not(happens(vomit(Diver), Maptime7)), b(Maptime7, Time), ignore(Time-1==Maptime7)] ->
       ta(Time,
          tvs1=[Time, Time-1],
          tvs2=[Time, Maptime7],
          not(happens(panic(Diver), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3915).
axiom(not(happens(panic(Diver), Time)),
   
    [ holds_at(neg(disoriented(Diver)), Time),
      holds_at(neg(uncontrolledBuoyancy(Diver)), Time),
      not(happens(lose(Diver, Equipment), Maptime7)),
      not(happens(vomit(Diver), Maptime7)),
      b(Maptime7, Time)
    ]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3920
% event Vomit(diver)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3920).
event(vomit(diver)).
==> mpred_prop(vomit(diver),event).
==> meta_argtypes(vomit(diver)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3922
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3923).
%; conditions

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3924
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3925).
% fluent Unconscious(diver)
fluent(unconscious(diver)).
==> mpred_prop(unconscious(diver),fluent).
==> meta_argtypes(unconscious(diver)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3926
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3927).
% event GoUnconscious(diver)
event(goUnconscious(diver)).
==> mpred_prop(goUnconscious(diver),event).
==> meta_argtypes(goUnconscious(diver)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3928
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3929).
% event RegainConsciousness(diver)
event(regainConsciousness(diver)).
==> mpred_prop(regainConsciousness(diver),event).
==> meta_argtypes(regainConsciousness(diver)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3930
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3931).
% [diver,time]
% Initiates(GoUnconscious(diver),Unconscious(diver),time).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(goUnconscious(Diver),
                    unconscious(Diver),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3931).
axiom(initiates(goUnconscious(Diver), unconscious(Diver), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3933
% [diver,time]
% Terminates(RegainConsciousness(diver),Unconscious(diver),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3935).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(regainConsciousness(Diver),
                     unconscious(Diver),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3935).
axiom(terminates(regainConsciousness(Diver), unconscious(Diver), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3936
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3937).
% [diver,time]
% Happens(GoUnconscious(diver),time) ->
% Happens(RapidAscendToSurface(diver),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3938

 /*  happens(goUnconscious(Diver), Time) ->
       happens(rapidAscendToSurface(Diver), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3937).

 /*  happens(rapidAscendToSurface(Diver), Time) :-
       happens(goUnconscious(Diver), Time).
 */

 /*  [happens(goUnconscious(Diver), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(rapidAscendToSurface(Diver), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3937).
axiom(happens(rapidAscendToSurface(Diver), Time),
    [happens(goUnconscious(Diver), Time)]).

 /*  not(happens(goUnconscious(Diver), Time)) :-
       not(happens(rapidAscendToSurface(Diver), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3937).

 /*  [not(happens(rapidAscendToSurface(Diver), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(goUnconscious(Diver), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3937).
axiom(not(happens(goUnconscious(Diver), Time)),
    [not(happens(rapidAscendToSurface(Diver), Time))]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3940
% fluent HasEarPain(diver)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3940).
fluent(hasEarPain(diver)).
==> mpred_prop(hasEarPain(diver),fluent).
==> meta_argtypes(hasEarPain(diver)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3942
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3943).
% event StartEarPain(diver)
event(startEarPain(diver)).
==> mpred_prop(startEarPain(diver),event).
==> meta_argtypes(startEarPain(diver)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3944
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3945).
% [diver,time]
 % Initiates(StartEarPain(diver),HasEarPain(diver),time).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(startEarPain(Diver), hasEarPain(Diver), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3945).
axiom(initiates(startEarPain(Diver), hasEarPain(Diver), Time),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3946
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3947).
% fluent HasRupturedEardrum(diver)
fluent(hasRupturedEardrum(diver)).
==> mpred_prop(hasRupturedEardrum(diver),fluent).
==> meta_argtypes(hasRupturedEardrum(diver)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3948
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3949).
% event RuptureEardrum(diver)
event(ruptureEardrum(diver)).
==> mpred_prop(ruptureEardrum(diver),event).
==> meta_argtypes(ruptureEardrum(diver)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3950
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3951).
% [diver,time]
% Initiates(RuptureEardrum(diver),HasRupturedEardrum(diver),time).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(ruptureEardrum(Diver),
                    hasRupturedEardrum(Diver),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3951).
axiom(initiates(ruptureEardrum(Diver), hasRupturedEardrum(Diver), Time),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3952
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3953).
% fluent ConditionOK(diver)
fluent(conditionOK(diver)).
==> mpred_prop(conditionOK(diver),fluent).
==> meta_argtypes(conditionOK(diver)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3954
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3955).
% fluent HasDecompressionIllness(diver)
fluent(hasDecompressionIllness(diver)).
==> mpred_prop(hasDecompressionIllness(diver),fluent).
==> meta_argtypes(hasDecompressionIllness(diver)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3956
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3957).
% event StartDecompressionIllness(diver)
event(startDecompressionIllness(diver)).
==> mpred_prop(startDecompressionIllness(diver),event).
==> meta_argtypes(startDecompressionIllness(diver)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3958
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3959).
% [diver,time]
% Initiates(StartDecompressionIllness(diver),
%           HasDecompressionIllness(diver),
%           time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3961
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3959).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(startDecompressionIllness(Diver),
                    hasDecompressionIllness(Diver),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3959).
axiom(initiates(startDecompressionIllness(Diver), hasDecompressionIllness(Diver), Time),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3963
% fluent SignalingDecompress(computer,diver)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3963).
fluent(signalingDecompress(computer,diver)).
==> mpred_prop(signalingDecompress(computer,diver),fluent).
==> meta_argtypes(signalingDecompress(computer,diver)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3965
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3966).
% fluent SignalingLowOnAir(computer,airtank,diver)
fluent(signalingLowOnAir(computer,airtank,diver)).
==> mpred_prop(signalingLowOnAir(computer,airtank,diver),fluent).
==> meta_argtypes(signalingLowOnAir(computer,airtank,diver)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3967
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3968).
% [computer,airtank,diver,time]
% HoldsAt(SignalingLowOnAir(computer,airtank,diver),time) ->
% HoldsAt(LowOnAir(airtank),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3969

 /*  holds_at(signalingLowOnAir(Computer, Airtank, Diver), Time) ->
       holds_at(lowOnAir(Airtank), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3968).

 /*  holds_at(lowOnAir(Airtank), Time) :-
       holds_at(signalingLowOnAir(Computer, Airtank, Diver),
                Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3968).

 /*  [holds_at(signalingLowOnAir(Computer, Airtank, Diver), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(lowOnAir(Airtank), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3968).
axiom(holds_at(lowOnAir(Airtank), Time),
   
    [ holds_at(signalingLowOnAir(Computer, Airtank, Diver),
               Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3968).

 /*  not(holds_at(signalingLowOnAir(Computer, Airtank, Diver), Time)) :-
       not(holds_at(lowOnAir(Airtank), Time)).
 */

 /*  [holds_at(neg(lowOnAir(Airtank)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(signalingLowOnAir(Computer,
                                         Airtank,
                                         Diver)),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3968).
axiom(holds_at(neg(signalingLowOnAir(Computer, Airtank, Diver)), Time),
    [holds_at(neg(lowOnAir(Airtank)), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3971
% [computer,diver,time]
% HoldsAt(SignalingDecompress(computer,diver),time) ->
% !{time1} time1<time & Happens(Decompress(diver),time1).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3973

 /*  holds_at(signalingDecompress(Computer, Diver), Time) ->
       not(exists([Time1],
                   (Time1<Time, happens(decompress(Diver), Time1)))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3973).

 /*  not(happens(decompress(Diver), Time1)) :-
       comparison(Time1, Time, <),
       holds_at(signalingDecompress(Computer, Diver), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3973).

 /*  [comparison(Time1, Time, <), holds_at(signalingDecompress(Computer, Diver), Time)] ->
       ta(Time1,
          tvs1=[Time, Time1],
          tvs2=[Time, Time1],
          not(happens(decompress(Diver), Time1))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3973).
axiom(not(happens(decompress(Diver), Time1)),
   
    [ comparison(Time1, Time, <),
      holds_at(signalingDecompress(Computer, Diver), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3973).

 /*  not(holds_at(signalingDecompress(Computer, Diver), Time)) :-
       comparison(Time1, Time, <),
       happens(decompress(Diver), Time1).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3973).

 /*  [comparison(Time1, Time, <), happens(decompress(Diver), Time1)] ->
       ta(Time,
          tvs1=[Time, Time1],
          tvs2=[Time, Time1],
          holds_at(neg(signalingDecompress(Computer, Diver)),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3973).
axiom(holds_at(neg(signalingDecompress(Computer, Diver)), Time),
   
    [ comparison(Time1, Time, <),
      happens(decompress(Diver), Time1)
    ]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3975
% event Decompress(diver)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3975).
event(decompress(diver)).
==> mpred_prop(decompress(diver),event).
==> meta_argtypes(decompress(diver)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3977
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3978).
% event EqualizeEars(diver)
event(equalizeEars(diver)).
==> mpred_prop(equalizeEars(diver),event).
==> meta_argtypes(equalizeEars(diver)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3979
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3980).
% [diver,time]
% (Happens(Descend1(diver),time) | Happens(Ascend1(diver),time)) &
% !Happens(EqualizeEars(diver),time) ->
% Happens(StartEarPain(diver),time) &
% Happens(RuptureEardrum(diver),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3983
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3980).

 /*  (happens(descend1(Diver), Time);happens(ascend1(Diver), Time)), not(happens(equalizeEars(Diver), Time)) ->
       happens(startEarPain(Diver), Time),
       happens(ruptureEardrum(Diver), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3980).

 /*  happens(startEarPain(Diver), Time) :-
       not(happens(equalizeEars(Diver), Time)),
       (   happens(descend1(Diver), Time)
       ;   happens(ascend1(Diver), Time)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3980).

 /*  [not(happens(equalizeEars(Diver), Time)),  (happens(descend1(Diver), Time);happens(ascend1(Diver), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(startEarPain(Diver), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3980).
axiom(happens(startEarPain(Diver), Time),
   
    [ not(happens(equalizeEars(Diver), Time)),
       (happens(descend1(Diver), Time);happens(ascend1(Diver), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3980).

 /*  happens(ruptureEardrum(Diver), Time) :-
       not(happens(equalizeEars(Diver), Time)),
       (   happens(descend1(Diver), Time)
       ;   happens(ascend1(Diver), Time)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3980).

 /*  [not(happens(equalizeEars(Diver), Time)),  (happens(descend1(Diver), Time);happens(ascend1(Diver), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(ruptureEardrum(Diver), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3980).
axiom(happens(ruptureEardrum(Diver), Time),
   
    [ not(happens(equalizeEars(Diver), Time)),
       (happens(descend1(Diver), Time);happens(ascend1(Diver), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3980).

 /*  happens(equalizeEars(Diver), Time) :-
       (   happens(descend1(Diver), Time)
       ;   happens(ascend1(Diver), Time)
       ),
       (   not(happens(startEarPain(Diver), Time))
       ;   not(happens(ruptureEardrum(Diver), Time))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3980).

 /*  [(happens(descend1(Diver), Time);happens(ascend1(Diver), Time)),  (not(happens(startEarPain(Diver), Time));not(happens(ruptureEardrum(Diver), Time)))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(equalizeEars(Diver), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3980).
axiom(happens(equalizeEars(Diver), Time),
   
    [  (happens(descend1(Diver), Time);happens(ascend1(Diver), Time)),
       (not(happens(startEarPain(Diver), Time));not(happens(ruptureEardrum(Diver), Time)))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3980).

 /*  not(happens(descend1(Diver), Time)) :-
       not(happens(equalizeEars(Diver), Time)),
       (   not(happens(startEarPain(Diver), Time))
       ;   not(happens(ruptureEardrum(Diver), Time))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3980).

 /*  [not(happens(equalizeEars(Diver), Time)),  (not(happens(startEarPain(Diver), Time));not(happens(ruptureEardrum(Diver), Time)))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(descend1(Diver), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3980).
axiom(not(happens(descend1(Diver), Time)),
   
    [ not(happens(equalizeEars(Diver), Time)),
       (not(happens(startEarPain(Diver), Time));not(happens(ruptureEardrum(Diver), Time)))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3980).

 /*  not(happens(ascend1(Diver), Time)) :-
       not(happens(equalizeEars(Diver), Time)),
       (   not(happens(startEarPain(Diver), Time))
       ;   not(happens(ruptureEardrum(Diver), Time))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3980).

 /*  [not(happens(equalizeEars(Diver), Time)),  (not(happens(startEarPain(Diver), Time));not(happens(ruptureEardrum(Diver), Time)))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(ascend1(Diver), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3980).
axiom(not(happens(ascend1(Diver), Time)),
   
    [ not(happens(equalizeEars(Diver), Time)),
       (not(happens(startEarPain(Diver), Time));not(happens(ruptureEardrum(Diver), Time)))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3985
% [diver,time]
% Happens(Ascend1(diver),time) &
% !Happens(Decompress(diver),time) ->
% Happens(StartDecompressionIllness(diver),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3988
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3987).

 /*  happens(ascend1(Diver), Time), not(happens(decompress(Diver), Time)) ->
       happens(startDecompressionIllness(Diver), Time).
 */

 /*  happens(startDecompressionIllness(Diver), Time) :-
       happens(ascend1(Diver), Time),
       not(happens(decompress(Diver), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3987).

 /*  [happens(ascend1(Diver), Time), not(happens(decompress(Diver), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(startDecompressionIllness(Diver), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3987).
axiom(happens(startDecompressionIllness(Diver), Time),
   
    [ happens(ascend1(Diver), Time),
      not(happens(decompress(Diver), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3987).

 /*  not(happens(ascend1(Diver), Time)) :-
       not(happens(decompress(Diver), Time)),
       not(happens(startDecompressionIllness(Diver), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3987).

 /*  [not(happens(decompress(Diver), Time)), not(happens(startDecompressionIllness(Diver), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(ascend1(Diver), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3987).
axiom(not(happens(ascend1(Diver), Time)),
   
    [ not(happens(decompress(Diver), Time)),
      not(happens(startDecompressionIllness(Diver), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3987).

 /*  happens(decompress(Diver), Time) :-
       happens(ascend1(Diver), Time),
       not(happens(startDecompressionIllness(Diver), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3987).

 /*  [happens(ascend1(Diver), Time), not(happens(startDecompressionIllness(Diver), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(decompress(Diver), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3987).
axiom(happens(decompress(Diver), Time),
   
    [ happens(ascend1(Diver), Time),
      not(happens(startDecompressionIllness(Diver), Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3990
% [diver1,diver2,time]
% HoldsAt(Holding(diver1,diver2),time) &
% Happens(Ascend1(diver1),time) &
% !Happens(Decompress(diver2),time) ->
% Happens(StartDecompressionIllness(diver2),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3994
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3992).

 /*  holds_at(holding(Diver1, Diver2), Time), happens(ascend1(Diver1), Time), not(happens(decompress(Diver2), Time)) ->
       happens(startDecompressionIllness(Diver2), Time).
 */

 /*  happens(startDecompressionIllness(Diver2), Time) :-
       holds_at(holding(Diver1, Diver2), Time),
       happens(ascend1(Diver1), Time),
       not(happens(decompress(Diver2), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3992).

 /*  [holds_at(holding(Diver1, Diver2), Time), happens(ascend1(Diver1), Time), not(happens(decompress(Diver2), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(startDecompressionIllness(Diver2), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3992).
axiom(happens(startDecompressionIllness(Diver2), Time),
   
    [ holds_at(holding(Diver1, Diver2), Time),
      happens(ascend1(Diver1), Time),
      not(happens(decompress(Diver2), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3992).

 /*  not(holds_at(holding(Diver1, Diver2), Time)) :-
       ( happens(ascend1(Diver1), Time),
         not(happens(decompress(Diver2), Time))
       ),
       not(happens(startDecompressionIllness(Diver2), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3992).

 /*  [happens(ascend1(Diver1), Time), not(happens(decompress(Diver2), Time)), not(happens(startDecompressionIllness(Diver2), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(holding(Diver1, Diver2)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3992).
axiom(holds_at(neg(holding(Diver1, Diver2)), Time),
   
    [ happens(ascend1(Diver1), Time),
      not(happens(decompress(Diver2), Time)),
      not(happens(startDecompressionIllness(Diver2), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3992).

 /*  not(happens(ascend1(Diver1), Time)) :-
       not(happens(decompress(Diver2), Time)),
       holds_at(holding(Diver1, Diver2), Time),
       not(happens(startDecompressionIllness(Diver2), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3992).

 /*  [not(happens(decompress(Diver2), Time)), holds_at(holding(Diver1, Diver2), Time), not(happens(startDecompressionIllness(Diver2), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(ascend1(Diver1), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3992).
axiom(not(happens(ascend1(Diver1), Time)),
   
    [ not(happens(decompress(Diver2), Time)),
      holds_at(holding(Diver1, Diver2), Time),
      not(happens(startDecompressionIllness(Diver2), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3992).

 /*  happens(decompress(Diver2), Time) :-
       happens(ascend1(Diver1), Time),
       holds_at(holding(Diver1, Diver2), Time),
       not(happens(startDecompressionIllness(Diver2), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3992).

 /*  [happens(ascend1(Diver1), Time), holds_at(holding(Diver1, Diver2), Time), not(happens(startDecompressionIllness(Diver2), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(decompress(Diver2), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3992).
axiom(happens(decompress(Diver2), Time),
   
    [ happens(ascend1(Diver1), Time),
      holds_at(holding(Diver1, Diver2), Time),
      not(happens(startDecompressionIllness(Diver2), Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3996
% [diver,time]
% Happens(Decompress(diver),time) ->
% ({depth} depth>0 & HoldsAt(AtDepth(diver,depth),time)) &
% !HoldsAt(UncontrolledBuoyancy(diver),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:3999
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3998).

 /*  happens(decompress(Diver), Time) ->
       exists([Depth],
               (Depth>0, holds_at(atDepth(Diver, Depth), Time))),
       holds_at(neg(uncontrolledBuoyancy(Diver)), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3998).

 /*  not(happens(decompress(Diver), Time)) :-
       (   not(holds_at(neg(uncontrolledBuoyancy(Diver)), Time))
       ;   not(comparison(Depth, 0, >))
       ;   not(holds_at(atDepth(Diver, Depth), Time))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3998).

 /*  [(holds_at(uncontrolledBuoyancy(Diver), Time);not(comparison(Depth, 0, >));holds_at(neg(atDepth(Diver, Depth)), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(decompress(Diver), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3998).
axiom(not(happens(decompress(Diver), Time)),
   
    [  (holds_at(uncontrolledBuoyancy(Diver), Time);not(comparison(Depth, 0, >));holds_at(neg(atDepth(Diver, Depth)), Time))
    ]).

 /*  holds_at(neg(uncontrolledBuoyancy(Diver)), Time) :-
       happens(decompress(Diver), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3998).

 /*  [holds_at(metreqs(decompress(Diver)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(decompress(Diver), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3998).
axiom(requires(decompress(Diver), Time),
    [holds_at(metreqs(decompress(Diver)), Time)]).

 /*  [holds_at(neg(uncontrolledBuoyancy(Diver)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(decompress(Diver)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3998).
axiom(holds_at(metreqs(decompress(Diver)), Time),
    [holds_at(neg(uncontrolledBuoyancy(Diver)), Time)]).

 /*  comparison(Depth, 0, >) :-
       happens(decompress(Diver), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3998).

 /*  [holds_at(metreqs(decompress(Diver)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(decompress(Diver), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3998).
axiom(requires(decompress(Diver), Time),
    [holds_at(metreqs(decompress(Diver)), Time)]).

 /*  [comparison(Depth, 0, >)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(decompress(Diver)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3998).
axiom(holds_at(metreqs(decompress(Diver)), Time),
    [comparison(Depth, 0, >)]).

 /*  holds_at(atDepth(Diver, Depth), Time) :-
       happens(decompress(Diver), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3998).

 /*  [holds_at(metreqs(decompress(Diver)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(decompress(Diver), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3998).
axiom(requires(decompress(Diver), Time),
    [holds_at(metreqs(decompress(Diver)), Time)]).

 /*  [holds_at(atDepth(Diver, Depth), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(decompress(Diver)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',3998).
axiom(holds_at(metreqs(decompress(Diver)), Time),
    [holds_at(atDepth(Diver, Depth), Time)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4001
% fluent HasHeadache(diver)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4001).
fluent(hasHeadache(diver)).
==> mpred_prop(hasHeadache(diver),fluent).
==> meta_argtypes(hasHeadache(diver)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4003
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4004).
% [diver,time]
% HoldsAt(ConditionOK(diver),time) ->
% !HoldsAt(Unconscious(diver),time) &
% !HoldsAt(HasEarPain(diver),time) &
% !HoldsAt(HasRupturedEardrum(diver),time) &
% !HoldsAt(HasDecompressionIllness(diver),time) &
% !HoldsAt(HasHeadache(diver),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4009
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4004).

 /*  holds_at(conditionOK(Diver), Time) ->
       holds_at(neg(unconscious(Diver)), Time),
       holds_at(neg(hasEarPain(Diver)), Time),
       holds_at(neg(hasRupturedEardrum(Diver)), Time),
       holds_at(neg(hasDecompressionIllness(Diver)), Time),
       holds_at(neg(hasHeadache(Diver)), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4004).

 /*  not(holds_at(conditionOK(Diver), Time)) :-
       (   not(holds_at(neg(unconscious(Diver)), Time))
       ;   not(holds_at(neg(hasEarPain(Diver)), Time))
       ;   not(holds_at(neg(hasRupturedEardrum(Diver)), Time))
       ;   not(holds_at(neg(hasDecompressionIllness(Diver)), Time))
       ;   not(holds_at(neg(hasHeadache(Diver)), Time))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4004).

 /*  [(holds_at(unconscious(Diver), Time);holds_at(hasEarPain(Diver), Time);holds_at(hasRupturedEardrum(Diver), Time);holds_at(hasDecompressionIllness(Diver), Time);holds_at(hasHeadache(Diver), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(conditionOK(Diver)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4004).
axiom(holds_at(neg(conditionOK(Diver)), Time),
   
    [  (holds_at(unconscious(Diver), Time);holds_at(hasEarPain(Diver), Time);holds_at(hasRupturedEardrum(Diver), Time);holds_at(hasDecompressionIllness(Diver), Time);holds_at(hasHeadache(Diver), Time))
    ]).

 /*  holds_at(neg(unconscious(Diver)), Time) :-
       holds_at(conditionOK(Diver), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4004).

 /*  [holds_at(conditionOK(Diver), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(unconscious(Diver)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4004).
axiom(holds_at(neg(unconscious(Diver)), Time),
    [holds_at(conditionOK(Diver), Time)]).

 /*  holds_at(neg(hasEarPain(Diver)), Time) :-
       holds_at(conditionOK(Diver), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4004).

 /*  [holds_at(conditionOK(Diver), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(hasEarPain(Diver)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4004).
axiom(holds_at(neg(hasEarPain(Diver)), Time),
    [holds_at(conditionOK(Diver), Time)]).

 /*  holds_at(neg(hasRupturedEardrum(Diver)), Time) :-
       holds_at(conditionOK(Diver), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4004).

 /*  [holds_at(conditionOK(Diver), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(hasRupturedEardrum(Diver)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4004).
axiom(holds_at(neg(hasRupturedEardrum(Diver)), Time),
    [holds_at(conditionOK(Diver), Time)]).

 /*  holds_at(neg(hasDecompressionIllness(Diver)), Time) :-
       holds_at(conditionOK(Diver), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4004).

 /*  [holds_at(conditionOK(Diver), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(hasDecompressionIllness(Diver)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4004).
axiom(holds_at(neg(hasDecompressionIllness(Diver)), Time),
    [holds_at(conditionOK(Diver), Time)]).

 /*  holds_at(neg(hasHeadache(Diver)), Time) :-
       holds_at(conditionOK(Diver), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4004).

 /*  [holds_at(conditionOK(Diver), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(hasHeadache(Diver)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4004).
axiom(holds_at(neg(hasHeadache(Diver)), Time),
    [holds_at(conditionOK(Diver), Time)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4011
% event BeAirlifted(diver)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4011).
event(beAirlifted(diver)).
==> mpred_prop(beAirlifted(diver),event).
==> meta_argtypes(beAirlifted(diver)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4013
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4014).
% event TakeInWater(diver)
event(takeInWater(diver)).
==> mpred_prop(takeInWater(diver),event).
==> meta_argtypes(takeInWater(diver)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4015
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4016).
% fluent LowOnAir(airtank)
fluent(lowOnAir(airtank)).
==> mpred_prop(lowOnAir(airtank),fluent).
==> meta_argtypes(lowOnAir(airtank)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4017
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4018).
% event BecomeLowOnAir(airtank)
event(becomeLowOnAir(airtank)).
==> mpred_prop(becomeLowOnAir(airtank),event).
==> meta_argtypes(becomeLowOnAir(airtank)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4019
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4020).
% [airtank,time]
% Initiates(BecomeLowOnAir(airtank),LowOnAir(airtank),time).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(becomeLowOnAir(Airtank),
                    lowOnAir(Airtank),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4020).
axiom(initiates(becomeLowOnAir(Airtank), lowOnAir(Airtank), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4022
%; initial state
% [diver]
 % HoldsAt(ConditionOK(diver),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4024).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(conditionOK(Diver), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4024).
axiom(holds_at(conditionOK(Diver), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4024
% [diver]
 % HoldsAt(Vertical(diver),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4024).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(vertical(Diver), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4024).
axiom(holds_at(vertical(Diver), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4025
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4026).
% !HoldsAt(DisturbedSilt(),0).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(disturbedSilt), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4026).
axiom(holds_at(neg(disturbedSilt), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4026
% [diver]
 % !HoldsAt(UncontrolledBuoyancy(diver),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4026).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(uncontrolledBuoyancy(Diver)), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4026).
axiom(holds_at(neg(uncontrolledBuoyancy(Diver)), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4027
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4028).
% [diver]
 % !HoldsAt(Disoriented(diver),0).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(disoriented(Diver)), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4028).
axiom(holds_at(neg(disoriented(Diver)), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4028
% [diver]
 % !HoldsAt(PositivelyBuoyant(diver),0) &
%         !HoldsAt(NeutrallyBuoyant(diver),0) &
%         !HoldsAt(NegativelyBuoyant(diver),0).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4030
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4028).

 /*   holds_at(neg(positivelyBuoyant(Diver)), start),
      holds_at(neg(neutrallyBuoyant(Diver)), start),
      holds_at(neg(negativelyBuoyant(Diver)), start).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4028).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(positivelyBuoyant(Diver)), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4028).
axiom(holds_at(neg(positivelyBuoyant(Diver)), start),
    []).

 /*  [] ->
       ta(Ta_Param2,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(neutrallyBuoyant(Diver)), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4028).
axiom(holds_at(neg(neutrallyBuoyant(Diver)), start),
    []).

 /*  [] ->
       ta(Ta_Param3,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(negativelyBuoyant(Diver)), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4028).
axiom(holds_at(neg(negativelyBuoyant(Diver)), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4031
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4032).
% [diver,object]
 % !HoldsAt(Wearing(diver,object),0).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(wearing(Diver, Object)), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4032).
axiom(holds_at(neg(wearing(Diver, Object)), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4032
% [diver,object]
 % !HoldsAt(Holding(diver,object),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4032).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(holding(Diver, Object)), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4032).
axiom(holds_at(neg(holding(Diver, Object)), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4033
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4034).
% [diver1,diver2]
 % !HoldsAt(Separated(diver1,diver2),0).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(separated(Diver1, Diver2)), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4034).
axiom(holds_at(neg(separated(Diver1, Diver2)), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4034
%;[agent,object] !HoldsAt(See(agent,object),0).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4036
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4037).
% fluent Separated(diver,diver)
fluent(separated(diver,diver)).
==> mpred_prop(separated(diver,diver),fluent).
==> meta_argtypes(separated(diver,diver)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4038
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4039).
% [diver1,diver2,time]
% HoldsAt(Separated(diver1,diver2),time) ->
% HoldsAt(Separated(diver2,diver1),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4040

 /*  holds_at(separated(Diver1, Diver2), Time) ->
       holds_at(separated(Diver2, Diver1), Time).
 */

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4042
% event BecomeSeparated(diver,diver)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4042).
event(becomeSeparated(diver,diver)).
==> mpred_prop(becomeSeparated(diver,diver),event).
==> meta_argtypes(becomeSeparated(diver,diver)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4044
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4045).
% event BeReunitedWith(diver,diver)
event(beReunitedWith(diver,diver)).
==> mpred_prop(beReunitedWith(diver,diver),event).
==> meta_argtypes(beReunitedWith(diver,diver)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4046
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4047).
% [diver1,diver2,time]
% Initiates(BecomeSeparated(diver1,diver2),Separated(diver1,diver2),time).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(becomeSeparated(Diver1, Diver2),
                    separated(Diver1, Diver2),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4047).
axiom(initiates(becomeSeparated(Diver1, Diver2), separated(Diver1, Diver2), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4049
% [diver1,diver2,time]
% Initiates(BecomeSeparated(diver1,diver2),Separated(diver2,diver1),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4051).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(becomeSeparated(Diver1, Diver2),
                    separated(Diver2, Diver1),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4051).
axiom(initiates(becomeSeparated(Diver1, Diver2), separated(Diver2, Diver1), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4052
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4053).
% [diver1,diver2,time]
% Terminates(BeReunitedWith(diver1,diver2),Separated(diver1,diver2),time).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(beReunitedWith(Diver1, Diver2),
                     separated(Diver1, Diver2),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4053).
axiom(terminates(beReunitedWith(Diver1, Diver2), separated(Diver1, Diver2), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4055
% [diver1,diver2,time]
% Terminates(BeReunitedWith(diver1,diver2),Separated(diver2,diver1),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4057).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(beReunitedWith(Diver1, Diver2),
                     separated(Diver2, Diver1),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4057).
axiom(terminates(beReunitedWith(Diver1, Diver2), separated(Diver2, Diver1), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4058
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4059).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: ecnet/Dress.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; Dress
%; (cf Sleep)
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4080
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4081).
% event PutOn(agent,clothing)
event(putOn(agent,clothing)).
==> mpred_prop(putOn(agent,clothing),event).
==> meta_argtypes(putOn(agent,clothing)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4082
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4083).
% event TakeOff(agent,clothing)
event(takeOff(agent,clothing)).
==> mpred_prop(takeOff(agent,clothing),event).
==> meta_argtypes(takeOff(agent,clothing)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4084
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4085).
% fluent Wearing(agent,clothing)
fluent(wearing(agent,clothing)).
==> mpred_prop(wearing(agent,clothing),fluent).
==> meta_argtypes(wearing(agent,clothing)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4086
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4087).
% [agent,clothing,time]
% Initiates(PutOn(agent,clothing),
%           Wearing(agent,clothing),
%           time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4089
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4087).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(putOn(Agent, Clothing),
                    wearing(Agent, Clothing),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4087).
axiom(initiates(putOn(Agent, Clothing), wearing(Agent, Clothing), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4091
% [agent,clothing,time]
% Happens(PutOn(agent,clothing),time) ->
% !HoldsAt(Wearing(agent,clothing),time) &
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4094
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4093).
% {location}%  HoldsAt(At(agent,location),time) &
%            HoldsAt(At(clothing,location),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4095).

 /*  exists([Location],
    happens(putOn(Agent, Clothing), Time) ->
       holds_at(neg(wearing(Agent, Clothing)), Time),
       holds_at(at(Agent, Location), Time),
       holds_at(at(Clothing, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4095).

 /*  not(happens(putOn(Agent, Clothing), Time)) :-
       (   not(holds_at(neg(wearing(Agent, Clothing)), Time))
       ;   not(holds_at(at(Agent, Location), Time))
       ;   not(holds_at(at(Clothing, Location), Time))
       ),
       some(Location, '$kolem_Fn_384'(Agent, Clothing, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4095).

 /*  [(holds_at(wearing(Agent, Clothing), Time);holds_at(neg(at(Agent, Location)), Time);holds_at(neg(at(Clothing, Location)), Time)), some(Location, '$kolem_Fn_384'(Agent, Clothing, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(putOn(Agent, Clothing), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4095).
axiom(not(happens(putOn(Agent, Clothing), Time)),
   
    [  (holds_at(wearing(Agent, Clothing), Time);holds_at(neg(at(Agent, Location)), Time);holds_at(neg(at(Clothing, Location)), Time)),
      some(Location,
           '$kolem_Fn_384'(Agent, Clothing, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4095).

 /*  holds_at(neg(wearing(Agent, Clothing)), Time) :-
       happens(putOn(Agent, Clothing), Time),
       some(Location, '$kolem_Fn_384'(Agent, Clothing, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4095).

 /*  [happens(putOn(Agent, Clothing), Time), some(Location, '$kolem_Fn_384'(Agent, Clothing, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(wearing(Agent, Clothing)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4095).
axiom(holds_at(neg(wearing(Agent, Clothing)), Time),
   
    [ happens(putOn(Agent, Clothing), Time),
      some(Location,
           '$kolem_Fn_384'(Agent, Clothing, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4095).

 /*  holds_at(at(Agent, Location), Time) :-
       happens(putOn(Agent, Clothing), Time),
       some(Location, '$kolem_Fn_384'(Agent, Clothing, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4095).

 /*  [happens(putOn(Agent, Clothing), Time), some(Location, '$kolem_Fn_384'(Agent, Clothing, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(at(Agent, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4095).
axiom(holds_at(at(Agent, Location), Time),
   
    [ happens(putOn(Agent, Clothing), Time),
      some(Location,
           '$kolem_Fn_384'(Agent, Clothing, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4095).

 /*  holds_at(at(Clothing, Location), Time) :-
       happens(putOn(Agent, Clothing), Time),
       some(Location, '$kolem_Fn_384'(Agent, Clothing, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4095).

 /*  [happens(putOn(Agent, Clothing), Time), some(Location, '$kolem_Fn_384'(Agent, Clothing, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(at(Clothing, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4095).
axiom(holds_at(at(Clothing, Location), Time),
   
    [ happens(putOn(Agent, Clothing), Time),
      some(Location,
           '$kolem_Fn_384'(Agent, Clothing, Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4097
% [agent,clothing,time]
% Terminates(TakeOff(agent,clothing),
%            Wearing(agent,clothing),
%            time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4100
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4099).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(takeOff(Agent, Clothing),
                     wearing(Agent, Clothing),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4099).
axiom(terminates(takeOff(Agent, Clothing), wearing(Agent, Clothing), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4102
% [agent,clothing,time]
% Happens(TakeOff(agent,clothing),time) ->
% HoldsAt(Wearing(agent,clothing),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4104

 /*  happens(takeOff(Agent, Clothing), Time) ->
       holds_at(wearing(Agent, Clothing), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4104).

 /*  holds_at(wearing(Agent, Clothing), Time) :-
       happens(takeOff(Agent, Clothing), Time).
 */

 /*  [holds_at(metreqs(takeOff(Agent, Clothing)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(takeOff(Agent, Clothing), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4104).
axiom(requires(takeOff(Agent, Clothing), Time),
    [holds_at(metreqs(takeOff(Agent, Clothing)), Time)]).

 /*  [holds_at(wearing(Agent, Clothing), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(takeOff(Agent, Clothing)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4104).
axiom(holds_at(metreqs(takeOff(Agent, Clothing)), Time),
    [holds_at(wearing(Agent, Clothing), Time)]).

 /*  not(happens(takeOff(Agent, Clothing), Time)) :-
       not(holds_at(wearing(Agent, Clothing), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4104).

 /*  [holds_at(neg(wearing(Agent, Clothing)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(takeOff(Agent, Clothing), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4104).
axiom(not(happens(takeOff(Agent, Clothing), Time)),
    [holds_at(neg(wearing(Agent, Clothing)), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4106
% [agent,clothing,location,time]
% Releases(PutOn(agent,clothing),At(clothing,location),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4108).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          releases(putOn(Agent, Clothing),
                   at(Clothing, Location),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4108).
axiom(releases(putOn(Agent, Clothing), at(Clothing, Location), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4109
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4110).
% [agent,clothing,location,time]
% HoldsAt(Wearing(agent,clothing),time) &
% HoldsAt(At(agent,location),time) ->
% HoldsAt(At(clothing,location),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4112
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4110).

 /*  holds_at(wearing(Agent, Clothing), Time), holds_at(at(Agent, Location), Time) ->
       holds_at(at(Clothing, Location), Time).
 */

 /*  holds_at(at(Clothing, Location), Time) :-
       holds_at(wearing(Agent, Clothing), Time),
       holds_at(at(Agent, Location), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4110).

 /*  [holds_at(wearing(Agent, Clothing), Time), holds_at(at(Agent, Location), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(at(Clothing, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4110).
axiom(holds_at(at(Clothing, Location), Time),
   
    [ holds_at(wearing(Agent, Clothing), Time),
      holds_at(at(Agent, Location), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4110).

 /*  not(holds_at(wearing(Agent, Clothing), Time)) :-
       holds_at(at(Agent, Location), Time),
       not(holds_at(at(Clothing, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4110).

 /*  [holds_at(at(Agent, Location), Time), holds_at(neg(at(Clothing, Location)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(wearing(Agent, Clothing)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4110).
axiom(holds_at(neg(wearing(Agent, Clothing)), Time),
   
    [ holds_at(at(Agent, Location), Time),
      holds_at(neg(at(Clothing, Location)), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4110).

 /*  not(holds_at(at(Agent, Location), Time)) :-
       holds_at(wearing(Agent, Clothing), Time),
       not(holds_at(at(Clothing, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4110).

 /*  [holds_at(wearing(Agent, Clothing), Time), holds_at(neg(at(Clothing, Location)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(at(Agent, Location)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4110).
axiom(holds_at(neg(at(Agent, Location)), Time),
   
    [ holds_at(wearing(Agent, Clothing), Time),
      holds_at(neg(at(Clothing, Location)), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4114
%;[agent,clothing,location1,location2,time]
%;HoldsAt(At(agent,location1),time) &
%;location1 != location2 ->
%;Terminates(TakeOff(agent,clothing),At(clothing,location2),time).
% [agent,clothing,location,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4120
% HoldsAt(At(agent,location),time) ->
% Initiates(TakeOff(agent,clothing),At(clothing,location),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4120).

 /*  [holds_at(at(Agent, Location), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(takeOff(Agent, Clothing),
                    at(Clothing, Location),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4120).
axiom(initiates(takeOff(Agent, Clothing), at(Clothing, Location), Time),
    [holds_at(at(Agent, Location), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4123
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: ecnet/HungerNeed.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; hunger need
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4144
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4145).
% fluent Hungry(agent)
fluent(hungry(agent)).
==> mpred_prop(hungry(agent),fluent).
==> meta_argtypes(hungry(agent)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4146
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4147).
% fluent Satiated(agent)
fluent(satiated(agent)).
==> mpred_prop(satiated(agent),fluent).
==> meta_argtypes(satiated(agent)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4147
% noninertial Satiated
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4147).
==> noninertial(satiated).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4149
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4150).
% [agent,time]
 % HoldsAt(Hungry(agent),time) <-> !HoldsAt(Satiated(agent),time).

 /*  holds_at(hungry(Agent), Time) <->
       holds_at(neg(satiated(Agent)), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4150).

 /*  [holds_at, hungry] <->
       [holds_at, neg, satiated].
 */

 /*  holds_at(hungry(Agent), Time) ->
       holds_at(neg(satiated(Agent)), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4150).

 /*  holds_at(neg(satiated(Agent)), Time) :-
       holds_at(hungry(Agent), Time).
 */

 /*  [holds_at(hungry(Agent), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(satiated(Agent)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4150).
axiom(holds_at(neg(satiated(Agent)), Time),
    [holds_at(hungry(Agent), Time)]).

 /*  not(holds_at(hungry(Agent), Time)) :-
       not(holds_at(neg(satiated(Agent)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4150).

 /*  [holds_at(satiated(Agent), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(hungry(Agent)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4150).
axiom(holds_at(neg(hungry(Agent)), Time),
    [holds_at(satiated(Agent), Time)]).

 /*  holds_at(neg(satiated(Agent)), Time) ->
       holds_at(hungry(Agent), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4150).

 /*  holds_at(hungry(Agent), Time) :-
       holds_at(neg(satiated(Agent)), Time).
 */

 /*  [holds_at(neg(satiated(Agent)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(hungry(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4150).
axiom(holds_at(hungry(Agent), Time),
    [holds_at(neg(satiated(Agent)), Time)]).

 /*  not(holds_at(neg(satiated(Agent)), Time)) :-
       not(holds_at(hungry(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4150).

 /*  [holds_at(neg(hungry(Agent)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(satiated(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4150).
axiom(holds_at(satiated(Agent), Time),
    [holds_at(neg(hungry(Agent)), Time)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4151
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4152).
% event Eat(agent,food)
event(eat(agent,food)).
==> mpred_prop(eat(agent,food),event).
==> meta_argtypes(eat(agent,food)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4153
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4154).
% [agent,food,time]
% Happens(Eat(agent,food),time) ->
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4155
% {location}% 
% HoldsAt(At(agent,location),time) &
% HoldsAt(At(food,location),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4157
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4156).

 /*  exists([Location],
    happens(eat(Agent, Food), Time) ->
       holds_at(at(Agent, Location), Time),
       holds_at(at(Food, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4156).

 /*  not(happens(eat(Agent, Food), Time)) :-
       (   not(holds_at(at(Agent, Location), Time))
       ;   not(holds_at(at(Food, Location), Time))
       ),
       some(Location, '$kolem_Fn_385'(Agent, Food, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4156).

 /*  [(holds_at(neg(at(Agent, Location)), Time);holds_at(neg(at(Food, Location)), Time)), some(Location, '$kolem_Fn_385'(Agent, Food, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(eat(Agent, Food), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4156).
axiom(not(happens(eat(Agent, Food), Time)),
   
    [  (holds_at(neg(at(Agent, Location)), Time);holds_at(neg(at(Food, Location)), Time)),
      some(Location, '$kolem_Fn_385'(Agent, Food, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4156).

 /*  holds_at(at(Agent, Location), Time) :-
       happens(eat(Agent, Food), Time),
       some(Location, '$kolem_Fn_385'(Agent, Food, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4156).

 /*  [happens(eat(Agent, Food), Time), some(Location, '$kolem_Fn_385'(Agent, Food, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(at(Agent, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4156).
axiom(holds_at(at(Agent, Location), Time),
   
    [ happens(eat(Agent, Food), Time),
      some(Location, '$kolem_Fn_385'(Agent, Food, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4156).

 /*  holds_at(at(Food, Location), Time) :-
       happens(eat(Agent, Food), Time),
       some(Location, '$kolem_Fn_385'(Agent, Food, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4156).

 /*  [happens(eat(Agent, Food), Time), some(Location, '$kolem_Fn_385'(Agent, Food, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(at(Food, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4156).
axiom(holds_at(at(Food, Location), Time),
   
    [ happens(eat(Agent, Food), Time),
      some(Location, '$kolem_Fn_385'(Agent, Food, Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4159
% [agent,food,time]
% Terminates(Eat(agent,food),Hungry(agent),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4161).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(eat(Agent, Food), hungry(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4161).
axiom(terminates(eat(Agent, Food), hungry(Agent), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4162
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4163).
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: ecnet/Restaurant.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4180
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4181).
% sort restaurant: script
==> subsort(restaurant,script).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4181
% sort waiter: agent
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4181).
==> subsort(waiter,agent).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4182
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4183).
% sort cook: agent
==> subsort(cook,agent).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4184
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4185).
% function BillOf(restaurant): bill
function(billOf(restaurant)).
==> mpred_prop(billOf(restaurant),function).
==> meta_argtypes(billOf(restaurant)).
predicate(bill(restaurant,bill)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4185).
==> mpred_prop(bill(restaurant,bill),predicate).
==> meta_argtypes(bill(restaurant,bill)).

 /*  fix_axiom_head(Time) ->
       
       [ functional_predicate(billOf, bill),
          (->),
         holds_at(functional_predicate(billOf, bill), Time)
       ].
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4185).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(functional_predicate(billOf, bill), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4185).
axiom(holds_at(functional_predicate(billOf, bill), Time),
    []).
==> resultIsa(billOf,bill).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4185
% function CookOf(restaurant): cook
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4185).
function(cookOf(restaurant)).
==> mpred_prop(cookOf(restaurant),function).
==> meta_argtypes(cookOf(restaurant)).
predicate(cook(restaurant,cook)).
==> mpred_prop(cook(restaurant,cook),predicate).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4185).
==> meta_argtypes(cook(restaurant,cook)).

 /*  fix_axiom_head(Time) ->
       
       [ functional_predicate(cookOf, cook),
          (->),
         holds_at(functional_predicate(cookOf, cook), Time)
       ].
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4185).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(functional_predicate(cookOf, cook), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4185).
axiom(holds_at(functional_predicate(cookOf, cook), Time),
    []).
==> resultIsa(cookOf,cook).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4186
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4187).
% function TableOf(restaurant): table
function(tableOf(restaurant)).
==> mpred_prop(tableOf(restaurant),function).
==> meta_argtypes(tableOf(restaurant)).
predicate(table(restaurant,table)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4187).
==> mpred_prop(table(restaurant,table),predicate).
==> meta_argtypes(table(restaurant,table)).

 /*  fix_axiom_head(Time) ->
       
       [ functional_predicate(tableOf, table),
          (->),
         holds_at(functional_predicate(tableOf, table), Time)
       ].
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4187).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(functional_predicate(tableOf, table), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4187).
axiom(holds_at(functional_predicate(tableOf, table), Time),
    []).
==> resultIsa(tableOf,table).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4187
% function WaiterOf(restaurant): waiter
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4187).
function(waiterOf(restaurant)).
==> mpred_prop(waiterOf(restaurant),function).
==> meta_argtypes(waiterOf(restaurant)).
predicate(waiter(restaurant,waiter)).
==> mpred_prop(waiter(restaurant,waiter),predicate).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4187).
==> meta_argtypes(waiter(restaurant,waiter)).

 /*  fix_axiom_head(Time) ->
       
       [ functional_predicate(waiterOf, waiter),
          (->),
         holds_at(functional_predicate(waiterOf, waiter), Time)
       ].
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4187).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(functional_predicate(waiterOf, waiter), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4187).
axiom(holds_at(functional_predicate(waiterOf, waiter), Time),
    []).
==> resultIsa(waiterOf,waiter).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4188
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4189).
% function KitchenDoorOf(restaurant): door
function(kitchenDoorOf(restaurant)).
==> mpred_prop(kitchenDoorOf(restaurant),function).
==> meta_argtypes(kitchenDoorOf(restaurant)).
predicate(kitchenDoor(restaurant,door)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4189).
==> mpred_prop(kitchenDoor(restaurant,door),predicate).
==> meta_argtypes(kitchenDoor(restaurant,door)).

 /*  fix_axiom_head(Time) ->
       
       [ functional_predicate(kitchenDoorOf, kitchenDoor),
          (->),
         holds_at(functional_predicate(kitchenDoorOf, kitchenDoor), Time)
       ].
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4189).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(functional_predicate(kitchenDoorOf, kitchenDoor), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4189).
axiom(holds_at(functional_predicate(kitchenDoorOf, kitchenDoor), Time),
    []).
==> resultIsa(kitchenDoorOf,door).
%; awaiting customer/waiter has set down bill on customer's table

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4191
% fluent BeWaiter0(waiter)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4191).
fluent(beWaiter0(waiter)).
==> mpred_prop(beWaiter0(waiter),fluent).
==> meta_argtypes(beWaiter0(waiter)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4193
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4194).
%; awaiting customer order

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4194
% fluent BeWaiter1(waiter)
fluent(beWaiter1(waiter)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4194).
==> mpred_prop(beWaiter1(waiter),fluent).
==> meta_argtypes(beWaiter1(waiter)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4196
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4197).
%; has customer order

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4197
% fluent BeWaiter2(waiter)
fluent(beWaiter2(waiter)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4197).
==> mpred_prop(beWaiter2(waiter),fluent).
==> meta_argtypes(beWaiter2(waiter)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4199
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4200).
%; in kitchen

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4200
% fluent BeWaiter3(waiter)
fluent(beWaiter3(waiter)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4200).
==> mpred_prop(beWaiter3(waiter),fluent).
==> meta_argtypes(beWaiter3(waiter)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4202
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4203).
%; awaiting preparation of order

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4203
% fluent BeWaiter4(waiter)
fluent(beWaiter4(waiter)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4203).
==> mpred_prop(beWaiter4(waiter),fluent).
==> meta_argtypes(beWaiter4(waiter)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4205
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4206).
%; has order

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4206
% fluent BeWaiter5(waiter)
fluent(beWaiter5(waiter)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4206).
==> mpred_prop(beWaiter5(waiter),fluent).
==> meta_argtypes(beWaiter5(waiter)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4208
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4209).
%; back in dining room

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4209
% fluent BeWaiter6(waiter)
fluent(beWaiter6(waiter)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4209).
==> mpred_prop(beWaiter6(waiter),fluent).
==> meta_argtypes(beWaiter6(waiter)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4211
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4212).
%; order delivered to customer (can ask if all is OK)

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4212
% fluent BeWaiter7(waiter)
fluent(beWaiter7(waiter)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4212).
==> mpred_prop(beWaiter7(waiter),fluent).
==> meta_argtypes(beWaiter7(waiter)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4214
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4215).
%; customer has requested bill

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4215
% fluent BeWaiter8(waiter)
fluent(beWaiter8(waiter)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4215).
==> mpred_prop(beWaiter8(waiter),fluent).
==> meta_argtypes(beWaiter8(waiter)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4217
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4218).
%; waiter is holding bill

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4218
% fluent BeWaiter9(waiter)
fluent(beWaiter9(waiter)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4218).
==> mpred_prop(beWaiter9(waiter),fluent).
==> meta_argtypes(beWaiter9(waiter)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4220
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4221).
% xor BeWaiter0, BeWaiter1, BeWaiter2, BeWaiter3, BeWaiter4, BeWaiter5, BeWaiter6, BeWaiter7, BeWaiter8, BeWaiter9
==> xor([ beWaiter0,
	  beWaiter1,
	  beWaiter2,
	  beWaiter3,
	  beWaiter4,
	  beWaiter5,
	  beWaiter6,
	  beWaiter7,
	  beWaiter8,
	  beWaiter9
	]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4222
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4223).
% [waiter,agent,time]
% HoldsAt(BeWaiter0(waiter),time) ->
% Terminates(Greet(waiter,agent),
%            BeWaiter0(waiter),
%            time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4226
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4223).

 /*  [holds_at(beWaiter0(Waiter), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(greet(Waiter, Agent),
                     beWaiter0(Waiter),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4223).
axiom(terminates(greet(Waiter, Agent), beWaiter0(Waiter), Time),
    [holds_at(beWaiter0(Waiter), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4228
% [waiter,agent,time]
% HoldsAt(BeWaiter0(waiter),time) ->
% Initiates(Greet(waiter,agent),
%           BeWaiter1(waiter),
%           time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4232
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4230).

 /*  [holds_at(beWaiter0(Waiter), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(greet(Waiter, Agent),
                    beWaiter1(Waiter),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4230).
axiom(initiates(greet(Waiter, Agent), beWaiter1(Waiter), Time),
    [holds_at(beWaiter0(Waiter), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4234
% [waiter,agent,food,time]
% HoldsAt(BeWaiter1(waiter),time) ->
% Terminates(Order(agent,waiter,food),
%            BeWaiter1(waiter),
%            time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4238
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4236).

 /*  [holds_at(beWaiter1(Waiter), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(order(Agent, Waiter, Food),
                     beWaiter1(Waiter),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4236).
axiom(terminates(order(Agent, Waiter, Food), beWaiter1(Waiter), Time),
    [holds_at(beWaiter1(Waiter), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4240
% [waiter,agent,food,time]
% HoldsAt(BeWaiter1(waiter),time) ->
% Initiates(Order(agent,waiter,food),
%           BeWaiter2(waiter),
%           time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4244
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4242).

 /*  [holds_at(beWaiter1(Waiter), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(order(Agent, Waiter, Food),
                    beWaiter2(Waiter),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4242).
axiom(initiates(order(Agent, Waiter, Food), beWaiter2(Waiter), Time),
    [holds_at(beWaiter1(Waiter), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4246
% [restaurant,waiter,time]
% WaiterOf(restaurant)=waiter &
% HoldsAt(BeWaiter2(waiter),time) ->
% Happens(WalkThroughDoor12(waiter,KitchenDoorOf(restaurant)),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4249
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4248).

 /*  equals(waiterOf(Restaurant), Waiter), holds_at(beWaiter2(Waiter), Time) ->
       happens(walkThroughDoor12(Waiter, kitchenDoorOf(Restaurant)),
               Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4248).

 /*  happens(walkThroughDoor12(Waiter, kitchenDoorOf(Restaurant)), Time) :-
       equals(waiterOf(Restaurant), Waiter),
       holds_at(beWaiter2(Waiter), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4248).

 /*  [equals(waiterOf(Restaurant), Waiter), holds_at(beWaiter2(Waiter), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(walkThroughDoor12(Waiter, kitchenDoorOf(Restaurant)),
                  Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4248).
axiom(happens(walkThroughDoor12(Waiter, kitchenDoorOf(Restaurant)), Time),
   
    [ equals(waiterOf(Restaurant), Waiter),
      holds_at(beWaiter2(Waiter), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4248).

 /*  not(holds_at(beWaiter2(Waiter), Time)) :-
       equals(waiterOf(Restaurant), Waiter),
       not(happens(walkThroughDoor12(Waiter,
                                     kitchenDoorOf(Restaurant)),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4248).

 /*  [equals(waiterOf(Restaurant), Waiter), not(happens(walkThroughDoor12(Waiter, kitchenDoorOf(Restaurant)), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(beWaiter2(Waiter)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4248).
axiom(holds_at(neg(beWaiter2(Waiter)), Time),
   
    [ equals(waiterOf(Restaurant), Waiter),
      not(happens(walkThroughDoor12(Waiter,
                                    kitchenDoorOf(Restaurant)),
                  Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4251
% [restaurant,waiter,door,time]
% HoldsAt(BeWaiter2(waiter),time) &
% WaiterOf(restaurant)=waiter &
% KitchenDoorOf(restaurant)=door ->
% Terminates(WalkThroughDoor12(waiter,door),
%            BeWaiter2(waiter),
%            time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4257
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4253).

 /*  [holds_at(beWaiter2(Waiter), Time), equals(waiterOf(Restaurant), Waiter), equals(kitchenDoorOf(Restaurant), Door)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(walkThroughDoor12(Waiter, Door),
                     beWaiter2(Waiter),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4253).
axiom(terminates(walkThroughDoor12(Waiter, Door), beWaiter2(Waiter), Time),
   
    [ holds_at(beWaiter2(Waiter), Time),
      equals(waiterOf(Restaurant), Waiter),
      equals(kitchenDoorOf(Restaurant), Door)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4259
% [restaurant,waiter,door,time]
% HoldsAt(BeWaiter2(waiter),time) &
% WaiterOf(restaurant)=waiter &
% KitchenDoorOf(restaurant)=door ->
% Initiates(WalkThroughDoor12(waiter,door),
%           BeWaiter3(waiter),
%           time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4265
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4261).

 /*  [holds_at(beWaiter2(Waiter), Time), equals(waiterOf(Restaurant), Waiter), equals(kitchenDoorOf(Restaurant), Door)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(walkThroughDoor12(Waiter, Door),
                    beWaiter3(Waiter),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4261).
axiom(initiates(walkThroughDoor12(Waiter, Door), beWaiter3(Waiter), Time),
   
    [ holds_at(beWaiter2(Waiter), Time),
      equals(waiterOf(Restaurant), Waiter),
      equals(kitchenDoorOf(Restaurant), Door)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4267
% [restaurant,food,time]
% HoldsAt(BeWaiter3(WaiterOf(restaurant)),time) &
% ({agent} HoldsAt(KnowOrder(WaiterOf(restaurant),agent,food),time)) ->
% Happens(Order(WaiterOf(restaurant),CookOf(restaurant),food),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4270
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4269).

 /*  holds_at(beWaiter3(waiterOf(Restaurant)), Time), exists([Agent], holds_at(knowOrder(waiterOf(Restaurant), Agent, Food), Time)) ->
       happens(order(waiterOf(Restaurant),
                     cookOf(Restaurant),
                     Food),
               Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4269).

 /*  happens(order(waiterOf(Restaurant), cookOf(Restaurant), Food), Time) :-
       holds_at(beWaiter3(waiterOf(Restaurant)), Time),
       holds_at(knowOrder(waiterOf(Restaurant), Agent, Food),
                Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4269).

 /*  [holds_at(beWaiter3(waiterOf(Restaurant)), Time), holds_at(knowOrder(waiterOf(Restaurant), Agent, Food), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(order(waiterOf(Restaurant),
                        cookOf(Restaurant),
                        Food),
                  Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4269).
axiom(happens(order(waiterOf(Restaurant), cookOf(Restaurant), Food), Time),
   
    [ holds_at(beWaiter3(waiterOf(Restaurant)), Time),
      holds_at(knowOrder(waiterOf(Restaurant), Agent, Food),
               Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4269).

 /*  not(holds_at(beWaiter3(waiterOf(Restaurant)), Time)) :-
       holds_at(knowOrder(waiterOf(Restaurant), Agent, Food),
                Time),
       not(happens(order(waiterOf(Restaurant),
                         cookOf(Restaurant),
                         Food),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4269).

 /*  [holds_at(knowOrder(waiterOf(Restaurant), Agent, Food), Time), not(happens(order(waiterOf(Restaurant), cookOf(Restaurant), Food), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(beWaiter3(waiterOf(Restaurant))), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4269).
axiom(holds_at(neg(beWaiter3(waiterOf(Restaurant))), Time),
   
    [ holds_at(knowOrder(waiterOf(Restaurant), Agent, Food),
               Time),
      not(happens(order(waiterOf(Restaurant),
                        cookOf(Restaurant),
                        Food),
                  Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4269).

 /*  not(holds_at(knowOrder(waiterOf(Restaurant), Agent, Food), Time)) :-
       holds_at(beWaiter3(waiterOf(Restaurant)), Time),
       not(happens(order(waiterOf(Restaurant),
                         cookOf(Restaurant),
                         Food),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4269).

 /*  [holds_at(beWaiter3(waiterOf(Restaurant)), Time), not(happens(order(waiterOf(Restaurant), cookOf(Restaurant), Food), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(knowOrder(waiterOf(Restaurant),
                                 Agent,
                                 Food)),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4269).
axiom(holds_at(neg(knowOrder(waiterOf(Restaurant), Agent, Food)), Time),
   
    [ holds_at(beWaiter3(waiterOf(Restaurant)), Time),
      not(happens(order(waiterOf(Restaurant),
                        cookOf(Restaurant),
                        Food),
                  Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4272
% [restaurant,waiter,cook,food,time]
% WaiterOf(restaurant)=waiter &
% CookOf(restaurant)=cook &
% HoldsAt(BeWaiter3(waiter),time) ->
% Terminates(Order(waiter,cook,food),
%            BeWaiter3(waiter),
%            time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4278
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4274).

 /*  [equals(waiterOf(Restaurant), Waiter), equals(cookOf(Restaurant), Cook), holds_at(beWaiter3(Waiter), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(order(Waiter, Cook, Food),
                     beWaiter3(Waiter),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4274).
axiom(terminates(order(Waiter, Cook, Food), beWaiter3(Waiter), Time),
   
    [ equals(waiterOf(Restaurant), Waiter),
      equals(cookOf(Restaurant), Cook),
      holds_at(beWaiter3(Waiter), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4280
% [restaurant,waiter,cook,food,time]
% WaiterOf(restaurant)=waiter &
% CookOf(restaurant)=cook &
% HoldsAt(BeWaiter3(waiter),time) ->
% Initiates(Order(waiter,cook,food),
%           BeWaiter4(waiter),
%           time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4286
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4282).

 /*  [equals(waiterOf(Restaurant), Waiter), equals(cookOf(Restaurant), Cook), holds_at(beWaiter3(Waiter), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(order(Waiter, Cook, Food),
                    beWaiter4(Waiter),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4282).
axiom(initiates(order(Waiter, Cook, Food), beWaiter4(Waiter), Time),
   
    [ equals(waiterOf(Restaurant), Waiter),
      equals(cookOf(Restaurant), Cook),
      holds_at(beWaiter3(Waiter), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4288
% [waiter,food,time]
% HoldsAt(BeWaiter4(waiter),time) &
% ({agent} HoldsAt(KnowOrder(waiter,agent,food),time)) &
% HoldsAt(FoodPrepared(food),time) ->
% Happens(PickUp(waiter,food),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4292
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4290).

 /*  holds_at(beWaiter4(Waiter), Time), exists([Agent], holds_at(knowOrder(Waiter, Agent, Food), Time)), holds_at(foodPrepared(Food), Time) ->
       happens(pickUp(Waiter, Food), Time).
 */

 /*  happens(pickUp(Waiter, Food), Time) :-
       holds_at(beWaiter4(Waiter), Time),
       holds_at(knowOrder(Waiter, Agent, Food), Time),
       holds_at(foodPrepared(Food), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4290).

 /*  [holds_at(beWaiter4(Waiter), Time), holds_at(knowOrder(Waiter, Agent, Food), Time), holds_at(foodPrepared(Food), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(pickUp(Waiter, Food), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4290).
axiom(happens(pickUp(Waiter, Food), Time),
   
    [ holds_at(beWaiter4(Waiter), Time),
      holds_at(knowOrder(Waiter, Agent, Food), Time),
      holds_at(foodPrepared(Food), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4290).

 /*  not(holds_at(beWaiter4(Waiter), Time)) :-
       ( holds_at(knowOrder(Waiter, Agent, Food), Time),
         holds_at(foodPrepared(Food), Time)
       ),
       not(happens(pickUp(Waiter, Food), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4290).

 /*  [holds_at(knowOrder(Waiter, Agent, Food), Time), holds_at(foodPrepared(Food), Time), not(happens(pickUp(Waiter, Food), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(beWaiter4(Waiter)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4290).
axiom(holds_at(neg(beWaiter4(Waiter)), Time),
   
    [ holds_at(knowOrder(Waiter, Agent, Food), Time),
      holds_at(foodPrepared(Food), Time),
      not(happens(pickUp(Waiter, Food), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4290).

 /*  not(holds_at(knowOrder(Waiter, Agent, Food), Time)) :-
       holds_at(foodPrepared(Food), Time),
       holds_at(beWaiter4(Waiter), Time),
       not(happens(pickUp(Waiter, Food), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4290).

 /*  [holds_at(foodPrepared(Food), Time), holds_at(beWaiter4(Waiter), Time), not(happens(pickUp(Waiter, Food), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(knowOrder(Waiter, Agent, Food)),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4290).
axiom(holds_at(neg(knowOrder(Waiter, Agent, Food)), Time),
   
    [ holds_at(foodPrepared(Food), Time),
      holds_at(beWaiter4(Waiter), Time),
      not(happens(pickUp(Waiter, Food), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4290).

 /*  not(holds_at(foodPrepared(Food), Time)) :-
       holds_at(knowOrder(Waiter, Agent, Food), Time),
       holds_at(beWaiter4(Waiter), Time),
       not(happens(pickUp(Waiter, Food), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4290).

 /*  [holds_at(knowOrder(Waiter, Agent, Food), Time), holds_at(beWaiter4(Waiter), Time), not(happens(pickUp(Waiter, Food), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(foodPrepared(Food)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4290).
axiom(holds_at(neg(foodPrepared(Food)), Time),
   
    [ holds_at(knowOrder(Waiter, Agent, Food), Time),
      holds_at(beWaiter4(Waiter), Time),
      not(happens(pickUp(Waiter, Food), Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4294
% [waiter,food,time]
% HoldsAt(BeWaiter4(waiter),time) &
% ({agent} HoldsAt(KnowOrder(waiter,agent,food),time)) ->
% Terminates(PickUp(waiter,food),
%            BeWaiter4(waiter),
%            time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4299
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4296).

 /*  [holds_at(beWaiter4(Waiter), Time), holds_at(knowOrder(Waiter, Agent, Food), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(pickUp(Waiter, Food),
                     beWaiter4(Waiter),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4296).
axiom(terminates(pickUp(Waiter, Food), beWaiter4(Waiter), Time),
   
    [ holds_at(beWaiter4(Waiter), Time),
      holds_at(knowOrder(Waiter, Agent, Food), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4301
% [waiter,food,time]
% HoldsAt(BeWaiter4(waiter),time) &
% ({agent} HoldsAt(KnowOrder(waiter,agent,food),time)) ->
% Initiates(PickUp(waiter,food),
%           BeWaiter5(waiter),
%           time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4306
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4303).

 /*  [holds_at(beWaiter4(Waiter), Time), holds_at(knowOrder(Waiter, Agent, Food), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(pickUp(Waiter, Food),
                    beWaiter5(Waiter),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4303).
axiom(initiates(pickUp(Waiter, Food), beWaiter5(Waiter), Time),
   
    [ holds_at(beWaiter4(Waiter), Time),
      holds_at(knowOrder(Waiter, Agent, Food), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4308
% [restaurant,waiter,time]
% WaiterOf(restaurant)=waiter &
% HoldsAt(BeWaiter5(waiter),time) ->
% Happens(WalkThroughDoor21(waiter,KitchenDoorOf(restaurant)),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4311
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4310).

 /*  equals(waiterOf(Restaurant), Waiter), holds_at(beWaiter5(Waiter), Time) ->
       happens(walkThroughDoor21(Waiter, kitchenDoorOf(Restaurant)),
               Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4310).

 /*  happens(walkThroughDoor21(Waiter, kitchenDoorOf(Restaurant)), Time) :-
       equals(waiterOf(Restaurant), Waiter),
       holds_at(beWaiter5(Waiter), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4310).

 /*  [equals(waiterOf(Restaurant), Waiter), holds_at(beWaiter5(Waiter), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(walkThroughDoor21(Waiter, kitchenDoorOf(Restaurant)),
                  Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4310).
axiom(happens(walkThroughDoor21(Waiter, kitchenDoorOf(Restaurant)), Time),
   
    [ equals(waiterOf(Restaurant), Waiter),
      holds_at(beWaiter5(Waiter), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4310).

 /*  not(holds_at(beWaiter5(Waiter), Time)) :-
       equals(waiterOf(Restaurant), Waiter),
       not(happens(walkThroughDoor21(Waiter,
                                     kitchenDoorOf(Restaurant)),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4310).

 /*  [equals(waiterOf(Restaurant), Waiter), not(happens(walkThroughDoor21(Waiter, kitchenDoorOf(Restaurant)), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(beWaiter5(Waiter)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4310).
axiom(holds_at(neg(beWaiter5(Waiter)), Time),
   
    [ equals(waiterOf(Restaurant), Waiter),
      not(happens(walkThroughDoor21(Waiter,
                                    kitchenDoorOf(Restaurant)),
                  Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4313
% [restaurant,waiter,door,time]
% HoldsAt(BeWaiter5(waiter),time) &
% WaiterOf(restaurant)=waiter &
% KitchenDoorOf(restaurant)=door ->
% Terminates(WalkThroughDoor21(waiter,door),
%            BeWaiter5(waiter),
%            time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4319
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4315).

 /*  [holds_at(beWaiter5(Waiter), Time), equals(waiterOf(Restaurant), Waiter), equals(kitchenDoorOf(Restaurant), Door)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(walkThroughDoor21(Waiter, Door),
                     beWaiter5(Waiter),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4315).
axiom(terminates(walkThroughDoor21(Waiter, Door), beWaiter5(Waiter), Time),
   
    [ holds_at(beWaiter5(Waiter), Time),
      equals(waiterOf(Restaurant), Waiter),
      equals(kitchenDoorOf(Restaurant), Door)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4321
% [restaurant,waiter,door,time]
% HoldsAt(BeWaiter5(waiter),time) &
% WaiterOf(restaurant)=waiter &
% KitchenDoorOf(restaurant)=door ->
% Initiates(WalkThroughDoor21(waiter,door),
%           BeWaiter6(waiter),
%           time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4327
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4323).

 /*  [holds_at(beWaiter5(Waiter), Time), equals(waiterOf(Restaurant), Waiter), equals(kitchenDoorOf(Restaurant), Door)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(walkThroughDoor21(Waiter, Door),
                    beWaiter6(Waiter),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4323).
axiom(initiates(walkThroughDoor21(Waiter, Door), beWaiter6(Waiter), Time),
   
    [ holds_at(beWaiter5(Waiter), Time),
      equals(waiterOf(Restaurant), Waiter),
      equals(kitchenDoorOf(Restaurant), Door)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4329
% [restaurant,waiter,table,food,time]
% WaiterOf(restaurant)=waiter &
% TableOf(restaurant)=table &
% HoldsAt(BeWaiter6(waiter),time) &
% HoldsAt(Holding(waiter,food),time) ->
% Happens(PlaceOn(waiter,food,table),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4334
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4331).

 /*  equals(waiterOf(Restaurant), Waiter), equals(tableOf(Restaurant), Table), holds_at(beWaiter6(Waiter), Time), holds_at(holding(Waiter, Food), Time) ->
       happens(placeOn(Waiter, Food, Table), Time).
 */

 /*  happens(placeOn(Waiter, Food, Table), Time) :-
       equals(waiterOf(Restaurant), Waiter),
       equals(tableOf(Restaurant), Table),
       holds_at(beWaiter6(Waiter), Time),
       holds_at(holding(Waiter, Food), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4331).

 /*  [equals(waiterOf(Restaurant), Waiter), equals(tableOf(Restaurant), Table), holds_at(beWaiter6(Waiter), Time), holds_at(holding(Waiter, Food), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(placeOn(Waiter, Food, Table), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4331).
axiom(happens(placeOn(Waiter, Food, Table), Time),
   
    [ equals(waiterOf(Restaurant), Waiter),
      equals(tableOf(Restaurant), Table),
      holds_at(beWaiter6(Waiter), Time),
      holds_at(holding(Waiter, Food), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4331).

 /*  not(holds_at(beWaiter6(Waiter), Time)) :-
       holds_at(holding(Waiter, Food), Time),
       equals(tableOf(Restaurant), Table),
       equals(waiterOf(Restaurant), Waiter),
       not(happens(placeOn(Waiter, Food, Table), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4331).

 /*  [holds_at(holding(Waiter, Food), Time), equals(tableOf(Restaurant), Table), equals(waiterOf(Restaurant), Waiter), not(happens(placeOn(Waiter, Food, Table), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(beWaiter6(Waiter)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4331).
axiom(holds_at(neg(beWaiter6(Waiter)), Time),
   
    [ holds_at(holding(Waiter, Food), Time),
      equals(tableOf(Restaurant), Table),
      equals(waiterOf(Restaurant), Waiter),
      not(happens(placeOn(Waiter, Food, Table), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4331).

 /*  not(holds_at(holding(Waiter, Food), Time)) :-
       holds_at(beWaiter6(Waiter), Time),
       equals(tableOf(Restaurant), Table),
       equals(waiterOf(Restaurant), Waiter),
       not(happens(placeOn(Waiter, Food, Table), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4331).

 /*  [holds_at(beWaiter6(Waiter), Time), equals(tableOf(Restaurant), Table), equals(waiterOf(Restaurant), Waiter), not(happens(placeOn(Waiter, Food, Table), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(holding(Waiter, Food)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4331).
axiom(holds_at(neg(holding(Waiter, Food)), Time),
   
    [ holds_at(beWaiter6(Waiter), Time),
      equals(tableOf(Restaurant), Table),
      equals(waiterOf(Restaurant), Waiter),
      not(happens(placeOn(Waiter, Food, Table), Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4336
% [waiter,food,table,time]
% HoldsAt(BeWaiter6(waiter),time) ->
% Terminates(PlaceOn(waiter,food,table),
%            BeWaiter6(waiter),
%            time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4340
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4338).

 /*  [holds_at(beWaiter6(Waiter), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(placeOn(Waiter, Food, Table),
                     beWaiter6(Waiter),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4338).
axiom(terminates(placeOn(Waiter, Food, Table), beWaiter6(Waiter), Time),
    [holds_at(beWaiter6(Waiter), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4342
% [waiter,food,table,time]
% HoldsAt(BeWaiter6(waiter),time) ->
% Initiates(PlaceOn(waiter,food,table),
%           BeWaiter7(waiter),
%           time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4346
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4344).

 /*  [holds_at(beWaiter6(Waiter), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(placeOn(Waiter, Food, Table),
                    beWaiter7(Waiter),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4344).
axiom(initiates(placeOn(Waiter, Food, Table), beWaiter7(Waiter), Time),
    [holds_at(beWaiter6(Waiter), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4348
% [waiter,agent,bill,time]
% HoldsAt(BeWaiter7(waiter),time) ->
% Terminates(Request(agent,waiter,bill),
%            BeWaiter7(waiter),
%            time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4352
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4350).

 /*  [holds_at(beWaiter7(Waiter), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(request(Agent, Waiter, Bill),
                     beWaiter7(Waiter),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4350).
axiom(terminates(request(Agent, Waiter, Bill), beWaiter7(Waiter), Time),
    [holds_at(beWaiter7(Waiter), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4354
% [waiter,agent,bill,time]
% HoldsAt(BeWaiter7(waiter),time) ->
% Initiates(Request(agent,waiter,bill),
%           BeWaiter8(waiter),
%           time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4358
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4356).

 /*  [holds_at(beWaiter7(Waiter), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(request(Agent, Waiter, Bill),
                    beWaiter8(Waiter),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4356).
axiom(initiates(request(Agent, Waiter, Bill), beWaiter8(Waiter), Time),
    [holds_at(beWaiter7(Waiter), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4360
% [restaurant,waiter,bill,time]
% WaiterOf(restaurant)=waiter &
% BillOf(restaurant)=bill &
% HoldsAt(BeWaiter8(waiter),time) ->
% Happens(PickUp(waiter,bill),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4364
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4362).

 /*  equals(waiterOf(Restaurant), Waiter), equals(billOf(Restaurant), Bill), holds_at(beWaiter8(Waiter), Time) ->
       happens(pickUp(Waiter, Bill), Time).
 */

 /*  happens(pickUp(Waiter, Bill), Time) :-
       equals(waiterOf(Restaurant), Waiter),
       equals(billOf(Restaurant), Bill),
       holds_at(beWaiter8(Waiter), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4362).

 /*  [equals(waiterOf(Restaurant), Waiter), equals(billOf(Restaurant), Bill), holds_at(beWaiter8(Waiter), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(pickUp(Waiter, Bill), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4362).
axiom(happens(pickUp(Waiter, Bill), Time),
   
    [ equals(waiterOf(Restaurant), Waiter),
      equals(billOf(Restaurant), Bill),
      holds_at(beWaiter8(Waiter), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4362).

 /*  not(holds_at(beWaiter8(Waiter), Time)) :-
       equals(billOf(Restaurant), Bill),
       equals(waiterOf(Restaurant), Waiter),
       not(happens(pickUp(Waiter, Bill), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4362).

 /*  [equals(billOf(Restaurant), Bill), equals(waiterOf(Restaurant), Waiter), not(happens(pickUp(Waiter, Bill), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(beWaiter8(Waiter)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4362).
axiom(holds_at(neg(beWaiter8(Waiter)), Time),
   
    [ equals(billOf(Restaurant), Bill),
      equals(waiterOf(Restaurant), Waiter),
      not(happens(pickUp(Waiter, Bill), Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4366
% [waiter,bill,time]
% HoldsAt(BeWaiter8(waiter),time) ->
% Terminates(PickUp(waiter,bill),
%            BeWaiter8(waiter),
%            time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4370
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4368).

 /*  [holds_at(beWaiter8(Waiter), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(pickUp(Waiter, Bill),
                     beWaiter8(Waiter),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4368).
axiom(terminates(pickUp(Waiter, Bill), beWaiter8(Waiter), Time),
    [holds_at(beWaiter8(Waiter), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4372
% [waiter,bill,time]
% HoldsAt(BeWaiter8(waiter),time) ->
% Initiates(PickUp(waiter,bill),
%           BeWaiter9(waiter),
%           time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4376
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4374).

 /*  [holds_at(beWaiter8(Waiter), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(pickUp(Waiter, Bill),
                    beWaiter9(Waiter),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4374).
axiom(initiates(pickUp(Waiter, Bill), beWaiter9(Waiter), Time),
    [holds_at(beWaiter8(Waiter), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4378
% [restaurant,waiter,bill,table,time]
% WaiterOf(restaurant)=waiter &
% BillOf(restaurant)=bill &
% TableOf(restaurant)=table &
% HoldsAt(BeWaiter9(waiter),time) ->
% Happens(PlaceOn(waiter,bill,table),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4383
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4380).

 /*  equals(waiterOf(Restaurant), Waiter), equals(billOf(Restaurant), Bill), equals(tableOf(Restaurant), Table), holds_at(beWaiter9(Waiter), Time) ->
       happens(placeOn(Waiter, Bill, Table), Time).
 */

 /*  happens(placeOn(Waiter, Bill, Table), Time) :-
       equals(waiterOf(Restaurant), Waiter),
       equals(billOf(Restaurant), Bill),
       equals(tableOf(Restaurant), Table),
       holds_at(beWaiter9(Waiter), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4380).

 /*  [equals(waiterOf(Restaurant), Waiter), equals(billOf(Restaurant), Bill), equals(tableOf(Restaurant), Table), holds_at(beWaiter9(Waiter), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(placeOn(Waiter, Bill, Table), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4380).
axiom(happens(placeOn(Waiter, Bill, Table), Time),
   
    [ equals(waiterOf(Restaurant), Waiter),
      equals(billOf(Restaurant), Bill),
      equals(tableOf(Restaurant), Table),
      holds_at(beWaiter9(Waiter), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4380).

 /*  not(holds_at(beWaiter9(Waiter), Time)) :-
       equals(tableOf(Restaurant), Table),
       equals(billOf(Restaurant), Bill),
       equals(waiterOf(Restaurant), Waiter),
       not(happens(placeOn(Waiter, Bill, Table), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4380).

 /*  [equals(tableOf(Restaurant), Table), equals(billOf(Restaurant), Bill), equals(waiterOf(Restaurant), Waiter), not(happens(placeOn(Waiter, Bill, Table), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(beWaiter9(Waiter)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4380).
axiom(holds_at(neg(beWaiter9(Waiter)), Time),
   
    [ equals(tableOf(Restaurant), Table),
      equals(billOf(Restaurant), Bill),
      equals(waiterOf(Restaurant), Waiter),
      not(happens(placeOn(Waiter, Bill, Table), Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4385
% [waiter,bill,table,time]
% HoldsAt(BeWaiter9(waiter),time) ->
% Terminates(PlaceOn(waiter,bill,table),
%            BeWaiter9(waiter),
%            time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4389
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4387).

 /*  [holds_at(beWaiter9(Waiter), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(placeOn(Waiter, Bill, Table),
                     beWaiter9(Waiter),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4387).
axiom(terminates(placeOn(Waiter, Bill, Table), beWaiter9(Waiter), Time),
    [holds_at(beWaiter9(Waiter), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4391
% [waiter,bill,table,time]
% HoldsAt(BeWaiter9(waiter),time) ->
% Initiates(PlaceOn(waiter,bill,table),
%           BeWaiter0(waiter),
%           time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4395
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4393).

 /*  [holds_at(beWaiter9(Waiter), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(placeOn(Waiter, Bill, Table),
                    beWaiter0(Waiter),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4393).
axiom(initiates(placeOn(Waiter, Bill, Table), beWaiter0(Waiter), Time),
    [holds_at(beWaiter9(Waiter), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4397
%; awaiting next waiter order

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4398
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4399).
% fluent BeCook0(cook)
fluent(beCook0(cook)).
==> mpred_prop(beCook0(cook),fluent).
==> meta_argtypes(beCook0(cook)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4400
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4401).
%; waiter order received

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4401
% fluent BeCook1(cook)
fluent(beCook1(cook)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4401).
==> mpred_prop(beCook1(cook),fluent).
==> meta_argtypes(beCook1(cook)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4403
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4404).
% xor BeCook0, BeCook1
==> xor([beCook0,beCook1]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4405
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4406).
% [cook,agent,food,time]
% HoldsAt(BeCook0(cook),time) ->
% Terminates(Order(agent,cook,food),
%            BeCook0(cook),
%            time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4409
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4406).

 /*  [holds_at(beCook0(Cook), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(order(Agent, Cook, Food),
                     beCook0(Cook),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4406).
axiom(terminates(order(Agent, Cook, Food), beCook0(Cook), Time),
    [holds_at(beCook0(Cook), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4411
% [cook,agent,food,time]
% HoldsAt(BeCook0(cook),time) ->
% Initiates(Order(agent,cook,food),
%           BeCook1(cook),
%           time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4415
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4413).

 /*  [holds_at(beCook0(Cook), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(order(Agent, Cook, Food),
                    beCook1(Cook),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4413).
axiom(initiates(order(Agent, Cook, Food), beCook1(Cook), Time),
    [holds_at(beCook0(Cook), Time)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4417
% event FoodPrepare(agent,food)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4417).
event(foodPrepare(agent,food)).
==> mpred_prop(foodPrepare(agent,food),event).
==> meta_argtypes(foodPrepare(agent,food)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4419
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4420).
% fluent FoodPrepared(food)
fluent(foodPrepared(food)).
==> mpred_prop(foodPrepared(food),fluent).
==> meta_argtypes(foodPrepared(food)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4421
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4422).
% [agent,food,time]
% Initiates(FoodPrepare(agent,food),
%           FoodPrepared(food),
%           time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4424
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4422).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(foodPrepare(Agent, Food),
                    foodPrepared(Food),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4422).
axiom(initiates(foodPrepare(Agent, Food), foodPrepared(Food), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4426
% [agent,food,time]
% Happens(FoodPrepare(agent,food),time) ->
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4428
% {location}% 
% HoldsAt(At(agent,location),time) &
% HoldsAt(At(food,location),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4430
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4428).

 /*  exists([Location],
    happens(foodPrepare(Agent, Food), Time) ->
       holds_at(at(Agent, Location), Time),
       holds_at(at(Food, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4428).

 /*  not(happens(foodPrepare(Agent, Food), Time)) :-
       (   not(holds_at(at(Agent, Location), Time))
       ;   not(holds_at(at(Food, Location), Time))
       ),
       some(Location, '$kolem_Fn_390'(Agent, Food, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4428).

 /*  [(holds_at(neg(at(Agent, Location)), Time);holds_at(neg(at(Food, Location)), Time)), some(Location, '$kolem_Fn_390'(Agent, Food, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(foodPrepare(Agent, Food), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4428).
axiom(not(happens(foodPrepare(Agent, Food), Time)),
   
    [  (holds_at(neg(at(Agent, Location)), Time);holds_at(neg(at(Food, Location)), Time)),
      some(Location, '$kolem_Fn_390'(Agent, Food, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4428).

 /*  holds_at(at(Agent, Location), Time) :-
       happens(foodPrepare(Agent, Food), Time),
       some(Location, '$kolem_Fn_390'(Agent, Food, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4428).

 /*  [happens(foodPrepare(Agent, Food), Time), some(Location, '$kolem_Fn_390'(Agent, Food, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(at(Agent, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4428).
axiom(holds_at(at(Agent, Location), Time),
   
    [ happens(foodPrepare(Agent, Food), Time),
      some(Location, '$kolem_Fn_390'(Agent, Food, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4428).

 /*  holds_at(at(Food, Location), Time) :-
       happens(foodPrepare(Agent, Food), Time),
       some(Location, '$kolem_Fn_390'(Agent, Food, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4428).

 /*  [happens(foodPrepare(Agent, Food), Time), some(Location, '$kolem_Fn_390'(Agent, Food, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(at(Food, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4428).
axiom(holds_at(at(Food, Location), Time),
   
    [ happens(foodPrepare(Agent, Food), Time),
      some(Location, '$kolem_Fn_390'(Agent, Food, Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4432
% [cook,agent,food,time]
% HoldsAt(BeCook1(cook),time) &
% HoldsAt(KnowOrder(cook,agent,food),time) ->
% Happens(FoodPrepare(cook,food),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4435
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4434).

 /*  holds_at(beCook1(Cook), Time), holds_at(knowOrder(Cook, Agent, Food), Time) ->
       happens(foodPrepare(Cook, Food), Time).
 */

 /*  happens(foodPrepare(Cook, Food), Time) :-
       holds_at(beCook1(Cook), Time),
       holds_at(knowOrder(Cook, Agent, Food), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4434).

 /*  [holds_at(beCook1(Cook), Time), holds_at(knowOrder(Cook, Agent, Food), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(foodPrepare(Cook, Food), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4434).
axiom(happens(foodPrepare(Cook, Food), Time),
   
    [ holds_at(beCook1(Cook), Time),
      holds_at(knowOrder(Cook, Agent, Food), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4434).

 /*  not(holds_at(beCook1(Cook), Time)) :-
       holds_at(knowOrder(Cook, Agent, Food), Time),
       not(happens(foodPrepare(Cook, Food), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4434).

 /*  [holds_at(knowOrder(Cook, Agent, Food), Time), not(happens(foodPrepare(Cook, Food), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(beCook1(Cook)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4434).
axiom(holds_at(neg(beCook1(Cook)), Time),
   
    [ holds_at(knowOrder(Cook, Agent, Food), Time),
      not(happens(foodPrepare(Cook, Food), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4434).

 /*  not(holds_at(knowOrder(Cook, Agent, Food), Time)) :-
       holds_at(beCook1(Cook), Time),
       not(happens(foodPrepare(Cook, Food), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4434).

 /*  [holds_at(beCook1(Cook), Time), not(happens(foodPrepare(Cook, Food), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(knowOrder(Cook, Agent, Food)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4434).
axiom(holds_at(neg(knowOrder(Cook, Agent, Food)), Time),
   
    [ holds_at(beCook1(Cook), Time),
      not(happens(foodPrepare(Cook, Food), Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4437
% [cook,food,time]
% HoldsAt(BeCook1(cook),time) ->
% Terminates(FoodPrepare(cook,food),
%            BeCook1(cook),
%            time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4441
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4439).

 /*  [holds_at(beCook1(Cook), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(foodPrepare(Cook, Food),
                     beCook1(Cook),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4439).
axiom(terminates(foodPrepare(Cook, Food), beCook1(Cook), Time),
    [holds_at(beCook1(Cook), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4443
% [cook,food,time]
% HoldsAt(BeCook1(cook),time) ->
% Initiates(FoodPrepare(cook,food),
%           BeCook0(cook),
%           time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4447
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4445).

 /*  [holds_at(beCook1(Cook), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(foodPrepare(Cook, Food),
                    beCook0(Cook),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4445).
axiom(initiates(foodPrepare(Cook, Food), beCook0(Cook), Time),
    [holds_at(beCook1(Cook), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4449
%; End of file.
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%; FILE: ecnet/EatingInAHouse.e
%; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; @article{Mueller:2004c,
%;   author = "Erik T. Mueller",
%;   year = "2004",
%;   title = "Understanding script-based stories using commonsense reasoning",
%;   journal = "Cognitive Systems Research",
%;   volume = "5",
%;   number = "4",
%;   pages = "307--340",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4478
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4479).
% option modeldiff on
:- set_ec_option(modeldiff, on).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4479
% option encoding 3
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4479).
:- set_ec_option(encoding, 3).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4480
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4481).
% option renaming off
:- set_ec_option(renaming, off).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4482
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4483).
% ignore Love, ThreatenedBy

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], ignore(love)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4483).
axiom(ignore(love),
    []).

 /*  [] ->
       ta(Ta_Param1, tvs1=[], tvs2=[], ignore(threatenedBy)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4483).
axiom(ignore(threatenedBy),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4483
% ignore LookOutOnto, Floor, BuildingOf, SkyOf, GroundOf
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4483).

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], ignore(lookOutOnto)).
 */
axiom(ignore(lookOutOnto),
    []).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4483).

 /*  [] ->
       ta(Ta_Param1, tvs1=[], tvs2=[], ignore(floor)).
 */
axiom(ignore(floor),
    []).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4483).

 /*  [] ->
       ta(Ta_Param2, tvs1=[], tvs2=[], ignore(buildingOf)).
 */
axiom(ignore(buildingOf),
    []).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4483).

 /*  [] ->
       ta(Ta_Param3, tvs1=[], tvs2=[], ignore(skyOf)).
 */
axiom(ignore(skyOf),
    []).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4483).

 /*  [] ->
       ta(Ta_Param4, tvs1=[], tvs2=[], ignore(groundOf)).
 */
axiom(ignore(groundOf),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4484
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4485).
% ignore Inside

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], ignore(inside)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4485).
axiom(ignore(inside),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4485
% ignore Near, WalkFrom, WalkFromTo, RunFromTo
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4485).

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], ignore(near)).
 */
axiom(ignore(near),
    []).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4485).

 /*  [] ->
       ta(Ta_Param1, tvs1=[], tvs2=[], ignore(walkFrom)).
 */
axiom(ignore(walkFrom),
    []).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4485).

 /*  [] ->
       ta(Ta_Param2, tvs1=[], tvs2=[], ignore(walkFromTo)).
 */
axiom(ignore(walkFromTo),
    []).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4485).

 /*  [] ->
       ta(Ta_Param3, tvs1=[], tvs2=[], ignore(runFromTo)).
 */
axiom(ignore(runFromTo),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4486
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4487).
% ignore BillOf, CookOf, TableOf, WaiterOf, KitchenDoorOf

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], ignore(billOf)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4487).
axiom(ignore(billOf),
    []).

 /*  [] ->
       ta(Ta_Param1, tvs1=[], tvs2=[], ignore(cookOf)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4487).
axiom(ignore(cookOf),
    []).

 /*  [] ->
       ta(Ta_Param2, tvs1=[], tvs2=[], ignore(tableOf)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4487).
axiom(ignore(tableOf),
    []).

 /*  [] ->
       ta(Ta_Param3, tvs1=[], tvs2=[], ignore(waiterOf)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4487).
axiom(ignore(waiterOf),
    []).

 /*  [] ->
       ta(Ta_Param4, tvs1=[], tvs2=[], ignore(kitchenDoorOf)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4487).
axiom(ignore(kitchenDoorOf),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4487
% ignore BeWaiter0, BeWaiter1, BeWaiter2, BeWaiter3, BeWaiter4
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4487).

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], ignore(beWaiter0)).
 */
axiom(ignore(beWaiter0),
    []).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4487).

 /*  [] ->
       ta(Ta_Param1, tvs1=[], tvs2=[], ignore(beWaiter1)).
 */
axiom(ignore(beWaiter1),
    []).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4487).

 /*  [] ->
       ta(Ta_Param2, tvs1=[], tvs2=[], ignore(beWaiter2)).
 */
axiom(ignore(beWaiter2),
    []).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4487).

 /*  [] ->
       ta(Ta_Param3, tvs1=[], tvs2=[], ignore(beWaiter3)).
 */
axiom(ignore(beWaiter3),
    []).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4487).

 /*  [] ->
       ta(Ta_Param4, tvs1=[], tvs2=[], ignore(beWaiter4)).
 */
axiom(ignore(beWaiter4),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4488
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4489).
% ignore BeWaiter5, BeWaiter6, BeWaiter7, BeWaiter8, BeWaiter9

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], ignore(beWaiter5)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4489).
axiom(ignore(beWaiter5),
    []).

 /*  [] ->
       ta(Ta_Param1, tvs1=[], tvs2=[], ignore(beWaiter6)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4489).
axiom(ignore(beWaiter6),
    []).

 /*  [] ->
       ta(Ta_Param2, tvs1=[], tvs2=[], ignore(beWaiter7)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4489).
axiom(ignore(beWaiter7),
    []).

 /*  [] ->
       ta(Ta_Param3, tvs1=[], tvs2=[], ignore(beWaiter8)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4489).
axiom(ignore(beWaiter8),
    []).

 /*  [] ->
       ta(Ta_Param4, tvs1=[], tvs2=[], ignore(beWaiter9)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4489).
axiom(ignore(beWaiter9),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4489
% ignore BeCook0, BeCook1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4489).

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], ignore(beCook0)).
 */
axiom(ignore(beCook0),
    []).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4489).

 /*  [] ->
       ta(Ta_Param1, tvs1=[], tvs2=[], ignore(beCook1)).
 */
axiom(ignore(beCook1),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4490
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4491).
% ignore InviteIn, InvitedIn, IntendToWalkIn, IntentionToWalkIn

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], ignore(inviteIn)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4491).
axiom(ignore(inviteIn),
    []).

 /*  [] ->
       ta(Ta_Param1, tvs1=[], tvs2=[], ignore(invitedIn)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4491).
axiom(ignore(invitedIn),
    []).

 /*  [] ->
       ta(Ta_Param2, tvs1=[], tvs2=[], ignore(intendToWalkIn)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4491).
axiom(ignore(intendToWalkIn),
    []).

 /*  [] ->
       ta(Ta_Param3, tvs1=[], tvs2=[], ignore(intentionToWalkIn)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4491).
axiom(ignore(intentionToWalkIn),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4491
% ignore ActOnIntentionToWalkIn, Greet, SayGoodbye, CryForJoy
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4491).

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], ignore(actOnIntentionToWalkIn)).
 */
axiom(ignore(actOnIntentionToWalkIn),
    []).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4491).

 /*  [] ->
       ta(Ta_Param1, tvs1=[], tvs2=[], ignore(greet)).
 */
axiom(ignore(greet),
    []).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4491).

 /*  [] ->
       ta(Ta_Param2, tvs1=[], tvs2=[], ignore(sayGoodbye)).
 */
axiom(ignore(sayGoodbye),
    []).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4491).

 /*  [] ->
       ta(Ta_Param3, tvs1=[], tvs2=[], ignore(cryForJoy)).
 */
axiom(ignore(cryForJoy),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4492
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4493).
% ignore Threaten, ReleaseFromThreat, ThreatenedBy

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], ignore(threaten)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4493).
axiom(ignore(threaten),
    []).

 /*  [] ->
       ta(Ta_Param1, tvs1=[], tvs2=[], ignore(releaseFromThreat)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4493).
axiom(ignore(releaseFromThreat),
    []).

 /*  [] ->
       ta(Ta_Param2, tvs1=[], tvs2=[], ignore(threatenedBy)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4493).
axiom(ignore(threatenedBy),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4493
% ignore Order, KnowOrder, Request, KnowRequest
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4493).

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], ignore(order)).
 */
axiom(ignore(order),
    []).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4493).

 /*  [] ->
       ta(Ta_Param1, tvs1=[], tvs2=[], ignore(knowOrder)).
 */
axiom(ignore(knowOrder),
    []).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4493).

 /*  [] ->
       ta(Ta_Param2, tvs1=[], tvs2=[], ignore(request)).
 */
axiom(ignore(request),
    []).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4493).

 /*  [] ->
       ta(Ta_Param3, tvs1=[], tvs2=[], ignore(knowRequest)).
 */
axiom(ignore(knowRequest),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4494
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4495).
% ignore PutInside, TakeOutOf

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], ignore(putInside)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4495).
axiom(ignore(putInside),
    []).

 /*  [] ->
       ta(Ta_Param1, tvs1=[], tvs2=[], ignore(takeOutOf)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4495).
axiom(ignore(takeOutOf),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4495
% ignore SayPleaseToMeet, Move
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4495).

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], ignore(sayPleaseToMeet)).
 */
axiom(ignore(sayPleaseToMeet),
    []).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4495).

 /*  [] ->
       ta(Ta_Param1, tvs1=[], tvs2=[], ignore(move)).
 */
axiom(ignore(move),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4497
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4498).
% load foundations/Root.e
:- load_e('foundations/Root.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4498
% load foundations/EC.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4498).
:- load_e('foundations/EC.e', changed).
:- if(is_e_toplevel).
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4499
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4500).
% load answers/Mueller2003/Ontology.e
:- load_e('answers/Mueller2003/Ontology.e', changed).
:- if(is_e_toplevel).
 %  load(changed,'answers/Mueller2003/Ontology.e').
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4500
% load answers/Mueller2004c/RTSpaceM.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4500).
:- load_e('answers/Mueller2004c/RTSpaceM.e', changed).
:- if(is_e_toplevel).
 %  load(changed,'answers/Mueller2004c/RTSpaceM.e').
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4501
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4502).
% load answers/Mueller2004c/OTSpaceM.e
:- load_e('answers/Mueller2004c/OTSpaceM.e', changed).
:- if(is_e_toplevel).
 %  load(changed,'answers/Mueller2004c/OTSpaceM.e').
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4502
% load answers/Mueller2004c/HungerNeed.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4502).
:- load_e('answers/Mueller2004c/HungerNeed.e', changed).
:- if(is_e_toplevel).
 %  load(changed,'answers/Mueller2004c/HungerNeed.e').
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4503
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4504).
% load answers/Mueller2004c/Restaurant.e
:- load_e('answers/Mueller2004c/Restaurant.e', changed).
:- if(is_e_toplevel).
 %  load(changed,'answers/Mueller2004c/Restaurant.e').
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4504
% load answers/Mueller2003/Sleep.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4504).
:- load_e('answers/Mueller2003/Sleep.e', changed).
:- if(is_e_toplevel).
 %  load(changed,'answers/Mueller2003/Sleep.e').
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4505
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4506).
% load answers/Mueller2003/SpeechAct.e
:- load_e('answers/Mueller2003/SpeechAct.e', changed).
:- if(is_e_toplevel).
 %  load(changed,'answers/Mueller2003/SpeechAct.e').
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4506
% load answers/Mueller2004c/Dress.e
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4506).
:- load_e('answers/Mueller2004c/Dress.e', changed).
:- if(is_e_toplevel).
 %  load(changed,'answers/Mueller2004c/Dress.e').
:- endif.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4508
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4509).
% room Upstairs1
==> t(room,upstairs1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4510
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4511).
% staircase Staircase1
==> t(staircase,staircase1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4512
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4513).
% room Hallway1
==> t(room,hallway1).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4514
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4515).
% Side1(Staircase1)=Hallway1.

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], equals(side1(staircase1), hallway1)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4515).
axiom(equals(side1(staircase1), hallway1),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4515
% Side2(Staircase1)=Upstairs1.
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4515).

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], equals(side2(staircase1), upstairs1)).
 */
axiom(equals(side2(staircase1), upstairs1),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4517
% door DiningRoomDoor1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4517).
==> t(door,diningRoomDoor1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4519
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4520).
% room DiningRoom1
==> t(room,diningRoom1).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4521
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4522).
% Side1(DiningRoomDoor1)=Hallway1.

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], equals(side1(diningRoomDoor1), hallway1)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4522).
axiom(equals(side1(diningRoomDoor1), hallway1),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4522
% Side2(DiningRoomDoor1)=DiningRoom1.
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4522).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[],
          tvs2=[],
          equals(side2(diningRoomDoor1), diningRoom1)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4522).
axiom(equals(side2(diningRoomDoor1), diningRoom1),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4524
% door KitchenDoor1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4524).
==> t(door,kitchenDoor1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4526
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4527).
% room Kitchen1
==> t(room,kitchen1).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4528
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4529).
% Side1(KitchenDoor1)=DiningRoom1.

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], equals(side1(kitchenDoor1), diningRoom1)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4529).
axiom(equals(side1(kitchenDoor1), diningRoom1),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4529
% Side2(KitchenDoor1)=Kitchen1.
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4529).

 /*  [] ->
       ta(Ta_Param, tvs1=[], tvs2=[], equals(side2(kitchenDoor1), kitchen1)).
 */
axiom(equals(side2(kitchenDoor1), kitchen1),
    []).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4531
% agent Eater1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4531).
==> t(agent,eater1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4533
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4534).
% agent Eater2
==> t(agent,eater2).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4535
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4536).
% clothing Clothing1
==> t(clothing,clothing1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4537
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4538).
% clothing Clothing2
==> t(clothing,clothing2).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4539
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4540).
% chair Chair1
==> t(chair,chair1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4541
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4542).
% chair Chair2
==> t(chair,chair2).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4543
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4544).
% food Food1
==> t(food,food1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4545
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4546).
% agent Cook1
==> t(agent,cook1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4547
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4548).
% table Table1
==> t(table,table1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4549
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4550).
% content Content1
==> t(content,content1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4551
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4552).
% content Content2
==> t(content,content2).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4553
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4554).
% outside DummyOutside1
==> t(outside,dummyOutside1).
%; prune

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4556
% sort ona, onb
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4556).
==> sort(ona).
==> sort(onb).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4557
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4558).
% fluent! On(ona,onb)
fluent(on(ona,onb)).
==> mpred_prop(on(ona,onb),fluent).
==> meta_argtypes(on(ona,onb)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4558
% event! PlaceOn(agent,ona,onb)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4558).
event(placeOn(agent,ona,onb)).
==> mpred_prop(placeOn(agent,ona,onb),event).
==> meta_argtypes(placeOn(agent,ona,onb)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4559
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4560).
% event! TakeOffOf(agent,ona,onb)
event(takeOffOf(agent,ona,onb)).
==> mpred_prop(takeOffOf(agent,ona,onb),event).
==> meta_argtypes(takeOffOf(agent,ona,onb)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4561
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4562).
% sort ordera, orderb, orderc
==> sort(ordera).
==> sort(orderb).
==> sort(orderc).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4562
% event! Order(ordera,orderb,orderc)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4562).
event(order(ordera,orderb,orderc)).
==> mpred_prop(order(ordera,orderb,orderc),event).
==> meta_argtypes(order(ordera,orderb,orderc)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4563
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4564).
% fluent! KnowOrder(orderb,ordera,orderc)
fluent(knowOrder(orderb,ordera,orderc)).
==> mpred_prop(knowOrder(orderb,ordera,orderc),fluent).
==> meta_argtypes(knowOrder(orderb,ordera,orderc)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4565
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4566).
% sort requesta, requestb, requestc
==> sort(requesta).
==> sort(requestb).
==> sort(requestc).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4566
% event! Request(requesta,requestb,requestc)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4566).
event(request(requesta,requestb,requestc)).
==> mpred_prop(request(requesta,requestb,requestc),event).
==> meta_argtypes(request(requesta,requestb,requestc)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4567
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4568).
% fluent! KnowRequest(requestb,requesta,requestc)
fluent(knowRequest(requestb,requesta,requestc)).
==> mpred_prop(knowRequest(requestb,requesta,requestc),fluent).
==> meta_argtypes(knowRequest(requestb,requesta,requestc)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4569
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4570).
% sort holda, holdb, holdc
==> sort(holda).
==> sort(holdb).
==> sort(holdc).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4570
% event! TakeOffOf(holda,holdb,holdc)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4570).
event(takeOffOf(holda,holdb,holdc)).
==> mpred_prop(takeOffOf(holda,holdb,holdc),event).
==> meta_argtypes(takeOffOf(holda,holdb,holdc)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4571
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4572).
% event! PickUp(holda,holdb)
event(pickUp(holda,holdb)).
==> mpred_prop(pickUp(holda,holdb),event).
==> meta_argtypes(pickUp(holda,holdb)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4572
% event! LetGoOf(holda,holdb)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4572).
event(letGoOf(holda,holdb)).
==> mpred_prop(letGoOf(holda,holdb),event).
==> meta_argtypes(letGoOf(holda,holdb)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4573
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4574).
% event! Hold(holda,holdb)
event(hold(holda,holdb)).
==> mpred_prop(hold(holda,holdb),event).
==> meta_argtypes(hold(holda,holdb)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4574
% fluent! Holding(holda,holdb)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4574).
fluent(holding(holda,holdb)).
==> mpred_prop(holding(holda,holdb),fluent).
==> meta_argtypes(holding(holda,holdb)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4576
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4577).
% sort sita, sitb
==> sort(sita).
==> sort(sitb).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4577
% event! LieOn(sita,sitb)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4577).
event(lieOn(sita,sitb)).
==> mpred_prop(lieOn(sita,sitb),event).
==> meta_argtypes(lieOn(sita,sitb)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4578
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4579).
% event! SitOn(sita,sitb)
event(sitOn(sita,sitb)).
==> mpred_prop(sitOn(sita,sitb),event).
==> meta_argtypes(sitOn(sita,sitb)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4579
% event! RiseFrom(sita,sitb)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4579).
event(riseFrom(sita,sitb)).
==> mpred_prop(riseFrom(sita,sitb),event).
==> meta_argtypes(riseFrom(sita,sitb)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4580
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4581).
% fluent! LyingOn(sita,sitb)
fluent(lyingOn(sita,sitb)).
==> mpred_prop(lyingOn(sita,sitb),fluent).
==> meta_argtypes(lyingOn(sita,sitb)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4581
% fluent! SittingOn(sita,sitb)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4581).
fluent(sittingOn(sita,sitb)).
==> mpred_prop(sittingOn(sita,sitb),fluent).
==> meta_argtypes(sittingOn(sita,sitb)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4583
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4584).
% ona! Food1
==> t(ona,food1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4584
% onb! Table1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4584).
==> t(onb,table1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4585
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4586).
% holda! Cook1
==> t(holda,cook1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4586
% holdb! Food1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4586).
==> t(holdb,food1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4587
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4588).
% holdc! Table1
==> t(holdc,table1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4588
% sita! Eater1
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4588).
==> t(sita,eater1).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4589
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4590).
% sitb! Chair1
==> t(sitb,chair1).
%; initial situation
% [agent]
 
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4592
% HoldsAt(Dressed(agent),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4592).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(dressed(Agent), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4592).
axiom(holds_at(dressed(Agent), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4593
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4594).
% [agent]
 % HoldsAt(Awake(agent),0).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(awake(Agent), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4594).
axiom(holds_at(awake(Agent), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4594
% [agent]
 % HoldsAt(Sleep3(agent),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4594).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(sleep3(Agent), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4594).
axiom(holds_at(sleep3(Agent), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4595
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4596).
% [agent]
 % HoldsAt(Standing(agent),0).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(standing(Agent), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4596).
axiom(holds_at(standing(Agent), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4596
% [agent]
 % HoldsAt(Standing(agent),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4596).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(standing(Agent), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4596).
axiom(holds_at(standing(Agent), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4597
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4598).
% [agent,object]
 % !HoldsAt(Holding(agent,object),0).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(holding(Agent, Object)), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4598).
axiom(holds_at(neg(holding(Agent, Object)), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4598
% [food]
 % HoldsAt(At(food,Kitchen1),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4598).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(at(Food, kitchen1), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4598).
axiom(holds_at(at(Food, kitchen1), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4599
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4600).
% [food]
 % !HoldsAt(FoodPrepared(food),0).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(foodPrepared(Food)), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4600).
axiom(holds_at(neg(foodPrepared(Food)), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4600
% [agent]
 % HoldsAt(Hungry(agent),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4600).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(hungry(Agent), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4600).
axiom(holds_at(hungry(Agent), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4601
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4602).
% [door]
 % HoldsAt(DoorIsOpen(door),0).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(doorIsOpen(Door), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4602).
axiom(holds_at(doorIsOpen(Door), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4602
% [clothing]
 % HoldsAt(At(clothing,Upstairs1),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4602).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(at(Clothing, upstairs1), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4602).
axiom(holds_at(at(Clothing, upstairs1), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4603
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4604).
% [chair]
 % HoldsAt(At(chair,DiningRoom1),0).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(at(Chair, diningRoom1), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4604).
axiom(holds_at(at(Chair, diningRoom1), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4604
% HoldsAt(At(Cook1,Kitchen1),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4604).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(at(cook1, kitchen1), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4604).
axiom(holds_at(at(cook1, kitchen1), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4605
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4606).
% HoldsAt(At(Table1,DiningRoom1),0).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(at(table1, diningRoom1), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4606).
axiom(holds_at(at(table1, diningRoom1), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4606
% [agent,clothing]
 % !HoldsAt(Wearing(agent,clothing),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4606).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(neg(wearing(Agent, Clothing)), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4606).
axiom(holds_at(neg(wearing(Agent, Clothing)), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4608
%; narrative


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4609
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4610).
% HoldsAt(At(Cook1,Kitchen1),0).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(at(cook1, kitchen1), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4610).
axiom(holds_at(at(cook1, kitchen1), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4610
% HoldsAt(At(Eater1,Upstairs1),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4610).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(at(eater1, upstairs1), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4610).
axiom(holds_at(at(eater1, upstairs1), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4611
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4612).
% HoldsAt(At(Eater2,Upstairs1),0).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          holds_at(at(eater2, upstairs1), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4612).
axiom(holds_at(at(eater2, upstairs1), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4612
% Happens(FoodPrepare(Cook1,Food1),0).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4612).

 /*  [] ->
       ta(Ta_Param,
          tvs1=[start],
          tvs2=[start],
          happens(foodPrepare(cook1, food1), start)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4612).
axiom(happens(foodPrepare(cook1, food1), start),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4613
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4614).
% Happens(PutOn(Eater1,Clothing1),1).

 /*  [b(start, Maptime), ignore(start+1==Maptime)] ->
       ta(Ta_Param,
          tvs1=[start+1],
          tvs2=[Maptime, start],
          happens(putOn(eater1, clothing1), Maptime)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4614).
axiom(happens(putOn(eater1, clothing1), Maptime),
    [b(start, Maptime)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4614
% Happens(PutOn(Eater2,Clothing2),2).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4614).

 /*  [b(start, Start2), toffset(start, 2, Start2), ignore(start+2==Start2)] ->
       ta(Ta_Param,
          tvs1=[start+2],
          tvs2=[Start2, start],
          happens(putOn(eater2, clothing2), Start2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4614).
axiom(happens(putOn(eater2, clothing2), Start2),
    [b(start, Start2), toffset(start, 2, Start2)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4615
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4616).
% Happens(WalkDownStaircase(Eater1,Staircase1),3).

 /*  [b(start, Start3), toffset(start, 3, Start3), ignore(start+3==Start3)] ->
       ta(Ta_Param,
          tvs1=[start+3],
          tvs2=[Start3, start],
          happens(walkDownStaircase(eater1, staircase1), Start3)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4616).
axiom(happens(walkDownStaircase(eater1, staircase1), Start3),
    [b(start, Start3), toffset(start, 3, Start3)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4616
% Happens(WalkDownStaircase(Eater2,Staircase1),4).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4616).

 /*  [b(start, Start4), toffset(start, 4, Start4), ignore(start+4==Start4)] ->
       ta(Ta_Param,
          tvs1=[start+4],
          tvs2=[Start4, start],
          happens(walkDownStaircase(eater2, staircase1), Start4)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4616).
axiom(happens(walkDownStaircase(eater2, staircase1), Start4),
    [b(start, Start4), toffset(start, 4, Start4)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4617
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4618).
% Happens(WalkThroughDoor12(Eater1,DiningRoomDoor1),5).

 /*  [b(start, Start5), toffset(start, 5, Start5), ignore(start+5==Start5)] ->
       ta(Ta_Param,
          tvs1=[start+5],
          tvs2=[Start5, start],
          happens(walkThroughDoor12(eater1, diningRoomDoor1), Start5)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4618).
axiom(happens(walkThroughDoor12(eater1, diningRoomDoor1), Start5),
    [b(start, Start5), toffset(start, 5, Start5)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4618
% Happens(WalkThroughDoor12(Eater2,DiningRoomDoor1),6).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4618).

 /*  [b(start, Start6), toffset(start, 6, Start6), ignore(start+6==Start6)] ->
       ta(Ta_Param,
          tvs1=[start+6],
          tvs2=[Start6, start],
          happens(walkThroughDoor12(eater2, diningRoomDoor1), Start6)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4618).
axiom(happens(walkThroughDoor12(eater2, diningRoomDoor1), Start6),
    [b(start, Start6), toffset(start, 6, Start6)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4619
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4620).
% Happens(SitOn(Eater1,Chair1),7).

 /*  [b(start, Start7), toffset(start, 7, Start7), ignore(start+7==Start7)] ->
       ta(Ta_Param,
          tvs1=[start+7],
          tvs2=[Start7, start],
          happens(sitOn(eater1, chair1), Start7)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4620).
axiom(happens(sitOn(eater1, chair1), Start7),
    [b(start, Start7), toffset(start, 7, Start7)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4620
% Happens(SitOn(Eater2,Chair2),8).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4620).

 /*  [b(start, Start8), toffset(start, 8, Start8), ignore(start+8==Start8)] ->
       ta(Ta_Param,
          tvs1=[start+8],
          tvs2=[Start8, start],
          happens(sitOn(eater2, chair2), Start8)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4620).
axiom(happens(sitOn(eater2, chair2), Start8),
    [b(start, Start8), toffset(start, 8, Start8)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4621
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4622).
% Happens(PickUp(Cook1, Food1),9).

 /*  [b(start, Start9), toffset(start, 9, Start9), ignore(start+9==Start9)] ->
       ta(Ta_Param,
          tvs1=[start+9],
          tvs2=[Start9, start],
          happens(pickUp(cook1, food1), Start9)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4622).
axiom(happens(pickUp(cook1, food1), Start9),
    [b(start, Start9), toffset(start, 9, Start9)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4622
% Happens(WalkThroughDoor21(Cook1, KitchenDoor1),10).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4622).

 /*  [b(start, Startd10), toffset(start, 10, Startd10), ignore(start+10==Startd10)] ->
       ta(Ta_Param,
          tvs1=[start+10],
          tvs2=[Startd10, start],
          happens(walkThroughDoor21(cook1, kitchenDoor1), Startd10)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4622).
axiom(happens(walkThroughDoor21(cook1, kitchenDoor1), Startd10),
    [b(start, Startd10), toffset(start, 10, Startd10)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4623
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4624).
% Happens(PlaceOn(Cook1, Food1, Table1),11).

 /*  [b(start, Startd11), toffset(start, 11, Startd11), ignore(start+11==Startd11)] ->
       ta(Ta_Param,
          tvs1=[start+11],
          tvs2=[Startd11, start],
          happens(placeOn(cook1, food1, table1), Startd11)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4624).
axiom(happens(placeOn(cook1, food1, table1), Startd11),
    [b(start, Startd11), toffset(start, 11, Startd11)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4624
% Happens(WalkThroughDoor12(Cook1, KitchenDoor1),12).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4624).

 /*  [b(start, Startd12), toffset(start, 12, Startd12), ignore(start+12==Startd12)] ->
       ta(Ta_Param,
          tvs1=[start+12],
          tvs2=[Startd12, start],
          happens(walkThroughDoor12(cook1, kitchenDoor1), Startd12)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4624).
axiom(happens(walkThroughDoor12(cook1, kitchenDoor1), Startd12),
    [b(start, Startd12), toffset(start, 12, Startd12)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4625
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4626).
% Happens(Eat(Eater1,Food1),13).

 /*  [b(start, Startd13), toffset(start, 13, Startd13), ignore(start+13==Startd13)] ->
       ta(Ta_Param,
          tvs1=[start+13],
          tvs2=[Startd13, start],
          happens(eat(eater1, food1), Startd13)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4626).
axiom(happens(eat(eater1, food1), Startd13),
    [b(start, Startd13), toffset(start, 13, Startd13)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4626
% Happens(Eat(Eater2,Food1),14).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4626).

 /*  [b(start, Startd14), toffset(start, 14, Startd14), ignore(start+14==Startd14)] ->
       ta(Ta_Param,
          tvs1=[start+14],
          tvs2=[Startd14, start],
          happens(eat(eater2, food1), Startd14)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4626).
axiom(happens(eat(eater2, food1), Startd14),
    [b(start, Startd14), toffset(start, 14, Startd14)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4627
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4628).
% Happens(Converse(Eater1,Eater2),15).

 /*  [b(start, Startd15), toffset(start, 15, Startd15), ignore(start+15==Startd15)] ->
       ta(Ta_Param,
          tvs1=[start+15],
          tvs2=[Startd15, start],
          happens(converse(eater1, eater2), Startd15)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4628).
axiom(happens(converse(eater1, eater2), Startd15),
    [b(start, Startd15), toffset(start, 15, Startd15)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4628
% Happens(TalkAbout(Eater1,Content1),16).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4628).

 /*  [b(start, Startd16), toffset(start, 16, Startd16), ignore(start+16==Startd16)] ->
       ta(Ta_Param,
          tvs1=[start+16],
          tvs2=[Startd16, start],
          happens(talkAbout(eater1, content1), Startd16)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4628).
axiom(happens(talkAbout(eater1, content1), Startd16),
    [b(start, Startd16), toffset(start, 16, Startd16)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4629
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4630).
% Happens(TalkAbout(Eater2,Content2),17).

 /*  [b(start, Startd17), toffset(start, 17, Startd17), ignore(start+17==Startd17)] ->
       ta(Ta_Param,
          tvs1=[start+17],
          tvs2=[Startd17, start],
          happens(talkAbout(eater2, content2), Startd17)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4630).
axiom(happens(talkAbout(eater2, content2), Startd17),
    [b(start, Startd17), toffset(start, 17, Startd17)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4630
% Happens(RiseFrom(Eater1,Chair1),18).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4630).

 /*  [b(start, Startd18), toffset(start, 18, Startd18), ignore(start+18==Startd18)] ->
       ta(Ta_Param,
          tvs1=[start+18],
          tvs2=[Startd18, start],
          happens(riseFrom(eater1, chair1), Startd18)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4630).
axiom(happens(riseFrom(eater1, chair1), Startd18),
    [b(start, Startd18), toffset(start, 18, Startd18)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4631
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4632).
% Happens(RiseFrom(Eater2,Chair2),19).

 /*  [b(start, Startd19), toffset(start, 19, Startd19), ignore(start+19==Startd19)] ->
       ta(Ta_Param,
          tvs1=[start+19],
          tvs2=[Startd19, start],
          happens(riseFrom(eater2, chair2), Startd19)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4632).
axiom(happens(riseFrom(eater2, chair2), Startd19),
    [b(start, Startd19), toffset(start, 19, Startd19)]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4633
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4634).
% range time 0 20
==> range(time,0,20).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4634
% range offset 0 0
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4634).
==> range(offset,0,0).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4635
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4636).
% range diameter 0 0
==> range(diameter,0,0).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e:4637
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ectest/ec_reader_test_ecnet.e',4638).
% completion Happens
==> completion(happens).
%; End of file.
