:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(pfc).
% Wed, 01 Apr 2020 20:01:51 GMT
% From ../ecnet/GSpace.pel:4
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Fire.e',124).

 /*  loading(load_e_pl,
   	'/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/GSpace.e').
 */
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; GSpace: grid space
%;
%; @book{Mueller:1998,
%;   author = "Erik T. Mueller",
%;   year = "1998",
%;   title = "Natural Language Processing with \uppercase{T}hought\uppercase{T}reasure",
%;   address = "New York",
%;   publisher = "Signiform",
%; }
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/GSpace.e:21
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/GSpace.e',22).
% sort coord: integer
==> subsort(coord,integer).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/GSpace.e:22
% sort grid
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/GSpace.e',22).
==> sort(grid).
%; object is at (coord1, coord2) in grid.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/GSpace.e:25
% fluent GridAt(grid,object,coord,coord)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/GSpace.e',25).
fluent(gridAt(grid,object,coord,coord)).
==> mpred_prop(gridAt(grid,object,coord,coord),fluent).
==> meta_argtypes(gridAt(grid,object,coord,coord)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/GSpace.e:27
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/GSpace.e',28).
%; agent walks from (coord1, coord2)
%; to (coord3, coord4) in grid.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/GSpace.e:29
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/GSpace.e',30).
% event GridWalk(grid,agent,coord,coord,coord,coord)
event(gridWalk(grid,agent,coord,coord,coord,coord)).
==> mpred_prop(gridWalk(grid,agent,coord,coord,coord,coord),event).
==> meta_argtypes(gridWalk(grid,agent,coord,coord,coord,coord)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/GSpace.e:31
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/GSpace.e',32).
%; A state constraint says that for a given grid an
%; object is at one cell in that grid at a time:
% [grid,object,coord1,coord2,coord3,coord4,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/GSpace.e:34
% HoldsAt(GridAt(grid,object,coord1,coord2),time) &
% HoldsAt(GridAt(grid,object,coord3,coord4),time) ->
% coord1=coord3 & coord2=coord4.
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/GSpace.e:36
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/GSpace.e',34).

 /*  holds_at(gridAt(Grid, Object, Coord1, Coord2), Time), holds_at(gridAt(Grid, Object, Coord3, Coord4), Time) ->
       equals(Coord1, Coord3),
       equals(Coord2, Coord4).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/GSpace.e',34).

 /*  not(holds_at(gridAt(Grid, Object, Coord1, Coord2), Time)) :-
       holds_at(gridAt(Grid, Object, Coord3, Coord4),
                Time),
       (   not(equals(Coord1, Coord3))
       ;   not(equals(Coord2, Coord4))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/GSpace.e',34).

 /*  [holds_at(gridAt(Grid, Object, Coord3, Coord4), Time),  (not(equals(Coord1, Coord3));not(equals(Coord2, Coord4)))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(gridAt(Grid, Object, Coord1, Coord2)),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/GSpace.e',34).
axiom(holds_at(neg(gridAt(Grid, Object, Coord1, Coord2)), Time),
   
    [ holds_at(gridAt(Grid, Object, Coord3, Coord4),
               Time),
       (not(equals(Coord1, Coord3));not(equals(Coord2, Coord4)))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/GSpace.e',34).

 /*  not(holds_at(gridAt(Grid, Object, Coord3, Coord4), Time)) :-
       holds_at(gridAt(Grid, Object, Coord1, Coord2),
                Time),
       (   not(equals(Coord1, Coord3))
       ;   not(equals(Coord2, Coord4))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/GSpace.e',34).

 /*  [holds_at(gridAt(Grid, Object, Coord1, Coord2), Time),  (not(equals(Coord1, Coord3));not(equals(Coord2, Coord4)))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(gridAt(Grid, Object, Coord3, Coord4)),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/GSpace.e',34).
axiom(holds_at(neg(gridAt(Grid, Object, Coord3, Coord4)), Time),
   
    [ holds_at(gridAt(Grid, Object, Coord1, Coord2),
               Time),
       (not(equals(Coord3, Coord1));not(equals(Coord4, Coord2)))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/GSpace.e:38
%; An effect axiom states that
%; if an agent walks from one cell in a grid to another cell,
%; the agent will be at second cell:
% [grid,agent,coord1,coord2,coord3,coord4,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/GSpace.e:42
% Initiates(GridWalk(grid,agent,coord1,coord2,coord3,coord4),
%           GridAt(grid,agent,coord3,coord4),
%           time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/GSpace.e:44
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/GSpace.e',42).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(gridWalk(Grid,
                             Agent,
                             Coord1,
                             Coord2,
                             Coord3,
                             Coord4),
                    gridAt(Grid, Agent, Coord3, Coord4),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/GSpace.e',42).
axiom(initiates(gridWalk(Grid, Agent, Coord1, Coord2, Coord3, Coord4), gridAt(Grid, Agent, Coord3, Coord4), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/GSpace.e:46
%; An effect axiom states that
%; if an agent walks from one cell in a grid to another cell,
%; the agent will no longer be at the first cell:
% [grid,agent,coord1,coord2,coord3,coord4,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/GSpace.e:50
% Terminates(GridWalk(grid,agent,coord1,coord2,coord3,coord4),
%            GridAt(grid,agent,coord1,coord2),
%            time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/GSpace.e:52
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/GSpace.e',50).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(gridWalk(Grid,
                              Agent,
                              Coord1,
                              Coord2,
                              Coord3,
                              Coord4),
                     gridAt(Grid, Agent, Coord1, Coord2),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/GSpace.e',50).
axiom(terminates(gridWalk(Grid, Agent, Coord1, Coord2, Coord3, Coord4), gridAt(Grid, Agent, Coord1, Coord2), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/GSpace.e:54
%; A precondition axiom states that for an agent to walk
%; from one cell in a grid to another cell, the agent
%; must be at the first cell, the second cell must not
%; be occupied, and the first cell must be adjacent to
%; the second cell:
% [grid,agent,coord1,coord2,coord3,coord4,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/GSpace.e:60
% Happens(GridWalk(grid,agent,coord1,coord2,coord3,coord4),time) ->
% HoldsAt(GridAt(grid,agent,coord1,coord2),time) &
% (!{object} HoldsAt(GridAt(grid,object,coord3,coord4),time)) &
% (coord1=coord3 |
%  coord1=coord3+1 |
%  coord1=coord3-1) &
% (coord2=coord4 |
%  coord2=coord4+1 |
%  coord2=coord4-1).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/GSpace.e:68
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/GSpace.e',60).

 /*  happens(gridWalk(Grid, Agent, Coord1, Coord2, Coord3, Coord4), Time) ->
       holds_at(gridAt(Grid, Agent, Coord1, Coord2),
                Time),
       not(exists([Object],
                  holds_at(gridAt(Grid,
                                  Object,
                                  Coord3,
                                  Coord4),
                           Time))),
       (   equals(Coord1, Coord3)
       ;   equals(Coord1, Coord3+1)
       ;   equals(Coord1, Coord3-1)
       ),
       (   equals(Coord2, Coord4)
       ;   equals(Coord2, Coord4+1)
       ;   equals(Coord2, Coord4-1)
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/GSpace.e',60).

 /*  not(happens(gridWalk(Grid, Agent, Coord1, Coord2, Coord3, Coord4), Time)) :-
       (   not(holds_at(gridAt(Grid, Agent, Coord1, Coord2),
                        Time))
       ;   holds_at(gridAt(Grid, Object, Coord3, Coord4),
                    Time)
       ;   not(equals(Coord1, Coord3)),
           not(equals(Coord1, Coord3+1)),
           not(equals(Coord1, Coord3-1))
       ;   not(equals(Coord2, Coord4)),
           not(equals(Coord2, Coord4+1)),
           not(equals(Coord2, Coord4-1))
       ).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/GSpace.e',60).

 /*  [(holds_at(neg(gridAt(Grid, Agent, Coord1, Coord2)), Time);holds_at(gridAt(Grid, Object, Coord3, Coord4), Time);not(equals(Coord1, Coord3)), not(equals(Coord1, Coord3+1)), not(equals(Coord1, Coord3-1));not(equals(Coord2, Coord4)), not(equals(Coord2, Coord4+1)), not(equals(Coord2, Coord4-1)))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(gridWalk(Grid,
                               Agent,
                               Coord1,
                               Coord2,
                               Coord3,
                               Coord4),
                      Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/GSpace.e',60).
axiom(not(happens(gridWalk(Grid, Agent, Coord1, Coord2, Coord3, Coord4), Time)),
   
    [  (holds_at(neg(gridAt(Grid, Agent, Coord1, Coord2)), Time);holds_at(gridAt(Grid, Object, Coord3, Coord4), Time);not(equals(Coord1, Coord3)), not(equals(Coord1, Coord3+1)), not(equals(Coord1, Coord3-1));not(equals(Coord2, Coord4)), not(equals(Coord2, Coord4+1)), not(equals(Coord2, Coord4-1)))
    ]).

 /*  holds_at(gridAt(Grid, Agent, Coord1, Coord2), Time) :-
       happens(gridWalk(Grid,
                        Agent,
                        Coord1,
                        Coord2,
                        Coord3,
                        Coord4),
               Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/GSpace.e',60).

 /*  [holds_at(metreqs(gridWalk(Grid, Agent, Coord1, Coord2, Coord3, Coord4)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(gridWalk(Grid,
                            Agent,
                            Coord1,
                            Coord2,
                            Coord3,
                            Coord4),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/GSpace.e',60).
axiom(requires(gridWalk(Grid, Agent, Coord1, Coord2, Coord3, Coord4), Time),
   
    [ holds_at(metreqs(gridWalk(Grid,
                                Agent,
                                Coord1,
                                Coord2,
                                Coord3,
                                Coord4)),
               Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/GSpace.e',60).

 /*  [holds_at(gridAt(Grid, Agent, Coord1, Coord2), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(gridWalk(Grid,
                                    Agent,
                                    Coord1,
                                    Coord2,
                                    Coord3,
                                    Coord4)),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/GSpace.e',60).
axiom(holds_at(metreqs(gridWalk(Grid, Agent, Coord1, Coord2, Coord3, Coord4)), Time),
   
    [ holds_at(gridAt(Grid, Agent, Coord1, Coord2),
               Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/GSpace.e',60).

 /*  not(holds_at(gridAt(Grid, Object, Coord3, Coord4), Time)) :-
       happens(gridWalk(Grid,
                        Agent,
                        Coord1,
                        Coord2,
                        Coord3,
                        Coord4),
               Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/GSpace.e',60).

 /*  [holds_at(metreqs(gridWalk(Grid, Agent, Coord1, Coord2, Coord3, Coord4)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(gridWalk(Grid,
                            Agent,
                            Coord1,
                            Coord2,
                            Coord3,
                            Coord4),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/GSpace.e',60).
axiom(requires(gridWalk(Grid, Agent, Coord1, Coord2, Coord3, Coord4), Time),
   
    [ holds_at(metreqs(gridWalk(Grid,
                                Agent,
                                Coord1,
                                Coord2,
                                Coord3,
                                Coord4)),
               Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/GSpace.e',60).

 /*  [holds_at(neg(gridAt(Grid, Object, Coord3, Coord4)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(gridWalk(Grid,
                                    Agent,
                                    Coord1,
                                    Coord2,
                                    Coord3,
                                    Coord4)),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/GSpace.e',60).
axiom(holds_at(metreqs(gridWalk(Grid, Agent, Coord1, Coord2, Coord3, Coord4)), Time),
   
    [ holds_at(neg(gridAt(Grid, Object, Coord3, Coord4)),
               Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/GSpace.e:70
%; End of file.
