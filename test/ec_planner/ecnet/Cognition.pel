:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(pfc).
% Wed, 01 Apr 2020 20:01:33 GMT
% From ../ecnet/Cognition.pel:4
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Book.e',87).

 /*  loading(load_e_pl,
   	'/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Cognition.e').
 */
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Cognition.e:10
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Cognition.e',11).
% event Read(agent,text,content)
event(read(agent,text,content)).
==> mpred_prop(read(agent,text,content),event).
==> meta_argtypes(read(agent,text,content)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Cognition.e:11
% event ThinkAbout(agent,content)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Cognition.e',11).
event(thinkAbout(agent,content)).
==> mpred_prop(thinkAbout(agent,content),event).
==> meta_argtypes(thinkAbout(agent,content)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Cognition.e:12
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Cognition.e',13).
% event Think(agent)
event(think(agent)).
==> mpred_prop(think(agent),event).
==> meta_argtypes(think(agent)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Cognition.e:13
% event Understand(agent,content)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Cognition.e',13).
event(understand(agent,content)).
==> mpred_prop(understand(agent,content),event).
==> meta_argtypes(understand(agent,content)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Cognition.e:14
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Cognition.e',15).
% event Dream(agent)
event(dream(agent)).
==> mpred_prop(dream(agent),event).
==> meta_argtypes(dream(agent)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Cognition.e:16
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Cognition.e',17).
% [agent,text,content,time]
% Happens(Read(agent,text,content),time) ->
% HoldsAt(See(agent,text),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Cognition.e:18

 /*  happens(read(Agent, Text, Content), Time) ->
       holds_at(see(Agent, Text), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Cognition.e',17).

 /*  holds_at(see(Agent, Text), Time) :-
       happens(read(Agent, Text, Content), Time).
 */

 /*  [holds_at(metreqs(read(Agent, Text, Content)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(read(Agent, Text, Content), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Cognition.e',17).
axiom(requires(read(Agent, Text, Content), Time),
    [holds_at(metreqs(read(Agent, Text, Content)), Time)]).

 /*  [holds_at(see(Agent, Text), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(read(Agent, Text, Content)),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Cognition.e',17).
axiom(holds_at(metreqs(read(Agent, Text, Content)), Time),
    [holds_at(see(Agent, Text), Time)]).

 /*  not(happens(read(Agent, Text, Content), Time)) :-
       not(holds_at(see(Agent, Text), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Cognition.e',17).

 /*  [holds_at(neg(see(Agent, Text)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(read(Agent, Text, Content), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Cognition.e',17).
axiom(not(happens(read(Agent, Text, Content), Time)),
    [holds_at(neg(see(Agent, Text)), Time)]).
