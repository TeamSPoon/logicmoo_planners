:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(pfc).
% Wed, 01 Apr 2020 20:01:49 GMT
% From ../ecnet/Feeling.pel:4
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/EatingInAHouse.e',183).

 /*  loading(load_e_pl,
   	'/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e').
 */
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; feeling = emotion, attitude, ...
%;
%; The Feeling representation includes simple positive, neutral, and
%; negative emotions, and positive, neutral, and negative attitudes
%; toward objects.
%;
%; emotions
%; agent is happy.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e:20
% fluent Happy(agent)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e',20).
fluent(happy(agent)).
==> mpred_prop(happy(agent),fluent).
==> meta_argtypes(happy(agent)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e:22
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e',23).
%; agent is emotionally neutral or calm.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e:23
% fluent Calm(agent)
fluent(calm(agent)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e',23).
==> mpred_prop(calm(agent),fluent).
==> meta_argtypes(calm(agent)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e:25
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e',26).
%; agent is unhappy.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e:26
% fluent Unhappy(agent)
fluent(unhappy(agent)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e',26).
==> mpred_prop(unhappy(agent),fluent).
==> meta_argtypes(unhappy(agent)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e:28
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e',29).
%; At any moment, an agent is in one of three emotional states:

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e:29
% xor Happy, Calm, Unhappy
==> xor([happy,calm,unhappy]).
%; agent becomes happy.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e:32
% event BecomeHappy(agent)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e',32).
event(becomeHappy(agent)).
==> mpred_prop(becomeHappy(agent),event).
==> meta_argtypes(becomeHappy(agent)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e:34
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e',35).
%; agent becomes calm.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e:35
% event BecomeCalm(agent)
event(becomeCalm(agent)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e',35).
==> mpred_prop(becomeCalm(agent),event).
==> meta_argtypes(becomeCalm(agent)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e:37
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e',38).
%; agent becomes unhappy.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e:38
% event BecomeUnhappy(agent)
event(becomeUnhappy(agent)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e',38).
==> mpred_prop(becomeUnhappy(agent),event).
==> meta_argtypes(becomeUnhappy(agent)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e:40
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e',41).
%; A number of effect and precondition axioms deal with the transitions
%; from one emotional state to another:
% [agent,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e:43
% Initiates(BecomeHappy(agent),Happy(agent),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e',43).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(becomeHappy(Agent), happy(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e',43).
axiom(initiates(becomeHappy(Agent), happy(Agent), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e:45
% [agent,time]
% HoldsAt(Calm(agent),time) ->
% Terminates(BecomeHappy(agent),Calm(agent),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e:47

 /*  [holds_at(calm(Agent), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(becomeHappy(Agent), calm(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e',47).
axiom(terminates(becomeHappy(Agent), calm(Agent), Time),
    [holds_at(calm(Agent), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e:49
% [agent,time]
% HoldsAt(Unhappy(agent),time) ->
% Terminates(BecomeHappy(agent),Unhappy(agent),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e:51

 /*  [holds_at(unhappy(Agent), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(becomeHappy(Agent), unhappy(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e',51).
axiom(terminates(becomeHappy(Agent), unhappy(Agent), Time),
    [holds_at(unhappy(Agent), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e:53
% [agent,time]
% Happens(BecomeHappy(agent),time) ->
% !HoldsAt(Happy(agent),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e:55

 /*  happens(becomeHappy(Agent), Time) ->
       holds_at(neg(happy(Agent)), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e',55).

 /*  holds_at(neg(happy(Agent)), Time) :-
       happens(becomeHappy(Agent), Time).
 */

 /*  [holds_at(metreqs(becomeHappy(Agent)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(becomeHappy(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e',55).
axiom(requires(becomeHappy(Agent), Time),
    [holds_at(metreqs(becomeHappy(Agent)), Time)]).

 /*  [holds_at(neg(happy(Agent)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(becomeHappy(Agent)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e',55).
axiom(holds_at(metreqs(becomeHappy(Agent)), Time),
    [holds_at(neg(happy(Agent)), Time)]).

 /*  not(happens(becomeHappy(Agent), Time)) :-
       not(holds_at(neg(happy(Agent)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e',55).

 /*  [holds_at(happy(Agent), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(becomeHappy(Agent), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e',55).
axiom(not(happens(becomeHappy(Agent), Time)),
    [holds_at(happy(Agent), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e:57
% [agent,time]
% Initiates(BecomeCalm(agent),Calm(agent),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e',59).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(becomeCalm(Agent), calm(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e',59).
axiom(initiates(becomeCalm(Agent), calm(Agent), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e:60
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e',61).
% [agent,time]
% HoldsAt(Happy(agent),time) ->
% Terminates(BecomeCalm(agent),Happy(agent),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e:62

 /*  [holds_at(happy(Agent), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(becomeCalm(Agent), happy(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e',61).
axiom(terminates(becomeCalm(Agent), happy(Agent), Time),
    [holds_at(happy(Agent), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e:64
% [agent,time]
% HoldsAt(Unhappy(agent),time) ->
% Terminates(BecomeCalm(agent),Unhappy(agent),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e:66

 /*  [holds_at(unhappy(Agent), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(becomeCalm(Agent), unhappy(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e',66).
axiom(terminates(becomeCalm(Agent), unhappy(Agent), Time),
    [holds_at(unhappy(Agent), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e:68
% [agent,time]
% Happens(BecomeCalm(agent),time) -> !HoldsAt(Calm(agent),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e',70).

 /*  happens(becomeCalm(Agent), Time) ->
       holds_at(neg(calm(Agent)), Time).
 */

 /*  holds_at(neg(calm(Agent)), Time) :-
       happens(becomeCalm(Agent), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e',70).

 /*  [holds_at(metreqs(becomeCalm(Agent)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(becomeCalm(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e',70).
axiom(requires(becomeCalm(Agent), Time),
    [holds_at(metreqs(becomeCalm(Agent)), Time)]).

 /*  [holds_at(neg(calm(Agent)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(becomeCalm(Agent)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e',70).
axiom(holds_at(metreqs(becomeCalm(Agent)), Time),
    [holds_at(neg(calm(Agent)), Time)]).

 /*  not(happens(becomeCalm(Agent), Time)) :-
       not(holds_at(neg(calm(Agent)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e',70).

 /*  [holds_at(calm(Agent), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(becomeCalm(Agent), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e',70).
axiom(not(happens(becomeCalm(Agent), Time)),
    [holds_at(calm(Agent), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e:71
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e',72).
% [agent,time]
% Initiates(BecomeUnhappy(agent),Unhappy(agent),time).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(becomeUnhappy(Agent), unhappy(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e',72).
axiom(initiates(becomeUnhappy(Agent), unhappy(Agent), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e:74
% [agent,time]
% HoldsAt(Happy(agent),time) ->
% Terminates(BecomeUnhappy(agent),Happy(agent),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e:76

 /*  [holds_at(happy(Agent), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(becomeUnhappy(Agent), happy(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e',76).
axiom(terminates(becomeUnhappy(Agent), happy(Agent), Time),
    [holds_at(happy(Agent), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e:78
% [agent,time]
% HoldsAt(Calm(agent),time) ->
% Terminates(BecomeUnhappy(agent),Calm(agent),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e:80

 /*  [holds_at(calm(Agent), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(becomeUnhappy(Agent), calm(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e',80).
axiom(terminates(becomeUnhappy(Agent), calm(Agent), Time),
    [holds_at(calm(Agent), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e:82
% [agent,time]
% Happens(BecomeUnhappy(agent),time) -> !HoldsAt(Unhappy(agent),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e',84).

 /*  happens(becomeUnhappy(Agent), Time) ->
       holds_at(neg(unhappy(Agent)), Time).
 */

 /*  holds_at(neg(unhappy(Agent)), Time) :-
       happens(becomeUnhappy(Agent), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e',84).

 /*  [holds_at(metreqs(becomeUnhappy(Agent)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(becomeUnhappy(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e',84).
axiom(requires(becomeUnhappy(Agent), Time),
    [holds_at(metreqs(becomeUnhappy(Agent)), Time)]).

 /*  [holds_at(neg(unhappy(Agent)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(becomeUnhappy(Agent)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e',84).
axiom(holds_at(metreqs(becomeUnhappy(Agent)), Time),
    [holds_at(neg(unhappy(Agent)), Time)]).

 /*  not(happens(becomeUnhappy(Agent), Time)) :-
       not(holds_at(neg(unhappy(Agent)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e',84).

 /*  [holds_at(unhappy(Agent), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(becomeUnhappy(Agent), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e',84).
axiom(not(happens(becomeUnhappy(Agent), Time)),
    [holds_at(unhappy(Agent), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e:85
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e',86).
%; anger

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e:87
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e',88).
% fluent AngryAt(agent,agent)
fluent(angryAt(agent,agent)).
==> mpred_prop(angryAt(agent,agent),fluent).
==> meta_argtypes(angryAt(agent,agent)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e:89
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e',90).
% event BecomeAngryAt(agent,agent)
event(becomeAngryAt(agent,agent)).
==> mpred_prop(becomeAngryAt(agent,agent),event).
==> meta_argtypes(becomeAngryAt(agent,agent)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e:91
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e',92).
% [agent1,agent2,time]
% Initiates(BecomeAngryAt(agent1,agent2),AngryAt(agent1,agent2),time).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(becomeAngryAt(Agent1, Agent2),
                    angryAt(Agent1, Agent2),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e',92).
axiom(initiates(becomeAngryAt(Agent1, Agent2), angryAt(Agent1, Agent2), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e:94
% [agent1,agent2,time]
% Terminates(BecomeHappy(agent1),AngryAt(agent1,agent2),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e',96).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(becomeHappy(Agent1),
                     angryAt(Agent1, Agent2),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e',96).
axiom(terminates(becomeHappy(Agent1), angryAt(Agent1, Agent2), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e:97
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e',98).
% [agent1,agent2,time]
% Happens(BecomeAngryAt(agent1,agent2),time) ->
% Happens(BecomeUnhappy(agent1),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e:99

 /*  happens(becomeAngryAt(Agent1, Agent2), Time) ->
       happens(becomeUnhappy(Agent1), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e',98).

 /*  happens(becomeUnhappy(Agent1), Time) :-
       happens(becomeAngryAt(Agent1, Agent2), Time).
 */

 /*  [happens(becomeAngryAt(Agent1, Agent2), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(becomeUnhappy(Agent1), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e',98).
axiom(happens(becomeUnhappy(Agent1), Time),
    [happens(becomeAngryAt(Agent1, Agent2), Time)]).

 /*  not(happens(becomeAngryAt(Agent1, Agent2), Time)) :-
       not(happens(becomeUnhappy(Agent1), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e',98).

 /*  [not(happens(becomeUnhappy(Agent1), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(becomeAngryAt(Agent1, Agent2), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e',98).
axiom(not(happens(becomeAngryAt(Agent1, Agent2), Time)),
    [not(happens(becomeUnhappy(Agent1), Time))]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e:101
%; attitudes
%; agent likes object.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e:104
% fluent Like(agent,object)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e',104).
fluent(like(agent,object)).
==> mpred_prop(like(agent,object),fluent).
==> meta_argtypes(like(agent,object)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e:105
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e',104).
%; agent loves object.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e:106
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e',107).
% fluent Love(agent,object)
fluent(love(agent,object)).
==> mpred_prop(love(agent,object),fluent).
==> meta_argtypes(love(agent,object)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e:107
%; agent dislikes object.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e:108
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e',109).
% fluent Dislike(agent,object)
fluent(dislike(agent,object)).
==> mpred_prop(dislike(agent,object),fluent).
==> meta_argtypes(dislike(agent,object)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e:110
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e',111).
%; agent likes snow.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e:111
% fluent LikeSnow(agent)
fluent(likeSnow(agent)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e',111).
==> mpred_prop(likeSnow(agent),fluent).
==> meta_argtypes(likeSnow(agent)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e:113
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e',114).
%; A trigger axiom states that
%; if an agent is awake, likes snow, and is in a room that
%; looks out onto a location where it is snowing, that agent
%; becomes happy:
% [agent,room,outside,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e:118
% !HoldsAt(Happy(agent),time) &
% HoldsAt(Awake(agent),time) &
% HoldsAt(LikeSnow(agent),time) &
% HoldsAt(At(agent,room),time) &
% LookOutOnto(room)=outside &
% HoldsAt(Snowing(outside),time) ->
% Happens(BecomeHappy(agent),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e:124
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e',118).

 /*  holds_at(neg(happy(Agent)), Time), holds_at(awake(Agent), Time), holds_at(likeSnow(Agent), Time), holds_at(at(Agent, Room), Time), equals(lookOutOnto(Room), Outside), holds_at(snowing(Outside), Time) ->
       happens(becomeHappy(Agent), Time).
 */

 /*  happens(becomeHappy(Agent), Time) :-
       holds_at(neg(happy(Agent)), Time),
       holds_at(awake(Agent), Time),
       holds_at(likeSnow(Agent), Time),
       holds_at(at(Agent, Room), Time),
       equals(lookOutOnto(Room), Outside),
       holds_at(snowing(Outside), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e',118).

 /*  [holds_at(neg(happy(Agent)), Time), holds_at(awake(Agent), Time), holds_at(likeSnow(Agent), Time), holds_at(at(Agent, Room), Time), equals(lookOutOnto(Room), Outside), holds_at(snowing(Outside), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(becomeHappy(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e',118).
axiom(happens(becomeHappy(Agent), Time),
   
    [ holds_at(neg(happy(Agent)), Time),
      holds_at(awake(Agent), Time),
      holds_at(likeSnow(Agent), Time),
      holds_at(at(Agent, Room), Time),
      equals(lookOutOnto(Room), Outside),
      holds_at(snowing(Outside), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e',118).

 /*  not(holds_at(neg(happy(Agent)), Time)) :-
       ( holds_at(awake(Agent), Time),
         holds_at(likeSnow(Agent), Time),
         holds_at(at(Agent, Room), Time),
         equals(lookOutOnto(Room), Outside),
         holds_at(snowing(Outside), Time)
       ),
       not(happens(becomeHappy(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e',118).

 /*  [holds_at(awake(Agent), Time), holds_at(likeSnow(Agent), Time), holds_at(at(Agent, Room), Time), equals(lookOutOnto(Room), Outside), holds_at(snowing(Outside), Time), not(happens(becomeHappy(Agent), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(happy(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e',118).
axiom(holds_at(happy(Agent), Time),
   
    [ holds_at(awake(Agent), Time),
      holds_at(likeSnow(Agent), Time),
      holds_at(at(Agent, Room), Time),
      equals(lookOutOnto(Room), Outside),
      holds_at(snowing(Outside), Time),
      not(happens(becomeHappy(Agent), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e',118).

 /*  not(holds_at(awake(Agent), Time)) :-
       ( holds_at(likeSnow(Agent), Time),
         holds_at(at(Agent, Room), Time),
         equals(lookOutOnto(Room), Outside),
         holds_at(snowing(Outside), Time)
       ),
       holds_at(neg(happy(Agent)), Time),
       not(happens(becomeHappy(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e',118).

 /*  [holds_at(likeSnow(Agent), Time), holds_at(at(Agent, Room), Time), equals(lookOutOnto(Room), Outside), holds_at(snowing(Outside), Time), holds_at(neg(happy(Agent)), Time), not(happens(becomeHappy(Agent), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(awake(Agent)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e',118).
axiom(holds_at(neg(awake(Agent)), Time),
   
    [ holds_at(likeSnow(Agent), Time),
      holds_at(at(Agent, Room), Time),
      equals(lookOutOnto(Room), Outside),
      holds_at(snowing(Outside), Time),
      holds_at(neg(happy(Agent)), Time),
      not(happens(becomeHappy(Agent), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e',118).

 /*  not(holds_at(likeSnow(Agent), Time)) :-
       ( holds_at(at(Agent, Room), Time),
         equals(lookOutOnto(Room), Outside),
         holds_at(snowing(Outside), Time)
       ),
       holds_at(awake(Agent), Time),
       holds_at(neg(happy(Agent)), Time),
       not(happens(becomeHappy(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e',118).

 /*  [holds_at(at(Agent, Room), Time), equals(lookOutOnto(Room), Outside), holds_at(snowing(Outside), Time), holds_at(awake(Agent), Time), holds_at(neg(happy(Agent)), Time), not(happens(becomeHappy(Agent), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(likeSnow(Agent)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e',118).
axiom(holds_at(neg(likeSnow(Agent)), Time),
   
    [ holds_at(at(Agent, Room), Time),
      equals(lookOutOnto(Room), Outside),
      holds_at(snowing(Outside), Time),
      holds_at(awake(Agent), Time),
      holds_at(neg(happy(Agent)), Time),
      not(happens(becomeHappy(Agent), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e',118).

 /*  not(holds_at(at(Agent, Room), Time)) :-
       ( equals(lookOutOnto(Room), Outside),
         holds_at(snowing(Outside), Time)
       ),
       holds_at(likeSnow(Agent), Time),
       holds_at(awake(Agent), Time),
       holds_at(neg(happy(Agent)), Time),
       not(happens(becomeHappy(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e',118).

 /*  [equals(lookOutOnto(Room), Outside), holds_at(snowing(Outside), Time), holds_at(likeSnow(Agent), Time), holds_at(awake(Agent), Time), holds_at(neg(happy(Agent)), Time), not(happens(becomeHappy(Agent), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(at(Agent, Room)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e',118).
axiom(holds_at(neg(at(Agent, Room)), Time),
   
    [ equals(lookOutOnto(Room), Outside),
      holds_at(snowing(Outside), Time),
      holds_at(likeSnow(Agent), Time),
      holds_at(awake(Agent), Time),
      holds_at(neg(happy(Agent)), Time),
      not(happens(becomeHappy(Agent), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e',118).

 /*  not(holds_at(snowing(Outside), Time)) :-
       equals(lookOutOnto(Room), Outside),
       holds_at(at(Agent, Room), Time),
       holds_at(likeSnow(Agent), Time),
       holds_at(awake(Agent), Time),
       holds_at(neg(happy(Agent)), Time),
       not(happens(becomeHappy(Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e',118).

 /*  [equals(lookOutOnto(Room), Outside), holds_at(at(Agent, Room), Time), holds_at(likeSnow(Agent), Time), holds_at(awake(Agent), Time), holds_at(neg(happy(Agent)), Time), not(happens(becomeHappy(Agent), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(snowing(Outside)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e',118).
axiom(holds_at(neg(snowing(Outside)), Time),
   
    [ equals(lookOutOnto(Room), Outside),
      holds_at(at(Agent, Room), Time),
      holds_at(likeSnow(Agent), Time),
      holds_at(awake(Agent), Time),
      holds_at(neg(happy(Agent)), Time),
      not(happens(becomeHappy(Agent), Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e:126
%; We introduced LikeSnow above since Like
%; can only be used to represent that an agent likes a
%; particular object, not snow in general.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e:130
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e',131).
% event Smile(agent)
event(smile(agent)).
==> mpred_prop(smile(agent),event).
==> meta_argtypes(smile(agent)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e:132
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Feeling.e',133).
%; End of file.
