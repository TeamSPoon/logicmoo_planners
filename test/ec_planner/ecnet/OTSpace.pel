:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(pfc).
% Wed, 01 Apr 2020 20:01:59 GMT
% From ../ecnet/OTSpace.pel:4
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Ontology.e',105).

 /*  loading(load_e_pl,
   	'/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e').
 */
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; OTSpace: object-scale topological space
%;
%; The OTSpace representation deals with topological space at
%; the scale of objects such as agents (humans and animals)
%; and physical objects.
%;
%; PartOf
%; physobj is a part of object.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:20
% predicate PartOf(physobj,object)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',20).
predicate(partOf(physobj,object)).
==> mpred_prop(partOf(physobj,object),predicate).
==> meta_argtypes(partOf(physobj,object)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:22
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',23).
%; A state constraint says that if a physical object
%; is part of an object, the location of the
%; physical object is the same as the location of the object:
% [physobj,object,location,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:26
% PartOf(physobj,object) &
% HoldsAt(At(object,location),time) ->
% HoldsAt(At(physobj,location),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:28
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',26).

 /*  partOf(Physobj, Object), holds_at(at(Object, Location), Time) ->
       holds_at(at(Physobj, Location), Time).
 */

 /*  holds_at(at(Physobj, Location), Time) :-
       partOf(Physobj, Object),
       holds_at(at(Object, Location), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',26).

 /*  [partOf(Physobj, Object), holds_at(at(Object, Location), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(at(Physobj, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',26).
axiom(holds_at(at(Physobj, Location), Time),
   
    [ partOf(Physobj, Object),
      holds_at(at(Object, Location), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',26).

 /*  not(partOf(Physobj, Object)) :-
       holds_at(at(Object, Location), Time),
       not(holds_at(at(Physobj, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',26).

 /*  [holds_at(at(Object, Location), Time), holds_at(neg(at(Physobj, Location)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(partOf(Physobj, Object))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',26).
axiom(not(partOf(Physobj, Object)),
   
    [ holds_at(at(Object, Location), Time),
      holds_at(neg(at(Physobj, Location)), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',26).

 /*  not(holds_at(at(Object, Location), Time)) :-
       partOf(Physobj, Object),
       not(holds_at(at(Physobj, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',26).

 /*  [partOf(Physobj, Object), holds_at(neg(at(Physobj, Location)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(at(Object, Location)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',26).
axiom(holds_at(neg(at(Object, Location)), Time),
   
    [ partOf(Physobj, Object),
      holds_at(neg(at(Physobj, Location)), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:30
%; rolling a snowball bigger
%; agent rolls stuff1 along stuff2.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:33
% event RollAlong(agent,stuff,stuff)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',33).
event(rollAlong(agent,stuff,stuff)).
==> mpred_prop(rollAlong(agent,stuff,stuff),event).
==> meta_argtypes(rollAlong(agent,stuff,stuff)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:34
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',33).
%; The diameter of ball is diameter.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:35
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',36).
% fluent Diameter(ball,diameter)
fluent(diameter(ball,diameter)).
==> mpred_prop(diameter(ball,diameter),fluent).
==> meta_argtypes(diameter(ball,diameter)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:37
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',38).
%; A state constraint says that a ball has a unique diameter:
% [ball,diameter1,diameter2,time]
% HoldsAt(Diameter(ball,diameter1),time) &
% HoldsAt(Diameter(ball,diameter2),time) ->
% diameter1=diameter2.
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:41
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',40).

 /*  holds_at(diameter(Ball, Diameter1), Time), holds_at(diameter(Ball, Diameter2), Time) ->
       equals(Diameter1, Diameter2).
 */

 /*  not(holds_at(diameter(Ball, Diameter1), Time)) :-
       holds_at(diameter(Ball, Diameter2), Time),
       not(equals(Diameter1, Diameter2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',40).

 /*  [holds_at(diameter(Ball, Diameter2), Time), not(equals(Diameter1, Diameter2))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(diameter(Ball, Diameter1)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',40).
axiom(holds_at(neg(diameter(Ball, Diameter1)), Time),
   
    [ holds_at(diameter(Ball, Diameter2), Time),
      not(equals(Diameter1, Diameter2))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',40).

 /*  not(holds_at(diameter(Ball, Diameter2), Time)) :-
       holds_at(diameter(Ball, Diameter1), Time),
       not(equals(Diameter1, Diameter2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',40).

 /*  [holds_at(diameter(Ball, Diameter1), Time), not(equals(Diameter1, Diameter2))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(diameter(Ball, Diameter2)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',40).
axiom(holds_at(neg(diameter(Ball, Diameter2)), Time),
   
    [ holds_at(diameter(Ball, Diameter1), Time),
      not(equals(Diameter2, Diameter1))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:43
%; Effect axiom state that if an agent rolls some snow along
%; some other snow, the diameter of the first snow will increase:
% [agent,snow1,snow2,diameter1,diameter2,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:46
% HoldsAt(Diameter(snow1,diameter1),time) &
% diameter2 = diameter1+1 ->
% Initiates(RollAlong(agent,snow1,snow2),
%           Diameter(snow1,diameter2),
%           time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:50
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',46).

 /*  [holds_at(diameter(Snow1, Diameter1), Time), equals(Diameter2, Diameter1+1)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(rollAlong(Agent, Snow1, Snow2),
                    diameter(Snow1, Diameter2),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',46).
axiom(initiates(rollAlong(Agent, Snow1, Snow2), diameter(Snow1, Diameter2), Time),
   
    [ holds_at(diameter(Snow1, Diameter1), Time),
      equals(Diameter2, Diameter1+1)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:52
% [agent,snow1,snow2,diameter1,time]
% HoldsAt(Diameter(snow1,diameter1),time) ->
% Terminates(RollAlong(agent,snow1,snow2),
%            Diameter(snow1,diameter1),
%            time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:56
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',54).

 /*  [holds_at(diameter(Snow1, Diameter1), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(rollAlong(Agent, Snow1, Snow2),
                     diameter(Snow1, Diameter1),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',54).
axiom(terminates(rollAlong(Agent, Snow1, Snow2), diameter(Snow1, Diameter1), Time),
    [holds_at(diameter(Snow1, Diameter1), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:58
%; A precondition axiom states that
%; for an agent to roll some snow along some other snow,
%; there must be a location such that
%; the agent is at the location,
%; the first snow is at the location, and
%; the second snow is at the location:
%;[agent,snow1,snow2,time]
%;Happens(RollAlong(agent,snow1,snow2),time) ->
%;{location}
%;HoldsAt(At(agent,location),time) &
%;HoldsAt(At(snow1,location),time) &
%;HoldsAt(At(snow2,location),time).
%; motion
%; object moves (in place).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:74
% event Move(object)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',74).
event(move(object)).
==> mpred_prop(move(object),event).
==> meta_argtypes(move(object)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:76
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',77).
%; Holding
%; agent is holding physobj.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:79
% fluent Holding(agent,physobj)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',79).
fluent(holding(agent,physobj)).
==> mpred_prop(holding(agent,physobj),fluent).
==> meta_argtypes(holding(agent,physobj)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:80
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',79).
%; agent holds or picks up physobj.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:81
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',82).
% event Hold(agent,physobj)
event(hold(agent,physobj)).
==> mpred_prop(hold(agent,physobj),event).
==> meta_argtypes(hold(agent,physobj)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:82
%; agent picks up some stuff1 from stuff2.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:83
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',84).
% event HoldSome(agent,stuff,stuff)
event(holdSome(agent,stuff,stuff)).
==> mpred_prop(holdSome(agent,stuff,stuff),event).
==> meta_argtypes(holdSome(agent,stuff,stuff)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:84
%; agent releases or lets go of physobj.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:85
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',86).
% event LetGoOf(agent,physobj)
event(letGoOf(agent,physobj)).
==> mpred_prop(letGoOf(agent,physobj),event).
==> meta_argtypes(letGoOf(agent,physobj)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:87
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',88).
%; An effect axiom states that if an agent holds
%; a physical object, the agent will be holding the
%; physical object:
% [agent,physobj,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:91
% Initiates(Hold(agent,physobj),Holding(agent,physobj),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',91).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(hold(Agent, Physobj),
                    holding(Agent, Physobj),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',91).
axiom(initiates(hold(Agent, Physobj), holding(Agent, Physobj), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:93
%; A precondition axiom states that
%; for an agent to hold a physical object,
%; there must be a location such that
%; the agent is at the location and
%; the physical object is at the location:
%;[agent,physobj,time]
%;Happens(Hold(agent,physobj),time) ->
%;{location}
%;  HoldsAt(At(agent,location),time) &
%;  HoldsAt(At(physobj,location),time).
%; An effect axiom states that if an agent
%; lets go of a physical object, the agent is no longer holding
%; the physical object:
% [agent,physobj,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:108
% Terminates(LetGoOf(agent,physobj),Holding(agent,physobj),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',108).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(letGoOf(Agent, Physobj),
                     holding(Agent, Physobj),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',108).
axiom(terminates(letGoOf(Agent, Physobj), holding(Agent, Physobj), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:110
%; A precondition axiom states that
%; for an agent to let go of a physical object,
%; the agent must be holding the physical object:
% [agent,physobj,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:114
% Happens(LetGoOf(agent,physobj),time) ->
% HoldsAt(Holding(agent,physobj),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',114).

 /*  happens(letGoOf(Agent, Physobj), Time) ->
       holds_at(holding(Agent, Physobj), Time).
 */

 /*  holds_at(holding(Agent, Physobj), Time) :-
       happens(letGoOf(Agent, Physobj), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',114).

 /*  [holds_at(metreqs(letGoOf(Agent, Physobj)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(letGoOf(Agent, Physobj), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',114).
axiom(requires(letGoOf(Agent, Physobj), Time),
    [holds_at(metreqs(letGoOf(Agent, Physobj)), Time)]).

 /*  [holds_at(holding(Agent, Physobj), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(letGoOf(Agent, Physobj)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',114).
axiom(holds_at(metreqs(letGoOf(Agent, Physobj)), Time),
    [holds_at(holding(Agent, Physobj), Time)]).

 /*  not(happens(letGoOf(Agent, Physobj), Time)) :-
       not(holds_at(holding(Agent, Physobj), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',114).

 /*  [holds_at(neg(holding(Agent, Physobj)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(letGoOf(Agent, Physobj), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',114).
axiom(not(happens(letGoOf(Agent, Physobj), Time)),
    [holds_at(neg(holding(Agent, Physobj)), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:117
%; A releases axiom states that if an agent holds
%; a physical object,
%; the physical object's location will be released
%; from inertia:
% [agent,physobj,location,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:122
% Releases(Hold(agent,physobj),At(physobj,location),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',122).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          releases(hold(Agent, Physobj),
                   at(Physobj, Location),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',122).
axiom(releases(hold(Agent, Physobj), at(Physobj, Location), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:124
%; A state constraint says that if an agent is holding
%; a physical object and the agent is at a location,
%; the physical object is also at the location:
% [agent,physobj,location,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:128
% HoldsAt(Holding(agent,physobj),time) &
% HoldsAt(At(agent,location),time) ->
% HoldsAt(At(physobj,location),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:130
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',128).

 /*  holds_at(holding(Agent, Physobj), Time), holds_at(at(Agent, Location), Time) ->
       holds_at(at(Physobj, Location), Time).
 */

 /*  holds_at(at(Physobj, Location), Time) :-
       holds_at(holding(Agent, Physobj), Time),
       holds_at(at(Agent, Location), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',128).

 /*  [holds_at(holding(Agent, Physobj), Time), holds_at(at(Agent, Location), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(at(Physobj, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',128).
axiom(holds_at(at(Physobj, Location), Time),
   
    [ holds_at(holding(Agent, Physobj), Time),
      holds_at(at(Agent, Location), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',128).

 /*  not(holds_at(holding(Agent, Physobj), Time)) :-
       holds_at(at(Agent, Location), Time),
       not(holds_at(at(Physobj, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',128).

 /*  [holds_at(at(Agent, Location), Time), holds_at(neg(at(Physobj, Location)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(holding(Agent, Physobj)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',128).
axiom(holds_at(neg(holding(Agent, Physobj)), Time),
   
    [ holds_at(at(Agent, Location), Time),
      holds_at(neg(at(Physobj, Location)), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',128).

 /*  not(holds_at(at(Agent, Location), Time)) :-
       holds_at(holding(Agent, Physobj), Time),
       not(holds_at(at(Physobj, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',128).

 /*  [holds_at(holding(Agent, Physobj), Time), holds_at(neg(at(Physobj, Location)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(at(Agent, Location)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',128).
axiom(holds_at(neg(at(Agent, Location)), Time),
   
    [ holds_at(holding(Agent, Physobj), Time),
      holds_at(neg(at(Physobj, Location)), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:132
%; A releases axiom states that if an agent holds
%; a physical object,
%; the locations of the parts of the physical object
%; will be released from inertia:
% [agent,physobj1,physobj2,location,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:137
% PartOf(physobj1,physobj2) ->
% Releases(Hold(agent,physobj2),At(physobj1,location),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',137).

 /*  [partOf(Physobj1, Physobj2)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          releases(hold(Agent, Physobj2),
                   at(Physobj1, Location),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',137).
axiom(releases(hold(Agent, Physobj2), at(Physobj1, Location), Time),
    [partOf(Physobj1, Physobj2)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:140
%; Further, if an agent holds a physical object,
%; the locations of the physical objects of which
%; the physical object is a part
%; will be released from inertia:
% [agent,physobj1,physobj2,location,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:145
% PartOf(physobj1,physobj2) ->
% Releases(Hold(agent,physobj1),At(physobj2,location),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',145).

 /*  [partOf(Physobj1, Physobj2)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          releases(hold(Agent, Physobj1),
                   at(Physobj2, Location),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',145).
axiom(releases(hold(Agent, Physobj1), at(Physobj2, Location), Time),
    [partOf(Physobj1, Physobj2)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:148
%;[agent,physobj,location1,location2,time]
%;(!{object} PartOf(physobj,object)) &
%;HoldsAt(At(agent,location1),time) &
%;location1 != location2 ->
%;Terminates(LetGoOf(agent,physobj),At(physobj,location2),time).
% [agent,physobj,location,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:155
% (!{object} PartOf(physobj,object)) &
% HoldsAt(At(agent,location),time) ->
% Initiates(LetGoOf(agent,physobj),At(physobj,location),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:157
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',155).

 /*  [not(partOf(Physobj, Object)), holds_at(at(Agent, Location), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(letGoOf(Agent, Physobj),
                    at(Physobj, Location),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',155).
axiom(initiates(letGoOf(Agent, Physobj), at(Physobj, Location), Time),
   
    [ not(partOf(Physobj, Object)),
      holds_at(at(Agent, Location), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:159
%;[agent,physobj1,physobj2,location1,location2,time]
%;PartOf(physobj1,physobj2) &
%;(!{object} PartOf(physobj2,object)) &
%;HoldsAt(At(agent,location1),time) &
%;location1 != location2 ->
%;Terminates(LetGoOf(agent,physobj1),At(physobj2,location2),time).
% [agent,physobj1,physobj2,location,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:167
% PartOf(physobj1,physobj2) &
% (!{object} PartOf(physobj2,object)) &
% HoldsAt(At(agent,location),time) ->
% Initiates(LetGoOf(agent,physobj1),At(physobj2,location),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:170
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',167).

 /*  [partOf(Physobj1, Physobj2), not(partOf(Physobj2, Object)), holds_at(at(Agent, Location), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(letGoOf(Agent, Physobj1),
                    at(Physobj2, Location),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',167).
axiom(initiates(letGoOf(Agent, Physobj1), at(Physobj2, Location), Time),
   
    [ partOf(Physobj1, Physobj2),
      not(partOf(Physobj2, Object)),
      holds_at(at(Agent, Location), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:172
%; An effect axiom states that if an agent is at a location
%; and lets go of a physical object, the physical object
%; will be at the location:
% [agent,physobj,location,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:176
% HoldsAt(At(agent,location),time) ->
% Initiates(LetGoOf(agent,physobj),At(physobj,location),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',176).

 /*  [holds_at(at(Agent, Location), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(letGoOf(Agent, Physobj),
                    at(Physobj, Location),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',176).
axiom(initiates(letGoOf(Agent, Physobj), at(Physobj, Location), Time),
    [holds_at(at(Agent, Location), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:179
%; An effect axiom states that if an agent picks up
%; some stuff out of some other stuff, the agent will
%; be holding the first stuff:
% [agent,stuff1,stuff2,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:183
% Initiates(HoldSome(agent,stuff1,stuff2),
%           Holding(agent,stuff1),
%           time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:185
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',183).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(holdSome(Agent, Stuff1, Stuff2),
                    holding(Agent, Stuff1),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',183).
axiom(initiates(holdSome(Agent, Stuff1, Stuff2), holding(Agent, Stuff1), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:187
%; A precondition axiom states that
%; for an agent to pick up some stuff out of some other stuff,
%; the first stuff must be a part of the second stuff and
%; there must be a location such that the agent is at the location,
%; the first stuff is at the location, and the second stuff is
%; at the location:
% [agent,stuff1,stuff2,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:194
% Happens(HoldSome(agent,stuff1,stuff2),time) ->
% PartOf(stuff1,stuff2) &
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:196
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',194).
% {location}% 
%   HoldsAt(At(agent,location),time) &
%   HoldsAt(At(stuff1,location),time) &
%   HoldsAt(At(stuff2,location),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:199
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',197).

 /*  exists([Location],
    happens(holdSome(Agent, Stuff1, Stuff2), Time) ->
       partOf(Stuff1, Stuff2),
       holds_at(at(Agent, Location), Time),
       holds_at(at(Stuff1, Location), Time),
       holds_at(at(Stuff2, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',197).

 /*  not(happens(holdSome(Agent, Stuff1, Stuff2), Time)) :-
       (   not(partOf(Stuff1, Stuff2))
       ;   not(holds_at(at(Agent, Location), Time))
       ;   not(holds_at(at(Stuff1, Location), Time))
       ;   not(holds_at(at(Stuff2, Location), Time))
       ),
       some(Location,
            '$kolem_Fn_194'(Agent, Stuff1, Stuff2, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',197).

 /*  [(not(partOf(Stuff1, Stuff2));holds_at(neg(at(Agent, Location)), Time);holds_at(neg(at(Stuff1, Location)), Time);holds_at(neg(at(Stuff2, Location)), Time)), some(Location, '$kolem_Fn_194'(Agent, Stuff1, Stuff2, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(holdSome(Agent, Stuff1, Stuff2), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',197).
axiom(not(happens(holdSome(Agent, Stuff1, Stuff2), Time)),
   
    [  (not(partOf(Stuff1, Stuff2));holds_at(neg(at(Agent, Location)), Time);holds_at(neg(at(Stuff1, Location)), Time);holds_at(neg(at(Stuff2, Location)), Time)),
      some(Location,
           '$kolem_Fn_194'(Agent, Stuff1, Stuff2, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',197).

 /*  partOf(Stuff1, Stuff2) :-
       happens(holdSome(Agent, Stuff1, Stuff2), Time),
       some(Location,
            '$kolem_Fn_194'(Agent, Stuff1, Stuff2, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',197).

 /*  [happens(holdSome(Agent, Stuff1, Stuff2), Time), some(Location, '$kolem_Fn_194'(Agent, Stuff1, Stuff2, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          partOf(Stuff1, Stuff2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',197).
axiom(partOf(Stuff1, Stuff2),
   
    [ happens(holdSome(Agent, Stuff1, Stuff2), Time),
      some(Location,
           '$kolem_Fn_194'(Agent, Stuff1, Stuff2, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',197).

 /*  holds_at(at(Agent, Location), Time) :-
       happens(holdSome(Agent, Stuff1, Stuff2), Time),
       some(Location,
            '$kolem_Fn_194'(Agent, Stuff1, Stuff2, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',197).

 /*  [happens(holdSome(Agent, Stuff1, Stuff2), Time), some(Location, '$kolem_Fn_194'(Agent, Stuff1, Stuff2, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(at(Agent, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',197).
axiom(holds_at(at(Agent, Location), Time),
   
    [ happens(holdSome(Agent, Stuff1, Stuff2), Time),
      some(Location,
           '$kolem_Fn_194'(Agent, Stuff1, Stuff2, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',197).

 /*  holds_at(at(Stuff1, Location), Time) :-
       happens(holdSome(Agent, Stuff1, Stuff2), Time),
       some(Location,
            '$kolem_Fn_194'(Agent, Stuff1, Stuff2, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',197).

 /*  [happens(holdSome(Agent, Stuff1, Stuff2), Time), some(Location, '$kolem_Fn_194'(Agent, Stuff1, Stuff2, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(at(Stuff1, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',197).
axiom(holds_at(at(Stuff1, Location), Time),
   
    [ happens(holdSome(Agent, Stuff1, Stuff2), Time),
      some(Location,
           '$kolem_Fn_194'(Agent, Stuff1, Stuff2, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',197).

 /*  holds_at(at(Stuff2, Location), Time) :-
       happens(holdSome(Agent, Stuff1, Stuff2), Time),
       some(Location,
            '$kolem_Fn_194'(Agent, Stuff1, Stuff2, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',197).

 /*  [happens(holdSome(Agent, Stuff1, Stuff2), Time), some(Location, '$kolem_Fn_194'(Agent, Stuff1, Stuff2, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(at(Stuff2, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',197).
axiom(holds_at(at(Stuff2, Location), Time),
   
    [ happens(holdSome(Agent, Stuff1, Stuff2), Time),
      some(Location,
           '$kolem_Fn_194'(Agent, Stuff1, Stuff2, Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:201
%; A releases axiom states that if an agent picks up some
%; stuff out of some other stuff,
%; the first stuff's location will be released
%; from inertia:
% [agent,stuff1,stuff2,location,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:206
% Releases(HoldSome(agent,stuff1,stuff2),At(stuff1,location),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',206).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          releases(holdSome(Agent, Stuff1, Stuff2),
                   at(Stuff1, Location),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',206).
axiom(releases(holdSome(Agent, Stuff1, Stuff2), at(Stuff1, Location), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:208
%; Inside
%; physobj1 is inside physobj2.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:211
% fluent Inside(physobj,physobj)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',211).
fluent(inside(physobj,physobj)).
==> mpred_prop(inside(physobj,physobj),fluent).
==> meta_argtypes(inside(physobj,physobj)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:212
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',211).
%; agent puts physobj1 inside physobj2.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:213
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',214).
% event PutInside(agent,physobj,physobj)
event(putInside(agent,physobj,physobj)).
==> mpred_prop(putInside(agent,physobj,physobj),event).
==> meta_argtypes(putInside(agent,physobj,physobj)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:214
%; agent takes physobj1 out of physobj2.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:215
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',216).
% event TakeOutOf(agent,physobj,physobj)
event(takeOutOf(agent,physobj,physobj)).
==> mpred_prop(takeOutOf(agent,physobj,physobj),event).
==> meta_argtypes(takeOutOf(agent,physobj,physobj)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:217
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',218).
%; A state constraint says that a physical object cannot
%; be inside itself:
% [physobj1,physobj2,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:220
% HoldsAt(Inside(physobj1,physobj2),time) ->
% physobj1!=physobj2.
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',220).

 /*  holds_at(inside(Physobj1, Physobj2), Time) ->
       diff(Physobj1, Physobj2).
 */

 /*  not(holds_at(inside(Physobj1, Physobj2), Time)) :-
       not(diff(Physobj1, Physobj2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',220).

 /*  [equals(Physobj1, Physobj2)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(inside(Physobj1, Physobj2)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',220).
axiom(holds_at(neg(inside(Physobj1, Physobj2)), Time),
    [equals(Physobj1, Physobj2)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:223
%; A state constraint says that if a physical object is
%; inside another physical object, the second physical object
%; is not inside the first physical object:
% [physobj1,physobj2,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:227
% HoldsAt(Inside(physobj1,physobj2),time) ->
% !HoldsAt(Inside(physobj2,physobj1),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',227).

 /*  holds_at(inside(Physobj1, Physobj2), Time) ->
       holds_at(neg(inside(Physobj2, Physobj1)), Time).
 */

 /*  holds_at(neg(inside(Physobj2, Physobj1)), Time) :-
       holds_at(inside(Physobj1, Physobj2), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',227).

 /*  [holds_at(inside(Physobj1, Physobj2), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(inside(Physobj2, Physobj1)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',227).
axiom(holds_at(neg(inside(Physobj2, Physobj1)), Time),
    [holds_at(inside(Physobj1, Physobj2), Time)]).

 /*  not(holds_at(inside(Physobj1, Physobj2), Time)) :-
       not(holds_at(neg(inside(Physobj2, Physobj1)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',227).

 /*  [holds_at(inside(Physobj2, Physobj1), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(inside(Physobj1, Physobj2)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',227).
axiom(holds_at(neg(inside(Physobj1, Physobj2)), Time),
    [holds_at(inside(Physobj2, Physobj1), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:230
%; An effect axiom states that if an agent puts a physical
%; object inside another physical object, the first
%; physical object will be inside the second physical object:
% [agent,physobj1,physobj2,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:234
% Initiates(PutInside(agent,physobj1,physobj2),
%           Inside(physobj1,physobj2),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',234).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(putInside(Agent, Physobj1, Physobj2),
                    inside(Physobj1, Physobj2),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',234).
axiom(initiates(putInside(Agent, Physobj1, Physobj2), inside(Physobj1, Physobj2), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:237
%; An effect axiom states that if an agent puts a physical
%; object inside another physical object, the agent will
%; no longer be holding the first physical object:
% [agent,physobj1,physobj2,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:241
% Terminates(PutInside(agent,physobj1,physobj2),
%            Holding(agent,physobj1),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',241).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(putInside(Agent, Physobj1, Physobj2),
                     holding(Agent, Physobj1),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',241).
axiom(terminates(putInside(Agent, Physobj1, Physobj2), holding(Agent, Physobj1), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:244
%; A precondition axiom states that
%; for an agent to put a physical object inside another
%; physical object,
%; the agent must be holding the first physical object
%; and there must be a location such that
%; the agent is at the location and
%; the second physical object is at the location:
%;[agent,physobj1,physobj2,time]
%;Happens(PutInside(agent,physobj1,physobj2),time) ->
%;HoldsAt(Holding(agent,physobj1),time) &
%;{location}
%; HoldsAt(At(agent,location),time) &
%; HoldsAt(At(physobj2,location),time).
%; An effect axiom states that
%; if an agent takes a physical object out of another
%; physical object, the first physical object
%; will no longer be inside the second physical object:
% [agent,physobj1,physobj2,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:263
% Terminates(TakeOutOf(agent,physobj1,physobj2),
%            Inside(physobj1,physobj2),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',263).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(takeOutOf(Agent, Physobj1, Physobj2),
                     inside(Physobj1, Physobj2),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',263).
axiom(terminates(takeOutOf(Agent, Physobj1, Physobj2), inside(Physobj1, Physobj2), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:266
%; A precondition axiom states that
%; for an agent to take a physical object out of another
%; physical object,
%; the first physical object must be inside the second physical object
%; and there must be a location such that
%; the agent is at the location,
%; the first physical object is at the location, and
%; the second physical object is at the location:
% [agent,physobj1,physobj2,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:275
% Happens(TakeOutOf(agent,physobj1,physobj2),time) ->
% HoldsAt(Inside(physobj1,physobj2),time) &
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:277
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',275).
% {location}% 
%  HoldsAt(At(agent,location),time) &
%  HoldsAt(At(physobj1,location),time) &
%  HoldsAt(At(physobj2,location),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:280
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',278).

 /*  exists([Location],
    happens(takeOutOf(Agent, Physobj1, Physobj2), Time) ->
       holds_at(inside(Physobj1, Physobj2), Time),
       holds_at(at(Agent, Location), Time),
       holds_at(at(Physobj1, Location), Time),
       holds_at(at(Physobj2, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',278).

 /*  not(happens(takeOutOf(Agent, Physobj1, Physobj2), Time)) :-
       (   not(holds_at(inside(Physobj1, Physobj2), Time))
       ;   not(holds_at(at(Agent, Location), Time))
       ;   not(holds_at(at(Physobj1, Location), Time))
       ;   not(holds_at(at(Physobj2, Location), Time))
       ),
       some(Location,
            '$kolem_Fn_195'(Agent, Physobj1, Physobj2, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',278).

 /*  [(holds_at(neg(inside(Physobj1, Physobj2)), Time);holds_at(neg(at(Agent, Location)), Time);holds_at(neg(at(Physobj1, Location)), Time);holds_at(neg(at(Physobj2, Location)), Time)), some(Location, '$kolem_Fn_195'(Agent, Physobj1, Physobj2, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(takeOutOf(Agent, Physobj1, Physobj2),
                      Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',278).
axiom(not(happens(takeOutOf(Agent, Physobj1, Physobj2), Time)),
   
    [  (holds_at(neg(inside(Physobj1, Physobj2)), Time);holds_at(neg(at(Agent, Location)), Time);holds_at(neg(at(Physobj1, Location)), Time);holds_at(neg(at(Physobj2, Location)), Time)),
      some(Location,
           '$kolem_Fn_195'(Agent, Physobj1, Physobj2, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',278).

 /*  holds_at(inside(Physobj1, Physobj2), Time) :-
       happens(takeOutOf(Agent, Physobj1, Physobj2), Time),
       some(Location,
            '$kolem_Fn_195'(Agent, Physobj1, Physobj2, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',278).

 /*  [happens(takeOutOf(Agent, Physobj1, Physobj2), Time), some(Location, '$kolem_Fn_195'(Agent, Physobj1, Physobj2, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(inside(Physobj1, Physobj2), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',278).
axiom(holds_at(inside(Physobj1, Physobj2), Time),
   
    [ happens(takeOutOf(Agent, Physobj1, Physobj2), Time),
      some(Location,
           '$kolem_Fn_195'(Agent, Physobj1, Physobj2, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',278).

 /*  holds_at(at(Agent, Location), Time) :-
       happens(takeOutOf(Agent, Physobj1, Physobj2), Time),
       some(Location,
            '$kolem_Fn_195'(Agent, Physobj1, Physobj2, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',278).

 /*  [happens(takeOutOf(Agent, Physobj1, Physobj2), Time), some(Location, '$kolem_Fn_195'(Agent, Physobj1, Physobj2, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(at(Agent, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',278).
axiom(holds_at(at(Agent, Location), Time),
   
    [ happens(takeOutOf(Agent, Physobj1, Physobj2), Time),
      some(Location,
           '$kolem_Fn_195'(Agent, Physobj1, Physobj2, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',278).

 /*  holds_at(at(Physobj1, Location), Time) :-
       happens(takeOutOf(Agent, Physobj1, Physobj2), Time),
       some(Location,
            '$kolem_Fn_195'(Agent, Physobj1, Physobj2, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',278).

 /*  [happens(takeOutOf(Agent, Physobj1, Physobj2), Time), some(Location, '$kolem_Fn_195'(Agent, Physobj1, Physobj2, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(at(Physobj1, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',278).
axiom(holds_at(at(Physobj1, Location), Time),
   
    [ happens(takeOutOf(Agent, Physobj1, Physobj2), Time),
      some(Location,
           '$kolem_Fn_195'(Agent, Physobj1, Physobj2, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',278).

 /*  holds_at(at(Physobj2, Location), Time) :-
       happens(takeOutOf(Agent, Physobj1, Physobj2), Time),
       some(Location,
            '$kolem_Fn_195'(Agent, Physobj1, Physobj2, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',278).

 /*  [happens(takeOutOf(Agent, Physobj1, Physobj2), Time), some(Location, '$kolem_Fn_195'(Agent, Physobj1, Physobj2, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(at(Physobj2, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',278).
axiom(holds_at(at(Physobj2, Location), Time),
   
    [ happens(takeOutOf(Agent, Physobj1, Physobj2), Time),
      some(Location,
           '$kolem_Fn_195'(Agent, Physobj1, Physobj2, Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:282
%; A releases axiom states that if an agent puts a physical
%; object inside another physical object,
%; the first physical object's location will be released
%; from inertia:
% [agent,physobj1,physobj2,location,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:287
% Releases(PutInside(agent,physobj1,physobj2),
%          At(physobj1,location),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',287).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          releases(putInside(Agent, Physobj1, Physobj2),
                   at(Physobj1, Location),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',287).
axiom(releases(putInside(Agent, Physobj1, Physobj2), at(Physobj1, Location), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:290
%; A state constraint says that if a physical object is inside
%; another physical object and the second physical object is
%; at a location, the first physical object is also at the location:
% [physobj1,physobj2,location,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:294
% HoldsAt(Inside(physobj1,physobj2),time) &
% HoldsAt(At(physobj2,location),time) ->
% HoldsAt(At(physobj1,location),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:296
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',294).

 /*  holds_at(inside(Physobj1, Physobj2), Time), holds_at(at(Physobj2, Location), Time) ->
       holds_at(at(Physobj1, Location), Time).
 */

 /*  holds_at(at(Physobj1, Location), Time) :-
       holds_at(inside(Physobj1, Physobj2), Time),
       holds_at(at(Physobj2, Location), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',294).

 /*  [holds_at(inside(Physobj1, Physobj2), Time), holds_at(at(Physobj2, Location), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(at(Physobj1, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',294).
axiom(holds_at(at(Physobj1, Location), Time),
   
    [ holds_at(inside(Physobj1, Physobj2), Time),
      holds_at(at(Physobj2, Location), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',294).

 /*  not(holds_at(inside(Physobj1, Physobj2), Time)) :-
       holds_at(at(Physobj2, Location), Time),
       not(holds_at(at(Physobj1, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',294).

 /*  [holds_at(at(Physobj2, Location), Time), holds_at(neg(at(Physobj1, Location)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(inside(Physobj1, Physobj2)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',294).
axiom(holds_at(neg(inside(Physobj1, Physobj2)), Time),
   
    [ holds_at(at(Physobj2, Location), Time),
      holds_at(neg(at(Physobj1, Location)), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',294).

 /*  not(holds_at(at(Physobj2, Location), Time)) :-
       holds_at(inside(Physobj1, Physobj2), Time),
       not(holds_at(at(Physobj1, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',294).

 /*  [holds_at(inside(Physobj1, Physobj2), Time), holds_at(neg(at(Physobj1, Location)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(at(Physobj2, Location)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',294).
axiom(holds_at(neg(at(Physobj2, Location)), Time),
   
    [ holds_at(inside(Physobj1, Physobj2), Time),
      holds_at(neg(at(Physobj1, Location)), Time)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:298
%; An effect axiom states that if an agent takes a physical
%; object out of another physical object,
%; the agent will be holding the first physical object:
% [agent,physobj1,physobj2,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:302
% Initiates(TakeOutOf(agent,physobj1,physobj2),
%           Holding(agent,physobj1),
%           time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:304
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',302).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(takeOutOf(Agent, Physobj1, Physobj2),
                    holding(Agent, Physobj1),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',302).
axiom(initiates(takeOutOf(Agent, Physobj1, Physobj2), holding(Agent, Physobj1), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:306
%; On
%; physobj1 is on physobj2.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:309
% fluent On(physobj,physobj)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',309).
fluent(on(physobj,physobj)).
==> mpred_prop(on(physobj,physobj),fluent).
==> meta_argtypes(on(physobj,physobj)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:311
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',312).
%; agent places physobj1 on physobj2.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:312
% event PlaceOn(agent,physobj,physobj)
event(placeOn(agent,physobj,physobj)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',312).
==> mpred_prop(placeOn(agent,physobj,physobj),event).
==> meta_argtypes(placeOn(agent,physobj,physobj)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:313
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',312).
%; agent takes physobj1 off of physobj2.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:314
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',315).
% event TakeOffOf(agent,physobj,physobj)
event(takeOffOf(agent,physobj,physobj)).
==> mpred_prop(takeOffOf(agent,physobj,physobj),event).
==> meta_argtypes(takeOffOf(agent,physobj,physobj)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:316
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',317).
%; A state constraint says that a physical object cannot
%; be on itself:
% [physobj1,physobj2,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:319
% HoldsAt(On(physobj1,physobj2),time) ->
% physobj1!=physobj2.
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',319).

 /*  holds_at(on(Physobj1, Physobj2), Time) ->
       diff(Physobj1, Physobj2).
 */

 /*  not(holds_at(on(Physobj1, Physobj2), Time)) :-
       not(diff(Physobj1, Physobj2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',319).

 /*  [equals(Physobj1, Physobj2)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(on(Physobj1, Physobj2)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',319).
axiom(holds_at(neg(on(Physobj1, Physobj2)), Time),
    [equals(Physobj1, Physobj2)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:322
%; A state constraint says that if a physical object is
%; on another physical object, the second physical object
%; is not on the first physical object:
% [physobj1,physobj2,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:326
% HoldsAt(On(physobj1,physobj2),time) ->
% !HoldsAt(On(physobj2,physobj1),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',326).

 /*  holds_at(on(Physobj1, Physobj2), Time) ->
       holds_at(neg(on(Physobj2, Physobj1)), Time).
 */

 /*  holds_at(neg(on(Physobj2, Physobj1)), Time) :-
       holds_at(on(Physobj1, Physobj2), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',326).

 /*  [holds_at(on(Physobj1, Physobj2), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(on(Physobj2, Physobj1)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',326).
axiom(holds_at(neg(on(Physobj2, Physobj1)), Time),
    [holds_at(on(Physobj1, Physobj2), Time)]).

 /*  not(holds_at(on(Physobj1, Physobj2), Time)) :-
       not(holds_at(neg(on(Physobj2, Physobj1)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',326).

 /*  [holds_at(on(Physobj2, Physobj1), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(on(Physobj1, Physobj2)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',326).
axiom(holds_at(neg(on(Physobj1, Physobj2)), Time),
    [holds_at(on(Physobj2, Physobj1), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:329
%; An effect axiom states that if an agent places a physical
%; object on another physical object, the first
%; physical object will be on the second physical object:
% [agent,physobj1,physobj2,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:333
% Initiates(PlaceOn(agent,physobj1,physobj2),
%           On(physobj1,physobj2),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',333).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(placeOn(Agent, Physobj1, Physobj2),
                    on(Physobj1, Physobj2),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',333).
axiom(initiates(placeOn(Agent, Physobj1, Physobj2), on(Physobj1, Physobj2), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:336
%; An effect axiom states that if an agent places a physical
%; object on another physical object, the agent will
%; no longer be holding the first physical object:
% [agent,physobj1,physobj2,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:340
% Terminates(PlaceOn(agent,physobj1,physobj2),
%            Holding(agent,physobj1),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',340).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(placeOn(Agent, Physobj1, Physobj2),
                     holding(Agent, Physobj1),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',340).
axiom(terminates(placeOn(Agent, Physobj1, Physobj2), holding(Agent, Physobj1), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:343
%; A precondition axiom states that
%; for an agent to place a physical object on another
%; physical object,
%; the agent must be holding the first physical object
%; and there must be a location such that
%; the agent is at the location and
%; the second physical object is at the location:
%;[agent,physobj1,physobj2,time]
%;Happens(PlaceOn(agent,physobj1,physobj2),time) ->
%;HoldsAt(Holding(agent,physobj1),time) &
%;{location}
%; HoldsAt(At(agent,location),time) &
%; HoldsAt(At(physobj2,location),time).
%; An effect axiom states that
%; if an agent takes a physical object off of another
%; physical object, the first physical object
%; will no longer be on the second physical object:
% [agent,physobj1,physobj2,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:362
% Terminates(TakeOffOf(agent,physobj1,physobj2),
%            On(physobj1,physobj2),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',362).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(takeOffOf(Agent, Physobj1, Physobj2),
                     on(Physobj1, Physobj2),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',362).
axiom(terminates(takeOffOf(Agent, Physobj1, Physobj2), on(Physobj1, Physobj2), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:365
%; An effect axiom states that if an agent takes a physical
%; object off of another physical object,
%; the agent will be holding the first physical object:
% [agent,physobj1,physobj2,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:369
% Initiates(TakeOffOf(agent,physobj1,physobj2),
%           Holding(agent,physobj1),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',369).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(takeOffOf(Agent, Physobj1, Physobj2),
                    holding(Agent, Physobj1),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',369).
axiom(initiates(takeOffOf(Agent, Physobj1, Physobj2), holding(Agent, Physobj1), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:372
%; A precondition axiom states that
%; for an agent to take a physical object off of another
%; physical object,
%; the first physical object must be on the second physical object
%; and there must be a location such that
%; the agent is at the location and
%; the first physical object is at the location:
%; the second physical object is at the location:
% [agent,physobj1,physobj2,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:381
% Happens(TakeOffOf(agent,physobj1,physobj2),time) ->
% HoldsAt(On(physobj1,physobj2),time) &
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:383
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',381).
% {location}% 
%  HoldsAt(At(agent,location),time) &
%  HoldsAt(At(physobj1,location),time) &
%  HoldsAt(At(physobj2,location),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:386
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',384).

 /*  exists([Location],
    happens(takeOffOf(Agent, Physobj1, Physobj2), Time) ->
       holds_at(on(Physobj1, Physobj2), Time),
       holds_at(at(Agent, Location), Time),
       holds_at(at(Physobj1, Location), Time),
       holds_at(at(Physobj2, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',384).

 /*  not(happens(takeOffOf(Agent, Physobj1, Physobj2), Time)) :-
       (   not(holds_at(on(Physobj1, Physobj2), Time))
       ;   not(holds_at(at(Agent, Location), Time))
       ;   not(holds_at(at(Physobj1, Location), Time))
       ;   not(holds_at(at(Physobj2, Location), Time))
       ),
       some(Location,
            '$kolem_Fn_196'(Agent, Physobj1, Physobj2, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',384).

 /*  [(holds_at(neg(on(Physobj1, Physobj2)), Time);holds_at(neg(at(Agent, Location)), Time);holds_at(neg(at(Physobj1, Location)), Time);holds_at(neg(at(Physobj2, Location)), Time)), some(Location, '$kolem_Fn_196'(Agent, Physobj1, Physobj2, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(takeOffOf(Agent, Physobj1, Physobj2),
                      Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',384).
axiom(not(happens(takeOffOf(Agent, Physobj1, Physobj2), Time)),
   
    [  (holds_at(neg(on(Physobj1, Physobj2)), Time);holds_at(neg(at(Agent, Location)), Time);holds_at(neg(at(Physobj1, Location)), Time);holds_at(neg(at(Physobj2, Location)), Time)),
      some(Location,
           '$kolem_Fn_196'(Agent, Physobj1, Physobj2, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',384).

 /*  holds_at(on(Physobj1, Physobj2), Time) :-
       happens(takeOffOf(Agent, Physobj1, Physobj2), Time),
       some(Location,
            '$kolem_Fn_196'(Agent, Physobj1, Physobj2, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',384).

 /*  [happens(takeOffOf(Agent, Physobj1, Physobj2), Time), some(Location, '$kolem_Fn_196'(Agent, Physobj1, Physobj2, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(on(Physobj1, Physobj2), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',384).
axiom(holds_at(on(Physobj1, Physobj2), Time),
   
    [ happens(takeOffOf(Agent, Physobj1, Physobj2), Time),
      some(Location,
           '$kolem_Fn_196'(Agent, Physobj1, Physobj2, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',384).

 /*  holds_at(at(Agent, Location), Time) :-
       happens(takeOffOf(Agent, Physobj1, Physobj2), Time),
       some(Location,
            '$kolem_Fn_196'(Agent, Physobj1, Physobj2, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',384).

 /*  [happens(takeOffOf(Agent, Physobj1, Physobj2), Time), some(Location, '$kolem_Fn_196'(Agent, Physobj1, Physobj2, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(at(Agent, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',384).
axiom(holds_at(at(Agent, Location), Time),
   
    [ happens(takeOffOf(Agent, Physobj1, Physobj2), Time),
      some(Location,
           '$kolem_Fn_196'(Agent, Physobj1, Physobj2, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',384).

 /*  holds_at(at(Physobj1, Location), Time) :-
       happens(takeOffOf(Agent, Physobj1, Physobj2), Time),
       some(Location,
            '$kolem_Fn_196'(Agent, Physobj1, Physobj2, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',384).

 /*  [happens(takeOffOf(Agent, Physobj1, Physobj2), Time), some(Location, '$kolem_Fn_196'(Agent, Physobj1, Physobj2, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(at(Physobj1, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',384).
axiom(holds_at(at(Physobj1, Location), Time),
   
    [ happens(takeOffOf(Agent, Physobj1, Physobj2), Time),
      some(Location,
           '$kolem_Fn_196'(Agent, Physobj1, Physobj2, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',384).

 /*  holds_at(at(Physobj2, Location), Time) :-
       happens(takeOffOf(Agent, Physobj1, Physobj2), Time),
       some(Location,
            '$kolem_Fn_196'(Agent, Physobj1, Physobj2, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',384).

 /*  [happens(takeOffOf(Agent, Physobj1, Physobj2), Time), some(Location, '$kolem_Fn_196'(Agent, Physobj1, Physobj2, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(at(Physobj2, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',384).
axiom(holds_at(at(Physobj2, Location), Time),
   
    [ happens(takeOffOf(Agent, Physobj1, Physobj2), Time),
      some(Location,
           '$kolem_Fn_196'(Agent, Physobj1, Physobj2, Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:388
%; A releases axiom states that if an agent places a physical
%; object on another physical object,
%; the first physical object's location will be released
%; from inertia:
% [agent,physobj1,physobj2,location,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:393
% Releases(PlaceOn(agent,physobj1,physobj2),
%          At(physobj1,location),
%          time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:395
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',393).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          releases(placeOn(Agent, Physobj1, Physobj2),
                   at(Physobj1, Location),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',393).
axiom(releases(placeOn(Agent, Physobj1, Physobj2), at(Physobj1, Location), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:397
%; A state constraint says that if a physical object is on
%; another physical object and the second physical object is
%; at a location, the first physical object is also at the location:
% [physobj1,physobj2,location,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:401
% HoldsAt(On(physobj1,physobj2),time) &
% HoldsAt(At(physobj2,location),time) ->
% HoldsAt(At(physobj1,location),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:403
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',401).

 /*  holds_at(on(Physobj1, Physobj2), Time), holds_at(at(Physobj2, Location), Time) ->
       holds_at(at(Physobj1, Location), Time).
 */

 /*  holds_at(at(Physobj1, Location), Time) :-
       holds_at(on(Physobj1, Physobj2), Time),
       holds_at(at(Physobj2, Location), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',401).

 /*  [holds_at(on(Physobj1, Physobj2), Time), holds_at(at(Physobj2, Location), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(at(Physobj1, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',401).
axiom(holds_at(at(Physobj1, Location), Time),
   
    [ holds_at(on(Physobj1, Physobj2), Time),
      holds_at(at(Physobj2, Location), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',401).

 /*  not(holds_at(on(Physobj1, Physobj2), Time)) :-
       holds_at(at(Physobj2, Location), Time),
       not(holds_at(at(Physobj1, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',401).

 /*  [holds_at(at(Physobj2, Location), Time), holds_at(neg(at(Physobj1, Location)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(on(Physobj1, Physobj2)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',401).
axiom(holds_at(neg(on(Physobj1, Physobj2)), Time),
   
    [ holds_at(at(Physobj2, Location), Time),
      holds_at(neg(at(Physobj1, Location)), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',401).

 /*  not(holds_at(at(Physobj2, Location), Time)) :-
       holds_at(on(Physobj1, Physobj2), Time),
       not(holds_at(at(Physobj1, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',401).

 /*  [holds_at(on(Physobj1, Physobj2), Time), holds_at(neg(at(Physobj1, Location)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(at(Physobj2, Location)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',401).
axiom(holds_at(neg(at(Physobj2, Location)), Time),
   
    [ holds_at(on(Physobj1, Physobj2), Time),
      holds_at(neg(at(Physobj1, Location)), Time)
    ]).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:405
% fluent Near(agent,object)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',405).
fluent(near(agent,object)).
==> mpred_prop(near(agent,object),fluent).
==> meta_argtypes(near(agent,object)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:406
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',407).
% event WalkFromTo(agent,object,object)
event(walkFromTo(agent,object,object)).
==> mpred_prop(walkFromTo(agent,object,object),event).
==> meta_argtypes(walkFromTo(agent,object,object)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:407
% event WalkFrom(agent,object)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',407).
event(walkFrom(agent,object)).
==> mpred_prop(walkFrom(agent,object),event).
==> meta_argtypes(walkFrom(agent,object)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:408
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',409).
% event RunFromTo(agent,object,object)
event(runFromTo(agent,object,object)).
==> mpred_prop(runFromTo(agent,object,object),event).
==> meta_argtypes(runFromTo(agent,object,object)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:410
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',411).
% [agent,object1,object2,time]
% Initiates(WalkFromTo(agent,object1,object2),
%           Near(agent,object2),
%           time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:413
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',411).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(walkFromTo(Agent, Object1, Object2),
                    near(Agent, Object2),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',411).
axiom(initiates(walkFromTo(Agent, Object1, Object2), near(Agent, Object2), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:415
% [agent,object1,object2,time]
% Terminates(WalkFromTo(agent,object1,object2),
%            Near(agent,object1),
%            time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:418
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',417).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(walkFromTo(Agent, Object1, Object2),
                     near(Agent, Object1),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',417).
axiom(terminates(walkFromTo(Agent, Object1, Object2), near(Agent, Object1), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:420
% [agent,object1,object2,time]
% Happens(WalkFromTo(agent,object1,object2),time) ->
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:422
% {location}% 
% HoldsAt(At(agent,location),time) &
% HoldsAt(At(object1,location),time) &
% HoldsAt(At(object2,location),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:425
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',422).

 /*  exists([Location],
    happens(walkFromTo(Agent, Object1, Object2), Time) ->
       holds_at(at(Agent, Location), Time),
       holds_at(at(Object1, Location), Time),
       holds_at(at(Object2, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',422).

 /*  not(happens(walkFromTo(Agent, Object1, Object2), Time)) :-
       (   not(holds_at(at(Agent, Location), Time))
       ;   not(holds_at(at(Object1, Location), Time))
       ;   not(holds_at(at(Object2, Location), Time))
       ),
       some(Location,
            '$kolem_Fn_197'(Agent, Object1, Object2, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',422).

 /*  [(holds_at(neg(at(Agent, Location)), Time);holds_at(neg(at(Object1, Location)), Time);holds_at(neg(at(Object2, Location)), Time)), some(Location, '$kolem_Fn_197'(Agent, Object1, Object2, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(walkFromTo(Agent, Object1, Object2),
                      Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',422).
axiom(not(happens(walkFromTo(Agent, Object1, Object2), Time)),
   
    [  (holds_at(neg(at(Agent, Location)), Time);holds_at(neg(at(Object1, Location)), Time);holds_at(neg(at(Object2, Location)), Time)),
      some(Location,
           '$kolem_Fn_197'(Agent, Object1, Object2, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',422).

 /*  holds_at(at(Agent, Location), Time) :-
       happens(walkFromTo(Agent, Object1, Object2), Time),
       some(Location,
            '$kolem_Fn_197'(Agent, Object1, Object2, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',422).

 /*  [happens(walkFromTo(Agent, Object1, Object2), Time), some(Location, '$kolem_Fn_197'(Agent, Object1, Object2, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(at(Agent, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',422).
axiom(holds_at(at(Agent, Location), Time),
   
    [ happens(walkFromTo(Agent, Object1, Object2), Time),
      some(Location,
           '$kolem_Fn_197'(Agent, Object1, Object2, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',422).

 /*  holds_at(at(Object1, Location), Time) :-
       happens(walkFromTo(Agent, Object1, Object2), Time),
       some(Location,
            '$kolem_Fn_197'(Agent, Object1, Object2, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',422).

 /*  [happens(walkFromTo(Agent, Object1, Object2), Time), some(Location, '$kolem_Fn_197'(Agent, Object1, Object2, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(at(Object1, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',422).
axiom(holds_at(at(Object1, Location), Time),
   
    [ happens(walkFromTo(Agent, Object1, Object2), Time),
      some(Location,
           '$kolem_Fn_197'(Agent, Object1, Object2, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',422).

 /*  holds_at(at(Object2, Location), Time) :-
       happens(walkFromTo(Agent, Object1, Object2), Time),
       some(Location,
            '$kolem_Fn_197'(Agent, Object1, Object2, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',422).

 /*  [happens(walkFromTo(Agent, Object1, Object2), Time), some(Location, '$kolem_Fn_197'(Agent, Object1, Object2, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(at(Object2, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',422).
axiom(holds_at(at(Object2, Location), Time),
   
    [ happens(walkFromTo(Agent, Object1, Object2), Time),
      some(Location,
           '$kolem_Fn_197'(Agent, Object1, Object2, Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:427
% [agent,object1,object2,time]
% Initiates(RunFromTo(agent,object1,object2),
%           Near(agent,object2),
%           time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:430
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',429).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(runFromTo(Agent, Object1, Object2),
                    near(Agent, Object2),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',429).
axiom(initiates(runFromTo(Agent, Object1, Object2), near(Agent, Object2), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:432
% [agent,object1,object2,time]
% Terminates(RunFromTo(agent,object1,object2),
%            Near(agent,object1),
%            time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:435
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',434).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(runFromTo(Agent, Object1, Object2),
                     near(Agent, Object1),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',434).
axiom(terminates(runFromTo(Agent, Object1, Object2), near(Agent, Object1), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:437
% [agent,object1,object2,time]
% Happens(RunFromTo(agent,object1,object2),time) ->
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:439
% {location}% 
% HoldsAt(At(agent,location),time) &
% HoldsAt(At(object1,location),time) &
% HoldsAt(At(object2,location),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:442
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',439).

 /*  exists([Location],
    happens(runFromTo(Agent, Object1, Object2), Time) ->
       holds_at(at(Agent, Location), Time),
       holds_at(at(Object1, Location), Time),
       holds_at(at(Object2, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',439).

 /*  not(happens(runFromTo(Agent, Object1, Object2), Time)) :-
       (   not(holds_at(at(Agent, Location), Time))
       ;   not(holds_at(at(Object1, Location), Time))
       ;   not(holds_at(at(Object2, Location), Time))
       ),
       some(Location,
            '$kolem_Fn_198'(Agent, Object1, Object2, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',439).

 /*  [(holds_at(neg(at(Agent, Location)), Time);holds_at(neg(at(Object1, Location)), Time);holds_at(neg(at(Object2, Location)), Time)), some(Location, '$kolem_Fn_198'(Agent, Object1, Object2, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(runFromTo(Agent, Object1, Object2),
                      Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',439).
axiom(not(happens(runFromTo(Agent, Object1, Object2), Time)),
   
    [  (holds_at(neg(at(Agent, Location)), Time);holds_at(neg(at(Object1, Location)), Time);holds_at(neg(at(Object2, Location)), Time)),
      some(Location,
           '$kolem_Fn_198'(Agent, Object1, Object2, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',439).

 /*  holds_at(at(Agent, Location), Time) :-
       happens(runFromTo(Agent, Object1, Object2), Time),
       some(Location,
            '$kolem_Fn_198'(Agent, Object1, Object2, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',439).

 /*  [happens(runFromTo(Agent, Object1, Object2), Time), some(Location, '$kolem_Fn_198'(Agent, Object1, Object2, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(at(Agent, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',439).
axiom(holds_at(at(Agent, Location), Time),
   
    [ happens(runFromTo(Agent, Object1, Object2), Time),
      some(Location,
           '$kolem_Fn_198'(Agent, Object1, Object2, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',439).

 /*  holds_at(at(Object1, Location), Time) :-
       happens(runFromTo(Agent, Object1, Object2), Time),
       some(Location,
            '$kolem_Fn_198'(Agent, Object1, Object2, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',439).

 /*  [happens(runFromTo(Agent, Object1, Object2), Time), some(Location, '$kolem_Fn_198'(Agent, Object1, Object2, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(at(Object1, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',439).
axiom(holds_at(at(Object1, Location), Time),
   
    [ happens(runFromTo(Agent, Object1, Object2), Time),
      some(Location,
           '$kolem_Fn_198'(Agent, Object1, Object2, Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',439).

 /*  holds_at(at(Object2, Location), Time) :-
       happens(runFromTo(Agent, Object1, Object2), Time),
       some(Location,
            '$kolem_Fn_198'(Agent, Object1, Object2, Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',439).

 /*  [happens(runFromTo(Agent, Object1, Object2), Time), some(Location, '$kolem_Fn_198'(Agent, Object1, Object2, Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(at(Object2, Location), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',439).
axiom(holds_at(at(Object2, Location), Time),
   
    [ happens(runFromTo(Agent, Object1, Object2), Time),
      some(Location,
           '$kolem_Fn_198'(Agent, Object1, Object2, Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:444
% [agent,object,time]
% Terminates(WalkFrom(agent,object),
%            Near(agent,object),
%            time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:447
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',446).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(walkFrom(Agent, Object),
                     near(Agent, Object),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',446).
axiom(terminates(walkFrom(Agent, Object), near(Agent, Object), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:449
% [agent,object,location,door,time]
% HoldsAt(Near(agent,object),time) &
% HoldsAt(At(agent,location),time) &
% HoldsAt(At(object,location),time) &
% Side1(door)=location &
% Happens(WalkThroughDoor12(agent,door),time) ->
% Happens(WalkFrom(agent,object),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:455
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',451).

 /*  holds_at(near(Agent, Object), Time), holds_at(at(Agent, Location), Time), holds_at(at(Object, Location), Time), equals(side1(Door), Location), happens(walkThroughDoor12(Agent, Door), Time) ->
       happens(walkFrom(Agent, Object), Time).
 */

 /*  happens(walkFrom(Agent, Object), Time) :-
       holds_at(near(Agent, Object), Time),
       holds_at(at(Agent, Location), Time),
       holds_at(at(Object, Location), Time),
       equals(side1(Door), Location),
       happens(walkThroughDoor12(Agent, Door), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',451).

 /*  [holds_at(near(Agent, Object), Time), holds_at(at(Agent, Location), Time), holds_at(at(Object, Location), Time), equals(side1(Door), Location), happens(walkThroughDoor12(Agent, Door), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(walkFrom(Agent, Object), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',451).
axiom(happens(walkFrom(Agent, Object), Time),
   
    [ holds_at(near(Agent, Object), Time),
      holds_at(at(Agent, Location), Time),
      holds_at(at(Object, Location), Time),
      equals(side1(Door), Location),
      happens(walkThroughDoor12(Agent, Door), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',451).

 /*  not(holds_at(near(Agent, Object), Time)) :-
       ( holds_at(at(Agent, Location), Time),
         holds_at(at(Object, Location), Time),
         equals(side1(Door), Location),
         happens(walkThroughDoor12(Agent, Door), Time)
       ),
       not(happens(walkFrom(Agent, Object), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',451).

 /*  [holds_at(at(Agent, Location), Time), holds_at(at(Object, Location), Time), equals(side1(Door), Location), happens(walkThroughDoor12(Agent, Door), Time), not(happens(walkFrom(Agent, Object), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(near(Agent, Object)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',451).
axiom(holds_at(neg(near(Agent, Object)), Time),
   
    [ holds_at(at(Agent, Location), Time),
      holds_at(at(Object, Location), Time),
      equals(side1(Door), Location),
      happens(walkThroughDoor12(Agent, Door), Time),
      not(happens(walkFrom(Agent, Object), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',451).

 /*  not(holds_at(at(Agent, Location), Time)) :-
       ( holds_at(at(Object, Location), Time),
         equals(side1(Door), Location),
         happens(walkThroughDoor12(Agent, Door), Time)
       ),
       holds_at(near(Agent, Object), Time),
       not(happens(walkFrom(Agent, Object), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',451).

 /*  [holds_at(at(Object, Location), Time), equals(side1(Door), Location), happens(walkThroughDoor12(Agent, Door), Time), holds_at(near(Agent, Object), Time), not(happens(walkFrom(Agent, Object), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(at(Agent, Location)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',451).
axiom(holds_at(neg(at(Agent, Location)), Time),
   
    [ holds_at(at(Object, Location), Time),
      equals(side1(Door), Location),
      happens(walkThroughDoor12(Agent, Door), Time),
      holds_at(near(Agent, Object), Time),
      not(happens(walkFrom(Agent, Object), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',451).

 /*  not(holds_at(at(Object, Location), Time)) :-
       ( equals(side1(Door), Location),
         happens(walkThroughDoor12(Agent, Door), Time)
       ),
       holds_at(at(Agent, Location), Time),
       holds_at(near(Agent, Object), Time),
       not(happens(walkFrom(Agent, Object), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',451).

 /*  [equals(side1(Door), Location), happens(walkThroughDoor12(Agent, Door), Time), holds_at(at(Agent, Location), Time), holds_at(near(Agent, Object), Time), not(happens(walkFrom(Agent, Object), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(at(Object, Location)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',451).
axiom(holds_at(neg(at(Object, Location)), Time),
   
    [ equals(side1(Door), Location),
      happens(walkThroughDoor12(Agent, Door), Time),
      holds_at(at(Agent, Location), Time),
      holds_at(near(Agent, Object), Time),
      not(happens(walkFrom(Agent, Object), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',451).

 /*  not(happens(walkThroughDoor12(Agent, Door), Time)) :-
       equals(side1(Door), Location),
       holds_at(at(Object, Location), Time),
       holds_at(at(Agent, Location), Time),
       holds_at(near(Agent, Object), Time),
       not(happens(walkFrom(Agent, Object), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',451).

 /*  [equals(side1(Door), Location), holds_at(at(Object, Location), Time), holds_at(at(Agent, Location), Time), holds_at(near(Agent, Object), Time), not(happens(walkFrom(Agent, Object), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(walkThroughDoor12(Agent, Door), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',451).
axiom(not(happens(walkThroughDoor12(Agent, Door), Time)),
   
    [ equals(side1(Door), Location),
      holds_at(at(Object, Location), Time),
      holds_at(at(Agent, Location), Time),
      holds_at(near(Agent, Object), Time),
      not(happens(walkFrom(Agent, Object), Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:457
% [agent,object,location,door,time]
% HoldsAt(Near(agent,object),time) &
% HoldsAt(At(agent,location),time) &
% HoldsAt(At(object,location),time) &
% Side2(door)=location &
% Happens(WalkThroughDoor21(agent,door),time) ->
% Happens(WalkFrom(agent,object),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:463
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',459).

 /*  holds_at(near(Agent, Object), Time), holds_at(at(Agent, Location), Time), holds_at(at(Object, Location), Time), equals(side2(Door), Location), happens(walkThroughDoor21(Agent, Door), Time) ->
       happens(walkFrom(Agent, Object), Time).
 */

 /*  happens(walkFrom(Agent, Object), Time) :-
       holds_at(near(Agent, Object), Time),
       holds_at(at(Agent, Location), Time),
       holds_at(at(Object, Location), Time),
       equals(side2(Door), Location),
       happens(walkThroughDoor21(Agent, Door), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',459).

 /*  [holds_at(near(Agent, Object), Time), holds_at(at(Agent, Location), Time), holds_at(at(Object, Location), Time), equals(side2(Door), Location), happens(walkThroughDoor21(Agent, Door), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(walkFrom(Agent, Object), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',459).
axiom(happens(walkFrom(Agent, Object), Time),
   
    [ holds_at(near(Agent, Object), Time),
      holds_at(at(Agent, Location), Time),
      holds_at(at(Object, Location), Time),
      equals(side2(Door), Location),
      happens(walkThroughDoor21(Agent, Door), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',459).

 /*  not(holds_at(near(Agent, Object), Time)) :-
       ( holds_at(at(Agent, Location), Time),
         holds_at(at(Object, Location), Time),
         equals(side2(Door), Location),
         happens(walkThroughDoor21(Agent, Door), Time)
       ),
       not(happens(walkFrom(Agent, Object), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',459).

 /*  [holds_at(at(Agent, Location), Time), holds_at(at(Object, Location), Time), equals(side2(Door), Location), happens(walkThroughDoor21(Agent, Door), Time), not(happens(walkFrom(Agent, Object), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(near(Agent, Object)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',459).
axiom(holds_at(neg(near(Agent, Object)), Time),
   
    [ holds_at(at(Agent, Location), Time),
      holds_at(at(Object, Location), Time),
      equals(side2(Door), Location),
      happens(walkThroughDoor21(Agent, Door), Time),
      not(happens(walkFrom(Agent, Object), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',459).

 /*  not(holds_at(at(Agent, Location), Time)) :-
       ( holds_at(at(Object, Location), Time),
         equals(side2(Door), Location),
         happens(walkThroughDoor21(Agent, Door), Time)
       ),
       holds_at(near(Agent, Object), Time),
       not(happens(walkFrom(Agent, Object), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',459).

 /*  [holds_at(at(Object, Location), Time), equals(side2(Door), Location), happens(walkThroughDoor21(Agent, Door), Time), holds_at(near(Agent, Object), Time), not(happens(walkFrom(Agent, Object), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(at(Agent, Location)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',459).
axiom(holds_at(neg(at(Agent, Location)), Time),
   
    [ holds_at(at(Object, Location), Time),
      equals(side2(Door), Location),
      happens(walkThroughDoor21(Agent, Door), Time),
      holds_at(near(Agent, Object), Time),
      not(happens(walkFrom(Agent, Object), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',459).

 /*  not(holds_at(at(Object, Location), Time)) :-
       ( equals(side2(Door), Location),
         happens(walkThroughDoor21(Agent, Door), Time)
       ),
       holds_at(at(Agent, Location), Time),
       holds_at(near(Agent, Object), Time),
       not(happens(walkFrom(Agent, Object), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',459).

 /*  [equals(side2(Door), Location), happens(walkThroughDoor21(Agent, Door), Time), holds_at(at(Agent, Location), Time), holds_at(near(Agent, Object), Time), not(happens(walkFrom(Agent, Object), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(at(Object, Location)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',459).
axiom(holds_at(neg(at(Object, Location)), Time),
   
    [ equals(side2(Door), Location),
      happens(walkThroughDoor21(Agent, Door), Time),
      holds_at(at(Agent, Location), Time),
      holds_at(near(Agent, Object), Time),
      not(happens(walkFrom(Agent, Object), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',459).

 /*  not(happens(walkThroughDoor21(Agent, Door), Time)) :-
       equals(side2(Door), Location),
       holds_at(at(Object, Location), Time),
       holds_at(at(Agent, Location), Time),
       holds_at(near(Agent, Object), Time),
       not(happens(walkFrom(Agent, Object), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',459).

 /*  [equals(side2(Door), Location), holds_at(at(Object, Location), Time), holds_at(at(Agent, Location), Time), holds_at(near(Agent, Object), Time), not(happens(walkFrom(Agent, Object), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(walkThroughDoor21(Agent, Door), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',459).
axiom(not(happens(walkThroughDoor21(Agent, Door), Time)),
   
    [ equals(side2(Door), Location),
      holds_at(at(Object, Location), Time),
      holds_at(at(Agent, Location), Time),
      holds_at(near(Agent, Object), Time),
      not(happens(walkFrom(Agent, Object), Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:465
% [agent,object,room,staircase,time]
% HoldsAt(Near(agent,object),time) &
% HoldsAt(At(agent,room),time) &
% HoldsAt(At(object,room),time) &
% Side1(staircase)=room &
% Happens(WalkUpStaircase(agent,staircase),time) ->
% Happens(WalkFrom(agent,object),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:471
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',467).

 /*  holds_at(near(Agent, Object), Time), holds_at(at(Agent, Room), Time), holds_at(at(Object, Room), Time), equals(side1(Staircase), Room), happens(walkUpStaircase(Agent, Staircase), Time) ->
       happens(walkFrom(Agent, Object), Time).
 */

 /*  happens(walkFrom(Agent, Object), Time) :-
       holds_at(near(Agent, Object), Time),
       holds_at(at(Agent, Room), Time),
       holds_at(at(Object, Room), Time),
       equals(side1(Staircase), Room),
       happens(walkUpStaircase(Agent, Staircase), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',467).

 /*  [holds_at(near(Agent, Object), Time), holds_at(at(Agent, Room), Time), holds_at(at(Object, Room), Time), equals(side1(Staircase), Room), happens(walkUpStaircase(Agent, Staircase), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(walkFrom(Agent, Object), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',467).
axiom(happens(walkFrom(Agent, Object), Time),
   
    [ holds_at(near(Agent, Object), Time),
      holds_at(at(Agent, Room), Time),
      holds_at(at(Object, Room), Time),
      equals(side1(Staircase), Room),
      happens(walkUpStaircase(Agent, Staircase), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',467).

 /*  not(holds_at(near(Agent, Object), Time)) :-
       ( holds_at(at(Agent, Room), Time),
         holds_at(at(Object, Room), Time),
         equals(side1(Staircase), Room),
         happens(walkUpStaircase(Agent, Staircase), Time)
       ),
       not(happens(walkFrom(Agent, Object), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',467).

 /*  [holds_at(at(Agent, Room), Time), holds_at(at(Object, Room), Time), equals(side1(Staircase), Room), happens(walkUpStaircase(Agent, Staircase), Time), not(happens(walkFrom(Agent, Object), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(near(Agent, Object)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',467).
axiom(holds_at(neg(near(Agent, Object)), Time),
   
    [ holds_at(at(Agent, Room), Time),
      holds_at(at(Object, Room), Time),
      equals(side1(Staircase), Room),
      happens(walkUpStaircase(Agent, Staircase), Time),
      not(happens(walkFrom(Agent, Object), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',467).

 /*  not(holds_at(at(Agent, Room), Time)) :-
       ( holds_at(at(Object, Room), Time),
         equals(side1(Staircase), Room),
         happens(walkUpStaircase(Agent, Staircase), Time)
       ),
       holds_at(near(Agent, Object), Time),
       not(happens(walkFrom(Agent, Object), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',467).

 /*  [holds_at(at(Object, Room), Time), equals(side1(Staircase), Room), happens(walkUpStaircase(Agent, Staircase), Time), holds_at(near(Agent, Object), Time), not(happens(walkFrom(Agent, Object), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(at(Agent, Room)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',467).
axiom(holds_at(neg(at(Agent, Room)), Time),
   
    [ holds_at(at(Object, Room), Time),
      equals(side1(Staircase), Room),
      happens(walkUpStaircase(Agent, Staircase), Time),
      holds_at(near(Agent, Object), Time),
      not(happens(walkFrom(Agent, Object), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',467).

 /*  not(holds_at(at(Object, Room), Time)) :-
       ( equals(side1(Staircase), Room),
         happens(walkUpStaircase(Agent, Staircase), Time)
       ),
       holds_at(at(Agent, Room), Time),
       holds_at(near(Agent, Object), Time),
       not(happens(walkFrom(Agent, Object), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',467).

 /*  [equals(side1(Staircase), Room), happens(walkUpStaircase(Agent, Staircase), Time), holds_at(at(Agent, Room), Time), holds_at(near(Agent, Object), Time), not(happens(walkFrom(Agent, Object), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(at(Object, Room)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',467).
axiom(holds_at(neg(at(Object, Room)), Time),
   
    [ equals(side1(Staircase), Room),
      happens(walkUpStaircase(Agent, Staircase), Time),
      holds_at(at(Agent, Room), Time),
      holds_at(near(Agent, Object), Time),
      not(happens(walkFrom(Agent, Object), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',467).

 /*  not(happens(walkUpStaircase(Agent, Staircase), Time)) :-
       equals(side1(Staircase), Room),
       holds_at(at(Object, Room), Time),
       holds_at(at(Agent, Room), Time),
       holds_at(near(Agent, Object), Time),
       not(happens(walkFrom(Agent, Object), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',467).

 /*  [equals(side1(Staircase), Room), holds_at(at(Object, Room), Time), holds_at(at(Agent, Room), Time), holds_at(near(Agent, Object), Time), not(happens(walkFrom(Agent, Object), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(walkUpStaircase(Agent, Staircase), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',467).
axiom(not(happens(walkUpStaircase(Agent, Staircase), Time)),
   
    [ equals(side1(Staircase), Room),
      holds_at(at(Object, Room), Time),
      holds_at(at(Agent, Room), Time),
      holds_at(near(Agent, Object), Time),
      not(happens(walkFrom(Agent, Object), Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:473
% [agent,object,room,staircase,time]
% HoldsAt(Near(agent,object),time) &
% HoldsAt(At(agent,room),time) &
% HoldsAt(At(object,room),time) &
% Side2(staircase)=room &
% Happens(WalkDownStaircase(agent,staircase),time) ->
% Happens(WalkFrom(agent,object),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:479
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',475).

 /*  holds_at(near(Agent, Object), Time), holds_at(at(Agent, Room), Time), holds_at(at(Object, Room), Time), equals(side2(Staircase), Room), happens(walkDownStaircase(Agent, Staircase), Time) ->
       happens(walkFrom(Agent, Object), Time).
 */

 /*  happens(walkFrom(Agent, Object), Time) :-
       holds_at(near(Agent, Object), Time),
       holds_at(at(Agent, Room), Time),
       holds_at(at(Object, Room), Time),
       equals(side2(Staircase), Room),
       happens(walkDownStaircase(Agent, Staircase), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',475).

 /*  [holds_at(near(Agent, Object), Time), holds_at(at(Agent, Room), Time), holds_at(at(Object, Room), Time), equals(side2(Staircase), Room), happens(walkDownStaircase(Agent, Staircase), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(walkFrom(Agent, Object), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',475).
axiom(happens(walkFrom(Agent, Object), Time),
   
    [ holds_at(near(Agent, Object), Time),
      holds_at(at(Agent, Room), Time),
      holds_at(at(Object, Room), Time),
      equals(side2(Staircase), Room),
      happens(walkDownStaircase(Agent, Staircase), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',475).

 /*  not(holds_at(near(Agent, Object), Time)) :-
       ( holds_at(at(Agent, Room), Time),
         holds_at(at(Object, Room), Time),
         equals(side2(Staircase), Room),
         happens(walkDownStaircase(Agent, Staircase), Time)
       ),
       not(happens(walkFrom(Agent, Object), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',475).

 /*  [holds_at(at(Agent, Room), Time), holds_at(at(Object, Room), Time), equals(side2(Staircase), Room), happens(walkDownStaircase(Agent, Staircase), Time), not(happens(walkFrom(Agent, Object), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(near(Agent, Object)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',475).
axiom(holds_at(neg(near(Agent, Object)), Time),
   
    [ holds_at(at(Agent, Room), Time),
      holds_at(at(Object, Room), Time),
      equals(side2(Staircase), Room),
      happens(walkDownStaircase(Agent, Staircase), Time),
      not(happens(walkFrom(Agent, Object), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',475).

 /*  not(holds_at(at(Agent, Room), Time)) :-
       ( holds_at(at(Object, Room), Time),
         equals(side2(Staircase), Room),
         happens(walkDownStaircase(Agent, Staircase), Time)
       ),
       holds_at(near(Agent, Object), Time),
       not(happens(walkFrom(Agent, Object), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',475).

 /*  [holds_at(at(Object, Room), Time), equals(side2(Staircase), Room), happens(walkDownStaircase(Agent, Staircase), Time), holds_at(near(Agent, Object), Time), not(happens(walkFrom(Agent, Object), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(at(Agent, Room)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',475).
axiom(holds_at(neg(at(Agent, Room)), Time),
   
    [ holds_at(at(Object, Room), Time),
      equals(side2(Staircase), Room),
      happens(walkDownStaircase(Agent, Staircase), Time),
      holds_at(near(Agent, Object), Time),
      not(happens(walkFrom(Agent, Object), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',475).

 /*  not(holds_at(at(Object, Room), Time)) :-
       ( equals(side2(Staircase), Room),
         happens(walkDownStaircase(Agent, Staircase), Time)
       ),
       holds_at(at(Agent, Room), Time),
       holds_at(near(Agent, Object), Time),
       not(happens(walkFrom(Agent, Object), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',475).

 /*  [equals(side2(Staircase), Room), happens(walkDownStaircase(Agent, Staircase), Time), holds_at(at(Agent, Room), Time), holds_at(near(Agent, Object), Time), not(happens(walkFrom(Agent, Object), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(at(Object, Room)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',475).
axiom(holds_at(neg(at(Object, Room)), Time),
   
    [ equals(side2(Staircase), Room),
      happens(walkDownStaircase(Agent, Staircase), Time),
      holds_at(at(Agent, Room), Time),
      holds_at(near(Agent, Object), Time),
      not(happens(walkFrom(Agent, Object), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',475).

 /*  not(happens(walkDownStaircase(Agent, Staircase), Time)) :-
       equals(side2(Staircase), Room),
       holds_at(at(Object, Room), Time),
       holds_at(at(Agent, Room), Time),
       holds_at(near(Agent, Object), Time),
       not(happens(walkFrom(Agent, Object), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',475).

 /*  [equals(side2(Staircase), Room), holds_at(at(Object, Room), Time), holds_at(at(Agent, Room), Time), holds_at(near(Agent, Object), Time), not(happens(walkFrom(Agent, Object), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(walkDownStaircase(Agent, Staircase), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e',475).
axiom(not(happens(walkDownStaircase(Agent, Staircase), Time)),
   
    [ equals(side2(Staircase), Room),
      holds_at(at(Object, Room), Time),
      holds_at(at(Agent, Room), Time),
      holds_at(near(Agent, Object), Time),
      not(happens(walkFrom(Agent, Object), Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/OTSpace.e:481
%; End of file.
