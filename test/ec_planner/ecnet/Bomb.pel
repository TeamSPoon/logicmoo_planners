:-include(library('ec_planner/ec_test_incl')).
:-expects_dialect(pfc).
% Wed, 01 Apr 2020 20:01:31 GMT
% From ../ecnet/Bomb.pel:4
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Baseball.e',157).

 /*  loading(load_e_pl,
   	'/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e').
 */
%;
%; Copyright (c) 2005 IBM Corporation and others.
%; All rights reserved. This program and the accompanying materials
%; are made available under the terms of the Common Public License v1.0
%; which accompanies this distribution, and is available at
%; http://www.eclipse.org/legal/cpl-v10.html
%;
%; Contributors:
%; IBM - Initial implementation
%;
%; bomb
%; agent is nondeterministically killed.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e:13
% fluent KilledDeterminingFluent(agent)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e',13).
fluent(killedDeterminingFluent(agent)).
==> mpred_prop(killedDeterminingFluent(agent),fluent).
==> meta_argtypes(killedDeterminingFluent(agent)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e:14
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e',15).
% noninertial KilledDeterminingFluent
==> noninertial(killedDeterminingFluent).
%; agent is nondeterministically injured.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e:17
% fluent InjuredDeterminingFluent(agent)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e',17).
fluent(injuredDeterminingFluent(agent)).
==> mpred_prop(injuredDeterminingFluent(agent),fluent).
==> meta_argtypes(injuredDeterminingFluent(agent)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e:18
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e',19).
% noninertial InjuredDeterminingFluent
==> noninertial(injuredDeterminingFluent).
%; physobj is nondeterministically destroyed.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e:21
% fluent DestroyedDeterminingFluent(physobj)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e',21).
fluent(destroyedDeterminingFluent(physobj)).
==> mpred_prop(destroyedDeterminingFluent(physobj),fluent).
==> meta_argtypes(destroyedDeterminingFluent(physobj)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e:22
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e',23).
% noninertial DestroyedDeterminingFluent
==> noninertial(destroyedDeterminingFluent).
%; physobj is nondeterministically damaged.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e:25
% fluent DamagedDeterminingFluent(physobj)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e',25).
fluent(damagedDeterminingFluent(physobj)).
==> mpred_prop(damagedDeterminingFluent(physobj),fluent).
==> meta_argtypes(damagedDeterminingFluent(physobj)).

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e:26
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e',27).
% noninertial DamagedDeterminingFluent
==> noninertial(damagedDeterminingFluent).
%; agent activates bomb.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e:29
% event BombActivate(agent,bomb)
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e',29).
event(bombActivate(agent,bomb)).
==> mpred_prop(bombActivate(agent,bomb),event).
==> meta_argtypes(bombActivate(agent,bomb)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e:31
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e',32).
%; agent deactivates bomb.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e:32
% event BombDeactivate(agent,bomb)
event(bombDeactivate(agent,bomb)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e',32).
==> mpred_prop(bombDeactivate(agent,bomb),event).
==> meta_argtypes(bombDeactivate(agent,bomb)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e:34
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e',35).
%; bomb explodes.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e:35
% event BombExplode(bomb)
event(bombExplode(bomb)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e',35).
==> mpred_prop(bombExplode(bomb),event).
==> meta_argtypes(bombExplode(bomb)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e:37
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e',38).
%; bomb is activated.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e:38
% fluent BombActivated(bomb)
fluent(bombActivated(bomb)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e',38).
==> mpred_prop(bombActivated(bomb),fluent).
==> meta_argtypes(bombActivated(bomb)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e:40
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e',41).
%; The timer value of bomb is offset.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e:41
% fluent BombTimerValue(bomb,offset)
fluent(bombTimerValue(bomb,offset)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e',41).
==> mpred_prop(bombTimerValue(bomb,offset),fluent).
==> meta_argtypes(bombTimerValue(bomb,offset)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e:43
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e',44).
%; The timer value of bomb is decremented.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e:44
% event BombDecrementTimer(bomb)
event(bombDecrementTimer(bomb)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e',44).
==> mpred_prop(bombDecrementTimer(bomb),event).
==> meta_argtypes(bombDecrementTimer(bomb)).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e:46
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e',47).
%; The time delay of bomb is offset.

% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e:47
% function BombTimeDelay(bomb): offset
function(bombTimeDelay(bomb)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e',47).
==> mpred_prop(bombTimeDelay(bomb),function).
==> meta_argtypes(bombTimeDelay(bomb)).
predicate(bombTimeDelayPred(bomb,offset)).
==> mpred_prop(bombTimeDelayPred(bomb,offset),predicate).
==> meta_argtypes(bombTimeDelayPred(bomb,offset)).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e',47).

 /*  fix_axiom_head(Time) ->
       
       [ functional_predicate(bombTimeDelay, bombTimeDelayPred),
          (->),
         holds_at(functional_predicate(bombTimeDelay, bombTimeDelayPred),
                  Time)
       ].
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e',47).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(functional_predicate(bombTimeDelay, bombTimeDelayPred),
                   Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e',47).
axiom(holds_at(functional_predicate(bombTimeDelay, bombTimeDelayPred), Time),
    []).
==> resultIsa(bombTimeDelay,offset).
%; A state constraint says that a bomb has one timer
%; value at a time:
% [bomb,offset1,offset2,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e:52
% HoldsAt(BombTimerValue(bomb,offset1),time) &
% HoldsAt(BombTimerValue(bomb,offset2),time) ->
% offset1=offset2.
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e:54
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e',52).

 /*  holds_at(bombTimerValue(Bomb, Offset1), Time), holds_at(bombTimerValue(Bomb, Offset2), Time) ->
       equals(Offset1, Offset2).
 */

 /*  not(holds_at(bombTimerValue(Bomb, Offset1), Time)) :-
       holds_at(bombTimerValue(Bomb, Offset2), Time),
       not(equals(Offset1, Offset2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e',52).

 /*  [holds_at(bombTimerValue(Bomb, Offset2), Time), not(equals(Offset1, Offset2))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(bombTimerValue(Bomb, Offset1)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e',52).
axiom(holds_at(neg(bombTimerValue(Bomb, Offset1)), Time),
   
    [ holds_at(bombTimerValue(Bomb, Offset2), Time),
      not(equals(Offset1, Offset2))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e',52).

 /*  not(holds_at(bombTimerValue(Bomb, Offset2), Time)) :-
       holds_at(bombTimerValue(Bomb, Offset1), Time),
       not(equals(Offset1, Offset2)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e',52).

 /*  [holds_at(bombTimerValue(Bomb, Offset1), Time), not(equals(Offset1, Offset2))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(bombTimerValue(Bomb, Offset2)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e',52).
axiom(holds_at(neg(bombTimerValue(Bomb, Offset2)), Time),
   
    [ holds_at(bombTimerValue(Bomb, Offset1), Time),
      not(equals(Offset2, Offset1))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e:56
%; An effect axiom states that if a bomb is intact and
%; an agent activates the bomb,
%; the bomb will be activated:
% [agent,bomb,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e:60
% HoldsAt(Intact(bomb),time) ->
% Initiates(BombActivate(agent,bomb),
%           BombActivated(bomb),
%           time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e:63
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e',60).

 /*  [holds_at(intact(Bomb), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(bombActivate(Agent, Bomb),
                    bombActivated(Bomb),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e',60).
axiom(initiates(bombActivate(Agent, Bomb), bombActivated(Bomb), Time),
    [holds_at(intact(Bomb), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e:65
%; A precondition axiom states that
%; for an agent to activate a bomb,
%; the agent must be holding the bomb:
% [agent,bomb,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e:69
% Happens(BombActivate(agent,bomb),time) ->
% HoldsAt(Holding(agent,bomb),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e',69).

 /*  happens(bombActivate(Agent, Bomb), Time) ->
       holds_at(holding(Agent, Bomb), Time).
 */

 /*  holds_at(holding(Agent, Bomb), Time) :-
       happens(bombActivate(Agent, Bomb), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e',69).

 /*  [holds_at(metreqs(bombActivate(Agent, Bomb)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          requires(bombActivate(Agent, Bomb), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e',69).
axiom(requires(bombActivate(Agent, Bomb), Time),
    [holds_at(metreqs(bombActivate(Agent, Bomb)), Time)]).

 /*  [holds_at(holding(Agent, Bomb), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(metreqs(bombActivate(Agent, Bomb)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e',69).
axiom(holds_at(metreqs(bombActivate(Agent, Bomb)), Time),
    [holds_at(holding(Agent, Bomb), Time)]).

 /*  not(happens(bombActivate(Agent, Bomb), Time)) :-
       not(holds_at(holding(Agent, Bomb), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e',69).

 /*  [holds_at(neg(holding(Agent, Bomb)), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(bombActivate(Agent, Bomb), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e',69).
axiom(not(happens(bombActivate(Agent, Bomb), Time)),
    [holds_at(neg(holding(Agent, Bomb)), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e:72
%; An effect axiom states that if a bomb is intact and
%; an agent deactivates the bomb,
%; the bomb will no longer be activated:
% [agent,bomb,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e:76
% HoldsAt(Intact(bomb),time) ->
% Terminates(BombDeactivate(agent,bomb),
%            BombActivated(bomb),
%            time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e:79
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e',76).

 /*  [holds_at(intact(Bomb), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(bombDeactivate(Agent, Bomb),
                     bombActivated(Bomb),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e',76).
axiom(terminates(bombDeactivate(Agent, Bomb), bombActivated(Bomb), Time),
    [holds_at(intact(Bomb), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e:81
%; An axiom states that if a bomb explodes, the
%; bomb destroys the bomb:
% [bomb,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e:84
% Happens(BombExplode(bomb),time) ->
% Happens(Destroy(bomb,bomb),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e',84).

 /*  happens(bombExplode(Bomb), Time) ->
       happens(destroy(Bomb, Bomb), Time).
 */

 /*  happens(destroy(Bomb, Bomb), Time) :-
       happens(bombExplode(Bomb), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e',84).

 /*  [happens(bombExplode(Bomb), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(destroy(Bomb, Bomb), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e',84).
axiom(happens(destroy(Bomb, Bomb), Time),
    [happens(bombExplode(Bomb), Time)]).

 /*  not(happens(bombExplode(Bomb), Time)) :-
       not(happens(destroy(Bomb, Bomb), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e',84).

 /*  [not(happens(destroy(Bomb, Bomb), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(bombExplode(Bomb), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e',84).
axiom(not(happens(bombExplode(Bomb), Time)),
    [not(happens(destroy(Bomb, Bomb), Time))]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e:87
%; An effect axiom states that if a bomb explodes,
%; the bomb is no longer activated:
% [bomb,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e:90
% Terminates(BombExplode(bomb),BombActivated(bomb),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e',90).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(bombExplode(Bomb),
                     bombActivated(Bomb),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e',90).
axiom(terminates(bombExplode(Bomb), bombActivated(Bomb), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e:92
%; A trigger axiom states that
%; if a bomb is activated,
%; the timer value of the bomb is a timer value, and
%; the timer value is greater than zero,
%; the timer value of the bomb will be decremented:
% [bomb,offset,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e:98
% HoldsAt(BombActivated(bomb),time) &
% HoldsAt(BombTimerValue(bomb,offset),time) &
% (offset > 0) ->
% Happens(BombDecrementTimer(bomb),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e:101
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e',98).

 /*  holds_at(bombActivated(Bomb), Time), holds_at(bombTimerValue(Bomb, Offset), Time), Offset>0 ->
       happens(bombDecrementTimer(Bomb), Time).
 */

 /*  happens(bombDecrementTimer(Bomb), Time) :-
       holds_at(bombActivated(Bomb), Time),
       holds_at(bombTimerValue(Bomb, Offset), Time),
       comparison(Offset, 0, >).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e',98).

 /*  [holds_at(bombActivated(Bomb), Time), holds_at(bombTimerValue(Bomb, Offset), Time), comparison(Offset, 0, >)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(bombDecrementTimer(Bomb), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e',98).
axiom(happens(bombDecrementTimer(Bomb), Time),
   
    [ holds_at(bombActivated(Bomb), Time),
      holds_at(bombTimerValue(Bomb, Offset), Time),
      comparison(Offset, 0, >)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e',98).

 /*  not(holds_at(bombActivated(Bomb), Time)) :-
       ( holds_at(bombTimerValue(Bomb, Offset), Time),
         comparison(Offset, 0, >)
       ),
       not(happens(bombDecrementTimer(Bomb), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e',98).

 /*  [holds_at(bombTimerValue(Bomb, Offset), Time), comparison(Offset, 0, >), not(happens(bombDecrementTimer(Bomb), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(bombActivated(Bomb)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e',98).
axiom(holds_at(neg(bombActivated(Bomb)), Time),
   
    [ holds_at(bombTimerValue(Bomb, Offset), Time),
      comparison(Offset, 0, >),
      not(happens(bombDecrementTimer(Bomb), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e',98).

 /*  not(holds_at(bombTimerValue(Bomb, Offset), Time)) :-
       comparison(Offset, 0, >),
       holds_at(bombActivated(Bomb), Time),
       not(happens(bombDecrementTimer(Bomb), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e',98).

 /*  [comparison(Offset, 0, >), holds_at(bombActivated(Bomb), Time), not(happens(bombDecrementTimer(Bomb), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(bombTimerValue(Bomb, Offset)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e',98).
axiom(holds_at(neg(bombTimerValue(Bomb, Offset)), Time),
   
    [ comparison(Offset, 0, >),
      holds_at(bombActivated(Bomb), Time),
      not(happens(bombDecrementTimer(Bomb), Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e:103
%; An effect axiom states that
%; if the timer value of the bomb is a timer value and
%; the timer value of the bomb is decremented,
%; the timer value of the bomb will be the timer value minus one:
% [bomb,offset1,offset2,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e:108
% HoldsAt(BombTimerValue(bomb,offset1),time) &
% offset2 = offset1-1 ->
% Initiates(BombDecrementTimer(bomb),
%           BombTimerValue(bomb,offset2),
%           time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e:112
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e',108).

 /*  [holds_at(bombTimerValue(Bomb, Offset1), Time), equals(Offset2, Offset1-1)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          initiates(bombDecrementTimer(Bomb),
                    bombTimerValue(Bomb, Offset2),
                    Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e',108).
axiom(initiates(bombDecrementTimer(Bomb), bombTimerValue(Bomb, Offset2), Time),
   
    [ holds_at(bombTimerValue(Bomb, Offset1), Time),
      equals(Offset2, Offset1-1)
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e:114
%; An effect axiom states that
%; if the timer value of the bomb is a timer value and
%; the timer value of the bomb is decremented,
%; the timer value of the bomb will no longer be the timer value:
% [bomb,offset,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e:119
% HoldsAt(BombTimerValue(bomb,offset),time) ->
% Terminates(BombDecrementTimer(bomb),
%            BombTimerValue(bomb,offset),
%            time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e:122
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e',119).

 /*  [holds_at(bombTimerValue(Bomb, Offset), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(bombDecrementTimer(Bomb),
                     bombTimerValue(Bomb, Offset),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e',119).
axiom(terminates(bombDecrementTimer(Bomb), bombTimerValue(Bomb, Offset), Time),
    [holds_at(bombTimerValue(Bomb, Offset), Time)]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e:124
%; An effect axiom states that if a bomb explodes,
%; the bomb will no longer be activated:
% [bomb,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e:127
% Terminates(BombExplode(bomb),BombActivated(bomb),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e',127).

 /*  [] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          terminates(bombExplode(Bomb),
                     bombActivated(Bomb),
                     Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e',127).
axiom(terminates(bombExplode(Bomb), bombActivated(Bomb), Time),
    []).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e:129
%; A trigger axiom states that if the timer value
%; of a bomb is zero, the bomb will explode:
% [bomb,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e:132
% HoldsAt(BombTimerValue(bomb,0),time) ->
% Happens(BombExplode(bomb),time).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e',132).

 /*  holds_at(bombTimerValue(Bomb, 0), Time) ->
       happens(bombExplode(Bomb), Time).
 */

 /*  happens(bombExplode(Bomb), Time) :-
       holds_at(bombTimerValue(Bomb, 0), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e',132).

 /*  [holds_at(bombTimerValue(Bomb, 0), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(bombExplode(Bomb), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e',132).
axiom(happens(bombExplode(Bomb), Time),
    [holds_at(bombTimerValue(Bomb, 0), Time)]).

 /*  not(holds_at(bombTimerValue(Bomb, 0), Time)) :-
       not(happens(bombExplode(Bomb), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e',132).

 /*  [not(happens(bombExplode(Bomb), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(bombTimerValue(Bomb, 0)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e',132).
axiom(holds_at(neg(bombTimerValue(Bomb, 0)), Time),
    [not(happens(bombExplode(Bomb), Time))]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e:135
%; An axiom states that if an agent is at a location,
%; a bomb is at the location,
%; the agent is nondeterministically injured, and
%; the bomb explodes, then
%; the bomb will injure the agent:
% [agent,location,bomb,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e:141
% HoldsAt(At(agent,location),time) &
% HoldsAt(At(bomb,location),time) &
% HoldsAt(InjuredDeterminingFluent(agent),time) &
% Happens(BombExplode(bomb),time) ->
% Happens(Injure(bomb,agent),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e:145
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e',141).

 /*  holds_at(at(Agent, Location), Time), holds_at(at(Bomb, Location), Time), holds_at(injuredDeterminingFluent(Agent), Time), happens(bombExplode(Bomb), Time) ->
       happens(injure(Bomb, Agent), Time).
 */

 /*  happens(injure(Bomb, Agent), Time) :-
       holds_at(at(Agent, Location), Time),
       holds_at(at(Bomb, Location), Time),
       holds_at(injuredDeterminingFluent(Agent), Time),
       happens(bombExplode(Bomb), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e',141).

 /*  [holds_at(at(Agent, Location), Time), holds_at(at(Bomb, Location), Time), holds_at(injuredDeterminingFluent(Agent), Time), happens(bombExplode(Bomb), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(injure(Bomb, Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e',141).
axiom(happens(injure(Bomb, Agent), Time),
   
    [ holds_at(at(Agent, Location), Time),
      holds_at(at(Bomb, Location), Time),
      holds_at(injuredDeterminingFluent(Agent), Time),
      happens(bombExplode(Bomb), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e',141).

 /*  not(holds_at(at(Agent, Location), Time)) :-
       ( holds_at(at(Bomb, Location), Time),
         holds_at(injuredDeterminingFluent(Agent), Time),
         happens(bombExplode(Bomb), Time)
       ),
       not(happens(injure(Bomb, Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e',141).

 /*  [holds_at(at(Bomb, Location), Time), holds_at(injuredDeterminingFluent(Agent), Time), happens(bombExplode(Bomb), Time), not(happens(injure(Bomb, Agent), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(at(Agent, Location)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e',141).
axiom(holds_at(neg(at(Agent, Location)), Time),
   
    [ holds_at(at(Bomb, Location), Time),
      holds_at(injuredDeterminingFluent(Agent), Time),
      happens(bombExplode(Bomb), Time),
      not(happens(injure(Bomb, Agent), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e',141).

 /*  not(holds_at(at(Bomb, Location), Time)) :-
       ( holds_at(injuredDeterminingFluent(Agent), Time),
         happens(bombExplode(Bomb), Time)
       ),
       holds_at(at(Agent, Location), Time),
       not(happens(injure(Bomb, Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e',141).

 /*  [holds_at(injuredDeterminingFluent(Agent), Time), happens(bombExplode(Bomb), Time), holds_at(at(Agent, Location), Time), not(happens(injure(Bomb, Agent), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(at(Bomb, Location)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e',141).
axiom(holds_at(neg(at(Bomb, Location)), Time),
   
    [ holds_at(injuredDeterminingFluent(Agent), Time),
      happens(bombExplode(Bomb), Time),
      holds_at(at(Agent, Location), Time),
      not(happens(injure(Bomb, Agent), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e',141).

 /*  not(holds_at(injuredDeterminingFluent(Agent), Time)) :-
       happens(bombExplode(Bomb), Time),
       holds_at(at(Bomb, Location), Time),
       holds_at(at(Agent, Location), Time),
       not(happens(injure(Bomb, Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e',141).

 /*  [happens(bombExplode(Bomb), Time), holds_at(at(Bomb, Location), Time), holds_at(at(Agent, Location), Time), not(happens(injure(Bomb, Agent), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(injuredDeterminingFluent(Agent)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e',141).
axiom(holds_at(neg(injuredDeterminingFluent(Agent)), Time),
   
    [ happens(bombExplode(Bomb), Time),
      holds_at(at(Bomb, Location), Time),
      holds_at(at(Agent, Location), Time),
      not(happens(injure(Bomb, Agent), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e',141).

 /*  not(happens(bombExplode(Bomb), Time)) :-
       holds_at(injuredDeterminingFluent(Agent), Time),
       holds_at(at(Bomb, Location), Time),
       holds_at(at(Agent, Location), Time),
       not(happens(injure(Bomb, Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e',141).

 /*  [holds_at(injuredDeterminingFluent(Agent), Time), holds_at(at(Bomb, Location), Time), holds_at(at(Agent, Location), Time), not(happens(injure(Bomb, Agent), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(bombExplode(Bomb), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e',141).
axiom(not(happens(bombExplode(Bomb), Time)),
   
    [ holds_at(injuredDeterminingFluent(Agent), Time),
      holds_at(at(Bomb, Location), Time),
      holds_at(at(Agent, Location), Time),
      not(happens(injure(Bomb, Agent), Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e:147
%; An axiom states that if an agent is at a location,
%; a bomb is at the location,
%; the agent is nondeterministically killed, and
%; the bomb explodes, then
%; the bomb will kill the agent:
% [agent,location,bomb,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e:153
% HoldsAt(At(agent,location),time) &
% HoldsAt(At(bomb,location),time) &
% HoldsAt(KilledDeterminingFluent(agent),time) &
% Happens(BombExplode(bomb),time) ->
% Happens(Kill(bomb,agent),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e:157
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e',153).

 /*  holds_at(at(Agent, Location), Time), holds_at(at(Bomb, Location), Time), holds_at(killedDeterminingFluent(Agent), Time), happens(bombExplode(Bomb), Time) ->
       happens(kill(Bomb, Agent), Time).
 */

 /*  happens(kill(Bomb, Agent), Time) :-
       holds_at(at(Agent, Location), Time),
       holds_at(at(Bomb, Location), Time),
       holds_at(killedDeterminingFluent(Agent), Time),
       happens(bombExplode(Bomb), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e',153).

 /*  [holds_at(at(Agent, Location), Time), holds_at(at(Bomb, Location), Time), holds_at(killedDeterminingFluent(Agent), Time), happens(bombExplode(Bomb), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(kill(Bomb, Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e',153).
axiom(happens(kill(Bomb, Agent), Time),
   
    [ holds_at(at(Agent, Location), Time),
      holds_at(at(Bomb, Location), Time),
      holds_at(killedDeterminingFluent(Agent), Time),
      happens(bombExplode(Bomb), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e',153).

 /*  not(holds_at(at(Agent, Location), Time)) :-
       ( holds_at(at(Bomb, Location), Time),
         holds_at(killedDeterminingFluent(Agent), Time),
         happens(bombExplode(Bomb), Time)
       ),
       not(happens(kill(Bomb, Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e',153).

 /*  [holds_at(at(Bomb, Location), Time), holds_at(killedDeterminingFluent(Agent), Time), happens(bombExplode(Bomb), Time), not(happens(kill(Bomb, Agent), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(at(Agent, Location)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e',153).
axiom(holds_at(neg(at(Agent, Location)), Time),
   
    [ holds_at(at(Bomb, Location), Time),
      holds_at(killedDeterminingFluent(Agent), Time),
      happens(bombExplode(Bomb), Time),
      not(happens(kill(Bomb, Agent), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e',153).

 /*  not(holds_at(at(Bomb, Location), Time)) :-
       ( holds_at(killedDeterminingFluent(Agent), Time),
         happens(bombExplode(Bomb), Time)
       ),
       holds_at(at(Agent, Location), Time),
       not(happens(kill(Bomb, Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e',153).

 /*  [holds_at(killedDeterminingFluent(Agent), Time), happens(bombExplode(Bomb), Time), holds_at(at(Agent, Location), Time), not(happens(kill(Bomb, Agent), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(at(Bomb, Location)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e',153).
axiom(holds_at(neg(at(Bomb, Location)), Time),
   
    [ holds_at(killedDeterminingFluent(Agent), Time),
      happens(bombExplode(Bomb), Time),
      holds_at(at(Agent, Location), Time),
      not(happens(kill(Bomb, Agent), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e',153).

 /*  not(holds_at(killedDeterminingFluent(Agent), Time)) :-
       happens(bombExplode(Bomb), Time),
       holds_at(at(Bomb, Location), Time),
       holds_at(at(Agent, Location), Time),
       not(happens(kill(Bomb, Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e',153).

 /*  [happens(bombExplode(Bomb), Time), holds_at(at(Bomb, Location), Time), holds_at(at(Agent, Location), Time), not(happens(kill(Bomb, Agent), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(killedDeterminingFluent(Agent)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e',153).
axiom(holds_at(neg(killedDeterminingFluent(Agent)), Time),
   
    [ happens(bombExplode(Bomb), Time),
      holds_at(at(Bomb, Location), Time),
      holds_at(at(Agent, Location), Time),
      not(happens(kill(Bomb, Agent), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e',153).

 /*  not(happens(bombExplode(Bomb), Time)) :-
       holds_at(killedDeterminingFluent(Agent), Time),
       holds_at(at(Bomb, Location), Time),
       holds_at(at(Agent, Location), Time),
       not(happens(kill(Bomb, Agent), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e',153).

 /*  [holds_at(killedDeterminingFluent(Agent), Time), holds_at(at(Bomb, Location), Time), holds_at(at(Agent, Location), Time), not(happens(kill(Bomb, Agent), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(bombExplode(Bomb), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e',153).
axiom(not(happens(bombExplode(Bomb), Time)),
   
    [ holds_at(killedDeterminingFluent(Agent), Time),
      holds_at(at(Bomb, Location), Time),
      holds_at(at(Agent, Location), Time),
      not(happens(kill(Bomb, Agent), Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e:159
%; An axiom states that if an physical object is at a location,
%; a bomb is at the location,
%; the physical object is nondeterministically damaged, and
%; the bomb explodes, then
%; the bomb will damage the physical object:
% [physobj,location,bomb,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e:165
% HoldsAt(At(physobj,location),time) &
% HoldsAt(At(bomb,location),time) &
% HoldsAt(DamagedDeterminingFluent(physobj),time) &
% Happens(BombExplode(bomb),time) ->
% Happens(Damage(bomb,physobj),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e:169
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e',165).

 /*  holds_at(at(Physobj, Location), Time), holds_at(at(Bomb, Location), Time), holds_at(damagedDeterminingFluent(Physobj), Time), happens(bombExplode(Bomb), Time) ->
       happens(damage(Bomb, Physobj), Time).
 */

 /*  happens(damage(Bomb, Physobj), Time) :-
       holds_at(at(Physobj, Location), Time),
       holds_at(at(Bomb, Location), Time),
       holds_at(damagedDeterminingFluent(Physobj), Time),
       happens(bombExplode(Bomb), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e',165).

 /*  [holds_at(at(Physobj, Location), Time), holds_at(at(Bomb, Location), Time), holds_at(damagedDeterminingFluent(Physobj), Time), happens(bombExplode(Bomb), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(damage(Bomb, Physobj), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e',165).
axiom(happens(damage(Bomb, Physobj), Time),
   
    [ holds_at(at(Physobj, Location), Time),
      holds_at(at(Bomb, Location), Time),
      holds_at(damagedDeterminingFluent(Physobj), Time),
      happens(bombExplode(Bomb), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e',165).

 /*  not(holds_at(at(Physobj, Location), Time)) :-
       ( holds_at(at(Bomb, Location), Time),
         holds_at(damagedDeterminingFluent(Physobj), Time),
         happens(bombExplode(Bomb), Time)
       ),
       not(happens(damage(Bomb, Physobj), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e',165).

 /*  [holds_at(at(Bomb, Location), Time), holds_at(damagedDeterminingFluent(Physobj), Time), happens(bombExplode(Bomb), Time), not(happens(damage(Bomb, Physobj), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(at(Physobj, Location)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e',165).
axiom(holds_at(neg(at(Physobj, Location)), Time),
   
    [ holds_at(at(Bomb, Location), Time),
      holds_at(damagedDeterminingFluent(Physobj), Time),
      happens(bombExplode(Bomb), Time),
      not(happens(damage(Bomb, Physobj), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e',165).

 /*  not(holds_at(at(Bomb, Location), Time)) :-
       ( holds_at(damagedDeterminingFluent(Physobj), Time),
         happens(bombExplode(Bomb), Time)
       ),
       holds_at(at(Physobj, Location), Time),
       not(happens(damage(Bomb, Physobj), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e',165).

 /*  [holds_at(damagedDeterminingFluent(Physobj), Time), happens(bombExplode(Bomb), Time), holds_at(at(Physobj, Location), Time), not(happens(damage(Bomb, Physobj), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(at(Bomb, Location)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e',165).
axiom(holds_at(neg(at(Bomb, Location)), Time),
   
    [ holds_at(damagedDeterminingFluent(Physobj), Time),
      happens(bombExplode(Bomb), Time),
      holds_at(at(Physobj, Location), Time),
      not(happens(damage(Bomb, Physobj), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e',165).

 /*  not(holds_at(damagedDeterminingFluent(Physobj), Time)) :-
       happens(bombExplode(Bomb), Time),
       holds_at(at(Bomb, Location), Time),
       holds_at(at(Physobj, Location), Time),
       not(happens(damage(Bomb, Physobj), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e',165).

 /*  [happens(bombExplode(Bomb), Time), holds_at(at(Bomb, Location), Time), holds_at(at(Physobj, Location), Time), not(happens(damage(Bomb, Physobj), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(damagedDeterminingFluent(Physobj)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e',165).
axiom(holds_at(neg(damagedDeterminingFluent(Physobj)), Time),
   
    [ happens(bombExplode(Bomb), Time),
      holds_at(at(Bomb, Location), Time),
      holds_at(at(Physobj, Location), Time),
      not(happens(damage(Bomb, Physobj), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e',165).

 /*  not(happens(bombExplode(Bomb), Time)) :-
       holds_at(damagedDeterminingFluent(Physobj), Time),
       holds_at(at(Bomb, Location), Time),
       holds_at(at(Physobj, Location), Time),
       not(happens(damage(Bomb, Physobj), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e',165).

 /*  [holds_at(damagedDeterminingFluent(Physobj), Time), holds_at(at(Bomb, Location), Time), holds_at(at(Physobj, Location), Time), not(happens(damage(Bomb, Physobj), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(bombExplode(Bomb), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e',165).
axiom(not(happens(bombExplode(Bomb), Time)),
   
    [ holds_at(damagedDeterminingFluent(Physobj), Time),
      holds_at(at(Bomb, Location), Time),
      holds_at(at(Physobj, Location), Time),
      not(happens(damage(Bomb, Physobj), Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e:171
%; An axiom states that if an physical object is at a location,
%; a bomb is at the location,
%; the physical object is nondeterministically destroyed, and
%; the bomb explodes, then
%; the bomb will destroy the physical object:
% [physobj,location,bomb,time]
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e:177
% HoldsAt(At(physobj,location),time) &
% HoldsAt(At(bomb,location),time) &
% HoldsAt(DestroyedDeterminingFluent(physobj),time) &
% Happens(BombExplode(bomb),time) ->
% Happens(Destroy(bomb,physobj),time).
% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e:181
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e',177).

 /*  holds_at(at(Physobj, Location), Time), holds_at(at(Bomb, Location), Time), holds_at(destroyedDeterminingFluent(Physobj), Time), happens(bombExplode(Bomb), Time) ->
       happens(destroy(Bomb, Physobj), Time).
 */

 /*  happens(destroy(Bomb, Physobj), Time) :-
       holds_at(at(Physobj, Location), Time),
       holds_at(at(Bomb, Location), Time),
       holds_at(destroyedDeterminingFluent(Physobj), Time),
       happens(bombExplode(Bomb), Time).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e',177).

 /*  [holds_at(at(Physobj, Location), Time), holds_at(at(Bomb, Location), Time), holds_at(destroyedDeterminingFluent(Physobj), Time), happens(bombExplode(Bomb), Time)] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          happens(destroy(Bomb, Physobj), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e',177).
axiom(happens(destroy(Bomb, Physobj), Time),
   
    [ holds_at(at(Physobj, Location), Time),
      holds_at(at(Bomb, Location), Time),
      holds_at(destroyedDeterminingFluent(Physobj), Time),
      happens(bombExplode(Bomb), Time)
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e',177).

 /*  not(holds_at(at(Physobj, Location), Time)) :-
       ( holds_at(at(Bomb, Location), Time),
         holds_at(destroyedDeterminingFluent(Physobj), Time),
         happens(bombExplode(Bomb), Time)
       ),
       not(happens(destroy(Bomb, Physobj), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e',177).

 /*  [holds_at(at(Bomb, Location), Time), holds_at(destroyedDeterminingFluent(Physobj), Time), happens(bombExplode(Bomb), Time), not(happens(destroy(Bomb, Physobj), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(at(Physobj, Location)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e',177).
axiom(holds_at(neg(at(Physobj, Location)), Time),
   
    [ holds_at(at(Bomb, Location), Time),
      holds_at(destroyedDeterminingFluent(Physobj), Time),
      happens(bombExplode(Bomb), Time),
      not(happens(destroy(Bomb, Physobj), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e',177).

 /*  not(holds_at(at(Bomb, Location), Time)) :-
       ( holds_at(destroyedDeterminingFluent(Physobj), Time),
         happens(bombExplode(Bomb), Time)
       ),
       holds_at(at(Physobj, Location), Time),
       not(happens(destroy(Bomb, Physobj), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e',177).

 /*  [holds_at(destroyedDeterminingFluent(Physobj), Time), happens(bombExplode(Bomb), Time), holds_at(at(Physobj, Location), Time), not(happens(destroy(Bomb, Physobj), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(at(Bomb, Location)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e',177).
axiom(holds_at(neg(at(Bomb, Location)), Time),
   
    [ holds_at(destroyedDeterminingFluent(Physobj), Time),
      happens(bombExplode(Bomb), Time),
      holds_at(at(Physobj, Location), Time),
      not(happens(destroy(Bomb, Physobj), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e',177).

 /*  not(holds_at(destroyedDeterminingFluent(Physobj), Time)) :-
       happens(bombExplode(Bomb), Time),
       holds_at(at(Bomb, Location), Time),
       holds_at(at(Physobj, Location), Time),
       not(happens(destroy(Bomb, Physobj), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e',177).

 /*  [happens(bombExplode(Bomb), Time), holds_at(at(Bomb, Location), Time), holds_at(at(Physobj, Location), Time), not(happens(destroy(Bomb, Physobj), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          holds_at(neg(destroyedDeterminingFluent(Physobj)), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e',177).
axiom(holds_at(neg(destroyedDeterminingFluent(Physobj)), Time),
   
    [ happens(bombExplode(Bomb), Time),
      holds_at(at(Bomb, Location), Time),
      holds_at(at(Physobj, Location), Time),
      not(happens(destroy(Bomb, Physobj), Time))
    ]).
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e',177).

 /*  not(happens(bombExplode(Bomb), Time)) :-
       holds_at(destroyedDeterminingFluent(Physobj), Time),
       holds_at(at(Bomb, Location), Time),
       holds_at(at(Physobj, Location), Time),
       not(happens(destroy(Bomb, Physobj), Time)).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e',177).

 /*  [holds_at(destroyedDeterminingFluent(Physobj), Time), holds_at(at(Bomb, Location), Time), holds_at(at(Physobj, Location), Time), not(happens(destroy(Bomb, Physobj), Time))] ->
       ta(Time,
          tvs1=[Time],
          tvs2=[Time],
          not(happens(bombExplode(Bomb), Time))).
 */
:-was_s_l('/opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e',177).
axiom(not(happens(bombExplode(Bomb), Time)),
   
    [ holds_at(destroyedDeterminingFluent(Physobj), Time),
      holds_at(at(Bomb, Location), Time),
      holds_at(at(Physobj, Location), Time),
      not(happens(destroy(Bomb, Physobj), Time))
    ]).


% From /opt/logicmoo_workspace/packs_sys/logicmoo_nlu/prolog/ec_planner/ecnet/Bomb.e:183
%; End of file.
